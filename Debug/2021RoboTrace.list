
2021RoboTrace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a51c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d84  0801a6e0  0801a6e0  0002a6e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b464  0801b464  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  0801b464  0801b464  0002b464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b46c  0801b46c  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801b46c  0801b46c  0002b46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b474  0801b474  0002b474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0801b478  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00041c84  200001e0  0801b658  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  20041e64  0801b658  00031e64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f932  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008892  00000000  00000000  0006fb42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023a8  00000000  00000000  000783d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020d8  00000000  00000000  0007a780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035cc0  00000000  00000000  0007c858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031944  00000000  00000000  000b2518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112be8  00000000  00000000  000e3e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f6a44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000af40  00000000  00000000  001f6a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801a6c4 	.word	0x0801a6c4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	0801a6c4 	.word	0x0801a6c4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af02      	add	r7, sp, #8
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8001026:	2300      	movs	r3, #0
 8001028:	733b      	strb	r3, [r7, #12]
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 800102e:	f107 020c 	add.w	r2, r7, #12
 8001032:	2364      	movs	r3, #100	; 0x64
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2302      	movs	r3, #2
 8001038:	217c      	movs	r1, #124	; 0x7c
 800103a:	4803      	ldr	r0, [pc, #12]	; (8001048 <lcd_cmd+0x2c>)
 800103c:	f00a f894 	bl	800b168 <HAL_I2C_Master_Transmit>
}
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2003f94c 	.word	0x2003f94c

0800104c <lcd_data>:

void lcd_data(uint8_t data) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af02      	add	r7, sp, #8
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8001056:	2340      	movs	r3, #64	; 0x40
 8001058:	733b      	strb	r3, [r7, #12]
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 800105e:	f107 020c 	add.w	r2, r7, #12
 8001062:	2364      	movs	r3, #100	; 0x64
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2302      	movs	r3, #2
 8001068:	217c      	movs	r1, #124	; 0x7c
 800106a:	4803      	ldr	r0, [pc, #12]	; (8001078 <lcd_data+0x2c>)
 800106c:	f00a f87c 	bl	800b168 <HAL_I2C_Master_Transmit>
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2003f94c 	.word	0x2003f94c

0800107c <lcd_init>:

void lcd_init(){
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 8001080:	2201      	movs	r2, #1
 8001082:	2110      	movs	r1, #16
 8001084:	481e      	ldr	r0, [pc, #120]	; (8001100 <lcd_init+0x84>)
 8001086:	f009 ff11 	bl	800aeac <HAL_GPIO_WritePin>
	HAL_Delay(40);
 800108a:	2028      	movs	r0, #40	; 0x28
 800108c:	f008 fc72 	bl	8009974 <HAL_Delay>
	lcd_cmd(0x38);
 8001090:	2038      	movs	r0, #56	; 0x38
 8001092:	f7ff ffc3 	bl	800101c <lcd_cmd>
	HAL_Delay(1);
 8001096:	2001      	movs	r0, #1
 8001098:	f008 fc6c 	bl	8009974 <HAL_Delay>
	lcd_cmd(0x39);
 800109c:	2039      	movs	r0, #57	; 0x39
 800109e:	f7ff ffbd 	bl	800101c <lcd_cmd>
	HAL_Delay(1);
 80010a2:	2001      	movs	r0, #1
 80010a4:	f008 fc66 	bl	8009974 <HAL_Delay>
	lcd_cmd(0x14);
 80010a8:	2014      	movs	r0, #20
 80010aa:	f7ff ffb7 	bl	800101c <lcd_cmd>
	HAL_Delay(1);
 80010ae:	2001      	movs	r0, #1
 80010b0:	f008 fc60 	bl	8009974 <HAL_Delay>
	lcd_cmd(0x70);
 80010b4:	2070      	movs	r0, #112	; 0x70
 80010b6:	f7ff ffb1 	bl	800101c <lcd_cmd>
	HAL_Delay(1);
 80010ba:	2001      	movs	r0, #1
 80010bc:	f008 fc5a 	bl	8009974 <HAL_Delay>
	lcd_cmd(0x56);
 80010c0:	2056      	movs	r0, #86	; 0x56
 80010c2:	f7ff ffab 	bl	800101c <lcd_cmd>
	HAL_Delay(1);
 80010c6:	2001      	movs	r0, #1
 80010c8:	f008 fc54 	bl	8009974 <HAL_Delay>
	lcd_cmd(0x6C);
 80010cc:	206c      	movs	r0, #108	; 0x6c
 80010ce:	f7ff ffa5 	bl	800101c <lcd_cmd>
	HAL_Delay(200);
 80010d2:	20c8      	movs	r0, #200	; 0xc8
 80010d4:	f008 fc4e 	bl	8009974 <HAL_Delay>
	lcd_cmd(0x38);
 80010d8:	2038      	movs	r0, #56	; 0x38
 80010da:	f7ff ff9f 	bl	800101c <lcd_cmd>
	HAL_Delay(1);
 80010de:	2001      	movs	r0, #1
 80010e0:	f008 fc48 	bl	8009974 <HAL_Delay>
	lcd_cmd(0x0C);
 80010e4:	200c      	movs	r0, #12
 80010e6:	f7ff ff99 	bl	800101c <lcd_cmd>
	HAL_Delay(1);
 80010ea:	2001      	movs	r0, #1
 80010ec:	f008 fc42 	bl	8009974 <HAL_Delay>
	lcd_cmd(0x01);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f7ff ff93 	bl	800101c <lcd_cmd>
	HAL_Delay(1);
 80010f6:	2001      	movs	r0, #1
 80010f8:	f008 fc3c 	bl	8009974 <HAL_Delay>
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40020000 	.word	0x40020000

08001104 <lcd_clear>:

void lcd_clear(){
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 8001108:	2001      	movs	r0, #1
 800110a:	f7ff ff87 	bl	800101c <lcd_cmd>
	HAL_Delay(1);
 800110e:	2001      	movs	r0, #1
 8001110:	f008 fc30 	bl	8009974 <HAL_Delay>
	lcd_cmd(0x02);
 8001114:	2002      	movs	r0, #2
 8001116:	f7ff ff81 	bl	800101c <lcd_cmd>
	HAL_Delay(1);
 800111a:	2001      	movs	r0, #1
 800111c:	f008 fc2a 	bl	8009974 <HAL_Delay>
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}

08001124 <lcd_locate>:

void lcd_locate(int x, int y) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	3302      	adds	r3, #2
 8001132:	b2db      	uxtb	r3, r3
 8001134:	019b      	lsls	r3, r3, #6
 8001136:	b2da      	uxtb	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4413      	add	r3, r2
 800113e:	b2db      	uxtb	r3, r3
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff6b 	bl	800101c <lcd_cmd>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <lcd_print>:

void lcd_print(const char *str) {
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 8001156:	e007      	b.n	8001168 <lcd_print+0x1a>
	{
			lcd_data(*str);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff75 	bl	800104c <lcd_data>
			str++;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3301      	adds	r3, #1
 8001166:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f3      	bne.n	8001158 <lcd_print+0xa>
	}
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <lcd_printf>:

short lcd_printf(const char *format, ...) {
 800117a:	b40f      	push	{r0, r1, r2, r3}
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 8001182:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001186:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800118e:	4618      	mov	r0, r3
 8001190:	f015 fffe 	bl	8017190 <vsiprintf>
 8001194:	4603      	mov	r3, r0
 8001196:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001198:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800119c:	2b00      	cmp	r3, #0
 800119e:	dd03      	ble.n	80011a8 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ffd3 	bl	800114e <lcd_print>
	}

	return ret;
 80011a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011b6:	b004      	add	sp, #16
 80011b8:	4770      	bx	lr

080011ba <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8001218:	213c      	movs	r1, #60	; 0x3c
 800121a:	4809      	ldr	r0, [pc, #36]	; (8001240 <_ZN7Encoder4initEv+0x30>)
 800121c:	f00d fe44 	bl	800eea8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001220:	213c      	movs	r1, #60	; 0x3c
 8001222:	4808      	ldr	r0, [pc, #32]	; (8001244 <_ZN7Encoder4initEv+0x34>)
 8001224:	f00d fe40 	bl	800eea8 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN7Encoder4initEv+0x38>)
 800122a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800122e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN7Encoder4initEv+0x3c>)
 8001232:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001236:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2003fba0 	.word	0x2003fba0
 8001244:	2003f884 	.word	0x2003f884
 8001248:	40010000 	.word	0x40010000
 800124c:	40010400 	.word	0x40010400

08001250 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001250:	b5b0      	push	{r4, r5, r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001258:	4b69      	ldr	r3, [pc, #420]	; (8001400 <_ZN7Encoder6updateEv+0x1b0>)
 800125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125c:	ee07 3a90 	vmov	s15, r3
 8001260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001264:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001404 <_ZN7Encoder6updateEv+0x1b4>
 8001268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800126c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001408 <_ZN7Encoder6updateEv+0x1b8>
 8001270:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001274:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001278:	4b64      	ldr	r3, [pc, #400]	; (800140c <_ZN7Encoder6updateEv+0x1bc>)
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001284:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001404 <_ZN7Encoder6updateEv+0x1b4>
 8001288:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800128c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001408 <_ZN7Encoder6updateEv+0x1b8>
 8001290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001294:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001298:	4a5d      	ldr	r2, [pc, #372]	; (8001410 <_ZN7Encoder6updateEv+0x1c0>)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f7ff f96a 	bl	8000578 <__aeabi_f2d>
 80012a4:	a350      	add	r3, pc, #320	; (adr r3, 80013e8 <_ZN7Encoder6updateEv+0x198>)
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	f7ff f9bd 	bl	8000628 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4614      	mov	r4, r2
 80012b4:	461d      	mov	r5, r3
 80012b6:	4b57      	ldr	r3, [pc, #348]	; (8001414 <_ZN7Encoder6updateEv+0x1c4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f95c 	bl	8000578 <__aeabi_f2d>
 80012c0:	a34b      	add	r3, pc, #300	; (adr r3, 80013f0 <_ZN7Encoder6updateEv+0x1a0>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7ff f9af 	bl	8000628 <__aeabi_dmul>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4620      	mov	r0, r4
 80012d0:	4629      	mov	r1, r5
 80012d2:	f7fe fff3 	bl	80002bc <__adddf3>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fc9b 	bl	8000c18 <__aeabi_d2f>
 80012e2:	4602      	mov	r2, r0
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 80012e8:	68b8      	ldr	r0, [r7, #8]
 80012ea:	f7ff f945 	bl	8000578 <__aeabi_f2d>
 80012ee:	a33e      	add	r3, pc, #248	; (adr r3, 80013e8 <_ZN7Encoder6updateEv+0x198>)
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	f7ff f998 	bl	8000628 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4614      	mov	r4, r2
 80012fe:	461d      	mov	r5, r3
 8001300:	4b45      	ldr	r3, [pc, #276]	; (8001418 <_ZN7Encoder6updateEv+0x1c8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f937 	bl	8000578 <__aeabi_f2d>
 800130a:	a339      	add	r3, pc, #228	; (adr r3, 80013f0 <_ZN7Encoder6updateEv+0x1a0>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f7ff f98a 	bl	8000628 <__aeabi_dmul>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4620      	mov	r0, r4
 800131a:	4629      	mov	r1, r5
 800131c:	f7fe ffce 	bl	80002bc <__adddf3>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	f7ff fc76 	bl	8000c18 <__aeabi_d2f>
 800132c:	4602      	mov	r2, r0
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a39      	ldr	r2, [pc, #228]	; (800141c <_ZN7Encoder6updateEv+0x1cc>)
 8001338:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a35      	ldr	r2, [pc, #212]	; (8001414 <_ZN7Encoder6updateEv+0x1c4>)
 8001340:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4a34      	ldr	r2, [pc, #208]	; (8001418 <_ZN7Encoder6updateEv+0x1c8>)
 8001348:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	ed93 7a00 	vldr	s14, [r3]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	edd3 7a01 	vldr	s15, [r3, #4]
 8001356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135a:	ee17 0a90 	vmov	r0, s15
 800135e:	f7ff f90b 	bl	8000578 <__aeabi_f2d>
 8001362:	a325      	add	r3, pc, #148	; (adr r3, 80013f8 <_ZN7Encoder6updateEv+0x1a8>)
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	f7ff f95e 	bl	8000628 <__aeabi_dmul>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4610      	mov	r0, r2
 8001372:	4619      	mov	r1, r3
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800137c:	f7ff fa7e 	bl	800087c <__aeabi_ddiv>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	f7ff fc46 	bl	8000c18 <__aeabi_d2f>
 800138c:	4602      	mov	r2, r0
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	ed93 7a05 	vldr	s14, [r3, #20]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	edd3 7a02 	vldr	s15, [r3, #8]
 800139e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	ed93 7a06 	vldr	s14, [r3, #24]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80013b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	ed93 7a07 	vldr	s14, [r3, #28]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80013ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	4a11      	ldr	r2, [pc, #68]	; (8001420 <_ZN7Encoder6updateEv+0x1d0>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bdb0      	pop	{r4, r5, r7, pc}
 80013e4:	f3af 8000 	nop.w
 80013e8:	9999999a 	.word	0x9999999a
 80013ec:	3fa99999 	.word	0x3fa99999
 80013f0:	66666666 	.word	0x66666666
 80013f4:	3fee6666 	.word	0x3fee6666
 80013f8:	ce73a049 	.word	0xce73a049
 80013fc:	3f77a3f6 	.word	0x3f77a3f6
 8001400:	40010000 	.word	0x40010000
 8001404:	47000000 	.word	0x47000000
 8001408:	3f912547 	.word	0x3f912547
 800140c:	40010400 	.word	0x40010400
 8001410:	20000200 	.word	0x20000200
 8001414:	20000208 	.word	0x20000208
 8001418:	2000020c 	.word	0x2000020c
 800141c:	20000204 	.word	0x20000204
 8001420:	200001fc 	.word	0x200001fc

08001424 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <_ZN7Encoder5clearEv+0x3c>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <_ZN7Encoder5clearEv+0x40>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	40010000 	.word	0x40010000
 8001464:	40010400 	.word	0x40010400

08001468 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	601a      	str	r2, [r3, #0]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	return distance_;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	ee07 3a90 	vmov	s15, r3
}
 80014a0:	eeb0 0a67 	vmov.f32	s0, s15
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	ee07 3a90 	vmov	s15, r3
}
 80014be:	eeb0 0a67 	vmov.f32	s0, s15
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	ee07 3a90 	vmov	s15, r3
}
 80014dc:	eeb0 0a67 	vmov.f32	s0, s15
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	619a      	str	r2, [r3, #24]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	ee07 3a90 	vmov	s15, r3
}
 8001550:	eeb0 0a67 	vmov.f32	s0, s15
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af02      	add	r7, sp, #8
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	4613      	mov	r3, r2
 800158a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f000 f900 	bl	8001798 <create_path>

	if(state == OVER_WRITE){
 8001598:	f897 3020 	ldrb.w	r3, [r7, #32]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d108      	bne.n	80015b2 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80015a0:	4822      	ldr	r0, [pc, #136]	; (800162c <sd_write_array_float+0xb0>)
 80015a2:	f012 fa2f 	bl	8013a04 <f_chdir>
		f_unlink(filepath);	//	一回消す
 80015a6:	4822      	ldr	r0, [pc, #136]	; (8001630 <sd_write_array_float+0xb4>)
 80015a8:	f012 fc9a 	bl	8013ee0 <f_unlink>
		f_chdir("..");
 80015ac:	4821      	ldr	r0, [pc, #132]	; (8001634 <sd_write_array_float+0xb8>)
 80015ae:	f012 fa29 	bl	8013a04 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80015b2:	f000 f90b 	bl	80017cc <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80015b6:	2300      	movs	r3, #0
 80015b8:	82fb      	strh	r3, [r7, #22]
 80015ba:	e028      	b.n	800160e <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80015bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	4413      	add	r3, r2
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ffd5 	bl	8000578 <__aeabi_f2d>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	e9cd 2300 	strd	r2, r3, [sp]
 80015d6:	4a18      	ldr	r2, [pc, #96]	; (8001638 <sd_write_array_float+0xbc>)
 80015d8:	2180      	movs	r1, #128	; 0x80
 80015da:	4818      	ldr	r0, [pc, #96]	; (800163c <sd_write_array_float+0xc0>)
 80015dc:	f014 fe4a 	bl	8016274 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80015e0:	4b17      	ldr	r3, [pc, #92]	; (8001640 <sd_write_array_float+0xc4>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	4619      	mov	r1, r3
 80015e6:	4816      	ldr	r0, [pc, #88]	; (8001640 <sd_write_array_float+0xc4>)
 80015e8:	f012 fa56 	bl	8013a98 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80015ec:	4813      	ldr	r0, [pc, #76]	; (800163c <sd_write_array_float+0xc0>)
 80015ee:	f7fe fe07 	bl	8000200 <strlen>
 80015f2:	4602      	mov	r2, r0
 80015f4:	4b13      	ldr	r3, [pc, #76]	; (8001644 <sd_write_array_float+0xc8>)
 80015f6:	4911      	ldr	r1, [pc, #68]	; (800163c <sd_write_array_float+0xc0>)
 80015f8:	4811      	ldr	r0, [pc, #68]	; (8001640 <sd_write_array_float+0xc4>)
 80015fa:	f011 ffc4 	bl	8013586 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80015fe:	f000 f8ff 	bl	8001800 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001602:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001606:	b29b      	uxth	r3, r3
 8001608:	3301      	adds	r3, #1
 800160a:	b29b      	uxth	r3, r3
 800160c:	82fb      	strh	r3, [r7, #22]
 800160e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001616:	429a      	cmp	r2, r3
 8001618:	dbd0      	blt.n	80015bc <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800161a:	4809      	ldr	r0, [pc, #36]	; (8001640 <sd_write_array_float+0xc4>)
 800161c:	f012 f9c8 	bl	80139b0 <f_close>

	return ret;
 8001620:	7d7b      	ldrb	r3, [r7, #21]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	2003e600 	.word	0x2003e600
 8001630:	2003d4c0 	.word	0x2003d4c0
 8001634:	0801a6fc 	.word	0x0801a6fc
 8001638:	0801a6e0 	.word	0x0801a6e0
 800163c:	2003e700 	.word	0x2003e700
 8001640:	2003e790 	.word	0x2003e790
 8001644:	2003e780 	.word	0x2003e780

08001648 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	4613      	mov	r3, r2
 8001656:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 f898 	bl	8001798 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001668:	f000 f8b0 	bl	80017cc <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800166c:	e019      	b.n	80016a2 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800166e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	4413      	add	r3, r2
 8001678:	461a      	mov	r2, r3
 800167a:	4913      	ldr	r1, [pc, #76]	; (80016c8 <sd_read_array_float+0x80>)
 800167c:	4813      	ldr	r0, [pc, #76]	; (80016cc <sd_read_array_float+0x84>)
 800167e:	f014 fe4d 	bl	801631c <siscanf>
		i++;
 8001682:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001686:	b29b      	uxth	r3, r3
 8001688:	3301      	adds	r3, #1
 800168a:	b29b      	uxth	r3, r3
 800168c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800168e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001696:	429a      	cmp	r2, r3
 8001698:	db03      	blt.n	80016a2 <sd_read_array_float+0x5a>
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	3b01      	subs	r3, #1
 800169e:	b29b      	uxth	r3, r3
 80016a0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016a2:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <sd_read_array_float+0x88>)
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	4809      	ldr	r0, [pc, #36]	; (80016cc <sd_read_array_float+0x84>)
 80016a8:	f012 fdf8 	bl	801429c <f_gets>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1dd      	bne.n	800166e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80016b2:	f000 f8a5 	bl	8001800 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80016b6:	4806      	ldr	r0, [pc, #24]	; (80016d0 <sd_read_array_float+0x88>)
 80016b8:	f012 f97a 	bl	80139b0 <f_close>

	return ret;
 80016bc:	7d7b      	ldrb	r3, [r7, #21]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	0801a6ec 	.word	0x0801a6ec
 80016cc:	2003e700 	.word	0x2003e700
 80016d0:	2003e790 	.word	0x2003e790

080016d4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	4613      	mov	r3, r2
 80016e2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f000 f852 	bl	8001798 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016f4:	f000 f86a 	bl	80017cc <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016f8:	e019      	b.n	800172e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80016fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	4413      	add	r3, r2
 8001704:	461a      	mov	r2, r3
 8001706:	4913      	ldr	r1, [pc, #76]	; (8001754 <sd_read_array_double+0x80>)
 8001708:	4813      	ldr	r0, [pc, #76]	; (8001758 <sd_read_array_double+0x84>)
 800170a:	f014 fe07 	bl	801631c <siscanf>
		i++;
 800170e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001712:	b29b      	uxth	r3, r3
 8001714:	3301      	adds	r3, #1
 8001716:	b29b      	uxth	r3, r3
 8001718:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800171a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800171e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001722:	429a      	cmp	r2, r3
 8001724:	db03      	blt.n	800172e <sd_read_array_double+0x5a>
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	3b01      	subs	r3, #1
 800172a:	b29b      	uxth	r3, r3
 800172c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <sd_read_array_double+0x88>)
 8001730:	2180      	movs	r1, #128	; 0x80
 8001732:	4809      	ldr	r0, [pc, #36]	; (8001758 <sd_read_array_double+0x84>)
 8001734:	f012 fdb2 	bl	801429c <f_gets>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1dd      	bne.n	80016fa <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800173e:	f000 f85f 	bl	8001800 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001742:	4806      	ldr	r0, [pc, #24]	; (800175c <sd_read_array_double+0x88>)
 8001744:	f012 f934 	bl	80139b0 <f_close>

	return ret;
 8001748:	7d7b      	ldrb	r3, [r7, #21]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	0801a6f8 	.word	0x0801a6f8
 8001758:	2003e700 	.word	0x2003e700
 800175c:	2003e790 	.word	0x2003e790

08001760 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 800176a:	2201      	movs	r2, #1
 800176c:	4908      	ldr	r1, [pc, #32]	; (8001790 <sd_mount+0x30>)
 800176e:	4809      	ldr	r0, [pc, #36]	; (8001794 <sd_mount+0x34>)
 8001770:	f011 fb96 	bl	8012ea0 <f_mount>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d102      	bne.n	8001780 <sd_mount+0x20>
 800177a:	2301      	movs	r3, #1
 800177c:	71fb      	strb	r3, [r7, #7]
 800177e:	e001      	b.n	8001784 <sd_mount+0x24>
	else ret = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001784:	79fb      	ldrb	r3, [r7, #7]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	0801a708 	.word	0x0801a708
 8001794:	2003d5c0 	.word	0x2003d5c0

08001798 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	4906      	ldr	r1, [pc, #24]	; (80017c0 <create_path+0x28>)
 80017a6:	4807      	ldr	r0, [pc, #28]	; (80017c4 <create_path+0x2c>)
 80017a8:	f014 fd98 	bl	80162dc <siprintf>

	sprintf(filepath, "%s", p_file_name);
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	4904      	ldr	r1, [pc, #16]	; (80017c0 <create_path+0x28>)
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <create_path+0x30>)
 80017b2:	f014 fd93 	bl	80162dc <siprintf>

}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	0801a70c 	.word	0x0801a70c
 80017c4:	2003e600 	.word	0x2003e600
 80017c8:	2003d4c0 	.word	0x2003d4c0

080017cc <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 80017d0:	4807      	ldr	r0, [pc, #28]	; (80017f0 <fopen_folder_and_file+0x24>)
 80017d2:	f012 fc47 	bl	8014064 <f_mkdir>

	f_chdir(dirpath);
 80017d6:	4806      	ldr	r0, [pc, #24]	; (80017f0 <fopen_folder_and_file+0x24>)
 80017d8:	f012 f914 	bl	8013a04 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80017dc:	2213      	movs	r2, #19
 80017de:	4905      	ldr	r1, [pc, #20]	; (80017f4 <fopen_folder_and_file+0x28>)
 80017e0:	4805      	ldr	r0, [pc, #20]	; (80017f8 <fopen_folder_and_file+0x2c>)
 80017e2:	f011 fba3 	bl	8012f2c <f_open>

	f_chdir("..");
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <fopen_folder_and_file+0x30>)
 80017e8:	f012 f90c 	bl	8013a04 <f_chdir>


}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	2003e600 	.word	0x2003e600
 80017f4:	2003d4c0 	.word	0x2003d4c0
 80017f8:	2003e790 	.word	0x2003e790
 80017fc:	0801a6fc 	.word	0x0801a6fc

08001800 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	e007      	b.n	800181c <bufclear+0x1c>
		buffer[i] = '\0';
 800180c:	4a08      	ldr	r2, [pc, #32]	; (8001830 <bufclear+0x30>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3301      	adds	r3, #1
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b7f      	cmp	r3, #127	; 0x7f
 8001820:	ddf4      	ble.n	800180c <bufclear+0xc>
	}
}
 8001822:	bf00      	nop
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	2003e700 	.word	0x2003e700

08001834 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001844:	b2db      	uxtb	r3, r3
 8001846:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001848:	2200      	movs	r2, #0
 800184a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800184e:	480e      	ldr	r0, [pc, #56]	; (8001888 <read_byte+0x54>)
 8001850:	f009 fb2c 	bl	800aeac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001854:	f107 010f 	add.w	r1, r7, #15
 8001858:	2364      	movs	r3, #100	; 0x64
 800185a:	2201      	movs	r2, #1
 800185c:	480b      	ldr	r0, [pc, #44]	; (800188c <read_byte+0x58>)
 800185e:	f00c fce9 	bl	800e234 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001862:	f107 010e 	add.w	r1, r7, #14
 8001866:	2364      	movs	r3, #100	; 0x64
 8001868:	2201      	movs	r2, #1
 800186a:	4808      	ldr	r0, [pc, #32]	; (800188c <read_byte+0x58>)
 800186c:	f00c fe16 	bl	800e49c <HAL_SPI_Receive>
	CS_SET;
 8001870:	2201      	movs	r2, #1
 8001872:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001876:	4804      	ldr	r0, [pc, #16]	; (8001888 <read_byte+0x54>)
 8001878:	f009 fb18 	bl	800aeac <HAL_GPIO_WritePin>

	return val;
 800187c:	7bbb      	ldrb	r3, [r7, #14]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40020400 	.word	0x40020400
 800188c:	2003f82c 	.word	0x2003f82c

08001890 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	460a      	mov	r2, r1
 800189a:	71fb      	strb	r3, [r7, #7]
 800189c:	4613      	mov	r3, r2
 800189e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b0:	480c      	ldr	r0, [pc, #48]	; (80018e4 <write_byte+0x54>)
 80018b2:	f009 fafb 	bl	800aeac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018b6:	f107 010f 	add.w	r1, r7, #15
 80018ba:	2364      	movs	r3, #100	; 0x64
 80018bc:	2201      	movs	r2, #1
 80018be:	480a      	ldr	r0, [pc, #40]	; (80018e8 <write_byte+0x58>)
 80018c0:	f00c fcb8 	bl	800e234 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 80018c4:	1db9      	adds	r1, r7, #6
 80018c6:	2364      	movs	r3, #100	; 0x64
 80018c8:	2201      	movs	r2, #1
 80018ca:	4807      	ldr	r0, [pc, #28]	; (80018e8 <write_byte+0x58>)
 80018cc:	f00c fcb2 	bl	800e234 <HAL_SPI_Transmit>
	CS_SET;
 80018d0:	2201      	movs	r2, #1
 80018d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018d6:	4803      	ldr	r0, [pc, #12]	; (80018e4 <write_byte+0x54>)
 80018d8:	f009 fae8 	bl	800aeac <HAL_GPIO_WritePin>
}
 80018dc:	bf00      	nop
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40020400 	.word	0x40020400
 80018e8:	2003f82c 	.word	0x2003f82c

080018ec <IMU_init>:

uint16_t IMU_init() {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 80018f6:	2000      	movs	r0, #0
 80018f8:	f7ff ff9c 	bl	8001834 <read_byte>
 80018fc:	4603      	mov	r3, r0
 80018fe:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001900:	797b      	ldrb	r3, [r7, #5]
 8001902:	2be0      	cmp	r3, #224	; 0xe0
 8001904:	d119      	bne.n	800193a <IMU_init+0x4e>
		ret = 1;
 8001906:	2301      	movs	r3, #1
 8001908:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800190a:	2101      	movs	r1, #1
 800190c:	2006      	movs	r0, #6
 800190e:	f7ff ffbf 	bl	8001890 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001912:	2110      	movs	r1, #16
 8001914:	2003      	movs	r0, #3
 8001916:	f7ff ffbb 	bl	8001890 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800191a:	2120      	movs	r1, #32
 800191c:	207f      	movs	r0, #127	; 0x7f
 800191e:	f7ff ffb7 	bl	8001890 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001922:	2106      	movs	r1, #6
 8001924:	2001      	movs	r0, #1
 8001926:	f7ff ffb3 	bl	8001890 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 800192a:	2106      	movs	r1, #6
 800192c:	2014      	movs	r0, #20
 800192e:	f7ff ffaf 	bl	8001890 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001932:	2100      	movs	r1, #0
 8001934:	207f      	movs	r0, #127	; 0x7f
 8001936:	f7ff ffab 	bl	8001890 <write_byte>
	}
	return ret;
 800193a:	88fb      	ldrh	r3, [r7, #6]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <read_gyro_data>:

void read_gyro_data() {
 8001944:	b598      	push	{r3, r4, r7, lr}
 8001946:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001948:	2033      	movs	r0, #51	; 0x33
 800194a:	f7ff ff73 	bl	8001834 <read_byte>
 800194e:	4603      	mov	r3, r0
 8001950:	021b      	lsls	r3, r3, #8
 8001952:	b21c      	sxth	r4, r3
 8001954:	2034      	movs	r0, #52	; 0x34
 8001956:	f7ff ff6d 	bl	8001834 <read_byte>
 800195a:	4603      	mov	r3, r0
 800195c:	b21b      	sxth	r3, r3
 800195e:	4323      	orrs	r3, r4
 8001960:	b21a      	sxth	r2, r3
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <read_gyro_data+0x64>)
 8001964:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001966:	2035      	movs	r0, #53	; 0x35
 8001968:	f7ff ff64 	bl	8001834 <read_byte>
 800196c:	4603      	mov	r3, r0
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	b21c      	sxth	r4, r3
 8001972:	2036      	movs	r0, #54	; 0x36
 8001974:	f7ff ff5e 	bl	8001834 <read_byte>
 8001978:	4603      	mov	r3, r0
 800197a:	b21b      	sxth	r3, r3
 800197c:	4323      	orrs	r3, r4
 800197e:	b21a      	sxth	r2, r3
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <read_gyro_data+0x68>)
 8001982:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001984:	2037      	movs	r0, #55	; 0x37
 8001986:	f7ff ff55 	bl	8001834 <read_byte>
 800198a:	4603      	mov	r3, r0
 800198c:	021b      	lsls	r3, r3, #8
 800198e:	b21c      	sxth	r4, r3
 8001990:	2038      	movs	r0, #56	; 0x38
 8001992:	f7ff ff4f 	bl	8001834 <read_byte>
 8001996:	4603      	mov	r3, r0
 8001998:	b21b      	sxth	r3, r3
 800199a:	4323      	orrs	r3, r4
 800199c:	b21a      	sxth	r2, r3
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <read_gyro_data+0x6c>)
 80019a0:	801a      	strh	r2, [r3, #0]
}
 80019a2:	bf00      	nop
 80019a4:	bd98      	pop	{r3, r4, r7, pc}
 80019a6:	bf00      	nop
 80019a8:	2003f7c8 	.word	0x2003f7c8
 80019ac:	2003f7c6 	.word	0x2003f7c6
 80019b0:	2003f7c0 	.word	0x2003f7c0

080019b4 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	801a      	strh	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	805a      	strh	r2, [r3, #2]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	809a      	strh	r2, [r3, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	80da      	strh	r2, [r3, #6]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	811a      	strh	r2, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	815a      	strh	r2, [r3, #10]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]
{

}
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <_ZN3IMU4initEv>:

void IMU::init()
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a00:	f7ff ff74 	bl	80018ec <IMU_init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001a08:	f7ff fb7c 	bl	8001104 <lcd_clear>
	lcd_locate(0,0);
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f7ff fb88 	bl	8001124 <lcd_locate>
	lcd_printf("IMUstatus");
 8001a14:	4809      	ldr	r0, [pc, #36]	; (8001a3c <_ZN3IMU4initEv+0x44>)
 8001a16:	f7ff fbb0 	bl	800117a <lcd_printf>
	lcd_locate(0,1);
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f7ff fb81 	bl	8001124 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001a22:	89fb      	ldrh	r3, [r7, #14]
 8001a24:	4619      	mov	r1, r3
 8001a26:	4806      	ldr	r0, [pc, #24]	; (8001a40 <_ZN3IMU4initEv+0x48>)
 8001a28:	f7ff fba7 	bl	800117a <lcd_printf>

	HAL_Delay(500);
 8001a2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a30:	f007 ffa0 	bl	8009974 <HAL_Delay>

}
 8001a34:	bf00      	nop
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	0801a710 	.word	0x0801a710
 8001a40:	0801a71c 	.word	0x0801a71c
 8001a44:	00000000 	.word	0x00000000

08001a48 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001a48:	b5b0      	push	{r4, r5, r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001a50:	f7ff ff78 	bl	8001944 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001a54:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <_ZN3IMU12updateValuesEv+0xa0>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	b21a      	sxth	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001a5e:	4b23      	ldr	r3, [pc, #140]	; (8001aec <_ZN3IMU12updateValuesEv+0xa4>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	b21a      	sxth	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001a68:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <_ZN3IMU12updateValuesEv+0xa8>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fd6b 	bl	8000554 <__aeabi_i2d>
 8001a7e:	a316      	add	r3, pc, #88	; (adr r3, 8001ad8 <_ZN3IMU12updateValuesEv+0x90>)
 8001a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a84:	f7fe fdd0 	bl	8000628 <__aeabi_dmul>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4614      	mov	r4, r2
 8001a8e:	461d      	mov	r5, r3
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <_ZN3IMU12updateValuesEv+0xac>)
 8001a92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fd5c 	bl	8000554 <__aeabi_i2d>
 8001a9c:	a310      	add	r3, pc, #64	; (adr r3, 8001ae0 <_ZN3IMU12updateValuesEv+0x98>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f7fe fdc1 	bl	8000628 <__aeabi_dmul>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4620      	mov	r0, r4
 8001aac:	4629      	mov	r1, r5
 8001aae:	f7fe fc05 	bl	80002bc <__adddf3>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f7ff f865 	bl	8000b88 <__aeabi_d2iz>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	b21a      	sxth	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <_ZN3IMU12updateValuesEv+0xac>)
 8001ace:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad8:	eb851eb8 	.word	0xeb851eb8
 8001adc:	3f9eb851 	.word	0x3f9eb851
 8001ae0:	70a3d70a 	.word	0x70a3d70a
 8001ae4:	3fef0a3d 	.word	0x3fef0a3d
 8001ae8:	2003f7c8 	.word	0x2003f7c8
 8001aec:	2003f7c6 	.word	0x2003f7c6
 8001af0:	2003f7c0 	.word	0x2003f7c0
 8001af4:	20000210 	.word	0x20000210

08001af8 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001af8:	b5b0      	push	{r4, r5, r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b06:	ee07 3a90 	vmov	s15, r3
 8001b0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b18:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f7fe fd2b 	bl	8000578 <__aeabi_f2d>
 8001b22:	a316      	add	r3, pc, #88	; (adr r3, 8001b7c <_ZN3IMU8getOmegaEv+0x84>)
 8001b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b28:	f7fe fea8 	bl	800087c <__aeabi_ddiv>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4614      	mov	r4, r2
 8001b32:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b36:	a313      	add	r3, pc, #76	; (adr r3, 8001b84 <_ZN3IMU8getOmegaEv+0x8c>)
 8001b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	4629      	mov	r1, r5
 8001b40:	f7fe fd72 	bl	8000628 <__aeabi_dmul>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <_ZN3IMU8getOmegaEv+0x80>)
 8001b52:	f7fe fe93 	bl	800087c <__aeabi_ddiv>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f7ff f85b 	bl	8000c18 <__aeabi_d2f>
 8001b62:	4603      	mov	r3, r0
 8001b64:	ee07 3a90 	vmov	s15, r3
}
 8001b68:	eeb0 0a67 	vmov.f32	s0, s15
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bdb0      	pop	{r4, r5, r7, pc}
 8001b72:	bf00      	nop
 8001b74:	f3af 8000 	nop.w
 8001b78:	40668000 	.word	0x40668000
 8001b7c:	66666666 	.word	0x66666666
 8001b80:	40306666 	.word	0x40306666
 8001b84:	54411744 	.word	0x54411744
 8001b88:	400921fb 	.word	0x400921fb

08001b8c <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001b8c:	b5b0      	push	{r4, r5, r7, lr}
 8001b8e:	b08a      	sub	sp, #40	; 0x28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001b94:	466b      	mov	r3, sp
 8001b96:	461d      	mov	r5, r3
	HAL_Delay(1000);
 8001b98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b9c:	f007 feea 	bl	8009974 <HAL_Delay>
	lcd_clear();
 8001ba0:	f7ff fab0 	bl	8001104 <lcd_clear>
	lcd_locate(0,0);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f7ff fabc 	bl	8001124 <lcd_locate>
	lcd_printf("IMU     ");
 8001bac:	4840      	ldr	r0, [pc, #256]	; (8001cb0 <_ZN3IMU11calibrationEv+0x124>)
 8001bae:	f7ff fae4 	bl	800117a <lcd_printf>
	lcd_locate(0,1);
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7ff fab5 	bl	8001124 <lcd_locate>
	lcd_printf("Calib   ");
 8001bba:	483e      	ldr	r0, [pc, #248]	; (8001cb4 <_ZN3IMU11calibrationEv+0x128>)
 8001bbc:	f7ff fadd 	bl	800117a <lcd_printf>
	int16_t num = 2000;
 8001bc0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001bc4:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001bc6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bca:	1e5c      	subs	r4, r3, #1
 8001bcc:	61bc      	str	r4, [r7, #24]
 8001bce:	4623      	mov	r3, r4
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f04f 0100 	mov.w	r1, #0
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	014b      	lsls	r3, r1, #5
 8001be2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001be6:	0142      	lsls	r2, r0, #5
 8001be8:	4623      	mov	r3, r4
 8001bea:	3301      	adds	r3, #1
 8001bec:	4618      	mov	r0, r3
 8001bee:	f04f 0100 	mov.w	r1, #0
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	014b      	lsls	r3, r1, #5
 8001bfc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c00:	0142      	lsls	r2, r0, #5
 8001c02:	4623      	mov	r3, r4
 8001c04:	3301      	adds	r3, #1
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	3307      	adds	r3, #7
 8001c0a:	08db      	lsrs	r3, r3, #3
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	ebad 0d03 	sub.w	sp, sp, r3
 8001c12:	466b      	mov	r3, sp
 8001c14:	3303      	adds	r3, #3
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	83fb      	strh	r3, [r7, #30]
 8001c20:	8bfa      	ldrh	r2, [r7, #30]
 8001c22:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	da13      	bge.n	8001c52 <_ZN3IMU11calibrationEv+0xc6>
		zg_vals[i] = float(zg_);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001c30:	8bfb      	ldrh	r3, [r7, #30]
 8001c32:	ee07 2a90 	vmov	s15, r2
 8001c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001c44:	2002      	movs	r0, #2
 8001c46:	f007 fe95 	bl	8009974 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001c4a:	8bfb      	ldrh	r3, [r7, #30]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	83fb      	strh	r3, [r7, #30]
 8001c50:	e7e6      	b.n	8001c20 <_ZN3IMU11calibrationEv+0x94>
	for(const auto &v : zg_vals){
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5a:	4623      	mov	r3, r4
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4413      	add	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d00e      	beq.n	8001c8c <_ZN3IMU11calibrationEv+0x100>
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	60bb      	str	r3, [r7, #8]
		sum += v;
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c80:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	3304      	adds	r3, #4
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8a:	e7ec      	b.n	8001c66 <_ZN3IMU11calibrationEv+0xda>
	offset_ = sum / num;
 8001c8c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c90:	ee07 3a90 	vmov	s15, r3
 8001c94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c98:	edd7 6a08 	vldr	s13, [r7, #32]
 8001c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	edc3 7a03 	vstr	s15, [r3, #12]
 8001ca6:	46ad      	mov	sp, r5
}
 8001ca8:	bf00      	nop
 8001caa:	3728      	adds	r7, #40	; 0x28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb0:	0801a720 	.word	0x0801a720
 8001cb4:	0801a72c 	.word	0x0801a72c

08001cb8 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af02      	add	r7, sp, #8
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	71fb      	strb	r3, [r7, #7]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001cc8:	79bb      	ldrb	r3, [r7, #6]
 8001cca:	b299      	uxth	r1, r3
 8001ccc:	1dfa      	adds	r2, r7, #7
 8001cce:	2364      	movs	r3, #100	; 0x64
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	480c      	ldr	r0, [pc, #48]	; (8001d08 <INA260_read+0x50>)
 8001cd6:	f009 fa47 	bl	800b168 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001cda:	79bb      	ldrb	r3, [r7, #6]
 8001cdc:	b299      	uxth	r1, r3
 8001cde:	f107 020c 	add.w	r2, r7, #12
 8001ce2:	2364      	movs	r3, #100	; 0x64
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	4807      	ldr	r0, [pc, #28]	; (8001d08 <INA260_read+0x50>)
 8001cea:	f009 fb3b 	bl	800b364 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001cee:	7b3b      	ldrb	r3, [r7, #12]
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	b21a      	sxth	r2, r3
 8001cf4:	7b7b      	ldrb	r3, [r7, #13]
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	81fb      	strh	r3, [r7, #14]
	return val;
 8001cfe:	89fb      	ldrh	r3, [r7, #14]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	2003f9e0 	.word	0x2003f9e0

08001d0c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	4604      	mov	r4, r0
 8001d14:	4608      	mov	r0, r1
 8001d16:	4611      	mov	r1, r2
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4623      	mov	r3, r4
 8001d1c:	71fb      	strb	r3, [r7, #7]
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71bb      	strb	r3, [r7, #6]
 8001d22:	460b      	mov	r3, r1
 8001d24:	717b      	strb	r3, [r7, #5]
 8001d26:	4613      	mov	r3, r2
 8001d28:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	733b      	strb	r3, [r7, #12]
 8001d2e:	79bb      	ldrb	r3, [r7, #6]
 8001d30:	737b      	strb	r3, [r7, #13]
 8001d32:	797b      	ldrb	r3, [r7, #5]
 8001d34:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001d36:	793b      	ldrb	r3, [r7, #4]
 8001d38:	b299      	uxth	r1, r3
 8001d3a:	f107 020c 	add.w	r2, r7, #12
 8001d3e:	2364      	movs	r3, #100	; 0x64
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2303      	movs	r3, #3
 8001d44:	4803      	ldr	r0, [pc, #12]	; (8001d54 <INA260_write+0x48>)
 8001d46:	f009 fa0f 	bl	800b168 <HAL_I2C_Master_Transmit>
}
 8001d4a:	bf00      	nop
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd90      	pop	{r4, r7, pc}
 8001d52:	bf00      	nop
 8001d54:	2003f9e0 	.word	0x2003f9e0

08001d58 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
 8001d62:	460b      	mov	r3, r1
 8001d64:	71bb      	strb	r3, [r7, #6]
 8001d66:	4613      	mov	r3, r2
 8001d68:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001d6a:	797b      	ldrb	r3, [r7, #5]
 8001d6c:	79ba      	ldrb	r2, [r7, #6]
 8001d6e:	79f9      	ldrb	r1, [r7, #7]
 8001d70:	2000      	movs	r0, #0
 8001d72:	f7ff ffcb 	bl	8001d0c <INA260_write>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	21df      	movs	r1, #223	; 0xdf
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f7ff ffe2 	bl	8001d58 <setConfig>
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
{

}
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001dc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dc4:	482a      	ldr	r0, [pc, #168]	; (8001e70 <_ZN8JoyStick8getValueEv+0xbc>)
 8001dc6:	f009 f859 	bl	800ae7c <HAL_GPIO_ReadPin>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	bf0c      	ite	eq
 8001dd0:	2301      	moveq	r3, #1
 8001dd2:	2300      	movne	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <_ZN8JoyStick8getValueEv+0x2e>
 8001dda:	89fb      	ldrh	r3, [r7, #14]
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001de2:	2101      	movs	r1, #1
 8001de4:	4823      	ldr	r0, [pc, #140]	; (8001e74 <_ZN8JoyStick8getValueEv+0xc0>)
 8001de6:	f009 f849 	bl	800ae7c <HAL_GPIO_ReadPin>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <_ZN8JoyStick8getValueEv+0x4e>
 8001dfa:	89fb      	ldrh	r3, [r7, #14]
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e06:	481a      	ldr	r0, [pc, #104]	; (8001e70 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e08:	f009 f838 	bl	800ae7c <HAL_GPIO_ReadPin>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	bf0c      	ite	eq
 8001e12:	2301      	moveq	r3, #1
 8001e14:	2300      	movne	r3, #0
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <_ZN8JoyStick8getValueEv+0x70>
 8001e1c:	89fb      	ldrh	r3, [r7, #14]
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001e24:	2104      	movs	r1, #4
 8001e26:	4814      	ldr	r0, [pc, #80]	; (8001e78 <_ZN8JoyStick8getValueEv+0xc4>)
 8001e28:	f009 f828 	bl	800ae7c <HAL_GPIO_ReadPin>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	bf0c      	ite	eq
 8001e32:	2301      	moveq	r3, #1
 8001e34:	2300      	movne	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <_ZN8JoyStick8getValueEv+0x90>
 8001e3c:	89fb      	ldrh	r3, [r7, #14]
 8001e3e:	f043 0308 	orr.w	r3, r3, #8
 8001e42:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001e44:	2180      	movs	r1, #128	; 0x80
 8001e46:	480a      	ldr	r0, [pc, #40]	; (8001e70 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e48:	f009 f818 	bl	800ae7c <HAL_GPIO_ReadPin>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bf0c      	ite	eq
 8001e52:	2301      	moveq	r3, #1
 8001e54:	2300      	movne	r3, #0
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <_ZN8JoyStick8getValueEv+0xb0>
 8001e5c:	89fb      	ldrh	r3, [r7, #14]
 8001e5e:	f043 0310 	orr.w	r3, r3, #16
 8001e62:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001e64:	89fb      	ldrh	r3, [r7, #14]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40020c00 	.word	0x40020c00
 8001e78:	40020400 	.word	0x40020400

08001e7c <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	2b52      	cmp	r3, #82	; 0x52
 8001e8c:	d112      	bne.n	8001eb4 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e94:	4856      	ldr	r0, [pc, #344]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001e96:	f009 f809 	bl	800aeac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ea0:	4853      	ldr	r0, [pc, #332]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001ea2:	f009 f803 	bl	800aeac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eac:	4850      	ldr	r0, [pc, #320]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001eae:	f008 fffd 	bl	800aeac <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001eb2:	e098      	b.n	8001fe6 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	2b47      	cmp	r3, #71	; 0x47
 8001eb8:	d112      	bne.n	8001ee0 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ec0:	484b      	ldr	r0, [pc, #300]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001ec2:	f008 fff3 	bl	800aeac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ecc:	4848      	ldr	r0, [pc, #288]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001ece:	f008 ffed 	bl	800aeac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ed8:	4845      	ldr	r0, [pc, #276]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001eda:	f008 ffe7 	bl	800aeac <HAL_GPIO_WritePin>
}
 8001ede:	e082      	b.n	8001fe6 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	2b42      	cmp	r3, #66	; 0x42
 8001ee4:	d112      	bne.n	8001f0c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eec:	4840      	ldr	r0, [pc, #256]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001eee:	f008 ffdd 	bl	800aeac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ef8:	483d      	ldr	r0, [pc, #244]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001efa:	f008 ffd7 	bl	800aeac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001efe:	2200      	movs	r2, #0
 8001f00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f04:	483a      	ldr	r0, [pc, #232]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001f06:	f008 ffd1 	bl	800aeac <HAL_GPIO_WritePin>
}
 8001f0a:	e06c      	b.n	8001fe6 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f0c:	78fb      	ldrb	r3, [r7, #3]
 8001f0e:	2b43      	cmp	r3, #67	; 0x43
 8001f10:	d112      	bne.n	8001f38 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f12:	2201      	movs	r2, #1
 8001f14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f18:	4835      	ldr	r0, [pc, #212]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001f1a:	f008 ffc7 	bl	800aeac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f24:	4832      	ldr	r0, [pc, #200]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001f26:	f008 ffc1 	bl	800aeac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f30:	482f      	ldr	r0, [pc, #188]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001f32:	f008 ffbb 	bl	800aeac <HAL_GPIO_WritePin>
}
 8001f36:	e056      	b.n	8001fe6 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	2b4d      	cmp	r3, #77	; 0x4d
 8001f3c:	d112      	bne.n	8001f64 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f44:	482a      	ldr	r0, [pc, #168]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001f46:	f008 ffb1 	bl	800aeac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f50:	4827      	ldr	r0, [pc, #156]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001f52:	f008 ffab 	bl	800aeac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f56:	2200      	movs	r2, #0
 8001f58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f5c:	4824      	ldr	r0, [pc, #144]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001f5e:	f008 ffa5 	bl	800aeac <HAL_GPIO_WritePin>
}
 8001f62:	e040      	b.n	8001fe6 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	2b59      	cmp	r3, #89	; 0x59
 8001f68:	d112      	bne.n	8001f90 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f70:	481f      	ldr	r0, [pc, #124]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001f72:	f008 ff9b 	bl	800aeac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f7c:	481c      	ldr	r0, [pc, #112]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001f7e:	f008 ff95 	bl	800aeac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f82:	2201      	movs	r2, #1
 8001f84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f88:	4819      	ldr	r0, [pc, #100]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001f8a:	f008 ff8f 	bl	800aeac <HAL_GPIO_WritePin>
}
 8001f8e:	e02a      	b.n	8001fe6 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	2b57      	cmp	r3, #87	; 0x57
 8001f94:	d112      	bne.n	8001fbc <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f96:	2200      	movs	r2, #0
 8001f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9c:	4814      	ldr	r0, [pc, #80]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001f9e:	f008 ff85 	bl	800aeac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fa8:	4811      	ldr	r0, [pc, #68]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001faa:	f008 ff7f 	bl	800aeac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fb4:	480e      	ldr	r0, [pc, #56]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001fb6:	f008 ff79 	bl	800aeac <HAL_GPIO_WritePin>
}
 8001fba:	e014      	b.n	8001fe6 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	2b7e      	cmp	r3, #126	; 0x7e
 8001fc0:	d111      	bne.n	8001fe6 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc8:	4809      	ldr	r0, [pc, #36]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001fca:	f008 ff6f 	bl	800aeac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fd4:	4806      	ldr	r0, [pc, #24]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001fd6:	f008 ff69 	bl	800aeac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fe0:	4803      	ldr	r0, [pc, #12]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001fe2:	f008 ff63 	bl	800aeac <HAL_GPIO_WritePin>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40020000 	.word	0x40020000

08001ff4 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	70fb      	strb	r3, [r7, #3]
 8002000:	4613      	mov	r3, r2
 8002002:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d106      	bne.n	800201a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800200c:	2201      	movs	r2, #1
 800200e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002012:	4813      	ldr	r0, [pc, #76]	; (8002060 <_ZN3LED2LREaa+0x6c>)
 8002014:	f008 ff4a 	bl	800aeac <HAL_GPIO_WritePin>
 8002018:	e009      	b.n	800202e <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800201a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d105      	bne.n	800202e <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002028:	480d      	ldr	r0, [pc, #52]	; (8002060 <_ZN3LED2LREaa+0x6c>)
 800202a:	f008 ff3f 	bl	800aeac <HAL_GPIO_WritePin>

	if(r_status == 1)
 800202e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d106      	bne.n	8002044 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002036:	2201      	movs	r2, #1
 8002038:	f44f 7100 	mov.w	r1, #512	; 0x200
 800203c:	4808      	ldr	r0, [pc, #32]	; (8002060 <_ZN3LED2LREaa+0x6c>)
 800203e:	f008 ff35 	bl	800aeac <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 8002042:	e009      	b.n	8002058 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8002044:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d105      	bne.n	8002058 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800204c:	2200      	movs	r2, #0
 800204e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002052:	4803      	ldr	r0, [pc, #12]	; (8002060 <_ZN3LED2LREaa+0x6c>)
 8002054:	f008 ff2a 	bl	800aeac <HAL_GPIO_WritePin>
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40020000 	.word	0x40020000

08002064 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 8002064:	b580      	push	{r7, lr}
 8002066:	b092      	sub	sp, #72	; 0x48
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fe92 	bl	8001d9c <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	637b      	str	r3, [r7, #52]	; 0x34
 800207c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207e:	647b      	str	r3, [r7, #68]	; 0x44
 8002080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002082:	331c      	adds	r3, #28
 8002084:	633b      	str	r3, [r7, #48]	; 0x30
 8002086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208a:	429a      	cmp	r2, r3
 800208c:	d008      	beq.n	80020a0 <_ZN10LineSensorC1Ev+0x3c>
 800208e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8002092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002094:	2200      	movs	r2, #0
 8002096:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800209a:	3302      	adds	r3, #2
 800209c:	647b      	str	r3, [r7, #68]	; 0x44
 800209e:	e7f2      	b.n	8002086 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020aa:	643b      	str	r3, [r7, #64]	; 0x40
 80020ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ae:	3338      	adds	r3, #56	; 0x38
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
 80020b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d009      	beq.n	80020ce <_ZN10LineSensorC1Ev+0x6a>
 80020ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020bc:	623b      	str	r3, [r7, #32]
		s = 0;
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80020c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c8:	3304      	adds	r3, #4
 80020ca:	643b      	str	r3, [r7, #64]	; 0x40
 80020cc:	e7f1      	b.n	80020b2 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3338      	adds	r3, #56	; 0x38
 80020de:	61bb      	str	r3, [r7, #24]
 80020e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d009      	beq.n	80020fc <_ZN10LineSensorC1Ev+0x98>
 80020e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ea:	617b      	str	r3, [r7, #20]
		m = 0;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80020f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f6:	3304      	adds	r3, #4
 80020f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020fa:	e7f1      	b.n	80020e0 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	63bb      	str	r3, [r7, #56]	; 0x38
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	3338      	adds	r3, #56	; 0x38
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	429a      	cmp	r2, r3
 8002114:	d009      	beq.n	800212a <_ZN10LineSensorC1Ev+0xc6>
 8002116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002118:	60bb      	str	r3, [r7, #8]
		s = 1;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002120:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8002122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002124:	3304      	adds	r3, #4
 8002126:	63bb      	str	r3, [r7, #56]	; 0x38
 8002128:	e7f1      	b.n	800210e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4618      	mov	r0, r3
 800212e:	3748      	adds	r7, #72	; 0x48
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	220e      	movs	r2, #14
 8002140:	4619      	mov	r1, r3
 8002142:	4803      	ldr	r0, [pc, #12]	; (8002150 <_ZN10LineSensor8ADCStartEv+0x1c>)
 8002144:	f007 fc7e 	bl	8009a44 <HAL_ADC_Start_DMA>
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	2003f904 	.word	0x2003f904

08002154 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b0d      	cmp	r3, #13
 8002164:	dc2f      	bgt.n	80021c6 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3392      	adds	r3, #146	; 0x92
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	3304      	adds	r3, #4
 8002172:	ed93 7a00 	vldr	s14, [r3]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800217e:	ee07 3a90 	vmov	s15, r3
 8002182:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	33a0      	adds	r3, #160	; 0xa0
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	3304      	adds	r3, #4
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800219a:	4b14      	ldr	r3, [pc, #80]	; (80021ec <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	4619      	mov	r1, r3
 80021a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	460b      	mov	r3, r1
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	1a5b      	subs	r3, r3, r1
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	68f9      	ldr	r1, [r7, #12]
 80021b0:	440b      	add	r3, r1
 80021b2:	3306      	adds	r3, #6
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	3304      	adds	r3, #4
 80021ba:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	3301      	adds	r3, #1
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	e7cc      	b.n	8002160 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80021c6:	4b09      	ldr	r3, [pc, #36]	; (80021ec <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	3301      	adds	r3, #1
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4b07      	ldr	r3, [pc, #28]	; (80021ec <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021d0:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b09      	cmp	r3, #9
 80021d8:	d902      	bls.n	80021e0 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80021da:	4b04      	ldr	r3, [pc, #16]	; (80021ec <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]


}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	2000021c 	.word	0x2000021c

080021f0 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80021f0:	b5b0      	push	{r4, r5, r7, lr}
 80021f2:	b08e      	sub	sp, #56	; 0x38
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80021f8:	2300      	movs	r3, #0
 80021fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80021fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002202:	2b0d      	cmp	r3, #13
 8002204:	f200 80b6 	bhi.w	8002374 <_ZN10LineSensor18updateSensorValuesEv+0x184>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002208:	2300      	movs	r3, #0
 800220a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800220e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002212:	2b09      	cmp	r3, #9
 8002214:	d81c      	bhi.n	8002250 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002216:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800221a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800221e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4423      	add	r3, r4
 800222e:	3306      	adds	r3, #6
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4403      	add	r3, r0
 8002234:	3304      	adds	r3, #4
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	008b      	lsls	r3, r1, #2
 800223a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800223e:	440b      	add	r3, r1
 8002240:	3b30      	subs	r3, #48	; 0x30
 8002242:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002244:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002248:	3301      	adds	r3, #1
 800224a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800224e:	e7de      	b.n	800220e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002250:	2300      	movs	r3, #0
 8002252:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002256:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800225a:	2b09      	cmp	r3, #9
 800225c:	d84d      	bhi.n	80022fa <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 800225e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002262:	3301      	adds	r3, #1
 8002264:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002268:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800226c:	2b09      	cmp	r3, #9
 800226e:	d83e      	bhi.n	80022ee <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002270:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800227a:	4413      	add	r3, r2
 800227c:	3b30      	subs	r3, #48	; 0x30
 800227e:	ed93 7a00 	vldr	s14, [r3]
 8002282:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800228c:	4413      	add	r3, r2
 800228e:	3b30      	subs	r3, #48	; 0x30
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229c:	d521      	bpl.n	80022e2 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800229e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022a8:	4413      	add	r3, r2
 80022aa:	3b30      	subs	r3, #48	; 0x30
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80022b0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80022b4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022b8:	0092      	lsls	r2, r2, #2
 80022ba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022be:	440a      	add	r2, r1
 80022c0:	3a30      	subs	r2, #48	; 0x30
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022ca:	440b      	add	r3, r1
 80022cc:	3b30      	subs	r3, #48	; 0x30
 80022ce:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80022d0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022da:	4413      	add	r3, r2
 80022dc:	3b30      	subs	r3, #48	; 0x30
 80022de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022e0:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80022e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022e6:	3301      	adds	r3, #1
 80022e8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022ec:	e7bc      	b.n	8002268 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80022ee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022f2:	3301      	adds	r3, #1
 80022f4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022f8:	e7ad      	b.n	8002256 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe f93b 	bl	8000578 <__aeabi_f2d>
 8002302:	a328      	add	r3, pc, #160	; (adr r3, 80023a4 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002308:	f7fe f98e 	bl	8000628 <__aeabi_dmul>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4614      	mov	r4, r2
 8002312:	461d      	mov	r5, r3
 8002314:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002318:	4a1f      	ldr	r2, [pc, #124]	; (8002398 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe f929 	bl	8000578 <__aeabi_f2d>
 8002326:	a31a      	add	r3, pc, #104	; (adr r3, 8002390 <_ZN10LineSensor18updateSensorValuesEv+0x1a0>)
 8002328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232c:	f7fe f97c 	bl	8000628 <__aeabi_dmul>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4620      	mov	r0, r4
 8002336:	4629      	mov	r1, r5
 8002338:	f7fd ffc0 	bl	80002bc <__adddf3>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002344:	4610      	mov	r0, r2
 8002346:	4619      	mov	r1, r3
 8002348:	f7fe fc66 	bl	8000c18 <__aeabi_d2f>
 800234c:	4601      	mov	r1, r0
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 800235a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	490d      	ldr	r1, [pc, #52]	; (8002398 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002368:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800236c:	3301      	adds	r3, #1
 800236e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002372:	e744      	b.n	80021fe <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800237a:	4a08      	ldr	r2, [pc, #32]	; (800239c <_ZN10LineSensor18updateSensorValuesEv+0x1ac>)
 800237c:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002384:	4a06      	ldr	r2, [pc, #24]	; (80023a0 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 8002386:	6013      	str	r3, [r2, #0]
}
 8002388:	bf00      	nop
 800238a:	3738      	adds	r7, #56	; 0x38
 800238c:	46bd      	mov	sp, r7
 800238e:	bdb0      	pop	{r4, r5, r7, pc}
 8002390:	66666666 	.word	0x66666666
 8002394:	3fee6666 	.word	0x3fee6666
 8002398:	20000220 	.word	0x20000220
 800239c:	20000214 	.word	0x20000214
 80023a0:	20000218 	.word	0x20000218
 80023a4:	9999999a 	.word	0x9999999a
 80023a8:	3fa99999 	.word	0x3fa99999

080023ac <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b0a0      	sub	sp, #128	; 0x80
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80023b4:	2064      	movs	r0, #100	; 0x64
 80023b6:	f007 fadd 	bl	8009974 <HAL_Delay>

	lcd_clear();
 80023ba:	f7fe fea3 	bl	8001104 <lcd_clear>
	lcd_locate(0,0);
 80023be:	2100      	movs	r1, #0
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7fe feaf 	bl	8001124 <lcd_locate>
	lcd_printf("LineSens");
 80023c6:	4886      	ldr	r0, [pc, #536]	; (80025e0 <_ZN10LineSensor11calibrationEv+0x234>)
 80023c8:	f7fe fed7 	bl	800117a <lcd_printf>
	lcd_locate(0,1);
 80023cc:	2101      	movs	r1, #1
 80023ce:	2000      	movs	r0, #0
 80023d0:	f7fe fea8 	bl	8001124 <lcd_locate>
	lcd_printf("Calib   ");
 80023d4:	4883      	ldr	r0, [pc, #524]	; (80025e4 <_ZN10LineSensor11calibrationEv+0x238>)
 80023d6:	f7fe fed0 	bl	800117a <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023da:	2300      	movs	r3, #0
 80023dc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80023e0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80023e4:	2b0d      	cmp	r3, #13
 80023e6:	d823      	bhi.n	8002430 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 80023e8:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80023ec:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	32b0      	adds	r2, #176	; 0xb0
 80023f4:	0092      	lsls	r2, r2, #2
 80023f6:	440a      	add	r2, r1
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002400:	440b      	add	r3, r1
 8002402:	3b40      	subs	r3, #64	; 0x40
 8002404:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002406:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800240a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	32b0      	adds	r2, #176	; 0xb0
 8002412:	0092      	lsls	r2, r2, #2
 8002414:	440a      	add	r2, r1
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800241e:	440b      	add	r3, r1
 8002420:	3b78      	subs	r3, #120	; 0x78
 8002422:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002424:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002428:	3301      	adds	r3, #1
 800242a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800242e:	e7d7      	b.n	80023e0 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fcbc 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 800243c:	4603      	mov	r3, r0
 800243e:	2b02      	cmp	r3, #2
 8002440:	bf14      	ite	ne
 8002442:	2301      	movne	r3, #1
 8002444:	2300      	moveq	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d079      	beq.n	8002540 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800244c:	2300      	movs	r3, #0
 800244e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002452:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002456:	2b0d      	cmp	r3, #13
 8002458:	d850      	bhi.n	80024fc <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800245a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002464:	4413      	add	r3, r2
 8002466:	3b40      	subs	r3, #64	; 0x40
 8002468:	ed93 7a00 	vldr	s14, [r3]
 800246c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	33b0      	adds	r3, #176	; 0xb0
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	edd3 7a00 	vldr	s15, [r3]
 800247c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002484:	d50f      	bpl.n	80024a6 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 8002486:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800248a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	32b0      	adds	r2, #176	; 0xb0
 8002492:	0092      	lsls	r2, r2, #2
 8002494:	440a      	add	r2, r1
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800249e:	440b      	add	r3, r1
 80024a0:	3b40      	subs	r3, #64	; 0x40
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	e024      	b.n	80024f0 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80024a6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024b0:	4413      	add	r3, r2
 80024b2:	3b78      	subs	r3, #120	; 0x78
 80024b4:	ed93 7a00 	vldr	s14, [r3]
 80024b8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	33b0      	adds	r3, #176	; 0xb0
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	edd3 7a00 	vldr	s15, [r3]
 80024c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d0:	dd0e      	ble.n	80024f0 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80024d2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80024d6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	32b0      	adds	r2, #176	; 0xb0
 80024de:	0092      	lsls	r2, r2, #2
 80024e0:	440a      	add	r2, r1
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80024ea:	440b      	add	r3, r1
 80024ec:	3b78      	subs	r3, #120	; 0x78
 80024ee:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024f0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024f4:	3301      	adds	r3, #1
 80024f6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80024fa:	e7aa      	b.n	8002452 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002502:	4618      	mov	r0, r3
 8002504:	f002 fe5e 	bl	80051c4 <_ZN12RotarySwitch8getValueEv>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	bf0c      	ite	eq
 800250e:	2301      	moveq	r3, #1
 8002510:	2300      	movne	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d009      	beq.n	800252c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800251e:	2201      	movs	r2, #1
 8002520:	f04f 31ff 	mov.w	r1, #4294967295
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fd65 	bl	8001ff4 <_ZN3LED2LREaa>
 800252a:	e781      	b.n	8002430 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002532:	2200      	movs	r2, #0
 8002534:	f04f 31ff 	mov.w	r1, #4294967295
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fd5b 	bl	8001ff4 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800253e:	e777      	b.n	8002430 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002540:	2300      	movs	r3, #0
 8002542:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002546:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800254a:	2b0d      	cmp	r3, #13
 800254c:	d826      	bhi.n	800259c <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800254e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002558:	4413      	add	r3, r2
 800255a:	3b40      	subs	r3, #64	; 0x40
 800255c:	ed93 7a00 	vldr	s14, [r3]
 8002560:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800256a:	4413      	add	r3, r2
 800256c:	3b78      	subs	r3, #120	; 0x78
 800256e:	edd3 7a00 	vldr	s15, [r3]
 8002572:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002576:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800257a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80025e8 <_ZN10LineSensor11calibrationEv+0x23c>
 800257e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	3392      	adds	r3, #146	; 0x92
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	3304      	adds	r3, #4
 800258c:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002590:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002594:	3301      	adds	r3, #1
 8002596:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800259a:	e7d4      	b.n	8002546 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800259c:	2300      	movs	r3, #0
 800259e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80025a2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80025a6:	2b0d      	cmp	r3, #13
 80025a8:	d815      	bhi.n	80025d6 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 80025aa:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80025ae:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80025b2:	0092      	lsls	r2, r2, #2
 80025b4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80025b8:	440a      	add	r2, r1
 80025ba:	3a78      	subs	r2, #120	; 0x78
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	33a0      	adds	r3, #160	; 0xa0
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	3304      	adds	r3, #4
 80025c8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025ca:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80025ce:	3301      	adds	r3, #1
 80025d0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80025d4:	e7e5      	b.n	80025a2 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 80025d6:	bf00      	nop
 80025d8:	3780      	adds	r7, #128	; 0x80
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	0801a738 	.word	0x0801a738
 80025e4:	0801a744 	.word	0x0801a744
 80025e8:	447a0000 	.word	0x447a0000

080025ec <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 80025ec:	b480      	push	{r7}
 80025ee:	b089      	sub	sp, #36	; 0x24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	61bb      	str	r3, [r7, #24]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	3338      	adds	r3, #56	; 0x38
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	429a      	cmp	r2, r3
 8002610:	d012      	beq.n	8002638 <_ZN10LineSensor13emergencyStopEv+0x4c>
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	edd3 7a00 	vldr	s15, [r3]
 800261c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800268c <_ZN10LineSensor13emergencyStopEv+0xa0>
 8002620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002628:	db02      	blt.n	8002630 <_ZN10LineSensor13emergencyStopEv+0x44>
 800262a:	8bfb      	ldrh	r3, [r7, #30]
 800262c:	3301      	adds	r3, #1
 800262e:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	3304      	adds	r3, #4
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	e7e8      	b.n	800260a <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 8002638:	8bfb      	ldrh	r3, [r7, #30]
 800263a:	2b0d      	cmp	r3, #13
 800263c:	d906      	bls.n	800264c <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 800263e:	4b14      	ldr	r3, [pc, #80]	; (8002690 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	3301      	adds	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	4b12      	ldr	r3, [pc, #72]	; (8002690 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002648:	801a      	strh	r2, [r3, #0]
 800264a:	e002      	b.n	8002652 <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 800264c:	4b10      	ldr	r3, [pc, #64]	; (8002690 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 800264e:	2200      	movs	r2, #0
 8002650:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 8002652:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	2b31      	cmp	r3, #49	; 0x31
 8002658:	d903      	bls.n	8002662 <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 800265a:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
 8002660:	e002      	b.n	8002668 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 8002662:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002670:	4293      	cmp	r3, r2
 8002672:	d903      	bls.n	800267c <_ZN10LineSensor13emergencyStopEv+0x90>
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002676:	f242 7210 	movw	r2, #10000	; 0x2710
 800267a:	801a      	strh	r2, [r3, #0]

	return flag;
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 800267e:	781b      	ldrb	r3, [r3, #0]

}
 8002680:	4618      	mov	r0, r3
 8002682:	3724      	adds	r7, #36	; 0x24
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	442f0000 	.word	0x442f0000
 8002690:	20000258 	.word	0x20000258
 8002694:	2000025a 	.word	0x2000025a

08002698 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	ed87 0a01 	vstr	s0, [r7, #4]
 80026a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80026a6:	eef0 7ae7 	vabs.f32	s15, s15
 80026aa:	eeb0 0a67 	vmov.f32	s0, s15
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>:
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;

//#define REVERSE

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu) :
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_fast_(0), kd_fast_(0), ki_fast_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0), all_sideline_flag_(false)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	625a      	str	r2, [r3, #36]	; 0x24
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	629a      	str	r2, [r3, #40]	; 0x28
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	631a      	str	r2, [r3, #48]	; 0x30
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	635a      	str	r2, [r3, #52]	; 0x34
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	639a      	str	r2, [r3, #56]	; 0x38
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	641a      	str	r2, [r3, #64]	; 0x40
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	645a      	str	r2, [r3, #68]	; 0x44
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	64da      	str	r2, [r3, #76]	; 0x4c
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002766:	335c      	adds	r3, #92	; 0x5c
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002774:	3320      	adds	r3, #32
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002780:	3322      	adds	r3, #34	; 0x22
 8002782:	2200      	movs	r2, #0
 8002784:	801a      	strh	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800278c:	3324      	adds	r3, #36	; 0x24
 800278e:	2200      	movs	r2, #0
 8002790:	801a      	strh	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8002798:	33f8      	adds	r3, #248	; 0xf8
 800279a:	2200      	movs	r2, #0
 800279c:	801a      	strh	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80027a4:	33fa      	adds	r3, #250	; 0xfa
 80027a6:	2200      	movs	r2, #0
 80027a8:	801a      	strh	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80027b0:	33fc      	adds	r3, #252	; 0xfc
 80027b2:	2200      	movs	r2, #0
 80027b4:	801a      	strh	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80027bc:	33fe      	adds	r3, #254	; 0xfe
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80027c8:	33ff      	adds	r3, #255	; 0xff
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80027de:	3304      	adds	r3, #4
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80027ec:	3308      	adds	r3, #8
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80027fa:	330c      	adds	r3, #12
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002808:	3310      	adds	r3, #16
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002816:	3314      	adds	r3, #20
 8002818:	2200      	movs	r2, #0
 800281a:	801a      	strh	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002822:	3316      	adds	r3, #22
 8002824:	2200      	movs	r2, #0
 8002826:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a3a      	ldr	r2, [r7, #32]
 800283e:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002844:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800284a:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002850:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002856:	621a      	str	r2, [r3, #32]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002858:	2300      	movs	r3, #0
 800285a:	82fb      	strh	r3, [r7, #22]
 800285c:	8afb      	ldrh	r3, [r7, #22]
 800285e:	f241 726f 	movw	r2, #5999	; 0x176f
 8002862:	4293      	cmp	r3, r2
 8002864:	d80d      	bhi.n	8002882 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1ca>
		velocity_table_[i] = 0;
 8002866:	8afb      	ldrh	r3, [r7, #22]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800286e:	3318      	adds	r3, #24
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800287a:	8afb      	ldrh	r3, [r7, #22]
 800287c:	3301      	adds	r3, #1
 800287e:	82fb      	strh	r3, [r7, #22]
 8002880:	e7ec      	b.n	800285c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1a4>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002882:	2300      	movs	r3, #0
 8002884:	82bb      	strh	r3, [r7, #20]
 8002886:	8abb      	ldrh	r3, [r7, #20]
 8002888:	2b63      	cmp	r3, #99	; 0x63
 800288a:	d80d      	bhi.n	80028a8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1f0>
		crossline_distance_[i] = 0;
 800288c:	8abb      	ldrh	r3, [r7, #20]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002894:	330a      	adds	r3, #10
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80028a0:	8abb      	ldrh	r3, [r7, #20]
 80028a2:	3301      	adds	r3, #1
 80028a4:	82bb      	strh	r3, [r7, #20]
 80028a6:	e7ee      	b.n	8002886 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1ce>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028a8:	2300      	movs	r3, #0
 80028aa:	827b      	strh	r3, [r7, #18]
 80028ac:	8a7b      	ldrh	r3, [r7, #18]
 80028ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028b2:	d20d      	bcs.n	80028d0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x218>
		sideline_distance_[i] = 0;
 80028b4:	8a7b      	ldrh	r3, [r7, #18]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80028bc:	332e      	adds	r3, #46	; 0x2e
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028c8:	8a7b      	ldrh	r3, [r7, #18]
 80028ca:	3301      	adds	r3, #1
 80028cc:	827b      	strh	r3, [r7, #18]
 80028ce:	e7ed      	b.n	80028ac <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1f4>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028d0:	2300      	movs	r3, #0
 80028d2:	823b      	strh	r3, [r7, #16]
 80028d4:	8a3b      	ldrh	r3, [r7, #16]
 80028d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028da:	d20d      	bcs.n	80028f8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x240>
		all_sideline_distance_[i] = 0;
 80028dc:	8a3b      	ldrh	r3, [r7, #16]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	f503 534d 	add.w	r3, r3, #13120	; 0x3340
 80028e4:	3316      	adds	r3, #22
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028f0:	8a3b      	ldrh	r3, [r7, #16]
 80028f2:	3301      	adds	r3, #1
 80028f4:	823b      	strh	r3, [r7, #16]
 80028f6:	e7ed      	b.n	80028d4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x21c>
	}
}
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4618      	mov	r0, r3
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002908:	b5b0      	push	{r4, r5, r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002920:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800292c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002938:	ee37 7a27 	vadd.f32	s14, s14, s15
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002944:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002950:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800295c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002970:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 800297c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002988:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 8002994:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80029a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80029ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80029b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b4:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 80029b8:	4a1d      	ldr	r2, [pc, #116]	; (8002a30 <_ZN9LineTrace9calcErrorEv+0x128>)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f7fd fdda 	bl	8000578 <__aeabi_f2d>
 80029c4:	a316      	add	r3, pc, #88	; (adr r3, 8002a20 <_ZN9LineTrace9calcErrorEv+0x118>)
 80029c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ca:	f7fd fe2d 	bl	8000628 <__aeabi_dmul>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	4614      	mov	r4, r2
 80029d4:	461d      	mov	r5, r3
 80029d6:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <_ZN9LineTrace9calcErrorEv+0x12c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fdcc 	bl	8000578 <__aeabi_f2d>
 80029e0:	a311      	add	r3, pc, #68	; (adr r3, 8002a28 <_ZN9LineTrace9calcErrorEv+0x120>)
 80029e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e6:	f7fd fe1f 	bl	8000628 <__aeabi_dmul>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4620      	mov	r0, r4
 80029f0:	4629      	mov	r1, r5
 80029f2:	f7fd fc63 	bl	80002bc <__adddf3>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4610      	mov	r0, r2
 80029fc:	4619      	mov	r1, r3
 80029fe:	f7fe f90b 	bl	8000c18 <__aeabi_d2f>
 8002a02:	4603      	mov	r3, r0
 8002a04:	60fb      	str	r3, [r7, #12]
	//mon_diff_lpf = diff;

	pre_diff = diff;
 8002a06:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <_ZN9LineTrace9calcErrorEv+0x12c>)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6013      	str	r3, [r2, #0]

	return diff;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	ee07 3a90 	vmov	s15, r3

}
 8002a12:	eeb0 0a67 	vmov.f32	s0, s15
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a1c:	f3af 8000 	nop.w
 8002a20:	47ae147b 	.word	0x47ae147b
 8002a24:	3fb47ae1 	.word	0x3fb47ae1
 8002a28:	d70a3d71 	.word	0xd70a3d71
 8002a2c:	3fed70a3 	.word	0x3fed70a3
 8002a30:	20000260 	.word	0x20000260
 8002a34:	20000280 	.word	0x20000280

08002a38 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 8002a38:	b5b0      	push	{r4, r5, r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ff61 	bl	8002908 <_ZN9LineTrace9calcErrorEv>
 8002a46:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d107      	bne.n	8002a64 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002a54:	4b68      	ldr	r3, [pc, #416]	; (8002bf8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	}

	if(target_velocity_ >= 2.5){
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002a6a:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8002a6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a76:	db4c      	blt.n	8002b12 <_ZN9LineTrace8pidTraceEv+0xda>
		p = kp_fast_ * diff;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002a7e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a86:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_fast_ * (diff - pre_diff) / DELTA_T;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002a90:	4b5a      	ldr	r3, [pc, #360]	; (8002bfc <_ZN9LineTrace8pidTraceEv+0x1c4>)
 8002a92:	edd3 7a00 	vldr	s15, [r3]
 8002a96:	edd7 6a03 	vldr	s13, [r7, #12]
 8002a9a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa2:	ee17 0a90 	vmov	r0, s15
 8002aa6:	f7fd fd67 	bl	8000578 <__aeabi_f2d>
 8002aaa:	a351      	add	r3, pc, #324	; (adr r3, 8002bf0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab0:	f7fd fee4 	bl	800087c <__aeabi_ddiv>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	f7fe f8ac 	bl	8000c18 <__aeabi_d2f>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	613b      	str	r3, [r7, #16]
		i += ki_fast_ * diff * DELTA_T;
 8002ac4:	4b4c      	ldr	r3, [pc, #304]	; (8002bf8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fd fd55 	bl	8000578 <__aeabi_f2d>
 8002ace:	4604      	mov	r4, r0
 8002ad0:	460d      	mov	r5, r1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002ad8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae0:	ee17 0a90 	vmov	r0, s15
 8002ae4:	f7fd fd48 	bl	8000578 <__aeabi_f2d>
 8002ae8:	a341      	add	r3, pc, #260	; (adr r3, 8002bf0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aee:	f7fd fd9b 	bl	8000628 <__aeabi_dmul>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4620      	mov	r0, r4
 8002af8:	4629      	mov	r1, r5
 8002afa:	f7fd fbdf 	bl	80002bc <__adddf3>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4610      	mov	r0, r2
 8002b04:	4619      	mov	r1, r3
 8002b06:	f7fe f887 	bl	8000c18 <__aeabi_d2f>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	4a3a      	ldr	r2, [pc, #232]	; (8002bf8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	e04b      	b.n	8002baa <_ZN9LineTrace8pidTraceEv+0x172>
	}
	else{
		p = kp_ * diff;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002b18:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b20:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002b2a:	4b34      	ldr	r3, [pc, #208]	; (8002bfc <_ZN9LineTrace8pidTraceEv+0x1c4>)
 8002b2c:	edd3 7a00 	vldr	s15, [r3]
 8002b30:	edd7 6a03 	vldr	s13, [r7, #12]
 8002b34:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b3c:	ee17 0a90 	vmov	r0, s15
 8002b40:	f7fd fd1a 	bl	8000578 <__aeabi_f2d>
 8002b44:	a32a      	add	r3, pc, #168	; (adr r3, 8002bf0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4a:	f7fd fe97 	bl	800087c <__aeabi_ddiv>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4610      	mov	r0, r2
 8002b54:	4619      	mov	r1, r3
 8002b56:	f7fe f85f 	bl	8000c18 <__aeabi_d2f>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002b5e:	4b26      	ldr	r3, [pc, #152]	; (8002bf8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd fd08 	bl	8000578 <__aeabi_f2d>
 8002b68:	4604      	mov	r4, r0
 8002b6a:	460d      	mov	r5, r1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002b72:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b7a:	ee17 0a90 	vmov	r0, s15
 8002b7e:	f7fd fcfb 	bl	8000578 <__aeabi_f2d>
 8002b82:	a31b      	add	r3, pc, #108	; (adr r3, 8002bf0 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b88:	f7fd fd4e 	bl	8000628 <__aeabi_dmul>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4620      	mov	r0, r4
 8002b92:	4629      	mov	r1, r5
 8002b94:	f7fd fb92 	bl	80002bc <__adddf3>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f7fe f83a 	bl	8000c18 <__aeabi_d2f>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4a14      	ldr	r2, [pc, #80]	; (8002bf8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002ba8:	6013      	str	r3, [r2, #0]
	}

	float rotation_ratio = p + d + i;
 8002baa:	ed97 7a05 	vldr	s14, [r7, #20]
 8002bae:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bb6:	4b10      	ldr	r3, [pc, #64]	; (8002bf8 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002bb8:	edd3 7a00 	vldr	s15, [r3]
 8002bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc0:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002bce:	edd7 0a02 	vldr	s1, [r7, #8]
 8002bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	f002 fece 	bl	8005978 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002bdc:	4a07      	ldr	r2, [pc, #28]	; (8002bfc <_ZN9LineTrace8pidTraceEv+0x1c4>)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6013      	str	r3, [r2, #0]

}
 8002be2:	bf00      	nop
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bdb0      	pop	{r4, r5, r7, pc}
 8002bea:	bf00      	nop
 8002bec:	f3af 8000 	nop.w
 8002bf0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002bf4:	3f50624d 	.word	0x3f50624d
 8002bf8:	20000288 	.word	0x20000288
 8002bfc:	20000284 	.word	0x20000284

08002c00 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe fc7b 	bl	8001508 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f002 f98f 	bl	8004f3a <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f001 fec3 	bl	80049ac <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f001 ff28 	bl	8004a98 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 8002c50:	bf00      	nop
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002c70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002c7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c80:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002c84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c88:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002c9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002ca8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cac:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cb4:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8002cb8:	4a3e      	ldr	r2, [pc, #248]	; (8002db4 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002cbe:	4a3e      	ldr	r2, [pc, #248]	; (8002db8 <_ZN9LineTrace11isCrossLineEv+0x160>)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8002cc4:	4b3d      	ldr	r3, [pc, #244]	; (8002dbc <_ZN9LineTrace11isCrossLineEv+0x164>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d143      	bne.n	8002d54 <_ZN9LineTrace11isCrossLineEv+0xfc>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002ccc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cd0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002dc0 <_ZN9LineTrace11isCrossLineEv+0x168>
 8002cd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cdc:	d50f      	bpl.n	8002cfe <_ZN9LineTrace11isCrossLineEv+0xa6>
 8002cde:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ce2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002dc0 <_ZN9LineTrace11isCrossLineEv+0x168>
 8002ce6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cee:	d506      	bpl.n	8002cfe <_ZN9LineTrace11isCrossLineEv+0xa6>
			cnt++;
 8002cf0:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	4b32      	ldr	r3, [pc, #200]	; (8002dc4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002cfa:	801a      	strh	r2, [r3, #0]
 8002cfc:	e002      	b.n	8002d04 <_ZN9LineTrace11isCrossLineEv+0xac>
		}
		else{
			cnt = 0;
 8002cfe:	4b31      	ldr	r3, [pc, #196]	; (8002dc4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8002d04:	4b2f      	ldr	r3, [pc, #188]	; (8002dc4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d94c      	bls.n	8002da6 <_ZN9LineTrace11isCrossLineEv+0x14e>
			flag = true;
 8002d0c:	4b2e      	ldr	r3, [pc, #184]	; (8002dc8 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8002d12:	4b2a      	ldr	r3, [pc, #168]	; (8002dbc <_ZN9LineTrace11isCrossLineEv+0x164>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002d18:	4b2a      	ldr	r3, [pc, #168]	; (8002dc4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d2e:	3324      	adds	r3, #36	; 0x24
 8002d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d103      	bne.n	8002d40 <_ZN9LineTrace11isCrossLineEv+0xe8>
				storeCrossLineDistance();
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f001 fae9 	bl	8004310 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8002d3e:	e032      	b.n	8002da6 <_ZN9LineTrace11isCrossLineEv+0x14e>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f001 fb8b 	bl	800445c <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				correction_check_cnt_ = 0;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002d4c:	3314      	adds	r3, #20
 8002d4e:	2200      	movs	r2, #0
 8002d50:	801a      	strh	r2, [r3, #0]
 8002d52:	e028      	b.n	8002da6 <_ZN9LineTrace11isCrossLineEv+0x14e>

			//led_.LR(-1, 1);
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8002d54:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d58:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002dcc <_ZN9LineTrace11isCrossLineEv+0x174>
 8002d5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d64:	dd0f      	ble.n	8002d86 <_ZN9LineTrace11isCrossLineEv+0x12e>
 8002d66:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d6a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002dcc <_ZN9LineTrace11isCrossLineEv+0x174>
 8002d6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d76:	dd06      	ble.n	8002d86 <_ZN9LineTrace11isCrossLineEv+0x12e>
			cnt++;
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d82:	801a      	strh	r2, [r3, #0]
 8002d84:	e002      	b.n	8002d8c <_ZN9LineTrace11isCrossLineEv+0x134>
		}
		else{
			cnt = 0;
 8002d86:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	2b09      	cmp	r3, #9
 8002d92:	d908      	bls.n	8002da6 <_ZN9LineTrace11isCrossLineEv+0x14e>
			flag = false;
 8002d94:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8002d9a:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <_ZN9LineTrace11isCrossLineEv+0x164>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002da0:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	801a      	strh	r2, [r3, #0]
			//led_.LR(-1, 0);
		}

	}

	return flag;
 8002da6:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000268 	.word	0x20000268
 8002db8:	2000026c 	.word	0x2000026c
 8002dbc:	2000028f 	.word	0x2000028f
 8002dc0:	44160000 	.word	0x44160000
 8002dc4:	2000028c 	.word	0x2000028c
 8002dc8:	2000028e 	.word	0x2000028e
 8002dcc:	43fa0000 	.word	0x43fa0000

08002dd0 <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002de2:	3324      	adds	r3, #36	; 0x24
 8002de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d143      	bne.n	8002e74 <_ZN9LineTrace15radius2VelocityEf+0xa4>
		if(radius < 300) velocity = min_velocity_;
 8002dec:	edd7 7a00 	vldr	s15, [r7]
 8002df0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002f0c <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8002df4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfc:	d504      	bpl.n	8002e08 <_ZN9LineTrace15radius2VelocityEf+0x38>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	e076      	b.n	8002ef6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 800) velocity = 1.7;
 8002e08:	edd7 7a00 	vldr	s15, [r7]
 8002e0c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002f10 <_ZN9LineTrace15radius2VelocityEf+0x140>
 8002e10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e18:	d502      	bpl.n	8002e20 <_ZN9LineTrace15radius2VelocityEf+0x50>
 8002e1a:	4b3e      	ldr	r3, [pc, #248]	; (8002f14 <_ZN9LineTrace15radius2VelocityEf+0x144>)
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	e06a      	b.n	8002ef6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1000) velocity = 2.0;
 8002e20:	edd7 7a00 	vldr	s15, [r7]
 8002e24:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002f18 <_ZN9LineTrace15radius2VelocityEf+0x148>
 8002e28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e30:	d503      	bpl.n	8002e3a <_ZN9LineTrace15radius2VelocityEf+0x6a>
 8002e32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	e05d      	b.n	8002ef6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.3;
 8002e3a:	edd7 7a00 	vldr	s15, [r7]
 8002e3e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002f1c <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8002e42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4a:	d502      	bpl.n	8002e52 <_ZN9LineTrace15radius2VelocityEf+0x82>
 8002e4c:	4b34      	ldr	r3, [pc, #208]	; (8002f20 <_ZN9LineTrace15radius2VelocityEf+0x150>)
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	e051      	b.n	8002ef6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8002e52:	edd7 7a00 	vldr	s15, [r7]
 8002e56:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002f24 <_ZN9LineTrace15radius2VelocityEf+0x154>
 8002e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e62:	d502      	bpl.n	8002e6a <_ZN9LineTrace15radius2VelocityEf+0x9a>
 8002e64:	4b30      	ldr	r3, [pc, #192]	; (8002f28 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	e045      	b.n	8002ef6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity_;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	e040      	b.n	8002ef6 <_ZN9LineTrace15radius2VelocityEf+0x126>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002e7a:	3324      	adds	r3, #36	; 0x24
 8002e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d136      	bne.n	8002ef2 <_ZN9LineTrace15radius2VelocityEf+0x122>
		if(radius < 300) velocity = min_velocity2_;
 8002e84:	edd7 7a00 	vldr	s15, [r7]
 8002e88:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002f0c <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8002e8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e94:	d504      	bpl.n	8002ea0 <_ZN9LineTrace15radius2VelocityEf+0xd0>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	e02a      	b.n	8002ef6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.1;
 8002ea0:	edd7 7a00 	vldr	s15, [r7]
 8002ea4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002f1c <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8002ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb0:	d502      	bpl.n	8002eb8 <_ZN9LineTrace15radius2VelocityEf+0xe8>
 8002eb2:	4b1e      	ldr	r3, [pc, #120]	; (8002f2c <_ZN9LineTrace15radius2VelocityEf+0x15c>)
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	e01e      	b.n	8002ef6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8002eb8:	edd7 7a00 	vldr	s15, [r7]
 8002ebc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002f24 <_ZN9LineTrace15radius2VelocityEf+0x154>
 8002ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec8:	d502      	bpl.n	8002ed0 <_ZN9LineTrace15radius2VelocityEf+0x100>
 8002eca:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	e012      	b.n	8002ef6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2500) velocity = 3.0;
 8002ed0:	edd7 7a00 	vldr	s15, [r7]
 8002ed4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002f30 <_ZN9LineTrace15radius2VelocityEf+0x160>
 8002ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee0:	d502      	bpl.n	8002ee8 <_ZN9LineTrace15radius2VelocityEf+0x118>
 8002ee2:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <_ZN9LineTrace15radius2VelocityEf+0x164>)
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	e006      	b.n	8002ef6 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity2_;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	e001      	b.n	8002ef6 <_ZN9LineTrace15radius2VelocityEf+0x126>
	}
	else velocity = 1.3;
 8002ef2:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <_ZN9LineTrace15radius2VelocityEf+0x168>)
 8002ef4:	60fb      	str	r3, [r7, #12]

	return velocity;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	ee07 3a90 	vmov	s15, r3
}
 8002efc:	eeb0 0a67 	vmov.f32	s0, s15
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	43960000 	.word	0x43960000
 8002f10:	44480000 	.word	0x44480000
 8002f14:	3fd9999a 	.word	0x3fd9999a
 8002f18:	447a0000 	.word	0x447a0000
 8002f1c:	44bb8000 	.word	0x44bb8000
 8002f20:	40133333 	.word	0x40133333
 8002f24:	44fa0000 	.word	0x44fa0000
 8002f28:	40200000 	.word	0x40200000
 8002f2c:	40066666 	.word	0x40066666
 8002f30:	451c4000 	.word	0x451c4000
 8002f34:	40400000 	.word	0x40400000
 8002f38:	3fa66666 	.word	0x3fa66666

08002f3c <_ZN9LineTrace20createVelocityTabeleEv>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::createVelocityTabele()
{
 8002f3c:	b590      	push	{r4, r7, lr}
 8002f3e:	b08b      	sub	sp, #44	; 0x2c
 8002f40:	af02      	add	r7, sp, #8
 8002f42:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f001 fc8e 	bl	800486a <_ZN6Logger23getDistanceArrayPointerEv>
 8002f4e:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f001 fc94 	bl	8004882 <_ZN6Logger20getThetaArrayPointerEv>
 8002f5a:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	837b      	strh	r3, [r7, #26]
 8002f60:	8b7b      	ldrh	r3, [r7, #26]
 8002f62:	f241 726f 	movw	r2, #5999	; 0x176f
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d84b      	bhi.n	8003002 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8002f6a:	8b7b      	ldrh	r3, [r7, #26]
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4413      	add	r3, r2
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002f76:	8b7b      	ldrh	r3, [r7, #26]
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002f82:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8e:	d101      	bne.n	8002f94 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8002f90:	4b4c      	ldr	r3, [pc, #304]	; (80030c4 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 8002f92:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002f94:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f98:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f9c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002fa0:	eeb0 0a66 	vmov.f32	s0, s13
 8002fa4:	f7ff fb78 	bl	8002698 <_ZSt3absf>
 8002fa8:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002fac:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fb0:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80030c8 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8002fb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fbc:	db01      	blt.n	8002fc2 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8002fbe:	4b43      	ldr	r3, [pc, #268]	; (80030cc <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 8002fc0:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8002fc2:	8b7c      	ldrh	r4, [r7, #26]
 8002fc4:	ed97 0a05 	vldr	s0, [r7, #20]
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff ff01 	bl	8002dd0 <_ZN9LineTrace15radius2VelocityEf>
 8002fce:	eef0 7a40 	vmov.f32	s15, s0
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8002fd8:	3318      	adds	r3, #24
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8002fe2:	8b7b      	ldrh	r3, [r7, #26]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	441a      	add	r2, r3
 8002fea:	8b7b      	ldrh	r3, [r7, #26]
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	3326      	adds	r3, #38	; 0x26
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002ffa:	8b7b      	ldrh	r3, [r7, #26]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	837b      	strh	r3, [r7, #26]
 8003000:	e7ae      	b.n	8002f60 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003008:	3324      	adds	r3, #36	; 0x24
 800300a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d120      	bne.n	8003054 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800301e:	3360      	adds	r3, #96	; 0x60
 8003020:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003028:	3308      	adds	r3, #8
 800302a:	edd3 7a00 	vldr	s15, [r3]
 800302e:	6939      	ldr	r1, [r7, #16]
 8003030:	eeb0 0a67 	vmov.f32	s0, s15
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f93f 	bl	80032b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003040:	3304      	adds	r3, #4
 8003042:	edd3 7a00 	vldr	s15, [r3]
 8003046:	6939      	ldr	r1, [r7, #16]
 8003048:	eeb0 0a67 	vmov.f32	s0, s15
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f9d7 	bl	8003400 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8003052:	e027      	b.n	80030a4 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800305a:	3324      	adds	r3, #36	; 0x24
 800305c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d11f      	bne.n	80030a4 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003070:	3360      	adds	r3, #96	; 0x60
 8003072:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800307a:	3310      	adds	r3, #16
 800307c:	edd3 7a00 	vldr	s15, [r3]
 8003080:	6939      	ldr	r1, [r7, #16]
 8003082:	eeb0 0a67 	vmov.f32	s0, s15
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f916 	bl	80032b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003092:	330c      	adds	r3, #12
 8003094:	edd3 7a00 	vldr	s15, [r3]
 8003098:	6939      	ldr	r1, [r7, #16]
 800309a:	eeb0 0a67 	vmov.f32	s0, s15
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f9ae 	bl	8003400 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80030aa:	3360      	adds	r3, #96	; 0x60
 80030ac:	2200      	movs	r2, #0
 80030ae:	9200      	str	r2, [sp, #0]
 80030b0:	f241 7270 	movw	r2, #6000	; 0x1770
 80030b4:	4906      	ldr	r1, [pc, #24]	; (80030d0 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 80030b6:	4807      	ldr	r0, [pc, #28]	; (80030d4 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 80030b8:	f7fe fa60 	bl	800157c <sd_write_array_float>

}
 80030bc:	bf00      	nop
 80030be:	3724      	adds	r7, #36	; 0x24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd90      	pop	{r4, r7, pc}
 80030c4:	3727c5ac 	.word	0x3727c5ac
 80030c8:	459c4000 	.word	0x459c4000
 80030cc:	459c4000 	.word	0x459c4000
 80030d0:	0801a788 	.word	0x0801a788
 80030d4:	0801a798 	.word	0x0801a798

080030d8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

//float mon_crossdis;
void LineTrace::createVelocityTabeleFromSD()
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b08b      	sub	sp, #44	; 0x2c
 80030dc:	af02      	add	r7, sp, #8
 80030de:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69d8      	ldr	r0, [r3, #28]
 80030e4:	4b6b      	ldr	r3, [pc, #428]	; (8003294 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 80030e6:	4a6c      	ldr	r2, [pc, #432]	; (8003298 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 80030e8:	496c      	ldr	r1, [pc, #432]	; (800329c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80030ea:	f001 fc42 	bl	8004972 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80030f4:	3328      	adds	r3, #40	; 0x28
 80030f6:	2264      	movs	r2, #100	; 0x64
 80030f8:	4969      	ldr	r1, [pc, #420]	; (80032a0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 80030fa:	4868      	ldr	r0, [pc, #416]	; (800329c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80030fc:	f7fe faa4 	bl	8001648 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8003106:	33b8      	adds	r3, #184	; 0xb8
 8003108:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800310c:	4965      	ldr	r1, [pc, #404]	; (80032a4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 800310e:	4863      	ldr	r0, [pc, #396]	; (800329c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8003110:	f7fe fa9a 	bl	8001648 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	4618      	mov	r0, r3
 800311a:	f001 fba6 	bl	800486a <_ZN6Logger23getDistanceArrayPointerEv>
 800311e:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	4618      	mov	r0, r3
 8003126:	f001 fbac 	bl	8004882 <_ZN6Logger20getThetaArrayPointerEv>
 800312a:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800312c:	2300      	movs	r3, #0
 800312e:	837b      	strh	r3, [r7, #26]
 8003130:	8b7b      	ldrh	r3, [r7, #26]
 8003132:	f241 726f 	movw	r2, #5999	; 0x176f
 8003136:	4293      	cmp	r3, r2
 8003138:	d84b      	bhi.n	80031d2 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 800313a:	8b7b      	ldrh	r3, [r7, #26]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4413      	add	r3, r2
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8003146:	8b7b      	ldrh	r3, [r7, #26]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4413      	add	r3, r2
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8003152:	edd7 7a07 	vldr	s15, [r7, #28]
 8003156:	eef5 7a40 	vcmp.f32	s15, #0.0
 800315a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800315e:	d101      	bne.n	8003164 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8003160:	4b51      	ldr	r3, [pc, #324]	; (80032a8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 8003162:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 8003164:	ed97 7a02 	vldr	s14, [r7, #8]
 8003168:	edd7 7a07 	vldr	s15, [r7, #28]
 800316c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003170:	eeb0 0a66 	vmov.f32	s0, s13
 8003174:	f7ff fa90 	bl	8002698 <_ZSt3absf>
 8003178:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 800317c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003180:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80032ac <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 8003184:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318c:	db01      	blt.n	8003192 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 800318e:	4b48      	ldr	r3, [pc, #288]	; (80032b0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 8003190:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 8003192:	8b7c      	ldrh	r4, [r7, #26]
 8003194:	ed97 0a05 	vldr	s0, [r7, #20]
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff fe19 	bl	8002dd0 <_ZN9LineTrace15radius2VelocityEf>
 800319e:	eef0 7a40 	vmov.f32	s15, s0
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 80031a8:	3318      	adds	r3, #24
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 80031b2:	8b7b      	ldrh	r3, [r7, #26]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	441a      	add	r2, r3
 80031ba:	8b7b      	ldrh	r3, [r7, #26]
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	3326      	adds	r3, #38	; 0x26
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	3304      	adds	r3, #4
 80031c8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80031ca:	8b7b      	ldrh	r3, [r7, #26]
 80031cc:	3301      	adds	r3, #1
 80031ce:	837b      	strh	r3, [r7, #26]
 80031d0:	e7ae      	b.n	8003130 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80031d8:	3324      	adds	r3, #36	; 0x24
 80031da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d120      	bne.n	8003224 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80031ee:	3360      	adds	r3, #96	; 0x60
 80031f0:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80031f8:	3308      	adds	r3, #8
 80031fa:	edd3 7a00 	vldr	s15, [r3]
 80031fe:	6939      	ldr	r1, [r7, #16]
 8003200:	eeb0 0a67 	vmov.f32	s0, s15
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f857 	bl	80032b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003210:	3304      	adds	r3, #4
 8003212:	edd3 7a00 	vldr	s15, [r3]
 8003216:	6939      	ldr	r1, [r7, #16]
 8003218:	eeb0 0a67 	vmov.f32	s0, s15
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f8ef 	bl	8003400 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8003222:	e027      	b.n	8003274 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800322a:	3324      	adds	r3, #36	; 0x24
 800322c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d11f      	bne.n	8003274 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003240:	3360      	adds	r3, #96	; 0x60
 8003242:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800324a:	3310      	adds	r3, #16
 800324c:	edd3 7a00 	vldr	s15, [r3]
 8003250:	6939      	ldr	r1, [r7, #16]
 8003252:	eeb0 0a67 	vmov.f32	s0, s15
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f82e 	bl	80032b8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003262:	330c      	adds	r3, #12
 8003264:	edd3 7a00 	vldr	s15, [r3]
 8003268:	6939      	ldr	r1, [r7, #16]
 800326a:	eeb0 0a67 	vmov.f32	s0, s15
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f8c6 	bl	8003400 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800327a:	3360      	adds	r3, #96	; 0x60
 800327c:	2200      	movs	r2, #0
 800327e:	9200      	str	r2, [sp, #0]
 8003280:	f241 7270 	movw	r2, #6000	; 0x1770
 8003284:	490b      	ldr	r1, [pc, #44]	; (80032b4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 8003286:	4805      	ldr	r0, [pc, #20]	; (800329c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8003288:	f7fe f978 	bl	800157c <sd_write_array_float>

}
 800328c:	bf00      	nop
 800328e:	3724      	adds	r7, #36	; 0x24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd90      	pop	{r4, r7, pc}
 8003294:	0801a7a4 	.word	0x0801a7a4
 8003298:	0801a7b0 	.word	0x0801a7b0
 800329c:	0801a798 	.word	0x0801a798
 80032a0:	0801a7c0 	.word	0x0801a7c0
 80032a4:	0801a7d0 	.word	0x0801a7d0
 80032a8:	3727c5ac 	.word	0x3727c5ac
 80032ac:	459c4000 	.word	0x459c4000
 80032b0:	459c4000 	.word	0x459c4000
 80032b4:	0801a788 	.word	0x0801a788

080032b8 <_ZN9LineTrace20decelerateProcessingEfPKf>:

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 80032b8:	b5b0      	push	{r4, r5, r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80032c4:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80032c6:	f241 736f 	movw	r3, #5999	; 0x176f
 80032ca:	83fb      	strh	r3, [r7, #30]
 80032cc:	8bfb      	ldrh	r3, [r7, #30]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 808b 	beq.w	80033ea <_ZN9LineTrace20decelerateProcessingEfPKf+0x132>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 80032d4:	8bfb      	ldrh	r3, [r7, #30]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80032de:	3318      	adds	r3, #24
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	ed93 7a00 	vldr	s14, [r3]
 80032e8:	8bfb      	ldrh	r3, [r7, #30]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80032f0:	3318      	adds	r3, #24
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	edd3 7a00 	vldr	s15, [r3]
 80032fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032fe:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003302:	edd7 7a06 	vldr	s15, [r7, #24]
 8003306:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800330a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330e:	dd68      	ble.n	80033e2 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12a>
			float t = p_distance[i]*1e-3 / v_diff;
 8003310:	8bfb      	ldrh	r3, [r7, #30]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4413      	add	r3, r2
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd f92c 	bl	8000578 <__aeabi_f2d>
 8003320:	a335      	add	r3, pc, #212	; (adr r3, 80033f8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	f7fd f97f 	bl	8000628 <__aeabi_dmul>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4614      	mov	r4, r2
 8003330:	461d      	mov	r5, r3
 8003332:	69b8      	ldr	r0, [r7, #24]
 8003334:	f7fd f920 	bl	8000578 <__aeabi_f2d>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4620      	mov	r0, r4
 800333e:	4629      	mov	r1, r5
 8003340:	f7fd fa9c 	bl	800087c <__aeabi_ddiv>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4610      	mov	r0, r2
 800334a:	4619      	mov	r1, r3
 800334c:	f7fd fc64 	bl	8000c18 <__aeabi_d2f>
 8003350:	4603      	mov	r3, r0
 8003352:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003354:	edd7 6a06 	vldr	s13, [r7, #24]
 8003358:	ed97 7a05 	vldr	s14, [r7, #20]
 800335c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003360:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003364:	ed97 7a04 	vldr	s14, [r7, #16]
 8003368:	edd7 7a02 	vldr	s15, [r7, #8]
 800336c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003374:	dd35      	ble.n	80033e2 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12a>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003376:	8bfb      	ldrh	r3, [r7, #30]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800337e:	3318      	adds	r3, #24
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd f8f6 	bl	8000578 <__aeabi_f2d>
 800338c:	4604      	mov	r4, r0
 800338e:	460d      	mov	r5, r1
 8003390:	8bfb      	ldrh	r3, [r7, #30]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	4413      	add	r3, r2
 8003398:	ed93 7a00 	vldr	s14, [r3]
 800339c:	edd7 7a02 	vldr	s15, [r7, #8]
 80033a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a4:	ee17 0a90 	vmov	r0, s15
 80033a8:	f7fd f8e6 	bl	8000578 <__aeabi_f2d>
 80033ac:	a312      	add	r3, pc, #72	; (adr r3, 80033f8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b2:	f7fd f939 	bl	8000628 <__aeabi_dmul>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4620      	mov	r0, r4
 80033bc:	4629      	mov	r1, r5
 80033be:	f7fc ff7d 	bl	80002bc <__adddf3>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4610      	mov	r0, r2
 80033c8:	4619      	mov	r1, r3
 80033ca:	8bfb      	ldrh	r3, [r7, #30]
 80033cc:	1e5c      	subs	r4, r3, #1
 80033ce:	f7fd fc23 	bl	8000c18 <__aeabi_d2f>
 80033d2:	4601      	mov	r1, r0
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 80033da:	3318      	adds	r3, #24
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80033e2:	8bfb      	ldrh	r3, [r7, #30]
 80033e4:	3b01      	subs	r3, #1
 80033e6:	83fb      	strh	r3, [r7, #30]
 80033e8:	e770      	b.n	80032cc <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 80033ea:	bf00      	nop
 80033ec:	3720      	adds	r7, #32
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bdb0      	pop	{r4, r5, r7, pc}
 80033f2:	bf00      	nop
 80033f4:	f3af 8000 	nop.w
 80033f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80033fc:	3f50624d 	.word	0x3f50624d

08003400 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003400:	b5b0      	push	{r4, r5, r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	ed87 0a02 	vstr	s0, [r7, #8]
 800340c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800340e:	2300      	movs	r3, #0
 8003410:	83fb      	strh	r3, [r7, #30]
 8003412:	8bfb      	ldrh	r3, [r7, #30]
 8003414:	f241 726f 	movw	r2, #5999	; 0x176f
 8003418:	4293      	cmp	r3, r2
 800341a:	f200 808b 	bhi.w	8003534 <_ZN9LineTrace20accelerateProcessingEfPKf+0x134>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 800341e:	8bfb      	ldrh	r3, [r7, #30]
 8003420:	3301      	adds	r3, #1
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003428:	3318      	adds	r3, #24
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	ed93 7a00 	vldr	s14, [r3]
 8003432:	8bfb      	ldrh	r3, [r7, #30]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800343a:	3318      	adds	r3, #24
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	edd3 7a00 	vldr	s15, [r3]
 8003444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003448:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800344c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003450:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003458:	dd68      	ble.n	800352c <_ZN9LineTrace20accelerateProcessingEfPKf+0x12c>
			float t = p_distance[i]*1e-3 / v_diff;
 800345a:	8bfb      	ldrh	r3, [r7, #30]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4413      	add	r3, r2
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd f887 	bl	8000578 <__aeabi_f2d>
 800346a:	a335      	add	r3, pc, #212	; (adr r3, 8003540 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	f7fd f8da 	bl	8000628 <__aeabi_dmul>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4614      	mov	r4, r2
 800347a:	461d      	mov	r5, r3
 800347c:	69b8      	ldr	r0, [r7, #24]
 800347e:	f7fd f87b 	bl	8000578 <__aeabi_f2d>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4620      	mov	r0, r4
 8003488:	4629      	mov	r1, r5
 800348a:	f7fd f9f7 	bl	800087c <__aeabi_ddiv>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4610      	mov	r0, r2
 8003494:	4619      	mov	r1, r3
 8003496:	f7fd fbbf 	bl	8000c18 <__aeabi_d2f>
 800349a:	4603      	mov	r3, r0
 800349c:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800349e:	edd7 6a06 	vldr	s13, [r7, #24]
 80034a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80034a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034aa:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80034ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80034b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80034b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034be:	dd35      	ble.n	800352c <_ZN9LineTrace20accelerateProcessingEfPKf+0x12c>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80034c0:	8bfb      	ldrh	r3, [r7, #30]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80034c8:	3318      	adds	r3, #24
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fd f851 	bl	8000578 <__aeabi_f2d>
 80034d6:	4604      	mov	r4, r0
 80034d8:	460d      	mov	r5, r1
 80034da:	8bfb      	ldrh	r3, [r7, #30]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	4413      	add	r3, r2
 80034e2:	ed93 7a00 	vldr	s14, [r3]
 80034e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80034ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ee:	ee17 0a90 	vmov	r0, s15
 80034f2:	f7fd f841 	bl	8000578 <__aeabi_f2d>
 80034f6:	a312      	add	r3, pc, #72	; (adr r3, 8003540 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	f7fd f894 	bl	8000628 <__aeabi_dmul>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4620      	mov	r0, r4
 8003506:	4629      	mov	r1, r5
 8003508:	f7fc fed8 	bl	80002bc <__adddf3>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4610      	mov	r0, r2
 8003512:	4619      	mov	r1, r3
 8003514:	8bfb      	ldrh	r3, [r7, #30]
 8003516:	1c5c      	adds	r4, r3, #1
 8003518:	f7fd fb7e 	bl	8000c18 <__aeabi_d2f>
 800351c:	4601      	mov	r1, r0
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8003524:	3318      	adds	r3, #24
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800352c:	8bfb      	ldrh	r3, [r7, #30]
 800352e:	3301      	adds	r3, #1
 8003530:	83fb      	strh	r3, [r7, #30]
 8003532:	e76e      	b.n	8003412 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003534:	bf00      	nop
 8003536:	3720      	adds	r7, #32
 8003538:	46bd      	mov	sp, r7
 800353a:	bdb0      	pop	{r4, r5, r7, pc}
 800353c:	f3af 8000 	nop.w
 8003540:	d2f1a9fc 	.word	0xd2f1a9fc
 8003544:	3f50624d 	.word	0x3f50624d

08003548 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()

{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003556:	3320      	adds	r3, #32
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b01      	cmp	r3, #1
 800355c:	f040 8086 	bne.w	800366c <_ZN9LineTrace20updateTargetVelocityEv+0x124>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	4618      	mov	r0, r3
 8003566:	f7fd ffb1 	bl	80014cc <_ZN7Encoder16getTotalDistanceEv>
 800356a:	eeb0 7a40 	vmov.f32	s14, s0
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003574:	335c      	adds	r3, #92	; 0x5c
 8003576:	edd3 7a00 	vldr	s15, [r3]
 800357a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800357e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003582:	bfac      	ite	ge
 8003584:	2301      	movge	r3, #1
 8003586:	2300      	movlt	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d026      	beq.n	80035dc <_ZN9LineTrace20updateTargetVelocityEv+0x94>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003594:	335c      	adds	r3, #92	; 0x5c
 8003596:	ed93 7a00 	vldr	s14, [r3]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035a0:	3322      	adds	r3, #34	; 0x22
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	3326      	adds	r3, #38	; 0x26
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	3304      	adds	r3, #4
 80035ae:	edd3 7a00 	vldr	s15, [r3]
 80035b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80035bc:	335c      	adds	r3, #92	; 0x5c
 80035be:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035c8:	3322      	adds	r3, #34	; 0x22
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	3301      	adds	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035d6:	3322      	adds	r3, #34	; 0x22
 80035d8:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 80035da:	e7c1      	b.n	8003560 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035e2:	3322      	adds	r3, #34	; 0x22
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	f241 726f 	movw	r2, #5999	; 0x176f
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d906      	bls.n	80035fc <_ZN9LineTrace20updateTargetVelocityEv+0xb4>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035f4:	3322      	adds	r3, #34	; 0x22
 80035f6:	f241 726f 	movw	r2, #5999	; 0x176f
 80035fa:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003602:	335c      	adds	r3, #92	; 0x5c
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1b      	ldr	r2, [pc, #108]	; (8003674 <_ZN9LineTrace20updateTargetVelocityEv+0x12c>)
 8003608:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	4618      	mov	r0, r3
 8003610:	f7fd ff5c 	bl	80014cc <_ZN7Encoder16getTotalDistanceEv>
 8003614:	eef0 7a40 	vmov.f32	s15, s0
 8003618:	4b17      	ldr	r3, [pc, #92]	; (8003678 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 800361a:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003624:	3322      	adds	r3, #34	; 0x22
 8003626:	881a      	ldrh	r2, [r3, #0]
 8003628:	4b14      	ldr	r3, [pc, #80]	; (800367c <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 800362a:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003632:	3322      	adds	r3, #34	; 0x22
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800363c:	3318      	adds	r3, #24
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	edd3 7a00 	vldr	s15, [r3]
 8003646:	eeb0 0a67 	vmov.f32	s0, s15
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fa04 	bl	8003a58 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003656:	3322      	adds	r3, #34	; 0x22
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003660:	3318      	adds	r3, #24
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a05      	ldr	r2, [pc, #20]	; (8003680 <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 800366a:	6013      	str	r3, [r2, #0]

	}
}
 800366c:	bf00      	nop
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	20000270 	.word	0x20000270
 8003678:	20000274 	.word	0x20000274
 800367c:	20000278 	.word	0x20000278
 8003680:	2000027c 	.word	0x2000027c

08003684 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800368c:	2300      	movs	r3, #0
 800368e:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	4618      	mov	r0, r3
 8003696:	f7fd ff0a 	bl	80014ae <_ZN7Encoder15getDistance10mmEv>
 800369a:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f001 fc37 	bl	8004f16 <_ZN8Odometry8getThetaEv>
 80036a8:	ec53 2b10 	vmov	r2, r3, d0
 80036ac:	4610      	mov	r0, r2
 80036ae:	4619      	mov	r1, r3
 80036b0:	f7fd fab2 	bl	8000c18 <__aeabi_d2f>
 80036b4:	4603      	mov	r3, r0
 80036b6:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 80036b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80036bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80036c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c4:	d101      	bne.n	80036ca <_ZN9LineTrace8isStableEv+0x46>
 80036c6:	4b22      	ldr	r3, [pc, #136]	; (8003750 <_ZN9LineTrace8isStableEv+0xcc>)
 80036c8:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 80036ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80036ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80036d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80036d6:	eeb0 0a66 	vmov.f32	s0, s13
 80036da:	f7fe ffdd 	bl	8002698 <_ZSt3absf>
 80036de:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 80036e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80036e6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003754 <_ZN9LineTrace8isStableEv+0xd0>
 80036ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f2:	db01      	blt.n	80036f8 <_ZN9LineTrace8isStableEv+0x74>
 80036f4:	4b18      	ldr	r3, [pc, #96]	; (8003758 <_ZN9LineTrace8isStableEv+0xd4>)
 80036f6:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d107      	bne.n	8003714 <_ZN9LineTrace8isStableEv+0x90>
		stable_cnt = 0;
 8003704:	4b15      	ldr	r3, [pc, #84]	; (800375c <_ZN9LineTrace8isStableEv+0xd8>)
 8003706:	2200      	movs	r2, #0
 8003708:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003710:	2200      	movs	r2, #0
 8003712:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){ //150
 8003714:	edd7 7a03 	vldr	s15, [r7, #12]
 8003718:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003760 <_ZN9LineTrace8isStableEv+0xdc>
 800371c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003724:	db06      	blt.n	8003734 <_ZN9LineTrace8isStableEv+0xb0>
		stable_cnt++;
 8003726:	4b0d      	ldr	r3, [pc, #52]	; (800375c <_ZN9LineTrace8isStableEv+0xd8>)
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	3301      	adds	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	4b0b      	ldr	r3, [pc, #44]	; (800375c <_ZN9LineTrace8isStableEv+0xd8>)
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	e002      	b.n	800373a <_ZN9LineTrace8isStableEv+0xb6>
	}
	else{
		stable_cnt = 0;
 8003734:	4b09      	ldr	r3, [pc, #36]	; (800375c <_ZN9LineTrace8isStableEv+0xd8>)
 8003736:	2200      	movs	r2, #0
 8003738:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 800373a:	4b08      	ldr	r3, [pc, #32]	; (800375c <_ZN9LineTrace8isStableEv+0xd8>)
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	2b16      	cmp	r3, #22
 8003740:	d901      	bls.n	8003746 <_ZN9LineTrace8isStableEv+0xc2>
		ret = true;
 8003742:	2301      	movs	r3, #1
 8003744:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003746:	7dfb      	ldrb	r3, [r7, #23]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	3727c5ac 	.word	0x3727c5ac
 8003754:	459c4000 	.word	0x459c4000
 8003758:	459c4000 	.word	0x459c4000
 800375c:	20000290 	.word	0x20000290
 8003760:	44fa0000 	.word	0x44fa0000

08003764 <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b092      	sub	sp, #72	; 0x48
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 800376c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003770:	2201      	movs	r2, #1
 8003772:	4963      	ldr	r1, [pc, #396]	; (8003900 <_ZN9LineTrace4initEv+0x19c>)
 8003774:	4863      	ldr	r0, [pc, #396]	; (8003904 <_ZN9LineTrace4initEv+0x1a0>)
 8003776:	f7fd ff67 	bl	8001648 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 800377a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800377e:	2201      	movs	r2, #1
 8003780:	4961      	ldr	r1, [pc, #388]	; (8003908 <_ZN9LineTrace4initEv+0x1a4>)
 8003782:	4860      	ldr	r0, [pc, #384]	; (8003904 <_ZN9LineTrace4initEv+0x1a0>)
 8003784:	f7fd ff60 	bl	8001648 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003788:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800378c:	2201      	movs	r2, #1
 800378e:	495f      	ldr	r1, [pc, #380]	; (800390c <_ZN9LineTrace4initEv+0x1a8>)
 8003790:	485c      	ldr	r0, [pc, #368]	; (8003904 <_ZN9LineTrace4initEv+0x1a0>)
 8003792:	f7fd ff59 	bl	8001648 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003796:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800379a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800379e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80037a2:	eeb0 1a66 	vmov.f32	s2, s13
 80037a6:	eef0 0a47 	vmov.f32	s1, s14
 80037aa:	eeb0 0a67 	vmov.f32	s0, s15
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f8c6 	bl	8003940 <_ZN9LineTrace7setGainEfff>

	float temp_kp_fast, temp_ki_fast, temp_kd_fast;
	sd_read_array_float("PARAMS", "KPFAST.TXT", 1, &temp_kp_fast);
 80037b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80037b8:	2201      	movs	r2, #1
 80037ba:	4955      	ldr	r1, [pc, #340]	; (8003910 <_ZN9LineTrace4initEv+0x1ac>)
 80037bc:	4851      	ldr	r0, [pc, #324]	; (8003904 <_ZN9LineTrace4initEv+0x1a0>)
 80037be:	f7fd ff43 	bl	8001648 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KIFAST.TXT", 1, &temp_ki_fast);
 80037c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037c6:	2201      	movs	r2, #1
 80037c8:	4952      	ldr	r1, [pc, #328]	; (8003914 <_ZN9LineTrace4initEv+0x1b0>)
 80037ca:	484e      	ldr	r0, [pc, #312]	; (8003904 <_ZN9LineTrace4initEv+0x1a0>)
 80037cc:	f7fd ff3c 	bl	8001648 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KDFAST.TXT", 1, &temp_kd_fast);
 80037d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037d4:	2201      	movs	r2, #1
 80037d6:	4950      	ldr	r1, [pc, #320]	; (8003918 <_ZN9LineTrace4initEv+0x1b4>)
 80037d8:	484a      	ldr	r0, [pc, #296]	; (8003904 <_ZN9LineTrace4initEv+0x1a0>)
 80037da:	f7fd ff35 	bl	8001648 <sd_read_array_float>
	setGainFast(temp_kp_fast, temp_ki_fast, temp_kd_fast);
 80037de:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80037e2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80037e6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80037ea:	eeb0 1a66 	vmov.f32	s2, s13
 80037ee:	eef0 0a47 	vmov.f32	s1, s14
 80037f2:	eeb0 0a67 	vmov.f32	s0, s15
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f8bb 	bl	8003972 <_ZN9LineTrace11setGainFastEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 80037fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003800:	2201      	movs	r2, #1
 8003802:	4946      	ldr	r1, [pc, #280]	; (800391c <_ZN9LineTrace4initEv+0x1b8>)
 8003804:	483f      	ldr	r0, [pc, #252]	; (8003904 <_ZN9LineTrace4initEv+0x1a0>)
 8003806:	f7fd ff1f 	bl	8001648 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 800380a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800380e:	2201      	movs	r2, #1
 8003810:	4943      	ldr	r1, [pc, #268]	; (8003920 <_ZN9LineTrace4initEv+0x1bc>)
 8003812:	483c      	ldr	r0, [pc, #240]	; (8003904 <_ZN9LineTrace4initEv+0x1a0>)
 8003814:	f7fd ff18 	bl	8001648 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800381c:	2201      	movs	r2, #1
 800381e:	4941      	ldr	r1, [pc, #260]	; (8003924 <_ZN9LineTrace4initEv+0x1c0>)
 8003820:	4838      	ldr	r0, [pc, #224]	; (8003904 <_ZN9LineTrace4initEv+0x1a0>)
 8003822:	f7fd ff11 	bl	8001648 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003826:	f107 0320 	add.w	r3, r7, #32
 800382a:	2201      	movs	r2, #1
 800382c:	493e      	ldr	r1, [pc, #248]	; (8003928 <_ZN9LineTrace4initEv+0x1c4>)
 800382e:	4835      	ldr	r0, [pc, #212]	; (8003904 <_ZN9LineTrace4initEv+0x1a0>)
 8003830:	f7fd ff0a 	bl	8001648 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003834:	f107 031c 	add.w	r3, r7, #28
 8003838:	2201      	movs	r2, #1
 800383a:	493c      	ldr	r1, [pc, #240]	; (800392c <_ZN9LineTrace4initEv+0x1c8>)
 800383c:	4831      	ldr	r0, [pc, #196]	; (8003904 <_ZN9LineTrace4initEv+0x1a0>)
 800383e:	f7fd ff03 	bl	8001648 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003842:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003846:	eeb0 0a67 	vmov.f32	s0, s15
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f904 	bl	8003a58 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003850:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003854:	eeb0 0a67 	vmov.f32	s0, s15
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f90d 	bl	8003a78 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 800385e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003862:	eeb0 0a67 	vmov.f32	s0, s15
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f916 	bl	8003a98 <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 800386c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003870:	eeb0 0a67 	vmov.f32	s0, s15
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f91f 	bl	8003ab8 <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 800387a:	edd7 7a07 	vldr	s15, [r7, #28]
 800387e:	eeb0 0a67 	vmov.f32	s0, s15
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f928 	bl	8003ad8 <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003888:	f107 0318 	add.w	r3, r7, #24
 800388c:	2201      	movs	r2, #1
 800388e:	4928      	ldr	r1, [pc, #160]	; (8003930 <_ZN9LineTrace4initEv+0x1cc>)
 8003890:	481c      	ldr	r0, [pc, #112]	; (8003904 <_ZN9LineTrace4initEv+0x1a0>)
 8003892:	f7fd fed9 	bl	8001648 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003896:	f107 0314 	add.w	r3, r7, #20
 800389a:	2201      	movs	r2, #1
 800389c:	4925      	ldr	r1, [pc, #148]	; (8003934 <_ZN9LineTrace4initEv+0x1d0>)
 800389e:	4819      	ldr	r0, [pc, #100]	; (8003904 <_ZN9LineTrace4initEv+0x1a0>)
 80038a0:	f7fd fed2 	bl	8001648 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 80038a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80038a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80038ac:	eef0 0a47 	vmov.f32	s1, s14
 80038b0:	eeb0 0a67 	vmov.f32	s0, s15
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f96f 	bl	8003b98 <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 80038c6:	f107 0310 	add.w	r3, r7, #16
 80038ca:	2201      	movs	r2, #1
 80038cc:	491a      	ldr	r1, [pc, #104]	; (8003938 <_ZN9LineTrace4initEv+0x1d4>)
 80038ce:	480d      	ldr	r0, [pc, #52]	; (8003904 <_ZN9LineTrace4initEv+0x1a0>)
 80038d0:	f7fd feba 	bl	8001648 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 80038d4:	f107 030c 	add.w	r3, r7, #12
 80038d8:	2201      	movs	r2, #1
 80038da:	4918      	ldr	r1, [pc, #96]	; (800393c <_ZN9LineTrace4initEv+0x1d8>)
 80038dc:	4809      	ldr	r0, [pc, #36]	; (8003904 <_ZN9LineTrace4initEv+0x1a0>)
 80038de:	f7fd feb3 	bl	8001648 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 80038e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80038e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80038ea:	eef0 0a47 	vmov.f32	s1, s14
 80038ee:	eeb0 0a67 	vmov.f32	s0, s15
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f96a 	bl	8003bcc <_ZN9LineTrace13setMaxAccDec2Eff>
}
 80038f8:	bf00      	nop
 80038fa:	3748      	adds	r7, #72	; 0x48
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	0801a7dc 	.word	0x0801a7dc
 8003904:	0801a7e4 	.word	0x0801a7e4
 8003908:	0801a7ec 	.word	0x0801a7ec
 800390c:	0801a7f4 	.word	0x0801a7f4
 8003910:	0801a7fc 	.word	0x0801a7fc
 8003914:	0801a808 	.word	0x0801a808
 8003918:	0801a814 	.word	0x0801a814
 800391c:	0801a820 	.word	0x0801a820
 8003920:	0801a82c 	.word	0x0801a82c
 8003924:	0801a838 	.word	0x0801a838
 8003928:	0801a844 	.word	0x0801a844
 800392c:	0801a850 	.word	0x0801a850
 8003930:	0801a85c 	.word	0x0801a85c
 8003934:	0801a864 	.word	0x0801a864
 8003938:	0801a86c 	.word	0x0801a86c
 800393c:	0801a878 	.word	0x0801a878

08003940 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	ed87 0a02 	vstr	s0, [r7, #8]
 800394c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003950:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	625a      	str	r2, [r3, #36]	; 0x24
	ki_ = ki;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	62da      	str	r2, [r3, #44]	; 0x2c
	kd_ = kd;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <_ZN9LineTrace11setGainFastEfff>:

void LineTrace::setGainFast(float kp, float ki, float kd)
{
 8003972:	b480      	push	{r7}
 8003974:	b085      	sub	sp, #20
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	ed87 0a02 	vstr	s0, [r7, #8]
 800397e:	edc7 0a01 	vstr	s1, [r7, #4]
 8003982:	ed87 1a00 	vstr	s2, [r7]
	kp_fast_ = kp;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	631a      	str	r2, [r3, #48]	; 0x30
	ki_fast_ = ki;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	639a      	str	r2, [r3, #56]	; 0x38
	kd_fast_ = kd;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003998:	bf00      	nop
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
	return kp_;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	ee07 3a90 	vmov	s15, r3
}
 80039b4:	eeb0 0a67 	vmov.f32	s0, s15
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
	return ki_;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	ee07 3a90 	vmov	s15, r3
}
 80039d2:	eeb0 0a67 	vmov.f32	s0, s15
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
	return kd_;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	ee07 3a90 	vmov	s15, r3
}
 80039f0:	eeb0 0a67 	vmov.f32	s0, s15
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <_ZN9LineTrace9getKpFastEv>:

float LineTrace::getKpFast()
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
	return kp_fast_;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	ee07 3a90 	vmov	s15, r3
}
 8003a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <_ZN9LineTrace9getKiFastEv>:

float LineTrace::getKiFast()
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
	return ki_fast_;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a28:	ee07 3a90 	vmov	s15, r3
}
 8003a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <_ZN9LineTrace9getKdFastEv>:

float LineTrace::getKdFast()
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
	return kd_fast_;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a46:	ee07 3a90 	vmov	s15, r3
}
 8003a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <_ZN9LineTrace17setTargetVelocityEf>:
{
	normal_ratio_ = ratio;
}

void LineTrace::setTargetVelocity(float velocity)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <_ZN9LineTrace17getTargetVelocityEv>:
float LineTrace::getTargetVelocity()
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b06:	ee07 3a90 	vmov	s15, r3
}
 8003b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b26:	ee07 3a90 	vmov	s15, r3
}
 8003b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b46:	ee07 3a90 	vmov	s15, r3
}
 8003b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b66:	ee07 3a90 	vmov	s15, r3
}
 8003b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b86:	ee07 3a90 	vmov	s15, r3
}
 8003b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <_ZN9LineTrace12setMaxAccDecEff>:
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ba4:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003bae:	3304      	adds	r3, #4
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003bba:	3308      	adds	r3, #8
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	601a      	str	r2, [r3, #0]
}
 8003bc0:	bf00      	nop
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <_ZN9LineTrace13setMaxAccDec2Eff>:
void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	ed87 0a02 	vstr	s0, [r7, #8]
 8003bd8:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003be2:	330c      	adds	r3, #12
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003bee:	3310      	adds	r3, #16
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	601a      	str	r2, [r3, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003c0e:	3304      	adds	r3, #4
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	ee07 3a90 	vmov	s15, r3
}
 8003c16:	eeb0 0a67 	vmov.f32	s0, s15
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003c32:	3310      	adds	r3, #16
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	ee07 3a90 	vmov	s15, r3
}
 8003c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <_ZN9LineTrace10getMaxAcc2Ev>:
float LineTrace::getMaxAcc2()
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003c56:	330c      	adds	r3, #12
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	ee07 3a90 	vmov	s15, r3
}
 8003c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003c7a:	3308      	adds	r3, #8
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	ee07 3a90 	vmov	s15, r3
}
 8003c82:	eeb0 0a67 	vmov.f32	s0, s15
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <_ZN9LineTrace4flipEv>:
void LineTrace::flip()
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	//calcAngle();
	soiyassa++;
 8003c98:	4bb0      	ldr	r3, [pc, #704]	; (8003f5c <_ZN9LineTrace4flipEv+0x2cc>)
 8003c9a:	edd3 7a00 	vldr	s15, [r3]
 8003c9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ca2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ca6:	4bad      	ldr	r3, [pc, #692]	; (8003f5c <_ZN9LineTrace4flipEv+0x2cc>)
 8003ca8:	edc3 7a00 	vstr	s15, [r3]

	if(excution_flag_ == true){
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	f040 814e 	bne.w	8003f54 <_ZN9LineTrace4flipEv+0x2c4>
		// ---- line following processing -----//
		pidTrace();
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7fe febd 	bl	8002a38 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();


		if(isTargetDistance(10) == true){
 8003cbe:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fb02 	bl	80042cc <_ZN9LineTrace16isTargetDistanceEf>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	bf0c      	ite	eq
 8003cce:	2301      	moveq	r3, #1
 8003cd0:	2300      	movne	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d028      	beq.n	8003d2a <_ZN9LineTrace4flipEv+0x9a>
			// ---- Store Logs ------//
			storeLogs();
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 fa5b 	bl	8004194 <_ZN9LineTrace9storeLogsEv>

			// -------- Detect Robot stabilization ------//
#ifdef REVERSE
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x01) == 0x01){ // Stabilizing and side sensor is black
#else
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){ // Stabilizing and side sensor is black
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7ff fcd0 	bl	8003684 <_ZN9LineTrace8isStableEv>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d10c      	bne.n	8003d04 <_ZN9LineTrace4flipEv+0x74>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f001 fbae 	bl	8005450 <_ZN10SideSensor9getStatusEv>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d101      	bne.n	8003d04 <_ZN9LineTrace4flipEv+0x74>
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <_ZN9LineTrace4flipEv+0x76>
 8003d04:	2300      	movs	r3, #0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <_ZN9LineTrace4flipEv+0x86>
#endif
				stable_flag_ = true;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003d10:	33ff      	adds	r3, #255	; 0xff
 8003d12:	2201      	movs	r2, #1
 8003d14:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fd fbf4 	bl	8001508 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f001 f908 	bl	8004f3a <_ZN8Odometry13clearPotitionEv>
		}

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff fc0c 	bl	8003548 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7fe ff91 	bl	8002c58 <_ZN9LineTrace11isCrossLineEv>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2301      	moveq	r3, #1
 8003d3e:	2300      	movne	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d009      	beq.n	8003d5a <_ZN9LineTrace4flipEv+0xca>
			side_sensor_->enableIgnore();
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f001 fba8 	bl	80054a0 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fd fc02 	bl	800155e <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f001 fbb8 	bl	80054d4 <_ZN10SideSensor13getIgnoreFlagEv>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d10f      	bne.n	8003d8a <_ZN9LineTrace4flipEv+0xfa>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fd fbe6 	bl	8001540 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003d74:	eef0 7a40 	vmov.f32	s15, s0
 8003d78:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8003f60 <_ZN9LineTrace4flipEv+0x2d0>
 8003d7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d84:	db01      	blt.n	8003d8a <_ZN9LineTrace4flipEv+0xfa>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <_ZN9LineTrace4flipEv+0xfc>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d004      	beq.n	8003d9a <_ZN9LineTrace4flipEv+0x10a>
			side_sensor_->disableIgnore();
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f001 fb90 	bl	80054ba <_ZN10SideSensor13disableIgnoreEv>

		// ------- Store side line distance ------//
#ifdef REVERSE
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x01) == 0x01){ //stabilizing and side sensor is white
#else
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x02) == 0x02){ //stabilizing and side sensor is white
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003da0:	33ff      	adds	r3, #255	; 0xff
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d10b      	bne.n	8003dc0 <_ZN9LineTrace4flipEv+0x130>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f001 fb4f 	bl	8005450 <_ZN10SideSensor9getStatusEv>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d101      	bne.n	8003dc0 <_ZN9LineTrace4flipEv+0x130>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <_ZN9LineTrace4flipEv+0x132>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d01f      	beq.n	8003e06 <_ZN9LineTrace4flipEv+0x176>
#endif
			//storeSideLineDistance();
			if(mode_selector_ == FIRST_RUNNING){
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003dcc:	3324      	adds	r3, #36	; 0x24
 8003dce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d103      	bne.n	8003dde <_ZN9LineTrace4flipEv+0x14e>
				storeSideLineDistance();
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fad0 	bl	800437c <_ZN9LineTrace21storeSideLineDistanceEv>
 8003ddc:	e008      	b.n	8003df0 <_ZN9LineTrace4flipEv+0x160>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fb72 	bl	80044c8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				correction_check_cnt_ = 0;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003dea:	3314      	adds	r3, #20
 8003dec:	2200      	movs	r2, #0
 8003dee:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003df6:	33ff      	adds	r3, #255	; 0xff
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e02:	2201      	movs	r2, #1
 8003e04:	701a      	strb	r2, [r3, #0]
		}

		if(stable_flag_ == true) led_.LR(-1, 1);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003e0c:	33ff      	adds	r3, #255	; 0xff
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d108      	bne.n	8003e26 <_ZN9LineTrace4flipEv+0x196>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	330c      	adds	r3, #12
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f04f 31ff 	mov.w	r1, #4294967295
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fe f8e8 	bl	8001ff4 <_ZN3LED2LREaa>
 8003e24:	e007      	b.n	8003e36 <_ZN9LineTrace4flipEv+0x1a6>
		else led_.LR(-1, 0);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	330c      	adds	r3, #12
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fe f8df 	bl	8001ff4 <_ZN3LED2LREaa>

		// ------ All sideline storing -------//
#ifdef REVERSE
		if(all_sideline_flag_ == false && (side_sensor_->getStatus() & 0x01) == 0x01){
#else
		if(all_sideline_flag_ == false && (side_sensor_->getStatus() & 0x02) == 0x02){
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e3c:	3316      	adds	r3, #22
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10b      	bne.n	8003e5c <_ZN9LineTrace4flipEv+0x1cc>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f001 fb01 	bl	8005450 <_ZN10SideSensor9getStatusEv>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d101      	bne.n	8003e5c <_ZN9LineTrace4flipEv+0x1cc>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <_ZN9LineTrace4flipEv+0x1ce>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d011      	beq.n	8003e86 <_ZN9LineTrace4flipEv+0x1f6>
#endif
			all_sideline_flag_ = true;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e68:	3316      	adds	r3, #22
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	701a      	strb	r2, [r3, #0]

			if(mode_selector_ == FIRST_RUNNING){
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003e74:	3324      	adds	r3, #36	; 0x24
 8003e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d120      	bne.n	8003ec0 <_ZN9LineTrace4flipEv+0x230>
				storeAllSideLineDistance();
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fab4 	bl	80043ec <_ZN9LineTrace24storeAllSideLineDistanceEv>
 8003e84:	e01c      	b.n	8003ec0 <_ZN9LineTrace4flipEv+0x230>
			}
		}
#ifdef REVERSE
		else if(all_sideline_flag_ == true && (~(side_sensor_->getStatus()) & 0x01) == 0x01){
#else
		else if(all_sideline_flag_ == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e8c:	3316      	adds	r3, #22
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d10c      	bne.n	8003eae <_ZN9LineTrace4flipEv+0x21e>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f001 fad9 	bl	8005450 <_ZN10SideSensor9getStatusEv>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d101      	bne.n	8003eae <_ZN9LineTrace4flipEv+0x21e>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <_ZN9LineTrace4flipEv+0x220>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <_ZN9LineTrace4flipEv+0x230>
#endif
			all_sideline_flag_ = false;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003eba:	3316      	adds	r3, #22
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	701a      	strb	r2, [r3, #0]
		}


		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fe fb91 	bl	80025ec <_ZN10LineSensor13emergencyStopEv>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	bf0c      	ite	eq
 8003ed0:	2301      	moveq	r3, #1
 8003ed2:	2300      	movne	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d008      	beq.n	8003eec <_ZN9LineTrace4flipEv+0x25c>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	eddf 0a21 	vldr	s1, [pc, #132]	; 8003f64 <_ZN9LineTrace4flipEv+0x2d4>
 8003ee2:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8003f64 <_ZN9LineTrace4flipEv+0x2d4>
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f001 fd46 	bl	8005978 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}

		correction_check_cnt_++;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003ef2:	3314      	adds	r3, #20
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f00:	3314      	adds	r3, #20
 8003f02:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f0a:	3314      	adds	r3, #20
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	f242 720f 	movw	r2, #9999	; 0x270f
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d906      	bls.n	8003f24 <_ZN9LineTrace4flipEv+0x294>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f1c:	3314      	adds	r3, #20
 8003f1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f22:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 80) led_.LR(-1, 1);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f2a:	3314      	adds	r3, #20
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	2b50      	cmp	r3, #80	; 0x50
 8003f30:	d808      	bhi.n	8003f44 <_ZN9LineTrace4flipEv+0x2b4>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	330c      	adds	r3, #12
 8003f36:	2201      	movs	r2, #1
 8003f38:	f04f 31ff 	mov.w	r1, #4294967295
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fe f859 	bl	8001ff4 <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 8003f42:	e007      	b.n	8003f54 <_ZN9LineTrace4flipEv+0x2c4>
		else led_.LR(-1, 0);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	330c      	adds	r3, #12
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f04f 31ff 	mov.w	r1, #4294967295
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fe f850 	bl	8001ff4 <_ZN3LED2LREaa>
}
 8003f54:	bf00      	nop
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	2000025c 	.word	0x2000025c
 8003f60:	43480000 	.word	0x43480000
 8003f64:	00000000 	.word	0x00000000

08003f68 <_ZN9LineTrace5startEv>:
		odometry_->clearPotition();
	}
}

void LineTrace::start()
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	i_reset_flag_ = true;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	velocity_ctrl_->start();
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f001 fd50 	bl	8005a2a <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f001 fa76 	bl	8005480 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003f9a:	33f8      	adds	r3, #248	; 0xf8
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003fa6:	33fa      	adds	r3, #250	; 0xfa
 8003fa8:	2200      	movs	r2, #0
 8003faa:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003fb2:	33fc      	adds	r3, #252	; 0xfc
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	801a      	strh	r2, [r3, #0]
}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	velocity_ctrl_->stop();
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f001 fd3b 	bl	8005a50 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	330c      	adds	r3, #12
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fe f805 	bl	8001ff4 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003ff0:	3324      	adds	r3, #36	; 0x24
 8003ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d107      	bne.n	800400a <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69d8      	ldr	r0, [r3, #28]
 8003ffe:	4b23      	ldr	r3, [pc, #140]	; (800408c <_ZN9LineTrace4stopEv+0xcc>)
 8004000:	4a23      	ldr	r2, [pc, #140]	; (8004090 <_ZN9LineTrace4stopEv+0xd0>)
 8004002:	4924      	ldr	r1, [pc, #144]	; (8004094 <_ZN9LineTrace4stopEv+0xd4>)
 8004004:	f000 fc70 	bl	80048e8 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8004008:	e006      	b.n	8004018 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69d8      	ldr	r0, [r3, #28]
 800400e:	4b22      	ldr	r3, [pc, #136]	; (8004098 <_ZN9LineTrace4stopEv+0xd8>)
 8004010:	4a22      	ldr	r2, [pc, #136]	; (800409c <_ZN9LineTrace4stopEv+0xdc>)
 8004012:	4920      	ldr	r1, [pc, #128]	; (8004094 <_ZN9LineTrace4stopEv+0xd4>)
 8004014:	f000 fc89 	bl	800492a <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800401e:	3328      	adds	r3, #40	; 0x28
 8004020:	2200      	movs	r2, #0
 8004022:	9200      	str	r2, [sp, #0]
 8004024:	2264      	movs	r2, #100	; 0x64
 8004026:	491e      	ldr	r1, [pc, #120]	; (80040a0 <_ZN9LineTrace4stopEv+0xe0>)
 8004028:	481a      	ldr	r0, [pc, #104]	; (8004094 <_ZN9LineTrace4stopEv+0xd4>)
 800402a:	f7fd faa7 	bl	800157c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8004034:	33b8      	adds	r3, #184	; 0xb8
 8004036:	2200      	movs	r2, #0
 8004038:	9200      	str	r2, [sp, #0]
 800403a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800403e:	4919      	ldr	r1, [pc, #100]	; (80040a4 <_ZN9LineTrace4stopEv+0xe4>)
 8004040:	4814      	ldr	r0, [pc, #80]	; (8004094 <_ZN9LineTrace4stopEv+0xd4>)
 8004042:	f7fd fa9b 	bl	800157c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800404c:	3358      	adds	r3, #88	; 0x58
 800404e:	2200      	movs	r2, #0
 8004050:	9200      	str	r2, [sp, #0]
 8004052:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004056:	4914      	ldr	r1, [pc, #80]	; (80040a8 <_ZN9LineTrace4stopEv+0xe8>)
 8004058:	480e      	ldr	r0, [pc, #56]	; (8004094 <_ZN9LineTrace4stopEv+0xd4>)
 800405a:	f7fd fa8f 	bl	800157c <sd_write_array_float>

	led_.LR(-1, 0);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	330c      	adds	r3, #12
 8004062:	2200      	movs	r2, #0
 8004064:	f04f 31ff 	mov.w	r1, #4294967295
 8004068:	4618      	mov	r0, r3
 800406a:	f7fd ffc3 	bl	8001ff4 <_ZN3LED2LREaa>

	logger_->resetIdx();
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fce7 	bl	8004a46 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	4618      	mov	r0, r3
 800407e:	f000 fc95 	bl	80049ac <_ZN6Logger10resetLogs2Ev>
}
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	0801a7a4 	.word	0x0801a7a4
 8004090:	0801a7b0 	.word	0x0801a7b0
 8004094:	0801a798 	.word	0x0801a798
 8004098:	0801a884 	.word	0x0801a884
 800409c:	0801a890 	.word	0x0801a890
 80040a0:	0801a7c0 	.word	0x0801a7c0
 80040a4:	0801a7d0 	.word	0x0801a7d0
 80040a8:	0801a8a0 	.word	0x0801a8a0

080040ac <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 80040b8:	2300      	movs	r3, #0
 80040ba:	737b      	strb	r3, [r7, #13]
	start();
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff ff53 	bl	8003f68 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 80040c2:	7b7b      	ldrb	r3, [r7, #13]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d15b      	bne.n	8004180 <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 80040c8:	89fb      	ldrh	r3, [r7, #14]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <_ZN9LineTrace7runningEv+0x28>
 80040ce:	2b0a      	cmp	r3, #10
 80040d0:	d030      	beq.n	8004134 <_ZN9LineTrace7runningEv+0x88>
 80040d2:	e054      	b.n	800417e <_ZN9LineTrace7runningEv+0xd2>
		case 0:
#ifdef REVERSE
			if(side_sensor_->getWhiteLineCntL() == 1){
#else
			if(side_sensor_->getWhiteLineCntR() == 1){
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	4618      	mov	r0, r3
 80040da:	f001 f9c5 	bl	8005468 <_ZN10SideSensor16getWhiteLineCntREv>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	bf0c      	ite	eq
 80040e4:	2301      	moveq	r3, #1
 80040e6:	2300      	movne	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d044      	beq.n	8004178 <_ZN9LineTrace7runningEv+0xcc>
				}
				else{ // Other than first running
					startVelocityPlay();
				}
				*/
				loggerStart();
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7fe fd86 	bl	8002c00 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80040fa:	3324      	adds	r3, #36	; 0x24
 80040fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f89f 	bl	8004248 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	4618      	mov	r0, r3
 8004110:	f7fd fa25 	bl	800155e <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	4618      	mov	r0, r3
 800411a:	f7fd fa03 	bl	8001524 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	330c      	adds	r3, #12
 8004122:	f04f 32ff 	mov.w	r2, #4294967295
 8004126:	2100      	movs	r1, #0
 8004128:	4618      	mov	r0, r3
 800412a:	f7fd ff63 	bl	8001ff4 <_ZN3LED2LREaa>
				stage = 10;
 800412e:	230a      	movs	r3, #10
 8004130:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8004132:	e021      	b.n	8004178 <_ZN9LineTrace7runningEv+0xcc>

		case 10:
#ifdef REVERSE
			if(side_sensor_->getWhiteLineCntL() == 2){
#else
			if(side_sensor_->getWhiteLineCntR() == 2){
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	4618      	mov	r0, r3
 800413a:	f001 f995 	bl	8005468 <_ZN10SideSensor16getWhiteLineCntREv>
 800413e:	4603      	mov	r3, r0
 8004140:	2b02      	cmp	r3, #2
 8004142:	bf0c      	ite	eq
 8004144:	2301      	moveq	r3, #1
 8004146:	2300      	movne	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d016      	beq.n	800417c <_ZN9LineTrace7runningEv+0xd0>
#endif
				loggerStop();
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fe fd71 	bl	8002c36 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f88a 	bl	800426e <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 800415a:	2064      	movs	r0, #100	; 0x64
 800415c:	f005 fc0a 	bl	8009974 <HAL_Delay>

				setTargetVelocity(0);
 8004160:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8004190 <_ZN9LineTrace7runningEv+0xe4>
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff fc77 	bl	8003a58 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 800416a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800416e:	f005 fc01 	bl	8009974 <HAL_Delay>

				goal_flag = true;
 8004172:	2301      	movs	r3, #1
 8004174:	737b      	strb	r3, [r7, #13]

			}

			break;
 8004176:	e001      	b.n	800417c <_ZN9LineTrace7runningEv+0xd0>
			break;
 8004178:	bf00      	nop
 800417a:	e7a2      	b.n	80040c2 <_ZN9LineTrace7runningEv+0x16>
			break;
 800417c:	bf00      	nop
	while(goal_flag == false){
 800417e:	e7a0      	b.n	80040c2 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff ff1d 	bl	8003fc0 <_ZN9LineTrace4stopEv>
}
 8004186:	bf00      	nop
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	00000000 	.word	0x00000000

08004194 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8004194:	b590      	push	{r4, r7, lr}
 8004196:	ed2d 8b02 	vpush	{d8}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d146      	bne.n	8004238 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80041b0:	3324      	adds	r3, #36	; 0x24
 80041b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d11c      	bne.n	80041f4 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69dc      	ldr	r4, [r3, #28]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fd f973 	bl	80014ae <_ZN7Encoder15getDistance10mmEv>
 80041c8:	eeb0 8a40 	vmov.f32	s16, s0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fea0 	bl	8004f16 <_ZN8Odometry8getThetaEv>
 80041d6:	ec53 2b10 	vmov	r2, r3, d0
 80041da:	4610      	mov	r0, r2
 80041dc:	4619      	mov	r1, r3
 80041de:	f7fc fd1b 	bl	8000c18 <__aeabi_d2f>
 80041e2:	4603      	mov	r3, r0
 80041e4:	ee00 3a90 	vmov	s1, r3
 80041e8:	eeb0 0a48 	vmov.f32	s0, s16
 80041ec:	4620      	mov	r0, r4
 80041ee:	f000 faac 	bl	800474a <_ZN6Logger21storeDistanceAndThetaEff>
 80041f2:	e01b      	b.n	800422c <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(velocity_ctrl_->getCurrentVelocity(), odometry_->getTheta());
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	69dc      	ldr	r4, [r3, #28]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f001 fc43 	bl	8005a88 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8004202:	eeb0 8a40 	vmov.f32	s16, s0
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	4618      	mov	r0, r3
 800420c:	f000 fe83 	bl	8004f16 <_ZN8Odometry8getThetaEv>
 8004210:	ec53 2b10 	vmov	r2, r3, d0
 8004214:	4610      	mov	r0, r2
 8004216:	4619      	mov	r1, r3
 8004218:	f7fc fcfe 	bl	8000c18 <__aeabi_d2f>
 800421c:	4603      	mov	r3, r0
 800421e:	ee00 3a90 	vmov	s1, r3
 8004222:	eeb0 0a48 	vmov.f32	s0, s16
 8004226:	4620      	mov	r0, r4
 8004228:	f000 fad6 	bl	80047d8 <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 800422c:	4b05      	ldr	r3, [pc, #20]	; (8004244 <_ZN9LineTrace9storeLogsEv+0xb0>)
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	3301      	adds	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	4b03      	ldr	r3, [pc, #12]	; (8004244 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8004236:	801a      	strh	r2, [r3, #0]
	}
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	ecbd 8b02 	vpop	{d8}
 8004242:	bd90      	pop	{r4, r7, pc}
 8004244:	20000264 	.word	0x20000264

08004248 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	4618      	mov	r0, r3
 8004256:	f7fd f965 	bl	8001524 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004260:	3320      	adds	r3, #32
 8004262:	2201      	movs	r2, #1
 8004264:	701a      	strb	r2, [r3, #0]
}
 8004266:	bf00      	nop
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800427c:	3320      	adds	r3, #32
 800427e:	2200      	movs	r2, #0
 8004280:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004288:	3322      	adds	r3, #34	; 0x22
 800428a:	2200      	movs	r2, #0
 800428c:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8004294:	335c      	adds	r3, #92	; 0x5c
 8004296:	f04f 0200 	mov.w	r2, #0
 800429a:	601a      	str	r2, [r3, #0]
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80042ba:	3324      	adds	r3, #36	; 0x24
 80042bc:	887a      	ldrh	r2, [r7, #2]
 80042be:	801a      	strh	r2, [r3, #0]
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 80042d8:	2300      	movs	r3, #0
 80042da:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fd f8e4 	bl	80014ae <_ZN7Encoder15getDistance10mmEv>
 80042e6:	eeb0 7a40 	vmov.f32	s14, s0
 80042ea:	edd7 7a00 	vldr	s15, [r7]
 80042ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f6:	bf94      	ite	ls
 80042f8:	2301      	movls	r3, #1
 80042fa:	2300      	movhi	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 8004302:	2301      	movs	r3, #1
 8004304:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8004306:	7bfb      	ldrb	r3, [r7, #15]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8004310:	b590      	push	{r4, r7, lr}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004322:	33f8      	adds	r3, #248	; 0xf8
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	461c      	mov	r4, r3
 8004328:	4610      	mov	r0, r2
 800432a:	f7fd f8cf 	bl	80014cc <_ZN7Encoder16getTotalDistanceEv>
 800432e:	eef0 7a40 	vmov.f32	s15, s0
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8004338:	330a      	adds	r3, #10
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004348:	33f8      	adds	r3, #248	; 0xf8
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	3301      	adds	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004356:	33f8      	adds	r3, #248	; 0xf8
 8004358:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004360:	33f8      	adds	r3, #248	; 0xf8
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	2b63      	cmp	r3, #99	; 0x63
 8004366:	d905      	bls.n	8004374 <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800436e:	33f8      	adds	r3, #248	; 0xf8
 8004370:	2263      	movs	r2, #99	; 0x63
 8004372:	801a      	strh	r2, [r3, #0]
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	bd90      	pop	{r4, r7, pc}

0800437c <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 800437c:	b590      	push	{r4, r7, lr}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695a      	ldr	r2, [r3, #20]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800438e:	33fa      	adds	r3, #250	; 0xfa
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	461c      	mov	r4, r3
 8004394:	4610      	mov	r0, r2
 8004396:	f7fd f899 	bl	80014cc <_ZN7Encoder16getTotalDistanceEv>
 800439a:	eef0 7a40 	vmov.f32	s15, s0
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 80043a4:	332e      	adds	r3, #46	; 0x2e
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80043b4:	33fa      	adds	r3, #250	; 0xfa
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	3301      	adds	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80043c2:	33fa      	adds	r3, #250	; 0xfa
 80043c4:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80043cc:	33fa      	adds	r3, #250	; 0xfa
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043d4:	d306      	bcc.n	80043e4 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80043dc:	33fa      	adds	r3, #250	; 0xfa
 80043de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043e2:	801a      	strh	r2, [r3, #0]
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd90      	pop	{r4, r7, pc}

080043ec <_ZN9LineTrace24storeAllSideLineDistanceEv>:
void LineTrace::storeAllSideLineDistance()
{
 80043ec:	b590      	push	{r4, r7, lr}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
	all_sideline_distance_[all_sideline_idx_] = encoder_->getTotalDistance();
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695a      	ldr	r2, [r3, #20]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80043fe:	33fc      	adds	r3, #252	; 0xfc
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	461c      	mov	r4, r3
 8004404:	4610      	mov	r0, r2
 8004406:	f7fd f861 	bl	80014cc <_ZN7Encoder16getTotalDistanceEv>
 800440a:	eef0 7a40 	vmov.f32	s15, s0
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	f504 534d 	add.w	r3, r4, #13120	; 0x3340
 8004414:	3316      	adds	r3, #22
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	edc3 7a00 	vstr	s15, [r3]
	all_sideline_idx_++;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004424:	33fc      	adds	r3, #252	; 0xfc
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	3301      	adds	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004432:	33fc      	adds	r3, #252	; 0xfc
 8004434:	801a      	strh	r2, [r3, #0]

	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800443c:	33fc      	adds	r3, #252	; 0xfc
 800443e:	881b      	ldrh	r3, [r3, #0]
 8004440:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004444:	d306      	bcc.n	8004454 <_ZN9LineTrace24storeAllSideLineDistanceEv+0x68>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800444c:	33fc      	adds	r3, #252	; 0xfc
 800444e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004452:	801a      	strh	r2, [r3, #0]
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	bd90      	pop	{r4, r7, pc}

0800445c <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6959      	ldr	r1, [r3, #20]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800446e:	33f8      	adds	r3, #248	; 0xf8
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8004478:	330a      	adds	r3, #10
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	edd3 7a00 	vldr	s15, [r3]
 8004482:	eeb0 0a67 	vmov.f32	s0, s15
 8004486:	4608      	mov	r0, r1
 8004488:	f7fd f82f 	bl	80014ea <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004492:	33f8      	adds	r3, #248	; 0xf8
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	3301      	adds	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80044a0:	33f8      	adds	r3, #248	; 0xf8
 80044a2:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80044aa:	33f8      	adds	r3, #248	; 0xf8
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	2b63      	cmp	r3, #99	; 0x63
 80044b0:	d905      	bls.n	80044be <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x62>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80044b8:	33f8      	adds	r3, #248	; 0xf8
 80044ba:	2263      	movs	r2, #99	; 0x63
 80044bc:	801a      	strh	r2, [r3, #0]

}
 80044be:	bf00      	nop
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80044d0:	2300      	movs	r3, #0
 80044d2:	82fb      	strh	r3, [r7, #22]
 80044d4:	8afb      	ldrh	r3, [r7, #22]
 80044d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044da:	d237      	bcs.n	800454c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x84>
		float temp_sideline_distance = sideline_distance_[i];
 80044dc:	8afb      	ldrh	r3, [r7, #22]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80044e4:	332e      	adds	r3, #46	; 0x2e
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fc ffea 	bl	80014cc <_ZN7Encoder16getTotalDistanceEv>
 80044f8:	eeb0 7a40 	vmov.f32	s14, s0
 80044fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8004500:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004504:	eeb0 0a67 	vmov.f32	s0, s15
 8004508:	f7fe f8c6 	bl	8002698 <_ZSt3absf>
 800450c:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 8004510:	edd7 7a03 	vldr	s15, [r7, #12]
 8004514:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004574 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xac>
 8004518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800451c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004520:	d810      	bhi.n	8004544 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x7c>
			encoder_->setTotalDistance(sideline_distance_[i]);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6959      	ldr	r1, [r3, #20]
 8004526:	8afb      	ldrh	r3, [r7, #22]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 800452e:	332e      	adds	r3, #46	; 0x2e
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	edd3 7a00 	vldr	s15, [r3]
 8004538:	eeb0 0a67 	vmov.f32	s0, s15
 800453c:	4608      	mov	r0, r1
 800453e:	f7fc ffd4 	bl	80014ea <_ZN7Encoder16setTotalDistanceEf>
			break;
 8004542:	e003      	b.n	800454c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x84>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8004544:	8afb      	ldrh	r3, [r7, #22]
 8004546:	3301      	adds	r3, #1
 8004548:	82fb      	strh	r3, [r7, #22]
 800454a:	e7c3      	b.n	80044d4 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004552:	33fa      	adds	r3, #250	; 0xfa
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800455a:	d306      	bcc.n	800456a <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa2>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004562:	33fa      	adds	r3, #250	; 0xfa
 8004564:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004568:	801a      	strh	r2, [r3, #0]

}
 800456a:	bf00      	nop
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	42a00000 	.word	0x42a00000

08004578 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004586:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800458a:	2200      	movs	r2, #0
 800458c:	701a      	strb	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004594:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004598:	2200      	movs	r2, #0
 800459a:	801a      	strh	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80045a2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80045a6:	2200      	movs	r2, #0
 80045a8:	801a      	strh	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80045b0:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80045b4:	2200      	movs	r2, #0
 80045b6:	801a      	strh	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4618      	mov	r0, r3
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
	...

080045c8 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80045d0:	2300      	movs	r3, #0
 80045d2:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 80045d4:	f7fd f8c4 	bl	8001760 <sd_mount>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b01      	cmp	r3, #1
 80045dc:	bf0c      	ite	eq
 80045de:	2301      	moveq	r3, #1
 80045e0:	2300      	movne	r3, #0
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d016      	beq.n	8004616 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 80045e8:	f7fc fd8c 	bl	8001104 <lcd_clear>
	  lcd_locate(0,0);
 80045ec:	2100      	movs	r1, #0
 80045ee:	2000      	movs	r0, #0
 80045f0:	f7fc fd98 	bl	8001124 <lcd_locate>
	  lcd_printf("SD mount");
 80045f4:	4815      	ldr	r0, [pc, #84]	; (800464c <_ZN6Logger10sdCardInitEv+0x84>)
 80045f6:	f7fc fdc0 	bl	800117a <lcd_printf>
	  lcd_locate(0,1);
 80045fa:	2101      	movs	r1, #1
 80045fc:	2000      	movs	r0, #0
 80045fe:	f7fc fd91 	bl	8001124 <lcd_locate>
	  lcd_printf("success");
 8004602:	4813      	ldr	r0, [pc, #76]	; (8004650 <_ZN6Logger10sdCardInitEv+0x88>)
 8004604:	f7fc fdb9 	bl	800117a <lcd_printf>
	  HAL_Delay(500);
 8004608:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800460c:	f005 f9b2 	bl	8009974 <HAL_Delay>

	  ret = true;
 8004610:	2301      	movs	r3, #1
 8004612:	73fb      	strb	r3, [r7, #15]
 8004614:	e015      	b.n	8004642 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 8004616:	f7fc fd75 	bl	8001104 <lcd_clear>
	  lcd_locate(0,0);
 800461a:	2100      	movs	r1, #0
 800461c:	2000      	movs	r0, #0
 800461e:	f7fc fd81 	bl	8001124 <lcd_locate>
	  lcd_printf("SD mount");
 8004622:	480a      	ldr	r0, [pc, #40]	; (800464c <_ZN6Logger10sdCardInitEv+0x84>)
 8004624:	f7fc fda9 	bl	800117a <lcd_printf>
	  lcd_locate(0,1);
 8004628:	2101      	movs	r1, #1
 800462a:	2000      	movs	r0, #0
 800462c:	f7fc fd7a 	bl	8001124 <lcd_locate>
	  lcd_printf("fail");
 8004630:	4808      	ldr	r0, [pc, #32]	; (8004654 <_ZN6Logger10sdCardInitEv+0x8c>)
 8004632:	f7fc fda2 	bl	800117a <lcd_printf>
	  HAL_Delay(1000);
 8004636:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800463a:	f005 f99b 	bl	8009974 <HAL_Delay>

	  ret = false;
 800463e:	2300      	movs	r3, #0
 8004640:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8004642:	7bfb      	ldrb	r3, [r7, #15]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	0801a8b0 	.word	0x0801a8b0
 8004650:	0801a8bc 	.word	0x0801a8bc
 8004654:	0801a8c4 	.word	0x0801a8c4

08004658 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800466a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d127      	bne.n	80046c4 <_ZN6Logger8storeLogEf+0x6c>
		store_data_float_[log_index_tim_] = data;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800467a:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004690:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	3301      	adds	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80046a0:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80046a4:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80046ac:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d006      	beq.n	80046c4 <_ZN6Logger8storeLogEf+0x6c>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80046bc:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80046c0:	2200      	movs	r2, #0
 80046c2:	801a      	strh	r2, [r3, #0]
	}
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80046e2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d128      	bne.n	800473e <_ZN6Logger9storeLog2Ef+0x6e>
		store_data_float2_[log_index_tim2_] = data;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80046f2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	3304      	adds	r3, #4
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800470a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	3301      	adds	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800471a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800471e:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004726:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d006      	beq.n	800473e <_ZN6Logger9storeLog2Ef+0x6e>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004736:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800473a:	2200      	movs	r2, #0
 800473c:	801a      	strh	r2, [r3, #0]
	}
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 800474a:	b480      	push	{r7}
 800474c:	b085      	sub	sp, #20
 800474e:	af00      	add	r7, sp, #0
 8004750:	60f8      	str	r0, [r7, #12]
 8004752:	ed87 0a02 	vstr	s0, [r7, #8]
 8004756:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004760:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	3302      	adds	r3, #2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004778:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004784:	3312      	adds	r3, #18
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004794:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	3301      	adds	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80047a4:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80047a8:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80047b0:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	f241 726f 	movw	r2, #5999	; 0x176f
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d906      	bls.n	80047cc <_ZN6Logger21storeDistanceAndThetaEff+0x82>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80047c4:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80047c8:	2200      	movs	r2, #0
 80047ca:	801a      	strh	r2, [r3, #0]
	//}
}
 80047cc:	bf00      	nop
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	ed87 0a02 	vstr	s0, [r7, #8]
 80047e4:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80047ee:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80047fa:	3322      	adds	r3, #34	; 0x22
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800480a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8004816:	3352      	adds	r3, #82	; 0x52
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004826:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	3301      	adds	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004836:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800483a:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004842:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	f241 726f 	movw	r2, #5999	; 0x176f
 800484c:	4293      	cmp	r3, r2
 800484e:	d906      	bls.n	800485e <_ZN6Logger22storeDistanceAndTheta2Eff+0x86>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004856:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800485a:	2200      	movs	r2, #0
 800485c:	801a      	strh	r2, [r3, #0]
	//}
}
 800485e:	bf00      	nop
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	3308      	adds	r3, #8
}
 8004876:	4618      	mov	r0, r3
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
	return store_theta_;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004890:	3348      	adds	r3, #72	; 0x48
}
 8004892:	4618      	mov	r0, r3
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b086      	sub	sp, #24
 80048a2:	af02      	add	r7, sp, #8
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	9200      	str	r2, [sp, #0]
 80048b0:	2201      	movs	r2, #1
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	68b8      	ldr	r0, [r7, #8]
 80048b6:	f7fc fe61 	bl	800157c <sd_write_array_float>
}
 80048ba:	bf00      	nop
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b086      	sub	sp, #24
 80048c6:	af02      	add	r7, sp, #8
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3304      	adds	r3, #4
 80048d2:	2200      	movs	r2, #0
 80048d4:	9200      	str	r2, [sp, #0]
 80048d6:	2201      	movs	r2, #1
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	68b8      	ldr	r0, [r7, #8]
 80048dc:	f7fc fe4e 	bl	800157c <sd_write_array_float>
}
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af02      	add	r7, sp, #8
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3308      	adds	r3, #8
 80048fa:	2200      	movs	r2, #0
 80048fc:	9200      	str	r2, [sp, #0]
 80048fe:	f241 7270 	movw	r2, #6000	; 0x1770
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	68b8      	ldr	r0, [r7, #8]
 8004906:	f7fc fe39 	bl	800157c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004910:	3348      	adds	r3, #72	; 0x48
 8004912:	2200      	movs	r2, #0
 8004914:	9200      	str	r2, [sp, #0]
 8004916:	f241 7270 	movw	r2, #6000	; 0x1770
 800491a:	6839      	ldr	r1, [r7, #0]
 800491c:	68b8      	ldr	r0, [r7, #8]
 800491e:	f7fc fe2d 	bl	800157c <sd_write_array_float>
}
 8004922:	bf00      	nop
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b086      	sub	sp, #24
 800492e:	af02      	add	r7, sp, #8
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 800493e:	3388      	adds	r3, #136	; 0x88
 8004940:	2200      	movs	r2, #0
 8004942:	9200      	str	r2, [sp, #0]
 8004944:	f241 7270 	movw	r2, #6000	; 0x1770
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	68b8      	ldr	r0, [r7, #8]
 800494c:	f7fc fe16 	bl	800157c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004956:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800495a:	2200      	movs	r2, #0
 800495c:	9200      	str	r2, [sp, #0]
 800495e:	f241 7270 	movw	r2, #6000	; 0x1770
 8004962:	6839      	ldr	r1, [r7, #0]
 8004964:	68b8      	ldr	r0, [r7, #8]
 8004966:	f7fc fe09 	bl	800157c <sd_write_array_float>
}
 800496a:	bf00      	nop
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b084      	sub	sp, #16
 8004976:	af00      	add	r7, sp, #0
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	607a      	str	r2, [r7, #4]
 800497e:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	3308      	adds	r3, #8
 8004984:	f241 7270 	movw	r2, #6000	; 0x1770
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	68b8      	ldr	r0, [r7, #8]
 800498c:	f7fc fe5c 	bl	8001648 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004996:	3348      	adds	r3, #72	; 0x48
 8004998:	f241 7270 	movw	r2, #6000	; 0x1770
 800499c:	6839      	ldr	r1, [r7, #0]
 800499e:	68b8      	ldr	r0, [r7, #8]
 80049a0:	f7fc fe52 	bl	8001648 <sd_read_array_float>
}
 80049a4:	bf00      	nop
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 80049ac:	b480      	push	{r7}
 80049ae:	b08b      	sub	sp, #44	; 0x2c
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 80049ba:	3388      	adds	r3, #136	; 0x88
 80049bc:	61fb      	str	r3, [r7, #28]
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80049c8:	3340      	adds	r3, #64	; 0x40
 80049ca:	61bb      	str	r3, [r7, #24]
 80049cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d009      	beq.n	80049e8 <_ZN6Logger10resetLogs2Ev+0x3c>
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	617b      	str	r3, [r7, #20]
		log = 0;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	3304      	adds	r3, #4
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
 80049e6:	e7f1      	b.n	80049cc <_ZN6Logger10resetLogs2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80049ee:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	623b      	str	r3, [r7, #32]
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80049fe:	3340      	adds	r3, #64	; 0x40
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	6a3a      	ldr	r2, [r7, #32]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d009      	beq.n	8004a1e <_ZN6Logger10resetLogs2Ev+0x72>
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	3304      	adds	r3, #4
 8004a1a:	623b      	str	r3, [r7, #32]
 8004a1c:	e7f1      	b.n	8004a02 <_ZN6Logger10resetLogs2Ev+0x56>
	}

	log_index_tim_ = 0;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004a24:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004a28:	2200      	movs	r2, #0
 8004a2a:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004a32:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004a36:	2200      	movs	r2, #0
 8004a38:	801a      	strh	r2, [r3, #0]
}
 8004a3a:	bf00      	nop
 8004a3c:	372c      	adds	r7, #44	; 0x2c
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004a54:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004a58:	2200      	movs	r2, #0
 8004a5a:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004a62:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004a66:	2200      	movs	r2, #0
 8004a68:	801a      	strh	r2, [r3, #0]
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004a84:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004a88:	2201      	movs	r2, #1
 8004a8a:	701a      	strb	r2, [r3, #0]
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004aa6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	801a      	strh	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	805a      	strh	r2, [r3, #2]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <_ZN5Motor4initEv>:

void Motor::init()
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004ae4:	2108      	movs	r1, #8
 8004ae6:	4805      	ldr	r0, [pc, #20]	; (8004afc <_ZN5Motor4initEv+0x20>)
 8004ae8:	f00a f90e 	bl	800ed08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004aec:	210c      	movs	r1, #12
 8004aee:	4803      	ldr	r0, [pc, #12]	; (8004afc <_ZN5Motor4initEv+0x20>)
 8004af0:	f00a f90a 	bl	800ed08 <HAL_TIM_PWM_Start>

}
 8004af4:	bf00      	nop
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	2003f8c4 	.word	0x2003f8c4

08004b00 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	da0c      	bge.n	8004b2c <_ZN5Motor9motorCtrlEv+0x2c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004b12:	2200      	movs	r2, #0
 8004b14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b18:	481d      	ldr	r0, [pc, #116]	; (8004b90 <_ZN5Motor9motorCtrlEv+0x90>)
 8004b1a:	f006 f9c7 	bl	800aeac <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	425b      	negs	r3, r3
 8004b28:	81fb      	strh	r3, [r7, #14]
 8004b2a:	e009      	b.n	8004b40 <_ZN5Motor9motorCtrlEv+0x40>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b32:	4817      	ldr	r0, [pc, #92]	; (8004b90 <_ZN5Motor9motorCtrlEv+0x90>)
 8004b34:	f006 f9ba 	bl	800aeac <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b3e:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	da0c      	bge.n	8004b64 <_ZN5Motor9motorCtrlEv+0x64>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b50:	480f      	ldr	r0, [pc, #60]	; (8004b90 <_ZN5Motor9motorCtrlEv+0x90>)
 8004b52:	f006 f9ab 	bl	800aeac <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	425b      	negs	r3, r3
 8004b60:	81bb      	strh	r3, [r7, #12]
 8004b62:	e009      	b.n	8004b78 <_ZN5Motor9motorCtrlEv+0x78>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004b64:	2200      	movs	r2, #0
 8004b66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b6a:	4809      	ldr	r0, [pc, #36]	; (8004b90 <_ZN5Motor9motorCtrlEv+0x90>)
 8004b6c:	f006 f99e 	bl	800aeac <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b76:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <_ZN5Motor9motorCtrlEv+0x94>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	89fa      	ldrh	r2, [r7, #14]
 8004b7e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004b80:	4b04      	ldr	r3, [pc, #16]	; (8004b94 <_ZN5Motor9motorCtrlEv+0x94>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	89ba      	ldrh	r2, [r7, #12]
 8004b86:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004b88:	bf00      	nop
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40020c00 	.word	0x40020c00
 8004b94:	2003f8c4 	.word	0x2003f8c4

08004b98 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6178      	str	r0, [r7, #20]
 8004ba0:	ed87 0b02 	vstr	d0, [r7, #8]
 8004ba4:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	4b30      	ldr	r3, [pc, #192]	; (8004c70 <_ZN5Motor8setRatioEdd+0xd8>)
 8004bae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bb2:	f7fb ffc9 	bl	8000b48 <__aeabi_dcmpgt>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <_ZN5Motor8setRatioEdd+0x30>
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	4b2b      	ldr	r3, [pc, #172]	; (8004c70 <_ZN5Motor8setRatioEdd+0xd8>)
 8004bc2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8004bc6:	e00e      	b.n	8004be6 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	4b29      	ldr	r3, [pc, #164]	; (8004c74 <_ZN5Motor8setRatioEdd+0xdc>)
 8004bce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bd2:	f7fb ff9b 	bl	8000b0c <__aeabi_dcmplt>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d004      	beq.n	8004be6 <_ZN5Motor8setRatioEdd+0x4e>
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	4b24      	ldr	r3, [pc, #144]	; (8004c74 <_ZN5Motor8setRatioEdd+0xdc>)
 8004be2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	4b21      	ldr	r3, [pc, #132]	; (8004c70 <_ZN5Motor8setRatioEdd+0xd8>)
 8004bec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bf0:	f7fb ffaa 	bl	8000b48 <__aeabi_dcmpgt>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d005      	beq.n	8004c06 <_ZN5Motor8setRatioEdd+0x6e>
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	4b1c      	ldr	r3, [pc, #112]	; (8004c70 <_ZN5Motor8setRatioEdd+0xd8>)
 8004c00:	e9c7 2300 	strd	r2, r3, [r7]
 8004c04:	e00e      	b.n	8004c24 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	4b1a      	ldr	r3, [pc, #104]	; (8004c74 <_ZN5Motor8setRatioEdd+0xdc>)
 8004c0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c10:	f7fb ff7c 	bl	8000b0c <__aeabi_dcmplt>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d004      	beq.n	8004c24 <_ZN5Motor8setRatioEdd+0x8c>
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	4b15      	ldr	r3, [pc, #84]	; (8004c74 <_ZN5Motor8setRatioEdd+0xdc>)
 8004c20:	e9c7 2300 	strd	r2, r3, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	4b13      	ldr	r3, [pc, #76]	; (8004c78 <_ZN5Motor8setRatioEdd+0xe0>)
 8004c2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c2e:	f7fb fcfb 	bl	8000628 <__aeabi_dmul>
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	4610      	mov	r0, r2
 8004c38:	4619      	mov	r1, r3
 8004c3a:	f7fb ffa5 	bl	8000b88 <__aeabi_d2iz>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	b21a      	sxth	r2, r3
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <_ZN5Motor8setRatioEdd+0xe0>)
 8004c4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c50:	f7fb fcea 	bl	8000628 <__aeabi_dmul>
 8004c54:	4602      	mov	r2, r0
 8004c56:	460b      	mov	r3, r1
 8004c58:	4610      	mov	r0, r2
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	f7fb ff94 	bl	8000b88 <__aeabi_d2iz>
 8004c60:	4603      	mov	r3, r0
 8004c62:	b21a      	sxth	r2, r3
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	805a      	strh	r2, [r3, #2]

}
 8004c68:	bf00      	nop
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	3ff00000 	.word	0x3ff00000
 8004c74:	bff00000 	.word	0xbff00000
 8004c78:	409c2000 	.word	0x409c2000

08004c7c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
 8004c8a:	68f9      	ldr	r1, [r7, #12]
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004c98:	68f9      	ldr	r1, [r7, #12]
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8004ca6:	68f9      	ldr	r1, [r7, #12]
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8004cb4:	68f9      	ldr	r1, [r7, #12]
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8004cc2:	68f9      	ldr	r1, [r7, #12]
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
{
	encoder_ = encoder;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	609a      	str	r2, [r3, #8]
}
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cf4:	b086      	sub	sp, #24
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fc fefa 	bl	8001af8 <_ZN3IMU8getOmegaEv>
 8004d04:	ee10 3a10 	vmov	r3, s0
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7fb fc35 	bl	8000578 <__aeabi_f2d>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	e9c7 2304 	strd	r2, r3, [r7, #16]
	float distance = encoder_->getDistance();
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fc fbb8 	bl	8001490 <_ZN7Encoder11getDistanceEv>
 8004d20:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004d24:	a374      	add	r3, pc, #464	; (adr r3, 8004ef8 <_ZN8Odometry12calcPotitionEv+0x208>)
 8004d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d2e:	f7fb fc7b 	bl	8000628 <__aeabi_dmul>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f7fb fc18 	bl	8000578 <__aeabi_f2d>
 8004d48:	4682      	mov	sl, r0
 8004d4a:	468b      	mov	fp, r1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d60:	f7fb fd8c 	bl	800087c <__aeabi_ddiv>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4640      	mov	r0, r8
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	f7fb faa6 	bl	80002bc <__adddf3>
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	ec43 2b17 	vmov	d7, r2, r3
 8004d78:	eeb0 0a47 	vmov.f32	s0, s14
 8004d7c:	eef0 0a67 	vmov.f32	s1, s15
 8004d80:	f00f fb32 	bl	80143e8 <cos>
 8004d84:	ec53 2b10 	vmov	r2, r3, d0
 8004d88:	4650      	mov	r0, sl
 8004d8a:	4659      	mov	r1, fp
 8004d8c:	f7fb fc4c 	bl	8000628 <__aeabi_dmul>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4620      	mov	r0, r4
 8004d96:	4629      	mov	r1, r5
 8004d98:	f7fb fa90 	bl	80002bc <__adddf3>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f7fb fbe3 	bl	8000578 <__aeabi_f2d>
 8004db2:	4682      	mov	sl, r0
 8004db4:	468b      	mov	fp, r1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004dc2:	f04f 0200 	mov.w	r2, #0
 8004dc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dca:	f7fb fd57 	bl	800087c <__aeabi_ddiv>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4640      	mov	r0, r8
 8004dd4:	4649      	mov	r1, r9
 8004dd6:	f7fb fa71 	bl	80002bc <__adddf3>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	ec43 2b17 	vmov	d7, r2, r3
 8004de2:	eeb0 0a47 	vmov.f32	s0, s14
 8004de6:	eef0 0a67 	vmov.f32	s1, s15
 8004dea:	f00f fb4d 	bl	8014488 <sin>
 8004dee:	ec53 2b10 	vmov	r2, r3, d0
 8004df2:	4650      	mov	r0, sl
 8004df4:	4659      	mov	r1, fp
 8004df6:	f7fb fc17 	bl	8000628 <__aeabi_dmul>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4620      	mov	r0, r4
 8004e00:	4629      	mov	r1, r5
 8004e02:	f7fb fa5b 	bl	80002bc <__adddf3>
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	theta_= theta_ + delta_theta_;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004e1c:	f7fb fa4e 	bl	80002bc <__adddf3>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	e9c1 2308 	strd	r2, r3, [r1, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	ed93 7b08 	vldr	d7, [r3, #32]
 8004e36:	eeb0 0a47 	vmov.f32	s0, s14
 8004e3a:	eef0 0a67 	vmov.f32	s1, s15
 8004e3e:	f00f fad3 	bl	80143e8 <cos>
 8004e42:	ec51 0b10 	vmov	r0, r1, d0
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	4b27      	ldr	r3, [pc, #156]	; (8004ee8 <_ZN8Odometry12calcPotitionEv+0x1f8>)
 8004e4c:	f7fb fbec 	bl	8000628 <__aeabi_dmul>
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	4620      	mov	r0, r4
 8004e56:	4629      	mov	r1, r5
 8004e58:	f7fb fa30 	bl	80002bc <__adddf3>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	460b      	mov	r3, r1
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	ed93 7b08 	vldr	d7, [r3, #32]
 8004e72:	eeb0 0a47 	vmov.f32	s0, s14
 8004e76:	eef0 0a67 	vmov.f32	s1, s15
 8004e7a:	f00f fb05 	bl	8014488 <sin>
 8004e7e:	ec51 0b10 	vmov	r0, r1, d0
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	4b18      	ldr	r3, [pc, #96]	; (8004ee8 <_ZN8Odometry12calcPotitionEv+0x1f8>)
 8004e88:	f7fb fbce 	bl	8000628 <__aeabi_dmul>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4620      	mov	r0, r4
 8004e92:	4629      	mov	r1, r5
 8004e94:	f7fb fa12 	bl	80002bc <__adddf3>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	6879      	ldr	r1, [r7, #4]
 8004e9e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	monitor_x = x_sens_;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	4619      	mov	r1, r3
 8004eac:	f7fb feb4 	bl	8000c18 <__aeabi_d2f>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	4a0e      	ldr	r2, [pc, #56]	; (8004eec <_ZN8Odometry12calcPotitionEv+0x1fc>)
 8004eb4:	6013      	str	r3, [r2, #0]
	monitor_y = y_sens_;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	f7fb feaa 	bl	8000c18 <__aeabi_d2f>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	4a0a      	ldr	r2, [pc, #40]	; (8004ef0 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004ec8:	6013      	str	r3, [r2, #0]
	monitor_theta = theta_;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	f7fb fea0 	bl	8000c18 <__aeabi_d2f>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	4a06      	ldr	r2, [pc, #24]	; (8004ef4 <_ZN8Odometry12calcPotitionEv+0x204>)
 8004edc:	6013      	str	r3, [r2, #0]
}
 8004ede:	bf00      	nop
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ee8:	405b8000 	.word	0x405b8000
 8004eec:	20000294 	.word	0x20000294
 8004ef0:	20000298 	.word	0x20000298
 8004ef4:	2000029c 	.word	0x2000029c
 8004ef8:	d2f1a9fc 	.word	0xd2f1a9fc
 8004efc:	3f50624d 	.word	0x3f50624d

08004f00 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
	calcPotition();
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7ff fef1 	bl	8004cf0 <_ZN8Odometry12calcPotitionEv>
}
 8004f0e:	bf00      	nop
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
	return theta_;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f24:	ec43 2b17 	vmov	d7, r2, r3
}
 8004f28:	eeb0 0a47 	vmov.f32	s0, s14
 8004f2c:	eef0 0a67 	vmov.f32	s1, s15
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8004f42:	6879      	ldr	r1, [r7, #4]
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	y_sens_ = 0;
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	f04f 0200 	mov.w	r2, #0
 8004f56:	f04f 0300 	mov.w	r3, #0
 8004f5a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	theta_ = 0;
 8004f5e:	6879      	ldr	r1, [r7, #4]
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	701a      	strb	r2, [r3, #0]
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	f04f 0200 	mov.w	r2, #0
 8004f8c:	f04f 0300 	mov.w	r3, #0
 8004f90:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	f04f 0200 	mov.w	r2, #0
 8004f9a:	f04f 0300 	mov.w	r3, #0
 8004f9e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004fb6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004fba:	2200      	movs	r2, #0
 8004fbc:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8004fbe:	492a      	ldr	r1, [pc, #168]	; (8005068 <_ZN13PathFollowingC1Ev+0xf0>)
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	e9c1 2300 	strd	r2, r3, [r1]
	rtParam.ky = 0;
 8004fcc:	4926      	ldr	r1, [pc, #152]	; (8005068 <_ZN13PathFollowingC1Ev+0xf0>)
 8004fce:	f04f 0200 	mov.w	r2, #0
 8004fd2:	f04f 0300 	mov.w	r3, #0
 8004fd6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	rtParam.kt = 0;
 8004fda:	4923      	ldr	r1, [pc, #140]	; (8005068 <_ZN13PathFollowingC1Ev+0xf0>)
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	rtU.target_x = 0;
 8004fe8:	4920      	ldr	r1, [pc, #128]	; (800506c <_ZN13PathFollowingC1Ev+0xf4>)
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	e9c1 2300 	strd	r2, r3, [r1]
	rtU.target_y = 0;
 8004ff6:	491d      	ldr	r1, [pc, #116]	; (800506c <_ZN13PathFollowingC1Ev+0xf4>)
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	e9c1 2302 	strd	r2, r3, [r1, #8]
	rtU.th = 0;
 8005004:	4919      	ldr	r1, [pc, #100]	; (800506c <_ZN13PathFollowingC1Ev+0xf4>)
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	rtU.x = 0;
 8005012:	4916      	ldr	r1, [pc, #88]	; (800506c <_ZN13PathFollowingC1Ev+0xf4>)
 8005014:	f04f 0200 	mov.w	r2, #0
 8005018:	f04f 0300 	mov.w	r3, #0
 800501c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	rtU.y = 0;
 8005020:	4912      	ldr	r1, [pc, #72]	; (800506c <_ZN13PathFollowingC1Ev+0xf4>)
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	f04f 0300 	mov.w	r3, #0
 800502a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	rtU.th_cur = 0;
 800502e:	490f      	ldr	r1, [pc, #60]	; (800506c <_ZN13PathFollowingC1Ev+0xf4>)
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	rtY.V_tar = 0;
 800503c:	490c      	ldr	r1, [pc, #48]	; (8005070 <_ZN13PathFollowingC1Ev+0xf8>)
 800503e:	f04f 0200 	mov.w	r2, #0
 8005042:	f04f 0300 	mov.w	r3, #0
 8005046:	e9c1 2300 	strd	r2, r3, [r1]
	rtY.tar = 0;
 800504a:	4909      	ldr	r1, [pc, #36]	; (8005070 <_ZN13PathFollowingC1Ev+0xf8>)
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	e9c1 2302 	strd	r2, r3, [r1, #8]

}
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4618      	mov	r0, r3
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	2003fdc8 	.word	0x2003fdc8
 800506c:	2003fd58 	.word	0x2003fd58
 8005070:	2003fdb8 	.word	0x2003fdb8

08005074 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b088      	sub	sp, #32
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 800507c:	f001 fcd1 	bl	8006a22 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005080:	f107 0318 	add.w	r3, r7, #24
 8005084:	2201      	movs	r2, #1
 8005086:	4915      	ldr	r1, [pc, #84]	; (80050dc <_ZN13PathFollowing4initEv+0x68>)
 8005088:	4815      	ldr	r0, [pc, #84]	; (80050e0 <_ZN13PathFollowing4initEv+0x6c>)
 800508a:	f7fc fb23 	bl	80016d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 800508e:	f107 0310 	add.w	r3, r7, #16
 8005092:	2201      	movs	r2, #1
 8005094:	4913      	ldr	r1, [pc, #76]	; (80050e4 <_ZN13PathFollowing4initEv+0x70>)
 8005096:	4812      	ldr	r0, [pc, #72]	; (80050e0 <_ZN13PathFollowing4initEv+0x6c>)
 8005098:	f7fc fb1c 	bl	80016d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 800509c:	f107 0308 	add.w	r3, r7, #8
 80050a0:	2201      	movs	r2, #1
 80050a2:	4911      	ldr	r1, [pc, #68]	; (80050e8 <_ZN13PathFollowing4initEv+0x74>)
 80050a4:	480e      	ldr	r0, [pc, #56]	; (80050e0 <_ZN13PathFollowing4initEv+0x6c>)
 80050a6:	f7fc fb15 	bl	80016d4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 80050aa:	ed97 7b06 	vldr	d7, [r7, #24]
 80050ae:	ed97 6b04 	vldr	d6, [r7, #16]
 80050b2:	ed97 5b02 	vldr	d5, [r7, #8]
 80050b6:	eeb0 2a45 	vmov.f32	s4, s10
 80050ba:	eef0 2a65 	vmov.f32	s5, s11
 80050be:	eeb0 1a46 	vmov.f32	s2, s12
 80050c2:	eef0 1a66 	vmov.f32	s3, s13
 80050c6:	eeb0 0a47 	vmov.f32	s0, s14
 80050ca:	eef0 0a67 	vmov.f32	s1, s15
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f80c 	bl	80050ec <_ZN13PathFollowing7setGainEddd>
}
 80050d4:	bf00      	nop
 80050d6:	3720      	adds	r7, #32
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	0801a8cc 	.word	0x0801a8cc
 80050e0:	0801a8d4 	.word	0x0801a8d4
 80050e4:	0801a8dc 	.word	0x0801a8dc
 80050e8:	0801a8e4 	.word	0x0801a8e4

080050ec <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b089      	sub	sp, #36	; 0x24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	61f8      	str	r0, [r7, #28]
 80050f4:	ed87 0b04 	vstr	d0, [r7, #16]
 80050f8:	ed87 1b02 	vstr	d1, [r7, #8]
 80050fc:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8005100:	490a      	ldr	r1, [pc, #40]	; (800512c <_ZN13PathFollowing7setGainEddd+0x40>)
 8005102:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005106:	e9c1 2300 	strd	r2, r3, [r1]
	rtParam.ky = ky;
 800510a:	4908      	ldr	r1, [pc, #32]	; (800512c <_ZN13PathFollowing7setGainEddd+0x40>)
 800510c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005110:	e9c1 2302 	strd	r2, r3, [r1, #8]
	rtParam.kt = kt;
 8005114:	4905      	ldr	r1, [pc, #20]	; (800512c <_ZN13PathFollowing7setGainEddd+0x40>)
 8005116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800511a:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800511e:	bf00      	nop
 8005120:	3724      	adds	r7, #36	; 0x24
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	2003fdc8 	.word	0x2003fdc8

08005130 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8005138:	2088      	movs	r0, #136	; 0x88
 800513a:	f7fc fe20 	bl	8001d7e <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 800513e:	2080      	movs	r0, #128	; 0x80
 8005140:	f7fc fe1d 	bl	8001d7e <INA260_init>
}
 8005144:	bf00      	nop
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	0000      	movs	r0, r0
	...

08005150 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8005158:	2188      	movs	r1, #136	; 0x88
 800515a:	2002      	movs	r0, #2
 800515c:	f7fc fdac 	bl	8001cb8 <INA260_read>
 8005160:	4603      	mov	r3, r0
 8005162:	4618      	mov	r0, r3
 8005164:	f7fb f9f6 	bl	8000554 <__aeabi_i2d>
 8005168:	a30c      	add	r3, pc, #48	; (adr r3, 800519c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 800516a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516e:	f7fb fa5b 	bl	8000628 <__aeabi_dmul>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4610      	mov	r0, r2
 8005178:	4619      	mov	r1, r3
 800517a:	f7fb fd4d 	bl	8000c18 <__aeabi_d2f>
 800517e:	4602      	mov	r2, r0
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	4a03      	ldr	r2, [pc, #12]	; (8005198 <_ZN11PowerSensor12updateValuesEv+0x48>)
 800518a:	6013      	str	r3, [r2, #0]
}
 800518c:	bf00      	nop
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	f3af 8000 	nop.w
 8005198:	200002a0 	.word	0x200002a0
 800519c:	47ae147b 	.word	0x47ae147b
 80051a0:	3f547ae1 	.word	0x3f547ae1

080051a4 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	ee07 3a90 	vmov	s15, r3

}
 80051b4:	eeb0 0a67 	vmov.f32	s0, s15
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
	...

080051c4 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80051cc:	2300      	movs	r3, #0
 80051ce:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 80051d0:	2102      	movs	r1, #2
 80051d2:	4822      	ldr	r0, [pc, #136]	; (800525c <_ZN12RotarySwitch8getValueEv+0x98>)
 80051d4:	f005 fe52 	bl	800ae7c <HAL_GPIO_ReadPin>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	bf0c      	ite	eq
 80051de:	2301      	moveq	r3, #1
 80051e0:	2300      	movne	r3, #0
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <_ZN12RotarySwitch8getValueEv+0x2c>
 80051e8:	89fb      	ldrh	r3, [r7, #14]
 80051ea:	f043 0301 	orr.w	r3, r3, #1
 80051ee:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 80051f0:	2108      	movs	r1, #8
 80051f2:	481a      	ldr	r0, [pc, #104]	; (800525c <_ZN12RotarySwitch8getValueEv+0x98>)
 80051f4:	f005 fe42 	bl	800ae7c <HAL_GPIO_ReadPin>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	bf0c      	ite	eq
 80051fe:	2301      	moveq	r3, #1
 8005200:	2300      	movne	r3, #0
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005208:	89fb      	ldrh	r3, [r7, #14]
 800520a:	f043 0302 	orr.w	r3, r3, #2
 800520e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8005210:	2110      	movs	r1, #16
 8005212:	4812      	ldr	r0, [pc, #72]	; (800525c <_ZN12RotarySwitch8getValueEv+0x98>)
 8005214:	f005 fe32 	bl	800ae7c <HAL_GPIO_ReadPin>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	bf0c      	ite	eq
 800521e:	2301      	moveq	r3, #1
 8005220:	2300      	movne	r3, #0
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <_ZN12RotarySwitch8getValueEv+0x6c>
 8005228:	89fb      	ldrh	r3, [r7, #14]
 800522a:	f043 0304 	orr.w	r3, r3, #4
 800522e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8005230:	2180      	movs	r1, #128	; 0x80
 8005232:	480a      	ldr	r0, [pc, #40]	; (800525c <_ZN12RotarySwitch8getValueEv+0x98>)
 8005234:	f005 fe22 	bl	800ae7c <HAL_GPIO_ReadPin>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	bf0c      	ite	eq
 800523e:	2301      	moveq	r3, #1
 8005240:	2300      	movne	r3, #0
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <_ZN12RotarySwitch8getValueEv+0x8c>
 8005248:	89fb      	ldrh	r3, [r7, #14]
 800524a:	f043 0308 	orr.w	r3, r3, #8
 800524e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8005250:	89fb      	ldrh	r3, [r7, #14]

}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	40020c00 	.word	0x40020c00

08005260 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	801a      	strh	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	805a      	strh	r2, [r3, #2]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	809a      	strh	r2, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	719a      	strb	r2, [r3, #6]
{

}
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4618      	mov	r0, r3
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
	...

08005290 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	799b      	ldrb	r3, [r3, #6]
 800529c:	2b00      	cmp	r3, #0
 800529e:	f040 80c1 	bne.w	8005424 <_ZN10SideSensor12updateStatusEv+0x194>

		if(white_flag1 == false){
 80052a2:	4b62      	ldr	r3, [pc, #392]	; (800542c <_ZN10SideSensor12updateStatusEv+0x19c>)
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d127      	bne.n	80052fa <_ZN10SideSensor12updateStatusEv+0x6a>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 80052aa:	2104      	movs	r1, #4
 80052ac:	4860      	ldr	r0, [pc, #384]	; (8005430 <_ZN10SideSensor12updateStatusEv+0x1a0>)
 80052ae:	f005 fde5 	bl	800ae7c <HAL_GPIO_ReadPin>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	bf0c      	ite	eq
 80052b8:	2301      	moveq	r3, #1
 80052ba:	2300      	movne	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d006      	beq.n	80052d0 <_ZN10SideSensor12updateStatusEv+0x40>
				cnt_r++;
 80052c2:	4b5c      	ldr	r3, [pc, #368]	; (8005434 <_ZN10SideSensor12updateStatusEv+0x1a4>)
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	3301      	adds	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	4b5a      	ldr	r3, [pc, #360]	; (8005434 <_ZN10SideSensor12updateStatusEv+0x1a4>)
 80052cc:	801a      	strh	r2, [r3, #0]
 80052ce:	e002      	b.n	80052d6 <_ZN10SideSensor12updateStatusEv+0x46>
			}
			else{
				cnt_r = 0;
 80052d0:	4b58      	ldr	r3, [pc, #352]	; (8005434 <_ZN10SideSensor12updateStatusEv+0x1a4>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80052d6:	4b57      	ldr	r3, [pc, #348]	; (8005434 <_ZN10SideSensor12updateStatusEv+0x1a4>)
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d93f      	bls.n	800535e <_ZN10SideSensor12updateStatusEv+0xce>
				status_ |= 0x01;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	f043 0301 	orr.w	r3, r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 80052ec:	4b4f      	ldr	r3, [pc, #316]	; (800542c <_ZN10SideSensor12updateStatusEv+0x19c>)
 80052ee:	2201      	movs	r2, #1
 80052f0:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 80052f2:	4b50      	ldr	r3, [pc, #320]	; (8005434 <_ZN10SideSensor12updateStatusEv+0x1a4>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	801a      	strh	r2, [r3, #0]
 80052f8:	e031      	b.n	800535e <_ZN10SideSensor12updateStatusEv+0xce>
			}

		}
		else if(white_flag1 == true){
 80052fa:	4b4c      	ldr	r3, [pc, #304]	; (800542c <_ZN10SideSensor12updateStatusEv+0x19c>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d12d      	bne.n	800535e <_ZN10SideSensor12updateStatusEv+0xce>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8005302:	2104      	movs	r1, #4
 8005304:	484a      	ldr	r0, [pc, #296]	; (8005430 <_ZN10SideSensor12updateStatusEv+0x1a0>)
 8005306:	f005 fdb9 	bl	800ae7c <HAL_GPIO_ReadPin>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	bf14      	ite	ne
 8005310:	2301      	movne	r3, #1
 8005312:	2300      	moveq	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d006      	beq.n	8005328 <_ZN10SideSensor12updateStatusEv+0x98>
				cnt_r++;
 800531a:	4b46      	ldr	r3, [pc, #280]	; (8005434 <_ZN10SideSensor12updateStatusEv+0x1a4>)
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	3301      	adds	r3, #1
 8005320:	b29a      	uxth	r2, r3
 8005322:	4b44      	ldr	r3, [pc, #272]	; (8005434 <_ZN10SideSensor12updateStatusEv+0x1a4>)
 8005324:	801a      	strh	r2, [r3, #0]
 8005326:	e002      	b.n	800532e <_ZN10SideSensor12updateStatusEv+0x9e>
			}
			else{
				cnt_r = 0;
 8005328:	4b42      	ldr	r3, [pc, #264]	; (8005434 <_ZN10SideSensor12updateStatusEv+0x1a4>)
 800532a:	2200      	movs	r2, #0
 800532c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 800532e:	4b41      	ldr	r3, [pc, #260]	; (8005434 <_ZN10SideSensor12updateStatusEv+0x1a4>)
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	2b04      	cmp	r3, #4
 8005334:	d913      	bls.n	800535e <_ZN10SideSensor12updateStatusEv+0xce>
				status_ ^= 0x01;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	f083 0301 	eor.w	r3, r3, #1
 800533e:	b29a      	uxth	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 8005344:	4b39      	ldr	r3, [pc, #228]	; (800542c <_ZN10SideSensor12updateStatusEv+0x19c>)
 8005346:	2200      	movs	r2, #0
 8005348:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	889b      	ldrh	r3, [r3, #4]
 800534e:	3301      	adds	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	889a      	ldrh	r2, [r3, #4]
 800535a:	4b37      	ldr	r3, [pc, #220]	; (8005438 <_ZN10SideSensor12updateStatusEv+0x1a8>)
 800535c:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 800535e:	4b37      	ldr	r3, [pc, #220]	; (800543c <_ZN10SideSensor12updateStatusEv+0x1ac>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d127      	bne.n	80053b6 <_ZN10SideSensor12updateStatusEv+0x126>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005366:	f44f 7180 	mov.w	r1, #256	; 0x100
 800536a:	4835      	ldr	r0, [pc, #212]	; (8005440 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 800536c:	f005 fd86 	bl	800ae7c <HAL_GPIO_ReadPin>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	bf0c      	ite	eq
 8005376:	2301      	moveq	r3, #1
 8005378:	2300      	movne	r3, #0
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d006      	beq.n	800538e <_ZN10SideSensor12updateStatusEv+0xfe>
				cnt_l++;
 8005380:	4b30      	ldr	r3, [pc, #192]	; (8005444 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	3301      	adds	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	4b2e      	ldr	r3, [pc, #184]	; (8005444 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 800538a:	801a      	strh	r2, [r3, #0]
 800538c:	e002      	b.n	8005394 <_ZN10SideSensor12updateStatusEv+0x104>
			}
			else{
				cnt_l = 0;
 800538e:	4b2d      	ldr	r3, [pc, #180]	; (8005444 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8005390:	2200      	movs	r2, #0
 8005392:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8005394:	4b2b      	ldr	r3, [pc, #172]	; (8005444 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	2b04      	cmp	r3, #4
 800539a:	d90c      	bls.n	80053b6 <_ZN10SideSensor12updateStatusEv+0x126>
				status_ |= 0x02;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	f043 0302 	orr.w	r3, r3, #2
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 80053aa:	4b24      	ldr	r3, [pc, #144]	; (800543c <_ZN10SideSensor12updateStatusEv+0x1ac>)
 80053ac:	2201      	movs	r2, #1
 80053ae:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 80053b0:	4b24      	ldr	r3, [pc, #144]	; (8005444 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 80053b6:	4b21      	ldr	r3, [pc, #132]	; (800543c <_ZN10SideSensor12updateStatusEv+0x1ac>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d12e      	bne.n	800541c <_ZN10SideSensor12updateStatusEv+0x18c>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 80053be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053c2:	481f      	ldr	r0, [pc, #124]	; (8005440 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 80053c4:	f005 fd5a 	bl	800ae7c <HAL_GPIO_ReadPin>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	bf14      	ite	ne
 80053ce:	2301      	movne	r3, #1
 80053d0:	2300      	moveq	r3, #0
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d006      	beq.n	80053e6 <_ZN10SideSensor12updateStatusEv+0x156>
				cnt_l++;
 80053d8:	4b1a      	ldr	r3, [pc, #104]	; (8005444 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	3301      	adds	r3, #1
 80053de:	b29a      	uxth	r2, r3
 80053e0:	4b18      	ldr	r3, [pc, #96]	; (8005444 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 80053e2:	801a      	strh	r2, [r3, #0]
 80053e4:	e002      	b.n	80053ec <_ZN10SideSensor12updateStatusEv+0x15c>
			}
			else{
				cnt_l = 0;
 80053e6:	4b17      	ldr	r3, [pc, #92]	; (8005444 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 80053ec:	4b15      	ldr	r3, [pc, #84]	; (8005444 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d913      	bls.n	800541c <_ZN10SideSensor12updateStatusEv+0x18c>
				status_ ^= 0x02;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	f083 0302 	eor.w	r3, r3, #2
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 8005402:	4b0e      	ldr	r3, [pc, #56]	; (800543c <_ZN10SideSensor12updateStatusEv+0x1ac>)
 8005404:	2200      	movs	r2, #0
 8005406:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	885b      	ldrh	r3, [r3, #2]
 800540c:	3301      	adds	r3, #1
 800540e:	b29a      	uxth	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	885a      	ldrh	r2, [r3, #2]
 8005418:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 800541a:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	881a      	ldrh	r2, [r3, #0]
 8005420:	4b0a      	ldr	r3, [pc, #40]	; (800544c <_ZN10SideSensor12updateStatusEv+0x1bc>)
 8005422:	801a      	strh	r2, [r3, #0]
	}

}
 8005424:	bf00      	nop
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	200002aa 	.word	0x200002aa
 8005430:	40021000 	.word	0x40021000
 8005434:	200002ae 	.word	0x200002ae
 8005438:	200002a8 	.word	0x200002a8
 800543c:	200002ab 	.word	0x200002ab
 8005440:	40020c00 	.word	0x40020c00
 8005444:	200002ac 	.word	0x200002ac
 8005448:	200002a6 	.word	0x200002a6
 800544c:	200002a4 	.word	0x200002a4

08005450 <_ZN10SideSensor9getStatusEv>:
uint16_t SideSensor::getStatus()
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
	return status_;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	881b      	ldrh	r3, [r3, #0]
}
 800545c:	4618      	mov	r0, r3
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	889b      	ldrh	r3, [r3, #4]
}
 8005474:	4618      	mov	r0, r3
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	809a      	strh	r2, [r3, #4]
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	719a      	strb	r2, [r3, #6]
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	719a      	strb	r2, [r3, #6]
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	799b      	ldrb	r3, [r3, #6]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4a10      	ldr	r2, [pc, #64]	; (800553c <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 80054fc:	3308      	adds	r3, #8
 80054fe:	4611      	mov	r1, r2
 8005500:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005504:	4618      	mov	r0, r3
 8005506:	f010 f81f 	bl	8015548 <memcpy>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	0801a908 	.word	0x0801a908

08005540 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005552:	2b01      	cmp	r3, #1
 8005554:	d110      	bne.n	8005578 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	ed97 0a00 	vldr	s0, [r7]
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff f87a 	bl	8004658 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 800556e:	eeb0 0a67 	vmov.f32	s0, s15
 8005572:	4610      	mov	r0, r2
 8005574:	f7ff f8ac 	bl	80046d0 <_ZN6Logger9storeLog2Ef>
	}

}
 8005578:	bf00      	nop
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a07      	ldr	r2, [pc, #28]	; (80055ac <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 800558e:	4908      	ldr	r1, [pc, #32]	; (80055b0 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8005590:	4618      	mov	r0, r3
 8005592:	f7ff f984 	bl	800489e <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a06      	ldr	r2, [pc, #24]	; (80055b4 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 800559c:	4904      	ldr	r1, [pc, #16]	; (80055b0 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff f98f 	bl	80048c2 <_ZN6Logger9saveLogs2EPKcS1_>
}
 80055a4:	bf00      	nop
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	0801aafc 	.word	0x0801aafc
 80055b0:	0801ab08 	.word	0x0801ab08
 80055b4:	0801ab14 	.word	0x0801ab14

080055b8 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 80055b8:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d146      	bne.n	800565a <_ZN20SystemIdentification10updateMsigEv+0xa2>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80055d8:	461a      	mov	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	3204      	adds	r2, #4
 80055de:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80055e2:	ee07 3a90 	vmov	s15, r3
 80055e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80055fa:	3301      	adds	r3, #1
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800560a:	4a16      	ldr	r2, [pc, #88]	; (8005664 <_ZN20SystemIdentification10updateMsigEv+0xac>)
 800560c:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005614:	2bf9      	cmp	r3, #249	; 0xf9
 8005616:	d903      	bls.n	8005620 <_ZN20SystemIdentification10updateMsigEv+0x68>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	22fa      	movs	r2, #250	; 0xfa
 800561c:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685c      	ldr	r4, [r3, #4]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800562a:	4618      	mov	r0, r3
 800562c:	f7fa ffa4 	bl	8000578 <__aeabi_f2d>
 8005630:	4680      	mov	r8, r0
 8005632:	4689      	mov	r9, r1
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 800563a:	eef1 7a67 	vneg.f32	s15, s15
 800563e:	ee17 3a90 	vmov	r3, s15
 8005642:	4618      	mov	r0, r3
 8005644:	f7fa ff98 	bl	8000578 <__aeabi_f2d>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	ec43 2b11 	vmov	d1, r2, r3
 8005650:	ec49 8b10 	vmov	d0, r8, r9
 8005654:	4620      	mov	r0, r4
 8005656:	f7ff fa9f 	bl	8004b98 <_ZN5Motor8setRatioEdd>

	}

}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 8005664:	200002b0 	.word	0x200002b0

08005668 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f7ff f9ee 	bl	8004a76 <_ZN6Logger5startEv>
	processing_flag_ = true;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 80056a2:	bf00      	nop
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	0000      	movs	r0, r0
 80056ac:	0000      	movs	r0, r0
	...

080056b0 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
	logger_->stop();
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4618      	mov	r0, r3
 80056be:	f7ff f9eb 	bl	8004a98 <_ZN6Logger4stopEv>
	processing_flag_ = false;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80056f0 <_ZN20SystemIdentification4stopEv+0x40>
 80056da:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80056f0 <_ZN20SystemIdentification4stopEv+0x40>
 80056de:	4618      	mov	r0, r3
 80056e0:	f7ff fa5a 	bl	8004b98 <_ZN5Motor8setRatioEdd>
}
 80056e4:	bf00      	nop
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	f3af 8000 	nop.w
	...

080056f8 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	605a      	str	r2, [r3, #4]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	609a      	str	r2, [r3, #8]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	60da      	str	r2, [r3, #12]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	611a      	str	r2, [r3, #16]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	615a      	str	r2, [r3, #20]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	619a      	str	r2, [r3, #24]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f04f 0200 	mov.w	r2, #0
 8005744:	61da      	str	r2, [r3, #28]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	621a      	str	r2, [r3, #32]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f04f 0200 	mov.w	r2, #0
 8005754:	625a      	str	r2, [r3, #36]	; 0x24
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f04f 0200 	mov.w	r2, #0
 800576c:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
	...

08005790 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579c:	f107 020c 	add.w	r2, r7, #12
 80057a0:	f107 0110 	add.w	r1, r7, #16
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7fb fe5f 	bl	8001468 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 80057aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80057ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80057b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057b6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80057ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80057be:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 80057c2:	6978      	ldr	r0, [r7, #20]
 80057c4:	f7fa fed8 	bl	8000578 <__aeabi_f2d>
 80057c8:	a30b      	add	r3, pc, #44	; (adr r3, 80057f8 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 80057ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ce:	f7fa ff2b 	bl	8000628 <__aeabi_dmul>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	4610      	mov	r0, r2
 80057d8:	4619      	mov	r1, r3
 80057da:	f7fb fa1d 	bl	8000c18 <__aeabi_d2f>
 80057de:	4602      	mov	r2, r0
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	ee07 3a90 	vmov	s15, r3
}
 80057ec:	eeb0 0a67 	vmov.f32	s0, s15
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	1ab1d998 	.word	0x1ab1d998
 80057fc:	3f7830b5 	.word	0x3f7830b5

08005800 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005800:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005804:	b086      	sub	sp, #24
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	ed93 7a00 	vldr	s14, [r3]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	edd3 7a02 	vldr	s15, [r3, #8]
 8005816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800581a:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005824:	2b01      	cmp	r3, #1
 8005826:	d107      	bne.n	8005838 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x38>
		v_i = 0;
 8005828:	4b47      	ldr	r3, [pc, #284]	; (8005948 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	edd3 7a04 	vldr	s15, [r3, #16]
 800583e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005846:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 800584a:	4b3f      	ldr	r3, [pc, #252]	; (8005948 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4618      	mov	r0, r3
 8005850:	f7fa fe92 	bl	8000578 <__aeabi_f2d>
 8005854:	4604      	mov	r4, r0
 8005856:	460d      	mov	r5, r1
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	ed93 7a06 	vldr	s14, [r3, #24]
 800585e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005866:	ee17 0a90 	vmov	r0, s15
 800586a:	f7fa fe85 	bl	8000578 <__aeabi_f2d>
 800586e:	a334      	add	r3, pc, #208	; (adr r3, 8005940 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005874:	f7fa fed8 	bl	8000628 <__aeabi_dmul>
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	4620      	mov	r0, r4
 800587e:	4629      	mov	r1, r5
 8005880:	f7fa fd1c 	bl	80002bc <__adddf3>
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	4610      	mov	r0, r2
 800588a:	4619      	mov	r1, r3
 800588c:	f7fb f9c4 	bl	8000c18 <__aeabi_d2f>
 8005890:	4603      	mov	r3, r0
 8005892:	4a2d      	ldr	r2, [pc, #180]	; (8005948 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005894:	6013      	str	r3, [r2, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	ed93 7a05 	vldr	s14, [r3, #20]
 800589c:	4b2b      	ldr	r3, [pc, #172]	; (800594c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 800589e:	edd3 7a00 	vldr	s15, [r3]
 80058a2:	edd7 6a05 	vldr	s13, [r7, #20]
 80058a6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80058aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058ae:	ee17 0a90 	vmov	r0, s15
 80058b2:	f7fa fe61 	bl	8000578 <__aeabi_f2d>
 80058b6:	a322      	add	r3, pc, #136	; (adr r3, 8005940 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	f7fa ffde 	bl	800087c <__aeabi_ddiv>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4610      	mov	r0, r2
 80058c6:	4619      	mov	r1, r3
 80058c8:	f7fb f9a6 	bl	8000c18 <__aeabi_d2f>
 80058cc:	4603      	mov	r3, r0
 80058ce:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 80058d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80058d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80058d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058dc:	4b1a      	ldr	r3, [pc, #104]	; (8005948 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80058de:	edd3 7a00 	vldr	s15, [r3]
 80058e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058e6:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80058f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80058f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058fc:	ee17 0a90 	vmov	r0, s15
 8005900:	f7fa fe3a 	bl	8000578 <__aeabi_f2d>
 8005904:	4680      	mov	r8, r0
 8005906:	4689      	mov	r9, r1
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800590e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005916:	ee17 0a90 	vmov	r0, s15
 800591a:	f7fa fe2d 	bl	8000578 <__aeabi_f2d>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	ec43 2b11 	vmov	d1, r2, r3
 8005926:	ec49 8b10 	vmov	d0, r8, r9
 800592a:	4620      	mov	r0, r4
 800592c:	f7ff f934 	bl	8004b98 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005930:	4a06      	ldr	r2, [pc, #24]	; (800594c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	6013      	str	r3, [r2, #0]
}
 8005936:	bf00      	nop
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005940:	d2f1a9fc 	.word	0xd2f1a9fc
 8005944:	3f50624d 	.word	0x3f50624d
 8005948:	200002b8 	.word	0x200002b8
 800594c:	200002b4 	.word	0x200002b4

08005950 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	ed87 0a02 	vstr	s0, [r7, #8]
 800595c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	605a      	str	r2, [r3, #4]
}
 800596c:	bf00      	nop
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	ed87 0a02 	vstr	s0, [r7, #8]
 8005984:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005994:	bf00      	nop
 8005996:	3714      	adds	r7, #20
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80059ac:	edc7 0a01 	vstr	s1, [r7, #4]
 80059b0:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	615a      	str	r2, [r3, #20]
}
 80059c6:	bf00      	nop
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b085      	sub	sp, #20
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	ed87 0a02 	vstr	s0, [r7, #8]
 80059de:	edc7 0a01 	vstr	s1, [r7, #4]
 80059e2:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	621a      	str	r2, [r3, #32]
}
 80059f8:	bf00      	nop
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff febf 	bl	8005790 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d102      	bne.n	8005a22 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff feef 	bl	8005800 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005a22:	bf00      	nop
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b083      	sub	sp, #12
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005a42:	bf00      	nop
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
	...

08005a50 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a64:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005a80 <_ZN12VelocityCtrl4stopEv+0x30>
 8005a68:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005a80 <_ZN12VelocityCtrl4stopEv+0x30>
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff f893 	bl	8004b98 <_ZN5Motor8setRatioEdd>

}
 8005a72:	bf00      	nop
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	f3af 8000 	nop.w
	...

08005a88 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	ee07 3a90 	vmov	s15, r3
}
 8005a98:	eeb0 0a67 	vmov.f32	s0, s15
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005aae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005ab2:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d013      	beq.n	8005ae6 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8005abe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005ac2:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8005ac6:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00b      	beq.n	8005ae6 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8005ace:	e000      	b.n	8005ad2 <ITM_SendChar+0x2c>
    {
      __NOP();
 8005ad0:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8005ad2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0f9      	beq.n	8005ad0 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8005adc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8005ae6:	687b      	ldr	r3, [r7, #4]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	e009      	b.n	8005b1a <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	60ba      	str	r2, [r7, #8]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff ffc9 	bl	8005aa6 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	3301      	adds	r3, #1
 8005b18:	617b      	str	r3, [r7, #20]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	dbf1      	blt.n	8005b06 <_write+0x12>
  }
  return len;
 8005b22:	687b      	ldr	r3, [r7, #4]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3718      	adds	r7, #24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a1e      	ldr	r2, [pc, #120]	; (8005bb4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d10e      	bne.n	8005b5c <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005b3e:	f001 fe9d 	bl	800787c <cppFlip100ns>

		tim7_timer++;
 8005b42:	4b1d      	ldr	r3, [pc, #116]	; (8005bb8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	3301      	adds	r3, #1
 8005b48:	4a1b      	ldr	r2, [pc, #108]	; (8005bb8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005b4a:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005b4c:	4b1a      	ldr	r3, [pc, #104]	; (8005bb8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a1a      	ldr	r2, [pc, #104]	; (8005bbc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d902      	bls.n	8005b5c <HAL_TIM_PeriodElapsedCallback+0x30>
 8005b56:	4b18      	ldr	r3, [pc, #96]	; (8005bb8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a17      	ldr	r2, [pc, #92]	; (8005bc0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d10e      	bne.n	8005b84 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005b66:	f001 fe3f 	bl	80077e8 <cppFlip1ms>

		tim6_timer++;
 8005b6a:	4b16      	ldr	r3, [pc, #88]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	4a14      	ldr	r2, [pc, #80]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005b72:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005b74:	4b13      	ldr	r3, [pc, #76]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a10      	ldr	r2, [pc, #64]	; (8005bbc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d902      	bls.n	8005b84 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005b7e:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a0f      	ldr	r2, [pc, #60]	; (8005bc8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d10e      	bne.n	8005bac <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005b8e:	f001 fe7f 	bl	8007890 <cppFlip10ms>

		tim13_timer++;
 8005b92:	4b0e      	ldr	r3, [pc, #56]	; (8005bcc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3301      	adds	r3, #1
 8005b98:	4a0c      	ldr	r2, [pc, #48]	; (8005bcc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005b9a:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a06      	ldr	r2, [pc, #24]	; (8005bbc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d902      	bls.n	8005bac <HAL_TIM_PeriodElapsedCallback+0x80>
 8005ba6:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]
	}

}
 8005bac:	bf00      	nop
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	40001400 	.word	0x40001400
 8005bb8:	2003fa78 	.word	0x2003fa78
 8005bbc:	0001869f 	.word	0x0001869f
 8005bc0:	40001000 	.word	0x40001000
 8005bc4:	2003fa34 	.word	0x2003fa34
 8005bc8:	40001c00 	.word	0x40001c00
 8005bcc:	2003fa7c 	.word	0x2003fa7c

08005bd0 <init>:

void init()
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bda:	4808      	ldr	r0, [pc, #32]	; (8005bfc <init+0x2c>)
 8005bdc:	f005 f966 	bl	800aeac <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005be0:	4807      	ldr	r0, [pc, #28]	; (8005c00 <init+0x30>)
 8005be2:	f009 f842 	bl	800ec6a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005be6:	4807      	ldr	r0, [pc, #28]	; (8005c04 <init+0x34>)
 8005be8:	f009 f83f 	bl	800ec6a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005bec:	4806      	ldr	r0, [pc, #24]	; (8005c08 <init+0x38>)
 8005bee:	f009 f83c 	bl	800ec6a <HAL_TIM_Base_Start_IT>

	cppInit();
 8005bf2:	f001 fd57 	bl	80076a4 <cppInit>

	//path_following_initialize();

}
 8005bf6:	bf00      	nop
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	2003fb60 	.word	0x2003fb60
 8005c04:	2003fd04 	.word	0x2003fd04
 8005c08:	2003fa80 	.word	0x2003fa80

08005c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005c10:	f003 fe3e 	bl	8009890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005c14:	f000 f82a 	bl	8005c6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c18:	f000 fdbc 	bl	8006794 <MX_GPIO_Init>
  MX_DMA_Init();
 8005c1c:	f000 fd8a 	bl	8006734 <MX_DMA_Init>
  MX_I2C2_Init();
 8005c20:	f000 f9e8 	bl	8005ff4 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005c24:	f000 fa14 	bl	8006050 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005c28:	f000 fa32 	bl	8006090 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005c2c:	f000 fa66 	bl	80060fc <MX_TIM1_Init>
  MX_TIM4_Init();
 8005c30:	f000 fb70 	bl	8006314 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005c34:	f000 fc3c 	bl	80064b0 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005c38:	f000 fd52 	bl	80066e0 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005c3c:	f00b f808 	bl	8010c50 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005c40:	f000 fbcc 	bl	80063dc <MX_TIM6_Init>
  MX_I2C1_Init();
 8005c44:	f000 f9a8 	bl	8005f98 <MX_I2C1_Init>
  MX_TIM3_Init();
 8005c48:	f000 fb00 	bl	800624c <MX_TIM3_Init>
  MX_TIM10_Init();
 8005c4c:	f000 fc88 	bl	8006560 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005c50:	f000 fcd4 	bl	80065fc <MX_TIM11_Init>
  MX_ADC2_Init();
 8005c54:	f000 f898 	bl	8005d88 <MX_ADC2_Init>
  MX_TIM7_Init();
 8005c58:	f000 fbf6 	bl	8006448 <MX_TIM7_Init>
  MX_TIM13_Init();
 8005c5c:	f000 fd1c 	bl	8006698 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005c60:	f7ff ffb6 	bl	8005bd0 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005c64:	f001 fe2c 	bl	80078c0 <cppLoop>
 8005c68:	e7fc      	b.n	8005c64 <main+0x58>
	...

08005c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b0a4      	sub	sp, #144	; 0x90
 8005c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005c72:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005c76:	2234      	movs	r2, #52	; 0x34
 8005c78:	2100      	movs	r1, #0
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f00f fc72 	bl	8015564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005c80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	605a      	str	r2, [r3, #4]
 8005c8a:	609a      	str	r2, [r3, #8]
 8005c8c:	60da      	str	r2, [r3, #12]
 8005c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005c90:	f107 030c 	add.w	r3, r7, #12
 8005c94:	223c      	movs	r2, #60	; 0x3c
 8005c96:	2100      	movs	r1, #0
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f00f fc63 	bl	8015564 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60bb      	str	r3, [r7, #8]
 8005ca2:	4b37      	ldr	r3, [pc, #220]	; (8005d80 <SystemClock_Config+0x114>)
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	4a36      	ldr	r2, [pc, #216]	; (8005d80 <SystemClock_Config+0x114>)
 8005ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cac:	6413      	str	r3, [r2, #64]	; 0x40
 8005cae:	4b34      	ldr	r3, [pc, #208]	; (8005d80 <SystemClock_Config+0x114>)
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cb6:	60bb      	str	r3, [r7, #8]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cba:	2300      	movs	r3, #0
 8005cbc:	607b      	str	r3, [r7, #4]
 8005cbe:	4b31      	ldr	r3, [pc, #196]	; (8005d84 <SystemClock_Config+0x118>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a30      	ldr	r2, [pc, #192]	; (8005d84 <SystemClock_Config+0x118>)
 8005cc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	4b2e      	ldr	r3, [pc, #184]	; (8005d84 <SystemClock_Config+0x118>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005cd2:	607b      	str	r3, [r7, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005cda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cde:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005ce4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005ce8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005cea:	2308      	movs	r3, #8
 8005cec:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005cee:	23b4      	movs	r3, #180	; 0xb4
 8005cf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005cfa:	2308      	movs	r3, #8
 8005cfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005d00:	2302      	movs	r3, #2
 8005d02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d06:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f006 fd06 	bl	800c71c <HAL_RCC_OscConfig>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005d16:	f000 fe7f 	bl	8006a18 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005d1a:	f006 f877 	bl	800be0c <HAL_PWREx_EnableOverDrive>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005d24:	f000 fe78 	bl	8006a18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d28:	230f      	movs	r3, #15
 8005d2a:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005d30:	2300      	movs	r3, #0
 8005d32:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005d34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005d38:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d3e:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005d40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d44:	2105      	movs	r1, #5
 8005d46:	4618      	mov	r0, r3
 8005d48:	f006 f8b0 	bl	800beac <HAL_RCC_ClockConfig>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005d52:	f000 fe61 	bl	8006a18 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8005d56:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005d5a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005d60:	2300      	movs	r3, #0
 8005d62:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d64:	f107 030c 	add.w	r3, r7, #12
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f006 fa99 	bl	800c2a0 <HAL_RCCEx_PeriphCLKConfig>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005d74:	f000 fe50 	bl	8006a18 <Error_Handler>
  }
}
 8005d78:	bf00      	nop
 8005d7a:	3790      	adds	r7, #144	; 0x90
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40023800 	.word	0x40023800
 8005d84:	40007000 	.word	0x40007000

08005d88 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005d8e:	463b      	mov	r3, r7
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	605a      	str	r2, [r3, #4]
 8005d96:	609a      	str	r2, [r3, #8]
 8005d98:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005d9a:	4b7c      	ldr	r3, [pc, #496]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005d9c:	4a7c      	ldr	r2, [pc, #496]	; (8005f90 <MX_ADC2_Init+0x208>)
 8005d9e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005da0:	4b7a      	ldr	r3, [pc, #488]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005da2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005da6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005da8:	4b78      	ldr	r3, [pc, #480]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005dae:	4b77      	ldr	r3, [pc, #476]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005db0:	2201      	movs	r2, #1
 8005db2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005db4:	4b75      	ldr	r3, [pc, #468]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005db6:	2201      	movs	r2, #1
 8005db8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005dba:	4b74      	ldr	r3, [pc, #464]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005dc2:	4b72      	ldr	r3, [pc, #456]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005dc8:	4b70      	ldr	r3, [pc, #448]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005dca:	4a72      	ldr	r2, [pc, #456]	; (8005f94 <MX_ADC2_Init+0x20c>)
 8005dcc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005dce:	4b6f      	ldr	r3, [pc, #444]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005dd4:	4b6d      	ldr	r3, [pc, #436]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005dd6:	220e      	movs	r2, #14
 8005dd8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005dda:	4b6c      	ldr	r3, [pc, #432]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005de2:	4b6a      	ldr	r3, [pc, #424]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005de4:	2201      	movs	r2, #1
 8005de6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005de8:	4868      	ldr	r0, [pc, #416]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005dea:	f003 fde7 	bl	80099bc <HAL_ADC_Init>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005df4:	f000 fe10 	bl	8006a18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005df8:	230a      	movs	r3, #10
 8005dfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005e00:	2306      	movs	r3, #6
 8005e02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e04:	463b      	mov	r3, r7
 8005e06:	4619      	mov	r1, r3
 8005e08:	4860      	ldr	r0, [pc, #384]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005e0a:	f003 ff2b 	bl	8009c64 <HAL_ADC_ConfigChannel>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005e14:	f000 fe00 	bl	8006a18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005e18:	230b      	movs	r3, #11
 8005e1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e20:	463b      	mov	r3, r7
 8005e22:	4619      	mov	r1, r3
 8005e24:	4859      	ldr	r0, [pc, #356]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005e26:	f003 ff1d 	bl	8009c64 <HAL_ADC_ConfigChannel>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005e30:	f000 fdf2 	bl	8006a18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005e34:	230c      	movs	r3, #12
 8005e36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e3c:	463b      	mov	r3, r7
 8005e3e:	4619      	mov	r1, r3
 8005e40:	4852      	ldr	r0, [pc, #328]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005e42:	f003 ff0f 	bl	8009c64 <HAL_ADC_ConfigChannel>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005e4c:	f000 fde4 	bl	8006a18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005e50:	230d      	movs	r3, #13
 8005e52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005e54:	2304      	movs	r3, #4
 8005e56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e58:	463b      	mov	r3, r7
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	484b      	ldr	r0, [pc, #300]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005e5e:	f003 ff01 	bl	8009c64 <HAL_ADC_ConfigChannel>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005e68:	f000 fdd6 	bl	8006a18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005e70:	2305      	movs	r3, #5
 8005e72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e74:	463b      	mov	r3, r7
 8005e76:	4619      	mov	r1, r3
 8005e78:	4844      	ldr	r0, [pc, #272]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005e7a:	f003 fef3 	bl	8009c64 <HAL_ADC_ConfigChannel>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005e84:	f000 fdc8 	bl	8006a18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005e8c:	2306      	movs	r3, #6
 8005e8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e90:	463b      	mov	r3, r7
 8005e92:	4619      	mov	r1, r3
 8005e94:	483d      	ldr	r0, [pc, #244]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005e96:	f003 fee5 	bl	8009c64 <HAL_ADC_ConfigChannel>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d001      	beq.n	8005ea4 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005ea0:	f000 fdba 	bl	8006a18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005ea8:	2307      	movs	r3, #7
 8005eaa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005eac:	463b      	mov	r3, r7
 8005eae:	4619      	mov	r1, r3
 8005eb0:	4836      	ldr	r0, [pc, #216]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005eb2:	f003 fed7 	bl	8009c64 <HAL_ADC_ConfigChannel>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d001      	beq.n	8005ec0 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005ebc:	f000 fdac 	bl	8006a18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005ec4:	2308      	movs	r3, #8
 8005ec6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ec8:	463b      	mov	r3, r7
 8005eca:	4619      	mov	r1, r3
 8005ecc:	482f      	ldr	r0, [pc, #188]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005ece:	f003 fec9 	bl	8009c64 <HAL_ADC_ConfigChannel>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8005ed8:	f000 fd9e 	bl	8006a18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005edc:	2304      	movs	r3, #4
 8005ede:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8005ee0:	2309      	movs	r3, #9
 8005ee2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ee4:	463b      	mov	r3, r7
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	4828      	ldr	r0, [pc, #160]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005eea:	f003 febb 	bl	8009c64 <HAL_ADC_ConfigChannel>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8005ef4:	f000 fd90 	bl	8006a18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005ef8:	2305      	movs	r3, #5
 8005efa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005efc:	230a      	movs	r3, #10
 8005efe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f00:	463b      	mov	r3, r7
 8005f02:	4619      	mov	r1, r3
 8005f04:	4821      	ldr	r0, [pc, #132]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005f06:	f003 fead 	bl	8009c64 <HAL_ADC_ConfigChannel>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8005f10:	f000 fd82 	bl	8006a18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005f14:	2306      	movs	r3, #6
 8005f16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005f18:	230b      	movs	r3, #11
 8005f1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f1c:	463b      	mov	r3, r7
 8005f1e:	4619      	mov	r1, r3
 8005f20:	481a      	ldr	r0, [pc, #104]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005f22:	f003 fe9f 	bl	8009c64 <HAL_ADC_ConfigChannel>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8005f2c:	f000 fd74 	bl	8006a18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005f30:	2307      	movs	r3, #7
 8005f32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005f34:	230c      	movs	r3, #12
 8005f36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f38:	463b      	mov	r3, r7
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	4813      	ldr	r0, [pc, #76]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005f3e:	f003 fe91 	bl	8009c64 <HAL_ADC_ConfigChannel>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8005f48:	f000 fd66 	bl	8006a18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005f4c:	2308      	movs	r3, #8
 8005f4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8005f50:	230d      	movs	r3, #13
 8005f52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f54:	463b      	mov	r3, r7
 8005f56:	4619      	mov	r1, r3
 8005f58:	480c      	ldr	r0, [pc, #48]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005f5a:	f003 fe83 	bl	8009c64 <HAL_ADC_ConfigChannel>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8005f64:	f000 fd58 	bl	8006a18 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005f68:	2309      	movs	r3, #9
 8005f6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8005f6c:	230e      	movs	r3, #14
 8005f6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f70:	463b      	mov	r3, r7
 8005f72:	4619      	mov	r1, r3
 8005f74:	4805      	ldr	r0, [pc, #20]	; (8005f8c <MX_ADC2_Init+0x204>)
 8005f76:	f003 fe75 	bl	8009c64 <HAL_ADC_ConfigChannel>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8005f80:	f000 fd4a 	bl	8006a18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005f84:	bf00      	nop
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	2003f904 	.word	0x2003f904
 8005f90:	40012100 	.word	0x40012100
 8005f94:	0f000001 	.word	0x0f000001

08005f98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005f9c:	4b12      	ldr	r3, [pc, #72]	; (8005fe8 <MX_I2C1_Init+0x50>)
 8005f9e:	4a13      	ldr	r2, [pc, #76]	; (8005fec <MX_I2C1_Init+0x54>)
 8005fa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005fa2:	4b11      	ldr	r3, [pc, #68]	; (8005fe8 <MX_I2C1_Init+0x50>)
 8005fa4:	4a12      	ldr	r2, [pc, #72]	; (8005ff0 <MX_I2C1_Init+0x58>)
 8005fa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005fa8:	4b0f      	ldr	r3, [pc, #60]	; (8005fe8 <MX_I2C1_Init+0x50>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005fae:	4b0e      	ldr	r3, [pc, #56]	; (8005fe8 <MX_I2C1_Init+0x50>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005fb4:	4b0c      	ldr	r3, [pc, #48]	; (8005fe8 <MX_I2C1_Init+0x50>)
 8005fb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005fba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005fbc:	4b0a      	ldr	r3, [pc, #40]	; (8005fe8 <MX_I2C1_Init+0x50>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005fc2:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <MX_I2C1_Init+0x50>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005fc8:	4b07      	ldr	r3, [pc, #28]	; (8005fe8 <MX_I2C1_Init+0x50>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005fce:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <MX_I2C1_Init+0x50>)
 8005fd0:	2280      	movs	r2, #128	; 0x80
 8005fd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005fd4:	4804      	ldr	r0, [pc, #16]	; (8005fe8 <MX_I2C1_Init+0x50>)
 8005fd6:	f004 ff83 	bl	800aee0 <HAL_I2C_Init>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005fe0:	f000 fd1a 	bl	8006a18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005fe4:	bf00      	nop
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	2003f94c 	.word	0x2003f94c
 8005fec:	40005400 	.word	0x40005400
 8005ff0:	000186a0 	.word	0x000186a0

08005ff4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005ff8:	4b12      	ldr	r3, [pc, #72]	; (8006044 <MX_I2C2_Init+0x50>)
 8005ffa:	4a13      	ldr	r2, [pc, #76]	; (8006048 <MX_I2C2_Init+0x54>)
 8005ffc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005ffe:	4b11      	ldr	r3, [pc, #68]	; (8006044 <MX_I2C2_Init+0x50>)
 8006000:	4a12      	ldr	r2, [pc, #72]	; (800604c <MX_I2C2_Init+0x58>)
 8006002:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006004:	4b0f      	ldr	r3, [pc, #60]	; (8006044 <MX_I2C2_Init+0x50>)
 8006006:	2200      	movs	r2, #0
 8006008:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800600a:	4b0e      	ldr	r3, [pc, #56]	; (8006044 <MX_I2C2_Init+0x50>)
 800600c:	2200      	movs	r2, #0
 800600e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006010:	4b0c      	ldr	r3, [pc, #48]	; (8006044 <MX_I2C2_Init+0x50>)
 8006012:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006016:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006018:	4b0a      	ldr	r3, [pc, #40]	; (8006044 <MX_I2C2_Init+0x50>)
 800601a:	2200      	movs	r2, #0
 800601c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800601e:	4b09      	ldr	r3, [pc, #36]	; (8006044 <MX_I2C2_Init+0x50>)
 8006020:	2200      	movs	r2, #0
 8006022:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006024:	4b07      	ldr	r3, [pc, #28]	; (8006044 <MX_I2C2_Init+0x50>)
 8006026:	2200      	movs	r2, #0
 8006028:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800602a:	4b06      	ldr	r3, [pc, #24]	; (8006044 <MX_I2C2_Init+0x50>)
 800602c:	2280      	movs	r2, #128	; 0x80
 800602e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006030:	4804      	ldr	r0, [pc, #16]	; (8006044 <MX_I2C2_Init+0x50>)
 8006032:	f004 ff55 	bl	800aee0 <HAL_I2C_Init>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800603c:	f000 fcec 	bl	8006a18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006040:	bf00      	nop
 8006042:	bd80      	pop	{r7, pc}
 8006044:	2003f9e0 	.word	0x2003f9e0
 8006048:	40005800 	.word	0x40005800
 800604c:	000186a0 	.word	0x000186a0

08006050 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8006050:	b480      	push	{r7}
 8006052:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8006054:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <MX_SDIO_SD_Init+0x38>)
 8006056:	4a0d      	ldr	r2, [pc, #52]	; (800608c <MX_SDIO_SD_Init+0x3c>)
 8006058:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800605a:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <MX_SDIO_SD_Init+0x38>)
 800605c:	2200      	movs	r2, #0
 800605e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8006060:	4b09      	ldr	r3, [pc, #36]	; (8006088 <MX_SDIO_SD_Init+0x38>)
 8006062:	2200      	movs	r2, #0
 8006064:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006066:	4b08      	ldr	r3, [pc, #32]	; (8006088 <MX_SDIO_SD_Init+0x38>)
 8006068:	2200      	movs	r2, #0
 800606a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800606c:	4b06      	ldr	r3, [pc, #24]	; (8006088 <MX_SDIO_SD_Init+0x38>)
 800606e:	2200      	movs	r2, #0
 8006070:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006072:	4b05      	ldr	r3, [pc, #20]	; (8006088 <MX_SDIO_SD_Init+0x38>)
 8006074:	2200      	movs	r2, #0
 8006076:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8006078:	4b03      	ldr	r3, [pc, #12]	; (8006088 <MX_SDIO_SD_Init+0x38>)
 800607a:	2202      	movs	r2, #2
 800607c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800607e:	bf00      	nop
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	2003fbe0 	.word	0x2003fbe0
 800608c:	40012c00 	.word	0x40012c00

08006090 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006094:	4b17      	ldr	r3, [pc, #92]	; (80060f4 <MX_SPI2_Init+0x64>)
 8006096:	4a18      	ldr	r2, [pc, #96]	; (80060f8 <MX_SPI2_Init+0x68>)
 8006098:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800609a:	4b16      	ldr	r3, [pc, #88]	; (80060f4 <MX_SPI2_Init+0x64>)
 800609c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80060a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80060a2:	4b14      	ldr	r3, [pc, #80]	; (80060f4 <MX_SPI2_Init+0x64>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80060a8:	4b12      	ldr	r3, [pc, #72]	; (80060f4 <MX_SPI2_Init+0x64>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80060ae:	4b11      	ldr	r3, [pc, #68]	; (80060f4 <MX_SPI2_Init+0x64>)
 80060b0:	2202      	movs	r2, #2
 80060b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80060b4:	4b0f      	ldr	r3, [pc, #60]	; (80060f4 <MX_SPI2_Init+0x64>)
 80060b6:	2201      	movs	r2, #1
 80060b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80060ba:	4b0e      	ldr	r3, [pc, #56]	; (80060f4 <MX_SPI2_Init+0x64>)
 80060bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80060c2:	4b0c      	ldr	r3, [pc, #48]	; (80060f4 <MX_SPI2_Init+0x64>)
 80060c4:	2228      	movs	r2, #40	; 0x28
 80060c6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80060c8:	4b0a      	ldr	r3, [pc, #40]	; (80060f4 <MX_SPI2_Init+0x64>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80060ce:	4b09      	ldr	r3, [pc, #36]	; (80060f4 <MX_SPI2_Init+0x64>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060d4:	4b07      	ldr	r3, [pc, #28]	; (80060f4 <MX_SPI2_Init+0x64>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80060da:	4b06      	ldr	r3, [pc, #24]	; (80060f4 <MX_SPI2_Init+0x64>)
 80060dc:	220a      	movs	r2, #10
 80060de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80060e0:	4804      	ldr	r0, [pc, #16]	; (80060f4 <MX_SPI2_Init+0x64>)
 80060e2:	f008 f843 	bl	800e16c <HAL_SPI_Init>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80060ec:	f000 fc94 	bl	8006a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80060f0:	bf00      	nop
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	2003f82c 	.word	0x2003f82c
 80060f8:	40003800 	.word	0x40003800

080060fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b09a      	sub	sp, #104	; 0x68
 8006100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006102:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006106:	2224      	movs	r2, #36	; 0x24
 8006108:	2100      	movs	r1, #0
 800610a:	4618      	mov	r0, r3
 800610c:	f00f fa2a 	bl	8015564 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006110:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006114:	2200      	movs	r2, #0
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800611a:	f107 0320 	add.w	r3, r7, #32
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	605a      	str	r2, [r3, #4]
 8006124:	609a      	str	r2, [r3, #8]
 8006126:	60da      	str	r2, [r3, #12]
 8006128:	611a      	str	r2, [r3, #16]
 800612a:	615a      	str	r2, [r3, #20]
 800612c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800612e:	463b      	mov	r3, r7
 8006130:	2220      	movs	r2, #32
 8006132:	2100      	movs	r1, #0
 8006134:	4618      	mov	r0, r3
 8006136:	f00f fa15 	bl	8015564 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800613a:	4b42      	ldr	r3, [pc, #264]	; (8006244 <MX_TIM1_Init+0x148>)
 800613c:	4a42      	ldr	r2, [pc, #264]	; (8006248 <MX_TIM1_Init+0x14c>)
 800613e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006140:	4b40      	ldr	r3, [pc, #256]	; (8006244 <MX_TIM1_Init+0x148>)
 8006142:	2200      	movs	r2, #0
 8006144:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006146:	4b3f      	ldr	r3, [pc, #252]	; (8006244 <MX_TIM1_Init+0x148>)
 8006148:	2200      	movs	r2, #0
 800614a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800614c:	4b3d      	ldr	r3, [pc, #244]	; (8006244 <MX_TIM1_Init+0x148>)
 800614e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006152:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006154:	4b3b      	ldr	r3, [pc, #236]	; (8006244 <MX_TIM1_Init+0x148>)
 8006156:	2200      	movs	r2, #0
 8006158:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800615a:	4b3a      	ldr	r3, [pc, #232]	; (8006244 <MX_TIM1_Init+0x148>)
 800615c:	2200      	movs	r2, #0
 800615e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006160:	4b38      	ldr	r3, [pc, #224]	; (8006244 <MX_TIM1_Init+0x148>)
 8006162:	2200      	movs	r2, #0
 8006164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006166:	4837      	ldr	r0, [pc, #220]	; (8006244 <MX_TIM1_Init+0x148>)
 8006168:	f008 fda3 	bl	800ecb2 <HAL_TIM_PWM_Init>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8006172:	f000 fc51 	bl	8006a18 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006176:	2303      	movs	r3, #3
 8006178:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800617a:	2300      	movs	r3, #0
 800617c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800617e:	2301      	movs	r3, #1
 8006180:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006182:	2300      	movs	r3, #0
 8006184:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8006186:	2300      	movs	r3, #0
 8006188:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800618a:	2300      	movs	r3, #0
 800618c:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800618e:	2301      	movs	r3, #1
 8006190:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006192:	2300      	movs	r3, #0
 8006194:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8006196:	2300      	movs	r3, #0
 8006198:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800619a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800619e:	4619      	mov	r1, r3
 80061a0:	4828      	ldr	r0, [pc, #160]	; (8006244 <MX_TIM1_Init+0x148>)
 80061a2:	f008 fdef 	bl	800ed84 <HAL_TIM_Encoder_Init>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d001      	beq.n	80061b0 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80061ac:	f000 fc34 	bl	8006a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80061b0:	2300      	movs	r3, #0
 80061b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061b4:	2300      	movs	r3, #0
 80061b6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80061b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80061bc:	4619      	mov	r1, r3
 80061be:	4821      	ldr	r0, [pc, #132]	; (8006244 <MX_TIM1_Init+0x148>)
 80061c0:	f009 fb16 	bl	800f7f0 <HAL_TIMEx_MasterConfigSynchronization>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80061ca:	f000 fc25 	bl	8006a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80061ce:	2360      	movs	r3, #96	; 0x60
 80061d0:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80061d2:	2300      	movs	r3, #0
 80061d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80061d6:	2300      	movs	r3, #0
 80061d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80061da:	2300      	movs	r3, #0
 80061dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80061de:	2300      	movs	r3, #0
 80061e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80061e2:	2300      	movs	r3, #0
 80061e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80061e6:	2300      	movs	r3, #0
 80061e8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80061ea:	f107 0320 	add.w	r3, r7, #32
 80061ee:	2208      	movs	r2, #8
 80061f0:	4619      	mov	r1, r3
 80061f2:	4814      	ldr	r0, [pc, #80]	; (8006244 <MX_TIM1_Init+0x148>)
 80061f4:	f008 ff98 	bl	800f128 <HAL_TIM_PWM_ConfigChannel>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80061fe:	f000 fc0b 	bl	8006a18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006202:	2300      	movs	r3, #0
 8006204:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006206:	2300      	movs	r3, #0
 8006208:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800620a:	2300      	movs	r3, #0
 800620c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006212:	2300      	movs	r3, #0
 8006214:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006216:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800621a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800621c:	2300      	movs	r3, #0
 800621e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006220:	463b      	mov	r3, r7
 8006222:	4619      	mov	r1, r3
 8006224:	4807      	ldr	r0, [pc, #28]	; (8006244 <MX_TIM1_Init+0x148>)
 8006226:	f009 fb5f 	bl	800f8e8 <HAL_TIMEx_ConfigBreakDeadTime>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8006230:	f000 fbf2 	bl	8006a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006234:	4803      	ldr	r0, [pc, #12]	; (8006244 <MX_TIM1_Init+0x148>)
 8006236:	f000 ffdf 	bl	80071f8 <HAL_TIM_MspPostInit>

}
 800623a:	bf00      	nop
 800623c:	3768      	adds	r7, #104	; 0x68
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	2003fba0 	.word	0x2003fba0
 8006248:	40010000 	.word	0x40010000

0800624c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b08a      	sub	sp, #40	; 0x28
 8006250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006252:	f107 0320 	add.w	r3, r7, #32
 8006256:	2200      	movs	r2, #0
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800625c:	1d3b      	adds	r3, r7, #4
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	605a      	str	r2, [r3, #4]
 8006264:	609a      	str	r2, [r3, #8]
 8006266:	60da      	str	r2, [r3, #12]
 8006268:	611a      	str	r2, [r3, #16]
 800626a:	615a      	str	r2, [r3, #20]
 800626c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800626e:	4b27      	ldr	r3, [pc, #156]	; (800630c <MX_TIM3_Init+0xc0>)
 8006270:	4a27      	ldr	r2, [pc, #156]	; (8006310 <MX_TIM3_Init+0xc4>)
 8006272:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006274:	4b25      	ldr	r3, [pc, #148]	; (800630c <MX_TIM3_Init+0xc0>)
 8006276:	2200      	movs	r2, #0
 8006278:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800627a:	4b24      	ldr	r3, [pc, #144]	; (800630c <MX_TIM3_Init+0xc0>)
 800627c:	2200      	movs	r2, #0
 800627e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006280:	4b22      	ldr	r3, [pc, #136]	; (800630c <MX_TIM3_Init+0xc0>)
 8006282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006286:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006288:	4b20      	ldr	r3, [pc, #128]	; (800630c <MX_TIM3_Init+0xc0>)
 800628a:	2200      	movs	r2, #0
 800628c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800628e:	4b1f      	ldr	r3, [pc, #124]	; (800630c <MX_TIM3_Init+0xc0>)
 8006290:	2200      	movs	r2, #0
 8006292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006294:	481d      	ldr	r0, [pc, #116]	; (800630c <MX_TIM3_Init+0xc0>)
 8006296:	f008 fd0c 	bl	800ecb2 <HAL_TIM_PWM_Init>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80062a0:	f000 fbba 	bl	8006a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062a4:	2300      	movs	r3, #0
 80062a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062a8:	2300      	movs	r3, #0
 80062aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80062ac:	f107 0320 	add.w	r3, r7, #32
 80062b0:	4619      	mov	r1, r3
 80062b2:	4816      	ldr	r0, [pc, #88]	; (800630c <MX_TIM3_Init+0xc0>)
 80062b4:	f009 fa9c 	bl	800f7f0 <HAL_TIMEx_MasterConfigSynchronization>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80062be:	f000 fbab 	bl	8006a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80062c2:	2360      	movs	r3, #96	; 0x60
 80062c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80062c6:	2300      	movs	r3, #0
 80062c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80062ca:	2300      	movs	r3, #0
 80062cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80062ce:	2300      	movs	r3, #0
 80062d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80062d2:	1d3b      	adds	r3, r7, #4
 80062d4:	2200      	movs	r2, #0
 80062d6:	4619      	mov	r1, r3
 80062d8:	480c      	ldr	r0, [pc, #48]	; (800630c <MX_TIM3_Init+0xc0>)
 80062da:	f008 ff25 	bl	800f128 <HAL_TIM_PWM_ConfigChannel>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80062e4:	f000 fb98 	bl	8006a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80062e8:	1d3b      	adds	r3, r7, #4
 80062ea:	2204      	movs	r2, #4
 80062ec:	4619      	mov	r1, r3
 80062ee:	4807      	ldr	r0, [pc, #28]	; (800630c <MX_TIM3_Init+0xc0>)
 80062f0:	f008 ff1a 	bl	800f128 <HAL_TIM_PWM_ConfigChannel>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80062fa:	f000 fb8d 	bl	8006a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80062fe:	4803      	ldr	r0, [pc, #12]	; (800630c <MX_TIM3_Init+0xc0>)
 8006300:	f000 ff7a 	bl	80071f8 <HAL_TIM_MspPostInit>

}
 8006304:	bf00      	nop
 8006306:	3728      	adds	r7, #40	; 0x28
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	2003fa38 	.word	0x2003fa38
 8006310:	40000400 	.word	0x40000400

08006314 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08a      	sub	sp, #40	; 0x28
 8006318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800631a:	f107 0320 	add.w	r3, r7, #32
 800631e:	2200      	movs	r2, #0
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006324:	1d3b      	adds	r3, r7, #4
 8006326:	2200      	movs	r2, #0
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	605a      	str	r2, [r3, #4]
 800632c:	609a      	str	r2, [r3, #8]
 800632e:	60da      	str	r2, [r3, #12]
 8006330:	611a      	str	r2, [r3, #16]
 8006332:	615a      	str	r2, [r3, #20]
 8006334:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006336:	4b27      	ldr	r3, [pc, #156]	; (80063d4 <MX_TIM4_Init+0xc0>)
 8006338:	4a27      	ldr	r2, [pc, #156]	; (80063d8 <MX_TIM4_Init+0xc4>)
 800633a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800633c:	4b25      	ldr	r3, [pc, #148]	; (80063d4 <MX_TIM4_Init+0xc0>)
 800633e:	2200      	movs	r2, #0
 8006340:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006342:	4b24      	ldr	r3, [pc, #144]	; (80063d4 <MX_TIM4_Init+0xc0>)
 8006344:	2200      	movs	r2, #0
 8006346:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8006348:	4b22      	ldr	r3, [pc, #136]	; (80063d4 <MX_TIM4_Init+0xc0>)
 800634a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800634e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006350:	4b20      	ldr	r3, [pc, #128]	; (80063d4 <MX_TIM4_Init+0xc0>)
 8006352:	2200      	movs	r2, #0
 8006354:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006356:	4b1f      	ldr	r3, [pc, #124]	; (80063d4 <MX_TIM4_Init+0xc0>)
 8006358:	2200      	movs	r2, #0
 800635a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800635c:	481d      	ldr	r0, [pc, #116]	; (80063d4 <MX_TIM4_Init+0xc0>)
 800635e:	f008 fca8 	bl	800ecb2 <HAL_TIM_PWM_Init>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8006368:	f000 fb56 	bl	8006a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800636c:	2300      	movs	r3, #0
 800636e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006370:	2300      	movs	r3, #0
 8006372:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006374:	f107 0320 	add.w	r3, r7, #32
 8006378:	4619      	mov	r1, r3
 800637a:	4816      	ldr	r0, [pc, #88]	; (80063d4 <MX_TIM4_Init+0xc0>)
 800637c:	f009 fa38 	bl	800f7f0 <HAL_TIMEx_MasterConfigSynchronization>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8006386:	f000 fb47 	bl	8006a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800638a:	2360      	movs	r3, #96	; 0x60
 800638c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800638e:	2300      	movs	r3, #0
 8006390:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006392:	2300      	movs	r3, #0
 8006394:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006396:	2300      	movs	r3, #0
 8006398:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800639a:	1d3b      	adds	r3, r7, #4
 800639c:	2208      	movs	r2, #8
 800639e:	4619      	mov	r1, r3
 80063a0:	480c      	ldr	r0, [pc, #48]	; (80063d4 <MX_TIM4_Init+0xc0>)
 80063a2:	f008 fec1 	bl	800f128 <HAL_TIM_PWM_ConfigChannel>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80063ac:	f000 fb34 	bl	8006a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80063b0:	1d3b      	adds	r3, r7, #4
 80063b2:	220c      	movs	r2, #12
 80063b4:	4619      	mov	r1, r3
 80063b6:	4807      	ldr	r0, [pc, #28]	; (80063d4 <MX_TIM4_Init+0xc0>)
 80063b8:	f008 feb6 	bl	800f128 <HAL_TIM_PWM_ConfigChannel>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80063c2:	f000 fb29 	bl	8006a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80063c6:	4803      	ldr	r0, [pc, #12]	; (80063d4 <MX_TIM4_Init+0xc0>)
 80063c8:	f000 ff16 	bl	80071f8 <HAL_TIM_MspPostInit>

}
 80063cc:	bf00      	nop
 80063ce:	3728      	adds	r7, #40	; 0x28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	2003f8c4 	.word	0x2003f8c4
 80063d8:	40000800 	.word	0x40000800

080063dc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063e2:	463b      	mov	r3, r7
 80063e4:	2200      	movs	r2, #0
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80063ea:	4b15      	ldr	r3, [pc, #84]	; (8006440 <MX_TIM6_Init+0x64>)
 80063ec:	4a15      	ldr	r2, [pc, #84]	; (8006444 <MX_TIM6_Init+0x68>)
 80063ee:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 80063f0:	4b13      	ldr	r3, [pc, #76]	; (8006440 <MX_TIM6_Init+0x64>)
 80063f2:	2259      	movs	r2, #89	; 0x59
 80063f4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063f6:	4b12      	ldr	r3, [pc, #72]	; (8006440 <MX_TIM6_Init+0x64>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80063fc:	4b10      	ldr	r3, [pc, #64]	; (8006440 <MX_TIM6_Init+0x64>)
 80063fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006402:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006404:	4b0e      	ldr	r3, [pc, #56]	; (8006440 <MX_TIM6_Init+0x64>)
 8006406:	2280      	movs	r2, #128	; 0x80
 8006408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800640a:	480d      	ldr	r0, [pc, #52]	; (8006440 <MX_TIM6_Init+0x64>)
 800640c:	f008 fc02 	bl	800ec14 <HAL_TIM_Base_Init>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006416:	f000 faff 	bl	8006a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800641a:	2300      	movs	r3, #0
 800641c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800641e:	2300      	movs	r3, #0
 8006420:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006422:	463b      	mov	r3, r7
 8006424:	4619      	mov	r1, r3
 8006426:	4806      	ldr	r0, [pc, #24]	; (8006440 <MX_TIM6_Init+0x64>)
 8006428:	f009 f9e2 	bl	800f7f0 <HAL_TIMEx_MasterConfigSynchronization>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006432:	f000 faf1 	bl	8006a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006436:	bf00      	nop
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	2003fb60 	.word	0x2003fb60
 8006444:	40001000 	.word	0x40001000

08006448 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800644e:	463b      	mov	r3, r7
 8006450:	2200      	movs	r2, #0
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006456:	4b14      	ldr	r3, [pc, #80]	; (80064a8 <MX_TIM7_Init+0x60>)
 8006458:	4a14      	ldr	r2, [pc, #80]	; (80064ac <MX_TIM7_Init+0x64>)
 800645a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 800645c:	4b12      	ldr	r3, [pc, #72]	; (80064a8 <MX_TIM7_Init+0x60>)
 800645e:	22b3      	movs	r2, #179	; 0xb3
 8006460:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006462:	4b11      	ldr	r3, [pc, #68]	; (80064a8 <MX_TIM7_Init+0x60>)
 8006464:	2200      	movs	r2, #0
 8006466:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8006468:	4b0f      	ldr	r3, [pc, #60]	; (80064a8 <MX_TIM7_Init+0x60>)
 800646a:	2231      	movs	r2, #49	; 0x31
 800646c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800646e:	4b0e      	ldr	r3, [pc, #56]	; (80064a8 <MX_TIM7_Init+0x60>)
 8006470:	2280      	movs	r2, #128	; 0x80
 8006472:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006474:	480c      	ldr	r0, [pc, #48]	; (80064a8 <MX_TIM7_Init+0x60>)
 8006476:	f008 fbcd 	bl	800ec14 <HAL_TIM_Base_Init>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8006480:	f000 faca 	bl	8006a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006484:	2300      	movs	r3, #0
 8006486:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006488:	2300      	movs	r3, #0
 800648a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800648c:	463b      	mov	r3, r7
 800648e:	4619      	mov	r1, r3
 8006490:	4805      	ldr	r0, [pc, #20]	; (80064a8 <MX_TIM7_Init+0x60>)
 8006492:	f009 f9ad 	bl	800f7f0 <HAL_TIMEx_MasterConfigSynchronization>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 800649c:	f000 fabc 	bl	8006a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80064a0:	bf00      	nop
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	2003fd04 	.word	0x2003fd04
 80064ac:	40001400 	.word	0x40001400

080064b0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08c      	sub	sp, #48	; 0x30
 80064b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80064b6:	f107 030c 	add.w	r3, r7, #12
 80064ba:	2224      	movs	r2, #36	; 0x24
 80064bc:	2100      	movs	r1, #0
 80064be:	4618      	mov	r0, r3
 80064c0:	f00f f850 	bl	8015564 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064c4:	1d3b      	adds	r3, r7, #4
 80064c6:	2200      	movs	r2, #0
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80064cc:	4b22      	ldr	r3, [pc, #136]	; (8006558 <MX_TIM8_Init+0xa8>)
 80064ce:	4a23      	ldr	r2, [pc, #140]	; (800655c <MX_TIM8_Init+0xac>)
 80064d0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80064d2:	4b21      	ldr	r3, [pc, #132]	; (8006558 <MX_TIM8_Init+0xa8>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80064d8:	4b1f      	ldr	r3, [pc, #124]	; (8006558 <MX_TIM8_Init+0xa8>)
 80064da:	2210      	movs	r2, #16
 80064dc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80064de:	4b1e      	ldr	r3, [pc, #120]	; (8006558 <MX_TIM8_Init+0xa8>)
 80064e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064e4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064e6:	4b1c      	ldr	r3, [pc, #112]	; (8006558 <MX_TIM8_Init+0xa8>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80064ec:	4b1a      	ldr	r3, [pc, #104]	; (8006558 <MX_TIM8_Init+0xa8>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064f2:	4b19      	ldr	r3, [pc, #100]	; (8006558 <MX_TIM8_Init+0xa8>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80064f8:	2303      	movs	r3, #3
 80064fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80064fc:	2300      	movs	r3, #0
 80064fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006500:	2301      	movs	r3, #1
 8006502:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006504:	2300      	movs	r3, #0
 8006506:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006508:	2300      	movs	r3, #0
 800650a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800650c:	2300      	movs	r3, #0
 800650e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006510:	2301      	movs	r3, #1
 8006512:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006514:	2300      	movs	r3, #0
 8006516:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006518:	2300      	movs	r3, #0
 800651a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800651c:	f107 030c 	add.w	r3, r7, #12
 8006520:	4619      	mov	r1, r3
 8006522:	480d      	ldr	r0, [pc, #52]	; (8006558 <MX_TIM8_Init+0xa8>)
 8006524:	f008 fc2e 	bl	800ed84 <HAL_TIM_Encoder_Init>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800652e:	f000 fa73 	bl	8006a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006532:	2300      	movs	r3, #0
 8006534:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006536:	2300      	movs	r3, #0
 8006538:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800653a:	1d3b      	adds	r3, r7, #4
 800653c:	4619      	mov	r1, r3
 800653e:	4806      	ldr	r0, [pc, #24]	; (8006558 <MX_TIM8_Init+0xa8>)
 8006540:	f009 f956 	bl	800f7f0 <HAL_TIMEx_MasterConfigSynchronization>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800654a:	f000 fa65 	bl	8006a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800654e:	bf00      	nop
 8006550:	3730      	adds	r7, #48	; 0x30
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	2003f884 	.word	0x2003f884
 800655c:	40010400 	.word	0x40010400

08006560 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006566:	1d3b      	adds	r3, r7, #4
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	605a      	str	r2, [r3, #4]
 800656e:	609a      	str	r2, [r3, #8]
 8006570:	60da      	str	r2, [r3, #12]
 8006572:	611a      	str	r2, [r3, #16]
 8006574:	615a      	str	r2, [r3, #20]
 8006576:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006578:	4b1e      	ldr	r3, [pc, #120]	; (80065f4 <MX_TIM10_Init+0x94>)
 800657a:	4a1f      	ldr	r2, [pc, #124]	; (80065f8 <MX_TIM10_Init+0x98>)
 800657c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800657e:	4b1d      	ldr	r3, [pc, #116]	; (80065f4 <MX_TIM10_Init+0x94>)
 8006580:	2200      	movs	r2, #0
 8006582:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006584:	4b1b      	ldr	r3, [pc, #108]	; (80065f4 <MX_TIM10_Init+0x94>)
 8006586:	2200      	movs	r2, #0
 8006588:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800658a:	4b1a      	ldr	r3, [pc, #104]	; (80065f4 <MX_TIM10_Init+0x94>)
 800658c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006590:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006592:	4b18      	ldr	r3, [pc, #96]	; (80065f4 <MX_TIM10_Init+0x94>)
 8006594:	2200      	movs	r2, #0
 8006596:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006598:	4b16      	ldr	r3, [pc, #88]	; (80065f4 <MX_TIM10_Init+0x94>)
 800659a:	2200      	movs	r2, #0
 800659c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800659e:	4815      	ldr	r0, [pc, #84]	; (80065f4 <MX_TIM10_Init+0x94>)
 80065a0:	f008 fb38 	bl	800ec14 <HAL_TIM_Base_Init>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80065aa:	f000 fa35 	bl	8006a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80065ae:	4811      	ldr	r0, [pc, #68]	; (80065f4 <MX_TIM10_Init+0x94>)
 80065b0:	f008 fb7f 	bl	800ecb2 <HAL_TIM_PWM_Init>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80065ba:	f000 fa2d 	bl	8006a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80065be:	2360      	movs	r3, #96	; 0x60
 80065c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80065ca:	2300      	movs	r3, #0
 80065cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80065ce:	1d3b      	adds	r3, r7, #4
 80065d0:	2200      	movs	r2, #0
 80065d2:	4619      	mov	r1, r3
 80065d4:	4807      	ldr	r0, [pc, #28]	; (80065f4 <MX_TIM10_Init+0x94>)
 80065d6:	f008 fda7 	bl	800f128 <HAL_TIM_PWM_ConfigChannel>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80065e0:	f000 fa1a 	bl	8006a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80065e4:	4803      	ldr	r0, [pc, #12]	; (80065f4 <MX_TIM10_Init+0x94>)
 80065e6:	f000 fe07 	bl	80071f8 <HAL_TIM_MspPostInit>

}
 80065ea:	bf00      	nop
 80065ec:	3720      	adds	r7, #32
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	2003f9a0 	.word	0x2003f9a0
 80065f8:	40014400 	.word	0x40014400

080065fc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006602:	1d3b      	adds	r3, r7, #4
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	605a      	str	r2, [r3, #4]
 800660a:	609a      	str	r2, [r3, #8]
 800660c:	60da      	str	r2, [r3, #12]
 800660e:	611a      	str	r2, [r3, #16]
 8006610:	615a      	str	r2, [r3, #20]
 8006612:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006614:	4b1e      	ldr	r3, [pc, #120]	; (8006690 <MX_TIM11_Init+0x94>)
 8006616:	4a1f      	ldr	r2, [pc, #124]	; (8006694 <MX_TIM11_Init+0x98>)
 8006618:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800661a:	4b1d      	ldr	r3, [pc, #116]	; (8006690 <MX_TIM11_Init+0x94>)
 800661c:	2200      	movs	r2, #0
 800661e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006620:	4b1b      	ldr	r3, [pc, #108]	; (8006690 <MX_TIM11_Init+0x94>)
 8006622:	2200      	movs	r2, #0
 8006624:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8006626:	4b1a      	ldr	r3, [pc, #104]	; (8006690 <MX_TIM11_Init+0x94>)
 8006628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800662c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800662e:	4b18      	ldr	r3, [pc, #96]	; (8006690 <MX_TIM11_Init+0x94>)
 8006630:	2200      	movs	r2, #0
 8006632:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006634:	4b16      	ldr	r3, [pc, #88]	; (8006690 <MX_TIM11_Init+0x94>)
 8006636:	2200      	movs	r2, #0
 8006638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800663a:	4815      	ldr	r0, [pc, #84]	; (8006690 <MX_TIM11_Init+0x94>)
 800663c:	f008 faea 	bl	800ec14 <HAL_TIM_Base_Init>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8006646:	f000 f9e7 	bl	8006a18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800664a:	4811      	ldr	r0, [pc, #68]	; (8006690 <MX_TIM11_Init+0x94>)
 800664c:	f008 fb31 	bl	800ecb2 <HAL_TIM_PWM_Init>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8006656:	f000 f9df 	bl	8006a18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800665a:	2360      	movs	r3, #96	; 0x60
 800665c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800665e:	2300      	movs	r3, #0
 8006660:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006662:	2300      	movs	r3, #0
 8006664:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006666:	2300      	movs	r3, #0
 8006668:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800666a:	1d3b      	adds	r3, r7, #4
 800666c:	2200      	movs	r2, #0
 800666e:	4619      	mov	r1, r3
 8006670:	4807      	ldr	r0, [pc, #28]	; (8006690 <MX_TIM11_Init+0x94>)
 8006672:	f008 fd59 	bl	800f128 <HAL_TIM_PWM_ConfigChannel>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800667c:	f000 f9cc 	bl	8006a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006680:	4803      	ldr	r0, [pc, #12]	; (8006690 <MX_TIM11_Init+0x94>)
 8006682:	f000 fdb9 	bl	80071f8 <HAL_TIM_MspPostInit>

}
 8006686:	bf00      	nop
 8006688:	3720      	adds	r7, #32
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	2003fac0 	.word	0x2003fac0
 8006694:	40014800 	.word	0x40014800

08006698 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800669c:	4b0e      	ldr	r3, [pc, #56]	; (80066d8 <MX_TIM13_Init+0x40>)
 800669e:	4a0f      	ldr	r2, [pc, #60]	; (80066dc <MX_TIM13_Init+0x44>)
 80066a0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80066a2:	4b0d      	ldr	r3, [pc, #52]	; (80066d8 <MX_TIM13_Init+0x40>)
 80066a4:	2259      	movs	r2, #89	; 0x59
 80066a6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066a8:	4b0b      	ldr	r3, [pc, #44]	; (80066d8 <MX_TIM13_Init+0x40>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80066ae:	4b0a      	ldr	r3, [pc, #40]	; (80066d8 <MX_TIM13_Init+0x40>)
 80066b0:	f242 720f 	movw	r2, #9999	; 0x270f
 80066b4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066b6:	4b08      	ldr	r3, [pc, #32]	; (80066d8 <MX_TIM13_Init+0x40>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80066bc:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <MX_TIM13_Init+0x40>)
 80066be:	2280      	movs	r2, #128	; 0x80
 80066c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80066c2:	4805      	ldr	r0, [pc, #20]	; (80066d8 <MX_TIM13_Init+0x40>)
 80066c4:	f008 faa6 	bl	800ec14 <HAL_TIM_Base_Init>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80066ce:	f000 f9a3 	bl	8006a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80066d2:	bf00      	nop
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	2003fa80 	.word	0x2003fa80
 80066dc:	40001c00 	.word	0x40001c00

080066e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80066e4:	4b11      	ldr	r3, [pc, #68]	; (800672c <MX_USART2_UART_Init+0x4c>)
 80066e6:	4a12      	ldr	r2, [pc, #72]	; (8006730 <MX_USART2_UART_Init+0x50>)
 80066e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80066ea:	4b10      	ldr	r3, [pc, #64]	; (800672c <MX_USART2_UART_Init+0x4c>)
 80066ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80066f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80066f2:	4b0e      	ldr	r3, [pc, #56]	; (800672c <MX_USART2_UART_Init+0x4c>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80066f8:	4b0c      	ldr	r3, [pc, #48]	; (800672c <MX_USART2_UART_Init+0x4c>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80066fe:	4b0b      	ldr	r3, [pc, #44]	; (800672c <MX_USART2_UART_Init+0x4c>)
 8006700:	2200      	movs	r2, #0
 8006702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006704:	4b09      	ldr	r3, [pc, #36]	; (800672c <MX_USART2_UART_Init+0x4c>)
 8006706:	220c      	movs	r2, #12
 8006708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800670a:	4b08      	ldr	r3, [pc, #32]	; (800672c <MX_USART2_UART_Init+0x4c>)
 800670c:	2200      	movs	r2, #0
 800670e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006710:	4b06      	ldr	r3, [pc, #24]	; (800672c <MX_USART2_UART_Init+0x4c>)
 8006712:	2200      	movs	r2, #0
 8006714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006716:	4805      	ldr	r0, [pc, #20]	; (800672c <MX_USART2_UART_Init+0x4c>)
 8006718:	f009 f94c 	bl	800f9b4 <HAL_UART_Init>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006722:	f000 f979 	bl	8006a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006726:	bf00      	nop
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	2003fc64 	.word	0x2003fc64
 8006730:	40004400 	.word	0x40004400

08006734 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800673a:	2300      	movs	r3, #0
 800673c:	607b      	str	r3, [r7, #4]
 800673e:	4b14      	ldr	r3, [pc, #80]	; (8006790 <MX_DMA_Init+0x5c>)
 8006740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006742:	4a13      	ldr	r2, [pc, #76]	; (8006790 <MX_DMA_Init+0x5c>)
 8006744:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006748:	6313      	str	r3, [r2, #48]	; 0x30
 800674a:	4b11      	ldr	r3, [pc, #68]	; (8006790 <MX_DMA_Init+0x5c>)
 800674c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006752:	607b      	str	r3, [r7, #4]
 8006754:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006756:	2200      	movs	r2, #0
 8006758:	2100      	movs	r1, #0
 800675a:	203a      	movs	r0, #58	; 0x3a
 800675c:	f003 fe0d 	bl	800a37a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006760:	203a      	movs	r0, #58	; 0x3a
 8006762:	f003 fe26 	bl	800a3b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006766:	2200      	movs	r2, #0
 8006768:	2100      	movs	r1, #0
 800676a:	203b      	movs	r0, #59	; 0x3b
 800676c:	f003 fe05 	bl	800a37a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006770:	203b      	movs	r0, #59	; 0x3b
 8006772:	f003 fe1e 	bl	800a3b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006776:	2200      	movs	r2, #0
 8006778:	2100      	movs	r1, #0
 800677a:	2045      	movs	r0, #69	; 0x45
 800677c:	f003 fdfd 	bl	800a37a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006780:	2045      	movs	r0, #69	; 0x45
 8006782:	f003 fe16 	bl	800a3b2 <HAL_NVIC_EnableIRQ>

}
 8006786:	bf00      	nop
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	40023800 	.word	0x40023800

08006794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b08c      	sub	sp, #48	; 0x30
 8006798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800679a:	f107 031c 	add.w	r3, r7, #28
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	605a      	str	r2, [r3, #4]
 80067a4:	609a      	str	r2, [r3, #8]
 80067a6:	60da      	str	r2, [r3, #12]
 80067a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80067aa:	2300      	movs	r3, #0
 80067ac:	61bb      	str	r3, [r7, #24]
 80067ae:	4b94      	ldr	r3, [pc, #592]	; (8006a00 <MX_GPIO_Init+0x26c>)
 80067b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b2:	4a93      	ldr	r2, [pc, #588]	; (8006a00 <MX_GPIO_Init+0x26c>)
 80067b4:	f043 0310 	orr.w	r3, r3, #16
 80067b8:	6313      	str	r3, [r2, #48]	; 0x30
 80067ba:	4b91      	ldr	r3, [pc, #580]	; (8006a00 <MX_GPIO_Init+0x26c>)
 80067bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067be:	f003 0310 	and.w	r3, r3, #16
 80067c2:	61bb      	str	r3, [r7, #24]
 80067c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80067c6:	2300      	movs	r3, #0
 80067c8:	617b      	str	r3, [r7, #20]
 80067ca:	4b8d      	ldr	r3, [pc, #564]	; (8006a00 <MX_GPIO_Init+0x26c>)
 80067cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ce:	4a8c      	ldr	r2, [pc, #560]	; (8006a00 <MX_GPIO_Init+0x26c>)
 80067d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d4:	6313      	str	r3, [r2, #48]	; 0x30
 80067d6:	4b8a      	ldr	r3, [pc, #552]	; (8006a00 <MX_GPIO_Init+0x26c>)
 80067d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067de:	617b      	str	r3, [r7, #20]
 80067e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80067e2:	2300      	movs	r3, #0
 80067e4:	613b      	str	r3, [r7, #16]
 80067e6:	4b86      	ldr	r3, [pc, #536]	; (8006a00 <MX_GPIO_Init+0x26c>)
 80067e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ea:	4a85      	ldr	r2, [pc, #532]	; (8006a00 <MX_GPIO_Init+0x26c>)
 80067ec:	f043 0304 	orr.w	r3, r3, #4
 80067f0:	6313      	str	r3, [r2, #48]	; 0x30
 80067f2:	4b83      	ldr	r3, [pc, #524]	; (8006a00 <MX_GPIO_Init+0x26c>)
 80067f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f6:	f003 0304 	and.w	r3, r3, #4
 80067fa:	613b      	str	r3, [r7, #16]
 80067fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80067fe:	2300      	movs	r3, #0
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	4b7f      	ldr	r3, [pc, #508]	; (8006a00 <MX_GPIO_Init+0x26c>)
 8006804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006806:	4a7e      	ldr	r2, [pc, #504]	; (8006a00 <MX_GPIO_Init+0x26c>)
 8006808:	f043 0301 	orr.w	r3, r3, #1
 800680c:	6313      	str	r3, [r2, #48]	; 0x30
 800680e:	4b7c      	ldr	r3, [pc, #496]	; (8006a00 <MX_GPIO_Init+0x26c>)
 8006810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	60fb      	str	r3, [r7, #12]
 8006818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800681a:	2300      	movs	r3, #0
 800681c:	60bb      	str	r3, [r7, #8]
 800681e:	4b78      	ldr	r3, [pc, #480]	; (8006a00 <MX_GPIO_Init+0x26c>)
 8006820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006822:	4a77      	ldr	r2, [pc, #476]	; (8006a00 <MX_GPIO_Init+0x26c>)
 8006824:	f043 0302 	orr.w	r3, r3, #2
 8006828:	6313      	str	r3, [r2, #48]	; 0x30
 800682a:	4b75      	ldr	r3, [pc, #468]	; (8006a00 <MX_GPIO_Init+0x26c>)
 800682c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	60bb      	str	r3, [r7, #8]
 8006834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006836:	2300      	movs	r3, #0
 8006838:	607b      	str	r3, [r7, #4]
 800683a:	4b71      	ldr	r3, [pc, #452]	; (8006a00 <MX_GPIO_Init+0x26c>)
 800683c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683e:	4a70      	ldr	r2, [pc, #448]	; (8006a00 <MX_GPIO_Init+0x26c>)
 8006840:	f043 0308 	orr.w	r3, r3, #8
 8006844:	6313      	str	r3, [r2, #48]	; 0x30
 8006846:	4b6e      	ldr	r3, [pc, #440]	; (8006a00 <MX_GPIO_Init+0x26c>)
 8006848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	607b      	str	r3, [r7, #4]
 8006850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006852:	2200      	movs	r2, #0
 8006854:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006858:	486a      	ldr	r0, [pc, #424]	; (8006a04 <MX_GPIO_Init+0x270>)
 800685a:	f004 fb27 	bl	800aeac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800685e:	2200      	movs	r2, #0
 8006860:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006864:	4868      	ldr	r0, [pc, #416]	; (8006a08 <MX_GPIO_Init+0x274>)
 8006866:	f004 fb21 	bl	800aeac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800686a:	2200      	movs	r2, #0
 800686c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006870:	4866      	ldr	r0, [pc, #408]	; (8006a0c <MX_GPIO_Init+0x278>)
 8006872:	f004 fb1b 	bl	800aeac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006876:	2200      	movs	r2, #0
 8006878:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 800687c:	4864      	ldr	r0, [pc, #400]	; (8006a10 <MX_GPIO_Init+0x27c>)
 800687e:	f004 fb15 	bl	800aeac <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006882:	2304      	movs	r3, #4
 8006884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006886:	2300      	movs	r3, #0
 8006888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800688a:	2300      	movs	r3, #0
 800688c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800688e:	f107 031c 	add.w	r3, r7, #28
 8006892:	4619      	mov	r1, r3
 8006894:	485b      	ldr	r0, [pc, #364]	; (8006a04 <MX_GPIO_Init+0x270>)
 8006896:	f004 f945 	bl	800ab24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800689a:	230f      	movs	r3, #15
 800689c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800689e:	2303      	movs	r3, #3
 80068a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068a6:	f107 031c 	add.w	r3, r7, #28
 80068aa:	4619      	mov	r1, r3
 80068ac:	4859      	ldr	r0, [pc, #356]	; (8006a14 <MX_GPIO_Init+0x280>)
 80068ae:	f004 f939 	bl	800ab24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80068b2:	23e1      	movs	r3, #225	; 0xe1
 80068b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068b6:	2303      	movs	r3, #3
 80068b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068ba:	2300      	movs	r3, #0
 80068bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068be:	f107 031c 	add.w	r3, r7, #28
 80068c2:	4619      	mov	r1, r3
 80068c4:	4852      	ldr	r0, [pc, #328]	; (8006a10 <MX_GPIO_Init+0x27c>)
 80068c6:	f004 f92d 	bl	800ab24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80068ca:	2303      	movs	r3, #3
 80068cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068ce:	2303      	movs	r3, #3
 80068d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068d2:	2300      	movs	r3, #0
 80068d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068d6:	f107 031c 	add.w	r3, r7, #28
 80068da:	4619      	mov	r1, r3
 80068dc:	484a      	ldr	r0, [pc, #296]	; (8006a08 <MX_GPIO_Init+0x274>)
 80068de:	f004 f921 	bl	800ab24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80068e2:	2304      	movs	r3, #4
 80068e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068e6:	2300      	movs	r3, #0
 80068e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80068ea:	2301      	movs	r3, #1
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068ee:	f107 031c 	add.w	r3, r7, #28
 80068f2:	4619      	mov	r1, r3
 80068f4:	4844      	ldr	r0, [pc, #272]	; (8006a08 <MX_GPIO_Init+0x274>)
 80068f6:	f004 f915 	bl	800ab24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80068fa:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80068fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006900:	2300      	movs	r3, #0
 8006902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006904:	2301      	movs	r3, #1
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006908:	f107 031c 	add.w	r3, r7, #28
 800690c:	4619      	mov	r1, r3
 800690e:	483d      	ldr	r0, [pc, #244]	; (8006a04 <MX_GPIO_Init+0x270>)
 8006910:	f004 f908 	bl	800ab24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006914:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800691a:	2301      	movs	r3, #1
 800691c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800691e:	2300      	movs	r3, #0
 8006920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006922:	2300      	movs	r3, #0
 8006924:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006926:	f107 031c 	add.w	r3, r7, #28
 800692a:	4619      	mov	r1, r3
 800692c:	4835      	ldr	r0, [pc, #212]	; (8006a04 <MX_GPIO_Init+0x270>)
 800692e:	f004 f8f9 	bl	800ab24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006938:	2301      	movs	r3, #1
 800693a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800693c:	2300      	movs	r3, #0
 800693e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006940:	2300      	movs	r3, #0
 8006942:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006944:	f107 031c 	add.w	r3, r7, #28
 8006948:	4619      	mov	r1, r3
 800694a:	482f      	ldr	r0, [pc, #188]	; (8006a08 <MX_GPIO_Init+0x274>)
 800694c:	f004 f8ea 	bl	800ab24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006956:	2300      	movs	r3, #0
 8006958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800695a:	2300      	movs	r3, #0
 800695c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800695e:	f107 031c 	add.w	r3, r7, #28
 8006962:	4619      	mov	r1, r3
 8006964:	4829      	ldr	r0, [pc, #164]	; (8006a0c <MX_GPIO_Init+0x278>)
 8006966:	f004 f8dd 	bl	800ab24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800696a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800696e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006970:	2301      	movs	r3, #1
 8006972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006974:	2300      	movs	r3, #0
 8006976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006978:	2300      	movs	r3, #0
 800697a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800697c:	f107 031c 	add.w	r3, r7, #28
 8006980:	4619      	mov	r1, r3
 8006982:	4822      	ldr	r0, [pc, #136]	; (8006a0c <MX_GPIO_Init+0x278>)
 8006984:	f004 f8ce 	bl	800ab24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800698c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800698e:	2301      	movs	r3, #1
 8006990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006992:	2301      	movs	r3, #1
 8006994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006996:	2300      	movs	r3, #0
 8006998:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800699a:	f107 031c 	add.w	r3, r7, #28
 800699e:	4619      	mov	r1, r3
 80069a0:	481a      	ldr	r0, [pc, #104]	; (8006a0c <MX_GPIO_Init+0x278>)
 80069a2:	f004 f8bf 	bl	800ab24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80069a6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80069aa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069ac:	2301      	movs	r3, #1
 80069ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069b0:	2300      	movs	r3, #0
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069b4:	2300      	movs	r3, #0
 80069b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069b8:	f107 031c 	add.w	r3, r7, #28
 80069bc:	4619      	mov	r1, r3
 80069be:	4814      	ldr	r0, [pc, #80]	; (8006a10 <MX_GPIO_Init+0x27c>)
 80069c0:	f004 f8b0 	bl	800ab24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80069c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069ca:	2300      	movs	r3, #0
 80069cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069d2:	f107 031c 	add.w	r3, r7, #28
 80069d6:	4619      	mov	r1, r3
 80069d8:	480d      	ldr	r0, [pc, #52]	; (8006a10 <MX_GPIO_Init+0x27c>)
 80069da:	f004 f8a3 	bl	800ab24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80069de:	239b      	movs	r3, #155	; 0x9b
 80069e0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069e2:	2300      	movs	r3, #0
 80069e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069e6:	2301      	movs	r3, #1
 80069e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069ea:	f107 031c 	add.w	r3, r7, #28
 80069ee:	4619      	mov	r1, r3
 80069f0:	4806      	ldr	r0, [pc, #24]	; (8006a0c <MX_GPIO_Init+0x278>)
 80069f2:	f004 f897 	bl	800ab24 <HAL_GPIO_Init>

}
 80069f6:	bf00      	nop
 80069f8:	3730      	adds	r7, #48	; 0x30
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	40023800 	.word	0x40023800
 8006a04:	40021000 	.word	0x40021000
 8006a08:	40020400 	.word	0x40020400
 8006a0c:	40020c00 	.word	0x40020c00
 8006a10:	40020000 	.word	0x40020000
 8006a14:	40020800 	.word	0x40020800

08006a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006a1c:	b672      	cpsid	i
}
 8006a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006a20:	e7fe      	b.n	8006a20 <Error_Handler+0x8>

08006a22 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006a22:	b480      	push	{r7}
 8006a24:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006a26:	bf00      	nop
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a36:	2300      	movs	r3, #0
 8006a38:	607b      	str	r3, [r7, #4]
 8006a3a:	4b10      	ldr	r3, [pc, #64]	; (8006a7c <HAL_MspInit+0x4c>)
 8006a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a3e:	4a0f      	ldr	r2, [pc, #60]	; (8006a7c <HAL_MspInit+0x4c>)
 8006a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a44:	6453      	str	r3, [r2, #68]	; 0x44
 8006a46:	4b0d      	ldr	r3, [pc, #52]	; (8006a7c <HAL_MspInit+0x4c>)
 8006a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a4e:	607b      	str	r3, [r7, #4]
 8006a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a52:	2300      	movs	r3, #0
 8006a54:	603b      	str	r3, [r7, #0]
 8006a56:	4b09      	ldr	r3, [pc, #36]	; (8006a7c <HAL_MspInit+0x4c>)
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	4a08      	ldr	r2, [pc, #32]	; (8006a7c <HAL_MspInit+0x4c>)
 8006a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a60:	6413      	str	r3, [r2, #64]	; 0x40
 8006a62:	4b06      	ldr	r3, [pc, #24]	; (8006a7c <HAL_MspInit+0x4c>)
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006a6e:	bf00      	nop
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	40023800 	.word	0x40023800

08006a80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b08c      	sub	sp, #48	; 0x30
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a88:	f107 031c 	add.w	r3, r7, #28
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	605a      	str	r2, [r3, #4]
 8006a92:	609a      	str	r2, [r3, #8]
 8006a94:	60da      	str	r2, [r3, #12]
 8006a96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a4a      	ldr	r2, [pc, #296]	; (8006bc8 <HAL_ADC_MspInit+0x148>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	f040 808e 	bne.w	8006bc0 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	61bb      	str	r3, [r7, #24]
 8006aa8:	4b48      	ldr	r3, [pc, #288]	; (8006bcc <HAL_ADC_MspInit+0x14c>)
 8006aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aac:	4a47      	ldr	r2, [pc, #284]	; (8006bcc <HAL_ADC_MspInit+0x14c>)
 8006aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ab2:	6453      	str	r3, [r2, #68]	; 0x44
 8006ab4:	4b45      	ldr	r3, [pc, #276]	; (8006bcc <HAL_ADC_MspInit+0x14c>)
 8006ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006abc:	61bb      	str	r3, [r7, #24]
 8006abe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	617b      	str	r3, [r7, #20]
 8006ac4:	4b41      	ldr	r3, [pc, #260]	; (8006bcc <HAL_ADC_MspInit+0x14c>)
 8006ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac8:	4a40      	ldr	r2, [pc, #256]	; (8006bcc <HAL_ADC_MspInit+0x14c>)
 8006aca:	f043 0304 	orr.w	r3, r3, #4
 8006ace:	6313      	str	r3, [r2, #48]	; 0x30
 8006ad0:	4b3e      	ldr	r3, [pc, #248]	; (8006bcc <HAL_ADC_MspInit+0x14c>)
 8006ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad4:	f003 0304 	and.w	r3, r3, #4
 8006ad8:	617b      	str	r3, [r7, #20]
 8006ada:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006adc:	2300      	movs	r3, #0
 8006ade:	613b      	str	r3, [r7, #16]
 8006ae0:	4b3a      	ldr	r3, [pc, #232]	; (8006bcc <HAL_ADC_MspInit+0x14c>)
 8006ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae4:	4a39      	ldr	r2, [pc, #228]	; (8006bcc <HAL_ADC_MspInit+0x14c>)
 8006ae6:	f043 0301 	orr.w	r3, r3, #1
 8006aea:	6313      	str	r3, [r2, #48]	; 0x30
 8006aec:	4b37      	ldr	r3, [pc, #220]	; (8006bcc <HAL_ADC_MspInit+0x14c>)
 8006aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	613b      	str	r3, [r7, #16]
 8006af6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006af8:	2300      	movs	r3, #0
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	4b33      	ldr	r3, [pc, #204]	; (8006bcc <HAL_ADC_MspInit+0x14c>)
 8006afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b00:	4a32      	ldr	r2, [pc, #200]	; (8006bcc <HAL_ADC_MspInit+0x14c>)
 8006b02:	f043 0302 	orr.w	r3, r3, #2
 8006b06:	6313      	str	r3, [r2, #48]	; 0x30
 8006b08:	4b30      	ldr	r3, [pc, #192]	; (8006bcc <HAL_ADC_MspInit+0x14c>)
 8006b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	60fb      	str	r3, [r7, #12]
 8006b12:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006b14:	230f      	movs	r3, #15
 8006b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b20:	f107 031c 	add.w	r3, r7, #28
 8006b24:	4619      	mov	r1, r3
 8006b26:	482a      	ldr	r0, [pc, #168]	; (8006bd0 <HAL_ADC_MspInit+0x150>)
 8006b28:	f003 fffc 	bl	800ab24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006b2c:	23ff      	movs	r3, #255	; 0xff
 8006b2e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b30:	2303      	movs	r3, #3
 8006b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b34:	2300      	movs	r3, #0
 8006b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b38:	f107 031c 	add.w	r3, r7, #28
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	4825      	ldr	r0, [pc, #148]	; (8006bd4 <HAL_ADC_MspInit+0x154>)
 8006b40:	f003 fff0 	bl	800ab24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006b44:	2303      	movs	r3, #3
 8006b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b50:	f107 031c 	add.w	r3, r7, #28
 8006b54:	4619      	mov	r1, r3
 8006b56:	4820      	ldr	r0, [pc, #128]	; (8006bd8 <HAL_ADC_MspInit+0x158>)
 8006b58:	f003 ffe4 	bl	800ab24 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006b5c:	4b1f      	ldr	r3, [pc, #124]	; (8006bdc <HAL_ADC_MspInit+0x15c>)
 8006b5e:	4a20      	ldr	r2, [pc, #128]	; (8006be0 <HAL_ADC_MspInit+0x160>)
 8006b60:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006b62:	4b1e      	ldr	r3, [pc, #120]	; (8006bdc <HAL_ADC_MspInit+0x15c>)
 8006b64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b68:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b6a:	4b1c      	ldr	r3, [pc, #112]	; (8006bdc <HAL_ADC_MspInit+0x15c>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b70:	4b1a      	ldr	r3, [pc, #104]	; (8006bdc <HAL_ADC_MspInit+0x15c>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006b76:	4b19      	ldr	r3, [pc, #100]	; (8006bdc <HAL_ADC_MspInit+0x15c>)
 8006b78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b7c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006b7e:	4b17      	ldr	r3, [pc, #92]	; (8006bdc <HAL_ADC_MspInit+0x15c>)
 8006b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b84:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006b86:	4b15      	ldr	r3, [pc, #84]	; (8006bdc <HAL_ADC_MspInit+0x15c>)
 8006b88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006b8c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006b8e:	4b13      	ldr	r3, [pc, #76]	; (8006bdc <HAL_ADC_MspInit+0x15c>)
 8006b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b94:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006b96:	4b11      	ldr	r3, [pc, #68]	; (8006bdc <HAL_ADC_MspInit+0x15c>)
 8006b98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006b9c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006b9e:	4b0f      	ldr	r3, [pc, #60]	; (8006bdc <HAL_ADC_MspInit+0x15c>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006ba4:	480d      	ldr	r0, [pc, #52]	; (8006bdc <HAL_ADC_MspInit+0x15c>)
 8006ba6:	f003 fc1f 	bl	800a3e8 <HAL_DMA_Init>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d001      	beq.n	8006bb4 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006bb0:	f7ff ff32 	bl	8006a18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a09      	ldr	r2, [pc, #36]	; (8006bdc <HAL_ADC_MspInit+0x15c>)
 8006bb8:	639a      	str	r2, [r3, #56]	; 0x38
 8006bba:	4a08      	ldr	r2, [pc, #32]	; (8006bdc <HAL_ADC_MspInit+0x15c>)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006bc0:	bf00      	nop
 8006bc2:	3730      	adds	r7, #48	; 0x30
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	40012100 	.word	0x40012100
 8006bcc:	40023800 	.word	0x40023800
 8006bd0:	40020800 	.word	0x40020800
 8006bd4:	40020000 	.word	0x40020000
 8006bd8:	40020400 	.word	0x40020400
 8006bdc:	2003fca4 	.word	0x2003fca4
 8006be0:	40026440 	.word	0x40026440

08006be4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b08c      	sub	sp, #48	; 0x30
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bec:	f107 031c 	add.w	r3, r7, #28
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	605a      	str	r2, [r3, #4]
 8006bf6:	609a      	str	r2, [r3, #8]
 8006bf8:	60da      	str	r2, [r3, #12]
 8006bfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a32      	ldr	r2, [pc, #200]	; (8006ccc <HAL_I2C_MspInit+0xe8>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d12c      	bne.n	8006c60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c06:	2300      	movs	r3, #0
 8006c08:	61bb      	str	r3, [r7, #24]
 8006c0a:	4b31      	ldr	r3, [pc, #196]	; (8006cd0 <HAL_I2C_MspInit+0xec>)
 8006c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0e:	4a30      	ldr	r2, [pc, #192]	; (8006cd0 <HAL_I2C_MspInit+0xec>)
 8006c10:	f043 0302 	orr.w	r3, r3, #2
 8006c14:	6313      	str	r3, [r2, #48]	; 0x30
 8006c16:	4b2e      	ldr	r3, [pc, #184]	; (8006cd0 <HAL_I2C_MspInit+0xec>)
 8006c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	61bb      	str	r3, [r7, #24]
 8006c20:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006c22:	23c0      	movs	r3, #192	; 0xc0
 8006c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c26:	2312      	movs	r3, #18
 8006c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006c32:	2304      	movs	r3, #4
 8006c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c36:	f107 031c 	add.w	r3, r7, #28
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	4825      	ldr	r0, [pc, #148]	; (8006cd4 <HAL_I2C_MspInit+0xf0>)
 8006c3e:	f003 ff71 	bl	800ab24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006c42:	2300      	movs	r3, #0
 8006c44:	617b      	str	r3, [r7, #20]
 8006c46:	4b22      	ldr	r3, [pc, #136]	; (8006cd0 <HAL_I2C_MspInit+0xec>)
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	4a21      	ldr	r2, [pc, #132]	; (8006cd0 <HAL_I2C_MspInit+0xec>)
 8006c4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c50:	6413      	str	r3, [r2, #64]	; 0x40
 8006c52:	4b1f      	ldr	r3, [pc, #124]	; (8006cd0 <HAL_I2C_MspInit+0xec>)
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c5a:	617b      	str	r3, [r7, #20]
 8006c5c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006c5e:	e031      	b.n	8006cc4 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a1c      	ldr	r2, [pc, #112]	; (8006cd8 <HAL_I2C_MspInit+0xf4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d12c      	bne.n	8006cc4 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	613b      	str	r3, [r7, #16]
 8006c6e:	4b18      	ldr	r3, [pc, #96]	; (8006cd0 <HAL_I2C_MspInit+0xec>)
 8006c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c72:	4a17      	ldr	r2, [pc, #92]	; (8006cd0 <HAL_I2C_MspInit+0xec>)
 8006c74:	f043 0302 	orr.w	r3, r3, #2
 8006c78:	6313      	str	r3, [r2, #48]	; 0x30
 8006c7a:	4b15      	ldr	r3, [pc, #84]	; (8006cd0 <HAL_I2C_MspInit+0xec>)
 8006c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	613b      	str	r3, [r7, #16]
 8006c84:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006c86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c8c:	2312      	movs	r3, #18
 8006c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c90:	2301      	movs	r3, #1
 8006c92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c94:	2303      	movs	r3, #3
 8006c96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006c98:	2304      	movs	r3, #4
 8006c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c9c:	f107 031c 	add.w	r3, r7, #28
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	480c      	ldr	r0, [pc, #48]	; (8006cd4 <HAL_I2C_MspInit+0xf0>)
 8006ca4:	f003 ff3e 	bl	800ab24 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	4b08      	ldr	r3, [pc, #32]	; (8006cd0 <HAL_I2C_MspInit+0xec>)
 8006cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb0:	4a07      	ldr	r2, [pc, #28]	; (8006cd0 <HAL_I2C_MspInit+0xec>)
 8006cb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8006cb8:	4b05      	ldr	r3, [pc, #20]	; (8006cd0 <HAL_I2C_MspInit+0xec>)
 8006cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cc0:	60fb      	str	r3, [r7, #12]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
}
 8006cc4:	bf00      	nop
 8006cc6:	3730      	adds	r7, #48	; 0x30
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	40005400 	.word	0x40005400
 8006cd0:	40023800 	.word	0x40023800
 8006cd4:	40020400 	.word	0x40020400
 8006cd8:	40005800 	.word	0x40005800

08006cdc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08a      	sub	sp, #40	; 0x28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ce4:	f107 0314 	add.w	r3, r7, #20
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	605a      	str	r2, [r3, #4]
 8006cee:	609a      	str	r2, [r3, #8]
 8006cf0:	60da      	str	r2, [r3, #12]
 8006cf2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a69      	ldr	r2, [pc, #420]	; (8006ea0 <HAL_SD_MspInit+0x1c4>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	f040 80cb 	bne.w	8006e96 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006d00:	2300      	movs	r3, #0
 8006d02:	613b      	str	r3, [r7, #16]
 8006d04:	4b67      	ldr	r3, [pc, #412]	; (8006ea4 <HAL_SD_MspInit+0x1c8>)
 8006d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d08:	4a66      	ldr	r2, [pc, #408]	; (8006ea4 <HAL_SD_MspInit+0x1c8>)
 8006d0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d0e:	6453      	str	r3, [r2, #68]	; 0x44
 8006d10:	4b64      	ldr	r3, [pc, #400]	; (8006ea4 <HAL_SD_MspInit+0x1c8>)
 8006d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d18:	613b      	str	r3, [r7, #16]
 8006d1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	4b60      	ldr	r3, [pc, #384]	; (8006ea4 <HAL_SD_MspInit+0x1c8>)
 8006d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d24:	4a5f      	ldr	r2, [pc, #380]	; (8006ea4 <HAL_SD_MspInit+0x1c8>)
 8006d26:	f043 0304 	orr.w	r3, r3, #4
 8006d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8006d2c:	4b5d      	ldr	r3, [pc, #372]	; (8006ea4 <HAL_SD_MspInit+0x1c8>)
 8006d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d30:	f003 0304 	and.w	r3, r3, #4
 8006d34:	60fb      	str	r3, [r7, #12]
 8006d36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d38:	2300      	movs	r3, #0
 8006d3a:	60bb      	str	r3, [r7, #8]
 8006d3c:	4b59      	ldr	r3, [pc, #356]	; (8006ea4 <HAL_SD_MspInit+0x1c8>)
 8006d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d40:	4a58      	ldr	r2, [pc, #352]	; (8006ea4 <HAL_SD_MspInit+0x1c8>)
 8006d42:	f043 0308 	orr.w	r3, r3, #8
 8006d46:	6313      	str	r3, [r2, #48]	; 0x30
 8006d48:	4b56      	ldr	r3, [pc, #344]	; (8006ea4 <HAL_SD_MspInit+0x1c8>)
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4c:	f003 0308 	and.w	r3, r3, #8
 8006d50:	60bb      	str	r3, [r7, #8]
 8006d52:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006d54:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006d58:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d62:	2303      	movs	r3, #3
 8006d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006d66:	230c      	movs	r3, #12
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d6a:	f107 0314 	add.w	r3, r7, #20
 8006d6e:	4619      	mov	r1, r3
 8006d70:	484d      	ldr	r0, [pc, #308]	; (8006ea8 <HAL_SD_MspInit+0x1cc>)
 8006d72:	f003 fed7 	bl	800ab24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006d76:	2304      	movs	r3, #4
 8006d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d82:	2303      	movs	r3, #3
 8006d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006d86:	230c      	movs	r3, #12
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d8a:	f107 0314 	add.w	r3, r7, #20
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4846      	ldr	r0, [pc, #280]	; (8006eac <HAL_SD_MspInit+0x1d0>)
 8006d92:	f003 fec7 	bl	800ab24 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006d96:	4b46      	ldr	r3, [pc, #280]	; (8006eb0 <HAL_SD_MspInit+0x1d4>)
 8006d98:	4a46      	ldr	r2, [pc, #280]	; (8006eb4 <HAL_SD_MspInit+0x1d8>)
 8006d9a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006d9c:	4b44      	ldr	r3, [pc, #272]	; (8006eb0 <HAL_SD_MspInit+0x1d4>)
 8006d9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006da2:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006da4:	4b42      	ldr	r3, [pc, #264]	; (8006eb0 <HAL_SD_MspInit+0x1d4>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006daa:	4b41      	ldr	r3, [pc, #260]	; (8006eb0 <HAL_SD_MspInit+0x1d4>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006db0:	4b3f      	ldr	r3, [pc, #252]	; (8006eb0 <HAL_SD_MspInit+0x1d4>)
 8006db2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006db6:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006db8:	4b3d      	ldr	r3, [pc, #244]	; (8006eb0 <HAL_SD_MspInit+0x1d4>)
 8006dba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006dbe:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006dc0:	4b3b      	ldr	r3, [pc, #236]	; (8006eb0 <HAL_SD_MspInit+0x1d4>)
 8006dc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006dc6:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006dc8:	4b39      	ldr	r3, [pc, #228]	; (8006eb0 <HAL_SD_MspInit+0x1d4>)
 8006dca:	2220      	movs	r2, #32
 8006dcc:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006dce:	4b38      	ldr	r3, [pc, #224]	; (8006eb0 <HAL_SD_MspInit+0x1d4>)
 8006dd0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006dd4:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006dd6:	4b36      	ldr	r3, [pc, #216]	; (8006eb0 <HAL_SD_MspInit+0x1d4>)
 8006dd8:	2204      	movs	r2, #4
 8006dda:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006ddc:	4b34      	ldr	r3, [pc, #208]	; (8006eb0 <HAL_SD_MspInit+0x1d4>)
 8006dde:	2203      	movs	r2, #3
 8006de0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006de2:	4b33      	ldr	r3, [pc, #204]	; (8006eb0 <HAL_SD_MspInit+0x1d4>)
 8006de4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006de8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006dea:	4b31      	ldr	r3, [pc, #196]	; (8006eb0 <HAL_SD_MspInit+0x1d4>)
 8006dec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006df0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006df2:	482f      	ldr	r0, [pc, #188]	; (8006eb0 <HAL_SD_MspInit+0x1d4>)
 8006df4:	f003 faf8 	bl	800a3e8 <HAL_DMA_Init>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d001      	beq.n	8006e02 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006dfe:	f7ff fe0b 	bl	8006a18 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a2a      	ldr	r2, [pc, #168]	; (8006eb0 <HAL_SD_MspInit+0x1d4>)
 8006e06:	641a      	str	r2, [r3, #64]	; 0x40
 8006e08:	4a29      	ldr	r2, [pc, #164]	; (8006eb0 <HAL_SD_MspInit+0x1d4>)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006e0e:	4b2a      	ldr	r3, [pc, #168]	; (8006eb8 <HAL_SD_MspInit+0x1dc>)
 8006e10:	4a2a      	ldr	r2, [pc, #168]	; (8006ebc <HAL_SD_MspInit+0x1e0>)
 8006e12:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006e14:	4b28      	ldr	r3, [pc, #160]	; (8006eb8 <HAL_SD_MspInit+0x1dc>)
 8006e16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006e1a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e1c:	4b26      	ldr	r3, [pc, #152]	; (8006eb8 <HAL_SD_MspInit+0x1dc>)
 8006e1e:	2240      	movs	r2, #64	; 0x40
 8006e20:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e22:	4b25      	ldr	r3, [pc, #148]	; (8006eb8 <HAL_SD_MspInit+0x1dc>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006e28:	4b23      	ldr	r3, [pc, #140]	; (8006eb8 <HAL_SD_MspInit+0x1dc>)
 8006e2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e2e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006e30:	4b21      	ldr	r3, [pc, #132]	; (8006eb8 <HAL_SD_MspInit+0x1dc>)
 8006e32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e36:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006e38:	4b1f      	ldr	r3, [pc, #124]	; (8006eb8 <HAL_SD_MspInit+0x1dc>)
 8006e3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e3e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006e40:	4b1d      	ldr	r3, [pc, #116]	; (8006eb8 <HAL_SD_MspInit+0x1dc>)
 8006e42:	2220      	movs	r2, #32
 8006e44:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006e46:	4b1c      	ldr	r3, [pc, #112]	; (8006eb8 <HAL_SD_MspInit+0x1dc>)
 8006e48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006e4c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006e4e:	4b1a      	ldr	r3, [pc, #104]	; (8006eb8 <HAL_SD_MspInit+0x1dc>)
 8006e50:	2204      	movs	r2, #4
 8006e52:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006e54:	4b18      	ldr	r3, [pc, #96]	; (8006eb8 <HAL_SD_MspInit+0x1dc>)
 8006e56:	2203      	movs	r2, #3
 8006e58:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006e5a:	4b17      	ldr	r3, [pc, #92]	; (8006eb8 <HAL_SD_MspInit+0x1dc>)
 8006e5c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006e60:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006e62:	4b15      	ldr	r3, [pc, #84]	; (8006eb8 <HAL_SD_MspInit+0x1dc>)
 8006e64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006e68:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006e6a:	4813      	ldr	r0, [pc, #76]	; (8006eb8 <HAL_SD_MspInit+0x1dc>)
 8006e6c:	f003 fabc 	bl	800a3e8 <HAL_DMA_Init>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8006e76:	f7ff fdcf 	bl	8006a18 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a0e      	ldr	r2, [pc, #56]	; (8006eb8 <HAL_SD_MspInit+0x1dc>)
 8006e7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006e80:	4a0d      	ldr	r2, [pc, #52]	; (8006eb8 <HAL_SD_MspInit+0x1dc>)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006e86:	2200      	movs	r2, #0
 8006e88:	2100      	movs	r1, #0
 8006e8a:	2031      	movs	r0, #49	; 0x31
 8006e8c:	f003 fa75 	bl	800a37a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006e90:	2031      	movs	r0, #49	; 0x31
 8006e92:	f003 fa8e 	bl	800a3b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006e96:	bf00      	nop
 8006e98:	3728      	adds	r7, #40	; 0x28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	40012c00 	.word	0x40012c00
 8006ea4:	40023800 	.word	0x40023800
 8006ea8:	40020800 	.word	0x40020800
 8006eac:	40020c00 	.word	0x40020c00
 8006eb0:	2003f7cc 	.word	0x2003f7cc
 8006eb4:	40026458 	.word	0x40026458
 8006eb8:	2003fb00 	.word	0x2003fb00
 8006ebc:	400264a0 	.word	0x400264a0

08006ec0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08a      	sub	sp, #40	; 0x28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ec8:	f107 0314 	add.w	r3, r7, #20
 8006ecc:	2200      	movs	r2, #0
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	605a      	str	r2, [r3, #4]
 8006ed2:	609a      	str	r2, [r3, #8]
 8006ed4:	60da      	str	r2, [r3, #12]
 8006ed6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a19      	ldr	r2, [pc, #100]	; (8006f44 <HAL_SPI_MspInit+0x84>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d12c      	bne.n	8006f3c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	613b      	str	r3, [r7, #16]
 8006ee6:	4b18      	ldr	r3, [pc, #96]	; (8006f48 <HAL_SPI_MspInit+0x88>)
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eea:	4a17      	ldr	r2, [pc, #92]	; (8006f48 <HAL_SPI_MspInit+0x88>)
 8006eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ef2:	4b15      	ldr	r3, [pc, #84]	; (8006f48 <HAL_SPI_MspInit+0x88>)
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006efa:	613b      	str	r3, [r7, #16]
 8006efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	4b11      	ldr	r3, [pc, #68]	; (8006f48 <HAL_SPI_MspInit+0x88>)
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	4a10      	ldr	r2, [pc, #64]	; (8006f48 <HAL_SPI_MspInit+0x88>)
 8006f08:	f043 0302 	orr.w	r3, r3, #2
 8006f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f0e:	4b0e      	ldr	r3, [pc, #56]	; (8006f48 <HAL_SPI_MspInit+0x88>)
 8006f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006f1a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f20:	2302      	movs	r3, #2
 8006f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f24:	2300      	movs	r3, #0
 8006f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006f2c:	2305      	movs	r3, #5
 8006f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f30:	f107 0314 	add.w	r3, r7, #20
 8006f34:	4619      	mov	r1, r3
 8006f36:	4805      	ldr	r0, [pc, #20]	; (8006f4c <HAL_SPI_MspInit+0x8c>)
 8006f38:	f003 fdf4 	bl	800ab24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006f3c:	bf00      	nop
 8006f3e:	3728      	adds	r7, #40	; 0x28
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	40003800 	.word	0x40003800
 8006f48:	40023800 	.word	0x40023800
 8006f4c:	40020400 	.word	0x40020400

08006f50 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08c      	sub	sp, #48	; 0x30
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f58:	f107 031c 	add.w	r3, r7, #28
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	605a      	str	r2, [r3, #4]
 8006f62:	609a      	str	r2, [r3, #8]
 8006f64:	60da      	str	r2, [r3, #12]
 8006f66:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a2d      	ldr	r2, [pc, #180]	; (8007024 <HAL_TIM_PWM_MspInit+0xd4>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d12d      	bne.n	8006fce <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006f72:	2300      	movs	r3, #0
 8006f74:	61bb      	str	r3, [r7, #24]
 8006f76:	4b2c      	ldr	r3, [pc, #176]	; (8007028 <HAL_TIM_PWM_MspInit+0xd8>)
 8006f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7a:	4a2b      	ldr	r2, [pc, #172]	; (8007028 <HAL_TIM_PWM_MspInit+0xd8>)
 8006f7c:	f043 0301 	orr.w	r3, r3, #1
 8006f80:	6453      	str	r3, [r2, #68]	; 0x44
 8006f82:	4b29      	ldr	r3, [pc, #164]	; (8007028 <HAL_TIM_PWM_MspInit+0xd8>)
 8006f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	61bb      	str	r3, [r7, #24]
 8006f8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006f8e:	2300      	movs	r3, #0
 8006f90:	617b      	str	r3, [r7, #20]
 8006f92:	4b25      	ldr	r3, [pc, #148]	; (8007028 <HAL_TIM_PWM_MspInit+0xd8>)
 8006f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f96:	4a24      	ldr	r2, [pc, #144]	; (8007028 <HAL_TIM_PWM_MspInit+0xd8>)
 8006f98:	f043 0310 	orr.w	r3, r3, #16
 8006f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f9e:	4b22      	ldr	r3, [pc, #136]	; (8007028 <HAL_TIM_PWM_MspInit+0xd8>)
 8006fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa2:	f003 0310 	and.w	r3, r3, #16
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006faa:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006fc0:	f107 031c 	add.w	r3, r7, #28
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	4819      	ldr	r0, [pc, #100]	; (800702c <HAL_TIM_PWM_MspInit+0xdc>)
 8006fc8:	f003 fdac 	bl	800ab24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006fcc:	e026      	b.n	800701c <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a17      	ldr	r2, [pc, #92]	; (8007030 <HAL_TIM_PWM_MspInit+0xe0>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d10e      	bne.n	8006ff6 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006fd8:	2300      	movs	r3, #0
 8006fda:	613b      	str	r3, [r7, #16]
 8006fdc:	4b12      	ldr	r3, [pc, #72]	; (8007028 <HAL_TIM_PWM_MspInit+0xd8>)
 8006fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe0:	4a11      	ldr	r2, [pc, #68]	; (8007028 <HAL_TIM_PWM_MspInit+0xd8>)
 8006fe2:	f043 0302 	orr.w	r3, r3, #2
 8006fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8006fe8:	4b0f      	ldr	r3, [pc, #60]	; (8007028 <HAL_TIM_PWM_MspInit+0xd8>)
 8006fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	613b      	str	r3, [r7, #16]
 8006ff2:	693b      	ldr	r3, [r7, #16]
}
 8006ff4:	e012      	b.n	800701c <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a0e      	ldr	r2, [pc, #56]	; (8007034 <HAL_TIM_PWM_MspInit+0xe4>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d10d      	bne.n	800701c <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007000:	2300      	movs	r3, #0
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	4b08      	ldr	r3, [pc, #32]	; (8007028 <HAL_TIM_PWM_MspInit+0xd8>)
 8007006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007008:	4a07      	ldr	r2, [pc, #28]	; (8007028 <HAL_TIM_PWM_MspInit+0xd8>)
 800700a:	f043 0304 	orr.w	r3, r3, #4
 800700e:	6413      	str	r3, [r2, #64]	; 0x40
 8007010:	4b05      	ldr	r3, [pc, #20]	; (8007028 <HAL_TIM_PWM_MspInit+0xd8>)
 8007012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007014:	f003 0304 	and.w	r3, r3, #4
 8007018:	60fb      	str	r3, [r7, #12]
 800701a:	68fb      	ldr	r3, [r7, #12]
}
 800701c:	bf00      	nop
 800701e:	3730      	adds	r7, #48	; 0x30
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	40010000 	.word	0x40010000
 8007028:	40023800 	.word	0x40023800
 800702c:	40021000 	.word	0x40021000
 8007030:	40000400 	.word	0x40000400
 8007034:	40000800 	.word	0x40000800

08007038 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b088      	sub	sp, #32
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a3e      	ldr	r2, [pc, #248]	; (8007140 <HAL_TIM_Base_MspInit+0x108>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d116      	bne.n	8007078 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800704a:	2300      	movs	r3, #0
 800704c:	61fb      	str	r3, [r7, #28]
 800704e:	4b3d      	ldr	r3, [pc, #244]	; (8007144 <HAL_TIM_Base_MspInit+0x10c>)
 8007050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007052:	4a3c      	ldr	r2, [pc, #240]	; (8007144 <HAL_TIM_Base_MspInit+0x10c>)
 8007054:	f043 0310 	orr.w	r3, r3, #16
 8007058:	6413      	str	r3, [r2, #64]	; 0x40
 800705a:	4b3a      	ldr	r3, [pc, #232]	; (8007144 <HAL_TIM_Base_MspInit+0x10c>)
 800705c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705e:	f003 0310 	and.w	r3, r3, #16
 8007062:	61fb      	str	r3, [r7, #28]
 8007064:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8007066:	2200      	movs	r2, #0
 8007068:	2101      	movs	r1, #1
 800706a:	2036      	movs	r0, #54	; 0x36
 800706c:	f003 f985 	bl	800a37a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007070:	2036      	movs	r0, #54	; 0x36
 8007072:	f003 f99e 	bl	800a3b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8007076:	e05e      	b.n	8007136 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a32      	ldr	r2, [pc, #200]	; (8007148 <HAL_TIM_Base_MspInit+0x110>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d116      	bne.n	80070b0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007082:	2300      	movs	r3, #0
 8007084:	61bb      	str	r3, [r7, #24]
 8007086:	4b2f      	ldr	r3, [pc, #188]	; (8007144 <HAL_TIM_Base_MspInit+0x10c>)
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	4a2e      	ldr	r2, [pc, #184]	; (8007144 <HAL_TIM_Base_MspInit+0x10c>)
 800708c:	f043 0320 	orr.w	r3, r3, #32
 8007090:	6413      	str	r3, [r2, #64]	; 0x40
 8007092:	4b2c      	ldr	r3, [pc, #176]	; (8007144 <HAL_TIM_Base_MspInit+0x10c>)
 8007094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007096:	f003 0320 	and.w	r3, r3, #32
 800709a:	61bb      	str	r3, [r7, #24]
 800709c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800709e:	2200      	movs	r2, #0
 80070a0:	2100      	movs	r1, #0
 80070a2:	2037      	movs	r0, #55	; 0x37
 80070a4:	f003 f969 	bl	800a37a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80070a8:	2037      	movs	r0, #55	; 0x37
 80070aa:	f003 f982 	bl	800a3b2 <HAL_NVIC_EnableIRQ>
}
 80070ae:	e042      	b.n	8007136 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a25      	ldr	r2, [pc, #148]	; (800714c <HAL_TIM_Base_MspInit+0x114>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d10e      	bne.n	80070d8 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80070ba:	2300      	movs	r3, #0
 80070bc:	617b      	str	r3, [r7, #20]
 80070be:	4b21      	ldr	r3, [pc, #132]	; (8007144 <HAL_TIM_Base_MspInit+0x10c>)
 80070c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c2:	4a20      	ldr	r2, [pc, #128]	; (8007144 <HAL_TIM_Base_MspInit+0x10c>)
 80070c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070c8:	6453      	str	r3, [r2, #68]	; 0x44
 80070ca:	4b1e      	ldr	r3, [pc, #120]	; (8007144 <HAL_TIM_Base_MspInit+0x10c>)
 80070cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d2:	617b      	str	r3, [r7, #20]
 80070d4:	697b      	ldr	r3, [r7, #20]
}
 80070d6:	e02e      	b.n	8007136 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a1c      	ldr	r2, [pc, #112]	; (8007150 <HAL_TIM_Base_MspInit+0x118>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d10e      	bne.n	8007100 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80070e2:	2300      	movs	r3, #0
 80070e4:	613b      	str	r3, [r7, #16]
 80070e6:	4b17      	ldr	r3, [pc, #92]	; (8007144 <HAL_TIM_Base_MspInit+0x10c>)
 80070e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ea:	4a16      	ldr	r2, [pc, #88]	; (8007144 <HAL_TIM_Base_MspInit+0x10c>)
 80070ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070f0:	6453      	str	r3, [r2, #68]	; 0x44
 80070f2:	4b14      	ldr	r3, [pc, #80]	; (8007144 <HAL_TIM_Base_MspInit+0x10c>)
 80070f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070fa:	613b      	str	r3, [r7, #16]
 80070fc:	693b      	ldr	r3, [r7, #16]
}
 80070fe:	e01a      	b.n	8007136 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a13      	ldr	r2, [pc, #76]	; (8007154 <HAL_TIM_Base_MspInit+0x11c>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d115      	bne.n	8007136 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800710a:	2300      	movs	r3, #0
 800710c:	60fb      	str	r3, [r7, #12]
 800710e:	4b0d      	ldr	r3, [pc, #52]	; (8007144 <HAL_TIM_Base_MspInit+0x10c>)
 8007110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007112:	4a0c      	ldr	r2, [pc, #48]	; (8007144 <HAL_TIM_Base_MspInit+0x10c>)
 8007114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007118:	6413      	str	r3, [r2, #64]	; 0x40
 800711a:	4b0a      	ldr	r3, [pc, #40]	; (8007144 <HAL_TIM_Base_MspInit+0x10c>)
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007126:	2200      	movs	r2, #0
 8007128:	2100      	movs	r1, #0
 800712a:	202c      	movs	r0, #44	; 0x2c
 800712c:	f003 f925 	bl	800a37a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007130:	202c      	movs	r0, #44	; 0x2c
 8007132:	f003 f93e 	bl	800a3b2 <HAL_NVIC_EnableIRQ>
}
 8007136:	bf00      	nop
 8007138:	3720      	adds	r7, #32
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	40001000 	.word	0x40001000
 8007144:	40023800 	.word	0x40023800
 8007148:	40001400 	.word	0x40001400
 800714c:	40014400 	.word	0x40014400
 8007150:	40014800 	.word	0x40014800
 8007154:	40001c00 	.word	0x40001c00

08007158 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08a      	sub	sp, #40	; 0x28
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007160:	f107 0314 	add.w	r3, r7, #20
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	605a      	str	r2, [r3, #4]
 800716a:	609a      	str	r2, [r3, #8]
 800716c:	60da      	str	r2, [r3, #12]
 800716e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a1d      	ldr	r2, [pc, #116]	; (80071ec <HAL_TIM_Encoder_MspInit+0x94>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d133      	bne.n	80071e2 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800717a:	2300      	movs	r3, #0
 800717c:	613b      	str	r3, [r7, #16]
 800717e:	4b1c      	ldr	r3, [pc, #112]	; (80071f0 <HAL_TIM_Encoder_MspInit+0x98>)
 8007180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007182:	4a1b      	ldr	r2, [pc, #108]	; (80071f0 <HAL_TIM_Encoder_MspInit+0x98>)
 8007184:	f043 0302 	orr.w	r3, r3, #2
 8007188:	6453      	str	r3, [r2, #68]	; 0x44
 800718a:	4b19      	ldr	r3, [pc, #100]	; (80071f0 <HAL_TIM_Encoder_MspInit+0x98>)
 800718c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	613b      	str	r3, [r7, #16]
 8007194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007196:	2300      	movs	r3, #0
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	4b15      	ldr	r3, [pc, #84]	; (80071f0 <HAL_TIM_Encoder_MspInit+0x98>)
 800719c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719e:	4a14      	ldr	r2, [pc, #80]	; (80071f0 <HAL_TIM_Encoder_MspInit+0x98>)
 80071a0:	f043 0304 	orr.w	r3, r3, #4
 80071a4:	6313      	str	r3, [r2, #48]	; 0x30
 80071a6:	4b12      	ldr	r3, [pc, #72]	; (80071f0 <HAL_TIM_Encoder_MspInit+0x98>)
 80071a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071aa:	f003 0304 	and.w	r3, r3, #4
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80071b2:	23c0      	movs	r3, #192	; 0xc0
 80071b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071b6:	2302      	movs	r3, #2
 80071b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ba:	2300      	movs	r3, #0
 80071bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071be:	2300      	movs	r3, #0
 80071c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80071c2:	2303      	movs	r3, #3
 80071c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071c6:	f107 0314 	add.w	r3, r7, #20
 80071ca:	4619      	mov	r1, r3
 80071cc:	4809      	ldr	r0, [pc, #36]	; (80071f4 <HAL_TIM_Encoder_MspInit+0x9c>)
 80071ce:	f003 fca9 	bl	800ab24 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80071d2:	2200      	movs	r2, #0
 80071d4:	2100      	movs	r1, #0
 80071d6:	202c      	movs	r0, #44	; 0x2c
 80071d8:	f003 f8cf 	bl	800a37a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80071dc:	202c      	movs	r0, #44	; 0x2c
 80071de:	f003 f8e8 	bl	800a3b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80071e2:	bf00      	nop
 80071e4:	3728      	adds	r7, #40	; 0x28
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	40010400 	.word	0x40010400
 80071f0:	40023800 	.word	0x40023800
 80071f4:	40020800 	.word	0x40020800

080071f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b08c      	sub	sp, #48	; 0x30
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007200:	f107 031c 	add.w	r3, r7, #28
 8007204:	2200      	movs	r2, #0
 8007206:	601a      	str	r2, [r3, #0]
 8007208:	605a      	str	r2, [r3, #4]
 800720a:	609a      	str	r2, [r3, #8]
 800720c:	60da      	str	r2, [r3, #12]
 800720e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a5c      	ldr	r2, [pc, #368]	; (8007388 <HAL_TIM_MspPostInit+0x190>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d11f      	bne.n	800725a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800721a:	2300      	movs	r3, #0
 800721c:	61bb      	str	r3, [r7, #24]
 800721e:	4b5b      	ldr	r3, [pc, #364]	; (800738c <HAL_TIM_MspPostInit+0x194>)
 8007220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007222:	4a5a      	ldr	r2, [pc, #360]	; (800738c <HAL_TIM_MspPostInit+0x194>)
 8007224:	f043 0310 	orr.w	r3, r3, #16
 8007228:	6313      	str	r3, [r2, #48]	; 0x30
 800722a:	4b58      	ldr	r3, [pc, #352]	; (800738c <HAL_TIM_MspPostInit+0x194>)
 800722c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722e:	f003 0310 	and.w	r3, r3, #16
 8007232:	61bb      	str	r3, [r7, #24]
 8007234:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800723a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800723c:	2302      	movs	r3, #2
 800723e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007240:	2300      	movs	r3, #0
 8007242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007244:	2300      	movs	r3, #0
 8007246:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007248:	2301      	movs	r3, #1
 800724a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800724c:	f107 031c 	add.w	r3, r7, #28
 8007250:	4619      	mov	r1, r3
 8007252:	484f      	ldr	r0, [pc, #316]	; (8007390 <HAL_TIM_MspPostInit+0x198>)
 8007254:	f003 fc66 	bl	800ab24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8007258:	e091      	b.n	800737e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a4d      	ldr	r2, [pc, #308]	; (8007394 <HAL_TIM_MspPostInit+0x19c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d11e      	bne.n	80072a2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007264:	2300      	movs	r3, #0
 8007266:	617b      	str	r3, [r7, #20]
 8007268:	4b48      	ldr	r3, [pc, #288]	; (800738c <HAL_TIM_MspPostInit+0x194>)
 800726a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726c:	4a47      	ldr	r2, [pc, #284]	; (800738c <HAL_TIM_MspPostInit+0x194>)
 800726e:	f043 0302 	orr.w	r3, r3, #2
 8007272:	6313      	str	r3, [r2, #48]	; 0x30
 8007274:	4b45      	ldr	r3, [pc, #276]	; (800738c <HAL_TIM_MspPostInit+0x194>)
 8007276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007278:	f003 0302 	and.w	r3, r3, #2
 800727c:	617b      	str	r3, [r7, #20]
 800727e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007280:	2330      	movs	r3, #48	; 0x30
 8007282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007284:	2302      	movs	r3, #2
 8007286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007288:	2300      	movs	r3, #0
 800728a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800728c:	2300      	movs	r3, #0
 800728e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007290:	2302      	movs	r3, #2
 8007292:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007294:	f107 031c 	add.w	r3, r7, #28
 8007298:	4619      	mov	r1, r3
 800729a:	483f      	ldr	r0, [pc, #252]	; (8007398 <HAL_TIM_MspPostInit+0x1a0>)
 800729c:	f003 fc42 	bl	800ab24 <HAL_GPIO_Init>
}
 80072a0:	e06d      	b.n	800737e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a3d      	ldr	r2, [pc, #244]	; (800739c <HAL_TIM_MspPostInit+0x1a4>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d11f      	bne.n	80072ec <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80072ac:	2300      	movs	r3, #0
 80072ae:	613b      	str	r3, [r7, #16]
 80072b0:	4b36      	ldr	r3, [pc, #216]	; (800738c <HAL_TIM_MspPostInit+0x194>)
 80072b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b4:	4a35      	ldr	r2, [pc, #212]	; (800738c <HAL_TIM_MspPostInit+0x194>)
 80072b6:	f043 0308 	orr.w	r3, r3, #8
 80072ba:	6313      	str	r3, [r2, #48]	; 0x30
 80072bc:	4b33      	ldr	r3, [pc, #204]	; (800738c <HAL_TIM_MspPostInit+0x194>)
 80072be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c0:	f003 0308 	and.w	r3, r3, #8
 80072c4:	613b      	str	r3, [r7, #16]
 80072c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80072c8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80072cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072ce:	2302      	movs	r3, #2
 80072d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072d6:	2300      	movs	r3, #0
 80072d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80072da:	2302      	movs	r3, #2
 80072dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80072de:	f107 031c 	add.w	r3, r7, #28
 80072e2:	4619      	mov	r1, r3
 80072e4:	482e      	ldr	r0, [pc, #184]	; (80073a0 <HAL_TIM_MspPostInit+0x1a8>)
 80072e6:	f003 fc1d 	bl	800ab24 <HAL_GPIO_Init>
}
 80072ea:	e048      	b.n	800737e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a2c      	ldr	r2, [pc, #176]	; (80073a4 <HAL_TIM_MspPostInit+0x1ac>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d11f      	bne.n	8007336 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072f6:	2300      	movs	r3, #0
 80072f8:	60fb      	str	r3, [r7, #12]
 80072fa:	4b24      	ldr	r3, [pc, #144]	; (800738c <HAL_TIM_MspPostInit+0x194>)
 80072fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fe:	4a23      	ldr	r2, [pc, #140]	; (800738c <HAL_TIM_MspPostInit+0x194>)
 8007300:	f043 0302 	orr.w	r3, r3, #2
 8007304:	6313      	str	r3, [r2, #48]	; 0x30
 8007306:	4b21      	ldr	r3, [pc, #132]	; (800738c <HAL_TIM_MspPostInit+0x194>)
 8007308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	60fb      	str	r3, [r7, #12]
 8007310:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007318:	2302      	movs	r3, #2
 800731a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800731c:	2300      	movs	r3, #0
 800731e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007320:	2300      	movs	r3, #0
 8007322:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007324:	2303      	movs	r3, #3
 8007326:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007328:	f107 031c 	add.w	r3, r7, #28
 800732c:	4619      	mov	r1, r3
 800732e:	481a      	ldr	r0, [pc, #104]	; (8007398 <HAL_TIM_MspPostInit+0x1a0>)
 8007330:	f003 fbf8 	bl	800ab24 <HAL_GPIO_Init>
}
 8007334:	e023      	b.n	800737e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a1b      	ldr	r2, [pc, #108]	; (80073a8 <HAL_TIM_MspPostInit+0x1b0>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d11e      	bne.n	800737e <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007340:	2300      	movs	r3, #0
 8007342:	60bb      	str	r3, [r7, #8]
 8007344:	4b11      	ldr	r3, [pc, #68]	; (800738c <HAL_TIM_MspPostInit+0x194>)
 8007346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007348:	4a10      	ldr	r2, [pc, #64]	; (800738c <HAL_TIM_MspPostInit+0x194>)
 800734a:	f043 0302 	orr.w	r3, r3, #2
 800734e:	6313      	str	r3, [r2, #48]	; 0x30
 8007350:	4b0e      	ldr	r3, [pc, #56]	; (800738c <HAL_TIM_MspPostInit+0x194>)
 8007352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	60bb      	str	r3, [r7, #8]
 800735a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800735c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007362:	2302      	movs	r3, #2
 8007364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007366:	2300      	movs	r3, #0
 8007368:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800736a:	2300      	movs	r3, #0
 800736c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800736e:	2303      	movs	r3, #3
 8007370:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007372:	f107 031c 	add.w	r3, r7, #28
 8007376:	4619      	mov	r1, r3
 8007378:	4807      	ldr	r0, [pc, #28]	; (8007398 <HAL_TIM_MspPostInit+0x1a0>)
 800737a:	f003 fbd3 	bl	800ab24 <HAL_GPIO_Init>
}
 800737e:	bf00      	nop
 8007380:	3730      	adds	r7, #48	; 0x30
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	40010000 	.word	0x40010000
 800738c:	40023800 	.word	0x40023800
 8007390:	40021000 	.word	0x40021000
 8007394:	40000400 	.word	0x40000400
 8007398:	40020400 	.word	0x40020400
 800739c:	40000800 	.word	0x40000800
 80073a0:	40020c00 	.word	0x40020c00
 80073a4:	40014400 	.word	0x40014400
 80073a8:	40014800 	.word	0x40014800

080073ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08a      	sub	sp, #40	; 0x28
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073b4:	f107 0314 	add.w	r3, r7, #20
 80073b8:	2200      	movs	r2, #0
 80073ba:	601a      	str	r2, [r3, #0]
 80073bc:	605a      	str	r2, [r3, #4]
 80073be:	609a      	str	r2, [r3, #8]
 80073c0:	60da      	str	r2, [r3, #12]
 80073c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a19      	ldr	r2, [pc, #100]	; (8007430 <HAL_UART_MspInit+0x84>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d12b      	bne.n	8007426 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80073ce:	2300      	movs	r3, #0
 80073d0:	613b      	str	r3, [r7, #16]
 80073d2:	4b18      	ldr	r3, [pc, #96]	; (8007434 <HAL_UART_MspInit+0x88>)
 80073d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d6:	4a17      	ldr	r2, [pc, #92]	; (8007434 <HAL_UART_MspInit+0x88>)
 80073d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073dc:	6413      	str	r3, [r2, #64]	; 0x40
 80073de:	4b15      	ldr	r3, [pc, #84]	; (8007434 <HAL_UART_MspInit+0x88>)
 80073e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073e6:	613b      	str	r3, [r7, #16]
 80073e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80073ea:	2300      	movs	r3, #0
 80073ec:	60fb      	str	r3, [r7, #12]
 80073ee:	4b11      	ldr	r3, [pc, #68]	; (8007434 <HAL_UART_MspInit+0x88>)
 80073f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f2:	4a10      	ldr	r2, [pc, #64]	; (8007434 <HAL_UART_MspInit+0x88>)
 80073f4:	f043 0308 	orr.w	r3, r3, #8
 80073f8:	6313      	str	r3, [r2, #48]	; 0x30
 80073fa:	4b0e      	ldr	r3, [pc, #56]	; (8007434 <HAL_UART_MspInit+0x88>)
 80073fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fe:	f003 0308 	and.w	r3, r3, #8
 8007402:	60fb      	str	r3, [r7, #12]
 8007404:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007406:	2360      	movs	r3, #96	; 0x60
 8007408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800740a:	2302      	movs	r3, #2
 800740c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800740e:	2300      	movs	r3, #0
 8007410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007412:	2303      	movs	r3, #3
 8007414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007416:	2307      	movs	r3, #7
 8007418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800741a:	f107 0314 	add.w	r3, r7, #20
 800741e:	4619      	mov	r1, r3
 8007420:	4805      	ldr	r0, [pc, #20]	; (8007438 <HAL_UART_MspInit+0x8c>)
 8007422:	f003 fb7f 	bl	800ab24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007426:	bf00      	nop
 8007428:	3728      	adds	r7, #40	; 0x28
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	40004400 	.word	0x40004400
 8007434:	40023800 	.word	0x40023800
 8007438:	40020c00 	.word	0x40020c00

0800743c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800743c:	b480      	push	{r7}
 800743e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007440:	e7fe      	b.n	8007440 <NMI_Handler+0x4>

08007442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007442:	b480      	push	{r7}
 8007444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007446:	e7fe      	b.n	8007446 <HardFault_Handler+0x4>

08007448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007448:	b480      	push	{r7}
 800744a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800744c:	e7fe      	b.n	800744c <MemManage_Handler+0x4>

0800744e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800744e:	b480      	push	{r7}
 8007450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007452:	e7fe      	b.n	8007452 <BusFault_Handler+0x4>

08007454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007454:	b480      	push	{r7}
 8007456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007458:	e7fe      	b.n	8007458 <UsageFault_Handler+0x4>

0800745a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800745a:	b480      	push	{r7}
 800745c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800745e:	bf00      	nop
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007468:	b480      	push	{r7}
 800746a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800746c:	bf00      	nop
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007476:	b480      	push	{r7}
 8007478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800747a:	bf00      	nop
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007488:	f002 fa54 	bl	8009934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800748c:	bf00      	nop
 800748e:	bd80      	pop	{r7, pc}

08007490 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007494:	4803      	ldr	r0, [pc, #12]	; (80074a4 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8007496:	f007 fd3f 	bl	800ef18 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800749a:	4803      	ldr	r0, [pc, #12]	; (80074a8 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800749c:	f007 fd3c 	bl	800ef18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80074a0:	bf00      	nop
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	2003f884 	.word	0x2003f884
 80074a8:	2003fa80 	.word	0x2003fa80

080074ac <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80074b0:	4802      	ldr	r0, [pc, #8]	; (80074bc <SDIO_IRQHandler+0x10>)
 80074b2:	f005 fdd9 	bl	800d068 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80074b6:	bf00      	nop
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	2003fbe0 	.word	0x2003fbe0

080074c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80074c4:	4802      	ldr	r0, [pc, #8]	; (80074d0 <TIM6_DAC_IRQHandler+0x10>)
 80074c6:	f007 fd27 	bl	800ef18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80074ca:	bf00      	nop
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	2003fb60 	.word	0x2003fb60

080074d4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80074d8:	4802      	ldr	r0, [pc, #8]	; (80074e4 <TIM7_IRQHandler+0x10>)
 80074da:	f007 fd1d 	bl	800ef18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80074de:	bf00      	nop
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	2003fd04 	.word	0x2003fd04

080074e8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80074ec:	4802      	ldr	r0, [pc, #8]	; (80074f8 <DMA2_Stream2_IRQHandler+0x10>)
 80074ee:	f003 f8a3 	bl	800a638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80074f2:	bf00      	nop
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	2003fca4 	.word	0x2003fca4

080074fc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007500:	4802      	ldr	r0, [pc, #8]	; (800750c <DMA2_Stream3_IRQHandler+0x10>)
 8007502:	f003 f899 	bl	800a638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007506:	bf00      	nop
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	2003f7cc 	.word	0x2003f7cc

08007510 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007514:	4802      	ldr	r0, [pc, #8]	; (8007520 <DMA2_Stream6_IRQHandler+0x10>)
 8007516:	f003 f88f 	bl	800a638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800751a:	bf00      	nop
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	2003fb00 	.word	0x2003fb00

08007524 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007524:	b480      	push	{r7}
 8007526:	af00      	add	r7, sp, #0
	return 1;
 8007528:	2301      	movs	r3, #1
}
 800752a:	4618      	mov	r0, r3
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <_kill>:

int _kill(int pid, int sig)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800753e:	f00d ffd9 	bl	80154f4 <__errno>
 8007542:	4603      	mov	r3, r0
 8007544:	2216      	movs	r2, #22
 8007546:	601a      	str	r2, [r3, #0]
	return -1;
 8007548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800754c:	4618      	mov	r0, r3
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <_exit>:

void _exit (int status)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800755c:	f04f 31ff 	mov.w	r1, #4294967295
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7ff ffe7 	bl	8007534 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007566:	e7fe      	b.n	8007566 <_exit+0x12>

08007568 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007574:	2300      	movs	r3, #0
 8007576:	617b      	str	r3, [r7, #20]
 8007578:	e00a      	b.n	8007590 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800757a:	f3af 8000 	nop.w
 800757e:	4601      	mov	r1, r0
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	1c5a      	adds	r2, r3, #1
 8007584:	60ba      	str	r2, [r7, #8]
 8007586:	b2ca      	uxtb	r2, r1
 8007588:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	3301      	adds	r3, #1
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	429a      	cmp	r2, r3
 8007596:	dbf0      	blt.n	800757a <_read+0x12>
	}

return len;
 8007598:	687b      	ldr	r3, [r7, #4]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b083      	sub	sp, #12
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
	return -1;
 80075aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b083      	sub	sp, #12
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80075ca:	605a      	str	r2, [r3, #4]
	return 0;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	370c      	adds	r7, #12
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <_isatty>:

int _isatty(int file)
{
 80075da:	b480      	push	{r7}
 80075dc:	b083      	sub	sp, #12
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
	return 1;
 80075e2:	2301      	movs	r3, #1
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
	return 0;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
	...

0800760c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007614:	4a14      	ldr	r2, [pc, #80]	; (8007668 <_sbrk+0x5c>)
 8007616:	4b15      	ldr	r3, [pc, #84]	; (800766c <_sbrk+0x60>)
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007620:	4b13      	ldr	r3, [pc, #76]	; (8007670 <_sbrk+0x64>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d102      	bne.n	800762e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007628:	4b11      	ldr	r3, [pc, #68]	; (8007670 <_sbrk+0x64>)
 800762a:	4a12      	ldr	r2, [pc, #72]	; (8007674 <_sbrk+0x68>)
 800762c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800762e:	4b10      	ldr	r3, [pc, #64]	; (8007670 <_sbrk+0x64>)
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4413      	add	r3, r2
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	429a      	cmp	r2, r3
 800763a:	d207      	bcs.n	800764c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800763c:	f00d ff5a 	bl	80154f4 <__errno>
 8007640:	4603      	mov	r3, r0
 8007642:	220c      	movs	r2, #12
 8007644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007646:	f04f 33ff 	mov.w	r3, #4294967295
 800764a:	e009      	b.n	8007660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800764c:	4b08      	ldr	r3, [pc, #32]	; (8007670 <_sbrk+0x64>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007652:	4b07      	ldr	r3, [pc, #28]	; (8007670 <_sbrk+0x64>)
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4413      	add	r3, r2
 800765a:	4a05      	ldr	r2, [pc, #20]	; (8007670 <_sbrk+0x64>)
 800765c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800765e:	68fb      	ldr	r3, [r7, #12]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3718      	adds	r7, #24
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	20050000 	.word	0x20050000
 800766c:	00000800 	.word	0x00000800
 8007670:	200002bc 	.word	0x200002bc
 8007674:	20041e68 	.word	0x20041e68

08007678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007678:	b480      	push	{r7}
 800767a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800767c:	4b08      	ldr	r3, [pc, #32]	; (80076a0 <SystemInit+0x28>)
 800767e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007682:	4a07      	ldr	r2, [pc, #28]	; (80076a0 <SystemInit+0x28>)
 8007684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800768c:	4b04      	ldr	r3, [pc, #16]	; (80076a0 <SystemInit+0x28>)
 800768e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007692:	609a      	str	r2, [r3, #8]
#endif
}
 8007694:	bf00      	nop
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	e000ed00 	.word	0xe000ed00

080076a4 <cppInit>:
		}
	}
}

void cppInit(void)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	af00      	add	r7, sp, #0
	lcd_init();
 80076a8:	f7f9 fce8 	bl	800107c <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 80076ac:	483b      	ldr	r0, [pc, #236]	; (800779c <cppInit+0xf8>)
 80076ae:	f7fd fd3f 	bl	8005130 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 80076b2:	2064      	movs	r0, #100	; 0x64
 80076b4:	f002 f95e 	bl	8009974 <HAL_Delay>
	power_sensor.updateValues();
 80076b8:	4838      	ldr	r0, [pc, #224]	; (800779c <cppInit+0xf8>)
 80076ba:	f7fd fd49 	bl	8005150 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 80076be:	f7f9 fd21 	bl	8001104 <lcd_clear>
	lcd_locate(0,0);
 80076c2:	2100      	movs	r1, #0
 80076c4:	2000      	movs	r0, #0
 80076c6:	f7f9 fd2d 	bl	8001124 <lcd_locate>
	lcd_printf("Voltage");
 80076ca:	4835      	ldr	r0, [pc, #212]	; (80077a0 <cppInit+0xfc>)
 80076cc:	f7f9 fd55 	bl	800117a <lcd_printf>
	lcd_locate(0,1);
 80076d0:	2101      	movs	r1, #1
 80076d2:	2000      	movs	r0, #0
 80076d4:	f7f9 fd26 	bl	8001124 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 80076d8:	4830      	ldr	r0, [pc, #192]	; (800779c <cppInit+0xf8>)
 80076da:	f7fd fd63 	bl	80051a4 <_ZN11PowerSensor17getButteryVoltageEv>
 80076de:	ee10 3a10 	vmov	r3, s0
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7f8 ff48 	bl	8000578 <__aeabi_f2d>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	482d      	ldr	r0, [pc, #180]	; (80077a4 <cppInit+0x100>)
 80076ee:	f7f9 fd44 	bl	800117a <lcd_printf>
	HAL_Delay(1000);
 80076f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80076f6:	f002 f93d 	bl	8009974 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 80076fa:	482b      	ldr	r0, [pc, #172]	; (80077a8 <cppInit+0x104>)
 80076fc:	f7fc ff64 	bl	80045c8 <_ZN6Logger10sdCardInitEv>
 8007700:	4603      	mov	r3, r0
 8007702:	2b01      	cmp	r3, #1
 8007704:	bf0c      	ite	eq
 8007706:	2301      	moveq	r3, #1
 8007708:	2300      	movne	r3, #0
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d007      	beq.n	8007720 <cppInit+0x7c>
		led.fullColor('G');
 8007710:	2147      	movs	r1, #71	; 0x47
 8007712:	4826      	ldr	r0, [pc, #152]	; (80077ac <cppInit+0x108>)
 8007714:	f7fa fbb2 	bl	8001e7c <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007718:	2064      	movs	r0, #100	; 0x64
 800771a:	f002 f92b 	bl	8009974 <HAL_Delay>
 800771e:	e006      	b.n	800772e <cppInit+0x8a>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007720:	2152      	movs	r1, #82	; 0x52
 8007722:	4822      	ldr	r0, [pc, #136]	; (80077ac <cppInit+0x108>)
 8007724:	f7fa fbaa 	bl	8001e7c <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007728:	2064      	movs	r0, #100	; 0x64
 800772a:	f002 f923 	bl	8009974 <HAL_Delay>
	}

	line_sensor.ADCStart();
 800772e:	4820      	ldr	r0, [pc, #128]	; (80077b0 <cppInit+0x10c>)
 8007730:	f7fa fd00 	bl	8002134 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8007734:	481f      	ldr	r0, [pc, #124]	; (80077b4 <cppInit+0x110>)
 8007736:	f7fd f9d1 	bl	8004adc <_ZN5Motor4initEv>
	encoder.init();
 800773a:	481f      	ldr	r0, [pc, #124]	; (80077b8 <cppInit+0x114>)
 800773c:	f7f9 fd68 	bl	8001210 <_ZN7Encoder4initEv>
	imu.init();
 8007740:	481e      	ldr	r0, [pc, #120]	; (80077bc <cppInit+0x118>)
 8007742:	f7fa f959 	bl	80019f8 <_ZN3IMU4initEv>
	line_trace.init();
 8007746:	481e      	ldr	r0, [pc, #120]	; (80077c0 <cppInit+0x11c>)
 8007748:	f7fc f80c 	bl	8003764 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 800774c:	4818      	ldr	r0, [pc, #96]	; (80077b0 <cppInit+0x10c>)
 800774e:	f7fa fe2d 	bl	80023ac <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8007752:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007756:	f002 f90d 	bl	8009974 <HAL_Delay>

	led.fullColor('M');
 800775a:	214d      	movs	r1, #77	; 0x4d
 800775c:	4813      	ldr	r0, [pc, #76]	; (80077ac <cppInit+0x108>)
 800775e:	f7fa fb8d 	bl	8001e7c <_ZN3LED9fullColorEc>
	imu.calibration();
 8007762:	4816      	ldr	r0, [pc, #88]	; (80077bc <cppInit+0x118>)
 8007764:	f7fa fa12 	bl	8001b8c <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 8007768:	ed9f 1a16 	vldr	s2, [pc, #88]	; 80077c4 <cppInit+0x120>
 800776c:	eddf 0a16 	vldr	s1, [pc, #88]	; 80077c8 <cppInit+0x124>
 8007770:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80077cc <cppInit+0x128>
 8007774:	4816      	ldr	r0, [pc, #88]	; (80077d0 <cppInit+0x12c>)
 8007776:	f7fe f913 	bl	80059a0 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 800777a:	ed9f 1a16 	vldr	s2, [pc, #88]	; 80077d4 <cppInit+0x130>
 800777e:	eddf 0a16 	vldr	s1, [pc, #88]	; 80077d8 <cppInit+0x134>
 8007782:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80077dc <cppInit+0x138>
 8007786:	4812      	ldr	r0, [pc, #72]	; (80077d0 <cppInit+0x12c>)
 8007788:	f7fe f923 	bl	80059d2 <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 800778c:	4814      	ldr	r0, [pc, #80]	; (80077e0 <cppInit+0x13c>)
 800778e:	f7fd fbd4 	bl	8004f3a <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007792:	4814      	ldr	r0, [pc, #80]	; (80077e4 <cppInit+0x140>)
 8007794:	f7fd fc6e 	bl	8005074 <_ZN13PathFollowing4initEv>

}
 8007798:	bf00      	nop
 800779a:	bd80      	pop	{r7, pc}
 800779c:	200005d0 	.word	0x200005d0
 80077a0:	0801ab2c 	.word	0x0801ab2c
 80077a4:	0801ab34 	.word	0x0801ab34
 80077a8:	200005f0 	.word	0x200005f0
 80077ac:	200005cc 	.word	0x200005cc
 80077b0:	200002c0 	.word	0x200002c0
 80077b4:	200005c8 	.word	0x200005c8
 80077b8:	20017d00 	.word	0x20017d00
 80077bc:	200005dc 	.word	0x200005dc
 80077c0:	20017da0 	.word	0x20017da0
 80077c4:	3cceca68 	.word	0x3cceca68
 80077c8:	4180f06f 	.word	0x4180f06f
 80077cc:	3fea2d0e 	.word	0x3fea2d0e
 80077d0:	20017d20 	.word	0x20017d20
 80077d4:	3ab7dacd 	.word	0x3ab7dacd
 80077d8:	3f5e3fbc 	.word	0x3f5e3fbc
 80077dc:	3d8eefa2 	.word	0x3d8eefa2
 80077e0:	20017d60 	.word	0x20017d60
 80077e4:	20025cc8 	.word	0x20025cc8

080077e8 <cppFlip1ms>:

void cppFlip1ms(void)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 80077ec:	4819      	ldr	r0, [pc, #100]	; (8007854 <cppFlip1ms+0x6c>)
 80077ee:	f7fa fcff 	bl	80021f0 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 80077f2:	4819      	ldr	r0, [pc, #100]	; (8007858 <cppFlip1ms+0x70>)
 80077f4:	f7fa f928 	bl	8001a48 <_ZN3IMU12updateValuesEv>
	encoder.update();
 80077f8:	4818      	ldr	r0, [pc, #96]	; (800785c <cppFlip1ms+0x74>)
 80077fa:	f7f9 fd29 	bl	8001250 <_ZN7Encoder6updateEv>
	line_trace.flip();
 80077fe:	4818      	ldr	r0, [pc, #96]	; (8007860 <cppFlip1ms+0x78>)
 8007800:	f7fc fa46 	bl	8003c90 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007804:	4817      	ldr	r0, [pc, #92]	; (8007864 <cppFlip1ms+0x7c>)
 8007806:	f7fe f8fd 	bl	8005a04 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 800780a:	4817      	ldr	r0, [pc, #92]	; (8007868 <cppFlip1ms+0x80>)
 800780c:	f7fd fb78 	bl	8004f00 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007810:	4816      	ldr	r0, [pc, #88]	; (800786c <cppFlip1ms+0x84>)
 8007812:	f7fd fd3d 	bl	8005290 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007816:	4816      	ldr	r0, [pc, #88]	; (8007870 <cppFlip1ms+0x88>)
 8007818:	f7fd f972 	bl	8004b00 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 800781c:	4b15      	ldr	r3, [pc, #84]	; (8007874 <cppFlip1ms+0x8c>)
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	3301      	adds	r3, #1
 8007822:	b29a      	uxth	r2, r3
 8007824:	4b13      	ldr	r3, [pc, #76]	; (8007874 <cppFlip1ms+0x8c>)
 8007826:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8007828:	4b12      	ldr	r3, [pc, #72]	; (8007874 <cppFlip1ms+0x8c>)
 800782a:	881b      	ldrh	r3, [r3, #0]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d90c      	bls.n	800784a <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 8007830:	4809      	ldr	r0, [pc, #36]	; (8007858 <cppFlip1ms+0x70>)
 8007832:	f7fa f961 	bl	8001af8 <_ZN3IMU8getOmegaEv>
 8007836:	eef0 7a40 	vmov.f32	s15, s0
 800783a:	eeb0 0a67 	vmov.f32	s0, s15
 800783e:	480e      	ldr	r0, [pc, #56]	; (8007878 <cppFlip1ms+0x90>)
 8007840:	f7fd fe7e 	bl	8005540 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 8007844:	4b0b      	ldr	r3, [pc, #44]	; (8007874 <cppFlip1ms+0x8c>)
 8007846:	2200      	movs	r2, #0
 8007848:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 800784a:	4804      	ldr	r0, [pc, #16]	; (800785c <cppFlip1ms+0x74>)
 800784c:	f7f9 fdea 	bl	8001424 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007850:	bf00      	nop
 8007852:	bd80      	pop	{r7, pc}
 8007854:	200002c0 	.word	0x200002c0
 8007858:	200005dc 	.word	0x200005dc
 800785c:	20017d00 	.word	0x20017d00
 8007860:	20017da0 	.word	0x20017da0
 8007864:	20017d20 	.word	0x20017d20
 8007868:	20017d60 	.word	0x20017d60
 800786c:	200005b8 	.word	0x200005b8
 8007870:	200005c8 	.word	0x200005c8
 8007874:	2003d3f0 	.word	0x2003d3f0
 8007878:	20025ab8 	.word	0x20025ab8

0800787c <cppFlip100ns>:

void cppFlip100ns(void)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007880:	4802      	ldr	r0, [pc, #8]	; (800788c <cppFlip100ns+0x10>)
 8007882:	f7fa fc67 	bl	8002154 <_ZN10LineSensor17storeSensorValuesEv>
	//line_trace.flip100ns();
}
 8007886:	bf00      	nop
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	200002c0 	.word	0x200002c0

08007890 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8007894:	4b08      	ldr	r3, [pc, #32]	; (80078b8 <cppFlip10ms+0x28>)
 8007896:	881b      	ldrh	r3, [r3, #0]
 8007898:	3301      	adds	r3, #1
 800789a:	b29a      	uxth	r2, r3
 800789c:	4b06      	ldr	r3, [pc, #24]	; (80078b8 <cppFlip10ms+0x28>)
 800789e:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 80078a0:	4b05      	ldr	r3, [pc, #20]	; (80078b8 <cppFlip10ms+0x28>)
 80078a2:	881b      	ldrh	r3, [r3, #0]
 80078a4:	2b06      	cmp	r3, #6
 80078a6:	d905      	bls.n	80078b4 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 80078a8:	4804      	ldr	r0, [pc, #16]	; (80078bc <cppFlip10ms+0x2c>)
 80078aa:	f7fd fe85 	bl	80055b8 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 80078ae:	4b02      	ldr	r3, [pc, #8]	; (80078b8 <cppFlip10ms+0x28>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 80078b4:	bf00      	nop
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	2003d3f2 	.word	0x2003d3f2
 80078bc:	20025ab8 	.word	0x20025ab8

080078c0 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 80078c0:	b5b0      	push	{r4, r5, r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;
	static int16_t selector_fast;

	static float adj_kp = line_trace.getKp();
 80078c6:	4baf      	ldr	r3, [pc, #700]	; (8007b84 <cppLoop+0x2c4>)
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	f3bf 8f5b 	dmb	ish
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	bf0c      	ite	eq
 80078d8:	2301      	moveq	r3, #1
 80078da:	2300      	movne	r3, #0
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d015      	beq.n	800790e <cppLoop+0x4e>
 80078e2:	48a8      	ldr	r0, [pc, #672]	; (8007b84 <cppLoop+0x2c4>)
 80078e4:	f00c fd6f 	bl	80143c6 <__cxa_guard_acquire>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	bf14      	ite	ne
 80078ee:	2301      	movne	r3, #1
 80078f0:	2300      	moveq	r3, #0
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00a      	beq.n	800790e <cppLoop+0x4e>
 80078f8:	48a3      	ldr	r0, [pc, #652]	; (8007b88 <cppLoop+0x2c8>)
 80078fa:	f7fc f853 	bl	80039a4 <_ZN9LineTrace5getKpEv>
 80078fe:	eef0 7a40 	vmov.f32	s15, s0
 8007902:	4ba2      	ldr	r3, [pc, #648]	; (8007b8c <cppLoop+0x2cc>)
 8007904:	edc3 7a00 	vstr	s15, [r3]
 8007908:	489e      	ldr	r0, [pc, #632]	; (8007b84 <cppLoop+0x2c4>)
 800790a:	f00c fd68 	bl	80143de <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 800790e:	4ba0      	ldr	r3, [pc, #640]	; (8007b90 <cppLoop+0x2d0>)
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	f3bf 8f5b 	dmb	ish
 8007916:	b2db      	uxtb	r3, r3
 8007918:	f003 0301 	and.w	r3, r3, #1
 800791c:	2b00      	cmp	r3, #0
 800791e:	bf0c      	ite	eq
 8007920:	2301      	moveq	r3, #1
 8007922:	2300      	movne	r3, #0
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	d015      	beq.n	8007956 <cppLoop+0x96>
 800792a:	4899      	ldr	r0, [pc, #612]	; (8007b90 <cppLoop+0x2d0>)
 800792c:	f00c fd4b 	bl	80143c6 <__cxa_guard_acquire>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	bf14      	ite	ne
 8007936:	2301      	movne	r3, #1
 8007938:	2300      	moveq	r3, #0
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00a      	beq.n	8007956 <cppLoop+0x96>
 8007940:	4891      	ldr	r0, [pc, #580]	; (8007b88 <cppLoop+0x2c8>)
 8007942:	f7fc f83e 	bl	80039c2 <_ZN9LineTrace5getKiEv>
 8007946:	eef0 7a40 	vmov.f32	s15, s0
 800794a:	4b92      	ldr	r3, [pc, #584]	; (8007b94 <cppLoop+0x2d4>)
 800794c:	edc3 7a00 	vstr	s15, [r3]
 8007950:	488f      	ldr	r0, [pc, #572]	; (8007b90 <cppLoop+0x2d0>)
 8007952:	f00c fd44 	bl	80143de <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8007956:	4b90      	ldr	r3, [pc, #576]	; (8007b98 <cppLoop+0x2d8>)
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	f3bf 8f5b 	dmb	ish
 800795e:	b2db      	uxtb	r3, r3
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b00      	cmp	r3, #0
 8007966:	bf0c      	ite	eq
 8007968:	2301      	moveq	r3, #1
 800796a:	2300      	movne	r3, #0
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d015      	beq.n	800799e <cppLoop+0xde>
 8007972:	4889      	ldr	r0, [pc, #548]	; (8007b98 <cppLoop+0x2d8>)
 8007974:	f00c fd27 	bl	80143c6 <__cxa_guard_acquire>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	bf14      	ite	ne
 800797e:	2301      	movne	r3, #1
 8007980:	2300      	moveq	r3, #0
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00a      	beq.n	800799e <cppLoop+0xde>
 8007988:	487f      	ldr	r0, [pc, #508]	; (8007b88 <cppLoop+0x2c8>)
 800798a:	f7fc f829 	bl	80039e0 <_ZN9LineTrace5getKdEv>
 800798e:	eef0 7a40 	vmov.f32	s15, s0
 8007992:	4b82      	ldr	r3, [pc, #520]	; (8007b9c <cppLoop+0x2dc>)
 8007994:	edc3 7a00 	vstr	s15, [r3]
 8007998:	487f      	ldr	r0, [pc, #508]	; (8007b98 <cppLoop+0x2d8>)
 800799a:	f00c fd20 	bl	80143de <__cxa_guard_release>

	static float adj_kp_fast = line_trace.getKpFast();
 800799e:	4b80      	ldr	r3, [pc, #512]	; (8007ba0 <cppLoop+0x2e0>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	f3bf 8f5b 	dmb	ish
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	bf0c      	ite	eq
 80079b0:	2301      	moveq	r3, #1
 80079b2:	2300      	movne	r3, #0
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d015      	beq.n	80079e6 <cppLoop+0x126>
 80079ba:	4879      	ldr	r0, [pc, #484]	; (8007ba0 <cppLoop+0x2e0>)
 80079bc:	f00c fd03 	bl	80143c6 <__cxa_guard_acquire>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	bf14      	ite	ne
 80079c6:	2301      	movne	r3, #1
 80079c8:	2300      	moveq	r3, #0
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00a      	beq.n	80079e6 <cppLoop+0x126>
 80079d0:	486d      	ldr	r0, [pc, #436]	; (8007b88 <cppLoop+0x2c8>)
 80079d2:	f7fc f814 	bl	80039fe <_ZN9LineTrace9getKpFastEv>
 80079d6:	eef0 7a40 	vmov.f32	s15, s0
 80079da:	4b72      	ldr	r3, [pc, #456]	; (8007ba4 <cppLoop+0x2e4>)
 80079dc:	edc3 7a00 	vstr	s15, [r3]
 80079e0:	486f      	ldr	r0, [pc, #444]	; (8007ba0 <cppLoop+0x2e0>)
 80079e2:	f00c fcfc 	bl	80143de <__cxa_guard_release>
	static float adj_ki_fast = line_trace.getKiFast();
 80079e6:	4b70      	ldr	r3, [pc, #448]	; (8007ba8 <cppLoop+0x2e8>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	f3bf 8f5b 	dmb	ish
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	bf0c      	ite	eq
 80079f8:	2301      	moveq	r3, #1
 80079fa:	2300      	movne	r3, #0
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d015      	beq.n	8007a2e <cppLoop+0x16e>
 8007a02:	4869      	ldr	r0, [pc, #420]	; (8007ba8 <cppLoop+0x2e8>)
 8007a04:	f00c fcdf 	bl	80143c6 <__cxa_guard_acquire>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	bf14      	ite	ne
 8007a0e:	2301      	movne	r3, #1
 8007a10:	2300      	moveq	r3, #0
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00a      	beq.n	8007a2e <cppLoop+0x16e>
 8007a18:	485b      	ldr	r0, [pc, #364]	; (8007b88 <cppLoop+0x2c8>)
 8007a1a:	f7fb ffff 	bl	8003a1c <_ZN9LineTrace9getKiFastEv>
 8007a1e:	eef0 7a40 	vmov.f32	s15, s0
 8007a22:	4b62      	ldr	r3, [pc, #392]	; (8007bac <cppLoop+0x2ec>)
 8007a24:	edc3 7a00 	vstr	s15, [r3]
 8007a28:	485f      	ldr	r0, [pc, #380]	; (8007ba8 <cppLoop+0x2e8>)
 8007a2a:	f00c fcd8 	bl	80143de <__cxa_guard_release>
	static float adj_kd_fast = line_trace.getKdFast();
 8007a2e:	4b60      	ldr	r3, [pc, #384]	; (8007bb0 <cppLoop+0x2f0>)
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	f3bf 8f5b 	dmb	ish
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	f003 0301 	and.w	r3, r3, #1
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	bf0c      	ite	eq
 8007a40:	2301      	moveq	r3, #1
 8007a42:	2300      	movne	r3, #0
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d015      	beq.n	8007a76 <cppLoop+0x1b6>
 8007a4a:	4859      	ldr	r0, [pc, #356]	; (8007bb0 <cppLoop+0x2f0>)
 8007a4c:	f00c fcbb 	bl	80143c6 <__cxa_guard_acquire>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	bf14      	ite	ne
 8007a56:	2301      	movne	r3, #1
 8007a58:	2300      	moveq	r3, #0
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00a      	beq.n	8007a76 <cppLoop+0x1b6>
 8007a60:	4849      	ldr	r0, [pc, #292]	; (8007b88 <cppLoop+0x2c8>)
 8007a62:	f7fb ffea 	bl	8003a3a <_ZN9LineTrace9getKdFastEv>
 8007a66:	eef0 7a40 	vmov.f32	s15, s0
 8007a6a:	4b52      	ldr	r3, [pc, #328]	; (8007bb4 <cppLoop+0x2f4>)
 8007a6c:	edc3 7a00 	vstr	s15, [r3]
 8007a70:	484f      	ldr	r0, [pc, #316]	; (8007bb0 <cppLoop+0x2f0>)
 8007a72:	f00c fcb4 	bl	80143de <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007a76:	4b50      	ldr	r3, [pc, #320]	; (8007bb8 <cppLoop+0x2f8>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	f3bf 8f5b 	dmb	ish
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	bf0c      	ite	eq
 8007a88:	2301      	moveq	r3, #1
 8007a8a:	2300      	movne	r3, #0
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d015      	beq.n	8007abe <cppLoop+0x1fe>
 8007a92:	4849      	ldr	r0, [pc, #292]	; (8007bb8 <cppLoop+0x2f8>)
 8007a94:	f00c fc97 	bl	80143c6 <__cxa_guard_acquire>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	bf14      	ite	ne
 8007a9e:	2301      	movne	r3, #1
 8007aa0:	2300      	moveq	r3, #0
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00a      	beq.n	8007abe <cppLoop+0x1fe>
 8007aa8:	4837      	ldr	r0, [pc, #220]	; (8007b88 <cppLoop+0x2c8>)
 8007aaa:	f7fc f825 	bl	8003af8 <_ZN9LineTrace17getTargetVelocityEv>
 8007aae:	eef0 7a40 	vmov.f32	s15, s0
 8007ab2:	4b42      	ldr	r3, [pc, #264]	; (8007bbc <cppLoop+0x2fc>)
 8007ab4:	edc3 7a00 	vstr	s15, [r3]
 8007ab8:	483f      	ldr	r0, [pc, #252]	; (8007bb8 <cppLoop+0x2f8>)
 8007aba:	f00c fc90 	bl	80143de <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007abe:	4b40      	ldr	r3, [pc, #256]	; (8007bc0 <cppLoop+0x300>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	f3bf 8f5b 	dmb	ish
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	bf0c      	ite	eq
 8007ad0:	2301      	moveq	r3, #1
 8007ad2:	2300      	movne	r3, #0
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d015      	beq.n	8007b06 <cppLoop+0x246>
 8007ada:	4839      	ldr	r0, [pc, #228]	; (8007bc0 <cppLoop+0x300>)
 8007adc:	f00c fc73 	bl	80143c6 <__cxa_guard_acquire>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	bf14      	ite	ne
 8007ae6:	2301      	movne	r3, #1
 8007ae8:	2300      	moveq	r3, #0
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00a      	beq.n	8007b06 <cppLoop+0x246>
 8007af0:	4825      	ldr	r0, [pc, #148]	; (8007b88 <cppLoop+0x2c8>)
 8007af2:	f7fc f811 	bl	8003b18 <_ZN9LineTrace14getMaxVelocityEv>
 8007af6:	eef0 7a40 	vmov.f32	s15, s0
 8007afa:	4b32      	ldr	r3, [pc, #200]	; (8007bc4 <cppLoop+0x304>)
 8007afc:	edc3 7a00 	vstr	s15, [r3]
 8007b00:	482f      	ldr	r0, [pc, #188]	; (8007bc0 <cppLoop+0x300>)
 8007b02:	f00c fc6c 	bl	80143de <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007b06:	4b30      	ldr	r3, [pc, #192]	; (8007bc8 <cppLoop+0x308>)
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	f3bf 8f5b 	dmb	ish
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	f003 0301 	and.w	r3, r3, #1
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	bf0c      	ite	eq
 8007b18:	2301      	moveq	r3, #1
 8007b1a:	2300      	movne	r3, #0
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d015      	beq.n	8007b4e <cppLoop+0x28e>
 8007b22:	4829      	ldr	r0, [pc, #164]	; (8007bc8 <cppLoop+0x308>)
 8007b24:	f00c fc4f 	bl	80143c6 <__cxa_guard_acquire>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	bf14      	ite	ne
 8007b2e:	2301      	movne	r3, #1
 8007b30:	2300      	moveq	r3, #0
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00a      	beq.n	8007b4e <cppLoop+0x28e>
 8007b38:	4813      	ldr	r0, [pc, #76]	; (8007b88 <cppLoop+0x2c8>)
 8007b3a:	f7fb fffd 	bl	8003b38 <_ZN9LineTrace15getMaxVelocity2Ev>
 8007b3e:	eef0 7a40 	vmov.f32	s15, s0
 8007b42:	4b22      	ldr	r3, [pc, #136]	; (8007bcc <cppLoop+0x30c>)
 8007b44:	edc3 7a00 	vstr	s15, [r3]
 8007b48:	481f      	ldr	r0, [pc, #124]	; (8007bc8 <cppLoop+0x308>)
 8007b4a:	f00c fc48 	bl	80143de <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007b4e:	4b20      	ldr	r3, [pc, #128]	; (8007bd0 <cppLoop+0x310>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	f3bf 8f5b 	dmb	ish
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	bf0c      	ite	eq
 8007b60:	2301      	moveq	r3, #1
 8007b62:	2300      	movne	r3, #0
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d03f      	beq.n	8007bea <cppLoop+0x32a>
 8007b6a:	4819      	ldr	r0, [pc, #100]	; (8007bd0 <cppLoop+0x310>)
 8007b6c:	f00c fc2b 	bl	80143c6 <__cxa_guard_acquire>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	bf14      	ite	ne
 8007b76:	2301      	movne	r3, #1
 8007b78:	2300      	moveq	r3, #0
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d034      	beq.n	8007bea <cppLoop+0x32a>
 8007b80:	e028      	b.n	8007bd4 <cppLoop+0x314>
 8007b82:	bf00      	nop
 8007b84:	2003d404 	.word	0x2003d404
 8007b88:	20017da0 	.word	0x20017da0
 8007b8c:	2003d400 	.word	0x2003d400
 8007b90:	2003d40c 	.word	0x2003d40c
 8007b94:	2003d408 	.word	0x2003d408
 8007b98:	2003d414 	.word	0x2003d414
 8007b9c:	2003d410 	.word	0x2003d410
 8007ba0:	2003d41c 	.word	0x2003d41c
 8007ba4:	2003d418 	.word	0x2003d418
 8007ba8:	2003d424 	.word	0x2003d424
 8007bac:	2003d420 	.word	0x2003d420
 8007bb0:	2003d42c 	.word	0x2003d42c
 8007bb4:	2003d428 	.word	0x2003d428
 8007bb8:	2003d434 	.word	0x2003d434
 8007bbc:	2003d430 	.word	0x2003d430
 8007bc0:	2003d43c 	.word	0x2003d43c
 8007bc4:	2003d438 	.word	0x2003d438
 8007bc8:	2003d444 	.word	0x2003d444
 8007bcc:	2003d440 	.word	0x2003d440
 8007bd0:	2003d44c 	.word	0x2003d44c
 8007bd4:	48ae      	ldr	r0, [pc, #696]	; (8007e90 <cppLoop+0x5d0>)
 8007bd6:	f7fb ffbf 	bl	8003b58 <_ZN9LineTrace14getMinVelocityEv>
 8007bda:	eef0 7a40 	vmov.f32	s15, s0
 8007bde:	4bad      	ldr	r3, [pc, #692]	; (8007e94 <cppLoop+0x5d4>)
 8007be0:	edc3 7a00 	vstr	s15, [r3]
 8007be4:	48ac      	ldr	r0, [pc, #688]	; (8007e98 <cppLoop+0x5d8>)
 8007be6:	f00c fbfa 	bl	80143de <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007bea:	4bac      	ldr	r3, [pc, #688]	; (8007e9c <cppLoop+0x5dc>)
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	f3bf 8f5b 	dmb	ish
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	f003 0301 	and.w	r3, r3, #1
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	bf0c      	ite	eq
 8007bfc:	2301      	moveq	r3, #1
 8007bfe:	2300      	movne	r3, #0
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d015      	beq.n	8007c32 <cppLoop+0x372>
 8007c06:	48a5      	ldr	r0, [pc, #660]	; (8007e9c <cppLoop+0x5dc>)
 8007c08:	f00c fbdd 	bl	80143c6 <__cxa_guard_acquire>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	bf14      	ite	ne
 8007c12:	2301      	movne	r3, #1
 8007c14:	2300      	moveq	r3, #0
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00a      	beq.n	8007c32 <cppLoop+0x372>
 8007c1c:	489c      	ldr	r0, [pc, #624]	; (8007e90 <cppLoop+0x5d0>)
 8007c1e:	f7fb ffab 	bl	8003b78 <_ZN9LineTrace15getMinVelocity2Ev>
 8007c22:	eef0 7a40 	vmov.f32	s15, s0
 8007c26:	4b9e      	ldr	r3, [pc, #632]	; (8007ea0 <cppLoop+0x5e0>)
 8007c28:	edc3 7a00 	vstr	s15, [r3]
 8007c2c:	489b      	ldr	r0, [pc, #620]	; (8007e9c <cppLoop+0x5dc>)
 8007c2e:	f00c fbd6 	bl	80143de <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007c32:	4b9c      	ldr	r3, [pc, #624]	; (8007ea4 <cppLoop+0x5e4>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	f3bf 8f5b 	dmb	ish
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	f003 0301 	and.w	r3, r3, #1
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	bf0c      	ite	eq
 8007c44:	2301      	moveq	r3, #1
 8007c46:	2300      	movne	r3, #0
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d015      	beq.n	8007c7a <cppLoop+0x3ba>
 8007c4e:	4895      	ldr	r0, [pc, #596]	; (8007ea4 <cppLoop+0x5e4>)
 8007c50:	f00c fbb9 	bl	80143c6 <__cxa_guard_acquire>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	bf14      	ite	ne
 8007c5a:	2301      	movne	r3, #1
 8007c5c:	2300      	moveq	r3, #0
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00a      	beq.n	8007c7a <cppLoop+0x3ba>
 8007c64:	488a      	ldr	r0, [pc, #552]	; (8007e90 <cppLoop+0x5d0>)
 8007c66:	f7fb ffcb 	bl	8003c00 <_ZN9LineTrace9getMaxAccEv>
 8007c6a:	eef0 7a40 	vmov.f32	s15, s0
 8007c6e:	4b8e      	ldr	r3, [pc, #568]	; (8007ea8 <cppLoop+0x5e8>)
 8007c70:	edc3 7a00 	vstr	s15, [r3]
 8007c74:	488b      	ldr	r0, [pc, #556]	; (8007ea4 <cppLoop+0x5e4>)
 8007c76:	f00c fbb2 	bl	80143de <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007c7a:	4b8c      	ldr	r3, [pc, #560]	; (8007eac <cppLoop+0x5ec>)
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	f3bf 8f5b 	dmb	ish
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	f003 0301 	and.w	r3, r3, #1
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	bf0c      	ite	eq
 8007c8c:	2301      	moveq	r3, #1
 8007c8e:	2300      	movne	r3, #0
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d015      	beq.n	8007cc2 <cppLoop+0x402>
 8007c96:	4885      	ldr	r0, [pc, #532]	; (8007eac <cppLoop+0x5ec>)
 8007c98:	f00c fb95 	bl	80143c6 <__cxa_guard_acquire>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	bf14      	ite	ne
 8007ca2:	2301      	movne	r3, #1
 8007ca4:	2300      	moveq	r3, #0
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00a      	beq.n	8007cc2 <cppLoop+0x402>
 8007cac:	4878      	ldr	r0, [pc, #480]	; (8007e90 <cppLoop+0x5d0>)
 8007cae:	f7fb ffdd 	bl	8003c6c <_ZN9LineTrace9getMaxDecEv>
 8007cb2:	eef0 7a40 	vmov.f32	s15, s0
 8007cb6:	4b7e      	ldr	r3, [pc, #504]	; (8007eb0 <cppLoop+0x5f0>)
 8007cb8:	edc3 7a00 	vstr	s15, [r3]
 8007cbc:	487b      	ldr	r0, [pc, #492]	; (8007eac <cppLoop+0x5ec>)
 8007cbe:	f00c fb8e 	bl	80143de <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007cc2:	4b7c      	ldr	r3, [pc, #496]	; (8007eb4 <cppLoop+0x5f4>)
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	f3bf 8f5b 	dmb	ish
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	f003 0301 	and.w	r3, r3, #1
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	bf0c      	ite	eq
 8007cd4:	2301      	moveq	r3, #1
 8007cd6:	2300      	movne	r3, #0
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d015      	beq.n	8007d0a <cppLoop+0x44a>
 8007cde:	4875      	ldr	r0, [pc, #468]	; (8007eb4 <cppLoop+0x5f4>)
 8007ce0:	f00c fb71 	bl	80143c6 <__cxa_guard_acquire>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	bf14      	ite	ne
 8007cea:	2301      	movne	r3, #1
 8007cec:	2300      	moveq	r3, #0
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00a      	beq.n	8007d0a <cppLoop+0x44a>
 8007cf4:	4866      	ldr	r0, [pc, #408]	; (8007e90 <cppLoop+0x5d0>)
 8007cf6:	f7fb ffa7 	bl	8003c48 <_ZN9LineTrace10getMaxAcc2Ev>
 8007cfa:	eef0 7a40 	vmov.f32	s15, s0
 8007cfe:	4b6e      	ldr	r3, [pc, #440]	; (8007eb8 <cppLoop+0x5f8>)
 8007d00:	edc3 7a00 	vstr	s15, [r3]
 8007d04:	486b      	ldr	r0, [pc, #428]	; (8007eb4 <cppLoop+0x5f4>)
 8007d06:	f00c fb6a 	bl	80143de <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007d0a:	4b6c      	ldr	r3, [pc, #432]	; (8007ebc <cppLoop+0x5fc>)
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	f3bf 8f5b 	dmb	ish
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	bf0c      	ite	eq
 8007d1c:	2301      	moveq	r3, #1
 8007d1e:	2300      	movne	r3, #0
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d015      	beq.n	8007d52 <cppLoop+0x492>
 8007d26:	4865      	ldr	r0, [pc, #404]	; (8007ebc <cppLoop+0x5fc>)
 8007d28:	f00c fb4d 	bl	80143c6 <__cxa_guard_acquire>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	bf14      	ite	ne
 8007d32:	2301      	movne	r3, #1
 8007d34:	2300      	moveq	r3, #0
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00a      	beq.n	8007d52 <cppLoop+0x492>
 8007d3c:	4854      	ldr	r0, [pc, #336]	; (8007e90 <cppLoop+0x5d0>)
 8007d3e:	f7fb ff71 	bl	8003c24 <_ZN9LineTrace10getMaxDec2Ev>
 8007d42:	eef0 7a40 	vmov.f32	s15, s0
 8007d46:	4b5e      	ldr	r3, [pc, #376]	; (8007ec0 <cppLoop+0x600>)
 8007d48:	edc3 7a00 	vstr	s15, [r3]
 8007d4c:	485b      	ldr	r0, [pc, #364]	; (8007ebc <cppLoop+0x5fc>)
 8007d4e:	f00c fb46 	bl	80143de <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007d52:	485c      	ldr	r0, [pc, #368]	; (8007ec4 <cppLoop+0x604>)
 8007d54:	f7fd fa36 	bl	80051c4 <_ZN12RotarySwitch8getValueEv>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b0f      	cmp	r3, #15
 8007d5c:	f201 84c9 	bhi.w	80096f2 <cppLoop+0x1e32>
 8007d60:	a201      	add	r2, pc, #4	; (adr r2, 8007d68 <cppLoop+0x4a8>)
 8007d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d66:	bf00      	nop
 8007d68:	08007da9 	.word	0x08007da9
 8007d6c:	0800818d 	.word	0x0800818d
 8007d70:	0800821d 	.word	0x0800821d
 8007d74:	0800836b 	.word	0x0800836b
 8007d78:	08008469 	.word	0x08008469
 8007d7c:	080086e5 	.word	0x080086e5
 8007d80:	080087a9 	.word	0x080087a9
 8007d84:	08008a21 	.word	0x08008a21
 8007d88:	08008cad 	.word	0x08008cad
 8007d8c:	08008f25 	.word	0x08008f25
 8007d90:	080092a7 	.word	0x080092a7
 8007d94:	08009347 	.word	0x08009347
 8007d98:	080093e3 	.word	0x080093e3
 8007d9c:	0800947d 	.word	0x0800947d
 8007da0:	0800958d 	.word	0x0800958d
 8007da4:	08009641 	.word	0x08009641
	case 0:
		led.fullColor('W');
 8007da8:	2157      	movs	r1, #87	; 0x57
 8007daa:	4847      	ldr	r0, [pc, #284]	; (8007ec8 <cppLoop+0x608>)
 8007dac:	f7fa f866 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 8007db0:	f7f9 f9a8 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 8007db4:	2100      	movs	r1, #0
 8007db6:	2000      	movs	r0, #0
 8007db8:	f7f9 f9b4 	bl	8001124 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8007dbc:	4834      	ldr	r0, [pc, #208]	; (8007e90 <cppLoop+0x5d0>)
 8007dbe:	f7fb fdf1 	bl	80039a4 <_ZN9LineTrace5getKpEv>
 8007dc2:	eef0 7a40 	vmov.f32	s15, s0
 8007dc6:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8007ecc <cppLoop+0x60c>
 8007dca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007dce:	ee17 0a90 	vmov	r0, s15
 8007dd2:	f7f8 fbd1 	bl	8000578 <__aeabi_f2d>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	460b      	mov	r3, r1
 8007dda:	483d      	ldr	r0, [pc, #244]	; (8007ed0 <cppLoop+0x610>)
 8007ddc:	f7f9 f9cd 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 8007de0:	2101      	movs	r1, #1
 8007de2:	2000      	movs	r0, #0
 8007de4:	f7f9 f99e 	bl	8001124 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8007de8:	4829      	ldr	r0, [pc, #164]	; (8007e90 <cppLoop+0x5d0>)
 8007dea:	f7fb fdea 	bl	80039c2 <_ZN9LineTrace5getKiEv>
 8007dee:	eef0 7a40 	vmov.f32	s15, s0
 8007df2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007ed4 <cppLoop+0x614>
 8007df6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007dfa:	ee17 0a90 	vmov	r0, s15
 8007dfe:	f7f8 fbbb 	bl	8000578 <__aeabi_f2d>
 8007e02:	4604      	mov	r4, r0
 8007e04:	460d      	mov	r5, r1
 8007e06:	4822      	ldr	r0, [pc, #136]	; (8007e90 <cppLoop+0x5d0>)
 8007e08:	f7fb fdea 	bl	80039e0 <_ZN9LineTrace5getKdEv>
 8007e0c:	eef0 7a40 	vmov.f32	s15, s0
 8007e10:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007ed8 <cppLoop+0x618>
 8007e14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e18:	ee17 0a90 	vmov	r0, s15
 8007e1c:	f7f8 fbac 	bl	8000578 <__aeabi_f2d>
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	e9cd 2300 	strd	r2, r3, [sp]
 8007e28:	4622      	mov	r2, r4
 8007e2a:	462b      	mov	r3, r5
 8007e2c:	482b      	ldr	r0, [pc, #172]	; (8007edc <cppLoop+0x61c>)
 8007e2e:	f7f9 f9a4 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007e32:	482b      	ldr	r0, [pc, #172]	; (8007ee0 <cppLoop+0x620>)
 8007e34:	f7f9 ffbe 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b08      	cmp	r3, #8
 8007e3c:	bf0c      	ite	eq
 8007e3e:	2301      	moveq	r3, #1
 8007e40:	2300      	movne	r3, #0
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d04f      	beq.n	8007ee8 <cppLoop+0x628>
			led.LR(-1, 1);
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f04f 31ff 	mov.w	r1, #4294967295
 8007e4e:	481e      	ldr	r0, [pc, #120]	; (8007ec8 <cppLoop+0x608>)
 8007e50:	f7fa f8d0 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007e54:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e58:	f001 fd8c 	bl	8009974 <HAL_Delay>

			selector++;
 8007e5c:	4b21      	ldr	r3, [pc, #132]	; (8007ee4 <cppLoop+0x624>)
 8007e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	3301      	adds	r3, #1
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	b21a      	sxth	r2, r3
 8007e6a:	4b1e      	ldr	r3, [pc, #120]	; (8007ee4 <cppLoop+0x624>)
 8007e6c:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007e6e:	4b1d      	ldr	r3, [pc, #116]	; (8007ee4 <cppLoop+0x624>)
 8007e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	dd02      	ble.n	8007e7e <cppLoop+0x5be>
 8007e78:	4b1a      	ldr	r3, [pc, #104]	; (8007ee4 <cppLoop+0x624>)
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f04f 31ff 	mov.w	r1, #4294967295
 8007e84:	4810      	ldr	r0, [pc, #64]	; (8007ec8 <cppLoop+0x608>)
 8007e86:	f7fa f8b5 	bl	8001ff4 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8007e8a:	f001 bc34 	b.w	80096f6 <cppLoop+0x1e36>
 8007e8e:	bf00      	nop
 8007e90:	20017da0 	.word	0x20017da0
 8007e94:	2003d448 	.word	0x2003d448
 8007e98:	2003d44c 	.word	0x2003d44c
 8007e9c:	2003d454 	.word	0x2003d454
 8007ea0:	2003d450 	.word	0x2003d450
 8007ea4:	2003d45c 	.word	0x2003d45c
 8007ea8:	2003d458 	.word	0x2003d458
 8007eac:	2003d464 	.word	0x2003d464
 8007eb0:	2003d460 	.word	0x2003d460
 8007eb4:	2003d46c 	.word	0x2003d46c
 8007eb8:	2003d468 	.word	0x2003d468
 8007ebc:	2003d474 	.word	0x2003d474
 8007ec0:	2003d470 	.word	0x2003d470
 8007ec4:	200005c4 	.word	0x200005c4
 8007ec8:	200005cc 	.word	0x200005cc
 8007ecc:	447a0000 	.word	0x447a0000
 8007ed0:	0801ab38 	.word	0x0801ab38
 8007ed4:	42c80000 	.word	0x42c80000
 8007ed8:	461c4000 	.word	0x461c4000
 8007edc:	0801ab44 	.word	0x0801ab44
 8007ee0:	200005c0 	.word	0x200005c0
 8007ee4:	2003d3f4 	.word	0x2003d3f4
		else if(joy_stick.getValue() == JOY_R){
 8007ee8:	489d      	ldr	r0, [pc, #628]	; (8008160 <cppLoop+0x8a0>)
 8007eea:	f7f9 ff63 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b10      	cmp	r3, #16
 8007ef2:	bf0c      	ite	eq
 8007ef4:	2301      	moveq	r3, #1
 8007ef6:	2300      	movne	r3, #0
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d059      	beq.n	8007fb2 <cppLoop+0x6f2>
			led.LR(-1, 1);
 8007efe:	2201      	movs	r2, #1
 8007f00:	f04f 31ff 	mov.w	r1, #4294967295
 8007f04:	4897      	ldr	r0, [pc, #604]	; (8008164 <cppLoop+0x8a4>)
 8007f06:	f7fa f875 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007f0a:	2064      	movs	r0, #100	; 0x64
 8007f0c:	f001 fd32 	bl	8009974 <HAL_Delay>
			if(selector == 0){
 8007f10:	4b95      	ldr	r3, [pc, #596]	; (8008168 <cppLoop+0x8a8>)
 8007f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d113      	bne.n	8007f42 <cppLoop+0x682>
				adj_kp = adj_kp + 0.00001;
 8007f1a:	4b94      	ldr	r3, [pc, #592]	; (800816c <cppLoop+0x8ac>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7f8 fb2a 	bl	8000578 <__aeabi_f2d>
 8007f24:	a388      	add	r3, pc, #544	; (adr r3, 8008148 <cppLoop+0x888>)
 8007f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2a:	f7f8 f9c7 	bl	80002bc <__adddf3>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	4610      	mov	r0, r2
 8007f34:	4619      	mov	r1, r3
 8007f36:	f7f8 fe6f 	bl	8000c18 <__aeabi_d2f>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	4a8b      	ldr	r2, [pc, #556]	; (800816c <cppLoop+0x8ac>)
 8007f3e:	6013      	str	r3, [r2, #0]
 8007f40:	e02b      	b.n	8007f9a <cppLoop+0x6da>
			else if(selector == 1){
 8007f42:	4b89      	ldr	r3, [pc, #548]	; (8008168 <cppLoop+0x8a8>)
 8007f44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d113      	bne.n	8007f74 <cppLoop+0x6b4>
				adj_ki = adj_ki + 0.0001;
 8007f4c:	4b88      	ldr	r3, [pc, #544]	; (8008170 <cppLoop+0x8b0>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7f8 fb11 	bl	8000578 <__aeabi_f2d>
 8007f56:	a37e      	add	r3, pc, #504	; (adr r3, 8008150 <cppLoop+0x890>)
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	f7f8 f9ae 	bl	80002bc <__adddf3>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	4610      	mov	r0, r2
 8007f66:	4619      	mov	r1, r3
 8007f68:	f7f8 fe56 	bl	8000c18 <__aeabi_d2f>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	4a80      	ldr	r2, [pc, #512]	; (8008170 <cppLoop+0x8b0>)
 8007f70:	6013      	str	r3, [r2, #0]
 8007f72:	e012      	b.n	8007f9a <cppLoop+0x6da>
				adj_kd = adj_kd + 0.000001;
 8007f74:	4b7f      	ldr	r3, [pc, #508]	; (8008174 <cppLoop+0x8b4>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7f8 fafd 	bl	8000578 <__aeabi_f2d>
 8007f7e:	a376      	add	r3, pc, #472	; (adr r3, 8008158 <cppLoop+0x898>)
 8007f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f84:	f7f8 f99a 	bl	80002bc <__adddf3>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	4619      	mov	r1, r3
 8007f90:	f7f8 fe42 	bl	8000c18 <__aeabi_d2f>
 8007f94:	4603      	mov	r3, r0
 8007f96:	4a77      	ldr	r2, [pc, #476]	; (8008174 <cppLoop+0x8b4>)
 8007f98:	6013      	str	r3, [r2, #0]
			led.fullColor('R');
 8007f9a:	2152      	movs	r1, #82	; 0x52
 8007f9c:	4871      	ldr	r0, [pc, #452]	; (8008164 <cppLoop+0x8a4>)
 8007f9e:	f7f9 ff6d 	bl	8001e7c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8007fa8:	486e      	ldr	r0, [pc, #440]	; (8008164 <cppLoop+0x8a4>)
 8007faa:	f7fa f823 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8007fae:	f001 bba2 	b.w	80096f6 <cppLoop+0x1e36>
		else if(joy_stick.getValue() == JOY_L){
 8007fb2:	486b      	ldr	r0, [pc, #428]	; (8008160 <cppLoop+0x8a0>)
 8007fb4:	f7f9 fefe 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	bf0c      	ite	eq
 8007fbe:	2301      	moveq	r3, #1
 8007fc0:	2300      	movne	r3, #0
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d059      	beq.n	800807c <cppLoop+0x7bc>
			led.LR(-1, 1);
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f04f 31ff 	mov.w	r1, #4294967295
 8007fce:	4865      	ldr	r0, [pc, #404]	; (8008164 <cppLoop+0x8a4>)
 8007fd0:	f7fa f810 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007fd4:	2064      	movs	r0, #100	; 0x64
 8007fd6:	f001 fccd 	bl	8009974 <HAL_Delay>
			if(selector == 0){
 8007fda:	4b63      	ldr	r3, [pc, #396]	; (8008168 <cppLoop+0x8a8>)
 8007fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d113      	bne.n	800800c <cppLoop+0x74c>
				adj_kp = adj_kp - 0.00001;
 8007fe4:	4b61      	ldr	r3, [pc, #388]	; (800816c <cppLoop+0x8ac>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7f8 fac5 	bl	8000578 <__aeabi_f2d>
 8007fee:	a356      	add	r3, pc, #344	; (adr r3, 8008148 <cppLoop+0x888>)
 8007ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff4:	f7f8 f960 	bl	80002b8 <__aeabi_dsub>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	4619      	mov	r1, r3
 8008000:	f7f8 fe0a 	bl	8000c18 <__aeabi_d2f>
 8008004:	4603      	mov	r3, r0
 8008006:	4a59      	ldr	r2, [pc, #356]	; (800816c <cppLoop+0x8ac>)
 8008008:	6013      	str	r3, [r2, #0]
 800800a:	e02b      	b.n	8008064 <cppLoop+0x7a4>
			else if(selector == 1){
 800800c:	4b56      	ldr	r3, [pc, #344]	; (8008168 <cppLoop+0x8a8>)
 800800e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008012:	2b01      	cmp	r3, #1
 8008014:	d113      	bne.n	800803e <cppLoop+0x77e>
				adj_ki = adj_ki - 0.0001;
 8008016:	4b56      	ldr	r3, [pc, #344]	; (8008170 <cppLoop+0x8b0>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4618      	mov	r0, r3
 800801c:	f7f8 faac 	bl	8000578 <__aeabi_f2d>
 8008020:	a34b      	add	r3, pc, #300	; (adr r3, 8008150 <cppLoop+0x890>)
 8008022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008026:	f7f8 f947 	bl	80002b8 <__aeabi_dsub>
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	4610      	mov	r0, r2
 8008030:	4619      	mov	r1, r3
 8008032:	f7f8 fdf1 	bl	8000c18 <__aeabi_d2f>
 8008036:	4603      	mov	r3, r0
 8008038:	4a4d      	ldr	r2, [pc, #308]	; (8008170 <cppLoop+0x8b0>)
 800803a:	6013      	str	r3, [r2, #0]
 800803c:	e012      	b.n	8008064 <cppLoop+0x7a4>
				adj_kd = adj_kd - 0.000001;
 800803e:	4b4d      	ldr	r3, [pc, #308]	; (8008174 <cppLoop+0x8b4>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4618      	mov	r0, r3
 8008044:	f7f8 fa98 	bl	8000578 <__aeabi_f2d>
 8008048:	a343      	add	r3, pc, #268	; (adr r3, 8008158 <cppLoop+0x898>)
 800804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804e:	f7f8 f933 	bl	80002b8 <__aeabi_dsub>
 8008052:	4602      	mov	r2, r0
 8008054:	460b      	mov	r3, r1
 8008056:	4610      	mov	r0, r2
 8008058:	4619      	mov	r1, r3
 800805a:	f7f8 fddd 	bl	8000c18 <__aeabi_d2f>
 800805e:	4603      	mov	r3, r0
 8008060:	4a44      	ldr	r2, [pc, #272]	; (8008174 <cppLoop+0x8b4>)
 8008062:	6013      	str	r3, [r2, #0]
			led.fullColor('R');
 8008064:	2152      	movs	r1, #82	; 0x52
 8008066:	483f      	ldr	r0, [pc, #252]	; (8008164 <cppLoop+0x8a4>)
 8008068:	f7f9 ff08 	bl	8001e7c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800806c:	2200      	movs	r2, #0
 800806e:	f04f 31ff 	mov.w	r1, #4294967295
 8008072:	483c      	ldr	r0, [pc, #240]	; (8008164 <cppLoop+0x8a4>)
 8008074:	f7f9 ffbe 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008078:	f001 bb3d 	b.w	80096f6 <cppLoop+0x1e36>
		else if(joy_stick.getValue() == JOY_D){
 800807c:	4838      	ldr	r0, [pc, #224]	; (8008160 <cppLoop+0x8a0>)
 800807e:	f7f9 fe99 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008082:	4603      	mov	r3, r0
 8008084:	2b04      	cmp	r3, #4
 8008086:	bf0c      	ite	eq
 8008088:	2301      	moveq	r3, #1
 800808a:	2300      	movne	r3, #0
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b00      	cmp	r3, #0
 8008090:	d011      	beq.n	80080b6 <cppLoop+0x7f6>
			led.LR(-1, 1);
 8008092:	2201      	movs	r2, #1
 8008094:	f04f 31ff 	mov.w	r1, #4294967295
 8008098:	4832      	ldr	r0, [pc, #200]	; (8008164 <cppLoop+0x8a4>)
 800809a:	f7f9 ffab 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800809e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80080a2:	f001 fc67 	bl	8009974 <HAL_Delay>
			led.LR(-1, 0);
 80080a6:	2200      	movs	r2, #0
 80080a8:	f04f 31ff 	mov.w	r1, #4294967295
 80080ac:	482d      	ldr	r0, [pc, #180]	; (8008164 <cppLoop+0x8a4>)
 80080ae:	f7f9 ffa1 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 80080b2:	f001 bb20 	b.w	80096f6 <cppLoop+0x1e36>
		else if(joy_stick.getValue() == JOY_C){
 80080b6:	482a      	ldr	r0, [pc, #168]	; (8008160 <cppLoop+0x8a0>)
 80080b8:	f7f9 fe7c 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b02      	cmp	r3, #2
 80080c0:	bf0c      	ite	eq
 80080c2:	2301      	moveq	r3, #1
 80080c4:	2300      	movne	r3, #0
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f001 8314 	beq.w	80096f6 <cppLoop+0x1e36>
			led.LR(-1, 1);
 80080ce:	2201      	movs	r2, #1
 80080d0:	f04f 31ff 	mov.w	r1, #4294967295
 80080d4:	4823      	ldr	r0, [pc, #140]	; (8008164 <cppLoop+0x8a4>)
 80080d6:	f7f9 ff8d 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80080da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80080de:	f001 fc49 	bl	8009974 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 80080e2:	2300      	movs	r3, #0
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	4b21      	ldr	r3, [pc, #132]	; (800816c <cppLoop+0x8ac>)
 80080e8:	2201      	movs	r2, #1
 80080ea:	4923      	ldr	r1, [pc, #140]	; (8008178 <cppLoop+0x8b8>)
 80080ec:	4823      	ldr	r0, [pc, #140]	; (800817c <cppLoop+0x8bc>)
 80080ee:	f7f9 fa45 	bl	800157c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 80080f2:	2300      	movs	r3, #0
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	4b1e      	ldr	r3, [pc, #120]	; (8008170 <cppLoop+0x8b0>)
 80080f8:	2201      	movs	r2, #1
 80080fa:	4921      	ldr	r1, [pc, #132]	; (8008180 <cppLoop+0x8c0>)
 80080fc:	481f      	ldr	r0, [pc, #124]	; (800817c <cppLoop+0x8bc>)
 80080fe:	f7f9 fa3d 	bl	800157c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8008102:	2300      	movs	r3, #0
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	4b1b      	ldr	r3, [pc, #108]	; (8008174 <cppLoop+0x8b4>)
 8008108:	2201      	movs	r2, #1
 800810a:	491e      	ldr	r1, [pc, #120]	; (8008184 <cppLoop+0x8c4>)
 800810c:	481b      	ldr	r0, [pc, #108]	; (800817c <cppLoop+0x8bc>)
 800810e:	f7f9 fa35 	bl	800157c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8008112:	4b16      	ldr	r3, [pc, #88]	; (800816c <cppLoop+0x8ac>)
 8008114:	edd3 7a00 	vldr	s15, [r3]
 8008118:	4b15      	ldr	r3, [pc, #84]	; (8008170 <cppLoop+0x8b0>)
 800811a:	ed93 7a00 	vldr	s14, [r3]
 800811e:	4b15      	ldr	r3, [pc, #84]	; (8008174 <cppLoop+0x8b4>)
 8008120:	edd3 6a00 	vldr	s13, [r3]
 8008124:	eeb0 1a66 	vmov.f32	s2, s13
 8008128:	eef0 0a47 	vmov.f32	s1, s14
 800812c:	eeb0 0a67 	vmov.f32	s0, s15
 8008130:	4815      	ldr	r0, [pc, #84]	; (8008188 <cppLoop+0x8c8>)
 8008132:	f7fb fc05 	bl	8003940 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8008136:	2200      	movs	r2, #0
 8008138:	f04f 31ff 	mov.w	r1, #4294967295
 800813c:	4809      	ldr	r0, [pc, #36]	; (8008164 <cppLoop+0x8a4>)
 800813e:	f7f9 ff59 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008142:	f001 bad8 	b.w	80096f6 <cppLoop+0x1e36>
 8008146:	bf00      	nop
 8008148:	88e368f1 	.word	0x88e368f1
 800814c:	3ee4f8b5 	.word	0x3ee4f8b5
 8008150:	eb1c432d 	.word	0xeb1c432d
 8008154:	3f1a36e2 	.word	0x3f1a36e2
 8008158:	a0b5ed8d 	.word	0xa0b5ed8d
 800815c:	3eb0c6f7 	.word	0x3eb0c6f7
 8008160:	200005c0 	.word	0x200005c0
 8008164:	200005cc 	.word	0x200005cc
 8008168:	2003d3f4 	.word	0x2003d3f4
 800816c:	2003d400 	.word	0x2003d400
 8008170:	2003d408 	.word	0x2003d408
 8008174:	2003d410 	.word	0x2003d410
 8008178:	0801ab54 	.word	0x0801ab54
 800817c:	0801ab5c 	.word	0x0801ab5c
 8008180:	0801ab64 	.word	0x0801ab64
 8008184:	0801ab6c 	.word	0x0801ab6c
 8008188:	20017da0 	.word	0x20017da0

	case 1:
		led.fullColor('C');
 800818c:	2143      	movs	r1, #67	; 0x43
 800818e:	48aa      	ldr	r0, [pc, #680]	; (8008438 <cppLoop+0xb78>)
 8008190:	f7f9 fe74 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008194:	f7f8 ffb6 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 8008198:	2100      	movs	r1, #0
 800819a:	2000      	movs	r0, #0
 800819c:	f7f8 ffc2 	bl	8001124 <lcd_locate>
		lcd_printf("FirstRun");
 80081a0:	48a6      	ldr	r0, [pc, #664]	; (800843c <cppLoop+0xb7c>)
 80081a2:	f7f8 ffea 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 80081a6:	2101      	movs	r1, #1
 80081a8:	2000      	movs	r0, #0
 80081aa:	f7f8 ffbb 	bl	8001124 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 80081ae:	4ba4      	ldr	r3, [pc, #656]	; (8008440 <cppLoop+0xb80>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7f8 f9e0 	bl	8000578 <__aeabi_f2d>
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	48a1      	ldr	r0, [pc, #644]	; (8008444 <cppLoop+0xb84>)
 80081be:	f7f8 ffdc 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80081c2:	48a1      	ldr	r0, [pc, #644]	; (8008448 <cppLoop+0xb88>)
 80081c4:	f7f9 fdf6 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	bf0c      	ite	eq
 80081ce:	2301      	moveq	r3, #1
 80081d0:	2300      	movne	r3, #0
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f001 8290 	beq.w	80096fa <cppLoop+0x1e3a>
			HAL_Delay(500);
 80081da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80081de:	f001 fbc9 	bl	8009974 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 80081e2:	4b97      	ldr	r3, [pc, #604]	; (8008440 <cppLoop+0xb80>)
 80081e4:	edd3 7a00 	vldr	s15, [r3]
 80081e8:	eeb0 0a67 	vmov.f32	s0, s15
 80081ec:	4897      	ldr	r0, [pc, #604]	; (800844c <cppLoop+0xb8c>)
 80081ee:	f7fb fc33 	bl	8003a58 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 80081f2:	f04f 32ff 	mov.w	r2, #4294967295
 80081f6:	2101      	movs	r1, #1
 80081f8:	488f      	ldr	r0, [pc, #572]	; (8008438 <cppLoop+0xb78>)
 80081fa:	f7f9 fefb 	bl	8001ff4 <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 80081fe:	2100      	movs	r1, #0
 8008200:	4892      	ldr	r0, [pc, #584]	; (800844c <cppLoop+0xb8c>)
 8008202:	f7fc f851 	bl	80042a8 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8008206:	4891      	ldr	r0, [pc, #580]	; (800844c <cppLoop+0xb8c>)
 8008208:	f7fb ff50 	bl	80040ac <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 800820c:	f04f 32ff 	mov.w	r2, #4294967295
 8008210:	2100      	movs	r1, #0
 8008212:	4889      	ldr	r0, [pc, #548]	; (8008438 <cppLoop+0xb78>)
 8008214:	f7f9 feee 	bl	8001ff4 <_ZN3LED2LREaa>
		}

		break;
 8008218:	f001 ba6f 	b.w	80096fa <cppLoop+0x1e3a>

	case 2:
		led.fullColor('B');
 800821c:	2142      	movs	r1, #66	; 0x42
 800821e:	4886      	ldr	r0, [pc, #536]	; (8008438 <cppLoop+0xb78>)
 8008220:	f7f9 fe2c 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008224:	f7f8 ff6e 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 8008228:	2100      	movs	r1, #0
 800822a:	2000      	movs	r0, #0
 800822c:	f7f8 ff7a 	bl	8001124 <lcd_locate>
		lcd_printf("FirstRun");
 8008230:	4882      	ldr	r0, [pc, #520]	; (800843c <cppLoop+0xb7c>)
 8008232:	f7f8 ffa2 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 8008236:	2101      	movs	r1, #1
 8008238:	2000      	movs	r0, #0
 800823a:	f7f8 ff73 	bl	8001124 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 800823e:	4b80      	ldr	r3, [pc, #512]	; (8008440 <cppLoop+0xb80>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4618      	mov	r0, r3
 8008244:	f7f8 f998 	bl	8000578 <__aeabi_f2d>
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	4880      	ldr	r0, [pc, #512]	; (8008450 <cppLoop+0xb90>)
 800824e:	f7f8 ff94 	bl	800117a <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 8008252:	487d      	ldr	r0, [pc, #500]	; (8008448 <cppLoop+0xb88>)
 8008254:	f7f9 fdae 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008258:	4603      	mov	r3, r0
 800825a:	2b10      	cmp	r3, #16
 800825c:	bf0c      	ite	eq
 800825e:	2301      	moveq	r3, #1
 8008260:	2300      	movne	r3, #0
 8008262:	b2db      	uxtb	r3, r3
 8008264:	2b00      	cmp	r3, #0
 8008266:	d023      	beq.n	80082b0 <cppLoop+0x9f0>
			led.LR(-1, 1);
 8008268:	2201      	movs	r2, #1
 800826a:	f04f 31ff 	mov.w	r1, #4294967295
 800826e:	4872      	ldr	r0, [pc, #456]	; (8008438 <cppLoop+0xb78>)
 8008270:	f7f9 fec0 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008274:	2064      	movs	r0, #100	; 0x64
 8008276:	f001 fb7d 	bl	8009974 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 800827a:	4b71      	ldr	r3, [pc, #452]	; (8008440 <cppLoop+0xb80>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4618      	mov	r0, r3
 8008280:	f7f8 f97a 	bl	8000578 <__aeabi_f2d>
 8008284:	a36a      	add	r3, pc, #424	; (adr r3, 8008430 <cppLoop+0xb70>)
 8008286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828a:	f7f8 f817 	bl	80002bc <__adddf3>
 800828e:	4602      	mov	r2, r0
 8008290:	460b      	mov	r3, r1
 8008292:	4610      	mov	r0, r2
 8008294:	4619      	mov	r1, r3
 8008296:	f7f8 fcbf 	bl	8000c18 <__aeabi_d2f>
 800829a:	4603      	mov	r3, r0
 800829c:	4a68      	ldr	r2, [pc, #416]	; (8008440 <cppLoop+0xb80>)
 800829e:	6013      	str	r3, [r2, #0]

			led.LR(-1, 0);
 80082a0:	2200      	movs	r2, #0
 80082a2:	f04f 31ff 	mov.w	r1, #4294967295
 80082a6:	4864      	ldr	r0, [pc, #400]	; (8008438 <cppLoop+0xb78>)
 80082a8:	f7f9 fea4 	bl	8001ff4 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 80082ac:	f001 ba27 	b.w	80096fe <cppLoop+0x1e3e>
		else if(joy_stick.getValue() == JOY_L){
 80082b0:	4865      	ldr	r0, [pc, #404]	; (8008448 <cppLoop+0xb88>)
 80082b2:	f7f9 fd7f 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	bf0c      	ite	eq
 80082bc:	2301      	moveq	r3, #1
 80082be:	2300      	movne	r3, #0
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d023      	beq.n	800830e <cppLoop+0xa4e>
			led.LR(-1, 1);
 80082c6:	2201      	movs	r2, #1
 80082c8:	f04f 31ff 	mov.w	r1, #4294967295
 80082cc:	485a      	ldr	r0, [pc, #360]	; (8008438 <cppLoop+0xb78>)
 80082ce:	f7f9 fe91 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80082d2:	2064      	movs	r0, #100	; 0x64
 80082d4:	f001 fb4e 	bl	8009974 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 80082d8:	4b59      	ldr	r3, [pc, #356]	; (8008440 <cppLoop+0xb80>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4618      	mov	r0, r3
 80082de:	f7f8 f94b 	bl	8000578 <__aeabi_f2d>
 80082e2:	a353      	add	r3, pc, #332	; (adr r3, 8008430 <cppLoop+0xb70>)
 80082e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e8:	f7f7 ffe6 	bl	80002b8 <__aeabi_dsub>
 80082ec:	4602      	mov	r2, r0
 80082ee:	460b      	mov	r3, r1
 80082f0:	4610      	mov	r0, r2
 80082f2:	4619      	mov	r1, r3
 80082f4:	f7f8 fc90 	bl	8000c18 <__aeabi_d2f>
 80082f8:	4603      	mov	r3, r0
 80082fa:	4a51      	ldr	r2, [pc, #324]	; (8008440 <cppLoop+0xb80>)
 80082fc:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 80082fe:	2200      	movs	r2, #0
 8008300:	f04f 31ff 	mov.w	r1, #4294967295
 8008304:	484c      	ldr	r0, [pc, #304]	; (8008438 <cppLoop+0xb78>)
 8008306:	f7f9 fe75 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 800830a:	f001 b9f8 	b.w	80096fe <cppLoop+0x1e3e>
		else if(joy_stick.getValue() == JOY_C){
 800830e:	484e      	ldr	r0, [pc, #312]	; (8008448 <cppLoop+0xb88>)
 8008310:	f7f9 fd50 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008314:	4603      	mov	r3, r0
 8008316:	2b02      	cmp	r3, #2
 8008318:	bf0c      	ite	eq
 800831a:	2301      	moveq	r3, #1
 800831c:	2300      	movne	r3, #0
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b00      	cmp	r3, #0
 8008322:	f001 81ec 	beq.w	80096fe <cppLoop+0x1e3e>
			led.LR(-1, 1);
 8008326:	2201      	movs	r2, #1
 8008328:	f04f 31ff 	mov.w	r1, #4294967295
 800832c:	4842      	ldr	r0, [pc, #264]	; (8008438 <cppLoop+0xb78>)
 800832e:	f7f9 fe61 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008332:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008336:	f001 fb1d 	bl	8009974 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 800833a:	2300      	movs	r3, #0
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	4b40      	ldr	r3, [pc, #256]	; (8008440 <cppLoop+0xb80>)
 8008340:	2201      	movs	r2, #1
 8008342:	4944      	ldr	r1, [pc, #272]	; (8008454 <cppLoop+0xb94>)
 8008344:	4844      	ldr	r0, [pc, #272]	; (8008458 <cppLoop+0xb98>)
 8008346:	f7f9 f919 	bl	800157c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 800834a:	4b3d      	ldr	r3, [pc, #244]	; (8008440 <cppLoop+0xb80>)
 800834c:	edd3 7a00 	vldr	s15, [r3]
 8008350:	eeb0 0a67 	vmov.f32	s0, s15
 8008354:	483d      	ldr	r0, [pc, #244]	; (800844c <cppLoop+0xb8c>)
 8008356:	f7fb fb7f 	bl	8003a58 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 800835a:	2200      	movs	r2, #0
 800835c:	f04f 31ff 	mov.w	r1, #4294967295
 8008360:	4835      	ldr	r0, [pc, #212]	; (8008438 <cppLoop+0xb78>)
 8008362:	f7f9 fe47 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008366:	f001 b9ca 	b.w	80096fe <cppLoop+0x1e3e>

	case 3:
		led.fullColor('Y');
 800836a:	2159      	movs	r1, #89	; 0x59
 800836c:	4832      	ldr	r0, [pc, #200]	; (8008438 <cppLoop+0xb78>)
 800836e:	f7f9 fd85 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008372:	f7f8 fec7 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 8008376:	2100      	movs	r1, #0
 8008378:	2000      	movs	r0, #0
 800837a:	f7f8 fed3 	bl	8001124 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 800837e:	4b37      	ldr	r3, [pc, #220]	; (800845c <cppLoop+0xb9c>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4618      	mov	r0, r3
 8008384:	f7f8 f8f8 	bl	8000578 <__aeabi_f2d>
 8008388:	4602      	mov	r2, r0
 800838a:	460b      	mov	r3, r1
 800838c:	4834      	ldr	r0, [pc, #208]	; (8008460 <cppLoop+0xba0>)
 800838e:	f7f8 fef4 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 8008392:	2101      	movs	r1, #1
 8008394:	2000      	movs	r0, #0
 8008396:	f7f8 fec5 	bl	8001124 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 800839a:	4b32      	ldr	r3, [pc, #200]	; (8008464 <cppLoop+0xba4>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4618      	mov	r0, r3
 80083a0:	f7f8 f8ea 	bl	8000578 <__aeabi_f2d>
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	4826      	ldr	r0, [pc, #152]	; (8008444 <cppLoop+0xb84>)
 80083aa:	f7f8 fee6 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80083ae:	4826      	ldr	r0, [pc, #152]	; (8008448 <cppLoop+0xb88>)
 80083b0:	f7f9 fd00 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	bf0c      	ite	eq
 80083ba:	2301      	moveq	r3, #1
 80083bc:	2300      	movne	r3, #0
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f001 819e 	beq.w	8009702 <cppLoop+0x1e42>
			HAL_Delay(500);
 80083c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80083ca:	f001 fad3 	bl	8009974 <HAL_Delay>

			led.LR(1, -1);
 80083ce:	f04f 32ff 	mov.w	r2, #4294967295
 80083d2:	2101      	movs	r1, #1
 80083d4:	4818      	ldr	r0, [pc, #96]	; (8008438 <cppLoop+0xb78>)
 80083d6:	f7f9 fe0d 	bl	8001ff4 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 80083da:	2101      	movs	r1, #1
 80083dc:	481b      	ldr	r0, [pc, #108]	; (800844c <cppLoop+0xb8c>)
 80083de:	f7fb ff63 	bl	80042a8 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 80083e2:	4b20      	ldr	r3, [pc, #128]	; (8008464 <cppLoop+0xba4>)
 80083e4:	edd3 7a00 	vldr	s15, [r3]
 80083e8:	eeb0 0a67 	vmov.f32	s0, s15
 80083ec:	4817      	ldr	r0, [pc, #92]	; (800844c <cppLoop+0xb8c>)
 80083ee:	f7fb fb33 	bl	8003a58 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80083f2:	4b1a      	ldr	r3, [pc, #104]	; (800845c <cppLoop+0xb9c>)
 80083f4:	edd3 7a00 	vldr	s15, [r3]
 80083f8:	eeb0 0a67 	vmov.f32	s0, s15
 80083fc:	4813      	ldr	r0, [pc, #76]	; (800844c <cppLoop+0xb8c>)
 80083fe:	f7fb fb3b 	bl	8003a78 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008402:	4b18      	ldr	r3, [pc, #96]	; (8008464 <cppLoop+0xba4>)
 8008404:	edd3 7a00 	vldr	s15, [r3]
 8008408:	eeb0 0a67 	vmov.f32	s0, s15
 800840c:	480f      	ldr	r0, [pc, #60]	; (800844c <cppLoop+0xb8c>)
 800840e:	f7fb fb53 	bl	8003ab8 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 8008412:	480e      	ldr	r0, [pc, #56]	; (800844c <cppLoop+0xb8c>)
 8008414:	f7fa fd92 	bl	8002f3c <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008418:	480c      	ldr	r0, [pc, #48]	; (800844c <cppLoop+0xb8c>)
 800841a:	f7fb fe47 	bl	80040ac <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 800841e:	f04f 32ff 	mov.w	r2, #4294967295
 8008422:	2100      	movs	r1, #0
 8008424:	4804      	ldr	r0, [pc, #16]	; (8008438 <cppLoop+0xb78>)
 8008426:	f7f9 fde5 	bl	8001ff4 <_ZN3LED2LREaa>
		}

		break;
 800842a:	f001 b96a 	b.w	8009702 <cppLoop+0x1e42>
 800842e:	bf00      	nop
 8008430:	9999999a 	.word	0x9999999a
 8008434:	3fb99999 	.word	0x3fb99999
 8008438:	200005cc 	.word	0x200005cc
 800843c:	0801ab74 	.word	0x0801ab74
 8008440:	2003d430 	.word	0x2003d430
 8008444:	0801ab80 	.word	0x0801ab80
 8008448:	200005c0 	.word	0x200005c0
 800844c:	20017da0 	.word	0x20017da0
 8008450:	0801ab8c 	.word	0x0801ab8c
 8008454:	0801ab98 	.word	0x0801ab98
 8008458:	0801ab5c 	.word	0x0801ab5c
 800845c:	2003d438 	.word	0x2003d438
 8008460:	0801aba4 	.word	0x0801aba4
 8008464:	2003d448 	.word	0x2003d448

	case 4:
		led.fullColor('G');
 8008468:	2147      	movs	r1, #71	; 0x47
 800846a:	4893      	ldr	r0, [pc, #588]	; (80086b8 <cppLoop+0xdf8>)
 800846c:	f7f9 fd06 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008470:	f7f8 fe48 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 8008474:	2100      	movs	r1, #0
 8008476:	2000      	movs	r0, #0
 8008478:	f7f8 fe54 	bl	8001124 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 800847c:	488f      	ldr	r0, [pc, #572]	; (80086bc <cppLoop+0xdfc>)
 800847e:	f7fb fb4b 	bl	8003b18 <_ZN9LineTrace14getMaxVelocityEv>
 8008482:	ee10 3a10 	vmov	r3, s0
 8008486:	4618      	mov	r0, r3
 8008488:	f7f8 f876 	bl	8000578 <__aeabi_f2d>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	488b      	ldr	r0, [pc, #556]	; (80086c0 <cppLoop+0xe00>)
 8008492:	f7f8 fe72 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 8008496:	2101      	movs	r1, #1
 8008498:	2000      	movs	r0, #0
 800849a:	f7f8 fe43 	bl	8001124 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 800849e:	4887      	ldr	r0, [pc, #540]	; (80086bc <cppLoop+0xdfc>)
 80084a0:	f7fb fb5a 	bl	8003b58 <_ZN9LineTrace14getMinVelocityEv>
 80084a4:	ee10 3a10 	vmov	r3, s0
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7f8 f865 	bl	8000578 <__aeabi_f2d>
 80084ae:	4602      	mov	r2, r0
 80084b0:	460b      	mov	r3, r1
 80084b2:	4884      	ldr	r0, [pc, #528]	; (80086c4 <cppLoop+0xe04>)
 80084b4:	f7f8 fe61 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80084b8:	4883      	ldr	r0, [pc, #524]	; (80086c8 <cppLoop+0xe08>)
 80084ba:	f7f9 fc7b 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b08      	cmp	r3, #8
 80084c2:	bf0c      	ite	eq
 80084c4:	2301      	moveq	r3, #1
 80084c6:	2300      	movne	r3, #0
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d022      	beq.n	8008514 <cppLoop+0xc54>
			led.LR(-1, 1);
 80084ce:	2201      	movs	r2, #1
 80084d0:	f04f 31ff 	mov.w	r1, #4294967295
 80084d4:	4878      	ldr	r0, [pc, #480]	; (80086b8 <cppLoop+0xdf8>)
 80084d6:	f7f9 fd8d 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80084da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80084de:	f001 fa49 	bl	8009974 <HAL_Delay>

			selector_vel++;
 80084e2:	4b7a      	ldr	r3, [pc, #488]	; (80086cc <cppLoop+0xe0c>)
 80084e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	3301      	adds	r3, #1
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	b21a      	sxth	r2, r3
 80084f0:	4b76      	ldr	r3, [pc, #472]	; (80086cc <cppLoop+0xe0c>)
 80084f2:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 80084f4:	4b75      	ldr	r3, [pc, #468]	; (80086cc <cppLoop+0xe0c>)
 80084f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	dd02      	ble.n	8008504 <cppLoop+0xc44>
 80084fe:	4b73      	ldr	r3, [pc, #460]	; (80086cc <cppLoop+0xe0c>)
 8008500:	2200      	movs	r2, #0
 8008502:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008504:	2200      	movs	r2, #0
 8008506:	f04f 31ff 	mov.w	r1, #4294967295
 800850a:	486b      	ldr	r0, [pc, #428]	; (80086b8 <cppLoop+0xdf8>)
 800850c:	f7f9 fd72 	bl	8001ff4 <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 8008510:	f001 b8f9 	b.w	8009706 <cppLoop+0x1e46>
		else if(joy_stick.getValue() == JOY_R){
 8008514:	486c      	ldr	r0, [pc, #432]	; (80086c8 <cppLoop+0xe08>)
 8008516:	f7f9 fc4d 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 800851a:	4603      	mov	r3, r0
 800851c:	2b10      	cmp	r3, #16
 800851e:	bf0c      	ite	eq
 8008520:	2301      	moveq	r3, #1
 8008522:	2300      	movne	r3, #0
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b00      	cmp	r3, #0
 8008528:	d03c      	beq.n	80085a4 <cppLoop+0xce4>
			led.LR(-1, 1);
 800852a:	2201      	movs	r2, #1
 800852c:	f04f 31ff 	mov.w	r1, #4294967295
 8008530:	4861      	ldr	r0, [pc, #388]	; (80086b8 <cppLoop+0xdf8>)
 8008532:	f7f9 fd5f 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008536:	2064      	movs	r0, #100	; 0x64
 8008538:	f001 fa1c 	bl	8009974 <HAL_Delay>
			if(selector_vel == 0)
 800853c:	4b63      	ldr	r3, [pc, #396]	; (80086cc <cppLoop+0xe0c>)
 800853e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d113      	bne.n	800856e <cppLoop+0xcae>
				adj_max_velocity = adj_max_velocity + 0.1;
 8008546:	4b62      	ldr	r3, [pc, #392]	; (80086d0 <cppLoop+0xe10>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4618      	mov	r0, r3
 800854c:	f7f8 f814 	bl	8000578 <__aeabi_f2d>
 8008550:	a357      	add	r3, pc, #348	; (adr r3, 80086b0 <cppLoop+0xdf0>)
 8008552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008556:	f7f7 feb1 	bl	80002bc <__adddf3>
 800855a:	4602      	mov	r2, r0
 800855c:	460b      	mov	r3, r1
 800855e:	4610      	mov	r0, r2
 8008560:	4619      	mov	r1, r3
 8008562:	f7f8 fb59 	bl	8000c18 <__aeabi_d2f>
 8008566:	4603      	mov	r3, r0
 8008568:	4a59      	ldr	r2, [pc, #356]	; (80086d0 <cppLoop+0xe10>)
 800856a:	6013      	str	r3, [r2, #0]
 800856c:	e012      	b.n	8008594 <cppLoop+0xcd4>
				adj_min_velocity = adj_min_velocity + 0.1;
 800856e:	4b59      	ldr	r3, [pc, #356]	; (80086d4 <cppLoop+0xe14>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4618      	mov	r0, r3
 8008574:	f7f8 f800 	bl	8000578 <__aeabi_f2d>
 8008578:	a34d      	add	r3, pc, #308	; (adr r3, 80086b0 <cppLoop+0xdf0>)
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	f7f7 fe9d 	bl	80002bc <__adddf3>
 8008582:	4602      	mov	r2, r0
 8008584:	460b      	mov	r3, r1
 8008586:	4610      	mov	r0, r2
 8008588:	4619      	mov	r1, r3
 800858a:	f7f8 fb45 	bl	8000c18 <__aeabi_d2f>
 800858e:	4603      	mov	r3, r0
 8008590:	4a50      	ldr	r2, [pc, #320]	; (80086d4 <cppLoop+0xe14>)
 8008592:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8008594:	2200      	movs	r2, #0
 8008596:	f04f 31ff 	mov.w	r1, #4294967295
 800859a:	4847      	ldr	r0, [pc, #284]	; (80086b8 <cppLoop+0xdf8>)
 800859c:	f7f9 fd2a 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 80085a0:	f001 b8b1 	b.w	8009706 <cppLoop+0x1e46>
		else if(joy_stick.getValue() == JOY_L){
 80085a4:	4848      	ldr	r0, [pc, #288]	; (80086c8 <cppLoop+0xe08>)
 80085a6:	f7f9 fc05 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	bf0c      	ite	eq
 80085b0:	2301      	moveq	r3, #1
 80085b2:	2300      	movne	r3, #0
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d03c      	beq.n	8008634 <cppLoop+0xd74>
			led.LR(-1, 1);
 80085ba:	2201      	movs	r2, #1
 80085bc:	f04f 31ff 	mov.w	r1, #4294967295
 80085c0:	483d      	ldr	r0, [pc, #244]	; (80086b8 <cppLoop+0xdf8>)
 80085c2:	f7f9 fd17 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80085c6:	2064      	movs	r0, #100	; 0x64
 80085c8:	f001 f9d4 	bl	8009974 <HAL_Delay>
			if(selector_vel == 0)
 80085cc:	4b3f      	ldr	r3, [pc, #252]	; (80086cc <cppLoop+0xe0c>)
 80085ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d113      	bne.n	80085fe <cppLoop+0xd3e>
				adj_max_velocity = adj_max_velocity - 0.1;
 80085d6:	4b3e      	ldr	r3, [pc, #248]	; (80086d0 <cppLoop+0xe10>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4618      	mov	r0, r3
 80085dc:	f7f7 ffcc 	bl	8000578 <__aeabi_f2d>
 80085e0:	a333      	add	r3, pc, #204	; (adr r3, 80086b0 <cppLoop+0xdf0>)
 80085e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e6:	f7f7 fe67 	bl	80002b8 <__aeabi_dsub>
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	4610      	mov	r0, r2
 80085f0:	4619      	mov	r1, r3
 80085f2:	f7f8 fb11 	bl	8000c18 <__aeabi_d2f>
 80085f6:	4603      	mov	r3, r0
 80085f8:	4a35      	ldr	r2, [pc, #212]	; (80086d0 <cppLoop+0xe10>)
 80085fa:	6013      	str	r3, [r2, #0]
 80085fc:	e012      	b.n	8008624 <cppLoop+0xd64>
				adj_min_velocity = adj_min_velocity - 0.1;
 80085fe:	4b35      	ldr	r3, [pc, #212]	; (80086d4 <cppLoop+0xe14>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4618      	mov	r0, r3
 8008604:	f7f7 ffb8 	bl	8000578 <__aeabi_f2d>
 8008608:	a329      	add	r3, pc, #164	; (adr r3, 80086b0 <cppLoop+0xdf0>)
 800860a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860e:	f7f7 fe53 	bl	80002b8 <__aeabi_dsub>
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	4610      	mov	r0, r2
 8008618:	4619      	mov	r1, r3
 800861a:	f7f8 fafd 	bl	8000c18 <__aeabi_d2f>
 800861e:	4603      	mov	r3, r0
 8008620:	4a2c      	ldr	r2, [pc, #176]	; (80086d4 <cppLoop+0xe14>)
 8008622:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8008624:	2200      	movs	r2, #0
 8008626:	f04f 31ff 	mov.w	r1, #4294967295
 800862a:	4823      	ldr	r0, [pc, #140]	; (80086b8 <cppLoop+0xdf8>)
 800862c:	f7f9 fce2 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008630:	f001 b869 	b.w	8009706 <cppLoop+0x1e46>
		else if(joy_stick.getValue() == JOY_C){
 8008634:	4824      	ldr	r0, [pc, #144]	; (80086c8 <cppLoop+0xe08>)
 8008636:	f7f9 fbbd 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 800863a:	4603      	mov	r3, r0
 800863c:	2b02      	cmp	r3, #2
 800863e:	bf0c      	ite	eq
 8008640:	2301      	moveq	r3, #1
 8008642:	2300      	movne	r3, #0
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b00      	cmp	r3, #0
 8008648:	f001 805d 	beq.w	8009706 <cppLoop+0x1e46>
			led.LR(-1, 1);
 800864c:	2201      	movs	r2, #1
 800864e:	f04f 31ff 	mov.w	r1, #4294967295
 8008652:	4819      	ldr	r0, [pc, #100]	; (80086b8 <cppLoop+0xdf8>)
 8008654:	f7f9 fcce 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008658:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800865c:	f001 f98a 	bl	8009974 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008660:	2300      	movs	r3, #0
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	4b1a      	ldr	r3, [pc, #104]	; (80086d0 <cppLoop+0xe10>)
 8008666:	2201      	movs	r2, #1
 8008668:	491b      	ldr	r1, [pc, #108]	; (80086d8 <cppLoop+0xe18>)
 800866a:	481c      	ldr	r0, [pc, #112]	; (80086dc <cppLoop+0xe1c>)
 800866c:	f7f8 ff86 	bl	800157c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008670:	2300      	movs	r3, #0
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	4b17      	ldr	r3, [pc, #92]	; (80086d4 <cppLoop+0xe14>)
 8008676:	2201      	movs	r2, #1
 8008678:	4919      	ldr	r1, [pc, #100]	; (80086e0 <cppLoop+0xe20>)
 800867a:	4818      	ldr	r0, [pc, #96]	; (80086dc <cppLoop+0xe1c>)
 800867c:	f7f8 ff7e 	bl	800157c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008680:	4b13      	ldr	r3, [pc, #76]	; (80086d0 <cppLoop+0xe10>)
 8008682:	edd3 7a00 	vldr	s15, [r3]
 8008686:	eeb0 0a67 	vmov.f32	s0, s15
 800868a:	480c      	ldr	r0, [pc, #48]	; (80086bc <cppLoop+0xdfc>)
 800868c:	f7fb f9f4 	bl	8003a78 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008690:	4b10      	ldr	r3, [pc, #64]	; (80086d4 <cppLoop+0xe14>)
 8008692:	edd3 7a00 	vldr	s15, [r3]
 8008696:	eeb0 0a67 	vmov.f32	s0, s15
 800869a:	4808      	ldr	r0, [pc, #32]	; (80086bc <cppLoop+0xdfc>)
 800869c:	f7fb fa0c 	bl	8003ab8 <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 80086a0:	2200      	movs	r2, #0
 80086a2:	f04f 31ff 	mov.w	r1, #4294967295
 80086a6:	4804      	ldr	r0, [pc, #16]	; (80086b8 <cppLoop+0xdf8>)
 80086a8:	f7f9 fca4 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 80086ac:	f001 b82b 	b.w	8009706 <cppLoop+0x1e46>
 80086b0:	9999999a 	.word	0x9999999a
 80086b4:	3fb99999 	.word	0x3fb99999
 80086b8:	200005cc 	.word	0x200005cc
 80086bc:	20017da0 	.word	0x20017da0
 80086c0:	0801aba4 	.word	0x0801aba4
 80086c4:	0801ab8c 	.word	0x0801ab8c
 80086c8:	200005c0 	.word	0x200005c0
 80086cc:	2003d3fa 	.word	0x2003d3fa
 80086d0:	2003d438 	.word	0x2003d438
 80086d4:	2003d448 	.word	0x2003d448
 80086d8:	0801abb0 	.word	0x0801abb0
 80086dc:	0801ab5c 	.word	0x0801ab5c
 80086e0:	0801abbc 	.word	0x0801abbc

	case 5:
		led.fullColor('M');
 80086e4:	214d      	movs	r1, #77	; 0x4d
 80086e6:	48a6      	ldr	r0, [pc, #664]	; (8008980 <cppLoop+0x10c0>)
 80086e8:	f7f9 fbc8 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 80086ec:	f7f8 fd0a 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 80086f0:	2100      	movs	r1, #0
 80086f2:	2000      	movs	r0, #0
 80086f4:	f7f8 fd16 	bl	8001124 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 80086f8:	4ba2      	ldr	r3, [pc, #648]	; (8008984 <cppLoop+0x10c4>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7f7 ff3b 	bl	8000578 <__aeabi_f2d>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	48a0      	ldr	r0, [pc, #640]	; (8008988 <cppLoop+0x10c8>)
 8008708:	f7f8 fd37 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 800870c:	2101      	movs	r1, #1
 800870e:	2000      	movs	r0, #0
 8008710:	f7f8 fd08 	bl	8001124 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 8008714:	4b9d      	ldr	r3, [pc, #628]	; (800898c <cppLoop+0x10cc>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4618      	mov	r0, r3
 800871a:	f7f7 ff2d 	bl	8000578 <__aeabi_f2d>
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	489b      	ldr	r0, [pc, #620]	; (8008990 <cppLoop+0x10d0>)
 8008724:	f7f8 fd29 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008728:	489a      	ldr	r0, [pc, #616]	; (8008994 <cppLoop+0x10d4>)
 800872a:	f7f9 fb43 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 800872e:	4603      	mov	r3, r0
 8008730:	2b02      	cmp	r3, #2
 8008732:	bf0c      	ite	eq
 8008734:	2301      	moveq	r3, #1
 8008736:	2300      	movne	r3, #0
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	f000 87e5 	beq.w	800970a <cppLoop+0x1e4a>
			HAL_Delay(500);
 8008740:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008744:	f001 f916 	bl	8009974 <HAL_Delay>

			led.LR(1, -1);
 8008748:	f04f 32ff 	mov.w	r2, #4294967295
 800874c:	2101      	movs	r1, #1
 800874e:	488c      	ldr	r0, [pc, #560]	; (8008980 <cppLoop+0x10c0>)
 8008750:	f7f9 fc50 	bl	8001ff4 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8008754:	2102      	movs	r1, #2
 8008756:	4890      	ldr	r0, [pc, #576]	; (8008998 <cppLoop+0x10d8>)
 8008758:	f7fb fda6 	bl	80042a8 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 800875c:	4b8b      	ldr	r3, [pc, #556]	; (800898c <cppLoop+0x10cc>)
 800875e:	edd3 7a00 	vldr	s15, [r3]
 8008762:	eeb0 0a67 	vmov.f32	s0, s15
 8008766:	488c      	ldr	r0, [pc, #560]	; (8008998 <cppLoop+0x10d8>)
 8008768:	f7fb f976 	bl	8003a58 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 800876c:	4b85      	ldr	r3, [pc, #532]	; (8008984 <cppLoop+0x10c4>)
 800876e:	edd3 7a00 	vldr	s15, [r3]
 8008772:	eeb0 0a67 	vmov.f32	s0, s15
 8008776:	4888      	ldr	r0, [pc, #544]	; (8008998 <cppLoop+0x10d8>)
 8008778:	f7fb f98e 	bl	8003a98 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 800877c:	4b83      	ldr	r3, [pc, #524]	; (800898c <cppLoop+0x10cc>)
 800877e:	edd3 7a00 	vldr	s15, [r3]
 8008782:	eeb0 0a67 	vmov.f32	s0, s15
 8008786:	4884      	ldr	r0, [pc, #528]	; (8008998 <cppLoop+0x10d8>)
 8008788:	f7fb f9a6 	bl	8003ad8 <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 800878c:	4882      	ldr	r0, [pc, #520]	; (8008998 <cppLoop+0x10d8>)
 800878e:	f7fa fbd5 	bl	8002f3c <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008792:	4881      	ldr	r0, [pc, #516]	; (8008998 <cppLoop+0x10d8>)
 8008794:	f7fb fc8a 	bl	80040ac <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008798:	f04f 32ff 	mov.w	r2, #4294967295
 800879c:	2100      	movs	r1, #0
 800879e:	4878      	ldr	r0, [pc, #480]	; (8008980 <cppLoop+0x10c0>)
 80087a0:	f7f9 fc28 	bl	8001ff4 <_ZN3LED2LREaa>
		}

		break;
 80087a4:	f000 bfb1 	b.w	800970a <cppLoop+0x1e4a>

	case 6:
		led.fullColor('R');
 80087a8:	2152      	movs	r1, #82	; 0x52
 80087aa:	4875      	ldr	r0, [pc, #468]	; (8008980 <cppLoop+0x10c0>)
 80087ac:	f7f9 fb66 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 80087b0:	f7f8 fca8 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 80087b4:	2100      	movs	r1, #0
 80087b6:	2000      	movs	r0, #0
 80087b8:	f7f8 fcb4 	bl	8001124 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 80087bc:	4876      	ldr	r0, [pc, #472]	; (8008998 <cppLoop+0x10d8>)
 80087be:	f7fb f9bb 	bl	8003b38 <_ZN9LineTrace15getMaxVelocity2Ev>
 80087c2:	ee10 3a10 	vmov	r3, s0
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7f7 fed6 	bl	8000578 <__aeabi_f2d>
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	486d      	ldr	r0, [pc, #436]	; (8008988 <cppLoop+0x10c8>)
 80087d2:	f7f8 fcd2 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 80087d6:	2101      	movs	r1, #1
 80087d8:	2000      	movs	r0, #0
 80087da:	f7f8 fca3 	bl	8001124 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 80087de:	486e      	ldr	r0, [pc, #440]	; (8008998 <cppLoop+0x10d8>)
 80087e0:	f7fb f9ca 	bl	8003b78 <_ZN9LineTrace15getMinVelocity2Ev>
 80087e4:	ee10 3a10 	vmov	r3, s0
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7f7 fec5 	bl	8000578 <__aeabi_f2d>
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	486a      	ldr	r0, [pc, #424]	; (800899c <cppLoop+0x10dc>)
 80087f4:	f7f8 fcc1 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80087f8:	4866      	ldr	r0, [pc, #408]	; (8008994 <cppLoop+0x10d4>)
 80087fa:	f7f9 fadb 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b08      	cmp	r3, #8
 8008802:	bf0c      	ite	eq
 8008804:	2301      	moveq	r3, #1
 8008806:	2300      	movne	r3, #0
 8008808:	b2db      	uxtb	r3, r3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d022      	beq.n	8008854 <cppLoop+0xf94>
			led.LR(-1, 1);
 800880e:	2201      	movs	r2, #1
 8008810:	f04f 31ff 	mov.w	r1, #4294967295
 8008814:	485a      	ldr	r0, [pc, #360]	; (8008980 <cppLoop+0x10c0>)
 8008816:	f7f9 fbed 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800881a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800881e:	f001 f8a9 	bl	8009974 <HAL_Delay>

			selector_vel2++;
 8008822:	4b5f      	ldr	r3, [pc, #380]	; (80089a0 <cppLoop+0x10e0>)
 8008824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008828:	b29b      	uxth	r3, r3
 800882a:	3301      	adds	r3, #1
 800882c:	b29b      	uxth	r3, r3
 800882e:	b21a      	sxth	r2, r3
 8008830:	4b5b      	ldr	r3, [pc, #364]	; (80089a0 <cppLoop+0x10e0>)
 8008832:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008834:	4b5a      	ldr	r3, [pc, #360]	; (80089a0 <cppLoop+0x10e0>)
 8008836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800883a:	2b01      	cmp	r3, #1
 800883c:	dd02      	ble.n	8008844 <cppLoop+0xf84>
 800883e:	4b58      	ldr	r3, [pc, #352]	; (80089a0 <cppLoop+0x10e0>)
 8008840:	2200      	movs	r2, #0
 8008842:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008844:	2200      	movs	r2, #0
 8008846:	f04f 31ff 	mov.w	r1, #4294967295
 800884a:	484d      	ldr	r0, [pc, #308]	; (8008980 <cppLoop+0x10c0>)
 800884c:	f7f9 fbd2 	bl	8001ff4 <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008850:	f000 bf5d 	b.w	800970e <cppLoop+0x1e4e>
		else if(joy_stick.getValue() == JOY_R){
 8008854:	484f      	ldr	r0, [pc, #316]	; (8008994 <cppLoop+0x10d4>)
 8008856:	f7f9 faad 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 800885a:	4603      	mov	r3, r0
 800885c:	2b10      	cmp	r3, #16
 800885e:	bf0c      	ite	eq
 8008860:	2301      	moveq	r3, #1
 8008862:	2300      	movne	r3, #0
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d03c      	beq.n	80088e4 <cppLoop+0x1024>
			led.LR(-1, 1);
 800886a:	2201      	movs	r2, #1
 800886c:	f04f 31ff 	mov.w	r1, #4294967295
 8008870:	4843      	ldr	r0, [pc, #268]	; (8008980 <cppLoop+0x10c0>)
 8008872:	f7f9 fbbf 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008876:	2064      	movs	r0, #100	; 0x64
 8008878:	f001 f87c 	bl	8009974 <HAL_Delay>
			if(selector_vel2 == 0)
 800887c:	4b48      	ldr	r3, [pc, #288]	; (80089a0 <cppLoop+0x10e0>)
 800887e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d113      	bne.n	80088ae <cppLoop+0xfee>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008886:	4b3f      	ldr	r3, [pc, #252]	; (8008984 <cppLoop+0x10c4>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4618      	mov	r0, r3
 800888c:	f7f7 fe74 	bl	8000578 <__aeabi_f2d>
 8008890:	a339      	add	r3, pc, #228	; (adr r3, 8008978 <cppLoop+0x10b8>)
 8008892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008896:	f7f7 fd11 	bl	80002bc <__adddf3>
 800889a:	4602      	mov	r2, r0
 800889c:	460b      	mov	r3, r1
 800889e:	4610      	mov	r0, r2
 80088a0:	4619      	mov	r1, r3
 80088a2:	f7f8 f9b9 	bl	8000c18 <__aeabi_d2f>
 80088a6:	4603      	mov	r3, r0
 80088a8:	4a36      	ldr	r2, [pc, #216]	; (8008984 <cppLoop+0x10c4>)
 80088aa:	6013      	str	r3, [r2, #0]
 80088ac:	e012      	b.n	80088d4 <cppLoop+0x1014>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 80088ae:	4b37      	ldr	r3, [pc, #220]	; (800898c <cppLoop+0x10cc>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7f7 fe60 	bl	8000578 <__aeabi_f2d>
 80088b8:	a32f      	add	r3, pc, #188	; (adr r3, 8008978 <cppLoop+0x10b8>)
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	f7f7 fcfd 	bl	80002bc <__adddf3>
 80088c2:	4602      	mov	r2, r0
 80088c4:	460b      	mov	r3, r1
 80088c6:	4610      	mov	r0, r2
 80088c8:	4619      	mov	r1, r3
 80088ca:	f7f8 f9a5 	bl	8000c18 <__aeabi_d2f>
 80088ce:	4603      	mov	r3, r0
 80088d0:	4a2e      	ldr	r2, [pc, #184]	; (800898c <cppLoop+0x10cc>)
 80088d2:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 80088d4:	2200      	movs	r2, #0
 80088d6:	f04f 31ff 	mov.w	r1, #4294967295
 80088da:	4829      	ldr	r0, [pc, #164]	; (8008980 <cppLoop+0x10c0>)
 80088dc:	f7f9 fb8a 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 80088e0:	f000 bf15 	b.w	800970e <cppLoop+0x1e4e>
		else if(joy_stick.getValue() == JOY_L){
 80088e4:	482b      	ldr	r0, [pc, #172]	; (8008994 <cppLoop+0x10d4>)
 80088e6:	f7f9 fa65 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	bf0c      	ite	eq
 80088f0:	2301      	moveq	r3, #1
 80088f2:	2300      	movne	r3, #0
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d054      	beq.n	80089a4 <cppLoop+0x10e4>
			led.LR(-1, 1);
 80088fa:	2201      	movs	r2, #1
 80088fc:	f04f 31ff 	mov.w	r1, #4294967295
 8008900:	481f      	ldr	r0, [pc, #124]	; (8008980 <cppLoop+0x10c0>)
 8008902:	f7f9 fb77 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008906:	2064      	movs	r0, #100	; 0x64
 8008908:	f001 f834 	bl	8009974 <HAL_Delay>
			if(selector_vel2 == 0)
 800890c:	4b24      	ldr	r3, [pc, #144]	; (80089a0 <cppLoop+0x10e0>)
 800890e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d113      	bne.n	800893e <cppLoop+0x107e>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8008916:	4b1b      	ldr	r3, [pc, #108]	; (8008984 <cppLoop+0x10c4>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4618      	mov	r0, r3
 800891c:	f7f7 fe2c 	bl	8000578 <__aeabi_f2d>
 8008920:	a315      	add	r3, pc, #84	; (adr r3, 8008978 <cppLoop+0x10b8>)
 8008922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008926:	f7f7 fcc7 	bl	80002b8 <__aeabi_dsub>
 800892a:	4602      	mov	r2, r0
 800892c:	460b      	mov	r3, r1
 800892e:	4610      	mov	r0, r2
 8008930:	4619      	mov	r1, r3
 8008932:	f7f8 f971 	bl	8000c18 <__aeabi_d2f>
 8008936:	4603      	mov	r3, r0
 8008938:	4a12      	ldr	r2, [pc, #72]	; (8008984 <cppLoop+0x10c4>)
 800893a:	6013      	str	r3, [r2, #0]
 800893c:	e012      	b.n	8008964 <cppLoop+0x10a4>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 800893e:	4b13      	ldr	r3, [pc, #76]	; (800898c <cppLoop+0x10cc>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4618      	mov	r0, r3
 8008944:	f7f7 fe18 	bl	8000578 <__aeabi_f2d>
 8008948:	a30b      	add	r3, pc, #44	; (adr r3, 8008978 <cppLoop+0x10b8>)
 800894a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894e:	f7f7 fcb3 	bl	80002b8 <__aeabi_dsub>
 8008952:	4602      	mov	r2, r0
 8008954:	460b      	mov	r3, r1
 8008956:	4610      	mov	r0, r2
 8008958:	4619      	mov	r1, r3
 800895a:	f7f8 f95d 	bl	8000c18 <__aeabi_d2f>
 800895e:	4603      	mov	r3, r0
 8008960:	4a0a      	ldr	r2, [pc, #40]	; (800898c <cppLoop+0x10cc>)
 8008962:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8008964:	2200      	movs	r2, #0
 8008966:	f04f 31ff 	mov.w	r1, #4294967295
 800896a:	4805      	ldr	r0, [pc, #20]	; (8008980 <cppLoop+0x10c0>)
 800896c:	f7f9 fb42 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008970:	f000 becd 	b.w	800970e <cppLoop+0x1e4e>
 8008974:	f3af 8000 	nop.w
 8008978:	9999999a 	.word	0x9999999a
 800897c:	3fb99999 	.word	0x3fb99999
 8008980:	200005cc 	.word	0x200005cc
 8008984:	2003d440 	.word	0x2003d440
 8008988:	0801abc8 	.word	0x0801abc8
 800898c:	2003d450 	.word	0x2003d450
 8008990:	0801ab80 	.word	0x0801ab80
 8008994:	200005c0 	.word	0x200005c0
 8008998:	20017da0 	.word	0x20017da0
 800899c:	0801ab8c 	.word	0x0801ab8c
 80089a0:	2003d3fc 	.word	0x2003d3fc
		else if(joy_stick.getValue() == JOY_C){
 80089a4:	48b2      	ldr	r0, [pc, #712]	; (8008c70 <cppLoop+0x13b0>)
 80089a6:	f7f9 fa05 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	bf0c      	ite	eq
 80089b0:	2301      	moveq	r3, #1
 80089b2:	2300      	movne	r3, #0
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f000 86a9 	beq.w	800970e <cppLoop+0x1e4e>
			led.LR(-1, 1);
 80089bc:	2201      	movs	r2, #1
 80089be:	f04f 31ff 	mov.w	r1, #4294967295
 80089c2:	48ac      	ldr	r0, [pc, #688]	; (8008c74 <cppLoop+0x13b4>)
 80089c4:	f7f9 fb16 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80089c8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80089cc:	f000 ffd2 	bl	8009974 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 80089d0:	2300      	movs	r3, #0
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	4ba8      	ldr	r3, [pc, #672]	; (8008c78 <cppLoop+0x13b8>)
 80089d6:	2201      	movs	r2, #1
 80089d8:	49a8      	ldr	r1, [pc, #672]	; (8008c7c <cppLoop+0x13bc>)
 80089da:	48a9      	ldr	r0, [pc, #676]	; (8008c80 <cppLoop+0x13c0>)
 80089dc:	f7f8 fdce 	bl	800157c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 80089e0:	2300      	movs	r3, #0
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	4ba7      	ldr	r3, [pc, #668]	; (8008c84 <cppLoop+0x13c4>)
 80089e6:	2201      	movs	r2, #1
 80089e8:	49a7      	ldr	r1, [pc, #668]	; (8008c88 <cppLoop+0x13c8>)
 80089ea:	48a5      	ldr	r0, [pc, #660]	; (8008c80 <cppLoop+0x13c0>)
 80089ec:	f7f8 fdc6 	bl	800157c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80089f0:	4ba1      	ldr	r3, [pc, #644]	; (8008c78 <cppLoop+0x13b8>)
 80089f2:	edd3 7a00 	vldr	s15, [r3]
 80089f6:	eeb0 0a67 	vmov.f32	s0, s15
 80089fa:	48a4      	ldr	r0, [pc, #656]	; (8008c8c <cppLoop+0x13cc>)
 80089fc:	f7fb f84c 	bl	8003a98 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008a00:	4ba0      	ldr	r3, [pc, #640]	; (8008c84 <cppLoop+0x13c4>)
 8008a02:	edd3 7a00 	vldr	s15, [r3]
 8008a06:	eeb0 0a67 	vmov.f32	s0, s15
 8008a0a:	48a0      	ldr	r0, [pc, #640]	; (8008c8c <cppLoop+0x13cc>)
 8008a0c:	f7fb f864 	bl	8003ad8 <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008a10:	2200      	movs	r2, #0
 8008a12:	f04f 31ff 	mov.w	r1, #4294967295
 8008a16:	4897      	ldr	r0, [pc, #604]	; (8008c74 <cppLoop+0x13b4>)
 8008a18:	f7f9 faec 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008a1c:	f000 be77 	b.w	800970e <cppLoop+0x1e4e>

	case 7:
		led.fullColor('W');
 8008a20:	2157      	movs	r1, #87	; 0x57
 8008a22:	4894      	ldr	r0, [pc, #592]	; (8008c74 <cppLoop+0x13b4>)
 8008a24:	f7f9 fa2a 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008a28:	f7f8 fb6c 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	2000      	movs	r0, #0
 8008a30:	f7f8 fb78 	bl	8001124 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008a34:	4895      	ldr	r0, [pc, #596]	; (8008c8c <cppLoop+0x13cc>)
 8008a36:	f7fb f8e3 	bl	8003c00 <_ZN9LineTrace9getMaxAccEv>
 8008a3a:	ee10 3a10 	vmov	r3, s0
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7f7 fd9a 	bl	8000578 <__aeabi_f2d>
 8008a44:	4602      	mov	r2, r0
 8008a46:	460b      	mov	r3, r1
 8008a48:	4891      	ldr	r0, [pc, #580]	; (8008c90 <cppLoop+0x13d0>)
 8008a4a:	f7f8 fb96 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 8008a4e:	2101      	movs	r1, #1
 8008a50:	2000      	movs	r0, #0
 8008a52:	f7f8 fb67 	bl	8001124 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008a56:	488d      	ldr	r0, [pc, #564]	; (8008c8c <cppLoop+0x13cc>)
 8008a58:	f7fb f908 	bl	8003c6c <_ZN9LineTrace9getMaxDecEv>
 8008a5c:	ee10 3a10 	vmov	r3, s0
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7f7 fd89 	bl	8000578 <__aeabi_f2d>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	488a      	ldr	r0, [pc, #552]	; (8008c94 <cppLoop+0x13d4>)
 8008a6c:	f7f8 fb85 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008a70:	487f      	ldr	r0, [pc, #508]	; (8008c70 <cppLoop+0x13b0>)
 8008a72:	f7f9 f99f 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b08      	cmp	r3, #8
 8008a7a:	bf0c      	ite	eq
 8008a7c:	2301      	moveq	r3, #1
 8008a7e:	2300      	movne	r3, #0
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d022      	beq.n	8008acc <cppLoop+0x120c>
			led.LR(-1, 1);
 8008a86:	2201      	movs	r2, #1
 8008a88:	f04f 31ff 	mov.w	r1, #4294967295
 8008a8c:	4879      	ldr	r0, [pc, #484]	; (8008c74 <cppLoop+0x13b4>)
 8008a8e:	f7f9 fab1 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008a92:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008a96:	f000 ff6d 	bl	8009974 <HAL_Delay>

			selector_acc++;
 8008a9a:	4b7f      	ldr	r3, [pc, #508]	; (8008c98 <cppLoop+0x13d8>)
 8008a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	b21a      	sxth	r2, r3
 8008aa8:	4b7b      	ldr	r3, [pc, #492]	; (8008c98 <cppLoop+0x13d8>)
 8008aaa:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008aac:	4b7a      	ldr	r3, [pc, #488]	; (8008c98 <cppLoop+0x13d8>)
 8008aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	dd02      	ble.n	8008abc <cppLoop+0x11fc>
 8008ab6:	4b78      	ldr	r3, [pc, #480]	; (8008c98 <cppLoop+0x13d8>)
 8008ab8:	2200      	movs	r2, #0
 8008aba:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008abc:	2200      	movs	r2, #0
 8008abe:	f04f 31ff 	mov.w	r1, #4294967295
 8008ac2:	486c      	ldr	r0, [pc, #432]	; (8008c74 <cppLoop+0x13b4>)
 8008ac4:	f7f9 fa96 	bl	8001ff4 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008ac8:	f000 be23 	b.w	8009712 <cppLoop+0x1e52>
		else if(joy_stick.getValue() == JOY_R){
 8008acc:	4868      	ldr	r0, [pc, #416]	; (8008c70 <cppLoop+0x13b0>)
 8008ace:	f7f9 f971 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b10      	cmp	r3, #16
 8008ad6:	bf0c      	ite	eq
 8008ad8:	2301      	moveq	r3, #1
 8008ada:	2300      	movne	r3, #0
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d03c      	beq.n	8008b5c <cppLoop+0x129c>
			led.LR(-1, 1);
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8008ae8:	4862      	ldr	r0, [pc, #392]	; (8008c74 <cppLoop+0x13b4>)
 8008aea:	f7f9 fa83 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008aee:	2064      	movs	r0, #100	; 0x64
 8008af0:	f000 ff40 	bl	8009974 <HAL_Delay>
			if(selector_acc == 0){
 8008af4:	4b68      	ldr	r3, [pc, #416]	; (8008c98 <cppLoop+0x13d8>)
 8008af6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d113      	bne.n	8008b26 <cppLoop+0x1266>
				adj_acc = adj_acc + 0.1;
 8008afe:	4b67      	ldr	r3, [pc, #412]	; (8008c9c <cppLoop+0x13dc>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7f7 fd38 	bl	8000578 <__aeabi_f2d>
 8008b08:	a357      	add	r3, pc, #348	; (adr r3, 8008c68 <cppLoop+0x13a8>)
 8008b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0e:	f7f7 fbd5 	bl	80002bc <__adddf3>
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	4610      	mov	r0, r2
 8008b18:	4619      	mov	r1, r3
 8008b1a:	f7f8 f87d 	bl	8000c18 <__aeabi_d2f>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	4a5e      	ldr	r2, [pc, #376]	; (8008c9c <cppLoop+0x13dc>)
 8008b22:	6013      	str	r3, [r2, #0]
 8008b24:	e012      	b.n	8008b4c <cppLoop+0x128c>
				adj_dec = adj_dec + 0.1;
 8008b26:	4b5e      	ldr	r3, [pc, #376]	; (8008ca0 <cppLoop+0x13e0>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7f7 fd24 	bl	8000578 <__aeabi_f2d>
 8008b30:	a34d      	add	r3, pc, #308	; (adr r3, 8008c68 <cppLoop+0x13a8>)
 8008b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b36:	f7f7 fbc1 	bl	80002bc <__adddf3>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	4610      	mov	r0, r2
 8008b40:	4619      	mov	r1, r3
 8008b42:	f7f8 f869 	bl	8000c18 <__aeabi_d2f>
 8008b46:	4603      	mov	r3, r0
 8008b48:	4a55      	ldr	r2, [pc, #340]	; (8008ca0 <cppLoop+0x13e0>)
 8008b4a:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f04f 31ff 	mov.w	r1, #4294967295
 8008b52:	4848      	ldr	r0, [pc, #288]	; (8008c74 <cppLoop+0x13b4>)
 8008b54:	f7f9 fa4e 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008b58:	f000 bddb 	b.w	8009712 <cppLoop+0x1e52>
		else if(joy_stick.getValue() == JOY_L){
 8008b5c:	4844      	ldr	r0, [pc, #272]	; (8008c70 <cppLoop+0x13b0>)
 8008b5e:	f7f9 f929 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	bf0c      	ite	eq
 8008b68:	2301      	moveq	r3, #1
 8008b6a:	2300      	movne	r3, #0
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d03c      	beq.n	8008bec <cppLoop+0x132c>
			led.LR(-1, 1);
 8008b72:	2201      	movs	r2, #1
 8008b74:	f04f 31ff 	mov.w	r1, #4294967295
 8008b78:	483e      	ldr	r0, [pc, #248]	; (8008c74 <cppLoop+0x13b4>)
 8008b7a:	f7f9 fa3b 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008b7e:	2064      	movs	r0, #100	; 0x64
 8008b80:	f000 fef8 	bl	8009974 <HAL_Delay>
			if(selector_acc == 0){
 8008b84:	4b44      	ldr	r3, [pc, #272]	; (8008c98 <cppLoop+0x13d8>)
 8008b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d113      	bne.n	8008bb6 <cppLoop+0x12f6>
				adj_acc = adj_acc - 0.1;
 8008b8e:	4b43      	ldr	r3, [pc, #268]	; (8008c9c <cppLoop+0x13dc>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7f7 fcf0 	bl	8000578 <__aeabi_f2d>
 8008b98:	a333      	add	r3, pc, #204	; (adr r3, 8008c68 <cppLoop+0x13a8>)
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	f7f7 fb8b 	bl	80002b8 <__aeabi_dsub>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4610      	mov	r0, r2
 8008ba8:	4619      	mov	r1, r3
 8008baa:	f7f8 f835 	bl	8000c18 <__aeabi_d2f>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	4a3a      	ldr	r2, [pc, #232]	; (8008c9c <cppLoop+0x13dc>)
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	e012      	b.n	8008bdc <cppLoop+0x131c>
				adj_dec = adj_dec - 0.1;
 8008bb6:	4b3a      	ldr	r3, [pc, #232]	; (8008ca0 <cppLoop+0x13e0>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7f7 fcdc 	bl	8000578 <__aeabi_f2d>
 8008bc0:	a329      	add	r3, pc, #164	; (adr r3, 8008c68 <cppLoop+0x13a8>)
 8008bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc6:	f7f7 fb77 	bl	80002b8 <__aeabi_dsub>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	460b      	mov	r3, r1
 8008bce:	4610      	mov	r0, r2
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	f7f8 f821 	bl	8000c18 <__aeabi_d2f>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	4a31      	ldr	r2, [pc, #196]	; (8008ca0 <cppLoop+0x13e0>)
 8008bda:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f04f 31ff 	mov.w	r1, #4294967295
 8008be2:	4824      	ldr	r0, [pc, #144]	; (8008c74 <cppLoop+0x13b4>)
 8008be4:	f7f9 fa06 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008be8:	f000 bd93 	b.w	8009712 <cppLoop+0x1e52>
		else if(joy_stick.getValue() == JOY_C){
 8008bec:	4820      	ldr	r0, [pc, #128]	; (8008c70 <cppLoop+0x13b0>)
 8008bee:	f7f9 f8e1 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	bf0c      	ite	eq
 8008bf8:	2301      	moveq	r3, #1
 8008bfa:	2300      	movne	r3, #0
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 8587 	beq.w	8009712 <cppLoop+0x1e52>
			led.LR(-1, 1);
 8008c04:	2201      	movs	r2, #1
 8008c06:	f04f 31ff 	mov.w	r1, #4294967295
 8008c0a:	481a      	ldr	r0, [pc, #104]	; (8008c74 <cppLoop+0x13b4>)
 8008c0c:	f7f9 f9f2 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008c10:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008c14:	f000 feae 	bl	8009974 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008c18:	2300      	movs	r3, #0
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	4b1f      	ldr	r3, [pc, #124]	; (8008c9c <cppLoop+0x13dc>)
 8008c1e:	2201      	movs	r2, #1
 8008c20:	4920      	ldr	r1, [pc, #128]	; (8008ca4 <cppLoop+0x13e4>)
 8008c22:	4817      	ldr	r0, [pc, #92]	; (8008c80 <cppLoop+0x13c0>)
 8008c24:	f7f8 fcaa 	bl	800157c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008c28:	2300      	movs	r3, #0
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	4b1c      	ldr	r3, [pc, #112]	; (8008ca0 <cppLoop+0x13e0>)
 8008c2e:	2201      	movs	r2, #1
 8008c30:	491d      	ldr	r1, [pc, #116]	; (8008ca8 <cppLoop+0x13e8>)
 8008c32:	4813      	ldr	r0, [pc, #76]	; (8008c80 <cppLoop+0x13c0>)
 8008c34:	f7f8 fca2 	bl	800157c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008c38:	4b18      	ldr	r3, [pc, #96]	; (8008c9c <cppLoop+0x13dc>)
 8008c3a:	edd3 7a00 	vldr	s15, [r3]
 8008c3e:	4b18      	ldr	r3, [pc, #96]	; (8008ca0 <cppLoop+0x13e0>)
 8008c40:	ed93 7a00 	vldr	s14, [r3]
 8008c44:	eef0 0a47 	vmov.f32	s1, s14
 8008c48:	eeb0 0a67 	vmov.f32	s0, s15
 8008c4c:	480f      	ldr	r0, [pc, #60]	; (8008c8c <cppLoop+0x13cc>)
 8008c4e:	f7fa ffa3 	bl	8003b98 <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008c52:	2200      	movs	r2, #0
 8008c54:	f04f 31ff 	mov.w	r1, #4294967295
 8008c58:	4806      	ldr	r0, [pc, #24]	; (8008c74 <cppLoop+0x13b4>)
 8008c5a:	f7f9 f9cb 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008c5e:	f000 bd58 	b.w	8009712 <cppLoop+0x1e52>
 8008c62:	bf00      	nop
 8008c64:	f3af 8000 	nop.w
 8008c68:	9999999a 	.word	0x9999999a
 8008c6c:	3fb99999 	.word	0x3fb99999
 8008c70:	200005c0 	.word	0x200005c0
 8008c74:	200005cc 	.word	0x200005cc
 8008c78:	2003d440 	.word	0x2003d440
 8008c7c:	0801abd4 	.word	0x0801abd4
 8008c80:	0801ab5c 	.word	0x0801ab5c
 8008c84:	2003d450 	.word	0x2003d450
 8008c88:	0801abe0 	.word	0x0801abe0
 8008c8c:	20017da0 	.word	0x20017da0
 8008c90:	0801abec 	.word	0x0801abec
 8008c94:	0801abf8 	.word	0x0801abf8
 8008c98:	2003d3f6 	.word	0x2003d3f6
 8008c9c:	2003d458 	.word	0x2003d458
 8008ca0:	2003d460 	.word	0x2003d460
 8008ca4:	0801ac04 	.word	0x0801ac04
 8008ca8:	0801ac0c 	.word	0x0801ac0c

	case 8:
		led.fullColor('W');
 8008cac:	2157      	movs	r1, #87	; 0x57
 8008cae:	4892      	ldr	r0, [pc, #584]	; (8008ef8 <cppLoop+0x1638>)
 8008cb0:	f7f9 f8e4 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008cb4:	f7f8 fa26 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 8008cb8:	2100      	movs	r1, #0
 8008cba:	2000      	movs	r0, #0
 8008cbc:	f7f8 fa32 	bl	8001124 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8008cc0:	488e      	ldr	r0, [pc, #568]	; (8008efc <cppLoop+0x163c>)
 8008cc2:	f7fa ffc1 	bl	8003c48 <_ZN9LineTrace10getMaxAcc2Ev>
 8008cc6:	ee10 3a10 	vmov	r3, s0
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7f7 fc54 	bl	8000578 <__aeabi_f2d>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	488a      	ldr	r0, [pc, #552]	; (8008f00 <cppLoop+0x1640>)
 8008cd6:	f7f8 fa50 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 8008cda:	2101      	movs	r1, #1
 8008cdc:	2000      	movs	r0, #0
 8008cde:	f7f8 fa21 	bl	8001124 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8008ce2:	4886      	ldr	r0, [pc, #536]	; (8008efc <cppLoop+0x163c>)
 8008ce4:	f7fa ff9e 	bl	8003c24 <_ZN9LineTrace10getMaxDec2Ev>
 8008ce8:	ee10 3a10 	vmov	r3, s0
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7f7 fc43 	bl	8000578 <__aeabi_f2d>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	4883      	ldr	r0, [pc, #524]	; (8008f04 <cppLoop+0x1644>)
 8008cf8:	f7f8 fa3f 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008cfc:	4882      	ldr	r0, [pc, #520]	; (8008f08 <cppLoop+0x1648>)
 8008cfe:	f7f9 f859 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b08      	cmp	r3, #8
 8008d06:	bf0c      	ite	eq
 8008d08:	2301      	moveq	r3, #1
 8008d0a:	2300      	movne	r3, #0
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d022      	beq.n	8008d58 <cppLoop+0x1498>
			led.LR(-1, 1);
 8008d12:	2201      	movs	r2, #1
 8008d14:	f04f 31ff 	mov.w	r1, #4294967295
 8008d18:	4877      	ldr	r0, [pc, #476]	; (8008ef8 <cppLoop+0x1638>)
 8008d1a:	f7f9 f96b 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008d1e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008d22:	f000 fe27 	bl	8009974 <HAL_Delay>

			selector_acc2++;
 8008d26:	4b79      	ldr	r3, [pc, #484]	; (8008f0c <cppLoop+0x164c>)
 8008d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	3301      	adds	r3, #1
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	b21a      	sxth	r2, r3
 8008d34:	4b75      	ldr	r3, [pc, #468]	; (8008f0c <cppLoop+0x164c>)
 8008d36:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8008d38:	4b74      	ldr	r3, [pc, #464]	; (8008f0c <cppLoop+0x164c>)
 8008d3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	dd02      	ble.n	8008d48 <cppLoop+0x1488>
 8008d42:	4b72      	ldr	r3, [pc, #456]	; (8008f0c <cppLoop+0x164c>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f04f 31ff 	mov.w	r1, #4294967295
 8008d4e:	486a      	ldr	r0, [pc, #424]	; (8008ef8 <cppLoop+0x1638>)
 8008d50:	f7f9 f950 	bl	8001ff4 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8008d54:	f000 bcdf 	b.w	8009716 <cppLoop+0x1e56>
		else if(joy_stick.getValue() == JOY_R){
 8008d58:	486b      	ldr	r0, [pc, #428]	; (8008f08 <cppLoop+0x1648>)
 8008d5a:	f7f9 f82b 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b10      	cmp	r3, #16
 8008d62:	bf0c      	ite	eq
 8008d64:	2301      	moveq	r3, #1
 8008d66:	2300      	movne	r3, #0
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d03c      	beq.n	8008de8 <cppLoop+0x1528>
			led.LR(-1, 1);
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f04f 31ff 	mov.w	r1, #4294967295
 8008d74:	4860      	ldr	r0, [pc, #384]	; (8008ef8 <cppLoop+0x1638>)
 8008d76:	f7f9 f93d 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008d7a:	2064      	movs	r0, #100	; 0x64
 8008d7c:	f000 fdfa 	bl	8009974 <HAL_Delay>
			if(selector_acc2 == 0){
 8008d80:	4b62      	ldr	r3, [pc, #392]	; (8008f0c <cppLoop+0x164c>)
 8008d82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d113      	bne.n	8008db2 <cppLoop+0x14f2>
				adj_acc2 = adj_acc2 + 0.1;
 8008d8a:	4b61      	ldr	r3, [pc, #388]	; (8008f10 <cppLoop+0x1650>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7f7 fbf2 	bl	8000578 <__aeabi_f2d>
 8008d94:	a356      	add	r3, pc, #344	; (adr r3, 8008ef0 <cppLoop+0x1630>)
 8008d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9a:	f7f7 fa8f 	bl	80002bc <__adddf3>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	460b      	mov	r3, r1
 8008da2:	4610      	mov	r0, r2
 8008da4:	4619      	mov	r1, r3
 8008da6:	f7f7 ff37 	bl	8000c18 <__aeabi_d2f>
 8008daa:	4603      	mov	r3, r0
 8008dac:	4a58      	ldr	r2, [pc, #352]	; (8008f10 <cppLoop+0x1650>)
 8008dae:	6013      	str	r3, [r2, #0]
 8008db0:	e012      	b.n	8008dd8 <cppLoop+0x1518>
				adj_dec2 = adj_dec2 + 0.1;
 8008db2:	4b58      	ldr	r3, [pc, #352]	; (8008f14 <cppLoop+0x1654>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7f7 fbde 	bl	8000578 <__aeabi_f2d>
 8008dbc:	a34c      	add	r3, pc, #304	; (adr r3, 8008ef0 <cppLoop+0x1630>)
 8008dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc2:	f7f7 fa7b 	bl	80002bc <__adddf3>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	460b      	mov	r3, r1
 8008dca:	4610      	mov	r0, r2
 8008dcc:	4619      	mov	r1, r3
 8008dce:	f7f7 ff23 	bl	8000c18 <__aeabi_d2f>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	4a4f      	ldr	r2, [pc, #316]	; (8008f14 <cppLoop+0x1654>)
 8008dd6:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f04f 31ff 	mov.w	r1, #4294967295
 8008dde:	4846      	ldr	r0, [pc, #280]	; (8008ef8 <cppLoop+0x1638>)
 8008de0:	f7f9 f908 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008de4:	f000 bc97 	b.w	8009716 <cppLoop+0x1e56>
		else if(joy_stick.getValue() == JOY_L){
 8008de8:	4847      	ldr	r0, [pc, #284]	; (8008f08 <cppLoop+0x1648>)
 8008dea:	f7f8 ffe3 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	bf0c      	ite	eq
 8008df4:	2301      	moveq	r3, #1
 8008df6:	2300      	movne	r3, #0
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d03c      	beq.n	8008e78 <cppLoop+0x15b8>
			led.LR(-1, 1);
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f04f 31ff 	mov.w	r1, #4294967295
 8008e04:	483c      	ldr	r0, [pc, #240]	; (8008ef8 <cppLoop+0x1638>)
 8008e06:	f7f9 f8f5 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008e0a:	2064      	movs	r0, #100	; 0x64
 8008e0c:	f000 fdb2 	bl	8009974 <HAL_Delay>
			if(selector_acc2 == 0){
 8008e10:	4b3e      	ldr	r3, [pc, #248]	; (8008f0c <cppLoop+0x164c>)
 8008e12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d113      	bne.n	8008e42 <cppLoop+0x1582>
				adj_acc2 = adj_acc2 - 0.1;
 8008e1a:	4b3d      	ldr	r3, [pc, #244]	; (8008f10 <cppLoop+0x1650>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7f7 fbaa 	bl	8000578 <__aeabi_f2d>
 8008e24:	a332      	add	r3, pc, #200	; (adr r3, 8008ef0 <cppLoop+0x1630>)
 8008e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2a:	f7f7 fa45 	bl	80002b8 <__aeabi_dsub>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	460b      	mov	r3, r1
 8008e32:	4610      	mov	r0, r2
 8008e34:	4619      	mov	r1, r3
 8008e36:	f7f7 feef 	bl	8000c18 <__aeabi_d2f>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	4a34      	ldr	r2, [pc, #208]	; (8008f10 <cppLoop+0x1650>)
 8008e3e:	6013      	str	r3, [r2, #0]
 8008e40:	e012      	b.n	8008e68 <cppLoop+0x15a8>
				adj_dec2 = adj_dec2 - 0.1;
 8008e42:	4b34      	ldr	r3, [pc, #208]	; (8008f14 <cppLoop+0x1654>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7f7 fb96 	bl	8000578 <__aeabi_f2d>
 8008e4c:	a328      	add	r3, pc, #160	; (adr r3, 8008ef0 <cppLoop+0x1630>)
 8008e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e52:	f7f7 fa31 	bl	80002b8 <__aeabi_dsub>
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4610      	mov	r0, r2
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	f7f7 fedb 	bl	8000c18 <__aeabi_d2f>
 8008e62:	4603      	mov	r3, r0
 8008e64:	4a2b      	ldr	r2, [pc, #172]	; (8008f14 <cppLoop+0x1654>)
 8008e66:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f04f 31ff 	mov.w	r1, #4294967295
 8008e6e:	4822      	ldr	r0, [pc, #136]	; (8008ef8 <cppLoop+0x1638>)
 8008e70:	f7f9 f8c0 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008e74:	f000 bc4f 	b.w	8009716 <cppLoop+0x1e56>
		else if(joy_stick.getValue() == JOY_C){
 8008e78:	4823      	ldr	r0, [pc, #140]	; (8008f08 <cppLoop+0x1648>)
 8008e7a:	f7f8 ff9b 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	bf0c      	ite	eq
 8008e84:	2301      	moveq	r3, #1
 8008e86:	2300      	movne	r3, #0
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f000 8443 	beq.w	8009716 <cppLoop+0x1e56>
			led.LR(-1, 1);
 8008e90:	2201      	movs	r2, #1
 8008e92:	f04f 31ff 	mov.w	r1, #4294967295
 8008e96:	4818      	ldr	r0, [pc, #96]	; (8008ef8 <cppLoop+0x1638>)
 8008e98:	f7f9 f8ac 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008e9c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008ea0:	f000 fd68 	bl	8009974 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	4b19      	ldr	r3, [pc, #100]	; (8008f10 <cppLoop+0x1650>)
 8008eaa:	2201      	movs	r2, #1
 8008eac:	491a      	ldr	r1, [pc, #104]	; (8008f18 <cppLoop+0x1658>)
 8008eae:	481b      	ldr	r0, [pc, #108]	; (8008f1c <cppLoop+0x165c>)
 8008eb0:	f7f8 fb64 	bl	800157c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	4b16      	ldr	r3, [pc, #88]	; (8008f14 <cppLoop+0x1654>)
 8008eba:	2201      	movs	r2, #1
 8008ebc:	4918      	ldr	r1, [pc, #96]	; (8008f20 <cppLoop+0x1660>)
 8008ebe:	4817      	ldr	r0, [pc, #92]	; (8008f1c <cppLoop+0x165c>)
 8008ec0:	f7f8 fb5c 	bl	800157c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 8008ec4:	4b12      	ldr	r3, [pc, #72]	; (8008f10 <cppLoop+0x1650>)
 8008ec6:	edd3 7a00 	vldr	s15, [r3]
 8008eca:	4b12      	ldr	r3, [pc, #72]	; (8008f14 <cppLoop+0x1654>)
 8008ecc:	ed93 7a00 	vldr	s14, [r3]
 8008ed0:	eef0 0a47 	vmov.f32	s1, s14
 8008ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8008ed8:	4808      	ldr	r0, [pc, #32]	; (8008efc <cppLoop+0x163c>)
 8008eda:	f7fa fe77 	bl	8003bcc <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8008ee4:	4804      	ldr	r0, [pc, #16]	; (8008ef8 <cppLoop+0x1638>)
 8008ee6:	f7f9 f885 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008eea:	f000 bc14 	b.w	8009716 <cppLoop+0x1e56>
 8008eee:	bf00      	nop
 8008ef0:	9999999a 	.word	0x9999999a
 8008ef4:	3fb99999 	.word	0x3fb99999
 8008ef8:	200005cc 	.word	0x200005cc
 8008efc:	20017da0 	.word	0x20017da0
 8008f00:	0801ac14 	.word	0x0801ac14
 8008f04:	0801ac20 	.word	0x0801ac20
 8008f08:	200005c0 	.word	0x200005c0
 8008f0c:	2003d3f8 	.word	0x2003d3f8
 8008f10:	2003d468 	.word	0x2003d468
 8008f14:	2003d470 	.word	0x2003d470
 8008f18:	0801ac2c 	.word	0x0801ac2c
 8008f1c:	0801ab5c 	.word	0x0801ab5c
 8008f20:	0801ac38 	.word	0x0801ac38

	case 9:
		led.fullColor('W');
 8008f24:	2157      	movs	r1, #87	; 0x57
 8008f26:	48b0      	ldr	r0, [pc, #704]	; (80091e8 <cppLoop+0x1928>)
 8008f28:	f7f8 ffa8 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008f2c:	f7f8 f8ea 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 8008f30:	2100      	movs	r1, #0
 8008f32:	2000      	movs	r0, #0
 8008f34:	f7f8 f8f6 	bl	8001124 <lcd_locate>
		lcd_printf("F%4.2lf   ", line_trace.getKpFast()*1000);
 8008f38:	48ac      	ldr	r0, [pc, #688]	; (80091ec <cppLoop+0x192c>)
 8008f3a:	f7fa fd60 	bl	80039fe <_ZN9LineTrace9getKpFastEv>
 8008f3e:	eef0 7a40 	vmov.f32	s15, s0
 8008f42:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80091f0 <cppLoop+0x1930>
 8008f46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f4a:	ee17 0a90 	vmov	r0, s15
 8008f4e:	f7f7 fb13 	bl	8000578 <__aeabi_f2d>
 8008f52:	4602      	mov	r2, r0
 8008f54:	460b      	mov	r3, r1
 8008f56:	48a7      	ldr	r0, [pc, #668]	; (80091f4 <cppLoop+0x1934>)
 8008f58:	f7f8 f90f 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 8008f5c:	2101      	movs	r1, #1
 8008f5e:	2000      	movs	r0, #0
 8008f60:	f7f8 f8e0 	bl	8001124 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKiFast()*100, line_trace.getKdFast()*10000);
 8008f64:	48a1      	ldr	r0, [pc, #644]	; (80091ec <cppLoop+0x192c>)
 8008f66:	f7fa fd59 	bl	8003a1c <_ZN9LineTrace9getKiFastEv>
 8008f6a:	eef0 7a40 	vmov.f32	s15, s0
 8008f6e:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 80091f8 <cppLoop+0x1938>
 8008f72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f76:	ee17 0a90 	vmov	r0, s15
 8008f7a:	f7f7 fafd 	bl	8000578 <__aeabi_f2d>
 8008f7e:	4604      	mov	r4, r0
 8008f80:	460d      	mov	r5, r1
 8008f82:	489a      	ldr	r0, [pc, #616]	; (80091ec <cppLoop+0x192c>)
 8008f84:	f7fa fd59 	bl	8003a3a <_ZN9LineTrace9getKdFastEv>
 8008f88:	eef0 7a40 	vmov.f32	s15, s0
 8008f8c:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80091fc <cppLoop+0x193c>
 8008f90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f94:	ee17 0a90 	vmov	r0, s15
 8008f98:	f7f7 faee 	bl	8000578 <__aeabi_f2d>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	e9cd 2300 	strd	r2, r3, [sp]
 8008fa4:	4622      	mov	r2, r4
 8008fa6:	462b      	mov	r3, r5
 8008fa8:	4895      	ldr	r0, [pc, #596]	; (8009200 <cppLoop+0x1940>)
 8008faa:	f7f8 f8e6 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008fae:	4895      	ldr	r0, [pc, #596]	; (8009204 <cppLoop+0x1944>)
 8008fb0:	f7f8 ff00 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b08      	cmp	r3, #8
 8008fb8:	bf0c      	ite	eq
 8008fba:	2301      	moveq	r3, #1
 8008fbc:	2300      	movne	r3, #0
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d021      	beq.n	8009008 <cppLoop+0x1748>
			led.LR(-1, 1);
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f04f 31ff 	mov.w	r1, #4294967295
 8008fca:	4887      	ldr	r0, [pc, #540]	; (80091e8 <cppLoop+0x1928>)
 8008fcc:	f7f9 f812 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008fd0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008fd4:	f000 fcce 	bl	8009974 <HAL_Delay>

			selector_fast++;
 8008fd8:	4b8b      	ldr	r3, [pc, #556]	; (8009208 <cppLoop+0x1948>)
 8008fda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	b21a      	sxth	r2, r3
 8008fe6:	4b88      	ldr	r3, [pc, #544]	; (8009208 <cppLoop+0x1948>)
 8008fe8:	801a      	strh	r2, [r3, #0]
			if(selector_fast >= 3) selector_fast = 0;
 8008fea:	4b87      	ldr	r3, [pc, #540]	; (8009208 <cppLoop+0x1948>)
 8008fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	dd02      	ble.n	8008ffa <cppLoop+0x173a>
 8008ff4:	4b84      	ldr	r3, [pc, #528]	; (8009208 <cppLoop+0x1948>)
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8009000:	4879      	ldr	r0, [pc, #484]	; (80091e8 <cppLoop+0x1928>)
 8009002:	f7f8 fff7 	bl	8001ff4 <_ZN3LED2LREaa>
			user_fclose();

			led.LR(-1, 0);
		}
		*/
		break;
 8009006:	e388      	b.n	800971a <cppLoop+0x1e5a>
		else if(joy_stick.getValue() == JOY_R){
 8009008:	487e      	ldr	r0, [pc, #504]	; (8009204 <cppLoop+0x1944>)
 800900a:	f7f8 fed3 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 800900e:	4603      	mov	r3, r0
 8009010:	2b10      	cmp	r3, #16
 8009012:	bf0c      	ite	eq
 8009014:	2301      	moveq	r3, #1
 8009016:	2300      	movne	r3, #0
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b00      	cmp	r3, #0
 800901c:	d058      	beq.n	80090d0 <cppLoop+0x1810>
			led.LR(-1, 1);
 800901e:	2201      	movs	r2, #1
 8009020:	f04f 31ff 	mov.w	r1, #4294967295
 8009024:	4870      	ldr	r0, [pc, #448]	; (80091e8 <cppLoop+0x1928>)
 8009026:	f7f8 ffe5 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800902a:	2064      	movs	r0, #100	; 0x64
 800902c:	f000 fca2 	bl	8009974 <HAL_Delay>
			if(selector_fast == 0){
 8009030:	4b75      	ldr	r3, [pc, #468]	; (8009208 <cppLoop+0x1948>)
 8009032:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d113      	bne.n	8009062 <cppLoop+0x17a2>
				adj_kp_fast = adj_kp_fast + 0.00001;
 800903a:	4b74      	ldr	r3, [pc, #464]	; (800920c <cppLoop+0x194c>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4618      	mov	r0, r3
 8009040:	f7f7 fa9a 	bl	8000578 <__aeabi_f2d>
 8009044:	a362      	add	r3, pc, #392	; (adr r3, 80091d0 <cppLoop+0x1910>)
 8009046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904a:	f7f7 f937 	bl	80002bc <__adddf3>
 800904e:	4602      	mov	r2, r0
 8009050:	460b      	mov	r3, r1
 8009052:	4610      	mov	r0, r2
 8009054:	4619      	mov	r1, r3
 8009056:	f7f7 fddf 	bl	8000c18 <__aeabi_d2f>
 800905a:	4603      	mov	r3, r0
 800905c:	4a6b      	ldr	r2, [pc, #428]	; (800920c <cppLoop+0x194c>)
 800905e:	6013      	str	r3, [r2, #0]
 8009060:	e02b      	b.n	80090ba <cppLoop+0x17fa>
			else if(selector_fast == 1){
 8009062:	4b69      	ldr	r3, [pc, #420]	; (8009208 <cppLoop+0x1948>)
 8009064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d113      	bne.n	8009094 <cppLoop+0x17d4>
				adj_ki_fast = adj_ki_fast + 0.0001;
 800906c:	4b68      	ldr	r3, [pc, #416]	; (8009210 <cppLoop+0x1950>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4618      	mov	r0, r3
 8009072:	f7f7 fa81 	bl	8000578 <__aeabi_f2d>
 8009076:	a358      	add	r3, pc, #352	; (adr r3, 80091d8 <cppLoop+0x1918>)
 8009078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907c:	f7f7 f91e 	bl	80002bc <__adddf3>
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	4610      	mov	r0, r2
 8009086:	4619      	mov	r1, r3
 8009088:	f7f7 fdc6 	bl	8000c18 <__aeabi_d2f>
 800908c:	4603      	mov	r3, r0
 800908e:	4a60      	ldr	r2, [pc, #384]	; (8009210 <cppLoop+0x1950>)
 8009090:	6013      	str	r3, [r2, #0]
 8009092:	e012      	b.n	80090ba <cppLoop+0x17fa>
				adj_kd_fast = adj_kd_fast + 0.000001;
 8009094:	4b5f      	ldr	r3, [pc, #380]	; (8009214 <cppLoop+0x1954>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4618      	mov	r0, r3
 800909a:	f7f7 fa6d 	bl	8000578 <__aeabi_f2d>
 800909e:	a350      	add	r3, pc, #320	; (adr r3, 80091e0 <cppLoop+0x1920>)
 80090a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a4:	f7f7 f90a 	bl	80002bc <__adddf3>
 80090a8:	4602      	mov	r2, r0
 80090aa:	460b      	mov	r3, r1
 80090ac:	4610      	mov	r0, r2
 80090ae:	4619      	mov	r1, r3
 80090b0:	f7f7 fdb2 	bl	8000c18 <__aeabi_d2f>
 80090b4:	4603      	mov	r3, r0
 80090b6:	4a57      	ldr	r2, [pc, #348]	; (8009214 <cppLoop+0x1954>)
 80090b8:	6013      	str	r3, [r2, #0]
			led.fullColor('R');
 80090ba:	2152      	movs	r1, #82	; 0x52
 80090bc:	484a      	ldr	r0, [pc, #296]	; (80091e8 <cppLoop+0x1928>)
 80090be:	f7f8 fedd 	bl	8001e7c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80090c2:	2200      	movs	r2, #0
 80090c4:	f04f 31ff 	mov.w	r1, #4294967295
 80090c8:	4847      	ldr	r0, [pc, #284]	; (80091e8 <cppLoop+0x1928>)
 80090ca:	f7f8 ff93 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 80090ce:	e324      	b.n	800971a <cppLoop+0x1e5a>
		else if(joy_stick.getValue() == JOY_L){
 80090d0:	484c      	ldr	r0, [pc, #304]	; (8009204 <cppLoop+0x1944>)
 80090d2:	f7f8 fe6f 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b01      	cmp	r3, #1
 80090da:	bf0c      	ite	eq
 80090dc:	2301      	moveq	r3, #1
 80090de:	2300      	movne	r3, #0
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d058      	beq.n	8009198 <cppLoop+0x18d8>
			led.LR(-1, 1);
 80090e6:	2201      	movs	r2, #1
 80090e8:	f04f 31ff 	mov.w	r1, #4294967295
 80090ec:	483e      	ldr	r0, [pc, #248]	; (80091e8 <cppLoop+0x1928>)
 80090ee:	f7f8 ff81 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80090f2:	2064      	movs	r0, #100	; 0x64
 80090f4:	f000 fc3e 	bl	8009974 <HAL_Delay>
			if(selector_fast == 0){
 80090f8:	4b43      	ldr	r3, [pc, #268]	; (8009208 <cppLoop+0x1948>)
 80090fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d113      	bne.n	800912a <cppLoop+0x186a>
				adj_kp_fast = adj_kp_fast - 0.00001;
 8009102:	4b42      	ldr	r3, [pc, #264]	; (800920c <cppLoop+0x194c>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4618      	mov	r0, r3
 8009108:	f7f7 fa36 	bl	8000578 <__aeabi_f2d>
 800910c:	a330      	add	r3, pc, #192	; (adr r3, 80091d0 <cppLoop+0x1910>)
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	f7f7 f8d1 	bl	80002b8 <__aeabi_dsub>
 8009116:	4602      	mov	r2, r0
 8009118:	460b      	mov	r3, r1
 800911a:	4610      	mov	r0, r2
 800911c:	4619      	mov	r1, r3
 800911e:	f7f7 fd7b 	bl	8000c18 <__aeabi_d2f>
 8009122:	4603      	mov	r3, r0
 8009124:	4a39      	ldr	r2, [pc, #228]	; (800920c <cppLoop+0x194c>)
 8009126:	6013      	str	r3, [r2, #0]
 8009128:	e02b      	b.n	8009182 <cppLoop+0x18c2>
			else if(selector_fast == 1){
 800912a:	4b37      	ldr	r3, [pc, #220]	; (8009208 <cppLoop+0x1948>)
 800912c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d113      	bne.n	800915c <cppLoop+0x189c>
				adj_ki_fast = adj_ki_fast - 0.0001;
 8009134:	4b36      	ldr	r3, [pc, #216]	; (8009210 <cppLoop+0x1950>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4618      	mov	r0, r3
 800913a:	f7f7 fa1d 	bl	8000578 <__aeabi_f2d>
 800913e:	a326      	add	r3, pc, #152	; (adr r3, 80091d8 <cppLoop+0x1918>)
 8009140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009144:	f7f7 f8b8 	bl	80002b8 <__aeabi_dsub>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4610      	mov	r0, r2
 800914e:	4619      	mov	r1, r3
 8009150:	f7f7 fd62 	bl	8000c18 <__aeabi_d2f>
 8009154:	4603      	mov	r3, r0
 8009156:	4a2e      	ldr	r2, [pc, #184]	; (8009210 <cppLoop+0x1950>)
 8009158:	6013      	str	r3, [r2, #0]
 800915a:	e012      	b.n	8009182 <cppLoop+0x18c2>
				adj_kd_fast = adj_kd_fast - 0.000001;
 800915c:	4b2d      	ldr	r3, [pc, #180]	; (8009214 <cppLoop+0x1954>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4618      	mov	r0, r3
 8009162:	f7f7 fa09 	bl	8000578 <__aeabi_f2d>
 8009166:	a31e      	add	r3, pc, #120	; (adr r3, 80091e0 <cppLoop+0x1920>)
 8009168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916c:	f7f7 f8a4 	bl	80002b8 <__aeabi_dsub>
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	4610      	mov	r0, r2
 8009176:	4619      	mov	r1, r3
 8009178:	f7f7 fd4e 	bl	8000c18 <__aeabi_d2f>
 800917c:	4603      	mov	r3, r0
 800917e:	4a25      	ldr	r2, [pc, #148]	; (8009214 <cppLoop+0x1954>)
 8009180:	6013      	str	r3, [r2, #0]
			led.fullColor('R');
 8009182:	2152      	movs	r1, #82	; 0x52
 8009184:	4818      	ldr	r0, [pc, #96]	; (80091e8 <cppLoop+0x1928>)
 8009186:	f7f8 fe79 	bl	8001e7c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800918a:	2200      	movs	r2, #0
 800918c:	f04f 31ff 	mov.w	r1, #4294967295
 8009190:	4815      	ldr	r0, [pc, #84]	; (80091e8 <cppLoop+0x1928>)
 8009192:	f7f8 ff2f 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8009196:	e2c0      	b.n	800971a <cppLoop+0x1e5a>
		else if(joy_stick.getValue() == JOY_D){
 8009198:	481a      	ldr	r0, [pc, #104]	; (8009204 <cppLoop+0x1944>)
 800919a:	f7f8 fe0b 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b04      	cmp	r3, #4
 80091a2:	bf0c      	ite	eq
 80091a4:	2301      	moveq	r3, #1
 80091a6:	2300      	movne	r3, #0
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d034      	beq.n	8009218 <cppLoop+0x1958>
			led.LR(-1, 1);
 80091ae:	2201      	movs	r2, #1
 80091b0:	f04f 31ff 	mov.w	r1, #4294967295
 80091b4:	480c      	ldr	r0, [pc, #48]	; (80091e8 <cppLoop+0x1928>)
 80091b6:	f7f8 ff1d 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80091ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80091be:	f000 fbd9 	bl	8009974 <HAL_Delay>
			led.LR(-1, 0);
 80091c2:	2200      	movs	r2, #0
 80091c4:	f04f 31ff 	mov.w	r1, #4294967295
 80091c8:	4807      	ldr	r0, [pc, #28]	; (80091e8 <cppLoop+0x1928>)
 80091ca:	f7f8 ff13 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 80091ce:	e2a4      	b.n	800971a <cppLoop+0x1e5a>
 80091d0:	88e368f1 	.word	0x88e368f1
 80091d4:	3ee4f8b5 	.word	0x3ee4f8b5
 80091d8:	eb1c432d 	.word	0xeb1c432d
 80091dc:	3f1a36e2 	.word	0x3f1a36e2
 80091e0:	a0b5ed8d 	.word	0xa0b5ed8d
 80091e4:	3eb0c6f7 	.word	0x3eb0c6f7
 80091e8:	200005cc 	.word	0x200005cc
 80091ec:	20017da0 	.word	0x20017da0
 80091f0:	447a0000 	.word	0x447a0000
 80091f4:	0801ac44 	.word	0x0801ac44
 80091f8:	42c80000 	.word	0x42c80000
 80091fc:	461c4000 	.word	0x461c4000
 8009200:	0801ab44 	.word	0x0801ab44
 8009204:	200005c0 	.word	0x200005c0
 8009208:	2003d3fe 	.word	0x2003d3fe
 800920c:	2003d418 	.word	0x2003d418
 8009210:	2003d420 	.word	0x2003d420
 8009214:	2003d428 	.word	0x2003d428
		else if(joy_stick.getValue() == JOY_C){
 8009218:	48c1      	ldr	r0, [pc, #772]	; (8009520 <cppLoop+0x1c60>)
 800921a:	f7f8 fdcb 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 800921e:	4603      	mov	r3, r0
 8009220:	2b02      	cmp	r3, #2
 8009222:	bf0c      	ite	eq
 8009224:	2301      	moveq	r3, #1
 8009226:	2300      	movne	r3, #0
 8009228:	b2db      	uxtb	r3, r3
 800922a:	2b00      	cmp	r3, #0
 800922c:	f000 8275 	beq.w	800971a <cppLoop+0x1e5a>
			led.LR(-1, 1);
 8009230:	2201      	movs	r2, #1
 8009232:	f04f 31ff 	mov.w	r1, #4294967295
 8009236:	48bb      	ldr	r0, [pc, #748]	; (8009524 <cppLoop+0x1c64>)
 8009238:	f7f8 fedc 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800923c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009240:	f000 fb98 	bl	8009974 <HAL_Delay>
			sd_write_array_float("PARAMS", "KPFAST.TXT", 1, &adj_kp_fast, OVER_WRITE);
 8009244:	2300      	movs	r3, #0
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	4bb7      	ldr	r3, [pc, #732]	; (8009528 <cppLoop+0x1c68>)
 800924a:	2201      	movs	r2, #1
 800924c:	49b7      	ldr	r1, [pc, #732]	; (800952c <cppLoop+0x1c6c>)
 800924e:	48b8      	ldr	r0, [pc, #736]	; (8009530 <cppLoop+0x1c70>)
 8009250:	f7f8 f994 	bl	800157c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KIFAST.TXT", 1, &adj_ki_fast, OVER_WRITE);
 8009254:	2300      	movs	r3, #0
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	4bb6      	ldr	r3, [pc, #728]	; (8009534 <cppLoop+0x1c74>)
 800925a:	2201      	movs	r2, #1
 800925c:	49b6      	ldr	r1, [pc, #728]	; (8009538 <cppLoop+0x1c78>)
 800925e:	48b4      	ldr	r0, [pc, #720]	; (8009530 <cppLoop+0x1c70>)
 8009260:	f7f8 f98c 	bl	800157c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KDFAST.TXT", 1, &adj_kd_fast, OVER_WRITE);
 8009264:	2300      	movs	r3, #0
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	4bb4      	ldr	r3, [pc, #720]	; (800953c <cppLoop+0x1c7c>)
 800926a:	2201      	movs	r2, #1
 800926c:	49b4      	ldr	r1, [pc, #720]	; (8009540 <cppLoop+0x1c80>)
 800926e:	48b0      	ldr	r0, [pc, #704]	; (8009530 <cppLoop+0x1c70>)
 8009270:	f7f8 f984 	bl	800157c <sd_write_array_float>
			line_trace.setGainFast(adj_kp_fast, adj_ki_fast, adj_kd_fast);
 8009274:	4bac      	ldr	r3, [pc, #688]	; (8009528 <cppLoop+0x1c68>)
 8009276:	edd3 7a00 	vldr	s15, [r3]
 800927a:	4bae      	ldr	r3, [pc, #696]	; (8009534 <cppLoop+0x1c74>)
 800927c:	ed93 7a00 	vldr	s14, [r3]
 8009280:	4bae      	ldr	r3, [pc, #696]	; (800953c <cppLoop+0x1c7c>)
 8009282:	edd3 6a00 	vldr	s13, [r3]
 8009286:	eeb0 1a66 	vmov.f32	s2, s13
 800928a:	eef0 0a47 	vmov.f32	s1, s14
 800928e:	eeb0 0a67 	vmov.f32	s0, s15
 8009292:	48ac      	ldr	r0, [pc, #688]	; (8009544 <cppLoop+0x1c84>)
 8009294:	f7fa fb6d 	bl	8003972 <_ZN9LineTrace11setGainFastEfff>
			led.LR(-1, 0);
 8009298:	2200      	movs	r2, #0
 800929a:	f04f 31ff 	mov.w	r1, #4294967295
 800929e:	48a1      	ldr	r0, [pc, #644]	; (8009524 <cppLoop+0x1c64>)
 80092a0:	f7f8 fea8 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 80092a4:	e239      	b.n	800971a <cppLoop+0x1e5a>

	case 10:
		led.fullColor('~');
 80092a6:	217e      	movs	r1, #126	; 0x7e
 80092a8:	489e      	ldr	r0, [pc, #632]	; (8009524 <cppLoop+0x1c64>)
 80092aa:	f7f8 fde7 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 80092ae:	f7f7 ff29 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 80092b2:	2100      	movs	r1, #0
 80092b4:	2000      	movs	r0, #0
 80092b6:	f7f7 ff35 	bl	8001124 <lcd_locate>
		lcd_printf("Create  ");
 80092ba:	48a3      	ldr	r0, [pc, #652]	; (8009548 <cppLoop+0x1c88>)
 80092bc:	f7f7 ff5d 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 80092c0:	2101      	movs	r1, #1
 80092c2:	2000      	movs	r0, #0
 80092c4:	f7f7 ff2e 	bl	8001124 <lcd_locate>
		lcd_printf("VelTable");
 80092c8:	48a0      	ldr	r0, [pc, #640]	; (800954c <cppLoop+0x1c8c>)
 80092ca:	f7f7 ff56 	bl	800117a <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 80092ce:	4894      	ldr	r0, [pc, #592]	; (8009520 <cppLoop+0x1c60>)
 80092d0:	f7f8 fd70 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	bf0c      	ite	eq
 80092da:	2301      	moveq	r3, #1
 80092dc:	2300      	movne	r3, #0
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 821c 	beq.w	800971e <cppLoop+0x1e5e>
			HAL_Delay(500);
 80092e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80092ea:	f000 fb43 	bl	8009974 <HAL_Delay>
			led.LR(-1, 1);
 80092ee:	2201      	movs	r2, #1
 80092f0:	f04f 31ff 	mov.w	r1, #4294967295
 80092f4:	488b      	ldr	r0, [pc, #556]	; (8009524 <cppLoop+0x1c64>)
 80092f6:	f7f8 fe7d 	bl	8001ff4 <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 80092fa:	2102      	movs	r1, #2
 80092fc:	4891      	ldr	r0, [pc, #580]	; (8009544 <cppLoop+0x1c84>)
 80092fe:	f7fa ffd3 	bl	80042a8 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8009302:	4b93      	ldr	r3, [pc, #588]	; (8009550 <cppLoop+0x1c90>)
 8009304:	edd3 7a00 	vldr	s15, [r3]
 8009308:	eeb0 0a67 	vmov.f32	s0, s15
 800930c:	488d      	ldr	r0, [pc, #564]	; (8009544 <cppLoop+0x1c84>)
 800930e:	f7fa fba3 	bl	8003a58 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8009312:	4b8f      	ldr	r3, [pc, #572]	; (8009550 <cppLoop+0x1c90>)
 8009314:	edd3 7a00 	vldr	s15, [r3]
 8009318:	eeb0 0a67 	vmov.f32	s0, s15
 800931c:	4889      	ldr	r0, [pc, #548]	; (8009544 <cppLoop+0x1c84>)
 800931e:	f7fa fbab 	bl	8003a78 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8009322:	4b8b      	ldr	r3, [pc, #556]	; (8009550 <cppLoop+0x1c90>)
 8009324:	edd3 7a00 	vldr	s15, [r3]
 8009328:	eeb0 0a67 	vmov.f32	s0, s15
 800932c:	4885      	ldr	r0, [pc, #532]	; (8009544 <cppLoop+0x1c84>)
 800932e:	f7fa fbc3 	bl	8003ab8 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009332:	4884      	ldr	r0, [pc, #528]	; (8009544 <cppLoop+0x1c84>)
 8009334:	f7f9 fed0 	bl	80030d8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 8009338:	2200      	movs	r2, #0
 800933a:	f04f 31ff 	mov.w	r1, #4294967295
 800933e:	4879      	ldr	r0, [pc, #484]	; (8009524 <cppLoop+0x1c64>)
 8009340:	f7f8 fe58 	bl	8001ff4 <_ZN3LED2LREaa>
		}

		break;
 8009344:	e1eb      	b.n	800971e <cppLoop+0x1e5e>

	case 11:
		led.fullColor('~');
 8009346:	217e      	movs	r1, #126	; 0x7e
 8009348:	4876      	ldr	r0, [pc, #472]	; (8009524 <cppLoop+0x1c64>)
 800934a:	f7f8 fd97 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 800934e:	f7f7 fed9 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 8009352:	2100      	movs	r1, #0
 8009354:	2000      	movs	r0, #0
 8009356:	f7f7 fee5 	bl	8001124 <lcd_locate>
		lcd_printf("Step");
 800935a:	487e      	ldr	r0, [pc, #504]	; (8009554 <cppLoop+0x1c94>)
 800935c:	f7f7 ff0d 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 8009360:	2101      	movs	r1, #1
 8009362:	2000      	movs	r0, #0
 8009364:	f7f7 fede 	bl	8001124 <lcd_locate>
		lcd_printf("Record");
 8009368:	487b      	ldr	r0, [pc, #492]	; (8009558 <cppLoop+0x1c98>)
 800936a:	f7f7 ff06 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800936e:	486c      	ldr	r0, [pc, #432]	; (8009520 <cppLoop+0x1c60>)
 8009370:	f7f8 fd20 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8009374:	4603      	mov	r3, r0
 8009376:	2b02      	cmp	r3, #2
 8009378:	bf0c      	ite	eq
 800937a:	2301      	moveq	r3, #1
 800937c:	2300      	movne	r3, #0
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 81ce 	beq.w	8009722 <cppLoop+0x1e62>
			HAL_Delay(1500);
 8009386:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800938a:	f000 faf3 	bl	8009974 <HAL_Delay>
			led.LR(-1, 1);
 800938e:	2201      	movs	r2, #1
 8009390:	f04f 31ff 	mov.w	r1, #4294967295
 8009394:	4863      	ldr	r0, [pc, #396]	; (8009524 <cppLoop+0x1c64>)
 8009396:	f7f8 fe2d 	bl	8001ff4 <_ZN3LED2LREaa>

			logger.start();
 800939a:	4870      	ldr	r0, [pc, #448]	; (800955c <cppLoop+0x1c9c>)
 800939c:	f7fb fb6b 	bl	8004a76 <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 80093a0:	ed9f 1b59 	vldr	d1, [pc, #356]	; 8009508 <cppLoop+0x1c48>
 80093a4:	ed9f 0b5a 	vldr	d0, [pc, #360]	; 8009510 <cppLoop+0x1c50>
 80093a8:	486d      	ldr	r0, [pc, #436]	; (8009560 <cppLoop+0x1ca0>)
 80093aa:	f7fb fbf5 	bl	8004b98 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 80093ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80093b2:	f000 fadf 	bl	8009974 <HAL_Delay>

			logger.stop();
 80093b6:	4869      	ldr	r0, [pc, #420]	; (800955c <cppLoop+0x1c9c>)
 80093b8:	f7fb fb6e 	bl	8004a98 <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 80093bc:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8009518 <cppLoop+0x1c58>
 80093c0:	ed9f 0b55 	vldr	d0, [pc, #340]	; 8009518 <cppLoop+0x1c58>
 80093c4:	4866      	ldr	r0, [pc, #408]	; (8009560 <cppLoop+0x1ca0>)
 80093c6:	f7fb fbe7 	bl	8004b98 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 80093ca:	4a66      	ldr	r2, [pc, #408]	; (8009564 <cppLoop+0x1ca4>)
 80093cc:	4966      	ldr	r1, [pc, #408]	; (8009568 <cppLoop+0x1ca8>)
 80093ce:	4863      	ldr	r0, [pc, #396]	; (800955c <cppLoop+0x1c9c>)
 80093d0:	f7fb fa65 	bl	800489e <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80093d4:	2200      	movs	r2, #0
 80093d6:	f04f 31ff 	mov.w	r1, #4294967295
 80093da:	4852      	ldr	r0, [pc, #328]	; (8009524 <cppLoop+0x1c64>)
 80093dc:	f7f8 fe0a 	bl	8001ff4 <_ZN3LED2LREaa>
		}
		break;
 80093e0:	e19f      	b.n	8009722 <cppLoop+0x1e62>

	case 12:
		led.fullColor('~');
 80093e2:	217e      	movs	r1, #126	; 0x7e
 80093e4:	484f      	ldr	r0, [pc, #316]	; (8009524 <cppLoop+0x1c64>)
 80093e6:	f7f8 fd49 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 80093ea:	f7f7 fe8b 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 80093ee:	2100      	movs	r1, #0
 80093f0:	2000      	movs	r0, #0
 80093f2:	f7f7 fe97 	bl	8001124 <lcd_locate>
		lcd_printf("PID");
 80093f6:	485d      	ldr	r0, [pc, #372]	; (800956c <cppLoop+0x1cac>)
 80093f8:	f7f7 febf 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 80093fc:	2101      	movs	r1, #1
 80093fe:	2000      	movs	r0, #0
 8009400:	f7f7 fe90 	bl	8001124 <lcd_locate>
		lcd_printf("Response");
 8009404:	485a      	ldr	r0, [pc, #360]	; (8009570 <cppLoop+0x1cb0>)
 8009406:	f7f7 feb8 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800940a:	4845      	ldr	r0, [pc, #276]	; (8009520 <cppLoop+0x1c60>)
 800940c:	f7f8 fcd2 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8009410:	4603      	mov	r3, r0
 8009412:	2b02      	cmp	r3, #2
 8009414:	bf0c      	ite	eq
 8009416:	2301      	moveq	r3, #1
 8009418:	2300      	movne	r3, #0
 800941a:	b2db      	uxtb	r3, r3
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 8182 	beq.w	8009726 <cppLoop+0x1e66>
			HAL_Delay(1500);
 8009422:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8009426:	f000 faa5 	bl	8009974 <HAL_Delay>
			led.LR(-1, 1);
 800942a:	2201      	movs	r2, #1
 800942c:	f04f 31ff 	mov.w	r1, #4294967295
 8009430:	483c      	ldr	r0, [pc, #240]	; (8009524 <cppLoop+0x1c64>)
 8009432:	f7f8 fddf 	bl	8001ff4 <_ZN3LED2LREaa>

			logger.start();
 8009436:	4849      	ldr	r0, [pc, #292]	; (800955c <cppLoop+0x1c9c>)
 8009438:	f7fb fb1d 	bl	8004a76 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 800943c:	484d      	ldr	r0, [pc, #308]	; (8009574 <cppLoop+0x1cb4>)
 800943e:	f7fc faf4 	bl	8005a2a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 8009442:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8009578 <cppLoop+0x1cb8>
 8009446:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800944a:	484a      	ldr	r0, [pc, #296]	; (8009574 <cppLoop+0x1cb4>)
 800944c:	f7fc fa80 	bl	8005950 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8009450:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009454:	f000 fa8e 	bl	8009974 <HAL_Delay>

			logger.stop();
 8009458:	4840      	ldr	r0, [pc, #256]	; (800955c <cppLoop+0x1c9c>)
 800945a:	f7fb fb1d 	bl	8004a98 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 800945e:	4845      	ldr	r0, [pc, #276]	; (8009574 <cppLoop+0x1cb4>)
 8009460:	f7fc faf6 	bl	8005a50 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8009464:	4a45      	ldr	r2, [pc, #276]	; (800957c <cppLoop+0x1cbc>)
 8009466:	4940      	ldr	r1, [pc, #256]	; (8009568 <cppLoop+0x1ca8>)
 8009468:	483c      	ldr	r0, [pc, #240]	; (800955c <cppLoop+0x1c9c>)
 800946a:	f7fb fa18 	bl	800489e <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800946e:	2200      	movs	r2, #0
 8009470:	f04f 31ff 	mov.w	r1, #4294967295
 8009474:	482b      	ldr	r0, [pc, #172]	; (8009524 <cppLoop+0x1c64>)
 8009476:	f7f8 fdbd 	bl	8001ff4 <_ZN3LED2LREaa>
		}
		break;
 800947a:	e154      	b.n	8009726 <cppLoop+0x1e66>

	case 13:
		led.fullColor('~');
 800947c:	217e      	movs	r1, #126	; 0x7e
 800947e:	4829      	ldr	r0, [pc, #164]	; (8009524 <cppLoop+0x1c64>)
 8009480:	f7f8 fcfc 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 8009484:	f7f7 fe3e 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 8009488:	2100      	movs	r1, #0
 800948a:	2000      	movs	r0, #0
 800948c:	f7f7 fe4a 	bl	8001124 <lcd_locate>
		lcd_printf("Msig");
 8009490:	483b      	ldr	r0, [pc, #236]	; (8009580 <cppLoop+0x1cc0>)
 8009492:	f7f7 fe72 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 8009496:	2101      	movs	r1, #1
 8009498:	2000      	movs	r0, #0
 800949a:	f7f7 fe43 	bl	8001124 <lcd_locate>
		lcd_printf("Record");
 800949e:	482e      	ldr	r0, [pc, #184]	; (8009558 <cppLoop+0x1c98>)
 80094a0:	f7f7 fe6b 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80094a4:	481e      	ldr	r0, [pc, #120]	; (8009520 <cppLoop+0x1c60>)
 80094a6:	f7f8 fc85 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	bf0c      	ite	eq
 80094b0:	2301      	moveq	r3, #1
 80094b2:	2300      	movne	r3, #0
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f000 8137 	beq.w	800972a <cppLoop+0x1e6a>
			led.LR(-1, 1);
 80094bc:	2201      	movs	r2, #1
 80094be:	f04f 31ff 	mov.w	r1, #4294967295
 80094c2:	4818      	ldr	r0, [pc, #96]	; (8009524 <cppLoop+0x1c64>)
 80094c4:	f7f8 fd96 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(1500);
 80094c8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80094cc:	f000 fa52 	bl	8009974 <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 80094d0:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8009584 <cppLoop+0x1cc4>
 80094d4:	482c      	ldr	r0, [pc, #176]	; (8009588 <cppLoop+0x1cc8>)
 80094d6:	f7fc f8c7 	bl	8005668 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 80094da:	482b      	ldr	r0, [pc, #172]	; (8009588 <cppLoop+0x1cc8>)
 80094dc:	f7fc f8d4 	bl	8005688 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 80094e0:	f244 405c 	movw	r0, #17500	; 0x445c
 80094e4:	f000 fa46 	bl	8009974 <HAL_Delay>
			sys_ident.stop();
 80094e8:	4827      	ldr	r0, [pc, #156]	; (8009588 <cppLoop+0x1cc8>)
 80094ea:	f7fc f8e1 	bl	80056b0 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 80094ee:	4826      	ldr	r0, [pc, #152]	; (8009588 <cppLoop+0x1cc8>)
 80094f0:	f7fc f846 	bl	8005580 <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 80094f4:	2200      	movs	r2, #0
 80094f6:	f04f 31ff 	mov.w	r1, #4294967295
 80094fa:	480a      	ldr	r0, [pc, #40]	; (8009524 <cppLoop+0x1c64>)
 80094fc:	f7f8 fd7a 	bl	8001ff4 <_ZN3LED2LREaa>
		}
		break;
 8009500:	e113      	b.n	800972a <cppLoop+0x1e6a>
 8009502:	bf00      	nop
 8009504:	f3af 8000 	nop.w
 8009508:	33333333 	.word	0x33333333
 800950c:	bfd33333 	.word	0xbfd33333
 8009510:	33333333 	.word	0x33333333
 8009514:	3fd33333 	.word	0x3fd33333
	...
 8009520:	200005c0 	.word	0x200005c0
 8009524:	200005cc 	.word	0x200005cc
 8009528:	2003d418 	.word	0x2003d418
 800952c:	0801ac50 	.word	0x0801ac50
 8009530:	0801ab5c 	.word	0x0801ab5c
 8009534:	2003d420 	.word	0x2003d420
 8009538:	0801ac5c 	.word	0x0801ac5c
 800953c:	2003d428 	.word	0x2003d428
 8009540:	0801ac68 	.word	0x0801ac68
 8009544:	20017da0 	.word	0x20017da0
 8009548:	0801ac74 	.word	0x0801ac74
 800954c:	0801ac80 	.word	0x0801ac80
 8009550:	2003d440 	.word	0x2003d440
 8009554:	0801ac8c 	.word	0x0801ac8c
 8009558:	0801ac94 	.word	0x0801ac94
 800955c:	200005f0 	.word	0x200005f0
 8009560:	200005c8 	.word	0x200005c8
 8009564:	0801ac9c 	.word	0x0801ac9c
 8009568:	0801aca8 	.word	0x0801aca8
 800956c:	0801acb4 	.word	0x0801acb4
 8009570:	0801acb8 	.word	0x0801acb8
 8009574:	20017d20 	.word	0x20017d20
 8009578:	00000000 	.word	0x00000000
 800957c:	0801acc4 	.word	0x0801acc4
 8009580:	0801acd0 	.word	0x0801acd0
 8009584:	3e99999a 	.word	0x3e99999a
 8009588:	20025ab8 	.word	0x20025ab8

	case 14:
		led.fullColor('W');
 800958c:	2157      	movs	r1, #87	; 0x57
 800958e:	486c      	ldr	r0, [pc, #432]	; (8009740 <cppLoop+0x1e80>)
 8009590:	f7f8 fc74 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 8009594:	f7f7 fdb6 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 8009598:	2100      	movs	r1, #0
 800959a:	2000      	movs	r0, #0
 800959c:	f7f7 fdc2 	bl	8001124 <lcd_locate>
		lcd_printf("LogRun2    ");
 80095a0:	4868      	ldr	r0, [pc, #416]	; (8009744 <cppLoop+0x1e84>)
 80095a2:	f7f7 fdea 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 80095a6:	2101      	movs	r1, #1
 80095a8:	2000      	movs	r0, #0
 80095aa:	f7f7 fdbb 	bl	8001124 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 80095ae:	4b66      	ldr	r3, [pc, #408]	; (8009748 <cppLoop+0x1e88>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7f6 ffe0 	bl	8000578 <__aeabi_f2d>
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	4863      	ldr	r0, [pc, #396]	; (800974c <cppLoop+0x1e8c>)
 80095be:	f7f7 fddc 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80095c2:	4863      	ldr	r0, [pc, #396]	; (8009750 <cppLoop+0x1e90>)
 80095c4:	f7f8 fbf6 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	bf0c      	ite	eq
 80095ce:	2301      	moveq	r3, #1
 80095d0:	2300      	movne	r3, #0
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f000 80aa 	beq.w	800972e <cppLoop+0x1e6e>
			HAL_Delay(500);
 80095da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80095de:	f000 f9c9 	bl	8009974 <HAL_Delay>

			led.LR(1, -1);
 80095e2:	f04f 32ff 	mov.w	r2, #4294967295
 80095e6:	2101      	movs	r1, #1
 80095e8:	4855      	ldr	r0, [pc, #340]	; (8009740 <cppLoop+0x1e80>)
 80095ea:	f7f8 fd03 	bl	8001ff4 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 80095ee:	2102      	movs	r1, #2
 80095f0:	4858      	ldr	r0, [pc, #352]	; (8009754 <cppLoop+0x1e94>)
 80095f2:	f7fa fe59 	bl	80042a8 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 80095f6:	4b58      	ldr	r3, [pc, #352]	; (8009758 <cppLoop+0x1e98>)
 80095f8:	edd3 7a00 	vldr	s15, [r3]
 80095fc:	eeb0 0a67 	vmov.f32	s0, s15
 8009600:	4854      	ldr	r0, [pc, #336]	; (8009754 <cppLoop+0x1e94>)
 8009602:	f7fa fa29 	bl	8003a58 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8009606:	4b50      	ldr	r3, [pc, #320]	; (8009748 <cppLoop+0x1e88>)
 8009608:	edd3 7a00 	vldr	s15, [r3]
 800960c:	eeb0 0a67 	vmov.f32	s0, s15
 8009610:	4850      	ldr	r0, [pc, #320]	; (8009754 <cppLoop+0x1e94>)
 8009612:	f7fa fa31 	bl	8003a78 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8009616:	4b4c      	ldr	r3, [pc, #304]	; (8009748 <cppLoop+0x1e88>)
 8009618:	edd3 7a00 	vldr	s15, [r3]
 800961c:	eeb0 0a67 	vmov.f32	s0, s15
 8009620:	484c      	ldr	r0, [pc, #304]	; (8009754 <cppLoop+0x1e94>)
 8009622:	f7fa fa49 	bl	8003ab8 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009626:	484b      	ldr	r0, [pc, #300]	; (8009754 <cppLoop+0x1e94>)
 8009628:	f7f9 fd56 	bl	80030d8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 800962c:	4849      	ldr	r0, [pc, #292]	; (8009754 <cppLoop+0x1e94>)
 800962e:	f7fa fd3d 	bl	80040ac <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8009632:	f04f 32ff 	mov.w	r2, #4294967295
 8009636:	2100      	movs	r1, #0
 8009638:	4841      	ldr	r0, [pc, #260]	; (8009740 <cppLoop+0x1e80>)
 800963a:	f7f8 fcdb 	bl	8001ff4 <_ZN3LED2LREaa>
		}

		break;
 800963e:	e076      	b.n	800972e <cppLoop+0x1e6e>

	case 15:
		led.fullColor('W');
 8009640:	2157      	movs	r1, #87	; 0x57
 8009642:	483f      	ldr	r0, [pc, #252]	; (8009740 <cppLoop+0x1e80>)
 8009644:	f7f8 fc1a 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 8009648:	f7f7 fd5c 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 800964c:	2100      	movs	r1, #0
 800964e:	2000      	movs	r0, #0
 8009650:	f7f7 fd68 	bl	8001124 <lcd_locate>
		lcd_printf("LogRun1    ");
 8009654:	4841      	ldr	r0, [pc, #260]	; (800975c <cppLoop+0x1e9c>)
 8009656:	f7f7 fd90 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 800965a:	2101      	movs	r1, #1
 800965c:	2000      	movs	r0, #0
 800965e:	f7f7 fd61 	bl	8001124 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8009662:	4b3f      	ldr	r3, [pc, #252]	; (8009760 <cppLoop+0x1ea0>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4618      	mov	r0, r3
 8009668:	f7f6 ff86 	bl	8000578 <__aeabi_f2d>
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	4836      	ldr	r0, [pc, #216]	; (800974c <cppLoop+0x1e8c>)
 8009672:	f7f7 fd82 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009676:	4836      	ldr	r0, [pc, #216]	; (8009750 <cppLoop+0x1e90>)
 8009678:	f7f8 fb9c 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 800967c:	4603      	mov	r3, r0
 800967e:	2b02      	cmp	r3, #2
 8009680:	bf0c      	ite	eq
 8009682:	2301      	moveq	r3, #1
 8009684:	2300      	movne	r3, #0
 8009686:	b2db      	uxtb	r3, r3
 8009688:	2b00      	cmp	r3, #0
 800968a:	d052      	beq.n	8009732 <cppLoop+0x1e72>
			HAL_Delay(500);
 800968c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009690:	f000 f970 	bl	8009974 <HAL_Delay>

			led.LR(1, -1);
 8009694:	f04f 32ff 	mov.w	r2, #4294967295
 8009698:	2101      	movs	r1, #1
 800969a:	4829      	ldr	r0, [pc, #164]	; (8009740 <cppLoop+0x1e80>)
 800969c:	f7f8 fcaa 	bl	8001ff4 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 80096a0:	2101      	movs	r1, #1
 80096a2:	482c      	ldr	r0, [pc, #176]	; (8009754 <cppLoop+0x1e94>)
 80096a4:	f7fa fe00 	bl	80042a8 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 80096a8:	4b2e      	ldr	r3, [pc, #184]	; (8009764 <cppLoop+0x1ea4>)
 80096aa:	edd3 7a00 	vldr	s15, [r3]
 80096ae:	eeb0 0a67 	vmov.f32	s0, s15
 80096b2:	4828      	ldr	r0, [pc, #160]	; (8009754 <cppLoop+0x1e94>)
 80096b4:	f7fa f9d0 	bl	8003a58 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80096b8:	4b29      	ldr	r3, [pc, #164]	; (8009760 <cppLoop+0x1ea0>)
 80096ba:	edd3 7a00 	vldr	s15, [r3]
 80096be:	eeb0 0a67 	vmov.f32	s0, s15
 80096c2:	4824      	ldr	r0, [pc, #144]	; (8009754 <cppLoop+0x1e94>)
 80096c4:	f7fa f9d8 	bl	8003a78 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80096c8:	4b26      	ldr	r3, [pc, #152]	; (8009764 <cppLoop+0x1ea4>)
 80096ca:	edd3 7a00 	vldr	s15, [r3]
 80096ce:	eeb0 0a67 	vmov.f32	s0, s15
 80096d2:	4820      	ldr	r0, [pc, #128]	; (8009754 <cppLoop+0x1e94>)
 80096d4:	f7fa f9f0 	bl	8003ab8 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80096d8:	481e      	ldr	r0, [pc, #120]	; (8009754 <cppLoop+0x1e94>)
 80096da:	f7f9 fcfd 	bl	80030d8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 80096de:	481d      	ldr	r0, [pc, #116]	; (8009754 <cppLoop+0x1e94>)
 80096e0:	f7fa fce4 	bl	80040ac <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80096e4:	f04f 32ff 	mov.w	r2, #4294967295
 80096e8:	2100      	movs	r1, #0
 80096ea:	4815      	ldr	r0, [pc, #84]	; (8009740 <cppLoop+0x1e80>)
 80096ec:	f7f8 fc82 	bl	8001ff4 <_ZN3LED2LREaa>
		}
		break;
 80096f0:	e01f      	b.n	8009732 <cppLoop+0x1e72>

	default:
		break;
 80096f2:	bf00      	nop
 80096f4:	e01e      	b.n	8009734 <cppLoop+0x1e74>
		break;
 80096f6:	bf00      	nop
 80096f8:	e01c      	b.n	8009734 <cppLoop+0x1e74>
		break;
 80096fa:	bf00      	nop
 80096fc:	e01a      	b.n	8009734 <cppLoop+0x1e74>
		break;
 80096fe:	bf00      	nop
 8009700:	e018      	b.n	8009734 <cppLoop+0x1e74>
		break;
 8009702:	bf00      	nop
 8009704:	e016      	b.n	8009734 <cppLoop+0x1e74>
		break;
 8009706:	bf00      	nop
 8009708:	e014      	b.n	8009734 <cppLoop+0x1e74>
		break;
 800970a:	bf00      	nop
 800970c:	e012      	b.n	8009734 <cppLoop+0x1e74>
		break;
 800970e:	bf00      	nop
 8009710:	e010      	b.n	8009734 <cppLoop+0x1e74>
		break;
 8009712:	bf00      	nop
 8009714:	e00e      	b.n	8009734 <cppLoop+0x1e74>
		break;
 8009716:	bf00      	nop
 8009718:	e00c      	b.n	8009734 <cppLoop+0x1e74>
		break;
 800971a:	bf00      	nop
 800971c:	e00a      	b.n	8009734 <cppLoop+0x1e74>
		break;
 800971e:	bf00      	nop
 8009720:	e008      	b.n	8009734 <cppLoop+0x1e74>
		break;
 8009722:	bf00      	nop
 8009724:	e006      	b.n	8009734 <cppLoop+0x1e74>
		break;
 8009726:	bf00      	nop
 8009728:	e004      	b.n	8009734 <cppLoop+0x1e74>
		break;
 800972a:	bf00      	nop
 800972c:	e002      	b.n	8009734 <cppLoop+0x1e74>
		break;
 800972e:	bf00      	nop
 8009730:	e000      	b.n	8009734 <cppLoop+0x1e74>
		break;
 8009732:	bf00      	nop

	}

	HAL_Delay(30);
 8009734:	201e      	movs	r0, #30
 8009736:	f000 f91d 	bl	8009974 <HAL_Delay>

}
 800973a:	bf00      	nop
 800973c:	46bd      	mov	sp, r7
 800973e:	bdb0      	pop	{r4, r5, r7, pc}
 8009740:	200005cc 	.word	0x200005cc
 8009744:	0801acd8 	.word	0x0801acd8
 8009748:	2003d440 	.word	0x2003d440
 800974c:	0801ab80 	.word	0x0801ab80
 8009750:	200005c0 	.word	0x200005c0
 8009754:	20017da0 	.word	0x20017da0
 8009758:	2003d450 	.word	0x2003d450
 800975c:	0801ace4 	.word	0x0801ace4
 8009760:	2003d438 	.word	0x2003d438
 8009764:	2003d448 	.word	0x2003d448

08009768 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009768:	b580      	push	{r7, lr}
 800976a:	b088      	sub	sp, #32
 800976c:	af06      	add	r7, sp, #24
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d13d      	bne.n	80097f4 <_Z41__static_initialization_and_destruction_0ii+0x8c>
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800977e:	4293      	cmp	r3, r2
 8009780:	d138      	bne.n	80097f4 <_Z41__static_initialization_and_destruction_0ii+0x8c>
LineSensor line_sensor;
 8009782:	481e      	ldr	r0, [pc, #120]	; (80097fc <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8009784:	f7f8 fc6e 	bl	8002064 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009788:	481d      	ldr	r0, [pc, #116]	; (8009800 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800978a:	f7fb fd69 	bl	8005260 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 800978e:	481d      	ldr	r0, [pc, #116]	; (8009804 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8009790:	f7f8 fb04 	bl	8001d9c <_ZN8JoyStickC1Ev>
Motor motor;
 8009794:	481c      	ldr	r0, [pc, #112]	; (8009808 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009796:	f7fb f990 	bl	8004aba <_ZN5MotorC1Ev>
IMU imu;
 800979a:	481c      	ldr	r0, [pc, #112]	; (800980c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800979c:	f7f8 f90a 	bl	80019b4 <_ZN3IMUC1Ev>
Logger logger;
 80097a0:	481b      	ldr	r0, [pc, #108]	; (8009810 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80097a2:	f7fa fee9 	bl	8004578 <_ZN6LoggerC1Ev>
Encoder encoder;
 80097a6:	481b      	ldr	r0, [pc, #108]	; (8009814 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80097a8:	f7f7 fd07 	bl	80011ba <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 80097ac:	4b17      	ldr	r3, [pc, #92]	; (800980c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80097ae:	4a19      	ldr	r2, [pc, #100]	; (8009814 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80097b0:	4915      	ldr	r1, [pc, #84]	; (8009808 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80097b2:	4819      	ldr	r0, [pc, #100]	; (8009818 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80097b4:	f7fb ffa0 	bl	80056f8 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 80097b8:	4b17      	ldr	r3, [pc, #92]	; (8009818 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80097ba:	4a14      	ldr	r2, [pc, #80]	; (800980c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80097bc:	4915      	ldr	r1, [pc, #84]	; (8009814 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80097be:	4817      	ldr	r0, [pc, #92]	; (800981c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80097c0:	f7fb fa5c 	bl	8004c7c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu);
 80097c4:	4b11      	ldr	r3, [pc, #68]	; (800980c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80097c6:	9304      	str	r3, [sp, #16]
 80097c8:	4b11      	ldr	r3, [pc, #68]	; (8009810 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80097ca:	9303      	str	r3, [sp, #12]
 80097cc:	4b13      	ldr	r3, [pc, #76]	; (800981c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80097ce:	9302      	str	r3, [sp, #8]
 80097d0:	4b10      	ldr	r3, [pc, #64]	; (8009814 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80097d2:	9301      	str	r3, [sp, #4]
 80097d4:	4b0a      	ldr	r3, [pc, #40]	; (8009800 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80097d6:	9300      	str	r3, [sp, #0]
 80097d8:	4b0f      	ldr	r3, [pc, #60]	; (8009818 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80097da:	4a08      	ldr	r2, [pc, #32]	; (80097fc <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80097dc:	490a      	ldr	r1, [pc, #40]	; (8009808 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80097de:	4810      	ldr	r0, [pc, #64]	; (8009820 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80097e0:	f7f8 ff6a 	bl	80026b8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>
SystemIdentification sys_ident(&logger, &motor);
 80097e4:	4a08      	ldr	r2, [pc, #32]	; (8009808 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80097e6:	490a      	ldr	r1, [pc, #40]	; (8009810 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80097e8:	480e      	ldr	r0, [pc, #56]	; (8009824 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80097ea:	f7fb fe7f 	bl	80054ec <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 80097ee:	480e      	ldr	r0, [pc, #56]	; (8009828 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80097f0:	f7fb fbc2 	bl	8004f78 <_ZN13PathFollowingC1Ev>
}
 80097f4:	bf00      	nop
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	200002c0 	.word	0x200002c0
 8009800:	200005b8 	.word	0x200005b8
 8009804:	200005c0 	.word	0x200005c0
 8009808:	200005c8 	.word	0x200005c8
 800980c:	200005dc 	.word	0x200005dc
 8009810:	200005f0 	.word	0x200005f0
 8009814:	20017d00 	.word	0x20017d00
 8009818:	20017d20 	.word	0x20017d20
 800981c:	20017d60 	.word	0x20017d60
 8009820:	20017da0 	.word	0x20017da0
 8009824:	20025ab8 	.word	0x20025ab8
 8009828:	20025cc8 	.word	0x20025cc8

0800982c <_GLOBAL__sub_I_line_sensor>:
 800982c:	b580      	push	{r7, lr}
 800982e:	af00      	add	r7, sp, #0
 8009830:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009834:	2001      	movs	r0, #1
 8009836:	f7ff ff97 	bl	8009768 <_Z41__static_initialization_and_destruction_0ii>
 800983a:	bd80      	pop	{r7, pc}

0800983c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800983c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009874 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009840:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009842:	e003      	b.n	800984c <LoopCopyDataInit>

08009844 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009844:	4b0c      	ldr	r3, [pc, #48]	; (8009878 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009846:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009848:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800984a:	3104      	adds	r1, #4

0800984c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800984c:	480b      	ldr	r0, [pc, #44]	; (800987c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800984e:	4b0c      	ldr	r3, [pc, #48]	; (8009880 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009850:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009852:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009854:	d3f6      	bcc.n	8009844 <CopyDataInit>
  ldr  r2, =_sbss
 8009856:	4a0b      	ldr	r2, [pc, #44]	; (8009884 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009858:	e002      	b.n	8009860 <LoopFillZerobss>

0800985a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800985a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800985c:	f842 3b04 	str.w	r3, [r2], #4

08009860 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009860:	4b09      	ldr	r3, [pc, #36]	; (8009888 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009862:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009864:	d3f9      	bcc.n	800985a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009866:	f7fd ff07 	bl	8007678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800986a:	f00b fe49 	bl	8015500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800986e:	f7fc f9cd 	bl	8005c0c <main>
  bx  lr    
 8009872:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009874:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009878:	0801b478 	.word	0x0801b478
  ldr  r0, =_sdata
 800987c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009880:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8009884:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009888:	20041e64 	.word	0x20041e64

0800988c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800988c:	e7fe      	b.n	800988c <ADC_IRQHandler>
	...

08009890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009894:	4b0e      	ldr	r3, [pc, #56]	; (80098d0 <HAL_Init+0x40>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a0d      	ldr	r2, [pc, #52]	; (80098d0 <HAL_Init+0x40>)
 800989a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800989e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80098a0:	4b0b      	ldr	r3, [pc, #44]	; (80098d0 <HAL_Init+0x40>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a0a      	ldr	r2, [pc, #40]	; (80098d0 <HAL_Init+0x40>)
 80098a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80098aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80098ac:	4b08      	ldr	r3, [pc, #32]	; (80098d0 <HAL_Init+0x40>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a07      	ldr	r2, [pc, #28]	; (80098d0 <HAL_Init+0x40>)
 80098b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80098b8:	2003      	movs	r0, #3
 80098ba:	f000 fd53 	bl	800a364 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80098be:	2000      	movs	r0, #0
 80098c0:	f000 f808 	bl	80098d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80098c4:	f7fd f8b4 	bl	8006a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	40023c00 	.word	0x40023c00

080098d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80098dc:	4b12      	ldr	r3, [pc, #72]	; (8009928 <HAL_InitTick+0x54>)
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	4b12      	ldr	r3, [pc, #72]	; (800992c <HAL_InitTick+0x58>)
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	4619      	mov	r1, r3
 80098e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80098ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80098ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 fd6b 	bl	800a3ce <HAL_SYSTICK_Config>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d001      	beq.n	8009902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	e00e      	b.n	8009920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2b0f      	cmp	r3, #15
 8009906:	d80a      	bhi.n	800991e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009908:	2200      	movs	r2, #0
 800990a:	6879      	ldr	r1, [r7, #4]
 800990c:	f04f 30ff 	mov.w	r0, #4294967295
 8009910:	f000 fd33 	bl	800a37a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009914:	4a06      	ldr	r2, [pc, #24]	; (8009930 <HAL_InitTick+0x5c>)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800991a:	2300      	movs	r3, #0
 800991c:	e000      	b.n	8009920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800991e:	2301      	movs	r3, #1
}
 8009920:	4618      	mov	r0, r3
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	20000000 	.word	0x20000000
 800992c:	20000008 	.word	0x20000008
 8009930:	20000004 	.word	0x20000004

08009934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009934:	b480      	push	{r7}
 8009936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009938:	4b06      	ldr	r3, [pc, #24]	; (8009954 <HAL_IncTick+0x20>)
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	461a      	mov	r2, r3
 800993e:	4b06      	ldr	r3, [pc, #24]	; (8009958 <HAL_IncTick+0x24>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4413      	add	r3, r2
 8009944:	4a04      	ldr	r2, [pc, #16]	; (8009958 <HAL_IncTick+0x24>)
 8009946:	6013      	str	r3, [r2, #0]
}
 8009948:	bf00      	nop
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	20000008 	.word	0x20000008
 8009958:	2003fde0 	.word	0x2003fde0

0800995c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800995c:	b480      	push	{r7}
 800995e:	af00      	add	r7, sp, #0
  return uwTick;
 8009960:	4b03      	ldr	r3, [pc, #12]	; (8009970 <HAL_GetTick+0x14>)
 8009962:	681b      	ldr	r3, [r3, #0]
}
 8009964:	4618      	mov	r0, r3
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	2003fde0 	.word	0x2003fde0

08009974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800997c:	f7ff ffee 	bl	800995c <HAL_GetTick>
 8009980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800998c:	d005      	beq.n	800999a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800998e:	4b0a      	ldr	r3, [pc, #40]	; (80099b8 <HAL_Delay+0x44>)
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	461a      	mov	r2, r3
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	4413      	add	r3, r2
 8009998:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800999a:	bf00      	nop
 800999c:	f7ff ffde 	bl	800995c <HAL_GetTick>
 80099a0:	4602      	mov	r2, r0
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	1ad3      	subs	r3, r2, r3
 80099a6:	68fa      	ldr	r2, [r7, #12]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d8f7      	bhi.n	800999c <HAL_Delay+0x28>
  {
  }
}
 80099ac:	bf00      	nop
 80099ae:	bf00      	nop
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	20000008 	.word	0x20000008

080099bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d101      	bne.n	80099d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e033      	b.n	8009a3a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d109      	bne.n	80099ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f7fd f850 	bl	8006a80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f2:	f003 0310 	and.w	r3, r3, #16
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d118      	bne.n	8009a2c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009a02:	f023 0302 	bic.w	r3, r3, #2
 8009a06:	f043 0202 	orr.w	r2, r3, #2
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 fa5a 	bl	8009ec8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1e:	f023 0303 	bic.w	r3, r3, #3
 8009a22:	f043 0201 	orr.w	r2, r3, #1
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	641a      	str	r2, [r3, #64]	; 0x40
 8009a2a:	e001      	b.n	8009a30 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
	...

08009a44 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b086      	sub	sp, #24
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009a50:	2300      	movs	r3, #0
 8009a52:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d101      	bne.n	8009a62 <HAL_ADC_Start_DMA+0x1e>
 8009a5e:	2302      	movs	r3, #2
 8009a60:	e0cc      	b.n	8009bfc <HAL_ADC_Start_DMA+0x1b8>
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2201      	movs	r2, #1
 8009a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	f003 0301 	and.w	r3, r3, #1
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d018      	beq.n	8009aaa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	689a      	ldr	r2, [r3, #8]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f042 0201 	orr.w	r2, r2, #1
 8009a86:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009a88:	4b5e      	ldr	r3, [pc, #376]	; (8009c04 <HAL_ADC_Start_DMA+0x1c0>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a5e      	ldr	r2, [pc, #376]	; (8009c08 <HAL_ADC_Start_DMA+0x1c4>)
 8009a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a92:	0c9a      	lsrs	r2, r3, #18
 8009a94:	4613      	mov	r3, r2
 8009a96:	005b      	lsls	r3, r3, #1
 8009a98:	4413      	add	r3, r2
 8009a9a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009a9c:	e002      	b.n	8009aa4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d1f9      	bne.n	8009a9e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	f003 0301 	and.w	r3, r3, #1
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	f040 80a0 	bne.w	8009bfa <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009abe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009ac2:	f023 0301 	bic.w	r3, r3, #1
 8009ac6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d007      	beq.n	8009aec <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009ae4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009af8:	d106      	bne.n	8009b08 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009afe:	f023 0206 	bic.w	r2, r3, #6
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	645a      	str	r2, [r3, #68]	; 0x44
 8009b06:	e002      	b.n	8009b0e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009b16:	4b3d      	ldr	r3, [pc, #244]	; (8009c0c <HAL_ADC_Start_DMA+0x1c8>)
 8009b18:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1e:	4a3c      	ldr	r2, [pc, #240]	; (8009c10 <HAL_ADC_Start_DMA+0x1cc>)
 8009b20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b26:	4a3b      	ldr	r2, [pc, #236]	; (8009c14 <HAL_ADC_Start_DMA+0x1d0>)
 8009b28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2e:	4a3a      	ldr	r2, [pc, #232]	; (8009c18 <HAL_ADC_Start_DMA+0x1d4>)
 8009b30:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009b3a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	685a      	ldr	r2, [r3, #4]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009b4a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	689a      	ldr	r2, [r3, #8]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b5a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	334c      	adds	r3, #76	; 0x4c
 8009b66:	4619      	mov	r1, r3
 8009b68:	68ba      	ldr	r2, [r7, #8]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f000 fcea 	bl	800a544 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	f003 031f 	and.w	r3, r3, #31
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d12a      	bne.n	8009bd2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a26      	ldr	r2, [pc, #152]	; (8009c1c <HAL_ADC_Start_DMA+0x1d8>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d015      	beq.n	8009bb2 <HAL_ADC_Start_DMA+0x16e>
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a25      	ldr	r2, [pc, #148]	; (8009c20 <HAL_ADC_Start_DMA+0x1dc>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d105      	bne.n	8009b9c <HAL_ADC_Start_DMA+0x158>
 8009b90:	4b1e      	ldr	r3, [pc, #120]	; (8009c0c <HAL_ADC_Start_DMA+0x1c8>)
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	f003 031f 	and.w	r3, r3, #31
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00a      	beq.n	8009bb2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a20      	ldr	r2, [pc, #128]	; (8009c24 <HAL_ADC_Start_DMA+0x1e0>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d129      	bne.n	8009bfa <HAL_ADC_Start_DMA+0x1b6>
 8009ba6:	4b19      	ldr	r3, [pc, #100]	; (8009c0c <HAL_ADC_Start_DMA+0x1c8>)
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	f003 0310 	and.w	r3, r3, #16
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d123      	bne.n	8009bfa <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d11c      	bne.n	8009bfa <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	689a      	ldr	r2, [r3, #8]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009bce:	609a      	str	r2, [r3, #8]
 8009bd0:	e013      	b.n	8009bfa <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a11      	ldr	r2, [pc, #68]	; (8009c1c <HAL_ADC_Start_DMA+0x1d8>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d10e      	bne.n	8009bfa <HAL_ADC_Start_DMA+0x1b6>
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d107      	bne.n	8009bfa <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	689a      	ldr	r2, [r3, #8]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009bf8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3718      	adds	r7, #24
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	20000000 	.word	0x20000000
 8009c08:	431bde83 	.word	0x431bde83
 8009c0c:	40012300 	.word	0x40012300
 8009c10:	0800a0c1 	.word	0x0800a0c1
 8009c14:	0800a17b 	.word	0x0800a17b
 8009c18:	0800a197 	.word	0x0800a197
 8009c1c:	40012000 	.word	0x40012000
 8009c20:	40012100 	.word	0x40012100
 8009c24:	40012200 	.word	0x40012200

08009c28 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009c30:	bf00      	nop
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009c44:	bf00      	nop
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009c58:	bf00      	nop
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d101      	bne.n	8009c80 <HAL_ADC_ConfigChannel+0x1c>
 8009c7c:	2302      	movs	r3, #2
 8009c7e:	e113      	b.n	8009ea8 <HAL_ADC_ConfigChannel+0x244>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2b09      	cmp	r3, #9
 8009c8e:	d925      	bls.n	8009cdc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68d9      	ldr	r1, [r3, #12]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	005b      	lsls	r3, r3, #1
 8009ca2:	4413      	add	r3, r2
 8009ca4:	3b1e      	subs	r3, #30
 8009ca6:	2207      	movs	r2, #7
 8009ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cac:	43da      	mvns	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	400a      	ands	r2, r1
 8009cb4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68d9      	ldr	r1, [r3, #12]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	689a      	ldr	r2, [r3, #8]
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	4603      	mov	r3, r0
 8009cca:	005b      	lsls	r3, r3, #1
 8009ccc:	4403      	add	r3, r0
 8009cce:	3b1e      	subs	r3, #30
 8009cd0:	409a      	lsls	r2, r3
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	430a      	orrs	r2, r1
 8009cd8:	60da      	str	r2, [r3, #12]
 8009cda:	e022      	b.n	8009d22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6919      	ldr	r1, [r3, #16]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	461a      	mov	r2, r3
 8009cea:	4613      	mov	r3, r2
 8009cec:	005b      	lsls	r3, r3, #1
 8009cee:	4413      	add	r3, r2
 8009cf0:	2207      	movs	r2, #7
 8009cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8009cf6:	43da      	mvns	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	400a      	ands	r2, r1
 8009cfe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	6919      	ldr	r1, [r3, #16]
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	689a      	ldr	r2, [r3, #8]
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	4618      	mov	r0, r3
 8009d12:	4603      	mov	r3, r0
 8009d14:	005b      	lsls	r3, r3, #1
 8009d16:	4403      	add	r3, r0
 8009d18:	409a      	lsls	r2, r3
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	430a      	orrs	r2, r1
 8009d20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	2b06      	cmp	r3, #6
 8009d28:	d824      	bhi.n	8009d74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	685a      	ldr	r2, [r3, #4]
 8009d34:	4613      	mov	r3, r2
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	4413      	add	r3, r2
 8009d3a:	3b05      	subs	r3, #5
 8009d3c:	221f      	movs	r2, #31
 8009d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d42:	43da      	mvns	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	400a      	ands	r2, r1
 8009d4a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	4618      	mov	r0, r3
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	685a      	ldr	r2, [r3, #4]
 8009d5e:	4613      	mov	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4413      	add	r3, r2
 8009d64:	3b05      	subs	r3, #5
 8009d66:	fa00 f203 	lsl.w	r2, r0, r3
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	635a      	str	r2, [r3, #52]	; 0x34
 8009d72:	e04c      	b.n	8009e0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	2b0c      	cmp	r3, #12
 8009d7a:	d824      	bhi.n	8009dc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	685a      	ldr	r2, [r3, #4]
 8009d86:	4613      	mov	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4413      	add	r3, r2
 8009d8c:	3b23      	subs	r3, #35	; 0x23
 8009d8e:	221f      	movs	r2, #31
 8009d90:	fa02 f303 	lsl.w	r3, r2, r3
 8009d94:	43da      	mvns	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	400a      	ands	r2, r1
 8009d9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	4618      	mov	r0, r3
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	685a      	ldr	r2, [r3, #4]
 8009db0:	4613      	mov	r3, r2
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	4413      	add	r3, r2
 8009db6:	3b23      	subs	r3, #35	; 0x23
 8009db8:	fa00 f203 	lsl.w	r2, r0, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	430a      	orrs	r2, r1
 8009dc2:	631a      	str	r2, [r3, #48]	; 0x30
 8009dc4:	e023      	b.n	8009e0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	685a      	ldr	r2, [r3, #4]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4413      	add	r3, r2
 8009dd6:	3b41      	subs	r3, #65	; 0x41
 8009dd8:	221f      	movs	r2, #31
 8009dda:	fa02 f303 	lsl.w	r3, r2, r3
 8009dde:	43da      	mvns	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	400a      	ands	r2, r1
 8009de6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	4618      	mov	r0, r3
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	685a      	ldr	r2, [r3, #4]
 8009dfa:	4613      	mov	r3, r2
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	4413      	add	r3, r2
 8009e00:	3b41      	subs	r3, #65	; 0x41
 8009e02:	fa00 f203 	lsl.w	r2, r0, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	430a      	orrs	r2, r1
 8009e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009e0e:	4b29      	ldr	r3, [pc, #164]	; (8009eb4 <HAL_ADC_ConfigChannel+0x250>)
 8009e10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a28      	ldr	r2, [pc, #160]	; (8009eb8 <HAL_ADC_ConfigChannel+0x254>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d10f      	bne.n	8009e3c <HAL_ADC_ConfigChannel+0x1d8>
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b12      	cmp	r3, #18
 8009e22:	d10b      	bne.n	8009e3c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a1d      	ldr	r2, [pc, #116]	; (8009eb8 <HAL_ADC_ConfigChannel+0x254>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d12b      	bne.n	8009e9e <HAL_ADC_ConfigChannel+0x23a>
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a1c      	ldr	r2, [pc, #112]	; (8009ebc <HAL_ADC_ConfigChannel+0x258>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d003      	beq.n	8009e58 <HAL_ADC_ConfigChannel+0x1f4>
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2b11      	cmp	r3, #17
 8009e56:	d122      	bne.n	8009e9e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a11      	ldr	r2, [pc, #68]	; (8009ebc <HAL_ADC_ConfigChannel+0x258>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d111      	bne.n	8009e9e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009e7a:	4b11      	ldr	r3, [pc, #68]	; (8009ec0 <HAL_ADC_ConfigChannel+0x25c>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a11      	ldr	r2, [pc, #68]	; (8009ec4 <HAL_ADC_ConfigChannel+0x260>)
 8009e80:	fba2 2303 	umull	r2, r3, r2, r3
 8009e84:	0c9a      	lsrs	r2, r3, #18
 8009e86:	4613      	mov	r3, r2
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	4413      	add	r3, r2
 8009e8c:	005b      	lsls	r3, r3, #1
 8009e8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009e90:	e002      	b.n	8009e98 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	3b01      	subs	r3, #1
 8009e96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1f9      	bne.n	8009e92 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr
 8009eb4:	40012300 	.word	0x40012300
 8009eb8:	40012000 	.word	0x40012000
 8009ebc:	10000012 	.word	0x10000012
 8009ec0:	20000000 	.word	0x20000000
 8009ec4:	431bde83 	.word	0x431bde83

08009ec8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009ed0:	4b79      	ldr	r3, [pc, #484]	; (800a0b8 <ADC_Init+0x1f0>)
 8009ed2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	685a      	ldr	r2, [r3, #4]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	431a      	orrs	r2, r3
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	685a      	ldr	r2, [r3, #4]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009efc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	6859      	ldr	r1, [r3, #4]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	021a      	lsls	r2, r3, #8
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	430a      	orrs	r2, r1
 8009f10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	685a      	ldr	r2, [r3, #4]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009f20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	6859      	ldr	r1, [r3, #4]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	689a      	ldr	r2, [r3, #8]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	430a      	orrs	r2, r1
 8009f32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	689a      	ldr	r2, [r3, #8]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009f42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	6899      	ldr	r1, [r3, #8]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	68da      	ldr	r2, [r3, #12]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	430a      	orrs	r2, r1
 8009f54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f5a:	4a58      	ldr	r2, [pc, #352]	; (800a0bc <ADC_Init+0x1f4>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d022      	beq.n	8009fa6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	689a      	ldr	r2, [r3, #8]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009f6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	6899      	ldr	r1, [r3, #8]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	430a      	orrs	r2, r1
 8009f80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	689a      	ldr	r2, [r3, #8]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009f90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	6899      	ldr	r1, [r3, #8]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	430a      	orrs	r2, r1
 8009fa2:	609a      	str	r2, [r3, #8]
 8009fa4:	e00f      	b.n	8009fc6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	689a      	ldr	r2, [r3, #8]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009fb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	689a      	ldr	r2, [r3, #8]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009fc4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	689a      	ldr	r2, [r3, #8]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f022 0202 	bic.w	r2, r2, #2
 8009fd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	6899      	ldr	r1, [r3, #8]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	7e1b      	ldrb	r3, [r3, #24]
 8009fe0:	005a      	lsls	r2, r3, #1
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	430a      	orrs	r2, r1
 8009fe8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d01b      	beq.n	800a02c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	685a      	ldr	r2, [r3, #4]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a002:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	685a      	ldr	r2, [r3, #4]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a012:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	6859      	ldr	r1, [r3, #4]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01e:	3b01      	subs	r3, #1
 800a020:	035a      	lsls	r2, r3, #13
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	430a      	orrs	r2, r1
 800a028:	605a      	str	r2, [r3, #4]
 800a02a:	e007      	b.n	800a03c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	685a      	ldr	r2, [r3, #4]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a03a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a04a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	69db      	ldr	r3, [r3, #28]
 800a056:	3b01      	subs	r3, #1
 800a058:	051a      	lsls	r2, r3, #20
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	430a      	orrs	r2, r1
 800a060:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	689a      	ldr	r2, [r3, #8]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a070:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	6899      	ldr	r1, [r3, #8]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a07e:	025a      	lsls	r2, r3, #9
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	430a      	orrs	r2, r1
 800a086:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	689a      	ldr	r2, [r3, #8]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a096:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6899      	ldr	r1, [r3, #8]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	695b      	ldr	r3, [r3, #20]
 800a0a2:	029a      	lsls	r2, r3, #10
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	430a      	orrs	r2, r1
 800a0aa:	609a      	str	r2, [r3, #8]
}
 800a0ac:	bf00      	nop
 800a0ae:	3714      	adds	r7, #20
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr
 800a0b8:	40012300 	.word	0x40012300
 800a0bc:	0f000001 	.word	0x0f000001

0800a0c0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0cc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d13c      	bne.n	800a154 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d12b      	bne.n	800a14c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d127      	bne.n	800a14c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a102:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a106:	2b00      	cmp	r3, #0
 800a108:	d006      	beq.n	800a118 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a114:	2b00      	cmp	r3, #0
 800a116:	d119      	bne.n	800a14c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	685a      	ldr	r2, [r3, #4]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f022 0220 	bic.w	r2, r2, #32
 800a126:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d105      	bne.n	800a14c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a144:	f043 0201 	orr.w	r2, r3, #1
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f7ff fd6b 	bl	8009c28 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a152:	e00e      	b.n	800a172 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a158:	f003 0310 	and.w	r3, r3, #16
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d003      	beq.n	800a168 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f7ff fd75 	bl	8009c50 <HAL_ADC_ErrorCallback>
}
 800a166:	e004      	b.n	800a172 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a16c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	4798      	blx	r3
}
 800a172:	bf00      	nop
 800a174:	3710      	adds	r7, #16
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b084      	sub	sp, #16
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a186:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a188:	68f8      	ldr	r0, [r7, #12]
 800a18a:	f7ff fd57 	bl	8009c3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a18e:	bf00      	nop
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b084      	sub	sp, #16
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2240      	movs	r2, #64	; 0x40
 800a1a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ae:	f043 0204 	orr.w	r2, r3, #4
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f7ff fd4a 	bl	8009c50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a1bc:	bf00      	nop
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <__NVIC_SetPriorityGrouping>:
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b085      	sub	sp, #20
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f003 0307 	and.w	r3, r3, #7
 800a1d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a1d4:	4b0c      	ldr	r3, [pc, #48]	; (800a208 <__NVIC_SetPriorityGrouping+0x44>)
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a1e0:	4013      	ands	r3, r2
 800a1e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a1ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a1f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a1f6:	4a04      	ldr	r2, [pc, #16]	; (800a208 <__NVIC_SetPriorityGrouping+0x44>)
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	60d3      	str	r3, [r2, #12]
}
 800a1fc:	bf00      	nop
 800a1fe:	3714      	adds	r7, #20
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr
 800a208:	e000ed00 	.word	0xe000ed00

0800a20c <__NVIC_GetPriorityGrouping>:
{
 800a20c:	b480      	push	{r7}
 800a20e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a210:	4b04      	ldr	r3, [pc, #16]	; (800a224 <__NVIC_GetPriorityGrouping+0x18>)
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	0a1b      	lsrs	r3, r3, #8
 800a216:	f003 0307 	and.w	r3, r3, #7
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr
 800a224:	e000ed00 	.word	0xe000ed00

0800a228 <__NVIC_EnableIRQ>:
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	4603      	mov	r3, r0
 800a230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a236:	2b00      	cmp	r3, #0
 800a238:	db0b      	blt.n	800a252 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a23a:	79fb      	ldrb	r3, [r7, #7]
 800a23c:	f003 021f 	and.w	r2, r3, #31
 800a240:	4907      	ldr	r1, [pc, #28]	; (800a260 <__NVIC_EnableIRQ+0x38>)
 800a242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a246:	095b      	lsrs	r3, r3, #5
 800a248:	2001      	movs	r0, #1
 800a24a:	fa00 f202 	lsl.w	r2, r0, r2
 800a24e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a252:	bf00      	nop
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	e000e100 	.word	0xe000e100

0800a264 <__NVIC_SetPriority>:
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	4603      	mov	r3, r0
 800a26c:	6039      	str	r1, [r7, #0]
 800a26e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a274:	2b00      	cmp	r3, #0
 800a276:	db0a      	blt.n	800a28e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	b2da      	uxtb	r2, r3
 800a27c:	490c      	ldr	r1, [pc, #48]	; (800a2b0 <__NVIC_SetPriority+0x4c>)
 800a27e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a282:	0112      	lsls	r2, r2, #4
 800a284:	b2d2      	uxtb	r2, r2
 800a286:	440b      	add	r3, r1
 800a288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a28c:	e00a      	b.n	800a2a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	b2da      	uxtb	r2, r3
 800a292:	4908      	ldr	r1, [pc, #32]	; (800a2b4 <__NVIC_SetPriority+0x50>)
 800a294:	79fb      	ldrb	r3, [r7, #7]
 800a296:	f003 030f 	and.w	r3, r3, #15
 800a29a:	3b04      	subs	r3, #4
 800a29c:	0112      	lsls	r2, r2, #4
 800a29e:	b2d2      	uxtb	r2, r2
 800a2a0:	440b      	add	r3, r1
 800a2a2:	761a      	strb	r2, [r3, #24]
}
 800a2a4:	bf00      	nop
 800a2a6:	370c      	adds	r7, #12
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr
 800a2b0:	e000e100 	.word	0xe000e100
 800a2b4:	e000ed00 	.word	0xe000ed00

0800a2b8 <NVIC_EncodePriority>:
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b089      	sub	sp, #36	; 0x24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f003 0307 	and.w	r3, r3, #7
 800a2ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	f1c3 0307 	rsb	r3, r3, #7
 800a2d2:	2b04      	cmp	r3, #4
 800a2d4:	bf28      	it	cs
 800a2d6:	2304      	movcs	r3, #4
 800a2d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	3304      	adds	r3, #4
 800a2de:	2b06      	cmp	r3, #6
 800a2e0:	d902      	bls.n	800a2e8 <NVIC_EncodePriority+0x30>
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	3b03      	subs	r3, #3
 800a2e6:	e000      	b.n	800a2ea <NVIC_EncodePriority+0x32>
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2f6:	43da      	mvns	r2, r3
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	401a      	ands	r2, r3
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a300:	f04f 31ff 	mov.w	r1, #4294967295
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	fa01 f303 	lsl.w	r3, r1, r3
 800a30a:	43d9      	mvns	r1, r3
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a310:	4313      	orrs	r3, r2
}
 800a312:	4618      	mov	r0, r3
 800a314:	3724      	adds	r7, #36	; 0x24
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
	...

0800a320 <SysTick_Config>:
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	3b01      	subs	r3, #1
 800a32c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a330:	d301      	bcc.n	800a336 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800a332:	2301      	movs	r3, #1
 800a334:	e00f      	b.n	800a356 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a336:	4a0a      	ldr	r2, [pc, #40]	; (800a360 <SysTick_Config+0x40>)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	3b01      	subs	r3, #1
 800a33c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a33e:	210f      	movs	r1, #15
 800a340:	f04f 30ff 	mov.w	r0, #4294967295
 800a344:	f7ff ff8e 	bl	800a264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a348:	4b05      	ldr	r3, [pc, #20]	; (800a360 <SysTick_Config+0x40>)
 800a34a:	2200      	movs	r2, #0
 800a34c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a34e:	4b04      	ldr	r3, [pc, #16]	; (800a360 <SysTick_Config+0x40>)
 800a350:	2207      	movs	r2, #7
 800a352:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3708      	adds	r7, #8
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	e000e010 	.word	0xe000e010

0800a364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f7ff ff29 	bl	800a1c4 <__NVIC_SetPriorityGrouping>
}
 800a372:	bf00      	nop
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}

0800a37a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b086      	sub	sp, #24
 800a37e:	af00      	add	r7, sp, #0
 800a380:	4603      	mov	r3, r0
 800a382:	60b9      	str	r1, [r7, #8]
 800a384:	607a      	str	r2, [r7, #4]
 800a386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a388:	2300      	movs	r3, #0
 800a38a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a38c:	f7ff ff3e 	bl	800a20c <__NVIC_GetPriorityGrouping>
 800a390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a392:	687a      	ldr	r2, [r7, #4]
 800a394:	68b9      	ldr	r1, [r7, #8]
 800a396:	6978      	ldr	r0, [r7, #20]
 800a398:	f7ff ff8e 	bl	800a2b8 <NVIC_EncodePriority>
 800a39c:	4602      	mov	r2, r0
 800a39e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3a2:	4611      	mov	r1, r2
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7ff ff5d 	bl	800a264 <__NVIC_SetPriority>
}
 800a3aa:	bf00      	nop
 800a3ac:	3718      	adds	r7, #24
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b082      	sub	sp, #8
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a3bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7ff ff31 	bl	800a228 <__NVIC_EnableIRQ>
}
 800a3c6:	bf00      	nop
 800a3c8:	3708      	adds	r7, #8
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b082      	sub	sp, #8
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f7ff ffa2 	bl	800a320 <SysTick_Config>
 800a3dc:	4603      	mov	r3, r0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
	...

0800a3e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b086      	sub	sp, #24
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a3f4:	f7ff fab2 	bl	800995c <HAL_GetTick>
 800a3f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d101      	bne.n	800a404 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	e099      	b.n	800a538 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2202      	movs	r2, #2
 800a410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f022 0201 	bic.w	r2, r2, #1
 800a422:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a424:	e00f      	b.n	800a446 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a426:	f7ff fa99 	bl	800995c <HAL_GetTick>
 800a42a:	4602      	mov	r2, r0
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	2b05      	cmp	r3, #5
 800a432:	d908      	bls.n	800a446 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2220      	movs	r2, #32
 800a438:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2203      	movs	r2, #3
 800a43e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a442:	2303      	movs	r3, #3
 800a444:	e078      	b.n	800a538 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	2b00      	cmp	r3, #0
 800a452:	d1e8      	bne.n	800a426 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a45c:	697a      	ldr	r2, [r7, #20]
 800a45e:	4b38      	ldr	r3, [pc, #224]	; (800a540 <HAL_DMA_Init+0x158>)
 800a460:	4013      	ands	r3, r2
 800a462:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685a      	ldr	r2, [r3, #4]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a472:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a47e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	699b      	ldr	r3, [r3, #24]
 800a484:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a48a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6a1b      	ldr	r3, [r3, #32]
 800a490:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a492:	697a      	ldr	r2, [r7, #20]
 800a494:	4313      	orrs	r3, r2
 800a496:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49c:	2b04      	cmp	r3, #4
 800a49e:	d107      	bne.n	800a4b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	697a      	ldr	r2, [r7, #20]
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	697a      	ldr	r2, [r7, #20]
 800a4b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	695b      	ldr	r3, [r3, #20]
 800a4be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	f023 0307 	bic.w	r3, r3, #7
 800a4c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4cc:	697a      	ldr	r2, [r7, #20]
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d6:	2b04      	cmp	r3, #4
 800a4d8:	d117      	bne.n	800a50a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4de:	697a      	ldr	r2, [r7, #20]
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00e      	beq.n	800a50a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 fa9d 	bl	800aa2c <DMA_CheckFifoParam>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d008      	beq.n	800a50a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2240      	movs	r2, #64	; 0x40
 800a4fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2201      	movs	r2, #1
 800a502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a506:	2301      	movs	r3, #1
 800a508:	e016      	b.n	800a538 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	697a      	ldr	r2, [r7, #20]
 800a510:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 fa54 	bl	800a9c0 <DMA_CalcBaseAndBitshift>
 800a518:	4603      	mov	r3, r0
 800a51a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a520:	223f      	movs	r2, #63	; 0x3f
 800a522:	409a      	lsls	r2, r3
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2201      	movs	r2, #1
 800a532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3718      	adds	r7, #24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	f010803f 	.word	0xf010803f

0800a544 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b086      	sub	sp, #24
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	607a      	str	r2, [r7, #4]
 800a550:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a552:	2300      	movs	r3, #0
 800a554:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a55a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a562:	2b01      	cmp	r3, #1
 800a564:	d101      	bne.n	800a56a <HAL_DMA_Start_IT+0x26>
 800a566:	2302      	movs	r3, #2
 800a568:	e040      	b.n	800a5ec <HAL_DMA_Start_IT+0xa8>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2201      	movs	r2, #1
 800a56e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d12f      	bne.n	800a5de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2202      	movs	r2, #2
 800a582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	68b9      	ldr	r1, [r7, #8]
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f000 f9e6 	bl	800a964 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a59c:	223f      	movs	r2, #63	; 0x3f
 800a59e:	409a      	lsls	r2, r3
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f042 0216 	orr.w	r2, r2, #22
 800a5b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d007      	beq.n	800a5cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f042 0208 	orr.w	r2, r2, #8
 800a5ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f042 0201 	orr.w	r2, r2, #1
 800a5da:	601a      	str	r2, [r3, #0]
 800a5dc:	e005      	b.n	800a5ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a5e6:	2302      	movs	r3, #2
 800a5e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a5ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3718      	adds	r7, #24
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a602:	b2db      	uxtb	r3, r3
 800a604:	2b02      	cmp	r3, #2
 800a606:	d004      	beq.n	800a612 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2280      	movs	r2, #128	; 0x80
 800a60c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	e00c      	b.n	800a62c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2205      	movs	r2, #5
 800a616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f022 0201 	bic.w	r2, r2, #1
 800a628:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b086      	sub	sp, #24
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a640:	2300      	movs	r3, #0
 800a642:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a644:	4b92      	ldr	r3, [pc, #584]	; (800a890 <HAL_DMA_IRQHandler+0x258>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a92      	ldr	r2, [pc, #584]	; (800a894 <HAL_DMA_IRQHandler+0x25c>)
 800a64a:	fba2 2303 	umull	r2, r3, r2, r3
 800a64e:	0a9b      	lsrs	r3, r3, #10
 800a650:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a656:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a662:	2208      	movs	r2, #8
 800a664:	409a      	lsls	r2, r3
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	4013      	ands	r3, r2
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d01a      	beq.n	800a6a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f003 0304 	and.w	r3, r3, #4
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d013      	beq.n	800a6a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f022 0204 	bic.w	r2, r2, #4
 800a68a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a690:	2208      	movs	r2, #8
 800a692:	409a      	lsls	r2, r3
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a69c:	f043 0201 	orr.w	r2, r3, #1
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	409a      	lsls	r2, r3
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d012      	beq.n	800a6da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	695b      	ldr	r3, [r3, #20]
 800a6ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00b      	beq.n	800a6da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	409a      	lsls	r2, r3
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6d2:	f043 0202 	orr.w	r2, r3, #2
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6de:	2204      	movs	r2, #4
 800a6e0:	409a      	lsls	r2, r3
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	4013      	ands	r3, r2
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d012      	beq.n	800a710 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f003 0302 	and.w	r3, r3, #2
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00b      	beq.n	800a710 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6fc:	2204      	movs	r2, #4
 800a6fe:	409a      	lsls	r2, r3
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a708:	f043 0204 	orr.w	r2, r3, #4
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a714:	2210      	movs	r2, #16
 800a716:	409a      	lsls	r2, r3
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	4013      	ands	r3, r2
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d043      	beq.n	800a7a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f003 0308 	and.w	r3, r3, #8
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d03c      	beq.n	800a7a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a732:	2210      	movs	r2, #16
 800a734:	409a      	lsls	r2, r3
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a744:	2b00      	cmp	r3, #0
 800a746:	d018      	beq.n	800a77a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a752:	2b00      	cmp	r3, #0
 800a754:	d108      	bne.n	800a768 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d024      	beq.n	800a7a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	4798      	blx	r3
 800a766:	e01f      	b.n	800a7a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d01b      	beq.n	800a7a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	4798      	blx	r3
 800a778:	e016      	b.n	800a7a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a784:	2b00      	cmp	r3, #0
 800a786:	d107      	bne.n	800a798 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f022 0208 	bic.w	r2, r2, #8
 800a796:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d003      	beq.n	800a7a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7ac:	2220      	movs	r2, #32
 800a7ae:	409a      	lsls	r2, r3
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	4013      	ands	r3, r2
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f000 808e 	beq.w	800a8d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f003 0310 	and.w	r3, r3, #16
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f000 8086 	beq.w	800a8d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7ce:	2220      	movs	r2, #32
 800a7d0:	409a      	lsls	r2, r3
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	2b05      	cmp	r3, #5
 800a7e0:	d136      	bne.n	800a850 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f022 0216 	bic.w	r2, r2, #22
 800a7f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	695a      	ldr	r2, [r3, #20]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a800:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a806:	2b00      	cmp	r3, #0
 800a808:	d103      	bne.n	800a812 <HAL_DMA_IRQHandler+0x1da>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d007      	beq.n	800a822 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f022 0208 	bic.w	r2, r2, #8
 800a820:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a826:	223f      	movs	r2, #63	; 0x3f
 800a828:	409a      	lsls	r2, r3
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2201      	movs	r2, #1
 800a83a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a842:	2b00      	cmp	r3, #0
 800a844:	d07d      	beq.n	800a942 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	4798      	blx	r3
        }
        return;
 800a84e:	e078      	b.n	800a942 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d01c      	beq.n	800a898 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d108      	bne.n	800a87e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a870:	2b00      	cmp	r3, #0
 800a872:	d030      	beq.n	800a8d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	4798      	blx	r3
 800a87c:	e02b      	b.n	800a8d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a882:	2b00      	cmp	r3, #0
 800a884:	d027      	beq.n	800a8d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	4798      	blx	r3
 800a88e:	e022      	b.n	800a8d6 <HAL_DMA_IRQHandler+0x29e>
 800a890:	20000000 	.word	0x20000000
 800a894:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d10f      	bne.n	800a8c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f022 0210 	bic.w	r2, r2, #16
 800a8b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d003      	beq.n	800a8d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d032      	beq.n	800a944 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8e2:	f003 0301 	and.w	r3, r3, #1
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d022      	beq.n	800a930 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2205      	movs	r2, #5
 800a8ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	681a      	ldr	r2, [r3, #0]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f022 0201 	bic.w	r2, r2, #1
 800a900:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	3301      	adds	r3, #1
 800a906:	60bb      	str	r3, [r7, #8]
 800a908:	697a      	ldr	r2, [r7, #20]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d307      	bcc.n	800a91e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f003 0301 	and.w	r3, r3, #1
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d1f2      	bne.n	800a902 <HAL_DMA_IRQHandler+0x2ca>
 800a91c:	e000      	b.n	800a920 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a91e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a934:	2b00      	cmp	r3, #0
 800a936:	d005      	beq.n	800a944 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	4798      	blx	r3
 800a940:	e000      	b.n	800a944 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a942:	bf00      	nop
    }
  }
}
 800a944:	3718      	adds	r7, #24
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop

0800a94c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a958:	4618      	mov	r0, r3
 800a95a:	370c      	adds	r7, #12
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a964:	b480      	push	{r7}
 800a966:	b085      	sub	sp, #20
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	607a      	str	r2, [r7, #4]
 800a970:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a980:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	2b40      	cmp	r3, #64	; 0x40
 800a990:	d108      	bne.n	800a9a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	68ba      	ldr	r2, [r7, #8]
 800a9a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a9a2:	e007      	b.n	800a9b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	60da      	str	r2, [r3, #12]
}
 800a9b4:	bf00      	nop
 800a9b6:	3714      	adds	r7, #20
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	3b10      	subs	r3, #16
 800a9d0:	4a14      	ldr	r2, [pc, #80]	; (800aa24 <DMA_CalcBaseAndBitshift+0x64>)
 800a9d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9d6:	091b      	lsrs	r3, r3, #4
 800a9d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a9da:	4a13      	ldr	r2, [pc, #76]	; (800aa28 <DMA_CalcBaseAndBitshift+0x68>)
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	4413      	add	r3, r2
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2b03      	cmp	r3, #3
 800a9ec:	d909      	bls.n	800aa02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a9f6:	f023 0303 	bic.w	r3, r3, #3
 800a9fa:	1d1a      	adds	r2, r3, #4
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	659a      	str	r2, [r3, #88]	; 0x58
 800aa00:	e007      	b.n	800aa12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800aa0a:	f023 0303 	bic.w	r3, r3, #3
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3714      	adds	r7, #20
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	aaaaaaab 	.word	0xaaaaaaab
 800aa28:	0801ad24 	.word	0x0801ad24

0800aa2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b085      	sub	sp, #20
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa34:	2300      	movs	r3, #0
 800aa36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d11f      	bne.n	800aa86 <DMA_CheckFifoParam+0x5a>
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	2b03      	cmp	r3, #3
 800aa4a:	d856      	bhi.n	800aafa <DMA_CheckFifoParam+0xce>
 800aa4c:	a201      	add	r2, pc, #4	; (adr r2, 800aa54 <DMA_CheckFifoParam+0x28>)
 800aa4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa52:	bf00      	nop
 800aa54:	0800aa65 	.word	0x0800aa65
 800aa58:	0800aa77 	.word	0x0800aa77
 800aa5c:	0800aa65 	.word	0x0800aa65
 800aa60:	0800aafb 	.word	0x0800aafb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d046      	beq.n	800aafe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800aa70:	2301      	movs	r3, #1
 800aa72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa74:	e043      	b.n	800aafe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aa7e:	d140      	bne.n	800ab02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800aa80:	2301      	movs	r3, #1
 800aa82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa84:	e03d      	b.n	800ab02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	699b      	ldr	r3, [r3, #24]
 800aa8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa8e:	d121      	bne.n	800aad4 <DMA_CheckFifoParam+0xa8>
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	2b03      	cmp	r3, #3
 800aa94:	d837      	bhi.n	800ab06 <DMA_CheckFifoParam+0xda>
 800aa96:	a201      	add	r2, pc, #4	; (adr r2, 800aa9c <DMA_CheckFifoParam+0x70>)
 800aa98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa9c:	0800aaad 	.word	0x0800aaad
 800aaa0:	0800aab3 	.word	0x0800aab3
 800aaa4:	0800aaad 	.word	0x0800aaad
 800aaa8:	0800aac5 	.word	0x0800aac5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800aaac:	2301      	movs	r3, #1
 800aaae:	73fb      	strb	r3, [r7, #15]
      break;
 800aab0:	e030      	b.n	800ab14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d025      	beq.n	800ab0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aac2:	e022      	b.n	800ab0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aacc:	d11f      	bne.n	800ab0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aad2:	e01c      	b.n	800ab0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d903      	bls.n	800aae2 <DMA_CheckFifoParam+0xb6>
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	2b03      	cmp	r3, #3
 800aade:	d003      	beq.n	800aae8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aae0:	e018      	b.n	800ab14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800aae2:	2301      	movs	r3, #1
 800aae4:	73fb      	strb	r3, [r7, #15]
      break;
 800aae6:	e015      	b.n	800ab14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d00e      	beq.n	800ab12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	73fb      	strb	r3, [r7, #15]
      break;
 800aaf8:	e00b      	b.n	800ab12 <DMA_CheckFifoParam+0xe6>
      break;
 800aafa:	bf00      	nop
 800aafc:	e00a      	b.n	800ab14 <DMA_CheckFifoParam+0xe8>
      break;
 800aafe:	bf00      	nop
 800ab00:	e008      	b.n	800ab14 <DMA_CheckFifoParam+0xe8>
      break;
 800ab02:	bf00      	nop
 800ab04:	e006      	b.n	800ab14 <DMA_CheckFifoParam+0xe8>
      break;
 800ab06:	bf00      	nop
 800ab08:	e004      	b.n	800ab14 <DMA_CheckFifoParam+0xe8>
      break;
 800ab0a:	bf00      	nop
 800ab0c:	e002      	b.n	800ab14 <DMA_CheckFifoParam+0xe8>
      break;   
 800ab0e:	bf00      	nop
 800ab10:	e000      	b.n	800ab14 <DMA_CheckFifoParam+0xe8>
      break;
 800ab12:	bf00      	nop
    }
  } 
  
  return status; 
 800ab14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3714      	adds	r7, #20
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop

0800ab24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b089      	sub	sp, #36	; 0x24
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ab32:	2300      	movs	r3, #0
 800ab34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ab36:	2300      	movs	r3, #0
 800ab38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	61fb      	str	r3, [r7, #28]
 800ab3e:	e177      	b.n	800ae30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ab40:	2201      	movs	r2, #1
 800ab42:	69fb      	ldr	r3, [r7, #28]
 800ab44:	fa02 f303 	lsl.w	r3, r2, r3
 800ab48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	697a      	ldr	r2, [r7, #20]
 800ab50:	4013      	ands	r3, r2
 800ab52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ab54:	693a      	ldr	r2, [r7, #16]
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	f040 8166 	bne.w	800ae2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d00b      	beq.n	800ab7e <HAL_GPIO_Init+0x5a>
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	2b02      	cmp	r3, #2
 800ab6c:	d007      	beq.n	800ab7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ab72:	2b11      	cmp	r3, #17
 800ab74:	d003      	beq.n	800ab7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	2b12      	cmp	r3, #18
 800ab7c:	d130      	bne.n	800abe0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	689b      	ldr	r3, [r3, #8]
 800ab82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	005b      	lsls	r3, r3, #1
 800ab88:	2203      	movs	r2, #3
 800ab8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab8e:	43db      	mvns	r3, r3
 800ab90:	69ba      	ldr	r2, [r7, #24]
 800ab92:	4013      	ands	r3, r2
 800ab94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	68da      	ldr	r2, [r3, #12]
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	005b      	lsls	r3, r3, #1
 800ab9e:	fa02 f303 	lsl.w	r3, r2, r3
 800aba2:	69ba      	ldr	r2, [r7, #24]
 800aba4:	4313      	orrs	r3, r2
 800aba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	69ba      	ldr	r2, [r7, #24]
 800abac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800abb4:	2201      	movs	r2, #1
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	fa02 f303 	lsl.w	r3, r2, r3
 800abbc:	43db      	mvns	r3, r3
 800abbe:	69ba      	ldr	r2, [r7, #24]
 800abc0:	4013      	ands	r3, r2
 800abc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	091b      	lsrs	r3, r3, #4
 800abca:	f003 0201 	and.w	r2, r3, #1
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	fa02 f303 	lsl.w	r3, r2, r3
 800abd4:	69ba      	ldr	r2, [r7, #24]
 800abd6:	4313      	orrs	r3, r2
 800abd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	69ba      	ldr	r2, [r7, #24]
 800abde:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	68db      	ldr	r3, [r3, #12]
 800abe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	005b      	lsls	r3, r3, #1
 800abea:	2203      	movs	r2, #3
 800abec:	fa02 f303 	lsl.w	r3, r2, r3
 800abf0:	43db      	mvns	r3, r3
 800abf2:	69ba      	ldr	r2, [r7, #24]
 800abf4:	4013      	ands	r3, r2
 800abf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	689a      	ldr	r2, [r3, #8]
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	005b      	lsls	r3, r3, #1
 800ac00:	fa02 f303 	lsl.w	r3, r2, r3
 800ac04:	69ba      	ldr	r2, [r7, #24]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	69ba      	ldr	r2, [r7, #24]
 800ac0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	2b02      	cmp	r3, #2
 800ac16:	d003      	beq.n	800ac20 <HAL_GPIO_Init+0xfc>
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	2b12      	cmp	r3, #18
 800ac1e:	d123      	bne.n	800ac68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	08da      	lsrs	r2, r3, #3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	3208      	adds	r2, #8
 800ac28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	f003 0307 	and.w	r3, r3, #7
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	220f      	movs	r2, #15
 800ac38:	fa02 f303 	lsl.w	r3, r2, r3
 800ac3c:	43db      	mvns	r3, r3
 800ac3e:	69ba      	ldr	r2, [r7, #24]
 800ac40:	4013      	ands	r3, r2
 800ac42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	691a      	ldr	r2, [r3, #16]
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	f003 0307 	and.w	r3, r3, #7
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	fa02 f303 	lsl.w	r3, r2, r3
 800ac54:	69ba      	ldr	r2, [r7, #24]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	08da      	lsrs	r2, r3, #3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	3208      	adds	r2, #8
 800ac62:	69b9      	ldr	r1, [r7, #24]
 800ac64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	005b      	lsls	r3, r3, #1
 800ac72:	2203      	movs	r2, #3
 800ac74:	fa02 f303 	lsl.w	r3, r2, r3
 800ac78:	43db      	mvns	r3, r3
 800ac7a:	69ba      	ldr	r2, [r7, #24]
 800ac7c:	4013      	ands	r3, r2
 800ac7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	f003 0203 	and.w	r2, r3, #3
 800ac88:	69fb      	ldr	r3, [r7, #28]
 800ac8a:	005b      	lsls	r3, r3, #1
 800ac8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac90:	69ba      	ldr	r2, [r7, #24]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	69ba      	ldr	r2, [r7, #24]
 800ac9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	f000 80c0 	beq.w	800ae2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800acaa:	2300      	movs	r3, #0
 800acac:	60fb      	str	r3, [r7, #12]
 800acae:	4b66      	ldr	r3, [pc, #408]	; (800ae48 <HAL_GPIO_Init+0x324>)
 800acb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acb2:	4a65      	ldr	r2, [pc, #404]	; (800ae48 <HAL_GPIO_Init+0x324>)
 800acb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800acb8:	6453      	str	r3, [r2, #68]	; 0x44
 800acba:	4b63      	ldr	r3, [pc, #396]	; (800ae48 <HAL_GPIO_Init+0x324>)
 800acbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acc2:	60fb      	str	r3, [r7, #12]
 800acc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800acc6:	4a61      	ldr	r2, [pc, #388]	; (800ae4c <HAL_GPIO_Init+0x328>)
 800acc8:	69fb      	ldr	r3, [r7, #28]
 800acca:	089b      	lsrs	r3, r3, #2
 800accc:	3302      	adds	r3, #2
 800acce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800acd4:	69fb      	ldr	r3, [r7, #28]
 800acd6:	f003 0303 	and.w	r3, r3, #3
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	220f      	movs	r2, #15
 800acde:	fa02 f303 	lsl.w	r3, r2, r3
 800ace2:	43db      	mvns	r3, r3
 800ace4:	69ba      	ldr	r2, [r7, #24]
 800ace6:	4013      	ands	r3, r2
 800ace8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4a58      	ldr	r2, [pc, #352]	; (800ae50 <HAL_GPIO_Init+0x32c>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d037      	beq.n	800ad62 <HAL_GPIO_Init+0x23e>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a57      	ldr	r2, [pc, #348]	; (800ae54 <HAL_GPIO_Init+0x330>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d031      	beq.n	800ad5e <HAL_GPIO_Init+0x23a>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4a56      	ldr	r2, [pc, #344]	; (800ae58 <HAL_GPIO_Init+0x334>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d02b      	beq.n	800ad5a <HAL_GPIO_Init+0x236>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4a55      	ldr	r2, [pc, #340]	; (800ae5c <HAL_GPIO_Init+0x338>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d025      	beq.n	800ad56 <HAL_GPIO_Init+0x232>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4a54      	ldr	r2, [pc, #336]	; (800ae60 <HAL_GPIO_Init+0x33c>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d01f      	beq.n	800ad52 <HAL_GPIO_Init+0x22e>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4a53      	ldr	r2, [pc, #332]	; (800ae64 <HAL_GPIO_Init+0x340>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d019      	beq.n	800ad4e <HAL_GPIO_Init+0x22a>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4a52      	ldr	r2, [pc, #328]	; (800ae68 <HAL_GPIO_Init+0x344>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d013      	beq.n	800ad4a <HAL_GPIO_Init+0x226>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	4a51      	ldr	r2, [pc, #324]	; (800ae6c <HAL_GPIO_Init+0x348>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d00d      	beq.n	800ad46 <HAL_GPIO_Init+0x222>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4a50      	ldr	r2, [pc, #320]	; (800ae70 <HAL_GPIO_Init+0x34c>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d007      	beq.n	800ad42 <HAL_GPIO_Init+0x21e>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	4a4f      	ldr	r2, [pc, #316]	; (800ae74 <HAL_GPIO_Init+0x350>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d101      	bne.n	800ad3e <HAL_GPIO_Init+0x21a>
 800ad3a:	2309      	movs	r3, #9
 800ad3c:	e012      	b.n	800ad64 <HAL_GPIO_Init+0x240>
 800ad3e:	230a      	movs	r3, #10
 800ad40:	e010      	b.n	800ad64 <HAL_GPIO_Init+0x240>
 800ad42:	2308      	movs	r3, #8
 800ad44:	e00e      	b.n	800ad64 <HAL_GPIO_Init+0x240>
 800ad46:	2307      	movs	r3, #7
 800ad48:	e00c      	b.n	800ad64 <HAL_GPIO_Init+0x240>
 800ad4a:	2306      	movs	r3, #6
 800ad4c:	e00a      	b.n	800ad64 <HAL_GPIO_Init+0x240>
 800ad4e:	2305      	movs	r3, #5
 800ad50:	e008      	b.n	800ad64 <HAL_GPIO_Init+0x240>
 800ad52:	2304      	movs	r3, #4
 800ad54:	e006      	b.n	800ad64 <HAL_GPIO_Init+0x240>
 800ad56:	2303      	movs	r3, #3
 800ad58:	e004      	b.n	800ad64 <HAL_GPIO_Init+0x240>
 800ad5a:	2302      	movs	r3, #2
 800ad5c:	e002      	b.n	800ad64 <HAL_GPIO_Init+0x240>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e000      	b.n	800ad64 <HAL_GPIO_Init+0x240>
 800ad62:	2300      	movs	r3, #0
 800ad64:	69fa      	ldr	r2, [r7, #28]
 800ad66:	f002 0203 	and.w	r2, r2, #3
 800ad6a:	0092      	lsls	r2, r2, #2
 800ad6c:	4093      	lsls	r3, r2
 800ad6e:	69ba      	ldr	r2, [r7, #24]
 800ad70:	4313      	orrs	r3, r2
 800ad72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ad74:	4935      	ldr	r1, [pc, #212]	; (800ae4c <HAL_GPIO_Init+0x328>)
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	089b      	lsrs	r3, r3, #2
 800ad7a:	3302      	adds	r3, #2
 800ad7c:	69ba      	ldr	r2, [r7, #24]
 800ad7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ad82:	4b3d      	ldr	r3, [pc, #244]	; (800ae78 <HAL_GPIO_Init+0x354>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	43db      	mvns	r3, r3
 800ad8c:	69ba      	ldr	r2, [r7, #24]
 800ad8e:	4013      	ands	r3, r2
 800ad90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d003      	beq.n	800ada6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800ad9e:	69ba      	ldr	r2, [r7, #24]
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ada6:	4a34      	ldr	r2, [pc, #208]	; (800ae78 <HAL_GPIO_Init+0x354>)
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800adac:	4b32      	ldr	r3, [pc, #200]	; (800ae78 <HAL_GPIO_Init+0x354>)
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	43db      	mvns	r3, r3
 800adb6:	69ba      	ldr	r2, [r7, #24]
 800adb8:	4013      	ands	r3, r2
 800adba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d003      	beq.n	800add0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800adc8:	69ba      	ldr	r2, [r7, #24]
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	4313      	orrs	r3, r2
 800adce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800add0:	4a29      	ldr	r2, [pc, #164]	; (800ae78 <HAL_GPIO_Init+0x354>)
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800add6:	4b28      	ldr	r3, [pc, #160]	; (800ae78 <HAL_GPIO_Init+0x354>)
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	43db      	mvns	r3, r3
 800ade0:	69ba      	ldr	r2, [r7, #24]
 800ade2:	4013      	ands	r3, r2
 800ade4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d003      	beq.n	800adfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800adf2:	69ba      	ldr	r2, [r7, #24]
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800adfa:	4a1f      	ldr	r2, [pc, #124]	; (800ae78 <HAL_GPIO_Init+0x354>)
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ae00:	4b1d      	ldr	r3, [pc, #116]	; (800ae78 <HAL_GPIO_Init+0x354>)
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	43db      	mvns	r3, r3
 800ae0a:	69ba      	ldr	r2, [r7, #24]
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d003      	beq.n	800ae24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800ae1c:	69ba      	ldr	r2, [r7, #24]
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ae24:	4a14      	ldr	r2, [pc, #80]	; (800ae78 <HAL_GPIO_Init+0x354>)
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	61fb      	str	r3, [r7, #28]
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	2b0f      	cmp	r3, #15
 800ae34:	f67f ae84 	bls.w	800ab40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ae38:	bf00      	nop
 800ae3a:	bf00      	nop
 800ae3c:	3724      	adds	r7, #36	; 0x24
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	40023800 	.word	0x40023800
 800ae4c:	40013800 	.word	0x40013800
 800ae50:	40020000 	.word	0x40020000
 800ae54:	40020400 	.word	0x40020400
 800ae58:	40020800 	.word	0x40020800
 800ae5c:	40020c00 	.word	0x40020c00
 800ae60:	40021000 	.word	0x40021000
 800ae64:	40021400 	.word	0x40021400
 800ae68:	40021800 	.word	0x40021800
 800ae6c:	40021c00 	.word	0x40021c00
 800ae70:	40022000 	.word	0x40022000
 800ae74:	40022400 	.word	0x40022400
 800ae78:	40013c00 	.word	0x40013c00

0800ae7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b085      	sub	sp, #20
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	460b      	mov	r3, r1
 800ae86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	691a      	ldr	r2, [r3, #16]
 800ae8c:	887b      	ldrh	r3, [r7, #2]
 800ae8e:	4013      	ands	r3, r2
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d002      	beq.n	800ae9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ae94:	2301      	movs	r3, #1
 800ae96:	73fb      	strb	r3, [r7, #15]
 800ae98:	e001      	b.n	800ae9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ae9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3714      	adds	r7, #20
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	807b      	strh	r3, [r7, #2]
 800aeb8:	4613      	mov	r3, r2
 800aeba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800aebc:	787b      	ldrb	r3, [r7, #1]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d003      	beq.n	800aeca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800aec2:	887a      	ldrh	r2, [r7, #2]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800aec8:	e003      	b.n	800aed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800aeca:	887b      	ldrh	r3, [r7, #2]
 800aecc:	041a      	lsls	r2, r3, #16
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	619a      	str	r2, [r3, #24]
}
 800aed2:	bf00      	nop
 800aed4:	370c      	adds	r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr
	...

0800aee0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d101      	bne.n	800aef2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800aeee:	2301      	movs	r3, #1
 800aef0:	e12b      	b.n	800b14a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d106      	bne.n	800af0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f7fb fe6c 	bl	8006be4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2224      	movs	r2, #36	; 0x24
 800af10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f022 0201 	bic.w	r2, r2, #1
 800af22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800af42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800af44:	f001 f984 	bl	800c250 <HAL_RCC_GetPCLK1Freq>
 800af48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	4a81      	ldr	r2, [pc, #516]	; (800b154 <HAL_I2C_Init+0x274>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d807      	bhi.n	800af64 <HAL_I2C_Init+0x84>
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	4a80      	ldr	r2, [pc, #512]	; (800b158 <HAL_I2C_Init+0x278>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	bf94      	ite	ls
 800af5c:	2301      	movls	r3, #1
 800af5e:	2300      	movhi	r3, #0
 800af60:	b2db      	uxtb	r3, r3
 800af62:	e006      	b.n	800af72 <HAL_I2C_Init+0x92>
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	4a7d      	ldr	r2, [pc, #500]	; (800b15c <HAL_I2C_Init+0x27c>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	bf94      	ite	ls
 800af6c:	2301      	movls	r3, #1
 800af6e:	2300      	movhi	r3, #0
 800af70:	b2db      	uxtb	r3, r3
 800af72:	2b00      	cmp	r3, #0
 800af74:	d001      	beq.n	800af7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800af76:	2301      	movs	r3, #1
 800af78:	e0e7      	b.n	800b14a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	4a78      	ldr	r2, [pc, #480]	; (800b160 <HAL_I2C_Init+0x280>)
 800af7e:	fba2 2303 	umull	r2, r3, r2, r3
 800af82:	0c9b      	lsrs	r3, r3, #18
 800af84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	68ba      	ldr	r2, [r7, #8]
 800af96:	430a      	orrs	r2, r1
 800af98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	6a1b      	ldr	r3, [r3, #32]
 800afa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	4a6a      	ldr	r2, [pc, #424]	; (800b154 <HAL_I2C_Init+0x274>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d802      	bhi.n	800afb4 <HAL_I2C_Init+0xd4>
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	3301      	adds	r3, #1
 800afb2:	e009      	b.n	800afc8 <HAL_I2C_Init+0xe8>
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800afba:	fb02 f303 	mul.w	r3, r2, r3
 800afbe:	4a69      	ldr	r2, [pc, #420]	; (800b164 <HAL_I2C_Init+0x284>)
 800afc0:	fba2 2303 	umull	r2, r3, r2, r3
 800afc4:	099b      	lsrs	r3, r3, #6
 800afc6:	3301      	adds	r3, #1
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	6812      	ldr	r2, [r2, #0]
 800afcc:	430b      	orrs	r3, r1
 800afce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	69db      	ldr	r3, [r3, #28]
 800afd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800afda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	495c      	ldr	r1, [pc, #368]	; (800b154 <HAL_I2C_Init+0x274>)
 800afe4:	428b      	cmp	r3, r1
 800afe6:	d819      	bhi.n	800b01c <HAL_I2C_Init+0x13c>
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	1e59      	subs	r1, r3, #1
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	005b      	lsls	r3, r3, #1
 800aff2:	fbb1 f3f3 	udiv	r3, r1, r3
 800aff6:	1c59      	adds	r1, r3, #1
 800aff8:	f640 73fc 	movw	r3, #4092	; 0xffc
 800affc:	400b      	ands	r3, r1
 800affe:	2b00      	cmp	r3, #0
 800b000:	d00a      	beq.n	800b018 <HAL_I2C_Init+0x138>
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	1e59      	subs	r1, r3, #1
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	005b      	lsls	r3, r3, #1
 800b00c:	fbb1 f3f3 	udiv	r3, r1, r3
 800b010:	3301      	adds	r3, #1
 800b012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b016:	e051      	b.n	800b0bc <HAL_I2C_Init+0x1dc>
 800b018:	2304      	movs	r3, #4
 800b01a:	e04f      	b.n	800b0bc <HAL_I2C_Init+0x1dc>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d111      	bne.n	800b048 <HAL_I2C_Init+0x168>
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	1e58      	subs	r0, r3, #1
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6859      	ldr	r1, [r3, #4]
 800b02c:	460b      	mov	r3, r1
 800b02e:	005b      	lsls	r3, r3, #1
 800b030:	440b      	add	r3, r1
 800b032:	fbb0 f3f3 	udiv	r3, r0, r3
 800b036:	3301      	adds	r3, #1
 800b038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	bf0c      	ite	eq
 800b040:	2301      	moveq	r3, #1
 800b042:	2300      	movne	r3, #0
 800b044:	b2db      	uxtb	r3, r3
 800b046:	e012      	b.n	800b06e <HAL_I2C_Init+0x18e>
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	1e58      	subs	r0, r3, #1
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6859      	ldr	r1, [r3, #4]
 800b050:	460b      	mov	r3, r1
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	440b      	add	r3, r1
 800b056:	0099      	lsls	r1, r3, #2
 800b058:	440b      	add	r3, r1
 800b05a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b05e:	3301      	adds	r3, #1
 800b060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b064:	2b00      	cmp	r3, #0
 800b066:	bf0c      	ite	eq
 800b068:	2301      	moveq	r3, #1
 800b06a:	2300      	movne	r3, #0
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d001      	beq.n	800b076 <HAL_I2C_Init+0x196>
 800b072:	2301      	movs	r3, #1
 800b074:	e022      	b.n	800b0bc <HAL_I2C_Init+0x1dc>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d10e      	bne.n	800b09c <HAL_I2C_Init+0x1bc>
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	1e58      	subs	r0, r3, #1
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6859      	ldr	r1, [r3, #4]
 800b086:	460b      	mov	r3, r1
 800b088:	005b      	lsls	r3, r3, #1
 800b08a:	440b      	add	r3, r1
 800b08c:	fbb0 f3f3 	udiv	r3, r0, r3
 800b090:	3301      	adds	r3, #1
 800b092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b09a:	e00f      	b.n	800b0bc <HAL_I2C_Init+0x1dc>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	1e58      	subs	r0, r3, #1
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6859      	ldr	r1, [r3, #4]
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	440b      	add	r3, r1
 800b0aa:	0099      	lsls	r1, r3, #2
 800b0ac:	440b      	add	r3, r1
 800b0ae:	fbb0 f3f3 	udiv	r3, r0, r3
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b0bc:	6879      	ldr	r1, [r7, #4]
 800b0be:	6809      	ldr	r1, [r1, #0]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	69da      	ldr	r2, [r3, #28]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a1b      	ldr	r3, [r3, #32]
 800b0d6:	431a      	orrs	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	430a      	orrs	r2, r1
 800b0de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b0ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	6911      	ldr	r1, [r2, #16]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	68d2      	ldr	r2, [r2, #12]
 800b0f6:	4311      	orrs	r1, r2
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	6812      	ldr	r2, [r2, #0]
 800b0fc:	430b      	orrs	r3, r1
 800b0fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	68db      	ldr	r3, [r3, #12]
 800b106:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	695a      	ldr	r2, [r3, #20]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	699b      	ldr	r3, [r3, #24]
 800b112:	431a      	orrs	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	430a      	orrs	r2, r1
 800b11a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f042 0201 	orr.w	r2, r2, #1
 800b12a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2220      	movs	r2, #32
 800b136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3710      	adds	r7, #16
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	000186a0 	.word	0x000186a0
 800b158:	001e847f 	.word	0x001e847f
 800b15c:	003d08ff 	.word	0x003d08ff
 800b160:	431bde83 	.word	0x431bde83
 800b164:	10624dd3 	.word	0x10624dd3

0800b168 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b088      	sub	sp, #32
 800b16c:	af02      	add	r7, sp, #8
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	607a      	str	r2, [r7, #4]
 800b172:	461a      	mov	r2, r3
 800b174:	460b      	mov	r3, r1
 800b176:	817b      	strh	r3, [r7, #10]
 800b178:	4613      	mov	r3, r2
 800b17a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b17c:	f7fe fbee 	bl	800995c <HAL_GetTick>
 800b180:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	2b20      	cmp	r3, #32
 800b18c:	f040 80e0 	bne.w	800b350 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	9300      	str	r3, [sp, #0]
 800b194:	2319      	movs	r3, #25
 800b196:	2201      	movs	r2, #1
 800b198:	4970      	ldr	r1, [pc, #448]	; (800b35c <HAL_I2C_Master_Transmit+0x1f4>)
 800b19a:	68f8      	ldr	r0, [r7, #12]
 800b19c:	f000 fc58 	bl	800ba50 <I2C_WaitOnFlagUntilTimeout>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d001      	beq.n	800b1aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b1a6:	2302      	movs	r3, #2
 800b1a8:	e0d3      	b.n	800b352 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d101      	bne.n	800b1b8 <HAL_I2C_Master_Transmit+0x50>
 800b1b4:	2302      	movs	r3, #2
 800b1b6:	e0cc      	b.n	800b352 <HAL_I2C_Master_Transmit+0x1ea>
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f003 0301 	and.w	r3, r3, #1
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d007      	beq.n	800b1de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f042 0201 	orr.w	r2, r2, #1
 800b1dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b1ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2221      	movs	r2, #33	; 0x21
 800b1f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2210      	movs	r2, #16
 800b1fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2200      	movs	r2, #0
 800b202:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	893a      	ldrh	r2, [r7, #8]
 800b20e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b214:	b29a      	uxth	r2, r3
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	4a50      	ldr	r2, [pc, #320]	; (800b360 <HAL_I2C_Master_Transmit+0x1f8>)
 800b21e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b220:	8979      	ldrh	r1, [r7, #10]
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	6a3a      	ldr	r2, [r7, #32]
 800b226:	68f8      	ldr	r0, [r7, #12]
 800b228:	f000 fac2 	bl	800b7b0 <I2C_MasterRequestWrite>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d001      	beq.n	800b236 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b232:	2301      	movs	r3, #1
 800b234:	e08d      	b.n	800b352 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b236:	2300      	movs	r3, #0
 800b238:	613b      	str	r3, [r7, #16]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	695b      	ldr	r3, [r3, #20]
 800b240:	613b      	str	r3, [r7, #16]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	699b      	ldr	r3, [r3, #24]
 800b248:	613b      	str	r3, [r7, #16]
 800b24a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b24c:	e066      	b.n	800b31c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b24e:	697a      	ldr	r2, [r7, #20]
 800b250:	6a39      	ldr	r1, [r7, #32]
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	f000 fcd2 	bl	800bbfc <I2C_WaitOnTXEFlagUntilTimeout>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00d      	beq.n	800b27a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b262:	2b04      	cmp	r3, #4
 800b264:	d107      	bne.n	800b276 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b274:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	e06b      	b.n	800b352 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27e:	781a      	ldrb	r2, [r3, #0]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28a:	1c5a      	adds	r2, r3, #1
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b294:	b29b      	uxth	r3, r3
 800b296:	3b01      	subs	r3, #1
 800b298:	b29a      	uxth	r2, r3
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	695b      	ldr	r3, [r3, #20]
 800b2b0:	f003 0304 	and.w	r3, r3, #4
 800b2b4:	2b04      	cmp	r3, #4
 800b2b6:	d11b      	bne.n	800b2f0 <HAL_I2C_Master_Transmit+0x188>
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d017      	beq.n	800b2f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c4:	781a      	ldrb	r2, [r3, #0]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d0:	1c5a      	adds	r2, r3, #1
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	3b01      	subs	r3, #1
 800b2de:	b29a      	uxth	r2, r3
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	b29a      	uxth	r2, r3
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2f0:	697a      	ldr	r2, [r7, #20]
 800b2f2:	6a39      	ldr	r1, [r7, #32]
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f000 fcc2 	bl	800bc7e <I2C_WaitOnBTFFlagUntilTimeout>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00d      	beq.n	800b31c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b304:	2b04      	cmp	r3, #4
 800b306:	d107      	bne.n	800b318 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b316:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b318:	2301      	movs	r3, #1
 800b31a:	e01a      	b.n	800b352 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b320:	2b00      	cmp	r3, #0
 800b322:	d194      	bne.n	800b24e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2220      	movs	r2, #32
 800b338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2200      	movs	r2, #0
 800b340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2200      	movs	r2, #0
 800b348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b34c:	2300      	movs	r3, #0
 800b34e:	e000      	b.n	800b352 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b350:	2302      	movs	r3, #2
  }
}
 800b352:	4618      	mov	r0, r3
 800b354:	3718      	adds	r7, #24
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	00100002 	.word	0x00100002
 800b360:	ffff0000 	.word	0xffff0000

0800b364 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b08c      	sub	sp, #48	; 0x30
 800b368:	af02      	add	r7, sp, #8
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	607a      	str	r2, [r7, #4]
 800b36e:	461a      	mov	r2, r3
 800b370:	460b      	mov	r3, r1
 800b372:	817b      	strh	r3, [r7, #10]
 800b374:	4613      	mov	r3, r2
 800b376:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b378:	f7fe faf0 	bl	800995c <HAL_GetTick>
 800b37c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b384:	b2db      	uxtb	r3, r3
 800b386:	2b20      	cmp	r3, #32
 800b388:	f040 820b 	bne.w	800b7a2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38e:	9300      	str	r3, [sp, #0]
 800b390:	2319      	movs	r3, #25
 800b392:	2201      	movs	r2, #1
 800b394:	497c      	ldr	r1, [pc, #496]	; (800b588 <HAL_I2C_Master_Receive+0x224>)
 800b396:	68f8      	ldr	r0, [r7, #12]
 800b398:	f000 fb5a 	bl	800ba50 <I2C_WaitOnFlagUntilTimeout>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d001      	beq.n	800b3a6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b3a2:	2302      	movs	r3, #2
 800b3a4:	e1fe      	b.n	800b7a4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d101      	bne.n	800b3b4 <HAL_I2C_Master_Receive+0x50>
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	e1f7      	b.n	800b7a4 <HAL_I2C_Master_Receive+0x440>
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f003 0301 	and.w	r3, r3, #1
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d007      	beq.n	800b3da <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f042 0201 	orr.w	r2, r2, #1
 800b3d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b3e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2222      	movs	r2, #34	; 0x22
 800b3ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2210      	movs	r2, #16
 800b3f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	893a      	ldrh	r2, [r7, #8]
 800b40a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b410:	b29a      	uxth	r2, r3
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	4a5c      	ldr	r2, [pc, #368]	; (800b58c <HAL_I2C_Master_Receive+0x228>)
 800b41a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b41c:	8979      	ldrh	r1, [r7, #10]
 800b41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f000 fa46 	bl	800b8b4 <I2C_MasterRequestRead>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d001      	beq.n	800b432 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	e1b8      	b.n	800b7a4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b436:	2b00      	cmp	r3, #0
 800b438:	d113      	bne.n	800b462 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b43a:	2300      	movs	r3, #0
 800b43c:	623b      	str	r3, [r7, #32]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	695b      	ldr	r3, [r3, #20]
 800b444:	623b      	str	r3, [r7, #32]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	699b      	ldr	r3, [r3, #24]
 800b44c:	623b      	str	r3, [r7, #32]
 800b44e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b45e:	601a      	str	r2, [r3, #0]
 800b460:	e18c      	b.n	800b77c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b466:	2b01      	cmp	r3, #1
 800b468:	d11b      	bne.n	800b4a2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b478:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b47a:	2300      	movs	r3, #0
 800b47c:	61fb      	str	r3, [r7, #28]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	695b      	ldr	r3, [r3, #20]
 800b484:	61fb      	str	r3, [r7, #28]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	699b      	ldr	r3, [r3, #24]
 800b48c:	61fb      	str	r3, [r7, #28]
 800b48e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b49e:	601a      	str	r2, [r3, #0]
 800b4a0:	e16c      	b.n	800b77c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4a6:	2b02      	cmp	r3, #2
 800b4a8:	d11b      	bne.n	800b4e2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	61bb      	str	r3, [r7, #24]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	695b      	ldr	r3, [r3, #20]
 800b4d4:	61bb      	str	r3, [r7, #24]
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	699b      	ldr	r3, [r3, #24]
 800b4dc:	61bb      	str	r3, [r7, #24]
 800b4de:	69bb      	ldr	r3, [r7, #24]
 800b4e0:	e14c      	b.n	800b77c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b4f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	617b      	str	r3, [r7, #20]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	695b      	ldr	r3, [r3, #20]
 800b4fc:	617b      	str	r3, [r7, #20]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	699b      	ldr	r3, [r3, #24]
 800b504:	617b      	str	r3, [r7, #20]
 800b506:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b508:	e138      	b.n	800b77c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b50e:	2b03      	cmp	r3, #3
 800b510:	f200 80f1 	bhi.w	800b6f6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d123      	bne.n	800b564 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b51c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b51e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f000 fbed 	bl	800bd00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d001      	beq.n	800b530 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	e139      	b.n	800b7a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	691a      	ldr	r2, [r3, #16]
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53a:	b2d2      	uxtb	r2, r2
 800b53c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b542:	1c5a      	adds	r2, r3, #1
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b54c:	3b01      	subs	r3, #1
 800b54e:	b29a      	uxth	r2, r3
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b558:	b29b      	uxth	r3, r3
 800b55a:	3b01      	subs	r3, #1
 800b55c:	b29a      	uxth	r2, r3
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b562:	e10b      	b.n	800b77c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b568:	2b02      	cmp	r3, #2
 800b56a:	d14e      	bne.n	800b60a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56e:	9300      	str	r3, [sp, #0]
 800b570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b572:	2200      	movs	r2, #0
 800b574:	4906      	ldr	r1, [pc, #24]	; (800b590 <HAL_I2C_Master_Receive+0x22c>)
 800b576:	68f8      	ldr	r0, [r7, #12]
 800b578:	f000 fa6a 	bl	800ba50 <I2C_WaitOnFlagUntilTimeout>
 800b57c:	4603      	mov	r3, r0
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d008      	beq.n	800b594 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b582:	2301      	movs	r3, #1
 800b584:	e10e      	b.n	800b7a4 <HAL_I2C_Master_Receive+0x440>
 800b586:	bf00      	nop
 800b588:	00100002 	.word	0x00100002
 800b58c:	ffff0000 	.word	0xffff0000
 800b590:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	691a      	ldr	r2, [r3, #16]
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ae:	b2d2      	uxtb	r2, r2
 800b5b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b6:	1c5a      	adds	r2, r3, #1
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5c0:	3b01      	subs	r3, #1
 800b5c2:	b29a      	uxth	r2, r3
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5cc:	b29b      	uxth	r3, r3
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	b29a      	uxth	r2, r3
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	691a      	ldr	r2, [r3, #16]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e0:	b2d2      	uxtb	r2, r2
 800b5e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e8:	1c5a      	adds	r2, r3, #1
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5f2:	3b01      	subs	r3, #1
 800b5f4:	b29a      	uxth	r2, r3
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	3b01      	subs	r3, #1
 800b602:	b29a      	uxth	r2, r3
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b608:	e0b8      	b.n	800b77c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b610:	2200      	movs	r2, #0
 800b612:	4966      	ldr	r1, [pc, #408]	; (800b7ac <HAL_I2C_Master_Receive+0x448>)
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f000 fa1b 	bl	800ba50 <I2C_WaitOnFlagUntilTimeout>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d001      	beq.n	800b624 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b620:	2301      	movs	r3, #1
 800b622:	e0bf      	b.n	800b7a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b632:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	691a      	ldr	r2, [r3, #16]
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63e:	b2d2      	uxtb	r2, r2
 800b640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b646:	1c5a      	adds	r2, r3, #1
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b650:	3b01      	subs	r3, #1
 800b652:	b29a      	uxth	r2, r3
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	3b01      	subs	r3, #1
 800b660:	b29a      	uxth	r2, r3
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b668:	9300      	str	r3, [sp, #0]
 800b66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66c:	2200      	movs	r2, #0
 800b66e:	494f      	ldr	r1, [pc, #316]	; (800b7ac <HAL_I2C_Master_Receive+0x448>)
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	f000 f9ed 	bl	800ba50 <I2C_WaitOnFlagUntilTimeout>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d001      	beq.n	800b680 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b67c:	2301      	movs	r3, #1
 800b67e:	e091      	b.n	800b7a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b68e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	691a      	ldr	r2, [r3, #16]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69a:	b2d2      	uxtb	r2, r2
 800b69c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a2:	1c5a      	adds	r2, r3, #1
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	b29a      	uxth	r2, r3
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6b8:	b29b      	uxth	r3, r3
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	b29a      	uxth	r2, r3
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	691a      	ldr	r2, [r3, #16]
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6cc:	b2d2      	uxtb	r2, r2
 800b6ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6d4:	1c5a      	adds	r2, r3, #1
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6de:	3b01      	subs	r3, #1
 800b6e0:	b29a      	uxth	r2, r3
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b6f4:	e042      	b.n	800b77c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b6fa:	68f8      	ldr	r0, [r7, #12]
 800b6fc:	f000 fb00 	bl	800bd00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b700:	4603      	mov	r3, r0
 800b702:	2b00      	cmp	r3, #0
 800b704:	d001      	beq.n	800b70a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	e04c      	b.n	800b7a4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	691a      	ldr	r2, [r3, #16]
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b714:	b2d2      	uxtb	r2, r2
 800b716:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b71c:	1c5a      	adds	r2, r3, #1
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b726:	3b01      	subs	r3, #1
 800b728:	b29a      	uxth	r2, r3
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b732:	b29b      	uxth	r3, r3
 800b734:	3b01      	subs	r3, #1
 800b736:	b29a      	uxth	r2, r3
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	695b      	ldr	r3, [r3, #20]
 800b742:	f003 0304 	and.w	r3, r3, #4
 800b746:	2b04      	cmp	r3, #4
 800b748:	d118      	bne.n	800b77c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	691a      	ldr	r2, [r3, #16]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b754:	b2d2      	uxtb	r2, r2
 800b756:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75c:	1c5a      	adds	r2, r3, #1
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b766:	3b01      	subs	r3, #1
 800b768:	b29a      	uxth	r2, r3
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b772:	b29b      	uxth	r3, r3
 800b774:	3b01      	subs	r3, #1
 800b776:	b29a      	uxth	r2, r3
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b780:	2b00      	cmp	r3, #0
 800b782:	f47f aec2 	bne.w	800b50a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2220      	movs	r2, #32
 800b78a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2200      	movs	r2, #0
 800b792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2200      	movs	r2, #0
 800b79a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	e000      	b.n	800b7a4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b7a2:	2302      	movs	r3, #2
  }
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3728      	adds	r7, #40	; 0x28
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	00010004 	.word	0x00010004

0800b7b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b088      	sub	sp, #32
 800b7b4:	af02      	add	r7, sp, #8
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	607a      	str	r2, [r7, #4]
 800b7ba:	603b      	str	r3, [r7, #0]
 800b7bc:	460b      	mov	r3, r1
 800b7be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	2b08      	cmp	r3, #8
 800b7ca:	d006      	beq.n	800b7da <I2C_MasterRequestWrite+0x2a>
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d003      	beq.n	800b7da <I2C_MasterRequestWrite+0x2a>
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b7d8:	d108      	bne.n	800b7ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b7e8:	601a      	str	r2, [r3, #0]
 800b7ea:	e00b      	b.n	800b804 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7f0:	2b12      	cmp	r3, #18
 800b7f2:	d107      	bne.n	800b804 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b802:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2200      	movs	r2, #0
 800b80c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f000 f91d 	bl	800ba50 <I2C_WaitOnFlagUntilTimeout>
 800b816:	4603      	mov	r3, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d00d      	beq.n	800b838 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b82a:	d103      	bne.n	800b834 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b832:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b834:	2303      	movs	r3, #3
 800b836:	e035      	b.n	800b8a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	691b      	ldr	r3, [r3, #16]
 800b83c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b840:	d108      	bne.n	800b854 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b842:	897b      	ldrh	r3, [r7, #10]
 800b844:	b2db      	uxtb	r3, r3
 800b846:	461a      	mov	r2, r3
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b850:	611a      	str	r2, [r3, #16]
 800b852:	e01b      	b.n	800b88c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b854:	897b      	ldrh	r3, [r7, #10]
 800b856:	11db      	asrs	r3, r3, #7
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	f003 0306 	and.w	r3, r3, #6
 800b85e:	b2db      	uxtb	r3, r3
 800b860:	f063 030f 	orn	r3, r3, #15
 800b864:	b2da      	uxtb	r2, r3
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	490e      	ldr	r1, [pc, #56]	; (800b8ac <I2C_MasterRequestWrite+0xfc>)
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	f000 f943 	bl	800bafe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d001      	beq.n	800b882 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	e010      	b.n	800b8a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b882:	897b      	ldrh	r3, [r7, #10]
 800b884:	b2da      	uxtb	r2, r3
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	4907      	ldr	r1, [pc, #28]	; (800b8b0 <I2C_MasterRequestWrite+0x100>)
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	f000 f933 	bl	800bafe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d001      	beq.n	800b8a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e000      	b.n	800b8a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3718      	adds	r7, #24
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	00010008 	.word	0x00010008
 800b8b0:	00010002 	.word	0x00010002

0800b8b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b088      	sub	sp, #32
 800b8b8:	af02      	add	r7, sp, #8
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	607a      	str	r2, [r7, #4]
 800b8be:	603b      	str	r3, [r7, #0]
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b8d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	2b08      	cmp	r3, #8
 800b8de:	d006      	beq.n	800b8ee <I2C_MasterRequestRead+0x3a>
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d003      	beq.n	800b8ee <I2C_MasterRequestRead+0x3a>
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b8ec:	d108      	bne.n	800b900 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	681a      	ldr	r2, [r3, #0]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8fc:	601a      	str	r2, [r3, #0]
 800b8fe:	e00b      	b.n	800b918 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b904:	2b11      	cmp	r3, #17
 800b906:	d107      	bne.n	800b918 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b916:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b924:	68f8      	ldr	r0, [r7, #12]
 800b926:	f000 f893 	bl	800ba50 <I2C_WaitOnFlagUntilTimeout>
 800b92a:	4603      	mov	r3, r0
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d00d      	beq.n	800b94c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b93a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b93e:	d103      	bne.n	800b948 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b946:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b948:	2303      	movs	r3, #3
 800b94a:	e079      	b.n	800ba40 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	691b      	ldr	r3, [r3, #16]
 800b950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b954:	d108      	bne.n	800b968 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b956:	897b      	ldrh	r3, [r7, #10]
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	f043 0301 	orr.w	r3, r3, #1
 800b95e:	b2da      	uxtb	r2, r3
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	611a      	str	r2, [r3, #16]
 800b966:	e05f      	b.n	800ba28 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b968:	897b      	ldrh	r3, [r7, #10]
 800b96a:	11db      	asrs	r3, r3, #7
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	f003 0306 	and.w	r3, r3, #6
 800b972:	b2db      	uxtb	r3, r3
 800b974:	f063 030f 	orn	r3, r3, #15
 800b978:	b2da      	uxtb	r2, r3
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	4930      	ldr	r1, [pc, #192]	; (800ba48 <I2C_MasterRequestRead+0x194>)
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f000 f8b9 	bl	800bafe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d001      	beq.n	800b996 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	e054      	b.n	800ba40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b996:	897b      	ldrh	r3, [r7, #10]
 800b998:	b2da      	uxtb	r2, r3
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	4929      	ldr	r1, [pc, #164]	; (800ba4c <I2C_MasterRequestRead+0x198>)
 800b9a6:	68f8      	ldr	r0, [r7, #12]
 800b9a8:	f000 f8a9 	bl	800bafe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d001      	beq.n	800b9b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e044      	b.n	800ba40 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	613b      	str	r3, [r7, #16]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	695b      	ldr	r3, [r3, #20]
 800b9c0:	613b      	str	r3, [r7, #16]
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	699b      	ldr	r3, [r3, #24]
 800b9c8:	613b      	str	r3, [r7, #16]
 800b9ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b9da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	9300      	str	r3, [sp, #0]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b9e8:	68f8      	ldr	r0, [r7, #12]
 800b9ea:	f000 f831 	bl	800ba50 <I2C_WaitOnFlagUntilTimeout>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d00d      	beq.n	800ba10 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba02:	d103      	bne.n	800ba0c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba0a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800ba0c:	2303      	movs	r3, #3
 800ba0e:	e017      	b.n	800ba40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800ba10:	897b      	ldrh	r3, [r7, #10]
 800ba12:	11db      	asrs	r3, r3, #7
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	f003 0306 	and.w	r3, r3, #6
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	f063 030e 	orn	r3, r3, #14
 800ba20:	b2da      	uxtb	r2, r3
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	4907      	ldr	r1, [pc, #28]	; (800ba4c <I2C_MasterRequestRead+0x198>)
 800ba2e:	68f8      	ldr	r0, [r7, #12]
 800ba30:	f000 f865 	bl	800bafe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ba34:	4603      	mov	r3, r0
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d001      	beq.n	800ba3e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	e000      	b.n	800ba40 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800ba3e:	2300      	movs	r3, #0
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3718      	adds	r7, #24
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	00010008 	.word	0x00010008
 800ba4c:	00010002 	.word	0x00010002

0800ba50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b084      	sub	sp, #16
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	603b      	str	r3, [r7, #0]
 800ba5c:	4613      	mov	r3, r2
 800ba5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba60:	e025      	b.n	800baae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba68:	d021      	beq.n	800baae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba6a:	f7fd ff77 	bl	800995c <HAL_GetTick>
 800ba6e:	4602      	mov	r2, r0
 800ba70:	69bb      	ldr	r3, [r7, #24]
 800ba72:	1ad3      	subs	r3, r2, r3
 800ba74:	683a      	ldr	r2, [r7, #0]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d302      	bcc.n	800ba80 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d116      	bne.n	800baae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2200      	movs	r2, #0
 800ba84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2220      	movs	r2, #32
 800ba8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2200      	movs	r2, #0
 800ba92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba9a:	f043 0220 	orr.w	r2, r3, #32
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2200      	movs	r2, #0
 800baa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800baaa:	2301      	movs	r3, #1
 800baac:	e023      	b.n	800baf6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	0c1b      	lsrs	r3, r3, #16
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	d10d      	bne.n	800bad4 <I2C_WaitOnFlagUntilTimeout+0x84>
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	695b      	ldr	r3, [r3, #20]
 800babe:	43da      	mvns	r2, r3
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	4013      	ands	r3, r2
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	bf0c      	ite	eq
 800baca:	2301      	moveq	r3, #1
 800bacc:	2300      	movne	r3, #0
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	461a      	mov	r2, r3
 800bad2:	e00c      	b.n	800baee <I2C_WaitOnFlagUntilTimeout+0x9e>
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	699b      	ldr	r3, [r3, #24]
 800bada:	43da      	mvns	r2, r3
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	4013      	ands	r3, r2
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	bf0c      	ite	eq
 800bae6:	2301      	moveq	r3, #1
 800bae8:	2300      	movne	r3, #0
 800baea:	b2db      	uxtb	r3, r3
 800baec:	461a      	mov	r2, r3
 800baee:	79fb      	ldrb	r3, [r7, #7]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d0b6      	beq.n	800ba62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b084      	sub	sp, #16
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	60f8      	str	r0, [r7, #12]
 800bb06:	60b9      	str	r1, [r7, #8]
 800bb08:	607a      	str	r2, [r7, #4]
 800bb0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bb0c:	e051      	b.n	800bbb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	695b      	ldr	r3, [r3, #20]
 800bb14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb1c:	d123      	bne.n	800bb66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bb36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2220      	movs	r2, #32
 800bb42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb52:	f043 0204 	orr.w	r2, r3, #4
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bb62:	2301      	movs	r3, #1
 800bb64:	e046      	b.n	800bbf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb6c:	d021      	beq.n	800bbb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb6e:	f7fd fef5 	bl	800995c <HAL_GetTick>
 800bb72:	4602      	mov	r2, r0
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	1ad3      	subs	r3, r2, r3
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d302      	bcc.n	800bb84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d116      	bne.n	800bbb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2200      	movs	r2, #0
 800bb88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2220      	movs	r2, #32
 800bb8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2200      	movs	r2, #0
 800bb96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb9e:	f043 0220 	orr.w	r2, r3, #32
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bbae:	2301      	movs	r3, #1
 800bbb0:	e020      	b.n	800bbf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	0c1b      	lsrs	r3, r3, #16
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d10c      	bne.n	800bbd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	695b      	ldr	r3, [r3, #20]
 800bbc2:	43da      	mvns	r2, r3
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	4013      	ands	r3, r2
 800bbc8:	b29b      	uxth	r3, r3
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	bf14      	ite	ne
 800bbce:	2301      	movne	r3, #1
 800bbd0:	2300      	moveq	r3, #0
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	e00b      	b.n	800bbee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	699b      	ldr	r3, [r3, #24]
 800bbdc:	43da      	mvns	r2, r3
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	4013      	ands	r3, r2
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	bf14      	ite	ne
 800bbe8:	2301      	movne	r3, #1
 800bbea:	2300      	moveq	r3, #0
 800bbec:	b2db      	uxtb	r3, r3
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d18d      	bne.n	800bb0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	60b9      	str	r1, [r7, #8]
 800bc06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bc08:	e02d      	b.n	800bc66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bc0a:	68f8      	ldr	r0, [r7, #12]
 800bc0c:	f000 f8ce 	bl	800bdac <I2C_IsAcknowledgeFailed>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d001      	beq.n	800bc1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	e02d      	b.n	800bc76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc20:	d021      	beq.n	800bc66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc22:	f7fd fe9b 	bl	800995c <HAL_GetTick>
 800bc26:	4602      	mov	r2, r0
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	1ad3      	subs	r3, r2, r3
 800bc2c:	68ba      	ldr	r2, [r7, #8]
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d302      	bcc.n	800bc38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d116      	bne.n	800bc66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2220      	movs	r2, #32
 800bc42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc52:	f043 0220 	orr.w	r2, r3, #32
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bc62:	2301      	movs	r3, #1
 800bc64:	e007      	b.n	800bc76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	695b      	ldr	r3, [r3, #20]
 800bc6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc70:	2b80      	cmp	r3, #128	; 0x80
 800bc72:	d1ca      	bne.n	800bc0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bc74:	2300      	movs	r3, #0
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}

0800bc7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc7e:	b580      	push	{r7, lr}
 800bc80:	b084      	sub	sp, #16
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	60f8      	str	r0, [r7, #12]
 800bc86:	60b9      	str	r1, [r7, #8]
 800bc88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bc8a:	e02d      	b.n	800bce8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f000 f88d 	bl	800bdac <I2C_IsAcknowledgeFailed>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d001      	beq.n	800bc9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	e02d      	b.n	800bcf8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca2:	d021      	beq.n	800bce8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bca4:	f7fd fe5a 	bl	800995c <HAL_GetTick>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	1ad3      	subs	r3, r2, r3
 800bcae:	68ba      	ldr	r2, [r7, #8]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d302      	bcc.n	800bcba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d116      	bne.n	800bce8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2220      	movs	r2, #32
 800bcc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2200      	movs	r2, #0
 800bccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcd4:	f043 0220 	orr.w	r2, r3, #32
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	e007      	b.n	800bcf8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	695b      	ldr	r3, [r3, #20]
 800bcee:	f003 0304 	and.w	r3, r3, #4
 800bcf2:	2b04      	cmp	r3, #4
 800bcf4:	d1ca      	bne.n	800bc8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bcf6:	2300      	movs	r3, #0
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3710      	adds	r7, #16
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bd0c:	e042      	b.n	800bd94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	695b      	ldr	r3, [r3, #20]
 800bd14:	f003 0310 	and.w	r3, r3, #16
 800bd18:	2b10      	cmp	r3, #16
 800bd1a:	d119      	bne.n	800bd50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f06f 0210 	mvn.w	r2, #16
 800bd24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2220      	movs	r2, #32
 800bd30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2200      	movs	r2, #0
 800bd38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2200      	movs	r2, #0
 800bd48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	e029      	b.n	800bda4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd50:	f7fd fe04 	bl	800995c <HAL_GetTick>
 800bd54:	4602      	mov	r2, r0
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	1ad3      	subs	r3, r2, r3
 800bd5a:	68ba      	ldr	r2, [r7, #8]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d302      	bcc.n	800bd66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d116      	bne.n	800bd94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2220      	movs	r2, #32
 800bd70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2200      	movs	r2, #0
 800bd78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd80:	f043 0220 	orr.w	r2, r3, #32
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bd90:	2301      	movs	r3, #1
 800bd92:	e007      	b.n	800bda4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	695b      	ldr	r3, [r3, #20]
 800bd9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd9e:	2b40      	cmp	r3, #64	; 0x40
 800bda0:	d1b5      	bne.n	800bd0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bda2:	2300      	movs	r3, #0
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3710      	adds	r7, #16
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	695b      	ldr	r3, [r3, #20]
 800bdba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bdbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdc2:	d11b      	bne.n	800bdfc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bdcc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2220      	movs	r2, #32
 800bdd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2200      	movs	r2, #0
 800bde0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bde8:	f043 0204 	orr.w	r2, r3, #4
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	e000      	b.n	800bdfe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bdfc:	2300      	movs	r3, #0
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	370c      	adds	r7, #12
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr
	...

0800be0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800be12:	2300      	movs	r3, #0
 800be14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800be16:	2300      	movs	r3, #0
 800be18:	603b      	str	r3, [r7, #0]
 800be1a:	4b20      	ldr	r3, [pc, #128]	; (800be9c <HAL_PWREx_EnableOverDrive+0x90>)
 800be1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be1e:	4a1f      	ldr	r2, [pc, #124]	; (800be9c <HAL_PWREx_EnableOverDrive+0x90>)
 800be20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be24:	6413      	str	r3, [r2, #64]	; 0x40
 800be26:	4b1d      	ldr	r3, [pc, #116]	; (800be9c <HAL_PWREx_EnableOverDrive+0x90>)
 800be28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be2e:	603b      	str	r3, [r7, #0]
 800be30:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800be32:	4b1b      	ldr	r3, [pc, #108]	; (800bea0 <HAL_PWREx_EnableOverDrive+0x94>)
 800be34:	2201      	movs	r2, #1
 800be36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800be38:	f7fd fd90 	bl	800995c <HAL_GetTick>
 800be3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800be3e:	e009      	b.n	800be54 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800be40:	f7fd fd8c 	bl	800995c <HAL_GetTick>
 800be44:	4602      	mov	r2, r0
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	1ad3      	subs	r3, r2, r3
 800be4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be4e:	d901      	bls.n	800be54 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800be50:	2303      	movs	r3, #3
 800be52:	e01f      	b.n	800be94 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800be54:	4b13      	ldr	r3, [pc, #76]	; (800bea4 <HAL_PWREx_EnableOverDrive+0x98>)
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be60:	d1ee      	bne.n	800be40 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800be62:	4b11      	ldr	r3, [pc, #68]	; (800bea8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800be64:	2201      	movs	r2, #1
 800be66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800be68:	f7fd fd78 	bl	800995c <HAL_GetTick>
 800be6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800be6e:	e009      	b.n	800be84 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800be70:	f7fd fd74 	bl	800995c <HAL_GetTick>
 800be74:	4602      	mov	r2, r0
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	1ad3      	subs	r3, r2, r3
 800be7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be7e:	d901      	bls.n	800be84 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800be80:	2303      	movs	r3, #3
 800be82:	e007      	b.n	800be94 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800be84:	4b07      	ldr	r3, [pc, #28]	; (800bea4 <HAL_PWREx_EnableOverDrive+0x98>)
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be90:	d1ee      	bne.n	800be70 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800be92:	2300      	movs	r3, #0
}
 800be94:	4618      	mov	r0, r3
 800be96:	3708      	adds	r7, #8
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	40023800 	.word	0x40023800
 800bea0:	420e0040 	.word	0x420e0040
 800bea4:	40007000 	.word	0x40007000
 800bea8:	420e0044 	.word	0x420e0044

0800beac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d101      	bne.n	800bec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bebc:	2301      	movs	r3, #1
 800bebe:	e0cc      	b.n	800c05a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bec0:	4b68      	ldr	r3, [pc, #416]	; (800c064 <HAL_RCC_ClockConfig+0x1b8>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f003 030f 	and.w	r3, r3, #15
 800bec8:	683a      	ldr	r2, [r7, #0]
 800beca:	429a      	cmp	r2, r3
 800becc:	d90c      	bls.n	800bee8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bece:	4b65      	ldr	r3, [pc, #404]	; (800c064 <HAL_RCC_ClockConfig+0x1b8>)
 800bed0:	683a      	ldr	r2, [r7, #0]
 800bed2:	b2d2      	uxtb	r2, r2
 800bed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bed6:	4b63      	ldr	r3, [pc, #396]	; (800c064 <HAL_RCC_ClockConfig+0x1b8>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f003 030f 	and.w	r3, r3, #15
 800bede:	683a      	ldr	r2, [r7, #0]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d001      	beq.n	800bee8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bee4:	2301      	movs	r3, #1
 800bee6:	e0b8      	b.n	800c05a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f003 0302 	and.w	r3, r3, #2
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d020      	beq.n	800bf36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f003 0304 	and.w	r3, r3, #4
 800befc:	2b00      	cmp	r3, #0
 800befe:	d005      	beq.n	800bf0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bf00:	4b59      	ldr	r3, [pc, #356]	; (800c068 <HAL_RCC_ClockConfig+0x1bc>)
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	4a58      	ldr	r2, [pc, #352]	; (800c068 <HAL_RCC_ClockConfig+0x1bc>)
 800bf06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bf0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f003 0308 	and.w	r3, r3, #8
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d005      	beq.n	800bf24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bf18:	4b53      	ldr	r3, [pc, #332]	; (800c068 <HAL_RCC_ClockConfig+0x1bc>)
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	4a52      	ldr	r2, [pc, #328]	; (800c068 <HAL_RCC_ClockConfig+0x1bc>)
 800bf1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bf22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bf24:	4b50      	ldr	r3, [pc, #320]	; (800c068 <HAL_RCC_ClockConfig+0x1bc>)
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	494d      	ldr	r1, [pc, #308]	; (800c068 <HAL_RCC_ClockConfig+0x1bc>)
 800bf32:	4313      	orrs	r3, r2
 800bf34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f003 0301 	and.w	r3, r3, #1
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d044      	beq.n	800bfcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d107      	bne.n	800bf5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bf4a:	4b47      	ldr	r3, [pc, #284]	; (800c068 <HAL_RCC_ClockConfig+0x1bc>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d119      	bne.n	800bf8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bf56:	2301      	movs	r3, #1
 800bf58:	e07f      	b.n	800c05a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	d003      	beq.n	800bf6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bf66:	2b03      	cmp	r3, #3
 800bf68:	d107      	bne.n	800bf7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf6a:	4b3f      	ldr	r3, [pc, #252]	; (800c068 <HAL_RCC_ClockConfig+0x1bc>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d109      	bne.n	800bf8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bf76:	2301      	movs	r3, #1
 800bf78:	e06f      	b.n	800c05a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf7a:	4b3b      	ldr	r3, [pc, #236]	; (800c068 <HAL_RCC_ClockConfig+0x1bc>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f003 0302 	and.w	r3, r3, #2
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d101      	bne.n	800bf8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bf86:	2301      	movs	r3, #1
 800bf88:	e067      	b.n	800c05a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bf8a:	4b37      	ldr	r3, [pc, #220]	; (800c068 <HAL_RCC_ClockConfig+0x1bc>)
 800bf8c:	689b      	ldr	r3, [r3, #8]
 800bf8e:	f023 0203 	bic.w	r2, r3, #3
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	4934      	ldr	r1, [pc, #208]	; (800c068 <HAL_RCC_ClockConfig+0x1bc>)
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bf9c:	f7fd fcde 	bl	800995c <HAL_GetTick>
 800bfa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bfa2:	e00a      	b.n	800bfba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bfa4:	f7fd fcda 	bl	800995c <HAL_GetTick>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	1ad3      	subs	r3, r2, r3
 800bfae:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d901      	bls.n	800bfba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bfb6:	2303      	movs	r3, #3
 800bfb8:	e04f      	b.n	800c05a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bfba:	4b2b      	ldr	r3, [pc, #172]	; (800c068 <HAL_RCC_ClockConfig+0x1bc>)
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	f003 020c 	and.w	r2, r3, #12
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d1eb      	bne.n	800bfa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bfcc:	4b25      	ldr	r3, [pc, #148]	; (800c064 <HAL_RCC_ClockConfig+0x1b8>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f003 030f 	and.w	r3, r3, #15
 800bfd4:	683a      	ldr	r2, [r7, #0]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d20c      	bcs.n	800bff4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bfda:	4b22      	ldr	r3, [pc, #136]	; (800c064 <HAL_RCC_ClockConfig+0x1b8>)
 800bfdc:	683a      	ldr	r2, [r7, #0]
 800bfde:	b2d2      	uxtb	r2, r2
 800bfe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bfe2:	4b20      	ldr	r3, [pc, #128]	; (800c064 <HAL_RCC_ClockConfig+0x1b8>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f003 030f 	and.w	r3, r3, #15
 800bfea:	683a      	ldr	r2, [r7, #0]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d001      	beq.n	800bff4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bff0:	2301      	movs	r3, #1
 800bff2:	e032      	b.n	800c05a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f003 0304 	and.w	r3, r3, #4
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d008      	beq.n	800c012 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c000:	4b19      	ldr	r3, [pc, #100]	; (800c068 <HAL_RCC_ClockConfig+0x1bc>)
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	68db      	ldr	r3, [r3, #12]
 800c00c:	4916      	ldr	r1, [pc, #88]	; (800c068 <HAL_RCC_ClockConfig+0x1bc>)
 800c00e:	4313      	orrs	r3, r2
 800c010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f003 0308 	and.w	r3, r3, #8
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d009      	beq.n	800c032 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c01e:	4b12      	ldr	r3, [pc, #72]	; (800c068 <HAL_RCC_ClockConfig+0x1bc>)
 800c020:	689b      	ldr	r3, [r3, #8]
 800c022:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	691b      	ldr	r3, [r3, #16]
 800c02a:	00db      	lsls	r3, r3, #3
 800c02c:	490e      	ldr	r1, [pc, #56]	; (800c068 <HAL_RCC_ClockConfig+0x1bc>)
 800c02e:	4313      	orrs	r3, r2
 800c030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c032:	f000 f821 	bl	800c078 <HAL_RCC_GetSysClockFreq>
 800c036:	4602      	mov	r2, r0
 800c038:	4b0b      	ldr	r3, [pc, #44]	; (800c068 <HAL_RCC_ClockConfig+0x1bc>)
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	091b      	lsrs	r3, r3, #4
 800c03e:	f003 030f 	and.w	r3, r3, #15
 800c042:	490a      	ldr	r1, [pc, #40]	; (800c06c <HAL_RCC_ClockConfig+0x1c0>)
 800c044:	5ccb      	ldrb	r3, [r1, r3]
 800c046:	fa22 f303 	lsr.w	r3, r2, r3
 800c04a:	4a09      	ldr	r2, [pc, #36]	; (800c070 <HAL_RCC_ClockConfig+0x1c4>)
 800c04c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c04e:	4b09      	ldr	r3, [pc, #36]	; (800c074 <HAL_RCC_ClockConfig+0x1c8>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4618      	mov	r0, r3
 800c054:	f7fd fc3e 	bl	80098d4 <HAL_InitTick>

  return HAL_OK;
 800c058:	2300      	movs	r3, #0
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3710      	adds	r7, #16
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	40023c00 	.word	0x40023c00
 800c068:	40023800 	.word	0x40023800
 800c06c:	0801ad0c 	.word	0x0801ad0c
 800c070:	20000000 	.word	0x20000000
 800c074:	20000004 	.word	0x20000004

0800c078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c078:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c07c:	b084      	sub	sp, #16
 800c07e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c080:	2300      	movs	r3, #0
 800c082:	607b      	str	r3, [r7, #4]
 800c084:	2300      	movs	r3, #0
 800c086:	60fb      	str	r3, [r7, #12]
 800c088:	2300      	movs	r3, #0
 800c08a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c08c:	2300      	movs	r3, #0
 800c08e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c090:	4b67      	ldr	r3, [pc, #412]	; (800c230 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	f003 030c 	and.w	r3, r3, #12
 800c098:	2b08      	cmp	r3, #8
 800c09a:	d00d      	beq.n	800c0b8 <HAL_RCC_GetSysClockFreq+0x40>
 800c09c:	2b08      	cmp	r3, #8
 800c09e:	f200 80bd 	bhi.w	800c21c <HAL_RCC_GetSysClockFreq+0x1a4>
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d002      	beq.n	800c0ac <HAL_RCC_GetSysClockFreq+0x34>
 800c0a6:	2b04      	cmp	r3, #4
 800c0a8:	d003      	beq.n	800c0b2 <HAL_RCC_GetSysClockFreq+0x3a>
 800c0aa:	e0b7      	b.n	800c21c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c0ac:	4b61      	ldr	r3, [pc, #388]	; (800c234 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c0ae:	60bb      	str	r3, [r7, #8]
       break;
 800c0b0:	e0b7      	b.n	800c222 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c0b2:	4b60      	ldr	r3, [pc, #384]	; (800c234 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c0b4:	60bb      	str	r3, [r7, #8]
      break;
 800c0b6:	e0b4      	b.n	800c222 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c0b8:	4b5d      	ldr	r3, [pc, #372]	; (800c230 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c0ba:	685b      	ldr	r3, [r3, #4]
 800c0bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c0c2:	4b5b      	ldr	r3, [pc, #364]	; (800c230 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d04d      	beq.n	800c16a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c0ce:	4b58      	ldr	r3, [pc, #352]	; (800c230 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c0d0:	685b      	ldr	r3, [r3, #4]
 800c0d2:	099b      	lsrs	r3, r3, #6
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	f04f 0300 	mov.w	r3, #0
 800c0da:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c0de:	f04f 0100 	mov.w	r1, #0
 800c0e2:	ea02 0800 	and.w	r8, r2, r0
 800c0e6:	ea03 0901 	and.w	r9, r3, r1
 800c0ea:	4640      	mov	r0, r8
 800c0ec:	4649      	mov	r1, r9
 800c0ee:	f04f 0200 	mov.w	r2, #0
 800c0f2:	f04f 0300 	mov.w	r3, #0
 800c0f6:	014b      	lsls	r3, r1, #5
 800c0f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c0fc:	0142      	lsls	r2, r0, #5
 800c0fe:	4610      	mov	r0, r2
 800c100:	4619      	mov	r1, r3
 800c102:	ebb0 0008 	subs.w	r0, r0, r8
 800c106:	eb61 0109 	sbc.w	r1, r1, r9
 800c10a:	f04f 0200 	mov.w	r2, #0
 800c10e:	f04f 0300 	mov.w	r3, #0
 800c112:	018b      	lsls	r3, r1, #6
 800c114:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c118:	0182      	lsls	r2, r0, #6
 800c11a:	1a12      	subs	r2, r2, r0
 800c11c:	eb63 0301 	sbc.w	r3, r3, r1
 800c120:	f04f 0000 	mov.w	r0, #0
 800c124:	f04f 0100 	mov.w	r1, #0
 800c128:	00d9      	lsls	r1, r3, #3
 800c12a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c12e:	00d0      	lsls	r0, r2, #3
 800c130:	4602      	mov	r2, r0
 800c132:	460b      	mov	r3, r1
 800c134:	eb12 0208 	adds.w	r2, r2, r8
 800c138:	eb43 0309 	adc.w	r3, r3, r9
 800c13c:	f04f 0000 	mov.w	r0, #0
 800c140:	f04f 0100 	mov.w	r1, #0
 800c144:	0299      	lsls	r1, r3, #10
 800c146:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c14a:	0290      	lsls	r0, r2, #10
 800c14c:	4602      	mov	r2, r0
 800c14e:	460b      	mov	r3, r1
 800c150:	4610      	mov	r0, r2
 800c152:	4619      	mov	r1, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	461a      	mov	r2, r3
 800c158:	f04f 0300 	mov.w	r3, #0
 800c15c:	f7f4 fdac 	bl	8000cb8 <__aeabi_uldivmod>
 800c160:	4602      	mov	r2, r0
 800c162:	460b      	mov	r3, r1
 800c164:	4613      	mov	r3, r2
 800c166:	60fb      	str	r3, [r7, #12]
 800c168:	e04a      	b.n	800c200 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c16a:	4b31      	ldr	r3, [pc, #196]	; (800c230 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	099b      	lsrs	r3, r3, #6
 800c170:	461a      	mov	r2, r3
 800c172:	f04f 0300 	mov.w	r3, #0
 800c176:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c17a:	f04f 0100 	mov.w	r1, #0
 800c17e:	ea02 0400 	and.w	r4, r2, r0
 800c182:	ea03 0501 	and.w	r5, r3, r1
 800c186:	4620      	mov	r0, r4
 800c188:	4629      	mov	r1, r5
 800c18a:	f04f 0200 	mov.w	r2, #0
 800c18e:	f04f 0300 	mov.w	r3, #0
 800c192:	014b      	lsls	r3, r1, #5
 800c194:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c198:	0142      	lsls	r2, r0, #5
 800c19a:	4610      	mov	r0, r2
 800c19c:	4619      	mov	r1, r3
 800c19e:	1b00      	subs	r0, r0, r4
 800c1a0:	eb61 0105 	sbc.w	r1, r1, r5
 800c1a4:	f04f 0200 	mov.w	r2, #0
 800c1a8:	f04f 0300 	mov.w	r3, #0
 800c1ac:	018b      	lsls	r3, r1, #6
 800c1ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c1b2:	0182      	lsls	r2, r0, #6
 800c1b4:	1a12      	subs	r2, r2, r0
 800c1b6:	eb63 0301 	sbc.w	r3, r3, r1
 800c1ba:	f04f 0000 	mov.w	r0, #0
 800c1be:	f04f 0100 	mov.w	r1, #0
 800c1c2:	00d9      	lsls	r1, r3, #3
 800c1c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c1c8:	00d0      	lsls	r0, r2, #3
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	1912      	adds	r2, r2, r4
 800c1d0:	eb45 0303 	adc.w	r3, r5, r3
 800c1d4:	f04f 0000 	mov.w	r0, #0
 800c1d8:	f04f 0100 	mov.w	r1, #0
 800c1dc:	0299      	lsls	r1, r3, #10
 800c1de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c1e2:	0290      	lsls	r0, r2, #10
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	460b      	mov	r3, r1
 800c1e8:	4610      	mov	r0, r2
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	f04f 0300 	mov.w	r3, #0
 800c1f4:	f7f4 fd60 	bl	8000cb8 <__aeabi_uldivmod>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	460b      	mov	r3, r1
 800c1fc:	4613      	mov	r3, r2
 800c1fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c200:	4b0b      	ldr	r3, [pc, #44]	; (800c230 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	0c1b      	lsrs	r3, r3, #16
 800c206:	f003 0303 	and.w	r3, r3, #3
 800c20a:	3301      	adds	r3, #1
 800c20c:	005b      	lsls	r3, r3, #1
 800c20e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c210:	68fa      	ldr	r2, [r7, #12]
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	fbb2 f3f3 	udiv	r3, r2, r3
 800c218:	60bb      	str	r3, [r7, #8]
      break;
 800c21a:	e002      	b.n	800c222 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c21c:	4b05      	ldr	r3, [pc, #20]	; (800c234 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c21e:	60bb      	str	r3, [r7, #8]
      break;
 800c220:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c222:	68bb      	ldr	r3, [r7, #8]
}
 800c224:	4618      	mov	r0, r3
 800c226:	3710      	adds	r7, #16
 800c228:	46bd      	mov	sp, r7
 800c22a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c22e:	bf00      	nop
 800c230:	40023800 	.word	0x40023800
 800c234:	00f42400 	.word	0x00f42400

0800c238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c238:	b480      	push	{r7}
 800c23a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c23c:	4b03      	ldr	r3, [pc, #12]	; (800c24c <HAL_RCC_GetHCLKFreq+0x14>)
 800c23e:	681b      	ldr	r3, [r3, #0]
}
 800c240:	4618      	mov	r0, r3
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr
 800c24a:	bf00      	nop
 800c24c:	20000000 	.word	0x20000000

0800c250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c254:	f7ff fff0 	bl	800c238 <HAL_RCC_GetHCLKFreq>
 800c258:	4602      	mov	r2, r0
 800c25a:	4b05      	ldr	r3, [pc, #20]	; (800c270 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c25c:	689b      	ldr	r3, [r3, #8]
 800c25e:	0a9b      	lsrs	r3, r3, #10
 800c260:	f003 0307 	and.w	r3, r3, #7
 800c264:	4903      	ldr	r1, [pc, #12]	; (800c274 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c266:	5ccb      	ldrb	r3, [r1, r3]
 800c268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c26c:	4618      	mov	r0, r3
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	40023800 	.word	0x40023800
 800c274:	0801ad1c 	.word	0x0801ad1c

0800c278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c27c:	f7ff ffdc 	bl	800c238 <HAL_RCC_GetHCLKFreq>
 800c280:	4602      	mov	r2, r0
 800c282:	4b05      	ldr	r3, [pc, #20]	; (800c298 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c284:	689b      	ldr	r3, [r3, #8]
 800c286:	0b5b      	lsrs	r3, r3, #13
 800c288:	f003 0307 	and.w	r3, r3, #7
 800c28c:	4903      	ldr	r1, [pc, #12]	; (800c29c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c28e:	5ccb      	ldrb	r3, [r1, r3]
 800c290:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c294:	4618      	mov	r0, r3
 800c296:	bd80      	pop	{r7, pc}
 800c298:	40023800 	.word	0x40023800
 800c29c:	0801ad1c 	.word	0x0801ad1c

0800c2a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b088      	sub	sp, #32
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d00a      	beq.n	800c2de <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c2c8:	4b66      	ldr	r3, [pc, #408]	; (800c464 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c2ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2ce:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2d6:	4963      	ldr	r1, [pc, #396]	; (800c464 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d00a      	beq.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c2ea:	4b5e      	ldr	r3, [pc, #376]	; (800c464 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c2ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2f0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2f8:	495a      	ldr	r1, [pc, #360]	; (800c464 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f003 0301 	and.w	r3, r3, #1
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d10b      	bne.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c314:	2b00      	cmp	r3, #0
 800c316:	d105      	bne.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c320:	2b00      	cmp	r3, #0
 800c322:	d075      	beq.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c324:	4b50      	ldr	r3, [pc, #320]	; (800c468 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c326:	2200      	movs	r2, #0
 800c328:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c32a:	f7fd fb17 	bl	800995c <HAL_GetTick>
 800c32e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c330:	e008      	b.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c332:	f7fd fb13 	bl	800995c <HAL_GetTick>
 800c336:	4602      	mov	r2, r0
 800c338:	69fb      	ldr	r3, [r7, #28]
 800c33a:	1ad3      	subs	r3, r2, r3
 800c33c:	2b02      	cmp	r3, #2
 800c33e:	d901      	bls.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c340:	2303      	movs	r3, #3
 800c342:	e1dc      	b.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c344:	4b47      	ldr	r3, [pc, #284]	; (800c464 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d1f0      	bne.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f003 0301 	and.w	r3, r3, #1
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d009      	beq.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	019a      	lsls	r2, r3, #6
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	689b      	ldr	r3, [r3, #8]
 800c366:	071b      	lsls	r3, r3, #28
 800c368:	493e      	ldr	r1, [pc, #248]	; (800c464 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c36a:	4313      	orrs	r3, r2
 800c36c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f003 0302 	and.w	r3, r3, #2
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d01f      	beq.n	800c3bc <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c37c:	4b39      	ldr	r3, [pc, #228]	; (800c464 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c37e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c382:	0f1b      	lsrs	r3, r3, #28
 800c384:	f003 0307 	and.w	r3, r3, #7
 800c388:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	019a      	lsls	r2, r3, #6
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	68db      	ldr	r3, [r3, #12]
 800c394:	061b      	lsls	r3, r3, #24
 800c396:	431a      	orrs	r2, r3
 800c398:	69bb      	ldr	r3, [r7, #24]
 800c39a:	071b      	lsls	r3, r3, #28
 800c39c:	4931      	ldr	r1, [pc, #196]	; (800c464 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c3a4:	4b2f      	ldr	r3, [pc, #188]	; (800c464 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c3a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3aa:	f023 021f 	bic.w	r2, r3, #31
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6a1b      	ldr	r3, [r3, #32]
 800c3b2:	3b01      	subs	r3, #1
 800c3b4:	492b      	ldr	r1, [pc, #172]	; (800c464 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d00d      	beq.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	019a      	lsls	r2, r3, #6
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	68db      	ldr	r3, [r3, #12]
 800c3d2:	061b      	lsls	r3, r3, #24
 800c3d4:	431a      	orrs	r2, r3
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	689b      	ldr	r3, [r3, #8]
 800c3da:	071b      	lsls	r3, r3, #28
 800c3dc:	4921      	ldr	r1, [pc, #132]	; (800c464 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c3e4:	4b20      	ldr	r3, [pc, #128]	; (800c468 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c3ea:	f7fd fab7 	bl	800995c <HAL_GetTick>
 800c3ee:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c3f0:	e008      	b.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c3f2:	f7fd fab3 	bl	800995c <HAL_GetTick>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	1ad3      	subs	r3, r2, r3
 800c3fc:	2b02      	cmp	r3, #2
 800c3fe:	d901      	bls.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c400:	2303      	movs	r3, #3
 800c402:	e17c      	b.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c404:	4b17      	ldr	r3, [pc, #92]	; (800c464 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d0f0      	beq.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f003 0304 	and.w	r3, r3, #4
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d112      	bne.n	800c442 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c424:	2b00      	cmp	r3, #0
 800c426:	d10c      	bne.n	800c442 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c430:	2b00      	cmp	r3, #0
 800c432:	f000 80ce 	beq.w	800c5d2 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c43a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c43e:	f040 80c8 	bne.w	800c5d2 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c442:	4b0a      	ldr	r3, [pc, #40]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c444:	2200      	movs	r2, #0
 800c446:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c448:	f7fd fa88 	bl	800995c <HAL_GetTick>
 800c44c:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c44e:	e00f      	b.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c450:	f7fd fa84 	bl	800995c <HAL_GetTick>
 800c454:	4602      	mov	r2, r0
 800c456:	69fb      	ldr	r3, [r7, #28]
 800c458:	1ad3      	subs	r3, r2, r3
 800c45a:	2b02      	cmp	r3, #2
 800c45c:	d908      	bls.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c45e:	2303      	movs	r3, #3
 800c460:	e14d      	b.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c462:	bf00      	nop
 800c464:	40023800 	.word	0x40023800
 800c468:	42470068 	.word	0x42470068
 800c46c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c470:	4ba5      	ldr	r3, [pc, #660]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c47c:	d0e8      	beq.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f003 0304 	and.w	r3, r3, #4
 800c486:	2b00      	cmp	r3, #0
 800c488:	d02e      	beq.n	800c4e8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c48a:	4b9f      	ldr	r3, [pc, #636]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c48c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c490:	0c1b      	lsrs	r3, r3, #16
 800c492:	f003 0303 	and.w	r3, r3, #3
 800c496:	3301      	adds	r3, #1
 800c498:	005b      	lsls	r3, r3, #1
 800c49a:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c49c:	4b9a      	ldr	r3, [pc, #616]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c49e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4a2:	0f1b      	lsrs	r3, r3, #28
 800c4a4:	f003 0307 	and.w	r3, r3, #7
 800c4a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	691b      	ldr	r3, [r3, #16]
 800c4ae:	019a      	lsls	r2, r3, #6
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	085b      	lsrs	r3, r3, #1
 800c4b4:	3b01      	subs	r3, #1
 800c4b6:	041b      	lsls	r3, r3, #16
 800c4b8:	431a      	orrs	r2, r3
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	699b      	ldr	r3, [r3, #24]
 800c4be:	061b      	lsls	r3, r3, #24
 800c4c0:	431a      	orrs	r2, r3
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	071b      	lsls	r3, r3, #28
 800c4c6:	4990      	ldr	r1, [pc, #576]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4c8:	4313      	orrs	r3, r2
 800c4ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c4ce:	4b8e      	ldr	r3, [pc, #568]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4dc:	3b01      	subs	r3, #1
 800c4de:	021b      	lsls	r3, r3, #8
 800c4e0:	4989      	ldr	r1, [pc, #548]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f003 0308 	and.w	r3, r3, #8
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d02c      	beq.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c4f4:	4b84      	ldr	r3, [pc, #528]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4fa:	0c1b      	lsrs	r3, r3, #16
 800c4fc:	f003 0303 	and.w	r3, r3, #3
 800c500:	3301      	adds	r3, #1
 800c502:	005b      	lsls	r3, r3, #1
 800c504:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c506:	4b80      	ldr	r3, [pc, #512]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c50c:	0e1b      	lsrs	r3, r3, #24
 800c50e:	f003 030f 	and.w	r3, r3, #15
 800c512:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	691b      	ldr	r3, [r3, #16]
 800c518:	019a      	lsls	r2, r3, #6
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	085b      	lsrs	r3, r3, #1
 800c51e:	3b01      	subs	r3, #1
 800c520:	041b      	lsls	r3, r3, #16
 800c522:	431a      	orrs	r2, r3
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	061b      	lsls	r3, r3, #24
 800c528:	431a      	orrs	r2, r3
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	69db      	ldr	r3, [r3, #28]
 800c52e:	071b      	lsls	r3, r3, #28
 800c530:	4975      	ldr	r1, [pc, #468]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c532:	4313      	orrs	r3, r2
 800c534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c538:	4b73      	ldr	r3, [pc, #460]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c53a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c53e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c546:	4970      	ldr	r1, [pc, #448]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c548:	4313      	orrs	r3, r2
 800c54a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c556:	2b00      	cmp	r3, #0
 800c558:	d024      	beq.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c55e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c562:	d11f      	bne.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c564:	4b68      	ldr	r3, [pc, #416]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c56a:	0e1b      	lsrs	r3, r3, #24
 800c56c:	f003 030f 	and.w	r3, r3, #15
 800c570:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c572:	4b65      	ldr	r3, [pc, #404]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c578:	0f1b      	lsrs	r3, r3, #28
 800c57a:	f003 0307 	and.w	r3, r3, #7
 800c57e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	691b      	ldr	r3, [r3, #16]
 800c584:	019a      	lsls	r2, r3, #6
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	695b      	ldr	r3, [r3, #20]
 800c58a:	085b      	lsrs	r3, r3, #1
 800c58c:	3b01      	subs	r3, #1
 800c58e:	041b      	lsls	r3, r3, #16
 800c590:	431a      	orrs	r2, r3
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	061b      	lsls	r3, r3, #24
 800c596:	431a      	orrs	r2, r3
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	071b      	lsls	r3, r3, #28
 800c59c:	495a      	ldr	r1, [pc, #360]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c5a4:	4b59      	ldr	r3, [pc, #356]	; (800c70c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c5aa:	f7fd f9d7 	bl	800995c <HAL_GetTick>
 800c5ae:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c5b0:	e008      	b.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c5b2:	f7fd f9d3 	bl	800995c <HAL_GetTick>
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	1ad3      	subs	r3, r2, r3
 800c5bc:	2b02      	cmp	r3, #2
 800c5be:	d901      	bls.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c5c0:	2303      	movs	r3, #3
 800c5c2:	e09c      	b.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c5c4:	4b50      	ldr	r3, [pc, #320]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5d0:	d1ef      	bne.n	800c5b2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f003 0320 	and.w	r3, r3, #32
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	f000 8083 	beq.w	800c6e6 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	60bb      	str	r3, [r7, #8]
 800c5e4:	4b48      	ldr	r3, [pc, #288]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5e8:	4a47      	ldr	r2, [pc, #284]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c5ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5ee:	6413      	str	r3, [r2, #64]	; 0x40
 800c5f0:	4b45      	ldr	r3, [pc, #276]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c5f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5f8:	60bb      	str	r3, [r7, #8]
 800c5fa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c5fc:	4b44      	ldr	r3, [pc, #272]	; (800c710 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4a43      	ldr	r2, [pc, #268]	; (800c710 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c606:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c608:	f7fd f9a8 	bl	800995c <HAL_GetTick>
 800c60c:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c60e:	e008      	b.n	800c622 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c610:	f7fd f9a4 	bl	800995c <HAL_GetTick>
 800c614:	4602      	mov	r2, r0
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	1ad3      	subs	r3, r2, r3
 800c61a:	2b02      	cmp	r3, #2
 800c61c:	d901      	bls.n	800c622 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c61e:	2303      	movs	r3, #3
 800c620:	e06d      	b.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c622:	4b3b      	ldr	r3, [pc, #236]	; (800c710 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d0f0      	beq.n	800c610 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c62e:	4b36      	ldr	r3, [pc, #216]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c636:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d02f      	beq.n	800c69e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c646:	69ba      	ldr	r2, [r7, #24]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d028      	beq.n	800c69e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c64c:	4b2e      	ldr	r3, [pc, #184]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c64e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c654:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c656:	4b2f      	ldr	r3, [pc, #188]	; (800c714 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c658:	2201      	movs	r2, #1
 800c65a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c65c:	4b2d      	ldr	r3, [pc, #180]	; (800c714 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c65e:	2200      	movs	r2, #0
 800c660:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c662:	4a29      	ldr	r2, [pc, #164]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c664:	69bb      	ldr	r3, [r7, #24]
 800c666:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c668:	4b27      	ldr	r3, [pc, #156]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c66a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c66c:	f003 0301 	and.w	r3, r3, #1
 800c670:	2b01      	cmp	r3, #1
 800c672:	d114      	bne.n	800c69e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c674:	f7fd f972 	bl	800995c <HAL_GetTick>
 800c678:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c67a:	e00a      	b.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c67c:	f7fd f96e 	bl	800995c <HAL_GetTick>
 800c680:	4602      	mov	r2, r0
 800c682:	69fb      	ldr	r3, [r7, #28]
 800c684:	1ad3      	subs	r3, r2, r3
 800c686:	f241 3288 	movw	r2, #5000	; 0x1388
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d901      	bls.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800c68e:	2303      	movs	r3, #3
 800c690:	e035      	b.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c692:	4b1d      	ldr	r3, [pc, #116]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c696:	f003 0302 	and.w	r3, r3, #2
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d0ee      	beq.n	800c67c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6aa:	d10d      	bne.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800c6ac:	4b16      	ldr	r3, [pc, #88]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c6bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6c0:	4911      	ldr	r1, [pc, #68]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	608b      	str	r3, [r1, #8]
 800c6c6:	e005      	b.n	800c6d4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800c6c8:	4b0f      	ldr	r3, [pc, #60]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6ca:	689b      	ldr	r3, [r3, #8]
 800c6cc:	4a0e      	ldr	r2, [pc, #56]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c6d2:	6093      	str	r3, [r2, #8]
 800c6d4:	4b0c      	ldr	r3, [pc, #48]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c6e0:	4909      	ldr	r1, [pc, #36]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f003 0310 	and.w	r3, r3, #16
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d004      	beq.n	800c6fc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c6f8:	4b07      	ldr	r3, [pc, #28]	; (800c718 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800c6fa:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c6fc:	2300      	movs	r3, #0
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3720      	adds	r7, #32
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	40023800 	.word	0x40023800
 800c70c:	42470070 	.word	0x42470070
 800c710:	40007000 	.word	0x40007000
 800c714:	42470e40 	.word	0x42470e40
 800c718:	424711e0 	.word	0x424711e0

0800c71c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b086      	sub	sp, #24
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c724:	2300      	movs	r3, #0
 800c726:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f003 0301 	and.w	r3, r3, #1
 800c730:	2b00      	cmp	r3, #0
 800c732:	d075      	beq.n	800c820 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c734:	4ba2      	ldr	r3, [pc, #648]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c736:	689b      	ldr	r3, [r3, #8]
 800c738:	f003 030c 	and.w	r3, r3, #12
 800c73c:	2b04      	cmp	r3, #4
 800c73e:	d00c      	beq.n	800c75a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c740:	4b9f      	ldr	r3, [pc, #636]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c742:	689b      	ldr	r3, [r3, #8]
 800c744:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c748:	2b08      	cmp	r3, #8
 800c74a:	d112      	bne.n	800c772 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c74c:	4b9c      	ldr	r3, [pc, #624]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c754:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c758:	d10b      	bne.n	800c772 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c75a:	4b99      	ldr	r3, [pc, #612]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c762:	2b00      	cmp	r3, #0
 800c764:	d05b      	beq.n	800c81e <HAL_RCC_OscConfig+0x102>
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d157      	bne.n	800c81e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800c76e:	2301      	movs	r3, #1
 800c770:	e20b      	b.n	800cb8a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c77a:	d106      	bne.n	800c78a <HAL_RCC_OscConfig+0x6e>
 800c77c:	4b90      	ldr	r3, [pc, #576]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a8f      	ldr	r2, [pc, #572]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c786:	6013      	str	r3, [r2, #0]
 800c788:	e01d      	b.n	800c7c6 <HAL_RCC_OscConfig+0xaa>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c792:	d10c      	bne.n	800c7ae <HAL_RCC_OscConfig+0x92>
 800c794:	4b8a      	ldr	r3, [pc, #552]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a89      	ldr	r2, [pc, #548]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c79a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c79e:	6013      	str	r3, [r2, #0]
 800c7a0:	4b87      	ldr	r3, [pc, #540]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4a86      	ldr	r2, [pc, #536]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c7a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c7aa:	6013      	str	r3, [r2, #0]
 800c7ac:	e00b      	b.n	800c7c6 <HAL_RCC_OscConfig+0xaa>
 800c7ae:	4b84      	ldr	r3, [pc, #528]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	4a83      	ldr	r2, [pc, #524]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c7b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c7b8:	6013      	str	r3, [r2, #0]
 800c7ba:	4b81      	ldr	r3, [pc, #516]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a80      	ldr	r2, [pc, #512]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c7c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c7c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d013      	beq.n	800c7f6 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7ce:	f7fd f8c5 	bl	800995c <HAL_GetTick>
 800c7d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c7d4:	e008      	b.n	800c7e8 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c7d6:	f7fd f8c1 	bl	800995c <HAL_GetTick>
 800c7da:	4602      	mov	r2, r0
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	1ad3      	subs	r3, r2, r3
 800c7e0:	2b64      	cmp	r3, #100	; 0x64
 800c7e2:	d901      	bls.n	800c7e8 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800c7e4:	2303      	movs	r3, #3
 800c7e6:	e1d0      	b.n	800cb8a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c7e8:	4b75      	ldr	r3, [pc, #468]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d0f0      	beq.n	800c7d6 <HAL_RCC_OscConfig+0xba>
 800c7f4:	e014      	b.n	800c820 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7f6:	f7fd f8b1 	bl	800995c <HAL_GetTick>
 800c7fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c7fc:	e008      	b.n	800c810 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c7fe:	f7fd f8ad 	bl	800995c <HAL_GetTick>
 800c802:	4602      	mov	r2, r0
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	1ad3      	subs	r3, r2, r3
 800c808:	2b64      	cmp	r3, #100	; 0x64
 800c80a:	d901      	bls.n	800c810 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800c80c:	2303      	movs	r3, #3
 800c80e:	e1bc      	b.n	800cb8a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c810:	4b6b      	ldr	r3, [pc, #428]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d1f0      	bne.n	800c7fe <HAL_RCC_OscConfig+0xe2>
 800c81c:	e000      	b.n	800c820 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c81e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f003 0302 	and.w	r3, r3, #2
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d063      	beq.n	800c8f4 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c82c:	4b64      	ldr	r3, [pc, #400]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c82e:	689b      	ldr	r3, [r3, #8]
 800c830:	f003 030c 	and.w	r3, r3, #12
 800c834:	2b00      	cmp	r3, #0
 800c836:	d00b      	beq.n	800c850 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c838:	4b61      	ldr	r3, [pc, #388]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c83a:	689b      	ldr	r3, [r3, #8]
 800c83c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c840:	2b08      	cmp	r3, #8
 800c842:	d11c      	bne.n	800c87e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c844:	4b5e      	ldr	r3, [pc, #376]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d116      	bne.n	800c87e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c850:	4b5b      	ldr	r3, [pc, #364]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f003 0302 	and.w	r3, r3, #2
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d005      	beq.n	800c868 <HAL_RCC_OscConfig+0x14c>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	68db      	ldr	r3, [r3, #12]
 800c860:	2b01      	cmp	r3, #1
 800c862:	d001      	beq.n	800c868 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800c864:	2301      	movs	r3, #1
 800c866:	e190      	b.n	800cb8a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c868:	4b55      	ldr	r3, [pc, #340]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	691b      	ldr	r3, [r3, #16]
 800c874:	00db      	lsls	r3, r3, #3
 800c876:	4952      	ldr	r1, [pc, #328]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c878:	4313      	orrs	r3, r2
 800c87a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c87c:	e03a      	b.n	800c8f4 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	68db      	ldr	r3, [r3, #12]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d020      	beq.n	800c8c8 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c886:	4b4f      	ldr	r3, [pc, #316]	; (800c9c4 <HAL_RCC_OscConfig+0x2a8>)
 800c888:	2201      	movs	r2, #1
 800c88a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c88c:	f7fd f866 	bl	800995c <HAL_GetTick>
 800c890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c892:	e008      	b.n	800c8a6 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c894:	f7fd f862 	bl	800995c <HAL_GetTick>
 800c898:	4602      	mov	r2, r0
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	1ad3      	subs	r3, r2, r3
 800c89e:	2b02      	cmp	r3, #2
 800c8a0:	d901      	bls.n	800c8a6 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800c8a2:	2303      	movs	r3, #3
 800c8a4:	e171      	b.n	800cb8a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c8a6:	4b46      	ldr	r3, [pc, #280]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f003 0302 	and.w	r3, r3, #2
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d0f0      	beq.n	800c894 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c8b2:	4b43      	ldr	r3, [pc, #268]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	691b      	ldr	r3, [r3, #16]
 800c8be:	00db      	lsls	r3, r3, #3
 800c8c0:	493f      	ldr	r1, [pc, #252]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c8c2:	4313      	orrs	r3, r2
 800c8c4:	600b      	str	r3, [r1, #0]
 800c8c6:	e015      	b.n	800c8f4 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c8c8:	4b3e      	ldr	r3, [pc, #248]	; (800c9c4 <HAL_RCC_OscConfig+0x2a8>)
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8ce:	f7fd f845 	bl	800995c <HAL_GetTick>
 800c8d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c8d4:	e008      	b.n	800c8e8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c8d6:	f7fd f841 	bl	800995c <HAL_GetTick>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	1ad3      	subs	r3, r2, r3
 800c8e0:	2b02      	cmp	r3, #2
 800c8e2:	d901      	bls.n	800c8e8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c8e4:	2303      	movs	r3, #3
 800c8e6:	e150      	b.n	800cb8a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c8e8:	4b35      	ldr	r3, [pc, #212]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f003 0302 	and.w	r3, r3, #2
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d1f0      	bne.n	800c8d6 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f003 0308 	and.w	r3, r3, #8
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d030      	beq.n	800c962 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	695b      	ldr	r3, [r3, #20]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d016      	beq.n	800c936 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c908:	4b2f      	ldr	r3, [pc, #188]	; (800c9c8 <HAL_RCC_OscConfig+0x2ac>)
 800c90a:	2201      	movs	r2, #1
 800c90c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c90e:	f7fd f825 	bl	800995c <HAL_GetTick>
 800c912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c914:	e008      	b.n	800c928 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c916:	f7fd f821 	bl	800995c <HAL_GetTick>
 800c91a:	4602      	mov	r2, r0
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	1ad3      	subs	r3, r2, r3
 800c920:	2b02      	cmp	r3, #2
 800c922:	d901      	bls.n	800c928 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800c924:	2303      	movs	r3, #3
 800c926:	e130      	b.n	800cb8a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c928:	4b25      	ldr	r3, [pc, #148]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c92a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c92c:	f003 0302 	and.w	r3, r3, #2
 800c930:	2b00      	cmp	r3, #0
 800c932:	d0f0      	beq.n	800c916 <HAL_RCC_OscConfig+0x1fa>
 800c934:	e015      	b.n	800c962 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c936:	4b24      	ldr	r3, [pc, #144]	; (800c9c8 <HAL_RCC_OscConfig+0x2ac>)
 800c938:	2200      	movs	r2, #0
 800c93a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c93c:	f7fd f80e 	bl	800995c <HAL_GetTick>
 800c940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c942:	e008      	b.n	800c956 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c944:	f7fd f80a 	bl	800995c <HAL_GetTick>
 800c948:	4602      	mov	r2, r0
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	1ad3      	subs	r3, r2, r3
 800c94e:	2b02      	cmp	r3, #2
 800c950:	d901      	bls.n	800c956 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800c952:	2303      	movs	r3, #3
 800c954:	e119      	b.n	800cb8a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c956:	4b1a      	ldr	r3, [pc, #104]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c95a:	f003 0302 	and.w	r3, r3, #2
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d1f0      	bne.n	800c944 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f003 0304 	and.w	r3, r3, #4
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f000 809f 	beq.w	800caae <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c970:	2300      	movs	r3, #0
 800c972:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c974:	4b12      	ldr	r3, [pc, #72]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d10f      	bne.n	800c9a0 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c980:	2300      	movs	r3, #0
 800c982:	60fb      	str	r3, [r7, #12]
 800c984:	4b0e      	ldr	r3, [pc, #56]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c988:	4a0d      	ldr	r2, [pc, #52]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c98a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c98e:	6413      	str	r3, [r2, #64]	; 0x40
 800c990:	4b0b      	ldr	r3, [pc, #44]	; (800c9c0 <HAL_RCC_OscConfig+0x2a4>)
 800c992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c998:	60fb      	str	r3, [r7, #12]
 800c99a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c99c:	2301      	movs	r3, #1
 800c99e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c9a0:	4b0a      	ldr	r3, [pc, #40]	; (800c9cc <HAL_RCC_OscConfig+0x2b0>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d120      	bne.n	800c9ee <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c9ac:	4b07      	ldr	r3, [pc, #28]	; (800c9cc <HAL_RCC_OscConfig+0x2b0>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a06      	ldr	r2, [pc, #24]	; (800c9cc <HAL_RCC_OscConfig+0x2b0>)
 800c9b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c9b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c9b8:	f7fc ffd0 	bl	800995c <HAL_GetTick>
 800c9bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c9be:	e010      	b.n	800c9e2 <HAL_RCC_OscConfig+0x2c6>
 800c9c0:	40023800 	.word	0x40023800
 800c9c4:	42470000 	.word	0x42470000
 800c9c8:	42470e80 	.word	0x42470e80
 800c9cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c9d0:	f7fc ffc4 	bl	800995c <HAL_GetTick>
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	1ad3      	subs	r3, r2, r3
 800c9da:	2b02      	cmp	r3, #2
 800c9dc:	d901      	bls.n	800c9e2 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800c9de:	2303      	movs	r3, #3
 800c9e0:	e0d3      	b.n	800cb8a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c9e2:	4b6c      	ldr	r3, [pc, #432]	; (800cb94 <HAL_RCC_OscConfig+0x478>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d0f0      	beq.n	800c9d0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	689b      	ldr	r3, [r3, #8]
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	d106      	bne.n	800ca04 <HAL_RCC_OscConfig+0x2e8>
 800c9f6:	4b68      	ldr	r3, [pc, #416]	; (800cb98 <HAL_RCC_OscConfig+0x47c>)
 800c9f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9fa:	4a67      	ldr	r2, [pc, #412]	; (800cb98 <HAL_RCC_OscConfig+0x47c>)
 800c9fc:	f043 0301 	orr.w	r3, r3, #1
 800ca00:	6713      	str	r3, [r2, #112]	; 0x70
 800ca02:	e01c      	b.n	800ca3e <HAL_RCC_OscConfig+0x322>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	2b05      	cmp	r3, #5
 800ca0a:	d10c      	bne.n	800ca26 <HAL_RCC_OscConfig+0x30a>
 800ca0c:	4b62      	ldr	r3, [pc, #392]	; (800cb98 <HAL_RCC_OscConfig+0x47c>)
 800ca0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca10:	4a61      	ldr	r2, [pc, #388]	; (800cb98 <HAL_RCC_OscConfig+0x47c>)
 800ca12:	f043 0304 	orr.w	r3, r3, #4
 800ca16:	6713      	str	r3, [r2, #112]	; 0x70
 800ca18:	4b5f      	ldr	r3, [pc, #380]	; (800cb98 <HAL_RCC_OscConfig+0x47c>)
 800ca1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca1c:	4a5e      	ldr	r2, [pc, #376]	; (800cb98 <HAL_RCC_OscConfig+0x47c>)
 800ca1e:	f043 0301 	orr.w	r3, r3, #1
 800ca22:	6713      	str	r3, [r2, #112]	; 0x70
 800ca24:	e00b      	b.n	800ca3e <HAL_RCC_OscConfig+0x322>
 800ca26:	4b5c      	ldr	r3, [pc, #368]	; (800cb98 <HAL_RCC_OscConfig+0x47c>)
 800ca28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca2a:	4a5b      	ldr	r2, [pc, #364]	; (800cb98 <HAL_RCC_OscConfig+0x47c>)
 800ca2c:	f023 0301 	bic.w	r3, r3, #1
 800ca30:	6713      	str	r3, [r2, #112]	; 0x70
 800ca32:	4b59      	ldr	r3, [pc, #356]	; (800cb98 <HAL_RCC_OscConfig+0x47c>)
 800ca34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca36:	4a58      	ldr	r2, [pc, #352]	; (800cb98 <HAL_RCC_OscConfig+0x47c>)
 800ca38:	f023 0304 	bic.w	r3, r3, #4
 800ca3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	689b      	ldr	r3, [r3, #8]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d015      	beq.n	800ca72 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca46:	f7fc ff89 	bl	800995c <HAL_GetTick>
 800ca4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca4c:	e00a      	b.n	800ca64 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ca4e:	f7fc ff85 	bl	800995c <HAL_GetTick>
 800ca52:	4602      	mov	r2, r0
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	1ad3      	subs	r3, r2, r3
 800ca58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d901      	bls.n	800ca64 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800ca60:	2303      	movs	r3, #3
 800ca62:	e092      	b.n	800cb8a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca64:	4b4c      	ldr	r3, [pc, #304]	; (800cb98 <HAL_RCC_OscConfig+0x47c>)
 800ca66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca68:	f003 0302 	and.w	r3, r3, #2
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d0ee      	beq.n	800ca4e <HAL_RCC_OscConfig+0x332>
 800ca70:	e014      	b.n	800ca9c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca72:	f7fc ff73 	bl	800995c <HAL_GetTick>
 800ca76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ca78:	e00a      	b.n	800ca90 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ca7a:	f7fc ff6f 	bl	800995c <HAL_GetTick>
 800ca7e:	4602      	mov	r2, r0
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	1ad3      	subs	r3, r2, r3
 800ca84:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d901      	bls.n	800ca90 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800ca8c:	2303      	movs	r3, #3
 800ca8e:	e07c      	b.n	800cb8a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ca90:	4b41      	ldr	r3, [pc, #260]	; (800cb98 <HAL_RCC_OscConfig+0x47c>)
 800ca92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca94:	f003 0302 	and.w	r3, r3, #2
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d1ee      	bne.n	800ca7a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ca9c:	7dfb      	ldrb	r3, [r7, #23]
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d105      	bne.n	800caae <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800caa2:	4b3d      	ldr	r3, [pc, #244]	; (800cb98 <HAL_RCC_OscConfig+0x47c>)
 800caa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caa6:	4a3c      	ldr	r2, [pc, #240]	; (800cb98 <HAL_RCC_OscConfig+0x47c>)
 800caa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800caac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	699b      	ldr	r3, [r3, #24]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d068      	beq.n	800cb88 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cab6:	4b38      	ldr	r3, [pc, #224]	; (800cb98 <HAL_RCC_OscConfig+0x47c>)
 800cab8:	689b      	ldr	r3, [r3, #8]
 800caba:	f003 030c 	and.w	r3, r3, #12
 800cabe:	2b08      	cmp	r3, #8
 800cac0:	d060      	beq.n	800cb84 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	699b      	ldr	r3, [r3, #24]
 800cac6:	2b02      	cmp	r3, #2
 800cac8:	d145      	bne.n	800cb56 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800caca:	4b34      	ldr	r3, [pc, #208]	; (800cb9c <HAL_RCC_OscConfig+0x480>)
 800cacc:	2200      	movs	r2, #0
 800cace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cad0:	f7fc ff44 	bl	800995c <HAL_GetTick>
 800cad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cad6:	e008      	b.n	800caea <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cad8:	f7fc ff40 	bl	800995c <HAL_GetTick>
 800cadc:	4602      	mov	r2, r0
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	1ad3      	subs	r3, r2, r3
 800cae2:	2b02      	cmp	r3, #2
 800cae4:	d901      	bls.n	800caea <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800cae6:	2303      	movs	r3, #3
 800cae8:	e04f      	b.n	800cb8a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800caea:	4b2b      	ldr	r3, [pc, #172]	; (800cb98 <HAL_RCC_OscConfig+0x47c>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d1f0      	bne.n	800cad8 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	69da      	ldr	r2, [r3, #28]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6a1b      	ldr	r3, [r3, #32]
 800cafe:	431a      	orrs	r2, r3
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb04:	019b      	lsls	r3, r3, #6
 800cb06:	431a      	orrs	r2, r3
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb0c:	085b      	lsrs	r3, r3, #1
 800cb0e:	3b01      	subs	r3, #1
 800cb10:	041b      	lsls	r3, r3, #16
 800cb12:	431a      	orrs	r2, r3
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb18:	061b      	lsls	r3, r3, #24
 800cb1a:	431a      	orrs	r2, r3
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb20:	071b      	lsls	r3, r3, #28
 800cb22:	491d      	ldr	r1, [pc, #116]	; (800cb98 <HAL_RCC_OscConfig+0x47c>)
 800cb24:	4313      	orrs	r3, r2
 800cb26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cb28:	4b1c      	ldr	r3, [pc, #112]	; (800cb9c <HAL_RCC_OscConfig+0x480>)
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb2e:	f7fc ff15 	bl	800995c <HAL_GetTick>
 800cb32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb34:	e008      	b.n	800cb48 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb36:	f7fc ff11 	bl	800995c <HAL_GetTick>
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	1ad3      	subs	r3, r2, r3
 800cb40:	2b02      	cmp	r3, #2
 800cb42:	d901      	bls.n	800cb48 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800cb44:	2303      	movs	r3, #3
 800cb46:	e020      	b.n	800cb8a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb48:	4b13      	ldr	r3, [pc, #76]	; (800cb98 <HAL_RCC_OscConfig+0x47c>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d0f0      	beq.n	800cb36 <HAL_RCC_OscConfig+0x41a>
 800cb54:	e018      	b.n	800cb88 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cb56:	4b11      	ldr	r3, [pc, #68]	; (800cb9c <HAL_RCC_OscConfig+0x480>)
 800cb58:	2200      	movs	r2, #0
 800cb5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb5c:	f7fc fefe 	bl	800995c <HAL_GetTick>
 800cb60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb62:	e008      	b.n	800cb76 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb64:	f7fc fefa 	bl	800995c <HAL_GetTick>
 800cb68:	4602      	mov	r2, r0
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	1ad3      	subs	r3, r2, r3
 800cb6e:	2b02      	cmp	r3, #2
 800cb70:	d901      	bls.n	800cb76 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800cb72:	2303      	movs	r3, #3
 800cb74:	e009      	b.n	800cb8a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb76:	4b08      	ldr	r3, [pc, #32]	; (800cb98 <HAL_RCC_OscConfig+0x47c>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d1f0      	bne.n	800cb64 <HAL_RCC_OscConfig+0x448>
 800cb82:	e001      	b.n	800cb88 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800cb84:	2301      	movs	r3, #1
 800cb86:	e000      	b.n	800cb8a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800cb88:	2300      	movs	r3, #0
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3718      	adds	r7, #24
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	40007000 	.word	0x40007000
 800cb98:	40023800 	.word	0x40023800
 800cb9c:	42470060 	.word	0x42470060

0800cba0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b082      	sub	sp, #8
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d101      	bne.n	800cbb2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cbae:	2301      	movs	r3, #1
 800cbb0:	e022      	b.n	800cbf8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d105      	bne.n	800cbca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f7fa f889 	bl	8006cdc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2203      	movs	r2, #3
 800cbce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f000 f814 	bl	800cc00 <HAL_SD_InitCard>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d001      	beq.n	800cbe2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	e00a      	b.n	800cbf8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2200      	movs	r2, #0
 800cbec:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cbf6:	2300      	movs	r3, #0
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cc00:	b5b0      	push	{r4, r5, r7, lr}
 800cc02:	b08e      	sub	sp, #56	; 0x38
 800cc04:	af04      	add	r7, sp, #16
 800cc06:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cc10:	2300      	movs	r3, #0
 800cc12:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800cc14:	2300      	movs	r3, #0
 800cc16:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800cc1c:	2376      	movs	r3, #118	; 0x76
 800cc1e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681d      	ldr	r5, [r3, #0]
 800cc24:	466c      	mov	r4, sp
 800cc26:	f107 0314 	add.w	r3, r7, #20
 800cc2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cc2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cc32:	f107 0308 	add.w	r3, r7, #8
 800cc36:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cc38:	4628      	mov	r0, r5
 800cc3a:	f003 faa5 	bl	8010188 <SDIO_Init>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800cc44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d001      	beq.n	800cc50 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	e031      	b.n	800ccb4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800cc50:	4b1a      	ldr	r3, [pc, #104]	; (800ccbc <HAL_SD_InitCard+0xbc>)
 800cc52:	2200      	movs	r2, #0
 800cc54:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f003 fadd 	bl	801021a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800cc60:	4b16      	ldr	r3, [pc, #88]	; (800ccbc <HAL_SD_InitCard+0xbc>)
 800cc62:	2201      	movs	r2, #1
 800cc64:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 ffc4 	bl	800dbf4 <SD_PowerON>
 800cc6c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc6e:	6a3b      	ldr	r3, [r7, #32]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d00b      	beq.n	800cc8c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2201      	movs	r2, #1
 800cc78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc80:	6a3b      	ldr	r3, [r7, #32]
 800cc82:	431a      	orrs	r2, r3
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc88:	2301      	movs	r3, #1
 800cc8a:	e013      	b.n	800ccb4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 fee5 	bl	800da5c <SD_InitCard>
 800cc92:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc94:	6a3b      	ldr	r3, [r7, #32]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d00b      	beq.n	800ccb2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cca6:	6a3b      	ldr	r3, [r7, #32]
 800cca8:	431a      	orrs	r2, r3
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ccae:	2301      	movs	r3, #1
 800ccb0:	e000      	b.n	800ccb4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800ccb2:	2300      	movs	r3, #0
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3728      	adds	r7, #40	; 0x28
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bdb0      	pop	{r4, r5, r7, pc}
 800ccbc:	422580a0 	.word	0x422580a0

0800ccc0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b08c      	sub	sp, #48	; 0x30
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	60b9      	str	r1, [r7, #8]
 800ccca:	607a      	str	r2, [r7, #4]
 800cccc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d107      	bne.n	800cce8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccdc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cce4:	2301      	movs	r3, #1
 800cce6:	e0c7      	b.n	800ce78 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	f040 80c0 	bne.w	800ce76 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ccfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	441a      	add	r2, r3
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d907      	bls.n	800cd1a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cd16:	2301      	movs	r3, #1
 800cd18:	e0ae      	b.n	800ce78 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	2203      	movs	r2, #3
 800cd1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	2200      	movs	r2, #0
 800cd28:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800cd38:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd3e:	4a50      	ldr	r2, [pc, #320]	; (800ce80 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800cd40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd46:	4a4f      	ldr	r2, [pc, #316]	; (800ce84 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800cd48:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd4e:	2200      	movs	r2, #0
 800cd50:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	3380      	adds	r3, #128	; 0x80
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	68ba      	ldr	r2, [r7, #8]
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	025b      	lsls	r3, r3, #9
 800cd64:	089b      	lsrs	r3, r3, #2
 800cd66:	f7fd fbed 	bl	800a544 <HAL_DMA_Start_IT>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d017      	beq.n	800cda0 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800cd7e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a40      	ldr	r2, [pc, #256]	; (800ce88 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cd86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	2201      	movs	r2, #1
 800cd98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	e06b      	b.n	800ce78 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800cda0:	4b3a      	ldr	r3, [pc, #232]	; (800ce8c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800cda2:	2201      	movs	r2, #1
 800cda4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdaa:	2b01      	cmp	r3, #1
 800cdac:	d002      	beq.n	800cdb4 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800cdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb0:	025b      	lsls	r3, r3, #9
 800cdb2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f003 fabf 	bl	8010340 <SDMMC_CmdBlockLength>
 800cdc2:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800cdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d00f      	beq.n	800cdea <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4a2e      	ldr	r2, [pc, #184]	; (800ce88 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cdd0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd8:	431a      	orrs	r2, r3
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2201      	movs	r2, #1
 800cde2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800cde6:	2301      	movs	r3, #1
 800cde8:	e046      	b.n	800ce78 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cdea:	f04f 33ff 	mov.w	r3, #4294967295
 800cdee:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	025b      	lsls	r3, r3, #9
 800cdf4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cdf6:	2390      	movs	r3, #144	; 0x90
 800cdf8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800cdfa:	2302      	movs	r3, #2
 800cdfc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800ce02:	2301      	movs	r3, #1
 800ce04:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f107 0210 	add.w	r2, r7, #16
 800ce0e:	4611      	mov	r1, r2
 800ce10:	4618      	mov	r0, r3
 800ce12:	f003 fa69 	bl	80102e8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d90a      	bls.n	800ce32 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	2282      	movs	r2, #130	; 0x82
 800ce20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f003 facd 	bl	80103c8 <SDMMC_CmdReadMultiBlock>
 800ce2e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ce30:	e009      	b.n	800ce46 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	2281      	movs	r2, #129	; 0x81
 800ce36:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f003 faa0 	bl	8010384 <SDMMC_CmdReadSingleBlock>
 800ce44:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800ce46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d012      	beq.n	800ce72 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4a0d      	ldr	r2, [pc, #52]	; (800ce88 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800ce52:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce5a:	431a      	orrs	r2, r3
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	2201      	movs	r2, #1
 800ce64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800ce6e:	2301      	movs	r3, #1
 800ce70:	e002      	b.n	800ce78 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800ce72:	2300      	movs	r3, #0
 800ce74:	e000      	b.n	800ce78 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800ce76:	2302      	movs	r3, #2
  }
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3730      	adds	r7, #48	; 0x30
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	0800d86b 	.word	0x0800d86b
 800ce84:	0800d8dd 	.word	0x0800d8dd
 800ce88:	004005ff 	.word	0x004005ff
 800ce8c:	4225858c 	.word	0x4225858c

0800ce90 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b08c      	sub	sp, #48	; 0x30
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	60b9      	str	r1, [r7, #8]
 800ce9a:	607a      	str	r2, [r7, #4]
 800ce9c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d107      	bne.n	800ceb8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	e0ca      	b.n	800d04e <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	f040 80c3 	bne.w	800d04c <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2200      	movs	r2, #0
 800ceca:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	441a      	add	r2, r3
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d907      	bls.n	800ceea <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cede:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cee6:	2301      	movs	r3, #1
 800cee8:	e0b1      	b.n	800d04e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	2203      	movs	r2, #3
 800ceee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	2200      	movs	r2, #0
 800cef8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f042 021a 	orr.w	r2, r2, #26
 800cf08:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf0e:	4a52      	ldr	r2, [pc, #328]	; (800d058 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800cf10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf16:	4a51      	ldr	r2, [pc, #324]	; (800d05c <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800cf18:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf1e:	2200      	movs	r2, #0
 800cf20:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	d002      	beq.n	800cf30 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800cf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf2c:	025b      	lsls	r3, r3, #9
 800cf2e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f003 fa01 	bl	8010340 <SDMMC_CmdBlockLength>
 800cf3e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d00f      	beq.n	800cf66 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	4a45      	ldr	r2, [pc, #276]	; (800d060 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cf4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf54:	431a      	orrs	r2, r3
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cf62:	2301      	movs	r3, #1
 800cf64:	e073      	b.n	800d04e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	2b01      	cmp	r3, #1
 800cf6a:	d90a      	bls.n	800cf82 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	22a0      	movs	r2, #160	; 0xa0
 800cf70:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f003 fa69 	bl	8010450 <SDMMC_CmdWriteMultiBlock>
 800cf7e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cf80:	e009      	b.n	800cf96 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2290      	movs	r2, #144	; 0x90
 800cf86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f003 fa3c 	bl	801040c <SDMMC_CmdWriteSingleBlock>
 800cf94:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d012      	beq.n	800cfc2 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4a2f      	ldr	r2, [pc, #188]	; (800d060 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cfa2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfaa:	431a      	orrs	r2, r3
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	e045      	b.n	800d04e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800cfc2:	4b28      	ldr	r3, [pc, #160]	; (800d064 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800cfcc:	68b9      	ldr	r1, [r7, #8]
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	3380      	adds	r3, #128	; 0x80
 800cfd4:	461a      	mov	r2, r3
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	025b      	lsls	r3, r3, #9
 800cfda:	089b      	lsrs	r3, r3, #2
 800cfdc:	f7fd fab2 	bl	800a544 <HAL_DMA_Start_IT>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d01a      	beq.n	800d01c <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f022 021a 	bic.w	r2, r2, #26
 800cff4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4a19      	ldr	r2, [pc, #100]	; (800d060 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cffc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d002:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2201      	movs	r2, #1
 800d00e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	2200      	movs	r2, #0
 800d016:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d018:	2301      	movs	r3, #1
 800d01a:	e018      	b.n	800d04e <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d01c:	f04f 33ff 	mov.w	r3, #4294967295
 800d020:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	025b      	lsls	r3, r3, #9
 800d026:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d028:	2390      	movs	r3, #144	; 0x90
 800d02a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d02c:	2300      	movs	r3, #0
 800d02e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d030:	2300      	movs	r3, #0
 800d032:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d034:	2301      	movs	r3, #1
 800d036:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f107 0210 	add.w	r2, r7, #16
 800d040:	4611      	mov	r1, r2
 800d042:	4618      	mov	r0, r3
 800d044:	f003 f950 	bl	80102e8 <SDIO_ConfigData>

      return HAL_OK;
 800d048:	2300      	movs	r3, #0
 800d04a:	e000      	b.n	800d04e <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d04c:	2302      	movs	r3, #2
  }
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3730      	adds	r7, #48	; 0x30
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	0800d841 	.word	0x0800d841
 800d05c:	0800d8dd 	.word	0x0800d8dd
 800d060:	004005ff 	.word	0x004005ff
 800d064:	4225858c 	.word	0x4225858c

0800d068 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d074:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d07c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d080:	2b00      	cmp	r3, #0
 800d082:	d008      	beq.n	800d096 <HAL_SD_IRQHandler+0x2e>
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	f003 0308 	and.w	r3, r3, #8
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d003      	beq.n	800d096 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 ffc6 	bl	800e020 <SD_Read_IT>
 800d094:	e155      	b.n	800d342 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d09c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f000 808f 	beq.w	800d1c4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0ae:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	6812      	ldr	r2, [r2, #0]
 800d0ba:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d0be:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d0c2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f022 0201 	bic.w	r2, r2, #1
 800d0d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f003 0308 	and.w	r3, r3, #8
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d039      	beq.n	800d152 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f003 0302 	and.w	r3, r3, #2
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d104      	bne.n	800d0f2 <HAL_SD_IRQHandler+0x8a>
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f003 0320 	and.w	r3, r3, #32
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d011      	beq.n	800d116 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f003 f9cc 	bl	8010494 <SDMMC_CmdStopTransfer>
 800d0fc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d008      	beq.n	800d116 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	431a      	orrs	r2, r3
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f000 f91f 	bl	800d354 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f240 523a 	movw	r2, #1338	; 0x53a
 800d11e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2201      	movs	r2, #1
 800d124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2200      	movs	r2, #0
 800d12c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	f003 0301 	and.w	r3, r3, #1
 800d134:	2b00      	cmp	r3, #0
 800d136:	d104      	bne.n	800d142 <HAL_SD_IRQHandler+0xda>
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	f003 0302 	and.w	r3, r3, #2
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d003      	beq.n	800d14a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f003 fe22 	bl	8010d8c <HAL_SD_RxCpltCallback>
 800d148:	e0fb      	b.n	800d342 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f003 fe14 	bl	8010d78 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d150:	e0f7      	b.n	800d342 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d158:	2b00      	cmp	r3, #0
 800d15a:	f000 80f2 	beq.w	800d342 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f003 0320 	and.w	r3, r3, #32
 800d164:	2b00      	cmp	r3, #0
 800d166:	d011      	beq.n	800d18c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4618      	mov	r0, r3
 800d16e:	f003 f991 	bl	8010494 <SDMMC_CmdStopTransfer>
 800d172:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d008      	beq.n	800d18c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	431a      	orrs	r2, r3
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f000 f8e4 	bl	800d354 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f003 0301 	and.w	r3, r3, #1
 800d192:	2b00      	cmp	r3, #0
 800d194:	f040 80d5 	bne.w	800d342 <HAL_SD_IRQHandler+0x2da>
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f003 0302 	and.w	r3, r3, #2
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	f040 80cf 	bne.w	800d342 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f022 0208 	bic.w	r2, r2, #8
 800d1b2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f003 fddb 	bl	8010d78 <HAL_SD_TxCpltCallback>
}
 800d1c2:	e0be      	b.n	800d342 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d008      	beq.n	800d1e4 <HAL_SD_IRQHandler+0x17c>
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f003 0308 	and.w	r3, r3, #8
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d003      	beq.n	800d1e4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f000 ff70 	bl	800e0c2 <SD_Write_IT>
 800d1e2:	e0ae      	b.n	800d342 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ea:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	f000 80a7 	beq.w	800d342 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1fa:	f003 0302 	and.w	r3, r3, #2
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d005      	beq.n	800d20e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d206:	f043 0202 	orr.w	r2, r3, #2
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d214:	f003 0308 	and.w	r3, r3, #8
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d005      	beq.n	800d228 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d220:	f043 0208 	orr.w	r2, r3, #8
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d22e:	f003 0320 	and.w	r3, r3, #32
 800d232:	2b00      	cmp	r3, #0
 800d234:	d005      	beq.n	800d242 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d23a:	f043 0220 	orr.w	r2, r3, #32
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d248:	f003 0310 	and.w	r3, r3, #16
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d005      	beq.n	800d25c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d254:	f043 0210 	orr.w	r2, r3, #16
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f240 523a 	movw	r2, #1338	; 0x53a
 800d264:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d274:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	4618      	mov	r0, r3
 800d27c:	f003 f90a 	bl	8010494 <SDMMC_CmdStopTransfer>
 800d280:	4602      	mov	r2, r0
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d286:	431a      	orrs	r2, r3
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	f003 0308 	and.w	r3, r3, #8
 800d292:	2b00      	cmp	r3, #0
 800d294:	d00a      	beq.n	800d2ac <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2201      	movs	r2, #1
 800d29a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f000 f855 	bl	800d354 <HAL_SD_ErrorCallback>
}
 800d2aa:	e04a      	b.n	800d342 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d045      	beq.n	800d342 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f003 0310 	and.w	r3, r3, #16
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d104      	bne.n	800d2ca <HAL_SD_IRQHandler+0x262>
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f003 0320 	and.w	r3, r3, #32
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d011      	beq.n	800d2ee <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ce:	4a1f      	ldr	r2, [pc, #124]	; (800d34c <HAL_SD_IRQHandler+0x2e4>)
 800d2d0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f7fd f98c 	bl	800a5f4 <HAL_DMA_Abort_IT>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d02f      	beq.n	800d342 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f000 fb4a 	bl	800d980 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d2ec:	e029      	b.n	800d342 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	f003 0301 	and.w	r3, r3, #1
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d104      	bne.n	800d302 <HAL_SD_IRQHandler+0x29a>
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f003 0302 	and.w	r3, r3, #2
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d011      	beq.n	800d326 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d306:	4a12      	ldr	r2, [pc, #72]	; (800d350 <HAL_SD_IRQHandler+0x2e8>)
 800d308:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d30e:	4618      	mov	r0, r3
 800d310:	f7fd f970 	bl	800a5f4 <HAL_DMA_Abort_IT>
 800d314:	4603      	mov	r3, r0
 800d316:	2b00      	cmp	r3, #0
 800d318:	d013      	beq.n	800d342 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d31e:	4618      	mov	r0, r3
 800d320:	f000 fb65 	bl	800d9ee <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d324:	e00d      	b.n	800d342 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2200      	movs	r2, #0
 800d32a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2201      	movs	r2, #1
 800d330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2200      	movs	r2, #0
 800d338:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f003 fd12 	bl	8010d64 <HAL_SD_AbortCallback>
}
 800d340:	e7ff      	b.n	800d342 <HAL_SD_IRQHandler+0x2da>
 800d342:	bf00      	nop
 800d344:	3710      	adds	r7, #16
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	0800d981 	.word	0x0800d981
 800d350:	0800d9ef 	.word	0x0800d9ef

0800d354 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d35c:	bf00      	nop
 800d35e:	370c      	adds	r7, #12
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr

0800d368 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d368:	b480      	push	{r7}
 800d36a:	b083      	sub	sp, #12
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d376:	0f9b      	lsrs	r3, r3, #30
 800d378:	b2da      	uxtb	r2, r3
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d382:	0e9b      	lsrs	r3, r3, #26
 800d384:	b2db      	uxtb	r3, r3
 800d386:	f003 030f 	and.w	r3, r3, #15
 800d38a:	b2da      	uxtb	r2, r3
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d394:	0e1b      	lsrs	r3, r3, #24
 800d396:	b2db      	uxtb	r3, r3
 800d398:	f003 0303 	and.w	r3, r3, #3
 800d39c:	b2da      	uxtb	r2, r3
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3a6:	0c1b      	lsrs	r3, r3, #16
 800d3a8:	b2da      	uxtb	r2, r3
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3b2:	0a1b      	lsrs	r3, r3, #8
 800d3b4:	b2da      	uxtb	r2, r3
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3be:	b2da      	uxtb	r2, r3
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3c8:	0d1b      	lsrs	r3, r3, #20
 800d3ca:	b29a      	uxth	r2, r3
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3d4:	0c1b      	lsrs	r3, r3, #16
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	f003 030f 	and.w	r3, r3, #15
 800d3dc:	b2da      	uxtb	r2, r3
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3e6:	0bdb      	lsrs	r3, r3, #15
 800d3e8:	b2db      	uxtb	r3, r3
 800d3ea:	f003 0301 	and.w	r3, r3, #1
 800d3ee:	b2da      	uxtb	r2, r3
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3f8:	0b9b      	lsrs	r3, r3, #14
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	f003 0301 	and.w	r3, r3, #1
 800d400:	b2da      	uxtb	r2, r3
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d40a:	0b5b      	lsrs	r3, r3, #13
 800d40c:	b2db      	uxtb	r3, r3
 800d40e:	f003 0301 	and.w	r3, r3, #1
 800d412:	b2da      	uxtb	r2, r3
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d41c:	0b1b      	lsrs	r3, r3, #12
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	f003 0301 	and.w	r3, r3, #1
 800d424:	b2da      	uxtb	r2, r3
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	2200      	movs	r2, #0
 800d42e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d434:	2b00      	cmp	r3, #0
 800d436:	d163      	bne.n	800d500 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d43c:	009a      	lsls	r2, r3, #2
 800d43e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d442:	4013      	ands	r3, r2
 800d444:	687a      	ldr	r2, [r7, #4]
 800d446:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d448:	0f92      	lsrs	r2, r2, #30
 800d44a:	431a      	orrs	r2, r3
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d454:	0edb      	lsrs	r3, r3, #27
 800d456:	b2db      	uxtb	r3, r3
 800d458:	f003 0307 	and.w	r3, r3, #7
 800d45c:	b2da      	uxtb	r2, r3
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d466:	0e1b      	lsrs	r3, r3, #24
 800d468:	b2db      	uxtb	r3, r3
 800d46a:	f003 0307 	and.w	r3, r3, #7
 800d46e:	b2da      	uxtb	r2, r3
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d478:	0d5b      	lsrs	r3, r3, #21
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	f003 0307 	and.w	r3, r3, #7
 800d480:	b2da      	uxtb	r2, r3
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d48a:	0c9b      	lsrs	r3, r3, #18
 800d48c:	b2db      	uxtb	r3, r3
 800d48e:	f003 0307 	and.w	r3, r3, #7
 800d492:	b2da      	uxtb	r2, r3
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d49c:	0bdb      	lsrs	r3, r3, #15
 800d49e:	b2db      	uxtb	r3, r3
 800d4a0:	f003 0307 	and.w	r3, r3, #7
 800d4a4:	b2da      	uxtb	r2, r3
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	691b      	ldr	r3, [r3, #16]
 800d4ae:	1c5a      	adds	r2, r3, #1
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	7e1b      	ldrb	r3, [r3, #24]
 800d4b8:	b2db      	uxtb	r3, r3
 800d4ba:	f003 0307 	and.w	r3, r3, #7
 800d4be:	3302      	adds	r3, #2
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d4c6:	687a      	ldr	r2, [r7, #4]
 800d4c8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d4ca:	fb02 f203 	mul.w	r2, r2, r3
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	7a1b      	ldrb	r3, [r3, #8]
 800d4d6:	b2db      	uxtb	r3, r3
 800d4d8:	f003 030f 	and.w	r3, r3, #15
 800d4dc:	2201      	movs	r2, #1
 800d4de:	409a      	lsls	r2, r3
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d4ec:	0a52      	lsrs	r2, r2, #9
 800d4ee:	fb02 f203 	mul.w	r2, r2, r3
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d4fc:	661a      	str	r2, [r3, #96]	; 0x60
 800d4fe:	e031      	b.n	800d564 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d504:	2b01      	cmp	r3, #1
 800d506:	d11d      	bne.n	800d544 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d50c:	041b      	lsls	r3, r3, #16
 800d50e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d516:	0c1b      	lsrs	r3, r3, #16
 800d518:	431a      	orrs	r2, r3
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	691b      	ldr	r3, [r3, #16]
 800d522:	3301      	adds	r3, #1
 800d524:	029a      	lsls	r2, r3, #10
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d538:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	661a      	str	r2, [r3, #96]	; 0x60
 800d542:	e00f      	b.n	800d564 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4a58      	ldr	r2, [pc, #352]	; (800d6ac <HAL_SD_GetCardCSD+0x344>)
 800d54a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d550:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2201      	movs	r2, #1
 800d55c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d560:	2301      	movs	r3, #1
 800d562:	e09d      	b.n	800d6a0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d568:	0b9b      	lsrs	r3, r3, #14
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	f003 0301 	and.w	r3, r3, #1
 800d570:	b2da      	uxtb	r2, r3
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d57a:	09db      	lsrs	r3, r3, #7
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d582:	b2da      	uxtb	r2, r3
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d58c:	b2db      	uxtb	r3, r3
 800d58e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d592:	b2da      	uxtb	r2, r3
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d59c:	0fdb      	lsrs	r3, r3, #31
 800d59e:	b2da      	uxtb	r2, r3
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5a8:	0f5b      	lsrs	r3, r3, #29
 800d5aa:	b2db      	uxtb	r3, r3
 800d5ac:	f003 0303 	and.w	r3, r3, #3
 800d5b0:	b2da      	uxtb	r2, r3
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5ba:	0e9b      	lsrs	r3, r3, #26
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	f003 0307 	and.w	r3, r3, #7
 800d5c2:	b2da      	uxtb	r2, r3
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5cc:	0d9b      	lsrs	r3, r3, #22
 800d5ce:	b2db      	uxtb	r3, r3
 800d5d0:	f003 030f 	and.w	r3, r3, #15
 800d5d4:	b2da      	uxtb	r2, r3
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5de:	0d5b      	lsrs	r3, r3, #21
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	f003 0301 	and.w	r3, r3, #1
 800d5e6:	b2da      	uxtb	r2, r3
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5fa:	0c1b      	lsrs	r3, r3, #16
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	f003 0301 	and.w	r3, r3, #1
 800d602:	b2da      	uxtb	r2, r3
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d60e:	0bdb      	lsrs	r3, r3, #15
 800d610:	b2db      	uxtb	r3, r3
 800d612:	f003 0301 	and.w	r3, r3, #1
 800d616:	b2da      	uxtb	r2, r3
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d622:	0b9b      	lsrs	r3, r3, #14
 800d624:	b2db      	uxtb	r3, r3
 800d626:	f003 0301 	and.w	r3, r3, #1
 800d62a:	b2da      	uxtb	r2, r3
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d636:	0b5b      	lsrs	r3, r3, #13
 800d638:	b2db      	uxtb	r3, r3
 800d63a:	f003 0301 	and.w	r3, r3, #1
 800d63e:	b2da      	uxtb	r2, r3
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d64a:	0b1b      	lsrs	r3, r3, #12
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	f003 0301 	and.w	r3, r3, #1
 800d652:	b2da      	uxtb	r2, r3
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d65e:	0a9b      	lsrs	r3, r3, #10
 800d660:	b2db      	uxtb	r3, r3
 800d662:	f003 0303 	and.w	r3, r3, #3
 800d666:	b2da      	uxtb	r2, r3
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d672:	0a1b      	lsrs	r3, r3, #8
 800d674:	b2db      	uxtb	r3, r3
 800d676:	f003 0303 	and.w	r3, r3, #3
 800d67a:	b2da      	uxtb	r2, r3
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d686:	085b      	lsrs	r3, r3, #1
 800d688:	b2db      	uxtb	r3, r3
 800d68a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d68e:	b2da      	uxtb	r2, r3
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	2201      	movs	r2, #1
 800d69a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d69e:	2300      	movs	r3, #0
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	370c      	adds	r7, #12
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr
 800d6ac:	004005ff 	.word	0x004005ff

0800d6b0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b083      	sub	sp, #12
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
 800d6b8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d6fa:	2300      	movs	r3, #0
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	370c      	adds	r7, #12
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr

0800d708 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d708:	b5b0      	push	{r4, r5, r7, lr}
 800d70a:	b08e      	sub	sp, #56	; 0x38
 800d70c:	af04      	add	r7, sp, #16
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2203      	movs	r2, #3
 800d716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d71e:	2b03      	cmp	r3, #3
 800d720:	d02e      	beq.n	800d780 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d728:	d106      	bne.n	800d738 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d72e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	639a      	str	r2, [r3, #56]	; 0x38
 800d736:	e029      	b.n	800d78c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d73e:	d10a      	bne.n	800d756 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 fb0d 	bl	800dd60 <SD_WideBus_Enable>
 800d746:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74e:	431a      	orrs	r2, r3
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	639a      	str	r2, [r3, #56]	; 0x38
 800d754:	e01a      	b.n	800d78c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d10a      	bne.n	800d772 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f000 fb4a 	bl	800ddf6 <SD_WideBus_Disable>
 800d762:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76a:	431a      	orrs	r2, r3
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	639a      	str	r2, [r3, #56]	; 0x38
 800d770:	e00c      	b.n	800d78c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d776:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	639a      	str	r2, [r3, #56]	; 0x38
 800d77e:	e005      	b.n	800d78c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d784:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d790:	2b00      	cmp	r3, #0
 800d792:	d009      	beq.n	800d7a8 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4a18      	ldr	r2, [pc, #96]	; (800d7fc <HAL_SD_ConfigWideBusOperation+0xf4>)
 800d79a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2201      	movs	r2, #1
 800d7a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	e024      	b.n	800d7f2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	685b      	ldr	r3, [r3, #4]
 800d7ac:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	689b      	ldr	r3, [r3, #8]
 800d7b2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	695b      	ldr	r3, [r3, #20]
 800d7c2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	699b      	ldr	r3, [r3, #24]
 800d7c8:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681d      	ldr	r5, [r3, #0]
 800d7ce:	466c      	mov	r4, sp
 800d7d0:	f107 0318 	add.w	r3, r7, #24
 800d7d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d7d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d7dc:	f107 030c 	add.w	r3, r7, #12
 800d7e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d7e2:	4628      	mov	r0, r5
 800d7e4:	f002 fcd0 	bl	8010188 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d7f0:	2300      	movs	r3, #0
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3728      	adds	r7, #40	; 0x28
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bdb0      	pop	{r4, r5, r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	004005ff 	.word	0x004005ff

0800d800 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b086      	sub	sp, #24
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d808:	2300      	movs	r3, #0
 800d80a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d80c:	f107 030c 	add.w	r3, r7, #12
 800d810:	4619      	mov	r1, r3
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f000 fa7c 	bl	800dd10 <SD_SendStatus>
 800d818:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d005      	beq.n	800d82c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	431a      	orrs	r2, r3
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	0a5b      	lsrs	r3, r3, #9
 800d830:	f003 030f 	and.w	r3, r3, #15
 800d834:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d836:	693b      	ldr	r3, [r7, #16]
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3718      	adds	r7, #24
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d840:	b480      	push	{r7}
 800d842:	b085      	sub	sp, #20
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d84c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d85c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d85e:	bf00      	nop
 800d860:	3714      	adds	r7, #20
 800d862:	46bd      	mov	sp, r7
 800d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d868:	4770      	bx	lr

0800d86a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d86a:	b580      	push	{r7, lr}
 800d86c:	b084      	sub	sp, #16
 800d86e:	af00      	add	r7, sp, #0
 800d870:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d876:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d87c:	2b82      	cmp	r3, #130	; 0x82
 800d87e:	d111      	bne.n	800d8a4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4618      	mov	r0, r3
 800d886:	f002 fe05 	bl	8010494 <SDMMC_CmdStopTransfer>
 800d88a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d008      	beq.n	800d8a4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	431a      	orrs	r2, r3
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d89e:	68f8      	ldr	r0, [r7, #12]
 800d8a0:	f7ff fd58 	bl	800d354 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f022 0208 	bic.w	r2, r2, #8
 800d8b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f240 523a 	movw	r2, #1338	; 0x53a
 800d8bc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2201      	movs	r2, #1
 800d8c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d8cc:	68f8      	ldr	r0, [r7, #12]
 800d8ce:	f003 fa5d 	bl	8010d8c <HAL_SD_RxCpltCallback>
#endif
}
 800d8d2:	bf00      	nop
 800d8d4:	3710      	adds	r7, #16
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
	...

0800d8dc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b086      	sub	sp, #24
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8e8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f7fd f82e 	bl	800a94c <HAL_DMA_GetError>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	2b02      	cmp	r3, #2
 800d8f4:	d03e      	beq.n	800d974 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8fc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d904:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	2b01      	cmp	r3, #1
 800d90a:	d002      	beq.n	800d912 <SD_DMAError+0x36>
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d12d      	bne.n	800d96e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	4a19      	ldr	r2, [pc, #100]	; (800d97c <SD_DMAError+0xa0>)
 800d918:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d928:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d92e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d936:	6978      	ldr	r0, [r7, #20]
 800d938:	f7ff ff62 	bl	800d800 <HAL_SD_GetCardState>
 800d93c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	2b06      	cmp	r3, #6
 800d942:	d002      	beq.n	800d94a <SD_DMAError+0x6e>
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	2b05      	cmp	r3, #5
 800d948:	d10a      	bne.n	800d960 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	4618      	mov	r0, r3
 800d950:	f002 fda0 	bl	8010494 <SDMMC_CmdStopTransfer>
 800d954:	4602      	mov	r2, r0
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d95a:	431a      	orrs	r2, r3
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	2201      	movs	r2, #1
 800d964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	2200      	movs	r2, #0
 800d96c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d96e:	6978      	ldr	r0, [r7, #20]
 800d970:	f7ff fcf0 	bl	800d354 <HAL_SD_ErrorCallback>
#endif
  }
}
 800d974:	bf00      	nop
 800d976:	3718      	adds	r7, #24
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}
 800d97c:	004005ff 	.word	0x004005ff

0800d980 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d98c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	f240 523a 	movw	r2, #1338	; 0x53a
 800d996:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d998:	68f8      	ldr	r0, [r7, #12]
 800d99a:	f7ff ff31 	bl	800d800 <HAL_SD_GetCardState>
 800d99e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	2b06      	cmp	r3, #6
 800d9b2:	d002      	beq.n	800d9ba <SD_DMATxAbort+0x3a>
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	2b05      	cmp	r3, #5
 800d9b8:	d10a      	bne.n	800d9d0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f002 fd68 	bl	8010494 <SDMMC_CmdStopTransfer>
 800d9c4:	4602      	mov	r2, r0
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ca:	431a      	orrs	r2, r3
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d103      	bne.n	800d9e0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f003 f9c3 	bl	8010d64 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d9de:	e002      	b.n	800d9e6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d9e0:	68f8      	ldr	r0, [r7, #12]
 800d9e2:	f7ff fcb7 	bl	800d354 <HAL_SD_ErrorCallback>
}
 800d9e6:	bf00      	nop
 800d9e8:	3710      	adds	r7, #16
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}

0800d9ee <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d9ee:	b580      	push	{r7, lr}
 800d9f0:	b084      	sub	sp, #16
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9fa:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	f240 523a 	movw	r2, #1338	; 0x53a
 800da04:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800da06:	68f8      	ldr	r0, [r7, #12]
 800da08:	f7ff fefa 	bl	800d800 <HAL_SD_GetCardState>
 800da0c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	2201      	movs	r2, #1
 800da12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	2200      	movs	r2, #0
 800da1a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	2b06      	cmp	r3, #6
 800da20:	d002      	beq.n	800da28 <SD_DMARxAbort+0x3a>
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	2b05      	cmp	r3, #5
 800da26:	d10a      	bne.n	800da3e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4618      	mov	r0, r3
 800da2e:	f002 fd31 	bl	8010494 <SDMMC_CmdStopTransfer>
 800da32:	4602      	mov	r2, r0
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da38:	431a      	orrs	r2, r3
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da42:	2b00      	cmp	r3, #0
 800da44:	d103      	bne.n	800da4e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800da46:	68f8      	ldr	r0, [r7, #12]
 800da48:	f003 f98c 	bl	8010d64 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800da4c:	e002      	b.n	800da54 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800da4e:	68f8      	ldr	r0, [r7, #12]
 800da50:	f7ff fc80 	bl	800d354 <HAL_SD_ErrorCallback>
}
 800da54:	bf00      	nop
 800da56:	3710      	adds	r7, #16
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800da5c:	b5b0      	push	{r4, r5, r7, lr}
 800da5e:	b094      	sub	sp, #80	; 0x50
 800da60:	af04      	add	r7, sp, #16
 800da62:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800da64:	2301      	movs	r3, #1
 800da66:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4618      	mov	r0, r3
 800da6e:	f002 fbe3 	bl	8010238 <SDIO_GetPowerState>
 800da72:	4603      	mov	r3, r0
 800da74:	2b00      	cmp	r3, #0
 800da76:	d102      	bne.n	800da7e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800da78:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800da7c:	e0b6      	b.n	800dbec <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da82:	2b03      	cmp	r3, #3
 800da84:	d02f      	beq.n	800dae6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4618      	mov	r0, r3
 800da8c:	f002 fe0c 	bl	80106a8 <SDMMC_CmdSendCID>
 800da90:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800da92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da94:	2b00      	cmp	r3, #0
 800da96:	d001      	beq.n	800da9c <SD_InitCard+0x40>
    {
      return errorstate;
 800da98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da9a:	e0a7      	b.n	800dbec <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	2100      	movs	r1, #0
 800daa2:	4618      	mov	r0, r3
 800daa4:	f002 fc0d 	bl	80102c2 <SDIO_GetResponse>
 800daa8:	4602      	mov	r2, r0
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	2104      	movs	r1, #4
 800dab4:	4618      	mov	r0, r3
 800dab6:	f002 fc04 	bl	80102c2 <SDIO_GetResponse>
 800daba:	4602      	mov	r2, r0
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	2108      	movs	r1, #8
 800dac6:	4618      	mov	r0, r3
 800dac8:	f002 fbfb 	bl	80102c2 <SDIO_GetResponse>
 800dacc:	4602      	mov	r2, r0
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	210c      	movs	r1, #12
 800dad8:	4618      	mov	r0, r3
 800dada:	f002 fbf2 	bl	80102c2 <SDIO_GetResponse>
 800dade:	4602      	mov	r2, r0
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daea:	2b03      	cmp	r3, #3
 800daec:	d00d      	beq.n	800db0a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f107 020e 	add.w	r2, r7, #14
 800daf6:	4611      	mov	r1, r2
 800daf8:	4618      	mov	r0, r3
 800dafa:	f002 fe12 	bl	8010722 <SDMMC_CmdSetRelAdd>
 800dafe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800db00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db02:	2b00      	cmp	r3, #0
 800db04:	d001      	beq.n	800db0a <SD_InitCard+0xae>
    {
      return errorstate;
 800db06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db08:	e070      	b.n	800dbec <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db0e:	2b03      	cmp	r3, #3
 800db10:	d036      	beq.n	800db80 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800db12:	89fb      	ldrh	r3, [r7, #14]
 800db14:	461a      	mov	r2, r3
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db22:	041b      	lsls	r3, r3, #16
 800db24:	4619      	mov	r1, r3
 800db26:	4610      	mov	r0, r2
 800db28:	f002 fddc 	bl	80106e4 <SDMMC_CmdSendCSD>
 800db2c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800db2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db30:	2b00      	cmp	r3, #0
 800db32:	d001      	beq.n	800db38 <SD_InitCard+0xdc>
    {
      return errorstate;
 800db34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db36:	e059      	b.n	800dbec <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	2100      	movs	r1, #0
 800db3e:	4618      	mov	r0, r3
 800db40:	f002 fbbf 	bl	80102c2 <SDIO_GetResponse>
 800db44:	4602      	mov	r2, r0
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	2104      	movs	r1, #4
 800db50:	4618      	mov	r0, r3
 800db52:	f002 fbb6 	bl	80102c2 <SDIO_GetResponse>
 800db56:	4602      	mov	r2, r0
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2108      	movs	r1, #8
 800db62:	4618      	mov	r0, r3
 800db64:	f002 fbad 	bl	80102c2 <SDIO_GetResponse>
 800db68:	4602      	mov	r2, r0
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	210c      	movs	r1, #12
 800db74:	4618      	mov	r0, r3
 800db76:	f002 fba4 	bl	80102c2 <SDIO_GetResponse>
 800db7a:	4602      	mov	r2, r0
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2104      	movs	r1, #4
 800db86:	4618      	mov	r0, r3
 800db88:	f002 fb9b 	bl	80102c2 <SDIO_GetResponse>
 800db8c:	4603      	mov	r3, r0
 800db8e:	0d1a      	lsrs	r2, r3, #20
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800db94:	f107 0310 	add.w	r3, r7, #16
 800db98:	4619      	mov	r1, r3
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f7ff fbe4 	bl	800d368 <HAL_SD_GetCardCSD>
 800dba0:	4603      	mov	r3, r0
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d002      	beq.n	800dbac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dba6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dbaa:	e01f      	b.n	800dbec <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6819      	ldr	r1, [r3, #0]
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbb4:	041b      	lsls	r3, r3, #16
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	f04f 0300 	mov.w	r3, #0
 800dbbc:	4608      	mov	r0, r1
 800dbbe:	f002 fc8b 	bl	80104d8 <SDMMC_CmdSelDesel>
 800dbc2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d001      	beq.n	800dbce <SD_InitCard+0x172>
  {
    return errorstate;
 800dbca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbcc:	e00e      	b.n	800dbec <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681d      	ldr	r5, [r3, #0]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	466c      	mov	r4, sp
 800dbd6:	f103 0210 	add.w	r2, r3, #16
 800dbda:	ca07      	ldmia	r2, {r0, r1, r2}
 800dbdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dbe0:	3304      	adds	r3, #4
 800dbe2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dbe4:	4628      	mov	r0, r5
 800dbe6:	f002 facf 	bl	8010188 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800dbea:	2300      	movs	r3, #0
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3740      	adds	r7, #64	; 0x40
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bdb0      	pop	{r4, r5, r7, pc}

0800dbf4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b086      	sub	sp, #24
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800dc00:	2300      	movs	r3, #0
 800dc02:	617b      	str	r3, [r7, #20]
 800dc04:	2300      	movs	r3, #0
 800dc06:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f002 fc86 	bl	801051e <SDMMC_CmdGoIdleState>
 800dc12:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d001      	beq.n	800dc1e <SD_PowerON+0x2a>
  {
    return errorstate;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	e072      	b.n	800dd04 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	4618      	mov	r0, r3
 800dc24:	f002 fc99 	bl	801055a <SDMMC_CmdOperCond>
 800dc28:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d00d      	beq.n	800dc4c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2200      	movs	r2, #0
 800dc34:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f002 fc6f 	bl	801051e <SDMMC_CmdGoIdleState>
 800dc40:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d004      	beq.n	800dc52 <SD_PowerON+0x5e>
    {
      return errorstate;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	e05b      	b.n	800dd04 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2201      	movs	r2, #1
 800dc50:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc56:	2b01      	cmp	r3, #1
 800dc58:	d137      	bne.n	800dcca <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	2100      	movs	r1, #0
 800dc60:	4618      	mov	r0, r3
 800dc62:	f002 fc99 	bl	8010598 <SDMMC_CmdAppCommand>
 800dc66:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d02d      	beq.n	800dcca <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dc72:	e047      	b.n	800dd04 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	2100      	movs	r1, #0
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f002 fc8c 	bl	8010598 <SDMMC_CmdAppCommand>
 800dc80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d001      	beq.n	800dc8c <SD_PowerON+0x98>
    {
      return errorstate;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	e03b      	b.n	800dd04 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	491e      	ldr	r1, [pc, #120]	; (800dd0c <SD_PowerON+0x118>)
 800dc92:	4618      	mov	r0, r3
 800dc94:	f002 fca2 	bl	80105dc <SDMMC_CmdAppOperCommand>
 800dc98:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d002      	beq.n	800dca6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dca0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dca4:	e02e      	b.n	800dd04 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	2100      	movs	r1, #0
 800dcac:	4618      	mov	r0, r3
 800dcae:	f002 fb08 	bl	80102c2 <SDIO_GetResponse>
 800dcb2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	0fdb      	lsrs	r3, r3, #31
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d101      	bne.n	800dcc0 <SD_PowerON+0xcc>
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	e000      	b.n	800dcc2 <SD_PowerON+0xce>
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	613b      	str	r3, [r7, #16]

    count++;
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	d802      	bhi.n	800dcda <SD_PowerON+0xe6>
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d0cc      	beq.n	800dc74 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dce0:	4293      	cmp	r3, r2
 800dce2:	d902      	bls.n	800dcea <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dce4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dce8:	e00c      	b.n	800dd04 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d003      	beq.n	800dcfc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	645a      	str	r2, [r3, #68]	; 0x44
 800dcfa:	e002      	b.n	800dd02 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800dd02:	2300      	movs	r3, #0
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3718      	adds	r7, #24
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	c1100000 	.word	0xc1100000

0800dd10 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b084      	sub	sp, #16
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d102      	bne.n	800dd26 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800dd20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dd24:	e018      	b.n	800dd58 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681a      	ldr	r2, [r3, #0]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd2e:	041b      	lsls	r3, r3, #16
 800dd30:	4619      	mov	r1, r3
 800dd32:	4610      	mov	r0, r2
 800dd34:	f002 fd16 	bl	8010764 <SDMMC_CmdSendStatus>
 800dd38:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d001      	beq.n	800dd44 <SD_SendStatus+0x34>
  {
    return errorstate;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	e009      	b.n	800dd58 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	2100      	movs	r1, #0
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f002 fab9 	bl	80102c2 <SDIO_GetResponse>
 800dd50:	4602      	mov	r2, r0
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800dd56:	2300      	movs	r3, #0
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3710      	adds	r7, #16
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b086      	sub	sp, #24
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dd68:	2300      	movs	r3, #0
 800dd6a:	60fb      	str	r3, [r7, #12]
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	2100      	movs	r1, #0
 800dd76:	4618      	mov	r0, r3
 800dd78:	f002 faa3 	bl	80102c2 <SDIO_GetResponse>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dd86:	d102      	bne.n	800dd8e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dd88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dd8c:	e02f      	b.n	800ddee <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dd8e:	f107 030c 	add.w	r3, r7, #12
 800dd92:	4619      	mov	r1, r3
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f000 f879 	bl	800de8c <SD_FindSCR>
 800dd9a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d001      	beq.n	800dda6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	e023      	b.n	800ddee <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d01c      	beq.n	800ddea <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681a      	ldr	r2, [r3, #0]
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddb8:	041b      	lsls	r3, r3, #16
 800ddba:	4619      	mov	r1, r3
 800ddbc:	4610      	mov	r0, r2
 800ddbe:	f002 fbeb 	bl	8010598 <SDMMC_CmdAppCommand>
 800ddc2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d001      	beq.n	800ddce <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	e00f      	b.n	800ddee <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	2102      	movs	r1, #2
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f002 fc24 	bl	8010622 <SDMMC_CmdBusWidth>
 800ddda:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d001      	beq.n	800dde6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	e003      	b.n	800ddee <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dde6:	2300      	movs	r3, #0
 800dde8:	e001      	b.n	800ddee <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ddea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3718      	adds	r7, #24
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}

0800ddf6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ddf6:	b580      	push	{r7, lr}
 800ddf8:	b086      	sub	sp, #24
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ddfe:	2300      	movs	r3, #0
 800de00:	60fb      	str	r3, [r7, #12]
 800de02:	2300      	movs	r3, #0
 800de04:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	2100      	movs	r1, #0
 800de0c:	4618      	mov	r0, r3
 800de0e:	f002 fa58 	bl	80102c2 <SDIO_GetResponse>
 800de12:	4603      	mov	r3, r0
 800de14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de1c:	d102      	bne.n	800de24 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800de1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800de22:	e02f      	b.n	800de84 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800de24:	f107 030c 	add.w	r3, r7, #12
 800de28:	4619      	mov	r1, r3
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f000 f82e 	bl	800de8c <SD_FindSCR>
 800de30:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d001      	beq.n	800de3c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	e023      	b.n	800de84 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de42:	2b00      	cmp	r3, #0
 800de44:	d01c      	beq.n	800de80 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681a      	ldr	r2, [r3, #0]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de4e:	041b      	lsls	r3, r3, #16
 800de50:	4619      	mov	r1, r3
 800de52:	4610      	mov	r0, r2
 800de54:	f002 fba0 	bl	8010598 <SDMMC_CmdAppCommand>
 800de58:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d001      	beq.n	800de64 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	e00f      	b.n	800de84 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	2100      	movs	r1, #0
 800de6a:	4618      	mov	r0, r3
 800de6c:	f002 fbd9 	bl	8010622 <SDMMC_CmdBusWidth>
 800de70:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d001      	beq.n	800de7c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	e003      	b.n	800de84 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800de7c:	2300      	movs	r3, #0
 800de7e:	e001      	b.n	800de84 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800de80:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800de84:	4618      	mov	r0, r3
 800de86:	3718      	adds	r7, #24
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800de8c:	b590      	push	{r4, r7, lr}
 800de8e:	b08f      	sub	sp, #60	; 0x3c
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800de96:	f7fb fd61 	bl	800995c <HAL_GetTick>
 800de9a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800de9c:	2300      	movs	r3, #0
 800de9e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800dea0:	2300      	movs	r3, #0
 800dea2:	60bb      	str	r3, [r7, #8]
 800dea4:	2300      	movs	r3, #0
 800dea6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	2108      	movs	r1, #8
 800deb2:	4618      	mov	r0, r3
 800deb4:	f002 fa44 	bl	8010340 <SDMMC_CmdBlockLength>
 800deb8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800deba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800debc:	2b00      	cmp	r3, #0
 800debe:	d001      	beq.n	800dec4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800dec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec2:	e0a9      	b.n	800e018 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681a      	ldr	r2, [r3, #0]
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800decc:	041b      	lsls	r3, r3, #16
 800dece:	4619      	mov	r1, r3
 800ded0:	4610      	mov	r0, r2
 800ded2:	f002 fb61 	bl	8010598 <SDMMC_CmdAppCommand>
 800ded6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ded8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d001      	beq.n	800dee2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800dede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee0:	e09a      	b.n	800e018 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dee2:	f04f 33ff 	mov.w	r3, #4294967295
 800dee6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dee8:	2308      	movs	r3, #8
 800deea:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800deec:	2330      	movs	r3, #48	; 0x30
 800deee:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800def0:	2302      	movs	r3, #2
 800def2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800def4:	2300      	movs	r3, #0
 800def6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800def8:	2301      	movs	r3, #1
 800defa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f107 0210 	add.w	r2, r7, #16
 800df04:	4611      	mov	r1, r2
 800df06:	4618      	mov	r0, r3
 800df08:	f002 f9ee 	bl	80102e8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4618      	mov	r0, r3
 800df12:	f002 fba8 	bl	8010666 <SDMMC_CmdSendSCR>
 800df16:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800df18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d022      	beq.n	800df64 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800df1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df20:	e07a      	b.n	800e018 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d00e      	beq.n	800df4e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6819      	ldr	r1, [r3, #0]
 800df34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df36:	009b      	lsls	r3, r3, #2
 800df38:	f107 0208 	add.w	r2, r7, #8
 800df3c:	18d4      	adds	r4, r2, r3
 800df3e:	4608      	mov	r0, r1
 800df40:	f002 f94d 	bl	80101de <SDIO_ReadFIFO>
 800df44:	4603      	mov	r3, r0
 800df46:	6023      	str	r3, [r4, #0]
      index++;
 800df48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df4a:	3301      	adds	r3, #1
 800df4c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800df4e:	f7fb fd05 	bl	800995c <HAL_GetTick>
 800df52:	4602      	mov	r2, r0
 800df54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df56:	1ad3      	subs	r3, r2, r3
 800df58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df5c:	d102      	bne.n	800df64 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800df5e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df62:	e059      	b.n	800e018 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df6a:	f240 432a 	movw	r3, #1066	; 0x42a
 800df6e:	4013      	ands	r3, r2
 800df70:	2b00      	cmp	r3, #0
 800df72:	d0d6      	beq.n	800df22 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df7a:	f003 0308 	and.w	r3, r3, #8
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d005      	beq.n	800df8e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	2208      	movs	r2, #8
 800df88:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800df8a:	2308      	movs	r3, #8
 800df8c:	e044      	b.n	800e018 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df94:	f003 0302 	and.w	r3, r3, #2
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d005      	beq.n	800dfa8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	2202      	movs	r2, #2
 800dfa2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dfa4:	2302      	movs	r3, #2
 800dfa6:	e037      	b.n	800e018 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfae:	f003 0320 	and.w	r3, r3, #32
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d005      	beq.n	800dfc2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	2220      	movs	r2, #32
 800dfbc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dfbe:	2320      	movs	r3, #32
 800dfc0:	e02a      	b.n	800e018 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f240 523a 	movw	r2, #1338	; 0x53a
 800dfca:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	061a      	lsls	r2, r3, #24
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	021b      	lsls	r3, r3, #8
 800dfd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dfd8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	0a1b      	lsrs	r3, r3, #8
 800dfde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dfe2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	0e1b      	lsrs	r3, r3, #24
 800dfe8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dfea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfec:	601a      	str	r2, [r3, #0]
    scr++;
 800dfee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff0:	3304      	adds	r3, #4
 800dff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	061a      	lsls	r2, r3, #24
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	021b      	lsls	r3, r3, #8
 800dffc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e000:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	0a1b      	lsrs	r3, r3, #8
 800e006:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e00a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	0e1b      	lsrs	r3, r3, #24
 800e010:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e014:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e016:	2300      	movs	r3, #0
}
 800e018:	4618      	mov	r0, r3
 800e01a:	373c      	adds	r7, #60	; 0x3c
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd90      	pop	{r4, r7, pc}

0800e020 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b086      	sub	sp, #24
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e02c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e032:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d03f      	beq.n	800e0ba <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e03a:	2300      	movs	r3, #0
 800e03c:	617b      	str	r3, [r7, #20]
 800e03e:	e033      	b.n	800e0a8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	4618      	mov	r0, r3
 800e046:	f002 f8ca 	bl	80101de <SDIO_ReadFIFO>
 800e04a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	b2da      	uxtb	r2, r3
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	3301      	adds	r3, #1
 800e058:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e05a:	693b      	ldr	r3, [r7, #16]
 800e05c:	3b01      	subs	r3, #1
 800e05e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	0a1b      	lsrs	r3, r3, #8
 800e064:	b2da      	uxtb	r2, r3
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	3301      	adds	r3, #1
 800e06e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	3b01      	subs	r3, #1
 800e074:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	0c1b      	lsrs	r3, r3, #16
 800e07a:	b2da      	uxtb	r2, r3
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	3301      	adds	r3, #1
 800e084:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	3b01      	subs	r3, #1
 800e08a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	0e1b      	lsrs	r3, r3, #24
 800e090:	b2da      	uxtb	r2, r3
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	3301      	adds	r3, #1
 800e09a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	3b01      	subs	r3, #1
 800e0a0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	3301      	adds	r3, #1
 800e0a6:	617b      	str	r3, [r7, #20]
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	2b07      	cmp	r3, #7
 800e0ac:	d9c8      	bls.n	800e040 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	68fa      	ldr	r2, [r7, #12]
 800e0b2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	693a      	ldr	r2, [r7, #16]
 800e0b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e0ba:	bf00      	nop
 800e0bc:	3718      	adds	r7, #24
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}

0800e0c2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e0c2:	b580      	push	{r7, lr}
 800e0c4:	b086      	sub	sp, #24
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6a1b      	ldr	r3, [r3, #32]
 800e0ce:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d043      	beq.n	800e164 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e0dc:	2300      	movs	r3, #0
 800e0de:	617b      	str	r3, [r7, #20]
 800e0e0:	e037      	b.n	800e152 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	3301      	adds	r3, #1
 800e0ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	3b01      	subs	r3, #1
 800e0f2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	021a      	lsls	r2, r3, #8
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	4313      	orrs	r3, r2
 800e0fe:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	3301      	adds	r3, #1
 800e104:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	3b01      	subs	r3, #1
 800e10a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	041a      	lsls	r2, r3, #16
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	4313      	orrs	r3, r2
 800e116:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	3301      	adds	r3, #1
 800e11c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	3b01      	subs	r3, #1
 800e122:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	061a      	lsls	r2, r3, #24
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	4313      	orrs	r3, r2
 800e12e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	3301      	adds	r3, #1
 800e134:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	3b01      	subs	r3, #1
 800e13a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	f107 0208 	add.w	r2, r7, #8
 800e144:	4611      	mov	r1, r2
 800e146:	4618      	mov	r0, r3
 800e148:	f002 f856 	bl	80101f8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	3301      	adds	r3, #1
 800e150:	617b      	str	r3, [r7, #20]
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	2b07      	cmp	r3, #7
 800e156:	d9c4      	bls.n	800e0e2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	68fa      	ldr	r2, [r7, #12]
 800e15c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	693a      	ldr	r2, [r7, #16]
 800e162:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e164:	bf00      	nop
 800e166:	3718      	adds	r7, #24
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}

0800e16c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b082      	sub	sp, #8
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d101      	bne.n	800e17e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e17a:	2301      	movs	r3, #1
 800e17c:	e056      	b.n	800e22c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2200      	movs	r2, #0
 800e182:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e18a:	b2db      	uxtb	r3, r3
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d106      	bne.n	800e19e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2200      	movs	r2, #0
 800e194:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f7f8 fe91 	bl	8006ec0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2202      	movs	r2, #2
 800e1a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	681a      	ldr	r2, [r3, #0]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1b4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	685a      	ldr	r2, [r3, #4]
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	689b      	ldr	r3, [r3, #8]
 800e1be:	431a      	orrs	r2, r3
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	68db      	ldr	r3, [r3, #12]
 800e1c4:	431a      	orrs	r2, r3
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	691b      	ldr	r3, [r3, #16]
 800e1ca:	431a      	orrs	r2, r3
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	695b      	ldr	r3, [r3, #20]
 800e1d0:	431a      	orrs	r2, r3
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	699b      	ldr	r3, [r3, #24]
 800e1d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e1da:	431a      	orrs	r2, r3
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	69db      	ldr	r3, [r3, #28]
 800e1e0:	431a      	orrs	r2, r3
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6a1b      	ldr	r3, [r3, #32]
 800e1e6:	ea42 0103 	orr.w	r1, r2, r3
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	430a      	orrs	r2, r1
 800e1f4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	699b      	ldr	r3, [r3, #24]
 800e1fa:	0c1b      	lsrs	r3, r3, #16
 800e1fc:	f003 0104 	and.w	r1, r3, #4
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	430a      	orrs	r2, r1
 800e20a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	69da      	ldr	r2, [r3, #28]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e21a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2200      	movs	r2, #0
 800e220:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2201      	movs	r2, #1
 800e226:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e22a:	2300      	movs	r3, #0
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3708      	adds	r7, #8
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b088      	sub	sp, #32
 800e238:	af00      	add	r7, sp, #0
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	60b9      	str	r1, [r7, #8]
 800e23e:	603b      	str	r3, [r7, #0]
 800e240:	4613      	mov	r3, r2
 800e242:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e244:	2300      	movs	r3, #0
 800e246:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e24e:	2b01      	cmp	r3, #1
 800e250:	d101      	bne.n	800e256 <HAL_SPI_Transmit+0x22>
 800e252:	2302      	movs	r3, #2
 800e254:	e11e      	b.n	800e494 <HAL_SPI_Transmit+0x260>
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	2201      	movs	r2, #1
 800e25a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e25e:	f7fb fb7d 	bl	800995c <HAL_GetTick>
 800e262:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e264:	88fb      	ldrh	r3, [r7, #6]
 800e266:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e26e:	b2db      	uxtb	r3, r3
 800e270:	2b01      	cmp	r3, #1
 800e272:	d002      	beq.n	800e27a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e274:	2302      	movs	r3, #2
 800e276:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e278:	e103      	b.n	800e482 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d002      	beq.n	800e286 <HAL_SPI_Transmit+0x52>
 800e280:	88fb      	ldrh	r3, [r7, #6]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d102      	bne.n	800e28c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e286:	2301      	movs	r3, #1
 800e288:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e28a:	e0fa      	b.n	800e482 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2203      	movs	r2, #3
 800e290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2200      	movs	r2, #0
 800e298:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	68ba      	ldr	r2, [r7, #8]
 800e29e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	88fa      	ldrh	r2, [r7, #6]
 800e2a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	88fa      	ldrh	r2, [r7, #6]
 800e2aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	689b      	ldr	r3, [r3, #8]
 800e2ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2d2:	d107      	bne.n	800e2e4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e2e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2ee:	2b40      	cmp	r3, #64	; 0x40
 800e2f0:	d007      	beq.n	800e302 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	681a      	ldr	r2, [r3, #0]
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e300:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	68db      	ldr	r3, [r3, #12]
 800e306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e30a:	d14b      	bne.n	800e3a4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d002      	beq.n	800e31a <HAL_SPI_Transmit+0xe6>
 800e314:	8afb      	ldrh	r3, [r7, #22]
 800e316:	2b01      	cmp	r3, #1
 800e318:	d13e      	bne.n	800e398 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e31e:	881a      	ldrh	r2, [r3, #0]
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e32a:	1c9a      	adds	r2, r3, #2
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e334:	b29b      	uxth	r3, r3
 800e336:	3b01      	subs	r3, #1
 800e338:	b29a      	uxth	r2, r3
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e33e:	e02b      	b.n	800e398 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	689b      	ldr	r3, [r3, #8]
 800e346:	f003 0302 	and.w	r3, r3, #2
 800e34a:	2b02      	cmp	r3, #2
 800e34c:	d112      	bne.n	800e374 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e352:	881a      	ldrh	r2, [r3, #0]
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e35e:	1c9a      	adds	r2, r3, #2
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e368:	b29b      	uxth	r3, r3
 800e36a:	3b01      	subs	r3, #1
 800e36c:	b29a      	uxth	r2, r3
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	86da      	strh	r2, [r3, #54]	; 0x36
 800e372:	e011      	b.n	800e398 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e374:	f7fb faf2 	bl	800995c <HAL_GetTick>
 800e378:	4602      	mov	r2, r0
 800e37a:	69bb      	ldr	r3, [r7, #24]
 800e37c:	1ad3      	subs	r3, r2, r3
 800e37e:	683a      	ldr	r2, [r7, #0]
 800e380:	429a      	cmp	r2, r3
 800e382:	d803      	bhi.n	800e38c <HAL_SPI_Transmit+0x158>
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e38a:	d102      	bne.n	800e392 <HAL_SPI_Transmit+0x15e>
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d102      	bne.n	800e398 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e392:	2303      	movs	r3, #3
 800e394:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e396:	e074      	b.n	800e482 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d1ce      	bne.n	800e340 <HAL_SPI_Transmit+0x10c>
 800e3a2:	e04c      	b.n	800e43e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	685b      	ldr	r3, [r3, #4]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d002      	beq.n	800e3b2 <HAL_SPI_Transmit+0x17e>
 800e3ac:	8afb      	ldrh	r3, [r7, #22]
 800e3ae:	2b01      	cmp	r3, #1
 800e3b0:	d140      	bne.n	800e434 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	330c      	adds	r3, #12
 800e3bc:	7812      	ldrb	r2, [r2, #0]
 800e3be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3c4:	1c5a      	adds	r2, r3, #1
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	3b01      	subs	r3, #1
 800e3d2:	b29a      	uxth	r2, r3
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e3d8:	e02c      	b.n	800e434 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	689b      	ldr	r3, [r3, #8]
 800e3e0:	f003 0302 	and.w	r3, r3, #2
 800e3e4:	2b02      	cmp	r3, #2
 800e3e6:	d113      	bne.n	800e410 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	330c      	adds	r3, #12
 800e3f2:	7812      	ldrb	r2, [r2, #0]
 800e3f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3fa:	1c5a      	adds	r2, r3, #1
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e404:	b29b      	uxth	r3, r3
 800e406:	3b01      	subs	r3, #1
 800e408:	b29a      	uxth	r2, r3
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	86da      	strh	r2, [r3, #54]	; 0x36
 800e40e:	e011      	b.n	800e434 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e410:	f7fb faa4 	bl	800995c <HAL_GetTick>
 800e414:	4602      	mov	r2, r0
 800e416:	69bb      	ldr	r3, [r7, #24]
 800e418:	1ad3      	subs	r3, r2, r3
 800e41a:	683a      	ldr	r2, [r7, #0]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d803      	bhi.n	800e428 <HAL_SPI_Transmit+0x1f4>
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e426:	d102      	bne.n	800e42e <HAL_SPI_Transmit+0x1fa>
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d102      	bne.n	800e434 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e42e:	2303      	movs	r3, #3
 800e430:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e432:	e026      	b.n	800e482 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e438:	b29b      	uxth	r3, r3
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d1cd      	bne.n	800e3da <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e43e:	69ba      	ldr	r2, [r7, #24]
 800e440:	6839      	ldr	r1, [r7, #0]
 800e442:	68f8      	ldr	r0, [r7, #12]
 800e444:	f000 fba4 	bl	800eb90 <SPI_EndRxTxTransaction>
 800e448:	4603      	mov	r3, r0
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d002      	beq.n	800e454 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	2220      	movs	r2, #32
 800e452:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	689b      	ldr	r3, [r3, #8]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d10a      	bne.n	800e472 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e45c:	2300      	movs	r3, #0
 800e45e:	613b      	str	r3, [r7, #16]
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	68db      	ldr	r3, [r3, #12]
 800e466:	613b      	str	r3, [r7, #16]
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	689b      	ldr	r3, [r3, #8]
 800e46e:	613b      	str	r3, [r7, #16]
 800e470:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e476:	2b00      	cmp	r3, #0
 800e478:	d002      	beq.n	800e480 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e47a:	2301      	movs	r3, #1
 800e47c:	77fb      	strb	r3, [r7, #31]
 800e47e:	e000      	b.n	800e482 <HAL_SPI_Transmit+0x24e>
  }

error:
 800e480:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2201      	movs	r2, #1
 800e486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	2200      	movs	r2, #0
 800e48e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e492:	7ffb      	ldrb	r3, [r7, #31]
}
 800e494:	4618      	mov	r0, r3
 800e496:	3720      	adds	r7, #32
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b088      	sub	sp, #32
 800e4a0:	af02      	add	r7, sp, #8
 800e4a2:	60f8      	str	r0, [r7, #12]
 800e4a4:	60b9      	str	r1, [r7, #8]
 800e4a6:	603b      	str	r3, [r7, #0]
 800e4a8:	4613      	mov	r3, r2
 800e4aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e4b8:	d112      	bne.n	800e4e0 <HAL_SPI_Receive+0x44>
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	689b      	ldr	r3, [r3, #8]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d10e      	bne.n	800e4e0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	2204      	movs	r2, #4
 800e4c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e4ca:	88fa      	ldrh	r2, [r7, #6]
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	9300      	str	r3, [sp, #0]
 800e4d0:	4613      	mov	r3, r2
 800e4d2:	68ba      	ldr	r2, [r7, #8]
 800e4d4:	68b9      	ldr	r1, [r7, #8]
 800e4d6:	68f8      	ldr	r0, [r7, #12]
 800e4d8:	f000 f8e9 	bl	800e6ae <HAL_SPI_TransmitReceive>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	e0e2      	b.n	800e6a6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e4e6:	2b01      	cmp	r3, #1
 800e4e8:	d101      	bne.n	800e4ee <HAL_SPI_Receive+0x52>
 800e4ea:	2302      	movs	r3, #2
 800e4ec:	e0db      	b.n	800e6a6 <HAL_SPI_Receive+0x20a>
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e4f6:	f7fb fa31 	bl	800995c <HAL_GetTick>
 800e4fa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e502:	b2db      	uxtb	r3, r3
 800e504:	2b01      	cmp	r3, #1
 800e506:	d002      	beq.n	800e50e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e508:	2302      	movs	r3, #2
 800e50a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e50c:	e0c2      	b.n	800e694 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d002      	beq.n	800e51a <HAL_SPI_Receive+0x7e>
 800e514:	88fb      	ldrh	r3, [r7, #6]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d102      	bne.n	800e520 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e51a:	2301      	movs	r3, #1
 800e51c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e51e:	e0b9      	b.n	800e694 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	2204      	movs	r2, #4
 800e524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	2200      	movs	r2, #0
 800e52c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	68ba      	ldr	r2, [r7, #8]
 800e532:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	88fa      	ldrh	r2, [r7, #6]
 800e538:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	88fa      	ldrh	r2, [r7, #6]
 800e53e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2200      	movs	r2, #0
 800e544:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2200      	movs	r2, #0
 800e54a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	2200      	movs	r2, #0
 800e550:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	2200      	movs	r2, #0
 800e556:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2200      	movs	r2, #0
 800e55c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	689b      	ldr	r3, [r3, #8]
 800e562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e566:	d107      	bne.n	800e578 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	681a      	ldr	r2, [r3, #0]
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e576:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e582:	2b40      	cmp	r3, #64	; 0x40
 800e584:	d007      	beq.n	800e596 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	681a      	ldr	r2, [r3, #0]
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e594:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	68db      	ldr	r3, [r3, #12]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d162      	bne.n	800e664 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e59e:	e02e      	b.n	800e5fe <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	689b      	ldr	r3, [r3, #8]
 800e5a6:	f003 0301 	and.w	r3, r3, #1
 800e5aa:	2b01      	cmp	r3, #1
 800e5ac:	d115      	bne.n	800e5da <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f103 020c 	add.w	r2, r3, #12
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ba:	7812      	ldrb	r2, [r2, #0]
 800e5bc:	b2d2      	uxtb	r2, r2
 800e5be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5c4:	1c5a      	adds	r2, r3, #1
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	3b01      	subs	r3, #1
 800e5d2:	b29a      	uxth	r2, r3
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e5d8:	e011      	b.n	800e5fe <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e5da:	f7fb f9bf 	bl	800995c <HAL_GetTick>
 800e5de:	4602      	mov	r2, r0
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	1ad3      	subs	r3, r2, r3
 800e5e4:	683a      	ldr	r2, [r7, #0]
 800e5e6:	429a      	cmp	r2, r3
 800e5e8:	d803      	bhi.n	800e5f2 <HAL_SPI_Receive+0x156>
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5f0:	d102      	bne.n	800e5f8 <HAL_SPI_Receive+0x15c>
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d102      	bne.n	800e5fe <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e5f8:	2303      	movs	r3, #3
 800e5fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e5fc:	e04a      	b.n	800e694 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e602:	b29b      	uxth	r3, r3
 800e604:	2b00      	cmp	r3, #0
 800e606:	d1cb      	bne.n	800e5a0 <HAL_SPI_Receive+0x104>
 800e608:	e031      	b.n	800e66e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	689b      	ldr	r3, [r3, #8]
 800e610:	f003 0301 	and.w	r3, r3, #1
 800e614:	2b01      	cmp	r3, #1
 800e616:	d113      	bne.n	800e640 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	68da      	ldr	r2, [r3, #12]
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e622:	b292      	uxth	r2, r2
 800e624:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e62a:	1c9a      	adds	r2, r3, #2
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e634:	b29b      	uxth	r3, r3
 800e636:	3b01      	subs	r3, #1
 800e638:	b29a      	uxth	r2, r3
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e63e:	e011      	b.n	800e664 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e640:	f7fb f98c 	bl	800995c <HAL_GetTick>
 800e644:	4602      	mov	r2, r0
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	1ad3      	subs	r3, r2, r3
 800e64a:	683a      	ldr	r2, [r7, #0]
 800e64c:	429a      	cmp	r2, r3
 800e64e:	d803      	bhi.n	800e658 <HAL_SPI_Receive+0x1bc>
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e656:	d102      	bne.n	800e65e <HAL_SPI_Receive+0x1c2>
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d102      	bne.n	800e664 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800e65e:	2303      	movs	r3, #3
 800e660:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e662:	e017      	b.n	800e694 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e668:	b29b      	uxth	r3, r3
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d1cd      	bne.n	800e60a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e66e:	693a      	ldr	r2, [r7, #16]
 800e670:	6839      	ldr	r1, [r7, #0]
 800e672:	68f8      	ldr	r0, [r7, #12]
 800e674:	f000 fa27 	bl	800eac6 <SPI_EndRxTransaction>
 800e678:	4603      	mov	r3, r0
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d002      	beq.n	800e684 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	2220      	movs	r2, #32
 800e682:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d002      	beq.n	800e692 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800e68c:	2301      	movs	r3, #1
 800e68e:	75fb      	strb	r3, [r7, #23]
 800e690:	e000      	b.n	800e694 <HAL_SPI_Receive+0x1f8>
  }

error :
 800e692:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2201      	movs	r2, #1
 800e698:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e6a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3718      	adds	r7, #24
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}

0800e6ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e6ae:	b580      	push	{r7, lr}
 800e6b0:	b08c      	sub	sp, #48	; 0x30
 800e6b2:	af00      	add	r7, sp, #0
 800e6b4:	60f8      	str	r0, [r7, #12]
 800e6b6:	60b9      	str	r1, [r7, #8]
 800e6b8:	607a      	str	r2, [r7, #4]
 800e6ba:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e6bc:	2301      	movs	r3, #1
 800e6be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e6cc:	2b01      	cmp	r3, #1
 800e6ce:	d101      	bne.n	800e6d4 <HAL_SPI_TransmitReceive+0x26>
 800e6d0:	2302      	movs	r3, #2
 800e6d2:	e18a      	b.n	800e9ea <HAL_SPI_TransmitReceive+0x33c>
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e6dc:	f7fb f93e 	bl	800995c <HAL_GetTick>
 800e6e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e6e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	685b      	ldr	r3, [r3, #4]
 800e6f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e6f2:	887b      	ldrh	r3, [r7, #2]
 800e6f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e6f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d00f      	beq.n	800e71e <HAL_SPI_TransmitReceive+0x70>
 800e6fe:	69fb      	ldr	r3, [r7, #28]
 800e700:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e704:	d107      	bne.n	800e716 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	689b      	ldr	r3, [r3, #8]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d103      	bne.n	800e716 <HAL_SPI_TransmitReceive+0x68>
 800e70e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e712:	2b04      	cmp	r3, #4
 800e714:	d003      	beq.n	800e71e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e716:	2302      	movs	r3, #2
 800e718:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e71c:	e15b      	b.n	800e9d6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d005      	beq.n	800e730 <HAL_SPI_TransmitReceive+0x82>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d002      	beq.n	800e730 <HAL_SPI_TransmitReceive+0x82>
 800e72a:	887b      	ldrh	r3, [r7, #2]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d103      	bne.n	800e738 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e730:	2301      	movs	r3, #1
 800e732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e736:	e14e      	b.n	800e9d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	2b04      	cmp	r3, #4
 800e742:	d003      	beq.n	800e74c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	2205      	movs	r2, #5
 800e748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	2200      	movs	r2, #0
 800e750:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	887a      	ldrh	r2, [r7, #2]
 800e75c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	887a      	ldrh	r2, [r7, #2]
 800e762:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	68ba      	ldr	r2, [r7, #8]
 800e768:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	887a      	ldrh	r2, [r7, #2]
 800e76e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	887a      	ldrh	r2, [r7, #2]
 800e774:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	2200      	movs	r2, #0
 800e77a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	2200      	movs	r2, #0
 800e780:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e78c:	2b40      	cmp	r3, #64	; 0x40
 800e78e:	d007      	beq.n	800e7a0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	681a      	ldr	r2, [r3, #0]
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e79e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	68db      	ldr	r3, [r3, #12]
 800e7a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e7a8:	d178      	bne.n	800e89c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d002      	beq.n	800e7b8 <HAL_SPI_TransmitReceive+0x10a>
 800e7b2:	8b7b      	ldrh	r3, [r7, #26]
 800e7b4:	2b01      	cmp	r3, #1
 800e7b6:	d166      	bne.n	800e886 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7bc:	881a      	ldrh	r2, [r3, #0]
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7c8:	1c9a      	adds	r2, r3, #2
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7d2:	b29b      	uxth	r3, r3
 800e7d4:	3b01      	subs	r3, #1
 800e7d6:	b29a      	uxth	r2, r3
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e7dc:	e053      	b.n	800e886 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	689b      	ldr	r3, [r3, #8]
 800e7e4:	f003 0302 	and.w	r3, r3, #2
 800e7e8:	2b02      	cmp	r3, #2
 800e7ea:	d11b      	bne.n	800e824 <HAL_SPI_TransmitReceive+0x176>
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d016      	beq.n	800e824 <HAL_SPI_TransmitReceive+0x176>
 800e7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d113      	bne.n	800e824 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e800:	881a      	ldrh	r2, [r3, #0]
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e80c:	1c9a      	adds	r2, r3, #2
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e816:	b29b      	uxth	r3, r3
 800e818:	3b01      	subs	r3, #1
 800e81a:	b29a      	uxth	r2, r3
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e820:	2300      	movs	r3, #0
 800e822:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	689b      	ldr	r3, [r3, #8]
 800e82a:	f003 0301 	and.w	r3, r3, #1
 800e82e:	2b01      	cmp	r3, #1
 800e830:	d119      	bne.n	800e866 <HAL_SPI_TransmitReceive+0x1b8>
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e836:	b29b      	uxth	r3, r3
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d014      	beq.n	800e866 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	68da      	ldr	r2, [r3, #12]
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e846:	b292      	uxth	r2, r2
 800e848:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e84e:	1c9a      	adds	r2, r3, #2
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e858:	b29b      	uxth	r3, r3
 800e85a:	3b01      	subs	r3, #1
 800e85c:	b29a      	uxth	r2, r3
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e862:	2301      	movs	r3, #1
 800e864:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e866:	f7fb f879 	bl	800995c <HAL_GetTick>
 800e86a:	4602      	mov	r2, r0
 800e86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86e:	1ad3      	subs	r3, r2, r3
 800e870:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e872:	429a      	cmp	r2, r3
 800e874:	d807      	bhi.n	800e886 <HAL_SPI_TransmitReceive+0x1d8>
 800e876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e87c:	d003      	beq.n	800e886 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e87e:	2303      	movs	r3, #3
 800e880:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e884:	e0a7      	b.n	800e9d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e88a:	b29b      	uxth	r3, r3
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d1a6      	bne.n	800e7de <HAL_SPI_TransmitReceive+0x130>
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e894:	b29b      	uxth	r3, r3
 800e896:	2b00      	cmp	r3, #0
 800e898:	d1a1      	bne.n	800e7de <HAL_SPI_TransmitReceive+0x130>
 800e89a:	e07c      	b.n	800e996 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d002      	beq.n	800e8aa <HAL_SPI_TransmitReceive+0x1fc>
 800e8a4:	8b7b      	ldrh	r3, [r7, #26]
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d16b      	bne.n	800e982 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	330c      	adds	r3, #12
 800e8b4:	7812      	ldrb	r2, [r2, #0]
 800e8b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8bc:	1c5a      	adds	r2, r3, #1
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e8c6:	b29b      	uxth	r3, r3
 800e8c8:	3b01      	subs	r3, #1
 800e8ca:	b29a      	uxth	r2, r3
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e8d0:	e057      	b.n	800e982 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	689b      	ldr	r3, [r3, #8]
 800e8d8:	f003 0302 	and.w	r3, r3, #2
 800e8dc:	2b02      	cmp	r3, #2
 800e8de:	d11c      	bne.n	800e91a <HAL_SPI_TransmitReceive+0x26c>
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e8e4:	b29b      	uxth	r3, r3
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d017      	beq.n	800e91a <HAL_SPI_TransmitReceive+0x26c>
 800e8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ec:	2b01      	cmp	r3, #1
 800e8ee:	d114      	bne.n	800e91a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	330c      	adds	r3, #12
 800e8fa:	7812      	ldrb	r2, [r2, #0]
 800e8fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e902:	1c5a      	adds	r2, r3, #1
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e90c:	b29b      	uxth	r3, r3
 800e90e:	3b01      	subs	r3, #1
 800e910:	b29a      	uxth	r2, r3
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e916:	2300      	movs	r3, #0
 800e918:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	689b      	ldr	r3, [r3, #8]
 800e920:	f003 0301 	and.w	r3, r3, #1
 800e924:	2b01      	cmp	r3, #1
 800e926:	d119      	bne.n	800e95c <HAL_SPI_TransmitReceive+0x2ae>
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e92c:	b29b      	uxth	r3, r3
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d014      	beq.n	800e95c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	68da      	ldr	r2, [r3, #12]
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e93c:	b2d2      	uxtb	r2, r2
 800e93e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e944:	1c5a      	adds	r2, r3, #1
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e94e:	b29b      	uxth	r3, r3
 800e950:	3b01      	subs	r3, #1
 800e952:	b29a      	uxth	r2, r3
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e958:	2301      	movs	r3, #1
 800e95a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e95c:	f7fa fffe 	bl	800995c <HAL_GetTick>
 800e960:	4602      	mov	r2, r0
 800e962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e964:	1ad3      	subs	r3, r2, r3
 800e966:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e968:	429a      	cmp	r2, r3
 800e96a:	d803      	bhi.n	800e974 <HAL_SPI_TransmitReceive+0x2c6>
 800e96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e972:	d102      	bne.n	800e97a <HAL_SPI_TransmitReceive+0x2cc>
 800e974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e976:	2b00      	cmp	r3, #0
 800e978:	d103      	bne.n	800e982 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e97a:	2303      	movs	r3, #3
 800e97c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e980:	e029      	b.n	800e9d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e986:	b29b      	uxth	r3, r3
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d1a2      	bne.n	800e8d2 <HAL_SPI_TransmitReceive+0x224>
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e990:	b29b      	uxth	r3, r3
 800e992:	2b00      	cmp	r3, #0
 800e994:	d19d      	bne.n	800e8d2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e998:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e99a:	68f8      	ldr	r0, [r7, #12]
 800e99c:	f000 f8f8 	bl	800eb90 <SPI_EndRxTxTransaction>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d006      	beq.n	800e9b4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2220      	movs	r2, #32
 800e9b0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e9b2:	e010      	b.n	800e9d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	689b      	ldr	r3, [r3, #8]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d10b      	bne.n	800e9d4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e9bc:	2300      	movs	r3, #0
 800e9be:	617b      	str	r3, [r7, #20]
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	68db      	ldr	r3, [r3, #12]
 800e9c6:	617b      	str	r3, [r7, #20]
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	689b      	ldr	r3, [r3, #8]
 800e9ce:	617b      	str	r3, [r7, #20]
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	e000      	b.n	800e9d6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e9d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2201      	movs	r2, #1
 800e9da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e9e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3730      	adds	r7, #48	; 0x30
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}

0800e9f2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e9f2:	b580      	push	{r7, lr}
 800e9f4:	b084      	sub	sp, #16
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	60f8      	str	r0, [r7, #12]
 800e9fa:	60b9      	str	r1, [r7, #8]
 800e9fc:	603b      	str	r3, [r7, #0]
 800e9fe:	4613      	mov	r3, r2
 800ea00:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ea02:	e04c      	b.n	800ea9e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea0a:	d048      	beq.n	800ea9e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ea0c:	f7fa ffa6 	bl	800995c <HAL_GetTick>
 800ea10:	4602      	mov	r2, r0
 800ea12:	69bb      	ldr	r3, [r7, #24]
 800ea14:	1ad3      	subs	r3, r2, r3
 800ea16:	683a      	ldr	r2, [r7, #0]
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	d902      	bls.n	800ea22 <SPI_WaitFlagStateUntilTimeout+0x30>
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d13d      	bne.n	800ea9e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	685a      	ldr	r2, [r3, #4]
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ea30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea3a:	d111      	bne.n	800ea60 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	689b      	ldr	r3, [r3, #8]
 800ea40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea44:	d004      	beq.n	800ea50 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	689b      	ldr	r3, [r3, #8]
 800ea4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea4e:	d107      	bne.n	800ea60 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	681a      	ldr	r2, [r3, #0]
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea68:	d10f      	bne.n	800ea8a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	681a      	ldr	r2, [r3, #0]
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ea78:	601a      	str	r2, [r3, #0]
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	681a      	ldr	r2, [r3, #0]
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ea88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2201      	movs	r2, #1
 800ea8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2200      	movs	r2, #0
 800ea96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ea9a:	2303      	movs	r3, #3
 800ea9c:	e00f      	b.n	800eabe <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	689a      	ldr	r2, [r3, #8]
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	4013      	ands	r3, r2
 800eaa8:	68ba      	ldr	r2, [r7, #8]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	bf0c      	ite	eq
 800eaae:	2301      	moveq	r3, #1
 800eab0:	2300      	movne	r3, #0
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	461a      	mov	r2, r3
 800eab6:	79fb      	ldrb	r3, [r7, #7]
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d1a3      	bne.n	800ea04 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800eabc:	2300      	movs	r3, #0
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3710      	adds	r7, #16
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}

0800eac6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800eac6:	b580      	push	{r7, lr}
 800eac8:	b086      	sub	sp, #24
 800eaca:	af02      	add	r7, sp, #8
 800eacc:	60f8      	str	r0, [r7, #12]
 800eace:	60b9      	str	r1, [r7, #8]
 800ead0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eada:	d111      	bne.n	800eb00 <SPI_EndRxTransaction+0x3a>
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	689b      	ldr	r3, [r3, #8]
 800eae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eae4:	d004      	beq.n	800eaf0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	689b      	ldr	r3, [r3, #8]
 800eaea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eaee:	d107      	bne.n	800eb00 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	681a      	ldr	r2, [r3, #0]
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eafe:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	685b      	ldr	r3, [r3, #4]
 800eb04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eb08:	d12a      	bne.n	800eb60 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	689b      	ldr	r3, [r3, #8]
 800eb0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb12:	d012      	beq.n	800eb3a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	9300      	str	r3, [sp, #0]
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	2180      	movs	r1, #128	; 0x80
 800eb1e:	68f8      	ldr	r0, [r7, #12]
 800eb20:	f7ff ff67 	bl	800e9f2 <SPI_WaitFlagStateUntilTimeout>
 800eb24:	4603      	mov	r3, r0
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d02d      	beq.n	800eb86 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb2e:	f043 0220 	orr.w	r2, r3, #32
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800eb36:	2303      	movs	r3, #3
 800eb38:	e026      	b.n	800eb88 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	9300      	str	r3, [sp, #0]
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	2200      	movs	r2, #0
 800eb42:	2101      	movs	r1, #1
 800eb44:	68f8      	ldr	r0, [r7, #12]
 800eb46:	f7ff ff54 	bl	800e9f2 <SPI_WaitFlagStateUntilTimeout>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d01a      	beq.n	800eb86 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb54:	f043 0220 	orr.w	r2, r3, #32
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800eb5c:	2303      	movs	r3, #3
 800eb5e:	e013      	b.n	800eb88 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	9300      	str	r3, [sp, #0]
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	2200      	movs	r2, #0
 800eb68:	2101      	movs	r1, #1
 800eb6a:	68f8      	ldr	r0, [r7, #12]
 800eb6c:	f7ff ff41 	bl	800e9f2 <SPI_WaitFlagStateUntilTimeout>
 800eb70:	4603      	mov	r3, r0
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d007      	beq.n	800eb86 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb7a:	f043 0220 	orr.w	r2, r3, #32
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800eb82:	2303      	movs	r3, #3
 800eb84:	e000      	b.n	800eb88 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800eb86:	2300      	movs	r3, #0
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3710      	adds	r7, #16
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}

0800eb90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b088      	sub	sp, #32
 800eb94:	af02      	add	r7, sp, #8
 800eb96:	60f8      	str	r0, [r7, #12]
 800eb98:	60b9      	str	r1, [r7, #8]
 800eb9a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800eb9c:	4b1b      	ldr	r3, [pc, #108]	; (800ec0c <SPI_EndRxTxTransaction+0x7c>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	4a1b      	ldr	r2, [pc, #108]	; (800ec10 <SPI_EndRxTxTransaction+0x80>)
 800eba2:	fba2 2303 	umull	r2, r3, r2, r3
 800eba6:	0d5b      	lsrs	r3, r3, #21
 800eba8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ebac:	fb02 f303 	mul.w	r3, r2, r3
 800ebb0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	685b      	ldr	r3, [r3, #4]
 800ebb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ebba:	d112      	bne.n	800ebe2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	9300      	str	r3, [sp, #0]
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	2180      	movs	r1, #128	; 0x80
 800ebc6:	68f8      	ldr	r0, [r7, #12]
 800ebc8:	f7ff ff13 	bl	800e9f2 <SPI_WaitFlagStateUntilTimeout>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d016      	beq.n	800ec00 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebd6:	f043 0220 	orr.w	r2, r3, #32
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ebde:	2303      	movs	r3, #3
 800ebe0:	e00f      	b.n	800ec02 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d00a      	beq.n	800ebfe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	3b01      	subs	r3, #1
 800ebec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	689b      	ldr	r3, [r3, #8]
 800ebf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebf8:	2b80      	cmp	r3, #128	; 0x80
 800ebfa:	d0f2      	beq.n	800ebe2 <SPI_EndRxTxTransaction+0x52>
 800ebfc:	e000      	b.n	800ec00 <SPI_EndRxTxTransaction+0x70>
        break;
 800ebfe:	bf00      	nop
  }

  return HAL_OK;
 800ec00:	2300      	movs	r3, #0
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3718      	adds	r7, #24
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}
 800ec0a:	bf00      	nop
 800ec0c:	20000000 	.word	0x20000000
 800ec10:	165e9f81 	.word	0x165e9f81

0800ec14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d101      	bne.n	800ec26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ec22:	2301      	movs	r3, #1
 800ec24:	e01d      	b.n	800ec62 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec2c:	b2db      	uxtb	r3, r3
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d106      	bne.n	800ec40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2200      	movs	r2, #0
 800ec36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f7f8 f9fc 	bl	8007038 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2202      	movs	r2, #2
 800ec44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681a      	ldr	r2, [r3, #0]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	3304      	adds	r3, #4
 800ec50:	4619      	mov	r1, r3
 800ec52:	4610      	mov	r0, r2
 800ec54:	f000 fb56 	bl	800f304 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2201      	movs	r2, #1
 800ec5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec60:	2300      	movs	r3, #0
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3708      	adds	r7, #8
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}

0800ec6a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ec6a:	b480      	push	{r7}
 800ec6c:	b085      	sub	sp, #20
 800ec6e:	af00      	add	r7, sp, #0
 800ec70:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	68da      	ldr	r2, [r3, #12]
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	f042 0201 	orr.w	r2, r2, #1
 800ec80:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	689b      	ldr	r3, [r3, #8]
 800ec88:	f003 0307 	and.w	r3, r3, #7
 800ec8c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	2b06      	cmp	r3, #6
 800ec92:	d007      	beq.n	800eca4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	681a      	ldr	r2, [r3, #0]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	f042 0201 	orr.w	r2, r2, #1
 800eca2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800eca4:	2300      	movs	r3, #0
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3714      	adds	r7, #20
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr

0800ecb2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ecb2:	b580      	push	{r7, lr}
 800ecb4:	b082      	sub	sp, #8
 800ecb6:	af00      	add	r7, sp, #0
 800ecb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d101      	bne.n	800ecc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	e01d      	b.n	800ed00 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ecca:	b2db      	uxtb	r3, r3
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d106      	bne.n	800ecde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	f7f8 f939 	bl	8006f50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2202      	movs	r2, #2
 800ece2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681a      	ldr	r2, [r3, #0]
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	3304      	adds	r3, #4
 800ecee:	4619      	mov	r1, r3
 800ecf0:	4610      	mov	r0, r2
 800ecf2:	f000 fb07 	bl	800f304 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2201      	movs	r2, #1
 800ecfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ecfe:	2300      	movs	r3, #0
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3708      	adds	r7, #8
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b084      	sub	sp, #16
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	2201      	movs	r2, #1
 800ed18:	6839      	ldr	r1, [r7, #0]
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f000 fd42 	bl	800f7a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	4a15      	ldr	r2, [pc, #84]	; (800ed7c <HAL_TIM_PWM_Start+0x74>)
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d004      	beq.n	800ed34 <HAL_TIM_PWM_Start+0x2c>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	4a14      	ldr	r2, [pc, #80]	; (800ed80 <HAL_TIM_PWM_Start+0x78>)
 800ed30:	4293      	cmp	r3, r2
 800ed32:	d101      	bne.n	800ed38 <HAL_TIM_PWM_Start+0x30>
 800ed34:	2301      	movs	r3, #1
 800ed36:	e000      	b.n	800ed3a <HAL_TIM_PWM_Start+0x32>
 800ed38:	2300      	movs	r3, #0
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d007      	beq.n	800ed4e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ed4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	689b      	ldr	r3, [r3, #8]
 800ed54:	f003 0307 	and.w	r3, r3, #7
 800ed58:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	2b06      	cmp	r3, #6
 800ed5e:	d007      	beq.n	800ed70 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	681a      	ldr	r2, [r3, #0]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	f042 0201 	orr.w	r2, r2, #1
 800ed6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ed70:	2300      	movs	r3, #0
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3710      	adds	r7, #16
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}
 800ed7a:	bf00      	nop
 800ed7c:	40010000 	.word	0x40010000
 800ed80:	40010400 	.word	0x40010400

0800ed84 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b086      	sub	sp, #24
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
 800ed8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d101      	bne.n	800ed98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ed94:	2301      	movs	r3, #1
 800ed96:	e083      	b.n	800eea0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed9e:	b2db      	uxtb	r3, r3
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d106      	bne.n	800edb2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2200      	movs	r2, #0
 800eda8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f7f8 f9d3 	bl	8007158 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2202      	movs	r2, #2
 800edb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	689b      	ldr	r3, [r3, #8]
 800edc0:	687a      	ldr	r2, [r7, #4]
 800edc2:	6812      	ldr	r2, [r2, #0]
 800edc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800edc8:	f023 0307 	bic.w	r3, r3, #7
 800edcc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681a      	ldr	r2, [r3, #0]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	3304      	adds	r3, #4
 800edd6:	4619      	mov	r1, r3
 800edd8:	4610      	mov	r0, r2
 800edda:	f000 fa93 	bl	800f304 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	689b      	ldr	r3, [r3, #8]
 800ede4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	699b      	ldr	r3, [r3, #24]
 800edec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	6a1b      	ldr	r3, [r3, #32]
 800edf4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	697a      	ldr	r2, [r7, #20]
 800edfc:	4313      	orrs	r3, r2
 800edfe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ee06:	f023 0303 	bic.w	r3, r3, #3
 800ee0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	689a      	ldr	r2, [r3, #8]
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	699b      	ldr	r3, [r3, #24]
 800ee14:	021b      	lsls	r3, r3, #8
 800ee16:	4313      	orrs	r3, r2
 800ee18:	693a      	ldr	r2, [r7, #16]
 800ee1a:	4313      	orrs	r3, r2
 800ee1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ee24:	f023 030c 	bic.w	r3, r3, #12
 800ee28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ee2a:	693b      	ldr	r3, [r7, #16]
 800ee2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ee30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ee34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	68da      	ldr	r2, [r3, #12]
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	69db      	ldr	r3, [r3, #28]
 800ee3e:	021b      	lsls	r3, r3, #8
 800ee40:	4313      	orrs	r3, r2
 800ee42:	693a      	ldr	r2, [r7, #16]
 800ee44:	4313      	orrs	r3, r2
 800ee46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	691b      	ldr	r3, [r3, #16]
 800ee4c:	011a      	lsls	r2, r3, #4
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	6a1b      	ldr	r3, [r3, #32]
 800ee52:	031b      	lsls	r3, r3, #12
 800ee54:	4313      	orrs	r3, r2
 800ee56:	693a      	ldr	r2, [r7, #16]
 800ee58:	4313      	orrs	r3, r2
 800ee5a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ee62:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ee6a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	685a      	ldr	r2, [r3, #4]
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	695b      	ldr	r3, [r3, #20]
 800ee74:	011b      	lsls	r3, r3, #4
 800ee76:	4313      	orrs	r3, r2
 800ee78:	68fa      	ldr	r2, [r7, #12]
 800ee7a:	4313      	orrs	r3, r2
 800ee7c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	697a      	ldr	r2, [r7, #20]
 800ee84:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	693a      	ldr	r2, [r7, #16]
 800ee8c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	68fa      	ldr	r2, [r7, #12]
 800ee94:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	2201      	movs	r2, #1
 800ee9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ee9e:	2300      	movs	r3, #0
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	3718      	adds	r7, #24
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}

0800eea8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d003      	beq.n	800eec0 <HAL_TIM_Encoder_Start+0x18>
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	2b04      	cmp	r3, #4
 800eebc:	d008      	beq.n	800eed0 <HAL_TIM_Encoder_Start+0x28>
 800eebe:	e00f      	b.n	800eee0 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	2201      	movs	r2, #1
 800eec6:	2100      	movs	r1, #0
 800eec8:	4618      	mov	r0, r3
 800eeca:	f000 fc6b 	bl	800f7a4 <TIM_CCxChannelCmd>
      break;
 800eece:	e016      	b.n	800eefe <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	2201      	movs	r2, #1
 800eed6:	2104      	movs	r1, #4
 800eed8:	4618      	mov	r0, r3
 800eeda:	f000 fc63 	bl	800f7a4 <TIM_CCxChannelCmd>
      break;
 800eede:	e00e      	b.n	800eefe <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	2201      	movs	r2, #1
 800eee6:	2100      	movs	r1, #0
 800eee8:	4618      	mov	r0, r3
 800eeea:	f000 fc5b 	bl	800f7a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	2201      	movs	r2, #1
 800eef4:	2104      	movs	r1, #4
 800eef6:	4618      	mov	r0, r3
 800eef8:	f000 fc54 	bl	800f7a4 <TIM_CCxChannelCmd>
      break;
 800eefc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	681a      	ldr	r2, [r3, #0]
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	f042 0201 	orr.w	r2, r2, #1
 800ef0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ef0e:	2300      	movs	r3, #0
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3708      	adds	r7, #8
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b082      	sub	sp, #8
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	691b      	ldr	r3, [r3, #16]
 800ef26:	f003 0302 	and.w	r3, r3, #2
 800ef2a:	2b02      	cmp	r3, #2
 800ef2c:	d122      	bne.n	800ef74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	68db      	ldr	r3, [r3, #12]
 800ef34:	f003 0302 	and.w	r3, r3, #2
 800ef38:	2b02      	cmp	r3, #2
 800ef3a:	d11b      	bne.n	800ef74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	f06f 0202 	mvn.w	r2, #2
 800ef44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2201      	movs	r2, #1
 800ef4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	699b      	ldr	r3, [r3, #24]
 800ef52:	f003 0303 	and.w	r3, r3, #3
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d003      	beq.n	800ef62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f000 f9b4 	bl	800f2c8 <HAL_TIM_IC_CaptureCallback>
 800ef60:	e005      	b.n	800ef6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f000 f9a6 	bl	800f2b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f000 f9b7 	bl	800f2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2200      	movs	r2, #0
 800ef72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	691b      	ldr	r3, [r3, #16]
 800ef7a:	f003 0304 	and.w	r3, r3, #4
 800ef7e:	2b04      	cmp	r3, #4
 800ef80:	d122      	bne.n	800efc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	68db      	ldr	r3, [r3, #12]
 800ef88:	f003 0304 	and.w	r3, r3, #4
 800ef8c:	2b04      	cmp	r3, #4
 800ef8e:	d11b      	bne.n	800efc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f06f 0204 	mvn.w	r2, #4
 800ef98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2202      	movs	r2, #2
 800ef9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	699b      	ldr	r3, [r3, #24]
 800efa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d003      	beq.n	800efb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f000 f98a 	bl	800f2c8 <HAL_TIM_IC_CaptureCallback>
 800efb4:	e005      	b.n	800efc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800efb6:	6878      	ldr	r0, [r7, #4]
 800efb8:	f000 f97c 	bl	800f2b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efbc:	6878      	ldr	r0, [r7, #4]
 800efbe:	f000 f98d 	bl	800f2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2200      	movs	r2, #0
 800efc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	691b      	ldr	r3, [r3, #16]
 800efce:	f003 0308 	and.w	r3, r3, #8
 800efd2:	2b08      	cmp	r3, #8
 800efd4:	d122      	bne.n	800f01c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	68db      	ldr	r3, [r3, #12]
 800efdc:	f003 0308 	and.w	r3, r3, #8
 800efe0:	2b08      	cmp	r3, #8
 800efe2:	d11b      	bne.n	800f01c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	f06f 0208 	mvn.w	r2, #8
 800efec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2204      	movs	r2, #4
 800eff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	69db      	ldr	r3, [r3, #28]
 800effa:	f003 0303 	and.w	r3, r3, #3
 800effe:	2b00      	cmp	r3, #0
 800f000:	d003      	beq.n	800f00a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f000 f960 	bl	800f2c8 <HAL_TIM_IC_CaptureCallback>
 800f008:	e005      	b.n	800f016 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f000 f952 	bl	800f2b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f000 f963 	bl	800f2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2200      	movs	r2, #0
 800f01a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	691b      	ldr	r3, [r3, #16]
 800f022:	f003 0310 	and.w	r3, r3, #16
 800f026:	2b10      	cmp	r3, #16
 800f028:	d122      	bne.n	800f070 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	f003 0310 	and.w	r3, r3, #16
 800f034:	2b10      	cmp	r3, #16
 800f036:	d11b      	bne.n	800f070 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f06f 0210 	mvn.w	r2, #16
 800f040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2208      	movs	r2, #8
 800f046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	69db      	ldr	r3, [r3, #28]
 800f04e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f052:	2b00      	cmp	r3, #0
 800f054:	d003      	beq.n	800f05e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f000 f936 	bl	800f2c8 <HAL_TIM_IC_CaptureCallback>
 800f05c:	e005      	b.n	800f06a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f000 f928 	bl	800f2b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f000 f939 	bl	800f2dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2200      	movs	r2, #0
 800f06e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	691b      	ldr	r3, [r3, #16]
 800f076:	f003 0301 	and.w	r3, r3, #1
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d10e      	bne.n	800f09c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	68db      	ldr	r3, [r3, #12]
 800f084:	f003 0301 	and.w	r3, r3, #1
 800f088:	2b01      	cmp	r3, #1
 800f08a:	d107      	bne.n	800f09c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f06f 0201 	mvn.w	r2, #1
 800f094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f7f6 fd48 	bl	8005b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	691b      	ldr	r3, [r3, #16]
 800f0a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0a6:	2b80      	cmp	r3, #128	; 0x80
 800f0a8:	d10e      	bne.n	800f0c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	68db      	ldr	r3, [r3, #12]
 800f0b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0b4:	2b80      	cmp	r3, #128	; 0x80
 800f0b6:	d107      	bne.n	800f0c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f0c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f000 fc6c 	bl	800f9a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	691b      	ldr	r3, [r3, #16]
 800f0ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0d2:	2b40      	cmp	r3, #64	; 0x40
 800f0d4:	d10e      	bne.n	800f0f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	68db      	ldr	r3, [r3, #12]
 800f0dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0e0:	2b40      	cmp	r3, #64	; 0x40
 800f0e2:	d107      	bne.n	800f0f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f0ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f000 f8fe 	bl	800f2f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	691b      	ldr	r3, [r3, #16]
 800f0fa:	f003 0320 	and.w	r3, r3, #32
 800f0fe:	2b20      	cmp	r3, #32
 800f100:	d10e      	bne.n	800f120 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	68db      	ldr	r3, [r3, #12]
 800f108:	f003 0320 	and.w	r3, r3, #32
 800f10c:	2b20      	cmp	r3, #32
 800f10e:	d107      	bne.n	800f120 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	f06f 0220 	mvn.w	r2, #32
 800f118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f000 fc36 	bl	800f98c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f120:	bf00      	nop
 800f122:	3708      	adds	r7, #8
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}

0800f128 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b084      	sub	sp, #16
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	60f8      	str	r0, [r7, #12]
 800f130:	60b9      	str	r1, [r7, #8]
 800f132:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f13a:	2b01      	cmp	r3, #1
 800f13c:	d101      	bne.n	800f142 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f13e:	2302      	movs	r3, #2
 800f140:	e0b4      	b.n	800f2ac <HAL_TIM_PWM_ConfigChannel+0x184>
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	2201      	movs	r2, #1
 800f146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	2202      	movs	r2, #2
 800f14e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2b0c      	cmp	r3, #12
 800f156:	f200 809f 	bhi.w	800f298 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f15a:	a201      	add	r2, pc, #4	; (adr r2, 800f160 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f160:	0800f195 	.word	0x0800f195
 800f164:	0800f299 	.word	0x0800f299
 800f168:	0800f299 	.word	0x0800f299
 800f16c:	0800f299 	.word	0x0800f299
 800f170:	0800f1d5 	.word	0x0800f1d5
 800f174:	0800f299 	.word	0x0800f299
 800f178:	0800f299 	.word	0x0800f299
 800f17c:	0800f299 	.word	0x0800f299
 800f180:	0800f217 	.word	0x0800f217
 800f184:	0800f299 	.word	0x0800f299
 800f188:	0800f299 	.word	0x0800f299
 800f18c:	0800f299 	.word	0x0800f299
 800f190:	0800f257 	.word	0x0800f257
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	68b9      	ldr	r1, [r7, #8]
 800f19a:	4618      	mov	r0, r3
 800f19c:	f000 f952 	bl	800f444 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	699a      	ldr	r2, [r3, #24]
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f042 0208 	orr.w	r2, r2, #8
 800f1ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	699a      	ldr	r2, [r3, #24]
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	f022 0204 	bic.w	r2, r2, #4
 800f1be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	6999      	ldr	r1, [r3, #24]
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	691a      	ldr	r2, [r3, #16]
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	430a      	orrs	r2, r1
 800f1d0:	619a      	str	r2, [r3, #24]
      break;
 800f1d2:	e062      	b.n	800f29a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	68b9      	ldr	r1, [r7, #8]
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f000 f9a2 	bl	800f524 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	699a      	ldr	r2, [r3, #24]
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f1ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	699a      	ldr	r2, [r3, #24]
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f1fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	6999      	ldr	r1, [r3, #24]
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	691b      	ldr	r3, [r3, #16]
 800f20a:	021a      	lsls	r2, r3, #8
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	430a      	orrs	r2, r1
 800f212:	619a      	str	r2, [r3, #24]
      break;
 800f214:	e041      	b.n	800f29a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	68b9      	ldr	r1, [r7, #8]
 800f21c:	4618      	mov	r0, r3
 800f21e:	f000 f9f7 	bl	800f610 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	69da      	ldr	r2, [r3, #28]
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	f042 0208 	orr.w	r2, r2, #8
 800f230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	69da      	ldr	r2, [r3, #28]
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	f022 0204 	bic.w	r2, r2, #4
 800f240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	69d9      	ldr	r1, [r3, #28]
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	691a      	ldr	r2, [r3, #16]
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	430a      	orrs	r2, r1
 800f252:	61da      	str	r2, [r3, #28]
      break;
 800f254:	e021      	b.n	800f29a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	68b9      	ldr	r1, [r7, #8]
 800f25c:	4618      	mov	r0, r3
 800f25e:	f000 fa4b 	bl	800f6f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	69da      	ldr	r2, [r3, #28]
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	69da      	ldr	r2, [r3, #28]
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	69d9      	ldr	r1, [r3, #28]
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	691b      	ldr	r3, [r3, #16]
 800f28c:	021a      	lsls	r2, r3, #8
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	430a      	orrs	r2, r1
 800f294:	61da      	str	r2, [r3, #28]
      break;
 800f296:	e000      	b.n	800f29a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f298:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	2201      	movs	r2, #1
 800f29e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f2aa:	2300      	movs	r3, #0
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3710      	adds	r7, #16
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}

0800f2b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	b083      	sub	sp, #12
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f2bc:	bf00      	nop
 800f2be:	370c      	adds	r7, #12
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr

0800f2c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b083      	sub	sp, #12
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f2d0:	bf00      	nop
 800f2d2:	370c      	adds	r7, #12
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2da:	4770      	bx	lr

0800f2dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f2dc:	b480      	push	{r7}
 800f2de:	b083      	sub	sp, #12
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f2e4:	bf00      	nop
 800f2e6:	370c      	adds	r7, #12
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ee:	4770      	bx	lr

0800f2f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b083      	sub	sp, #12
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f2f8:	bf00      	nop
 800f2fa:	370c      	adds	r7, #12
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f302:	4770      	bx	lr

0800f304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f304:	b480      	push	{r7}
 800f306:	b085      	sub	sp, #20
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	4a40      	ldr	r2, [pc, #256]	; (800f418 <TIM_Base_SetConfig+0x114>)
 800f318:	4293      	cmp	r3, r2
 800f31a:	d013      	beq.n	800f344 <TIM_Base_SetConfig+0x40>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f322:	d00f      	beq.n	800f344 <TIM_Base_SetConfig+0x40>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	4a3d      	ldr	r2, [pc, #244]	; (800f41c <TIM_Base_SetConfig+0x118>)
 800f328:	4293      	cmp	r3, r2
 800f32a:	d00b      	beq.n	800f344 <TIM_Base_SetConfig+0x40>
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	4a3c      	ldr	r2, [pc, #240]	; (800f420 <TIM_Base_SetConfig+0x11c>)
 800f330:	4293      	cmp	r3, r2
 800f332:	d007      	beq.n	800f344 <TIM_Base_SetConfig+0x40>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	4a3b      	ldr	r2, [pc, #236]	; (800f424 <TIM_Base_SetConfig+0x120>)
 800f338:	4293      	cmp	r3, r2
 800f33a:	d003      	beq.n	800f344 <TIM_Base_SetConfig+0x40>
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	4a3a      	ldr	r2, [pc, #232]	; (800f428 <TIM_Base_SetConfig+0x124>)
 800f340:	4293      	cmp	r3, r2
 800f342:	d108      	bne.n	800f356 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f34a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	685b      	ldr	r3, [r3, #4]
 800f350:	68fa      	ldr	r2, [r7, #12]
 800f352:	4313      	orrs	r3, r2
 800f354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	4a2f      	ldr	r2, [pc, #188]	; (800f418 <TIM_Base_SetConfig+0x114>)
 800f35a:	4293      	cmp	r3, r2
 800f35c:	d02b      	beq.n	800f3b6 <TIM_Base_SetConfig+0xb2>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f364:	d027      	beq.n	800f3b6 <TIM_Base_SetConfig+0xb2>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	4a2c      	ldr	r2, [pc, #176]	; (800f41c <TIM_Base_SetConfig+0x118>)
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d023      	beq.n	800f3b6 <TIM_Base_SetConfig+0xb2>
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	4a2b      	ldr	r2, [pc, #172]	; (800f420 <TIM_Base_SetConfig+0x11c>)
 800f372:	4293      	cmp	r3, r2
 800f374:	d01f      	beq.n	800f3b6 <TIM_Base_SetConfig+0xb2>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	4a2a      	ldr	r2, [pc, #168]	; (800f424 <TIM_Base_SetConfig+0x120>)
 800f37a:	4293      	cmp	r3, r2
 800f37c:	d01b      	beq.n	800f3b6 <TIM_Base_SetConfig+0xb2>
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	4a29      	ldr	r2, [pc, #164]	; (800f428 <TIM_Base_SetConfig+0x124>)
 800f382:	4293      	cmp	r3, r2
 800f384:	d017      	beq.n	800f3b6 <TIM_Base_SetConfig+0xb2>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	4a28      	ldr	r2, [pc, #160]	; (800f42c <TIM_Base_SetConfig+0x128>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d013      	beq.n	800f3b6 <TIM_Base_SetConfig+0xb2>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	4a27      	ldr	r2, [pc, #156]	; (800f430 <TIM_Base_SetConfig+0x12c>)
 800f392:	4293      	cmp	r3, r2
 800f394:	d00f      	beq.n	800f3b6 <TIM_Base_SetConfig+0xb2>
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	4a26      	ldr	r2, [pc, #152]	; (800f434 <TIM_Base_SetConfig+0x130>)
 800f39a:	4293      	cmp	r3, r2
 800f39c:	d00b      	beq.n	800f3b6 <TIM_Base_SetConfig+0xb2>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	4a25      	ldr	r2, [pc, #148]	; (800f438 <TIM_Base_SetConfig+0x134>)
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	d007      	beq.n	800f3b6 <TIM_Base_SetConfig+0xb2>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	4a24      	ldr	r2, [pc, #144]	; (800f43c <TIM_Base_SetConfig+0x138>)
 800f3aa:	4293      	cmp	r3, r2
 800f3ac:	d003      	beq.n	800f3b6 <TIM_Base_SetConfig+0xb2>
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	4a23      	ldr	r2, [pc, #140]	; (800f440 <TIM_Base_SetConfig+0x13c>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d108      	bne.n	800f3c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f3bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	68db      	ldr	r3, [r3, #12]
 800f3c2:	68fa      	ldr	r2, [r7, #12]
 800f3c4:	4313      	orrs	r3, r2
 800f3c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	695b      	ldr	r3, [r3, #20]
 800f3d2:	4313      	orrs	r3, r2
 800f3d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	68fa      	ldr	r2, [r7, #12]
 800f3da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	689a      	ldr	r2, [r3, #8]
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	681a      	ldr	r2, [r3, #0]
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	4a0a      	ldr	r2, [pc, #40]	; (800f418 <TIM_Base_SetConfig+0x114>)
 800f3f0:	4293      	cmp	r3, r2
 800f3f2:	d003      	beq.n	800f3fc <TIM_Base_SetConfig+0xf8>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	4a0c      	ldr	r2, [pc, #48]	; (800f428 <TIM_Base_SetConfig+0x124>)
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	d103      	bne.n	800f404 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	691a      	ldr	r2, [r3, #16]
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2201      	movs	r2, #1
 800f408:	615a      	str	r2, [r3, #20]
}
 800f40a:	bf00      	nop
 800f40c:	3714      	adds	r7, #20
 800f40e:	46bd      	mov	sp, r7
 800f410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f414:	4770      	bx	lr
 800f416:	bf00      	nop
 800f418:	40010000 	.word	0x40010000
 800f41c:	40000400 	.word	0x40000400
 800f420:	40000800 	.word	0x40000800
 800f424:	40000c00 	.word	0x40000c00
 800f428:	40010400 	.word	0x40010400
 800f42c:	40014000 	.word	0x40014000
 800f430:	40014400 	.word	0x40014400
 800f434:	40014800 	.word	0x40014800
 800f438:	40001800 	.word	0x40001800
 800f43c:	40001c00 	.word	0x40001c00
 800f440:	40002000 	.word	0x40002000

0800f444 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f444:	b480      	push	{r7}
 800f446:	b087      	sub	sp, #28
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6a1b      	ldr	r3, [r3, #32]
 800f452:	f023 0201 	bic.w	r2, r3, #1
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6a1b      	ldr	r3, [r3, #32]
 800f45e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	685b      	ldr	r3, [r3, #4]
 800f464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	699b      	ldr	r3, [r3, #24]
 800f46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	f023 0303 	bic.w	r3, r3, #3
 800f47a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	68fa      	ldr	r2, [r7, #12]
 800f482:	4313      	orrs	r3, r2
 800f484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f486:	697b      	ldr	r3, [r7, #20]
 800f488:	f023 0302 	bic.w	r3, r3, #2
 800f48c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	689b      	ldr	r3, [r3, #8]
 800f492:	697a      	ldr	r2, [r7, #20]
 800f494:	4313      	orrs	r3, r2
 800f496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	4a20      	ldr	r2, [pc, #128]	; (800f51c <TIM_OC1_SetConfig+0xd8>)
 800f49c:	4293      	cmp	r3, r2
 800f49e:	d003      	beq.n	800f4a8 <TIM_OC1_SetConfig+0x64>
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	4a1f      	ldr	r2, [pc, #124]	; (800f520 <TIM_OC1_SetConfig+0xdc>)
 800f4a4:	4293      	cmp	r3, r2
 800f4a6:	d10c      	bne.n	800f4c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	f023 0308 	bic.w	r3, r3, #8
 800f4ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	68db      	ldr	r3, [r3, #12]
 800f4b4:	697a      	ldr	r2, [r7, #20]
 800f4b6:	4313      	orrs	r3, r2
 800f4b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f4ba:	697b      	ldr	r3, [r7, #20]
 800f4bc:	f023 0304 	bic.w	r3, r3, #4
 800f4c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	4a15      	ldr	r2, [pc, #84]	; (800f51c <TIM_OC1_SetConfig+0xd8>)
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	d003      	beq.n	800f4d2 <TIM_OC1_SetConfig+0x8e>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4a14      	ldr	r2, [pc, #80]	; (800f520 <TIM_OC1_SetConfig+0xdc>)
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	d111      	bne.n	800f4f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f4d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f4da:	693b      	ldr	r3, [r7, #16]
 800f4dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f4e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	695b      	ldr	r3, [r3, #20]
 800f4e6:	693a      	ldr	r2, [r7, #16]
 800f4e8:	4313      	orrs	r3, r2
 800f4ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	699b      	ldr	r3, [r3, #24]
 800f4f0:	693a      	ldr	r2, [r7, #16]
 800f4f2:	4313      	orrs	r3, r2
 800f4f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	693a      	ldr	r2, [r7, #16]
 800f4fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	68fa      	ldr	r2, [r7, #12]
 800f500:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	685a      	ldr	r2, [r3, #4]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	697a      	ldr	r2, [r7, #20]
 800f50e:	621a      	str	r2, [r3, #32]
}
 800f510:	bf00      	nop
 800f512:	371c      	adds	r7, #28
 800f514:	46bd      	mov	sp, r7
 800f516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51a:	4770      	bx	lr
 800f51c:	40010000 	.word	0x40010000
 800f520:	40010400 	.word	0x40010400

0800f524 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f524:	b480      	push	{r7}
 800f526:	b087      	sub	sp, #28
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6a1b      	ldr	r3, [r3, #32]
 800f532:	f023 0210 	bic.w	r2, r3, #16
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6a1b      	ldr	r3, [r3, #32]
 800f53e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	685b      	ldr	r3, [r3, #4]
 800f544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	699b      	ldr	r3, [r3, #24]
 800f54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f55a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	021b      	lsls	r3, r3, #8
 800f562:	68fa      	ldr	r2, [r7, #12]
 800f564:	4313      	orrs	r3, r2
 800f566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	f023 0320 	bic.w	r3, r3, #32
 800f56e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	689b      	ldr	r3, [r3, #8]
 800f574:	011b      	lsls	r3, r3, #4
 800f576:	697a      	ldr	r2, [r7, #20]
 800f578:	4313      	orrs	r3, r2
 800f57a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	4a22      	ldr	r2, [pc, #136]	; (800f608 <TIM_OC2_SetConfig+0xe4>)
 800f580:	4293      	cmp	r3, r2
 800f582:	d003      	beq.n	800f58c <TIM_OC2_SetConfig+0x68>
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	4a21      	ldr	r2, [pc, #132]	; (800f60c <TIM_OC2_SetConfig+0xe8>)
 800f588:	4293      	cmp	r3, r2
 800f58a:	d10d      	bne.n	800f5a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	68db      	ldr	r3, [r3, #12]
 800f598:	011b      	lsls	r3, r3, #4
 800f59a:	697a      	ldr	r2, [r7, #20]
 800f59c:	4313      	orrs	r3, r2
 800f59e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f5a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	4a17      	ldr	r2, [pc, #92]	; (800f608 <TIM_OC2_SetConfig+0xe4>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d003      	beq.n	800f5b8 <TIM_OC2_SetConfig+0x94>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	4a16      	ldr	r2, [pc, #88]	; (800f60c <TIM_OC2_SetConfig+0xe8>)
 800f5b4:	4293      	cmp	r3, r2
 800f5b6:	d113      	bne.n	800f5e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f5b8:	693b      	ldr	r3, [r7, #16]
 800f5ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f5be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f5c0:	693b      	ldr	r3, [r7, #16]
 800f5c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f5c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	695b      	ldr	r3, [r3, #20]
 800f5cc:	009b      	lsls	r3, r3, #2
 800f5ce:	693a      	ldr	r2, [r7, #16]
 800f5d0:	4313      	orrs	r3, r2
 800f5d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	699b      	ldr	r3, [r3, #24]
 800f5d8:	009b      	lsls	r3, r3, #2
 800f5da:	693a      	ldr	r2, [r7, #16]
 800f5dc:	4313      	orrs	r3, r2
 800f5de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	693a      	ldr	r2, [r7, #16]
 800f5e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	68fa      	ldr	r2, [r7, #12]
 800f5ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	685a      	ldr	r2, [r3, #4]
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	697a      	ldr	r2, [r7, #20]
 800f5f8:	621a      	str	r2, [r3, #32]
}
 800f5fa:	bf00      	nop
 800f5fc:	371c      	adds	r7, #28
 800f5fe:	46bd      	mov	sp, r7
 800f600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f604:	4770      	bx	lr
 800f606:	bf00      	nop
 800f608:	40010000 	.word	0x40010000
 800f60c:	40010400 	.word	0x40010400

0800f610 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f610:	b480      	push	{r7}
 800f612:	b087      	sub	sp, #28
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6a1b      	ldr	r3, [r3, #32]
 800f61e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6a1b      	ldr	r3, [r3, #32]
 800f62a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	685b      	ldr	r3, [r3, #4]
 800f630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	69db      	ldr	r3, [r3, #28]
 800f636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f63e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	f023 0303 	bic.w	r3, r3, #3
 800f646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	68fa      	ldr	r2, [r7, #12]
 800f64e:	4313      	orrs	r3, r2
 800f650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	689b      	ldr	r3, [r3, #8]
 800f65e:	021b      	lsls	r3, r3, #8
 800f660:	697a      	ldr	r2, [r7, #20]
 800f662:	4313      	orrs	r3, r2
 800f664:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	4a21      	ldr	r2, [pc, #132]	; (800f6f0 <TIM_OC3_SetConfig+0xe0>)
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d003      	beq.n	800f676 <TIM_OC3_SetConfig+0x66>
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	4a20      	ldr	r2, [pc, #128]	; (800f6f4 <TIM_OC3_SetConfig+0xe4>)
 800f672:	4293      	cmp	r3, r2
 800f674:	d10d      	bne.n	800f692 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f67c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	68db      	ldr	r3, [r3, #12]
 800f682:	021b      	lsls	r3, r3, #8
 800f684:	697a      	ldr	r2, [r7, #20]
 800f686:	4313      	orrs	r3, r2
 800f688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	4a16      	ldr	r2, [pc, #88]	; (800f6f0 <TIM_OC3_SetConfig+0xe0>)
 800f696:	4293      	cmp	r3, r2
 800f698:	d003      	beq.n	800f6a2 <TIM_OC3_SetConfig+0x92>
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	4a15      	ldr	r2, [pc, #84]	; (800f6f4 <TIM_OC3_SetConfig+0xe4>)
 800f69e:	4293      	cmp	r3, r2
 800f6a0:	d113      	bne.n	800f6ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f6a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f6aa:	693b      	ldr	r3, [r7, #16]
 800f6ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f6b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	695b      	ldr	r3, [r3, #20]
 800f6b6:	011b      	lsls	r3, r3, #4
 800f6b8:	693a      	ldr	r2, [r7, #16]
 800f6ba:	4313      	orrs	r3, r2
 800f6bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	699b      	ldr	r3, [r3, #24]
 800f6c2:	011b      	lsls	r3, r3, #4
 800f6c4:	693a      	ldr	r2, [r7, #16]
 800f6c6:	4313      	orrs	r3, r2
 800f6c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	693a      	ldr	r2, [r7, #16]
 800f6ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	68fa      	ldr	r2, [r7, #12]
 800f6d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	685a      	ldr	r2, [r3, #4]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	697a      	ldr	r2, [r7, #20]
 800f6e2:	621a      	str	r2, [r3, #32]
}
 800f6e4:	bf00      	nop
 800f6e6:	371c      	adds	r7, #28
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr
 800f6f0:	40010000 	.word	0x40010000
 800f6f4:	40010400 	.word	0x40010400

0800f6f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b087      	sub	sp, #28
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
 800f700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6a1b      	ldr	r3, [r3, #32]
 800f706:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6a1b      	ldr	r3, [r3, #32]
 800f712:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	685b      	ldr	r3, [r3, #4]
 800f718:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	69db      	ldr	r3, [r3, #28]
 800f71e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f72e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	021b      	lsls	r3, r3, #8
 800f736:	68fa      	ldr	r2, [r7, #12]
 800f738:	4313      	orrs	r3, r2
 800f73a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f742:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	689b      	ldr	r3, [r3, #8]
 800f748:	031b      	lsls	r3, r3, #12
 800f74a:	693a      	ldr	r2, [r7, #16]
 800f74c:	4313      	orrs	r3, r2
 800f74e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	4a12      	ldr	r2, [pc, #72]	; (800f79c <TIM_OC4_SetConfig+0xa4>)
 800f754:	4293      	cmp	r3, r2
 800f756:	d003      	beq.n	800f760 <TIM_OC4_SetConfig+0x68>
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	4a11      	ldr	r2, [pc, #68]	; (800f7a0 <TIM_OC4_SetConfig+0xa8>)
 800f75c:	4293      	cmp	r3, r2
 800f75e:	d109      	bne.n	800f774 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f766:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	695b      	ldr	r3, [r3, #20]
 800f76c:	019b      	lsls	r3, r3, #6
 800f76e:	697a      	ldr	r2, [r7, #20]
 800f770:	4313      	orrs	r3, r2
 800f772:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	697a      	ldr	r2, [r7, #20]
 800f778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	68fa      	ldr	r2, [r7, #12]
 800f77e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	685a      	ldr	r2, [r3, #4]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	693a      	ldr	r2, [r7, #16]
 800f78c:	621a      	str	r2, [r3, #32]
}
 800f78e:	bf00      	nop
 800f790:	371c      	adds	r7, #28
 800f792:	46bd      	mov	sp, r7
 800f794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f798:	4770      	bx	lr
 800f79a:	bf00      	nop
 800f79c:	40010000 	.word	0x40010000
 800f7a0:	40010400 	.word	0x40010400

0800f7a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b087      	sub	sp, #28
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	60f8      	str	r0, [r7, #12]
 800f7ac:	60b9      	str	r1, [r7, #8]
 800f7ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	f003 031f 	and.w	r3, r3, #31
 800f7b6:	2201      	movs	r2, #1
 800f7b8:	fa02 f303 	lsl.w	r3, r2, r3
 800f7bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	6a1a      	ldr	r2, [r3, #32]
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	43db      	mvns	r3, r3
 800f7c6:	401a      	ands	r2, r3
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	6a1a      	ldr	r2, [r3, #32]
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	f003 031f 	and.w	r3, r3, #31
 800f7d6:	6879      	ldr	r1, [r7, #4]
 800f7d8:	fa01 f303 	lsl.w	r3, r1, r3
 800f7dc:	431a      	orrs	r2, r3
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	621a      	str	r2, [r3, #32]
}
 800f7e2:	bf00      	nop
 800f7e4:	371c      	adds	r7, #28
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ec:	4770      	bx	lr
	...

0800f7f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b085      	sub	sp, #20
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
 800f7f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f800:	2b01      	cmp	r3, #1
 800f802:	d101      	bne.n	800f808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f804:	2302      	movs	r3, #2
 800f806:	e05a      	b.n	800f8be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2201      	movs	r2, #1
 800f80c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2202      	movs	r2, #2
 800f814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	689b      	ldr	r3, [r3, #8]
 800f826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f82e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	68fa      	ldr	r2, [r7, #12]
 800f836:	4313      	orrs	r3, r2
 800f838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	68fa      	ldr	r2, [r7, #12]
 800f840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	4a21      	ldr	r2, [pc, #132]	; (800f8cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f848:	4293      	cmp	r3, r2
 800f84a:	d022      	beq.n	800f892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f854:	d01d      	beq.n	800f892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	4a1d      	ldr	r2, [pc, #116]	; (800f8d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f85c:	4293      	cmp	r3, r2
 800f85e:	d018      	beq.n	800f892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	4a1b      	ldr	r2, [pc, #108]	; (800f8d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f866:	4293      	cmp	r3, r2
 800f868:	d013      	beq.n	800f892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	4a1a      	ldr	r2, [pc, #104]	; (800f8d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f870:	4293      	cmp	r3, r2
 800f872:	d00e      	beq.n	800f892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	4a18      	ldr	r2, [pc, #96]	; (800f8dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f87a:	4293      	cmp	r3, r2
 800f87c:	d009      	beq.n	800f892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	4a17      	ldr	r2, [pc, #92]	; (800f8e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f884:	4293      	cmp	r3, r2
 800f886:	d004      	beq.n	800f892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	4a15      	ldr	r2, [pc, #84]	; (800f8e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f88e:	4293      	cmp	r3, r2
 800f890:	d10c      	bne.n	800f8ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f898:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	685b      	ldr	r3, [r3, #4]
 800f89e:	68ba      	ldr	r2, [r7, #8]
 800f8a0:	4313      	orrs	r3, r2
 800f8a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	68ba      	ldr	r2, [r7, #8]
 800f8aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2201      	movs	r2, #1
 800f8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f8bc:	2300      	movs	r3, #0
}
 800f8be:	4618      	mov	r0, r3
 800f8c0:	3714      	adds	r7, #20
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c8:	4770      	bx	lr
 800f8ca:	bf00      	nop
 800f8cc:	40010000 	.word	0x40010000
 800f8d0:	40000400 	.word	0x40000400
 800f8d4:	40000800 	.word	0x40000800
 800f8d8:	40000c00 	.word	0x40000c00
 800f8dc:	40010400 	.word	0x40010400
 800f8e0:	40014000 	.word	0x40014000
 800f8e4:	40001800 	.word	0x40001800

0800f8e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b085      	sub	sp, #20
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f8fc:	2b01      	cmp	r3, #1
 800f8fe:	d101      	bne.n	800f904 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f900:	2302      	movs	r3, #2
 800f902:	e03d      	b.n	800f980 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2201      	movs	r2, #1
 800f908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	68db      	ldr	r3, [r3, #12]
 800f916:	4313      	orrs	r3, r2
 800f918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	689b      	ldr	r3, [r3, #8]
 800f924:	4313      	orrs	r3, r2
 800f926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	4313      	orrs	r3, r2
 800f934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	4313      	orrs	r3, r2
 800f942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	691b      	ldr	r3, [r3, #16]
 800f94e:	4313      	orrs	r3, r2
 800f950:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	695b      	ldr	r3, [r3, #20]
 800f95c:	4313      	orrs	r3, r2
 800f95e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	69db      	ldr	r3, [r3, #28]
 800f96a:	4313      	orrs	r3, r2
 800f96c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	68fa      	ldr	r2, [r7, #12]
 800f974:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2200      	movs	r2, #0
 800f97a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f97e:	2300      	movs	r3, #0
}
 800f980:	4618      	mov	r0, r3
 800f982:	3714      	adds	r7, #20
 800f984:	46bd      	mov	sp, r7
 800f986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98a:	4770      	bx	lr

0800f98c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f98c:	b480      	push	{r7}
 800f98e:	b083      	sub	sp, #12
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f994:	bf00      	nop
 800f996:	370c      	adds	r7, #12
 800f998:	46bd      	mov	sp, r7
 800f99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99e:	4770      	bx	lr

0800f9a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	b083      	sub	sp, #12
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f9a8:	bf00      	nop
 800f9aa:	370c      	adds	r7, #12
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b2:	4770      	bx	lr

0800f9b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b082      	sub	sp, #8
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d101      	bne.n	800f9c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	e03f      	b.n	800fa46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f9cc:	b2db      	uxtb	r3, r3
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d106      	bne.n	800f9e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f7f7 fce6 	bl	80073ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2224      	movs	r2, #36	; 0x24
 800f9e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	68da      	ldr	r2, [r3, #12]
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f9f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f000 f829 	bl	800fa50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	691a      	ldr	r2, [r3, #16]
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fa0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	695a      	ldr	r2, [r3, #20]
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fa1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	68da      	ldr	r2, [r3, #12]
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fa2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2200      	movs	r2, #0
 800fa32:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2220      	movs	r2, #32
 800fa38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2220      	movs	r2, #32
 800fa40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800fa44:	2300      	movs	r3, #0
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	3708      	adds	r7, #8
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}
	...

0800fa50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa54:	b0bd      	sub	sp, #244	; 0xf4
 800fa56:	af00      	add	r7, sp, #0
 800fa58:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fa5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	691b      	ldr	r3, [r3, #16]
 800fa64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800fa68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa6c:	68d9      	ldr	r1, [r3, #12]
 800fa6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa72:	681a      	ldr	r2, [r3, #0]
 800fa74:	ea40 0301 	orr.w	r3, r0, r1
 800fa78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fa7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa7e:	689a      	ldr	r2, [r3, #8]
 800fa80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa84:	691b      	ldr	r3, [r3, #16]
 800fa86:	431a      	orrs	r2, r3
 800fa88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa8c:	695b      	ldr	r3, [r3, #20]
 800fa8e:	431a      	orrs	r2, r3
 800fa90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa94:	69db      	ldr	r3, [r3, #28]
 800fa96:	4313      	orrs	r3, r2
 800fa98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800fa9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	68db      	ldr	r3, [r3, #12]
 800faa4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800faa8:	f021 010c 	bic.w	r1, r1, #12
 800faac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fab0:	681a      	ldr	r2, [r3, #0]
 800fab2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fab6:	430b      	orrs	r3, r1
 800fab8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800faba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	695b      	ldr	r3, [r3, #20]
 800fac2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800fac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800faca:	6999      	ldr	r1, [r3, #24]
 800facc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fad0:	681a      	ldr	r2, [r3, #0]
 800fad2:	ea40 0301 	orr.w	r3, r0, r1
 800fad6:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fadc:	69db      	ldr	r3, [r3, #28]
 800fade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fae2:	f040 81a5 	bne.w	800fe30 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800faea:	681a      	ldr	r2, [r3, #0]
 800faec:	4bcd      	ldr	r3, [pc, #820]	; (800fe24 <UART_SetConfig+0x3d4>)
 800faee:	429a      	cmp	r2, r3
 800faf0:	d006      	beq.n	800fb00 <UART_SetConfig+0xb0>
 800faf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800faf6:	681a      	ldr	r2, [r3, #0]
 800faf8:	4bcb      	ldr	r3, [pc, #812]	; (800fe28 <UART_SetConfig+0x3d8>)
 800fafa:	429a      	cmp	r2, r3
 800fafc:	f040 80cb 	bne.w	800fc96 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fb00:	f7fc fbba 	bl	800c278 <HAL_RCC_GetPCLK2Freq>
 800fb04:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fb08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fb0c:	461c      	mov	r4, r3
 800fb0e:	f04f 0500 	mov.w	r5, #0
 800fb12:	4622      	mov	r2, r4
 800fb14:	462b      	mov	r3, r5
 800fb16:	1891      	adds	r1, r2, r2
 800fb18:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800fb1c:	415b      	adcs	r3, r3
 800fb1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fb22:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800fb26:	1912      	adds	r2, r2, r4
 800fb28:	eb45 0303 	adc.w	r3, r5, r3
 800fb2c:	f04f 0000 	mov.w	r0, #0
 800fb30:	f04f 0100 	mov.w	r1, #0
 800fb34:	00d9      	lsls	r1, r3, #3
 800fb36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fb3a:	00d0      	lsls	r0, r2, #3
 800fb3c:	4602      	mov	r2, r0
 800fb3e:	460b      	mov	r3, r1
 800fb40:	1911      	adds	r1, r2, r4
 800fb42:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800fb46:	416b      	adcs	r3, r5
 800fb48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800fb4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb50:	685b      	ldr	r3, [r3, #4]
 800fb52:	461a      	mov	r2, r3
 800fb54:	f04f 0300 	mov.w	r3, #0
 800fb58:	1891      	adds	r1, r2, r2
 800fb5a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800fb5e:	415b      	adcs	r3, r3
 800fb60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fb64:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800fb68:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800fb6c:	f7f1 f8a4 	bl	8000cb8 <__aeabi_uldivmod>
 800fb70:	4602      	mov	r2, r0
 800fb72:	460b      	mov	r3, r1
 800fb74:	4bad      	ldr	r3, [pc, #692]	; (800fe2c <UART_SetConfig+0x3dc>)
 800fb76:	fba3 2302 	umull	r2, r3, r3, r2
 800fb7a:	095b      	lsrs	r3, r3, #5
 800fb7c:	011e      	lsls	r6, r3, #4
 800fb7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fb82:	461c      	mov	r4, r3
 800fb84:	f04f 0500 	mov.w	r5, #0
 800fb88:	4622      	mov	r2, r4
 800fb8a:	462b      	mov	r3, r5
 800fb8c:	1891      	adds	r1, r2, r2
 800fb8e:	67b9      	str	r1, [r7, #120]	; 0x78
 800fb90:	415b      	adcs	r3, r3
 800fb92:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fb94:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800fb98:	1912      	adds	r2, r2, r4
 800fb9a:	eb45 0303 	adc.w	r3, r5, r3
 800fb9e:	f04f 0000 	mov.w	r0, #0
 800fba2:	f04f 0100 	mov.w	r1, #0
 800fba6:	00d9      	lsls	r1, r3, #3
 800fba8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fbac:	00d0      	lsls	r0, r2, #3
 800fbae:	4602      	mov	r2, r0
 800fbb0:	460b      	mov	r3, r1
 800fbb2:	1911      	adds	r1, r2, r4
 800fbb4:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800fbb8:	416b      	adcs	r3, r5
 800fbba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800fbbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fbc2:	685b      	ldr	r3, [r3, #4]
 800fbc4:	461a      	mov	r2, r3
 800fbc6:	f04f 0300 	mov.w	r3, #0
 800fbca:	1891      	adds	r1, r2, r2
 800fbcc:	6739      	str	r1, [r7, #112]	; 0x70
 800fbce:	415b      	adcs	r3, r3
 800fbd0:	677b      	str	r3, [r7, #116]	; 0x74
 800fbd2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800fbd6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800fbda:	f7f1 f86d 	bl	8000cb8 <__aeabi_uldivmod>
 800fbde:	4602      	mov	r2, r0
 800fbe0:	460b      	mov	r3, r1
 800fbe2:	4b92      	ldr	r3, [pc, #584]	; (800fe2c <UART_SetConfig+0x3dc>)
 800fbe4:	fba3 1302 	umull	r1, r3, r3, r2
 800fbe8:	095b      	lsrs	r3, r3, #5
 800fbea:	2164      	movs	r1, #100	; 0x64
 800fbec:	fb01 f303 	mul.w	r3, r1, r3
 800fbf0:	1ad3      	subs	r3, r2, r3
 800fbf2:	00db      	lsls	r3, r3, #3
 800fbf4:	3332      	adds	r3, #50	; 0x32
 800fbf6:	4a8d      	ldr	r2, [pc, #564]	; (800fe2c <UART_SetConfig+0x3dc>)
 800fbf8:	fba2 2303 	umull	r2, r3, r2, r3
 800fbfc:	095b      	lsrs	r3, r3, #5
 800fbfe:	005b      	lsls	r3, r3, #1
 800fc00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fc04:	441e      	add	r6, r3
 800fc06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f04f 0100 	mov.w	r1, #0
 800fc10:	4602      	mov	r2, r0
 800fc12:	460b      	mov	r3, r1
 800fc14:	1894      	adds	r4, r2, r2
 800fc16:	66bc      	str	r4, [r7, #104]	; 0x68
 800fc18:	415b      	adcs	r3, r3
 800fc1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fc1c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800fc20:	1812      	adds	r2, r2, r0
 800fc22:	eb41 0303 	adc.w	r3, r1, r3
 800fc26:	f04f 0400 	mov.w	r4, #0
 800fc2a:	f04f 0500 	mov.w	r5, #0
 800fc2e:	00dd      	lsls	r5, r3, #3
 800fc30:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fc34:	00d4      	lsls	r4, r2, #3
 800fc36:	4622      	mov	r2, r4
 800fc38:	462b      	mov	r3, r5
 800fc3a:	1814      	adds	r4, r2, r0
 800fc3c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800fc40:	414b      	adcs	r3, r1
 800fc42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800fc46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc4a:	685b      	ldr	r3, [r3, #4]
 800fc4c:	461a      	mov	r2, r3
 800fc4e:	f04f 0300 	mov.w	r3, #0
 800fc52:	1891      	adds	r1, r2, r2
 800fc54:	6639      	str	r1, [r7, #96]	; 0x60
 800fc56:	415b      	adcs	r3, r3
 800fc58:	667b      	str	r3, [r7, #100]	; 0x64
 800fc5a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800fc5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800fc62:	f7f1 f829 	bl	8000cb8 <__aeabi_uldivmod>
 800fc66:	4602      	mov	r2, r0
 800fc68:	460b      	mov	r3, r1
 800fc6a:	4b70      	ldr	r3, [pc, #448]	; (800fe2c <UART_SetConfig+0x3dc>)
 800fc6c:	fba3 1302 	umull	r1, r3, r3, r2
 800fc70:	095b      	lsrs	r3, r3, #5
 800fc72:	2164      	movs	r1, #100	; 0x64
 800fc74:	fb01 f303 	mul.w	r3, r1, r3
 800fc78:	1ad3      	subs	r3, r2, r3
 800fc7a:	00db      	lsls	r3, r3, #3
 800fc7c:	3332      	adds	r3, #50	; 0x32
 800fc7e:	4a6b      	ldr	r2, [pc, #428]	; (800fe2c <UART_SetConfig+0x3dc>)
 800fc80:	fba2 2303 	umull	r2, r3, r2, r3
 800fc84:	095b      	lsrs	r3, r3, #5
 800fc86:	f003 0207 	and.w	r2, r3, #7
 800fc8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	4432      	add	r2, r6
 800fc92:	609a      	str	r2, [r3, #8]
 800fc94:	e26d      	b.n	8010172 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fc96:	f7fc fadb 	bl	800c250 <HAL_RCC_GetPCLK1Freq>
 800fc9a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fc9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fca2:	461c      	mov	r4, r3
 800fca4:	f04f 0500 	mov.w	r5, #0
 800fca8:	4622      	mov	r2, r4
 800fcaa:	462b      	mov	r3, r5
 800fcac:	1891      	adds	r1, r2, r2
 800fcae:	65b9      	str	r1, [r7, #88]	; 0x58
 800fcb0:	415b      	adcs	r3, r3
 800fcb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fcb4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800fcb8:	1912      	adds	r2, r2, r4
 800fcba:	eb45 0303 	adc.w	r3, r5, r3
 800fcbe:	f04f 0000 	mov.w	r0, #0
 800fcc2:	f04f 0100 	mov.w	r1, #0
 800fcc6:	00d9      	lsls	r1, r3, #3
 800fcc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fccc:	00d0      	lsls	r0, r2, #3
 800fcce:	4602      	mov	r2, r0
 800fcd0:	460b      	mov	r3, r1
 800fcd2:	1911      	adds	r1, r2, r4
 800fcd4:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800fcd8:	416b      	adcs	r3, r5
 800fcda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fcde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fce2:	685b      	ldr	r3, [r3, #4]
 800fce4:	461a      	mov	r2, r3
 800fce6:	f04f 0300 	mov.w	r3, #0
 800fcea:	1891      	adds	r1, r2, r2
 800fcec:	6539      	str	r1, [r7, #80]	; 0x50
 800fcee:	415b      	adcs	r3, r3
 800fcf0:	657b      	str	r3, [r7, #84]	; 0x54
 800fcf2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800fcf6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800fcfa:	f7f0 ffdd 	bl	8000cb8 <__aeabi_uldivmod>
 800fcfe:	4602      	mov	r2, r0
 800fd00:	460b      	mov	r3, r1
 800fd02:	4b4a      	ldr	r3, [pc, #296]	; (800fe2c <UART_SetConfig+0x3dc>)
 800fd04:	fba3 2302 	umull	r2, r3, r3, r2
 800fd08:	095b      	lsrs	r3, r3, #5
 800fd0a:	011e      	lsls	r6, r3, #4
 800fd0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fd10:	461c      	mov	r4, r3
 800fd12:	f04f 0500 	mov.w	r5, #0
 800fd16:	4622      	mov	r2, r4
 800fd18:	462b      	mov	r3, r5
 800fd1a:	1891      	adds	r1, r2, r2
 800fd1c:	64b9      	str	r1, [r7, #72]	; 0x48
 800fd1e:	415b      	adcs	r3, r3
 800fd20:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800fd26:	1912      	adds	r2, r2, r4
 800fd28:	eb45 0303 	adc.w	r3, r5, r3
 800fd2c:	f04f 0000 	mov.w	r0, #0
 800fd30:	f04f 0100 	mov.w	r1, #0
 800fd34:	00d9      	lsls	r1, r3, #3
 800fd36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fd3a:	00d0      	lsls	r0, r2, #3
 800fd3c:	4602      	mov	r2, r0
 800fd3e:	460b      	mov	r3, r1
 800fd40:	1911      	adds	r1, r2, r4
 800fd42:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800fd46:	416b      	adcs	r3, r5
 800fd48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fd4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd50:	685b      	ldr	r3, [r3, #4]
 800fd52:	461a      	mov	r2, r3
 800fd54:	f04f 0300 	mov.w	r3, #0
 800fd58:	1891      	adds	r1, r2, r2
 800fd5a:	6439      	str	r1, [r7, #64]	; 0x40
 800fd5c:	415b      	adcs	r3, r3
 800fd5e:	647b      	str	r3, [r7, #68]	; 0x44
 800fd60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800fd64:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800fd68:	f7f0 ffa6 	bl	8000cb8 <__aeabi_uldivmod>
 800fd6c:	4602      	mov	r2, r0
 800fd6e:	460b      	mov	r3, r1
 800fd70:	4b2e      	ldr	r3, [pc, #184]	; (800fe2c <UART_SetConfig+0x3dc>)
 800fd72:	fba3 1302 	umull	r1, r3, r3, r2
 800fd76:	095b      	lsrs	r3, r3, #5
 800fd78:	2164      	movs	r1, #100	; 0x64
 800fd7a:	fb01 f303 	mul.w	r3, r1, r3
 800fd7e:	1ad3      	subs	r3, r2, r3
 800fd80:	00db      	lsls	r3, r3, #3
 800fd82:	3332      	adds	r3, #50	; 0x32
 800fd84:	4a29      	ldr	r2, [pc, #164]	; (800fe2c <UART_SetConfig+0x3dc>)
 800fd86:	fba2 2303 	umull	r2, r3, r2, r3
 800fd8a:	095b      	lsrs	r3, r3, #5
 800fd8c:	005b      	lsls	r3, r3, #1
 800fd8e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fd92:	441e      	add	r6, r3
 800fd94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f04f 0100 	mov.w	r1, #0
 800fd9e:	4602      	mov	r2, r0
 800fda0:	460b      	mov	r3, r1
 800fda2:	1894      	adds	r4, r2, r2
 800fda4:	63bc      	str	r4, [r7, #56]	; 0x38
 800fda6:	415b      	adcs	r3, r3
 800fda8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fdaa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800fdae:	1812      	adds	r2, r2, r0
 800fdb0:	eb41 0303 	adc.w	r3, r1, r3
 800fdb4:	f04f 0400 	mov.w	r4, #0
 800fdb8:	f04f 0500 	mov.w	r5, #0
 800fdbc:	00dd      	lsls	r5, r3, #3
 800fdbe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fdc2:	00d4      	lsls	r4, r2, #3
 800fdc4:	4622      	mov	r2, r4
 800fdc6:	462b      	mov	r3, r5
 800fdc8:	1814      	adds	r4, r2, r0
 800fdca:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800fdce:	414b      	adcs	r3, r1
 800fdd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fdd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fdd8:	685b      	ldr	r3, [r3, #4]
 800fdda:	461a      	mov	r2, r3
 800fddc:	f04f 0300 	mov.w	r3, #0
 800fde0:	1891      	adds	r1, r2, r2
 800fde2:	6339      	str	r1, [r7, #48]	; 0x30
 800fde4:	415b      	adcs	r3, r3
 800fde6:	637b      	str	r3, [r7, #52]	; 0x34
 800fde8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800fdec:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800fdf0:	f7f0 ff62 	bl	8000cb8 <__aeabi_uldivmod>
 800fdf4:	4602      	mov	r2, r0
 800fdf6:	460b      	mov	r3, r1
 800fdf8:	4b0c      	ldr	r3, [pc, #48]	; (800fe2c <UART_SetConfig+0x3dc>)
 800fdfa:	fba3 1302 	umull	r1, r3, r3, r2
 800fdfe:	095b      	lsrs	r3, r3, #5
 800fe00:	2164      	movs	r1, #100	; 0x64
 800fe02:	fb01 f303 	mul.w	r3, r1, r3
 800fe06:	1ad3      	subs	r3, r2, r3
 800fe08:	00db      	lsls	r3, r3, #3
 800fe0a:	3332      	adds	r3, #50	; 0x32
 800fe0c:	4a07      	ldr	r2, [pc, #28]	; (800fe2c <UART_SetConfig+0x3dc>)
 800fe0e:	fba2 2303 	umull	r2, r3, r2, r3
 800fe12:	095b      	lsrs	r3, r3, #5
 800fe14:	f003 0207 	and.w	r2, r3, #7
 800fe18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	4432      	add	r2, r6
 800fe20:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800fe22:	e1a6      	b.n	8010172 <UART_SetConfig+0x722>
 800fe24:	40011000 	.word	0x40011000
 800fe28:	40011400 	.word	0x40011400
 800fe2c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fe30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe34:	681a      	ldr	r2, [r3, #0]
 800fe36:	4bd1      	ldr	r3, [pc, #836]	; (801017c <UART_SetConfig+0x72c>)
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d006      	beq.n	800fe4a <UART_SetConfig+0x3fa>
 800fe3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe40:	681a      	ldr	r2, [r3, #0]
 800fe42:	4bcf      	ldr	r3, [pc, #828]	; (8010180 <UART_SetConfig+0x730>)
 800fe44:	429a      	cmp	r2, r3
 800fe46:	f040 80ca 	bne.w	800ffde <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800fe4a:	f7fc fa15 	bl	800c278 <HAL_RCC_GetPCLK2Freq>
 800fe4e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fe52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fe56:	461c      	mov	r4, r3
 800fe58:	f04f 0500 	mov.w	r5, #0
 800fe5c:	4622      	mov	r2, r4
 800fe5e:	462b      	mov	r3, r5
 800fe60:	1891      	adds	r1, r2, r2
 800fe62:	62b9      	str	r1, [r7, #40]	; 0x28
 800fe64:	415b      	adcs	r3, r3
 800fe66:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fe6c:	1912      	adds	r2, r2, r4
 800fe6e:	eb45 0303 	adc.w	r3, r5, r3
 800fe72:	f04f 0000 	mov.w	r0, #0
 800fe76:	f04f 0100 	mov.w	r1, #0
 800fe7a:	00d9      	lsls	r1, r3, #3
 800fe7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fe80:	00d0      	lsls	r0, r2, #3
 800fe82:	4602      	mov	r2, r0
 800fe84:	460b      	mov	r3, r1
 800fe86:	eb12 0a04 	adds.w	sl, r2, r4
 800fe8a:	eb43 0b05 	adc.w	fp, r3, r5
 800fe8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe92:	685b      	ldr	r3, [r3, #4]
 800fe94:	4618      	mov	r0, r3
 800fe96:	f04f 0100 	mov.w	r1, #0
 800fe9a:	f04f 0200 	mov.w	r2, #0
 800fe9e:	f04f 0300 	mov.w	r3, #0
 800fea2:	008b      	lsls	r3, r1, #2
 800fea4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800fea8:	0082      	lsls	r2, r0, #2
 800feaa:	4650      	mov	r0, sl
 800feac:	4659      	mov	r1, fp
 800feae:	f7f0 ff03 	bl	8000cb8 <__aeabi_uldivmod>
 800feb2:	4602      	mov	r2, r0
 800feb4:	460b      	mov	r3, r1
 800feb6:	4bb3      	ldr	r3, [pc, #716]	; (8010184 <UART_SetConfig+0x734>)
 800feb8:	fba3 2302 	umull	r2, r3, r3, r2
 800febc:	095b      	lsrs	r3, r3, #5
 800febe:	011e      	lsls	r6, r3, #4
 800fec0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fec4:	4618      	mov	r0, r3
 800fec6:	f04f 0100 	mov.w	r1, #0
 800feca:	4602      	mov	r2, r0
 800fecc:	460b      	mov	r3, r1
 800fece:	1894      	adds	r4, r2, r2
 800fed0:	623c      	str	r4, [r7, #32]
 800fed2:	415b      	adcs	r3, r3
 800fed4:	627b      	str	r3, [r7, #36]	; 0x24
 800fed6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800feda:	1812      	adds	r2, r2, r0
 800fedc:	eb41 0303 	adc.w	r3, r1, r3
 800fee0:	f04f 0400 	mov.w	r4, #0
 800fee4:	f04f 0500 	mov.w	r5, #0
 800fee8:	00dd      	lsls	r5, r3, #3
 800feea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800feee:	00d4      	lsls	r4, r2, #3
 800fef0:	4622      	mov	r2, r4
 800fef2:	462b      	mov	r3, r5
 800fef4:	1814      	adds	r4, r2, r0
 800fef6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800fefa:	414b      	adcs	r3, r1
 800fefc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ff00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff04:	685b      	ldr	r3, [r3, #4]
 800ff06:	4618      	mov	r0, r3
 800ff08:	f04f 0100 	mov.w	r1, #0
 800ff0c:	f04f 0200 	mov.w	r2, #0
 800ff10:	f04f 0300 	mov.w	r3, #0
 800ff14:	008b      	lsls	r3, r1, #2
 800ff16:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ff1a:	0082      	lsls	r2, r0, #2
 800ff1c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800ff20:	f7f0 feca 	bl	8000cb8 <__aeabi_uldivmod>
 800ff24:	4602      	mov	r2, r0
 800ff26:	460b      	mov	r3, r1
 800ff28:	4b96      	ldr	r3, [pc, #600]	; (8010184 <UART_SetConfig+0x734>)
 800ff2a:	fba3 1302 	umull	r1, r3, r3, r2
 800ff2e:	095b      	lsrs	r3, r3, #5
 800ff30:	2164      	movs	r1, #100	; 0x64
 800ff32:	fb01 f303 	mul.w	r3, r1, r3
 800ff36:	1ad3      	subs	r3, r2, r3
 800ff38:	011b      	lsls	r3, r3, #4
 800ff3a:	3332      	adds	r3, #50	; 0x32
 800ff3c:	4a91      	ldr	r2, [pc, #580]	; (8010184 <UART_SetConfig+0x734>)
 800ff3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ff42:	095b      	lsrs	r3, r3, #5
 800ff44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ff48:	441e      	add	r6, r3
 800ff4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f04f 0100 	mov.w	r1, #0
 800ff54:	4602      	mov	r2, r0
 800ff56:	460b      	mov	r3, r1
 800ff58:	1894      	adds	r4, r2, r2
 800ff5a:	61bc      	str	r4, [r7, #24]
 800ff5c:	415b      	adcs	r3, r3
 800ff5e:	61fb      	str	r3, [r7, #28]
 800ff60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ff64:	1812      	adds	r2, r2, r0
 800ff66:	eb41 0303 	adc.w	r3, r1, r3
 800ff6a:	f04f 0400 	mov.w	r4, #0
 800ff6e:	f04f 0500 	mov.w	r5, #0
 800ff72:	00dd      	lsls	r5, r3, #3
 800ff74:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ff78:	00d4      	lsls	r4, r2, #3
 800ff7a:	4622      	mov	r2, r4
 800ff7c:	462b      	mov	r3, r5
 800ff7e:	1814      	adds	r4, r2, r0
 800ff80:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800ff84:	414b      	adcs	r3, r1
 800ff86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ff8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff8e:	685b      	ldr	r3, [r3, #4]
 800ff90:	4618      	mov	r0, r3
 800ff92:	f04f 0100 	mov.w	r1, #0
 800ff96:	f04f 0200 	mov.w	r2, #0
 800ff9a:	f04f 0300 	mov.w	r3, #0
 800ff9e:	008b      	lsls	r3, r1, #2
 800ffa0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ffa4:	0082      	lsls	r2, r0, #2
 800ffa6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800ffaa:	f7f0 fe85 	bl	8000cb8 <__aeabi_uldivmod>
 800ffae:	4602      	mov	r2, r0
 800ffb0:	460b      	mov	r3, r1
 800ffb2:	4b74      	ldr	r3, [pc, #464]	; (8010184 <UART_SetConfig+0x734>)
 800ffb4:	fba3 1302 	umull	r1, r3, r3, r2
 800ffb8:	095b      	lsrs	r3, r3, #5
 800ffba:	2164      	movs	r1, #100	; 0x64
 800ffbc:	fb01 f303 	mul.w	r3, r1, r3
 800ffc0:	1ad3      	subs	r3, r2, r3
 800ffc2:	011b      	lsls	r3, r3, #4
 800ffc4:	3332      	adds	r3, #50	; 0x32
 800ffc6:	4a6f      	ldr	r2, [pc, #444]	; (8010184 <UART_SetConfig+0x734>)
 800ffc8:	fba2 2303 	umull	r2, r3, r2, r3
 800ffcc:	095b      	lsrs	r3, r3, #5
 800ffce:	f003 020f 	and.w	r2, r3, #15
 800ffd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	4432      	add	r2, r6
 800ffda:	609a      	str	r2, [r3, #8]
 800ffdc:	e0c9      	b.n	8010172 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ffde:	f7fc f937 	bl	800c250 <HAL_RCC_GetPCLK1Freq>
 800ffe2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ffe6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ffea:	461c      	mov	r4, r3
 800ffec:	f04f 0500 	mov.w	r5, #0
 800fff0:	4622      	mov	r2, r4
 800fff2:	462b      	mov	r3, r5
 800fff4:	1891      	adds	r1, r2, r2
 800fff6:	6139      	str	r1, [r7, #16]
 800fff8:	415b      	adcs	r3, r3
 800fffa:	617b      	str	r3, [r7, #20]
 800fffc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010000:	1912      	adds	r2, r2, r4
 8010002:	eb45 0303 	adc.w	r3, r5, r3
 8010006:	f04f 0000 	mov.w	r0, #0
 801000a:	f04f 0100 	mov.w	r1, #0
 801000e:	00d9      	lsls	r1, r3, #3
 8010010:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010014:	00d0      	lsls	r0, r2, #3
 8010016:	4602      	mov	r2, r0
 8010018:	460b      	mov	r3, r1
 801001a:	eb12 0804 	adds.w	r8, r2, r4
 801001e:	eb43 0905 	adc.w	r9, r3, r5
 8010022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010026:	685b      	ldr	r3, [r3, #4]
 8010028:	4618      	mov	r0, r3
 801002a:	f04f 0100 	mov.w	r1, #0
 801002e:	f04f 0200 	mov.w	r2, #0
 8010032:	f04f 0300 	mov.w	r3, #0
 8010036:	008b      	lsls	r3, r1, #2
 8010038:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801003c:	0082      	lsls	r2, r0, #2
 801003e:	4640      	mov	r0, r8
 8010040:	4649      	mov	r1, r9
 8010042:	f7f0 fe39 	bl	8000cb8 <__aeabi_uldivmod>
 8010046:	4602      	mov	r2, r0
 8010048:	460b      	mov	r3, r1
 801004a:	4b4e      	ldr	r3, [pc, #312]	; (8010184 <UART_SetConfig+0x734>)
 801004c:	fba3 2302 	umull	r2, r3, r3, r2
 8010050:	095b      	lsrs	r3, r3, #5
 8010052:	011e      	lsls	r6, r3, #4
 8010054:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010058:	4618      	mov	r0, r3
 801005a:	f04f 0100 	mov.w	r1, #0
 801005e:	4602      	mov	r2, r0
 8010060:	460b      	mov	r3, r1
 8010062:	1894      	adds	r4, r2, r2
 8010064:	60bc      	str	r4, [r7, #8]
 8010066:	415b      	adcs	r3, r3
 8010068:	60fb      	str	r3, [r7, #12]
 801006a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801006e:	1812      	adds	r2, r2, r0
 8010070:	eb41 0303 	adc.w	r3, r1, r3
 8010074:	f04f 0400 	mov.w	r4, #0
 8010078:	f04f 0500 	mov.w	r5, #0
 801007c:	00dd      	lsls	r5, r3, #3
 801007e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010082:	00d4      	lsls	r4, r2, #3
 8010084:	4622      	mov	r2, r4
 8010086:	462b      	mov	r3, r5
 8010088:	1814      	adds	r4, r2, r0
 801008a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 801008e:	414b      	adcs	r3, r1
 8010090:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010098:	685b      	ldr	r3, [r3, #4]
 801009a:	4618      	mov	r0, r3
 801009c:	f04f 0100 	mov.w	r1, #0
 80100a0:	f04f 0200 	mov.w	r2, #0
 80100a4:	f04f 0300 	mov.w	r3, #0
 80100a8:	008b      	lsls	r3, r1, #2
 80100aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80100ae:	0082      	lsls	r2, r0, #2
 80100b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80100b4:	f7f0 fe00 	bl	8000cb8 <__aeabi_uldivmod>
 80100b8:	4602      	mov	r2, r0
 80100ba:	460b      	mov	r3, r1
 80100bc:	4b31      	ldr	r3, [pc, #196]	; (8010184 <UART_SetConfig+0x734>)
 80100be:	fba3 1302 	umull	r1, r3, r3, r2
 80100c2:	095b      	lsrs	r3, r3, #5
 80100c4:	2164      	movs	r1, #100	; 0x64
 80100c6:	fb01 f303 	mul.w	r3, r1, r3
 80100ca:	1ad3      	subs	r3, r2, r3
 80100cc:	011b      	lsls	r3, r3, #4
 80100ce:	3332      	adds	r3, #50	; 0x32
 80100d0:	4a2c      	ldr	r2, [pc, #176]	; (8010184 <UART_SetConfig+0x734>)
 80100d2:	fba2 2303 	umull	r2, r3, r2, r3
 80100d6:	095b      	lsrs	r3, r3, #5
 80100d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80100dc:	441e      	add	r6, r3
 80100de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80100e2:	4618      	mov	r0, r3
 80100e4:	f04f 0100 	mov.w	r1, #0
 80100e8:	4602      	mov	r2, r0
 80100ea:	460b      	mov	r3, r1
 80100ec:	1894      	adds	r4, r2, r2
 80100ee:	603c      	str	r4, [r7, #0]
 80100f0:	415b      	adcs	r3, r3
 80100f2:	607b      	str	r3, [r7, #4]
 80100f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100f8:	1812      	adds	r2, r2, r0
 80100fa:	eb41 0303 	adc.w	r3, r1, r3
 80100fe:	f04f 0400 	mov.w	r4, #0
 8010102:	f04f 0500 	mov.w	r5, #0
 8010106:	00dd      	lsls	r5, r3, #3
 8010108:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801010c:	00d4      	lsls	r4, r2, #3
 801010e:	4622      	mov	r2, r4
 8010110:	462b      	mov	r3, r5
 8010112:	1814      	adds	r4, r2, r0
 8010114:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8010118:	414b      	adcs	r3, r1
 801011a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801011e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	4618      	mov	r0, r3
 8010126:	f04f 0100 	mov.w	r1, #0
 801012a:	f04f 0200 	mov.w	r2, #0
 801012e:	f04f 0300 	mov.w	r3, #0
 8010132:	008b      	lsls	r3, r1, #2
 8010134:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010138:	0082      	lsls	r2, r0, #2
 801013a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 801013e:	f7f0 fdbb 	bl	8000cb8 <__aeabi_uldivmod>
 8010142:	4602      	mov	r2, r0
 8010144:	460b      	mov	r3, r1
 8010146:	4b0f      	ldr	r3, [pc, #60]	; (8010184 <UART_SetConfig+0x734>)
 8010148:	fba3 1302 	umull	r1, r3, r3, r2
 801014c:	095b      	lsrs	r3, r3, #5
 801014e:	2164      	movs	r1, #100	; 0x64
 8010150:	fb01 f303 	mul.w	r3, r1, r3
 8010154:	1ad3      	subs	r3, r2, r3
 8010156:	011b      	lsls	r3, r3, #4
 8010158:	3332      	adds	r3, #50	; 0x32
 801015a:	4a0a      	ldr	r2, [pc, #40]	; (8010184 <UART_SetConfig+0x734>)
 801015c:	fba2 2303 	umull	r2, r3, r2, r3
 8010160:	095b      	lsrs	r3, r3, #5
 8010162:	f003 020f 	and.w	r2, r3, #15
 8010166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	4432      	add	r2, r6
 801016e:	609a      	str	r2, [r3, #8]
}
 8010170:	e7ff      	b.n	8010172 <UART_SetConfig+0x722>
 8010172:	bf00      	nop
 8010174:	37f4      	adds	r7, #244	; 0xf4
 8010176:	46bd      	mov	sp, r7
 8010178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801017c:	40011000 	.word	0x40011000
 8010180:	40011400 	.word	0x40011400
 8010184:	51eb851f 	.word	0x51eb851f

08010188 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8010188:	b084      	sub	sp, #16
 801018a:	b480      	push	{r7}
 801018c:	b085      	sub	sp, #20
 801018e:	af00      	add	r7, sp, #0
 8010190:	6078      	str	r0, [r7, #4]
 8010192:	f107 001c 	add.w	r0, r7, #28
 8010196:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801019a:	2300      	movs	r3, #0
 801019c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801019e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80101a0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80101a2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80101a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80101a6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80101a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80101aa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80101ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80101ae:	431a      	orrs	r2, r3
             Init.ClockDiv
 80101b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80101b2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80101b4:	68fa      	ldr	r2, [r7, #12]
 80101b6:	4313      	orrs	r3, r2
 80101b8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	685b      	ldr	r3, [r3, #4]
 80101be:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80101c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80101c6:	68fa      	ldr	r2, [r7, #12]
 80101c8:	431a      	orrs	r2, r3
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80101ce:	2300      	movs	r3, #0
}
 80101d0:	4618      	mov	r0, r3
 80101d2:	3714      	adds	r7, #20
 80101d4:	46bd      	mov	sp, r7
 80101d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101da:	b004      	add	sp, #16
 80101dc:	4770      	bx	lr

080101de <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80101de:	b480      	push	{r7}
 80101e0:	b083      	sub	sp, #12
 80101e2:	af00      	add	r7, sp, #0
 80101e4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	370c      	adds	r7, #12
 80101f0:	46bd      	mov	sp, r7
 80101f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f6:	4770      	bx	lr

080101f8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80101f8:	b480      	push	{r7}
 80101fa:	b083      	sub	sp, #12
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
 8010200:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8010202:	683b      	ldr	r3, [r7, #0]
 8010204:	681a      	ldr	r2, [r3, #0]
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801020c:	2300      	movs	r3, #0
}
 801020e:	4618      	mov	r0, r3
 8010210:	370c      	adds	r7, #12
 8010212:	46bd      	mov	sp, r7
 8010214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010218:	4770      	bx	lr

0801021a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 801021a:	b580      	push	{r7, lr}
 801021c:	b082      	sub	sp, #8
 801021e:	af00      	add	r7, sp, #0
 8010220:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2203      	movs	r2, #3
 8010226:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010228:	2002      	movs	r0, #2
 801022a:	f7f9 fba3 	bl	8009974 <HAL_Delay>
  
  return HAL_OK;
 801022e:	2300      	movs	r3, #0
}
 8010230:	4618      	mov	r0, r3
 8010232:	3708      	adds	r7, #8
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}

08010238 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010238:	b480      	push	{r7}
 801023a:	b083      	sub	sp, #12
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	f003 0303 	and.w	r3, r3, #3
}
 8010248:	4618      	mov	r0, r3
 801024a:	370c      	adds	r7, #12
 801024c:	46bd      	mov	sp, r7
 801024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010252:	4770      	bx	lr

08010254 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8010254:	b480      	push	{r7}
 8010256:	b085      	sub	sp, #20
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
 801025c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801025e:	2300      	movs	r3, #0
 8010260:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	681a      	ldr	r2, [r3, #0]
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010272:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010278:	431a      	orrs	r2, r3
                       Command->CPSM);
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801027e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010280:	68fa      	ldr	r2, [r7, #12]
 8010282:	4313      	orrs	r3, r2
 8010284:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	68db      	ldr	r3, [r3, #12]
 801028a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801028e:	f023 030f 	bic.w	r3, r3, #15
 8010292:	68fa      	ldr	r2, [r7, #12]
 8010294:	431a      	orrs	r2, r3
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 801029a:	2300      	movs	r3, #0
}
 801029c:	4618      	mov	r0, r3
 801029e:	3714      	adds	r7, #20
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr

080102a8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80102a8:	b480      	push	{r7}
 80102aa:	b083      	sub	sp, #12
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	691b      	ldr	r3, [r3, #16]
 80102b4:	b2db      	uxtb	r3, r3
}
 80102b6:	4618      	mov	r0, r3
 80102b8:	370c      	adds	r7, #12
 80102ba:	46bd      	mov	sp, r7
 80102bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c0:	4770      	bx	lr

080102c2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80102c2:	b480      	push	{r7}
 80102c4:	b085      	sub	sp, #20
 80102c6:	af00      	add	r7, sp, #0
 80102c8:	6078      	str	r0, [r7, #4]
 80102ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	3314      	adds	r3, #20
 80102d0:	461a      	mov	r2, r3
 80102d2:	683b      	ldr	r3, [r7, #0]
 80102d4:	4413      	add	r3, r2
 80102d6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	681b      	ldr	r3, [r3, #0]
}  
 80102dc:	4618      	mov	r0, r3
 80102de:	3714      	adds	r7, #20
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr

080102e8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80102e8:	b480      	push	{r7}
 80102ea:	b085      	sub	sp, #20
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80102f2:	2300      	movs	r3, #0
 80102f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	681a      	ldr	r2, [r3, #0]
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	685a      	ldr	r2, [r3, #4]
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801030a:	683b      	ldr	r3, [r7, #0]
 801030c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801030e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010314:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801031a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801031c:	68fa      	ldr	r2, [r7, #12]
 801031e:	4313      	orrs	r3, r2
 8010320:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010326:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	431a      	orrs	r2, r3
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010332:	2300      	movs	r3, #0

}
 8010334:	4618      	mov	r0, r3
 8010336:	3714      	adds	r7, #20
 8010338:	46bd      	mov	sp, r7
 801033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033e:	4770      	bx	lr

08010340 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b088      	sub	sp, #32
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
 8010348:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801034e:	2310      	movs	r3, #16
 8010350:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010352:	2340      	movs	r3, #64	; 0x40
 8010354:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010356:	2300      	movs	r3, #0
 8010358:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801035a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801035e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010360:	f107 0308 	add.w	r3, r7, #8
 8010364:	4619      	mov	r1, r3
 8010366:	6878      	ldr	r0, [r7, #4]
 8010368:	f7ff ff74 	bl	8010254 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 801036c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010370:	2110      	movs	r1, #16
 8010372:	6878      	ldr	r0, [r7, #4]
 8010374:	f000 fa40 	bl	80107f8 <SDMMC_GetCmdResp1>
 8010378:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801037a:	69fb      	ldr	r3, [r7, #28]
}
 801037c:	4618      	mov	r0, r3
 801037e:	3720      	adds	r7, #32
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}

08010384 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b088      	sub	sp, #32
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010392:	2311      	movs	r3, #17
 8010394:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010396:	2340      	movs	r3, #64	; 0x40
 8010398:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801039a:	2300      	movs	r3, #0
 801039c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801039e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80103a4:	f107 0308 	add.w	r3, r7, #8
 80103a8:	4619      	mov	r1, r3
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f7ff ff52 	bl	8010254 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80103b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80103b4:	2111      	movs	r1, #17
 80103b6:	6878      	ldr	r0, [r7, #4]
 80103b8:	f000 fa1e 	bl	80107f8 <SDMMC_GetCmdResp1>
 80103bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103be:	69fb      	ldr	r3, [r7, #28]
}
 80103c0:	4618      	mov	r0, r3
 80103c2:	3720      	adds	r7, #32
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}

080103c8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b088      	sub	sp, #32
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
 80103d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80103d6:	2312      	movs	r3, #18
 80103d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80103da:	2340      	movs	r3, #64	; 0x40
 80103dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80103de:	2300      	movs	r3, #0
 80103e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80103e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80103e8:	f107 0308 	add.w	r3, r7, #8
 80103ec:	4619      	mov	r1, r3
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f7ff ff30 	bl	8010254 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80103f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80103f8:	2112      	movs	r1, #18
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f000 f9fc 	bl	80107f8 <SDMMC_GetCmdResp1>
 8010400:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010402:	69fb      	ldr	r3, [r7, #28]
}
 8010404:	4618      	mov	r0, r3
 8010406:	3720      	adds	r7, #32
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}

0801040c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b088      	sub	sp, #32
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801041a:	2318      	movs	r3, #24
 801041c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801041e:	2340      	movs	r3, #64	; 0x40
 8010420:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010422:	2300      	movs	r3, #0
 8010424:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801042a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801042c:	f107 0308 	add.w	r3, r7, #8
 8010430:	4619      	mov	r1, r3
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f7ff ff0e 	bl	8010254 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010438:	f241 3288 	movw	r2, #5000	; 0x1388
 801043c:	2118      	movs	r1, #24
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f000 f9da 	bl	80107f8 <SDMMC_GetCmdResp1>
 8010444:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010446:	69fb      	ldr	r3, [r7, #28]
}
 8010448:	4618      	mov	r0, r3
 801044a:	3720      	adds	r7, #32
 801044c:	46bd      	mov	sp, r7
 801044e:	bd80      	pop	{r7, pc}

08010450 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b088      	sub	sp, #32
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
 8010458:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801045e:	2319      	movs	r3, #25
 8010460:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010462:	2340      	movs	r3, #64	; 0x40
 8010464:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010466:	2300      	movs	r3, #0
 8010468:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801046a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801046e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010470:	f107 0308 	add.w	r3, r7, #8
 8010474:	4619      	mov	r1, r3
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f7ff feec 	bl	8010254 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801047c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010480:	2119      	movs	r1, #25
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f000 f9b8 	bl	80107f8 <SDMMC_GetCmdResp1>
 8010488:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801048a:	69fb      	ldr	r3, [r7, #28]
}
 801048c:	4618      	mov	r0, r3
 801048e:	3720      	adds	r7, #32
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b088      	sub	sp, #32
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801049c:	2300      	movs	r3, #0
 801049e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80104a0:	230c      	movs	r3, #12
 80104a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80104a4:	2340      	movs	r3, #64	; 0x40
 80104a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80104a8:	2300      	movs	r3, #0
 80104aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80104ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80104b2:	f107 0308 	add.w	r3, r7, #8
 80104b6:	4619      	mov	r1, r3
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f7ff fecb 	bl	8010254 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80104be:	4a05      	ldr	r2, [pc, #20]	; (80104d4 <SDMMC_CmdStopTransfer+0x40>)
 80104c0:	210c      	movs	r1, #12
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f000 f998 	bl	80107f8 <SDMMC_GetCmdResp1>
 80104c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104ca:	69fb      	ldr	r3, [r7, #28]
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	3720      	adds	r7, #32
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}
 80104d4:	05f5e100 	.word	0x05f5e100

080104d8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b08a      	sub	sp, #40	; 0x28
 80104dc:	af00      	add	r7, sp, #0
 80104de:	60f8      	str	r0, [r7, #12]
 80104e0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80104e8:	2307      	movs	r3, #7
 80104ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80104ec:	2340      	movs	r3, #64	; 0x40
 80104ee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80104f0:	2300      	movs	r3, #0
 80104f2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80104f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104f8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80104fa:	f107 0310 	add.w	r3, r7, #16
 80104fe:	4619      	mov	r1, r3
 8010500:	68f8      	ldr	r0, [r7, #12]
 8010502:	f7ff fea7 	bl	8010254 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8010506:	f241 3288 	movw	r2, #5000	; 0x1388
 801050a:	2107      	movs	r1, #7
 801050c:	68f8      	ldr	r0, [r7, #12]
 801050e:	f000 f973 	bl	80107f8 <SDMMC_GetCmdResp1>
 8010512:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010516:	4618      	mov	r0, r3
 8010518:	3728      	adds	r7, #40	; 0x28
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}

0801051e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 801051e:	b580      	push	{r7, lr}
 8010520:	b088      	sub	sp, #32
 8010522:	af00      	add	r7, sp, #0
 8010524:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010526:	2300      	movs	r3, #0
 8010528:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801052a:	2300      	movs	r3, #0
 801052c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 801052e:	2300      	movs	r3, #0
 8010530:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010532:	2300      	movs	r3, #0
 8010534:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801053a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801053c:	f107 0308 	add.w	r3, r7, #8
 8010540:	4619      	mov	r1, r3
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f7ff fe86 	bl	8010254 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010548:	6878      	ldr	r0, [r7, #4]
 801054a:	f000 f92d 	bl	80107a8 <SDMMC_GetCmdError>
 801054e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010550:	69fb      	ldr	r3, [r7, #28]
}
 8010552:	4618      	mov	r0, r3
 8010554:	3720      	adds	r7, #32
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}

0801055a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 801055a:	b580      	push	{r7, lr}
 801055c:	b088      	sub	sp, #32
 801055e:	af00      	add	r7, sp, #0
 8010560:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010562:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010566:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010568:	2308      	movs	r3, #8
 801056a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801056c:	2340      	movs	r3, #64	; 0x40
 801056e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010570:	2300      	movs	r3, #0
 8010572:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010578:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801057a:	f107 0308 	add.w	r3, r7, #8
 801057e:	4619      	mov	r1, r3
 8010580:	6878      	ldr	r0, [r7, #4]
 8010582:	f7ff fe67 	bl	8010254 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f000 fb16 	bl	8010bb8 <SDMMC_GetCmdResp7>
 801058c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801058e:	69fb      	ldr	r3, [r7, #28]
}
 8010590:	4618      	mov	r0, r3
 8010592:	3720      	adds	r7, #32
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}

08010598 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b088      	sub	sp, #32
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
 80105a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80105a6:	2337      	movs	r3, #55	; 0x37
 80105a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80105aa:	2340      	movs	r3, #64	; 0x40
 80105ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80105ae:	2300      	movs	r3, #0
 80105b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80105b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80105b8:	f107 0308 	add.w	r3, r7, #8
 80105bc:	4619      	mov	r1, r3
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f7ff fe48 	bl	8010254 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80105c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80105c8:	2137      	movs	r1, #55	; 0x37
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f000 f914 	bl	80107f8 <SDMMC_GetCmdResp1>
 80105d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105d2:	69fb      	ldr	r3, [r7, #28]
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3720      	adds	r7, #32
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}

080105dc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b088      	sub	sp, #32
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
 80105e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80105ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80105f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80105f2:	2329      	movs	r3, #41	; 0x29
 80105f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80105f6:	2340      	movs	r3, #64	; 0x40
 80105f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80105fa:	2300      	movs	r3, #0
 80105fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80105fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010602:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010604:	f107 0308 	add.w	r3, r7, #8
 8010608:	4619      	mov	r1, r3
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f7ff fe22 	bl	8010254 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f000 fa23 	bl	8010a5c <SDMMC_GetCmdResp3>
 8010616:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010618:	69fb      	ldr	r3, [r7, #28]
}
 801061a:	4618      	mov	r0, r3
 801061c:	3720      	adds	r7, #32
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}

08010622 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8010622:	b580      	push	{r7, lr}
 8010624:	b088      	sub	sp, #32
 8010626:	af00      	add	r7, sp, #0
 8010628:	6078      	str	r0, [r7, #4]
 801062a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010630:	2306      	movs	r3, #6
 8010632:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010634:	2340      	movs	r3, #64	; 0x40
 8010636:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010638:	2300      	movs	r3, #0
 801063a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801063c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010640:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010642:	f107 0308 	add.w	r3, r7, #8
 8010646:	4619      	mov	r1, r3
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f7ff fe03 	bl	8010254 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 801064e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010652:	2106      	movs	r1, #6
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f000 f8cf 	bl	80107f8 <SDMMC_GetCmdResp1>
 801065a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801065c:	69fb      	ldr	r3, [r7, #28]
}
 801065e:	4618      	mov	r0, r3
 8010660:	3720      	adds	r7, #32
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}

08010666 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8010666:	b580      	push	{r7, lr}
 8010668:	b088      	sub	sp, #32
 801066a:	af00      	add	r7, sp, #0
 801066c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801066e:	2300      	movs	r3, #0
 8010670:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010672:	2333      	movs	r3, #51	; 0x33
 8010674:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010676:	2340      	movs	r3, #64	; 0x40
 8010678:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801067a:	2300      	movs	r3, #0
 801067c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801067e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010682:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010684:	f107 0308 	add.w	r3, r7, #8
 8010688:	4619      	mov	r1, r3
 801068a:	6878      	ldr	r0, [r7, #4]
 801068c:	f7ff fde2 	bl	8010254 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010690:	f241 3288 	movw	r2, #5000	; 0x1388
 8010694:	2133      	movs	r1, #51	; 0x33
 8010696:	6878      	ldr	r0, [r7, #4]
 8010698:	f000 f8ae 	bl	80107f8 <SDMMC_GetCmdResp1>
 801069c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801069e:	69fb      	ldr	r3, [r7, #28]
}
 80106a0:	4618      	mov	r0, r3
 80106a2:	3720      	adds	r7, #32
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}

080106a8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b088      	sub	sp, #32
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80106b0:	2300      	movs	r3, #0
 80106b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80106b4:	2302      	movs	r3, #2
 80106b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80106b8:	23c0      	movs	r3, #192	; 0xc0
 80106ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106bc:	2300      	movs	r3, #0
 80106be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80106c6:	f107 0308 	add.w	r3, r7, #8
 80106ca:	4619      	mov	r1, r3
 80106cc:	6878      	ldr	r0, [r7, #4]
 80106ce:	f7ff fdc1 	bl	8010254 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80106d2:	6878      	ldr	r0, [r7, #4]
 80106d4:	f000 f97c 	bl	80109d0 <SDMMC_GetCmdResp2>
 80106d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106da:	69fb      	ldr	r3, [r7, #28]
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3720      	adds	r7, #32
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}

080106e4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b088      	sub	sp, #32
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
 80106ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80106f2:	2309      	movs	r3, #9
 80106f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80106f6:	23c0      	movs	r3, #192	; 0xc0
 80106f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106fa:	2300      	movs	r3, #0
 80106fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010702:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010704:	f107 0308 	add.w	r3, r7, #8
 8010708:	4619      	mov	r1, r3
 801070a:	6878      	ldr	r0, [r7, #4]
 801070c:	f7ff fda2 	bl	8010254 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010710:	6878      	ldr	r0, [r7, #4]
 8010712:	f000 f95d 	bl	80109d0 <SDMMC_GetCmdResp2>
 8010716:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010718:	69fb      	ldr	r3, [r7, #28]
}
 801071a:	4618      	mov	r0, r3
 801071c:	3720      	adds	r7, #32
 801071e:	46bd      	mov	sp, r7
 8010720:	bd80      	pop	{r7, pc}

08010722 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010722:	b580      	push	{r7, lr}
 8010724:	b088      	sub	sp, #32
 8010726:	af00      	add	r7, sp, #0
 8010728:	6078      	str	r0, [r7, #4]
 801072a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801072c:	2300      	movs	r3, #0
 801072e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010730:	2303      	movs	r3, #3
 8010732:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010734:	2340      	movs	r3, #64	; 0x40
 8010736:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010738:	2300      	movs	r3, #0
 801073a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801073c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010740:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010742:	f107 0308 	add.w	r3, r7, #8
 8010746:	4619      	mov	r1, r3
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f7ff fd83 	bl	8010254 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801074e:	683a      	ldr	r2, [r7, #0]
 8010750:	2103      	movs	r1, #3
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f000 f9bc 	bl	8010ad0 <SDMMC_GetCmdResp6>
 8010758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801075a:	69fb      	ldr	r3, [r7, #28]
}
 801075c:	4618      	mov	r0, r3
 801075e:	3720      	adds	r7, #32
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}

08010764 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b088      	sub	sp, #32
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010772:	230d      	movs	r3, #13
 8010774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010776:	2340      	movs	r3, #64	; 0x40
 8010778:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801077a:	2300      	movs	r3, #0
 801077c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801077e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010782:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010784:	f107 0308 	add.w	r3, r7, #8
 8010788:	4619      	mov	r1, r3
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	f7ff fd62 	bl	8010254 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010790:	f241 3288 	movw	r2, #5000	; 0x1388
 8010794:	210d      	movs	r1, #13
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	f000 f82e 	bl	80107f8 <SDMMC_GetCmdResp1>
 801079c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801079e:	69fb      	ldr	r3, [r7, #28]
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	3720      	adds	r7, #32
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}

080107a8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80107a8:	b490      	push	{r4, r7}
 80107aa:	b082      	sub	sp, #8
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80107b0:	4b0f      	ldr	r3, [pc, #60]	; (80107f0 <SDMMC_GetCmdError+0x48>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	4a0f      	ldr	r2, [pc, #60]	; (80107f4 <SDMMC_GetCmdError+0x4c>)
 80107b6:	fba2 2303 	umull	r2, r3, r2, r3
 80107ba:	0a5b      	lsrs	r3, r3, #9
 80107bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80107c0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80107c4:	4623      	mov	r3, r4
 80107c6:	1e5c      	subs	r4, r3, #1
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d102      	bne.n	80107d2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80107cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80107d0:	e009      	b.n	80107e6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d0f2      	beq.n	80107c4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	22c5      	movs	r2, #197	; 0xc5
 80107e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80107e4:	2300      	movs	r3, #0
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3708      	adds	r7, #8
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bc90      	pop	{r4, r7}
 80107ee:	4770      	bx	lr
 80107f0:	20000000 	.word	0x20000000
 80107f4:	10624dd3 	.word	0x10624dd3

080107f8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80107f8:	b590      	push	{r4, r7, lr}
 80107fa:	b087      	sub	sp, #28
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	60f8      	str	r0, [r7, #12]
 8010800:	460b      	mov	r3, r1
 8010802:	607a      	str	r2, [r7, #4]
 8010804:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010806:	4b6f      	ldr	r3, [pc, #444]	; (80109c4 <SDMMC_GetCmdResp1+0x1cc>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	4a6f      	ldr	r2, [pc, #444]	; (80109c8 <SDMMC_GetCmdResp1+0x1d0>)
 801080c:	fba2 2303 	umull	r2, r3, r2, r3
 8010810:	0a5b      	lsrs	r3, r3, #9
 8010812:	687a      	ldr	r2, [r7, #4]
 8010814:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010818:	4623      	mov	r3, r4
 801081a:	1e5c      	subs	r4, r3, #1
 801081c:	2b00      	cmp	r3, #0
 801081e:	d102      	bne.n	8010826 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010820:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010824:	e0c9      	b.n	80109ba <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801082a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801082c:	697b      	ldr	r3, [r7, #20]
 801082e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010832:	2b00      	cmp	r3, #0
 8010834:	d0f0      	beq.n	8010818 <SDMMC_GetCmdResp1+0x20>
 8010836:	697b      	ldr	r3, [r7, #20]
 8010838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801083c:	2b00      	cmp	r3, #0
 801083e:	d1eb      	bne.n	8010818 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010844:	f003 0304 	and.w	r3, r3, #4
 8010848:	2b00      	cmp	r3, #0
 801084a:	d004      	beq.n	8010856 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	2204      	movs	r2, #4
 8010850:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010852:	2304      	movs	r3, #4
 8010854:	e0b1      	b.n	80109ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801085a:	f003 0301 	and.w	r3, r3, #1
 801085e:	2b00      	cmp	r3, #0
 8010860:	d004      	beq.n	801086c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	2201      	movs	r2, #1
 8010866:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010868:	2301      	movs	r3, #1
 801086a:	e0a6      	b.n	80109ba <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	22c5      	movs	r2, #197	; 0xc5
 8010870:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010872:	68f8      	ldr	r0, [r7, #12]
 8010874:	f7ff fd18 	bl	80102a8 <SDIO_GetCommandResponse>
 8010878:	4603      	mov	r3, r0
 801087a:	461a      	mov	r2, r3
 801087c:	7afb      	ldrb	r3, [r7, #11]
 801087e:	4293      	cmp	r3, r2
 8010880:	d001      	beq.n	8010886 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010882:	2301      	movs	r3, #1
 8010884:	e099      	b.n	80109ba <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010886:	2100      	movs	r1, #0
 8010888:	68f8      	ldr	r0, [r7, #12]
 801088a:	f7ff fd1a 	bl	80102c2 <SDIO_GetResponse>
 801088e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010890:	693a      	ldr	r2, [r7, #16]
 8010892:	4b4e      	ldr	r3, [pc, #312]	; (80109cc <SDMMC_GetCmdResp1+0x1d4>)
 8010894:	4013      	ands	r3, r2
 8010896:	2b00      	cmp	r3, #0
 8010898:	d101      	bne.n	801089e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 801089a:	2300      	movs	r3, #0
 801089c:	e08d      	b.n	80109ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801089e:	693b      	ldr	r3, [r7, #16]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	da02      	bge.n	80108aa <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80108a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80108a8:	e087      	b.n	80109ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80108aa:	693b      	ldr	r3, [r7, #16]
 80108ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d001      	beq.n	80108b8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80108b4:	2340      	movs	r3, #64	; 0x40
 80108b6:	e080      	b.n	80109ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80108b8:	693b      	ldr	r3, [r7, #16]
 80108ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d001      	beq.n	80108c6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80108c2:	2380      	movs	r3, #128	; 0x80
 80108c4:	e079      	b.n	80109ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80108c6:	693b      	ldr	r3, [r7, #16]
 80108c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d002      	beq.n	80108d6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80108d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80108d4:	e071      	b.n	80109ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80108d6:	693b      	ldr	r3, [r7, #16]
 80108d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d002      	beq.n	80108e6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80108e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80108e4:	e069      	b.n	80109ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80108e6:	693b      	ldr	r3, [r7, #16]
 80108e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d002      	beq.n	80108f6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80108f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108f4:	e061      	b.n	80109ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80108f6:	693b      	ldr	r3, [r7, #16]
 80108f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d002      	beq.n	8010906 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010900:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010904:	e059      	b.n	80109ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801090c:	2b00      	cmp	r3, #0
 801090e:	d002      	beq.n	8010916 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010914:	e051      	b.n	80109ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010916:	693b      	ldr	r3, [r7, #16]
 8010918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801091c:	2b00      	cmp	r3, #0
 801091e:	d002      	beq.n	8010926 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010924:	e049      	b.n	80109ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010926:	693b      	ldr	r3, [r7, #16]
 8010928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801092c:	2b00      	cmp	r3, #0
 801092e:	d002      	beq.n	8010936 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010930:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010934:	e041      	b.n	80109ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010936:	693b      	ldr	r3, [r7, #16]
 8010938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801093c:	2b00      	cmp	r3, #0
 801093e:	d002      	beq.n	8010946 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010944:	e039      	b.n	80109ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010946:	693b      	ldr	r3, [r7, #16]
 8010948:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801094c:	2b00      	cmp	r3, #0
 801094e:	d002      	beq.n	8010956 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010954:	e031      	b.n	80109ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010956:	693b      	ldr	r3, [r7, #16]
 8010958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801095c:	2b00      	cmp	r3, #0
 801095e:	d002      	beq.n	8010966 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010960:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010964:	e029      	b.n	80109ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010966:	693b      	ldr	r3, [r7, #16]
 8010968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801096c:	2b00      	cmp	r3, #0
 801096e:	d002      	beq.n	8010976 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010970:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010974:	e021      	b.n	80109ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010976:	693b      	ldr	r3, [r7, #16]
 8010978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801097c:	2b00      	cmp	r3, #0
 801097e:	d002      	beq.n	8010986 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010980:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010984:	e019      	b.n	80109ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010986:	693b      	ldr	r3, [r7, #16]
 8010988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801098c:	2b00      	cmp	r3, #0
 801098e:	d002      	beq.n	8010996 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010990:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010994:	e011      	b.n	80109ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010996:	693b      	ldr	r3, [r7, #16]
 8010998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801099c:	2b00      	cmp	r3, #0
 801099e:	d002      	beq.n	80109a6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80109a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80109a4:	e009      	b.n	80109ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80109a6:	693b      	ldr	r3, [r7, #16]
 80109a8:	f003 0308 	and.w	r3, r3, #8
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d002      	beq.n	80109b6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80109b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80109b4:	e001      	b.n	80109ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80109b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	371c      	adds	r7, #28
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd90      	pop	{r4, r7, pc}
 80109c2:	bf00      	nop
 80109c4:	20000000 	.word	0x20000000
 80109c8:	10624dd3 	.word	0x10624dd3
 80109cc:	fdffe008 	.word	0xfdffe008

080109d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80109d0:	b490      	push	{r4, r7}
 80109d2:	b084      	sub	sp, #16
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80109d8:	4b1e      	ldr	r3, [pc, #120]	; (8010a54 <SDMMC_GetCmdResp2+0x84>)
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	4a1e      	ldr	r2, [pc, #120]	; (8010a58 <SDMMC_GetCmdResp2+0x88>)
 80109de:	fba2 2303 	umull	r2, r3, r2, r3
 80109e2:	0a5b      	lsrs	r3, r3, #9
 80109e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80109e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80109ec:	4623      	mov	r3, r4
 80109ee:	1e5c      	subs	r4, r3, #1
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d102      	bne.n	80109fa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80109f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80109f8:	e026      	b.n	8010a48 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109fe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d0f0      	beq.n	80109ec <SDMMC_GetCmdResp2+0x1c>
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d1eb      	bne.n	80109ec <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a18:	f003 0304 	and.w	r3, r3, #4
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d004      	beq.n	8010a2a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2204      	movs	r2, #4
 8010a24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a26:	2304      	movs	r3, #4
 8010a28:	e00e      	b.n	8010a48 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a2e:	f003 0301 	and.w	r3, r3, #1
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d004      	beq.n	8010a40 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	2201      	movs	r2, #1
 8010a3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	e003      	b.n	8010a48 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	22c5      	movs	r2, #197	; 0xc5
 8010a44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010a46:	2300      	movs	r3, #0
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3710      	adds	r7, #16
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bc90      	pop	{r4, r7}
 8010a50:	4770      	bx	lr
 8010a52:	bf00      	nop
 8010a54:	20000000 	.word	0x20000000
 8010a58:	10624dd3 	.word	0x10624dd3

08010a5c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010a5c:	b490      	push	{r4, r7}
 8010a5e:	b084      	sub	sp, #16
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010a64:	4b18      	ldr	r3, [pc, #96]	; (8010ac8 <SDMMC_GetCmdResp3+0x6c>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	4a18      	ldr	r2, [pc, #96]	; (8010acc <SDMMC_GetCmdResp3+0x70>)
 8010a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8010a6e:	0a5b      	lsrs	r3, r3, #9
 8010a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a74:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010a78:	4623      	mov	r3, r4
 8010a7a:	1e5c      	subs	r4, r3, #1
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d102      	bne.n	8010a86 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a84:	e01b      	b.n	8010abe <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a8a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d0f0      	beq.n	8010a78 <SDMMC_GetCmdResp3+0x1c>
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d1eb      	bne.n	8010a78 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aa4:	f003 0304 	and.w	r3, r3, #4
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d004      	beq.n	8010ab6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2204      	movs	r2, #4
 8010ab0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010ab2:	2304      	movs	r3, #4
 8010ab4:	e003      	b.n	8010abe <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	22c5      	movs	r2, #197	; 0xc5
 8010aba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010abc:	2300      	movs	r3, #0
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3710      	adds	r7, #16
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bc90      	pop	{r4, r7}
 8010ac6:	4770      	bx	lr
 8010ac8:	20000000 	.word	0x20000000
 8010acc:	10624dd3 	.word	0x10624dd3

08010ad0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010ad0:	b590      	push	{r4, r7, lr}
 8010ad2:	b087      	sub	sp, #28
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	60f8      	str	r0, [r7, #12]
 8010ad8:	460b      	mov	r3, r1
 8010ada:	607a      	str	r2, [r7, #4]
 8010adc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010ade:	4b34      	ldr	r3, [pc, #208]	; (8010bb0 <SDMMC_GetCmdResp6+0xe0>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	4a34      	ldr	r2, [pc, #208]	; (8010bb4 <SDMMC_GetCmdResp6+0xe4>)
 8010ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8010ae8:	0a5b      	lsrs	r3, r3, #9
 8010aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8010aee:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010af2:	4623      	mov	r3, r4
 8010af4:	1e5c      	subs	r4, r3, #1
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d102      	bne.n	8010b00 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010afa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010afe:	e052      	b.n	8010ba6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b04:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d0f0      	beq.n	8010af2 <SDMMC_GetCmdResp6+0x22>
 8010b10:	697b      	ldr	r3, [r7, #20]
 8010b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d1eb      	bne.n	8010af2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b1e:	f003 0304 	and.w	r3, r3, #4
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d004      	beq.n	8010b30 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	2204      	movs	r2, #4
 8010b2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b2c:	2304      	movs	r3, #4
 8010b2e:	e03a      	b.n	8010ba6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b34:	f003 0301 	and.w	r3, r3, #1
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d004      	beq.n	8010b46 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	2201      	movs	r2, #1
 8010b40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b42:	2301      	movs	r3, #1
 8010b44:	e02f      	b.n	8010ba6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010b46:	68f8      	ldr	r0, [r7, #12]
 8010b48:	f7ff fbae 	bl	80102a8 <SDIO_GetCommandResponse>
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	461a      	mov	r2, r3
 8010b50:	7afb      	ldrb	r3, [r7, #11]
 8010b52:	4293      	cmp	r3, r2
 8010b54:	d001      	beq.n	8010b5a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b56:	2301      	movs	r3, #1
 8010b58:	e025      	b.n	8010ba6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	22c5      	movs	r2, #197	; 0xc5
 8010b5e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010b60:	2100      	movs	r1, #0
 8010b62:	68f8      	ldr	r0, [r7, #12]
 8010b64:	f7ff fbad 	bl	80102c2 <SDIO_GetResponse>
 8010b68:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010b6a:	693b      	ldr	r3, [r7, #16]
 8010b6c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d106      	bne.n	8010b82 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010b74:	693b      	ldr	r3, [r7, #16]
 8010b76:	0c1b      	lsrs	r3, r3, #16
 8010b78:	b29a      	uxth	r2, r3
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	e011      	b.n	8010ba6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010b82:	693b      	ldr	r3, [r7, #16]
 8010b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d002      	beq.n	8010b92 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010b90:	e009      	b.n	8010ba6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010b92:	693b      	ldr	r3, [r7, #16]
 8010b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d002      	beq.n	8010ba2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ba0:	e001      	b.n	8010ba6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010ba2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	371c      	adds	r7, #28
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd90      	pop	{r4, r7, pc}
 8010bae:	bf00      	nop
 8010bb0:	20000000 	.word	0x20000000
 8010bb4:	10624dd3 	.word	0x10624dd3

08010bb8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010bb8:	b490      	push	{r4, r7}
 8010bba:	b084      	sub	sp, #16
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010bc0:	4b21      	ldr	r3, [pc, #132]	; (8010c48 <SDMMC_GetCmdResp7+0x90>)
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	4a21      	ldr	r2, [pc, #132]	; (8010c4c <SDMMC_GetCmdResp7+0x94>)
 8010bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8010bca:	0a5b      	lsrs	r3, r3, #9
 8010bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010bd0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010bd4:	4623      	mov	r3, r4
 8010bd6:	1e5c      	subs	r4, r3, #1
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d102      	bne.n	8010be2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010bdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010be0:	e02c      	b.n	8010c3c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010be6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d0f0      	beq.n	8010bd4 <SDMMC_GetCmdResp7+0x1c>
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d1eb      	bne.n	8010bd4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c00:	f003 0304 	and.w	r3, r3, #4
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d004      	beq.n	8010c12 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2204      	movs	r2, #4
 8010c0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c0e:	2304      	movs	r3, #4
 8010c10:	e014      	b.n	8010c3c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c16:	f003 0301 	and.w	r3, r3, #1
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d004      	beq.n	8010c28 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	2201      	movs	r2, #1
 8010c22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c24:	2301      	movs	r3, #1
 8010c26:	e009      	b.n	8010c3c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d002      	beq.n	8010c3a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2240      	movs	r2, #64	; 0x40
 8010c38:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010c3a:	2300      	movs	r3, #0
  
}
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	3710      	adds	r7, #16
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bc90      	pop	{r4, r7}
 8010c44:	4770      	bx	lr
 8010c46:	bf00      	nop
 8010c48:	20000000 	.word	0x20000000
 8010c4c:	10624dd3 	.word	0x10624dd3

08010c50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010c54:	4904      	ldr	r1, [pc, #16]	; (8010c68 <MX_FATFS_Init+0x18>)
 8010c56:	4805      	ldr	r0, [pc, #20]	; (8010c6c <MX_FATFS_Init+0x1c>)
 8010c58:	f003 fba6 	bl	80143a8 <FATFS_LinkDriver>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	461a      	mov	r2, r3
 8010c60:	4b03      	ldr	r3, [pc, #12]	; (8010c70 <MX_FATFS_Init+0x20>)
 8010c62:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010c64:	bf00      	nop
 8010c66:	bd80      	pop	{r7, pc}
 8010c68:	2003fde8 	.word	0x2003fde8
 8010c6c:	0801ad2c 	.word	0x0801ad2c
 8010c70:	2003fde4 	.word	0x2003fde4

08010c74 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b082      	sub	sp, #8
 8010c78:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010c7e:	f000 f896 	bl	8010dae <BSP_SD_IsDetected>
 8010c82:	4603      	mov	r3, r0
 8010c84:	2b01      	cmp	r3, #1
 8010c86:	d001      	beq.n	8010c8c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010c88:	2301      	movs	r3, #1
 8010c8a:	e012      	b.n	8010cb2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010c8c:	480b      	ldr	r0, [pc, #44]	; (8010cbc <BSP_SD_Init+0x48>)
 8010c8e:	f7fb ff87 	bl	800cba0 <HAL_SD_Init>
 8010c92:	4603      	mov	r3, r0
 8010c94:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010c96:	79fb      	ldrb	r3, [r7, #7]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d109      	bne.n	8010cb0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010c9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010ca0:	4806      	ldr	r0, [pc, #24]	; (8010cbc <BSP_SD_Init+0x48>)
 8010ca2:	f7fc fd31 	bl	800d708 <HAL_SD_ConfigWideBusOperation>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d001      	beq.n	8010cb0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010cac:	2301      	movs	r3, #1
 8010cae:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010cb0:	79fb      	ldrb	r3, [r7, #7]
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3708      	adds	r7, #8
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
 8010cba:	bf00      	nop
 8010cbc:	2003fbe0 	.word	0x2003fbe0

08010cc0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b086      	sub	sp, #24
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	60f8      	str	r0, [r7, #12]
 8010cc8:	60b9      	str	r1, [r7, #8]
 8010cca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	68ba      	ldr	r2, [r7, #8]
 8010cd4:	68f9      	ldr	r1, [r7, #12]
 8010cd6:	4806      	ldr	r0, [pc, #24]	; (8010cf0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010cd8:	f7fb fff2 	bl	800ccc0 <HAL_SD_ReadBlocks_DMA>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d001      	beq.n	8010ce6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ce8:	4618      	mov	r0, r3
 8010cea:	3718      	adds	r7, #24
 8010cec:	46bd      	mov	sp, r7
 8010cee:	bd80      	pop	{r7, pc}
 8010cf0:	2003fbe0 	.word	0x2003fbe0

08010cf4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b086      	sub	sp, #24
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	60f8      	str	r0, [r7, #12]
 8010cfc:	60b9      	str	r1, [r7, #8]
 8010cfe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010d00:	2300      	movs	r3, #0
 8010d02:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	68ba      	ldr	r2, [r7, #8]
 8010d08:	68f9      	ldr	r1, [r7, #12]
 8010d0a:	4806      	ldr	r0, [pc, #24]	; (8010d24 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010d0c:	f7fc f8c0 	bl	800ce90 <HAL_SD_WriteBlocks_DMA>
 8010d10:	4603      	mov	r3, r0
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d001      	beq.n	8010d1a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010d16:	2301      	movs	r3, #1
 8010d18:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	3718      	adds	r7, #24
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}
 8010d24:	2003fbe0 	.word	0x2003fbe0

08010d28 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010d2c:	4805      	ldr	r0, [pc, #20]	; (8010d44 <BSP_SD_GetCardState+0x1c>)
 8010d2e:	f7fc fd67 	bl	800d800 <HAL_SD_GetCardState>
 8010d32:	4603      	mov	r3, r0
 8010d34:	2b04      	cmp	r3, #4
 8010d36:	bf14      	ite	ne
 8010d38:	2301      	movne	r3, #1
 8010d3a:	2300      	moveq	r3, #0
 8010d3c:	b2db      	uxtb	r3, r3
}
 8010d3e:	4618      	mov	r0, r3
 8010d40:	bd80      	pop	{r7, pc}
 8010d42:	bf00      	nop
 8010d44:	2003fbe0 	.word	0x2003fbe0

08010d48 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b082      	sub	sp, #8
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010d50:	6879      	ldr	r1, [r7, #4]
 8010d52:	4803      	ldr	r0, [pc, #12]	; (8010d60 <BSP_SD_GetCardInfo+0x18>)
 8010d54:	f7fc fcac 	bl	800d6b0 <HAL_SD_GetCardInfo>
}
 8010d58:	bf00      	nop
 8010d5a:	3708      	adds	r7, #8
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}
 8010d60:	2003fbe0 	.word	0x2003fbe0

08010d64 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b082      	sub	sp, #8
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8010d6c:	f000 f818 	bl	8010da0 <BSP_SD_AbortCallback>
}
 8010d70:	bf00      	nop
 8010d72:	3708      	adds	r7, #8
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}

08010d78 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b082      	sub	sp, #8
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010d80:	f000 f9a8 	bl	80110d4 <BSP_SD_WriteCpltCallback>
}
 8010d84:	bf00      	nop
 8010d86:	3708      	adds	r7, #8
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd80      	pop	{r7, pc}

08010d8c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b082      	sub	sp, #8
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010d94:	f000 f9aa 	bl	80110ec <BSP_SD_ReadCpltCallback>
}
 8010d98:	bf00      	nop
 8010d9a:	3708      	adds	r7, #8
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}

08010da0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010da0:	b480      	push	{r7}
 8010da2:	af00      	add	r7, sp, #0

}
 8010da4:	bf00      	nop
 8010da6:	46bd      	mov	sp, r7
 8010da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dac:	4770      	bx	lr

08010dae <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010dae:	b580      	push	{r7, lr}
 8010db0:	b082      	sub	sp, #8
 8010db2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010db4:	2301      	movs	r3, #1
 8010db6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010db8:	f000 f80c 	bl	8010dd4 <BSP_PlatformIsDetected>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d101      	bne.n	8010dc6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010dc6:	79fb      	ldrb	r3, [r7, #7]
 8010dc8:	b2db      	uxtb	r3, r3
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3708      	adds	r7, #8
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}
	...

08010dd4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b082      	sub	sp, #8
 8010dd8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010dda:	2301      	movs	r3, #1
 8010ddc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010dde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010de2:	4806      	ldr	r0, [pc, #24]	; (8010dfc <BSP_PlatformIsDetected+0x28>)
 8010de4:	f7fa f84a 	bl	800ae7c <HAL_GPIO_ReadPin>
 8010de8:	4603      	mov	r3, r0
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d001      	beq.n	8010df2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010dee:	2300      	movs	r3, #0
 8010df0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010df2:	79fb      	ldrb	r3, [r7, #7]
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	3708      	adds	r7, #8
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}
 8010dfc:	40020000 	.word	0x40020000

08010e00 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b084      	sub	sp, #16
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010e08:	f7f8 fda8 	bl	800995c <HAL_GetTick>
 8010e0c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010e0e:	e006      	b.n	8010e1e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010e10:	f7ff ff8a 	bl	8010d28 <BSP_SD_GetCardState>
 8010e14:	4603      	mov	r3, r0
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d101      	bne.n	8010e1e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	e009      	b.n	8010e32 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010e1e:	f7f8 fd9d 	bl	800995c <HAL_GetTick>
 8010e22:	4602      	mov	r2, r0
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	1ad3      	subs	r3, r2, r3
 8010e28:	687a      	ldr	r2, [r7, #4]
 8010e2a:	429a      	cmp	r2, r3
 8010e2c:	d8f0      	bhi.n	8010e10 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010e2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3710      	adds	r7, #16
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}
	...

08010e3c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b082      	sub	sp, #8
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	4603      	mov	r3, r0
 8010e44:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010e46:	4b0b      	ldr	r3, [pc, #44]	; (8010e74 <SD_CheckStatus+0x38>)
 8010e48:	2201      	movs	r2, #1
 8010e4a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010e4c:	f7ff ff6c 	bl	8010d28 <BSP_SD_GetCardState>
 8010e50:	4603      	mov	r3, r0
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d107      	bne.n	8010e66 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010e56:	4b07      	ldr	r3, [pc, #28]	; (8010e74 <SD_CheckStatus+0x38>)
 8010e58:	781b      	ldrb	r3, [r3, #0]
 8010e5a:	b2db      	uxtb	r3, r3
 8010e5c:	f023 0301 	bic.w	r3, r3, #1
 8010e60:	b2da      	uxtb	r2, r3
 8010e62:	4b04      	ldr	r3, [pc, #16]	; (8010e74 <SD_CheckStatus+0x38>)
 8010e64:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010e66:	4b03      	ldr	r3, [pc, #12]	; (8010e74 <SD_CheckStatus+0x38>)
 8010e68:	781b      	ldrb	r3, [r3, #0]
 8010e6a:	b2db      	uxtb	r3, r3
}
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	3708      	adds	r7, #8
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}
 8010e74:	20000009 	.word	0x20000009

08010e78 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b082      	sub	sp, #8
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	4603      	mov	r3, r0
 8010e80:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010e82:	f7ff fef7 	bl	8010c74 <BSP_SD_Init>
 8010e86:	4603      	mov	r3, r0
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d107      	bne.n	8010e9c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010e8c:	79fb      	ldrb	r3, [r7, #7]
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7ff ffd4 	bl	8010e3c <SD_CheckStatus>
 8010e94:	4603      	mov	r3, r0
 8010e96:	461a      	mov	r2, r3
 8010e98:	4b04      	ldr	r3, [pc, #16]	; (8010eac <SD_initialize+0x34>)
 8010e9a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010e9c:	4b03      	ldr	r3, [pc, #12]	; (8010eac <SD_initialize+0x34>)
 8010e9e:	781b      	ldrb	r3, [r3, #0]
 8010ea0:	b2db      	uxtb	r3, r3
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	3708      	adds	r7, #8
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	bf00      	nop
 8010eac:	20000009 	.word	0x20000009

08010eb0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b082      	sub	sp, #8
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010eba:	79fb      	ldrb	r3, [r7, #7]
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f7ff ffbd 	bl	8010e3c <SD_CheckStatus>
 8010ec2:	4603      	mov	r3, r0
}
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	3708      	adds	r7, #8
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}

08010ecc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b086      	sub	sp, #24
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	60b9      	str	r1, [r7, #8]
 8010ed4:	607a      	str	r2, [r7, #4]
 8010ed6:	603b      	str	r3, [r7, #0]
 8010ed8:	4603      	mov	r3, r0
 8010eda:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010edc:	2301      	movs	r3, #1
 8010ede:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010ee0:	f247 5030 	movw	r0, #30000	; 0x7530
 8010ee4:	f7ff ff8c 	bl	8010e00 <SD_CheckStatusWithTimeout>
 8010ee8:	4603      	mov	r3, r0
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	da01      	bge.n	8010ef2 <SD_read+0x26>
  {
    return res;
 8010eee:	7dfb      	ldrb	r3, [r7, #23]
 8010ef0:	e03b      	b.n	8010f6a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010ef2:	683a      	ldr	r2, [r7, #0]
 8010ef4:	6879      	ldr	r1, [r7, #4]
 8010ef6:	68b8      	ldr	r0, [r7, #8]
 8010ef8:	f7ff fee2 	bl	8010cc0 <BSP_SD_ReadBlocks_DMA>
 8010efc:	4603      	mov	r3, r0
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d132      	bne.n	8010f68 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010f02:	4b1c      	ldr	r3, [pc, #112]	; (8010f74 <SD_read+0xa8>)
 8010f04:	2200      	movs	r2, #0
 8010f06:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010f08:	f7f8 fd28 	bl	800995c <HAL_GetTick>
 8010f0c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010f0e:	bf00      	nop
 8010f10:	4b18      	ldr	r3, [pc, #96]	; (8010f74 <SD_read+0xa8>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d108      	bne.n	8010f2a <SD_read+0x5e>
 8010f18:	f7f8 fd20 	bl	800995c <HAL_GetTick>
 8010f1c:	4602      	mov	r2, r0
 8010f1e:	693b      	ldr	r3, [r7, #16]
 8010f20:	1ad3      	subs	r3, r2, r3
 8010f22:	f247 522f 	movw	r2, #29999	; 0x752f
 8010f26:	4293      	cmp	r3, r2
 8010f28:	d9f2      	bls.n	8010f10 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8010f2a:	4b12      	ldr	r3, [pc, #72]	; (8010f74 <SD_read+0xa8>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d102      	bne.n	8010f38 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010f32:	2301      	movs	r3, #1
 8010f34:	75fb      	strb	r3, [r7, #23]
 8010f36:	e017      	b.n	8010f68 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010f38:	4b0e      	ldr	r3, [pc, #56]	; (8010f74 <SD_read+0xa8>)
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010f3e:	f7f8 fd0d 	bl	800995c <HAL_GetTick>
 8010f42:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010f44:	e007      	b.n	8010f56 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010f46:	f7ff feef 	bl	8010d28 <BSP_SD_GetCardState>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d102      	bne.n	8010f56 <SD_read+0x8a>
          {
            res = RES_OK;
 8010f50:	2300      	movs	r3, #0
 8010f52:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010f54:	e008      	b.n	8010f68 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010f56:	f7f8 fd01 	bl	800995c <HAL_GetTick>
 8010f5a:	4602      	mov	r2, r0
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	1ad3      	subs	r3, r2, r3
 8010f60:	f247 522f 	movw	r2, #29999	; 0x752f
 8010f64:	4293      	cmp	r3, r2
 8010f66:	d9ee      	bls.n	8010f46 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	3718      	adds	r7, #24
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}
 8010f72:	bf00      	nop
 8010f74:	2003d47c 	.word	0x2003d47c

08010f78 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b086      	sub	sp, #24
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	60b9      	str	r1, [r7, #8]
 8010f80:	607a      	str	r2, [r7, #4]
 8010f82:	603b      	str	r3, [r7, #0]
 8010f84:	4603      	mov	r3, r0
 8010f86:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010f88:	2301      	movs	r3, #1
 8010f8a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010f8c:	4b24      	ldr	r3, [pc, #144]	; (8011020 <SD_write+0xa8>)
 8010f8e:	2200      	movs	r2, #0
 8010f90:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010f92:	f247 5030 	movw	r0, #30000	; 0x7530
 8010f96:	f7ff ff33 	bl	8010e00 <SD_CheckStatusWithTimeout>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	da01      	bge.n	8010fa4 <SD_write+0x2c>
  {
    return res;
 8010fa0:	7dfb      	ldrb	r3, [r7, #23]
 8010fa2:	e038      	b.n	8011016 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010fa4:	683a      	ldr	r2, [r7, #0]
 8010fa6:	6879      	ldr	r1, [r7, #4]
 8010fa8:	68b8      	ldr	r0, [r7, #8]
 8010faa:	f7ff fea3 	bl	8010cf4 <BSP_SD_WriteBlocks_DMA>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d12f      	bne.n	8011014 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010fb4:	f7f8 fcd2 	bl	800995c <HAL_GetTick>
 8010fb8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010fba:	bf00      	nop
 8010fbc:	4b18      	ldr	r3, [pc, #96]	; (8011020 <SD_write+0xa8>)
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d108      	bne.n	8010fd6 <SD_write+0x5e>
 8010fc4:	f7f8 fcca 	bl	800995c <HAL_GetTick>
 8010fc8:	4602      	mov	r2, r0
 8010fca:	693b      	ldr	r3, [r7, #16]
 8010fcc:	1ad3      	subs	r3, r2, r3
 8010fce:	f247 522f 	movw	r2, #29999	; 0x752f
 8010fd2:	4293      	cmp	r3, r2
 8010fd4:	d9f2      	bls.n	8010fbc <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8010fd6:	4b12      	ldr	r3, [pc, #72]	; (8011020 <SD_write+0xa8>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d102      	bne.n	8010fe4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010fde:	2301      	movs	r3, #1
 8010fe0:	75fb      	strb	r3, [r7, #23]
 8010fe2:	e017      	b.n	8011014 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010fe4:	4b0e      	ldr	r3, [pc, #56]	; (8011020 <SD_write+0xa8>)
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010fea:	f7f8 fcb7 	bl	800995c <HAL_GetTick>
 8010fee:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010ff0:	e007      	b.n	8011002 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010ff2:	f7ff fe99 	bl	8010d28 <BSP_SD_GetCardState>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d102      	bne.n	8011002 <SD_write+0x8a>
          {
            res = RES_OK;
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	75fb      	strb	r3, [r7, #23]
            break;
 8011000:	e008      	b.n	8011014 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011002:	f7f8 fcab 	bl	800995c <HAL_GetTick>
 8011006:	4602      	mov	r2, r0
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	1ad3      	subs	r3, r2, r3
 801100c:	f247 522f 	movw	r2, #29999	; 0x752f
 8011010:	4293      	cmp	r3, r2
 8011012:	d9ee      	bls.n	8010ff2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8011014:	7dfb      	ldrb	r3, [r7, #23]
}
 8011016:	4618      	mov	r0, r3
 8011018:	3718      	adds	r7, #24
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}
 801101e:	bf00      	nop
 8011020:	2003d478 	.word	0x2003d478

08011024 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b08c      	sub	sp, #48	; 0x30
 8011028:	af00      	add	r7, sp, #0
 801102a:	4603      	mov	r3, r0
 801102c:	603a      	str	r2, [r7, #0]
 801102e:	71fb      	strb	r3, [r7, #7]
 8011030:	460b      	mov	r3, r1
 8011032:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011034:	2301      	movs	r3, #1
 8011036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801103a:	4b25      	ldr	r3, [pc, #148]	; (80110d0 <SD_ioctl+0xac>)
 801103c:	781b      	ldrb	r3, [r3, #0]
 801103e:	b2db      	uxtb	r3, r3
 8011040:	f003 0301 	and.w	r3, r3, #1
 8011044:	2b00      	cmp	r3, #0
 8011046:	d001      	beq.n	801104c <SD_ioctl+0x28>
 8011048:	2303      	movs	r3, #3
 801104a:	e03c      	b.n	80110c6 <SD_ioctl+0xa2>

  switch (cmd)
 801104c:	79bb      	ldrb	r3, [r7, #6]
 801104e:	2b03      	cmp	r3, #3
 8011050:	d834      	bhi.n	80110bc <SD_ioctl+0x98>
 8011052:	a201      	add	r2, pc, #4	; (adr r2, 8011058 <SD_ioctl+0x34>)
 8011054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011058:	08011069 	.word	0x08011069
 801105c:	08011071 	.word	0x08011071
 8011060:	08011089 	.word	0x08011089
 8011064:	080110a3 	.word	0x080110a3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011068:	2300      	movs	r3, #0
 801106a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801106e:	e028      	b.n	80110c2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011070:	f107 030c 	add.w	r3, r7, #12
 8011074:	4618      	mov	r0, r3
 8011076:	f7ff fe67 	bl	8010d48 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801107a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011080:	2300      	movs	r3, #0
 8011082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011086:	e01c      	b.n	80110c2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011088:	f107 030c 	add.w	r3, r7, #12
 801108c:	4618      	mov	r0, r3
 801108e:	f7ff fe5b 	bl	8010d48 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011094:	b29a      	uxth	r2, r3
 8011096:	683b      	ldr	r3, [r7, #0]
 8011098:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801109a:	2300      	movs	r3, #0
 801109c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80110a0:	e00f      	b.n	80110c2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80110a2:	f107 030c 	add.w	r3, r7, #12
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7ff fe4e 	bl	8010d48 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80110ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ae:	0a5a      	lsrs	r2, r3, #9
 80110b0:	683b      	ldr	r3, [r7, #0]
 80110b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80110b4:	2300      	movs	r3, #0
 80110b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80110ba:	e002      	b.n	80110c2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80110bc:	2304      	movs	r3, #4
 80110be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80110c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80110c6:	4618      	mov	r0, r3
 80110c8:	3730      	adds	r7, #48	; 0x30
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}
 80110ce:	bf00      	nop
 80110d0:	20000009 	.word	0x20000009

080110d4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80110d4:	b480      	push	{r7}
 80110d6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80110d8:	4b03      	ldr	r3, [pc, #12]	; (80110e8 <BSP_SD_WriteCpltCallback+0x14>)
 80110da:	2201      	movs	r2, #1
 80110dc:	601a      	str	r2, [r3, #0]
}
 80110de:	bf00      	nop
 80110e0:	46bd      	mov	sp, r7
 80110e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e6:	4770      	bx	lr
 80110e8:	2003d478 	.word	0x2003d478

080110ec <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80110ec:	b480      	push	{r7}
 80110ee:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80110f0:	4b03      	ldr	r3, [pc, #12]	; (8011100 <BSP_SD_ReadCpltCallback+0x14>)
 80110f2:	2201      	movs	r2, #1
 80110f4:	601a      	str	r2, [r3, #0]
}
 80110f6:	bf00      	nop
 80110f8:	46bd      	mov	sp, r7
 80110fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fe:	4770      	bx	lr
 8011100:	2003d47c 	.word	0x2003d47c

08011104 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b084      	sub	sp, #16
 8011108:	af00      	add	r7, sp, #0
 801110a:	4603      	mov	r3, r0
 801110c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801110e:	79fb      	ldrb	r3, [r7, #7]
 8011110:	4a08      	ldr	r2, [pc, #32]	; (8011134 <disk_status+0x30>)
 8011112:	009b      	lsls	r3, r3, #2
 8011114:	4413      	add	r3, r2
 8011116:	685b      	ldr	r3, [r3, #4]
 8011118:	685b      	ldr	r3, [r3, #4]
 801111a:	79fa      	ldrb	r2, [r7, #7]
 801111c:	4905      	ldr	r1, [pc, #20]	; (8011134 <disk_status+0x30>)
 801111e:	440a      	add	r2, r1
 8011120:	7a12      	ldrb	r2, [r2, #8]
 8011122:	4610      	mov	r0, r2
 8011124:	4798      	blx	r3
 8011126:	4603      	mov	r3, r0
 8011128:	73fb      	strb	r3, [r7, #15]
  return stat;
 801112a:	7bfb      	ldrb	r3, [r7, #15]
}
 801112c:	4618      	mov	r0, r3
 801112e:	3710      	adds	r7, #16
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}
 8011134:	2003d4a8 	.word	0x2003d4a8

08011138 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b084      	sub	sp, #16
 801113c:	af00      	add	r7, sp, #0
 801113e:	4603      	mov	r3, r0
 8011140:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011142:	2300      	movs	r3, #0
 8011144:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011146:	79fb      	ldrb	r3, [r7, #7]
 8011148:	4a0d      	ldr	r2, [pc, #52]	; (8011180 <disk_initialize+0x48>)
 801114a:	5cd3      	ldrb	r3, [r2, r3]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d111      	bne.n	8011174 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011150:	79fb      	ldrb	r3, [r7, #7]
 8011152:	4a0b      	ldr	r2, [pc, #44]	; (8011180 <disk_initialize+0x48>)
 8011154:	2101      	movs	r1, #1
 8011156:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011158:	79fb      	ldrb	r3, [r7, #7]
 801115a:	4a09      	ldr	r2, [pc, #36]	; (8011180 <disk_initialize+0x48>)
 801115c:	009b      	lsls	r3, r3, #2
 801115e:	4413      	add	r3, r2
 8011160:	685b      	ldr	r3, [r3, #4]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	79fa      	ldrb	r2, [r7, #7]
 8011166:	4906      	ldr	r1, [pc, #24]	; (8011180 <disk_initialize+0x48>)
 8011168:	440a      	add	r2, r1
 801116a:	7a12      	ldrb	r2, [r2, #8]
 801116c:	4610      	mov	r0, r2
 801116e:	4798      	blx	r3
 8011170:	4603      	mov	r3, r0
 8011172:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011174:	7bfb      	ldrb	r3, [r7, #15]
}
 8011176:	4618      	mov	r0, r3
 8011178:	3710      	adds	r7, #16
 801117a:	46bd      	mov	sp, r7
 801117c:	bd80      	pop	{r7, pc}
 801117e:	bf00      	nop
 8011180:	2003d4a8 	.word	0x2003d4a8

08011184 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011184:	b590      	push	{r4, r7, lr}
 8011186:	b087      	sub	sp, #28
 8011188:	af00      	add	r7, sp, #0
 801118a:	60b9      	str	r1, [r7, #8]
 801118c:	607a      	str	r2, [r7, #4]
 801118e:	603b      	str	r3, [r7, #0]
 8011190:	4603      	mov	r3, r0
 8011192:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011194:	7bfb      	ldrb	r3, [r7, #15]
 8011196:	4a0a      	ldr	r2, [pc, #40]	; (80111c0 <disk_read+0x3c>)
 8011198:	009b      	lsls	r3, r3, #2
 801119a:	4413      	add	r3, r2
 801119c:	685b      	ldr	r3, [r3, #4]
 801119e:	689c      	ldr	r4, [r3, #8]
 80111a0:	7bfb      	ldrb	r3, [r7, #15]
 80111a2:	4a07      	ldr	r2, [pc, #28]	; (80111c0 <disk_read+0x3c>)
 80111a4:	4413      	add	r3, r2
 80111a6:	7a18      	ldrb	r0, [r3, #8]
 80111a8:	683b      	ldr	r3, [r7, #0]
 80111aa:	687a      	ldr	r2, [r7, #4]
 80111ac:	68b9      	ldr	r1, [r7, #8]
 80111ae:	47a0      	blx	r4
 80111b0:	4603      	mov	r3, r0
 80111b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80111b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80111b6:	4618      	mov	r0, r3
 80111b8:	371c      	adds	r7, #28
 80111ba:	46bd      	mov	sp, r7
 80111bc:	bd90      	pop	{r4, r7, pc}
 80111be:	bf00      	nop
 80111c0:	2003d4a8 	.word	0x2003d4a8

080111c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80111c4:	b590      	push	{r4, r7, lr}
 80111c6:	b087      	sub	sp, #28
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	60b9      	str	r1, [r7, #8]
 80111cc:	607a      	str	r2, [r7, #4]
 80111ce:	603b      	str	r3, [r7, #0]
 80111d0:	4603      	mov	r3, r0
 80111d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80111d4:	7bfb      	ldrb	r3, [r7, #15]
 80111d6:	4a0a      	ldr	r2, [pc, #40]	; (8011200 <disk_write+0x3c>)
 80111d8:	009b      	lsls	r3, r3, #2
 80111da:	4413      	add	r3, r2
 80111dc:	685b      	ldr	r3, [r3, #4]
 80111de:	68dc      	ldr	r4, [r3, #12]
 80111e0:	7bfb      	ldrb	r3, [r7, #15]
 80111e2:	4a07      	ldr	r2, [pc, #28]	; (8011200 <disk_write+0x3c>)
 80111e4:	4413      	add	r3, r2
 80111e6:	7a18      	ldrb	r0, [r3, #8]
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	687a      	ldr	r2, [r7, #4]
 80111ec:	68b9      	ldr	r1, [r7, #8]
 80111ee:	47a0      	blx	r4
 80111f0:	4603      	mov	r3, r0
 80111f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80111f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	371c      	adds	r7, #28
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd90      	pop	{r4, r7, pc}
 80111fe:	bf00      	nop
 8011200:	2003d4a8 	.word	0x2003d4a8

08011204 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b084      	sub	sp, #16
 8011208:	af00      	add	r7, sp, #0
 801120a:	4603      	mov	r3, r0
 801120c:	603a      	str	r2, [r7, #0]
 801120e:	71fb      	strb	r3, [r7, #7]
 8011210:	460b      	mov	r3, r1
 8011212:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011214:	79fb      	ldrb	r3, [r7, #7]
 8011216:	4a09      	ldr	r2, [pc, #36]	; (801123c <disk_ioctl+0x38>)
 8011218:	009b      	lsls	r3, r3, #2
 801121a:	4413      	add	r3, r2
 801121c:	685b      	ldr	r3, [r3, #4]
 801121e:	691b      	ldr	r3, [r3, #16]
 8011220:	79fa      	ldrb	r2, [r7, #7]
 8011222:	4906      	ldr	r1, [pc, #24]	; (801123c <disk_ioctl+0x38>)
 8011224:	440a      	add	r2, r1
 8011226:	7a10      	ldrb	r0, [r2, #8]
 8011228:	79b9      	ldrb	r1, [r7, #6]
 801122a:	683a      	ldr	r2, [r7, #0]
 801122c:	4798      	blx	r3
 801122e:	4603      	mov	r3, r0
 8011230:	73fb      	strb	r3, [r7, #15]
  return res;
 8011232:	7bfb      	ldrb	r3, [r7, #15]
}
 8011234:	4618      	mov	r0, r3
 8011236:	3710      	adds	r7, #16
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}
 801123c:	2003d4a8 	.word	0x2003d4a8

08011240 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011240:	b480      	push	{r7}
 8011242:	b085      	sub	sp, #20
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	3301      	adds	r3, #1
 801124c:	781b      	ldrb	r3, [r3, #0]
 801124e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011250:	89fb      	ldrh	r3, [r7, #14]
 8011252:	021b      	lsls	r3, r3, #8
 8011254:	b21a      	sxth	r2, r3
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	781b      	ldrb	r3, [r3, #0]
 801125a:	b21b      	sxth	r3, r3
 801125c:	4313      	orrs	r3, r2
 801125e:	b21b      	sxth	r3, r3
 8011260:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011262:	89fb      	ldrh	r3, [r7, #14]
}
 8011264:	4618      	mov	r0, r3
 8011266:	3714      	adds	r7, #20
 8011268:	46bd      	mov	sp, r7
 801126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126e:	4770      	bx	lr

08011270 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011270:	b480      	push	{r7}
 8011272:	b085      	sub	sp, #20
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	3303      	adds	r3, #3
 801127c:	781b      	ldrb	r3, [r3, #0]
 801127e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	021b      	lsls	r3, r3, #8
 8011284:	687a      	ldr	r2, [r7, #4]
 8011286:	3202      	adds	r2, #2
 8011288:	7812      	ldrb	r2, [r2, #0]
 801128a:	4313      	orrs	r3, r2
 801128c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	021b      	lsls	r3, r3, #8
 8011292:	687a      	ldr	r2, [r7, #4]
 8011294:	3201      	adds	r2, #1
 8011296:	7812      	ldrb	r2, [r2, #0]
 8011298:	4313      	orrs	r3, r2
 801129a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	021b      	lsls	r3, r3, #8
 80112a0:	687a      	ldr	r2, [r7, #4]
 80112a2:	7812      	ldrb	r2, [r2, #0]
 80112a4:	4313      	orrs	r3, r2
 80112a6:	60fb      	str	r3, [r7, #12]
	return rv;
 80112a8:	68fb      	ldr	r3, [r7, #12]
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	3714      	adds	r7, #20
 80112ae:	46bd      	mov	sp, r7
 80112b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b4:	4770      	bx	lr

080112b6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80112b6:	b480      	push	{r7}
 80112b8:	b083      	sub	sp, #12
 80112ba:	af00      	add	r7, sp, #0
 80112bc:	6078      	str	r0, [r7, #4]
 80112be:	460b      	mov	r3, r1
 80112c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	1c5a      	adds	r2, r3, #1
 80112c6:	607a      	str	r2, [r7, #4]
 80112c8:	887a      	ldrh	r2, [r7, #2]
 80112ca:	b2d2      	uxtb	r2, r2
 80112cc:	701a      	strb	r2, [r3, #0]
 80112ce:	887b      	ldrh	r3, [r7, #2]
 80112d0:	0a1b      	lsrs	r3, r3, #8
 80112d2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	1c5a      	adds	r2, r3, #1
 80112d8:	607a      	str	r2, [r7, #4]
 80112da:	887a      	ldrh	r2, [r7, #2]
 80112dc:	b2d2      	uxtb	r2, r2
 80112de:	701a      	strb	r2, [r3, #0]
}
 80112e0:	bf00      	nop
 80112e2:	370c      	adds	r7, #12
 80112e4:	46bd      	mov	sp, r7
 80112e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ea:	4770      	bx	lr

080112ec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80112ec:	b480      	push	{r7}
 80112ee:	b083      	sub	sp, #12
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	1c5a      	adds	r2, r3, #1
 80112fa:	607a      	str	r2, [r7, #4]
 80112fc:	683a      	ldr	r2, [r7, #0]
 80112fe:	b2d2      	uxtb	r2, r2
 8011300:	701a      	strb	r2, [r3, #0]
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	0a1b      	lsrs	r3, r3, #8
 8011306:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	1c5a      	adds	r2, r3, #1
 801130c:	607a      	str	r2, [r7, #4]
 801130e:	683a      	ldr	r2, [r7, #0]
 8011310:	b2d2      	uxtb	r2, r2
 8011312:	701a      	strb	r2, [r3, #0]
 8011314:	683b      	ldr	r3, [r7, #0]
 8011316:	0a1b      	lsrs	r3, r3, #8
 8011318:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	1c5a      	adds	r2, r3, #1
 801131e:	607a      	str	r2, [r7, #4]
 8011320:	683a      	ldr	r2, [r7, #0]
 8011322:	b2d2      	uxtb	r2, r2
 8011324:	701a      	strb	r2, [r3, #0]
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	0a1b      	lsrs	r3, r3, #8
 801132a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	1c5a      	adds	r2, r3, #1
 8011330:	607a      	str	r2, [r7, #4]
 8011332:	683a      	ldr	r2, [r7, #0]
 8011334:	b2d2      	uxtb	r2, r2
 8011336:	701a      	strb	r2, [r3, #0]
}
 8011338:	bf00      	nop
 801133a:	370c      	adds	r7, #12
 801133c:	46bd      	mov	sp, r7
 801133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011342:	4770      	bx	lr

08011344 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011344:	b480      	push	{r7}
 8011346:	b087      	sub	sp, #28
 8011348:	af00      	add	r7, sp, #0
 801134a:	60f8      	str	r0, [r7, #12]
 801134c:	60b9      	str	r1, [r7, #8]
 801134e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011354:	68bb      	ldr	r3, [r7, #8]
 8011356:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d00d      	beq.n	801137a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801135e:	693a      	ldr	r2, [r7, #16]
 8011360:	1c53      	adds	r3, r2, #1
 8011362:	613b      	str	r3, [r7, #16]
 8011364:	697b      	ldr	r3, [r7, #20]
 8011366:	1c59      	adds	r1, r3, #1
 8011368:	6179      	str	r1, [r7, #20]
 801136a:	7812      	ldrb	r2, [r2, #0]
 801136c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	3b01      	subs	r3, #1
 8011372:	607b      	str	r3, [r7, #4]
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d1f1      	bne.n	801135e <mem_cpy+0x1a>
	}
}
 801137a:	bf00      	nop
 801137c:	371c      	adds	r7, #28
 801137e:	46bd      	mov	sp, r7
 8011380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011384:	4770      	bx	lr

08011386 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011386:	b480      	push	{r7}
 8011388:	b087      	sub	sp, #28
 801138a:	af00      	add	r7, sp, #0
 801138c:	60f8      	str	r0, [r7, #12]
 801138e:	60b9      	str	r1, [r7, #8]
 8011390:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011396:	697b      	ldr	r3, [r7, #20]
 8011398:	1c5a      	adds	r2, r3, #1
 801139a:	617a      	str	r2, [r7, #20]
 801139c:	68ba      	ldr	r2, [r7, #8]
 801139e:	b2d2      	uxtb	r2, r2
 80113a0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	3b01      	subs	r3, #1
 80113a6:	607b      	str	r3, [r7, #4]
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d1f3      	bne.n	8011396 <mem_set+0x10>
}
 80113ae:	bf00      	nop
 80113b0:	bf00      	nop
 80113b2:	371c      	adds	r7, #28
 80113b4:	46bd      	mov	sp, r7
 80113b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ba:	4770      	bx	lr

080113bc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80113bc:	b480      	push	{r7}
 80113be:	b089      	sub	sp, #36	; 0x24
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	60f8      	str	r0, [r7, #12]
 80113c4:	60b9      	str	r1, [r7, #8]
 80113c6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	61fb      	str	r3, [r7, #28]
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80113d0:	2300      	movs	r3, #0
 80113d2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80113d4:	69fb      	ldr	r3, [r7, #28]
 80113d6:	1c5a      	adds	r2, r3, #1
 80113d8:	61fa      	str	r2, [r7, #28]
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	4619      	mov	r1, r3
 80113de:	69bb      	ldr	r3, [r7, #24]
 80113e0:	1c5a      	adds	r2, r3, #1
 80113e2:	61ba      	str	r2, [r7, #24]
 80113e4:	781b      	ldrb	r3, [r3, #0]
 80113e6:	1acb      	subs	r3, r1, r3
 80113e8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	3b01      	subs	r3, #1
 80113ee:	607b      	str	r3, [r7, #4]
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d002      	beq.n	80113fc <mem_cmp+0x40>
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d0eb      	beq.n	80113d4 <mem_cmp+0x18>

	return r;
 80113fc:	697b      	ldr	r3, [r7, #20]
}
 80113fe:	4618      	mov	r0, r3
 8011400:	3724      	adds	r7, #36	; 0x24
 8011402:	46bd      	mov	sp, r7
 8011404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011408:	4770      	bx	lr

0801140a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801140a:	b480      	push	{r7}
 801140c:	b083      	sub	sp, #12
 801140e:	af00      	add	r7, sp, #0
 8011410:	6078      	str	r0, [r7, #4]
 8011412:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011414:	e002      	b.n	801141c <chk_chr+0x12>
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	3301      	adds	r3, #1
 801141a:	607b      	str	r3, [r7, #4]
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	781b      	ldrb	r3, [r3, #0]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d005      	beq.n	8011430 <chk_chr+0x26>
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	781b      	ldrb	r3, [r3, #0]
 8011428:	461a      	mov	r2, r3
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	4293      	cmp	r3, r2
 801142e:	d1f2      	bne.n	8011416 <chk_chr+0xc>
	return *str;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	781b      	ldrb	r3, [r3, #0]
}
 8011434:	4618      	mov	r0, r3
 8011436:	370c      	adds	r7, #12
 8011438:	46bd      	mov	sp, r7
 801143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143e:	4770      	bx	lr

08011440 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011440:	b480      	push	{r7}
 8011442:	b085      	sub	sp, #20
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
 8011448:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801144a:	2300      	movs	r3, #0
 801144c:	60bb      	str	r3, [r7, #8]
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	60fb      	str	r3, [r7, #12]
 8011452:	e029      	b.n	80114a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011454:	4a27      	ldr	r2, [pc, #156]	; (80114f4 <chk_lock+0xb4>)
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	011b      	lsls	r3, r3, #4
 801145a:	4413      	add	r3, r2
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d01d      	beq.n	801149e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011462:	4a24      	ldr	r2, [pc, #144]	; (80114f4 <chk_lock+0xb4>)
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	011b      	lsls	r3, r3, #4
 8011468:	4413      	add	r3, r2
 801146a:	681a      	ldr	r2, [r3, #0]
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	429a      	cmp	r2, r3
 8011472:	d116      	bne.n	80114a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011474:	4a1f      	ldr	r2, [pc, #124]	; (80114f4 <chk_lock+0xb4>)
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	011b      	lsls	r3, r3, #4
 801147a:	4413      	add	r3, r2
 801147c:	3304      	adds	r3, #4
 801147e:	681a      	ldr	r2, [r3, #0]
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011484:	429a      	cmp	r2, r3
 8011486:	d10c      	bne.n	80114a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011488:	4a1a      	ldr	r2, [pc, #104]	; (80114f4 <chk_lock+0xb4>)
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	011b      	lsls	r3, r3, #4
 801148e:	4413      	add	r3, r2
 8011490:	3308      	adds	r3, #8
 8011492:	681a      	ldr	r2, [r3, #0]
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011498:	429a      	cmp	r2, r3
 801149a:	d102      	bne.n	80114a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801149c:	e007      	b.n	80114ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801149e:	2301      	movs	r3, #1
 80114a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	3301      	adds	r3, #1
 80114a6:	60fb      	str	r3, [r7, #12]
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	2b01      	cmp	r3, #1
 80114ac:	d9d2      	bls.n	8011454 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	2b02      	cmp	r3, #2
 80114b2:	d109      	bne.n	80114c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80114b4:	68bb      	ldr	r3, [r7, #8]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d102      	bne.n	80114c0 <chk_lock+0x80>
 80114ba:	683b      	ldr	r3, [r7, #0]
 80114bc:	2b02      	cmp	r3, #2
 80114be:	d101      	bne.n	80114c4 <chk_lock+0x84>
 80114c0:	2300      	movs	r3, #0
 80114c2:	e010      	b.n	80114e6 <chk_lock+0xa6>
 80114c4:	2312      	movs	r3, #18
 80114c6:	e00e      	b.n	80114e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d108      	bne.n	80114e0 <chk_lock+0xa0>
 80114ce:	4a09      	ldr	r2, [pc, #36]	; (80114f4 <chk_lock+0xb4>)
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	011b      	lsls	r3, r3, #4
 80114d4:	4413      	add	r3, r2
 80114d6:	330c      	adds	r3, #12
 80114d8:	881b      	ldrh	r3, [r3, #0]
 80114da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80114de:	d101      	bne.n	80114e4 <chk_lock+0xa4>
 80114e0:	2310      	movs	r3, #16
 80114e2:	e000      	b.n	80114e6 <chk_lock+0xa6>
 80114e4:	2300      	movs	r3, #0
}
 80114e6:	4618      	mov	r0, r3
 80114e8:	3714      	adds	r7, #20
 80114ea:	46bd      	mov	sp, r7
 80114ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f0:	4770      	bx	lr
 80114f2:	bf00      	nop
 80114f4:	2003d488 	.word	0x2003d488

080114f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80114f8:	b480      	push	{r7}
 80114fa:	b083      	sub	sp, #12
 80114fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80114fe:	2300      	movs	r3, #0
 8011500:	607b      	str	r3, [r7, #4]
 8011502:	e002      	b.n	801150a <enq_lock+0x12>
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	3301      	adds	r3, #1
 8011508:	607b      	str	r3, [r7, #4]
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	2b01      	cmp	r3, #1
 801150e:	d806      	bhi.n	801151e <enq_lock+0x26>
 8011510:	4a09      	ldr	r2, [pc, #36]	; (8011538 <enq_lock+0x40>)
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	011b      	lsls	r3, r3, #4
 8011516:	4413      	add	r3, r2
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d1f2      	bne.n	8011504 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	2b02      	cmp	r3, #2
 8011522:	bf14      	ite	ne
 8011524:	2301      	movne	r3, #1
 8011526:	2300      	moveq	r3, #0
 8011528:	b2db      	uxtb	r3, r3
}
 801152a:	4618      	mov	r0, r3
 801152c:	370c      	adds	r7, #12
 801152e:	46bd      	mov	sp, r7
 8011530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011534:	4770      	bx	lr
 8011536:	bf00      	nop
 8011538:	2003d488 	.word	0x2003d488

0801153c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801153c:	b480      	push	{r7}
 801153e:	b085      	sub	sp, #20
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
 8011544:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011546:	2300      	movs	r3, #0
 8011548:	60fb      	str	r3, [r7, #12]
 801154a:	e01f      	b.n	801158c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801154c:	4a41      	ldr	r2, [pc, #260]	; (8011654 <inc_lock+0x118>)
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	011b      	lsls	r3, r3, #4
 8011552:	4413      	add	r3, r2
 8011554:	681a      	ldr	r2, [r3, #0]
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	429a      	cmp	r2, r3
 801155c:	d113      	bne.n	8011586 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801155e:	4a3d      	ldr	r2, [pc, #244]	; (8011654 <inc_lock+0x118>)
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	011b      	lsls	r3, r3, #4
 8011564:	4413      	add	r3, r2
 8011566:	3304      	adds	r3, #4
 8011568:	681a      	ldr	r2, [r3, #0]
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801156e:	429a      	cmp	r2, r3
 8011570:	d109      	bne.n	8011586 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011572:	4a38      	ldr	r2, [pc, #224]	; (8011654 <inc_lock+0x118>)
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	011b      	lsls	r3, r3, #4
 8011578:	4413      	add	r3, r2
 801157a:	3308      	adds	r3, #8
 801157c:	681a      	ldr	r2, [r3, #0]
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011582:	429a      	cmp	r2, r3
 8011584:	d006      	beq.n	8011594 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	3301      	adds	r3, #1
 801158a:	60fb      	str	r3, [r7, #12]
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	2b01      	cmp	r3, #1
 8011590:	d9dc      	bls.n	801154c <inc_lock+0x10>
 8011592:	e000      	b.n	8011596 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011594:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	2b02      	cmp	r3, #2
 801159a:	d132      	bne.n	8011602 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801159c:	2300      	movs	r3, #0
 801159e:	60fb      	str	r3, [r7, #12]
 80115a0:	e002      	b.n	80115a8 <inc_lock+0x6c>
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	3301      	adds	r3, #1
 80115a6:	60fb      	str	r3, [r7, #12]
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	2b01      	cmp	r3, #1
 80115ac:	d806      	bhi.n	80115bc <inc_lock+0x80>
 80115ae:	4a29      	ldr	r2, [pc, #164]	; (8011654 <inc_lock+0x118>)
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	011b      	lsls	r3, r3, #4
 80115b4:	4413      	add	r3, r2
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d1f2      	bne.n	80115a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	2b02      	cmp	r3, #2
 80115c0:	d101      	bne.n	80115c6 <inc_lock+0x8a>
 80115c2:	2300      	movs	r3, #0
 80115c4:	e040      	b.n	8011648 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	681a      	ldr	r2, [r3, #0]
 80115ca:	4922      	ldr	r1, [pc, #136]	; (8011654 <inc_lock+0x118>)
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	011b      	lsls	r3, r3, #4
 80115d0:	440b      	add	r3, r1
 80115d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	689a      	ldr	r2, [r3, #8]
 80115d8:	491e      	ldr	r1, [pc, #120]	; (8011654 <inc_lock+0x118>)
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	011b      	lsls	r3, r3, #4
 80115de:	440b      	add	r3, r1
 80115e0:	3304      	adds	r3, #4
 80115e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	695a      	ldr	r2, [r3, #20]
 80115e8:	491a      	ldr	r1, [pc, #104]	; (8011654 <inc_lock+0x118>)
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	011b      	lsls	r3, r3, #4
 80115ee:	440b      	add	r3, r1
 80115f0:	3308      	adds	r3, #8
 80115f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80115f4:	4a17      	ldr	r2, [pc, #92]	; (8011654 <inc_lock+0x118>)
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	011b      	lsls	r3, r3, #4
 80115fa:	4413      	add	r3, r2
 80115fc:	330c      	adds	r3, #12
 80115fe:	2200      	movs	r2, #0
 8011600:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d009      	beq.n	801161c <inc_lock+0xe0>
 8011608:	4a12      	ldr	r2, [pc, #72]	; (8011654 <inc_lock+0x118>)
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	011b      	lsls	r3, r3, #4
 801160e:	4413      	add	r3, r2
 8011610:	330c      	adds	r3, #12
 8011612:	881b      	ldrh	r3, [r3, #0]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d001      	beq.n	801161c <inc_lock+0xe0>
 8011618:	2300      	movs	r3, #0
 801161a:	e015      	b.n	8011648 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d108      	bne.n	8011634 <inc_lock+0xf8>
 8011622:	4a0c      	ldr	r2, [pc, #48]	; (8011654 <inc_lock+0x118>)
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	011b      	lsls	r3, r3, #4
 8011628:	4413      	add	r3, r2
 801162a:	330c      	adds	r3, #12
 801162c:	881b      	ldrh	r3, [r3, #0]
 801162e:	3301      	adds	r3, #1
 8011630:	b29a      	uxth	r2, r3
 8011632:	e001      	b.n	8011638 <inc_lock+0xfc>
 8011634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011638:	4906      	ldr	r1, [pc, #24]	; (8011654 <inc_lock+0x118>)
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	011b      	lsls	r3, r3, #4
 801163e:	440b      	add	r3, r1
 8011640:	330c      	adds	r3, #12
 8011642:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	3301      	adds	r3, #1
}
 8011648:	4618      	mov	r0, r3
 801164a:	3714      	adds	r7, #20
 801164c:	46bd      	mov	sp, r7
 801164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011652:	4770      	bx	lr
 8011654:	2003d488 	.word	0x2003d488

08011658 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011658:	b480      	push	{r7}
 801165a:	b085      	sub	sp, #20
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	3b01      	subs	r3, #1
 8011664:	607b      	str	r3, [r7, #4]
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	2b01      	cmp	r3, #1
 801166a:	d825      	bhi.n	80116b8 <dec_lock+0x60>
		n = Files[i].ctr;
 801166c:	4a17      	ldr	r2, [pc, #92]	; (80116cc <dec_lock+0x74>)
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	011b      	lsls	r3, r3, #4
 8011672:	4413      	add	r3, r2
 8011674:	330c      	adds	r3, #12
 8011676:	881b      	ldrh	r3, [r3, #0]
 8011678:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801167a:	89fb      	ldrh	r3, [r7, #14]
 801167c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011680:	d101      	bne.n	8011686 <dec_lock+0x2e>
 8011682:	2300      	movs	r3, #0
 8011684:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011686:	89fb      	ldrh	r3, [r7, #14]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d002      	beq.n	8011692 <dec_lock+0x3a>
 801168c:	89fb      	ldrh	r3, [r7, #14]
 801168e:	3b01      	subs	r3, #1
 8011690:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011692:	4a0e      	ldr	r2, [pc, #56]	; (80116cc <dec_lock+0x74>)
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	011b      	lsls	r3, r3, #4
 8011698:	4413      	add	r3, r2
 801169a:	330c      	adds	r3, #12
 801169c:	89fa      	ldrh	r2, [r7, #14]
 801169e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80116a0:	89fb      	ldrh	r3, [r7, #14]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d105      	bne.n	80116b2 <dec_lock+0x5a>
 80116a6:	4a09      	ldr	r2, [pc, #36]	; (80116cc <dec_lock+0x74>)
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	011b      	lsls	r3, r3, #4
 80116ac:	4413      	add	r3, r2
 80116ae:	2200      	movs	r2, #0
 80116b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80116b2:	2300      	movs	r3, #0
 80116b4:	737b      	strb	r3, [r7, #13]
 80116b6:	e001      	b.n	80116bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80116b8:	2302      	movs	r3, #2
 80116ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80116bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80116be:	4618      	mov	r0, r3
 80116c0:	3714      	adds	r7, #20
 80116c2:	46bd      	mov	sp, r7
 80116c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c8:	4770      	bx	lr
 80116ca:	bf00      	nop
 80116cc:	2003d488 	.word	0x2003d488

080116d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80116d0:	b480      	push	{r7}
 80116d2:	b085      	sub	sp, #20
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80116d8:	2300      	movs	r3, #0
 80116da:	60fb      	str	r3, [r7, #12]
 80116dc:	e010      	b.n	8011700 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80116de:	4a0d      	ldr	r2, [pc, #52]	; (8011714 <clear_lock+0x44>)
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	011b      	lsls	r3, r3, #4
 80116e4:	4413      	add	r3, r2
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	687a      	ldr	r2, [r7, #4]
 80116ea:	429a      	cmp	r2, r3
 80116ec:	d105      	bne.n	80116fa <clear_lock+0x2a>
 80116ee:	4a09      	ldr	r2, [pc, #36]	; (8011714 <clear_lock+0x44>)
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	011b      	lsls	r3, r3, #4
 80116f4:	4413      	add	r3, r2
 80116f6:	2200      	movs	r2, #0
 80116f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	3301      	adds	r3, #1
 80116fe:	60fb      	str	r3, [r7, #12]
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	2b01      	cmp	r3, #1
 8011704:	d9eb      	bls.n	80116de <clear_lock+0xe>
	}
}
 8011706:	bf00      	nop
 8011708:	bf00      	nop
 801170a:	3714      	adds	r7, #20
 801170c:	46bd      	mov	sp, r7
 801170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011712:	4770      	bx	lr
 8011714:	2003d488 	.word	0x2003d488

08011718 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b086      	sub	sp, #24
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011720:	2300      	movs	r3, #0
 8011722:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	78db      	ldrb	r3, [r3, #3]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d034      	beq.n	8011796 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011730:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	7858      	ldrb	r0, [r3, #1]
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801173c:	2301      	movs	r3, #1
 801173e:	697a      	ldr	r2, [r7, #20]
 8011740:	f7ff fd40 	bl	80111c4 <disk_write>
 8011744:	4603      	mov	r3, r0
 8011746:	2b00      	cmp	r3, #0
 8011748:	d002      	beq.n	8011750 <sync_window+0x38>
			res = FR_DISK_ERR;
 801174a:	2301      	movs	r3, #1
 801174c:	73fb      	strb	r3, [r7, #15]
 801174e:	e022      	b.n	8011796 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	2200      	movs	r2, #0
 8011754:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801175a:	697a      	ldr	r2, [r7, #20]
 801175c:	1ad2      	subs	r2, r2, r3
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	6a1b      	ldr	r3, [r3, #32]
 8011762:	429a      	cmp	r2, r3
 8011764:	d217      	bcs.n	8011796 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	789b      	ldrb	r3, [r3, #2]
 801176a:	613b      	str	r3, [r7, #16]
 801176c:	e010      	b.n	8011790 <sync_window+0x78>
					wsect += fs->fsize;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6a1b      	ldr	r3, [r3, #32]
 8011772:	697a      	ldr	r2, [r7, #20]
 8011774:	4413      	add	r3, r2
 8011776:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	7858      	ldrb	r0, [r3, #1]
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011782:	2301      	movs	r3, #1
 8011784:	697a      	ldr	r2, [r7, #20]
 8011786:	f7ff fd1d 	bl	80111c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801178a:	693b      	ldr	r3, [r7, #16]
 801178c:	3b01      	subs	r3, #1
 801178e:	613b      	str	r3, [r7, #16]
 8011790:	693b      	ldr	r3, [r7, #16]
 8011792:	2b01      	cmp	r3, #1
 8011794:	d8eb      	bhi.n	801176e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011796:	7bfb      	ldrb	r3, [r7, #15]
}
 8011798:	4618      	mov	r0, r3
 801179a:	3718      	adds	r7, #24
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}

080117a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b084      	sub	sp, #16
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
 80117a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80117aa:	2300      	movs	r3, #0
 80117ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117b2:	683a      	ldr	r2, [r7, #0]
 80117b4:	429a      	cmp	r2, r3
 80117b6:	d01b      	beq.n	80117f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	f7ff ffad 	bl	8011718 <sync_window>
 80117be:	4603      	mov	r3, r0
 80117c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80117c2:	7bfb      	ldrb	r3, [r7, #15]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d113      	bne.n	80117f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	7858      	ldrb	r0, [r3, #1]
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80117d2:	2301      	movs	r3, #1
 80117d4:	683a      	ldr	r2, [r7, #0]
 80117d6:	f7ff fcd5 	bl	8011184 <disk_read>
 80117da:	4603      	mov	r3, r0
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d004      	beq.n	80117ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80117e0:	f04f 33ff 	mov.w	r3, #4294967295
 80117e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80117e6:	2301      	movs	r3, #1
 80117e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	683a      	ldr	r2, [r7, #0]
 80117ee:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80117f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80117f2:	4618      	mov	r0, r3
 80117f4:	3710      	adds	r7, #16
 80117f6:	46bd      	mov	sp, r7
 80117f8:	bd80      	pop	{r7, pc}
	...

080117fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b084      	sub	sp, #16
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011804:	6878      	ldr	r0, [r7, #4]
 8011806:	f7ff ff87 	bl	8011718 <sync_window>
 801180a:	4603      	mov	r3, r0
 801180c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801180e:	7bfb      	ldrb	r3, [r7, #15]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d159      	bne.n	80118c8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	781b      	ldrb	r3, [r3, #0]
 8011818:	2b03      	cmp	r3, #3
 801181a:	d149      	bne.n	80118b0 <sync_fs+0xb4>
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	791b      	ldrb	r3, [r3, #4]
 8011820:	2b01      	cmp	r3, #1
 8011822:	d145      	bne.n	80118b0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	899b      	ldrh	r3, [r3, #12]
 801182e:	461a      	mov	r2, r3
 8011830:	2100      	movs	r1, #0
 8011832:	f7ff fda8 	bl	8011386 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	3338      	adds	r3, #56	; 0x38
 801183a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801183e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011842:	4618      	mov	r0, r3
 8011844:	f7ff fd37 	bl	80112b6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	3338      	adds	r3, #56	; 0x38
 801184c:	4921      	ldr	r1, [pc, #132]	; (80118d4 <sync_fs+0xd8>)
 801184e:	4618      	mov	r0, r3
 8011850:	f7ff fd4c 	bl	80112ec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	3338      	adds	r3, #56	; 0x38
 8011858:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801185c:	491e      	ldr	r1, [pc, #120]	; (80118d8 <sync_fs+0xdc>)
 801185e:	4618      	mov	r0, r3
 8011860:	f7ff fd44 	bl	80112ec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	3338      	adds	r3, #56	; 0x38
 8011868:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	695b      	ldr	r3, [r3, #20]
 8011870:	4619      	mov	r1, r3
 8011872:	4610      	mov	r0, r2
 8011874:	f7ff fd3a 	bl	80112ec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	3338      	adds	r3, #56	; 0x38
 801187c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	691b      	ldr	r3, [r3, #16]
 8011884:	4619      	mov	r1, r3
 8011886:	4610      	mov	r0, r2
 8011888:	f7ff fd30 	bl	80112ec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011890:	1c5a      	adds	r2, r3, #1
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	7858      	ldrb	r0, [r3, #1]
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80118a4:	2301      	movs	r3, #1
 80118a6:	f7ff fc8d 	bl	80111c4 <disk_write>
			fs->fsi_flag = 0;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	2200      	movs	r2, #0
 80118ae:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	785b      	ldrb	r3, [r3, #1]
 80118b4:	2200      	movs	r2, #0
 80118b6:	2100      	movs	r1, #0
 80118b8:	4618      	mov	r0, r3
 80118ba:	f7ff fca3 	bl	8011204 <disk_ioctl>
 80118be:	4603      	mov	r3, r0
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d001      	beq.n	80118c8 <sync_fs+0xcc>
 80118c4:	2301      	movs	r3, #1
 80118c6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80118c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	3710      	adds	r7, #16
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bd80      	pop	{r7, pc}
 80118d2:	bf00      	nop
 80118d4:	41615252 	.word	0x41615252
 80118d8:	61417272 	.word	0x61417272

080118dc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80118dc:	b480      	push	{r7}
 80118de:	b083      	sub	sp, #12
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
 80118e4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	3b02      	subs	r3, #2
 80118ea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	69db      	ldr	r3, [r3, #28]
 80118f0:	3b02      	subs	r3, #2
 80118f2:	683a      	ldr	r2, [r7, #0]
 80118f4:	429a      	cmp	r2, r3
 80118f6:	d301      	bcc.n	80118fc <clust2sect+0x20>
 80118f8:	2300      	movs	r3, #0
 80118fa:	e008      	b.n	801190e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	895b      	ldrh	r3, [r3, #10]
 8011900:	461a      	mov	r2, r3
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	fb03 f202 	mul.w	r2, r3, r2
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801190c:	4413      	add	r3, r2
}
 801190e:	4618      	mov	r0, r3
 8011910:	370c      	adds	r7, #12
 8011912:	46bd      	mov	sp, r7
 8011914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011918:	4770      	bx	lr

0801191a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801191a:	b580      	push	{r7, lr}
 801191c:	b086      	sub	sp, #24
 801191e:	af00      	add	r7, sp, #0
 8011920:	6078      	str	r0, [r7, #4]
 8011922:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	2b01      	cmp	r3, #1
 801192e:	d904      	bls.n	801193a <get_fat+0x20>
 8011930:	693b      	ldr	r3, [r7, #16]
 8011932:	69db      	ldr	r3, [r3, #28]
 8011934:	683a      	ldr	r2, [r7, #0]
 8011936:	429a      	cmp	r2, r3
 8011938:	d302      	bcc.n	8011940 <get_fat+0x26>
		val = 1;	/* Internal error */
 801193a:	2301      	movs	r3, #1
 801193c:	617b      	str	r3, [r7, #20]
 801193e:	e0bb      	b.n	8011ab8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011940:	f04f 33ff 	mov.w	r3, #4294967295
 8011944:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011946:	693b      	ldr	r3, [r7, #16]
 8011948:	781b      	ldrb	r3, [r3, #0]
 801194a:	2b03      	cmp	r3, #3
 801194c:	f000 8083 	beq.w	8011a56 <get_fat+0x13c>
 8011950:	2b03      	cmp	r3, #3
 8011952:	f300 80a7 	bgt.w	8011aa4 <get_fat+0x18a>
 8011956:	2b01      	cmp	r3, #1
 8011958:	d002      	beq.n	8011960 <get_fat+0x46>
 801195a:	2b02      	cmp	r3, #2
 801195c:	d056      	beq.n	8011a0c <get_fat+0xf2>
 801195e:	e0a1      	b.n	8011aa4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	60fb      	str	r3, [r7, #12]
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	085b      	lsrs	r3, r3, #1
 8011968:	68fa      	ldr	r2, [r7, #12]
 801196a:	4413      	add	r3, r2
 801196c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011972:	693b      	ldr	r3, [r7, #16]
 8011974:	899b      	ldrh	r3, [r3, #12]
 8011976:	4619      	mov	r1, r3
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	fbb3 f3f1 	udiv	r3, r3, r1
 801197e:	4413      	add	r3, r2
 8011980:	4619      	mov	r1, r3
 8011982:	6938      	ldr	r0, [r7, #16]
 8011984:	f7ff ff0c 	bl	80117a0 <move_window>
 8011988:	4603      	mov	r3, r0
 801198a:	2b00      	cmp	r3, #0
 801198c:	f040 808d 	bne.w	8011aaa <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	1c5a      	adds	r2, r3, #1
 8011994:	60fa      	str	r2, [r7, #12]
 8011996:	693a      	ldr	r2, [r7, #16]
 8011998:	8992      	ldrh	r2, [r2, #12]
 801199a:	fbb3 f1f2 	udiv	r1, r3, r2
 801199e:	fb02 f201 	mul.w	r2, r2, r1
 80119a2:	1a9b      	subs	r3, r3, r2
 80119a4:	693a      	ldr	r2, [r7, #16]
 80119a6:	4413      	add	r3, r2
 80119a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80119ac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80119ae:	693b      	ldr	r3, [r7, #16]
 80119b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80119b2:	693b      	ldr	r3, [r7, #16]
 80119b4:	899b      	ldrh	r3, [r3, #12]
 80119b6:	4619      	mov	r1, r3
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80119be:	4413      	add	r3, r2
 80119c0:	4619      	mov	r1, r3
 80119c2:	6938      	ldr	r0, [r7, #16]
 80119c4:	f7ff feec 	bl	80117a0 <move_window>
 80119c8:	4603      	mov	r3, r0
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d16f      	bne.n	8011aae <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80119ce:	693b      	ldr	r3, [r7, #16]
 80119d0:	899b      	ldrh	r3, [r3, #12]
 80119d2:	461a      	mov	r2, r3
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80119da:	fb02 f201 	mul.w	r2, r2, r1
 80119de:	1a9b      	subs	r3, r3, r2
 80119e0:	693a      	ldr	r2, [r7, #16]
 80119e2:	4413      	add	r3, r2
 80119e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80119e8:	021b      	lsls	r3, r3, #8
 80119ea:	461a      	mov	r2, r3
 80119ec:	68bb      	ldr	r3, [r7, #8]
 80119ee:	4313      	orrs	r3, r2
 80119f0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80119f2:	683b      	ldr	r3, [r7, #0]
 80119f4:	f003 0301 	and.w	r3, r3, #1
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d002      	beq.n	8011a02 <get_fat+0xe8>
 80119fc:	68bb      	ldr	r3, [r7, #8]
 80119fe:	091b      	lsrs	r3, r3, #4
 8011a00:	e002      	b.n	8011a08 <get_fat+0xee>
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011a08:	617b      	str	r3, [r7, #20]
			break;
 8011a0a:	e055      	b.n	8011ab8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011a0c:	693b      	ldr	r3, [r7, #16]
 8011a0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011a10:	693b      	ldr	r3, [r7, #16]
 8011a12:	899b      	ldrh	r3, [r3, #12]
 8011a14:	085b      	lsrs	r3, r3, #1
 8011a16:	b29b      	uxth	r3, r3
 8011a18:	4619      	mov	r1, r3
 8011a1a:	683b      	ldr	r3, [r7, #0]
 8011a1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011a20:	4413      	add	r3, r2
 8011a22:	4619      	mov	r1, r3
 8011a24:	6938      	ldr	r0, [r7, #16]
 8011a26:	f7ff febb 	bl	80117a0 <move_window>
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d140      	bne.n	8011ab2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011a30:	693b      	ldr	r3, [r7, #16]
 8011a32:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	005b      	lsls	r3, r3, #1
 8011a3a:	693a      	ldr	r2, [r7, #16]
 8011a3c:	8992      	ldrh	r2, [r2, #12]
 8011a3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011a42:	fb02 f200 	mul.w	r2, r2, r0
 8011a46:	1a9b      	subs	r3, r3, r2
 8011a48:	440b      	add	r3, r1
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f7ff fbf8 	bl	8011240 <ld_word>
 8011a50:	4603      	mov	r3, r0
 8011a52:	617b      	str	r3, [r7, #20]
			break;
 8011a54:	e030      	b.n	8011ab8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011a5a:	693b      	ldr	r3, [r7, #16]
 8011a5c:	899b      	ldrh	r3, [r3, #12]
 8011a5e:	089b      	lsrs	r3, r3, #2
 8011a60:	b29b      	uxth	r3, r3
 8011a62:	4619      	mov	r1, r3
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8011a6a:	4413      	add	r3, r2
 8011a6c:	4619      	mov	r1, r3
 8011a6e:	6938      	ldr	r0, [r7, #16]
 8011a70:	f7ff fe96 	bl	80117a0 <move_window>
 8011a74:	4603      	mov	r3, r0
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d11d      	bne.n	8011ab6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011a7a:	693b      	ldr	r3, [r7, #16]
 8011a7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011a80:	683b      	ldr	r3, [r7, #0]
 8011a82:	009b      	lsls	r3, r3, #2
 8011a84:	693a      	ldr	r2, [r7, #16]
 8011a86:	8992      	ldrh	r2, [r2, #12]
 8011a88:	fbb3 f0f2 	udiv	r0, r3, r2
 8011a8c:	fb02 f200 	mul.w	r2, r2, r0
 8011a90:	1a9b      	subs	r3, r3, r2
 8011a92:	440b      	add	r3, r1
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7ff fbeb 	bl	8011270 <ld_dword>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011aa0:	617b      	str	r3, [r7, #20]
			break;
 8011aa2:	e009      	b.n	8011ab8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	617b      	str	r3, [r7, #20]
 8011aa8:	e006      	b.n	8011ab8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011aaa:	bf00      	nop
 8011aac:	e004      	b.n	8011ab8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011aae:	bf00      	nop
 8011ab0:	e002      	b.n	8011ab8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011ab2:	bf00      	nop
 8011ab4:	e000      	b.n	8011ab8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011ab6:	bf00      	nop
		}
	}

	return val;
 8011ab8:	697b      	ldr	r3, [r7, #20]
}
 8011aba:	4618      	mov	r0, r3
 8011abc:	3718      	adds	r7, #24
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}

08011ac2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011ac2:	b590      	push	{r4, r7, lr}
 8011ac4:	b089      	sub	sp, #36	; 0x24
 8011ac6:	af00      	add	r7, sp, #0
 8011ac8:	60f8      	str	r0, [r7, #12]
 8011aca:	60b9      	str	r1, [r7, #8]
 8011acc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011ace:	2302      	movs	r3, #2
 8011ad0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011ad2:	68bb      	ldr	r3, [r7, #8]
 8011ad4:	2b01      	cmp	r3, #1
 8011ad6:	f240 8102 	bls.w	8011cde <put_fat+0x21c>
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	69db      	ldr	r3, [r3, #28]
 8011ade:	68ba      	ldr	r2, [r7, #8]
 8011ae0:	429a      	cmp	r2, r3
 8011ae2:	f080 80fc 	bcs.w	8011cde <put_fat+0x21c>
		switch (fs->fs_type) {
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	781b      	ldrb	r3, [r3, #0]
 8011aea:	2b03      	cmp	r3, #3
 8011aec:	f000 80b6 	beq.w	8011c5c <put_fat+0x19a>
 8011af0:	2b03      	cmp	r3, #3
 8011af2:	f300 80fd 	bgt.w	8011cf0 <put_fat+0x22e>
 8011af6:	2b01      	cmp	r3, #1
 8011af8:	d003      	beq.n	8011b02 <put_fat+0x40>
 8011afa:	2b02      	cmp	r3, #2
 8011afc:	f000 8083 	beq.w	8011c06 <put_fat+0x144>
 8011b00:	e0f6      	b.n	8011cf0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	61bb      	str	r3, [r7, #24]
 8011b06:	69bb      	ldr	r3, [r7, #24]
 8011b08:	085b      	lsrs	r3, r3, #1
 8011b0a:	69ba      	ldr	r2, [r7, #24]
 8011b0c:	4413      	add	r3, r2
 8011b0e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	899b      	ldrh	r3, [r3, #12]
 8011b18:	4619      	mov	r1, r3
 8011b1a:	69bb      	ldr	r3, [r7, #24]
 8011b1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011b20:	4413      	add	r3, r2
 8011b22:	4619      	mov	r1, r3
 8011b24:	68f8      	ldr	r0, [r7, #12]
 8011b26:	f7ff fe3b 	bl	80117a0 <move_window>
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011b2e:	7ffb      	ldrb	r3, [r7, #31]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	f040 80d6 	bne.w	8011ce2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011b3c:	69bb      	ldr	r3, [r7, #24]
 8011b3e:	1c5a      	adds	r2, r3, #1
 8011b40:	61ba      	str	r2, [r7, #24]
 8011b42:	68fa      	ldr	r2, [r7, #12]
 8011b44:	8992      	ldrh	r2, [r2, #12]
 8011b46:	fbb3 f0f2 	udiv	r0, r3, r2
 8011b4a:	fb02 f200 	mul.w	r2, r2, r0
 8011b4e:	1a9b      	subs	r3, r3, r2
 8011b50:	440b      	add	r3, r1
 8011b52:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	f003 0301 	and.w	r3, r3, #1
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d00d      	beq.n	8011b7a <put_fat+0xb8>
 8011b5e:	697b      	ldr	r3, [r7, #20]
 8011b60:	781b      	ldrb	r3, [r3, #0]
 8011b62:	b25b      	sxtb	r3, r3
 8011b64:	f003 030f 	and.w	r3, r3, #15
 8011b68:	b25a      	sxtb	r2, r3
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	b2db      	uxtb	r3, r3
 8011b6e:	011b      	lsls	r3, r3, #4
 8011b70:	b25b      	sxtb	r3, r3
 8011b72:	4313      	orrs	r3, r2
 8011b74:	b25b      	sxtb	r3, r3
 8011b76:	b2db      	uxtb	r3, r3
 8011b78:	e001      	b.n	8011b7e <put_fat+0xbc>
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	b2db      	uxtb	r3, r3
 8011b7e:	697a      	ldr	r2, [r7, #20]
 8011b80:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	2201      	movs	r2, #1
 8011b86:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	899b      	ldrh	r3, [r3, #12]
 8011b90:	4619      	mov	r1, r3
 8011b92:	69bb      	ldr	r3, [r7, #24]
 8011b94:	fbb3 f3f1 	udiv	r3, r3, r1
 8011b98:	4413      	add	r3, r2
 8011b9a:	4619      	mov	r1, r3
 8011b9c:	68f8      	ldr	r0, [r7, #12]
 8011b9e:	f7ff fdff 	bl	80117a0 <move_window>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011ba6:	7ffb      	ldrb	r3, [r7, #31]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	f040 809c 	bne.w	8011ce6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	899b      	ldrh	r3, [r3, #12]
 8011bb8:	461a      	mov	r2, r3
 8011bba:	69bb      	ldr	r3, [r7, #24]
 8011bbc:	fbb3 f0f2 	udiv	r0, r3, r2
 8011bc0:	fb02 f200 	mul.w	r2, r2, r0
 8011bc4:	1a9b      	subs	r3, r3, r2
 8011bc6:	440b      	add	r3, r1
 8011bc8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011bca:	68bb      	ldr	r3, [r7, #8]
 8011bcc:	f003 0301 	and.w	r3, r3, #1
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d003      	beq.n	8011bdc <put_fat+0x11a>
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	091b      	lsrs	r3, r3, #4
 8011bd8:	b2db      	uxtb	r3, r3
 8011bda:	e00e      	b.n	8011bfa <put_fat+0x138>
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	781b      	ldrb	r3, [r3, #0]
 8011be0:	b25b      	sxtb	r3, r3
 8011be2:	f023 030f 	bic.w	r3, r3, #15
 8011be6:	b25a      	sxtb	r2, r3
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	0a1b      	lsrs	r3, r3, #8
 8011bec:	b25b      	sxtb	r3, r3
 8011bee:	f003 030f 	and.w	r3, r3, #15
 8011bf2:	b25b      	sxtb	r3, r3
 8011bf4:	4313      	orrs	r3, r2
 8011bf6:	b25b      	sxtb	r3, r3
 8011bf8:	b2db      	uxtb	r3, r3
 8011bfa:	697a      	ldr	r2, [r7, #20]
 8011bfc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	2201      	movs	r2, #1
 8011c02:	70da      	strb	r2, [r3, #3]
			break;
 8011c04:	e074      	b.n	8011cf0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	899b      	ldrh	r3, [r3, #12]
 8011c0e:	085b      	lsrs	r3, r3, #1
 8011c10:	b29b      	uxth	r3, r3
 8011c12:	4619      	mov	r1, r3
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c1a:	4413      	add	r3, r2
 8011c1c:	4619      	mov	r1, r3
 8011c1e:	68f8      	ldr	r0, [r7, #12]
 8011c20:	f7ff fdbe 	bl	80117a0 <move_window>
 8011c24:	4603      	mov	r3, r0
 8011c26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011c28:	7ffb      	ldrb	r3, [r7, #31]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d15d      	bne.n	8011cea <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c34:	68bb      	ldr	r3, [r7, #8]
 8011c36:	005b      	lsls	r3, r3, #1
 8011c38:	68fa      	ldr	r2, [r7, #12]
 8011c3a:	8992      	ldrh	r2, [r2, #12]
 8011c3c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c40:	fb02 f200 	mul.w	r2, r2, r0
 8011c44:	1a9b      	subs	r3, r3, r2
 8011c46:	440b      	add	r3, r1
 8011c48:	687a      	ldr	r2, [r7, #4]
 8011c4a:	b292      	uxth	r2, r2
 8011c4c:	4611      	mov	r1, r2
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f7ff fb31 	bl	80112b6 <st_word>
			fs->wflag = 1;
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	2201      	movs	r2, #1
 8011c58:	70da      	strb	r2, [r3, #3]
			break;
 8011c5a:	e049      	b.n	8011cf0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	899b      	ldrh	r3, [r3, #12]
 8011c64:	089b      	lsrs	r3, r3, #2
 8011c66:	b29b      	uxth	r3, r3
 8011c68:	4619      	mov	r1, r3
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c70:	4413      	add	r3, r2
 8011c72:	4619      	mov	r1, r3
 8011c74:	68f8      	ldr	r0, [r7, #12]
 8011c76:	f7ff fd93 	bl	80117a0 <move_window>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011c7e:	7ffb      	ldrb	r3, [r7, #31]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d134      	bne.n	8011cee <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c90:	68bb      	ldr	r3, [r7, #8]
 8011c92:	009b      	lsls	r3, r3, #2
 8011c94:	68fa      	ldr	r2, [r7, #12]
 8011c96:	8992      	ldrh	r2, [r2, #12]
 8011c98:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c9c:	fb02 f200 	mul.w	r2, r2, r0
 8011ca0:	1a9b      	subs	r3, r3, r2
 8011ca2:	440b      	add	r3, r1
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f7ff fae3 	bl	8011270 <ld_dword>
 8011caa:	4603      	mov	r3, r0
 8011cac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011cb0:	4323      	orrs	r3, r4
 8011cb2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011cba:	68bb      	ldr	r3, [r7, #8]
 8011cbc:	009b      	lsls	r3, r3, #2
 8011cbe:	68fa      	ldr	r2, [r7, #12]
 8011cc0:	8992      	ldrh	r2, [r2, #12]
 8011cc2:	fbb3 f0f2 	udiv	r0, r3, r2
 8011cc6:	fb02 f200 	mul.w	r2, r2, r0
 8011cca:	1a9b      	subs	r3, r3, r2
 8011ccc:	440b      	add	r3, r1
 8011cce:	6879      	ldr	r1, [r7, #4]
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f7ff fb0b 	bl	80112ec <st_dword>
			fs->wflag = 1;
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	2201      	movs	r2, #1
 8011cda:	70da      	strb	r2, [r3, #3]
			break;
 8011cdc:	e008      	b.n	8011cf0 <put_fat+0x22e>
		}
	}
 8011cde:	bf00      	nop
 8011ce0:	e006      	b.n	8011cf0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8011ce2:	bf00      	nop
 8011ce4:	e004      	b.n	8011cf0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8011ce6:	bf00      	nop
 8011ce8:	e002      	b.n	8011cf0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8011cea:	bf00      	nop
 8011cec:	e000      	b.n	8011cf0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8011cee:	bf00      	nop
	return res;
 8011cf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	3724      	adds	r7, #36	; 0x24
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd90      	pop	{r4, r7, pc}

08011cfa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011cfa:	b580      	push	{r7, lr}
 8011cfc:	b088      	sub	sp, #32
 8011cfe:	af00      	add	r7, sp, #0
 8011d00:	60f8      	str	r0, [r7, #12]
 8011d02:	60b9      	str	r1, [r7, #8]
 8011d04:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011d06:	2300      	movs	r3, #0
 8011d08:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011d10:	68bb      	ldr	r3, [r7, #8]
 8011d12:	2b01      	cmp	r3, #1
 8011d14:	d904      	bls.n	8011d20 <remove_chain+0x26>
 8011d16:	69bb      	ldr	r3, [r7, #24]
 8011d18:	69db      	ldr	r3, [r3, #28]
 8011d1a:	68ba      	ldr	r2, [r7, #8]
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d301      	bcc.n	8011d24 <remove_chain+0x2a>
 8011d20:	2302      	movs	r3, #2
 8011d22:	e04b      	b.n	8011dbc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d00c      	beq.n	8011d44 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8011d2e:	6879      	ldr	r1, [r7, #4]
 8011d30:	69b8      	ldr	r0, [r7, #24]
 8011d32:	f7ff fec6 	bl	8011ac2 <put_fat>
 8011d36:	4603      	mov	r3, r0
 8011d38:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011d3a:	7ffb      	ldrb	r3, [r7, #31]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d001      	beq.n	8011d44 <remove_chain+0x4a>
 8011d40:	7ffb      	ldrb	r3, [r7, #31]
 8011d42:	e03b      	b.n	8011dbc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011d44:	68b9      	ldr	r1, [r7, #8]
 8011d46:	68f8      	ldr	r0, [r7, #12]
 8011d48:	f7ff fde7 	bl	801191a <get_fat>
 8011d4c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011d4e:	697b      	ldr	r3, [r7, #20]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d031      	beq.n	8011db8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	2b01      	cmp	r3, #1
 8011d58:	d101      	bne.n	8011d5e <remove_chain+0x64>
 8011d5a:	2302      	movs	r3, #2
 8011d5c:	e02e      	b.n	8011dbc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011d5e:	697b      	ldr	r3, [r7, #20]
 8011d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d64:	d101      	bne.n	8011d6a <remove_chain+0x70>
 8011d66:	2301      	movs	r3, #1
 8011d68:	e028      	b.n	8011dbc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	68b9      	ldr	r1, [r7, #8]
 8011d6e:	69b8      	ldr	r0, [r7, #24]
 8011d70:	f7ff fea7 	bl	8011ac2 <put_fat>
 8011d74:	4603      	mov	r3, r0
 8011d76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011d78:	7ffb      	ldrb	r3, [r7, #31]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d001      	beq.n	8011d82 <remove_chain+0x88>
 8011d7e:	7ffb      	ldrb	r3, [r7, #31]
 8011d80:	e01c      	b.n	8011dbc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011d82:	69bb      	ldr	r3, [r7, #24]
 8011d84:	695a      	ldr	r2, [r3, #20]
 8011d86:	69bb      	ldr	r3, [r7, #24]
 8011d88:	69db      	ldr	r3, [r3, #28]
 8011d8a:	3b02      	subs	r3, #2
 8011d8c:	429a      	cmp	r2, r3
 8011d8e:	d20b      	bcs.n	8011da8 <remove_chain+0xae>
			fs->free_clst++;
 8011d90:	69bb      	ldr	r3, [r7, #24]
 8011d92:	695b      	ldr	r3, [r3, #20]
 8011d94:	1c5a      	adds	r2, r3, #1
 8011d96:	69bb      	ldr	r3, [r7, #24]
 8011d98:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011d9a:	69bb      	ldr	r3, [r7, #24]
 8011d9c:	791b      	ldrb	r3, [r3, #4]
 8011d9e:	f043 0301 	orr.w	r3, r3, #1
 8011da2:	b2da      	uxtb	r2, r3
 8011da4:	69bb      	ldr	r3, [r7, #24]
 8011da6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011da8:	697b      	ldr	r3, [r7, #20]
 8011daa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011dac:	69bb      	ldr	r3, [r7, #24]
 8011dae:	69db      	ldr	r3, [r3, #28]
 8011db0:	68ba      	ldr	r2, [r7, #8]
 8011db2:	429a      	cmp	r2, r3
 8011db4:	d3c6      	bcc.n	8011d44 <remove_chain+0x4a>
 8011db6:	e000      	b.n	8011dba <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011db8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011dba:	2300      	movs	r3, #0
}
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	3720      	adds	r7, #32
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	bd80      	pop	{r7, pc}

08011dc4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b088      	sub	sp, #32
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
 8011dcc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d10d      	bne.n	8011df6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	691b      	ldr	r3, [r3, #16]
 8011dde:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011de0:	69bb      	ldr	r3, [r7, #24]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d004      	beq.n	8011df0 <create_chain+0x2c>
 8011de6:	693b      	ldr	r3, [r7, #16]
 8011de8:	69db      	ldr	r3, [r3, #28]
 8011dea:	69ba      	ldr	r2, [r7, #24]
 8011dec:	429a      	cmp	r2, r3
 8011dee:	d31b      	bcc.n	8011e28 <create_chain+0x64>
 8011df0:	2301      	movs	r3, #1
 8011df2:	61bb      	str	r3, [r7, #24]
 8011df4:	e018      	b.n	8011e28 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011df6:	6839      	ldr	r1, [r7, #0]
 8011df8:	6878      	ldr	r0, [r7, #4]
 8011dfa:	f7ff fd8e 	bl	801191a <get_fat>
 8011dfe:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	2b01      	cmp	r3, #1
 8011e04:	d801      	bhi.n	8011e0a <create_chain+0x46>
 8011e06:	2301      	movs	r3, #1
 8011e08:	e070      	b.n	8011eec <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e10:	d101      	bne.n	8011e16 <create_chain+0x52>
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	e06a      	b.n	8011eec <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011e16:	693b      	ldr	r3, [r7, #16]
 8011e18:	69db      	ldr	r3, [r3, #28]
 8011e1a:	68fa      	ldr	r2, [r7, #12]
 8011e1c:	429a      	cmp	r2, r3
 8011e1e:	d201      	bcs.n	8011e24 <create_chain+0x60>
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	e063      	b.n	8011eec <create_chain+0x128>
		scl = clst;
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011e28:	69bb      	ldr	r3, [r7, #24]
 8011e2a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011e2c:	69fb      	ldr	r3, [r7, #28]
 8011e2e:	3301      	adds	r3, #1
 8011e30:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011e32:	693b      	ldr	r3, [r7, #16]
 8011e34:	69db      	ldr	r3, [r3, #28]
 8011e36:	69fa      	ldr	r2, [r7, #28]
 8011e38:	429a      	cmp	r2, r3
 8011e3a:	d307      	bcc.n	8011e4c <create_chain+0x88>
				ncl = 2;
 8011e3c:	2302      	movs	r3, #2
 8011e3e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011e40:	69fa      	ldr	r2, [r7, #28]
 8011e42:	69bb      	ldr	r3, [r7, #24]
 8011e44:	429a      	cmp	r2, r3
 8011e46:	d901      	bls.n	8011e4c <create_chain+0x88>
 8011e48:	2300      	movs	r3, #0
 8011e4a:	e04f      	b.n	8011eec <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011e4c:	69f9      	ldr	r1, [r7, #28]
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f7ff fd63 	bl	801191a <get_fat>
 8011e54:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d00e      	beq.n	8011e7a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	2b01      	cmp	r3, #1
 8011e60:	d003      	beq.n	8011e6a <create_chain+0xa6>
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e68:	d101      	bne.n	8011e6e <create_chain+0xaa>
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	e03e      	b.n	8011eec <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011e6e:	69fa      	ldr	r2, [r7, #28]
 8011e70:	69bb      	ldr	r3, [r7, #24]
 8011e72:	429a      	cmp	r2, r3
 8011e74:	d1da      	bne.n	8011e2c <create_chain+0x68>
 8011e76:	2300      	movs	r3, #0
 8011e78:	e038      	b.n	8011eec <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011e7a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8011e80:	69f9      	ldr	r1, [r7, #28]
 8011e82:	6938      	ldr	r0, [r7, #16]
 8011e84:	f7ff fe1d 	bl	8011ac2 <put_fat>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011e8c:	7dfb      	ldrb	r3, [r7, #23]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d109      	bne.n	8011ea6 <create_chain+0xe2>
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d006      	beq.n	8011ea6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011e98:	69fa      	ldr	r2, [r7, #28]
 8011e9a:	6839      	ldr	r1, [r7, #0]
 8011e9c:	6938      	ldr	r0, [r7, #16]
 8011e9e:	f7ff fe10 	bl	8011ac2 <put_fat>
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011ea6:	7dfb      	ldrb	r3, [r7, #23]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d116      	bne.n	8011eda <create_chain+0x116>
		fs->last_clst = ncl;
 8011eac:	693b      	ldr	r3, [r7, #16]
 8011eae:	69fa      	ldr	r2, [r7, #28]
 8011eb0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	695a      	ldr	r2, [r3, #20]
 8011eb6:	693b      	ldr	r3, [r7, #16]
 8011eb8:	69db      	ldr	r3, [r3, #28]
 8011eba:	3b02      	subs	r3, #2
 8011ebc:	429a      	cmp	r2, r3
 8011ebe:	d804      	bhi.n	8011eca <create_chain+0x106>
 8011ec0:	693b      	ldr	r3, [r7, #16]
 8011ec2:	695b      	ldr	r3, [r3, #20]
 8011ec4:	1e5a      	subs	r2, r3, #1
 8011ec6:	693b      	ldr	r3, [r7, #16]
 8011ec8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011eca:	693b      	ldr	r3, [r7, #16]
 8011ecc:	791b      	ldrb	r3, [r3, #4]
 8011ece:	f043 0301 	orr.w	r3, r3, #1
 8011ed2:	b2da      	uxtb	r2, r3
 8011ed4:	693b      	ldr	r3, [r7, #16]
 8011ed6:	711a      	strb	r2, [r3, #4]
 8011ed8:	e007      	b.n	8011eea <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011eda:	7dfb      	ldrb	r3, [r7, #23]
 8011edc:	2b01      	cmp	r3, #1
 8011ede:	d102      	bne.n	8011ee6 <create_chain+0x122>
 8011ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ee4:	e000      	b.n	8011ee8 <create_chain+0x124>
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011eea:	69fb      	ldr	r3, [r7, #28]
}
 8011eec:	4618      	mov	r0, r3
 8011eee:	3720      	adds	r7, #32
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bd80      	pop	{r7, pc}

08011ef4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011ef4:	b480      	push	{r7}
 8011ef6:	b087      	sub	sp, #28
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
 8011efc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f08:	3304      	adds	r3, #4
 8011f0a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	899b      	ldrh	r3, [r3, #12]
 8011f10:	461a      	mov	r2, r3
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f18:	68fa      	ldr	r2, [r7, #12]
 8011f1a:	8952      	ldrh	r2, [r2, #10]
 8011f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f20:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011f22:	693b      	ldr	r3, [r7, #16]
 8011f24:	1d1a      	adds	r2, r3, #4
 8011f26:	613a      	str	r2, [r7, #16]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d101      	bne.n	8011f36 <clmt_clust+0x42>
 8011f32:	2300      	movs	r3, #0
 8011f34:	e010      	b.n	8011f58 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011f36:	697a      	ldr	r2, [r7, #20]
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	429a      	cmp	r2, r3
 8011f3c:	d307      	bcc.n	8011f4e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011f3e:	697a      	ldr	r2, [r7, #20]
 8011f40:	68bb      	ldr	r3, [r7, #8]
 8011f42:	1ad3      	subs	r3, r2, r3
 8011f44:	617b      	str	r3, [r7, #20]
 8011f46:	693b      	ldr	r3, [r7, #16]
 8011f48:	3304      	adds	r3, #4
 8011f4a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011f4c:	e7e9      	b.n	8011f22 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011f4e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	681a      	ldr	r2, [r3, #0]
 8011f54:	697b      	ldr	r3, [r7, #20]
 8011f56:	4413      	add	r3, r2
}
 8011f58:	4618      	mov	r0, r3
 8011f5a:	371c      	adds	r7, #28
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f62:	4770      	bx	lr

08011f64 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b086      	sub	sp, #24
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
 8011f6c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011f74:	683b      	ldr	r3, [r7, #0]
 8011f76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011f7a:	d204      	bcs.n	8011f86 <dir_sdi+0x22>
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	f003 031f 	and.w	r3, r3, #31
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d001      	beq.n	8011f8a <dir_sdi+0x26>
		return FR_INT_ERR;
 8011f86:	2302      	movs	r3, #2
 8011f88:	e071      	b.n	801206e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	683a      	ldr	r2, [r7, #0]
 8011f8e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	689b      	ldr	r3, [r3, #8]
 8011f94:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011f96:	697b      	ldr	r3, [r7, #20]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d106      	bne.n	8011faa <dir_sdi+0x46>
 8011f9c:	693b      	ldr	r3, [r7, #16]
 8011f9e:	781b      	ldrb	r3, [r3, #0]
 8011fa0:	2b02      	cmp	r3, #2
 8011fa2:	d902      	bls.n	8011faa <dir_sdi+0x46>
		clst = fs->dirbase;
 8011fa4:	693b      	ldr	r3, [r7, #16]
 8011fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fa8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011faa:	697b      	ldr	r3, [r7, #20]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d10c      	bne.n	8011fca <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	095b      	lsrs	r3, r3, #5
 8011fb4:	693a      	ldr	r2, [r7, #16]
 8011fb6:	8912      	ldrh	r2, [r2, #8]
 8011fb8:	4293      	cmp	r3, r2
 8011fba:	d301      	bcc.n	8011fc0 <dir_sdi+0x5c>
 8011fbc:	2302      	movs	r3, #2
 8011fbe:	e056      	b.n	801206e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8011fc0:	693b      	ldr	r3, [r7, #16]
 8011fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	61da      	str	r2, [r3, #28]
 8011fc8:	e02d      	b.n	8012026 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011fca:	693b      	ldr	r3, [r7, #16]
 8011fcc:	895b      	ldrh	r3, [r3, #10]
 8011fce:	461a      	mov	r2, r3
 8011fd0:	693b      	ldr	r3, [r7, #16]
 8011fd2:	899b      	ldrh	r3, [r3, #12]
 8011fd4:	fb03 f302 	mul.w	r3, r3, r2
 8011fd8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011fda:	e019      	b.n	8012010 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	6979      	ldr	r1, [r7, #20]
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	f7ff fc9a 	bl	801191a <get_fat>
 8011fe6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011fe8:	697b      	ldr	r3, [r7, #20]
 8011fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fee:	d101      	bne.n	8011ff4 <dir_sdi+0x90>
 8011ff0:	2301      	movs	r3, #1
 8011ff2:	e03c      	b.n	801206e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011ff4:	697b      	ldr	r3, [r7, #20]
 8011ff6:	2b01      	cmp	r3, #1
 8011ff8:	d904      	bls.n	8012004 <dir_sdi+0xa0>
 8011ffa:	693b      	ldr	r3, [r7, #16]
 8011ffc:	69db      	ldr	r3, [r3, #28]
 8011ffe:	697a      	ldr	r2, [r7, #20]
 8012000:	429a      	cmp	r2, r3
 8012002:	d301      	bcc.n	8012008 <dir_sdi+0xa4>
 8012004:	2302      	movs	r3, #2
 8012006:	e032      	b.n	801206e <dir_sdi+0x10a>
			ofs -= csz;
 8012008:	683a      	ldr	r2, [r7, #0]
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	1ad3      	subs	r3, r2, r3
 801200e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012010:	683a      	ldr	r2, [r7, #0]
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	429a      	cmp	r2, r3
 8012016:	d2e1      	bcs.n	8011fdc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8012018:	6979      	ldr	r1, [r7, #20]
 801201a:	6938      	ldr	r0, [r7, #16]
 801201c:	f7ff fc5e 	bl	80118dc <clust2sect>
 8012020:	4602      	mov	r2, r0
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	697a      	ldr	r2, [r7, #20]
 801202a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	69db      	ldr	r3, [r3, #28]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d101      	bne.n	8012038 <dir_sdi+0xd4>
 8012034:	2302      	movs	r3, #2
 8012036:	e01a      	b.n	801206e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	69da      	ldr	r2, [r3, #28]
 801203c:	693b      	ldr	r3, [r7, #16]
 801203e:	899b      	ldrh	r3, [r3, #12]
 8012040:	4619      	mov	r1, r3
 8012042:	683b      	ldr	r3, [r7, #0]
 8012044:	fbb3 f3f1 	udiv	r3, r3, r1
 8012048:	441a      	add	r2, r3
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801204e:	693b      	ldr	r3, [r7, #16]
 8012050:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012054:	693b      	ldr	r3, [r7, #16]
 8012056:	899b      	ldrh	r3, [r3, #12]
 8012058:	461a      	mov	r2, r3
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	fbb3 f0f2 	udiv	r0, r3, r2
 8012060:	fb02 f200 	mul.w	r2, r2, r0
 8012064:	1a9b      	subs	r3, r3, r2
 8012066:	18ca      	adds	r2, r1, r3
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801206c:	2300      	movs	r3, #0
}
 801206e:	4618      	mov	r0, r3
 8012070:	3718      	adds	r7, #24
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}

08012076 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012076:	b580      	push	{r7, lr}
 8012078:	b086      	sub	sp, #24
 801207a:	af00      	add	r7, sp, #0
 801207c:	6078      	str	r0, [r7, #4]
 801207e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	695b      	ldr	r3, [r3, #20]
 801208a:	3320      	adds	r3, #32
 801208c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	69db      	ldr	r3, [r3, #28]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d003      	beq.n	801209e <dir_next+0x28>
 8012096:	68bb      	ldr	r3, [r7, #8]
 8012098:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801209c:	d301      	bcc.n	80120a2 <dir_next+0x2c>
 801209e:	2304      	movs	r3, #4
 80120a0:	e0bb      	b.n	801221a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	899b      	ldrh	r3, [r3, #12]
 80120a6:	461a      	mov	r2, r3
 80120a8:	68bb      	ldr	r3, [r7, #8]
 80120aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80120ae:	fb02 f201 	mul.w	r2, r2, r1
 80120b2:	1a9b      	subs	r3, r3, r2
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	f040 809d 	bne.w	80121f4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	69db      	ldr	r3, [r3, #28]
 80120be:	1c5a      	adds	r2, r3, #1
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	699b      	ldr	r3, [r3, #24]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d10b      	bne.n	80120e4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80120cc:	68bb      	ldr	r3, [r7, #8]
 80120ce:	095b      	lsrs	r3, r3, #5
 80120d0:	68fa      	ldr	r2, [r7, #12]
 80120d2:	8912      	ldrh	r2, [r2, #8]
 80120d4:	4293      	cmp	r3, r2
 80120d6:	f0c0 808d 	bcc.w	80121f4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	2200      	movs	r2, #0
 80120de:	61da      	str	r2, [r3, #28]
 80120e0:	2304      	movs	r3, #4
 80120e2:	e09a      	b.n	801221a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	899b      	ldrh	r3, [r3, #12]
 80120e8:	461a      	mov	r2, r3
 80120ea:	68bb      	ldr	r3, [r7, #8]
 80120ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80120f0:	68fa      	ldr	r2, [r7, #12]
 80120f2:	8952      	ldrh	r2, [r2, #10]
 80120f4:	3a01      	subs	r2, #1
 80120f6:	4013      	ands	r3, r2
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d17b      	bne.n	80121f4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80120fc:	687a      	ldr	r2, [r7, #4]
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	699b      	ldr	r3, [r3, #24]
 8012102:	4619      	mov	r1, r3
 8012104:	4610      	mov	r0, r2
 8012106:	f7ff fc08 	bl	801191a <get_fat>
 801210a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801210c:	697b      	ldr	r3, [r7, #20]
 801210e:	2b01      	cmp	r3, #1
 8012110:	d801      	bhi.n	8012116 <dir_next+0xa0>
 8012112:	2302      	movs	r3, #2
 8012114:	e081      	b.n	801221a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012116:	697b      	ldr	r3, [r7, #20]
 8012118:	f1b3 3fff 	cmp.w	r3, #4294967295
 801211c:	d101      	bne.n	8012122 <dir_next+0xac>
 801211e:	2301      	movs	r3, #1
 8012120:	e07b      	b.n	801221a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	69db      	ldr	r3, [r3, #28]
 8012126:	697a      	ldr	r2, [r7, #20]
 8012128:	429a      	cmp	r2, r3
 801212a:	d359      	bcc.n	80121e0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d104      	bne.n	801213c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	2200      	movs	r2, #0
 8012136:	61da      	str	r2, [r3, #28]
 8012138:	2304      	movs	r3, #4
 801213a:	e06e      	b.n	801221a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801213c:	687a      	ldr	r2, [r7, #4]
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	699b      	ldr	r3, [r3, #24]
 8012142:	4619      	mov	r1, r3
 8012144:	4610      	mov	r0, r2
 8012146:	f7ff fe3d 	bl	8011dc4 <create_chain>
 801214a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801214c:	697b      	ldr	r3, [r7, #20]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d101      	bne.n	8012156 <dir_next+0xe0>
 8012152:	2307      	movs	r3, #7
 8012154:	e061      	b.n	801221a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012156:	697b      	ldr	r3, [r7, #20]
 8012158:	2b01      	cmp	r3, #1
 801215a:	d101      	bne.n	8012160 <dir_next+0xea>
 801215c:	2302      	movs	r3, #2
 801215e:	e05c      	b.n	801221a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012166:	d101      	bne.n	801216c <dir_next+0xf6>
 8012168:	2301      	movs	r3, #1
 801216a:	e056      	b.n	801221a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801216c:	68f8      	ldr	r0, [r7, #12]
 801216e:	f7ff fad3 	bl	8011718 <sync_window>
 8012172:	4603      	mov	r3, r0
 8012174:	2b00      	cmp	r3, #0
 8012176:	d001      	beq.n	801217c <dir_next+0x106>
 8012178:	2301      	movs	r3, #1
 801217a:	e04e      	b.n	801221a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	899b      	ldrh	r3, [r3, #12]
 8012186:	461a      	mov	r2, r3
 8012188:	2100      	movs	r1, #0
 801218a:	f7ff f8fc 	bl	8011386 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801218e:	2300      	movs	r3, #0
 8012190:	613b      	str	r3, [r7, #16]
 8012192:	6979      	ldr	r1, [r7, #20]
 8012194:	68f8      	ldr	r0, [r7, #12]
 8012196:	f7ff fba1 	bl	80118dc <clust2sect>
 801219a:	4602      	mov	r2, r0
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	635a      	str	r2, [r3, #52]	; 0x34
 80121a0:	e012      	b.n	80121c8 <dir_next+0x152>
						fs->wflag = 1;
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	2201      	movs	r2, #1
 80121a6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80121a8:	68f8      	ldr	r0, [r7, #12]
 80121aa:	f7ff fab5 	bl	8011718 <sync_window>
 80121ae:	4603      	mov	r3, r0
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d001      	beq.n	80121b8 <dir_next+0x142>
 80121b4:	2301      	movs	r3, #1
 80121b6:	e030      	b.n	801221a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80121b8:	693b      	ldr	r3, [r7, #16]
 80121ba:	3301      	adds	r3, #1
 80121bc:	613b      	str	r3, [r7, #16]
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121c2:	1c5a      	adds	r2, r3, #1
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	635a      	str	r2, [r3, #52]	; 0x34
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	895b      	ldrh	r3, [r3, #10]
 80121cc:	461a      	mov	r2, r3
 80121ce:	693b      	ldr	r3, [r7, #16]
 80121d0:	4293      	cmp	r3, r2
 80121d2:	d3e6      	bcc.n	80121a2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80121d8:	693b      	ldr	r3, [r7, #16]
 80121da:	1ad2      	subs	r2, r2, r3
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	697a      	ldr	r2, [r7, #20]
 80121e4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80121e6:	6979      	ldr	r1, [r7, #20]
 80121e8:	68f8      	ldr	r0, [r7, #12]
 80121ea:	f7ff fb77 	bl	80118dc <clust2sect>
 80121ee:	4602      	mov	r2, r0
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	68ba      	ldr	r2, [r7, #8]
 80121f8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	899b      	ldrh	r3, [r3, #12]
 8012204:	461a      	mov	r2, r3
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	fbb3 f0f2 	udiv	r0, r3, r2
 801220c:	fb02 f200 	mul.w	r2, r2, r0
 8012210:	1a9b      	subs	r3, r3, r2
 8012212:	18ca      	adds	r2, r1, r3
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012218:	2300      	movs	r3, #0
}
 801221a:	4618      	mov	r0, r3
 801221c:	3718      	adds	r7, #24
 801221e:	46bd      	mov	sp, r7
 8012220:	bd80      	pop	{r7, pc}

08012222 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012222:	b580      	push	{r7, lr}
 8012224:	b086      	sub	sp, #24
 8012226:	af00      	add	r7, sp, #0
 8012228:	6078      	str	r0, [r7, #4]
 801222a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012232:	2100      	movs	r1, #0
 8012234:	6878      	ldr	r0, [r7, #4]
 8012236:	f7ff fe95 	bl	8011f64 <dir_sdi>
 801223a:	4603      	mov	r3, r0
 801223c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801223e:	7dfb      	ldrb	r3, [r7, #23]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d12b      	bne.n	801229c <dir_alloc+0x7a>
		n = 0;
 8012244:	2300      	movs	r3, #0
 8012246:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	69db      	ldr	r3, [r3, #28]
 801224c:	4619      	mov	r1, r3
 801224e:	68f8      	ldr	r0, [r7, #12]
 8012250:	f7ff faa6 	bl	80117a0 <move_window>
 8012254:	4603      	mov	r3, r0
 8012256:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012258:	7dfb      	ldrb	r3, [r7, #23]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d11d      	bne.n	801229a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	6a1b      	ldr	r3, [r3, #32]
 8012262:	781b      	ldrb	r3, [r3, #0]
 8012264:	2be5      	cmp	r3, #229	; 0xe5
 8012266:	d004      	beq.n	8012272 <dir_alloc+0x50>
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	6a1b      	ldr	r3, [r3, #32]
 801226c:	781b      	ldrb	r3, [r3, #0]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d107      	bne.n	8012282 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012272:	693b      	ldr	r3, [r7, #16]
 8012274:	3301      	adds	r3, #1
 8012276:	613b      	str	r3, [r7, #16]
 8012278:	693a      	ldr	r2, [r7, #16]
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	429a      	cmp	r2, r3
 801227e:	d102      	bne.n	8012286 <dir_alloc+0x64>
 8012280:	e00c      	b.n	801229c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012282:	2300      	movs	r3, #0
 8012284:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012286:	2101      	movs	r1, #1
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f7ff fef4 	bl	8012076 <dir_next>
 801228e:	4603      	mov	r3, r0
 8012290:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012292:	7dfb      	ldrb	r3, [r7, #23]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d0d7      	beq.n	8012248 <dir_alloc+0x26>
 8012298:	e000      	b.n	801229c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801229a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801229c:	7dfb      	ldrb	r3, [r7, #23]
 801229e:	2b04      	cmp	r3, #4
 80122a0:	d101      	bne.n	80122a6 <dir_alloc+0x84>
 80122a2:	2307      	movs	r3, #7
 80122a4:	75fb      	strb	r3, [r7, #23]
	return res;
 80122a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80122a8:	4618      	mov	r0, r3
 80122aa:	3718      	adds	r7, #24
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bd80      	pop	{r7, pc}

080122b0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b084      	sub	sp, #16
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
 80122b8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	331a      	adds	r3, #26
 80122be:	4618      	mov	r0, r3
 80122c0:	f7fe ffbe 	bl	8011240 <ld_word>
 80122c4:	4603      	mov	r3, r0
 80122c6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	781b      	ldrb	r3, [r3, #0]
 80122cc:	2b03      	cmp	r3, #3
 80122ce:	d109      	bne.n	80122e4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	3314      	adds	r3, #20
 80122d4:	4618      	mov	r0, r3
 80122d6:	f7fe ffb3 	bl	8011240 <ld_word>
 80122da:	4603      	mov	r3, r0
 80122dc:	041b      	lsls	r3, r3, #16
 80122de:	68fa      	ldr	r2, [r7, #12]
 80122e0:	4313      	orrs	r3, r2
 80122e2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80122e4:	68fb      	ldr	r3, [r7, #12]
}
 80122e6:	4618      	mov	r0, r3
 80122e8:	3710      	adds	r7, #16
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}

080122ee <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80122ee:	b580      	push	{r7, lr}
 80122f0:	b084      	sub	sp, #16
 80122f2:	af00      	add	r7, sp, #0
 80122f4:	60f8      	str	r0, [r7, #12]
 80122f6:	60b9      	str	r1, [r7, #8]
 80122f8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80122fa:	68bb      	ldr	r3, [r7, #8]
 80122fc:	331a      	adds	r3, #26
 80122fe:	687a      	ldr	r2, [r7, #4]
 8012300:	b292      	uxth	r2, r2
 8012302:	4611      	mov	r1, r2
 8012304:	4618      	mov	r0, r3
 8012306:	f7fe ffd6 	bl	80112b6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	781b      	ldrb	r3, [r3, #0]
 801230e:	2b03      	cmp	r3, #3
 8012310:	d109      	bne.n	8012326 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012312:	68bb      	ldr	r3, [r7, #8]
 8012314:	f103 0214 	add.w	r2, r3, #20
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	0c1b      	lsrs	r3, r3, #16
 801231c:	b29b      	uxth	r3, r3
 801231e:	4619      	mov	r1, r3
 8012320:	4610      	mov	r0, r2
 8012322:	f7fe ffc8 	bl	80112b6 <st_word>
	}
}
 8012326:	bf00      	nop
 8012328:	3710      	adds	r7, #16
 801232a:	46bd      	mov	sp, r7
 801232c:	bd80      	pop	{r7, pc}

0801232e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801232e:	b580      	push	{r7, lr}
 8012330:	b086      	sub	sp, #24
 8012332:	af00      	add	r7, sp, #0
 8012334:	6078      	str	r0, [r7, #4]
 8012336:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012338:	2304      	movs	r3, #4
 801233a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012342:	e03c      	b.n	80123be <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	69db      	ldr	r3, [r3, #28]
 8012348:	4619      	mov	r1, r3
 801234a:	6938      	ldr	r0, [r7, #16]
 801234c:	f7ff fa28 	bl	80117a0 <move_window>
 8012350:	4603      	mov	r3, r0
 8012352:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012354:	7dfb      	ldrb	r3, [r7, #23]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d136      	bne.n	80123c8 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	6a1b      	ldr	r3, [r3, #32]
 801235e:	781b      	ldrb	r3, [r3, #0]
 8012360:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012362:	7bfb      	ldrb	r3, [r7, #15]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d102      	bne.n	801236e <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012368:	2304      	movs	r3, #4
 801236a:	75fb      	strb	r3, [r7, #23]
 801236c:	e031      	b.n	80123d2 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	6a1b      	ldr	r3, [r3, #32]
 8012372:	330b      	adds	r3, #11
 8012374:	781b      	ldrb	r3, [r3, #0]
 8012376:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801237a:	73bb      	strb	r3, [r7, #14]
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	7bba      	ldrb	r2, [r7, #14]
 8012380:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012382:	7bfb      	ldrb	r3, [r7, #15]
 8012384:	2be5      	cmp	r3, #229	; 0xe5
 8012386:	d011      	beq.n	80123ac <dir_read+0x7e>
 8012388:	7bfb      	ldrb	r3, [r7, #15]
 801238a:	2b2e      	cmp	r3, #46	; 0x2e
 801238c:	d00e      	beq.n	80123ac <dir_read+0x7e>
 801238e:	7bbb      	ldrb	r3, [r7, #14]
 8012390:	2b0f      	cmp	r3, #15
 8012392:	d00b      	beq.n	80123ac <dir_read+0x7e>
 8012394:	7bbb      	ldrb	r3, [r7, #14]
 8012396:	f023 0320 	bic.w	r3, r3, #32
 801239a:	2b08      	cmp	r3, #8
 801239c:	bf0c      	ite	eq
 801239e:	2301      	moveq	r3, #1
 80123a0:	2300      	movne	r3, #0
 80123a2:	b2db      	uxtb	r3, r3
 80123a4:	461a      	mov	r2, r3
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	4293      	cmp	r3, r2
 80123aa:	d00f      	beq.n	80123cc <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80123ac:	2100      	movs	r1, #0
 80123ae:	6878      	ldr	r0, [r7, #4]
 80123b0:	f7ff fe61 	bl	8012076 <dir_next>
 80123b4:	4603      	mov	r3, r0
 80123b6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80123b8:	7dfb      	ldrb	r3, [r7, #23]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d108      	bne.n	80123d0 <dir_read+0xa2>
	while (dp->sect) {
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	69db      	ldr	r3, [r3, #28]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d1be      	bne.n	8012344 <dir_read+0x16>
 80123c6:	e004      	b.n	80123d2 <dir_read+0xa4>
		if (res != FR_OK) break;
 80123c8:	bf00      	nop
 80123ca:	e002      	b.n	80123d2 <dir_read+0xa4>
				break;
 80123cc:	bf00      	nop
 80123ce:	e000      	b.n	80123d2 <dir_read+0xa4>
		if (res != FR_OK) break;
 80123d0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80123d2:	7dfb      	ldrb	r3, [r7, #23]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d002      	beq.n	80123de <dir_read+0xb0>
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2200      	movs	r2, #0
 80123dc:	61da      	str	r2, [r3, #28]
	return res;
 80123de:	7dfb      	ldrb	r3, [r7, #23]
}
 80123e0:	4618      	mov	r0, r3
 80123e2:	3718      	adds	r7, #24
 80123e4:	46bd      	mov	sp, r7
 80123e6:	bd80      	pop	{r7, pc}

080123e8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b086      	sub	sp, #24
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80123f6:	2100      	movs	r1, #0
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f7ff fdb3 	bl	8011f64 <dir_sdi>
 80123fe:	4603      	mov	r3, r0
 8012400:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012402:	7dfb      	ldrb	r3, [r7, #23]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d001      	beq.n	801240c <dir_find+0x24>
 8012408:	7dfb      	ldrb	r3, [r7, #23]
 801240a:	e03e      	b.n	801248a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	69db      	ldr	r3, [r3, #28]
 8012410:	4619      	mov	r1, r3
 8012412:	6938      	ldr	r0, [r7, #16]
 8012414:	f7ff f9c4 	bl	80117a0 <move_window>
 8012418:	4603      	mov	r3, r0
 801241a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801241c:	7dfb      	ldrb	r3, [r7, #23]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d12f      	bne.n	8012482 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	6a1b      	ldr	r3, [r3, #32]
 8012426:	781b      	ldrb	r3, [r3, #0]
 8012428:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801242a:	7bfb      	ldrb	r3, [r7, #15]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d102      	bne.n	8012436 <dir_find+0x4e>
 8012430:	2304      	movs	r3, #4
 8012432:	75fb      	strb	r3, [r7, #23]
 8012434:	e028      	b.n	8012488 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	6a1b      	ldr	r3, [r3, #32]
 801243a:	330b      	adds	r3, #11
 801243c:	781b      	ldrb	r3, [r3, #0]
 801243e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012442:	b2da      	uxtb	r2, r3
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	6a1b      	ldr	r3, [r3, #32]
 801244c:	330b      	adds	r3, #11
 801244e:	781b      	ldrb	r3, [r3, #0]
 8012450:	f003 0308 	and.w	r3, r3, #8
 8012454:	2b00      	cmp	r3, #0
 8012456:	d10a      	bne.n	801246e <dir_find+0x86>
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	6a18      	ldr	r0, [r3, #32]
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	3324      	adds	r3, #36	; 0x24
 8012460:	220b      	movs	r2, #11
 8012462:	4619      	mov	r1, r3
 8012464:	f7fe ffaa 	bl	80113bc <mem_cmp>
 8012468:	4603      	mov	r3, r0
 801246a:	2b00      	cmp	r3, #0
 801246c:	d00b      	beq.n	8012486 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801246e:	2100      	movs	r1, #0
 8012470:	6878      	ldr	r0, [r7, #4]
 8012472:	f7ff fe00 	bl	8012076 <dir_next>
 8012476:	4603      	mov	r3, r0
 8012478:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801247a:	7dfb      	ldrb	r3, [r7, #23]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d0c5      	beq.n	801240c <dir_find+0x24>
 8012480:	e002      	b.n	8012488 <dir_find+0xa0>
		if (res != FR_OK) break;
 8012482:	bf00      	nop
 8012484:	e000      	b.n	8012488 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012486:	bf00      	nop

	return res;
 8012488:	7dfb      	ldrb	r3, [r7, #23]
}
 801248a:	4618      	mov	r0, r3
 801248c:	3718      	adds	r7, #24
 801248e:	46bd      	mov	sp, r7
 8012490:	bd80      	pop	{r7, pc}

08012492 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012492:	b580      	push	{r7, lr}
 8012494:	b084      	sub	sp, #16
 8012496:	af00      	add	r7, sp, #0
 8012498:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80124a0:	2101      	movs	r1, #1
 80124a2:	6878      	ldr	r0, [r7, #4]
 80124a4:	f7ff febd 	bl	8012222 <dir_alloc>
 80124a8:	4603      	mov	r3, r0
 80124aa:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80124ac:	7bfb      	ldrb	r3, [r7, #15]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d11c      	bne.n	80124ec <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	69db      	ldr	r3, [r3, #28]
 80124b6:	4619      	mov	r1, r3
 80124b8:	68b8      	ldr	r0, [r7, #8]
 80124ba:	f7ff f971 	bl	80117a0 <move_window>
 80124be:	4603      	mov	r3, r0
 80124c0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80124c2:	7bfb      	ldrb	r3, [r7, #15]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d111      	bne.n	80124ec <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	6a1b      	ldr	r3, [r3, #32]
 80124cc:	2220      	movs	r2, #32
 80124ce:	2100      	movs	r1, #0
 80124d0:	4618      	mov	r0, r3
 80124d2:	f7fe ff58 	bl	8011386 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	6a18      	ldr	r0, [r3, #32]
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	3324      	adds	r3, #36	; 0x24
 80124de:	220b      	movs	r2, #11
 80124e0:	4619      	mov	r1, r3
 80124e2:	f7fe ff2f 	bl	8011344 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80124e6:	68bb      	ldr	r3, [r7, #8]
 80124e8:	2201      	movs	r2, #1
 80124ea:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80124ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80124ee:	4618      	mov	r0, r3
 80124f0:	3710      	adds	r7, #16
 80124f2:	46bd      	mov	sp, r7
 80124f4:	bd80      	pop	{r7, pc}

080124f6 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80124f6:	b580      	push	{r7, lr}
 80124f8:	b084      	sub	sp, #16
 80124fa:	af00      	add	r7, sp, #0
 80124fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	69db      	ldr	r3, [r3, #28]
 8012508:	4619      	mov	r1, r3
 801250a:	68f8      	ldr	r0, [r7, #12]
 801250c:	f7ff f948 	bl	80117a0 <move_window>
 8012510:	4603      	mov	r3, r0
 8012512:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8012514:	7afb      	ldrb	r3, [r7, #11]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d106      	bne.n	8012528 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	6a1b      	ldr	r3, [r3, #32]
 801251e:	22e5      	movs	r2, #229	; 0xe5
 8012520:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	2201      	movs	r2, #1
 8012526:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012528:	7afb      	ldrb	r3, [r7, #11]
}
 801252a:	4618      	mov	r0, r3
 801252c:	3710      	adds	r7, #16
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}
	...

08012534 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012534:	b580      	push	{r7, lr}
 8012536:	b088      	sub	sp, #32
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
 801253c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	60fb      	str	r3, [r7, #12]
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	3324      	adds	r3, #36	; 0x24
 8012548:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801254a:	220b      	movs	r2, #11
 801254c:	2120      	movs	r1, #32
 801254e:	68b8      	ldr	r0, [r7, #8]
 8012550:	f7fe ff19 	bl	8011386 <mem_set>
	si = i = 0; ni = 8;
 8012554:	2300      	movs	r3, #0
 8012556:	613b      	str	r3, [r7, #16]
 8012558:	693b      	ldr	r3, [r7, #16]
 801255a:	61fb      	str	r3, [r7, #28]
 801255c:	2308      	movs	r3, #8
 801255e:	617b      	str	r3, [r7, #20]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8012560:	68fa      	ldr	r2, [r7, #12]
 8012562:	69fb      	ldr	r3, [r7, #28]
 8012564:	4413      	add	r3, r2
 8012566:	781b      	ldrb	r3, [r3, #0]
 8012568:	2b2e      	cmp	r3, #46	; 0x2e
 801256a:	d12f      	bne.n	80125cc <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 801256c:	69fb      	ldr	r3, [r7, #28]
 801256e:	1c5a      	adds	r2, r3, #1
 8012570:	61fa      	str	r2, [r7, #28]
 8012572:	68fa      	ldr	r2, [r7, #12]
 8012574:	4413      	add	r3, r2
 8012576:	781b      	ldrb	r3, [r3, #0]
 8012578:	76fb      	strb	r3, [r7, #27]
			if (c != '.' || si >= 3) break;
 801257a:	7efb      	ldrb	r3, [r7, #27]
 801257c:	2b2e      	cmp	r3, #46	; 0x2e
 801257e:	d10a      	bne.n	8012596 <create_name+0x62>
 8012580:	69fb      	ldr	r3, [r7, #28]
 8012582:	2b02      	cmp	r3, #2
 8012584:	d807      	bhi.n	8012596 <create_name+0x62>
			sfn[i++] = c;
 8012586:	693b      	ldr	r3, [r7, #16]
 8012588:	1c5a      	adds	r2, r3, #1
 801258a:	613a      	str	r2, [r7, #16]
 801258c:	68ba      	ldr	r2, [r7, #8]
 801258e:	4413      	add	r3, r2
 8012590:	7efa      	ldrb	r2, [r7, #27]
 8012592:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8012594:	e7ea      	b.n	801256c <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8012596:	7efb      	ldrb	r3, [r7, #27]
 8012598:	2b2f      	cmp	r3, #47	; 0x2f
 801259a:	d007      	beq.n	80125ac <create_name+0x78>
 801259c:	7efb      	ldrb	r3, [r7, #27]
 801259e:	2b5c      	cmp	r3, #92	; 0x5c
 80125a0:	d004      	beq.n	80125ac <create_name+0x78>
 80125a2:	7efb      	ldrb	r3, [r7, #27]
 80125a4:	2b20      	cmp	r3, #32
 80125a6:	d901      	bls.n	80125ac <create_name+0x78>
 80125a8:	2306      	movs	r3, #6
 80125aa:	e084      	b.n	80126b6 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 80125ac:	68fa      	ldr	r2, [r7, #12]
 80125ae:	69fb      	ldr	r3, [r7, #28]
 80125b0:	441a      	add	r2, r3
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 80125b6:	7efb      	ldrb	r3, [r7, #27]
 80125b8:	2b20      	cmp	r3, #32
 80125ba:	d801      	bhi.n	80125c0 <create_name+0x8c>
 80125bc:	2224      	movs	r2, #36	; 0x24
 80125be:	e000      	b.n	80125c2 <create_name+0x8e>
 80125c0:	2220      	movs	r2, #32
 80125c2:	68bb      	ldr	r3, [r7, #8]
 80125c4:	330b      	adds	r3, #11
 80125c6:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80125c8:	2300      	movs	r3, #0
 80125ca:	e074      	b.n	80126b6 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80125cc:	69fb      	ldr	r3, [r7, #28]
 80125ce:	1c5a      	adds	r2, r3, #1
 80125d0:	61fa      	str	r2, [r7, #28]
 80125d2:	68fa      	ldr	r2, [r7, #12]
 80125d4:	4413      	add	r3, r2
 80125d6:	781b      	ldrb	r3, [r3, #0]
 80125d8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80125da:	7efb      	ldrb	r3, [r7, #27]
 80125dc:	2b20      	cmp	r3, #32
 80125de:	d94e      	bls.n	801267e <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80125e0:	7efb      	ldrb	r3, [r7, #27]
 80125e2:	2b2f      	cmp	r3, #47	; 0x2f
 80125e4:	d006      	beq.n	80125f4 <create_name+0xc0>
 80125e6:	7efb      	ldrb	r3, [r7, #27]
 80125e8:	2b5c      	cmp	r3, #92	; 0x5c
 80125ea:	d110      	bne.n	801260e <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80125ec:	e002      	b.n	80125f4 <create_name+0xc0>
 80125ee:	69fb      	ldr	r3, [r7, #28]
 80125f0:	3301      	adds	r3, #1
 80125f2:	61fb      	str	r3, [r7, #28]
 80125f4:	68fa      	ldr	r2, [r7, #12]
 80125f6:	69fb      	ldr	r3, [r7, #28]
 80125f8:	4413      	add	r3, r2
 80125fa:	781b      	ldrb	r3, [r3, #0]
 80125fc:	2b2f      	cmp	r3, #47	; 0x2f
 80125fe:	d0f6      	beq.n	80125ee <create_name+0xba>
 8012600:	68fa      	ldr	r2, [r7, #12]
 8012602:	69fb      	ldr	r3, [r7, #28]
 8012604:	4413      	add	r3, r2
 8012606:	781b      	ldrb	r3, [r3, #0]
 8012608:	2b5c      	cmp	r3, #92	; 0x5c
 801260a:	d0f0      	beq.n	80125ee <create_name+0xba>
			break;
 801260c:	e038      	b.n	8012680 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801260e:	7efb      	ldrb	r3, [r7, #27]
 8012610:	2b2e      	cmp	r3, #46	; 0x2e
 8012612:	d003      	beq.n	801261c <create_name+0xe8>
 8012614:	693a      	ldr	r2, [r7, #16]
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	429a      	cmp	r2, r3
 801261a:	d30c      	bcc.n	8012636 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801261c:	697b      	ldr	r3, [r7, #20]
 801261e:	2b0b      	cmp	r3, #11
 8012620:	d002      	beq.n	8012628 <create_name+0xf4>
 8012622:	7efb      	ldrb	r3, [r7, #27]
 8012624:	2b2e      	cmp	r3, #46	; 0x2e
 8012626:	d001      	beq.n	801262c <create_name+0xf8>
 8012628:	2306      	movs	r3, #6
 801262a:	e044      	b.n	80126b6 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 801262c:	2308      	movs	r3, #8
 801262e:	613b      	str	r3, [r7, #16]
 8012630:	230b      	movs	r3, #11
 8012632:	617b      	str	r3, [r7, #20]
			continue;
 8012634:	e022      	b.n	801267c <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012636:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801263a:	2b00      	cmp	r3, #0
 801263c:	da04      	bge.n	8012648 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801263e:	7efb      	ldrb	r3, [r7, #27]
 8012640:	3b80      	subs	r3, #128	; 0x80
 8012642:	4a1f      	ldr	r2, [pc, #124]	; (80126c0 <create_name+0x18c>)
 8012644:	5cd3      	ldrb	r3, [r2, r3]
 8012646:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012648:	7efb      	ldrb	r3, [r7, #27]
 801264a:	4619      	mov	r1, r3
 801264c:	481d      	ldr	r0, [pc, #116]	; (80126c4 <create_name+0x190>)
 801264e:	f7fe fedc 	bl	801140a <chk_chr>
 8012652:	4603      	mov	r3, r0
 8012654:	2b00      	cmp	r3, #0
 8012656:	d001      	beq.n	801265c <create_name+0x128>
 8012658:	2306      	movs	r3, #6
 801265a:	e02c      	b.n	80126b6 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801265c:	7efb      	ldrb	r3, [r7, #27]
 801265e:	2b60      	cmp	r3, #96	; 0x60
 8012660:	d905      	bls.n	801266e <create_name+0x13a>
 8012662:	7efb      	ldrb	r3, [r7, #27]
 8012664:	2b7a      	cmp	r3, #122	; 0x7a
 8012666:	d802      	bhi.n	801266e <create_name+0x13a>
 8012668:	7efb      	ldrb	r3, [r7, #27]
 801266a:	3b20      	subs	r3, #32
 801266c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801266e:	693b      	ldr	r3, [r7, #16]
 8012670:	1c5a      	adds	r2, r3, #1
 8012672:	613a      	str	r2, [r7, #16]
 8012674:	68ba      	ldr	r2, [r7, #8]
 8012676:	4413      	add	r3, r2
 8012678:	7efa      	ldrb	r2, [r7, #27]
 801267a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801267c:	e7a6      	b.n	80125cc <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801267e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012680:	68fa      	ldr	r2, [r7, #12]
 8012682:	69fb      	ldr	r3, [r7, #28]
 8012684:	441a      	add	r2, r3
 8012686:	683b      	ldr	r3, [r7, #0]
 8012688:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801268a:	693b      	ldr	r3, [r7, #16]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d101      	bne.n	8012694 <create_name+0x160>
 8012690:	2306      	movs	r3, #6
 8012692:	e010      	b.n	80126b6 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	781b      	ldrb	r3, [r3, #0]
 8012698:	2be5      	cmp	r3, #229	; 0xe5
 801269a:	d102      	bne.n	80126a2 <create_name+0x16e>
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	2205      	movs	r2, #5
 80126a0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80126a2:	7efb      	ldrb	r3, [r7, #27]
 80126a4:	2b20      	cmp	r3, #32
 80126a6:	d801      	bhi.n	80126ac <create_name+0x178>
 80126a8:	2204      	movs	r2, #4
 80126aa:	e000      	b.n	80126ae <create_name+0x17a>
 80126ac:	2200      	movs	r2, #0
 80126ae:	68bb      	ldr	r3, [r7, #8]
 80126b0:	330b      	adds	r3, #11
 80126b2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80126b4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80126b6:	4618      	mov	r0, r3
 80126b8:	3720      	adds	r7, #32
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bd80      	pop	{r7, pc}
 80126be:	bf00      	nop
 80126c0:	0801ad40 	.word	0x0801ad40
 80126c4:	0801acf0 	.word	0x0801acf0

080126c8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b086      	sub	sp, #24
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80126d6:	693b      	ldr	r3, [r7, #16]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	781b      	ldrb	r3, [r3, #0]
 80126e0:	2b2f      	cmp	r3, #47	; 0x2f
 80126e2:	d00b      	beq.n	80126fc <follow_path+0x34>
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	2b5c      	cmp	r3, #92	; 0x5c
 80126ea:	d007      	beq.n	80126fc <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	699a      	ldr	r2, [r3, #24]
 80126f0:	693b      	ldr	r3, [r7, #16]
 80126f2:	609a      	str	r2, [r3, #8]
 80126f4:	e00d      	b.n	8012712 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	3301      	adds	r3, #1
 80126fa:	603b      	str	r3, [r7, #0]
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	781b      	ldrb	r3, [r3, #0]
 8012700:	2b2f      	cmp	r3, #47	; 0x2f
 8012702:	d0f8      	beq.n	80126f6 <follow_path+0x2e>
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	781b      	ldrb	r3, [r3, #0]
 8012708:	2b5c      	cmp	r3, #92	; 0x5c
 801270a:	d0f4      	beq.n	80126f6 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 801270c:	693b      	ldr	r3, [r7, #16]
 801270e:	2200      	movs	r2, #0
 8012710:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012712:	683b      	ldr	r3, [r7, #0]
 8012714:	781b      	ldrb	r3, [r3, #0]
 8012716:	2b1f      	cmp	r3, #31
 8012718:	d80a      	bhi.n	8012730 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2280      	movs	r2, #128	; 0x80
 801271e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012722:	2100      	movs	r1, #0
 8012724:	6878      	ldr	r0, [r7, #4]
 8012726:	f7ff fc1d 	bl	8011f64 <dir_sdi>
 801272a:	4603      	mov	r3, r0
 801272c:	75fb      	strb	r3, [r7, #23]
 801272e:	e05b      	b.n	80127e8 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012730:	463b      	mov	r3, r7
 8012732:	4619      	mov	r1, r3
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f7ff fefd 	bl	8012534 <create_name>
 801273a:	4603      	mov	r3, r0
 801273c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801273e:	7dfb      	ldrb	r3, [r7, #23]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d14c      	bne.n	80127de <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012744:	6878      	ldr	r0, [r7, #4]
 8012746:	f7ff fe4f 	bl	80123e8 <dir_find>
 801274a:	4603      	mov	r3, r0
 801274c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012754:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012756:	7dfb      	ldrb	r3, [r7, #23]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d01b      	beq.n	8012794 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801275c:	7dfb      	ldrb	r3, [r7, #23]
 801275e:	2b04      	cmp	r3, #4
 8012760:	d13f      	bne.n	80127e2 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012762:	7afb      	ldrb	r3, [r7, #11]
 8012764:	f003 0320 	and.w	r3, r3, #32
 8012768:	2b00      	cmp	r3, #0
 801276a:	d00b      	beq.n	8012784 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801276c:	7afb      	ldrb	r3, [r7, #11]
 801276e:	f003 0304 	and.w	r3, r3, #4
 8012772:	2b00      	cmp	r3, #0
 8012774:	d031      	beq.n	80127da <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	2280      	movs	r2, #128	; 0x80
 801277a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 801277e:	2300      	movs	r3, #0
 8012780:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012782:	e02e      	b.n	80127e2 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012784:	7afb      	ldrb	r3, [r7, #11]
 8012786:	f003 0304 	and.w	r3, r3, #4
 801278a:	2b00      	cmp	r3, #0
 801278c:	d129      	bne.n	80127e2 <follow_path+0x11a>
 801278e:	2305      	movs	r3, #5
 8012790:	75fb      	strb	r3, [r7, #23]
				break;
 8012792:	e026      	b.n	80127e2 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012794:	7afb      	ldrb	r3, [r7, #11]
 8012796:	f003 0304 	and.w	r3, r3, #4
 801279a:	2b00      	cmp	r3, #0
 801279c:	d123      	bne.n	80127e6 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801279e:	693b      	ldr	r3, [r7, #16]
 80127a0:	799b      	ldrb	r3, [r3, #6]
 80127a2:	f003 0310 	and.w	r3, r3, #16
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d102      	bne.n	80127b0 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80127aa:	2305      	movs	r3, #5
 80127ac:	75fb      	strb	r3, [r7, #23]
 80127ae:	e01b      	b.n	80127e8 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	695b      	ldr	r3, [r3, #20]
 80127ba:	68fa      	ldr	r2, [r7, #12]
 80127bc:	8992      	ldrh	r2, [r2, #12]
 80127be:	fbb3 f0f2 	udiv	r0, r3, r2
 80127c2:	fb02 f200 	mul.w	r2, r2, r0
 80127c6:	1a9b      	subs	r3, r3, r2
 80127c8:	440b      	add	r3, r1
 80127ca:	4619      	mov	r1, r3
 80127cc:	68f8      	ldr	r0, [r7, #12]
 80127ce:	f7ff fd6f 	bl	80122b0 <ld_clust>
 80127d2:	4602      	mov	r2, r0
 80127d4:	693b      	ldr	r3, [r7, #16]
 80127d6:	609a      	str	r2, [r3, #8]
 80127d8:	e7aa      	b.n	8012730 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80127da:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80127dc:	e7a8      	b.n	8012730 <follow_path+0x68>
			if (res != FR_OK) break;
 80127de:	bf00      	nop
 80127e0:	e002      	b.n	80127e8 <follow_path+0x120>
				break;
 80127e2:	bf00      	nop
 80127e4:	e000      	b.n	80127e8 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80127e6:	bf00      	nop
			}
		}
	}

	return res;
 80127e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	3718      	adds	r7, #24
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}

080127f2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80127f2:	b480      	push	{r7}
 80127f4:	b087      	sub	sp, #28
 80127f6:	af00      	add	r7, sp, #0
 80127f8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80127fa:	f04f 33ff 	mov.w	r3, #4294967295
 80127fe:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d031      	beq.n	801286c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	617b      	str	r3, [r7, #20]
 801280e:	e002      	b.n	8012816 <get_ldnumber+0x24>
 8012810:	697b      	ldr	r3, [r7, #20]
 8012812:	3301      	adds	r3, #1
 8012814:	617b      	str	r3, [r7, #20]
 8012816:	697b      	ldr	r3, [r7, #20]
 8012818:	781b      	ldrb	r3, [r3, #0]
 801281a:	2b20      	cmp	r3, #32
 801281c:	d903      	bls.n	8012826 <get_ldnumber+0x34>
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	781b      	ldrb	r3, [r3, #0]
 8012822:	2b3a      	cmp	r3, #58	; 0x3a
 8012824:	d1f4      	bne.n	8012810 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012826:	697b      	ldr	r3, [r7, #20]
 8012828:	781b      	ldrb	r3, [r3, #0]
 801282a:	2b3a      	cmp	r3, #58	; 0x3a
 801282c:	d11c      	bne.n	8012868 <get_ldnumber+0x76>
			tp = *path;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	1c5a      	adds	r2, r3, #1
 8012838:	60fa      	str	r2, [r7, #12]
 801283a:	781b      	ldrb	r3, [r3, #0]
 801283c:	3b30      	subs	r3, #48	; 0x30
 801283e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012840:	68bb      	ldr	r3, [r7, #8]
 8012842:	2b09      	cmp	r3, #9
 8012844:	d80e      	bhi.n	8012864 <get_ldnumber+0x72>
 8012846:	68fa      	ldr	r2, [r7, #12]
 8012848:	697b      	ldr	r3, [r7, #20]
 801284a:	429a      	cmp	r2, r3
 801284c:	d10a      	bne.n	8012864 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801284e:	68bb      	ldr	r3, [r7, #8]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d107      	bne.n	8012864 <get_ldnumber+0x72>
					vol = (int)i;
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	3301      	adds	r3, #1
 801285c:	617b      	str	r3, [r7, #20]
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	697a      	ldr	r2, [r7, #20]
 8012862:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012864:	693b      	ldr	r3, [r7, #16]
 8012866:	e002      	b.n	801286e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012868:	2300      	movs	r3, #0
 801286a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801286c:	693b      	ldr	r3, [r7, #16]
}
 801286e:	4618      	mov	r0, r3
 8012870:	371c      	adds	r7, #28
 8012872:	46bd      	mov	sp, r7
 8012874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012878:	4770      	bx	lr
	...

0801287c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b082      	sub	sp, #8
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
 8012884:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	2200      	movs	r2, #0
 801288a:	70da      	strb	r2, [r3, #3]
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	f04f 32ff 	mov.w	r2, #4294967295
 8012892:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012894:	6839      	ldr	r1, [r7, #0]
 8012896:	6878      	ldr	r0, [r7, #4]
 8012898:	f7fe ff82 	bl	80117a0 <move_window>
 801289c:	4603      	mov	r3, r0
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d001      	beq.n	80128a6 <check_fs+0x2a>
 80128a2:	2304      	movs	r3, #4
 80128a4:	e038      	b.n	8012918 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	3338      	adds	r3, #56	; 0x38
 80128aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80128ae:	4618      	mov	r0, r3
 80128b0:	f7fe fcc6 	bl	8011240 <ld_word>
 80128b4:	4603      	mov	r3, r0
 80128b6:	461a      	mov	r2, r3
 80128b8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80128bc:	429a      	cmp	r2, r3
 80128be:	d001      	beq.n	80128c4 <check_fs+0x48>
 80128c0:	2303      	movs	r3, #3
 80128c2:	e029      	b.n	8012918 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80128ca:	2be9      	cmp	r3, #233	; 0xe9
 80128cc:	d009      	beq.n	80128e2 <check_fs+0x66>
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80128d4:	2beb      	cmp	r3, #235	; 0xeb
 80128d6:	d11e      	bne.n	8012916 <check_fs+0x9a>
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80128de:	2b90      	cmp	r3, #144	; 0x90
 80128e0:	d119      	bne.n	8012916 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	3338      	adds	r3, #56	; 0x38
 80128e6:	3336      	adds	r3, #54	; 0x36
 80128e8:	4618      	mov	r0, r3
 80128ea:	f7fe fcc1 	bl	8011270 <ld_dword>
 80128ee:	4603      	mov	r3, r0
 80128f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80128f4:	4a0a      	ldr	r2, [pc, #40]	; (8012920 <check_fs+0xa4>)
 80128f6:	4293      	cmp	r3, r2
 80128f8:	d101      	bne.n	80128fe <check_fs+0x82>
 80128fa:	2300      	movs	r3, #0
 80128fc:	e00c      	b.n	8012918 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	3338      	adds	r3, #56	; 0x38
 8012902:	3352      	adds	r3, #82	; 0x52
 8012904:	4618      	mov	r0, r3
 8012906:	f7fe fcb3 	bl	8011270 <ld_dword>
 801290a:	4603      	mov	r3, r0
 801290c:	4a05      	ldr	r2, [pc, #20]	; (8012924 <check_fs+0xa8>)
 801290e:	4293      	cmp	r3, r2
 8012910:	d101      	bne.n	8012916 <check_fs+0x9a>
 8012912:	2300      	movs	r3, #0
 8012914:	e000      	b.n	8012918 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012916:	2302      	movs	r3, #2
}
 8012918:	4618      	mov	r0, r3
 801291a:	3708      	adds	r7, #8
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}
 8012920:	00544146 	.word	0x00544146
 8012924:	33544146 	.word	0x33544146

08012928 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b096      	sub	sp, #88	; 0x58
 801292c:	af00      	add	r7, sp, #0
 801292e:	60f8      	str	r0, [r7, #12]
 8012930:	60b9      	str	r1, [r7, #8]
 8012932:	4613      	mov	r3, r2
 8012934:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012936:	68bb      	ldr	r3, [r7, #8]
 8012938:	2200      	movs	r2, #0
 801293a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801293c:	68f8      	ldr	r0, [r7, #12]
 801293e:	f7ff ff58 	bl	80127f2 <get_ldnumber>
 8012942:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012946:	2b00      	cmp	r3, #0
 8012948:	da01      	bge.n	801294e <find_volume+0x26>
 801294a:	230b      	movs	r3, #11
 801294c:	e268      	b.n	8012e20 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801294e:	4ab0      	ldr	r2, [pc, #704]	; (8012c10 <find_volume+0x2e8>)
 8012950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012956:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801295a:	2b00      	cmp	r3, #0
 801295c:	d101      	bne.n	8012962 <find_volume+0x3a>
 801295e:	230c      	movs	r3, #12
 8012960:	e25e      	b.n	8012e20 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012962:	68bb      	ldr	r3, [r7, #8]
 8012964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012966:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012968:	79fb      	ldrb	r3, [r7, #7]
 801296a:	f023 0301 	bic.w	r3, r3, #1
 801296e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012972:	781b      	ldrb	r3, [r3, #0]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d01a      	beq.n	80129ae <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801297a:	785b      	ldrb	r3, [r3, #1]
 801297c:	4618      	mov	r0, r3
 801297e:	f7fe fbc1 	bl	8011104 <disk_status>
 8012982:	4603      	mov	r3, r0
 8012984:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012988:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801298c:	f003 0301 	and.w	r3, r3, #1
 8012990:	2b00      	cmp	r3, #0
 8012992:	d10c      	bne.n	80129ae <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012994:	79fb      	ldrb	r3, [r7, #7]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d007      	beq.n	80129aa <find_volume+0x82>
 801299a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801299e:	f003 0304 	and.w	r3, r3, #4
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d001      	beq.n	80129aa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80129a6:	230a      	movs	r3, #10
 80129a8:	e23a      	b.n	8012e20 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80129aa:	2300      	movs	r3, #0
 80129ac:	e238      	b.n	8012e20 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80129ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b0:	2200      	movs	r2, #0
 80129b2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80129b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129b6:	b2da      	uxtb	r2, r3
 80129b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80129bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129be:	785b      	ldrb	r3, [r3, #1]
 80129c0:	4618      	mov	r0, r3
 80129c2:	f7fe fbb9 	bl	8011138 <disk_initialize>
 80129c6:	4603      	mov	r3, r0
 80129c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80129cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80129d0:	f003 0301 	and.w	r3, r3, #1
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d001      	beq.n	80129dc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80129d8:	2303      	movs	r3, #3
 80129da:	e221      	b.n	8012e20 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80129dc:	79fb      	ldrb	r3, [r7, #7]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d007      	beq.n	80129f2 <find_volume+0xca>
 80129e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80129e6:	f003 0304 	and.w	r3, r3, #4
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d001      	beq.n	80129f2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80129ee:	230a      	movs	r3, #10
 80129f0:	e216      	b.n	8012e20 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80129f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129f4:	7858      	ldrb	r0, [r3, #1]
 80129f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129f8:	330c      	adds	r3, #12
 80129fa:	461a      	mov	r2, r3
 80129fc:	2102      	movs	r1, #2
 80129fe:	f7fe fc01 	bl	8011204 <disk_ioctl>
 8012a02:	4603      	mov	r3, r0
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d001      	beq.n	8012a0c <find_volume+0xe4>
 8012a08:	2301      	movs	r3, #1
 8012a0a:	e209      	b.n	8012e20 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a0e:	899b      	ldrh	r3, [r3, #12]
 8012a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012a14:	d80d      	bhi.n	8012a32 <find_volume+0x10a>
 8012a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a18:	899b      	ldrh	r3, [r3, #12]
 8012a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012a1e:	d308      	bcc.n	8012a32 <find_volume+0x10a>
 8012a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a22:	899b      	ldrh	r3, [r3, #12]
 8012a24:	461a      	mov	r2, r3
 8012a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a28:	899b      	ldrh	r3, [r3, #12]
 8012a2a:	3b01      	subs	r3, #1
 8012a2c:	4013      	ands	r3, r2
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d001      	beq.n	8012a36 <find_volume+0x10e>
 8012a32:	2301      	movs	r3, #1
 8012a34:	e1f4      	b.n	8012e20 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012a36:	2300      	movs	r3, #0
 8012a38:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012a3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012a3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012a3e:	f7ff ff1d 	bl	801287c <check_fs>
 8012a42:	4603      	mov	r3, r0
 8012a44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012a48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a4c:	2b02      	cmp	r3, #2
 8012a4e:	d14b      	bne.n	8012ae8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012a50:	2300      	movs	r3, #0
 8012a52:	643b      	str	r3, [r7, #64]	; 0x40
 8012a54:	e01f      	b.n	8012a96 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a58:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a5e:	011b      	lsls	r3, r3, #4
 8012a60:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012a64:	4413      	add	r3, r2
 8012a66:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a6a:	3304      	adds	r3, #4
 8012a6c:	781b      	ldrb	r3, [r3, #0]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d006      	beq.n	8012a80 <find_volume+0x158>
 8012a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a74:	3308      	adds	r3, #8
 8012a76:	4618      	mov	r0, r3
 8012a78:	f7fe fbfa 	bl	8011270 <ld_dword>
 8012a7c:	4602      	mov	r2, r0
 8012a7e:	e000      	b.n	8012a82 <find_volume+0x15a>
 8012a80:	2200      	movs	r2, #0
 8012a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a84:	009b      	lsls	r3, r3, #2
 8012a86:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012a8a:	440b      	add	r3, r1
 8012a8c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a92:	3301      	adds	r3, #1
 8012a94:	643b      	str	r3, [r7, #64]	; 0x40
 8012a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a98:	2b03      	cmp	r3, #3
 8012a9a:	d9dc      	bls.n	8012a56 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d002      	beq.n	8012aac <find_volume+0x184>
 8012aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012aa8:	3b01      	subs	r3, #1
 8012aaa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012aae:	009b      	lsls	r3, r3, #2
 8012ab0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012ab4:	4413      	add	r3, r2
 8012ab6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012aba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d005      	beq.n	8012ace <find_volume+0x1a6>
 8012ac2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012ac4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012ac6:	f7ff fed9 	bl	801287c <check_fs>
 8012aca:	4603      	mov	r3, r0
 8012acc:	e000      	b.n	8012ad0 <find_volume+0x1a8>
 8012ace:	2303      	movs	r3, #3
 8012ad0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012ad4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ad8:	2b01      	cmp	r3, #1
 8012ada:	d905      	bls.n	8012ae8 <find_volume+0x1c0>
 8012adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ade:	3301      	adds	r3, #1
 8012ae0:	643b      	str	r3, [r7, #64]	; 0x40
 8012ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ae4:	2b03      	cmp	r3, #3
 8012ae6:	d9e1      	bls.n	8012aac <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012ae8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012aec:	2b04      	cmp	r3, #4
 8012aee:	d101      	bne.n	8012af4 <find_volume+0x1cc>
 8012af0:	2301      	movs	r3, #1
 8012af2:	e195      	b.n	8012e20 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012af4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012af8:	2b01      	cmp	r3, #1
 8012afa:	d901      	bls.n	8012b00 <find_volume+0x1d8>
 8012afc:	230d      	movs	r3, #13
 8012afe:	e18f      	b.n	8012e20 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b02:	3338      	adds	r3, #56	; 0x38
 8012b04:	330b      	adds	r3, #11
 8012b06:	4618      	mov	r0, r3
 8012b08:	f7fe fb9a 	bl	8011240 <ld_word>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	461a      	mov	r2, r3
 8012b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b12:	899b      	ldrh	r3, [r3, #12]
 8012b14:	429a      	cmp	r2, r3
 8012b16:	d001      	beq.n	8012b1c <find_volume+0x1f4>
 8012b18:	230d      	movs	r3, #13
 8012b1a:	e181      	b.n	8012e20 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b1e:	3338      	adds	r3, #56	; 0x38
 8012b20:	3316      	adds	r3, #22
 8012b22:	4618      	mov	r0, r3
 8012b24:	f7fe fb8c 	bl	8011240 <ld_word>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d106      	bne.n	8012b40 <find_volume+0x218>
 8012b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b34:	3338      	adds	r3, #56	; 0x38
 8012b36:	3324      	adds	r3, #36	; 0x24
 8012b38:	4618      	mov	r0, r3
 8012b3a:	f7fe fb99 	bl	8011270 <ld_dword>
 8012b3e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012b44:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b48:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b4e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b52:	789b      	ldrb	r3, [r3, #2]
 8012b54:	2b01      	cmp	r3, #1
 8012b56:	d005      	beq.n	8012b64 <find_volume+0x23c>
 8012b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b5a:	789b      	ldrb	r3, [r3, #2]
 8012b5c:	2b02      	cmp	r3, #2
 8012b5e:	d001      	beq.n	8012b64 <find_volume+0x23c>
 8012b60:	230d      	movs	r3, #13
 8012b62:	e15d      	b.n	8012e20 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b66:	789b      	ldrb	r3, [r3, #2]
 8012b68:	461a      	mov	r2, r3
 8012b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b6c:	fb02 f303 	mul.w	r3, r2, r3
 8012b70:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b78:	b29a      	uxth	r2, r3
 8012b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b7c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b80:	895b      	ldrh	r3, [r3, #10]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d008      	beq.n	8012b98 <find_volume+0x270>
 8012b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b88:	895b      	ldrh	r3, [r3, #10]
 8012b8a:	461a      	mov	r2, r3
 8012b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b8e:	895b      	ldrh	r3, [r3, #10]
 8012b90:	3b01      	subs	r3, #1
 8012b92:	4013      	ands	r3, r2
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d001      	beq.n	8012b9c <find_volume+0x274>
 8012b98:	230d      	movs	r3, #13
 8012b9a:	e141      	b.n	8012e20 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b9e:	3338      	adds	r3, #56	; 0x38
 8012ba0:	3311      	adds	r3, #17
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f7fe fb4c 	bl	8011240 <ld_word>
 8012ba8:	4603      	mov	r3, r0
 8012baa:	461a      	mov	r2, r3
 8012bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bb2:	891b      	ldrh	r3, [r3, #8]
 8012bb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012bb6:	8992      	ldrh	r2, [r2, #12]
 8012bb8:	0952      	lsrs	r2, r2, #5
 8012bba:	b292      	uxth	r2, r2
 8012bbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8012bc0:	fb02 f201 	mul.w	r2, r2, r1
 8012bc4:	1a9b      	subs	r3, r3, r2
 8012bc6:	b29b      	uxth	r3, r3
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d001      	beq.n	8012bd0 <find_volume+0x2a8>
 8012bcc:	230d      	movs	r3, #13
 8012bce:	e127      	b.n	8012e20 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bd2:	3338      	adds	r3, #56	; 0x38
 8012bd4:	3313      	adds	r3, #19
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f7fe fb32 	bl	8011240 <ld_word>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d106      	bne.n	8012bf4 <find_volume+0x2cc>
 8012be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012be8:	3338      	adds	r3, #56	; 0x38
 8012bea:	3320      	adds	r3, #32
 8012bec:	4618      	mov	r0, r3
 8012bee:	f7fe fb3f 	bl	8011270 <ld_dword>
 8012bf2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bf6:	3338      	adds	r3, #56	; 0x38
 8012bf8:	330e      	adds	r3, #14
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f7fe fb20 	bl	8011240 <ld_word>
 8012c00:	4603      	mov	r3, r0
 8012c02:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012c04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d104      	bne.n	8012c14 <find_volume+0x2ec>
 8012c0a:	230d      	movs	r3, #13
 8012c0c:	e108      	b.n	8012e20 <find_volume+0x4f8>
 8012c0e:	bf00      	nop
 8012c10:	2003d480 	.word	0x2003d480

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012c14:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c18:	4413      	add	r3, r2
 8012c1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c1c:	8911      	ldrh	r1, [r2, #8]
 8012c1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c20:	8992      	ldrh	r2, [r2, #12]
 8012c22:	0952      	lsrs	r2, r2, #5
 8012c24:	b292      	uxth	r2, r2
 8012c26:	fbb1 f2f2 	udiv	r2, r1, r2
 8012c2a:	b292      	uxth	r2, r2
 8012c2c:	4413      	add	r3, r2
 8012c2e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012c30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c34:	429a      	cmp	r2, r3
 8012c36:	d201      	bcs.n	8012c3c <find_volume+0x314>
 8012c38:	230d      	movs	r3, #13
 8012c3a:	e0f1      	b.n	8012e20 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012c3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c40:	1ad3      	subs	r3, r2, r3
 8012c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c44:	8952      	ldrh	r2, [r2, #10]
 8012c46:	fbb3 f3f2 	udiv	r3, r3, r2
 8012c4a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d101      	bne.n	8012c56 <find_volume+0x32e>
 8012c52:	230d      	movs	r3, #13
 8012c54:	e0e4      	b.n	8012e20 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012c56:	2303      	movs	r3, #3
 8012c58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c5e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012c62:	4293      	cmp	r3, r2
 8012c64:	d802      	bhi.n	8012c6c <find_volume+0x344>
 8012c66:	2302      	movs	r3, #2
 8012c68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c6e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012c72:	4293      	cmp	r3, r2
 8012c74:	d802      	bhi.n	8012c7c <find_volume+0x354>
 8012c76:	2301      	movs	r3, #1
 8012c78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c7e:	1c9a      	adds	r2, r3, #2
 8012c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c82:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012c88:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012c8a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c8e:	441a      	add	r2, r3
 8012c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c92:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8012c94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c98:	441a      	add	r2, r3
 8012c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c9c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8012c9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ca2:	2b03      	cmp	r3, #3
 8012ca4:	d11e      	bne.n	8012ce4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ca8:	3338      	adds	r3, #56	; 0x38
 8012caa:	332a      	adds	r3, #42	; 0x2a
 8012cac:	4618      	mov	r0, r3
 8012cae:	f7fe fac7 	bl	8011240 <ld_word>
 8012cb2:	4603      	mov	r3, r0
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d001      	beq.n	8012cbc <find_volume+0x394>
 8012cb8:	230d      	movs	r3, #13
 8012cba:	e0b1      	b.n	8012e20 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cbe:	891b      	ldrh	r3, [r3, #8]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d001      	beq.n	8012cc8 <find_volume+0x3a0>
 8012cc4:	230d      	movs	r3, #13
 8012cc6:	e0ab      	b.n	8012e20 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cca:	3338      	adds	r3, #56	; 0x38
 8012ccc:	332c      	adds	r3, #44	; 0x2c
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f7fe face 	bl	8011270 <ld_dword>
 8012cd4:	4602      	mov	r2, r0
 8012cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cdc:	69db      	ldr	r3, [r3, #28]
 8012cde:	009b      	lsls	r3, r3, #2
 8012ce0:	647b      	str	r3, [r7, #68]	; 0x44
 8012ce2:	e01f      	b.n	8012d24 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ce6:	891b      	ldrh	r3, [r3, #8]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d101      	bne.n	8012cf0 <find_volume+0x3c8>
 8012cec:	230d      	movs	r3, #13
 8012cee:	e097      	b.n	8012e20 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cf6:	441a      	add	r2, r3
 8012cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cfa:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012cfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d00:	2b02      	cmp	r3, #2
 8012d02:	d103      	bne.n	8012d0c <find_volume+0x3e4>
 8012d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d06:	69db      	ldr	r3, [r3, #28]
 8012d08:	005b      	lsls	r3, r3, #1
 8012d0a:	e00a      	b.n	8012d22 <find_volume+0x3fa>
 8012d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d0e:	69da      	ldr	r2, [r3, #28]
 8012d10:	4613      	mov	r3, r2
 8012d12:	005b      	lsls	r3, r3, #1
 8012d14:	4413      	add	r3, r2
 8012d16:	085a      	lsrs	r2, r3, #1
 8012d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d1a:	69db      	ldr	r3, [r3, #28]
 8012d1c:	f003 0301 	and.w	r3, r3, #1
 8012d20:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012d22:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d26:	6a1a      	ldr	r2, [r3, #32]
 8012d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d2a:	899b      	ldrh	r3, [r3, #12]
 8012d2c:	4619      	mov	r1, r3
 8012d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d30:	440b      	add	r3, r1
 8012d32:	3b01      	subs	r3, #1
 8012d34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012d36:	8989      	ldrh	r1, [r1, #12]
 8012d38:	fbb3 f3f1 	udiv	r3, r3, r1
 8012d3c:	429a      	cmp	r2, r3
 8012d3e:	d201      	bcs.n	8012d44 <find_volume+0x41c>
 8012d40:	230d      	movs	r3, #13
 8012d42:	e06d      	b.n	8012e20 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d46:	f04f 32ff 	mov.w	r2, #4294967295
 8012d4a:	615a      	str	r2, [r3, #20]
 8012d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d4e:	695a      	ldr	r2, [r3, #20]
 8012d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d52:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d56:	2280      	movs	r2, #128	; 0x80
 8012d58:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012d5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d5e:	2b03      	cmp	r3, #3
 8012d60:	d149      	bne.n	8012df6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d64:	3338      	adds	r3, #56	; 0x38
 8012d66:	3330      	adds	r3, #48	; 0x30
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f7fe fa69 	bl	8011240 <ld_word>
 8012d6e:	4603      	mov	r3, r0
 8012d70:	2b01      	cmp	r3, #1
 8012d72:	d140      	bne.n	8012df6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d76:	3301      	adds	r3, #1
 8012d78:	4619      	mov	r1, r3
 8012d7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012d7c:	f7fe fd10 	bl	80117a0 <move_window>
 8012d80:	4603      	mov	r3, r0
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d137      	bne.n	8012df6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d88:	2200      	movs	r2, #0
 8012d8a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d8e:	3338      	adds	r3, #56	; 0x38
 8012d90:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012d94:	4618      	mov	r0, r3
 8012d96:	f7fe fa53 	bl	8011240 <ld_word>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	461a      	mov	r2, r3
 8012d9e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012da2:	429a      	cmp	r2, r3
 8012da4:	d127      	bne.n	8012df6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da8:	3338      	adds	r3, #56	; 0x38
 8012daa:	4618      	mov	r0, r3
 8012dac:	f7fe fa60 	bl	8011270 <ld_dword>
 8012db0:	4603      	mov	r3, r0
 8012db2:	4a1d      	ldr	r2, [pc, #116]	; (8012e28 <find_volume+0x500>)
 8012db4:	4293      	cmp	r3, r2
 8012db6:	d11e      	bne.n	8012df6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dba:	3338      	adds	r3, #56	; 0x38
 8012dbc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f7fe fa55 	bl	8011270 <ld_dword>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	4a18      	ldr	r2, [pc, #96]	; (8012e2c <find_volume+0x504>)
 8012dca:	4293      	cmp	r3, r2
 8012dcc:	d113      	bne.n	8012df6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dd0:	3338      	adds	r3, #56	; 0x38
 8012dd2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	f7fe fa4a 	bl	8011270 <ld_dword>
 8012ddc:	4602      	mov	r2, r0
 8012dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012de0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012de4:	3338      	adds	r3, #56	; 0x38
 8012de6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012dea:	4618      	mov	r0, r3
 8012dec:	f7fe fa40 	bl	8011270 <ld_dword>
 8012df0:	4602      	mov	r2, r0
 8012df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012df4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012df8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012dfc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012dfe:	4b0c      	ldr	r3, [pc, #48]	; (8012e30 <find_volume+0x508>)
 8012e00:	881b      	ldrh	r3, [r3, #0]
 8012e02:	3301      	adds	r3, #1
 8012e04:	b29a      	uxth	r2, r3
 8012e06:	4b0a      	ldr	r3, [pc, #40]	; (8012e30 <find_volume+0x508>)
 8012e08:	801a      	strh	r2, [r3, #0]
 8012e0a:	4b09      	ldr	r3, [pc, #36]	; (8012e30 <find_volume+0x508>)
 8012e0c:	881a      	ldrh	r2, [r3, #0]
 8012e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e10:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8012e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e14:	2200      	movs	r2, #0
 8012e16:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012e18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012e1a:	f7fe fc59 	bl	80116d0 <clear_lock>
#endif
	return FR_OK;
 8012e1e:	2300      	movs	r3, #0
}
 8012e20:	4618      	mov	r0, r3
 8012e22:	3758      	adds	r7, #88	; 0x58
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}
 8012e28:	41615252 	.word	0x41615252
 8012e2c:	61417272 	.word	0x61417272
 8012e30:	2003d484 	.word	0x2003d484

08012e34 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b084      	sub	sp, #16
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
 8012e3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012e3e:	2309      	movs	r3, #9
 8012e40:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d01c      	beq.n	8012e82 <validate+0x4e>
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d018      	beq.n	8012e82 <validate+0x4e>
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	781b      	ldrb	r3, [r3, #0]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d013      	beq.n	8012e82 <validate+0x4e>
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	889a      	ldrh	r2, [r3, #4]
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	88db      	ldrh	r3, [r3, #6]
 8012e64:	429a      	cmp	r2, r3
 8012e66:	d10c      	bne.n	8012e82 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	785b      	ldrb	r3, [r3, #1]
 8012e6e:	4618      	mov	r0, r3
 8012e70:	f7fe f948 	bl	8011104 <disk_status>
 8012e74:	4603      	mov	r3, r0
 8012e76:	f003 0301 	and.w	r3, r3, #1
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d101      	bne.n	8012e82 <validate+0x4e>
			res = FR_OK;
 8012e7e:	2300      	movs	r3, #0
 8012e80:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012e82:	7bfb      	ldrb	r3, [r7, #15]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d102      	bne.n	8012e8e <validate+0x5a>
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	e000      	b.n	8012e90 <validate+0x5c>
 8012e8e:	2300      	movs	r3, #0
 8012e90:	683a      	ldr	r2, [r7, #0]
 8012e92:	6013      	str	r3, [r2, #0]
	return res;
 8012e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e96:	4618      	mov	r0, r3
 8012e98:	3710      	adds	r7, #16
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	bd80      	pop	{r7, pc}
	...

08012ea0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b088      	sub	sp, #32
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	60f8      	str	r0, [r7, #12]
 8012ea8:	60b9      	str	r1, [r7, #8]
 8012eaa:	4613      	mov	r3, r2
 8012eac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012eb2:	f107 0310 	add.w	r3, r7, #16
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f7ff fc9b 	bl	80127f2 <get_ldnumber>
 8012ebc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012ebe:	69fb      	ldr	r3, [r7, #28]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	da01      	bge.n	8012ec8 <f_mount+0x28>
 8012ec4:	230b      	movs	r3, #11
 8012ec6:	e02b      	b.n	8012f20 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012ec8:	4a17      	ldr	r2, [pc, #92]	; (8012f28 <f_mount+0x88>)
 8012eca:	69fb      	ldr	r3, [r7, #28]
 8012ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ed0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012ed2:	69bb      	ldr	r3, [r7, #24]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d005      	beq.n	8012ee4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012ed8:	69b8      	ldr	r0, [r7, #24]
 8012eda:	f7fe fbf9 	bl	80116d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012ede:	69bb      	ldr	r3, [r7, #24]
 8012ee0:	2200      	movs	r2, #0
 8012ee2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d002      	beq.n	8012ef0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	2200      	movs	r2, #0
 8012eee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012ef0:	68fa      	ldr	r2, [r7, #12]
 8012ef2:	490d      	ldr	r1, [pc, #52]	; (8012f28 <f_mount+0x88>)
 8012ef4:	69fb      	ldr	r3, [r7, #28]
 8012ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d002      	beq.n	8012f06 <f_mount+0x66>
 8012f00:	79fb      	ldrb	r3, [r7, #7]
 8012f02:	2b01      	cmp	r3, #1
 8012f04:	d001      	beq.n	8012f0a <f_mount+0x6a>
 8012f06:	2300      	movs	r3, #0
 8012f08:	e00a      	b.n	8012f20 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012f0a:	f107 010c 	add.w	r1, r7, #12
 8012f0e:	f107 0308 	add.w	r3, r7, #8
 8012f12:	2200      	movs	r2, #0
 8012f14:	4618      	mov	r0, r3
 8012f16:	f7ff fd07 	bl	8012928 <find_volume>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f20:	4618      	mov	r0, r3
 8012f22:	3720      	adds	r7, #32
 8012f24:	46bd      	mov	sp, r7
 8012f26:	bd80      	pop	{r7, pc}
 8012f28:	2003d480 	.word	0x2003d480

08012f2c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b098      	sub	sp, #96	; 0x60
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	60f8      	str	r0, [r7, #12]
 8012f34:	60b9      	str	r1, [r7, #8]
 8012f36:	4613      	mov	r3, r2
 8012f38:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d101      	bne.n	8012f44 <f_open+0x18>
 8012f40:	2309      	movs	r3, #9
 8012f42:	e1ba      	b.n	80132ba <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012f44:	79fb      	ldrb	r3, [r7, #7]
 8012f46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012f4a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012f4c:	79fa      	ldrb	r2, [r7, #7]
 8012f4e:	f107 0110 	add.w	r1, r7, #16
 8012f52:	f107 0308 	add.w	r3, r7, #8
 8012f56:	4618      	mov	r0, r3
 8012f58:	f7ff fce6 	bl	8012928 <find_volume>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012f62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	f040 819e 	bne.w	80132a8 <f_open+0x37c>
		dj.obj.fs = fs;
 8012f6c:	693b      	ldr	r3, [r7, #16]
 8012f6e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012f70:	68ba      	ldr	r2, [r7, #8]
 8012f72:	f107 0314 	add.w	r3, r7, #20
 8012f76:	4611      	mov	r1, r2
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f7ff fba5 	bl	80126c8 <follow_path>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012f84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d11a      	bne.n	8012fc2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012f8c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012f90:	b25b      	sxtb	r3, r3
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	da03      	bge.n	8012f9e <f_open+0x72>
				res = FR_INVALID_NAME;
 8012f96:	2306      	movs	r3, #6
 8012f98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012f9c:	e011      	b.n	8012fc2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012f9e:	79fb      	ldrb	r3, [r7, #7]
 8012fa0:	f023 0301 	bic.w	r3, r3, #1
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	bf14      	ite	ne
 8012fa8:	2301      	movne	r3, #1
 8012faa:	2300      	moveq	r3, #0
 8012fac:	b2db      	uxtb	r3, r3
 8012fae:	461a      	mov	r2, r3
 8012fb0:	f107 0314 	add.w	r3, r7, #20
 8012fb4:	4611      	mov	r1, r2
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f7fe fa42 	bl	8011440 <chk_lock>
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012fc2:	79fb      	ldrb	r3, [r7, #7]
 8012fc4:	f003 031c 	and.w	r3, r3, #28
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d07e      	beq.n	80130ca <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8012fcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d017      	beq.n	8013004 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012fd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012fd8:	2b04      	cmp	r3, #4
 8012fda:	d10e      	bne.n	8012ffa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012fdc:	f7fe fa8c 	bl	80114f8 <enq_lock>
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d006      	beq.n	8012ff4 <f_open+0xc8>
 8012fe6:	f107 0314 	add.w	r3, r7, #20
 8012fea:	4618      	mov	r0, r3
 8012fec:	f7ff fa51 	bl	8012492 <dir_register>
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	e000      	b.n	8012ff6 <f_open+0xca>
 8012ff4:	2312      	movs	r3, #18
 8012ff6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012ffa:	79fb      	ldrb	r3, [r7, #7]
 8012ffc:	f043 0308 	orr.w	r3, r3, #8
 8013000:	71fb      	strb	r3, [r7, #7]
 8013002:	e010      	b.n	8013026 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013004:	7ebb      	ldrb	r3, [r7, #26]
 8013006:	f003 0311 	and.w	r3, r3, #17
 801300a:	2b00      	cmp	r3, #0
 801300c:	d003      	beq.n	8013016 <f_open+0xea>
					res = FR_DENIED;
 801300e:	2307      	movs	r3, #7
 8013010:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013014:	e007      	b.n	8013026 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013016:	79fb      	ldrb	r3, [r7, #7]
 8013018:	f003 0304 	and.w	r3, r3, #4
 801301c:	2b00      	cmp	r3, #0
 801301e:	d002      	beq.n	8013026 <f_open+0xfa>
 8013020:	2308      	movs	r3, #8
 8013022:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013026:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801302a:	2b00      	cmp	r3, #0
 801302c:	d167      	bne.n	80130fe <f_open+0x1d2>
 801302e:	79fb      	ldrb	r3, [r7, #7]
 8013030:	f003 0308 	and.w	r3, r3, #8
 8013034:	2b00      	cmp	r3, #0
 8013036:	d062      	beq.n	80130fe <f_open+0x1d2>
				dw = GET_FATTIME();
 8013038:	4ba2      	ldr	r3, [pc, #648]	; (80132c4 <f_open+0x398>)
 801303a:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801303c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801303e:	330e      	adds	r3, #14
 8013040:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013042:	4618      	mov	r0, r3
 8013044:	f7fe f952 	bl	80112ec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801304a:	3316      	adds	r3, #22
 801304c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801304e:	4618      	mov	r0, r3
 8013050:	f7fe f94c 	bl	80112ec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013056:	330b      	adds	r3, #11
 8013058:	2220      	movs	r2, #32
 801305a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801305c:	693b      	ldr	r3, [r7, #16]
 801305e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013060:	4611      	mov	r1, r2
 8013062:	4618      	mov	r0, r3
 8013064:	f7ff f924 	bl	80122b0 <ld_clust>
 8013068:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801306a:	693b      	ldr	r3, [r7, #16]
 801306c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801306e:	2200      	movs	r2, #0
 8013070:	4618      	mov	r0, r3
 8013072:	f7ff f93c 	bl	80122ee <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013078:	331c      	adds	r3, #28
 801307a:	2100      	movs	r1, #0
 801307c:	4618      	mov	r0, r3
 801307e:	f7fe f935 	bl	80112ec <st_dword>
					fs->wflag = 1;
 8013082:	693b      	ldr	r3, [r7, #16]
 8013084:	2201      	movs	r2, #1
 8013086:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801308a:	2b00      	cmp	r3, #0
 801308c:	d037      	beq.n	80130fe <f_open+0x1d2>
						dw = fs->winsect;
 801308e:	693b      	ldr	r3, [r7, #16]
 8013090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013092:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013094:	f107 0314 	add.w	r3, r7, #20
 8013098:	2200      	movs	r2, #0
 801309a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801309c:	4618      	mov	r0, r3
 801309e:	f7fe fe2c 	bl	8011cfa <remove_chain>
 80130a2:	4603      	mov	r3, r0
 80130a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80130a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d126      	bne.n	80130fe <f_open+0x1d2>
							res = move_window(fs, dw);
 80130b0:	693b      	ldr	r3, [r7, #16]
 80130b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7fe fb73 	bl	80117a0 <move_window>
 80130ba:	4603      	mov	r3, r0
 80130bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80130c0:	693b      	ldr	r3, [r7, #16]
 80130c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80130c4:	3a01      	subs	r2, #1
 80130c6:	611a      	str	r2, [r3, #16]
 80130c8:	e019      	b.n	80130fe <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80130ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d115      	bne.n	80130fe <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80130d2:	7ebb      	ldrb	r3, [r7, #26]
 80130d4:	f003 0310 	and.w	r3, r3, #16
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d003      	beq.n	80130e4 <f_open+0x1b8>
					res = FR_NO_FILE;
 80130dc:	2304      	movs	r3, #4
 80130de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80130e2:	e00c      	b.n	80130fe <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80130e4:	79fb      	ldrb	r3, [r7, #7]
 80130e6:	f003 0302 	and.w	r3, r3, #2
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d007      	beq.n	80130fe <f_open+0x1d2>
 80130ee:	7ebb      	ldrb	r3, [r7, #26]
 80130f0:	f003 0301 	and.w	r3, r3, #1
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d002      	beq.n	80130fe <f_open+0x1d2>
						res = FR_DENIED;
 80130f8:	2307      	movs	r3, #7
 80130fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80130fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013102:	2b00      	cmp	r3, #0
 8013104:	d128      	bne.n	8013158 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013106:	79fb      	ldrb	r3, [r7, #7]
 8013108:	f003 0308 	and.w	r3, r3, #8
 801310c:	2b00      	cmp	r3, #0
 801310e:	d003      	beq.n	8013118 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8013110:	79fb      	ldrb	r3, [r7, #7]
 8013112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013116:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013118:	693b      	ldr	r3, [r7, #16]
 801311a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013120:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013126:	79fb      	ldrb	r3, [r7, #7]
 8013128:	f023 0301 	bic.w	r3, r3, #1
 801312c:	2b00      	cmp	r3, #0
 801312e:	bf14      	ite	ne
 8013130:	2301      	movne	r3, #1
 8013132:	2300      	moveq	r3, #0
 8013134:	b2db      	uxtb	r3, r3
 8013136:	461a      	mov	r2, r3
 8013138:	f107 0314 	add.w	r3, r7, #20
 801313c:	4611      	mov	r1, r2
 801313e:	4618      	mov	r0, r3
 8013140:	f7fe f9fc 	bl	801153c <inc_lock>
 8013144:	4602      	mov	r2, r0
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	691b      	ldr	r3, [r3, #16]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d102      	bne.n	8013158 <f_open+0x22c>
 8013152:	2302      	movs	r3, #2
 8013154:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013158:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801315c:	2b00      	cmp	r3, #0
 801315e:	f040 80a3 	bne.w	80132a8 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013162:	693b      	ldr	r3, [r7, #16]
 8013164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013166:	4611      	mov	r1, r2
 8013168:	4618      	mov	r0, r3
 801316a:	f7ff f8a1 	bl	80122b0 <ld_clust>
 801316e:	4602      	mov	r2, r0
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013176:	331c      	adds	r3, #28
 8013178:	4618      	mov	r0, r3
 801317a:	f7fe f879 	bl	8011270 <ld_dword>
 801317e:	4602      	mov	r2, r0
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	2200      	movs	r2, #0
 8013188:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801318a:	693a      	ldr	r2, [r7, #16]
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013190:	693b      	ldr	r3, [r7, #16]
 8013192:	88da      	ldrh	r2, [r3, #6]
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	79fa      	ldrb	r2, [r7, #7]
 801319c:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	2200      	movs	r2, #0
 80131a2:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	2200      	movs	r2, #0
 80131a8:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	2200      	movs	r2, #0
 80131ae:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	3330      	adds	r3, #48	; 0x30
 80131b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80131b8:	2100      	movs	r1, #0
 80131ba:	4618      	mov	r0, r3
 80131bc:	f7fe f8e3 	bl	8011386 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80131c0:	79fb      	ldrb	r3, [r7, #7]
 80131c2:	f003 0320 	and.w	r3, r3, #32
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d06e      	beq.n	80132a8 <f_open+0x37c>
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	68db      	ldr	r3, [r3, #12]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d06a      	beq.n	80132a8 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	68da      	ldr	r2, [r3, #12]
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80131da:	693b      	ldr	r3, [r7, #16]
 80131dc:	895b      	ldrh	r3, [r3, #10]
 80131de:	461a      	mov	r2, r3
 80131e0:	693b      	ldr	r3, [r7, #16]
 80131e2:	899b      	ldrh	r3, [r3, #12]
 80131e4:	fb03 f302 	mul.w	r3, r3, r2
 80131e8:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	689b      	ldr	r3, [r3, #8]
 80131ee:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	68db      	ldr	r3, [r3, #12]
 80131f4:	657b      	str	r3, [r7, #84]	; 0x54
 80131f6:	e016      	b.n	8013226 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80131fc:	4618      	mov	r0, r3
 80131fe:	f7fe fb8c 	bl	801191a <get_fat>
 8013202:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013204:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013206:	2b01      	cmp	r3, #1
 8013208:	d802      	bhi.n	8013210 <f_open+0x2e4>
 801320a:	2302      	movs	r3, #2
 801320c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013210:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013216:	d102      	bne.n	801321e <f_open+0x2f2>
 8013218:	2301      	movs	r3, #1
 801321a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801321e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013222:	1ad3      	subs	r3, r2, r3
 8013224:	657b      	str	r3, [r7, #84]	; 0x54
 8013226:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801322a:	2b00      	cmp	r3, #0
 801322c:	d103      	bne.n	8013236 <f_open+0x30a>
 801322e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013232:	429a      	cmp	r2, r3
 8013234:	d8e0      	bhi.n	80131f8 <f_open+0x2cc>
				}
				fp->clust = clst;
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801323a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801323c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013240:	2b00      	cmp	r3, #0
 8013242:	d131      	bne.n	80132a8 <f_open+0x37c>
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	899b      	ldrh	r3, [r3, #12]
 8013248:	461a      	mov	r2, r3
 801324a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801324c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013250:	fb02 f201 	mul.w	r2, r2, r1
 8013254:	1a9b      	subs	r3, r3, r2
 8013256:	2b00      	cmp	r3, #0
 8013258:	d026      	beq.n	80132a8 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801325a:	693b      	ldr	r3, [r7, #16]
 801325c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801325e:	4618      	mov	r0, r3
 8013260:	f7fe fb3c 	bl	80118dc <clust2sect>
 8013264:	6478      	str	r0, [r7, #68]	; 0x44
 8013266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013268:	2b00      	cmp	r3, #0
 801326a:	d103      	bne.n	8013274 <f_open+0x348>
						res = FR_INT_ERR;
 801326c:	2302      	movs	r3, #2
 801326e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013272:	e019      	b.n	80132a8 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013274:	693b      	ldr	r3, [r7, #16]
 8013276:	899b      	ldrh	r3, [r3, #12]
 8013278:	461a      	mov	r2, r3
 801327a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801327c:	fbb3 f2f2 	udiv	r2, r3, r2
 8013280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013282:	441a      	add	r2, r3
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013288:	693b      	ldr	r3, [r7, #16]
 801328a:	7858      	ldrb	r0, [r3, #1]
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	6a1a      	ldr	r2, [r3, #32]
 8013296:	2301      	movs	r3, #1
 8013298:	f7fd ff74 	bl	8011184 <disk_read>
 801329c:	4603      	mov	r3, r0
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d002      	beq.n	80132a8 <f_open+0x37c>
 80132a2:	2301      	movs	r3, #1
 80132a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80132a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d002      	beq.n	80132b6 <f_open+0x38a>
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	2200      	movs	r2, #0
 80132b4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80132b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80132ba:	4618      	mov	r0, r3
 80132bc:	3760      	adds	r7, #96	; 0x60
 80132be:	46bd      	mov	sp, r7
 80132c0:	bd80      	pop	{r7, pc}
 80132c2:	bf00      	nop
 80132c4:	274a0000 	.word	0x274a0000

080132c8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b08e      	sub	sp, #56	; 0x38
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	60f8      	str	r0, [r7, #12]
 80132d0:	60b9      	str	r1, [r7, #8]
 80132d2:	607a      	str	r2, [r7, #4]
 80132d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80132da:	683b      	ldr	r3, [r7, #0]
 80132dc:	2200      	movs	r2, #0
 80132de:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	f107 0214 	add.w	r2, r7, #20
 80132e6:	4611      	mov	r1, r2
 80132e8:	4618      	mov	r0, r3
 80132ea:	f7ff fda3 	bl	8012e34 <validate>
 80132ee:	4603      	mov	r3, r0
 80132f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80132f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d107      	bne.n	801330c <f_read+0x44>
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	7d5b      	ldrb	r3, [r3, #21]
 8013300:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013304:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013308:	2b00      	cmp	r3, #0
 801330a:	d002      	beq.n	8013312 <f_read+0x4a>
 801330c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013310:	e135      	b.n	801357e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	7d1b      	ldrb	r3, [r3, #20]
 8013316:	f003 0301 	and.w	r3, r3, #1
 801331a:	2b00      	cmp	r3, #0
 801331c:	d101      	bne.n	8013322 <f_read+0x5a>
 801331e:	2307      	movs	r3, #7
 8013320:	e12d      	b.n	801357e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	68da      	ldr	r2, [r3, #12]
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	699b      	ldr	r3, [r3, #24]
 801332a:	1ad3      	subs	r3, r2, r3
 801332c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801332e:	687a      	ldr	r2, [r7, #4]
 8013330:	6a3b      	ldr	r3, [r7, #32]
 8013332:	429a      	cmp	r2, r3
 8013334:	f240 811e 	bls.w	8013574 <f_read+0x2ac>
 8013338:	6a3b      	ldr	r3, [r7, #32]
 801333a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801333c:	e11a      	b.n	8013574 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	699b      	ldr	r3, [r3, #24]
 8013342:	697a      	ldr	r2, [r7, #20]
 8013344:	8992      	ldrh	r2, [r2, #12]
 8013346:	fbb3 f1f2 	udiv	r1, r3, r2
 801334a:	fb02 f201 	mul.w	r2, r2, r1
 801334e:	1a9b      	subs	r3, r3, r2
 8013350:	2b00      	cmp	r3, #0
 8013352:	f040 80d5 	bne.w	8013500 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	699b      	ldr	r3, [r3, #24]
 801335a:	697a      	ldr	r2, [r7, #20]
 801335c:	8992      	ldrh	r2, [r2, #12]
 801335e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013362:	697a      	ldr	r2, [r7, #20]
 8013364:	8952      	ldrh	r2, [r2, #10]
 8013366:	3a01      	subs	r2, #1
 8013368:	4013      	ands	r3, r2
 801336a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801336c:	69fb      	ldr	r3, [r7, #28]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d12f      	bne.n	80133d2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	699b      	ldr	r3, [r3, #24]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d103      	bne.n	8013382 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	689b      	ldr	r3, [r3, #8]
 801337e:	633b      	str	r3, [r7, #48]	; 0x30
 8013380:	e013      	b.n	80133aa <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013386:	2b00      	cmp	r3, #0
 8013388:	d007      	beq.n	801339a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	699b      	ldr	r3, [r3, #24]
 801338e:	4619      	mov	r1, r3
 8013390:	68f8      	ldr	r0, [r7, #12]
 8013392:	f7fe fdaf 	bl	8011ef4 <clmt_clust>
 8013396:	6338      	str	r0, [r7, #48]	; 0x30
 8013398:	e007      	b.n	80133aa <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801339a:	68fa      	ldr	r2, [r7, #12]
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	69db      	ldr	r3, [r3, #28]
 80133a0:	4619      	mov	r1, r3
 80133a2:	4610      	mov	r0, r2
 80133a4:	f7fe fab9 	bl	801191a <get_fat>
 80133a8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80133aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ac:	2b01      	cmp	r3, #1
 80133ae:	d804      	bhi.n	80133ba <f_read+0xf2>
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	2202      	movs	r2, #2
 80133b4:	755a      	strb	r2, [r3, #21]
 80133b6:	2302      	movs	r3, #2
 80133b8:	e0e1      	b.n	801357e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80133ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133c0:	d104      	bne.n	80133cc <f_read+0x104>
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	2201      	movs	r2, #1
 80133c6:	755a      	strb	r2, [r3, #21]
 80133c8:	2301      	movs	r3, #1
 80133ca:	e0d8      	b.n	801357e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133d0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80133d2:	697a      	ldr	r2, [r7, #20]
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	69db      	ldr	r3, [r3, #28]
 80133d8:	4619      	mov	r1, r3
 80133da:	4610      	mov	r0, r2
 80133dc:	f7fe fa7e 	bl	80118dc <clust2sect>
 80133e0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80133e2:	69bb      	ldr	r3, [r7, #24]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d104      	bne.n	80133f2 <f_read+0x12a>
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	2202      	movs	r2, #2
 80133ec:	755a      	strb	r2, [r3, #21]
 80133ee:	2302      	movs	r3, #2
 80133f0:	e0c5      	b.n	801357e <f_read+0x2b6>
			sect += csect;
 80133f2:	69ba      	ldr	r2, [r7, #24]
 80133f4:	69fb      	ldr	r3, [r7, #28]
 80133f6:	4413      	add	r3, r2
 80133f8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80133fa:	697b      	ldr	r3, [r7, #20]
 80133fc:	899b      	ldrh	r3, [r3, #12]
 80133fe:	461a      	mov	r2, r3
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	fbb3 f3f2 	udiv	r3, r3, r2
 8013406:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801340a:	2b00      	cmp	r3, #0
 801340c:	d041      	beq.n	8013492 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801340e:	69fa      	ldr	r2, [r7, #28]
 8013410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013412:	4413      	add	r3, r2
 8013414:	697a      	ldr	r2, [r7, #20]
 8013416:	8952      	ldrh	r2, [r2, #10]
 8013418:	4293      	cmp	r3, r2
 801341a:	d905      	bls.n	8013428 <f_read+0x160>
					cc = fs->csize - csect;
 801341c:	697b      	ldr	r3, [r7, #20]
 801341e:	895b      	ldrh	r3, [r3, #10]
 8013420:	461a      	mov	r2, r3
 8013422:	69fb      	ldr	r3, [r7, #28]
 8013424:	1ad3      	subs	r3, r2, r3
 8013426:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013428:	697b      	ldr	r3, [r7, #20]
 801342a:	7858      	ldrb	r0, [r3, #1]
 801342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801342e:	69ba      	ldr	r2, [r7, #24]
 8013430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013432:	f7fd fea7 	bl	8011184 <disk_read>
 8013436:	4603      	mov	r3, r0
 8013438:	2b00      	cmp	r3, #0
 801343a:	d004      	beq.n	8013446 <f_read+0x17e>
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	2201      	movs	r2, #1
 8013440:	755a      	strb	r2, [r3, #21]
 8013442:	2301      	movs	r3, #1
 8013444:	e09b      	b.n	801357e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	7d1b      	ldrb	r3, [r3, #20]
 801344a:	b25b      	sxtb	r3, r3
 801344c:	2b00      	cmp	r3, #0
 801344e:	da18      	bge.n	8013482 <f_read+0x1ba>
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	6a1a      	ldr	r2, [r3, #32]
 8013454:	69bb      	ldr	r3, [r7, #24]
 8013456:	1ad3      	subs	r3, r2, r3
 8013458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801345a:	429a      	cmp	r2, r3
 801345c:	d911      	bls.n	8013482 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	6a1a      	ldr	r2, [r3, #32]
 8013462:	69bb      	ldr	r3, [r7, #24]
 8013464:	1ad3      	subs	r3, r2, r3
 8013466:	697a      	ldr	r2, [r7, #20]
 8013468:	8992      	ldrh	r2, [r2, #12]
 801346a:	fb02 f303 	mul.w	r3, r2, r3
 801346e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013470:	18d0      	adds	r0, r2, r3
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013478:	697b      	ldr	r3, [r7, #20]
 801347a:	899b      	ldrh	r3, [r3, #12]
 801347c:	461a      	mov	r2, r3
 801347e:	f7fd ff61 	bl	8011344 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013482:	697b      	ldr	r3, [r7, #20]
 8013484:	899b      	ldrh	r3, [r3, #12]
 8013486:	461a      	mov	r2, r3
 8013488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801348a:	fb02 f303 	mul.w	r3, r2, r3
 801348e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8013490:	e05c      	b.n	801354c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	6a1b      	ldr	r3, [r3, #32]
 8013496:	69ba      	ldr	r2, [r7, #24]
 8013498:	429a      	cmp	r2, r3
 801349a:	d02e      	beq.n	80134fa <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	7d1b      	ldrb	r3, [r3, #20]
 80134a0:	b25b      	sxtb	r3, r3
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	da18      	bge.n	80134d8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80134a6:	697b      	ldr	r3, [r7, #20]
 80134a8:	7858      	ldrb	r0, [r3, #1]
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	6a1a      	ldr	r2, [r3, #32]
 80134b4:	2301      	movs	r3, #1
 80134b6:	f7fd fe85 	bl	80111c4 <disk_write>
 80134ba:	4603      	mov	r3, r0
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d004      	beq.n	80134ca <f_read+0x202>
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	2201      	movs	r2, #1
 80134c4:	755a      	strb	r2, [r3, #21]
 80134c6:	2301      	movs	r3, #1
 80134c8:	e059      	b.n	801357e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	7d1b      	ldrb	r3, [r3, #20]
 80134ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80134d2:	b2da      	uxtb	r2, r3
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80134d8:	697b      	ldr	r3, [r7, #20]
 80134da:	7858      	ldrb	r0, [r3, #1]
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80134e2:	2301      	movs	r3, #1
 80134e4:	69ba      	ldr	r2, [r7, #24]
 80134e6:	f7fd fe4d 	bl	8011184 <disk_read>
 80134ea:	4603      	mov	r3, r0
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d004      	beq.n	80134fa <f_read+0x232>
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	2201      	movs	r2, #1
 80134f4:	755a      	strb	r2, [r3, #21]
 80134f6:	2301      	movs	r3, #1
 80134f8:	e041      	b.n	801357e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	69ba      	ldr	r2, [r7, #24]
 80134fe:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013500:	697b      	ldr	r3, [r7, #20]
 8013502:	899b      	ldrh	r3, [r3, #12]
 8013504:	4618      	mov	r0, r3
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	699b      	ldr	r3, [r3, #24]
 801350a:	697a      	ldr	r2, [r7, #20]
 801350c:	8992      	ldrh	r2, [r2, #12]
 801350e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013512:	fb02 f201 	mul.w	r2, r2, r1
 8013516:	1a9b      	subs	r3, r3, r2
 8013518:	1ac3      	subs	r3, r0, r3
 801351a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801351c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	429a      	cmp	r2, r3
 8013522:	d901      	bls.n	8013528 <f_read+0x260>
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	699b      	ldr	r3, [r3, #24]
 8013532:	697a      	ldr	r2, [r7, #20]
 8013534:	8992      	ldrh	r2, [r2, #12]
 8013536:	fbb3 f0f2 	udiv	r0, r3, r2
 801353a:	fb02 f200 	mul.w	r2, r2, r0
 801353e:	1a9b      	subs	r3, r3, r2
 8013540:	440b      	add	r3, r1
 8013542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013544:	4619      	mov	r1, r3
 8013546:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013548:	f7fd fefc 	bl	8011344 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801354c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801354e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013550:	4413      	add	r3, r2
 8013552:	627b      	str	r3, [r7, #36]	; 0x24
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	699a      	ldr	r2, [r3, #24]
 8013558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801355a:	441a      	add	r2, r3
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	619a      	str	r2, [r3, #24]
 8013560:	683b      	ldr	r3, [r7, #0]
 8013562:	681a      	ldr	r2, [r3, #0]
 8013564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013566:	441a      	add	r2, r3
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	601a      	str	r2, [r3, #0]
 801356c:	687a      	ldr	r2, [r7, #4]
 801356e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013570:	1ad3      	subs	r3, r2, r3
 8013572:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	2b00      	cmp	r3, #0
 8013578:	f47f aee1 	bne.w	801333e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801357c:	2300      	movs	r3, #0
}
 801357e:	4618      	mov	r0, r3
 8013580:	3738      	adds	r7, #56	; 0x38
 8013582:	46bd      	mov	sp, r7
 8013584:	bd80      	pop	{r7, pc}

08013586 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013586:	b580      	push	{r7, lr}
 8013588:	b08c      	sub	sp, #48	; 0x30
 801358a:	af00      	add	r7, sp, #0
 801358c:	60f8      	str	r0, [r7, #12]
 801358e:	60b9      	str	r1, [r7, #8]
 8013590:	607a      	str	r2, [r7, #4]
 8013592:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013598:	683b      	ldr	r3, [r7, #0]
 801359a:	2200      	movs	r2, #0
 801359c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	f107 0210 	add.w	r2, r7, #16
 80135a4:	4611      	mov	r1, r2
 80135a6:	4618      	mov	r0, r3
 80135a8:	f7ff fc44 	bl	8012e34 <validate>
 80135ac:	4603      	mov	r3, r0
 80135ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80135b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d107      	bne.n	80135ca <f_write+0x44>
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	7d5b      	ldrb	r3, [r3, #21]
 80135be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80135c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d002      	beq.n	80135d0 <f_write+0x4a>
 80135ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80135ce:	e16a      	b.n	80138a6 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	7d1b      	ldrb	r3, [r3, #20]
 80135d4:	f003 0302 	and.w	r3, r3, #2
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d101      	bne.n	80135e0 <f_write+0x5a>
 80135dc:	2307      	movs	r3, #7
 80135de:	e162      	b.n	80138a6 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	699a      	ldr	r2, [r3, #24]
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	441a      	add	r2, r3
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	699b      	ldr	r3, [r3, #24]
 80135ec:	429a      	cmp	r2, r3
 80135ee:	f080 814c 	bcs.w	801388a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	699b      	ldr	r3, [r3, #24]
 80135f6:	43db      	mvns	r3, r3
 80135f8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80135fa:	e146      	b.n	801388a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	699b      	ldr	r3, [r3, #24]
 8013600:	693a      	ldr	r2, [r7, #16]
 8013602:	8992      	ldrh	r2, [r2, #12]
 8013604:	fbb3 f1f2 	udiv	r1, r3, r2
 8013608:	fb02 f201 	mul.w	r2, r2, r1
 801360c:	1a9b      	subs	r3, r3, r2
 801360e:	2b00      	cmp	r3, #0
 8013610:	f040 80f1 	bne.w	80137f6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	699b      	ldr	r3, [r3, #24]
 8013618:	693a      	ldr	r2, [r7, #16]
 801361a:	8992      	ldrh	r2, [r2, #12]
 801361c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013620:	693a      	ldr	r2, [r7, #16]
 8013622:	8952      	ldrh	r2, [r2, #10]
 8013624:	3a01      	subs	r2, #1
 8013626:	4013      	ands	r3, r2
 8013628:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801362a:	69bb      	ldr	r3, [r7, #24]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d143      	bne.n	80136b8 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	699b      	ldr	r3, [r3, #24]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d10c      	bne.n	8013652 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	689b      	ldr	r3, [r3, #8]
 801363c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801363e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013640:	2b00      	cmp	r3, #0
 8013642:	d11a      	bne.n	801367a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	2100      	movs	r1, #0
 8013648:	4618      	mov	r0, r3
 801364a:	f7fe fbbb 	bl	8011dc4 <create_chain>
 801364e:	62b8      	str	r0, [r7, #40]	; 0x28
 8013650:	e013      	b.n	801367a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013656:	2b00      	cmp	r3, #0
 8013658:	d007      	beq.n	801366a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	699b      	ldr	r3, [r3, #24]
 801365e:	4619      	mov	r1, r3
 8013660:	68f8      	ldr	r0, [r7, #12]
 8013662:	f7fe fc47 	bl	8011ef4 <clmt_clust>
 8013666:	62b8      	str	r0, [r7, #40]	; 0x28
 8013668:	e007      	b.n	801367a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801366a:	68fa      	ldr	r2, [r7, #12]
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	69db      	ldr	r3, [r3, #28]
 8013670:	4619      	mov	r1, r3
 8013672:	4610      	mov	r0, r2
 8013674:	f7fe fba6 	bl	8011dc4 <create_chain>
 8013678:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801367c:	2b00      	cmp	r3, #0
 801367e:	f000 8109 	beq.w	8013894 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013684:	2b01      	cmp	r3, #1
 8013686:	d104      	bne.n	8013692 <f_write+0x10c>
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	2202      	movs	r2, #2
 801368c:	755a      	strb	r2, [r3, #21]
 801368e:	2302      	movs	r3, #2
 8013690:	e109      	b.n	80138a6 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013698:	d104      	bne.n	80136a4 <f_write+0x11e>
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	2201      	movs	r2, #1
 801369e:	755a      	strb	r2, [r3, #21]
 80136a0:	2301      	movs	r3, #1
 80136a2:	e100      	b.n	80138a6 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136a8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	689b      	ldr	r3, [r3, #8]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d102      	bne.n	80136b8 <f_write+0x132>
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136b6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	7d1b      	ldrb	r3, [r3, #20]
 80136bc:	b25b      	sxtb	r3, r3
 80136be:	2b00      	cmp	r3, #0
 80136c0:	da18      	bge.n	80136f4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80136c2:	693b      	ldr	r3, [r7, #16]
 80136c4:	7858      	ldrb	r0, [r3, #1]
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	6a1a      	ldr	r2, [r3, #32]
 80136d0:	2301      	movs	r3, #1
 80136d2:	f7fd fd77 	bl	80111c4 <disk_write>
 80136d6:	4603      	mov	r3, r0
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d004      	beq.n	80136e6 <f_write+0x160>
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	2201      	movs	r2, #1
 80136e0:	755a      	strb	r2, [r3, #21]
 80136e2:	2301      	movs	r3, #1
 80136e4:	e0df      	b.n	80138a6 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	7d1b      	ldrb	r3, [r3, #20]
 80136ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80136ee:	b2da      	uxtb	r2, r3
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80136f4:	693a      	ldr	r2, [r7, #16]
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	69db      	ldr	r3, [r3, #28]
 80136fa:	4619      	mov	r1, r3
 80136fc:	4610      	mov	r0, r2
 80136fe:	f7fe f8ed 	bl	80118dc <clust2sect>
 8013702:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013704:	697b      	ldr	r3, [r7, #20]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d104      	bne.n	8013714 <f_write+0x18e>
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	2202      	movs	r2, #2
 801370e:	755a      	strb	r2, [r3, #21]
 8013710:	2302      	movs	r3, #2
 8013712:	e0c8      	b.n	80138a6 <f_write+0x320>
			sect += csect;
 8013714:	697a      	ldr	r2, [r7, #20]
 8013716:	69bb      	ldr	r3, [r7, #24]
 8013718:	4413      	add	r3, r2
 801371a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801371c:	693b      	ldr	r3, [r7, #16]
 801371e:	899b      	ldrh	r3, [r3, #12]
 8013720:	461a      	mov	r2, r3
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	fbb3 f3f2 	udiv	r3, r3, r2
 8013728:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801372a:	6a3b      	ldr	r3, [r7, #32]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d043      	beq.n	80137b8 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013730:	69ba      	ldr	r2, [r7, #24]
 8013732:	6a3b      	ldr	r3, [r7, #32]
 8013734:	4413      	add	r3, r2
 8013736:	693a      	ldr	r2, [r7, #16]
 8013738:	8952      	ldrh	r2, [r2, #10]
 801373a:	4293      	cmp	r3, r2
 801373c:	d905      	bls.n	801374a <f_write+0x1c4>
					cc = fs->csize - csect;
 801373e:	693b      	ldr	r3, [r7, #16]
 8013740:	895b      	ldrh	r3, [r3, #10]
 8013742:	461a      	mov	r2, r3
 8013744:	69bb      	ldr	r3, [r7, #24]
 8013746:	1ad3      	subs	r3, r2, r3
 8013748:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801374a:	693b      	ldr	r3, [r7, #16]
 801374c:	7858      	ldrb	r0, [r3, #1]
 801374e:	6a3b      	ldr	r3, [r7, #32]
 8013750:	697a      	ldr	r2, [r7, #20]
 8013752:	69f9      	ldr	r1, [r7, #28]
 8013754:	f7fd fd36 	bl	80111c4 <disk_write>
 8013758:	4603      	mov	r3, r0
 801375a:	2b00      	cmp	r3, #0
 801375c:	d004      	beq.n	8013768 <f_write+0x1e2>
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	2201      	movs	r2, #1
 8013762:	755a      	strb	r2, [r3, #21]
 8013764:	2301      	movs	r3, #1
 8013766:	e09e      	b.n	80138a6 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	6a1a      	ldr	r2, [r3, #32]
 801376c:	697b      	ldr	r3, [r7, #20]
 801376e:	1ad3      	subs	r3, r2, r3
 8013770:	6a3a      	ldr	r2, [r7, #32]
 8013772:	429a      	cmp	r2, r3
 8013774:	d918      	bls.n	80137a8 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	6a1a      	ldr	r2, [r3, #32]
 8013780:	697b      	ldr	r3, [r7, #20]
 8013782:	1ad3      	subs	r3, r2, r3
 8013784:	693a      	ldr	r2, [r7, #16]
 8013786:	8992      	ldrh	r2, [r2, #12]
 8013788:	fb02 f303 	mul.w	r3, r2, r3
 801378c:	69fa      	ldr	r2, [r7, #28]
 801378e:	18d1      	adds	r1, r2, r3
 8013790:	693b      	ldr	r3, [r7, #16]
 8013792:	899b      	ldrh	r3, [r3, #12]
 8013794:	461a      	mov	r2, r3
 8013796:	f7fd fdd5 	bl	8011344 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	7d1b      	ldrb	r3, [r3, #20]
 801379e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80137a2:	b2da      	uxtb	r2, r3
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80137a8:	693b      	ldr	r3, [r7, #16]
 80137aa:	899b      	ldrh	r3, [r3, #12]
 80137ac:	461a      	mov	r2, r3
 80137ae:	6a3b      	ldr	r3, [r7, #32]
 80137b0:	fb02 f303 	mul.w	r3, r2, r3
 80137b4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80137b6:	e04b      	b.n	8013850 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	6a1b      	ldr	r3, [r3, #32]
 80137bc:	697a      	ldr	r2, [r7, #20]
 80137be:	429a      	cmp	r2, r3
 80137c0:	d016      	beq.n	80137f0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	699a      	ldr	r2, [r3, #24]
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80137ca:	429a      	cmp	r2, r3
 80137cc:	d210      	bcs.n	80137f0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80137ce:	693b      	ldr	r3, [r7, #16]
 80137d0:	7858      	ldrb	r0, [r3, #1]
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80137d8:	2301      	movs	r3, #1
 80137da:	697a      	ldr	r2, [r7, #20]
 80137dc:	f7fd fcd2 	bl	8011184 <disk_read>
 80137e0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d004      	beq.n	80137f0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	2201      	movs	r2, #1
 80137ea:	755a      	strb	r2, [r3, #21]
 80137ec:	2301      	movs	r3, #1
 80137ee:	e05a      	b.n	80138a6 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	697a      	ldr	r2, [r7, #20]
 80137f4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80137f6:	693b      	ldr	r3, [r7, #16]
 80137f8:	899b      	ldrh	r3, [r3, #12]
 80137fa:	4618      	mov	r0, r3
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	699b      	ldr	r3, [r3, #24]
 8013800:	693a      	ldr	r2, [r7, #16]
 8013802:	8992      	ldrh	r2, [r2, #12]
 8013804:	fbb3 f1f2 	udiv	r1, r3, r2
 8013808:	fb02 f201 	mul.w	r2, r2, r1
 801380c:	1a9b      	subs	r3, r3, r2
 801380e:	1ac3      	subs	r3, r0, r3
 8013810:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	429a      	cmp	r2, r3
 8013818:	d901      	bls.n	801381e <f_write+0x298>
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	699b      	ldr	r3, [r3, #24]
 8013828:	693a      	ldr	r2, [r7, #16]
 801382a:	8992      	ldrh	r2, [r2, #12]
 801382c:	fbb3 f0f2 	udiv	r0, r3, r2
 8013830:	fb02 f200 	mul.w	r2, r2, r0
 8013834:	1a9b      	subs	r3, r3, r2
 8013836:	440b      	add	r3, r1
 8013838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801383a:	69f9      	ldr	r1, [r7, #28]
 801383c:	4618      	mov	r0, r3
 801383e:	f7fd fd81 	bl	8011344 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	7d1b      	ldrb	r3, [r3, #20]
 8013846:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801384a:	b2da      	uxtb	r2, r3
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013850:	69fa      	ldr	r2, [r7, #28]
 8013852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013854:	4413      	add	r3, r2
 8013856:	61fb      	str	r3, [r7, #28]
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	699a      	ldr	r2, [r3, #24]
 801385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801385e:	441a      	add	r2, r3
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	619a      	str	r2, [r3, #24]
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	68da      	ldr	r2, [r3, #12]
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	699b      	ldr	r3, [r3, #24]
 801386c:	429a      	cmp	r2, r3
 801386e:	bf38      	it	cc
 8013870:	461a      	movcc	r2, r3
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	60da      	str	r2, [r3, #12]
 8013876:	683b      	ldr	r3, [r7, #0]
 8013878:	681a      	ldr	r2, [r3, #0]
 801387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801387c:	441a      	add	r2, r3
 801387e:	683b      	ldr	r3, [r7, #0]
 8013880:	601a      	str	r2, [r3, #0]
 8013882:	687a      	ldr	r2, [r7, #4]
 8013884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013886:	1ad3      	subs	r3, r2, r3
 8013888:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	2b00      	cmp	r3, #0
 801388e:	f47f aeb5 	bne.w	80135fc <f_write+0x76>
 8013892:	e000      	b.n	8013896 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013894:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	7d1b      	ldrb	r3, [r3, #20]
 801389a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801389e:	b2da      	uxtb	r2, r3
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80138a4:	2300      	movs	r3, #0
}
 80138a6:	4618      	mov	r0, r3
 80138a8:	3730      	adds	r7, #48	; 0x30
 80138aa:	46bd      	mov	sp, r7
 80138ac:	bd80      	pop	{r7, pc}
	...

080138b0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b086      	sub	sp, #24
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	f107 0208 	add.w	r2, r7, #8
 80138be:	4611      	mov	r1, r2
 80138c0:	4618      	mov	r0, r3
 80138c2:	f7ff fab7 	bl	8012e34 <validate>
 80138c6:	4603      	mov	r3, r0
 80138c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80138ca:	7dfb      	ldrb	r3, [r7, #23]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d167      	bne.n	80139a0 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	7d1b      	ldrb	r3, [r3, #20]
 80138d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d061      	beq.n	80139a0 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	7d1b      	ldrb	r3, [r3, #20]
 80138e0:	b25b      	sxtb	r3, r3
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	da15      	bge.n	8013912 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80138e6:	68bb      	ldr	r3, [r7, #8]
 80138e8:	7858      	ldrb	r0, [r3, #1]
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	6a1a      	ldr	r2, [r3, #32]
 80138f4:	2301      	movs	r3, #1
 80138f6:	f7fd fc65 	bl	80111c4 <disk_write>
 80138fa:	4603      	mov	r3, r0
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d001      	beq.n	8013904 <f_sync+0x54>
 8013900:	2301      	movs	r3, #1
 8013902:	e04e      	b.n	80139a2 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	7d1b      	ldrb	r3, [r3, #20]
 8013908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801390c:	b2da      	uxtb	r2, r3
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013912:	4b26      	ldr	r3, [pc, #152]	; (80139ac <f_sync+0xfc>)
 8013914:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013916:	68ba      	ldr	r2, [r7, #8]
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801391c:	4619      	mov	r1, r3
 801391e:	4610      	mov	r0, r2
 8013920:	f7fd ff3e 	bl	80117a0 <move_window>
 8013924:	4603      	mov	r3, r0
 8013926:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013928:	7dfb      	ldrb	r3, [r7, #23]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d138      	bne.n	80139a0 <f_sync+0xf0>
					dir = fp->dir_ptr;
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013932:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	330b      	adds	r3, #11
 8013938:	781a      	ldrb	r2, [r3, #0]
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	330b      	adds	r3, #11
 801393e:	f042 0220 	orr.w	r2, r2, #32
 8013942:	b2d2      	uxtb	r2, r2
 8013944:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	6818      	ldr	r0, [r3, #0]
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	689b      	ldr	r3, [r3, #8]
 801394e:	461a      	mov	r2, r3
 8013950:	68f9      	ldr	r1, [r7, #12]
 8013952:	f7fe fccc 	bl	80122ee <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	f103 021c 	add.w	r2, r3, #28
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	68db      	ldr	r3, [r3, #12]
 8013960:	4619      	mov	r1, r3
 8013962:	4610      	mov	r0, r2
 8013964:	f7fd fcc2 	bl	80112ec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	3316      	adds	r3, #22
 801396c:	6939      	ldr	r1, [r7, #16]
 801396e:	4618      	mov	r0, r3
 8013970:	f7fd fcbc 	bl	80112ec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	3312      	adds	r3, #18
 8013978:	2100      	movs	r1, #0
 801397a:	4618      	mov	r0, r3
 801397c:	f7fd fc9b 	bl	80112b6 <st_word>
					fs->wflag = 1;
 8013980:	68bb      	ldr	r3, [r7, #8]
 8013982:	2201      	movs	r2, #1
 8013984:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013986:	68bb      	ldr	r3, [r7, #8]
 8013988:	4618      	mov	r0, r3
 801398a:	f7fd ff37 	bl	80117fc <sync_fs>
 801398e:	4603      	mov	r3, r0
 8013990:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	7d1b      	ldrb	r3, [r3, #20]
 8013996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801399a:	b2da      	uxtb	r2, r3
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80139a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80139a2:	4618      	mov	r0, r3
 80139a4:	3718      	adds	r7, #24
 80139a6:	46bd      	mov	sp, r7
 80139a8:	bd80      	pop	{r7, pc}
 80139aa:	bf00      	nop
 80139ac:	274a0000 	.word	0x274a0000

080139b0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b084      	sub	sp, #16
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80139b8:	6878      	ldr	r0, [r7, #4]
 80139ba:	f7ff ff79 	bl	80138b0 <f_sync>
 80139be:	4603      	mov	r3, r0
 80139c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80139c2:	7bfb      	ldrb	r3, [r7, #15]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d118      	bne.n	80139fa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	f107 0208 	add.w	r2, r7, #8
 80139ce:	4611      	mov	r1, r2
 80139d0:	4618      	mov	r0, r3
 80139d2:	f7ff fa2f 	bl	8012e34 <validate>
 80139d6:	4603      	mov	r3, r0
 80139d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80139da:	7bfb      	ldrb	r3, [r7, #15]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d10c      	bne.n	80139fa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	691b      	ldr	r3, [r3, #16]
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7fd fe37 	bl	8011658 <dec_lock>
 80139ea:	4603      	mov	r3, r0
 80139ec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80139ee:	7bfb      	ldrb	r3, [r7, #15]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d102      	bne.n	80139fa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	2200      	movs	r2, #0
 80139f8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80139fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80139fc:	4618      	mov	r0, r3
 80139fe:	3710      	adds	r7, #16
 8013a00:	46bd      	mov	sp, r7
 8013a02:	bd80      	pop	{r7, pc}

08013a04 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013a04:	b590      	push	{r4, r7, lr}
 8013a06:	b091      	sub	sp, #68	; 0x44
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013a0c:	f107 0108 	add.w	r1, r7, #8
 8013a10:	1d3b      	adds	r3, r7, #4
 8013a12:	2200      	movs	r2, #0
 8013a14:	4618      	mov	r0, r3
 8013a16:	f7fe ff87 	bl	8012928 <find_volume>
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013a20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d131      	bne.n	8013a8c <f_chdir+0x88>
		dj.obj.fs = fs;
 8013a28:	68bb      	ldr	r3, [r7, #8]
 8013a2a:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013a2c:	687a      	ldr	r2, [r7, #4]
 8013a2e:	f107 030c 	add.w	r3, r7, #12
 8013a32:	4611      	mov	r1, r2
 8013a34:	4618      	mov	r0, r3
 8013a36:	f7fe fe47 	bl	80126c8 <follow_path>
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013a40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d11a      	bne.n	8013a7e <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013a48:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013a4c:	b25b      	sxtb	r3, r3
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	da03      	bge.n	8013a5a <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013a52:	68bb      	ldr	r3, [r7, #8]
 8013a54:	697a      	ldr	r2, [r7, #20]
 8013a56:	619a      	str	r2, [r3, #24]
 8013a58:	e011      	b.n	8013a7e <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013a5a:	7cbb      	ldrb	r3, [r7, #18]
 8013a5c:	f003 0310 	and.w	r3, r3, #16
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d009      	beq.n	8013a78 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013a64:	68bb      	ldr	r3, [r7, #8]
 8013a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a68:	68bc      	ldr	r4, [r7, #8]
 8013a6a:	4611      	mov	r1, r2
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f7fe fc1f 	bl	80122b0 <ld_clust>
 8013a72:	4603      	mov	r3, r0
 8013a74:	61a3      	str	r3, [r4, #24]
 8013a76:	e002      	b.n	8013a7e <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013a78:	2305      	movs	r3, #5
 8013a7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013a7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013a82:	2b04      	cmp	r3, #4
 8013a84:	d102      	bne.n	8013a8c <f_chdir+0x88>
 8013a86:	2305      	movs	r3, #5
 8013a88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013a8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013a90:	4618      	mov	r0, r3
 8013a92:	3744      	adds	r7, #68	; 0x44
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd90      	pop	{r4, r7, pc}

08013a98 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b090      	sub	sp, #64	; 0x40
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
 8013aa0:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	f107 0208 	add.w	r2, r7, #8
 8013aa8:	4611      	mov	r1, r2
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f7ff f9c2 	bl	8012e34 <validate>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013ab6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d103      	bne.n	8013ac6 <f_lseek+0x2e>
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	7d5b      	ldrb	r3, [r3, #21]
 8013ac2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013ac6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d002      	beq.n	8013ad4 <f_lseek+0x3c>
 8013ace:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013ad2:	e201      	b.n	8013ed8 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	f000 80d9 	beq.w	8013c90 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013ade:	683b      	ldr	r3, [r7, #0]
 8013ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ae4:	d15a      	bne.n	8013b9c <f_lseek+0x104>
			tbl = fp->cltbl;
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013aea:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aee:	1d1a      	adds	r2, r3, #4
 8013af0:	627a      	str	r2, [r7, #36]	; 0x24
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	617b      	str	r3, [r7, #20]
 8013af6:	2302      	movs	r3, #2
 8013af8:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	689b      	ldr	r3, [r3, #8]
 8013afe:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d03a      	beq.n	8013b7c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b08:	613b      	str	r3, [r7, #16]
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b10:	3302      	adds	r3, #2
 8013b12:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b16:	60fb      	str	r3, [r7, #12]
 8013b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b1a:	3301      	adds	r3, #1
 8013b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013b22:	4618      	mov	r0, r3
 8013b24:	f7fd fef9 	bl	801191a <get_fat>
 8013b28:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b2c:	2b01      	cmp	r3, #1
 8013b2e:	d804      	bhi.n	8013b3a <f_lseek+0xa2>
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	2202      	movs	r2, #2
 8013b34:	755a      	strb	r2, [r3, #21]
 8013b36:	2302      	movs	r3, #2
 8013b38:	e1ce      	b.n	8013ed8 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b40:	d104      	bne.n	8013b4c <f_lseek+0xb4>
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	2201      	movs	r2, #1
 8013b46:	755a      	strb	r2, [r3, #21]
 8013b48:	2301      	movs	r3, #1
 8013b4a:	e1c5      	b.n	8013ed8 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	3301      	adds	r3, #1
 8013b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b52:	429a      	cmp	r2, r3
 8013b54:	d0de      	beq.n	8013b14 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b58:	697b      	ldr	r3, [r7, #20]
 8013b5a:	429a      	cmp	r2, r3
 8013b5c:	d809      	bhi.n	8013b72 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b60:	1d1a      	adds	r2, r3, #4
 8013b62:	627a      	str	r2, [r7, #36]	; 0x24
 8013b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b66:	601a      	str	r2, [r3, #0]
 8013b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b6a:	1d1a      	adds	r2, r3, #4
 8013b6c:	627a      	str	r2, [r7, #36]	; 0x24
 8013b6e:	693a      	ldr	r2, [r7, #16]
 8013b70:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013b72:	68bb      	ldr	r3, [r7, #8]
 8013b74:	69db      	ldr	r3, [r3, #28]
 8013b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b78:	429a      	cmp	r2, r3
 8013b7a:	d3c4      	bcc.n	8013b06 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b82:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013b84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b86:	697b      	ldr	r3, [r7, #20]
 8013b88:	429a      	cmp	r2, r3
 8013b8a:	d803      	bhi.n	8013b94 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b8e:	2200      	movs	r2, #0
 8013b90:	601a      	str	r2, [r3, #0]
 8013b92:	e19f      	b.n	8013ed4 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013b94:	2311      	movs	r3, #17
 8013b96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013b9a:	e19b      	b.n	8013ed4 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	68db      	ldr	r3, [r3, #12]
 8013ba0:	683a      	ldr	r2, [r7, #0]
 8013ba2:	429a      	cmp	r2, r3
 8013ba4:	d902      	bls.n	8013bac <f_lseek+0x114>
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	68db      	ldr	r3, [r3, #12]
 8013baa:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	683a      	ldr	r2, [r7, #0]
 8013bb0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013bb2:	683b      	ldr	r3, [r7, #0]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	f000 818d 	beq.w	8013ed4 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013bba:	683b      	ldr	r3, [r7, #0]
 8013bbc:	3b01      	subs	r3, #1
 8013bbe:	4619      	mov	r1, r3
 8013bc0:	6878      	ldr	r0, [r7, #4]
 8013bc2:	f7fe f997 	bl	8011ef4 <clmt_clust>
 8013bc6:	4602      	mov	r2, r0
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013bcc:	68ba      	ldr	r2, [r7, #8]
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	69db      	ldr	r3, [r3, #28]
 8013bd2:	4619      	mov	r1, r3
 8013bd4:	4610      	mov	r0, r2
 8013bd6:	f7fd fe81 	bl	80118dc <clust2sect>
 8013bda:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013bdc:	69bb      	ldr	r3, [r7, #24]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d104      	bne.n	8013bec <f_lseek+0x154>
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	2202      	movs	r2, #2
 8013be6:	755a      	strb	r2, [r3, #21]
 8013be8:	2302      	movs	r3, #2
 8013bea:	e175      	b.n	8013ed8 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013bec:	683b      	ldr	r3, [r7, #0]
 8013bee:	3b01      	subs	r3, #1
 8013bf0:	68ba      	ldr	r2, [r7, #8]
 8013bf2:	8992      	ldrh	r2, [r2, #12]
 8013bf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8013bf8:	68ba      	ldr	r2, [r7, #8]
 8013bfa:	8952      	ldrh	r2, [r2, #10]
 8013bfc:	3a01      	subs	r2, #1
 8013bfe:	4013      	ands	r3, r2
 8013c00:	69ba      	ldr	r2, [r7, #24]
 8013c02:	4413      	add	r3, r2
 8013c04:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	699b      	ldr	r3, [r3, #24]
 8013c0a:	68ba      	ldr	r2, [r7, #8]
 8013c0c:	8992      	ldrh	r2, [r2, #12]
 8013c0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013c12:	fb02 f201 	mul.w	r2, r2, r1
 8013c16:	1a9b      	subs	r3, r3, r2
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	f000 815b 	beq.w	8013ed4 <f_lseek+0x43c>
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	6a1b      	ldr	r3, [r3, #32]
 8013c22:	69ba      	ldr	r2, [r7, #24]
 8013c24:	429a      	cmp	r2, r3
 8013c26:	f000 8155 	beq.w	8013ed4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	7d1b      	ldrb	r3, [r3, #20]
 8013c2e:	b25b      	sxtb	r3, r3
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	da18      	bge.n	8013c66 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013c34:	68bb      	ldr	r3, [r7, #8]
 8013c36:	7858      	ldrb	r0, [r3, #1]
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	6a1a      	ldr	r2, [r3, #32]
 8013c42:	2301      	movs	r3, #1
 8013c44:	f7fd fabe 	bl	80111c4 <disk_write>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d004      	beq.n	8013c58 <f_lseek+0x1c0>
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	2201      	movs	r2, #1
 8013c52:	755a      	strb	r2, [r3, #21]
 8013c54:	2301      	movs	r3, #1
 8013c56:	e13f      	b.n	8013ed8 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	7d1b      	ldrb	r3, [r3, #20]
 8013c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013c60:	b2da      	uxtb	r2, r3
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013c66:	68bb      	ldr	r3, [r7, #8]
 8013c68:	7858      	ldrb	r0, [r3, #1]
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c70:	2301      	movs	r3, #1
 8013c72:	69ba      	ldr	r2, [r7, #24]
 8013c74:	f7fd fa86 	bl	8011184 <disk_read>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d004      	beq.n	8013c88 <f_lseek+0x1f0>
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	2201      	movs	r2, #1
 8013c82:	755a      	strb	r2, [r3, #21]
 8013c84:	2301      	movs	r3, #1
 8013c86:	e127      	b.n	8013ed8 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	69ba      	ldr	r2, [r7, #24]
 8013c8c:	621a      	str	r2, [r3, #32]
 8013c8e:	e121      	b.n	8013ed4 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	68db      	ldr	r3, [r3, #12]
 8013c94:	683a      	ldr	r2, [r7, #0]
 8013c96:	429a      	cmp	r2, r3
 8013c98:	d908      	bls.n	8013cac <f_lseek+0x214>
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	7d1b      	ldrb	r3, [r3, #20]
 8013c9e:	f003 0302 	and.w	r3, r3, #2
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d102      	bne.n	8013cac <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	68db      	ldr	r3, [r3, #12]
 8013caa:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	699b      	ldr	r3, [r3, #24]
 8013cb0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013cba:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013cbc:	683b      	ldr	r3, [r7, #0]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	f000 80b5 	beq.w	8013e2e <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013cc4:	68bb      	ldr	r3, [r7, #8]
 8013cc6:	895b      	ldrh	r3, [r3, #10]
 8013cc8:	461a      	mov	r2, r3
 8013cca:	68bb      	ldr	r3, [r7, #8]
 8013ccc:	899b      	ldrh	r3, [r3, #12]
 8013cce:	fb03 f302 	mul.w	r3, r3, r2
 8013cd2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013cd4:	6a3b      	ldr	r3, [r7, #32]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d01b      	beq.n	8013d12 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013cda:	683b      	ldr	r3, [r7, #0]
 8013cdc:	1e5a      	subs	r2, r3, #1
 8013cde:	69fb      	ldr	r3, [r7, #28]
 8013ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8013ce4:	6a3b      	ldr	r3, [r7, #32]
 8013ce6:	1e59      	subs	r1, r3, #1
 8013ce8:	69fb      	ldr	r3, [r7, #28]
 8013cea:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013cee:	429a      	cmp	r2, r3
 8013cf0:	d30f      	bcc.n	8013d12 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013cf2:	6a3b      	ldr	r3, [r7, #32]
 8013cf4:	1e5a      	subs	r2, r3, #1
 8013cf6:	69fb      	ldr	r3, [r7, #28]
 8013cf8:	425b      	negs	r3, r3
 8013cfa:	401a      	ands	r2, r3
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	699b      	ldr	r3, [r3, #24]
 8013d04:	683a      	ldr	r2, [r7, #0]
 8013d06:	1ad3      	subs	r3, r2, r3
 8013d08:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	69db      	ldr	r3, [r3, #28]
 8013d0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013d10:	e022      	b.n	8013d58 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	689b      	ldr	r3, [r3, #8]
 8013d16:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d119      	bne.n	8013d52 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	2100      	movs	r1, #0
 8013d22:	4618      	mov	r0, r3
 8013d24:	f7fe f84e 	bl	8011dc4 <create_chain>
 8013d28:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d2c:	2b01      	cmp	r3, #1
 8013d2e:	d104      	bne.n	8013d3a <f_lseek+0x2a2>
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2202      	movs	r2, #2
 8013d34:	755a      	strb	r2, [r3, #21]
 8013d36:	2302      	movs	r3, #2
 8013d38:	e0ce      	b.n	8013ed8 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d40:	d104      	bne.n	8013d4c <f_lseek+0x2b4>
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	2201      	movs	r2, #1
 8013d46:	755a      	strb	r2, [r3, #21]
 8013d48:	2301      	movs	r3, #1
 8013d4a:	e0c5      	b.n	8013ed8 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d50:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d56:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d067      	beq.n	8013e2e <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8013d5e:	e03a      	b.n	8013dd6 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8013d60:	683a      	ldr	r2, [r7, #0]
 8013d62:	69fb      	ldr	r3, [r7, #28]
 8013d64:	1ad3      	subs	r3, r2, r3
 8013d66:	603b      	str	r3, [r7, #0]
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	699a      	ldr	r2, [r3, #24]
 8013d6c:	69fb      	ldr	r3, [r7, #28]
 8013d6e:	441a      	add	r2, r3
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	7d1b      	ldrb	r3, [r3, #20]
 8013d78:	f003 0302 	and.w	r3, r3, #2
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d00b      	beq.n	8013d98 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013d84:	4618      	mov	r0, r3
 8013d86:	f7fe f81d 	bl	8011dc4 <create_chain>
 8013d8a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d108      	bne.n	8013da4 <f_lseek+0x30c>
							ofs = 0; break;
 8013d92:	2300      	movs	r3, #0
 8013d94:	603b      	str	r3, [r7, #0]
 8013d96:	e022      	b.n	8013dde <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f7fd fdbc 	bl	801191a <get_fat>
 8013da2:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013daa:	d104      	bne.n	8013db6 <f_lseek+0x31e>
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	2201      	movs	r2, #1
 8013db0:	755a      	strb	r2, [r3, #21]
 8013db2:	2301      	movs	r3, #1
 8013db4:	e090      	b.n	8013ed8 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013db8:	2b01      	cmp	r3, #1
 8013dba:	d904      	bls.n	8013dc6 <f_lseek+0x32e>
 8013dbc:	68bb      	ldr	r3, [r7, #8]
 8013dbe:	69db      	ldr	r3, [r3, #28]
 8013dc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013dc2:	429a      	cmp	r2, r3
 8013dc4:	d304      	bcc.n	8013dd0 <f_lseek+0x338>
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	2202      	movs	r2, #2
 8013dca:	755a      	strb	r2, [r3, #21]
 8013dcc:	2302      	movs	r3, #2
 8013dce:	e083      	b.n	8013ed8 <f_lseek+0x440>
					fp->clust = clst;
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013dd4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013dd6:	683a      	ldr	r2, [r7, #0]
 8013dd8:	69fb      	ldr	r3, [r7, #28]
 8013dda:	429a      	cmp	r2, r3
 8013ddc:	d8c0      	bhi.n	8013d60 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	699a      	ldr	r2, [r3, #24]
 8013de2:	683b      	ldr	r3, [r7, #0]
 8013de4:	441a      	add	r2, r3
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013dea:	68bb      	ldr	r3, [r7, #8]
 8013dec:	899b      	ldrh	r3, [r3, #12]
 8013dee:	461a      	mov	r2, r3
 8013df0:	683b      	ldr	r3, [r7, #0]
 8013df2:	fbb3 f1f2 	udiv	r1, r3, r2
 8013df6:	fb02 f201 	mul.w	r2, r2, r1
 8013dfa:	1a9b      	subs	r3, r3, r2
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d016      	beq.n	8013e2e <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013e00:	68bb      	ldr	r3, [r7, #8]
 8013e02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013e04:	4618      	mov	r0, r3
 8013e06:	f7fd fd69 	bl	80118dc <clust2sect>
 8013e0a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d104      	bne.n	8013e1c <f_lseek+0x384>
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	2202      	movs	r2, #2
 8013e16:	755a      	strb	r2, [r3, #21]
 8013e18:	2302      	movs	r3, #2
 8013e1a:	e05d      	b.n	8013ed8 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8013e1c:	68bb      	ldr	r3, [r7, #8]
 8013e1e:	899b      	ldrh	r3, [r3, #12]
 8013e20:	461a      	mov	r2, r3
 8013e22:	683b      	ldr	r3, [r7, #0]
 8013e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e2a:	4413      	add	r3, r2
 8013e2c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	699a      	ldr	r2, [r3, #24]
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	68db      	ldr	r3, [r3, #12]
 8013e36:	429a      	cmp	r2, r3
 8013e38:	d90a      	bls.n	8013e50 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	699a      	ldr	r2, [r3, #24]
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	7d1b      	ldrb	r3, [r3, #20]
 8013e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e4a:	b2da      	uxtb	r2, r3
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	699b      	ldr	r3, [r3, #24]
 8013e54:	68ba      	ldr	r2, [r7, #8]
 8013e56:	8992      	ldrh	r2, [r2, #12]
 8013e58:	fbb3 f1f2 	udiv	r1, r3, r2
 8013e5c:	fb02 f201 	mul.w	r2, r2, r1
 8013e60:	1a9b      	subs	r3, r3, r2
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d036      	beq.n	8013ed4 <f_lseek+0x43c>
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	6a1b      	ldr	r3, [r3, #32]
 8013e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e6c:	429a      	cmp	r2, r3
 8013e6e:	d031      	beq.n	8013ed4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	7d1b      	ldrb	r3, [r3, #20]
 8013e74:	b25b      	sxtb	r3, r3
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	da18      	bge.n	8013eac <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013e7a:	68bb      	ldr	r3, [r7, #8]
 8013e7c:	7858      	ldrb	r0, [r3, #1]
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	6a1a      	ldr	r2, [r3, #32]
 8013e88:	2301      	movs	r3, #1
 8013e8a:	f7fd f99b 	bl	80111c4 <disk_write>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d004      	beq.n	8013e9e <f_lseek+0x406>
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	2201      	movs	r2, #1
 8013e98:	755a      	strb	r2, [r3, #21]
 8013e9a:	2301      	movs	r3, #1
 8013e9c:	e01c      	b.n	8013ed8 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	7d1b      	ldrb	r3, [r3, #20]
 8013ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013ea6:	b2da      	uxtb	r2, r3
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013eac:	68bb      	ldr	r3, [r7, #8]
 8013eae:	7858      	ldrb	r0, [r3, #1]
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013eb6:	2301      	movs	r3, #1
 8013eb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013eba:	f7fd f963 	bl	8011184 <disk_read>
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d004      	beq.n	8013ece <f_lseek+0x436>
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	2201      	movs	r2, #1
 8013ec8:	755a      	strb	r2, [r3, #21]
 8013eca:	2301      	movs	r3, #1
 8013ecc:	e004      	b.n	8013ed8 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ed2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013ed4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013ed8:	4618      	mov	r0, r3
 8013eda:	3740      	adds	r7, #64	; 0x40
 8013edc:	46bd      	mov	sp, r7
 8013ede:	bd80      	pop	{r7, pc}

08013ee0 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b09e      	sub	sp, #120	; 0x78
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8013ee8:	2300      	movs	r3, #0
 8013eea:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013eec:	f107 010c 	add.w	r1, r7, #12
 8013ef0:	1d3b      	adds	r3, r7, #4
 8013ef2:	2202      	movs	r2, #2
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f7fe fd17 	bl	8012928 <find_volume>
 8013efa:	4603      	mov	r3, r0
 8013efc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8013f04:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	f040 80a4 	bne.w	8014056 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8013f0e:	687a      	ldr	r2, [r7, #4]
 8013f10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013f14:	4611      	mov	r1, r2
 8013f16:	4618      	mov	r0, r3
 8013f18:	f7fe fbd6 	bl	80126c8 <follow_path>
 8013f1c:	4603      	mov	r3, r0
 8013f1e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8013f22:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d108      	bne.n	8013f3c <f_unlink+0x5c>
 8013f2a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013f2e:	f003 0320 	and.w	r3, r3, #32
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d002      	beq.n	8013f3c <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8013f36:	2306      	movs	r3, #6
 8013f38:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013f3c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d108      	bne.n	8013f56 <f_unlink+0x76>
 8013f44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013f48:	2102      	movs	r1, #2
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	f7fd fa78 	bl	8011440 <chk_lock>
 8013f50:	4603      	mov	r3, r0
 8013f52:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013f56:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d17b      	bne.n	8014056 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013f5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013f62:	b25b      	sxtb	r3, r3
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	da03      	bge.n	8013f70 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013f68:	2306      	movs	r3, #6
 8013f6a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013f6e:	e008      	b.n	8013f82 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8013f70:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013f74:	f003 0301 	and.w	r3, r3, #1
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d002      	beq.n	8013f82 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013f7c:	2307      	movs	r3, #7
 8013f7e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8013f82:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d13d      	bne.n	8014006 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013f8e:	4611      	mov	r1, r2
 8013f90:	4618      	mov	r0, r3
 8013f92:	f7fe f98d 	bl	80122b0 <ld_clust>
 8013f96:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013f98:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013f9c:	f003 0310 	and.w	r3, r3, #16
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d030      	beq.n	8014006 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	699b      	ldr	r3, [r3, #24]
 8013fa8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013faa:	429a      	cmp	r2, r3
 8013fac:	d103      	bne.n	8013fb6 <f_unlink+0xd6>
						res = FR_DENIED;
 8013fae:	2307      	movs	r3, #7
 8013fb0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013fb4:	e027      	b.n	8014006 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013fbc:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013fbe:	f107 0310 	add.w	r3, r7, #16
 8013fc2:	2100      	movs	r1, #0
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	f7fd ffcd 	bl	8011f64 <dir_sdi>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8013fd0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d116      	bne.n	8014006 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013fd8:	f107 0310 	add.w	r3, r7, #16
 8013fdc:	2100      	movs	r1, #0
 8013fde:	4618      	mov	r0, r3
 8013fe0:	f7fe f9a5 	bl	801232e <dir_read>
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8013fea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d102      	bne.n	8013ff8 <f_unlink+0x118>
 8013ff2:	2307      	movs	r3, #7
 8013ff4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013ff8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013ffc:	2b04      	cmp	r3, #4
 8013ffe:	d102      	bne.n	8014006 <f_unlink+0x126>
 8014000:	2300      	movs	r3, #0
 8014002:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8014006:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801400a:	2b00      	cmp	r3, #0
 801400c:	d123      	bne.n	8014056 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801400e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014012:	4618      	mov	r0, r3
 8014014:	f7fe fa6f 	bl	80124f6 <dir_remove>
 8014018:	4603      	mov	r3, r0
 801401a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801401e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014022:	2b00      	cmp	r3, #0
 8014024:	d10c      	bne.n	8014040 <f_unlink+0x160>
 8014026:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014028:	2b00      	cmp	r3, #0
 801402a:	d009      	beq.n	8014040 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801402c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014030:	2200      	movs	r2, #0
 8014032:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014034:	4618      	mov	r0, r3
 8014036:	f7fd fe60 	bl	8011cfa <remove_chain>
 801403a:	4603      	mov	r3, r0
 801403c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8014040:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014044:	2b00      	cmp	r3, #0
 8014046:	d106      	bne.n	8014056 <f_unlink+0x176>
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	4618      	mov	r0, r3
 801404c:	f7fd fbd6 	bl	80117fc <sync_fs>
 8014050:	4603      	mov	r3, r0
 8014052:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014056:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 801405a:	4618      	mov	r0, r3
 801405c:	3778      	adds	r7, #120	; 0x78
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}
	...

08014064 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014064:	b580      	push	{r7, lr}
 8014066:	b096      	sub	sp, #88	; 0x58
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801406c:	f107 0108 	add.w	r1, r7, #8
 8014070:	1d3b      	adds	r3, r7, #4
 8014072:	2202      	movs	r2, #2
 8014074:	4618      	mov	r0, r3
 8014076:	f7fe fc57 	bl	8012928 <find_volume>
 801407a:	4603      	mov	r3, r0
 801407c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8014080:	68bb      	ldr	r3, [r7, #8]
 8014082:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8014084:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014088:	2b00      	cmp	r3, #0
 801408a:	f040 80fe 	bne.w	801428a <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801408e:	687a      	ldr	r2, [r7, #4]
 8014090:	f107 030c 	add.w	r3, r7, #12
 8014094:	4611      	mov	r1, r2
 8014096:	4618      	mov	r0, r3
 8014098:	f7fe fb16 	bl	80126c8 <follow_path>
 801409c:	4603      	mov	r3, r0
 801409e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80140a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d102      	bne.n	80140b0 <f_mkdir+0x4c>
 80140aa:	2308      	movs	r3, #8
 80140ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80140b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80140b4:	2b04      	cmp	r3, #4
 80140b6:	d108      	bne.n	80140ca <f_mkdir+0x66>
 80140b8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80140bc:	f003 0320 	and.w	r3, r3, #32
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d002      	beq.n	80140ca <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80140c4:	2306      	movs	r3, #6
 80140c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80140ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80140ce:	2b04      	cmp	r3, #4
 80140d0:	f040 80db 	bne.w	801428a <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80140d4:	f107 030c 	add.w	r3, r7, #12
 80140d8:	2100      	movs	r1, #0
 80140da:	4618      	mov	r0, r3
 80140dc:	f7fd fe72 	bl	8011dc4 <create_chain>
 80140e0:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80140e2:	68bb      	ldr	r3, [r7, #8]
 80140e4:	895b      	ldrh	r3, [r3, #10]
 80140e6:	461a      	mov	r2, r3
 80140e8:	68bb      	ldr	r3, [r7, #8]
 80140ea:	899b      	ldrh	r3, [r3, #12]
 80140ec:	fb03 f302 	mul.w	r3, r3, r2
 80140f0:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80140f2:	2300      	movs	r3, #0
 80140f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80140f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d102      	bne.n	8014104 <f_mkdir+0xa0>
 80140fe:	2307      	movs	r3, #7
 8014100:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8014104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014106:	2b01      	cmp	r3, #1
 8014108:	d102      	bne.n	8014110 <f_mkdir+0xac>
 801410a:	2302      	movs	r3, #2
 801410c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014116:	d102      	bne.n	801411e <f_mkdir+0xba>
 8014118:	2301      	movs	r3, #1
 801411a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801411e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014122:	2b00      	cmp	r3, #0
 8014124:	d106      	bne.n	8014134 <f_mkdir+0xd0>
 8014126:	68bb      	ldr	r3, [r7, #8]
 8014128:	4618      	mov	r0, r3
 801412a:	f7fd faf5 	bl	8011718 <sync_window>
 801412e:	4603      	mov	r3, r0
 8014130:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8014134:	4b58      	ldr	r3, [pc, #352]	; (8014298 <f_mkdir+0x234>)
 8014136:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8014138:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801413c:	2b00      	cmp	r3, #0
 801413e:	d16c      	bne.n	801421a <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8014140:	68bb      	ldr	r3, [r7, #8]
 8014142:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014144:	4618      	mov	r0, r3
 8014146:	f7fd fbc9 	bl	80118dc <clust2sect>
 801414a:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 801414c:	68bb      	ldr	r3, [r7, #8]
 801414e:	3338      	adds	r3, #56	; 0x38
 8014150:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8014152:	68bb      	ldr	r3, [r7, #8]
 8014154:	899b      	ldrh	r3, [r3, #12]
 8014156:	461a      	mov	r2, r3
 8014158:	2100      	movs	r1, #0
 801415a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801415c:	f7fd f913 	bl	8011386 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8014160:	220b      	movs	r2, #11
 8014162:	2120      	movs	r1, #32
 8014164:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014166:	f7fd f90e 	bl	8011386 <mem_set>
					dir[DIR_Name] = '.';
 801416a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801416c:	222e      	movs	r2, #46	; 0x2e
 801416e:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8014170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014172:	330b      	adds	r3, #11
 8014174:	2210      	movs	r2, #16
 8014176:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8014178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801417a:	3316      	adds	r3, #22
 801417c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801417e:	4618      	mov	r0, r3
 8014180:	f7fd f8b4 	bl	80112ec <st_dword>
					st_clust(fs, dir, dcl);
 8014184:	68bb      	ldr	r3, [r7, #8]
 8014186:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014188:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801418a:	4618      	mov	r0, r3
 801418c:	f7fe f8af 	bl	80122ee <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8014190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014192:	3320      	adds	r3, #32
 8014194:	2220      	movs	r2, #32
 8014196:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014198:	4618      	mov	r0, r3
 801419a:	f7fd f8d3 	bl	8011344 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801419e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141a0:	3321      	adds	r3, #33	; 0x21
 80141a2:	222e      	movs	r2, #46	; 0x2e
 80141a4:	701a      	strb	r2, [r3, #0]
 80141a6:	697b      	ldr	r3, [r7, #20]
 80141a8:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	781b      	ldrb	r3, [r3, #0]
 80141ae:	2b03      	cmp	r3, #3
 80141b0:	d106      	bne.n	80141c0 <f_mkdir+0x15c>
 80141b2:	68bb      	ldr	r3, [r7, #8]
 80141b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80141b8:	429a      	cmp	r2, r3
 80141ba:	d101      	bne.n	80141c0 <f_mkdir+0x15c>
 80141bc:	2300      	movs	r3, #0
 80141be:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80141c0:	68b8      	ldr	r0, [r7, #8]
 80141c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141c4:	3320      	adds	r3, #32
 80141c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80141c8:	4619      	mov	r1, r3
 80141ca:	f7fe f890 	bl	80122ee <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80141ce:	68bb      	ldr	r3, [r7, #8]
 80141d0:	895b      	ldrh	r3, [r3, #10]
 80141d2:	653b      	str	r3, [r7, #80]	; 0x50
 80141d4:	e01c      	b.n	8014210 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 80141d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141d8:	1c5a      	adds	r2, r3, #1
 80141da:	64fa      	str	r2, [r7, #76]	; 0x4c
 80141dc:	68ba      	ldr	r2, [r7, #8]
 80141de:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80141e0:	68bb      	ldr	r3, [r7, #8]
 80141e2:	2201      	movs	r2, #1
 80141e4:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80141e6:	68bb      	ldr	r3, [r7, #8]
 80141e8:	4618      	mov	r0, r3
 80141ea:	f7fd fa95 	bl	8011718 <sync_window>
 80141ee:	4603      	mov	r3, r0
 80141f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80141f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d10d      	bne.n	8014218 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	899b      	ldrh	r3, [r3, #12]
 8014200:	461a      	mov	r2, r3
 8014202:	2100      	movs	r1, #0
 8014204:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014206:	f7fd f8be 	bl	8011386 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801420a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801420c:	3b01      	subs	r3, #1
 801420e:	653b      	str	r3, [r7, #80]	; 0x50
 8014210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014212:	2b00      	cmp	r3, #0
 8014214:	d1df      	bne.n	80141d6 <f_mkdir+0x172>
 8014216:	e000      	b.n	801421a <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8014218:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801421a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801421e:	2b00      	cmp	r3, #0
 8014220:	d107      	bne.n	8014232 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8014222:	f107 030c 	add.w	r3, r7, #12
 8014226:	4618      	mov	r0, r3
 8014228:	f7fe f933 	bl	8012492 <dir_register>
 801422c:	4603      	mov	r3, r0
 801422e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8014232:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014236:	2b00      	cmp	r3, #0
 8014238:	d120      	bne.n	801427c <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801423a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801423c:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801423e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014240:	3316      	adds	r3, #22
 8014242:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014244:	4618      	mov	r0, r3
 8014246:	f7fd f851 	bl	80112ec <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801424a:	68bb      	ldr	r3, [r7, #8]
 801424c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801424e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014250:	4618      	mov	r0, r3
 8014252:	f7fe f84c 	bl	80122ee <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8014256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014258:	330b      	adds	r3, #11
 801425a:	2210      	movs	r2, #16
 801425c:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801425e:	68bb      	ldr	r3, [r7, #8]
 8014260:	2201      	movs	r2, #1
 8014262:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014264:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014268:	2b00      	cmp	r3, #0
 801426a:	d10e      	bne.n	801428a <f_mkdir+0x226>
					res = sync_fs(fs);
 801426c:	68bb      	ldr	r3, [r7, #8]
 801426e:	4618      	mov	r0, r3
 8014270:	f7fd fac4 	bl	80117fc <sync_fs>
 8014274:	4603      	mov	r3, r0
 8014276:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801427a:	e006      	b.n	801428a <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 801427c:	f107 030c 	add.w	r3, r7, #12
 8014280:	2200      	movs	r2, #0
 8014282:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014284:	4618      	mov	r0, r3
 8014286:	f7fd fd38 	bl	8011cfa <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801428a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801428e:	4618      	mov	r0, r3
 8014290:	3758      	adds	r7, #88	; 0x58
 8014292:	46bd      	mov	sp, r7
 8014294:	bd80      	pop	{r7, pc}
 8014296:	bf00      	nop
 8014298:	274a0000 	.word	0x274a0000

0801429c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 801429c:	b580      	push	{r7, lr}
 801429e:	b088      	sub	sp, #32
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	60f8      	str	r0, [r7, #12]
 80142a4:	60b9      	str	r1, [r7, #8]
 80142a6:	607a      	str	r2, [r7, #4]
	int n = 0;
 80142a8:	2300      	movs	r3, #0
 80142aa:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80142b0:	e017      	b.n	80142e2 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80142b2:	f107 0310 	add.w	r3, r7, #16
 80142b6:	f107 0114 	add.w	r1, r7, #20
 80142ba:	2201      	movs	r2, #1
 80142bc:	6878      	ldr	r0, [r7, #4]
 80142be:	f7ff f803 	bl	80132c8 <f_read>
		if (rc != 1) break;
 80142c2:	693b      	ldr	r3, [r7, #16]
 80142c4:	2b01      	cmp	r3, #1
 80142c6:	d112      	bne.n	80142ee <f_gets+0x52>
		c = s[0];
 80142c8:	7d3b      	ldrb	r3, [r7, #20]
 80142ca:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80142cc:	69bb      	ldr	r3, [r7, #24]
 80142ce:	1c5a      	adds	r2, r3, #1
 80142d0:	61ba      	str	r2, [r7, #24]
 80142d2:	7dfa      	ldrb	r2, [r7, #23]
 80142d4:	701a      	strb	r2, [r3, #0]
		n++;
 80142d6:	69fb      	ldr	r3, [r7, #28]
 80142d8:	3301      	adds	r3, #1
 80142da:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80142dc:	7dfb      	ldrb	r3, [r7, #23]
 80142de:	2b0a      	cmp	r3, #10
 80142e0:	d007      	beq.n	80142f2 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80142e2:	68bb      	ldr	r3, [r7, #8]
 80142e4:	3b01      	subs	r3, #1
 80142e6:	69fa      	ldr	r2, [r7, #28]
 80142e8:	429a      	cmp	r2, r3
 80142ea:	dbe2      	blt.n	80142b2 <f_gets+0x16>
 80142ec:	e002      	b.n	80142f4 <f_gets+0x58>
		if (rc != 1) break;
 80142ee:	bf00      	nop
 80142f0:	e000      	b.n	80142f4 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 80142f2:	bf00      	nop
	}
	*p = 0;
 80142f4:	69bb      	ldr	r3, [r7, #24]
 80142f6:	2200      	movs	r2, #0
 80142f8:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80142fa:	69fb      	ldr	r3, [r7, #28]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d001      	beq.n	8014304 <f_gets+0x68>
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	e000      	b.n	8014306 <f_gets+0x6a>
 8014304:	2300      	movs	r3, #0
}
 8014306:	4618      	mov	r0, r3
 8014308:	3720      	adds	r7, #32
 801430a:	46bd      	mov	sp, r7
 801430c:	bd80      	pop	{r7, pc}
	...

08014310 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014310:	b480      	push	{r7}
 8014312:	b087      	sub	sp, #28
 8014314:	af00      	add	r7, sp, #0
 8014316:	60f8      	str	r0, [r7, #12]
 8014318:	60b9      	str	r1, [r7, #8]
 801431a:	4613      	mov	r3, r2
 801431c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801431e:	2301      	movs	r3, #1
 8014320:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014322:	2300      	movs	r3, #0
 8014324:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014326:	4b1f      	ldr	r3, [pc, #124]	; (80143a4 <FATFS_LinkDriverEx+0x94>)
 8014328:	7a5b      	ldrb	r3, [r3, #9]
 801432a:	b2db      	uxtb	r3, r3
 801432c:	2b00      	cmp	r3, #0
 801432e:	d131      	bne.n	8014394 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014330:	4b1c      	ldr	r3, [pc, #112]	; (80143a4 <FATFS_LinkDriverEx+0x94>)
 8014332:	7a5b      	ldrb	r3, [r3, #9]
 8014334:	b2db      	uxtb	r3, r3
 8014336:	461a      	mov	r2, r3
 8014338:	4b1a      	ldr	r3, [pc, #104]	; (80143a4 <FATFS_LinkDriverEx+0x94>)
 801433a:	2100      	movs	r1, #0
 801433c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801433e:	4b19      	ldr	r3, [pc, #100]	; (80143a4 <FATFS_LinkDriverEx+0x94>)
 8014340:	7a5b      	ldrb	r3, [r3, #9]
 8014342:	b2db      	uxtb	r3, r3
 8014344:	4a17      	ldr	r2, [pc, #92]	; (80143a4 <FATFS_LinkDriverEx+0x94>)
 8014346:	009b      	lsls	r3, r3, #2
 8014348:	4413      	add	r3, r2
 801434a:	68fa      	ldr	r2, [r7, #12]
 801434c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801434e:	4b15      	ldr	r3, [pc, #84]	; (80143a4 <FATFS_LinkDriverEx+0x94>)
 8014350:	7a5b      	ldrb	r3, [r3, #9]
 8014352:	b2db      	uxtb	r3, r3
 8014354:	461a      	mov	r2, r3
 8014356:	4b13      	ldr	r3, [pc, #76]	; (80143a4 <FATFS_LinkDriverEx+0x94>)
 8014358:	4413      	add	r3, r2
 801435a:	79fa      	ldrb	r2, [r7, #7]
 801435c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801435e:	4b11      	ldr	r3, [pc, #68]	; (80143a4 <FATFS_LinkDriverEx+0x94>)
 8014360:	7a5b      	ldrb	r3, [r3, #9]
 8014362:	b2db      	uxtb	r3, r3
 8014364:	1c5a      	adds	r2, r3, #1
 8014366:	b2d1      	uxtb	r1, r2
 8014368:	4a0e      	ldr	r2, [pc, #56]	; (80143a4 <FATFS_LinkDriverEx+0x94>)
 801436a:	7251      	strb	r1, [r2, #9]
 801436c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801436e:	7dbb      	ldrb	r3, [r7, #22]
 8014370:	3330      	adds	r3, #48	; 0x30
 8014372:	b2da      	uxtb	r2, r3
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	3301      	adds	r3, #1
 801437c:	223a      	movs	r2, #58	; 0x3a
 801437e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014380:	68bb      	ldr	r3, [r7, #8]
 8014382:	3302      	adds	r3, #2
 8014384:	222f      	movs	r2, #47	; 0x2f
 8014386:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	3303      	adds	r3, #3
 801438c:	2200      	movs	r2, #0
 801438e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014390:	2300      	movs	r3, #0
 8014392:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014394:	7dfb      	ldrb	r3, [r7, #23]
}
 8014396:	4618      	mov	r0, r3
 8014398:	371c      	adds	r7, #28
 801439a:	46bd      	mov	sp, r7
 801439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a0:	4770      	bx	lr
 80143a2:	bf00      	nop
 80143a4:	2003d4a8 	.word	0x2003d4a8

080143a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b082      	sub	sp, #8
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]
 80143b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80143b2:	2200      	movs	r2, #0
 80143b4:	6839      	ldr	r1, [r7, #0]
 80143b6:	6878      	ldr	r0, [r7, #4]
 80143b8:	f7ff ffaa 	bl	8014310 <FATFS_LinkDriverEx>
 80143bc:	4603      	mov	r3, r0
}
 80143be:	4618      	mov	r0, r3
 80143c0:	3708      	adds	r7, #8
 80143c2:	46bd      	mov	sp, r7
 80143c4:	bd80      	pop	{r7, pc}

080143c6 <__cxa_guard_acquire>:
 80143c6:	6803      	ldr	r3, [r0, #0]
 80143c8:	07db      	lsls	r3, r3, #31
 80143ca:	d406      	bmi.n	80143da <__cxa_guard_acquire+0x14>
 80143cc:	7843      	ldrb	r3, [r0, #1]
 80143ce:	b103      	cbz	r3, 80143d2 <__cxa_guard_acquire+0xc>
 80143d0:	deff      	udf	#255	; 0xff
 80143d2:	2301      	movs	r3, #1
 80143d4:	7043      	strb	r3, [r0, #1]
 80143d6:	4618      	mov	r0, r3
 80143d8:	4770      	bx	lr
 80143da:	2000      	movs	r0, #0
 80143dc:	4770      	bx	lr

080143de <__cxa_guard_release>:
 80143de:	2301      	movs	r3, #1
 80143e0:	6003      	str	r3, [r0, #0]
 80143e2:	4770      	bx	lr
 80143e4:	0000      	movs	r0, r0
	...

080143e8 <cos>:
 80143e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80143ea:	ec53 2b10 	vmov	r2, r3, d0
 80143ee:	4824      	ldr	r0, [pc, #144]	; (8014480 <cos+0x98>)
 80143f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80143f4:	4281      	cmp	r1, r0
 80143f6:	dc06      	bgt.n	8014406 <cos+0x1e>
 80143f8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8014478 <cos+0x90>
 80143fc:	f000 faa4 	bl	8014948 <__kernel_cos>
 8014400:	ec51 0b10 	vmov	r0, r1, d0
 8014404:	e007      	b.n	8014416 <cos+0x2e>
 8014406:	481f      	ldr	r0, [pc, #124]	; (8014484 <cos+0x9c>)
 8014408:	4281      	cmp	r1, r0
 801440a:	dd09      	ble.n	8014420 <cos+0x38>
 801440c:	ee10 0a10 	vmov	r0, s0
 8014410:	4619      	mov	r1, r3
 8014412:	f7eb ff51 	bl	80002b8 <__aeabi_dsub>
 8014416:	ec41 0b10 	vmov	d0, r0, r1
 801441a:	b005      	add	sp, #20
 801441c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014420:	4668      	mov	r0, sp
 8014422:	f000 f885 	bl	8014530 <__ieee754_rem_pio2>
 8014426:	f000 0003 	and.w	r0, r0, #3
 801442a:	2801      	cmp	r0, #1
 801442c:	d007      	beq.n	801443e <cos+0x56>
 801442e:	2802      	cmp	r0, #2
 8014430:	d012      	beq.n	8014458 <cos+0x70>
 8014432:	b9c0      	cbnz	r0, 8014466 <cos+0x7e>
 8014434:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014438:	ed9d 0b00 	vldr	d0, [sp]
 801443c:	e7de      	b.n	80143fc <cos+0x14>
 801443e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014442:	ed9d 0b00 	vldr	d0, [sp]
 8014446:	f000 fe87 	bl	8015158 <__kernel_sin>
 801444a:	ec53 2b10 	vmov	r2, r3, d0
 801444e:	ee10 0a10 	vmov	r0, s0
 8014452:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014456:	e7de      	b.n	8014416 <cos+0x2e>
 8014458:	ed9d 1b02 	vldr	d1, [sp, #8]
 801445c:	ed9d 0b00 	vldr	d0, [sp]
 8014460:	f000 fa72 	bl	8014948 <__kernel_cos>
 8014464:	e7f1      	b.n	801444a <cos+0x62>
 8014466:	ed9d 1b02 	vldr	d1, [sp, #8]
 801446a:	ed9d 0b00 	vldr	d0, [sp]
 801446e:	2001      	movs	r0, #1
 8014470:	f000 fe72 	bl	8015158 <__kernel_sin>
 8014474:	e7c4      	b.n	8014400 <cos+0x18>
 8014476:	bf00      	nop
	...
 8014480:	3fe921fb 	.word	0x3fe921fb
 8014484:	7fefffff 	.word	0x7fefffff

08014488 <sin>:
 8014488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801448a:	ec53 2b10 	vmov	r2, r3, d0
 801448e:	4826      	ldr	r0, [pc, #152]	; (8014528 <sin+0xa0>)
 8014490:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014494:	4281      	cmp	r1, r0
 8014496:	dc07      	bgt.n	80144a8 <sin+0x20>
 8014498:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8014520 <sin+0x98>
 801449c:	2000      	movs	r0, #0
 801449e:	f000 fe5b 	bl	8015158 <__kernel_sin>
 80144a2:	ec51 0b10 	vmov	r0, r1, d0
 80144a6:	e007      	b.n	80144b8 <sin+0x30>
 80144a8:	4820      	ldr	r0, [pc, #128]	; (801452c <sin+0xa4>)
 80144aa:	4281      	cmp	r1, r0
 80144ac:	dd09      	ble.n	80144c2 <sin+0x3a>
 80144ae:	ee10 0a10 	vmov	r0, s0
 80144b2:	4619      	mov	r1, r3
 80144b4:	f7eb ff00 	bl	80002b8 <__aeabi_dsub>
 80144b8:	ec41 0b10 	vmov	d0, r0, r1
 80144bc:	b005      	add	sp, #20
 80144be:	f85d fb04 	ldr.w	pc, [sp], #4
 80144c2:	4668      	mov	r0, sp
 80144c4:	f000 f834 	bl	8014530 <__ieee754_rem_pio2>
 80144c8:	f000 0003 	and.w	r0, r0, #3
 80144cc:	2801      	cmp	r0, #1
 80144ce:	d008      	beq.n	80144e2 <sin+0x5a>
 80144d0:	2802      	cmp	r0, #2
 80144d2:	d00d      	beq.n	80144f0 <sin+0x68>
 80144d4:	b9d0      	cbnz	r0, 801450c <sin+0x84>
 80144d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80144da:	ed9d 0b00 	vldr	d0, [sp]
 80144de:	2001      	movs	r0, #1
 80144e0:	e7dd      	b.n	801449e <sin+0x16>
 80144e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80144e6:	ed9d 0b00 	vldr	d0, [sp]
 80144ea:	f000 fa2d 	bl	8014948 <__kernel_cos>
 80144ee:	e7d8      	b.n	80144a2 <sin+0x1a>
 80144f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80144f4:	ed9d 0b00 	vldr	d0, [sp]
 80144f8:	2001      	movs	r0, #1
 80144fa:	f000 fe2d 	bl	8015158 <__kernel_sin>
 80144fe:	ec53 2b10 	vmov	r2, r3, d0
 8014502:	ee10 0a10 	vmov	r0, s0
 8014506:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801450a:	e7d5      	b.n	80144b8 <sin+0x30>
 801450c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014510:	ed9d 0b00 	vldr	d0, [sp]
 8014514:	f000 fa18 	bl	8014948 <__kernel_cos>
 8014518:	e7f1      	b.n	80144fe <sin+0x76>
 801451a:	bf00      	nop
 801451c:	f3af 8000 	nop.w
	...
 8014528:	3fe921fb 	.word	0x3fe921fb
 801452c:	7fefffff 	.word	0x7fefffff

08014530 <__ieee754_rem_pio2>:
 8014530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014534:	ed2d 8b02 	vpush	{d8}
 8014538:	ec55 4b10 	vmov	r4, r5, d0
 801453c:	4bca      	ldr	r3, [pc, #808]	; (8014868 <__ieee754_rem_pio2+0x338>)
 801453e:	b08b      	sub	sp, #44	; 0x2c
 8014540:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8014544:	4598      	cmp	r8, r3
 8014546:	4682      	mov	sl, r0
 8014548:	9502      	str	r5, [sp, #8]
 801454a:	dc08      	bgt.n	801455e <__ieee754_rem_pio2+0x2e>
 801454c:	2200      	movs	r2, #0
 801454e:	2300      	movs	r3, #0
 8014550:	ed80 0b00 	vstr	d0, [r0]
 8014554:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014558:	f04f 0b00 	mov.w	fp, #0
 801455c:	e028      	b.n	80145b0 <__ieee754_rem_pio2+0x80>
 801455e:	4bc3      	ldr	r3, [pc, #780]	; (801486c <__ieee754_rem_pio2+0x33c>)
 8014560:	4598      	cmp	r8, r3
 8014562:	dc78      	bgt.n	8014656 <__ieee754_rem_pio2+0x126>
 8014564:	9b02      	ldr	r3, [sp, #8]
 8014566:	4ec2      	ldr	r6, [pc, #776]	; (8014870 <__ieee754_rem_pio2+0x340>)
 8014568:	2b00      	cmp	r3, #0
 801456a:	ee10 0a10 	vmov	r0, s0
 801456e:	a3b0      	add	r3, pc, #704	; (adr r3, 8014830 <__ieee754_rem_pio2+0x300>)
 8014570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014574:	4629      	mov	r1, r5
 8014576:	dd39      	ble.n	80145ec <__ieee754_rem_pio2+0xbc>
 8014578:	f7eb fe9e 	bl	80002b8 <__aeabi_dsub>
 801457c:	45b0      	cmp	r8, r6
 801457e:	4604      	mov	r4, r0
 8014580:	460d      	mov	r5, r1
 8014582:	d01b      	beq.n	80145bc <__ieee754_rem_pio2+0x8c>
 8014584:	a3ac      	add	r3, pc, #688	; (adr r3, 8014838 <__ieee754_rem_pio2+0x308>)
 8014586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801458a:	f7eb fe95 	bl	80002b8 <__aeabi_dsub>
 801458e:	4602      	mov	r2, r0
 8014590:	460b      	mov	r3, r1
 8014592:	e9ca 2300 	strd	r2, r3, [sl]
 8014596:	4620      	mov	r0, r4
 8014598:	4629      	mov	r1, r5
 801459a:	f7eb fe8d 	bl	80002b8 <__aeabi_dsub>
 801459e:	a3a6      	add	r3, pc, #664	; (adr r3, 8014838 <__ieee754_rem_pio2+0x308>)
 80145a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145a4:	f7eb fe88 	bl	80002b8 <__aeabi_dsub>
 80145a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80145ac:	f04f 0b01 	mov.w	fp, #1
 80145b0:	4658      	mov	r0, fp
 80145b2:	b00b      	add	sp, #44	; 0x2c
 80145b4:	ecbd 8b02 	vpop	{d8}
 80145b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145bc:	a3a0      	add	r3, pc, #640	; (adr r3, 8014840 <__ieee754_rem_pio2+0x310>)
 80145be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145c2:	f7eb fe79 	bl	80002b8 <__aeabi_dsub>
 80145c6:	a3a0      	add	r3, pc, #640	; (adr r3, 8014848 <__ieee754_rem_pio2+0x318>)
 80145c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145cc:	4604      	mov	r4, r0
 80145ce:	460d      	mov	r5, r1
 80145d0:	f7eb fe72 	bl	80002b8 <__aeabi_dsub>
 80145d4:	4602      	mov	r2, r0
 80145d6:	460b      	mov	r3, r1
 80145d8:	e9ca 2300 	strd	r2, r3, [sl]
 80145dc:	4620      	mov	r0, r4
 80145de:	4629      	mov	r1, r5
 80145e0:	f7eb fe6a 	bl	80002b8 <__aeabi_dsub>
 80145e4:	a398      	add	r3, pc, #608	; (adr r3, 8014848 <__ieee754_rem_pio2+0x318>)
 80145e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ea:	e7db      	b.n	80145a4 <__ieee754_rem_pio2+0x74>
 80145ec:	f7eb fe66 	bl	80002bc <__adddf3>
 80145f0:	45b0      	cmp	r8, r6
 80145f2:	4604      	mov	r4, r0
 80145f4:	460d      	mov	r5, r1
 80145f6:	d016      	beq.n	8014626 <__ieee754_rem_pio2+0xf6>
 80145f8:	a38f      	add	r3, pc, #572	; (adr r3, 8014838 <__ieee754_rem_pio2+0x308>)
 80145fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145fe:	f7eb fe5d 	bl	80002bc <__adddf3>
 8014602:	4602      	mov	r2, r0
 8014604:	460b      	mov	r3, r1
 8014606:	e9ca 2300 	strd	r2, r3, [sl]
 801460a:	4620      	mov	r0, r4
 801460c:	4629      	mov	r1, r5
 801460e:	f7eb fe53 	bl	80002b8 <__aeabi_dsub>
 8014612:	a389      	add	r3, pc, #548	; (adr r3, 8014838 <__ieee754_rem_pio2+0x308>)
 8014614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014618:	f7eb fe50 	bl	80002bc <__adddf3>
 801461c:	f04f 3bff 	mov.w	fp, #4294967295
 8014620:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014624:	e7c4      	b.n	80145b0 <__ieee754_rem_pio2+0x80>
 8014626:	a386      	add	r3, pc, #536	; (adr r3, 8014840 <__ieee754_rem_pio2+0x310>)
 8014628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801462c:	f7eb fe46 	bl	80002bc <__adddf3>
 8014630:	a385      	add	r3, pc, #532	; (adr r3, 8014848 <__ieee754_rem_pio2+0x318>)
 8014632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014636:	4604      	mov	r4, r0
 8014638:	460d      	mov	r5, r1
 801463a:	f7eb fe3f 	bl	80002bc <__adddf3>
 801463e:	4602      	mov	r2, r0
 8014640:	460b      	mov	r3, r1
 8014642:	e9ca 2300 	strd	r2, r3, [sl]
 8014646:	4620      	mov	r0, r4
 8014648:	4629      	mov	r1, r5
 801464a:	f7eb fe35 	bl	80002b8 <__aeabi_dsub>
 801464e:	a37e      	add	r3, pc, #504	; (adr r3, 8014848 <__ieee754_rem_pio2+0x318>)
 8014650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014654:	e7e0      	b.n	8014618 <__ieee754_rem_pio2+0xe8>
 8014656:	4b87      	ldr	r3, [pc, #540]	; (8014874 <__ieee754_rem_pio2+0x344>)
 8014658:	4598      	cmp	r8, r3
 801465a:	f300 80d9 	bgt.w	8014810 <__ieee754_rem_pio2+0x2e0>
 801465e:	f000 fe39 	bl	80152d4 <fabs>
 8014662:	ec55 4b10 	vmov	r4, r5, d0
 8014666:	ee10 0a10 	vmov	r0, s0
 801466a:	a379      	add	r3, pc, #484	; (adr r3, 8014850 <__ieee754_rem_pio2+0x320>)
 801466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014670:	4629      	mov	r1, r5
 8014672:	f7eb ffd9 	bl	8000628 <__aeabi_dmul>
 8014676:	4b80      	ldr	r3, [pc, #512]	; (8014878 <__ieee754_rem_pio2+0x348>)
 8014678:	2200      	movs	r2, #0
 801467a:	f7eb fe1f 	bl	80002bc <__adddf3>
 801467e:	f7ec fa83 	bl	8000b88 <__aeabi_d2iz>
 8014682:	4683      	mov	fp, r0
 8014684:	f7eb ff66 	bl	8000554 <__aeabi_i2d>
 8014688:	4602      	mov	r2, r0
 801468a:	460b      	mov	r3, r1
 801468c:	ec43 2b18 	vmov	d8, r2, r3
 8014690:	a367      	add	r3, pc, #412	; (adr r3, 8014830 <__ieee754_rem_pio2+0x300>)
 8014692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014696:	f7eb ffc7 	bl	8000628 <__aeabi_dmul>
 801469a:	4602      	mov	r2, r0
 801469c:	460b      	mov	r3, r1
 801469e:	4620      	mov	r0, r4
 80146a0:	4629      	mov	r1, r5
 80146a2:	f7eb fe09 	bl	80002b8 <__aeabi_dsub>
 80146a6:	a364      	add	r3, pc, #400	; (adr r3, 8014838 <__ieee754_rem_pio2+0x308>)
 80146a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146ac:	4606      	mov	r6, r0
 80146ae:	460f      	mov	r7, r1
 80146b0:	ec51 0b18 	vmov	r0, r1, d8
 80146b4:	f7eb ffb8 	bl	8000628 <__aeabi_dmul>
 80146b8:	f1bb 0f1f 	cmp.w	fp, #31
 80146bc:	4604      	mov	r4, r0
 80146be:	460d      	mov	r5, r1
 80146c0:	dc0d      	bgt.n	80146de <__ieee754_rem_pio2+0x1ae>
 80146c2:	4b6e      	ldr	r3, [pc, #440]	; (801487c <__ieee754_rem_pio2+0x34c>)
 80146c4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80146c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146cc:	4543      	cmp	r3, r8
 80146ce:	d006      	beq.n	80146de <__ieee754_rem_pio2+0x1ae>
 80146d0:	4622      	mov	r2, r4
 80146d2:	462b      	mov	r3, r5
 80146d4:	4630      	mov	r0, r6
 80146d6:	4639      	mov	r1, r7
 80146d8:	f7eb fdee 	bl	80002b8 <__aeabi_dsub>
 80146dc:	e00f      	b.n	80146fe <__ieee754_rem_pio2+0x1ce>
 80146de:	462b      	mov	r3, r5
 80146e0:	4622      	mov	r2, r4
 80146e2:	4630      	mov	r0, r6
 80146e4:	4639      	mov	r1, r7
 80146e6:	f7eb fde7 	bl	80002b8 <__aeabi_dsub>
 80146ea:	ea4f 5328 	mov.w	r3, r8, asr #20
 80146ee:	9303      	str	r3, [sp, #12]
 80146f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80146f4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80146f8:	f1b8 0f10 	cmp.w	r8, #16
 80146fc:	dc02      	bgt.n	8014704 <__ieee754_rem_pio2+0x1d4>
 80146fe:	e9ca 0100 	strd	r0, r1, [sl]
 8014702:	e039      	b.n	8014778 <__ieee754_rem_pio2+0x248>
 8014704:	a34e      	add	r3, pc, #312	; (adr r3, 8014840 <__ieee754_rem_pio2+0x310>)
 8014706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801470a:	ec51 0b18 	vmov	r0, r1, d8
 801470e:	f7eb ff8b 	bl	8000628 <__aeabi_dmul>
 8014712:	4604      	mov	r4, r0
 8014714:	460d      	mov	r5, r1
 8014716:	4602      	mov	r2, r0
 8014718:	460b      	mov	r3, r1
 801471a:	4630      	mov	r0, r6
 801471c:	4639      	mov	r1, r7
 801471e:	f7eb fdcb 	bl	80002b8 <__aeabi_dsub>
 8014722:	4602      	mov	r2, r0
 8014724:	460b      	mov	r3, r1
 8014726:	4680      	mov	r8, r0
 8014728:	4689      	mov	r9, r1
 801472a:	4630      	mov	r0, r6
 801472c:	4639      	mov	r1, r7
 801472e:	f7eb fdc3 	bl	80002b8 <__aeabi_dsub>
 8014732:	4622      	mov	r2, r4
 8014734:	462b      	mov	r3, r5
 8014736:	f7eb fdbf 	bl	80002b8 <__aeabi_dsub>
 801473a:	a343      	add	r3, pc, #268	; (adr r3, 8014848 <__ieee754_rem_pio2+0x318>)
 801473c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014740:	4604      	mov	r4, r0
 8014742:	460d      	mov	r5, r1
 8014744:	ec51 0b18 	vmov	r0, r1, d8
 8014748:	f7eb ff6e 	bl	8000628 <__aeabi_dmul>
 801474c:	4622      	mov	r2, r4
 801474e:	462b      	mov	r3, r5
 8014750:	f7eb fdb2 	bl	80002b8 <__aeabi_dsub>
 8014754:	4602      	mov	r2, r0
 8014756:	460b      	mov	r3, r1
 8014758:	4604      	mov	r4, r0
 801475a:	460d      	mov	r5, r1
 801475c:	4640      	mov	r0, r8
 801475e:	4649      	mov	r1, r9
 8014760:	f7eb fdaa 	bl	80002b8 <__aeabi_dsub>
 8014764:	9a03      	ldr	r2, [sp, #12]
 8014766:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801476a:	1ad3      	subs	r3, r2, r3
 801476c:	2b31      	cmp	r3, #49	; 0x31
 801476e:	dc24      	bgt.n	80147ba <__ieee754_rem_pio2+0x28a>
 8014770:	e9ca 0100 	strd	r0, r1, [sl]
 8014774:	4646      	mov	r6, r8
 8014776:	464f      	mov	r7, r9
 8014778:	e9da 8900 	ldrd	r8, r9, [sl]
 801477c:	4630      	mov	r0, r6
 801477e:	4642      	mov	r2, r8
 8014780:	464b      	mov	r3, r9
 8014782:	4639      	mov	r1, r7
 8014784:	f7eb fd98 	bl	80002b8 <__aeabi_dsub>
 8014788:	462b      	mov	r3, r5
 801478a:	4622      	mov	r2, r4
 801478c:	f7eb fd94 	bl	80002b8 <__aeabi_dsub>
 8014790:	9b02      	ldr	r3, [sp, #8]
 8014792:	2b00      	cmp	r3, #0
 8014794:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014798:	f6bf af0a 	bge.w	80145b0 <__ieee754_rem_pio2+0x80>
 801479c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80147a0:	f8ca 3004 	str.w	r3, [sl, #4]
 80147a4:	f8ca 8000 	str.w	r8, [sl]
 80147a8:	f8ca 0008 	str.w	r0, [sl, #8]
 80147ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80147b0:	f8ca 300c 	str.w	r3, [sl, #12]
 80147b4:	f1cb 0b00 	rsb	fp, fp, #0
 80147b8:	e6fa      	b.n	80145b0 <__ieee754_rem_pio2+0x80>
 80147ba:	a327      	add	r3, pc, #156	; (adr r3, 8014858 <__ieee754_rem_pio2+0x328>)
 80147bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147c0:	ec51 0b18 	vmov	r0, r1, d8
 80147c4:	f7eb ff30 	bl	8000628 <__aeabi_dmul>
 80147c8:	4604      	mov	r4, r0
 80147ca:	460d      	mov	r5, r1
 80147cc:	4602      	mov	r2, r0
 80147ce:	460b      	mov	r3, r1
 80147d0:	4640      	mov	r0, r8
 80147d2:	4649      	mov	r1, r9
 80147d4:	f7eb fd70 	bl	80002b8 <__aeabi_dsub>
 80147d8:	4602      	mov	r2, r0
 80147da:	460b      	mov	r3, r1
 80147dc:	4606      	mov	r6, r0
 80147de:	460f      	mov	r7, r1
 80147e0:	4640      	mov	r0, r8
 80147e2:	4649      	mov	r1, r9
 80147e4:	f7eb fd68 	bl	80002b8 <__aeabi_dsub>
 80147e8:	4622      	mov	r2, r4
 80147ea:	462b      	mov	r3, r5
 80147ec:	f7eb fd64 	bl	80002b8 <__aeabi_dsub>
 80147f0:	a31b      	add	r3, pc, #108	; (adr r3, 8014860 <__ieee754_rem_pio2+0x330>)
 80147f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147f6:	4604      	mov	r4, r0
 80147f8:	460d      	mov	r5, r1
 80147fa:	ec51 0b18 	vmov	r0, r1, d8
 80147fe:	f7eb ff13 	bl	8000628 <__aeabi_dmul>
 8014802:	4622      	mov	r2, r4
 8014804:	462b      	mov	r3, r5
 8014806:	f7eb fd57 	bl	80002b8 <__aeabi_dsub>
 801480a:	4604      	mov	r4, r0
 801480c:	460d      	mov	r5, r1
 801480e:	e75f      	b.n	80146d0 <__ieee754_rem_pio2+0x1a0>
 8014810:	4b1b      	ldr	r3, [pc, #108]	; (8014880 <__ieee754_rem_pio2+0x350>)
 8014812:	4598      	cmp	r8, r3
 8014814:	dd36      	ble.n	8014884 <__ieee754_rem_pio2+0x354>
 8014816:	ee10 2a10 	vmov	r2, s0
 801481a:	462b      	mov	r3, r5
 801481c:	4620      	mov	r0, r4
 801481e:	4629      	mov	r1, r5
 8014820:	f7eb fd4a 	bl	80002b8 <__aeabi_dsub>
 8014824:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014828:	e9ca 0100 	strd	r0, r1, [sl]
 801482c:	e694      	b.n	8014558 <__ieee754_rem_pio2+0x28>
 801482e:	bf00      	nop
 8014830:	54400000 	.word	0x54400000
 8014834:	3ff921fb 	.word	0x3ff921fb
 8014838:	1a626331 	.word	0x1a626331
 801483c:	3dd0b461 	.word	0x3dd0b461
 8014840:	1a600000 	.word	0x1a600000
 8014844:	3dd0b461 	.word	0x3dd0b461
 8014848:	2e037073 	.word	0x2e037073
 801484c:	3ba3198a 	.word	0x3ba3198a
 8014850:	6dc9c883 	.word	0x6dc9c883
 8014854:	3fe45f30 	.word	0x3fe45f30
 8014858:	2e000000 	.word	0x2e000000
 801485c:	3ba3198a 	.word	0x3ba3198a
 8014860:	252049c1 	.word	0x252049c1
 8014864:	397b839a 	.word	0x397b839a
 8014868:	3fe921fb 	.word	0x3fe921fb
 801486c:	4002d97b 	.word	0x4002d97b
 8014870:	3ff921fb 	.word	0x3ff921fb
 8014874:	413921fb 	.word	0x413921fb
 8014878:	3fe00000 	.word	0x3fe00000
 801487c:	0801adc0 	.word	0x0801adc0
 8014880:	7fefffff 	.word	0x7fefffff
 8014884:	ea4f 5428 	mov.w	r4, r8, asr #20
 8014888:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801488c:	ee10 0a10 	vmov	r0, s0
 8014890:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8014894:	ee10 6a10 	vmov	r6, s0
 8014898:	460f      	mov	r7, r1
 801489a:	f7ec f975 	bl	8000b88 <__aeabi_d2iz>
 801489e:	f7eb fe59 	bl	8000554 <__aeabi_i2d>
 80148a2:	4602      	mov	r2, r0
 80148a4:	460b      	mov	r3, r1
 80148a6:	4630      	mov	r0, r6
 80148a8:	4639      	mov	r1, r7
 80148aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80148ae:	f7eb fd03 	bl	80002b8 <__aeabi_dsub>
 80148b2:	4b22      	ldr	r3, [pc, #136]	; (801493c <__ieee754_rem_pio2+0x40c>)
 80148b4:	2200      	movs	r2, #0
 80148b6:	f7eb feb7 	bl	8000628 <__aeabi_dmul>
 80148ba:	460f      	mov	r7, r1
 80148bc:	4606      	mov	r6, r0
 80148be:	f7ec f963 	bl	8000b88 <__aeabi_d2iz>
 80148c2:	f7eb fe47 	bl	8000554 <__aeabi_i2d>
 80148c6:	4602      	mov	r2, r0
 80148c8:	460b      	mov	r3, r1
 80148ca:	4630      	mov	r0, r6
 80148cc:	4639      	mov	r1, r7
 80148ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80148d2:	f7eb fcf1 	bl	80002b8 <__aeabi_dsub>
 80148d6:	4b19      	ldr	r3, [pc, #100]	; (801493c <__ieee754_rem_pio2+0x40c>)
 80148d8:	2200      	movs	r2, #0
 80148da:	f7eb fea5 	bl	8000628 <__aeabi_dmul>
 80148de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80148e2:	ad04      	add	r5, sp, #16
 80148e4:	f04f 0803 	mov.w	r8, #3
 80148e8:	46a9      	mov	r9, r5
 80148ea:	2600      	movs	r6, #0
 80148ec:	2700      	movs	r7, #0
 80148ee:	4632      	mov	r2, r6
 80148f0:	463b      	mov	r3, r7
 80148f2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80148f6:	46c3      	mov	fp, r8
 80148f8:	3d08      	subs	r5, #8
 80148fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80148fe:	f7ec f8fb 	bl	8000af8 <__aeabi_dcmpeq>
 8014902:	2800      	cmp	r0, #0
 8014904:	d1f3      	bne.n	80148ee <__ieee754_rem_pio2+0x3be>
 8014906:	4b0e      	ldr	r3, [pc, #56]	; (8014940 <__ieee754_rem_pio2+0x410>)
 8014908:	9301      	str	r3, [sp, #4]
 801490a:	2302      	movs	r3, #2
 801490c:	9300      	str	r3, [sp, #0]
 801490e:	4622      	mov	r2, r4
 8014910:	465b      	mov	r3, fp
 8014912:	4651      	mov	r1, sl
 8014914:	4648      	mov	r0, r9
 8014916:	f000 f8df 	bl	8014ad8 <__kernel_rem_pio2>
 801491a:	9b02      	ldr	r3, [sp, #8]
 801491c:	2b00      	cmp	r3, #0
 801491e:	4683      	mov	fp, r0
 8014920:	f6bf ae46 	bge.w	80145b0 <__ieee754_rem_pio2+0x80>
 8014924:	f8da 3004 	ldr.w	r3, [sl, #4]
 8014928:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801492c:	f8ca 3004 	str.w	r3, [sl, #4]
 8014930:	f8da 300c 	ldr.w	r3, [sl, #12]
 8014934:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014938:	e73a      	b.n	80147b0 <__ieee754_rem_pio2+0x280>
 801493a:	bf00      	nop
 801493c:	41700000 	.word	0x41700000
 8014940:	0801ae40 	.word	0x0801ae40
 8014944:	00000000 	.word	0x00000000

08014948 <__kernel_cos>:
 8014948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801494c:	ec57 6b10 	vmov	r6, r7, d0
 8014950:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014954:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8014958:	ed8d 1b00 	vstr	d1, [sp]
 801495c:	da07      	bge.n	801496e <__kernel_cos+0x26>
 801495e:	ee10 0a10 	vmov	r0, s0
 8014962:	4639      	mov	r1, r7
 8014964:	f7ec f910 	bl	8000b88 <__aeabi_d2iz>
 8014968:	2800      	cmp	r0, #0
 801496a:	f000 8088 	beq.w	8014a7e <__kernel_cos+0x136>
 801496e:	4632      	mov	r2, r6
 8014970:	463b      	mov	r3, r7
 8014972:	4630      	mov	r0, r6
 8014974:	4639      	mov	r1, r7
 8014976:	f7eb fe57 	bl	8000628 <__aeabi_dmul>
 801497a:	4b51      	ldr	r3, [pc, #324]	; (8014ac0 <__kernel_cos+0x178>)
 801497c:	2200      	movs	r2, #0
 801497e:	4604      	mov	r4, r0
 8014980:	460d      	mov	r5, r1
 8014982:	f7eb fe51 	bl	8000628 <__aeabi_dmul>
 8014986:	a340      	add	r3, pc, #256	; (adr r3, 8014a88 <__kernel_cos+0x140>)
 8014988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801498c:	4682      	mov	sl, r0
 801498e:	468b      	mov	fp, r1
 8014990:	4620      	mov	r0, r4
 8014992:	4629      	mov	r1, r5
 8014994:	f7eb fe48 	bl	8000628 <__aeabi_dmul>
 8014998:	a33d      	add	r3, pc, #244	; (adr r3, 8014a90 <__kernel_cos+0x148>)
 801499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801499e:	f7eb fc8d 	bl	80002bc <__adddf3>
 80149a2:	4622      	mov	r2, r4
 80149a4:	462b      	mov	r3, r5
 80149a6:	f7eb fe3f 	bl	8000628 <__aeabi_dmul>
 80149aa:	a33b      	add	r3, pc, #236	; (adr r3, 8014a98 <__kernel_cos+0x150>)
 80149ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149b0:	f7eb fc82 	bl	80002b8 <__aeabi_dsub>
 80149b4:	4622      	mov	r2, r4
 80149b6:	462b      	mov	r3, r5
 80149b8:	f7eb fe36 	bl	8000628 <__aeabi_dmul>
 80149bc:	a338      	add	r3, pc, #224	; (adr r3, 8014aa0 <__kernel_cos+0x158>)
 80149be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149c2:	f7eb fc7b 	bl	80002bc <__adddf3>
 80149c6:	4622      	mov	r2, r4
 80149c8:	462b      	mov	r3, r5
 80149ca:	f7eb fe2d 	bl	8000628 <__aeabi_dmul>
 80149ce:	a336      	add	r3, pc, #216	; (adr r3, 8014aa8 <__kernel_cos+0x160>)
 80149d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149d4:	f7eb fc70 	bl	80002b8 <__aeabi_dsub>
 80149d8:	4622      	mov	r2, r4
 80149da:	462b      	mov	r3, r5
 80149dc:	f7eb fe24 	bl	8000628 <__aeabi_dmul>
 80149e0:	a333      	add	r3, pc, #204	; (adr r3, 8014ab0 <__kernel_cos+0x168>)
 80149e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149e6:	f7eb fc69 	bl	80002bc <__adddf3>
 80149ea:	4622      	mov	r2, r4
 80149ec:	462b      	mov	r3, r5
 80149ee:	f7eb fe1b 	bl	8000628 <__aeabi_dmul>
 80149f2:	4622      	mov	r2, r4
 80149f4:	462b      	mov	r3, r5
 80149f6:	f7eb fe17 	bl	8000628 <__aeabi_dmul>
 80149fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80149fe:	4604      	mov	r4, r0
 8014a00:	460d      	mov	r5, r1
 8014a02:	4630      	mov	r0, r6
 8014a04:	4639      	mov	r1, r7
 8014a06:	f7eb fe0f 	bl	8000628 <__aeabi_dmul>
 8014a0a:	460b      	mov	r3, r1
 8014a0c:	4602      	mov	r2, r0
 8014a0e:	4629      	mov	r1, r5
 8014a10:	4620      	mov	r0, r4
 8014a12:	f7eb fc51 	bl	80002b8 <__aeabi_dsub>
 8014a16:	4b2b      	ldr	r3, [pc, #172]	; (8014ac4 <__kernel_cos+0x17c>)
 8014a18:	4598      	cmp	r8, r3
 8014a1a:	4606      	mov	r6, r0
 8014a1c:	460f      	mov	r7, r1
 8014a1e:	dc10      	bgt.n	8014a42 <__kernel_cos+0xfa>
 8014a20:	4602      	mov	r2, r0
 8014a22:	460b      	mov	r3, r1
 8014a24:	4650      	mov	r0, sl
 8014a26:	4659      	mov	r1, fp
 8014a28:	f7eb fc46 	bl	80002b8 <__aeabi_dsub>
 8014a2c:	460b      	mov	r3, r1
 8014a2e:	4926      	ldr	r1, [pc, #152]	; (8014ac8 <__kernel_cos+0x180>)
 8014a30:	4602      	mov	r2, r0
 8014a32:	2000      	movs	r0, #0
 8014a34:	f7eb fc40 	bl	80002b8 <__aeabi_dsub>
 8014a38:	ec41 0b10 	vmov	d0, r0, r1
 8014a3c:	b003      	add	sp, #12
 8014a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a42:	4b22      	ldr	r3, [pc, #136]	; (8014acc <__kernel_cos+0x184>)
 8014a44:	4920      	ldr	r1, [pc, #128]	; (8014ac8 <__kernel_cos+0x180>)
 8014a46:	4598      	cmp	r8, r3
 8014a48:	bfcc      	ite	gt
 8014a4a:	4d21      	ldrgt	r5, [pc, #132]	; (8014ad0 <__kernel_cos+0x188>)
 8014a4c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8014a50:	2400      	movs	r4, #0
 8014a52:	4622      	mov	r2, r4
 8014a54:	462b      	mov	r3, r5
 8014a56:	2000      	movs	r0, #0
 8014a58:	f7eb fc2e 	bl	80002b8 <__aeabi_dsub>
 8014a5c:	4622      	mov	r2, r4
 8014a5e:	4680      	mov	r8, r0
 8014a60:	4689      	mov	r9, r1
 8014a62:	462b      	mov	r3, r5
 8014a64:	4650      	mov	r0, sl
 8014a66:	4659      	mov	r1, fp
 8014a68:	f7eb fc26 	bl	80002b8 <__aeabi_dsub>
 8014a6c:	4632      	mov	r2, r6
 8014a6e:	463b      	mov	r3, r7
 8014a70:	f7eb fc22 	bl	80002b8 <__aeabi_dsub>
 8014a74:	4602      	mov	r2, r0
 8014a76:	460b      	mov	r3, r1
 8014a78:	4640      	mov	r0, r8
 8014a7a:	4649      	mov	r1, r9
 8014a7c:	e7da      	b.n	8014a34 <__kernel_cos+0xec>
 8014a7e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8014ab8 <__kernel_cos+0x170>
 8014a82:	e7db      	b.n	8014a3c <__kernel_cos+0xf4>
 8014a84:	f3af 8000 	nop.w
 8014a88:	be8838d4 	.word	0xbe8838d4
 8014a8c:	bda8fae9 	.word	0xbda8fae9
 8014a90:	bdb4b1c4 	.word	0xbdb4b1c4
 8014a94:	3e21ee9e 	.word	0x3e21ee9e
 8014a98:	809c52ad 	.word	0x809c52ad
 8014a9c:	3e927e4f 	.word	0x3e927e4f
 8014aa0:	19cb1590 	.word	0x19cb1590
 8014aa4:	3efa01a0 	.word	0x3efa01a0
 8014aa8:	16c15177 	.word	0x16c15177
 8014aac:	3f56c16c 	.word	0x3f56c16c
 8014ab0:	5555554c 	.word	0x5555554c
 8014ab4:	3fa55555 	.word	0x3fa55555
 8014ab8:	00000000 	.word	0x00000000
 8014abc:	3ff00000 	.word	0x3ff00000
 8014ac0:	3fe00000 	.word	0x3fe00000
 8014ac4:	3fd33332 	.word	0x3fd33332
 8014ac8:	3ff00000 	.word	0x3ff00000
 8014acc:	3fe90000 	.word	0x3fe90000
 8014ad0:	3fd20000 	.word	0x3fd20000
 8014ad4:	00000000 	.word	0x00000000

08014ad8 <__kernel_rem_pio2>:
 8014ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014adc:	ed2d 8b02 	vpush	{d8}
 8014ae0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8014ae4:	f112 0f14 	cmn.w	r2, #20
 8014ae8:	9308      	str	r3, [sp, #32]
 8014aea:	9101      	str	r1, [sp, #4]
 8014aec:	4bc6      	ldr	r3, [pc, #792]	; (8014e08 <__kernel_rem_pio2+0x330>)
 8014aee:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8014af0:	9009      	str	r0, [sp, #36]	; 0x24
 8014af2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014af6:	9304      	str	r3, [sp, #16]
 8014af8:	9b08      	ldr	r3, [sp, #32]
 8014afa:	f103 33ff 	add.w	r3, r3, #4294967295
 8014afe:	bfa8      	it	ge
 8014b00:	1ed4      	subge	r4, r2, #3
 8014b02:	9306      	str	r3, [sp, #24]
 8014b04:	bfb2      	itee	lt
 8014b06:	2400      	movlt	r4, #0
 8014b08:	2318      	movge	r3, #24
 8014b0a:	fb94 f4f3 	sdivge	r4, r4, r3
 8014b0e:	f06f 0317 	mvn.w	r3, #23
 8014b12:	fb04 3303 	mla	r3, r4, r3, r3
 8014b16:	eb03 0a02 	add.w	sl, r3, r2
 8014b1a:	9b04      	ldr	r3, [sp, #16]
 8014b1c:	9a06      	ldr	r2, [sp, #24]
 8014b1e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8014df8 <__kernel_rem_pio2+0x320>
 8014b22:	eb03 0802 	add.w	r8, r3, r2
 8014b26:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8014b28:	1aa7      	subs	r7, r4, r2
 8014b2a:	ae20      	add	r6, sp, #128	; 0x80
 8014b2c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014b30:	2500      	movs	r5, #0
 8014b32:	4545      	cmp	r5, r8
 8014b34:	dd18      	ble.n	8014b68 <__kernel_rem_pio2+0x90>
 8014b36:	9b08      	ldr	r3, [sp, #32]
 8014b38:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8014b3c:	aa20      	add	r2, sp, #128	; 0x80
 8014b3e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8014df8 <__kernel_rem_pio2+0x320>
 8014b42:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8014b46:	f1c3 0301 	rsb	r3, r3, #1
 8014b4a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8014b4e:	9307      	str	r3, [sp, #28]
 8014b50:	9b07      	ldr	r3, [sp, #28]
 8014b52:	9a04      	ldr	r2, [sp, #16]
 8014b54:	4443      	add	r3, r8
 8014b56:	429a      	cmp	r2, r3
 8014b58:	db2f      	blt.n	8014bba <__kernel_rem_pio2+0xe2>
 8014b5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014b5e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8014b62:	462f      	mov	r7, r5
 8014b64:	2600      	movs	r6, #0
 8014b66:	e01b      	b.n	8014ba0 <__kernel_rem_pio2+0xc8>
 8014b68:	42ef      	cmn	r7, r5
 8014b6a:	d407      	bmi.n	8014b7c <__kernel_rem_pio2+0xa4>
 8014b6c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014b70:	f7eb fcf0 	bl	8000554 <__aeabi_i2d>
 8014b74:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014b78:	3501      	adds	r5, #1
 8014b7a:	e7da      	b.n	8014b32 <__kernel_rem_pio2+0x5a>
 8014b7c:	ec51 0b18 	vmov	r0, r1, d8
 8014b80:	e7f8      	b.n	8014b74 <__kernel_rem_pio2+0x9c>
 8014b82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014b86:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014b8a:	f7eb fd4d 	bl	8000628 <__aeabi_dmul>
 8014b8e:	4602      	mov	r2, r0
 8014b90:	460b      	mov	r3, r1
 8014b92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b96:	f7eb fb91 	bl	80002bc <__adddf3>
 8014b9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014b9e:	3601      	adds	r6, #1
 8014ba0:	9b06      	ldr	r3, [sp, #24]
 8014ba2:	429e      	cmp	r6, r3
 8014ba4:	f1a7 0708 	sub.w	r7, r7, #8
 8014ba8:	ddeb      	ble.n	8014b82 <__kernel_rem_pio2+0xaa>
 8014baa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014bae:	3508      	adds	r5, #8
 8014bb0:	ecab 7b02 	vstmia	fp!, {d7}
 8014bb4:	f108 0801 	add.w	r8, r8, #1
 8014bb8:	e7ca      	b.n	8014b50 <__kernel_rem_pio2+0x78>
 8014bba:	9b04      	ldr	r3, [sp, #16]
 8014bbc:	aa0c      	add	r2, sp, #48	; 0x30
 8014bbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014bc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8014bc4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8014bc6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014bca:	9c04      	ldr	r4, [sp, #16]
 8014bcc:	930a      	str	r3, [sp, #40]	; 0x28
 8014bce:	ab98      	add	r3, sp, #608	; 0x260
 8014bd0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014bd4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8014bd8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8014bdc:	f8cd b008 	str.w	fp, [sp, #8]
 8014be0:	4625      	mov	r5, r4
 8014be2:	2d00      	cmp	r5, #0
 8014be4:	dc78      	bgt.n	8014cd8 <__kernel_rem_pio2+0x200>
 8014be6:	ec47 6b10 	vmov	d0, r6, r7
 8014bea:	4650      	mov	r0, sl
 8014bec:	f000 fbfc 	bl	80153e8 <scalbn>
 8014bf0:	ec57 6b10 	vmov	r6, r7, d0
 8014bf4:	2200      	movs	r2, #0
 8014bf6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014bfa:	ee10 0a10 	vmov	r0, s0
 8014bfe:	4639      	mov	r1, r7
 8014c00:	f7eb fd12 	bl	8000628 <__aeabi_dmul>
 8014c04:	ec41 0b10 	vmov	d0, r0, r1
 8014c08:	f000 fb6e 	bl	80152e8 <floor>
 8014c0c:	4b7f      	ldr	r3, [pc, #508]	; (8014e0c <__kernel_rem_pio2+0x334>)
 8014c0e:	ec51 0b10 	vmov	r0, r1, d0
 8014c12:	2200      	movs	r2, #0
 8014c14:	f7eb fd08 	bl	8000628 <__aeabi_dmul>
 8014c18:	4602      	mov	r2, r0
 8014c1a:	460b      	mov	r3, r1
 8014c1c:	4630      	mov	r0, r6
 8014c1e:	4639      	mov	r1, r7
 8014c20:	f7eb fb4a 	bl	80002b8 <__aeabi_dsub>
 8014c24:	460f      	mov	r7, r1
 8014c26:	4606      	mov	r6, r0
 8014c28:	f7eb ffae 	bl	8000b88 <__aeabi_d2iz>
 8014c2c:	9007      	str	r0, [sp, #28]
 8014c2e:	f7eb fc91 	bl	8000554 <__aeabi_i2d>
 8014c32:	4602      	mov	r2, r0
 8014c34:	460b      	mov	r3, r1
 8014c36:	4630      	mov	r0, r6
 8014c38:	4639      	mov	r1, r7
 8014c3a:	f7eb fb3d 	bl	80002b8 <__aeabi_dsub>
 8014c3e:	f1ba 0f00 	cmp.w	sl, #0
 8014c42:	4606      	mov	r6, r0
 8014c44:	460f      	mov	r7, r1
 8014c46:	dd70      	ble.n	8014d2a <__kernel_rem_pio2+0x252>
 8014c48:	1e62      	subs	r2, r4, #1
 8014c4a:	ab0c      	add	r3, sp, #48	; 0x30
 8014c4c:	9d07      	ldr	r5, [sp, #28]
 8014c4e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014c52:	f1ca 0118 	rsb	r1, sl, #24
 8014c56:	fa40 f301 	asr.w	r3, r0, r1
 8014c5a:	441d      	add	r5, r3
 8014c5c:	408b      	lsls	r3, r1
 8014c5e:	1ac0      	subs	r0, r0, r3
 8014c60:	ab0c      	add	r3, sp, #48	; 0x30
 8014c62:	9507      	str	r5, [sp, #28]
 8014c64:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014c68:	f1ca 0317 	rsb	r3, sl, #23
 8014c6c:	fa40 f303 	asr.w	r3, r0, r3
 8014c70:	9302      	str	r3, [sp, #8]
 8014c72:	9b02      	ldr	r3, [sp, #8]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	dd66      	ble.n	8014d46 <__kernel_rem_pio2+0x26e>
 8014c78:	9b07      	ldr	r3, [sp, #28]
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	3301      	adds	r3, #1
 8014c7e:	9307      	str	r3, [sp, #28]
 8014c80:	4615      	mov	r5, r2
 8014c82:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014c86:	4294      	cmp	r4, r2
 8014c88:	f300 8099 	bgt.w	8014dbe <__kernel_rem_pio2+0x2e6>
 8014c8c:	f1ba 0f00 	cmp.w	sl, #0
 8014c90:	dd07      	ble.n	8014ca2 <__kernel_rem_pio2+0x1ca>
 8014c92:	f1ba 0f01 	cmp.w	sl, #1
 8014c96:	f000 80a5 	beq.w	8014de4 <__kernel_rem_pio2+0x30c>
 8014c9a:	f1ba 0f02 	cmp.w	sl, #2
 8014c9e:	f000 80c1 	beq.w	8014e24 <__kernel_rem_pio2+0x34c>
 8014ca2:	9b02      	ldr	r3, [sp, #8]
 8014ca4:	2b02      	cmp	r3, #2
 8014ca6:	d14e      	bne.n	8014d46 <__kernel_rem_pio2+0x26e>
 8014ca8:	4632      	mov	r2, r6
 8014caa:	463b      	mov	r3, r7
 8014cac:	4958      	ldr	r1, [pc, #352]	; (8014e10 <__kernel_rem_pio2+0x338>)
 8014cae:	2000      	movs	r0, #0
 8014cb0:	f7eb fb02 	bl	80002b8 <__aeabi_dsub>
 8014cb4:	4606      	mov	r6, r0
 8014cb6:	460f      	mov	r7, r1
 8014cb8:	2d00      	cmp	r5, #0
 8014cba:	d044      	beq.n	8014d46 <__kernel_rem_pio2+0x26e>
 8014cbc:	4650      	mov	r0, sl
 8014cbe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8014e00 <__kernel_rem_pio2+0x328>
 8014cc2:	f000 fb91 	bl	80153e8 <scalbn>
 8014cc6:	4630      	mov	r0, r6
 8014cc8:	4639      	mov	r1, r7
 8014cca:	ec53 2b10 	vmov	r2, r3, d0
 8014cce:	f7eb faf3 	bl	80002b8 <__aeabi_dsub>
 8014cd2:	4606      	mov	r6, r0
 8014cd4:	460f      	mov	r7, r1
 8014cd6:	e036      	b.n	8014d46 <__kernel_rem_pio2+0x26e>
 8014cd8:	4b4e      	ldr	r3, [pc, #312]	; (8014e14 <__kernel_rem_pio2+0x33c>)
 8014cda:	2200      	movs	r2, #0
 8014cdc:	4630      	mov	r0, r6
 8014cde:	4639      	mov	r1, r7
 8014ce0:	f7eb fca2 	bl	8000628 <__aeabi_dmul>
 8014ce4:	f7eb ff50 	bl	8000b88 <__aeabi_d2iz>
 8014ce8:	f7eb fc34 	bl	8000554 <__aeabi_i2d>
 8014cec:	4b4a      	ldr	r3, [pc, #296]	; (8014e18 <__kernel_rem_pio2+0x340>)
 8014cee:	2200      	movs	r2, #0
 8014cf0:	4680      	mov	r8, r0
 8014cf2:	4689      	mov	r9, r1
 8014cf4:	f7eb fc98 	bl	8000628 <__aeabi_dmul>
 8014cf8:	4602      	mov	r2, r0
 8014cfa:	460b      	mov	r3, r1
 8014cfc:	4630      	mov	r0, r6
 8014cfe:	4639      	mov	r1, r7
 8014d00:	f7eb fada 	bl	80002b8 <__aeabi_dsub>
 8014d04:	f7eb ff40 	bl	8000b88 <__aeabi_d2iz>
 8014d08:	9b02      	ldr	r3, [sp, #8]
 8014d0a:	f843 0b04 	str.w	r0, [r3], #4
 8014d0e:	3d01      	subs	r5, #1
 8014d10:	9302      	str	r3, [sp, #8]
 8014d12:	ab70      	add	r3, sp, #448	; 0x1c0
 8014d14:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d1c:	4640      	mov	r0, r8
 8014d1e:	4649      	mov	r1, r9
 8014d20:	f7eb facc 	bl	80002bc <__adddf3>
 8014d24:	4606      	mov	r6, r0
 8014d26:	460f      	mov	r7, r1
 8014d28:	e75b      	b.n	8014be2 <__kernel_rem_pio2+0x10a>
 8014d2a:	d105      	bne.n	8014d38 <__kernel_rem_pio2+0x260>
 8014d2c:	1e63      	subs	r3, r4, #1
 8014d2e:	aa0c      	add	r2, sp, #48	; 0x30
 8014d30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014d34:	15c3      	asrs	r3, r0, #23
 8014d36:	e79b      	b.n	8014c70 <__kernel_rem_pio2+0x198>
 8014d38:	4b38      	ldr	r3, [pc, #224]	; (8014e1c <__kernel_rem_pio2+0x344>)
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	f7eb fefa 	bl	8000b34 <__aeabi_dcmpge>
 8014d40:	2800      	cmp	r0, #0
 8014d42:	d139      	bne.n	8014db8 <__kernel_rem_pio2+0x2e0>
 8014d44:	9002      	str	r0, [sp, #8]
 8014d46:	2200      	movs	r2, #0
 8014d48:	2300      	movs	r3, #0
 8014d4a:	4630      	mov	r0, r6
 8014d4c:	4639      	mov	r1, r7
 8014d4e:	f7eb fed3 	bl	8000af8 <__aeabi_dcmpeq>
 8014d52:	2800      	cmp	r0, #0
 8014d54:	f000 80b4 	beq.w	8014ec0 <__kernel_rem_pio2+0x3e8>
 8014d58:	f104 3bff 	add.w	fp, r4, #4294967295
 8014d5c:	465b      	mov	r3, fp
 8014d5e:	2200      	movs	r2, #0
 8014d60:	9904      	ldr	r1, [sp, #16]
 8014d62:	428b      	cmp	r3, r1
 8014d64:	da65      	bge.n	8014e32 <__kernel_rem_pio2+0x35a>
 8014d66:	2a00      	cmp	r2, #0
 8014d68:	d07b      	beq.n	8014e62 <__kernel_rem_pio2+0x38a>
 8014d6a:	ab0c      	add	r3, sp, #48	; 0x30
 8014d6c:	f1aa 0a18 	sub.w	sl, sl, #24
 8014d70:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	f000 80a0 	beq.w	8014eba <__kernel_rem_pio2+0x3e2>
 8014d7a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8014e00 <__kernel_rem_pio2+0x328>
 8014d7e:	4650      	mov	r0, sl
 8014d80:	f000 fb32 	bl	80153e8 <scalbn>
 8014d84:	4f23      	ldr	r7, [pc, #140]	; (8014e14 <__kernel_rem_pio2+0x33c>)
 8014d86:	ec55 4b10 	vmov	r4, r5, d0
 8014d8a:	46d8      	mov	r8, fp
 8014d8c:	2600      	movs	r6, #0
 8014d8e:	f1b8 0f00 	cmp.w	r8, #0
 8014d92:	f280 80cf 	bge.w	8014f34 <__kernel_rem_pio2+0x45c>
 8014d96:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8014df8 <__kernel_rem_pio2+0x320>
 8014d9a:	465f      	mov	r7, fp
 8014d9c:	f04f 0800 	mov.w	r8, #0
 8014da0:	2f00      	cmp	r7, #0
 8014da2:	f2c0 80fd 	blt.w	8014fa0 <__kernel_rem_pio2+0x4c8>
 8014da6:	ab70      	add	r3, sp, #448	; 0x1c0
 8014da8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8014e20 <__kernel_rem_pio2+0x348>
 8014dac:	ec55 4b18 	vmov	r4, r5, d8
 8014db0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8014db4:	2600      	movs	r6, #0
 8014db6:	e0e5      	b.n	8014f84 <__kernel_rem_pio2+0x4ac>
 8014db8:	2302      	movs	r3, #2
 8014dba:	9302      	str	r3, [sp, #8]
 8014dbc:	e75c      	b.n	8014c78 <__kernel_rem_pio2+0x1a0>
 8014dbe:	f8db 3000 	ldr.w	r3, [fp]
 8014dc2:	b955      	cbnz	r5, 8014dda <__kernel_rem_pio2+0x302>
 8014dc4:	b123      	cbz	r3, 8014dd0 <__kernel_rem_pio2+0x2f8>
 8014dc6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8014dca:	f8cb 3000 	str.w	r3, [fp]
 8014dce:	2301      	movs	r3, #1
 8014dd0:	3201      	adds	r2, #1
 8014dd2:	f10b 0b04 	add.w	fp, fp, #4
 8014dd6:	461d      	mov	r5, r3
 8014dd8:	e755      	b.n	8014c86 <__kernel_rem_pio2+0x1ae>
 8014dda:	1acb      	subs	r3, r1, r3
 8014ddc:	f8cb 3000 	str.w	r3, [fp]
 8014de0:	462b      	mov	r3, r5
 8014de2:	e7f5      	b.n	8014dd0 <__kernel_rem_pio2+0x2f8>
 8014de4:	1e62      	subs	r2, r4, #1
 8014de6:	ab0c      	add	r3, sp, #48	; 0x30
 8014de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014df0:	a90c      	add	r1, sp, #48	; 0x30
 8014df2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014df6:	e754      	b.n	8014ca2 <__kernel_rem_pio2+0x1ca>
	...
 8014e04:	3ff00000 	.word	0x3ff00000
 8014e08:	0801af88 	.word	0x0801af88
 8014e0c:	40200000 	.word	0x40200000
 8014e10:	3ff00000 	.word	0x3ff00000
 8014e14:	3e700000 	.word	0x3e700000
 8014e18:	41700000 	.word	0x41700000
 8014e1c:	3fe00000 	.word	0x3fe00000
 8014e20:	0801af48 	.word	0x0801af48
 8014e24:	1e62      	subs	r2, r4, #1
 8014e26:	ab0c      	add	r3, sp, #48	; 0x30
 8014e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e2c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014e30:	e7de      	b.n	8014df0 <__kernel_rem_pio2+0x318>
 8014e32:	a90c      	add	r1, sp, #48	; 0x30
 8014e34:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014e38:	3b01      	subs	r3, #1
 8014e3a:	430a      	orrs	r2, r1
 8014e3c:	e790      	b.n	8014d60 <__kernel_rem_pio2+0x288>
 8014e3e:	3301      	adds	r3, #1
 8014e40:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014e44:	2900      	cmp	r1, #0
 8014e46:	d0fa      	beq.n	8014e3e <__kernel_rem_pio2+0x366>
 8014e48:	9a08      	ldr	r2, [sp, #32]
 8014e4a:	18e3      	adds	r3, r4, r3
 8014e4c:	18a6      	adds	r6, r4, r2
 8014e4e:	aa20      	add	r2, sp, #128	; 0x80
 8014e50:	1c65      	adds	r5, r4, #1
 8014e52:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8014e56:	9302      	str	r3, [sp, #8]
 8014e58:	9b02      	ldr	r3, [sp, #8]
 8014e5a:	42ab      	cmp	r3, r5
 8014e5c:	da04      	bge.n	8014e68 <__kernel_rem_pio2+0x390>
 8014e5e:	461c      	mov	r4, r3
 8014e60:	e6b5      	b.n	8014bce <__kernel_rem_pio2+0xf6>
 8014e62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014e64:	2301      	movs	r3, #1
 8014e66:	e7eb      	b.n	8014e40 <__kernel_rem_pio2+0x368>
 8014e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014e6e:	f7eb fb71 	bl	8000554 <__aeabi_i2d>
 8014e72:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e78:	46b3      	mov	fp, r6
 8014e7a:	461c      	mov	r4, r3
 8014e7c:	2700      	movs	r7, #0
 8014e7e:	f04f 0800 	mov.w	r8, #0
 8014e82:	f04f 0900 	mov.w	r9, #0
 8014e86:	9b06      	ldr	r3, [sp, #24]
 8014e88:	429f      	cmp	r7, r3
 8014e8a:	dd06      	ble.n	8014e9a <__kernel_rem_pio2+0x3c2>
 8014e8c:	ab70      	add	r3, sp, #448	; 0x1c0
 8014e8e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014e92:	e9c3 8900 	strd	r8, r9, [r3]
 8014e96:	3501      	adds	r5, #1
 8014e98:	e7de      	b.n	8014e58 <__kernel_rem_pio2+0x380>
 8014e9a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8014e9e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8014ea2:	f7eb fbc1 	bl	8000628 <__aeabi_dmul>
 8014ea6:	4602      	mov	r2, r0
 8014ea8:	460b      	mov	r3, r1
 8014eaa:	4640      	mov	r0, r8
 8014eac:	4649      	mov	r1, r9
 8014eae:	f7eb fa05 	bl	80002bc <__adddf3>
 8014eb2:	3701      	adds	r7, #1
 8014eb4:	4680      	mov	r8, r0
 8014eb6:	4689      	mov	r9, r1
 8014eb8:	e7e5      	b.n	8014e86 <__kernel_rem_pio2+0x3ae>
 8014eba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014ebe:	e754      	b.n	8014d6a <__kernel_rem_pio2+0x292>
 8014ec0:	ec47 6b10 	vmov	d0, r6, r7
 8014ec4:	f1ca 0000 	rsb	r0, sl, #0
 8014ec8:	f000 fa8e 	bl	80153e8 <scalbn>
 8014ecc:	ec57 6b10 	vmov	r6, r7, d0
 8014ed0:	4b9f      	ldr	r3, [pc, #636]	; (8015150 <__kernel_rem_pio2+0x678>)
 8014ed2:	ee10 0a10 	vmov	r0, s0
 8014ed6:	2200      	movs	r2, #0
 8014ed8:	4639      	mov	r1, r7
 8014eda:	f7eb fe2b 	bl	8000b34 <__aeabi_dcmpge>
 8014ede:	b300      	cbz	r0, 8014f22 <__kernel_rem_pio2+0x44a>
 8014ee0:	4b9c      	ldr	r3, [pc, #624]	; (8015154 <__kernel_rem_pio2+0x67c>)
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	4630      	mov	r0, r6
 8014ee6:	4639      	mov	r1, r7
 8014ee8:	f7eb fb9e 	bl	8000628 <__aeabi_dmul>
 8014eec:	f7eb fe4c 	bl	8000b88 <__aeabi_d2iz>
 8014ef0:	4605      	mov	r5, r0
 8014ef2:	f7eb fb2f 	bl	8000554 <__aeabi_i2d>
 8014ef6:	4b96      	ldr	r3, [pc, #600]	; (8015150 <__kernel_rem_pio2+0x678>)
 8014ef8:	2200      	movs	r2, #0
 8014efa:	f7eb fb95 	bl	8000628 <__aeabi_dmul>
 8014efe:	460b      	mov	r3, r1
 8014f00:	4602      	mov	r2, r0
 8014f02:	4639      	mov	r1, r7
 8014f04:	4630      	mov	r0, r6
 8014f06:	f7eb f9d7 	bl	80002b8 <__aeabi_dsub>
 8014f0a:	f7eb fe3d 	bl	8000b88 <__aeabi_d2iz>
 8014f0e:	f104 0b01 	add.w	fp, r4, #1
 8014f12:	ab0c      	add	r3, sp, #48	; 0x30
 8014f14:	f10a 0a18 	add.w	sl, sl, #24
 8014f18:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014f1c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8014f20:	e72b      	b.n	8014d7a <__kernel_rem_pio2+0x2a2>
 8014f22:	4630      	mov	r0, r6
 8014f24:	4639      	mov	r1, r7
 8014f26:	f7eb fe2f 	bl	8000b88 <__aeabi_d2iz>
 8014f2a:	ab0c      	add	r3, sp, #48	; 0x30
 8014f2c:	46a3      	mov	fp, r4
 8014f2e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014f32:	e722      	b.n	8014d7a <__kernel_rem_pio2+0x2a2>
 8014f34:	ab70      	add	r3, sp, #448	; 0x1c0
 8014f36:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8014f3a:	ab0c      	add	r3, sp, #48	; 0x30
 8014f3c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8014f40:	f7eb fb08 	bl	8000554 <__aeabi_i2d>
 8014f44:	4622      	mov	r2, r4
 8014f46:	462b      	mov	r3, r5
 8014f48:	f7eb fb6e 	bl	8000628 <__aeabi_dmul>
 8014f4c:	4632      	mov	r2, r6
 8014f4e:	e9c9 0100 	strd	r0, r1, [r9]
 8014f52:	463b      	mov	r3, r7
 8014f54:	4620      	mov	r0, r4
 8014f56:	4629      	mov	r1, r5
 8014f58:	f7eb fb66 	bl	8000628 <__aeabi_dmul>
 8014f5c:	f108 38ff 	add.w	r8, r8, #4294967295
 8014f60:	4604      	mov	r4, r0
 8014f62:	460d      	mov	r5, r1
 8014f64:	e713      	b.n	8014d8e <__kernel_rem_pio2+0x2b6>
 8014f66:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8014f6a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8014f6e:	f7eb fb5b 	bl	8000628 <__aeabi_dmul>
 8014f72:	4602      	mov	r2, r0
 8014f74:	460b      	mov	r3, r1
 8014f76:	4620      	mov	r0, r4
 8014f78:	4629      	mov	r1, r5
 8014f7a:	f7eb f99f 	bl	80002bc <__adddf3>
 8014f7e:	3601      	adds	r6, #1
 8014f80:	4604      	mov	r4, r0
 8014f82:	460d      	mov	r5, r1
 8014f84:	9b04      	ldr	r3, [sp, #16]
 8014f86:	429e      	cmp	r6, r3
 8014f88:	dc01      	bgt.n	8014f8e <__kernel_rem_pio2+0x4b6>
 8014f8a:	45b0      	cmp	r8, r6
 8014f8c:	daeb      	bge.n	8014f66 <__kernel_rem_pio2+0x48e>
 8014f8e:	ab48      	add	r3, sp, #288	; 0x120
 8014f90:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014f94:	e9c3 4500 	strd	r4, r5, [r3]
 8014f98:	3f01      	subs	r7, #1
 8014f9a:	f108 0801 	add.w	r8, r8, #1
 8014f9e:	e6ff      	b.n	8014da0 <__kernel_rem_pio2+0x2c8>
 8014fa0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8014fa2:	2b02      	cmp	r3, #2
 8014fa4:	dc0b      	bgt.n	8014fbe <__kernel_rem_pio2+0x4e6>
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	dc6e      	bgt.n	8015088 <__kernel_rem_pio2+0x5b0>
 8014faa:	d045      	beq.n	8015038 <__kernel_rem_pio2+0x560>
 8014fac:	9b07      	ldr	r3, [sp, #28]
 8014fae:	f003 0007 	and.w	r0, r3, #7
 8014fb2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8014fb6:	ecbd 8b02 	vpop	{d8}
 8014fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fbe:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8014fc0:	2b03      	cmp	r3, #3
 8014fc2:	d1f3      	bne.n	8014fac <__kernel_rem_pio2+0x4d4>
 8014fc4:	ab48      	add	r3, sp, #288	; 0x120
 8014fc6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8014fca:	46d0      	mov	r8, sl
 8014fcc:	46d9      	mov	r9, fp
 8014fce:	f1b9 0f00 	cmp.w	r9, #0
 8014fd2:	f1a8 0808 	sub.w	r8, r8, #8
 8014fd6:	dc64      	bgt.n	80150a2 <__kernel_rem_pio2+0x5ca>
 8014fd8:	465c      	mov	r4, fp
 8014fda:	2c01      	cmp	r4, #1
 8014fdc:	f1aa 0a08 	sub.w	sl, sl, #8
 8014fe0:	dc7e      	bgt.n	80150e0 <__kernel_rem_pio2+0x608>
 8014fe2:	2000      	movs	r0, #0
 8014fe4:	2100      	movs	r1, #0
 8014fe6:	f1bb 0f01 	cmp.w	fp, #1
 8014fea:	f300 8097 	bgt.w	801511c <__kernel_rem_pio2+0x644>
 8014fee:	9b02      	ldr	r3, [sp, #8]
 8014ff0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8014ff4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	f040 8099 	bne.w	8015130 <__kernel_rem_pio2+0x658>
 8014ffe:	9b01      	ldr	r3, [sp, #4]
 8015000:	e9c3 5600 	strd	r5, r6, [r3]
 8015004:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8015008:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801500c:	e7ce      	b.n	8014fac <__kernel_rem_pio2+0x4d4>
 801500e:	ab48      	add	r3, sp, #288	; 0x120
 8015010:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015018:	f7eb f950 	bl	80002bc <__adddf3>
 801501c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015020:	f1bb 0f00 	cmp.w	fp, #0
 8015024:	daf3      	bge.n	801500e <__kernel_rem_pio2+0x536>
 8015026:	9b02      	ldr	r3, [sp, #8]
 8015028:	b113      	cbz	r3, 8015030 <__kernel_rem_pio2+0x558>
 801502a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801502e:	4619      	mov	r1, r3
 8015030:	9b01      	ldr	r3, [sp, #4]
 8015032:	e9c3 0100 	strd	r0, r1, [r3]
 8015036:	e7b9      	b.n	8014fac <__kernel_rem_pio2+0x4d4>
 8015038:	2000      	movs	r0, #0
 801503a:	2100      	movs	r1, #0
 801503c:	e7f0      	b.n	8015020 <__kernel_rem_pio2+0x548>
 801503e:	ab48      	add	r3, sp, #288	; 0x120
 8015040:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015048:	f7eb f938 	bl	80002bc <__adddf3>
 801504c:	3c01      	subs	r4, #1
 801504e:	2c00      	cmp	r4, #0
 8015050:	daf5      	bge.n	801503e <__kernel_rem_pio2+0x566>
 8015052:	9b02      	ldr	r3, [sp, #8]
 8015054:	b1e3      	cbz	r3, 8015090 <__kernel_rem_pio2+0x5b8>
 8015056:	4602      	mov	r2, r0
 8015058:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801505c:	9c01      	ldr	r4, [sp, #4]
 801505e:	e9c4 2300 	strd	r2, r3, [r4]
 8015062:	4602      	mov	r2, r0
 8015064:	460b      	mov	r3, r1
 8015066:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801506a:	f7eb f925 	bl	80002b8 <__aeabi_dsub>
 801506e:	ad4a      	add	r5, sp, #296	; 0x128
 8015070:	2401      	movs	r4, #1
 8015072:	45a3      	cmp	fp, r4
 8015074:	da0f      	bge.n	8015096 <__kernel_rem_pio2+0x5be>
 8015076:	9b02      	ldr	r3, [sp, #8]
 8015078:	b113      	cbz	r3, 8015080 <__kernel_rem_pio2+0x5a8>
 801507a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801507e:	4619      	mov	r1, r3
 8015080:	9b01      	ldr	r3, [sp, #4]
 8015082:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8015086:	e791      	b.n	8014fac <__kernel_rem_pio2+0x4d4>
 8015088:	465c      	mov	r4, fp
 801508a:	2000      	movs	r0, #0
 801508c:	2100      	movs	r1, #0
 801508e:	e7de      	b.n	801504e <__kernel_rem_pio2+0x576>
 8015090:	4602      	mov	r2, r0
 8015092:	460b      	mov	r3, r1
 8015094:	e7e2      	b.n	801505c <__kernel_rem_pio2+0x584>
 8015096:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801509a:	f7eb f90f 	bl	80002bc <__adddf3>
 801509e:	3401      	adds	r4, #1
 80150a0:	e7e7      	b.n	8015072 <__kernel_rem_pio2+0x59a>
 80150a2:	e9d8 4500 	ldrd	r4, r5, [r8]
 80150a6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80150aa:	4620      	mov	r0, r4
 80150ac:	4632      	mov	r2, r6
 80150ae:	463b      	mov	r3, r7
 80150b0:	4629      	mov	r1, r5
 80150b2:	f7eb f903 	bl	80002bc <__adddf3>
 80150b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80150ba:	4602      	mov	r2, r0
 80150bc:	460b      	mov	r3, r1
 80150be:	4620      	mov	r0, r4
 80150c0:	4629      	mov	r1, r5
 80150c2:	f7eb f8f9 	bl	80002b8 <__aeabi_dsub>
 80150c6:	4632      	mov	r2, r6
 80150c8:	463b      	mov	r3, r7
 80150ca:	f7eb f8f7 	bl	80002bc <__adddf3>
 80150ce:	ed9d 7b04 	vldr	d7, [sp, #16]
 80150d2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80150d6:	ed88 7b00 	vstr	d7, [r8]
 80150da:	f109 39ff 	add.w	r9, r9, #4294967295
 80150de:	e776      	b.n	8014fce <__kernel_rem_pio2+0x4f6>
 80150e0:	e9da 8900 	ldrd	r8, r9, [sl]
 80150e4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80150e8:	4640      	mov	r0, r8
 80150ea:	4632      	mov	r2, r6
 80150ec:	463b      	mov	r3, r7
 80150ee:	4649      	mov	r1, r9
 80150f0:	f7eb f8e4 	bl	80002bc <__adddf3>
 80150f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80150f8:	4602      	mov	r2, r0
 80150fa:	460b      	mov	r3, r1
 80150fc:	4640      	mov	r0, r8
 80150fe:	4649      	mov	r1, r9
 8015100:	f7eb f8da 	bl	80002b8 <__aeabi_dsub>
 8015104:	4632      	mov	r2, r6
 8015106:	463b      	mov	r3, r7
 8015108:	f7eb f8d8 	bl	80002bc <__adddf3>
 801510c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8015110:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015114:	ed8a 7b00 	vstr	d7, [sl]
 8015118:	3c01      	subs	r4, #1
 801511a:	e75e      	b.n	8014fda <__kernel_rem_pio2+0x502>
 801511c:	ab48      	add	r3, sp, #288	; 0x120
 801511e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015126:	f7eb f8c9 	bl	80002bc <__adddf3>
 801512a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801512e:	e75a      	b.n	8014fe6 <__kernel_rem_pio2+0x50e>
 8015130:	9b01      	ldr	r3, [sp, #4]
 8015132:	9a01      	ldr	r2, [sp, #4]
 8015134:	601d      	str	r5, [r3, #0]
 8015136:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801513a:	605c      	str	r4, [r3, #4]
 801513c:	609f      	str	r7, [r3, #8]
 801513e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8015142:	60d3      	str	r3, [r2, #12]
 8015144:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015148:	6110      	str	r0, [r2, #16]
 801514a:	6153      	str	r3, [r2, #20]
 801514c:	e72e      	b.n	8014fac <__kernel_rem_pio2+0x4d4>
 801514e:	bf00      	nop
 8015150:	41700000 	.word	0x41700000
 8015154:	3e700000 	.word	0x3e700000

08015158 <__kernel_sin>:
 8015158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801515c:	ed2d 8b04 	vpush	{d8-d9}
 8015160:	eeb0 8a41 	vmov.f32	s16, s2
 8015164:	eef0 8a61 	vmov.f32	s17, s3
 8015168:	ec55 4b10 	vmov	r4, r5, d0
 801516c:	b083      	sub	sp, #12
 801516e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015172:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8015176:	9001      	str	r0, [sp, #4]
 8015178:	da06      	bge.n	8015188 <__kernel_sin+0x30>
 801517a:	ee10 0a10 	vmov	r0, s0
 801517e:	4629      	mov	r1, r5
 8015180:	f7eb fd02 	bl	8000b88 <__aeabi_d2iz>
 8015184:	2800      	cmp	r0, #0
 8015186:	d051      	beq.n	801522c <__kernel_sin+0xd4>
 8015188:	4622      	mov	r2, r4
 801518a:	462b      	mov	r3, r5
 801518c:	4620      	mov	r0, r4
 801518e:	4629      	mov	r1, r5
 8015190:	f7eb fa4a 	bl	8000628 <__aeabi_dmul>
 8015194:	4682      	mov	sl, r0
 8015196:	468b      	mov	fp, r1
 8015198:	4602      	mov	r2, r0
 801519a:	460b      	mov	r3, r1
 801519c:	4620      	mov	r0, r4
 801519e:	4629      	mov	r1, r5
 80151a0:	f7eb fa42 	bl	8000628 <__aeabi_dmul>
 80151a4:	a341      	add	r3, pc, #260	; (adr r3, 80152ac <__kernel_sin+0x154>)
 80151a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151aa:	4680      	mov	r8, r0
 80151ac:	4689      	mov	r9, r1
 80151ae:	4650      	mov	r0, sl
 80151b0:	4659      	mov	r1, fp
 80151b2:	f7eb fa39 	bl	8000628 <__aeabi_dmul>
 80151b6:	a33f      	add	r3, pc, #252	; (adr r3, 80152b4 <__kernel_sin+0x15c>)
 80151b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151bc:	f7eb f87c 	bl	80002b8 <__aeabi_dsub>
 80151c0:	4652      	mov	r2, sl
 80151c2:	465b      	mov	r3, fp
 80151c4:	f7eb fa30 	bl	8000628 <__aeabi_dmul>
 80151c8:	a33c      	add	r3, pc, #240	; (adr r3, 80152bc <__kernel_sin+0x164>)
 80151ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ce:	f7eb f875 	bl	80002bc <__adddf3>
 80151d2:	4652      	mov	r2, sl
 80151d4:	465b      	mov	r3, fp
 80151d6:	f7eb fa27 	bl	8000628 <__aeabi_dmul>
 80151da:	a33a      	add	r3, pc, #232	; (adr r3, 80152c4 <__kernel_sin+0x16c>)
 80151dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151e0:	f7eb f86a 	bl	80002b8 <__aeabi_dsub>
 80151e4:	4652      	mov	r2, sl
 80151e6:	465b      	mov	r3, fp
 80151e8:	f7eb fa1e 	bl	8000628 <__aeabi_dmul>
 80151ec:	a337      	add	r3, pc, #220	; (adr r3, 80152cc <__kernel_sin+0x174>)
 80151ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151f2:	f7eb f863 	bl	80002bc <__adddf3>
 80151f6:	9b01      	ldr	r3, [sp, #4]
 80151f8:	4606      	mov	r6, r0
 80151fa:	460f      	mov	r7, r1
 80151fc:	b9eb      	cbnz	r3, 801523a <__kernel_sin+0xe2>
 80151fe:	4602      	mov	r2, r0
 8015200:	460b      	mov	r3, r1
 8015202:	4650      	mov	r0, sl
 8015204:	4659      	mov	r1, fp
 8015206:	f7eb fa0f 	bl	8000628 <__aeabi_dmul>
 801520a:	a325      	add	r3, pc, #148	; (adr r3, 80152a0 <__kernel_sin+0x148>)
 801520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015210:	f7eb f852 	bl	80002b8 <__aeabi_dsub>
 8015214:	4642      	mov	r2, r8
 8015216:	464b      	mov	r3, r9
 8015218:	f7eb fa06 	bl	8000628 <__aeabi_dmul>
 801521c:	4602      	mov	r2, r0
 801521e:	460b      	mov	r3, r1
 8015220:	4620      	mov	r0, r4
 8015222:	4629      	mov	r1, r5
 8015224:	f7eb f84a 	bl	80002bc <__adddf3>
 8015228:	4604      	mov	r4, r0
 801522a:	460d      	mov	r5, r1
 801522c:	ec45 4b10 	vmov	d0, r4, r5
 8015230:	b003      	add	sp, #12
 8015232:	ecbd 8b04 	vpop	{d8-d9}
 8015236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801523a:	4b1b      	ldr	r3, [pc, #108]	; (80152a8 <__kernel_sin+0x150>)
 801523c:	ec51 0b18 	vmov	r0, r1, d8
 8015240:	2200      	movs	r2, #0
 8015242:	f7eb f9f1 	bl	8000628 <__aeabi_dmul>
 8015246:	4632      	mov	r2, r6
 8015248:	ec41 0b19 	vmov	d9, r0, r1
 801524c:	463b      	mov	r3, r7
 801524e:	4640      	mov	r0, r8
 8015250:	4649      	mov	r1, r9
 8015252:	f7eb f9e9 	bl	8000628 <__aeabi_dmul>
 8015256:	4602      	mov	r2, r0
 8015258:	460b      	mov	r3, r1
 801525a:	ec51 0b19 	vmov	r0, r1, d9
 801525e:	f7eb f82b 	bl	80002b8 <__aeabi_dsub>
 8015262:	4652      	mov	r2, sl
 8015264:	465b      	mov	r3, fp
 8015266:	f7eb f9df 	bl	8000628 <__aeabi_dmul>
 801526a:	ec53 2b18 	vmov	r2, r3, d8
 801526e:	f7eb f823 	bl	80002b8 <__aeabi_dsub>
 8015272:	a30b      	add	r3, pc, #44	; (adr r3, 80152a0 <__kernel_sin+0x148>)
 8015274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015278:	4606      	mov	r6, r0
 801527a:	460f      	mov	r7, r1
 801527c:	4640      	mov	r0, r8
 801527e:	4649      	mov	r1, r9
 8015280:	f7eb f9d2 	bl	8000628 <__aeabi_dmul>
 8015284:	4602      	mov	r2, r0
 8015286:	460b      	mov	r3, r1
 8015288:	4630      	mov	r0, r6
 801528a:	4639      	mov	r1, r7
 801528c:	f7eb f816 	bl	80002bc <__adddf3>
 8015290:	4602      	mov	r2, r0
 8015292:	460b      	mov	r3, r1
 8015294:	4620      	mov	r0, r4
 8015296:	4629      	mov	r1, r5
 8015298:	f7eb f80e 	bl	80002b8 <__aeabi_dsub>
 801529c:	e7c4      	b.n	8015228 <__kernel_sin+0xd0>
 801529e:	bf00      	nop
 80152a0:	55555549 	.word	0x55555549
 80152a4:	3fc55555 	.word	0x3fc55555
 80152a8:	3fe00000 	.word	0x3fe00000
 80152ac:	5acfd57c 	.word	0x5acfd57c
 80152b0:	3de5d93a 	.word	0x3de5d93a
 80152b4:	8a2b9ceb 	.word	0x8a2b9ceb
 80152b8:	3e5ae5e6 	.word	0x3e5ae5e6
 80152bc:	57b1fe7d 	.word	0x57b1fe7d
 80152c0:	3ec71de3 	.word	0x3ec71de3
 80152c4:	19c161d5 	.word	0x19c161d5
 80152c8:	3f2a01a0 	.word	0x3f2a01a0
 80152cc:	1110f8a6 	.word	0x1110f8a6
 80152d0:	3f811111 	.word	0x3f811111

080152d4 <fabs>:
 80152d4:	ec51 0b10 	vmov	r0, r1, d0
 80152d8:	ee10 2a10 	vmov	r2, s0
 80152dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80152e0:	ec43 2b10 	vmov	d0, r2, r3
 80152e4:	4770      	bx	lr
	...

080152e8 <floor>:
 80152e8:	ec51 0b10 	vmov	r0, r1, d0
 80152ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80152f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80152f8:	2e13      	cmp	r6, #19
 80152fa:	ee10 5a10 	vmov	r5, s0
 80152fe:	ee10 8a10 	vmov	r8, s0
 8015302:	460c      	mov	r4, r1
 8015304:	dc32      	bgt.n	801536c <floor+0x84>
 8015306:	2e00      	cmp	r6, #0
 8015308:	da14      	bge.n	8015334 <floor+0x4c>
 801530a:	a333      	add	r3, pc, #204	; (adr r3, 80153d8 <floor+0xf0>)
 801530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015310:	f7ea ffd4 	bl	80002bc <__adddf3>
 8015314:	2200      	movs	r2, #0
 8015316:	2300      	movs	r3, #0
 8015318:	f7eb fc16 	bl	8000b48 <__aeabi_dcmpgt>
 801531c:	b138      	cbz	r0, 801532e <floor+0x46>
 801531e:	2c00      	cmp	r4, #0
 8015320:	da57      	bge.n	80153d2 <floor+0xea>
 8015322:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015326:	431d      	orrs	r5, r3
 8015328:	d001      	beq.n	801532e <floor+0x46>
 801532a:	4c2d      	ldr	r4, [pc, #180]	; (80153e0 <floor+0xf8>)
 801532c:	2500      	movs	r5, #0
 801532e:	4621      	mov	r1, r4
 8015330:	4628      	mov	r0, r5
 8015332:	e025      	b.n	8015380 <floor+0x98>
 8015334:	4f2b      	ldr	r7, [pc, #172]	; (80153e4 <floor+0xfc>)
 8015336:	4137      	asrs	r7, r6
 8015338:	ea01 0307 	and.w	r3, r1, r7
 801533c:	4303      	orrs	r3, r0
 801533e:	d01f      	beq.n	8015380 <floor+0x98>
 8015340:	a325      	add	r3, pc, #148	; (adr r3, 80153d8 <floor+0xf0>)
 8015342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015346:	f7ea ffb9 	bl	80002bc <__adddf3>
 801534a:	2200      	movs	r2, #0
 801534c:	2300      	movs	r3, #0
 801534e:	f7eb fbfb 	bl	8000b48 <__aeabi_dcmpgt>
 8015352:	2800      	cmp	r0, #0
 8015354:	d0eb      	beq.n	801532e <floor+0x46>
 8015356:	2c00      	cmp	r4, #0
 8015358:	bfbe      	ittt	lt
 801535a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801535e:	fa43 f606 	asrlt.w	r6, r3, r6
 8015362:	19a4      	addlt	r4, r4, r6
 8015364:	ea24 0407 	bic.w	r4, r4, r7
 8015368:	2500      	movs	r5, #0
 801536a:	e7e0      	b.n	801532e <floor+0x46>
 801536c:	2e33      	cmp	r6, #51	; 0x33
 801536e:	dd0b      	ble.n	8015388 <floor+0xa0>
 8015370:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015374:	d104      	bne.n	8015380 <floor+0x98>
 8015376:	ee10 2a10 	vmov	r2, s0
 801537a:	460b      	mov	r3, r1
 801537c:	f7ea ff9e 	bl	80002bc <__adddf3>
 8015380:	ec41 0b10 	vmov	d0, r0, r1
 8015384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015388:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801538c:	f04f 33ff 	mov.w	r3, #4294967295
 8015390:	fa23 f707 	lsr.w	r7, r3, r7
 8015394:	4207      	tst	r7, r0
 8015396:	d0f3      	beq.n	8015380 <floor+0x98>
 8015398:	a30f      	add	r3, pc, #60	; (adr r3, 80153d8 <floor+0xf0>)
 801539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801539e:	f7ea ff8d 	bl	80002bc <__adddf3>
 80153a2:	2200      	movs	r2, #0
 80153a4:	2300      	movs	r3, #0
 80153a6:	f7eb fbcf 	bl	8000b48 <__aeabi_dcmpgt>
 80153aa:	2800      	cmp	r0, #0
 80153ac:	d0bf      	beq.n	801532e <floor+0x46>
 80153ae:	2c00      	cmp	r4, #0
 80153b0:	da02      	bge.n	80153b8 <floor+0xd0>
 80153b2:	2e14      	cmp	r6, #20
 80153b4:	d103      	bne.n	80153be <floor+0xd6>
 80153b6:	3401      	adds	r4, #1
 80153b8:	ea25 0507 	bic.w	r5, r5, r7
 80153bc:	e7b7      	b.n	801532e <floor+0x46>
 80153be:	2301      	movs	r3, #1
 80153c0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80153c4:	fa03 f606 	lsl.w	r6, r3, r6
 80153c8:	4435      	add	r5, r6
 80153ca:	4545      	cmp	r5, r8
 80153cc:	bf38      	it	cc
 80153ce:	18e4      	addcc	r4, r4, r3
 80153d0:	e7f2      	b.n	80153b8 <floor+0xd0>
 80153d2:	2500      	movs	r5, #0
 80153d4:	462c      	mov	r4, r5
 80153d6:	e7aa      	b.n	801532e <floor+0x46>
 80153d8:	8800759c 	.word	0x8800759c
 80153dc:	7e37e43c 	.word	0x7e37e43c
 80153e0:	bff00000 	.word	0xbff00000
 80153e4:	000fffff 	.word	0x000fffff

080153e8 <scalbn>:
 80153e8:	b570      	push	{r4, r5, r6, lr}
 80153ea:	ec55 4b10 	vmov	r4, r5, d0
 80153ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80153f2:	4606      	mov	r6, r0
 80153f4:	462b      	mov	r3, r5
 80153f6:	b99a      	cbnz	r2, 8015420 <scalbn+0x38>
 80153f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80153fc:	4323      	orrs	r3, r4
 80153fe:	d036      	beq.n	801546e <scalbn+0x86>
 8015400:	4b39      	ldr	r3, [pc, #228]	; (80154e8 <scalbn+0x100>)
 8015402:	4629      	mov	r1, r5
 8015404:	ee10 0a10 	vmov	r0, s0
 8015408:	2200      	movs	r2, #0
 801540a:	f7eb f90d 	bl	8000628 <__aeabi_dmul>
 801540e:	4b37      	ldr	r3, [pc, #220]	; (80154ec <scalbn+0x104>)
 8015410:	429e      	cmp	r6, r3
 8015412:	4604      	mov	r4, r0
 8015414:	460d      	mov	r5, r1
 8015416:	da10      	bge.n	801543a <scalbn+0x52>
 8015418:	a32b      	add	r3, pc, #172	; (adr r3, 80154c8 <scalbn+0xe0>)
 801541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801541e:	e03a      	b.n	8015496 <scalbn+0xae>
 8015420:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015424:	428a      	cmp	r2, r1
 8015426:	d10c      	bne.n	8015442 <scalbn+0x5a>
 8015428:	ee10 2a10 	vmov	r2, s0
 801542c:	4620      	mov	r0, r4
 801542e:	4629      	mov	r1, r5
 8015430:	f7ea ff44 	bl	80002bc <__adddf3>
 8015434:	4604      	mov	r4, r0
 8015436:	460d      	mov	r5, r1
 8015438:	e019      	b.n	801546e <scalbn+0x86>
 801543a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801543e:	460b      	mov	r3, r1
 8015440:	3a36      	subs	r2, #54	; 0x36
 8015442:	4432      	add	r2, r6
 8015444:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015448:	428a      	cmp	r2, r1
 801544a:	dd08      	ble.n	801545e <scalbn+0x76>
 801544c:	2d00      	cmp	r5, #0
 801544e:	a120      	add	r1, pc, #128	; (adr r1, 80154d0 <scalbn+0xe8>)
 8015450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015454:	da1c      	bge.n	8015490 <scalbn+0xa8>
 8015456:	a120      	add	r1, pc, #128	; (adr r1, 80154d8 <scalbn+0xf0>)
 8015458:	e9d1 0100 	ldrd	r0, r1, [r1]
 801545c:	e018      	b.n	8015490 <scalbn+0xa8>
 801545e:	2a00      	cmp	r2, #0
 8015460:	dd08      	ble.n	8015474 <scalbn+0x8c>
 8015462:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015466:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801546a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801546e:	ec45 4b10 	vmov	d0, r4, r5
 8015472:	bd70      	pop	{r4, r5, r6, pc}
 8015474:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015478:	da19      	bge.n	80154ae <scalbn+0xc6>
 801547a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801547e:	429e      	cmp	r6, r3
 8015480:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8015484:	dd0a      	ble.n	801549c <scalbn+0xb4>
 8015486:	a112      	add	r1, pc, #72	; (adr r1, 80154d0 <scalbn+0xe8>)
 8015488:	e9d1 0100 	ldrd	r0, r1, [r1]
 801548c:	2b00      	cmp	r3, #0
 801548e:	d1e2      	bne.n	8015456 <scalbn+0x6e>
 8015490:	a30f      	add	r3, pc, #60	; (adr r3, 80154d0 <scalbn+0xe8>)
 8015492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015496:	f7eb f8c7 	bl	8000628 <__aeabi_dmul>
 801549a:	e7cb      	b.n	8015434 <scalbn+0x4c>
 801549c:	a10a      	add	r1, pc, #40	; (adr r1, 80154c8 <scalbn+0xe0>)
 801549e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d0b8      	beq.n	8015418 <scalbn+0x30>
 80154a6:	a10e      	add	r1, pc, #56	; (adr r1, 80154e0 <scalbn+0xf8>)
 80154a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154ac:	e7b4      	b.n	8015418 <scalbn+0x30>
 80154ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80154b2:	3236      	adds	r2, #54	; 0x36
 80154b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80154b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80154bc:	4620      	mov	r0, r4
 80154be:	4b0c      	ldr	r3, [pc, #48]	; (80154f0 <scalbn+0x108>)
 80154c0:	2200      	movs	r2, #0
 80154c2:	e7e8      	b.n	8015496 <scalbn+0xae>
 80154c4:	f3af 8000 	nop.w
 80154c8:	c2f8f359 	.word	0xc2f8f359
 80154cc:	01a56e1f 	.word	0x01a56e1f
 80154d0:	8800759c 	.word	0x8800759c
 80154d4:	7e37e43c 	.word	0x7e37e43c
 80154d8:	8800759c 	.word	0x8800759c
 80154dc:	fe37e43c 	.word	0xfe37e43c
 80154e0:	c2f8f359 	.word	0xc2f8f359
 80154e4:	81a56e1f 	.word	0x81a56e1f
 80154e8:	43500000 	.word	0x43500000
 80154ec:	ffff3cb0 	.word	0xffff3cb0
 80154f0:	3c900000 	.word	0x3c900000

080154f4 <__errno>:
 80154f4:	4b01      	ldr	r3, [pc, #4]	; (80154fc <__errno+0x8>)
 80154f6:	6818      	ldr	r0, [r3, #0]
 80154f8:	4770      	bx	lr
 80154fa:	bf00      	nop
 80154fc:	2000000c 	.word	0x2000000c

08015500 <__libc_init_array>:
 8015500:	b570      	push	{r4, r5, r6, lr}
 8015502:	4d0d      	ldr	r5, [pc, #52]	; (8015538 <__libc_init_array+0x38>)
 8015504:	4c0d      	ldr	r4, [pc, #52]	; (801553c <__libc_init_array+0x3c>)
 8015506:	1b64      	subs	r4, r4, r5
 8015508:	10a4      	asrs	r4, r4, #2
 801550a:	2600      	movs	r6, #0
 801550c:	42a6      	cmp	r6, r4
 801550e:	d109      	bne.n	8015524 <__libc_init_array+0x24>
 8015510:	4d0b      	ldr	r5, [pc, #44]	; (8015540 <__libc_init_array+0x40>)
 8015512:	4c0c      	ldr	r4, [pc, #48]	; (8015544 <__libc_init_array+0x44>)
 8015514:	f005 f8d6 	bl	801a6c4 <_init>
 8015518:	1b64      	subs	r4, r4, r5
 801551a:	10a4      	asrs	r4, r4, #2
 801551c:	2600      	movs	r6, #0
 801551e:	42a6      	cmp	r6, r4
 8015520:	d105      	bne.n	801552e <__libc_init_array+0x2e>
 8015522:	bd70      	pop	{r4, r5, r6, pc}
 8015524:	f855 3b04 	ldr.w	r3, [r5], #4
 8015528:	4798      	blx	r3
 801552a:	3601      	adds	r6, #1
 801552c:	e7ee      	b.n	801550c <__libc_init_array+0xc>
 801552e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015532:	4798      	blx	r3
 8015534:	3601      	adds	r6, #1
 8015536:	e7f2      	b.n	801551e <__libc_init_array+0x1e>
 8015538:	0801b46c 	.word	0x0801b46c
 801553c:	0801b46c 	.word	0x0801b46c
 8015540:	0801b46c 	.word	0x0801b46c
 8015544:	0801b474 	.word	0x0801b474

08015548 <memcpy>:
 8015548:	440a      	add	r2, r1
 801554a:	4291      	cmp	r1, r2
 801554c:	f100 33ff 	add.w	r3, r0, #4294967295
 8015550:	d100      	bne.n	8015554 <memcpy+0xc>
 8015552:	4770      	bx	lr
 8015554:	b510      	push	{r4, lr}
 8015556:	f811 4b01 	ldrb.w	r4, [r1], #1
 801555a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801555e:	4291      	cmp	r1, r2
 8015560:	d1f9      	bne.n	8015556 <memcpy+0xe>
 8015562:	bd10      	pop	{r4, pc}

08015564 <memset>:
 8015564:	4402      	add	r2, r0
 8015566:	4603      	mov	r3, r0
 8015568:	4293      	cmp	r3, r2
 801556a:	d100      	bne.n	801556e <memset+0xa>
 801556c:	4770      	bx	lr
 801556e:	f803 1b01 	strb.w	r1, [r3], #1
 8015572:	e7f9      	b.n	8015568 <memset+0x4>

08015574 <__cvt>:
 8015574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015578:	ec55 4b10 	vmov	r4, r5, d0
 801557c:	2d00      	cmp	r5, #0
 801557e:	460e      	mov	r6, r1
 8015580:	4619      	mov	r1, r3
 8015582:	462b      	mov	r3, r5
 8015584:	bfbb      	ittet	lt
 8015586:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801558a:	461d      	movlt	r5, r3
 801558c:	2300      	movge	r3, #0
 801558e:	232d      	movlt	r3, #45	; 0x2d
 8015590:	700b      	strb	r3, [r1, #0]
 8015592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015594:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015598:	4691      	mov	r9, r2
 801559a:	f023 0820 	bic.w	r8, r3, #32
 801559e:	bfbc      	itt	lt
 80155a0:	4622      	movlt	r2, r4
 80155a2:	4614      	movlt	r4, r2
 80155a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80155a8:	d005      	beq.n	80155b6 <__cvt+0x42>
 80155aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80155ae:	d100      	bne.n	80155b2 <__cvt+0x3e>
 80155b0:	3601      	adds	r6, #1
 80155b2:	2102      	movs	r1, #2
 80155b4:	e000      	b.n	80155b8 <__cvt+0x44>
 80155b6:	2103      	movs	r1, #3
 80155b8:	ab03      	add	r3, sp, #12
 80155ba:	9301      	str	r3, [sp, #4]
 80155bc:	ab02      	add	r3, sp, #8
 80155be:	9300      	str	r3, [sp, #0]
 80155c0:	ec45 4b10 	vmov	d0, r4, r5
 80155c4:	4653      	mov	r3, sl
 80155c6:	4632      	mov	r2, r6
 80155c8:	f001 fe9a 	bl	8017300 <_dtoa_r>
 80155cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80155d0:	4607      	mov	r7, r0
 80155d2:	d102      	bne.n	80155da <__cvt+0x66>
 80155d4:	f019 0f01 	tst.w	r9, #1
 80155d8:	d022      	beq.n	8015620 <__cvt+0xac>
 80155da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80155de:	eb07 0906 	add.w	r9, r7, r6
 80155e2:	d110      	bne.n	8015606 <__cvt+0x92>
 80155e4:	783b      	ldrb	r3, [r7, #0]
 80155e6:	2b30      	cmp	r3, #48	; 0x30
 80155e8:	d10a      	bne.n	8015600 <__cvt+0x8c>
 80155ea:	2200      	movs	r2, #0
 80155ec:	2300      	movs	r3, #0
 80155ee:	4620      	mov	r0, r4
 80155f0:	4629      	mov	r1, r5
 80155f2:	f7eb fa81 	bl	8000af8 <__aeabi_dcmpeq>
 80155f6:	b918      	cbnz	r0, 8015600 <__cvt+0x8c>
 80155f8:	f1c6 0601 	rsb	r6, r6, #1
 80155fc:	f8ca 6000 	str.w	r6, [sl]
 8015600:	f8da 3000 	ldr.w	r3, [sl]
 8015604:	4499      	add	r9, r3
 8015606:	2200      	movs	r2, #0
 8015608:	2300      	movs	r3, #0
 801560a:	4620      	mov	r0, r4
 801560c:	4629      	mov	r1, r5
 801560e:	f7eb fa73 	bl	8000af8 <__aeabi_dcmpeq>
 8015612:	b108      	cbz	r0, 8015618 <__cvt+0xa4>
 8015614:	f8cd 900c 	str.w	r9, [sp, #12]
 8015618:	2230      	movs	r2, #48	; 0x30
 801561a:	9b03      	ldr	r3, [sp, #12]
 801561c:	454b      	cmp	r3, r9
 801561e:	d307      	bcc.n	8015630 <__cvt+0xbc>
 8015620:	9b03      	ldr	r3, [sp, #12]
 8015622:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015624:	1bdb      	subs	r3, r3, r7
 8015626:	4638      	mov	r0, r7
 8015628:	6013      	str	r3, [r2, #0]
 801562a:	b004      	add	sp, #16
 801562c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015630:	1c59      	adds	r1, r3, #1
 8015632:	9103      	str	r1, [sp, #12]
 8015634:	701a      	strb	r2, [r3, #0]
 8015636:	e7f0      	b.n	801561a <__cvt+0xa6>

08015638 <__exponent>:
 8015638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801563a:	4603      	mov	r3, r0
 801563c:	2900      	cmp	r1, #0
 801563e:	bfb8      	it	lt
 8015640:	4249      	neglt	r1, r1
 8015642:	f803 2b02 	strb.w	r2, [r3], #2
 8015646:	bfb4      	ite	lt
 8015648:	222d      	movlt	r2, #45	; 0x2d
 801564a:	222b      	movge	r2, #43	; 0x2b
 801564c:	2909      	cmp	r1, #9
 801564e:	7042      	strb	r2, [r0, #1]
 8015650:	dd2a      	ble.n	80156a8 <__exponent+0x70>
 8015652:	f10d 0407 	add.w	r4, sp, #7
 8015656:	46a4      	mov	ip, r4
 8015658:	270a      	movs	r7, #10
 801565a:	46a6      	mov	lr, r4
 801565c:	460a      	mov	r2, r1
 801565e:	fb91 f6f7 	sdiv	r6, r1, r7
 8015662:	fb07 1516 	mls	r5, r7, r6, r1
 8015666:	3530      	adds	r5, #48	; 0x30
 8015668:	2a63      	cmp	r2, #99	; 0x63
 801566a:	f104 34ff 	add.w	r4, r4, #4294967295
 801566e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015672:	4631      	mov	r1, r6
 8015674:	dcf1      	bgt.n	801565a <__exponent+0x22>
 8015676:	3130      	adds	r1, #48	; 0x30
 8015678:	f1ae 0502 	sub.w	r5, lr, #2
 801567c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015680:	1c44      	adds	r4, r0, #1
 8015682:	4629      	mov	r1, r5
 8015684:	4561      	cmp	r1, ip
 8015686:	d30a      	bcc.n	801569e <__exponent+0x66>
 8015688:	f10d 0209 	add.w	r2, sp, #9
 801568c:	eba2 020e 	sub.w	r2, r2, lr
 8015690:	4565      	cmp	r5, ip
 8015692:	bf88      	it	hi
 8015694:	2200      	movhi	r2, #0
 8015696:	4413      	add	r3, r2
 8015698:	1a18      	subs	r0, r3, r0
 801569a:	b003      	add	sp, #12
 801569c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801569e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80156a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80156a6:	e7ed      	b.n	8015684 <__exponent+0x4c>
 80156a8:	2330      	movs	r3, #48	; 0x30
 80156aa:	3130      	adds	r1, #48	; 0x30
 80156ac:	7083      	strb	r3, [r0, #2]
 80156ae:	70c1      	strb	r1, [r0, #3]
 80156b0:	1d03      	adds	r3, r0, #4
 80156b2:	e7f1      	b.n	8015698 <__exponent+0x60>

080156b4 <_printf_float>:
 80156b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156b8:	ed2d 8b02 	vpush	{d8}
 80156bc:	b08d      	sub	sp, #52	; 0x34
 80156be:	460c      	mov	r4, r1
 80156c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80156c4:	4616      	mov	r6, r2
 80156c6:	461f      	mov	r7, r3
 80156c8:	4605      	mov	r5, r0
 80156ca:	f003 f869 	bl	80187a0 <_localeconv_r>
 80156ce:	f8d0 a000 	ldr.w	sl, [r0]
 80156d2:	4650      	mov	r0, sl
 80156d4:	f7ea fd94 	bl	8000200 <strlen>
 80156d8:	2300      	movs	r3, #0
 80156da:	930a      	str	r3, [sp, #40]	; 0x28
 80156dc:	6823      	ldr	r3, [r4, #0]
 80156de:	9305      	str	r3, [sp, #20]
 80156e0:	f8d8 3000 	ldr.w	r3, [r8]
 80156e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80156e8:	3307      	adds	r3, #7
 80156ea:	f023 0307 	bic.w	r3, r3, #7
 80156ee:	f103 0208 	add.w	r2, r3, #8
 80156f2:	f8c8 2000 	str.w	r2, [r8]
 80156f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80156fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015702:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015706:	9307      	str	r3, [sp, #28]
 8015708:	f8cd 8018 	str.w	r8, [sp, #24]
 801570c:	ee08 0a10 	vmov	s16, r0
 8015710:	4b9f      	ldr	r3, [pc, #636]	; (8015990 <_printf_float+0x2dc>)
 8015712:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015716:	f04f 32ff 	mov.w	r2, #4294967295
 801571a:	f7eb fa1f 	bl	8000b5c <__aeabi_dcmpun>
 801571e:	bb88      	cbnz	r0, 8015784 <_printf_float+0xd0>
 8015720:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015724:	4b9a      	ldr	r3, [pc, #616]	; (8015990 <_printf_float+0x2dc>)
 8015726:	f04f 32ff 	mov.w	r2, #4294967295
 801572a:	f7eb f9f9 	bl	8000b20 <__aeabi_dcmple>
 801572e:	bb48      	cbnz	r0, 8015784 <_printf_float+0xd0>
 8015730:	2200      	movs	r2, #0
 8015732:	2300      	movs	r3, #0
 8015734:	4640      	mov	r0, r8
 8015736:	4649      	mov	r1, r9
 8015738:	f7eb f9e8 	bl	8000b0c <__aeabi_dcmplt>
 801573c:	b110      	cbz	r0, 8015744 <_printf_float+0x90>
 801573e:	232d      	movs	r3, #45	; 0x2d
 8015740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015744:	4b93      	ldr	r3, [pc, #588]	; (8015994 <_printf_float+0x2e0>)
 8015746:	4894      	ldr	r0, [pc, #592]	; (8015998 <_printf_float+0x2e4>)
 8015748:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801574c:	bf94      	ite	ls
 801574e:	4698      	movls	r8, r3
 8015750:	4680      	movhi	r8, r0
 8015752:	2303      	movs	r3, #3
 8015754:	6123      	str	r3, [r4, #16]
 8015756:	9b05      	ldr	r3, [sp, #20]
 8015758:	f023 0204 	bic.w	r2, r3, #4
 801575c:	6022      	str	r2, [r4, #0]
 801575e:	f04f 0900 	mov.w	r9, #0
 8015762:	9700      	str	r7, [sp, #0]
 8015764:	4633      	mov	r3, r6
 8015766:	aa0b      	add	r2, sp, #44	; 0x2c
 8015768:	4621      	mov	r1, r4
 801576a:	4628      	mov	r0, r5
 801576c:	f000 f9d8 	bl	8015b20 <_printf_common>
 8015770:	3001      	adds	r0, #1
 8015772:	f040 8090 	bne.w	8015896 <_printf_float+0x1e2>
 8015776:	f04f 30ff 	mov.w	r0, #4294967295
 801577a:	b00d      	add	sp, #52	; 0x34
 801577c:	ecbd 8b02 	vpop	{d8}
 8015780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015784:	4642      	mov	r2, r8
 8015786:	464b      	mov	r3, r9
 8015788:	4640      	mov	r0, r8
 801578a:	4649      	mov	r1, r9
 801578c:	f7eb f9e6 	bl	8000b5c <__aeabi_dcmpun>
 8015790:	b140      	cbz	r0, 80157a4 <_printf_float+0xf0>
 8015792:	464b      	mov	r3, r9
 8015794:	2b00      	cmp	r3, #0
 8015796:	bfbc      	itt	lt
 8015798:	232d      	movlt	r3, #45	; 0x2d
 801579a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801579e:	487f      	ldr	r0, [pc, #508]	; (801599c <_printf_float+0x2e8>)
 80157a0:	4b7f      	ldr	r3, [pc, #508]	; (80159a0 <_printf_float+0x2ec>)
 80157a2:	e7d1      	b.n	8015748 <_printf_float+0x94>
 80157a4:	6863      	ldr	r3, [r4, #4]
 80157a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80157aa:	9206      	str	r2, [sp, #24]
 80157ac:	1c5a      	adds	r2, r3, #1
 80157ae:	d13f      	bne.n	8015830 <_printf_float+0x17c>
 80157b0:	2306      	movs	r3, #6
 80157b2:	6063      	str	r3, [r4, #4]
 80157b4:	9b05      	ldr	r3, [sp, #20]
 80157b6:	6861      	ldr	r1, [r4, #4]
 80157b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80157bc:	2300      	movs	r3, #0
 80157be:	9303      	str	r3, [sp, #12]
 80157c0:	ab0a      	add	r3, sp, #40	; 0x28
 80157c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80157c6:	ab09      	add	r3, sp, #36	; 0x24
 80157c8:	ec49 8b10 	vmov	d0, r8, r9
 80157cc:	9300      	str	r3, [sp, #0]
 80157ce:	6022      	str	r2, [r4, #0]
 80157d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80157d4:	4628      	mov	r0, r5
 80157d6:	f7ff fecd 	bl	8015574 <__cvt>
 80157da:	9b06      	ldr	r3, [sp, #24]
 80157dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80157de:	2b47      	cmp	r3, #71	; 0x47
 80157e0:	4680      	mov	r8, r0
 80157e2:	d108      	bne.n	80157f6 <_printf_float+0x142>
 80157e4:	1cc8      	adds	r0, r1, #3
 80157e6:	db02      	blt.n	80157ee <_printf_float+0x13a>
 80157e8:	6863      	ldr	r3, [r4, #4]
 80157ea:	4299      	cmp	r1, r3
 80157ec:	dd41      	ble.n	8015872 <_printf_float+0x1be>
 80157ee:	f1ab 0b02 	sub.w	fp, fp, #2
 80157f2:	fa5f fb8b 	uxtb.w	fp, fp
 80157f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80157fa:	d820      	bhi.n	801583e <_printf_float+0x18a>
 80157fc:	3901      	subs	r1, #1
 80157fe:	465a      	mov	r2, fp
 8015800:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015804:	9109      	str	r1, [sp, #36]	; 0x24
 8015806:	f7ff ff17 	bl	8015638 <__exponent>
 801580a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801580c:	1813      	adds	r3, r2, r0
 801580e:	2a01      	cmp	r2, #1
 8015810:	4681      	mov	r9, r0
 8015812:	6123      	str	r3, [r4, #16]
 8015814:	dc02      	bgt.n	801581c <_printf_float+0x168>
 8015816:	6822      	ldr	r2, [r4, #0]
 8015818:	07d2      	lsls	r2, r2, #31
 801581a:	d501      	bpl.n	8015820 <_printf_float+0x16c>
 801581c:	3301      	adds	r3, #1
 801581e:	6123      	str	r3, [r4, #16]
 8015820:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015824:	2b00      	cmp	r3, #0
 8015826:	d09c      	beq.n	8015762 <_printf_float+0xae>
 8015828:	232d      	movs	r3, #45	; 0x2d
 801582a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801582e:	e798      	b.n	8015762 <_printf_float+0xae>
 8015830:	9a06      	ldr	r2, [sp, #24]
 8015832:	2a47      	cmp	r2, #71	; 0x47
 8015834:	d1be      	bne.n	80157b4 <_printf_float+0x100>
 8015836:	2b00      	cmp	r3, #0
 8015838:	d1bc      	bne.n	80157b4 <_printf_float+0x100>
 801583a:	2301      	movs	r3, #1
 801583c:	e7b9      	b.n	80157b2 <_printf_float+0xfe>
 801583e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8015842:	d118      	bne.n	8015876 <_printf_float+0x1c2>
 8015844:	2900      	cmp	r1, #0
 8015846:	6863      	ldr	r3, [r4, #4]
 8015848:	dd0b      	ble.n	8015862 <_printf_float+0x1ae>
 801584a:	6121      	str	r1, [r4, #16]
 801584c:	b913      	cbnz	r3, 8015854 <_printf_float+0x1a0>
 801584e:	6822      	ldr	r2, [r4, #0]
 8015850:	07d0      	lsls	r0, r2, #31
 8015852:	d502      	bpl.n	801585a <_printf_float+0x1a6>
 8015854:	3301      	adds	r3, #1
 8015856:	440b      	add	r3, r1
 8015858:	6123      	str	r3, [r4, #16]
 801585a:	65a1      	str	r1, [r4, #88]	; 0x58
 801585c:	f04f 0900 	mov.w	r9, #0
 8015860:	e7de      	b.n	8015820 <_printf_float+0x16c>
 8015862:	b913      	cbnz	r3, 801586a <_printf_float+0x1b6>
 8015864:	6822      	ldr	r2, [r4, #0]
 8015866:	07d2      	lsls	r2, r2, #31
 8015868:	d501      	bpl.n	801586e <_printf_float+0x1ba>
 801586a:	3302      	adds	r3, #2
 801586c:	e7f4      	b.n	8015858 <_printf_float+0x1a4>
 801586e:	2301      	movs	r3, #1
 8015870:	e7f2      	b.n	8015858 <_printf_float+0x1a4>
 8015872:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8015876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015878:	4299      	cmp	r1, r3
 801587a:	db05      	blt.n	8015888 <_printf_float+0x1d4>
 801587c:	6823      	ldr	r3, [r4, #0]
 801587e:	6121      	str	r1, [r4, #16]
 8015880:	07d8      	lsls	r0, r3, #31
 8015882:	d5ea      	bpl.n	801585a <_printf_float+0x1a6>
 8015884:	1c4b      	adds	r3, r1, #1
 8015886:	e7e7      	b.n	8015858 <_printf_float+0x1a4>
 8015888:	2900      	cmp	r1, #0
 801588a:	bfd4      	ite	le
 801588c:	f1c1 0202 	rsble	r2, r1, #2
 8015890:	2201      	movgt	r2, #1
 8015892:	4413      	add	r3, r2
 8015894:	e7e0      	b.n	8015858 <_printf_float+0x1a4>
 8015896:	6823      	ldr	r3, [r4, #0]
 8015898:	055a      	lsls	r2, r3, #21
 801589a:	d407      	bmi.n	80158ac <_printf_float+0x1f8>
 801589c:	6923      	ldr	r3, [r4, #16]
 801589e:	4642      	mov	r2, r8
 80158a0:	4631      	mov	r1, r6
 80158a2:	4628      	mov	r0, r5
 80158a4:	47b8      	blx	r7
 80158a6:	3001      	adds	r0, #1
 80158a8:	d12c      	bne.n	8015904 <_printf_float+0x250>
 80158aa:	e764      	b.n	8015776 <_printf_float+0xc2>
 80158ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80158b0:	f240 80e0 	bls.w	8015a74 <_printf_float+0x3c0>
 80158b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80158b8:	2200      	movs	r2, #0
 80158ba:	2300      	movs	r3, #0
 80158bc:	f7eb f91c 	bl	8000af8 <__aeabi_dcmpeq>
 80158c0:	2800      	cmp	r0, #0
 80158c2:	d034      	beq.n	801592e <_printf_float+0x27a>
 80158c4:	4a37      	ldr	r2, [pc, #220]	; (80159a4 <_printf_float+0x2f0>)
 80158c6:	2301      	movs	r3, #1
 80158c8:	4631      	mov	r1, r6
 80158ca:	4628      	mov	r0, r5
 80158cc:	47b8      	blx	r7
 80158ce:	3001      	adds	r0, #1
 80158d0:	f43f af51 	beq.w	8015776 <_printf_float+0xc2>
 80158d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80158d8:	429a      	cmp	r2, r3
 80158da:	db02      	blt.n	80158e2 <_printf_float+0x22e>
 80158dc:	6823      	ldr	r3, [r4, #0]
 80158de:	07d8      	lsls	r0, r3, #31
 80158e0:	d510      	bpl.n	8015904 <_printf_float+0x250>
 80158e2:	ee18 3a10 	vmov	r3, s16
 80158e6:	4652      	mov	r2, sl
 80158e8:	4631      	mov	r1, r6
 80158ea:	4628      	mov	r0, r5
 80158ec:	47b8      	blx	r7
 80158ee:	3001      	adds	r0, #1
 80158f0:	f43f af41 	beq.w	8015776 <_printf_float+0xc2>
 80158f4:	f04f 0800 	mov.w	r8, #0
 80158f8:	f104 091a 	add.w	r9, r4, #26
 80158fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158fe:	3b01      	subs	r3, #1
 8015900:	4543      	cmp	r3, r8
 8015902:	dc09      	bgt.n	8015918 <_printf_float+0x264>
 8015904:	6823      	ldr	r3, [r4, #0]
 8015906:	079b      	lsls	r3, r3, #30
 8015908:	f100 8105 	bmi.w	8015b16 <_printf_float+0x462>
 801590c:	68e0      	ldr	r0, [r4, #12]
 801590e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015910:	4298      	cmp	r0, r3
 8015912:	bfb8      	it	lt
 8015914:	4618      	movlt	r0, r3
 8015916:	e730      	b.n	801577a <_printf_float+0xc6>
 8015918:	2301      	movs	r3, #1
 801591a:	464a      	mov	r2, r9
 801591c:	4631      	mov	r1, r6
 801591e:	4628      	mov	r0, r5
 8015920:	47b8      	blx	r7
 8015922:	3001      	adds	r0, #1
 8015924:	f43f af27 	beq.w	8015776 <_printf_float+0xc2>
 8015928:	f108 0801 	add.w	r8, r8, #1
 801592c:	e7e6      	b.n	80158fc <_printf_float+0x248>
 801592e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015930:	2b00      	cmp	r3, #0
 8015932:	dc39      	bgt.n	80159a8 <_printf_float+0x2f4>
 8015934:	4a1b      	ldr	r2, [pc, #108]	; (80159a4 <_printf_float+0x2f0>)
 8015936:	2301      	movs	r3, #1
 8015938:	4631      	mov	r1, r6
 801593a:	4628      	mov	r0, r5
 801593c:	47b8      	blx	r7
 801593e:	3001      	adds	r0, #1
 8015940:	f43f af19 	beq.w	8015776 <_printf_float+0xc2>
 8015944:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015948:	4313      	orrs	r3, r2
 801594a:	d102      	bne.n	8015952 <_printf_float+0x29e>
 801594c:	6823      	ldr	r3, [r4, #0]
 801594e:	07d9      	lsls	r1, r3, #31
 8015950:	d5d8      	bpl.n	8015904 <_printf_float+0x250>
 8015952:	ee18 3a10 	vmov	r3, s16
 8015956:	4652      	mov	r2, sl
 8015958:	4631      	mov	r1, r6
 801595a:	4628      	mov	r0, r5
 801595c:	47b8      	blx	r7
 801595e:	3001      	adds	r0, #1
 8015960:	f43f af09 	beq.w	8015776 <_printf_float+0xc2>
 8015964:	f04f 0900 	mov.w	r9, #0
 8015968:	f104 0a1a 	add.w	sl, r4, #26
 801596c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801596e:	425b      	negs	r3, r3
 8015970:	454b      	cmp	r3, r9
 8015972:	dc01      	bgt.n	8015978 <_printf_float+0x2c4>
 8015974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015976:	e792      	b.n	801589e <_printf_float+0x1ea>
 8015978:	2301      	movs	r3, #1
 801597a:	4652      	mov	r2, sl
 801597c:	4631      	mov	r1, r6
 801597e:	4628      	mov	r0, r5
 8015980:	47b8      	blx	r7
 8015982:	3001      	adds	r0, #1
 8015984:	f43f aef7 	beq.w	8015776 <_printf_float+0xc2>
 8015988:	f109 0901 	add.w	r9, r9, #1
 801598c:	e7ee      	b.n	801596c <_printf_float+0x2b8>
 801598e:	bf00      	nop
 8015990:	7fefffff 	.word	0x7fefffff
 8015994:	0801af9c 	.word	0x0801af9c
 8015998:	0801afa0 	.word	0x0801afa0
 801599c:	0801afa8 	.word	0x0801afa8
 80159a0:	0801afa4 	.word	0x0801afa4
 80159a4:	0801b411 	.word	0x0801b411
 80159a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80159aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80159ac:	429a      	cmp	r2, r3
 80159ae:	bfa8      	it	ge
 80159b0:	461a      	movge	r2, r3
 80159b2:	2a00      	cmp	r2, #0
 80159b4:	4691      	mov	r9, r2
 80159b6:	dc37      	bgt.n	8015a28 <_printf_float+0x374>
 80159b8:	f04f 0b00 	mov.w	fp, #0
 80159bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80159c0:	f104 021a 	add.w	r2, r4, #26
 80159c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80159c6:	9305      	str	r3, [sp, #20]
 80159c8:	eba3 0309 	sub.w	r3, r3, r9
 80159cc:	455b      	cmp	r3, fp
 80159ce:	dc33      	bgt.n	8015a38 <_printf_float+0x384>
 80159d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80159d4:	429a      	cmp	r2, r3
 80159d6:	db3b      	blt.n	8015a50 <_printf_float+0x39c>
 80159d8:	6823      	ldr	r3, [r4, #0]
 80159da:	07da      	lsls	r2, r3, #31
 80159dc:	d438      	bmi.n	8015a50 <_printf_float+0x39c>
 80159de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80159e0:	9b05      	ldr	r3, [sp, #20]
 80159e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80159e4:	1ad3      	subs	r3, r2, r3
 80159e6:	eba2 0901 	sub.w	r9, r2, r1
 80159ea:	4599      	cmp	r9, r3
 80159ec:	bfa8      	it	ge
 80159ee:	4699      	movge	r9, r3
 80159f0:	f1b9 0f00 	cmp.w	r9, #0
 80159f4:	dc35      	bgt.n	8015a62 <_printf_float+0x3ae>
 80159f6:	f04f 0800 	mov.w	r8, #0
 80159fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80159fe:	f104 0a1a 	add.w	sl, r4, #26
 8015a02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015a06:	1a9b      	subs	r3, r3, r2
 8015a08:	eba3 0309 	sub.w	r3, r3, r9
 8015a0c:	4543      	cmp	r3, r8
 8015a0e:	f77f af79 	ble.w	8015904 <_printf_float+0x250>
 8015a12:	2301      	movs	r3, #1
 8015a14:	4652      	mov	r2, sl
 8015a16:	4631      	mov	r1, r6
 8015a18:	4628      	mov	r0, r5
 8015a1a:	47b8      	blx	r7
 8015a1c:	3001      	adds	r0, #1
 8015a1e:	f43f aeaa 	beq.w	8015776 <_printf_float+0xc2>
 8015a22:	f108 0801 	add.w	r8, r8, #1
 8015a26:	e7ec      	b.n	8015a02 <_printf_float+0x34e>
 8015a28:	4613      	mov	r3, r2
 8015a2a:	4631      	mov	r1, r6
 8015a2c:	4642      	mov	r2, r8
 8015a2e:	4628      	mov	r0, r5
 8015a30:	47b8      	blx	r7
 8015a32:	3001      	adds	r0, #1
 8015a34:	d1c0      	bne.n	80159b8 <_printf_float+0x304>
 8015a36:	e69e      	b.n	8015776 <_printf_float+0xc2>
 8015a38:	2301      	movs	r3, #1
 8015a3a:	4631      	mov	r1, r6
 8015a3c:	4628      	mov	r0, r5
 8015a3e:	9205      	str	r2, [sp, #20]
 8015a40:	47b8      	blx	r7
 8015a42:	3001      	adds	r0, #1
 8015a44:	f43f ae97 	beq.w	8015776 <_printf_float+0xc2>
 8015a48:	9a05      	ldr	r2, [sp, #20]
 8015a4a:	f10b 0b01 	add.w	fp, fp, #1
 8015a4e:	e7b9      	b.n	80159c4 <_printf_float+0x310>
 8015a50:	ee18 3a10 	vmov	r3, s16
 8015a54:	4652      	mov	r2, sl
 8015a56:	4631      	mov	r1, r6
 8015a58:	4628      	mov	r0, r5
 8015a5a:	47b8      	blx	r7
 8015a5c:	3001      	adds	r0, #1
 8015a5e:	d1be      	bne.n	80159de <_printf_float+0x32a>
 8015a60:	e689      	b.n	8015776 <_printf_float+0xc2>
 8015a62:	9a05      	ldr	r2, [sp, #20]
 8015a64:	464b      	mov	r3, r9
 8015a66:	4442      	add	r2, r8
 8015a68:	4631      	mov	r1, r6
 8015a6a:	4628      	mov	r0, r5
 8015a6c:	47b8      	blx	r7
 8015a6e:	3001      	adds	r0, #1
 8015a70:	d1c1      	bne.n	80159f6 <_printf_float+0x342>
 8015a72:	e680      	b.n	8015776 <_printf_float+0xc2>
 8015a74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a76:	2a01      	cmp	r2, #1
 8015a78:	dc01      	bgt.n	8015a7e <_printf_float+0x3ca>
 8015a7a:	07db      	lsls	r3, r3, #31
 8015a7c:	d538      	bpl.n	8015af0 <_printf_float+0x43c>
 8015a7e:	2301      	movs	r3, #1
 8015a80:	4642      	mov	r2, r8
 8015a82:	4631      	mov	r1, r6
 8015a84:	4628      	mov	r0, r5
 8015a86:	47b8      	blx	r7
 8015a88:	3001      	adds	r0, #1
 8015a8a:	f43f ae74 	beq.w	8015776 <_printf_float+0xc2>
 8015a8e:	ee18 3a10 	vmov	r3, s16
 8015a92:	4652      	mov	r2, sl
 8015a94:	4631      	mov	r1, r6
 8015a96:	4628      	mov	r0, r5
 8015a98:	47b8      	blx	r7
 8015a9a:	3001      	adds	r0, #1
 8015a9c:	f43f ae6b 	beq.w	8015776 <_printf_float+0xc2>
 8015aa0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	f7eb f826 	bl	8000af8 <__aeabi_dcmpeq>
 8015aac:	b9d8      	cbnz	r0, 8015ae6 <_printf_float+0x432>
 8015aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ab0:	f108 0201 	add.w	r2, r8, #1
 8015ab4:	3b01      	subs	r3, #1
 8015ab6:	4631      	mov	r1, r6
 8015ab8:	4628      	mov	r0, r5
 8015aba:	47b8      	blx	r7
 8015abc:	3001      	adds	r0, #1
 8015abe:	d10e      	bne.n	8015ade <_printf_float+0x42a>
 8015ac0:	e659      	b.n	8015776 <_printf_float+0xc2>
 8015ac2:	2301      	movs	r3, #1
 8015ac4:	4652      	mov	r2, sl
 8015ac6:	4631      	mov	r1, r6
 8015ac8:	4628      	mov	r0, r5
 8015aca:	47b8      	blx	r7
 8015acc:	3001      	adds	r0, #1
 8015ace:	f43f ae52 	beq.w	8015776 <_printf_float+0xc2>
 8015ad2:	f108 0801 	add.w	r8, r8, #1
 8015ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ad8:	3b01      	subs	r3, #1
 8015ada:	4543      	cmp	r3, r8
 8015adc:	dcf1      	bgt.n	8015ac2 <_printf_float+0x40e>
 8015ade:	464b      	mov	r3, r9
 8015ae0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015ae4:	e6dc      	b.n	80158a0 <_printf_float+0x1ec>
 8015ae6:	f04f 0800 	mov.w	r8, #0
 8015aea:	f104 0a1a 	add.w	sl, r4, #26
 8015aee:	e7f2      	b.n	8015ad6 <_printf_float+0x422>
 8015af0:	2301      	movs	r3, #1
 8015af2:	4642      	mov	r2, r8
 8015af4:	e7df      	b.n	8015ab6 <_printf_float+0x402>
 8015af6:	2301      	movs	r3, #1
 8015af8:	464a      	mov	r2, r9
 8015afa:	4631      	mov	r1, r6
 8015afc:	4628      	mov	r0, r5
 8015afe:	47b8      	blx	r7
 8015b00:	3001      	adds	r0, #1
 8015b02:	f43f ae38 	beq.w	8015776 <_printf_float+0xc2>
 8015b06:	f108 0801 	add.w	r8, r8, #1
 8015b0a:	68e3      	ldr	r3, [r4, #12]
 8015b0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015b0e:	1a5b      	subs	r3, r3, r1
 8015b10:	4543      	cmp	r3, r8
 8015b12:	dcf0      	bgt.n	8015af6 <_printf_float+0x442>
 8015b14:	e6fa      	b.n	801590c <_printf_float+0x258>
 8015b16:	f04f 0800 	mov.w	r8, #0
 8015b1a:	f104 0919 	add.w	r9, r4, #25
 8015b1e:	e7f4      	b.n	8015b0a <_printf_float+0x456>

08015b20 <_printf_common>:
 8015b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b24:	4616      	mov	r6, r2
 8015b26:	4699      	mov	r9, r3
 8015b28:	688a      	ldr	r2, [r1, #8]
 8015b2a:	690b      	ldr	r3, [r1, #16]
 8015b2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015b30:	4293      	cmp	r3, r2
 8015b32:	bfb8      	it	lt
 8015b34:	4613      	movlt	r3, r2
 8015b36:	6033      	str	r3, [r6, #0]
 8015b38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015b3c:	4607      	mov	r7, r0
 8015b3e:	460c      	mov	r4, r1
 8015b40:	b10a      	cbz	r2, 8015b46 <_printf_common+0x26>
 8015b42:	3301      	adds	r3, #1
 8015b44:	6033      	str	r3, [r6, #0]
 8015b46:	6823      	ldr	r3, [r4, #0]
 8015b48:	0699      	lsls	r1, r3, #26
 8015b4a:	bf42      	ittt	mi
 8015b4c:	6833      	ldrmi	r3, [r6, #0]
 8015b4e:	3302      	addmi	r3, #2
 8015b50:	6033      	strmi	r3, [r6, #0]
 8015b52:	6825      	ldr	r5, [r4, #0]
 8015b54:	f015 0506 	ands.w	r5, r5, #6
 8015b58:	d106      	bne.n	8015b68 <_printf_common+0x48>
 8015b5a:	f104 0a19 	add.w	sl, r4, #25
 8015b5e:	68e3      	ldr	r3, [r4, #12]
 8015b60:	6832      	ldr	r2, [r6, #0]
 8015b62:	1a9b      	subs	r3, r3, r2
 8015b64:	42ab      	cmp	r3, r5
 8015b66:	dc26      	bgt.n	8015bb6 <_printf_common+0x96>
 8015b68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015b6c:	1e13      	subs	r3, r2, #0
 8015b6e:	6822      	ldr	r2, [r4, #0]
 8015b70:	bf18      	it	ne
 8015b72:	2301      	movne	r3, #1
 8015b74:	0692      	lsls	r2, r2, #26
 8015b76:	d42b      	bmi.n	8015bd0 <_printf_common+0xb0>
 8015b78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015b7c:	4649      	mov	r1, r9
 8015b7e:	4638      	mov	r0, r7
 8015b80:	47c0      	blx	r8
 8015b82:	3001      	adds	r0, #1
 8015b84:	d01e      	beq.n	8015bc4 <_printf_common+0xa4>
 8015b86:	6823      	ldr	r3, [r4, #0]
 8015b88:	68e5      	ldr	r5, [r4, #12]
 8015b8a:	6832      	ldr	r2, [r6, #0]
 8015b8c:	f003 0306 	and.w	r3, r3, #6
 8015b90:	2b04      	cmp	r3, #4
 8015b92:	bf08      	it	eq
 8015b94:	1aad      	subeq	r5, r5, r2
 8015b96:	68a3      	ldr	r3, [r4, #8]
 8015b98:	6922      	ldr	r2, [r4, #16]
 8015b9a:	bf0c      	ite	eq
 8015b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015ba0:	2500      	movne	r5, #0
 8015ba2:	4293      	cmp	r3, r2
 8015ba4:	bfc4      	itt	gt
 8015ba6:	1a9b      	subgt	r3, r3, r2
 8015ba8:	18ed      	addgt	r5, r5, r3
 8015baa:	2600      	movs	r6, #0
 8015bac:	341a      	adds	r4, #26
 8015bae:	42b5      	cmp	r5, r6
 8015bb0:	d11a      	bne.n	8015be8 <_printf_common+0xc8>
 8015bb2:	2000      	movs	r0, #0
 8015bb4:	e008      	b.n	8015bc8 <_printf_common+0xa8>
 8015bb6:	2301      	movs	r3, #1
 8015bb8:	4652      	mov	r2, sl
 8015bba:	4649      	mov	r1, r9
 8015bbc:	4638      	mov	r0, r7
 8015bbe:	47c0      	blx	r8
 8015bc0:	3001      	adds	r0, #1
 8015bc2:	d103      	bne.n	8015bcc <_printf_common+0xac>
 8015bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8015bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bcc:	3501      	adds	r5, #1
 8015bce:	e7c6      	b.n	8015b5e <_printf_common+0x3e>
 8015bd0:	18e1      	adds	r1, r4, r3
 8015bd2:	1c5a      	adds	r2, r3, #1
 8015bd4:	2030      	movs	r0, #48	; 0x30
 8015bd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015bda:	4422      	add	r2, r4
 8015bdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015be0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015be4:	3302      	adds	r3, #2
 8015be6:	e7c7      	b.n	8015b78 <_printf_common+0x58>
 8015be8:	2301      	movs	r3, #1
 8015bea:	4622      	mov	r2, r4
 8015bec:	4649      	mov	r1, r9
 8015bee:	4638      	mov	r0, r7
 8015bf0:	47c0      	blx	r8
 8015bf2:	3001      	adds	r0, #1
 8015bf4:	d0e6      	beq.n	8015bc4 <_printf_common+0xa4>
 8015bf6:	3601      	adds	r6, #1
 8015bf8:	e7d9      	b.n	8015bae <_printf_common+0x8e>
	...

08015bfc <_printf_i>:
 8015bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015c00:	460c      	mov	r4, r1
 8015c02:	4691      	mov	r9, r2
 8015c04:	7e27      	ldrb	r7, [r4, #24]
 8015c06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015c08:	2f78      	cmp	r7, #120	; 0x78
 8015c0a:	4680      	mov	r8, r0
 8015c0c:	469a      	mov	sl, r3
 8015c0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015c12:	d807      	bhi.n	8015c24 <_printf_i+0x28>
 8015c14:	2f62      	cmp	r7, #98	; 0x62
 8015c16:	d80a      	bhi.n	8015c2e <_printf_i+0x32>
 8015c18:	2f00      	cmp	r7, #0
 8015c1a:	f000 80d8 	beq.w	8015dce <_printf_i+0x1d2>
 8015c1e:	2f58      	cmp	r7, #88	; 0x58
 8015c20:	f000 80a3 	beq.w	8015d6a <_printf_i+0x16e>
 8015c24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015c28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015c2c:	e03a      	b.n	8015ca4 <_printf_i+0xa8>
 8015c2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015c32:	2b15      	cmp	r3, #21
 8015c34:	d8f6      	bhi.n	8015c24 <_printf_i+0x28>
 8015c36:	a001      	add	r0, pc, #4	; (adr r0, 8015c3c <_printf_i+0x40>)
 8015c38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015c3c:	08015c95 	.word	0x08015c95
 8015c40:	08015ca9 	.word	0x08015ca9
 8015c44:	08015c25 	.word	0x08015c25
 8015c48:	08015c25 	.word	0x08015c25
 8015c4c:	08015c25 	.word	0x08015c25
 8015c50:	08015c25 	.word	0x08015c25
 8015c54:	08015ca9 	.word	0x08015ca9
 8015c58:	08015c25 	.word	0x08015c25
 8015c5c:	08015c25 	.word	0x08015c25
 8015c60:	08015c25 	.word	0x08015c25
 8015c64:	08015c25 	.word	0x08015c25
 8015c68:	08015db5 	.word	0x08015db5
 8015c6c:	08015cd9 	.word	0x08015cd9
 8015c70:	08015d97 	.word	0x08015d97
 8015c74:	08015c25 	.word	0x08015c25
 8015c78:	08015c25 	.word	0x08015c25
 8015c7c:	08015dd7 	.word	0x08015dd7
 8015c80:	08015c25 	.word	0x08015c25
 8015c84:	08015cd9 	.word	0x08015cd9
 8015c88:	08015c25 	.word	0x08015c25
 8015c8c:	08015c25 	.word	0x08015c25
 8015c90:	08015d9f 	.word	0x08015d9f
 8015c94:	680b      	ldr	r3, [r1, #0]
 8015c96:	1d1a      	adds	r2, r3, #4
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	600a      	str	r2, [r1, #0]
 8015c9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015ca4:	2301      	movs	r3, #1
 8015ca6:	e0a3      	b.n	8015df0 <_printf_i+0x1f4>
 8015ca8:	6825      	ldr	r5, [r4, #0]
 8015caa:	6808      	ldr	r0, [r1, #0]
 8015cac:	062e      	lsls	r6, r5, #24
 8015cae:	f100 0304 	add.w	r3, r0, #4
 8015cb2:	d50a      	bpl.n	8015cca <_printf_i+0xce>
 8015cb4:	6805      	ldr	r5, [r0, #0]
 8015cb6:	600b      	str	r3, [r1, #0]
 8015cb8:	2d00      	cmp	r5, #0
 8015cba:	da03      	bge.n	8015cc4 <_printf_i+0xc8>
 8015cbc:	232d      	movs	r3, #45	; 0x2d
 8015cbe:	426d      	negs	r5, r5
 8015cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015cc4:	485e      	ldr	r0, [pc, #376]	; (8015e40 <_printf_i+0x244>)
 8015cc6:	230a      	movs	r3, #10
 8015cc8:	e019      	b.n	8015cfe <_printf_i+0x102>
 8015cca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015cce:	6805      	ldr	r5, [r0, #0]
 8015cd0:	600b      	str	r3, [r1, #0]
 8015cd2:	bf18      	it	ne
 8015cd4:	b22d      	sxthne	r5, r5
 8015cd6:	e7ef      	b.n	8015cb8 <_printf_i+0xbc>
 8015cd8:	680b      	ldr	r3, [r1, #0]
 8015cda:	6825      	ldr	r5, [r4, #0]
 8015cdc:	1d18      	adds	r0, r3, #4
 8015cde:	6008      	str	r0, [r1, #0]
 8015ce0:	0628      	lsls	r0, r5, #24
 8015ce2:	d501      	bpl.n	8015ce8 <_printf_i+0xec>
 8015ce4:	681d      	ldr	r5, [r3, #0]
 8015ce6:	e002      	b.n	8015cee <_printf_i+0xf2>
 8015ce8:	0669      	lsls	r1, r5, #25
 8015cea:	d5fb      	bpl.n	8015ce4 <_printf_i+0xe8>
 8015cec:	881d      	ldrh	r5, [r3, #0]
 8015cee:	4854      	ldr	r0, [pc, #336]	; (8015e40 <_printf_i+0x244>)
 8015cf0:	2f6f      	cmp	r7, #111	; 0x6f
 8015cf2:	bf0c      	ite	eq
 8015cf4:	2308      	moveq	r3, #8
 8015cf6:	230a      	movne	r3, #10
 8015cf8:	2100      	movs	r1, #0
 8015cfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015cfe:	6866      	ldr	r6, [r4, #4]
 8015d00:	60a6      	str	r6, [r4, #8]
 8015d02:	2e00      	cmp	r6, #0
 8015d04:	bfa2      	ittt	ge
 8015d06:	6821      	ldrge	r1, [r4, #0]
 8015d08:	f021 0104 	bicge.w	r1, r1, #4
 8015d0c:	6021      	strge	r1, [r4, #0]
 8015d0e:	b90d      	cbnz	r5, 8015d14 <_printf_i+0x118>
 8015d10:	2e00      	cmp	r6, #0
 8015d12:	d04d      	beq.n	8015db0 <_printf_i+0x1b4>
 8015d14:	4616      	mov	r6, r2
 8015d16:	fbb5 f1f3 	udiv	r1, r5, r3
 8015d1a:	fb03 5711 	mls	r7, r3, r1, r5
 8015d1e:	5dc7      	ldrb	r7, [r0, r7]
 8015d20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015d24:	462f      	mov	r7, r5
 8015d26:	42bb      	cmp	r3, r7
 8015d28:	460d      	mov	r5, r1
 8015d2a:	d9f4      	bls.n	8015d16 <_printf_i+0x11a>
 8015d2c:	2b08      	cmp	r3, #8
 8015d2e:	d10b      	bne.n	8015d48 <_printf_i+0x14c>
 8015d30:	6823      	ldr	r3, [r4, #0]
 8015d32:	07df      	lsls	r7, r3, #31
 8015d34:	d508      	bpl.n	8015d48 <_printf_i+0x14c>
 8015d36:	6923      	ldr	r3, [r4, #16]
 8015d38:	6861      	ldr	r1, [r4, #4]
 8015d3a:	4299      	cmp	r1, r3
 8015d3c:	bfde      	ittt	le
 8015d3e:	2330      	movle	r3, #48	; 0x30
 8015d40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015d44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015d48:	1b92      	subs	r2, r2, r6
 8015d4a:	6122      	str	r2, [r4, #16]
 8015d4c:	f8cd a000 	str.w	sl, [sp]
 8015d50:	464b      	mov	r3, r9
 8015d52:	aa03      	add	r2, sp, #12
 8015d54:	4621      	mov	r1, r4
 8015d56:	4640      	mov	r0, r8
 8015d58:	f7ff fee2 	bl	8015b20 <_printf_common>
 8015d5c:	3001      	adds	r0, #1
 8015d5e:	d14c      	bne.n	8015dfa <_printf_i+0x1fe>
 8015d60:	f04f 30ff 	mov.w	r0, #4294967295
 8015d64:	b004      	add	sp, #16
 8015d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d6a:	4835      	ldr	r0, [pc, #212]	; (8015e40 <_printf_i+0x244>)
 8015d6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015d70:	6823      	ldr	r3, [r4, #0]
 8015d72:	680e      	ldr	r6, [r1, #0]
 8015d74:	061f      	lsls	r7, r3, #24
 8015d76:	f856 5b04 	ldr.w	r5, [r6], #4
 8015d7a:	600e      	str	r6, [r1, #0]
 8015d7c:	d514      	bpl.n	8015da8 <_printf_i+0x1ac>
 8015d7e:	07d9      	lsls	r1, r3, #31
 8015d80:	bf44      	itt	mi
 8015d82:	f043 0320 	orrmi.w	r3, r3, #32
 8015d86:	6023      	strmi	r3, [r4, #0]
 8015d88:	b91d      	cbnz	r5, 8015d92 <_printf_i+0x196>
 8015d8a:	6823      	ldr	r3, [r4, #0]
 8015d8c:	f023 0320 	bic.w	r3, r3, #32
 8015d90:	6023      	str	r3, [r4, #0]
 8015d92:	2310      	movs	r3, #16
 8015d94:	e7b0      	b.n	8015cf8 <_printf_i+0xfc>
 8015d96:	6823      	ldr	r3, [r4, #0]
 8015d98:	f043 0320 	orr.w	r3, r3, #32
 8015d9c:	6023      	str	r3, [r4, #0]
 8015d9e:	2378      	movs	r3, #120	; 0x78
 8015da0:	4828      	ldr	r0, [pc, #160]	; (8015e44 <_printf_i+0x248>)
 8015da2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015da6:	e7e3      	b.n	8015d70 <_printf_i+0x174>
 8015da8:	065e      	lsls	r6, r3, #25
 8015daa:	bf48      	it	mi
 8015dac:	b2ad      	uxthmi	r5, r5
 8015dae:	e7e6      	b.n	8015d7e <_printf_i+0x182>
 8015db0:	4616      	mov	r6, r2
 8015db2:	e7bb      	b.n	8015d2c <_printf_i+0x130>
 8015db4:	680b      	ldr	r3, [r1, #0]
 8015db6:	6826      	ldr	r6, [r4, #0]
 8015db8:	6960      	ldr	r0, [r4, #20]
 8015dba:	1d1d      	adds	r5, r3, #4
 8015dbc:	600d      	str	r5, [r1, #0]
 8015dbe:	0635      	lsls	r5, r6, #24
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	d501      	bpl.n	8015dc8 <_printf_i+0x1cc>
 8015dc4:	6018      	str	r0, [r3, #0]
 8015dc6:	e002      	b.n	8015dce <_printf_i+0x1d2>
 8015dc8:	0671      	lsls	r1, r6, #25
 8015dca:	d5fb      	bpl.n	8015dc4 <_printf_i+0x1c8>
 8015dcc:	8018      	strh	r0, [r3, #0]
 8015dce:	2300      	movs	r3, #0
 8015dd0:	6123      	str	r3, [r4, #16]
 8015dd2:	4616      	mov	r6, r2
 8015dd4:	e7ba      	b.n	8015d4c <_printf_i+0x150>
 8015dd6:	680b      	ldr	r3, [r1, #0]
 8015dd8:	1d1a      	adds	r2, r3, #4
 8015dda:	600a      	str	r2, [r1, #0]
 8015ddc:	681e      	ldr	r6, [r3, #0]
 8015dde:	6862      	ldr	r2, [r4, #4]
 8015de0:	2100      	movs	r1, #0
 8015de2:	4630      	mov	r0, r6
 8015de4:	f7ea fa14 	bl	8000210 <memchr>
 8015de8:	b108      	cbz	r0, 8015dee <_printf_i+0x1f2>
 8015dea:	1b80      	subs	r0, r0, r6
 8015dec:	6060      	str	r0, [r4, #4]
 8015dee:	6863      	ldr	r3, [r4, #4]
 8015df0:	6123      	str	r3, [r4, #16]
 8015df2:	2300      	movs	r3, #0
 8015df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015df8:	e7a8      	b.n	8015d4c <_printf_i+0x150>
 8015dfa:	6923      	ldr	r3, [r4, #16]
 8015dfc:	4632      	mov	r2, r6
 8015dfe:	4649      	mov	r1, r9
 8015e00:	4640      	mov	r0, r8
 8015e02:	47d0      	blx	sl
 8015e04:	3001      	adds	r0, #1
 8015e06:	d0ab      	beq.n	8015d60 <_printf_i+0x164>
 8015e08:	6823      	ldr	r3, [r4, #0]
 8015e0a:	079b      	lsls	r3, r3, #30
 8015e0c:	d413      	bmi.n	8015e36 <_printf_i+0x23a>
 8015e0e:	68e0      	ldr	r0, [r4, #12]
 8015e10:	9b03      	ldr	r3, [sp, #12]
 8015e12:	4298      	cmp	r0, r3
 8015e14:	bfb8      	it	lt
 8015e16:	4618      	movlt	r0, r3
 8015e18:	e7a4      	b.n	8015d64 <_printf_i+0x168>
 8015e1a:	2301      	movs	r3, #1
 8015e1c:	4632      	mov	r2, r6
 8015e1e:	4649      	mov	r1, r9
 8015e20:	4640      	mov	r0, r8
 8015e22:	47d0      	blx	sl
 8015e24:	3001      	adds	r0, #1
 8015e26:	d09b      	beq.n	8015d60 <_printf_i+0x164>
 8015e28:	3501      	adds	r5, #1
 8015e2a:	68e3      	ldr	r3, [r4, #12]
 8015e2c:	9903      	ldr	r1, [sp, #12]
 8015e2e:	1a5b      	subs	r3, r3, r1
 8015e30:	42ab      	cmp	r3, r5
 8015e32:	dcf2      	bgt.n	8015e1a <_printf_i+0x21e>
 8015e34:	e7eb      	b.n	8015e0e <_printf_i+0x212>
 8015e36:	2500      	movs	r5, #0
 8015e38:	f104 0619 	add.w	r6, r4, #25
 8015e3c:	e7f5      	b.n	8015e2a <_printf_i+0x22e>
 8015e3e:	bf00      	nop
 8015e40:	0801afac 	.word	0x0801afac
 8015e44:	0801afbd 	.word	0x0801afbd

08015e48 <_scanf_float>:
 8015e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e4c:	b087      	sub	sp, #28
 8015e4e:	4617      	mov	r7, r2
 8015e50:	9303      	str	r3, [sp, #12]
 8015e52:	688b      	ldr	r3, [r1, #8]
 8015e54:	1e5a      	subs	r2, r3, #1
 8015e56:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015e5a:	bf83      	ittte	hi
 8015e5c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015e60:	195b      	addhi	r3, r3, r5
 8015e62:	9302      	strhi	r3, [sp, #8]
 8015e64:	2300      	movls	r3, #0
 8015e66:	bf86      	itte	hi
 8015e68:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015e6c:	608b      	strhi	r3, [r1, #8]
 8015e6e:	9302      	strls	r3, [sp, #8]
 8015e70:	680b      	ldr	r3, [r1, #0]
 8015e72:	468b      	mov	fp, r1
 8015e74:	2500      	movs	r5, #0
 8015e76:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015e7a:	f84b 3b1c 	str.w	r3, [fp], #28
 8015e7e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015e82:	4680      	mov	r8, r0
 8015e84:	460c      	mov	r4, r1
 8015e86:	465e      	mov	r6, fp
 8015e88:	46aa      	mov	sl, r5
 8015e8a:	46a9      	mov	r9, r5
 8015e8c:	9501      	str	r5, [sp, #4]
 8015e8e:	68a2      	ldr	r2, [r4, #8]
 8015e90:	b152      	cbz	r2, 8015ea8 <_scanf_float+0x60>
 8015e92:	683b      	ldr	r3, [r7, #0]
 8015e94:	781b      	ldrb	r3, [r3, #0]
 8015e96:	2b4e      	cmp	r3, #78	; 0x4e
 8015e98:	d864      	bhi.n	8015f64 <_scanf_float+0x11c>
 8015e9a:	2b40      	cmp	r3, #64	; 0x40
 8015e9c:	d83c      	bhi.n	8015f18 <_scanf_float+0xd0>
 8015e9e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8015ea2:	b2c8      	uxtb	r0, r1
 8015ea4:	280e      	cmp	r0, #14
 8015ea6:	d93a      	bls.n	8015f1e <_scanf_float+0xd6>
 8015ea8:	f1b9 0f00 	cmp.w	r9, #0
 8015eac:	d003      	beq.n	8015eb6 <_scanf_float+0x6e>
 8015eae:	6823      	ldr	r3, [r4, #0]
 8015eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015eb4:	6023      	str	r3, [r4, #0]
 8015eb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015eba:	f1ba 0f01 	cmp.w	sl, #1
 8015ebe:	f200 8113 	bhi.w	80160e8 <_scanf_float+0x2a0>
 8015ec2:	455e      	cmp	r6, fp
 8015ec4:	f200 8105 	bhi.w	80160d2 <_scanf_float+0x28a>
 8015ec8:	2501      	movs	r5, #1
 8015eca:	4628      	mov	r0, r5
 8015ecc:	b007      	add	sp, #28
 8015ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ed2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8015ed6:	2a0d      	cmp	r2, #13
 8015ed8:	d8e6      	bhi.n	8015ea8 <_scanf_float+0x60>
 8015eda:	a101      	add	r1, pc, #4	; (adr r1, 8015ee0 <_scanf_float+0x98>)
 8015edc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015ee0:	0801601f 	.word	0x0801601f
 8015ee4:	08015ea9 	.word	0x08015ea9
 8015ee8:	08015ea9 	.word	0x08015ea9
 8015eec:	08015ea9 	.word	0x08015ea9
 8015ef0:	0801607f 	.word	0x0801607f
 8015ef4:	08016057 	.word	0x08016057
 8015ef8:	08015ea9 	.word	0x08015ea9
 8015efc:	08015ea9 	.word	0x08015ea9
 8015f00:	0801602d 	.word	0x0801602d
 8015f04:	08015ea9 	.word	0x08015ea9
 8015f08:	08015ea9 	.word	0x08015ea9
 8015f0c:	08015ea9 	.word	0x08015ea9
 8015f10:	08015ea9 	.word	0x08015ea9
 8015f14:	08015fe5 	.word	0x08015fe5
 8015f18:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8015f1c:	e7db      	b.n	8015ed6 <_scanf_float+0x8e>
 8015f1e:	290e      	cmp	r1, #14
 8015f20:	d8c2      	bhi.n	8015ea8 <_scanf_float+0x60>
 8015f22:	a001      	add	r0, pc, #4	; (adr r0, 8015f28 <_scanf_float+0xe0>)
 8015f24:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8015f28:	08015fd7 	.word	0x08015fd7
 8015f2c:	08015ea9 	.word	0x08015ea9
 8015f30:	08015fd7 	.word	0x08015fd7
 8015f34:	0801606b 	.word	0x0801606b
 8015f38:	08015ea9 	.word	0x08015ea9
 8015f3c:	08015f85 	.word	0x08015f85
 8015f40:	08015fc1 	.word	0x08015fc1
 8015f44:	08015fc1 	.word	0x08015fc1
 8015f48:	08015fc1 	.word	0x08015fc1
 8015f4c:	08015fc1 	.word	0x08015fc1
 8015f50:	08015fc1 	.word	0x08015fc1
 8015f54:	08015fc1 	.word	0x08015fc1
 8015f58:	08015fc1 	.word	0x08015fc1
 8015f5c:	08015fc1 	.word	0x08015fc1
 8015f60:	08015fc1 	.word	0x08015fc1
 8015f64:	2b6e      	cmp	r3, #110	; 0x6e
 8015f66:	d809      	bhi.n	8015f7c <_scanf_float+0x134>
 8015f68:	2b60      	cmp	r3, #96	; 0x60
 8015f6a:	d8b2      	bhi.n	8015ed2 <_scanf_float+0x8a>
 8015f6c:	2b54      	cmp	r3, #84	; 0x54
 8015f6e:	d077      	beq.n	8016060 <_scanf_float+0x218>
 8015f70:	2b59      	cmp	r3, #89	; 0x59
 8015f72:	d199      	bne.n	8015ea8 <_scanf_float+0x60>
 8015f74:	2d07      	cmp	r5, #7
 8015f76:	d197      	bne.n	8015ea8 <_scanf_float+0x60>
 8015f78:	2508      	movs	r5, #8
 8015f7a:	e029      	b.n	8015fd0 <_scanf_float+0x188>
 8015f7c:	2b74      	cmp	r3, #116	; 0x74
 8015f7e:	d06f      	beq.n	8016060 <_scanf_float+0x218>
 8015f80:	2b79      	cmp	r3, #121	; 0x79
 8015f82:	e7f6      	b.n	8015f72 <_scanf_float+0x12a>
 8015f84:	6821      	ldr	r1, [r4, #0]
 8015f86:	05c8      	lsls	r0, r1, #23
 8015f88:	d51a      	bpl.n	8015fc0 <_scanf_float+0x178>
 8015f8a:	9b02      	ldr	r3, [sp, #8]
 8015f8c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015f90:	6021      	str	r1, [r4, #0]
 8015f92:	f109 0901 	add.w	r9, r9, #1
 8015f96:	b11b      	cbz	r3, 8015fa0 <_scanf_float+0x158>
 8015f98:	3b01      	subs	r3, #1
 8015f9a:	3201      	adds	r2, #1
 8015f9c:	9302      	str	r3, [sp, #8]
 8015f9e:	60a2      	str	r2, [r4, #8]
 8015fa0:	68a3      	ldr	r3, [r4, #8]
 8015fa2:	3b01      	subs	r3, #1
 8015fa4:	60a3      	str	r3, [r4, #8]
 8015fa6:	6923      	ldr	r3, [r4, #16]
 8015fa8:	3301      	adds	r3, #1
 8015faa:	6123      	str	r3, [r4, #16]
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	3b01      	subs	r3, #1
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	607b      	str	r3, [r7, #4]
 8015fb4:	f340 8084 	ble.w	80160c0 <_scanf_float+0x278>
 8015fb8:	683b      	ldr	r3, [r7, #0]
 8015fba:	3301      	adds	r3, #1
 8015fbc:	603b      	str	r3, [r7, #0]
 8015fbe:	e766      	b.n	8015e8e <_scanf_float+0x46>
 8015fc0:	eb1a 0f05 	cmn.w	sl, r5
 8015fc4:	f47f af70 	bne.w	8015ea8 <_scanf_float+0x60>
 8015fc8:	6822      	ldr	r2, [r4, #0]
 8015fca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8015fce:	6022      	str	r2, [r4, #0]
 8015fd0:	f806 3b01 	strb.w	r3, [r6], #1
 8015fd4:	e7e4      	b.n	8015fa0 <_scanf_float+0x158>
 8015fd6:	6822      	ldr	r2, [r4, #0]
 8015fd8:	0610      	lsls	r0, r2, #24
 8015fda:	f57f af65 	bpl.w	8015ea8 <_scanf_float+0x60>
 8015fde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015fe2:	e7f4      	b.n	8015fce <_scanf_float+0x186>
 8015fe4:	f1ba 0f00 	cmp.w	sl, #0
 8015fe8:	d10e      	bne.n	8016008 <_scanf_float+0x1c0>
 8015fea:	f1b9 0f00 	cmp.w	r9, #0
 8015fee:	d10e      	bne.n	801600e <_scanf_float+0x1c6>
 8015ff0:	6822      	ldr	r2, [r4, #0]
 8015ff2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8015ff6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8015ffa:	d108      	bne.n	801600e <_scanf_float+0x1c6>
 8015ffc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016000:	6022      	str	r2, [r4, #0]
 8016002:	f04f 0a01 	mov.w	sl, #1
 8016006:	e7e3      	b.n	8015fd0 <_scanf_float+0x188>
 8016008:	f1ba 0f02 	cmp.w	sl, #2
 801600c:	d055      	beq.n	80160ba <_scanf_float+0x272>
 801600e:	2d01      	cmp	r5, #1
 8016010:	d002      	beq.n	8016018 <_scanf_float+0x1d0>
 8016012:	2d04      	cmp	r5, #4
 8016014:	f47f af48 	bne.w	8015ea8 <_scanf_float+0x60>
 8016018:	3501      	adds	r5, #1
 801601a:	b2ed      	uxtb	r5, r5
 801601c:	e7d8      	b.n	8015fd0 <_scanf_float+0x188>
 801601e:	f1ba 0f01 	cmp.w	sl, #1
 8016022:	f47f af41 	bne.w	8015ea8 <_scanf_float+0x60>
 8016026:	f04f 0a02 	mov.w	sl, #2
 801602a:	e7d1      	b.n	8015fd0 <_scanf_float+0x188>
 801602c:	b97d      	cbnz	r5, 801604e <_scanf_float+0x206>
 801602e:	f1b9 0f00 	cmp.w	r9, #0
 8016032:	f47f af3c 	bne.w	8015eae <_scanf_float+0x66>
 8016036:	6822      	ldr	r2, [r4, #0]
 8016038:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801603c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016040:	f47f af39 	bne.w	8015eb6 <_scanf_float+0x6e>
 8016044:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016048:	6022      	str	r2, [r4, #0]
 801604a:	2501      	movs	r5, #1
 801604c:	e7c0      	b.n	8015fd0 <_scanf_float+0x188>
 801604e:	2d03      	cmp	r5, #3
 8016050:	d0e2      	beq.n	8016018 <_scanf_float+0x1d0>
 8016052:	2d05      	cmp	r5, #5
 8016054:	e7de      	b.n	8016014 <_scanf_float+0x1cc>
 8016056:	2d02      	cmp	r5, #2
 8016058:	f47f af26 	bne.w	8015ea8 <_scanf_float+0x60>
 801605c:	2503      	movs	r5, #3
 801605e:	e7b7      	b.n	8015fd0 <_scanf_float+0x188>
 8016060:	2d06      	cmp	r5, #6
 8016062:	f47f af21 	bne.w	8015ea8 <_scanf_float+0x60>
 8016066:	2507      	movs	r5, #7
 8016068:	e7b2      	b.n	8015fd0 <_scanf_float+0x188>
 801606a:	6822      	ldr	r2, [r4, #0]
 801606c:	0591      	lsls	r1, r2, #22
 801606e:	f57f af1b 	bpl.w	8015ea8 <_scanf_float+0x60>
 8016072:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016076:	6022      	str	r2, [r4, #0]
 8016078:	f8cd 9004 	str.w	r9, [sp, #4]
 801607c:	e7a8      	b.n	8015fd0 <_scanf_float+0x188>
 801607e:	6822      	ldr	r2, [r4, #0]
 8016080:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016084:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016088:	d006      	beq.n	8016098 <_scanf_float+0x250>
 801608a:	0550      	lsls	r0, r2, #21
 801608c:	f57f af0c 	bpl.w	8015ea8 <_scanf_float+0x60>
 8016090:	f1b9 0f00 	cmp.w	r9, #0
 8016094:	f43f af0f 	beq.w	8015eb6 <_scanf_float+0x6e>
 8016098:	0591      	lsls	r1, r2, #22
 801609a:	bf58      	it	pl
 801609c:	9901      	ldrpl	r1, [sp, #4]
 801609e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80160a2:	bf58      	it	pl
 80160a4:	eba9 0101 	subpl.w	r1, r9, r1
 80160a8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80160ac:	bf58      	it	pl
 80160ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80160b2:	6022      	str	r2, [r4, #0]
 80160b4:	f04f 0900 	mov.w	r9, #0
 80160b8:	e78a      	b.n	8015fd0 <_scanf_float+0x188>
 80160ba:	f04f 0a03 	mov.w	sl, #3
 80160be:	e787      	b.n	8015fd0 <_scanf_float+0x188>
 80160c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80160c4:	4639      	mov	r1, r7
 80160c6:	4640      	mov	r0, r8
 80160c8:	4798      	blx	r3
 80160ca:	2800      	cmp	r0, #0
 80160cc:	f43f aedf 	beq.w	8015e8e <_scanf_float+0x46>
 80160d0:	e6ea      	b.n	8015ea8 <_scanf_float+0x60>
 80160d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80160d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80160da:	463a      	mov	r2, r7
 80160dc:	4640      	mov	r0, r8
 80160de:	4798      	blx	r3
 80160e0:	6923      	ldr	r3, [r4, #16]
 80160e2:	3b01      	subs	r3, #1
 80160e4:	6123      	str	r3, [r4, #16]
 80160e6:	e6ec      	b.n	8015ec2 <_scanf_float+0x7a>
 80160e8:	1e6b      	subs	r3, r5, #1
 80160ea:	2b06      	cmp	r3, #6
 80160ec:	d825      	bhi.n	801613a <_scanf_float+0x2f2>
 80160ee:	2d02      	cmp	r5, #2
 80160f0:	d836      	bhi.n	8016160 <_scanf_float+0x318>
 80160f2:	455e      	cmp	r6, fp
 80160f4:	f67f aee8 	bls.w	8015ec8 <_scanf_float+0x80>
 80160f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80160fc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016100:	463a      	mov	r2, r7
 8016102:	4640      	mov	r0, r8
 8016104:	4798      	blx	r3
 8016106:	6923      	ldr	r3, [r4, #16]
 8016108:	3b01      	subs	r3, #1
 801610a:	6123      	str	r3, [r4, #16]
 801610c:	e7f1      	b.n	80160f2 <_scanf_float+0x2aa>
 801610e:	9802      	ldr	r0, [sp, #8]
 8016110:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016114:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016118:	9002      	str	r0, [sp, #8]
 801611a:	463a      	mov	r2, r7
 801611c:	4640      	mov	r0, r8
 801611e:	4798      	blx	r3
 8016120:	6923      	ldr	r3, [r4, #16]
 8016122:	3b01      	subs	r3, #1
 8016124:	6123      	str	r3, [r4, #16]
 8016126:	f10a 3aff 	add.w	sl, sl, #4294967295
 801612a:	fa5f fa8a 	uxtb.w	sl, sl
 801612e:	f1ba 0f02 	cmp.w	sl, #2
 8016132:	d1ec      	bne.n	801610e <_scanf_float+0x2c6>
 8016134:	3d03      	subs	r5, #3
 8016136:	b2ed      	uxtb	r5, r5
 8016138:	1b76      	subs	r6, r6, r5
 801613a:	6823      	ldr	r3, [r4, #0]
 801613c:	05da      	lsls	r2, r3, #23
 801613e:	d52f      	bpl.n	80161a0 <_scanf_float+0x358>
 8016140:	055b      	lsls	r3, r3, #21
 8016142:	d510      	bpl.n	8016166 <_scanf_float+0x31e>
 8016144:	455e      	cmp	r6, fp
 8016146:	f67f aebf 	bls.w	8015ec8 <_scanf_float+0x80>
 801614a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801614e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016152:	463a      	mov	r2, r7
 8016154:	4640      	mov	r0, r8
 8016156:	4798      	blx	r3
 8016158:	6923      	ldr	r3, [r4, #16]
 801615a:	3b01      	subs	r3, #1
 801615c:	6123      	str	r3, [r4, #16]
 801615e:	e7f1      	b.n	8016144 <_scanf_float+0x2fc>
 8016160:	46aa      	mov	sl, r5
 8016162:	9602      	str	r6, [sp, #8]
 8016164:	e7df      	b.n	8016126 <_scanf_float+0x2de>
 8016166:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801616a:	6923      	ldr	r3, [r4, #16]
 801616c:	2965      	cmp	r1, #101	; 0x65
 801616e:	f103 33ff 	add.w	r3, r3, #4294967295
 8016172:	f106 35ff 	add.w	r5, r6, #4294967295
 8016176:	6123      	str	r3, [r4, #16]
 8016178:	d00c      	beq.n	8016194 <_scanf_float+0x34c>
 801617a:	2945      	cmp	r1, #69	; 0x45
 801617c:	d00a      	beq.n	8016194 <_scanf_float+0x34c>
 801617e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016182:	463a      	mov	r2, r7
 8016184:	4640      	mov	r0, r8
 8016186:	4798      	blx	r3
 8016188:	6923      	ldr	r3, [r4, #16]
 801618a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801618e:	3b01      	subs	r3, #1
 8016190:	1eb5      	subs	r5, r6, #2
 8016192:	6123      	str	r3, [r4, #16]
 8016194:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016198:	463a      	mov	r2, r7
 801619a:	4640      	mov	r0, r8
 801619c:	4798      	blx	r3
 801619e:	462e      	mov	r6, r5
 80161a0:	6825      	ldr	r5, [r4, #0]
 80161a2:	f015 0510 	ands.w	r5, r5, #16
 80161a6:	d158      	bne.n	801625a <_scanf_float+0x412>
 80161a8:	7035      	strb	r5, [r6, #0]
 80161aa:	6823      	ldr	r3, [r4, #0]
 80161ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80161b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80161b4:	d11c      	bne.n	80161f0 <_scanf_float+0x3a8>
 80161b6:	9b01      	ldr	r3, [sp, #4]
 80161b8:	454b      	cmp	r3, r9
 80161ba:	eba3 0209 	sub.w	r2, r3, r9
 80161be:	d124      	bne.n	801620a <_scanf_float+0x3c2>
 80161c0:	2200      	movs	r2, #0
 80161c2:	4659      	mov	r1, fp
 80161c4:	4640      	mov	r0, r8
 80161c6:	f000 ff41 	bl	801704c <_strtod_r>
 80161ca:	9b03      	ldr	r3, [sp, #12]
 80161cc:	6821      	ldr	r1, [r4, #0]
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	f011 0f02 	tst.w	r1, #2
 80161d4:	ec57 6b10 	vmov	r6, r7, d0
 80161d8:	f103 0204 	add.w	r2, r3, #4
 80161dc:	d020      	beq.n	8016220 <_scanf_float+0x3d8>
 80161de:	9903      	ldr	r1, [sp, #12]
 80161e0:	600a      	str	r2, [r1, #0]
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	e9c3 6700 	strd	r6, r7, [r3]
 80161e8:	68e3      	ldr	r3, [r4, #12]
 80161ea:	3301      	adds	r3, #1
 80161ec:	60e3      	str	r3, [r4, #12]
 80161ee:	e66c      	b.n	8015eca <_scanf_float+0x82>
 80161f0:	9b04      	ldr	r3, [sp, #16]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d0e4      	beq.n	80161c0 <_scanf_float+0x378>
 80161f6:	9905      	ldr	r1, [sp, #20]
 80161f8:	230a      	movs	r3, #10
 80161fa:	462a      	mov	r2, r5
 80161fc:	3101      	adds	r1, #1
 80161fe:	4640      	mov	r0, r8
 8016200:	f000 ffae 	bl	8017160 <_strtol_r>
 8016204:	9b04      	ldr	r3, [sp, #16]
 8016206:	9e05      	ldr	r6, [sp, #20]
 8016208:	1ac2      	subs	r2, r0, r3
 801620a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801620e:	429e      	cmp	r6, r3
 8016210:	bf28      	it	cs
 8016212:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016216:	4912      	ldr	r1, [pc, #72]	; (8016260 <_scanf_float+0x418>)
 8016218:	4630      	mov	r0, r6
 801621a:	f000 f85f 	bl	80162dc <siprintf>
 801621e:	e7cf      	b.n	80161c0 <_scanf_float+0x378>
 8016220:	f011 0f04 	tst.w	r1, #4
 8016224:	9903      	ldr	r1, [sp, #12]
 8016226:	600a      	str	r2, [r1, #0]
 8016228:	d1db      	bne.n	80161e2 <_scanf_float+0x39a>
 801622a:	f8d3 8000 	ldr.w	r8, [r3]
 801622e:	ee10 2a10 	vmov	r2, s0
 8016232:	ee10 0a10 	vmov	r0, s0
 8016236:	463b      	mov	r3, r7
 8016238:	4639      	mov	r1, r7
 801623a:	f7ea fc8f 	bl	8000b5c <__aeabi_dcmpun>
 801623e:	b128      	cbz	r0, 801624c <_scanf_float+0x404>
 8016240:	4808      	ldr	r0, [pc, #32]	; (8016264 <_scanf_float+0x41c>)
 8016242:	f000 f811 	bl	8016268 <nanf>
 8016246:	ed88 0a00 	vstr	s0, [r8]
 801624a:	e7cd      	b.n	80161e8 <_scanf_float+0x3a0>
 801624c:	4630      	mov	r0, r6
 801624e:	4639      	mov	r1, r7
 8016250:	f7ea fce2 	bl	8000c18 <__aeabi_d2f>
 8016254:	f8c8 0000 	str.w	r0, [r8]
 8016258:	e7c6      	b.n	80161e8 <_scanf_float+0x3a0>
 801625a:	2500      	movs	r5, #0
 801625c:	e635      	b.n	8015eca <_scanf_float+0x82>
 801625e:	bf00      	nop
 8016260:	0801afce 	.word	0x0801afce
 8016264:	0801b463 	.word	0x0801b463

08016268 <nanf>:
 8016268:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016270 <nanf+0x8>
 801626c:	4770      	bx	lr
 801626e:	bf00      	nop
 8016270:	7fc00000 	.word	0x7fc00000

08016274 <sniprintf>:
 8016274:	b40c      	push	{r2, r3}
 8016276:	b530      	push	{r4, r5, lr}
 8016278:	4b17      	ldr	r3, [pc, #92]	; (80162d8 <sniprintf+0x64>)
 801627a:	1e0c      	subs	r4, r1, #0
 801627c:	681d      	ldr	r5, [r3, #0]
 801627e:	b09d      	sub	sp, #116	; 0x74
 8016280:	da08      	bge.n	8016294 <sniprintf+0x20>
 8016282:	238b      	movs	r3, #139	; 0x8b
 8016284:	602b      	str	r3, [r5, #0]
 8016286:	f04f 30ff 	mov.w	r0, #4294967295
 801628a:	b01d      	add	sp, #116	; 0x74
 801628c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016290:	b002      	add	sp, #8
 8016292:	4770      	bx	lr
 8016294:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016298:	f8ad 3014 	strh.w	r3, [sp, #20]
 801629c:	bf14      	ite	ne
 801629e:	f104 33ff 	addne.w	r3, r4, #4294967295
 80162a2:	4623      	moveq	r3, r4
 80162a4:	9304      	str	r3, [sp, #16]
 80162a6:	9307      	str	r3, [sp, #28]
 80162a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80162ac:	9002      	str	r0, [sp, #8]
 80162ae:	9006      	str	r0, [sp, #24]
 80162b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80162b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80162b6:	ab21      	add	r3, sp, #132	; 0x84
 80162b8:	a902      	add	r1, sp, #8
 80162ba:	4628      	mov	r0, r5
 80162bc:	9301      	str	r3, [sp, #4]
 80162be:	f003 f873 	bl	80193a8 <_svfiprintf_r>
 80162c2:	1c43      	adds	r3, r0, #1
 80162c4:	bfbc      	itt	lt
 80162c6:	238b      	movlt	r3, #139	; 0x8b
 80162c8:	602b      	strlt	r3, [r5, #0]
 80162ca:	2c00      	cmp	r4, #0
 80162cc:	d0dd      	beq.n	801628a <sniprintf+0x16>
 80162ce:	9b02      	ldr	r3, [sp, #8]
 80162d0:	2200      	movs	r2, #0
 80162d2:	701a      	strb	r2, [r3, #0]
 80162d4:	e7d9      	b.n	801628a <sniprintf+0x16>
 80162d6:	bf00      	nop
 80162d8:	2000000c 	.word	0x2000000c

080162dc <siprintf>:
 80162dc:	b40e      	push	{r1, r2, r3}
 80162de:	b500      	push	{lr}
 80162e0:	b09c      	sub	sp, #112	; 0x70
 80162e2:	ab1d      	add	r3, sp, #116	; 0x74
 80162e4:	9002      	str	r0, [sp, #8]
 80162e6:	9006      	str	r0, [sp, #24]
 80162e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80162ec:	4809      	ldr	r0, [pc, #36]	; (8016314 <siprintf+0x38>)
 80162ee:	9107      	str	r1, [sp, #28]
 80162f0:	9104      	str	r1, [sp, #16]
 80162f2:	4909      	ldr	r1, [pc, #36]	; (8016318 <siprintf+0x3c>)
 80162f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80162f8:	9105      	str	r1, [sp, #20]
 80162fa:	6800      	ldr	r0, [r0, #0]
 80162fc:	9301      	str	r3, [sp, #4]
 80162fe:	a902      	add	r1, sp, #8
 8016300:	f003 f852 	bl	80193a8 <_svfiprintf_r>
 8016304:	9b02      	ldr	r3, [sp, #8]
 8016306:	2200      	movs	r2, #0
 8016308:	701a      	strb	r2, [r3, #0]
 801630a:	b01c      	add	sp, #112	; 0x70
 801630c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016310:	b003      	add	sp, #12
 8016312:	4770      	bx	lr
 8016314:	2000000c 	.word	0x2000000c
 8016318:	ffff0208 	.word	0xffff0208

0801631c <siscanf>:
 801631c:	b40e      	push	{r1, r2, r3}
 801631e:	b510      	push	{r4, lr}
 8016320:	b09f      	sub	sp, #124	; 0x7c
 8016322:	ac21      	add	r4, sp, #132	; 0x84
 8016324:	f44f 7101 	mov.w	r1, #516	; 0x204
 8016328:	f854 2b04 	ldr.w	r2, [r4], #4
 801632c:	9201      	str	r2, [sp, #4]
 801632e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016332:	9004      	str	r0, [sp, #16]
 8016334:	9008      	str	r0, [sp, #32]
 8016336:	f7e9 ff63 	bl	8000200 <strlen>
 801633a:	4b0c      	ldr	r3, [pc, #48]	; (801636c <siscanf+0x50>)
 801633c:	9005      	str	r0, [sp, #20]
 801633e:	9009      	str	r0, [sp, #36]	; 0x24
 8016340:	930d      	str	r3, [sp, #52]	; 0x34
 8016342:	480b      	ldr	r0, [pc, #44]	; (8016370 <siscanf+0x54>)
 8016344:	9a01      	ldr	r2, [sp, #4]
 8016346:	6800      	ldr	r0, [r0, #0]
 8016348:	9403      	str	r4, [sp, #12]
 801634a:	2300      	movs	r3, #0
 801634c:	9311      	str	r3, [sp, #68]	; 0x44
 801634e:	9316      	str	r3, [sp, #88]	; 0x58
 8016350:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016354:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016358:	a904      	add	r1, sp, #16
 801635a:	4623      	mov	r3, r4
 801635c:	f003 f97e 	bl	801965c <__ssvfiscanf_r>
 8016360:	b01f      	add	sp, #124	; 0x7c
 8016362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016366:	b003      	add	sp, #12
 8016368:	4770      	bx	lr
 801636a:	bf00      	nop
 801636c:	08016397 	.word	0x08016397
 8016370:	2000000c 	.word	0x2000000c

08016374 <__sread>:
 8016374:	b510      	push	{r4, lr}
 8016376:	460c      	mov	r4, r1
 8016378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801637c:	f003 fd8c 	bl	8019e98 <_read_r>
 8016380:	2800      	cmp	r0, #0
 8016382:	bfab      	itete	ge
 8016384:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016386:	89a3      	ldrhlt	r3, [r4, #12]
 8016388:	181b      	addge	r3, r3, r0
 801638a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801638e:	bfac      	ite	ge
 8016390:	6563      	strge	r3, [r4, #84]	; 0x54
 8016392:	81a3      	strhlt	r3, [r4, #12]
 8016394:	bd10      	pop	{r4, pc}

08016396 <__seofread>:
 8016396:	2000      	movs	r0, #0
 8016398:	4770      	bx	lr

0801639a <__swrite>:
 801639a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801639e:	461f      	mov	r7, r3
 80163a0:	898b      	ldrh	r3, [r1, #12]
 80163a2:	05db      	lsls	r3, r3, #23
 80163a4:	4605      	mov	r5, r0
 80163a6:	460c      	mov	r4, r1
 80163a8:	4616      	mov	r6, r2
 80163aa:	d505      	bpl.n	80163b8 <__swrite+0x1e>
 80163ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163b0:	2302      	movs	r3, #2
 80163b2:	2200      	movs	r2, #0
 80163b4:	f002 f9fc 	bl	80187b0 <_lseek_r>
 80163b8:	89a3      	ldrh	r3, [r4, #12]
 80163ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80163be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80163c2:	81a3      	strh	r3, [r4, #12]
 80163c4:	4632      	mov	r2, r6
 80163c6:	463b      	mov	r3, r7
 80163c8:	4628      	mov	r0, r5
 80163ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80163ce:	f000 bee9 	b.w	80171a4 <_write_r>

080163d2 <__sseek>:
 80163d2:	b510      	push	{r4, lr}
 80163d4:	460c      	mov	r4, r1
 80163d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163da:	f002 f9e9 	bl	80187b0 <_lseek_r>
 80163de:	1c43      	adds	r3, r0, #1
 80163e0:	89a3      	ldrh	r3, [r4, #12]
 80163e2:	bf15      	itete	ne
 80163e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80163e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80163ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80163ee:	81a3      	strheq	r3, [r4, #12]
 80163f0:	bf18      	it	ne
 80163f2:	81a3      	strhne	r3, [r4, #12]
 80163f4:	bd10      	pop	{r4, pc}

080163f6 <__sclose>:
 80163f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163fa:	f000 bee5 	b.w	80171c8 <_close_r>

080163fe <sulp>:
 80163fe:	b570      	push	{r4, r5, r6, lr}
 8016400:	4604      	mov	r4, r0
 8016402:	460d      	mov	r5, r1
 8016404:	ec45 4b10 	vmov	d0, r4, r5
 8016408:	4616      	mov	r6, r2
 801640a:	f002 fd69 	bl	8018ee0 <__ulp>
 801640e:	ec51 0b10 	vmov	r0, r1, d0
 8016412:	b17e      	cbz	r6, 8016434 <sulp+0x36>
 8016414:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016418:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801641c:	2b00      	cmp	r3, #0
 801641e:	dd09      	ble.n	8016434 <sulp+0x36>
 8016420:	051b      	lsls	r3, r3, #20
 8016422:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016426:	2400      	movs	r4, #0
 8016428:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801642c:	4622      	mov	r2, r4
 801642e:	462b      	mov	r3, r5
 8016430:	f7ea f8fa 	bl	8000628 <__aeabi_dmul>
 8016434:	bd70      	pop	{r4, r5, r6, pc}
	...

08016438 <_strtod_l>:
 8016438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801643c:	b0a3      	sub	sp, #140	; 0x8c
 801643e:	461f      	mov	r7, r3
 8016440:	2300      	movs	r3, #0
 8016442:	931e      	str	r3, [sp, #120]	; 0x78
 8016444:	4ba4      	ldr	r3, [pc, #656]	; (80166d8 <_strtod_l+0x2a0>)
 8016446:	9219      	str	r2, [sp, #100]	; 0x64
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	9307      	str	r3, [sp, #28]
 801644c:	4604      	mov	r4, r0
 801644e:	4618      	mov	r0, r3
 8016450:	4688      	mov	r8, r1
 8016452:	f7e9 fed5 	bl	8000200 <strlen>
 8016456:	f04f 0a00 	mov.w	sl, #0
 801645a:	4605      	mov	r5, r0
 801645c:	f04f 0b00 	mov.w	fp, #0
 8016460:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016464:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016466:	781a      	ldrb	r2, [r3, #0]
 8016468:	2a2b      	cmp	r2, #43	; 0x2b
 801646a:	d04c      	beq.n	8016506 <_strtod_l+0xce>
 801646c:	d839      	bhi.n	80164e2 <_strtod_l+0xaa>
 801646e:	2a0d      	cmp	r2, #13
 8016470:	d832      	bhi.n	80164d8 <_strtod_l+0xa0>
 8016472:	2a08      	cmp	r2, #8
 8016474:	d832      	bhi.n	80164dc <_strtod_l+0xa4>
 8016476:	2a00      	cmp	r2, #0
 8016478:	d03c      	beq.n	80164f4 <_strtod_l+0xbc>
 801647a:	2300      	movs	r3, #0
 801647c:	930e      	str	r3, [sp, #56]	; 0x38
 801647e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016480:	7833      	ldrb	r3, [r6, #0]
 8016482:	2b30      	cmp	r3, #48	; 0x30
 8016484:	f040 80b4 	bne.w	80165f0 <_strtod_l+0x1b8>
 8016488:	7873      	ldrb	r3, [r6, #1]
 801648a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801648e:	2b58      	cmp	r3, #88	; 0x58
 8016490:	d16c      	bne.n	801656c <_strtod_l+0x134>
 8016492:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016494:	9301      	str	r3, [sp, #4]
 8016496:	ab1e      	add	r3, sp, #120	; 0x78
 8016498:	9702      	str	r7, [sp, #8]
 801649a:	9300      	str	r3, [sp, #0]
 801649c:	4a8f      	ldr	r2, [pc, #572]	; (80166dc <_strtod_l+0x2a4>)
 801649e:	ab1f      	add	r3, sp, #124	; 0x7c
 80164a0:	a91d      	add	r1, sp, #116	; 0x74
 80164a2:	4620      	mov	r0, r4
 80164a4:	f001 fe74 	bl	8018190 <__gethex>
 80164a8:	f010 0707 	ands.w	r7, r0, #7
 80164ac:	4605      	mov	r5, r0
 80164ae:	d005      	beq.n	80164bc <_strtod_l+0x84>
 80164b0:	2f06      	cmp	r7, #6
 80164b2:	d12a      	bne.n	801650a <_strtod_l+0xd2>
 80164b4:	3601      	adds	r6, #1
 80164b6:	2300      	movs	r3, #0
 80164b8:	961d      	str	r6, [sp, #116]	; 0x74
 80164ba:	930e      	str	r3, [sp, #56]	; 0x38
 80164bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80164be:	2b00      	cmp	r3, #0
 80164c0:	f040 8596 	bne.w	8016ff0 <_strtod_l+0xbb8>
 80164c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164c6:	b1db      	cbz	r3, 8016500 <_strtod_l+0xc8>
 80164c8:	4652      	mov	r2, sl
 80164ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80164ce:	ec43 2b10 	vmov	d0, r2, r3
 80164d2:	b023      	add	sp, #140	; 0x8c
 80164d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164d8:	2a20      	cmp	r2, #32
 80164da:	d1ce      	bne.n	801647a <_strtod_l+0x42>
 80164dc:	3301      	adds	r3, #1
 80164de:	931d      	str	r3, [sp, #116]	; 0x74
 80164e0:	e7c0      	b.n	8016464 <_strtod_l+0x2c>
 80164e2:	2a2d      	cmp	r2, #45	; 0x2d
 80164e4:	d1c9      	bne.n	801647a <_strtod_l+0x42>
 80164e6:	2201      	movs	r2, #1
 80164e8:	920e      	str	r2, [sp, #56]	; 0x38
 80164ea:	1c5a      	adds	r2, r3, #1
 80164ec:	921d      	str	r2, [sp, #116]	; 0x74
 80164ee:	785b      	ldrb	r3, [r3, #1]
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d1c4      	bne.n	801647e <_strtod_l+0x46>
 80164f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80164f6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	f040 8576 	bne.w	8016fec <_strtod_l+0xbb4>
 8016500:	4652      	mov	r2, sl
 8016502:	465b      	mov	r3, fp
 8016504:	e7e3      	b.n	80164ce <_strtod_l+0x96>
 8016506:	2200      	movs	r2, #0
 8016508:	e7ee      	b.n	80164e8 <_strtod_l+0xb0>
 801650a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801650c:	b13a      	cbz	r2, 801651e <_strtod_l+0xe6>
 801650e:	2135      	movs	r1, #53	; 0x35
 8016510:	a820      	add	r0, sp, #128	; 0x80
 8016512:	f002 fdf0 	bl	80190f6 <__copybits>
 8016516:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016518:	4620      	mov	r0, r4
 801651a:	f002 f9b5 	bl	8018888 <_Bfree>
 801651e:	3f01      	subs	r7, #1
 8016520:	2f05      	cmp	r7, #5
 8016522:	d807      	bhi.n	8016534 <_strtod_l+0xfc>
 8016524:	e8df f007 	tbb	[pc, r7]
 8016528:	1d180b0e 	.word	0x1d180b0e
 801652c:	030e      	.short	0x030e
 801652e:	f04f 0b00 	mov.w	fp, #0
 8016532:	46da      	mov	sl, fp
 8016534:	0728      	lsls	r0, r5, #28
 8016536:	d5c1      	bpl.n	80164bc <_strtod_l+0x84>
 8016538:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801653c:	e7be      	b.n	80164bc <_strtod_l+0x84>
 801653e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8016542:	e7f7      	b.n	8016534 <_strtod_l+0xfc>
 8016544:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8016548:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801654a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801654e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016552:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016556:	e7ed      	b.n	8016534 <_strtod_l+0xfc>
 8016558:	f8df b184 	ldr.w	fp, [pc, #388]	; 80166e0 <_strtod_l+0x2a8>
 801655c:	f04f 0a00 	mov.w	sl, #0
 8016560:	e7e8      	b.n	8016534 <_strtod_l+0xfc>
 8016562:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016566:	f04f 3aff 	mov.w	sl, #4294967295
 801656a:	e7e3      	b.n	8016534 <_strtod_l+0xfc>
 801656c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801656e:	1c5a      	adds	r2, r3, #1
 8016570:	921d      	str	r2, [sp, #116]	; 0x74
 8016572:	785b      	ldrb	r3, [r3, #1]
 8016574:	2b30      	cmp	r3, #48	; 0x30
 8016576:	d0f9      	beq.n	801656c <_strtod_l+0x134>
 8016578:	2b00      	cmp	r3, #0
 801657a:	d09f      	beq.n	80164bc <_strtod_l+0x84>
 801657c:	2301      	movs	r3, #1
 801657e:	f04f 0900 	mov.w	r9, #0
 8016582:	9304      	str	r3, [sp, #16]
 8016584:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016586:	930a      	str	r3, [sp, #40]	; 0x28
 8016588:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801658c:	464f      	mov	r7, r9
 801658e:	220a      	movs	r2, #10
 8016590:	981d      	ldr	r0, [sp, #116]	; 0x74
 8016592:	7806      	ldrb	r6, [r0, #0]
 8016594:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8016598:	b2d9      	uxtb	r1, r3
 801659a:	2909      	cmp	r1, #9
 801659c:	d92a      	bls.n	80165f4 <_strtod_l+0x1bc>
 801659e:	9907      	ldr	r1, [sp, #28]
 80165a0:	462a      	mov	r2, r5
 80165a2:	f003 fcdf 	bl	8019f64 <strncmp>
 80165a6:	b398      	cbz	r0, 8016610 <_strtod_l+0x1d8>
 80165a8:	2000      	movs	r0, #0
 80165aa:	4633      	mov	r3, r6
 80165ac:	463d      	mov	r5, r7
 80165ae:	9007      	str	r0, [sp, #28]
 80165b0:	4602      	mov	r2, r0
 80165b2:	2b65      	cmp	r3, #101	; 0x65
 80165b4:	d001      	beq.n	80165ba <_strtod_l+0x182>
 80165b6:	2b45      	cmp	r3, #69	; 0x45
 80165b8:	d118      	bne.n	80165ec <_strtod_l+0x1b4>
 80165ba:	b91d      	cbnz	r5, 80165c4 <_strtod_l+0x18c>
 80165bc:	9b04      	ldr	r3, [sp, #16]
 80165be:	4303      	orrs	r3, r0
 80165c0:	d098      	beq.n	80164f4 <_strtod_l+0xbc>
 80165c2:	2500      	movs	r5, #0
 80165c4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80165c8:	f108 0301 	add.w	r3, r8, #1
 80165cc:	931d      	str	r3, [sp, #116]	; 0x74
 80165ce:	f898 3001 	ldrb.w	r3, [r8, #1]
 80165d2:	2b2b      	cmp	r3, #43	; 0x2b
 80165d4:	d075      	beq.n	80166c2 <_strtod_l+0x28a>
 80165d6:	2b2d      	cmp	r3, #45	; 0x2d
 80165d8:	d07b      	beq.n	80166d2 <_strtod_l+0x29a>
 80165da:	f04f 0c00 	mov.w	ip, #0
 80165de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80165e2:	2909      	cmp	r1, #9
 80165e4:	f240 8082 	bls.w	80166ec <_strtod_l+0x2b4>
 80165e8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80165ec:	2600      	movs	r6, #0
 80165ee:	e09d      	b.n	801672c <_strtod_l+0x2f4>
 80165f0:	2300      	movs	r3, #0
 80165f2:	e7c4      	b.n	801657e <_strtod_l+0x146>
 80165f4:	2f08      	cmp	r7, #8
 80165f6:	bfd8      	it	le
 80165f8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80165fa:	f100 0001 	add.w	r0, r0, #1
 80165fe:	bfda      	itte	le
 8016600:	fb02 3301 	mlale	r3, r2, r1, r3
 8016604:	9309      	strle	r3, [sp, #36]	; 0x24
 8016606:	fb02 3909 	mlagt	r9, r2, r9, r3
 801660a:	3701      	adds	r7, #1
 801660c:	901d      	str	r0, [sp, #116]	; 0x74
 801660e:	e7bf      	b.n	8016590 <_strtod_l+0x158>
 8016610:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016612:	195a      	adds	r2, r3, r5
 8016614:	921d      	str	r2, [sp, #116]	; 0x74
 8016616:	5d5b      	ldrb	r3, [r3, r5]
 8016618:	2f00      	cmp	r7, #0
 801661a:	d037      	beq.n	801668c <_strtod_l+0x254>
 801661c:	9007      	str	r0, [sp, #28]
 801661e:	463d      	mov	r5, r7
 8016620:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8016624:	2a09      	cmp	r2, #9
 8016626:	d912      	bls.n	801664e <_strtod_l+0x216>
 8016628:	2201      	movs	r2, #1
 801662a:	e7c2      	b.n	80165b2 <_strtod_l+0x17a>
 801662c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801662e:	1c5a      	adds	r2, r3, #1
 8016630:	921d      	str	r2, [sp, #116]	; 0x74
 8016632:	785b      	ldrb	r3, [r3, #1]
 8016634:	3001      	adds	r0, #1
 8016636:	2b30      	cmp	r3, #48	; 0x30
 8016638:	d0f8      	beq.n	801662c <_strtod_l+0x1f4>
 801663a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801663e:	2a08      	cmp	r2, #8
 8016640:	f200 84db 	bhi.w	8016ffa <_strtod_l+0xbc2>
 8016644:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016646:	9007      	str	r0, [sp, #28]
 8016648:	2000      	movs	r0, #0
 801664a:	920a      	str	r2, [sp, #40]	; 0x28
 801664c:	4605      	mov	r5, r0
 801664e:	3b30      	subs	r3, #48	; 0x30
 8016650:	f100 0201 	add.w	r2, r0, #1
 8016654:	d014      	beq.n	8016680 <_strtod_l+0x248>
 8016656:	9907      	ldr	r1, [sp, #28]
 8016658:	4411      	add	r1, r2
 801665a:	9107      	str	r1, [sp, #28]
 801665c:	462a      	mov	r2, r5
 801665e:	eb00 0e05 	add.w	lr, r0, r5
 8016662:	210a      	movs	r1, #10
 8016664:	4572      	cmp	r2, lr
 8016666:	d113      	bne.n	8016690 <_strtod_l+0x258>
 8016668:	182a      	adds	r2, r5, r0
 801666a:	2a08      	cmp	r2, #8
 801666c:	f105 0501 	add.w	r5, r5, #1
 8016670:	4405      	add	r5, r0
 8016672:	dc1c      	bgt.n	80166ae <_strtod_l+0x276>
 8016674:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016676:	220a      	movs	r2, #10
 8016678:	fb02 3301 	mla	r3, r2, r1, r3
 801667c:	9309      	str	r3, [sp, #36]	; 0x24
 801667e:	2200      	movs	r2, #0
 8016680:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016682:	1c59      	adds	r1, r3, #1
 8016684:	911d      	str	r1, [sp, #116]	; 0x74
 8016686:	785b      	ldrb	r3, [r3, #1]
 8016688:	4610      	mov	r0, r2
 801668a:	e7c9      	b.n	8016620 <_strtod_l+0x1e8>
 801668c:	4638      	mov	r0, r7
 801668e:	e7d2      	b.n	8016636 <_strtod_l+0x1fe>
 8016690:	2a08      	cmp	r2, #8
 8016692:	dc04      	bgt.n	801669e <_strtod_l+0x266>
 8016694:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8016696:	434e      	muls	r6, r1
 8016698:	9609      	str	r6, [sp, #36]	; 0x24
 801669a:	3201      	adds	r2, #1
 801669c:	e7e2      	b.n	8016664 <_strtod_l+0x22c>
 801669e:	f102 0c01 	add.w	ip, r2, #1
 80166a2:	f1bc 0f10 	cmp.w	ip, #16
 80166a6:	bfd8      	it	le
 80166a8:	fb01 f909 	mulle.w	r9, r1, r9
 80166ac:	e7f5      	b.n	801669a <_strtod_l+0x262>
 80166ae:	2d10      	cmp	r5, #16
 80166b0:	bfdc      	itt	le
 80166b2:	220a      	movle	r2, #10
 80166b4:	fb02 3909 	mlale	r9, r2, r9, r3
 80166b8:	e7e1      	b.n	801667e <_strtod_l+0x246>
 80166ba:	2300      	movs	r3, #0
 80166bc:	9307      	str	r3, [sp, #28]
 80166be:	2201      	movs	r2, #1
 80166c0:	e77c      	b.n	80165bc <_strtod_l+0x184>
 80166c2:	f04f 0c00 	mov.w	ip, #0
 80166c6:	f108 0302 	add.w	r3, r8, #2
 80166ca:	931d      	str	r3, [sp, #116]	; 0x74
 80166cc:	f898 3002 	ldrb.w	r3, [r8, #2]
 80166d0:	e785      	b.n	80165de <_strtod_l+0x1a6>
 80166d2:	f04f 0c01 	mov.w	ip, #1
 80166d6:	e7f6      	b.n	80166c6 <_strtod_l+0x28e>
 80166d8:	0801b28c 	.word	0x0801b28c
 80166dc:	0801afd4 	.word	0x0801afd4
 80166e0:	7ff00000 	.word	0x7ff00000
 80166e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80166e6:	1c59      	adds	r1, r3, #1
 80166e8:	911d      	str	r1, [sp, #116]	; 0x74
 80166ea:	785b      	ldrb	r3, [r3, #1]
 80166ec:	2b30      	cmp	r3, #48	; 0x30
 80166ee:	d0f9      	beq.n	80166e4 <_strtod_l+0x2ac>
 80166f0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80166f4:	2908      	cmp	r1, #8
 80166f6:	f63f af79 	bhi.w	80165ec <_strtod_l+0x1b4>
 80166fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80166fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016700:	9308      	str	r3, [sp, #32]
 8016702:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016704:	1c59      	adds	r1, r3, #1
 8016706:	911d      	str	r1, [sp, #116]	; 0x74
 8016708:	785b      	ldrb	r3, [r3, #1]
 801670a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801670e:	2e09      	cmp	r6, #9
 8016710:	d937      	bls.n	8016782 <_strtod_l+0x34a>
 8016712:	9e08      	ldr	r6, [sp, #32]
 8016714:	1b89      	subs	r1, r1, r6
 8016716:	2908      	cmp	r1, #8
 8016718:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801671c:	dc02      	bgt.n	8016724 <_strtod_l+0x2ec>
 801671e:	4576      	cmp	r6, lr
 8016720:	bfa8      	it	ge
 8016722:	4676      	movge	r6, lr
 8016724:	f1bc 0f00 	cmp.w	ip, #0
 8016728:	d000      	beq.n	801672c <_strtod_l+0x2f4>
 801672a:	4276      	negs	r6, r6
 801672c:	2d00      	cmp	r5, #0
 801672e:	d14f      	bne.n	80167d0 <_strtod_l+0x398>
 8016730:	9904      	ldr	r1, [sp, #16]
 8016732:	4301      	orrs	r1, r0
 8016734:	f47f aec2 	bne.w	80164bc <_strtod_l+0x84>
 8016738:	2a00      	cmp	r2, #0
 801673a:	f47f aedb 	bne.w	80164f4 <_strtod_l+0xbc>
 801673e:	2b69      	cmp	r3, #105	; 0x69
 8016740:	d027      	beq.n	8016792 <_strtod_l+0x35a>
 8016742:	dc24      	bgt.n	801678e <_strtod_l+0x356>
 8016744:	2b49      	cmp	r3, #73	; 0x49
 8016746:	d024      	beq.n	8016792 <_strtod_l+0x35a>
 8016748:	2b4e      	cmp	r3, #78	; 0x4e
 801674a:	f47f aed3 	bne.w	80164f4 <_strtod_l+0xbc>
 801674e:	499e      	ldr	r1, [pc, #632]	; (80169c8 <_strtod_l+0x590>)
 8016750:	a81d      	add	r0, sp, #116	; 0x74
 8016752:	f001 ff75 	bl	8018640 <__match>
 8016756:	2800      	cmp	r0, #0
 8016758:	f43f aecc 	beq.w	80164f4 <_strtod_l+0xbc>
 801675c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801675e:	781b      	ldrb	r3, [r3, #0]
 8016760:	2b28      	cmp	r3, #40	; 0x28
 8016762:	d12d      	bne.n	80167c0 <_strtod_l+0x388>
 8016764:	4999      	ldr	r1, [pc, #612]	; (80169cc <_strtod_l+0x594>)
 8016766:	aa20      	add	r2, sp, #128	; 0x80
 8016768:	a81d      	add	r0, sp, #116	; 0x74
 801676a:	f001 ff7d 	bl	8018668 <__hexnan>
 801676e:	2805      	cmp	r0, #5
 8016770:	d126      	bne.n	80167c0 <_strtod_l+0x388>
 8016772:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016774:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8016778:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801677c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016780:	e69c      	b.n	80164bc <_strtod_l+0x84>
 8016782:	210a      	movs	r1, #10
 8016784:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016788:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801678c:	e7b9      	b.n	8016702 <_strtod_l+0x2ca>
 801678e:	2b6e      	cmp	r3, #110	; 0x6e
 8016790:	e7db      	b.n	801674a <_strtod_l+0x312>
 8016792:	498f      	ldr	r1, [pc, #572]	; (80169d0 <_strtod_l+0x598>)
 8016794:	a81d      	add	r0, sp, #116	; 0x74
 8016796:	f001 ff53 	bl	8018640 <__match>
 801679a:	2800      	cmp	r0, #0
 801679c:	f43f aeaa 	beq.w	80164f4 <_strtod_l+0xbc>
 80167a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80167a2:	498c      	ldr	r1, [pc, #560]	; (80169d4 <_strtod_l+0x59c>)
 80167a4:	3b01      	subs	r3, #1
 80167a6:	a81d      	add	r0, sp, #116	; 0x74
 80167a8:	931d      	str	r3, [sp, #116]	; 0x74
 80167aa:	f001 ff49 	bl	8018640 <__match>
 80167ae:	b910      	cbnz	r0, 80167b6 <_strtod_l+0x37e>
 80167b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80167b2:	3301      	adds	r3, #1
 80167b4:	931d      	str	r3, [sp, #116]	; 0x74
 80167b6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80169e4 <_strtod_l+0x5ac>
 80167ba:	f04f 0a00 	mov.w	sl, #0
 80167be:	e67d      	b.n	80164bc <_strtod_l+0x84>
 80167c0:	4885      	ldr	r0, [pc, #532]	; (80169d8 <_strtod_l+0x5a0>)
 80167c2:	f003 fb7d 	bl	8019ec0 <nan>
 80167c6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80167ca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80167ce:	e675      	b.n	80164bc <_strtod_l+0x84>
 80167d0:	9b07      	ldr	r3, [sp, #28]
 80167d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80167d4:	1af3      	subs	r3, r6, r3
 80167d6:	2f00      	cmp	r7, #0
 80167d8:	bf08      	it	eq
 80167da:	462f      	moveq	r7, r5
 80167dc:	2d10      	cmp	r5, #16
 80167de:	9308      	str	r3, [sp, #32]
 80167e0:	46a8      	mov	r8, r5
 80167e2:	bfa8      	it	ge
 80167e4:	f04f 0810 	movge.w	r8, #16
 80167e8:	f7e9 fea4 	bl	8000534 <__aeabi_ui2d>
 80167ec:	2d09      	cmp	r5, #9
 80167ee:	4682      	mov	sl, r0
 80167f0:	468b      	mov	fp, r1
 80167f2:	dd13      	ble.n	801681c <_strtod_l+0x3e4>
 80167f4:	4b79      	ldr	r3, [pc, #484]	; (80169dc <_strtod_l+0x5a4>)
 80167f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80167fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80167fe:	f7e9 ff13 	bl	8000628 <__aeabi_dmul>
 8016802:	4682      	mov	sl, r0
 8016804:	4648      	mov	r0, r9
 8016806:	468b      	mov	fp, r1
 8016808:	f7e9 fe94 	bl	8000534 <__aeabi_ui2d>
 801680c:	4602      	mov	r2, r0
 801680e:	460b      	mov	r3, r1
 8016810:	4650      	mov	r0, sl
 8016812:	4659      	mov	r1, fp
 8016814:	f7e9 fd52 	bl	80002bc <__adddf3>
 8016818:	4682      	mov	sl, r0
 801681a:	468b      	mov	fp, r1
 801681c:	2d0f      	cmp	r5, #15
 801681e:	dc38      	bgt.n	8016892 <_strtod_l+0x45a>
 8016820:	9b08      	ldr	r3, [sp, #32]
 8016822:	2b00      	cmp	r3, #0
 8016824:	f43f ae4a 	beq.w	80164bc <_strtod_l+0x84>
 8016828:	dd24      	ble.n	8016874 <_strtod_l+0x43c>
 801682a:	2b16      	cmp	r3, #22
 801682c:	dc0b      	bgt.n	8016846 <_strtod_l+0x40e>
 801682e:	4d6b      	ldr	r5, [pc, #428]	; (80169dc <_strtod_l+0x5a4>)
 8016830:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8016834:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016838:	4652      	mov	r2, sl
 801683a:	465b      	mov	r3, fp
 801683c:	f7e9 fef4 	bl	8000628 <__aeabi_dmul>
 8016840:	4682      	mov	sl, r0
 8016842:	468b      	mov	fp, r1
 8016844:	e63a      	b.n	80164bc <_strtod_l+0x84>
 8016846:	9a08      	ldr	r2, [sp, #32]
 8016848:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801684c:	4293      	cmp	r3, r2
 801684e:	db20      	blt.n	8016892 <_strtod_l+0x45a>
 8016850:	4c62      	ldr	r4, [pc, #392]	; (80169dc <_strtod_l+0x5a4>)
 8016852:	f1c5 050f 	rsb	r5, r5, #15
 8016856:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801685a:	4652      	mov	r2, sl
 801685c:	465b      	mov	r3, fp
 801685e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016862:	f7e9 fee1 	bl	8000628 <__aeabi_dmul>
 8016866:	9b08      	ldr	r3, [sp, #32]
 8016868:	1b5d      	subs	r5, r3, r5
 801686a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801686e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016872:	e7e3      	b.n	801683c <_strtod_l+0x404>
 8016874:	9b08      	ldr	r3, [sp, #32]
 8016876:	3316      	adds	r3, #22
 8016878:	db0b      	blt.n	8016892 <_strtod_l+0x45a>
 801687a:	9b07      	ldr	r3, [sp, #28]
 801687c:	4a57      	ldr	r2, [pc, #348]	; (80169dc <_strtod_l+0x5a4>)
 801687e:	1b9e      	subs	r6, r3, r6
 8016880:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8016884:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016888:	4650      	mov	r0, sl
 801688a:	4659      	mov	r1, fp
 801688c:	f7e9 fff6 	bl	800087c <__aeabi_ddiv>
 8016890:	e7d6      	b.n	8016840 <_strtod_l+0x408>
 8016892:	9b08      	ldr	r3, [sp, #32]
 8016894:	eba5 0808 	sub.w	r8, r5, r8
 8016898:	4498      	add	r8, r3
 801689a:	f1b8 0f00 	cmp.w	r8, #0
 801689e:	dd71      	ble.n	8016984 <_strtod_l+0x54c>
 80168a0:	f018 030f 	ands.w	r3, r8, #15
 80168a4:	d00a      	beq.n	80168bc <_strtod_l+0x484>
 80168a6:	494d      	ldr	r1, [pc, #308]	; (80169dc <_strtod_l+0x5a4>)
 80168a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80168ac:	4652      	mov	r2, sl
 80168ae:	465b      	mov	r3, fp
 80168b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168b4:	f7e9 feb8 	bl	8000628 <__aeabi_dmul>
 80168b8:	4682      	mov	sl, r0
 80168ba:	468b      	mov	fp, r1
 80168bc:	f038 080f 	bics.w	r8, r8, #15
 80168c0:	d04d      	beq.n	801695e <_strtod_l+0x526>
 80168c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80168c6:	dd22      	ble.n	801690e <_strtod_l+0x4d6>
 80168c8:	2500      	movs	r5, #0
 80168ca:	462e      	mov	r6, r5
 80168cc:	9509      	str	r5, [sp, #36]	; 0x24
 80168ce:	9507      	str	r5, [sp, #28]
 80168d0:	2322      	movs	r3, #34	; 0x22
 80168d2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80169e4 <_strtod_l+0x5ac>
 80168d6:	6023      	str	r3, [r4, #0]
 80168d8:	f04f 0a00 	mov.w	sl, #0
 80168dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168de:	2b00      	cmp	r3, #0
 80168e0:	f43f adec 	beq.w	80164bc <_strtod_l+0x84>
 80168e4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80168e6:	4620      	mov	r0, r4
 80168e8:	f001 ffce 	bl	8018888 <_Bfree>
 80168ec:	9907      	ldr	r1, [sp, #28]
 80168ee:	4620      	mov	r0, r4
 80168f0:	f001 ffca 	bl	8018888 <_Bfree>
 80168f4:	4631      	mov	r1, r6
 80168f6:	4620      	mov	r0, r4
 80168f8:	f001 ffc6 	bl	8018888 <_Bfree>
 80168fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80168fe:	4620      	mov	r0, r4
 8016900:	f001 ffc2 	bl	8018888 <_Bfree>
 8016904:	4629      	mov	r1, r5
 8016906:	4620      	mov	r0, r4
 8016908:	f001 ffbe 	bl	8018888 <_Bfree>
 801690c:	e5d6      	b.n	80164bc <_strtod_l+0x84>
 801690e:	2300      	movs	r3, #0
 8016910:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016914:	4650      	mov	r0, sl
 8016916:	4659      	mov	r1, fp
 8016918:	4699      	mov	r9, r3
 801691a:	f1b8 0f01 	cmp.w	r8, #1
 801691e:	dc21      	bgt.n	8016964 <_strtod_l+0x52c>
 8016920:	b10b      	cbz	r3, 8016926 <_strtod_l+0x4ee>
 8016922:	4682      	mov	sl, r0
 8016924:	468b      	mov	fp, r1
 8016926:	4b2e      	ldr	r3, [pc, #184]	; (80169e0 <_strtod_l+0x5a8>)
 8016928:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801692c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8016930:	4652      	mov	r2, sl
 8016932:	465b      	mov	r3, fp
 8016934:	e9d9 0100 	ldrd	r0, r1, [r9]
 8016938:	f7e9 fe76 	bl	8000628 <__aeabi_dmul>
 801693c:	4b29      	ldr	r3, [pc, #164]	; (80169e4 <_strtod_l+0x5ac>)
 801693e:	460a      	mov	r2, r1
 8016940:	400b      	ands	r3, r1
 8016942:	4929      	ldr	r1, [pc, #164]	; (80169e8 <_strtod_l+0x5b0>)
 8016944:	428b      	cmp	r3, r1
 8016946:	4682      	mov	sl, r0
 8016948:	d8be      	bhi.n	80168c8 <_strtod_l+0x490>
 801694a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801694e:	428b      	cmp	r3, r1
 8016950:	bf86      	itte	hi
 8016952:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80169ec <_strtod_l+0x5b4>
 8016956:	f04f 3aff 	movhi.w	sl, #4294967295
 801695a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801695e:	2300      	movs	r3, #0
 8016960:	9304      	str	r3, [sp, #16]
 8016962:	e081      	b.n	8016a68 <_strtod_l+0x630>
 8016964:	f018 0f01 	tst.w	r8, #1
 8016968:	d007      	beq.n	801697a <_strtod_l+0x542>
 801696a:	4b1d      	ldr	r3, [pc, #116]	; (80169e0 <_strtod_l+0x5a8>)
 801696c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8016970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016974:	f7e9 fe58 	bl	8000628 <__aeabi_dmul>
 8016978:	2301      	movs	r3, #1
 801697a:	f109 0901 	add.w	r9, r9, #1
 801697e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016982:	e7ca      	b.n	801691a <_strtod_l+0x4e2>
 8016984:	d0eb      	beq.n	801695e <_strtod_l+0x526>
 8016986:	f1c8 0800 	rsb	r8, r8, #0
 801698a:	f018 020f 	ands.w	r2, r8, #15
 801698e:	d00a      	beq.n	80169a6 <_strtod_l+0x56e>
 8016990:	4b12      	ldr	r3, [pc, #72]	; (80169dc <_strtod_l+0x5a4>)
 8016992:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016996:	4650      	mov	r0, sl
 8016998:	4659      	mov	r1, fp
 801699a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801699e:	f7e9 ff6d 	bl	800087c <__aeabi_ddiv>
 80169a2:	4682      	mov	sl, r0
 80169a4:	468b      	mov	fp, r1
 80169a6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80169aa:	d0d8      	beq.n	801695e <_strtod_l+0x526>
 80169ac:	f1b8 0f1f 	cmp.w	r8, #31
 80169b0:	dd1e      	ble.n	80169f0 <_strtod_l+0x5b8>
 80169b2:	2500      	movs	r5, #0
 80169b4:	462e      	mov	r6, r5
 80169b6:	9509      	str	r5, [sp, #36]	; 0x24
 80169b8:	9507      	str	r5, [sp, #28]
 80169ba:	2322      	movs	r3, #34	; 0x22
 80169bc:	f04f 0a00 	mov.w	sl, #0
 80169c0:	f04f 0b00 	mov.w	fp, #0
 80169c4:	6023      	str	r3, [r4, #0]
 80169c6:	e789      	b.n	80168dc <_strtod_l+0x4a4>
 80169c8:	0801afa9 	.word	0x0801afa9
 80169cc:	0801afe8 	.word	0x0801afe8
 80169d0:	0801afa1 	.word	0x0801afa1
 80169d4:	0801b12c 	.word	0x0801b12c
 80169d8:	0801b463 	.word	0x0801b463
 80169dc:	0801b328 	.word	0x0801b328
 80169e0:	0801b300 	.word	0x0801b300
 80169e4:	7ff00000 	.word	0x7ff00000
 80169e8:	7ca00000 	.word	0x7ca00000
 80169ec:	7fefffff 	.word	0x7fefffff
 80169f0:	f018 0310 	ands.w	r3, r8, #16
 80169f4:	bf18      	it	ne
 80169f6:	236a      	movne	r3, #106	; 0x6a
 80169f8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8016db0 <_strtod_l+0x978>
 80169fc:	9304      	str	r3, [sp, #16]
 80169fe:	4650      	mov	r0, sl
 8016a00:	4659      	mov	r1, fp
 8016a02:	2300      	movs	r3, #0
 8016a04:	f018 0f01 	tst.w	r8, #1
 8016a08:	d004      	beq.n	8016a14 <_strtod_l+0x5dc>
 8016a0a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8016a0e:	f7e9 fe0b 	bl	8000628 <__aeabi_dmul>
 8016a12:	2301      	movs	r3, #1
 8016a14:	ea5f 0868 	movs.w	r8, r8, asr #1
 8016a18:	f109 0908 	add.w	r9, r9, #8
 8016a1c:	d1f2      	bne.n	8016a04 <_strtod_l+0x5cc>
 8016a1e:	b10b      	cbz	r3, 8016a24 <_strtod_l+0x5ec>
 8016a20:	4682      	mov	sl, r0
 8016a22:	468b      	mov	fp, r1
 8016a24:	9b04      	ldr	r3, [sp, #16]
 8016a26:	b1bb      	cbz	r3, 8016a58 <_strtod_l+0x620>
 8016a28:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016a2c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	4659      	mov	r1, fp
 8016a34:	dd10      	ble.n	8016a58 <_strtod_l+0x620>
 8016a36:	2b1f      	cmp	r3, #31
 8016a38:	f340 8128 	ble.w	8016c8c <_strtod_l+0x854>
 8016a3c:	2b34      	cmp	r3, #52	; 0x34
 8016a3e:	bfde      	ittt	le
 8016a40:	3b20      	suble	r3, #32
 8016a42:	f04f 32ff 	movle.w	r2, #4294967295
 8016a46:	fa02 f303 	lslle.w	r3, r2, r3
 8016a4a:	f04f 0a00 	mov.w	sl, #0
 8016a4e:	bfcc      	ite	gt
 8016a50:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016a54:	ea03 0b01 	andle.w	fp, r3, r1
 8016a58:	2200      	movs	r2, #0
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	4650      	mov	r0, sl
 8016a5e:	4659      	mov	r1, fp
 8016a60:	f7ea f84a 	bl	8000af8 <__aeabi_dcmpeq>
 8016a64:	2800      	cmp	r0, #0
 8016a66:	d1a4      	bne.n	80169b2 <_strtod_l+0x57a>
 8016a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a6a:	9300      	str	r3, [sp, #0]
 8016a6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016a6e:	462b      	mov	r3, r5
 8016a70:	463a      	mov	r2, r7
 8016a72:	4620      	mov	r0, r4
 8016a74:	f001 ff74 	bl	8018960 <__s2b>
 8016a78:	9009      	str	r0, [sp, #36]	; 0x24
 8016a7a:	2800      	cmp	r0, #0
 8016a7c:	f43f af24 	beq.w	80168c8 <_strtod_l+0x490>
 8016a80:	9b07      	ldr	r3, [sp, #28]
 8016a82:	1b9e      	subs	r6, r3, r6
 8016a84:	9b08      	ldr	r3, [sp, #32]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	bfb4      	ite	lt
 8016a8a:	4633      	movlt	r3, r6
 8016a8c:	2300      	movge	r3, #0
 8016a8e:	9310      	str	r3, [sp, #64]	; 0x40
 8016a90:	9b08      	ldr	r3, [sp, #32]
 8016a92:	2500      	movs	r5, #0
 8016a94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016a98:	9318      	str	r3, [sp, #96]	; 0x60
 8016a9a:	462e      	mov	r6, r5
 8016a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a9e:	4620      	mov	r0, r4
 8016aa0:	6859      	ldr	r1, [r3, #4]
 8016aa2:	f001 feb1 	bl	8018808 <_Balloc>
 8016aa6:	9007      	str	r0, [sp, #28]
 8016aa8:	2800      	cmp	r0, #0
 8016aaa:	f43f af11 	beq.w	80168d0 <_strtod_l+0x498>
 8016aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ab0:	691a      	ldr	r2, [r3, #16]
 8016ab2:	3202      	adds	r2, #2
 8016ab4:	f103 010c 	add.w	r1, r3, #12
 8016ab8:	0092      	lsls	r2, r2, #2
 8016aba:	300c      	adds	r0, #12
 8016abc:	f7fe fd44 	bl	8015548 <memcpy>
 8016ac0:	ec4b ab10 	vmov	d0, sl, fp
 8016ac4:	aa20      	add	r2, sp, #128	; 0x80
 8016ac6:	a91f      	add	r1, sp, #124	; 0x7c
 8016ac8:	4620      	mov	r0, r4
 8016aca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8016ace:	f002 fa83 	bl	8018fd8 <__d2b>
 8016ad2:	901e      	str	r0, [sp, #120]	; 0x78
 8016ad4:	2800      	cmp	r0, #0
 8016ad6:	f43f aefb 	beq.w	80168d0 <_strtod_l+0x498>
 8016ada:	2101      	movs	r1, #1
 8016adc:	4620      	mov	r0, r4
 8016ade:	f001 ffd9 	bl	8018a94 <__i2b>
 8016ae2:	4606      	mov	r6, r0
 8016ae4:	2800      	cmp	r0, #0
 8016ae6:	f43f aef3 	beq.w	80168d0 <_strtod_l+0x498>
 8016aea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016aec:	9904      	ldr	r1, [sp, #16]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	bfab      	itete	ge
 8016af2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8016af4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8016af6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8016af8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8016afc:	bfac      	ite	ge
 8016afe:	eb03 0902 	addge.w	r9, r3, r2
 8016b02:	1ad7      	sublt	r7, r2, r3
 8016b04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016b06:	eba3 0801 	sub.w	r8, r3, r1
 8016b0a:	4490      	add	r8, r2
 8016b0c:	4ba3      	ldr	r3, [pc, #652]	; (8016d9c <_strtod_l+0x964>)
 8016b0e:	f108 38ff 	add.w	r8, r8, #4294967295
 8016b12:	4598      	cmp	r8, r3
 8016b14:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016b18:	f280 80cc 	bge.w	8016cb4 <_strtod_l+0x87c>
 8016b1c:	eba3 0308 	sub.w	r3, r3, r8
 8016b20:	2b1f      	cmp	r3, #31
 8016b22:	eba2 0203 	sub.w	r2, r2, r3
 8016b26:	f04f 0101 	mov.w	r1, #1
 8016b2a:	f300 80b6 	bgt.w	8016c9a <_strtod_l+0x862>
 8016b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8016b32:	9311      	str	r3, [sp, #68]	; 0x44
 8016b34:	2300      	movs	r3, #0
 8016b36:	930c      	str	r3, [sp, #48]	; 0x30
 8016b38:	eb09 0802 	add.w	r8, r9, r2
 8016b3c:	9b04      	ldr	r3, [sp, #16]
 8016b3e:	45c1      	cmp	r9, r8
 8016b40:	4417      	add	r7, r2
 8016b42:	441f      	add	r7, r3
 8016b44:	464b      	mov	r3, r9
 8016b46:	bfa8      	it	ge
 8016b48:	4643      	movge	r3, r8
 8016b4a:	42bb      	cmp	r3, r7
 8016b4c:	bfa8      	it	ge
 8016b4e:	463b      	movge	r3, r7
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	bfc2      	ittt	gt
 8016b54:	eba8 0803 	subgt.w	r8, r8, r3
 8016b58:	1aff      	subgt	r7, r7, r3
 8016b5a:	eba9 0903 	subgt.w	r9, r9, r3
 8016b5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	dd17      	ble.n	8016b94 <_strtod_l+0x75c>
 8016b64:	4631      	mov	r1, r6
 8016b66:	461a      	mov	r2, r3
 8016b68:	4620      	mov	r0, r4
 8016b6a:	f002 f84f 	bl	8018c0c <__pow5mult>
 8016b6e:	4606      	mov	r6, r0
 8016b70:	2800      	cmp	r0, #0
 8016b72:	f43f aead 	beq.w	80168d0 <_strtod_l+0x498>
 8016b76:	4601      	mov	r1, r0
 8016b78:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016b7a:	4620      	mov	r0, r4
 8016b7c:	f001 ffa0 	bl	8018ac0 <__multiply>
 8016b80:	900f      	str	r0, [sp, #60]	; 0x3c
 8016b82:	2800      	cmp	r0, #0
 8016b84:	f43f aea4 	beq.w	80168d0 <_strtod_l+0x498>
 8016b88:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016b8a:	4620      	mov	r0, r4
 8016b8c:	f001 fe7c 	bl	8018888 <_Bfree>
 8016b90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016b92:	931e      	str	r3, [sp, #120]	; 0x78
 8016b94:	f1b8 0f00 	cmp.w	r8, #0
 8016b98:	f300 8091 	bgt.w	8016cbe <_strtod_l+0x886>
 8016b9c:	9b08      	ldr	r3, [sp, #32]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	dd08      	ble.n	8016bb4 <_strtod_l+0x77c>
 8016ba2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016ba4:	9907      	ldr	r1, [sp, #28]
 8016ba6:	4620      	mov	r0, r4
 8016ba8:	f002 f830 	bl	8018c0c <__pow5mult>
 8016bac:	9007      	str	r0, [sp, #28]
 8016bae:	2800      	cmp	r0, #0
 8016bb0:	f43f ae8e 	beq.w	80168d0 <_strtod_l+0x498>
 8016bb4:	2f00      	cmp	r7, #0
 8016bb6:	dd08      	ble.n	8016bca <_strtod_l+0x792>
 8016bb8:	9907      	ldr	r1, [sp, #28]
 8016bba:	463a      	mov	r2, r7
 8016bbc:	4620      	mov	r0, r4
 8016bbe:	f002 f87f 	bl	8018cc0 <__lshift>
 8016bc2:	9007      	str	r0, [sp, #28]
 8016bc4:	2800      	cmp	r0, #0
 8016bc6:	f43f ae83 	beq.w	80168d0 <_strtod_l+0x498>
 8016bca:	f1b9 0f00 	cmp.w	r9, #0
 8016bce:	dd08      	ble.n	8016be2 <_strtod_l+0x7aa>
 8016bd0:	4631      	mov	r1, r6
 8016bd2:	464a      	mov	r2, r9
 8016bd4:	4620      	mov	r0, r4
 8016bd6:	f002 f873 	bl	8018cc0 <__lshift>
 8016bda:	4606      	mov	r6, r0
 8016bdc:	2800      	cmp	r0, #0
 8016bde:	f43f ae77 	beq.w	80168d0 <_strtod_l+0x498>
 8016be2:	9a07      	ldr	r2, [sp, #28]
 8016be4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016be6:	4620      	mov	r0, r4
 8016be8:	f002 f8f2 	bl	8018dd0 <__mdiff>
 8016bec:	4605      	mov	r5, r0
 8016bee:	2800      	cmp	r0, #0
 8016bf0:	f43f ae6e 	beq.w	80168d0 <_strtod_l+0x498>
 8016bf4:	68c3      	ldr	r3, [r0, #12]
 8016bf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8016bf8:	2300      	movs	r3, #0
 8016bfa:	60c3      	str	r3, [r0, #12]
 8016bfc:	4631      	mov	r1, r6
 8016bfe:	f002 f8cb 	bl	8018d98 <__mcmp>
 8016c02:	2800      	cmp	r0, #0
 8016c04:	da65      	bge.n	8016cd2 <_strtod_l+0x89a>
 8016c06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c08:	ea53 030a 	orrs.w	r3, r3, sl
 8016c0c:	f040 8087 	bne.w	8016d1e <_strtod_l+0x8e6>
 8016c10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	f040 8082 	bne.w	8016d1e <_strtod_l+0x8e6>
 8016c1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016c1e:	0d1b      	lsrs	r3, r3, #20
 8016c20:	051b      	lsls	r3, r3, #20
 8016c22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016c26:	d97a      	bls.n	8016d1e <_strtod_l+0x8e6>
 8016c28:	696b      	ldr	r3, [r5, #20]
 8016c2a:	b913      	cbnz	r3, 8016c32 <_strtod_l+0x7fa>
 8016c2c:	692b      	ldr	r3, [r5, #16]
 8016c2e:	2b01      	cmp	r3, #1
 8016c30:	dd75      	ble.n	8016d1e <_strtod_l+0x8e6>
 8016c32:	4629      	mov	r1, r5
 8016c34:	2201      	movs	r2, #1
 8016c36:	4620      	mov	r0, r4
 8016c38:	f002 f842 	bl	8018cc0 <__lshift>
 8016c3c:	4631      	mov	r1, r6
 8016c3e:	4605      	mov	r5, r0
 8016c40:	f002 f8aa 	bl	8018d98 <__mcmp>
 8016c44:	2800      	cmp	r0, #0
 8016c46:	dd6a      	ble.n	8016d1e <_strtod_l+0x8e6>
 8016c48:	9904      	ldr	r1, [sp, #16]
 8016c4a:	4a55      	ldr	r2, [pc, #340]	; (8016da0 <_strtod_l+0x968>)
 8016c4c:	465b      	mov	r3, fp
 8016c4e:	2900      	cmp	r1, #0
 8016c50:	f000 8085 	beq.w	8016d5e <_strtod_l+0x926>
 8016c54:	ea02 010b 	and.w	r1, r2, fp
 8016c58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016c5c:	dc7f      	bgt.n	8016d5e <_strtod_l+0x926>
 8016c5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016c62:	f77f aeaa 	ble.w	80169ba <_strtod_l+0x582>
 8016c66:	4a4f      	ldr	r2, [pc, #316]	; (8016da4 <_strtod_l+0x96c>)
 8016c68:	2300      	movs	r3, #0
 8016c6a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8016c6e:	4650      	mov	r0, sl
 8016c70:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8016c74:	4659      	mov	r1, fp
 8016c76:	f7e9 fcd7 	bl	8000628 <__aeabi_dmul>
 8016c7a:	460b      	mov	r3, r1
 8016c7c:	4303      	orrs	r3, r0
 8016c7e:	bf08      	it	eq
 8016c80:	2322      	moveq	r3, #34	; 0x22
 8016c82:	4682      	mov	sl, r0
 8016c84:	468b      	mov	fp, r1
 8016c86:	bf08      	it	eq
 8016c88:	6023      	streq	r3, [r4, #0]
 8016c8a:	e62b      	b.n	80168e4 <_strtod_l+0x4ac>
 8016c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8016c90:	fa02 f303 	lsl.w	r3, r2, r3
 8016c94:	ea03 0a0a 	and.w	sl, r3, sl
 8016c98:	e6de      	b.n	8016a58 <_strtod_l+0x620>
 8016c9a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8016c9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8016ca2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8016ca6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8016caa:	fa01 f308 	lsl.w	r3, r1, r8
 8016cae:	930c      	str	r3, [sp, #48]	; 0x30
 8016cb0:	9111      	str	r1, [sp, #68]	; 0x44
 8016cb2:	e741      	b.n	8016b38 <_strtod_l+0x700>
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	930c      	str	r3, [sp, #48]	; 0x30
 8016cb8:	2301      	movs	r3, #1
 8016cba:	9311      	str	r3, [sp, #68]	; 0x44
 8016cbc:	e73c      	b.n	8016b38 <_strtod_l+0x700>
 8016cbe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016cc0:	4642      	mov	r2, r8
 8016cc2:	4620      	mov	r0, r4
 8016cc4:	f001 fffc 	bl	8018cc0 <__lshift>
 8016cc8:	901e      	str	r0, [sp, #120]	; 0x78
 8016cca:	2800      	cmp	r0, #0
 8016ccc:	f47f af66 	bne.w	8016b9c <_strtod_l+0x764>
 8016cd0:	e5fe      	b.n	80168d0 <_strtod_l+0x498>
 8016cd2:	465f      	mov	r7, fp
 8016cd4:	d16e      	bne.n	8016db4 <_strtod_l+0x97c>
 8016cd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016cd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016cdc:	b342      	cbz	r2, 8016d30 <_strtod_l+0x8f8>
 8016cde:	4a32      	ldr	r2, [pc, #200]	; (8016da8 <_strtod_l+0x970>)
 8016ce0:	4293      	cmp	r3, r2
 8016ce2:	d128      	bne.n	8016d36 <_strtod_l+0x8fe>
 8016ce4:	9b04      	ldr	r3, [sp, #16]
 8016ce6:	4650      	mov	r0, sl
 8016ce8:	b1eb      	cbz	r3, 8016d26 <_strtod_l+0x8ee>
 8016cea:	4a2d      	ldr	r2, [pc, #180]	; (8016da0 <_strtod_l+0x968>)
 8016cec:	403a      	ands	r2, r7
 8016cee:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016cf2:	f04f 31ff 	mov.w	r1, #4294967295
 8016cf6:	d819      	bhi.n	8016d2c <_strtod_l+0x8f4>
 8016cf8:	0d12      	lsrs	r2, r2, #20
 8016cfa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8016d02:	4298      	cmp	r0, r3
 8016d04:	d117      	bne.n	8016d36 <_strtod_l+0x8fe>
 8016d06:	4b29      	ldr	r3, [pc, #164]	; (8016dac <_strtod_l+0x974>)
 8016d08:	429f      	cmp	r7, r3
 8016d0a:	d102      	bne.n	8016d12 <_strtod_l+0x8da>
 8016d0c:	3001      	adds	r0, #1
 8016d0e:	f43f addf 	beq.w	80168d0 <_strtod_l+0x498>
 8016d12:	4b23      	ldr	r3, [pc, #140]	; (8016da0 <_strtod_l+0x968>)
 8016d14:	403b      	ands	r3, r7
 8016d16:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016d1a:	f04f 0a00 	mov.w	sl, #0
 8016d1e:	9b04      	ldr	r3, [sp, #16]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d1a0      	bne.n	8016c66 <_strtod_l+0x82e>
 8016d24:	e5de      	b.n	80168e4 <_strtod_l+0x4ac>
 8016d26:	f04f 33ff 	mov.w	r3, #4294967295
 8016d2a:	e7ea      	b.n	8016d02 <_strtod_l+0x8ca>
 8016d2c:	460b      	mov	r3, r1
 8016d2e:	e7e8      	b.n	8016d02 <_strtod_l+0x8ca>
 8016d30:	ea53 030a 	orrs.w	r3, r3, sl
 8016d34:	d088      	beq.n	8016c48 <_strtod_l+0x810>
 8016d36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d38:	b1db      	cbz	r3, 8016d72 <_strtod_l+0x93a>
 8016d3a:	423b      	tst	r3, r7
 8016d3c:	d0ef      	beq.n	8016d1e <_strtod_l+0x8e6>
 8016d3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d40:	9a04      	ldr	r2, [sp, #16]
 8016d42:	4650      	mov	r0, sl
 8016d44:	4659      	mov	r1, fp
 8016d46:	b1c3      	cbz	r3, 8016d7a <_strtod_l+0x942>
 8016d48:	f7ff fb59 	bl	80163fe <sulp>
 8016d4c:	4602      	mov	r2, r0
 8016d4e:	460b      	mov	r3, r1
 8016d50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016d54:	f7e9 fab2 	bl	80002bc <__adddf3>
 8016d58:	4682      	mov	sl, r0
 8016d5a:	468b      	mov	fp, r1
 8016d5c:	e7df      	b.n	8016d1e <_strtod_l+0x8e6>
 8016d5e:	4013      	ands	r3, r2
 8016d60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016d64:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016d68:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016d6c:	f04f 3aff 	mov.w	sl, #4294967295
 8016d70:	e7d5      	b.n	8016d1e <_strtod_l+0x8e6>
 8016d72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016d74:	ea13 0f0a 	tst.w	r3, sl
 8016d78:	e7e0      	b.n	8016d3c <_strtod_l+0x904>
 8016d7a:	f7ff fb40 	bl	80163fe <sulp>
 8016d7e:	4602      	mov	r2, r0
 8016d80:	460b      	mov	r3, r1
 8016d82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016d86:	f7e9 fa97 	bl	80002b8 <__aeabi_dsub>
 8016d8a:	2200      	movs	r2, #0
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	4682      	mov	sl, r0
 8016d90:	468b      	mov	fp, r1
 8016d92:	f7e9 feb1 	bl	8000af8 <__aeabi_dcmpeq>
 8016d96:	2800      	cmp	r0, #0
 8016d98:	d0c1      	beq.n	8016d1e <_strtod_l+0x8e6>
 8016d9a:	e60e      	b.n	80169ba <_strtod_l+0x582>
 8016d9c:	fffffc02 	.word	0xfffffc02
 8016da0:	7ff00000 	.word	0x7ff00000
 8016da4:	39500000 	.word	0x39500000
 8016da8:	000fffff 	.word	0x000fffff
 8016dac:	7fefffff 	.word	0x7fefffff
 8016db0:	0801b000 	.word	0x0801b000
 8016db4:	4631      	mov	r1, r6
 8016db6:	4628      	mov	r0, r5
 8016db8:	f002 f96a 	bl	8019090 <__ratio>
 8016dbc:	ec59 8b10 	vmov	r8, r9, d0
 8016dc0:	ee10 0a10 	vmov	r0, s0
 8016dc4:	2200      	movs	r2, #0
 8016dc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016dca:	4649      	mov	r1, r9
 8016dcc:	f7e9 fea8 	bl	8000b20 <__aeabi_dcmple>
 8016dd0:	2800      	cmp	r0, #0
 8016dd2:	d07c      	beq.n	8016ece <_strtod_l+0xa96>
 8016dd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d04c      	beq.n	8016e74 <_strtod_l+0xa3c>
 8016dda:	4b95      	ldr	r3, [pc, #596]	; (8017030 <_strtod_l+0xbf8>)
 8016ddc:	2200      	movs	r2, #0
 8016dde:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016de2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8017030 <_strtod_l+0xbf8>
 8016de6:	f04f 0800 	mov.w	r8, #0
 8016dea:	4b92      	ldr	r3, [pc, #584]	; (8017034 <_strtod_l+0xbfc>)
 8016dec:	403b      	ands	r3, r7
 8016dee:	9311      	str	r3, [sp, #68]	; 0x44
 8016df0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016df2:	4b91      	ldr	r3, [pc, #580]	; (8017038 <_strtod_l+0xc00>)
 8016df4:	429a      	cmp	r2, r3
 8016df6:	f040 80b2 	bne.w	8016f5e <_strtod_l+0xb26>
 8016dfa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016dfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016e02:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8016e06:	ec4b ab10 	vmov	d0, sl, fp
 8016e0a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8016e0e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016e12:	f002 f865 	bl	8018ee0 <__ulp>
 8016e16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016e1a:	ec53 2b10 	vmov	r2, r3, d0
 8016e1e:	f7e9 fc03 	bl	8000628 <__aeabi_dmul>
 8016e22:	4652      	mov	r2, sl
 8016e24:	465b      	mov	r3, fp
 8016e26:	f7e9 fa49 	bl	80002bc <__adddf3>
 8016e2a:	460b      	mov	r3, r1
 8016e2c:	4981      	ldr	r1, [pc, #516]	; (8017034 <_strtod_l+0xbfc>)
 8016e2e:	4a83      	ldr	r2, [pc, #524]	; (801703c <_strtod_l+0xc04>)
 8016e30:	4019      	ands	r1, r3
 8016e32:	4291      	cmp	r1, r2
 8016e34:	4682      	mov	sl, r0
 8016e36:	d95e      	bls.n	8016ef6 <_strtod_l+0xabe>
 8016e38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e3a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016e3e:	4293      	cmp	r3, r2
 8016e40:	d103      	bne.n	8016e4a <_strtod_l+0xa12>
 8016e42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e44:	3301      	adds	r3, #1
 8016e46:	f43f ad43 	beq.w	80168d0 <_strtod_l+0x498>
 8016e4a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8017048 <_strtod_l+0xc10>
 8016e4e:	f04f 3aff 	mov.w	sl, #4294967295
 8016e52:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016e54:	4620      	mov	r0, r4
 8016e56:	f001 fd17 	bl	8018888 <_Bfree>
 8016e5a:	9907      	ldr	r1, [sp, #28]
 8016e5c:	4620      	mov	r0, r4
 8016e5e:	f001 fd13 	bl	8018888 <_Bfree>
 8016e62:	4631      	mov	r1, r6
 8016e64:	4620      	mov	r0, r4
 8016e66:	f001 fd0f 	bl	8018888 <_Bfree>
 8016e6a:	4629      	mov	r1, r5
 8016e6c:	4620      	mov	r0, r4
 8016e6e:	f001 fd0b 	bl	8018888 <_Bfree>
 8016e72:	e613      	b.n	8016a9c <_strtod_l+0x664>
 8016e74:	f1ba 0f00 	cmp.w	sl, #0
 8016e78:	d11b      	bne.n	8016eb2 <_strtod_l+0xa7a>
 8016e7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016e7e:	b9f3      	cbnz	r3, 8016ebe <_strtod_l+0xa86>
 8016e80:	4b6b      	ldr	r3, [pc, #428]	; (8017030 <_strtod_l+0xbf8>)
 8016e82:	2200      	movs	r2, #0
 8016e84:	4640      	mov	r0, r8
 8016e86:	4649      	mov	r1, r9
 8016e88:	f7e9 fe40 	bl	8000b0c <__aeabi_dcmplt>
 8016e8c:	b9d0      	cbnz	r0, 8016ec4 <_strtod_l+0xa8c>
 8016e8e:	4640      	mov	r0, r8
 8016e90:	4649      	mov	r1, r9
 8016e92:	4b6b      	ldr	r3, [pc, #428]	; (8017040 <_strtod_l+0xc08>)
 8016e94:	2200      	movs	r2, #0
 8016e96:	f7e9 fbc7 	bl	8000628 <__aeabi_dmul>
 8016e9a:	4680      	mov	r8, r0
 8016e9c:	4689      	mov	r9, r1
 8016e9e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016ea2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8016ea6:	931b      	str	r3, [sp, #108]	; 0x6c
 8016ea8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8016eac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016eb0:	e79b      	b.n	8016dea <_strtod_l+0x9b2>
 8016eb2:	f1ba 0f01 	cmp.w	sl, #1
 8016eb6:	d102      	bne.n	8016ebe <_strtod_l+0xa86>
 8016eb8:	2f00      	cmp	r7, #0
 8016eba:	f43f ad7e 	beq.w	80169ba <_strtod_l+0x582>
 8016ebe:	4b61      	ldr	r3, [pc, #388]	; (8017044 <_strtod_l+0xc0c>)
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	e78c      	b.n	8016dde <_strtod_l+0x9a6>
 8016ec4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8017040 <_strtod_l+0xc08>
 8016ec8:	f04f 0800 	mov.w	r8, #0
 8016ecc:	e7e7      	b.n	8016e9e <_strtod_l+0xa66>
 8016ece:	4b5c      	ldr	r3, [pc, #368]	; (8017040 <_strtod_l+0xc08>)
 8016ed0:	4640      	mov	r0, r8
 8016ed2:	4649      	mov	r1, r9
 8016ed4:	2200      	movs	r2, #0
 8016ed6:	f7e9 fba7 	bl	8000628 <__aeabi_dmul>
 8016eda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016edc:	4680      	mov	r8, r0
 8016ede:	4689      	mov	r9, r1
 8016ee0:	b933      	cbnz	r3, 8016ef0 <_strtod_l+0xab8>
 8016ee2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016ee6:	9012      	str	r0, [sp, #72]	; 0x48
 8016ee8:	9313      	str	r3, [sp, #76]	; 0x4c
 8016eea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016eee:	e7dd      	b.n	8016eac <_strtod_l+0xa74>
 8016ef0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8016ef4:	e7f9      	b.n	8016eea <_strtod_l+0xab2>
 8016ef6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016efa:	9b04      	ldr	r3, [sp, #16]
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d1a8      	bne.n	8016e52 <_strtod_l+0xa1a>
 8016f00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016f04:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016f06:	0d1b      	lsrs	r3, r3, #20
 8016f08:	051b      	lsls	r3, r3, #20
 8016f0a:	429a      	cmp	r2, r3
 8016f0c:	d1a1      	bne.n	8016e52 <_strtod_l+0xa1a>
 8016f0e:	4640      	mov	r0, r8
 8016f10:	4649      	mov	r1, r9
 8016f12:	f7e9 fee9 	bl	8000ce8 <__aeabi_d2lz>
 8016f16:	f7e9 fb59 	bl	80005cc <__aeabi_l2d>
 8016f1a:	4602      	mov	r2, r0
 8016f1c:	460b      	mov	r3, r1
 8016f1e:	4640      	mov	r0, r8
 8016f20:	4649      	mov	r1, r9
 8016f22:	f7e9 f9c9 	bl	80002b8 <__aeabi_dsub>
 8016f26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016f28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016f2c:	ea43 030a 	orr.w	r3, r3, sl
 8016f30:	4313      	orrs	r3, r2
 8016f32:	4680      	mov	r8, r0
 8016f34:	4689      	mov	r9, r1
 8016f36:	d053      	beq.n	8016fe0 <_strtod_l+0xba8>
 8016f38:	a335      	add	r3, pc, #212	; (adr r3, 8017010 <_strtod_l+0xbd8>)
 8016f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f3e:	f7e9 fde5 	bl	8000b0c <__aeabi_dcmplt>
 8016f42:	2800      	cmp	r0, #0
 8016f44:	f47f acce 	bne.w	80168e4 <_strtod_l+0x4ac>
 8016f48:	a333      	add	r3, pc, #204	; (adr r3, 8017018 <_strtod_l+0xbe0>)
 8016f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f4e:	4640      	mov	r0, r8
 8016f50:	4649      	mov	r1, r9
 8016f52:	f7e9 fdf9 	bl	8000b48 <__aeabi_dcmpgt>
 8016f56:	2800      	cmp	r0, #0
 8016f58:	f43f af7b 	beq.w	8016e52 <_strtod_l+0xa1a>
 8016f5c:	e4c2      	b.n	80168e4 <_strtod_l+0x4ac>
 8016f5e:	9b04      	ldr	r3, [sp, #16]
 8016f60:	b333      	cbz	r3, 8016fb0 <_strtod_l+0xb78>
 8016f62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016f64:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016f68:	d822      	bhi.n	8016fb0 <_strtod_l+0xb78>
 8016f6a:	a32d      	add	r3, pc, #180	; (adr r3, 8017020 <_strtod_l+0xbe8>)
 8016f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f70:	4640      	mov	r0, r8
 8016f72:	4649      	mov	r1, r9
 8016f74:	f7e9 fdd4 	bl	8000b20 <__aeabi_dcmple>
 8016f78:	b1a0      	cbz	r0, 8016fa4 <_strtod_l+0xb6c>
 8016f7a:	4649      	mov	r1, r9
 8016f7c:	4640      	mov	r0, r8
 8016f7e:	f7e9 fe2b 	bl	8000bd8 <__aeabi_d2uiz>
 8016f82:	2801      	cmp	r0, #1
 8016f84:	bf38      	it	cc
 8016f86:	2001      	movcc	r0, #1
 8016f88:	f7e9 fad4 	bl	8000534 <__aeabi_ui2d>
 8016f8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f8e:	4680      	mov	r8, r0
 8016f90:	4689      	mov	r9, r1
 8016f92:	bb13      	cbnz	r3, 8016fda <_strtod_l+0xba2>
 8016f94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016f98:	9014      	str	r0, [sp, #80]	; 0x50
 8016f9a:	9315      	str	r3, [sp, #84]	; 0x54
 8016f9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016fa0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016fa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016fa6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016fa8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016fac:	1a9b      	subs	r3, r3, r2
 8016fae:	930d      	str	r3, [sp, #52]	; 0x34
 8016fb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016fb4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8016fb8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016fbc:	f001 ff90 	bl	8018ee0 <__ulp>
 8016fc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016fc4:	ec53 2b10 	vmov	r2, r3, d0
 8016fc8:	f7e9 fb2e 	bl	8000628 <__aeabi_dmul>
 8016fcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016fd0:	f7e9 f974 	bl	80002bc <__adddf3>
 8016fd4:	4682      	mov	sl, r0
 8016fd6:	468b      	mov	fp, r1
 8016fd8:	e78f      	b.n	8016efa <_strtod_l+0xac2>
 8016fda:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8016fde:	e7dd      	b.n	8016f9c <_strtod_l+0xb64>
 8016fe0:	a311      	add	r3, pc, #68	; (adr r3, 8017028 <_strtod_l+0xbf0>)
 8016fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fe6:	f7e9 fd91 	bl	8000b0c <__aeabi_dcmplt>
 8016fea:	e7b4      	b.n	8016f56 <_strtod_l+0xb1e>
 8016fec:	2300      	movs	r3, #0
 8016fee:	930e      	str	r3, [sp, #56]	; 0x38
 8016ff0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016ff2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016ff4:	6013      	str	r3, [r2, #0]
 8016ff6:	f7ff ba65 	b.w	80164c4 <_strtod_l+0x8c>
 8016ffa:	2b65      	cmp	r3, #101	; 0x65
 8016ffc:	f43f ab5d 	beq.w	80166ba <_strtod_l+0x282>
 8017000:	2b45      	cmp	r3, #69	; 0x45
 8017002:	f43f ab5a 	beq.w	80166ba <_strtod_l+0x282>
 8017006:	2201      	movs	r2, #1
 8017008:	f7ff bb92 	b.w	8016730 <_strtod_l+0x2f8>
 801700c:	f3af 8000 	nop.w
 8017010:	94a03595 	.word	0x94a03595
 8017014:	3fdfffff 	.word	0x3fdfffff
 8017018:	35afe535 	.word	0x35afe535
 801701c:	3fe00000 	.word	0x3fe00000
 8017020:	ffc00000 	.word	0xffc00000
 8017024:	41dfffff 	.word	0x41dfffff
 8017028:	94a03595 	.word	0x94a03595
 801702c:	3fcfffff 	.word	0x3fcfffff
 8017030:	3ff00000 	.word	0x3ff00000
 8017034:	7ff00000 	.word	0x7ff00000
 8017038:	7fe00000 	.word	0x7fe00000
 801703c:	7c9fffff 	.word	0x7c9fffff
 8017040:	3fe00000 	.word	0x3fe00000
 8017044:	bff00000 	.word	0xbff00000
 8017048:	7fefffff 	.word	0x7fefffff

0801704c <_strtod_r>:
 801704c:	4b01      	ldr	r3, [pc, #4]	; (8017054 <_strtod_r+0x8>)
 801704e:	f7ff b9f3 	b.w	8016438 <_strtod_l>
 8017052:	bf00      	nop
 8017054:	20000074 	.word	0x20000074

08017058 <_strtol_l.isra.0>:
 8017058:	2b01      	cmp	r3, #1
 801705a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801705e:	d001      	beq.n	8017064 <_strtol_l.isra.0+0xc>
 8017060:	2b24      	cmp	r3, #36	; 0x24
 8017062:	d906      	bls.n	8017072 <_strtol_l.isra.0+0x1a>
 8017064:	f7fe fa46 	bl	80154f4 <__errno>
 8017068:	2316      	movs	r3, #22
 801706a:	6003      	str	r3, [r0, #0]
 801706c:	2000      	movs	r0, #0
 801706e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017072:	4f3a      	ldr	r7, [pc, #232]	; (801715c <_strtol_l.isra.0+0x104>)
 8017074:	468e      	mov	lr, r1
 8017076:	4676      	mov	r6, lr
 8017078:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801707c:	5de5      	ldrb	r5, [r4, r7]
 801707e:	f015 0508 	ands.w	r5, r5, #8
 8017082:	d1f8      	bne.n	8017076 <_strtol_l.isra.0+0x1e>
 8017084:	2c2d      	cmp	r4, #45	; 0x2d
 8017086:	d134      	bne.n	80170f2 <_strtol_l.isra.0+0x9a>
 8017088:	f89e 4000 	ldrb.w	r4, [lr]
 801708c:	f04f 0801 	mov.w	r8, #1
 8017090:	f106 0e02 	add.w	lr, r6, #2
 8017094:	2b00      	cmp	r3, #0
 8017096:	d05c      	beq.n	8017152 <_strtol_l.isra.0+0xfa>
 8017098:	2b10      	cmp	r3, #16
 801709a:	d10c      	bne.n	80170b6 <_strtol_l.isra.0+0x5e>
 801709c:	2c30      	cmp	r4, #48	; 0x30
 801709e:	d10a      	bne.n	80170b6 <_strtol_l.isra.0+0x5e>
 80170a0:	f89e 4000 	ldrb.w	r4, [lr]
 80170a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80170a8:	2c58      	cmp	r4, #88	; 0x58
 80170aa:	d14d      	bne.n	8017148 <_strtol_l.isra.0+0xf0>
 80170ac:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80170b0:	2310      	movs	r3, #16
 80170b2:	f10e 0e02 	add.w	lr, lr, #2
 80170b6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80170ba:	f10c 3cff 	add.w	ip, ip, #4294967295
 80170be:	2600      	movs	r6, #0
 80170c0:	fbbc f9f3 	udiv	r9, ip, r3
 80170c4:	4635      	mov	r5, r6
 80170c6:	fb03 ca19 	mls	sl, r3, r9, ip
 80170ca:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80170ce:	2f09      	cmp	r7, #9
 80170d0:	d818      	bhi.n	8017104 <_strtol_l.isra.0+0xac>
 80170d2:	463c      	mov	r4, r7
 80170d4:	42a3      	cmp	r3, r4
 80170d6:	dd24      	ble.n	8017122 <_strtol_l.isra.0+0xca>
 80170d8:	2e00      	cmp	r6, #0
 80170da:	db1f      	blt.n	801711c <_strtol_l.isra.0+0xc4>
 80170dc:	45a9      	cmp	r9, r5
 80170de:	d31d      	bcc.n	801711c <_strtol_l.isra.0+0xc4>
 80170e0:	d101      	bne.n	80170e6 <_strtol_l.isra.0+0x8e>
 80170e2:	45a2      	cmp	sl, r4
 80170e4:	db1a      	blt.n	801711c <_strtol_l.isra.0+0xc4>
 80170e6:	fb05 4503 	mla	r5, r5, r3, r4
 80170ea:	2601      	movs	r6, #1
 80170ec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80170f0:	e7eb      	b.n	80170ca <_strtol_l.isra.0+0x72>
 80170f2:	2c2b      	cmp	r4, #43	; 0x2b
 80170f4:	bf08      	it	eq
 80170f6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80170fa:	46a8      	mov	r8, r5
 80170fc:	bf08      	it	eq
 80170fe:	f106 0e02 	addeq.w	lr, r6, #2
 8017102:	e7c7      	b.n	8017094 <_strtol_l.isra.0+0x3c>
 8017104:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017108:	2f19      	cmp	r7, #25
 801710a:	d801      	bhi.n	8017110 <_strtol_l.isra.0+0xb8>
 801710c:	3c37      	subs	r4, #55	; 0x37
 801710e:	e7e1      	b.n	80170d4 <_strtol_l.isra.0+0x7c>
 8017110:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017114:	2f19      	cmp	r7, #25
 8017116:	d804      	bhi.n	8017122 <_strtol_l.isra.0+0xca>
 8017118:	3c57      	subs	r4, #87	; 0x57
 801711a:	e7db      	b.n	80170d4 <_strtol_l.isra.0+0x7c>
 801711c:	f04f 36ff 	mov.w	r6, #4294967295
 8017120:	e7e4      	b.n	80170ec <_strtol_l.isra.0+0x94>
 8017122:	2e00      	cmp	r6, #0
 8017124:	da05      	bge.n	8017132 <_strtol_l.isra.0+0xda>
 8017126:	2322      	movs	r3, #34	; 0x22
 8017128:	6003      	str	r3, [r0, #0]
 801712a:	4665      	mov	r5, ip
 801712c:	b942      	cbnz	r2, 8017140 <_strtol_l.isra.0+0xe8>
 801712e:	4628      	mov	r0, r5
 8017130:	e79d      	b.n	801706e <_strtol_l.isra.0+0x16>
 8017132:	f1b8 0f00 	cmp.w	r8, #0
 8017136:	d000      	beq.n	801713a <_strtol_l.isra.0+0xe2>
 8017138:	426d      	negs	r5, r5
 801713a:	2a00      	cmp	r2, #0
 801713c:	d0f7      	beq.n	801712e <_strtol_l.isra.0+0xd6>
 801713e:	b10e      	cbz	r6, 8017144 <_strtol_l.isra.0+0xec>
 8017140:	f10e 31ff 	add.w	r1, lr, #4294967295
 8017144:	6011      	str	r1, [r2, #0]
 8017146:	e7f2      	b.n	801712e <_strtol_l.isra.0+0xd6>
 8017148:	2430      	movs	r4, #48	; 0x30
 801714a:	2b00      	cmp	r3, #0
 801714c:	d1b3      	bne.n	80170b6 <_strtol_l.isra.0+0x5e>
 801714e:	2308      	movs	r3, #8
 8017150:	e7b1      	b.n	80170b6 <_strtol_l.isra.0+0x5e>
 8017152:	2c30      	cmp	r4, #48	; 0x30
 8017154:	d0a4      	beq.n	80170a0 <_strtol_l.isra.0+0x48>
 8017156:	230a      	movs	r3, #10
 8017158:	e7ad      	b.n	80170b6 <_strtol_l.isra.0+0x5e>
 801715a:	bf00      	nop
 801715c:	0801b029 	.word	0x0801b029

08017160 <_strtol_r>:
 8017160:	f7ff bf7a 	b.w	8017058 <_strtol_l.isra.0>

08017164 <_vsiprintf_r>:
 8017164:	b500      	push	{lr}
 8017166:	b09b      	sub	sp, #108	; 0x6c
 8017168:	9100      	str	r1, [sp, #0]
 801716a:	9104      	str	r1, [sp, #16]
 801716c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017170:	9105      	str	r1, [sp, #20]
 8017172:	9102      	str	r1, [sp, #8]
 8017174:	4905      	ldr	r1, [pc, #20]	; (801718c <_vsiprintf_r+0x28>)
 8017176:	9103      	str	r1, [sp, #12]
 8017178:	4669      	mov	r1, sp
 801717a:	f002 f915 	bl	80193a8 <_svfiprintf_r>
 801717e:	9b00      	ldr	r3, [sp, #0]
 8017180:	2200      	movs	r2, #0
 8017182:	701a      	strb	r2, [r3, #0]
 8017184:	b01b      	add	sp, #108	; 0x6c
 8017186:	f85d fb04 	ldr.w	pc, [sp], #4
 801718a:	bf00      	nop
 801718c:	ffff0208 	.word	0xffff0208

08017190 <vsiprintf>:
 8017190:	4613      	mov	r3, r2
 8017192:	460a      	mov	r2, r1
 8017194:	4601      	mov	r1, r0
 8017196:	4802      	ldr	r0, [pc, #8]	; (80171a0 <vsiprintf+0x10>)
 8017198:	6800      	ldr	r0, [r0, #0]
 801719a:	f7ff bfe3 	b.w	8017164 <_vsiprintf_r>
 801719e:	bf00      	nop
 80171a0:	2000000c 	.word	0x2000000c

080171a4 <_write_r>:
 80171a4:	b538      	push	{r3, r4, r5, lr}
 80171a6:	4d07      	ldr	r5, [pc, #28]	; (80171c4 <_write_r+0x20>)
 80171a8:	4604      	mov	r4, r0
 80171aa:	4608      	mov	r0, r1
 80171ac:	4611      	mov	r1, r2
 80171ae:	2200      	movs	r2, #0
 80171b0:	602a      	str	r2, [r5, #0]
 80171b2:	461a      	mov	r2, r3
 80171b4:	f7ee fc9e 	bl	8005af4 <_write>
 80171b8:	1c43      	adds	r3, r0, #1
 80171ba:	d102      	bne.n	80171c2 <_write_r+0x1e>
 80171bc:	682b      	ldr	r3, [r5, #0]
 80171be:	b103      	cbz	r3, 80171c2 <_write_r+0x1e>
 80171c0:	6023      	str	r3, [r4, #0]
 80171c2:	bd38      	pop	{r3, r4, r5, pc}
 80171c4:	20041e60 	.word	0x20041e60

080171c8 <_close_r>:
 80171c8:	b538      	push	{r3, r4, r5, lr}
 80171ca:	4d06      	ldr	r5, [pc, #24]	; (80171e4 <_close_r+0x1c>)
 80171cc:	2300      	movs	r3, #0
 80171ce:	4604      	mov	r4, r0
 80171d0:	4608      	mov	r0, r1
 80171d2:	602b      	str	r3, [r5, #0]
 80171d4:	f7f0 f9e5 	bl	80075a2 <_close>
 80171d8:	1c43      	adds	r3, r0, #1
 80171da:	d102      	bne.n	80171e2 <_close_r+0x1a>
 80171dc:	682b      	ldr	r3, [r5, #0]
 80171de:	b103      	cbz	r3, 80171e2 <_close_r+0x1a>
 80171e0:	6023      	str	r3, [r4, #0]
 80171e2:	bd38      	pop	{r3, r4, r5, pc}
 80171e4:	20041e60 	.word	0x20041e60

080171e8 <quorem>:
 80171e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171ec:	6903      	ldr	r3, [r0, #16]
 80171ee:	690c      	ldr	r4, [r1, #16]
 80171f0:	42a3      	cmp	r3, r4
 80171f2:	4607      	mov	r7, r0
 80171f4:	f2c0 8081 	blt.w	80172fa <quorem+0x112>
 80171f8:	3c01      	subs	r4, #1
 80171fa:	f101 0814 	add.w	r8, r1, #20
 80171fe:	f100 0514 	add.w	r5, r0, #20
 8017202:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017206:	9301      	str	r3, [sp, #4]
 8017208:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801720c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017210:	3301      	adds	r3, #1
 8017212:	429a      	cmp	r2, r3
 8017214:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017218:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801721c:	fbb2 f6f3 	udiv	r6, r2, r3
 8017220:	d331      	bcc.n	8017286 <quorem+0x9e>
 8017222:	f04f 0e00 	mov.w	lr, #0
 8017226:	4640      	mov	r0, r8
 8017228:	46ac      	mov	ip, r5
 801722a:	46f2      	mov	sl, lr
 801722c:	f850 2b04 	ldr.w	r2, [r0], #4
 8017230:	b293      	uxth	r3, r2
 8017232:	fb06 e303 	mla	r3, r6, r3, lr
 8017236:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801723a:	b29b      	uxth	r3, r3
 801723c:	ebaa 0303 	sub.w	r3, sl, r3
 8017240:	0c12      	lsrs	r2, r2, #16
 8017242:	f8dc a000 	ldr.w	sl, [ip]
 8017246:	fb06 e202 	mla	r2, r6, r2, lr
 801724a:	fa13 f38a 	uxtah	r3, r3, sl
 801724e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017252:	fa1f fa82 	uxth.w	sl, r2
 8017256:	f8dc 2000 	ldr.w	r2, [ip]
 801725a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801725e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017262:	b29b      	uxth	r3, r3
 8017264:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017268:	4581      	cmp	r9, r0
 801726a:	f84c 3b04 	str.w	r3, [ip], #4
 801726e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017272:	d2db      	bcs.n	801722c <quorem+0x44>
 8017274:	f855 300b 	ldr.w	r3, [r5, fp]
 8017278:	b92b      	cbnz	r3, 8017286 <quorem+0x9e>
 801727a:	9b01      	ldr	r3, [sp, #4]
 801727c:	3b04      	subs	r3, #4
 801727e:	429d      	cmp	r5, r3
 8017280:	461a      	mov	r2, r3
 8017282:	d32e      	bcc.n	80172e2 <quorem+0xfa>
 8017284:	613c      	str	r4, [r7, #16]
 8017286:	4638      	mov	r0, r7
 8017288:	f001 fd86 	bl	8018d98 <__mcmp>
 801728c:	2800      	cmp	r0, #0
 801728e:	db24      	blt.n	80172da <quorem+0xf2>
 8017290:	3601      	adds	r6, #1
 8017292:	4628      	mov	r0, r5
 8017294:	f04f 0c00 	mov.w	ip, #0
 8017298:	f858 2b04 	ldr.w	r2, [r8], #4
 801729c:	f8d0 e000 	ldr.w	lr, [r0]
 80172a0:	b293      	uxth	r3, r2
 80172a2:	ebac 0303 	sub.w	r3, ip, r3
 80172a6:	0c12      	lsrs	r2, r2, #16
 80172a8:	fa13 f38e 	uxtah	r3, r3, lr
 80172ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80172b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80172b4:	b29b      	uxth	r3, r3
 80172b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80172ba:	45c1      	cmp	r9, r8
 80172bc:	f840 3b04 	str.w	r3, [r0], #4
 80172c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80172c4:	d2e8      	bcs.n	8017298 <quorem+0xb0>
 80172c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80172ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80172ce:	b922      	cbnz	r2, 80172da <quorem+0xf2>
 80172d0:	3b04      	subs	r3, #4
 80172d2:	429d      	cmp	r5, r3
 80172d4:	461a      	mov	r2, r3
 80172d6:	d30a      	bcc.n	80172ee <quorem+0x106>
 80172d8:	613c      	str	r4, [r7, #16]
 80172da:	4630      	mov	r0, r6
 80172dc:	b003      	add	sp, #12
 80172de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172e2:	6812      	ldr	r2, [r2, #0]
 80172e4:	3b04      	subs	r3, #4
 80172e6:	2a00      	cmp	r2, #0
 80172e8:	d1cc      	bne.n	8017284 <quorem+0x9c>
 80172ea:	3c01      	subs	r4, #1
 80172ec:	e7c7      	b.n	801727e <quorem+0x96>
 80172ee:	6812      	ldr	r2, [r2, #0]
 80172f0:	3b04      	subs	r3, #4
 80172f2:	2a00      	cmp	r2, #0
 80172f4:	d1f0      	bne.n	80172d8 <quorem+0xf0>
 80172f6:	3c01      	subs	r4, #1
 80172f8:	e7eb      	b.n	80172d2 <quorem+0xea>
 80172fa:	2000      	movs	r0, #0
 80172fc:	e7ee      	b.n	80172dc <quorem+0xf4>
	...

08017300 <_dtoa_r>:
 8017300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017304:	ed2d 8b02 	vpush	{d8}
 8017308:	ec57 6b10 	vmov	r6, r7, d0
 801730c:	b095      	sub	sp, #84	; 0x54
 801730e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017310:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017314:	9105      	str	r1, [sp, #20]
 8017316:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801731a:	4604      	mov	r4, r0
 801731c:	9209      	str	r2, [sp, #36]	; 0x24
 801731e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017320:	b975      	cbnz	r5, 8017340 <_dtoa_r+0x40>
 8017322:	2010      	movs	r0, #16
 8017324:	f001 fa56 	bl	80187d4 <malloc>
 8017328:	4602      	mov	r2, r0
 801732a:	6260      	str	r0, [r4, #36]	; 0x24
 801732c:	b920      	cbnz	r0, 8017338 <_dtoa_r+0x38>
 801732e:	4bb2      	ldr	r3, [pc, #712]	; (80175f8 <_dtoa_r+0x2f8>)
 8017330:	21ea      	movs	r1, #234	; 0xea
 8017332:	48b2      	ldr	r0, [pc, #712]	; (80175fc <_dtoa_r+0x2fc>)
 8017334:	f002 ffae 	bl	801a294 <__assert_func>
 8017338:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801733c:	6005      	str	r5, [r0, #0]
 801733e:	60c5      	str	r5, [r0, #12]
 8017340:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017342:	6819      	ldr	r1, [r3, #0]
 8017344:	b151      	cbz	r1, 801735c <_dtoa_r+0x5c>
 8017346:	685a      	ldr	r2, [r3, #4]
 8017348:	604a      	str	r2, [r1, #4]
 801734a:	2301      	movs	r3, #1
 801734c:	4093      	lsls	r3, r2
 801734e:	608b      	str	r3, [r1, #8]
 8017350:	4620      	mov	r0, r4
 8017352:	f001 fa99 	bl	8018888 <_Bfree>
 8017356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017358:	2200      	movs	r2, #0
 801735a:	601a      	str	r2, [r3, #0]
 801735c:	1e3b      	subs	r3, r7, #0
 801735e:	bfb9      	ittee	lt
 8017360:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017364:	9303      	strlt	r3, [sp, #12]
 8017366:	2300      	movge	r3, #0
 8017368:	f8c8 3000 	strge.w	r3, [r8]
 801736c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017370:	4ba3      	ldr	r3, [pc, #652]	; (8017600 <_dtoa_r+0x300>)
 8017372:	bfbc      	itt	lt
 8017374:	2201      	movlt	r2, #1
 8017376:	f8c8 2000 	strlt.w	r2, [r8]
 801737a:	ea33 0309 	bics.w	r3, r3, r9
 801737e:	d11b      	bne.n	80173b8 <_dtoa_r+0xb8>
 8017380:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017382:	f242 730f 	movw	r3, #9999	; 0x270f
 8017386:	6013      	str	r3, [r2, #0]
 8017388:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801738c:	4333      	orrs	r3, r6
 801738e:	f000 857a 	beq.w	8017e86 <_dtoa_r+0xb86>
 8017392:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017394:	b963      	cbnz	r3, 80173b0 <_dtoa_r+0xb0>
 8017396:	4b9b      	ldr	r3, [pc, #620]	; (8017604 <_dtoa_r+0x304>)
 8017398:	e024      	b.n	80173e4 <_dtoa_r+0xe4>
 801739a:	4b9b      	ldr	r3, [pc, #620]	; (8017608 <_dtoa_r+0x308>)
 801739c:	9300      	str	r3, [sp, #0]
 801739e:	3308      	adds	r3, #8
 80173a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80173a2:	6013      	str	r3, [r2, #0]
 80173a4:	9800      	ldr	r0, [sp, #0]
 80173a6:	b015      	add	sp, #84	; 0x54
 80173a8:	ecbd 8b02 	vpop	{d8}
 80173ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173b0:	4b94      	ldr	r3, [pc, #592]	; (8017604 <_dtoa_r+0x304>)
 80173b2:	9300      	str	r3, [sp, #0]
 80173b4:	3303      	adds	r3, #3
 80173b6:	e7f3      	b.n	80173a0 <_dtoa_r+0xa0>
 80173b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80173bc:	2200      	movs	r2, #0
 80173be:	ec51 0b17 	vmov	r0, r1, d7
 80173c2:	2300      	movs	r3, #0
 80173c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80173c8:	f7e9 fb96 	bl	8000af8 <__aeabi_dcmpeq>
 80173cc:	4680      	mov	r8, r0
 80173ce:	b158      	cbz	r0, 80173e8 <_dtoa_r+0xe8>
 80173d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80173d2:	2301      	movs	r3, #1
 80173d4:	6013      	str	r3, [r2, #0]
 80173d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80173d8:	2b00      	cmp	r3, #0
 80173da:	f000 8551 	beq.w	8017e80 <_dtoa_r+0xb80>
 80173de:	488b      	ldr	r0, [pc, #556]	; (801760c <_dtoa_r+0x30c>)
 80173e0:	6018      	str	r0, [r3, #0]
 80173e2:	1e43      	subs	r3, r0, #1
 80173e4:	9300      	str	r3, [sp, #0]
 80173e6:	e7dd      	b.n	80173a4 <_dtoa_r+0xa4>
 80173e8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80173ec:	aa12      	add	r2, sp, #72	; 0x48
 80173ee:	a913      	add	r1, sp, #76	; 0x4c
 80173f0:	4620      	mov	r0, r4
 80173f2:	f001 fdf1 	bl	8018fd8 <__d2b>
 80173f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80173fa:	4683      	mov	fp, r0
 80173fc:	2d00      	cmp	r5, #0
 80173fe:	d07c      	beq.n	80174fa <_dtoa_r+0x1fa>
 8017400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017402:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8017406:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801740a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801740e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017412:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017416:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801741a:	4b7d      	ldr	r3, [pc, #500]	; (8017610 <_dtoa_r+0x310>)
 801741c:	2200      	movs	r2, #0
 801741e:	4630      	mov	r0, r6
 8017420:	4639      	mov	r1, r7
 8017422:	f7e8 ff49 	bl	80002b8 <__aeabi_dsub>
 8017426:	a36e      	add	r3, pc, #440	; (adr r3, 80175e0 <_dtoa_r+0x2e0>)
 8017428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801742c:	f7e9 f8fc 	bl	8000628 <__aeabi_dmul>
 8017430:	a36d      	add	r3, pc, #436	; (adr r3, 80175e8 <_dtoa_r+0x2e8>)
 8017432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017436:	f7e8 ff41 	bl	80002bc <__adddf3>
 801743a:	4606      	mov	r6, r0
 801743c:	4628      	mov	r0, r5
 801743e:	460f      	mov	r7, r1
 8017440:	f7e9 f888 	bl	8000554 <__aeabi_i2d>
 8017444:	a36a      	add	r3, pc, #424	; (adr r3, 80175f0 <_dtoa_r+0x2f0>)
 8017446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801744a:	f7e9 f8ed 	bl	8000628 <__aeabi_dmul>
 801744e:	4602      	mov	r2, r0
 8017450:	460b      	mov	r3, r1
 8017452:	4630      	mov	r0, r6
 8017454:	4639      	mov	r1, r7
 8017456:	f7e8 ff31 	bl	80002bc <__adddf3>
 801745a:	4606      	mov	r6, r0
 801745c:	460f      	mov	r7, r1
 801745e:	f7e9 fb93 	bl	8000b88 <__aeabi_d2iz>
 8017462:	2200      	movs	r2, #0
 8017464:	4682      	mov	sl, r0
 8017466:	2300      	movs	r3, #0
 8017468:	4630      	mov	r0, r6
 801746a:	4639      	mov	r1, r7
 801746c:	f7e9 fb4e 	bl	8000b0c <__aeabi_dcmplt>
 8017470:	b148      	cbz	r0, 8017486 <_dtoa_r+0x186>
 8017472:	4650      	mov	r0, sl
 8017474:	f7e9 f86e 	bl	8000554 <__aeabi_i2d>
 8017478:	4632      	mov	r2, r6
 801747a:	463b      	mov	r3, r7
 801747c:	f7e9 fb3c 	bl	8000af8 <__aeabi_dcmpeq>
 8017480:	b908      	cbnz	r0, 8017486 <_dtoa_r+0x186>
 8017482:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017486:	f1ba 0f16 	cmp.w	sl, #22
 801748a:	d854      	bhi.n	8017536 <_dtoa_r+0x236>
 801748c:	4b61      	ldr	r3, [pc, #388]	; (8017614 <_dtoa_r+0x314>)
 801748e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017496:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801749a:	f7e9 fb37 	bl	8000b0c <__aeabi_dcmplt>
 801749e:	2800      	cmp	r0, #0
 80174a0:	d04b      	beq.n	801753a <_dtoa_r+0x23a>
 80174a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80174a6:	2300      	movs	r3, #0
 80174a8:	930e      	str	r3, [sp, #56]	; 0x38
 80174aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80174ac:	1b5d      	subs	r5, r3, r5
 80174ae:	1e6b      	subs	r3, r5, #1
 80174b0:	9304      	str	r3, [sp, #16]
 80174b2:	bf43      	ittte	mi
 80174b4:	2300      	movmi	r3, #0
 80174b6:	f1c5 0801 	rsbmi	r8, r5, #1
 80174ba:	9304      	strmi	r3, [sp, #16]
 80174bc:	f04f 0800 	movpl.w	r8, #0
 80174c0:	f1ba 0f00 	cmp.w	sl, #0
 80174c4:	db3b      	blt.n	801753e <_dtoa_r+0x23e>
 80174c6:	9b04      	ldr	r3, [sp, #16]
 80174c8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80174cc:	4453      	add	r3, sl
 80174ce:	9304      	str	r3, [sp, #16]
 80174d0:	2300      	movs	r3, #0
 80174d2:	9306      	str	r3, [sp, #24]
 80174d4:	9b05      	ldr	r3, [sp, #20]
 80174d6:	2b09      	cmp	r3, #9
 80174d8:	d869      	bhi.n	80175ae <_dtoa_r+0x2ae>
 80174da:	2b05      	cmp	r3, #5
 80174dc:	bfc4      	itt	gt
 80174de:	3b04      	subgt	r3, #4
 80174e0:	9305      	strgt	r3, [sp, #20]
 80174e2:	9b05      	ldr	r3, [sp, #20]
 80174e4:	f1a3 0302 	sub.w	r3, r3, #2
 80174e8:	bfcc      	ite	gt
 80174ea:	2500      	movgt	r5, #0
 80174ec:	2501      	movle	r5, #1
 80174ee:	2b03      	cmp	r3, #3
 80174f0:	d869      	bhi.n	80175c6 <_dtoa_r+0x2c6>
 80174f2:	e8df f003 	tbb	[pc, r3]
 80174f6:	4e2c      	.short	0x4e2c
 80174f8:	5a4c      	.short	0x5a4c
 80174fa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80174fe:	441d      	add	r5, r3
 8017500:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017504:	2b20      	cmp	r3, #32
 8017506:	bfc1      	itttt	gt
 8017508:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801750c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8017510:	fa09 f303 	lslgt.w	r3, r9, r3
 8017514:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017518:	bfda      	itte	le
 801751a:	f1c3 0320 	rsble	r3, r3, #32
 801751e:	fa06 f003 	lslle.w	r0, r6, r3
 8017522:	4318      	orrgt	r0, r3
 8017524:	f7e9 f806 	bl	8000534 <__aeabi_ui2d>
 8017528:	2301      	movs	r3, #1
 801752a:	4606      	mov	r6, r0
 801752c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8017530:	3d01      	subs	r5, #1
 8017532:	9310      	str	r3, [sp, #64]	; 0x40
 8017534:	e771      	b.n	801741a <_dtoa_r+0x11a>
 8017536:	2301      	movs	r3, #1
 8017538:	e7b6      	b.n	80174a8 <_dtoa_r+0x1a8>
 801753a:	900e      	str	r0, [sp, #56]	; 0x38
 801753c:	e7b5      	b.n	80174aa <_dtoa_r+0x1aa>
 801753e:	f1ca 0300 	rsb	r3, sl, #0
 8017542:	9306      	str	r3, [sp, #24]
 8017544:	2300      	movs	r3, #0
 8017546:	eba8 080a 	sub.w	r8, r8, sl
 801754a:	930d      	str	r3, [sp, #52]	; 0x34
 801754c:	e7c2      	b.n	80174d4 <_dtoa_r+0x1d4>
 801754e:	2300      	movs	r3, #0
 8017550:	9308      	str	r3, [sp, #32]
 8017552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017554:	2b00      	cmp	r3, #0
 8017556:	dc39      	bgt.n	80175cc <_dtoa_r+0x2cc>
 8017558:	f04f 0901 	mov.w	r9, #1
 801755c:	f8cd 9004 	str.w	r9, [sp, #4]
 8017560:	464b      	mov	r3, r9
 8017562:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017566:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017568:	2200      	movs	r2, #0
 801756a:	6042      	str	r2, [r0, #4]
 801756c:	2204      	movs	r2, #4
 801756e:	f102 0614 	add.w	r6, r2, #20
 8017572:	429e      	cmp	r6, r3
 8017574:	6841      	ldr	r1, [r0, #4]
 8017576:	d92f      	bls.n	80175d8 <_dtoa_r+0x2d8>
 8017578:	4620      	mov	r0, r4
 801757a:	f001 f945 	bl	8018808 <_Balloc>
 801757e:	9000      	str	r0, [sp, #0]
 8017580:	2800      	cmp	r0, #0
 8017582:	d14b      	bne.n	801761c <_dtoa_r+0x31c>
 8017584:	4b24      	ldr	r3, [pc, #144]	; (8017618 <_dtoa_r+0x318>)
 8017586:	4602      	mov	r2, r0
 8017588:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801758c:	e6d1      	b.n	8017332 <_dtoa_r+0x32>
 801758e:	2301      	movs	r3, #1
 8017590:	e7de      	b.n	8017550 <_dtoa_r+0x250>
 8017592:	2300      	movs	r3, #0
 8017594:	9308      	str	r3, [sp, #32]
 8017596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017598:	eb0a 0903 	add.w	r9, sl, r3
 801759c:	f109 0301 	add.w	r3, r9, #1
 80175a0:	2b01      	cmp	r3, #1
 80175a2:	9301      	str	r3, [sp, #4]
 80175a4:	bfb8      	it	lt
 80175a6:	2301      	movlt	r3, #1
 80175a8:	e7dd      	b.n	8017566 <_dtoa_r+0x266>
 80175aa:	2301      	movs	r3, #1
 80175ac:	e7f2      	b.n	8017594 <_dtoa_r+0x294>
 80175ae:	2501      	movs	r5, #1
 80175b0:	2300      	movs	r3, #0
 80175b2:	9305      	str	r3, [sp, #20]
 80175b4:	9508      	str	r5, [sp, #32]
 80175b6:	f04f 39ff 	mov.w	r9, #4294967295
 80175ba:	2200      	movs	r2, #0
 80175bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80175c0:	2312      	movs	r3, #18
 80175c2:	9209      	str	r2, [sp, #36]	; 0x24
 80175c4:	e7cf      	b.n	8017566 <_dtoa_r+0x266>
 80175c6:	2301      	movs	r3, #1
 80175c8:	9308      	str	r3, [sp, #32]
 80175ca:	e7f4      	b.n	80175b6 <_dtoa_r+0x2b6>
 80175cc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80175d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80175d4:	464b      	mov	r3, r9
 80175d6:	e7c6      	b.n	8017566 <_dtoa_r+0x266>
 80175d8:	3101      	adds	r1, #1
 80175da:	6041      	str	r1, [r0, #4]
 80175dc:	0052      	lsls	r2, r2, #1
 80175de:	e7c6      	b.n	801756e <_dtoa_r+0x26e>
 80175e0:	636f4361 	.word	0x636f4361
 80175e4:	3fd287a7 	.word	0x3fd287a7
 80175e8:	8b60c8b3 	.word	0x8b60c8b3
 80175ec:	3fc68a28 	.word	0x3fc68a28
 80175f0:	509f79fb 	.word	0x509f79fb
 80175f4:	3fd34413 	.word	0x3fd34413
 80175f8:	0801b136 	.word	0x0801b136
 80175fc:	0801b14d 	.word	0x0801b14d
 8017600:	7ff00000 	.word	0x7ff00000
 8017604:	0801b132 	.word	0x0801b132
 8017608:	0801b129 	.word	0x0801b129
 801760c:	0801b412 	.word	0x0801b412
 8017610:	3ff80000 	.word	0x3ff80000
 8017614:	0801b328 	.word	0x0801b328
 8017618:	0801b1ac 	.word	0x0801b1ac
 801761c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801761e:	9a00      	ldr	r2, [sp, #0]
 8017620:	601a      	str	r2, [r3, #0]
 8017622:	9b01      	ldr	r3, [sp, #4]
 8017624:	2b0e      	cmp	r3, #14
 8017626:	f200 80ad 	bhi.w	8017784 <_dtoa_r+0x484>
 801762a:	2d00      	cmp	r5, #0
 801762c:	f000 80aa 	beq.w	8017784 <_dtoa_r+0x484>
 8017630:	f1ba 0f00 	cmp.w	sl, #0
 8017634:	dd36      	ble.n	80176a4 <_dtoa_r+0x3a4>
 8017636:	4ac3      	ldr	r2, [pc, #780]	; (8017944 <_dtoa_r+0x644>)
 8017638:	f00a 030f 	and.w	r3, sl, #15
 801763c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017640:	ed93 7b00 	vldr	d7, [r3]
 8017644:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8017648:	ea4f 172a 	mov.w	r7, sl, asr #4
 801764c:	eeb0 8a47 	vmov.f32	s16, s14
 8017650:	eef0 8a67 	vmov.f32	s17, s15
 8017654:	d016      	beq.n	8017684 <_dtoa_r+0x384>
 8017656:	4bbc      	ldr	r3, [pc, #752]	; (8017948 <_dtoa_r+0x648>)
 8017658:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801765c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017660:	f7e9 f90c 	bl	800087c <__aeabi_ddiv>
 8017664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017668:	f007 070f 	and.w	r7, r7, #15
 801766c:	2503      	movs	r5, #3
 801766e:	4eb6      	ldr	r6, [pc, #728]	; (8017948 <_dtoa_r+0x648>)
 8017670:	b957      	cbnz	r7, 8017688 <_dtoa_r+0x388>
 8017672:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017676:	ec53 2b18 	vmov	r2, r3, d8
 801767a:	f7e9 f8ff 	bl	800087c <__aeabi_ddiv>
 801767e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017682:	e029      	b.n	80176d8 <_dtoa_r+0x3d8>
 8017684:	2502      	movs	r5, #2
 8017686:	e7f2      	b.n	801766e <_dtoa_r+0x36e>
 8017688:	07f9      	lsls	r1, r7, #31
 801768a:	d508      	bpl.n	801769e <_dtoa_r+0x39e>
 801768c:	ec51 0b18 	vmov	r0, r1, d8
 8017690:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017694:	f7e8 ffc8 	bl	8000628 <__aeabi_dmul>
 8017698:	ec41 0b18 	vmov	d8, r0, r1
 801769c:	3501      	adds	r5, #1
 801769e:	107f      	asrs	r7, r7, #1
 80176a0:	3608      	adds	r6, #8
 80176a2:	e7e5      	b.n	8017670 <_dtoa_r+0x370>
 80176a4:	f000 80a6 	beq.w	80177f4 <_dtoa_r+0x4f4>
 80176a8:	f1ca 0600 	rsb	r6, sl, #0
 80176ac:	4ba5      	ldr	r3, [pc, #660]	; (8017944 <_dtoa_r+0x644>)
 80176ae:	4fa6      	ldr	r7, [pc, #664]	; (8017948 <_dtoa_r+0x648>)
 80176b0:	f006 020f 	and.w	r2, r6, #15
 80176b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80176b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80176c0:	f7e8 ffb2 	bl	8000628 <__aeabi_dmul>
 80176c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80176c8:	1136      	asrs	r6, r6, #4
 80176ca:	2300      	movs	r3, #0
 80176cc:	2502      	movs	r5, #2
 80176ce:	2e00      	cmp	r6, #0
 80176d0:	f040 8085 	bne.w	80177de <_dtoa_r+0x4de>
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d1d2      	bne.n	801767e <_dtoa_r+0x37e>
 80176d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80176da:	2b00      	cmp	r3, #0
 80176dc:	f000 808c 	beq.w	80177f8 <_dtoa_r+0x4f8>
 80176e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80176e4:	4b99      	ldr	r3, [pc, #612]	; (801794c <_dtoa_r+0x64c>)
 80176e6:	2200      	movs	r2, #0
 80176e8:	4630      	mov	r0, r6
 80176ea:	4639      	mov	r1, r7
 80176ec:	f7e9 fa0e 	bl	8000b0c <__aeabi_dcmplt>
 80176f0:	2800      	cmp	r0, #0
 80176f2:	f000 8081 	beq.w	80177f8 <_dtoa_r+0x4f8>
 80176f6:	9b01      	ldr	r3, [sp, #4]
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d07d      	beq.n	80177f8 <_dtoa_r+0x4f8>
 80176fc:	f1b9 0f00 	cmp.w	r9, #0
 8017700:	dd3c      	ble.n	801777c <_dtoa_r+0x47c>
 8017702:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017706:	9307      	str	r3, [sp, #28]
 8017708:	2200      	movs	r2, #0
 801770a:	4b91      	ldr	r3, [pc, #580]	; (8017950 <_dtoa_r+0x650>)
 801770c:	4630      	mov	r0, r6
 801770e:	4639      	mov	r1, r7
 8017710:	f7e8 ff8a 	bl	8000628 <__aeabi_dmul>
 8017714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017718:	3501      	adds	r5, #1
 801771a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801771e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017722:	4628      	mov	r0, r5
 8017724:	f7e8 ff16 	bl	8000554 <__aeabi_i2d>
 8017728:	4632      	mov	r2, r6
 801772a:	463b      	mov	r3, r7
 801772c:	f7e8 ff7c 	bl	8000628 <__aeabi_dmul>
 8017730:	4b88      	ldr	r3, [pc, #544]	; (8017954 <_dtoa_r+0x654>)
 8017732:	2200      	movs	r2, #0
 8017734:	f7e8 fdc2 	bl	80002bc <__adddf3>
 8017738:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801773c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017740:	9303      	str	r3, [sp, #12]
 8017742:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017744:	2b00      	cmp	r3, #0
 8017746:	d15c      	bne.n	8017802 <_dtoa_r+0x502>
 8017748:	4b83      	ldr	r3, [pc, #524]	; (8017958 <_dtoa_r+0x658>)
 801774a:	2200      	movs	r2, #0
 801774c:	4630      	mov	r0, r6
 801774e:	4639      	mov	r1, r7
 8017750:	f7e8 fdb2 	bl	80002b8 <__aeabi_dsub>
 8017754:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017758:	4606      	mov	r6, r0
 801775a:	460f      	mov	r7, r1
 801775c:	f7e9 f9f4 	bl	8000b48 <__aeabi_dcmpgt>
 8017760:	2800      	cmp	r0, #0
 8017762:	f040 8296 	bne.w	8017c92 <_dtoa_r+0x992>
 8017766:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801776a:	4630      	mov	r0, r6
 801776c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017770:	4639      	mov	r1, r7
 8017772:	f7e9 f9cb 	bl	8000b0c <__aeabi_dcmplt>
 8017776:	2800      	cmp	r0, #0
 8017778:	f040 8288 	bne.w	8017c8c <_dtoa_r+0x98c>
 801777c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017780:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017784:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017786:	2b00      	cmp	r3, #0
 8017788:	f2c0 8158 	blt.w	8017a3c <_dtoa_r+0x73c>
 801778c:	f1ba 0f0e 	cmp.w	sl, #14
 8017790:	f300 8154 	bgt.w	8017a3c <_dtoa_r+0x73c>
 8017794:	4b6b      	ldr	r3, [pc, #428]	; (8017944 <_dtoa_r+0x644>)
 8017796:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801779a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801779e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	f280 80e3 	bge.w	801796c <_dtoa_r+0x66c>
 80177a6:	9b01      	ldr	r3, [sp, #4]
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	f300 80df 	bgt.w	801796c <_dtoa_r+0x66c>
 80177ae:	f040 826d 	bne.w	8017c8c <_dtoa_r+0x98c>
 80177b2:	4b69      	ldr	r3, [pc, #420]	; (8017958 <_dtoa_r+0x658>)
 80177b4:	2200      	movs	r2, #0
 80177b6:	4640      	mov	r0, r8
 80177b8:	4649      	mov	r1, r9
 80177ba:	f7e8 ff35 	bl	8000628 <__aeabi_dmul>
 80177be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80177c2:	f7e9 f9b7 	bl	8000b34 <__aeabi_dcmpge>
 80177c6:	9e01      	ldr	r6, [sp, #4]
 80177c8:	4637      	mov	r7, r6
 80177ca:	2800      	cmp	r0, #0
 80177cc:	f040 8243 	bne.w	8017c56 <_dtoa_r+0x956>
 80177d0:	9d00      	ldr	r5, [sp, #0]
 80177d2:	2331      	movs	r3, #49	; 0x31
 80177d4:	f805 3b01 	strb.w	r3, [r5], #1
 80177d8:	f10a 0a01 	add.w	sl, sl, #1
 80177dc:	e23f      	b.n	8017c5e <_dtoa_r+0x95e>
 80177de:	07f2      	lsls	r2, r6, #31
 80177e0:	d505      	bpl.n	80177ee <_dtoa_r+0x4ee>
 80177e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80177e6:	f7e8 ff1f 	bl	8000628 <__aeabi_dmul>
 80177ea:	3501      	adds	r5, #1
 80177ec:	2301      	movs	r3, #1
 80177ee:	1076      	asrs	r6, r6, #1
 80177f0:	3708      	adds	r7, #8
 80177f2:	e76c      	b.n	80176ce <_dtoa_r+0x3ce>
 80177f4:	2502      	movs	r5, #2
 80177f6:	e76f      	b.n	80176d8 <_dtoa_r+0x3d8>
 80177f8:	9b01      	ldr	r3, [sp, #4]
 80177fa:	f8cd a01c 	str.w	sl, [sp, #28]
 80177fe:	930c      	str	r3, [sp, #48]	; 0x30
 8017800:	e78d      	b.n	801771e <_dtoa_r+0x41e>
 8017802:	9900      	ldr	r1, [sp, #0]
 8017804:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017806:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017808:	4b4e      	ldr	r3, [pc, #312]	; (8017944 <_dtoa_r+0x644>)
 801780a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801780e:	4401      	add	r1, r0
 8017810:	9102      	str	r1, [sp, #8]
 8017812:	9908      	ldr	r1, [sp, #32]
 8017814:	eeb0 8a47 	vmov.f32	s16, s14
 8017818:	eef0 8a67 	vmov.f32	s17, s15
 801781c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017820:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017824:	2900      	cmp	r1, #0
 8017826:	d045      	beq.n	80178b4 <_dtoa_r+0x5b4>
 8017828:	494c      	ldr	r1, [pc, #304]	; (801795c <_dtoa_r+0x65c>)
 801782a:	2000      	movs	r0, #0
 801782c:	f7e9 f826 	bl	800087c <__aeabi_ddiv>
 8017830:	ec53 2b18 	vmov	r2, r3, d8
 8017834:	f7e8 fd40 	bl	80002b8 <__aeabi_dsub>
 8017838:	9d00      	ldr	r5, [sp, #0]
 801783a:	ec41 0b18 	vmov	d8, r0, r1
 801783e:	4639      	mov	r1, r7
 8017840:	4630      	mov	r0, r6
 8017842:	f7e9 f9a1 	bl	8000b88 <__aeabi_d2iz>
 8017846:	900c      	str	r0, [sp, #48]	; 0x30
 8017848:	f7e8 fe84 	bl	8000554 <__aeabi_i2d>
 801784c:	4602      	mov	r2, r0
 801784e:	460b      	mov	r3, r1
 8017850:	4630      	mov	r0, r6
 8017852:	4639      	mov	r1, r7
 8017854:	f7e8 fd30 	bl	80002b8 <__aeabi_dsub>
 8017858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801785a:	3330      	adds	r3, #48	; 0x30
 801785c:	f805 3b01 	strb.w	r3, [r5], #1
 8017860:	ec53 2b18 	vmov	r2, r3, d8
 8017864:	4606      	mov	r6, r0
 8017866:	460f      	mov	r7, r1
 8017868:	f7e9 f950 	bl	8000b0c <__aeabi_dcmplt>
 801786c:	2800      	cmp	r0, #0
 801786e:	d165      	bne.n	801793c <_dtoa_r+0x63c>
 8017870:	4632      	mov	r2, r6
 8017872:	463b      	mov	r3, r7
 8017874:	4935      	ldr	r1, [pc, #212]	; (801794c <_dtoa_r+0x64c>)
 8017876:	2000      	movs	r0, #0
 8017878:	f7e8 fd1e 	bl	80002b8 <__aeabi_dsub>
 801787c:	ec53 2b18 	vmov	r2, r3, d8
 8017880:	f7e9 f944 	bl	8000b0c <__aeabi_dcmplt>
 8017884:	2800      	cmp	r0, #0
 8017886:	f040 80b9 	bne.w	80179fc <_dtoa_r+0x6fc>
 801788a:	9b02      	ldr	r3, [sp, #8]
 801788c:	429d      	cmp	r5, r3
 801788e:	f43f af75 	beq.w	801777c <_dtoa_r+0x47c>
 8017892:	4b2f      	ldr	r3, [pc, #188]	; (8017950 <_dtoa_r+0x650>)
 8017894:	ec51 0b18 	vmov	r0, r1, d8
 8017898:	2200      	movs	r2, #0
 801789a:	f7e8 fec5 	bl	8000628 <__aeabi_dmul>
 801789e:	4b2c      	ldr	r3, [pc, #176]	; (8017950 <_dtoa_r+0x650>)
 80178a0:	ec41 0b18 	vmov	d8, r0, r1
 80178a4:	2200      	movs	r2, #0
 80178a6:	4630      	mov	r0, r6
 80178a8:	4639      	mov	r1, r7
 80178aa:	f7e8 febd 	bl	8000628 <__aeabi_dmul>
 80178ae:	4606      	mov	r6, r0
 80178b0:	460f      	mov	r7, r1
 80178b2:	e7c4      	b.n	801783e <_dtoa_r+0x53e>
 80178b4:	ec51 0b17 	vmov	r0, r1, d7
 80178b8:	f7e8 feb6 	bl	8000628 <__aeabi_dmul>
 80178bc:	9b02      	ldr	r3, [sp, #8]
 80178be:	9d00      	ldr	r5, [sp, #0]
 80178c0:	930c      	str	r3, [sp, #48]	; 0x30
 80178c2:	ec41 0b18 	vmov	d8, r0, r1
 80178c6:	4639      	mov	r1, r7
 80178c8:	4630      	mov	r0, r6
 80178ca:	f7e9 f95d 	bl	8000b88 <__aeabi_d2iz>
 80178ce:	9011      	str	r0, [sp, #68]	; 0x44
 80178d0:	f7e8 fe40 	bl	8000554 <__aeabi_i2d>
 80178d4:	4602      	mov	r2, r0
 80178d6:	460b      	mov	r3, r1
 80178d8:	4630      	mov	r0, r6
 80178da:	4639      	mov	r1, r7
 80178dc:	f7e8 fcec 	bl	80002b8 <__aeabi_dsub>
 80178e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80178e2:	3330      	adds	r3, #48	; 0x30
 80178e4:	f805 3b01 	strb.w	r3, [r5], #1
 80178e8:	9b02      	ldr	r3, [sp, #8]
 80178ea:	429d      	cmp	r5, r3
 80178ec:	4606      	mov	r6, r0
 80178ee:	460f      	mov	r7, r1
 80178f0:	f04f 0200 	mov.w	r2, #0
 80178f4:	d134      	bne.n	8017960 <_dtoa_r+0x660>
 80178f6:	4b19      	ldr	r3, [pc, #100]	; (801795c <_dtoa_r+0x65c>)
 80178f8:	ec51 0b18 	vmov	r0, r1, d8
 80178fc:	f7e8 fcde 	bl	80002bc <__adddf3>
 8017900:	4602      	mov	r2, r0
 8017902:	460b      	mov	r3, r1
 8017904:	4630      	mov	r0, r6
 8017906:	4639      	mov	r1, r7
 8017908:	f7e9 f91e 	bl	8000b48 <__aeabi_dcmpgt>
 801790c:	2800      	cmp	r0, #0
 801790e:	d175      	bne.n	80179fc <_dtoa_r+0x6fc>
 8017910:	ec53 2b18 	vmov	r2, r3, d8
 8017914:	4911      	ldr	r1, [pc, #68]	; (801795c <_dtoa_r+0x65c>)
 8017916:	2000      	movs	r0, #0
 8017918:	f7e8 fcce 	bl	80002b8 <__aeabi_dsub>
 801791c:	4602      	mov	r2, r0
 801791e:	460b      	mov	r3, r1
 8017920:	4630      	mov	r0, r6
 8017922:	4639      	mov	r1, r7
 8017924:	f7e9 f8f2 	bl	8000b0c <__aeabi_dcmplt>
 8017928:	2800      	cmp	r0, #0
 801792a:	f43f af27 	beq.w	801777c <_dtoa_r+0x47c>
 801792e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017930:	1e6b      	subs	r3, r5, #1
 8017932:	930c      	str	r3, [sp, #48]	; 0x30
 8017934:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017938:	2b30      	cmp	r3, #48	; 0x30
 801793a:	d0f8      	beq.n	801792e <_dtoa_r+0x62e>
 801793c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017940:	e04a      	b.n	80179d8 <_dtoa_r+0x6d8>
 8017942:	bf00      	nop
 8017944:	0801b328 	.word	0x0801b328
 8017948:	0801b300 	.word	0x0801b300
 801794c:	3ff00000 	.word	0x3ff00000
 8017950:	40240000 	.word	0x40240000
 8017954:	401c0000 	.word	0x401c0000
 8017958:	40140000 	.word	0x40140000
 801795c:	3fe00000 	.word	0x3fe00000
 8017960:	4baf      	ldr	r3, [pc, #700]	; (8017c20 <_dtoa_r+0x920>)
 8017962:	f7e8 fe61 	bl	8000628 <__aeabi_dmul>
 8017966:	4606      	mov	r6, r0
 8017968:	460f      	mov	r7, r1
 801796a:	e7ac      	b.n	80178c6 <_dtoa_r+0x5c6>
 801796c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017970:	9d00      	ldr	r5, [sp, #0]
 8017972:	4642      	mov	r2, r8
 8017974:	464b      	mov	r3, r9
 8017976:	4630      	mov	r0, r6
 8017978:	4639      	mov	r1, r7
 801797a:	f7e8 ff7f 	bl	800087c <__aeabi_ddiv>
 801797e:	f7e9 f903 	bl	8000b88 <__aeabi_d2iz>
 8017982:	9002      	str	r0, [sp, #8]
 8017984:	f7e8 fde6 	bl	8000554 <__aeabi_i2d>
 8017988:	4642      	mov	r2, r8
 801798a:	464b      	mov	r3, r9
 801798c:	f7e8 fe4c 	bl	8000628 <__aeabi_dmul>
 8017990:	4602      	mov	r2, r0
 8017992:	460b      	mov	r3, r1
 8017994:	4630      	mov	r0, r6
 8017996:	4639      	mov	r1, r7
 8017998:	f7e8 fc8e 	bl	80002b8 <__aeabi_dsub>
 801799c:	9e02      	ldr	r6, [sp, #8]
 801799e:	9f01      	ldr	r7, [sp, #4]
 80179a0:	3630      	adds	r6, #48	; 0x30
 80179a2:	f805 6b01 	strb.w	r6, [r5], #1
 80179a6:	9e00      	ldr	r6, [sp, #0]
 80179a8:	1bae      	subs	r6, r5, r6
 80179aa:	42b7      	cmp	r7, r6
 80179ac:	4602      	mov	r2, r0
 80179ae:	460b      	mov	r3, r1
 80179b0:	d137      	bne.n	8017a22 <_dtoa_r+0x722>
 80179b2:	f7e8 fc83 	bl	80002bc <__adddf3>
 80179b6:	4642      	mov	r2, r8
 80179b8:	464b      	mov	r3, r9
 80179ba:	4606      	mov	r6, r0
 80179bc:	460f      	mov	r7, r1
 80179be:	f7e9 f8c3 	bl	8000b48 <__aeabi_dcmpgt>
 80179c2:	b9c8      	cbnz	r0, 80179f8 <_dtoa_r+0x6f8>
 80179c4:	4642      	mov	r2, r8
 80179c6:	464b      	mov	r3, r9
 80179c8:	4630      	mov	r0, r6
 80179ca:	4639      	mov	r1, r7
 80179cc:	f7e9 f894 	bl	8000af8 <__aeabi_dcmpeq>
 80179d0:	b110      	cbz	r0, 80179d8 <_dtoa_r+0x6d8>
 80179d2:	9b02      	ldr	r3, [sp, #8]
 80179d4:	07d9      	lsls	r1, r3, #31
 80179d6:	d40f      	bmi.n	80179f8 <_dtoa_r+0x6f8>
 80179d8:	4620      	mov	r0, r4
 80179da:	4659      	mov	r1, fp
 80179dc:	f000 ff54 	bl	8018888 <_Bfree>
 80179e0:	2300      	movs	r3, #0
 80179e2:	702b      	strb	r3, [r5, #0]
 80179e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80179e6:	f10a 0001 	add.w	r0, sl, #1
 80179ea:	6018      	str	r0, [r3, #0]
 80179ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	f43f acd8 	beq.w	80173a4 <_dtoa_r+0xa4>
 80179f4:	601d      	str	r5, [r3, #0]
 80179f6:	e4d5      	b.n	80173a4 <_dtoa_r+0xa4>
 80179f8:	f8cd a01c 	str.w	sl, [sp, #28]
 80179fc:	462b      	mov	r3, r5
 80179fe:	461d      	mov	r5, r3
 8017a00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017a04:	2a39      	cmp	r2, #57	; 0x39
 8017a06:	d108      	bne.n	8017a1a <_dtoa_r+0x71a>
 8017a08:	9a00      	ldr	r2, [sp, #0]
 8017a0a:	429a      	cmp	r2, r3
 8017a0c:	d1f7      	bne.n	80179fe <_dtoa_r+0x6fe>
 8017a0e:	9a07      	ldr	r2, [sp, #28]
 8017a10:	9900      	ldr	r1, [sp, #0]
 8017a12:	3201      	adds	r2, #1
 8017a14:	9207      	str	r2, [sp, #28]
 8017a16:	2230      	movs	r2, #48	; 0x30
 8017a18:	700a      	strb	r2, [r1, #0]
 8017a1a:	781a      	ldrb	r2, [r3, #0]
 8017a1c:	3201      	adds	r2, #1
 8017a1e:	701a      	strb	r2, [r3, #0]
 8017a20:	e78c      	b.n	801793c <_dtoa_r+0x63c>
 8017a22:	4b7f      	ldr	r3, [pc, #508]	; (8017c20 <_dtoa_r+0x920>)
 8017a24:	2200      	movs	r2, #0
 8017a26:	f7e8 fdff 	bl	8000628 <__aeabi_dmul>
 8017a2a:	2200      	movs	r2, #0
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	4606      	mov	r6, r0
 8017a30:	460f      	mov	r7, r1
 8017a32:	f7e9 f861 	bl	8000af8 <__aeabi_dcmpeq>
 8017a36:	2800      	cmp	r0, #0
 8017a38:	d09b      	beq.n	8017972 <_dtoa_r+0x672>
 8017a3a:	e7cd      	b.n	80179d8 <_dtoa_r+0x6d8>
 8017a3c:	9a08      	ldr	r2, [sp, #32]
 8017a3e:	2a00      	cmp	r2, #0
 8017a40:	f000 80c4 	beq.w	8017bcc <_dtoa_r+0x8cc>
 8017a44:	9a05      	ldr	r2, [sp, #20]
 8017a46:	2a01      	cmp	r2, #1
 8017a48:	f300 80a8 	bgt.w	8017b9c <_dtoa_r+0x89c>
 8017a4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017a4e:	2a00      	cmp	r2, #0
 8017a50:	f000 80a0 	beq.w	8017b94 <_dtoa_r+0x894>
 8017a54:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017a58:	9e06      	ldr	r6, [sp, #24]
 8017a5a:	4645      	mov	r5, r8
 8017a5c:	9a04      	ldr	r2, [sp, #16]
 8017a5e:	2101      	movs	r1, #1
 8017a60:	441a      	add	r2, r3
 8017a62:	4620      	mov	r0, r4
 8017a64:	4498      	add	r8, r3
 8017a66:	9204      	str	r2, [sp, #16]
 8017a68:	f001 f814 	bl	8018a94 <__i2b>
 8017a6c:	4607      	mov	r7, r0
 8017a6e:	2d00      	cmp	r5, #0
 8017a70:	dd0b      	ble.n	8017a8a <_dtoa_r+0x78a>
 8017a72:	9b04      	ldr	r3, [sp, #16]
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	dd08      	ble.n	8017a8a <_dtoa_r+0x78a>
 8017a78:	42ab      	cmp	r3, r5
 8017a7a:	9a04      	ldr	r2, [sp, #16]
 8017a7c:	bfa8      	it	ge
 8017a7e:	462b      	movge	r3, r5
 8017a80:	eba8 0803 	sub.w	r8, r8, r3
 8017a84:	1aed      	subs	r5, r5, r3
 8017a86:	1ad3      	subs	r3, r2, r3
 8017a88:	9304      	str	r3, [sp, #16]
 8017a8a:	9b06      	ldr	r3, [sp, #24]
 8017a8c:	b1fb      	cbz	r3, 8017ace <_dtoa_r+0x7ce>
 8017a8e:	9b08      	ldr	r3, [sp, #32]
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	f000 809f 	beq.w	8017bd4 <_dtoa_r+0x8d4>
 8017a96:	2e00      	cmp	r6, #0
 8017a98:	dd11      	ble.n	8017abe <_dtoa_r+0x7be>
 8017a9a:	4639      	mov	r1, r7
 8017a9c:	4632      	mov	r2, r6
 8017a9e:	4620      	mov	r0, r4
 8017aa0:	f001 f8b4 	bl	8018c0c <__pow5mult>
 8017aa4:	465a      	mov	r2, fp
 8017aa6:	4601      	mov	r1, r0
 8017aa8:	4607      	mov	r7, r0
 8017aaa:	4620      	mov	r0, r4
 8017aac:	f001 f808 	bl	8018ac0 <__multiply>
 8017ab0:	4659      	mov	r1, fp
 8017ab2:	9007      	str	r0, [sp, #28]
 8017ab4:	4620      	mov	r0, r4
 8017ab6:	f000 fee7 	bl	8018888 <_Bfree>
 8017aba:	9b07      	ldr	r3, [sp, #28]
 8017abc:	469b      	mov	fp, r3
 8017abe:	9b06      	ldr	r3, [sp, #24]
 8017ac0:	1b9a      	subs	r2, r3, r6
 8017ac2:	d004      	beq.n	8017ace <_dtoa_r+0x7ce>
 8017ac4:	4659      	mov	r1, fp
 8017ac6:	4620      	mov	r0, r4
 8017ac8:	f001 f8a0 	bl	8018c0c <__pow5mult>
 8017acc:	4683      	mov	fp, r0
 8017ace:	2101      	movs	r1, #1
 8017ad0:	4620      	mov	r0, r4
 8017ad2:	f000 ffdf 	bl	8018a94 <__i2b>
 8017ad6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	4606      	mov	r6, r0
 8017adc:	dd7c      	ble.n	8017bd8 <_dtoa_r+0x8d8>
 8017ade:	461a      	mov	r2, r3
 8017ae0:	4601      	mov	r1, r0
 8017ae2:	4620      	mov	r0, r4
 8017ae4:	f001 f892 	bl	8018c0c <__pow5mult>
 8017ae8:	9b05      	ldr	r3, [sp, #20]
 8017aea:	2b01      	cmp	r3, #1
 8017aec:	4606      	mov	r6, r0
 8017aee:	dd76      	ble.n	8017bde <_dtoa_r+0x8de>
 8017af0:	2300      	movs	r3, #0
 8017af2:	9306      	str	r3, [sp, #24]
 8017af4:	6933      	ldr	r3, [r6, #16]
 8017af6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017afa:	6918      	ldr	r0, [r3, #16]
 8017afc:	f000 ff7a 	bl	80189f4 <__hi0bits>
 8017b00:	f1c0 0020 	rsb	r0, r0, #32
 8017b04:	9b04      	ldr	r3, [sp, #16]
 8017b06:	4418      	add	r0, r3
 8017b08:	f010 001f 	ands.w	r0, r0, #31
 8017b0c:	f000 8086 	beq.w	8017c1c <_dtoa_r+0x91c>
 8017b10:	f1c0 0320 	rsb	r3, r0, #32
 8017b14:	2b04      	cmp	r3, #4
 8017b16:	dd7f      	ble.n	8017c18 <_dtoa_r+0x918>
 8017b18:	f1c0 001c 	rsb	r0, r0, #28
 8017b1c:	9b04      	ldr	r3, [sp, #16]
 8017b1e:	4403      	add	r3, r0
 8017b20:	4480      	add	r8, r0
 8017b22:	4405      	add	r5, r0
 8017b24:	9304      	str	r3, [sp, #16]
 8017b26:	f1b8 0f00 	cmp.w	r8, #0
 8017b2a:	dd05      	ble.n	8017b38 <_dtoa_r+0x838>
 8017b2c:	4659      	mov	r1, fp
 8017b2e:	4642      	mov	r2, r8
 8017b30:	4620      	mov	r0, r4
 8017b32:	f001 f8c5 	bl	8018cc0 <__lshift>
 8017b36:	4683      	mov	fp, r0
 8017b38:	9b04      	ldr	r3, [sp, #16]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	dd05      	ble.n	8017b4a <_dtoa_r+0x84a>
 8017b3e:	4631      	mov	r1, r6
 8017b40:	461a      	mov	r2, r3
 8017b42:	4620      	mov	r0, r4
 8017b44:	f001 f8bc 	bl	8018cc0 <__lshift>
 8017b48:	4606      	mov	r6, r0
 8017b4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d069      	beq.n	8017c24 <_dtoa_r+0x924>
 8017b50:	4631      	mov	r1, r6
 8017b52:	4658      	mov	r0, fp
 8017b54:	f001 f920 	bl	8018d98 <__mcmp>
 8017b58:	2800      	cmp	r0, #0
 8017b5a:	da63      	bge.n	8017c24 <_dtoa_r+0x924>
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	4659      	mov	r1, fp
 8017b60:	220a      	movs	r2, #10
 8017b62:	4620      	mov	r0, r4
 8017b64:	f000 feb2 	bl	80188cc <__multadd>
 8017b68:	9b08      	ldr	r3, [sp, #32]
 8017b6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017b6e:	4683      	mov	fp, r0
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	f000 818f 	beq.w	8017e94 <_dtoa_r+0xb94>
 8017b76:	4639      	mov	r1, r7
 8017b78:	2300      	movs	r3, #0
 8017b7a:	220a      	movs	r2, #10
 8017b7c:	4620      	mov	r0, r4
 8017b7e:	f000 fea5 	bl	80188cc <__multadd>
 8017b82:	f1b9 0f00 	cmp.w	r9, #0
 8017b86:	4607      	mov	r7, r0
 8017b88:	f300 808e 	bgt.w	8017ca8 <_dtoa_r+0x9a8>
 8017b8c:	9b05      	ldr	r3, [sp, #20]
 8017b8e:	2b02      	cmp	r3, #2
 8017b90:	dc50      	bgt.n	8017c34 <_dtoa_r+0x934>
 8017b92:	e089      	b.n	8017ca8 <_dtoa_r+0x9a8>
 8017b94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017b96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017b9a:	e75d      	b.n	8017a58 <_dtoa_r+0x758>
 8017b9c:	9b01      	ldr	r3, [sp, #4]
 8017b9e:	1e5e      	subs	r6, r3, #1
 8017ba0:	9b06      	ldr	r3, [sp, #24]
 8017ba2:	42b3      	cmp	r3, r6
 8017ba4:	bfbf      	itttt	lt
 8017ba6:	9b06      	ldrlt	r3, [sp, #24]
 8017ba8:	9606      	strlt	r6, [sp, #24]
 8017baa:	1af2      	sublt	r2, r6, r3
 8017bac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8017bae:	bfb6      	itet	lt
 8017bb0:	189b      	addlt	r3, r3, r2
 8017bb2:	1b9e      	subge	r6, r3, r6
 8017bb4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8017bb6:	9b01      	ldr	r3, [sp, #4]
 8017bb8:	bfb8      	it	lt
 8017bba:	2600      	movlt	r6, #0
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	bfb5      	itete	lt
 8017bc0:	eba8 0503 	sublt.w	r5, r8, r3
 8017bc4:	9b01      	ldrge	r3, [sp, #4]
 8017bc6:	2300      	movlt	r3, #0
 8017bc8:	4645      	movge	r5, r8
 8017bca:	e747      	b.n	8017a5c <_dtoa_r+0x75c>
 8017bcc:	9e06      	ldr	r6, [sp, #24]
 8017bce:	9f08      	ldr	r7, [sp, #32]
 8017bd0:	4645      	mov	r5, r8
 8017bd2:	e74c      	b.n	8017a6e <_dtoa_r+0x76e>
 8017bd4:	9a06      	ldr	r2, [sp, #24]
 8017bd6:	e775      	b.n	8017ac4 <_dtoa_r+0x7c4>
 8017bd8:	9b05      	ldr	r3, [sp, #20]
 8017bda:	2b01      	cmp	r3, #1
 8017bdc:	dc18      	bgt.n	8017c10 <_dtoa_r+0x910>
 8017bde:	9b02      	ldr	r3, [sp, #8]
 8017be0:	b9b3      	cbnz	r3, 8017c10 <_dtoa_r+0x910>
 8017be2:	9b03      	ldr	r3, [sp, #12]
 8017be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017be8:	b9a3      	cbnz	r3, 8017c14 <_dtoa_r+0x914>
 8017bea:	9b03      	ldr	r3, [sp, #12]
 8017bec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017bf0:	0d1b      	lsrs	r3, r3, #20
 8017bf2:	051b      	lsls	r3, r3, #20
 8017bf4:	b12b      	cbz	r3, 8017c02 <_dtoa_r+0x902>
 8017bf6:	9b04      	ldr	r3, [sp, #16]
 8017bf8:	3301      	adds	r3, #1
 8017bfa:	9304      	str	r3, [sp, #16]
 8017bfc:	f108 0801 	add.w	r8, r8, #1
 8017c00:	2301      	movs	r3, #1
 8017c02:	9306      	str	r3, [sp, #24]
 8017c04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	f47f af74 	bne.w	8017af4 <_dtoa_r+0x7f4>
 8017c0c:	2001      	movs	r0, #1
 8017c0e:	e779      	b.n	8017b04 <_dtoa_r+0x804>
 8017c10:	2300      	movs	r3, #0
 8017c12:	e7f6      	b.n	8017c02 <_dtoa_r+0x902>
 8017c14:	9b02      	ldr	r3, [sp, #8]
 8017c16:	e7f4      	b.n	8017c02 <_dtoa_r+0x902>
 8017c18:	d085      	beq.n	8017b26 <_dtoa_r+0x826>
 8017c1a:	4618      	mov	r0, r3
 8017c1c:	301c      	adds	r0, #28
 8017c1e:	e77d      	b.n	8017b1c <_dtoa_r+0x81c>
 8017c20:	40240000 	.word	0x40240000
 8017c24:	9b01      	ldr	r3, [sp, #4]
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	dc38      	bgt.n	8017c9c <_dtoa_r+0x99c>
 8017c2a:	9b05      	ldr	r3, [sp, #20]
 8017c2c:	2b02      	cmp	r3, #2
 8017c2e:	dd35      	ble.n	8017c9c <_dtoa_r+0x99c>
 8017c30:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017c34:	f1b9 0f00 	cmp.w	r9, #0
 8017c38:	d10d      	bne.n	8017c56 <_dtoa_r+0x956>
 8017c3a:	4631      	mov	r1, r6
 8017c3c:	464b      	mov	r3, r9
 8017c3e:	2205      	movs	r2, #5
 8017c40:	4620      	mov	r0, r4
 8017c42:	f000 fe43 	bl	80188cc <__multadd>
 8017c46:	4601      	mov	r1, r0
 8017c48:	4606      	mov	r6, r0
 8017c4a:	4658      	mov	r0, fp
 8017c4c:	f001 f8a4 	bl	8018d98 <__mcmp>
 8017c50:	2800      	cmp	r0, #0
 8017c52:	f73f adbd 	bgt.w	80177d0 <_dtoa_r+0x4d0>
 8017c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c58:	9d00      	ldr	r5, [sp, #0]
 8017c5a:	ea6f 0a03 	mvn.w	sl, r3
 8017c5e:	f04f 0800 	mov.w	r8, #0
 8017c62:	4631      	mov	r1, r6
 8017c64:	4620      	mov	r0, r4
 8017c66:	f000 fe0f 	bl	8018888 <_Bfree>
 8017c6a:	2f00      	cmp	r7, #0
 8017c6c:	f43f aeb4 	beq.w	80179d8 <_dtoa_r+0x6d8>
 8017c70:	f1b8 0f00 	cmp.w	r8, #0
 8017c74:	d005      	beq.n	8017c82 <_dtoa_r+0x982>
 8017c76:	45b8      	cmp	r8, r7
 8017c78:	d003      	beq.n	8017c82 <_dtoa_r+0x982>
 8017c7a:	4641      	mov	r1, r8
 8017c7c:	4620      	mov	r0, r4
 8017c7e:	f000 fe03 	bl	8018888 <_Bfree>
 8017c82:	4639      	mov	r1, r7
 8017c84:	4620      	mov	r0, r4
 8017c86:	f000 fdff 	bl	8018888 <_Bfree>
 8017c8a:	e6a5      	b.n	80179d8 <_dtoa_r+0x6d8>
 8017c8c:	2600      	movs	r6, #0
 8017c8e:	4637      	mov	r7, r6
 8017c90:	e7e1      	b.n	8017c56 <_dtoa_r+0x956>
 8017c92:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017c94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017c98:	4637      	mov	r7, r6
 8017c9a:	e599      	b.n	80177d0 <_dtoa_r+0x4d0>
 8017c9c:	9b08      	ldr	r3, [sp, #32]
 8017c9e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	f000 80fd 	beq.w	8017ea2 <_dtoa_r+0xba2>
 8017ca8:	2d00      	cmp	r5, #0
 8017caa:	dd05      	ble.n	8017cb8 <_dtoa_r+0x9b8>
 8017cac:	4639      	mov	r1, r7
 8017cae:	462a      	mov	r2, r5
 8017cb0:	4620      	mov	r0, r4
 8017cb2:	f001 f805 	bl	8018cc0 <__lshift>
 8017cb6:	4607      	mov	r7, r0
 8017cb8:	9b06      	ldr	r3, [sp, #24]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d05c      	beq.n	8017d78 <_dtoa_r+0xa78>
 8017cbe:	6879      	ldr	r1, [r7, #4]
 8017cc0:	4620      	mov	r0, r4
 8017cc2:	f000 fda1 	bl	8018808 <_Balloc>
 8017cc6:	4605      	mov	r5, r0
 8017cc8:	b928      	cbnz	r0, 8017cd6 <_dtoa_r+0x9d6>
 8017cca:	4b80      	ldr	r3, [pc, #512]	; (8017ecc <_dtoa_r+0xbcc>)
 8017ccc:	4602      	mov	r2, r0
 8017cce:	f240 21ea 	movw	r1, #746	; 0x2ea
 8017cd2:	f7ff bb2e 	b.w	8017332 <_dtoa_r+0x32>
 8017cd6:	693a      	ldr	r2, [r7, #16]
 8017cd8:	3202      	adds	r2, #2
 8017cda:	0092      	lsls	r2, r2, #2
 8017cdc:	f107 010c 	add.w	r1, r7, #12
 8017ce0:	300c      	adds	r0, #12
 8017ce2:	f7fd fc31 	bl	8015548 <memcpy>
 8017ce6:	2201      	movs	r2, #1
 8017ce8:	4629      	mov	r1, r5
 8017cea:	4620      	mov	r0, r4
 8017cec:	f000 ffe8 	bl	8018cc0 <__lshift>
 8017cf0:	9b00      	ldr	r3, [sp, #0]
 8017cf2:	3301      	adds	r3, #1
 8017cf4:	9301      	str	r3, [sp, #4]
 8017cf6:	9b00      	ldr	r3, [sp, #0]
 8017cf8:	444b      	add	r3, r9
 8017cfa:	9307      	str	r3, [sp, #28]
 8017cfc:	9b02      	ldr	r3, [sp, #8]
 8017cfe:	f003 0301 	and.w	r3, r3, #1
 8017d02:	46b8      	mov	r8, r7
 8017d04:	9306      	str	r3, [sp, #24]
 8017d06:	4607      	mov	r7, r0
 8017d08:	9b01      	ldr	r3, [sp, #4]
 8017d0a:	4631      	mov	r1, r6
 8017d0c:	3b01      	subs	r3, #1
 8017d0e:	4658      	mov	r0, fp
 8017d10:	9302      	str	r3, [sp, #8]
 8017d12:	f7ff fa69 	bl	80171e8 <quorem>
 8017d16:	4603      	mov	r3, r0
 8017d18:	3330      	adds	r3, #48	; 0x30
 8017d1a:	9004      	str	r0, [sp, #16]
 8017d1c:	4641      	mov	r1, r8
 8017d1e:	4658      	mov	r0, fp
 8017d20:	9308      	str	r3, [sp, #32]
 8017d22:	f001 f839 	bl	8018d98 <__mcmp>
 8017d26:	463a      	mov	r2, r7
 8017d28:	4681      	mov	r9, r0
 8017d2a:	4631      	mov	r1, r6
 8017d2c:	4620      	mov	r0, r4
 8017d2e:	f001 f84f 	bl	8018dd0 <__mdiff>
 8017d32:	68c2      	ldr	r2, [r0, #12]
 8017d34:	9b08      	ldr	r3, [sp, #32]
 8017d36:	4605      	mov	r5, r0
 8017d38:	bb02      	cbnz	r2, 8017d7c <_dtoa_r+0xa7c>
 8017d3a:	4601      	mov	r1, r0
 8017d3c:	4658      	mov	r0, fp
 8017d3e:	f001 f82b 	bl	8018d98 <__mcmp>
 8017d42:	9b08      	ldr	r3, [sp, #32]
 8017d44:	4602      	mov	r2, r0
 8017d46:	4629      	mov	r1, r5
 8017d48:	4620      	mov	r0, r4
 8017d4a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8017d4e:	f000 fd9b 	bl	8018888 <_Bfree>
 8017d52:	9b05      	ldr	r3, [sp, #20]
 8017d54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017d56:	9d01      	ldr	r5, [sp, #4]
 8017d58:	ea43 0102 	orr.w	r1, r3, r2
 8017d5c:	9b06      	ldr	r3, [sp, #24]
 8017d5e:	430b      	orrs	r3, r1
 8017d60:	9b08      	ldr	r3, [sp, #32]
 8017d62:	d10d      	bne.n	8017d80 <_dtoa_r+0xa80>
 8017d64:	2b39      	cmp	r3, #57	; 0x39
 8017d66:	d029      	beq.n	8017dbc <_dtoa_r+0xabc>
 8017d68:	f1b9 0f00 	cmp.w	r9, #0
 8017d6c:	dd01      	ble.n	8017d72 <_dtoa_r+0xa72>
 8017d6e:	9b04      	ldr	r3, [sp, #16]
 8017d70:	3331      	adds	r3, #49	; 0x31
 8017d72:	9a02      	ldr	r2, [sp, #8]
 8017d74:	7013      	strb	r3, [r2, #0]
 8017d76:	e774      	b.n	8017c62 <_dtoa_r+0x962>
 8017d78:	4638      	mov	r0, r7
 8017d7a:	e7b9      	b.n	8017cf0 <_dtoa_r+0x9f0>
 8017d7c:	2201      	movs	r2, #1
 8017d7e:	e7e2      	b.n	8017d46 <_dtoa_r+0xa46>
 8017d80:	f1b9 0f00 	cmp.w	r9, #0
 8017d84:	db06      	blt.n	8017d94 <_dtoa_r+0xa94>
 8017d86:	9905      	ldr	r1, [sp, #20]
 8017d88:	ea41 0909 	orr.w	r9, r1, r9
 8017d8c:	9906      	ldr	r1, [sp, #24]
 8017d8e:	ea59 0101 	orrs.w	r1, r9, r1
 8017d92:	d120      	bne.n	8017dd6 <_dtoa_r+0xad6>
 8017d94:	2a00      	cmp	r2, #0
 8017d96:	ddec      	ble.n	8017d72 <_dtoa_r+0xa72>
 8017d98:	4659      	mov	r1, fp
 8017d9a:	2201      	movs	r2, #1
 8017d9c:	4620      	mov	r0, r4
 8017d9e:	9301      	str	r3, [sp, #4]
 8017da0:	f000 ff8e 	bl	8018cc0 <__lshift>
 8017da4:	4631      	mov	r1, r6
 8017da6:	4683      	mov	fp, r0
 8017da8:	f000 fff6 	bl	8018d98 <__mcmp>
 8017dac:	2800      	cmp	r0, #0
 8017dae:	9b01      	ldr	r3, [sp, #4]
 8017db0:	dc02      	bgt.n	8017db8 <_dtoa_r+0xab8>
 8017db2:	d1de      	bne.n	8017d72 <_dtoa_r+0xa72>
 8017db4:	07da      	lsls	r2, r3, #31
 8017db6:	d5dc      	bpl.n	8017d72 <_dtoa_r+0xa72>
 8017db8:	2b39      	cmp	r3, #57	; 0x39
 8017dba:	d1d8      	bne.n	8017d6e <_dtoa_r+0xa6e>
 8017dbc:	9a02      	ldr	r2, [sp, #8]
 8017dbe:	2339      	movs	r3, #57	; 0x39
 8017dc0:	7013      	strb	r3, [r2, #0]
 8017dc2:	462b      	mov	r3, r5
 8017dc4:	461d      	mov	r5, r3
 8017dc6:	3b01      	subs	r3, #1
 8017dc8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017dcc:	2a39      	cmp	r2, #57	; 0x39
 8017dce:	d050      	beq.n	8017e72 <_dtoa_r+0xb72>
 8017dd0:	3201      	adds	r2, #1
 8017dd2:	701a      	strb	r2, [r3, #0]
 8017dd4:	e745      	b.n	8017c62 <_dtoa_r+0x962>
 8017dd6:	2a00      	cmp	r2, #0
 8017dd8:	dd03      	ble.n	8017de2 <_dtoa_r+0xae2>
 8017dda:	2b39      	cmp	r3, #57	; 0x39
 8017ddc:	d0ee      	beq.n	8017dbc <_dtoa_r+0xabc>
 8017dde:	3301      	adds	r3, #1
 8017de0:	e7c7      	b.n	8017d72 <_dtoa_r+0xa72>
 8017de2:	9a01      	ldr	r2, [sp, #4]
 8017de4:	9907      	ldr	r1, [sp, #28]
 8017de6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017dea:	428a      	cmp	r2, r1
 8017dec:	d02a      	beq.n	8017e44 <_dtoa_r+0xb44>
 8017dee:	4659      	mov	r1, fp
 8017df0:	2300      	movs	r3, #0
 8017df2:	220a      	movs	r2, #10
 8017df4:	4620      	mov	r0, r4
 8017df6:	f000 fd69 	bl	80188cc <__multadd>
 8017dfa:	45b8      	cmp	r8, r7
 8017dfc:	4683      	mov	fp, r0
 8017dfe:	f04f 0300 	mov.w	r3, #0
 8017e02:	f04f 020a 	mov.w	r2, #10
 8017e06:	4641      	mov	r1, r8
 8017e08:	4620      	mov	r0, r4
 8017e0a:	d107      	bne.n	8017e1c <_dtoa_r+0xb1c>
 8017e0c:	f000 fd5e 	bl	80188cc <__multadd>
 8017e10:	4680      	mov	r8, r0
 8017e12:	4607      	mov	r7, r0
 8017e14:	9b01      	ldr	r3, [sp, #4]
 8017e16:	3301      	adds	r3, #1
 8017e18:	9301      	str	r3, [sp, #4]
 8017e1a:	e775      	b.n	8017d08 <_dtoa_r+0xa08>
 8017e1c:	f000 fd56 	bl	80188cc <__multadd>
 8017e20:	4639      	mov	r1, r7
 8017e22:	4680      	mov	r8, r0
 8017e24:	2300      	movs	r3, #0
 8017e26:	220a      	movs	r2, #10
 8017e28:	4620      	mov	r0, r4
 8017e2a:	f000 fd4f 	bl	80188cc <__multadd>
 8017e2e:	4607      	mov	r7, r0
 8017e30:	e7f0      	b.n	8017e14 <_dtoa_r+0xb14>
 8017e32:	f1b9 0f00 	cmp.w	r9, #0
 8017e36:	9a00      	ldr	r2, [sp, #0]
 8017e38:	bfcc      	ite	gt
 8017e3a:	464d      	movgt	r5, r9
 8017e3c:	2501      	movle	r5, #1
 8017e3e:	4415      	add	r5, r2
 8017e40:	f04f 0800 	mov.w	r8, #0
 8017e44:	4659      	mov	r1, fp
 8017e46:	2201      	movs	r2, #1
 8017e48:	4620      	mov	r0, r4
 8017e4a:	9301      	str	r3, [sp, #4]
 8017e4c:	f000 ff38 	bl	8018cc0 <__lshift>
 8017e50:	4631      	mov	r1, r6
 8017e52:	4683      	mov	fp, r0
 8017e54:	f000 ffa0 	bl	8018d98 <__mcmp>
 8017e58:	2800      	cmp	r0, #0
 8017e5a:	dcb2      	bgt.n	8017dc2 <_dtoa_r+0xac2>
 8017e5c:	d102      	bne.n	8017e64 <_dtoa_r+0xb64>
 8017e5e:	9b01      	ldr	r3, [sp, #4]
 8017e60:	07db      	lsls	r3, r3, #31
 8017e62:	d4ae      	bmi.n	8017dc2 <_dtoa_r+0xac2>
 8017e64:	462b      	mov	r3, r5
 8017e66:	461d      	mov	r5, r3
 8017e68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017e6c:	2a30      	cmp	r2, #48	; 0x30
 8017e6e:	d0fa      	beq.n	8017e66 <_dtoa_r+0xb66>
 8017e70:	e6f7      	b.n	8017c62 <_dtoa_r+0x962>
 8017e72:	9a00      	ldr	r2, [sp, #0]
 8017e74:	429a      	cmp	r2, r3
 8017e76:	d1a5      	bne.n	8017dc4 <_dtoa_r+0xac4>
 8017e78:	f10a 0a01 	add.w	sl, sl, #1
 8017e7c:	2331      	movs	r3, #49	; 0x31
 8017e7e:	e779      	b.n	8017d74 <_dtoa_r+0xa74>
 8017e80:	4b13      	ldr	r3, [pc, #76]	; (8017ed0 <_dtoa_r+0xbd0>)
 8017e82:	f7ff baaf 	b.w	80173e4 <_dtoa_r+0xe4>
 8017e86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	f47f aa86 	bne.w	801739a <_dtoa_r+0x9a>
 8017e8e:	4b11      	ldr	r3, [pc, #68]	; (8017ed4 <_dtoa_r+0xbd4>)
 8017e90:	f7ff baa8 	b.w	80173e4 <_dtoa_r+0xe4>
 8017e94:	f1b9 0f00 	cmp.w	r9, #0
 8017e98:	dc03      	bgt.n	8017ea2 <_dtoa_r+0xba2>
 8017e9a:	9b05      	ldr	r3, [sp, #20]
 8017e9c:	2b02      	cmp	r3, #2
 8017e9e:	f73f aec9 	bgt.w	8017c34 <_dtoa_r+0x934>
 8017ea2:	9d00      	ldr	r5, [sp, #0]
 8017ea4:	4631      	mov	r1, r6
 8017ea6:	4658      	mov	r0, fp
 8017ea8:	f7ff f99e 	bl	80171e8 <quorem>
 8017eac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8017eb0:	f805 3b01 	strb.w	r3, [r5], #1
 8017eb4:	9a00      	ldr	r2, [sp, #0]
 8017eb6:	1aaa      	subs	r2, r5, r2
 8017eb8:	4591      	cmp	r9, r2
 8017eba:	ddba      	ble.n	8017e32 <_dtoa_r+0xb32>
 8017ebc:	4659      	mov	r1, fp
 8017ebe:	2300      	movs	r3, #0
 8017ec0:	220a      	movs	r2, #10
 8017ec2:	4620      	mov	r0, r4
 8017ec4:	f000 fd02 	bl	80188cc <__multadd>
 8017ec8:	4683      	mov	fp, r0
 8017eca:	e7eb      	b.n	8017ea4 <_dtoa_r+0xba4>
 8017ecc:	0801b1ac 	.word	0x0801b1ac
 8017ed0:	0801b411 	.word	0x0801b411
 8017ed4:	0801b129 	.word	0x0801b129

08017ed8 <std>:
 8017ed8:	2300      	movs	r3, #0
 8017eda:	b510      	push	{r4, lr}
 8017edc:	4604      	mov	r4, r0
 8017ede:	e9c0 3300 	strd	r3, r3, [r0]
 8017ee2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017ee6:	6083      	str	r3, [r0, #8]
 8017ee8:	8181      	strh	r1, [r0, #12]
 8017eea:	6643      	str	r3, [r0, #100]	; 0x64
 8017eec:	81c2      	strh	r2, [r0, #14]
 8017eee:	6183      	str	r3, [r0, #24]
 8017ef0:	4619      	mov	r1, r3
 8017ef2:	2208      	movs	r2, #8
 8017ef4:	305c      	adds	r0, #92	; 0x5c
 8017ef6:	f7fd fb35 	bl	8015564 <memset>
 8017efa:	4b05      	ldr	r3, [pc, #20]	; (8017f10 <std+0x38>)
 8017efc:	6263      	str	r3, [r4, #36]	; 0x24
 8017efe:	4b05      	ldr	r3, [pc, #20]	; (8017f14 <std+0x3c>)
 8017f00:	62a3      	str	r3, [r4, #40]	; 0x28
 8017f02:	4b05      	ldr	r3, [pc, #20]	; (8017f18 <std+0x40>)
 8017f04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017f06:	4b05      	ldr	r3, [pc, #20]	; (8017f1c <std+0x44>)
 8017f08:	6224      	str	r4, [r4, #32]
 8017f0a:	6323      	str	r3, [r4, #48]	; 0x30
 8017f0c:	bd10      	pop	{r4, pc}
 8017f0e:	bf00      	nop
 8017f10:	08016375 	.word	0x08016375
 8017f14:	0801639b 	.word	0x0801639b
 8017f18:	080163d3 	.word	0x080163d3
 8017f1c:	080163f7 	.word	0x080163f7

08017f20 <_cleanup_r>:
 8017f20:	4901      	ldr	r1, [pc, #4]	; (8017f28 <_cleanup_r+0x8>)
 8017f22:	f000 b8af 	b.w	8018084 <_fwalk_reent>
 8017f26:	bf00      	nop
 8017f28:	0801a3dd 	.word	0x0801a3dd

08017f2c <__sfmoreglue>:
 8017f2c:	b570      	push	{r4, r5, r6, lr}
 8017f2e:	1e4a      	subs	r2, r1, #1
 8017f30:	2568      	movs	r5, #104	; 0x68
 8017f32:	4355      	muls	r5, r2
 8017f34:	460e      	mov	r6, r1
 8017f36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017f3a:	f001 f97f 	bl	801923c <_malloc_r>
 8017f3e:	4604      	mov	r4, r0
 8017f40:	b140      	cbz	r0, 8017f54 <__sfmoreglue+0x28>
 8017f42:	2100      	movs	r1, #0
 8017f44:	e9c0 1600 	strd	r1, r6, [r0]
 8017f48:	300c      	adds	r0, #12
 8017f4a:	60a0      	str	r0, [r4, #8]
 8017f4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017f50:	f7fd fb08 	bl	8015564 <memset>
 8017f54:	4620      	mov	r0, r4
 8017f56:	bd70      	pop	{r4, r5, r6, pc}

08017f58 <__sfp_lock_acquire>:
 8017f58:	4801      	ldr	r0, [pc, #4]	; (8017f60 <__sfp_lock_acquire+0x8>)
 8017f5a:	f000 bc26 	b.w	80187aa <__retarget_lock_acquire_recursive>
 8017f5e:	bf00      	nop
 8017f60:	20041e5c 	.word	0x20041e5c

08017f64 <__sfp_lock_release>:
 8017f64:	4801      	ldr	r0, [pc, #4]	; (8017f6c <__sfp_lock_release+0x8>)
 8017f66:	f000 bc21 	b.w	80187ac <__retarget_lock_release_recursive>
 8017f6a:	bf00      	nop
 8017f6c:	20041e5c 	.word	0x20041e5c

08017f70 <__sinit_lock_acquire>:
 8017f70:	4801      	ldr	r0, [pc, #4]	; (8017f78 <__sinit_lock_acquire+0x8>)
 8017f72:	f000 bc1a 	b.w	80187aa <__retarget_lock_acquire_recursive>
 8017f76:	bf00      	nop
 8017f78:	20041e57 	.word	0x20041e57

08017f7c <__sinit_lock_release>:
 8017f7c:	4801      	ldr	r0, [pc, #4]	; (8017f84 <__sinit_lock_release+0x8>)
 8017f7e:	f000 bc15 	b.w	80187ac <__retarget_lock_release_recursive>
 8017f82:	bf00      	nop
 8017f84:	20041e57 	.word	0x20041e57

08017f88 <__sinit>:
 8017f88:	b510      	push	{r4, lr}
 8017f8a:	4604      	mov	r4, r0
 8017f8c:	f7ff fff0 	bl	8017f70 <__sinit_lock_acquire>
 8017f90:	69a3      	ldr	r3, [r4, #24]
 8017f92:	b11b      	cbz	r3, 8017f9c <__sinit+0x14>
 8017f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f98:	f7ff bff0 	b.w	8017f7c <__sinit_lock_release>
 8017f9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017fa0:	6523      	str	r3, [r4, #80]	; 0x50
 8017fa2:	4b13      	ldr	r3, [pc, #76]	; (8017ff0 <__sinit+0x68>)
 8017fa4:	4a13      	ldr	r2, [pc, #76]	; (8017ff4 <__sinit+0x6c>)
 8017fa6:	681b      	ldr	r3, [r3, #0]
 8017fa8:	62a2      	str	r2, [r4, #40]	; 0x28
 8017faa:	42a3      	cmp	r3, r4
 8017fac:	bf04      	itt	eq
 8017fae:	2301      	moveq	r3, #1
 8017fb0:	61a3      	streq	r3, [r4, #24]
 8017fb2:	4620      	mov	r0, r4
 8017fb4:	f000 f820 	bl	8017ff8 <__sfp>
 8017fb8:	6060      	str	r0, [r4, #4]
 8017fba:	4620      	mov	r0, r4
 8017fbc:	f000 f81c 	bl	8017ff8 <__sfp>
 8017fc0:	60a0      	str	r0, [r4, #8]
 8017fc2:	4620      	mov	r0, r4
 8017fc4:	f000 f818 	bl	8017ff8 <__sfp>
 8017fc8:	2200      	movs	r2, #0
 8017fca:	60e0      	str	r0, [r4, #12]
 8017fcc:	2104      	movs	r1, #4
 8017fce:	6860      	ldr	r0, [r4, #4]
 8017fd0:	f7ff ff82 	bl	8017ed8 <std>
 8017fd4:	68a0      	ldr	r0, [r4, #8]
 8017fd6:	2201      	movs	r2, #1
 8017fd8:	2109      	movs	r1, #9
 8017fda:	f7ff ff7d 	bl	8017ed8 <std>
 8017fde:	68e0      	ldr	r0, [r4, #12]
 8017fe0:	2202      	movs	r2, #2
 8017fe2:	2112      	movs	r1, #18
 8017fe4:	f7ff ff78 	bl	8017ed8 <std>
 8017fe8:	2301      	movs	r3, #1
 8017fea:	61a3      	str	r3, [r4, #24]
 8017fec:	e7d2      	b.n	8017f94 <__sinit+0xc>
 8017fee:	bf00      	nop
 8017ff0:	0801af98 	.word	0x0801af98
 8017ff4:	08017f21 	.word	0x08017f21

08017ff8 <__sfp>:
 8017ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ffa:	4607      	mov	r7, r0
 8017ffc:	f7ff ffac 	bl	8017f58 <__sfp_lock_acquire>
 8018000:	4b1e      	ldr	r3, [pc, #120]	; (801807c <__sfp+0x84>)
 8018002:	681e      	ldr	r6, [r3, #0]
 8018004:	69b3      	ldr	r3, [r6, #24]
 8018006:	b913      	cbnz	r3, 801800e <__sfp+0x16>
 8018008:	4630      	mov	r0, r6
 801800a:	f7ff ffbd 	bl	8017f88 <__sinit>
 801800e:	3648      	adds	r6, #72	; 0x48
 8018010:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018014:	3b01      	subs	r3, #1
 8018016:	d503      	bpl.n	8018020 <__sfp+0x28>
 8018018:	6833      	ldr	r3, [r6, #0]
 801801a:	b30b      	cbz	r3, 8018060 <__sfp+0x68>
 801801c:	6836      	ldr	r6, [r6, #0]
 801801e:	e7f7      	b.n	8018010 <__sfp+0x18>
 8018020:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018024:	b9d5      	cbnz	r5, 801805c <__sfp+0x64>
 8018026:	4b16      	ldr	r3, [pc, #88]	; (8018080 <__sfp+0x88>)
 8018028:	60e3      	str	r3, [r4, #12]
 801802a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801802e:	6665      	str	r5, [r4, #100]	; 0x64
 8018030:	f000 fbba 	bl	80187a8 <__retarget_lock_init_recursive>
 8018034:	f7ff ff96 	bl	8017f64 <__sfp_lock_release>
 8018038:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801803c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018040:	6025      	str	r5, [r4, #0]
 8018042:	61a5      	str	r5, [r4, #24]
 8018044:	2208      	movs	r2, #8
 8018046:	4629      	mov	r1, r5
 8018048:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801804c:	f7fd fa8a 	bl	8015564 <memset>
 8018050:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018054:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018058:	4620      	mov	r0, r4
 801805a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801805c:	3468      	adds	r4, #104	; 0x68
 801805e:	e7d9      	b.n	8018014 <__sfp+0x1c>
 8018060:	2104      	movs	r1, #4
 8018062:	4638      	mov	r0, r7
 8018064:	f7ff ff62 	bl	8017f2c <__sfmoreglue>
 8018068:	4604      	mov	r4, r0
 801806a:	6030      	str	r0, [r6, #0]
 801806c:	2800      	cmp	r0, #0
 801806e:	d1d5      	bne.n	801801c <__sfp+0x24>
 8018070:	f7ff ff78 	bl	8017f64 <__sfp_lock_release>
 8018074:	230c      	movs	r3, #12
 8018076:	603b      	str	r3, [r7, #0]
 8018078:	e7ee      	b.n	8018058 <__sfp+0x60>
 801807a:	bf00      	nop
 801807c:	0801af98 	.word	0x0801af98
 8018080:	ffff0001 	.word	0xffff0001

08018084 <_fwalk_reent>:
 8018084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018088:	4606      	mov	r6, r0
 801808a:	4688      	mov	r8, r1
 801808c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018090:	2700      	movs	r7, #0
 8018092:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018096:	f1b9 0901 	subs.w	r9, r9, #1
 801809a:	d505      	bpl.n	80180a8 <_fwalk_reent+0x24>
 801809c:	6824      	ldr	r4, [r4, #0]
 801809e:	2c00      	cmp	r4, #0
 80180a0:	d1f7      	bne.n	8018092 <_fwalk_reent+0xe>
 80180a2:	4638      	mov	r0, r7
 80180a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180a8:	89ab      	ldrh	r3, [r5, #12]
 80180aa:	2b01      	cmp	r3, #1
 80180ac:	d907      	bls.n	80180be <_fwalk_reent+0x3a>
 80180ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80180b2:	3301      	adds	r3, #1
 80180b4:	d003      	beq.n	80180be <_fwalk_reent+0x3a>
 80180b6:	4629      	mov	r1, r5
 80180b8:	4630      	mov	r0, r6
 80180ba:	47c0      	blx	r8
 80180bc:	4307      	orrs	r7, r0
 80180be:	3568      	adds	r5, #104	; 0x68
 80180c0:	e7e9      	b.n	8018096 <_fwalk_reent+0x12>

080180c2 <rshift>:
 80180c2:	6903      	ldr	r3, [r0, #16]
 80180c4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80180c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80180cc:	ea4f 1261 	mov.w	r2, r1, asr #5
 80180d0:	f100 0414 	add.w	r4, r0, #20
 80180d4:	dd45      	ble.n	8018162 <rshift+0xa0>
 80180d6:	f011 011f 	ands.w	r1, r1, #31
 80180da:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80180de:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80180e2:	d10c      	bne.n	80180fe <rshift+0x3c>
 80180e4:	f100 0710 	add.w	r7, r0, #16
 80180e8:	4629      	mov	r1, r5
 80180ea:	42b1      	cmp	r1, r6
 80180ec:	d334      	bcc.n	8018158 <rshift+0x96>
 80180ee:	1a9b      	subs	r3, r3, r2
 80180f0:	009b      	lsls	r3, r3, #2
 80180f2:	1eea      	subs	r2, r5, #3
 80180f4:	4296      	cmp	r6, r2
 80180f6:	bf38      	it	cc
 80180f8:	2300      	movcc	r3, #0
 80180fa:	4423      	add	r3, r4
 80180fc:	e015      	b.n	801812a <rshift+0x68>
 80180fe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018102:	f1c1 0820 	rsb	r8, r1, #32
 8018106:	40cf      	lsrs	r7, r1
 8018108:	f105 0e04 	add.w	lr, r5, #4
 801810c:	46a1      	mov	r9, r4
 801810e:	4576      	cmp	r6, lr
 8018110:	46f4      	mov	ip, lr
 8018112:	d815      	bhi.n	8018140 <rshift+0x7e>
 8018114:	1a9b      	subs	r3, r3, r2
 8018116:	009a      	lsls	r2, r3, #2
 8018118:	3a04      	subs	r2, #4
 801811a:	3501      	adds	r5, #1
 801811c:	42ae      	cmp	r6, r5
 801811e:	bf38      	it	cc
 8018120:	2200      	movcc	r2, #0
 8018122:	18a3      	adds	r3, r4, r2
 8018124:	50a7      	str	r7, [r4, r2]
 8018126:	b107      	cbz	r7, 801812a <rshift+0x68>
 8018128:	3304      	adds	r3, #4
 801812a:	1b1a      	subs	r2, r3, r4
 801812c:	42a3      	cmp	r3, r4
 801812e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018132:	bf08      	it	eq
 8018134:	2300      	moveq	r3, #0
 8018136:	6102      	str	r2, [r0, #16]
 8018138:	bf08      	it	eq
 801813a:	6143      	streq	r3, [r0, #20]
 801813c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018140:	f8dc c000 	ldr.w	ip, [ip]
 8018144:	fa0c fc08 	lsl.w	ip, ip, r8
 8018148:	ea4c 0707 	orr.w	r7, ip, r7
 801814c:	f849 7b04 	str.w	r7, [r9], #4
 8018150:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018154:	40cf      	lsrs	r7, r1
 8018156:	e7da      	b.n	801810e <rshift+0x4c>
 8018158:	f851 cb04 	ldr.w	ip, [r1], #4
 801815c:	f847 cf04 	str.w	ip, [r7, #4]!
 8018160:	e7c3      	b.n	80180ea <rshift+0x28>
 8018162:	4623      	mov	r3, r4
 8018164:	e7e1      	b.n	801812a <rshift+0x68>

08018166 <__hexdig_fun>:
 8018166:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801816a:	2b09      	cmp	r3, #9
 801816c:	d802      	bhi.n	8018174 <__hexdig_fun+0xe>
 801816e:	3820      	subs	r0, #32
 8018170:	b2c0      	uxtb	r0, r0
 8018172:	4770      	bx	lr
 8018174:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018178:	2b05      	cmp	r3, #5
 801817a:	d801      	bhi.n	8018180 <__hexdig_fun+0x1a>
 801817c:	3847      	subs	r0, #71	; 0x47
 801817e:	e7f7      	b.n	8018170 <__hexdig_fun+0xa>
 8018180:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018184:	2b05      	cmp	r3, #5
 8018186:	d801      	bhi.n	801818c <__hexdig_fun+0x26>
 8018188:	3827      	subs	r0, #39	; 0x27
 801818a:	e7f1      	b.n	8018170 <__hexdig_fun+0xa>
 801818c:	2000      	movs	r0, #0
 801818e:	4770      	bx	lr

08018190 <__gethex>:
 8018190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018194:	ed2d 8b02 	vpush	{d8}
 8018198:	b089      	sub	sp, #36	; 0x24
 801819a:	ee08 0a10 	vmov	s16, r0
 801819e:	9304      	str	r3, [sp, #16]
 80181a0:	4bbc      	ldr	r3, [pc, #752]	; (8018494 <__gethex+0x304>)
 80181a2:	681b      	ldr	r3, [r3, #0]
 80181a4:	9301      	str	r3, [sp, #4]
 80181a6:	4618      	mov	r0, r3
 80181a8:	468b      	mov	fp, r1
 80181aa:	4690      	mov	r8, r2
 80181ac:	f7e8 f828 	bl	8000200 <strlen>
 80181b0:	9b01      	ldr	r3, [sp, #4]
 80181b2:	f8db 2000 	ldr.w	r2, [fp]
 80181b6:	4403      	add	r3, r0
 80181b8:	4682      	mov	sl, r0
 80181ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80181be:	9305      	str	r3, [sp, #20]
 80181c0:	1c93      	adds	r3, r2, #2
 80181c2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80181c6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80181ca:	32fe      	adds	r2, #254	; 0xfe
 80181cc:	18d1      	adds	r1, r2, r3
 80181ce:	461f      	mov	r7, r3
 80181d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80181d4:	9100      	str	r1, [sp, #0]
 80181d6:	2830      	cmp	r0, #48	; 0x30
 80181d8:	d0f8      	beq.n	80181cc <__gethex+0x3c>
 80181da:	f7ff ffc4 	bl	8018166 <__hexdig_fun>
 80181de:	4604      	mov	r4, r0
 80181e0:	2800      	cmp	r0, #0
 80181e2:	d13a      	bne.n	801825a <__gethex+0xca>
 80181e4:	9901      	ldr	r1, [sp, #4]
 80181e6:	4652      	mov	r2, sl
 80181e8:	4638      	mov	r0, r7
 80181ea:	f001 febb 	bl	8019f64 <strncmp>
 80181ee:	4605      	mov	r5, r0
 80181f0:	2800      	cmp	r0, #0
 80181f2:	d168      	bne.n	80182c6 <__gethex+0x136>
 80181f4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80181f8:	eb07 060a 	add.w	r6, r7, sl
 80181fc:	f7ff ffb3 	bl	8018166 <__hexdig_fun>
 8018200:	2800      	cmp	r0, #0
 8018202:	d062      	beq.n	80182ca <__gethex+0x13a>
 8018204:	4633      	mov	r3, r6
 8018206:	7818      	ldrb	r0, [r3, #0]
 8018208:	2830      	cmp	r0, #48	; 0x30
 801820a:	461f      	mov	r7, r3
 801820c:	f103 0301 	add.w	r3, r3, #1
 8018210:	d0f9      	beq.n	8018206 <__gethex+0x76>
 8018212:	f7ff ffa8 	bl	8018166 <__hexdig_fun>
 8018216:	2301      	movs	r3, #1
 8018218:	fab0 f480 	clz	r4, r0
 801821c:	0964      	lsrs	r4, r4, #5
 801821e:	4635      	mov	r5, r6
 8018220:	9300      	str	r3, [sp, #0]
 8018222:	463a      	mov	r2, r7
 8018224:	4616      	mov	r6, r2
 8018226:	3201      	adds	r2, #1
 8018228:	7830      	ldrb	r0, [r6, #0]
 801822a:	f7ff ff9c 	bl	8018166 <__hexdig_fun>
 801822e:	2800      	cmp	r0, #0
 8018230:	d1f8      	bne.n	8018224 <__gethex+0x94>
 8018232:	9901      	ldr	r1, [sp, #4]
 8018234:	4652      	mov	r2, sl
 8018236:	4630      	mov	r0, r6
 8018238:	f001 fe94 	bl	8019f64 <strncmp>
 801823c:	b980      	cbnz	r0, 8018260 <__gethex+0xd0>
 801823e:	b94d      	cbnz	r5, 8018254 <__gethex+0xc4>
 8018240:	eb06 050a 	add.w	r5, r6, sl
 8018244:	462a      	mov	r2, r5
 8018246:	4616      	mov	r6, r2
 8018248:	3201      	adds	r2, #1
 801824a:	7830      	ldrb	r0, [r6, #0]
 801824c:	f7ff ff8b 	bl	8018166 <__hexdig_fun>
 8018250:	2800      	cmp	r0, #0
 8018252:	d1f8      	bne.n	8018246 <__gethex+0xb6>
 8018254:	1bad      	subs	r5, r5, r6
 8018256:	00ad      	lsls	r5, r5, #2
 8018258:	e004      	b.n	8018264 <__gethex+0xd4>
 801825a:	2400      	movs	r4, #0
 801825c:	4625      	mov	r5, r4
 801825e:	e7e0      	b.n	8018222 <__gethex+0x92>
 8018260:	2d00      	cmp	r5, #0
 8018262:	d1f7      	bne.n	8018254 <__gethex+0xc4>
 8018264:	7833      	ldrb	r3, [r6, #0]
 8018266:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801826a:	2b50      	cmp	r3, #80	; 0x50
 801826c:	d13b      	bne.n	80182e6 <__gethex+0x156>
 801826e:	7873      	ldrb	r3, [r6, #1]
 8018270:	2b2b      	cmp	r3, #43	; 0x2b
 8018272:	d02c      	beq.n	80182ce <__gethex+0x13e>
 8018274:	2b2d      	cmp	r3, #45	; 0x2d
 8018276:	d02e      	beq.n	80182d6 <__gethex+0x146>
 8018278:	1c71      	adds	r1, r6, #1
 801827a:	f04f 0900 	mov.w	r9, #0
 801827e:	7808      	ldrb	r0, [r1, #0]
 8018280:	f7ff ff71 	bl	8018166 <__hexdig_fun>
 8018284:	1e43      	subs	r3, r0, #1
 8018286:	b2db      	uxtb	r3, r3
 8018288:	2b18      	cmp	r3, #24
 801828a:	d82c      	bhi.n	80182e6 <__gethex+0x156>
 801828c:	f1a0 0210 	sub.w	r2, r0, #16
 8018290:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018294:	f7ff ff67 	bl	8018166 <__hexdig_fun>
 8018298:	1e43      	subs	r3, r0, #1
 801829a:	b2db      	uxtb	r3, r3
 801829c:	2b18      	cmp	r3, #24
 801829e:	d91d      	bls.n	80182dc <__gethex+0x14c>
 80182a0:	f1b9 0f00 	cmp.w	r9, #0
 80182a4:	d000      	beq.n	80182a8 <__gethex+0x118>
 80182a6:	4252      	negs	r2, r2
 80182a8:	4415      	add	r5, r2
 80182aa:	f8cb 1000 	str.w	r1, [fp]
 80182ae:	b1e4      	cbz	r4, 80182ea <__gethex+0x15a>
 80182b0:	9b00      	ldr	r3, [sp, #0]
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	bf14      	ite	ne
 80182b6:	2700      	movne	r7, #0
 80182b8:	2706      	moveq	r7, #6
 80182ba:	4638      	mov	r0, r7
 80182bc:	b009      	add	sp, #36	; 0x24
 80182be:	ecbd 8b02 	vpop	{d8}
 80182c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182c6:	463e      	mov	r6, r7
 80182c8:	4625      	mov	r5, r4
 80182ca:	2401      	movs	r4, #1
 80182cc:	e7ca      	b.n	8018264 <__gethex+0xd4>
 80182ce:	f04f 0900 	mov.w	r9, #0
 80182d2:	1cb1      	adds	r1, r6, #2
 80182d4:	e7d3      	b.n	801827e <__gethex+0xee>
 80182d6:	f04f 0901 	mov.w	r9, #1
 80182da:	e7fa      	b.n	80182d2 <__gethex+0x142>
 80182dc:	230a      	movs	r3, #10
 80182de:	fb03 0202 	mla	r2, r3, r2, r0
 80182e2:	3a10      	subs	r2, #16
 80182e4:	e7d4      	b.n	8018290 <__gethex+0x100>
 80182e6:	4631      	mov	r1, r6
 80182e8:	e7df      	b.n	80182aa <__gethex+0x11a>
 80182ea:	1bf3      	subs	r3, r6, r7
 80182ec:	3b01      	subs	r3, #1
 80182ee:	4621      	mov	r1, r4
 80182f0:	2b07      	cmp	r3, #7
 80182f2:	dc0b      	bgt.n	801830c <__gethex+0x17c>
 80182f4:	ee18 0a10 	vmov	r0, s16
 80182f8:	f000 fa86 	bl	8018808 <_Balloc>
 80182fc:	4604      	mov	r4, r0
 80182fe:	b940      	cbnz	r0, 8018312 <__gethex+0x182>
 8018300:	4b65      	ldr	r3, [pc, #404]	; (8018498 <__gethex+0x308>)
 8018302:	4602      	mov	r2, r0
 8018304:	21de      	movs	r1, #222	; 0xde
 8018306:	4865      	ldr	r0, [pc, #404]	; (801849c <__gethex+0x30c>)
 8018308:	f001 ffc4 	bl	801a294 <__assert_func>
 801830c:	3101      	adds	r1, #1
 801830e:	105b      	asrs	r3, r3, #1
 8018310:	e7ee      	b.n	80182f0 <__gethex+0x160>
 8018312:	f100 0914 	add.w	r9, r0, #20
 8018316:	f04f 0b00 	mov.w	fp, #0
 801831a:	f1ca 0301 	rsb	r3, sl, #1
 801831e:	f8cd 9008 	str.w	r9, [sp, #8]
 8018322:	f8cd b000 	str.w	fp, [sp]
 8018326:	9306      	str	r3, [sp, #24]
 8018328:	42b7      	cmp	r7, r6
 801832a:	d340      	bcc.n	80183ae <__gethex+0x21e>
 801832c:	9802      	ldr	r0, [sp, #8]
 801832e:	9b00      	ldr	r3, [sp, #0]
 8018330:	f840 3b04 	str.w	r3, [r0], #4
 8018334:	eba0 0009 	sub.w	r0, r0, r9
 8018338:	1080      	asrs	r0, r0, #2
 801833a:	0146      	lsls	r6, r0, #5
 801833c:	6120      	str	r0, [r4, #16]
 801833e:	4618      	mov	r0, r3
 8018340:	f000 fb58 	bl	80189f4 <__hi0bits>
 8018344:	1a30      	subs	r0, r6, r0
 8018346:	f8d8 6000 	ldr.w	r6, [r8]
 801834a:	42b0      	cmp	r0, r6
 801834c:	dd63      	ble.n	8018416 <__gethex+0x286>
 801834e:	1b87      	subs	r7, r0, r6
 8018350:	4639      	mov	r1, r7
 8018352:	4620      	mov	r0, r4
 8018354:	f000 fef2 	bl	801913c <__any_on>
 8018358:	4682      	mov	sl, r0
 801835a:	b1a8      	cbz	r0, 8018388 <__gethex+0x1f8>
 801835c:	1e7b      	subs	r3, r7, #1
 801835e:	1159      	asrs	r1, r3, #5
 8018360:	f003 021f 	and.w	r2, r3, #31
 8018364:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018368:	f04f 0a01 	mov.w	sl, #1
 801836c:	fa0a f202 	lsl.w	r2, sl, r2
 8018370:	420a      	tst	r2, r1
 8018372:	d009      	beq.n	8018388 <__gethex+0x1f8>
 8018374:	4553      	cmp	r3, sl
 8018376:	dd05      	ble.n	8018384 <__gethex+0x1f4>
 8018378:	1eb9      	subs	r1, r7, #2
 801837a:	4620      	mov	r0, r4
 801837c:	f000 fede 	bl	801913c <__any_on>
 8018380:	2800      	cmp	r0, #0
 8018382:	d145      	bne.n	8018410 <__gethex+0x280>
 8018384:	f04f 0a02 	mov.w	sl, #2
 8018388:	4639      	mov	r1, r7
 801838a:	4620      	mov	r0, r4
 801838c:	f7ff fe99 	bl	80180c2 <rshift>
 8018390:	443d      	add	r5, r7
 8018392:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018396:	42ab      	cmp	r3, r5
 8018398:	da4c      	bge.n	8018434 <__gethex+0x2a4>
 801839a:	ee18 0a10 	vmov	r0, s16
 801839e:	4621      	mov	r1, r4
 80183a0:	f000 fa72 	bl	8018888 <_Bfree>
 80183a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80183a6:	2300      	movs	r3, #0
 80183a8:	6013      	str	r3, [r2, #0]
 80183aa:	27a3      	movs	r7, #163	; 0xa3
 80183ac:	e785      	b.n	80182ba <__gethex+0x12a>
 80183ae:	1e73      	subs	r3, r6, #1
 80183b0:	9a05      	ldr	r2, [sp, #20]
 80183b2:	9303      	str	r3, [sp, #12]
 80183b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80183b8:	4293      	cmp	r3, r2
 80183ba:	d019      	beq.n	80183f0 <__gethex+0x260>
 80183bc:	f1bb 0f20 	cmp.w	fp, #32
 80183c0:	d107      	bne.n	80183d2 <__gethex+0x242>
 80183c2:	9b02      	ldr	r3, [sp, #8]
 80183c4:	9a00      	ldr	r2, [sp, #0]
 80183c6:	f843 2b04 	str.w	r2, [r3], #4
 80183ca:	9302      	str	r3, [sp, #8]
 80183cc:	2300      	movs	r3, #0
 80183ce:	9300      	str	r3, [sp, #0]
 80183d0:	469b      	mov	fp, r3
 80183d2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80183d6:	f7ff fec6 	bl	8018166 <__hexdig_fun>
 80183da:	9b00      	ldr	r3, [sp, #0]
 80183dc:	f000 000f 	and.w	r0, r0, #15
 80183e0:	fa00 f00b 	lsl.w	r0, r0, fp
 80183e4:	4303      	orrs	r3, r0
 80183e6:	9300      	str	r3, [sp, #0]
 80183e8:	f10b 0b04 	add.w	fp, fp, #4
 80183ec:	9b03      	ldr	r3, [sp, #12]
 80183ee:	e00d      	b.n	801840c <__gethex+0x27c>
 80183f0:	9b03      	ldr	r3, [sp, #12]
 80183f2:	9a06      	ldr	r2, [sp, #24]
 80183f4:	4413      	add	r3, r2
 80183f6:	42bb      	cmp	r3, r7
 80183f8:	d3e0      	bcc.n	80183bc <__gethex+0x22c>
 80183fa:	4618      	mov	r0, r3
 80183fc:	9901      	ldr	r1, [sp, #4]
 80183fe:	9307      	str	r3, [sp, #28]
 8018400:	4652      	mov	r2, sl
 8018402:	f001 fdaf 	bl	8019f64 <strncmp>
 8018406:	9b07      	ldr	r3, [sp, #28]
 8018408:	2800      	cmp	r0, #0
 801840a:	d1d7      	bne.n	80183bc <__gethex+0x22c>
 801840c:	461e      	mov	r6, r3
 801840e:	e78b      	b.n	8018328 <__gethex+0x198>
 8018410:	f04f 0a03 	mov.w	sl, #3
 8018414:	e7b8      	b.n	8018388 <__gethex+0x1f8>
 8018416:	da0a      	bge.n	801842e <__gethex+0x29e>
 8018418:	1a37      	subs	r7, r6, r0
 801841a:	4621      	mov	r1, r4
 801841c:	ee18 0a10 	vmov	r0, s16
 8018420:	463a      	mov	r2, r7
 8018422:	f000 fc4d 	bl	8018cc0 <__lshift>
 8018426:	1bed      	subs	r5, r5, r7
 8018428:	4604      	mov	r4, r0
 801842a:	f100 0914 	add.w	r9, r0, #20
 801842e:	f04f 0a00 	mov.w	sl, #0
 8018432:	e7ae      	b.n	8018392 <__gethex+0x202>
 8018434:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018438:	42a8      	cmp	r0, r5
 801843a:	dd72      	ble.n	8018522 <__gethex+0x392>
 801843c:	1b45      	subs	r5, r0, r5
 801843e:	42ae      	cmp	r6, r5
 8018440:	dc36      	bgt.n	80184b0 <__gethex+0x320>
 8018442:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018446:	2b02      	cmp	r3, #2
 8018448:	d02a      	beq.n	80184a0 <__gethex+0x310>
 801844a:	2b03      	cmp	r3, #3
 801844c:	d02c      	beq.n	80184a8 <__gethex+0x318>
 801844e:	2b01      	cmp	r3, #1
 8018450:	d115      	bne.n	801847e <__gethex+0x2ee>
 8018452:	42ae      	cmp	r6, r5
 8018454:	d113      	bne.n	801847e <__gethex+0x2ee>
 8018456:	2e01      	cmp	r6, #1
 8018458:	d10b      	bne.n	8018472 <__gethex+0x2e2>
 801845a:	9a04      	ldr	r2, [sp, #16]
 801845c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018460:	6013      	str	r3, [r2, #0]
 8018462:	2301      	movs	r3, #1
 8018464:	6123      	str	r3, [r4, #16]
 8018466:	f8c9 3000 	str.w	r3, [r9]
 801846a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801846c:	2762      	movs	r7, #98	; 0x62
 801846e:	601c      	str	r4, [r3, #0]
 8018470:	e723      	b.n	80182ba <__gethex+0x12a>
 8018472:	1e71      	subs	r1, r6, #1
 8018474:	4620      	mov	r0, r4
 8018476:	f000 fe61 	bl	801913c <__any_on>
 801847a:	2800      	cmp	r0, #0
 801847c:	d1ed      	bne.n	801845a <__gethex+0x2ca>
 801847e:	ee18 0a10 	vmov	r0, s16
 8018482:	4621      	mov	r1, r4
 8018484:	f000 fa00 	bl	8018888 <_Bfree>
 8018488:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801848a:	2300      	movs	r3, #0
 801848c:	6013      	str	r3, [r2, #0]
 801848e:	2750      	movs	r7, #80	; 0x50
 8018490:	e713      	b.n	80182ba <__gethex+0x12a>
 8018492:	bf00      	nop
 8018494:	0801b28c 	.word	0x0801b28c
 8018498:	0801b1ac 	.word	0x0801b1ac
 801849c:	0801b220 	.word	0x0801b220
 80184a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d1eb      	bne.n	801847e <__gethex+0x2ee>
 80184a6:	e7d8      	b.n	801845a <__gethex+0x2ca>
 80184a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d1d5      	bne.n	801845a <__gethex+0x2ca>
 80184ae:	e7e6      	b.n	801847e <__gethex+0x2ee>
 80184b0:	1e6f      	subs	r7, r5, #1
 80184b2:	f1ba 0f00 	cmp.w	sl, #0
 80184b6:	d131      	bne.n	801851c <__gethex+0x38c>
 80184b8:	b127      	cbz	r7, 80184c4 <__gethex+0x334>
 80184ba:	4639      	mov	r1, r7
 80184bc:	4620      	mov	r0, r4
 80184be:	f000 fe3d 	bl	801913c <__any_on>
 80184c2:	4682      	mov	sl, r0
 80184c4:	117b      	asrs	r3, r7, #5
 80184c6:	2101      	movs	r1, #1
 80184c8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80184cc:	f007 071f 	and.w	r7, r7, #31
 80184d0:	fa01 f707 	lsl.w	r7, r1, r7
 80184d4:	421f      	tst	r7, r3
 80184d6:	4629      	mov	r1, r5
 80184d8:	4620      	mov	r0, r4
 80184da:	bf18      	it	ne
 80184dc:	f04a 0a02 	orrne.w	sl, sl, #2
 80184e0:	1b76      	subs	r6, r6, r5
 80184e2:	f7ff fdee 	bl	80180c2 <rshift>
 80184e6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80184ea:	2702      	movs	r7, #2
 80184ec:	f1ba 0f00 	cmp.w	sl, #0
 80184f0:	d048      	beq.n	8018584 <__gethex+0x3f4>
 80184f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80184f6:	2b02      	cmp	r3, #2
 80184f8:	d015      	beq.n	8018526 <__gethex+0x396>
 80184fa:	2b03      	cmp	r3, #3
 80184fc:	d017      	beq.n	801852e <__gethex+0x39e>
 80184fe:	2b01      	cmp	r3, #1
 8018500:	d109      	bne.n	8018516 <__gethex+0x386>
 8018502:	f01a 0f02 	tst.w	sl, #2
 8018506:	d006      	beq.n	8018516 <__gethex+0x386>
 8018508:	f8d9 0000 	ldr.w	r0, [r9]
 801850c:	ea4a 0a00 	orr.w	sl, sl, r0
 8018510:	f01a 0f01 	tst.w	sl, #1
 8018514:	d10e      	bne.n	8018534 <__gethex+0x3a4>
 8018516:	f047 0710 	orr.w	r7, r7, #16
 801851a:	e033      	b.n	8018584 <__gethex+0x3f4>
 801851c:	f04f 0a01 	mov.w	sl, #1
 8018520:	e7d0      	b.n	80184c4 <__gethex+0x334>
 8018522:	2701      	movs	r7, #1
 8018524:	e7e2      	b.n	80184ec <__gethex+0x35c>
 8018526:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018528:	f1c3 0301 	rsb	r3, r3, #1
 801852c:	9315      	str	r3, [sp, #84]	; 0x54
 801852e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018530:	2b00      	cmp	r3, #0
 8018532:	d0f0      	beq.n	8018516 <__gethex+0x386>
 8018534:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018538:	f104 0314 	add.w	r3, r4, #20
 801853c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018540:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018544:	f04f 0c00 	mov.w	ip, #0
 8018548:	4618      	mov	r0, r3
 801854a:	f853 2b04 	ldr.w	r2, [r3], #4
 801854e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018552:	d01c      	beq.n	801858e <__gethex+0x3fe>
 8018554:	3201      	adds	r2, #1
 8018556:	6002      	str	r2, [r0, #0]
 8018558:	2f02      	cmp	r7, #2
 801855a:	f104 0314 	add.w	r3, r4, #20
 801855e:	d13f      	bne.n	80185e0 <__gethex+0x450>
 8018560:	f8d8 2000 	ldr.w	r2, [r8]
 8018564:	3a01      	subs	r2, #1
 8018566:	42b2      	cmp	r2, r6
 8018568:	d10a      	bne.n	8018580 <__gethex+0x3f0>
 801856a:	1171      	asrs	r1, r6, #5
 801856c:	2201      	movs	r2, #1
 801856e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018572:	f006 061f 	and.w	r6, r6, #31
 8018576:	fa02 f606 	lsl.w	r6, r2, r6
 801857a:	421e      	tst	r6, r3
 801857c:	bf18      	it	ne
 801857e:	4617      	movne	r7, r2
 8018580:	f047 0720 	orr.w	r7, r7, #32
 8018584:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018586:	601c      	str	r4, [r3, #0]
 8018588:	9b04      	ldr	r3, [sp, #16]
 801858a:	601d      	str	r5, [r3, #0]
 801858c:	e695      	b.n	80182ba <__gethex+0x12a>
 801858e:	4299      	cmp	r1, r3
 8018590:	f843 cc04 	str.w	ip, [r3, #-4]
 8018594:	d8d8      	bhi.n	8018548 <__gethex+0x3b8>
 8018596:	68a3      	ldr	r3, [r4, #8]
 8018598:	459b      	cmp	fp, r3
 801859a:	db19      	blt.n	80185d0 <__gethex+0x440>
 801859c:	6861      	ldr	r1, [r4, #4]
 801859e:	ee18 0a10 	vmov	r0, s16
 80185a2:	3101      	adds	r1, #1
 80185a4:	f000 f930 	bl	8018808 <_Balloc>
 80185a8:	4681      	mov	r9, r0
 80185aa:	b918      	cbnz	r0, 80185b4 <__gethex+0x424>
 80185ac:	4b1a      	ldr	r3, [pc, #104]	; (8018618 <__gethex+0x488>)
 80185ae:	4602      	mov	r2, r0
 80185b0:	2184      	movs	r1, #132	; 0x84
 80185b2:	e6a8      	b.n	8018306 <__gethex+0x176>
 80185b4:	6922      	ldr	r2, [r4, #16]
 80185b6:	3202      	adds	r2, #2
 80185b8:	f104 010c 	add.w	r1, r4, #12
 80185bc:	0092      	lsls	r2, r2, #2
 80185be:	300c      	adds	r0, #12
 80185c0:	f7fc ffc2 	bl	8015548 <memcpy>
 80185c4:	4621      	mov	r1, r4
 80185c6:	ee18 0a10 	vmov	r0, s16
 80185ca:	f000 f95d 	bl	8018888 <_Bfree>
 80185ce:	464c      	mov	r4, r9
 80185d0:	6923      	ldr	r3, [r4, #16]
 80185d2:	1c5a      	adds	r2, r3, #1
 80185d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80185d8:	6122      	str	r2, [r4, #16]
 80185da:	2201      	movs	r2, #1
 80185dc:	615a      	str	r2, [r3, #20]
 80185de:	e7bb      	b.n	8018558 <__gethex+0x3c8>
 80185e0:	6922      	ldr	r2, [r4, #16]
 80185e2:	455a      	cmp	r2, fp
 80185e4:	dd0b      	ble.n	80185fe <__gethex+0x46e>
 80185e6:	2101      	movs	r1, #1
 80185e8:	4620      	mov	r0, r4
 80185ea:	f7ff fd6a 	bl	80180c2 <rshift>
 80185ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80185f2:	3501      	adds	r5, #1
 80185f4:	42ab      	cmp	r3, r5
 80185f6:	f6ff aed0 	blt.w	801839a <__gethex+0x20a>
 80185fa:	2701      	movs	r7, #1
 80185fc:	e7c0      	b.n	8018580 <__gethex+0x3f0>
 80185fe:	f016 061f 	ands.w	r6, r6, #31
 8018602:	d0fa      	beq.n	80185fa <__gethex+0x46a>
 8018604:	449a      	add	sl, r3
 8018606:	f1c6 0620 	rsb	r6, r6, #32
 801860a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801860e:	f000 f9f1 	bl	80189f4 <__hi0bits>
 8018612:	42b0      	cmp	r0, r6
 8018614:	dbe7      	blt.n	80185e6 <__gethex+0x456>
 8018616:	e7f0      	b.n	80185fa <__gethex+0x46a>
 8018618:	0801b1ac 	.word	0x0801b1ac

0801861c <L_shift>:
 801861c:	f1c2 0208 	rsb	r2, r2, #8
 8018620:	0092      	lsls	r2, r2, #2
 8018622:	b570      	push	{r4, r5, r6, lr}
 8018624:	f1c2 0620 	rsb	r6, r2, #32
 8018628:	6843      	ldr	r3, [r0, #4]
 801862a:	6804      	ldr	r4, [r0, #0]
 801862c:	fa03 f506 	lsl.w	r5, r3, r6
 8018630:	432c      	orrs	r4, r5
 8018632:	40d3      	lsrs	r3, r2
 8018634:	6004      	str	r4, [r0, #0]
 8018636:	f840 3f04 	str.w	r3, [r0, #4]!
 801863a:	4288      	cmp	r0, r1
 801863c:	d3f4      	bcc.n	8018628 <L_shift+0xc>
 801863e:	bd70      	pop	{r4, r5, r6, pc}

08018640 <__match>:
 8018640:	b530      	push	{r4, r5, lr}
 8018642:	6803      	ldr	r3, [r0, #0]
 8018644:	3301      	adds	r3, #1
 8018646:	f811 4b01 	ldrb.w	r4, [r1], #1
 801864a:	b914      	cbnz	r4, 8018652 <__match+0x12>
 801864c:	6003      	str	r3, [r0, #0]
 801864e:	2001      	movs	r0, #1
 8018650:	bd30      	pop	{r4, r5, pc}
 8018652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018656:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801865a:	2d19      	cmp	r5, #25
 801865c:	bf98      	it	ls
 801865e:	3220      	addls	r2, #32
 8018660:	42a2      	cmp	r2, r4
 8018662:	d0f0      	beq.n	8018646 <__match+0x6>
 8018664:	2000      	movs	r0, #0
 8018666:	e7f3      	b.n	8018650 <__match+0x10>

08018668 <__hexnan>:
 8018668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801866c:	680b      	ldr	r3, [r1, #0]
 801866e:	6801      	ldr	r1, [r0, #0]
 8018670:	115e      	asrs	r6, r3, #5
 8018672:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018676:	f013 031f 	ands.w	r3, r3, #31
 801867a:	b087      	sub	sp, #28
 801867c:	bf18      	it	ne
 801867e:	3604      	addne	r6, #4
 8018680:	2500      	movs	r5, #0
 8018682:	1f37      	subs	r7, r6, #4
 8018684:	4682      	mov	sl, r0
 8018686:	4690      	mov	r8, r2
 8018688:	9301      	str	r3, [sp, #4]
 801868a:	f846 5c04 	str.w	r5, [r6, #-4]
 801868e:	46b9      	mov	r9, r7
 8018690:	463c      	mov	r4, r7
 8018692:	9502      	str	r5, [sp, #8]
 8018694:	46ab      	mov	fp, r5
 8018696:	784a      	ldrb	r2, [r1, #1]
 8018698:	1c4b      	adds	r3, r1, #1
 801869a:	9303      	str	r3, [sp, #12]
 801869c:	b342      	cbz	r2, 80186f0 <__hexnan+0x88>
 801869e:	4610      	mov	r0, r2
 80186a0:	9105      	str	r1, [sp, #20]
 80186a2:	9204      	str	r2, [sp, #16]
 80186a4:	f7ff fd5f 	bl	8018166 <__hexdig_fun>
 80186a8:	2800      	cmp	r0, #0
 80186aa:	d14f      	bne.n	801874c <__hexnan+0xe4>
 80186ac:	9a04      	ldr	r2, [sp, #16]
 80186ae:	9905      	ldr	r1, [sp, #20]
 80186b0:	2a20      	cmp	r2, #32
 80186b2:	d818      	bhi.n	80186e6 <__hexnan+0x7e>
 80186b4:	9b02      	ldr	r3, [sp, #8]
 80186b6:	459b      	cmp	fp, r3
 80186b8:	dd13      	ble.n	80186e2 <__hexnan+0x7a>
 80186ba:	454c      	cmp	r4, r9
 80186bc:	d206      	bcs.n	80186cc <__hexnan+0x64>
 80186be:	2d07      	cmp	r5, #7
 80186c0:	dc04      	bgt.n	80186cc <__hexnan+0x64>
 80186c2:	462a      	mov	r2, r5
 80186c4:	4649      	mov	r1, r9
 80186c6:	4620      	mov	r0, r4
 80186c8:	f7ff ffa8 	bl	801861c <L_shift>
 80186cc:	4544      	cmp	r4, r8
 80186ce:	d950      	bls.n	8018772 <__hexnan+0x10a>
 80186d0:	2300      	movs	r3, #0
 80186d2:	f1a4 0904 	sub.w	r9, r4, #4
 80186d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80186da:	f8cd b008 	str.w	fp, [sp, #8]
 80186de:	464c      	mov	r4, r9
 80186e0:	461d      	mov	r5, r3
 80186e2:	9903      	ldr	r1, [sp, #12]
 80186e4:	e7d7      	b.n	8018696 <__hexnan+0x2e>
 80186e6:	2a29      	cmp	r2, #41	; 0x29
 80186e8:	d156      	bne.n	8018798 <__hexnan+0x130>
 80186ea:	3102      	adds	r1, #2
 80186ec:	f8ca 1000 	str.w	r1, [sl]
 80186f0:	f1bb 0f00 	cmp.w	fp, #0
 80186f4:	d050      	beq.n	8018798 <__hexnan+0x130>
 80186f6:	454c      	cmp	r4, r9
 80186f8:	d206      	bcs.n	8018708 <__hexnan+0xa0>
 80186fa:	2d07      	cmp	r5, #7
 80186fc:	dc04      	bgt.n	8018708 <__hexnan+0xa0>
 80186fe:	462a      	mov	r2, r5
 8018700:	4649      	mov	r1, r9
 8018702:	4620      	mov	r0, r4
 8018704:	f7ff ff8a 	bl	801861c <L_shift>
 8018708:	4544      	cmp	r4, r8
 801870a:	d934      	bls.n	8018776 <__hexnan+0x10e>
 801870c:	f1a8 0204 	sub.w	r2, r8, #4
 8018710:	4623      	mov	r3, r4
 8018712:	f853 1b04 	ldr.w	r1, [r3], #4
 8018716:	f842 1f04 	str.w	r1, [r2, #4]!
 801871a:	429f      	cmp	r7, r3
 801871c:	d2f9      	bcs.n	8018712 <__hexnan+0xaa>
 801871e:	1b3b      	subs	r3, r7, r4
 8018720:	f023 0303 	bic.w	r3, r3, #3
 8018724:	3304      	adds	r3, #4
 8018726:	3401      	adds	r4, #1
 8018728:	3e03      	subs	r6, #3
 801872a:	42b4      	cmp	r4, r6
 801872c:	bf88      	it	hi
 801872e:	2304      	movhi	r3, #4
 8018730:	4443      	add	r3, r8
 8018732:	2200      	movs	r2, #0
 8018734:	f843 2b04 	str.w	r2, [r3], #4
 8018738:	429f      	cmp	r7, r3
 801873a:	d2fb      	bcs.n	8018734 <__hexnan+0xcc>
 801873c:	683b      	ldr	r3, [r7, #0]
 801873e:	b91b      	cbnz	r3, 8018748 <__hexnan+0xe0>
 8018740:	4547      	cmp	r7, r8
 8018742:	d127      	bne.n	8018794 <__hexnan+0x12c>
 8018744:	2301      	movs	r3, #1
 8018746:	603b      	str	r3, [r7, #0]
 8018748:	2005      	movs	r0, #5
 801874a:	e026      	b.n	801879a <__hexnan+0x132>
 801874c:	3501      	adds	r5, #1
 801874e:	2d08      	cmp	r5, #8
 8018750:	f10b 0b01 	add.w	fp, fp, #1
 8018754:	dd06      	ble.n	8018764 <__hexnan+0xfc>
 8018756:	4544      	cmp	r4, r8
 8018758:	d9c3      	bls.n	80186e2 <__hexnan+0x7a>
 801875a:	2300      	movs	r3, #0
 801875c:	f844 3c04 	str.w	r3, [r4, #-4]
 8018760:	2501      	movs	r5, #1
 8018762:	3c04      	subs	r4, #4
 8018764:	6822      	ldr	r2, [r4, #0]
 8018766:	f000 000f 	and.w	r0, r0, #15
 801876a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801876e:	6022      	str	r2, [r4, #0]
 8018770:	e7b7      	b.n	80186e2 <__hexnan+0x7a>
 8018772:	2508      	movs	r5, #8
 8018774:	e7b5      	b.n	80186e2 <__hexnan+0x7a>
 8018776:	9b01      	ldr	r3, [sp, #4]
 8018778:	2b00      	cmp	r3, #0
 801877a:	d0df      	beq.n	801873c <__hexnan+0xd4>
 801877c:	f04f 32ff 	mov.w	r2, #4294967295
 8018780:	f1c3 0320 	rsb	r3, r3, #32
 8018784:	fa22 f303 	lsr.w	r3, r2, r3
 8018788:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801878c:	401a      	ands	r2, r3
 801878e:	f846 2c04 	str.w	r2, [r6, #-4]
 8018792:	e7d3      	b.n	801873c <__hexnan+0xd4>
 8018794:	3f04      	subs	r7, #4
 8018796:	e7d1      	b.n	801873c <__hexnan+0xd4>
 8018798:	2004      	movs	r0, #4
 801879a:	b007      	add	sp, #28
 801879c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080187a0 <_localeconv_r>:
 80187a0:	4800      	ldr	r0, [pc, #0]	; (80187a4 <_localeconv_r+0x4>)
 80187a2:	4770      	bx	lr
 80187a4:	20000164 	.word	0x20000164

080187a8 <__retarget_lock_init_recursive>:
 80187a8:	4770      	bx	lr

080187aa <__retarget_lock_acquire_recursive>:
 80187aa:	4770      	bx	lr

080187ac <__retarget_lock_release_recursive>:
 80187ac:	4770      	bx	lr
	...

080187b0 <_lseek_r>:
 80187b0:	b538      	push	{r3, r4, r5, lr}
 80187b2:	4d07      	ldr	r5, [pc, #28]	; (80187d0 <_lseek_r+0x20>)
 80187b4:	4604      	mov	r4, r0
 80187b6:	4608      	mov	r0, r1
 80187b8:	4611      	mov	r1, r2
 80187ba:	2200      	movs	r2, #0
 80187bc:	602a      	str	r2, [r5, #0]
 80187be:	461a      	mov	r2, r3
 80187c0:	f7ee ff16 	bl	80075f0 <_lseek>
 80187c4:	1c43      	adds	r3, r0, #1
 80187c6:	d102      	bne.n	80187ce <_lseek_r+0x1e>
 80187c8:	682b      	ldr	r3, [r5, #0]
 80187ca:	b103      	cbz	r3, 80187ce <_lseek_r+0x1e>
 80187cc:	6023      	str	r3, [r4, #0]
 80187ce:	bd38      	pop	{r3, r4, r5, pc}
 80187d0:	20041e60 	.word	0x20041e60

080187d4 <malloc>:
 80187d4:	4b02      	ldr	r3, [pc, #8]	; (80187e0 <malloc+0xc>)
 80187d6:	4601      	mov	r1, r0
 80187d8:	6818      	ldr	r0, [r3, #0]
 80187da:	f000 bd2f 	b.w	801923c <_malloc_r>
 80187de:	bf00      	nop
 80187e0:	2000000c 	.word	0x2000000c

080187e4 <__ascii_mbtowc>:
 80187e4:	b082      	sub	sp, #8
 80187e6:	b901      	cbnz	r1, 80187ea <__ascii_mbtowc+0x6>
 80187e8:	a901      	add	r1, sp, #4
 80187ea:	b142      	cbz	r2, 80187fe <__ascii_mbtowc+0x1a>
 80187ec:	b14b      	cbz	r3, 8018802 <__ascii_mbtowc+0x1e>
 80187ee:	7813      	ldrb	r3, [r2, #0]
 80187f0:	600b      	str	r3, [r1, #0]
 80187f2:	7812      	ldrb	r2, [r2, #0]
 80187f4:	1e10      	subs	r0, r2, #0
 80187f6:	bf18      	it	ne
 80187f8:	2001      	movne	r0, #1
 80187fa:	b002      	add	sp, #8
 80187fc:	4770      	bx	lr
 80187fe:	4610      	mov	r0, r2
 8018800:	e7fb      	b.n	80187fa <__ascii_mbtowc+0x16>
 8018802:	f06f 0001 	mvn.w	r0, #1
 8018806:	e7f8      	b.n	80187fa <__ascii_mbtowc+0x16>

08018808 <_Balloc>:
 8018808:	b570      	push	{r4, r5, r6, lr}
 801880a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801880c:	4604      	mov	r4, r0
 801880e:	460d      	mov	r5, r1
 8018810:	b976      	cbnz	r6, 8018830 <_Balloc+0x28>
 8018812:	2010      	movs	r0, #16
 8018814:	f7ff ffde 	bl	80187d4 <malloc>
 8018818:	4602      	mov	r2, r0
 801881a:	6260      	str	r0, [r4, #36]	; 0x24
 801881c:	b920      	cbnz	r0, 8018828 <_Balloc+0x20>
 801881e:	4b18      	ldr	r3, [pc, #96]	; (8018880 <_Balloc+0x78>)
 8018820:	4818      	ldr	r0, [pc, #96]	; (8018884 <_Balloc+0x7c>)
 8018822:	2166      	movs	r1, #102	; 0x66
 8018824:	f001 fd36 	bl	801a294 <__assert_func>
 8018828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801882c:	6006      	str	r6, [r0, #0]
 801882e:	60c6      	str	r6, [r0, #12]
 8018830:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018832:	68f3      	ldr	r3, [r6, #12]
 8018834:	b183      	cbz	r3, 8018858 <_Balloc+0x50>
 8018836:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018838:	68db      	ldr	r3, [r3, #12]
 801883a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801883e:	b9b8      	cbnz	r0, 8018870 <_Balloc+0x68>
 8018840:	2101      	movs	r1, #1
 8018842:	fa01 f605 	lsl.w	r6, r1, r5
 8018846:	1d72      	adds	r2, r6, #5
 8018848:	0092      	lsls	r2, r2, #2
 801884a:	4620      	mov	r0, r4
 801884c:	f000 fc97 	bl	801917e <_calloc_r>
 8018850:	b160      	cbz	r0, 801886c <_Balloc+0x64>
 8018852:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018856:	e00e      	b.n	8018876 <_Balloc+0x6e>
 8018858:	2221      	movs	r2, #33	; 0x21
 801885a:	2104      	movs	r1, #4
 801885c:	4620      	mov	r0, r4
 801885e:	f000 fc8e 	bl	801917e <_calloc_r>
 8018862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018864:	60f0      	str	r0, [r6, #12]
 8018866:	68db      	ldr	r3, [r3, #12]
 8018868:	2b00      	cmp	r3, #0
 801886a:	d1e4      	bne.n	8018836 <_Balloc+0x2e>
 801886c:	2000      	movs	r0, #0
 801886e:	bd70      	pop	{r4, r5, r6, pc}
 8018870:	6802      	ldr	r2, [r0, #0]
 8018872:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018876:	2300      	movs	r3, #0
 8018878:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801887c:	e7f7      	b.n	801886e <_Balloc+0x66>
 801887e:	bf00      	nop
 8018880:	0801b136 	.word	0x0801b136
 8018884:	0801b2a0 	.word	0x0801b2a0

08018888 <_Bfree>:
 8018888:	b570      	push	{r4, r5, r6, lr}
 801888a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801888c:	4605      	mov	r5, r0
 801888e:	460c      	mov	r4, r1
 8018890:	b976      	cbnz	r6, 80188b0 <_Bfree+0x28>
 8018892:	2010      	movs	r0, #16
 8018894:	f7ff ff9e 	bl	80187d4 <malloc>
 8018898:	4602      	mov	r2, r0
 801889a:	6268      	str	r0, [r5, #36]	; 0x24
 801889c:	b920      	cbnz	r0, 80188a8 <_Bfree+0x20>
 801889e:	4b09      	ldr	r3, [pc, #36]	; (80188c4 <_Bfree+0x3c>)
 80188a0:	4809      	ldr	r0, [pc, #36]	; (80188c8 <_Bfree+0x40>)
 80188a2:	218a      	movs	r1, #138	; 0x8a
 80188a4:	f001 fcf6 	bl	801a294 <__assert_func>
 80188a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80188ac:	6006      	str	r6, [r0, #0]
 80188ae:	60c6      	str	r6, [r0, #12]
 80188b0:	b13c      	cbz	r4, 80188c2 <_Bfree+0x3a>
 80188b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80188b4:	6862      	ldr	r2, [r4, #4]
 80188b6:	68db      	ldr	r3, [r3, #12]
 80188b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80188bc:	6021      	str	r1, [r4, #0]
 80188be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80188c2:	bd70      	pop	{r4, r5, r6, pc}
 80188c4:	0801b136 	.word	0x0801b136
 80188c8:	0801b2a0 	.word	0x0801b2a0

080188cc <__multadd>:
 80188cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188d0:	690e      	ldr	r6, [r1, #16]
 80188d2:	4607      	mov	r7, r0
 80188d4:	4698      	mov	r8, r3
 80188d6:	460c      	mov	r4, r1
 80188d8:	f101 0014 	add.w	r0, r1, #20
 80188dc:	2300      	movs	r3, #0
 80188de:	6805      	ldr	r5, [r0, #0]
 80188e0:	b2a9      	uxth	r1, r5
 80188e2:	fb02 8101 	mla	r1, r2, r1, r8
 80188e6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80188ea:	0c2d      	lsrs	r5, r5, #16
 80188ec:	fb02 c505 	mla	r5, r2, r5, ip
 80188f0:	b289      	uxth	r1, r1
 80188f2:	3301      	adds	r3, #1
 80188f4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80188f8:	429e      	cmp	r6, r3
 80188fa:	f840 1b04 	str.w	r1, [r0], #4
 80188fe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8018902:	dcec      	bgt.n	80188de <__multadd+0x12>
 8018904:	f1b8 0f00 	cmp.w	r8, #0
 8018908:	d022      	beq.n	8018950 <__multadd+0x84>
 801890a:	68a3      	ldr	r3, [r4, #8]
 801890c:	42b3      	cmp	r3, r6
 801890e:	dc19      	bgt.n	8018944 <__multadd+0x78>
 8018910:	6861      	ldr	r1, [r4, #4]
 8018912:	4638      	mov	r0, r7
 8018914:	3101      	adds	r1, #1
 8018916:	f7ff ff77 	bl	8018808 <_Balloc>
 801891a:	4605      	mov	r5, r0
 801891c:	b928      	cbnz	r0, 801892a <__multadd+0x5e>
 801891e:	4602      	mov	r2, r0
 8018920:	4b0d      	ldr	r3, [pc, #52]	; (8018958 <__multadd+0x8c>)
 8018922:	480e      	ldr	r0, [pc, #56]	; (801895c <__multadd+0x90>)
 8018924:	21b5      	movs	r1, #181	; 0xb5
 8018926:	f001 fcb5 	bl	801a294 <__assert_func>
 801892a:	6922      	ldr	r2, [r4, #16]
 801892c:	3202      	adds	r2, #2
 801892e:	f104 010c 	add.w	r1, r4, #12
 8018932:	0092      	lsls	r2, r2, #2
 8018934:	300c      	adds	r0, #12
 8018936:	f7fc fe07 	bl	8015548 <memcpy>
 801893a:	4621      	mov	r1, r4
 801893c:	4638      	mov	r0, r7
 801893e:	f7ff ffa3 	bl	8018888 <_Bfree>
 8018942:	462c      	mov	r4, r5
 8018944:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018948:	3601      	adds	r6, #1
 801894a:	f8c3 8014 	str.w	r8, [r3, #20]
 801894e:	6126      	str	r6, [r4, #16]
 8018950:	4620      	mov	r0, r4
 8018952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018956:	bf00      	nop
 8018958:	0801b1ac 	.word	0x0801b1ac
 801895c:	0801b2a0 	.word	0x0801b2a0

08018960 <__s2b>:
 8018960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018964:	460c      	mov	r4, r1
 8018966:	4615      	mov	r5, r2
 8018968:	461f      	mov	r7, r3
 801896a:	2209      	movs	r2, #9
 801896c:	3308      	adds	r3, #8
 801896e:	4606      	mov	r6, r0
 8018970:	fb93 f3f2 	sdiv	r3, r3, r2
 8018974:	2100      	movs	r1, #0
 8018976:	2201      	movs	r2, #1
 8018978:	429a      	cmp	r2, r3
 801897a:	db09      	blt.n	8018990 <__s2b+0x30>
 801897c:	4630      	mov	r0, r6
 801897e:	f7ff ff43 	bl	8018808 <_Balloc>
 8018982:	b940      	cbnz	r0, 8018996 <__s2b+0x36>
 8018984:	4602      	mov	r2, r0
 8018986:	4b19      	ldr	r3, [pc, #100]	; (80189ec <__s2b+0x8c>)
 8018988:	4819      	ldr	r0, [pc, #100]	; (80189f0 <__s2b+0x90>)
 801898a:	21ce      	movs	r1, #206	; 0xce
 801898c:	f001 fc82 	bl	801a294 <__assert_func>
 8018990:	0052      	lsls	r2, r2, #1
 8018992:	3101      	adds	r1, #1
 8018994:	e7f0      	b.n	8018978 <__s2b+0x18>
 8018996:	9b08      	ldr	r3, [sp, #32]
 8018998:	6143      	str	r3, [r0, #20]
 801899a:	2d09      	cmp	r5, #9
 801899c:	f04f 0301 	mov.w	r3, #1
 80189a0:	6103      	str	r3, [r0, #16]
 80189a2:	dd16      	ble.n	80189d2 <__s2b+0x72>
 80189a4:	f104 0909 	add.w	r9, r4, #9
 80189a8:	46c8      	mov	r8, r9
 80189aa:	442c      	add	r4, r5
 80189ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 80189b0:	4601      	mov	r1, r0
 80189b2:	3b30      	subs	r3, #48	; 0x30
 80189b4:	220a      	movs	r2, #10
 80189b6:	4630      	mov	r0, r6
 80189b8:	f7ff ff88 	bl	80188cc <__multadd>
 80189bc:	45a0      	cmp	r8, r4
 80189be:	d1f5      	bne.n	80189ac <__s2b+0x4c>
 80189c0:	f1a5 0408 	sub.w	r4, r5, #8
 80189c4:	444c      	add	r4, r9
 80189c6:	1b2d      	subs	r5, r5, r4
 80189c8:	1963      	adds	r3, r4, r5
 80189ca:	42bb      	cmp	r3, r7
 80189cc:	db04      	blt.n	80189d8 <__s2b+0x78>
 80189ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80189d2:	340a      	adds	r4, #10
 80189d4:	2509      	movs	r5, #9
 80189d6:	e7f6      	b.n	80189c6 <__s2b+0x66>
 80189d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80189dc:	4601      	mov	r1, r0
 80189de:	3b30      	subs	r3, #48	; 0x30
 80189e0:	220a      	movs	r2, #10
 80189e2:	4630      	mov	r0, r6
 80189e4:	f7ff ff72 	bl	80188cc <__multadd>
 80189e8:	e7ee      	b.n	80189c8 <__s2b+0x68>
 80189ea:	bf00      	nop
 80189ec:	0801b1ac 	.word	0x0801b1ac
 80189f0:	0801b2a0 	.word	0x0801b2a0

080189f4 <__hi0bits>:
 80189f4:	0c03      	lsrs	r3, r0, #16
 80189f6:	041b      	lsls	r3, r3, #16
 80189f8:	b9d3      	cbnz	r3, 8018a30 <__hi0bits+0x3c>
 80189fa:	0400      	lsls	r0, r0, #16
 80189fc:	2310      	movs	r3, #16
 80189fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018a02:	bf04      	itt	eq
 8018a04:	0200      	lsleq	r0, r0, #8
 8018a06:	3308      	addeq	r3, #8
 8018a08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018a0c:	bf04      	itt	eq
 8018a0e:	0100      	lsleq	r0, r0, #4
 8018a10:	3304      	addeq	r3, #4
 8018a12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018a16:	bf04      	itt	eq
 8018a18:	0080      	lsleq	r0, r0, #2
 8018a1a:	3302      	addeq	r3, #2
 8018a1c:	2800      	cmp	r0, #0
 8018a1e:	db05      	blt.n	8018a2c <__hi0bits+0x38>
 8018a20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018a24:	f103 0301 	add.w	r3, r3, #1
 8018a28:	bf08      	it	eq
 8018a2a:	2320      	moveq	r3, #32
 8018a2c:	4618      	mov	r0, r3
 8018a2e:	4770      	bx	lr
 8018a30:	2300      	movs	r3, #0
 8018a32:	e7e4      	b.n	80189fe <__hi0bits+0xa>

08018a34 <__lo0bits>:
 8018a34:	6803      	ldr	r3, [r0, #0]
 8018a36:	f013 0207 	ands.w	r2, r3, #7
 8018a3a:	4601      	mov	r1, r0
 8018a3c:	d00b      	beq.n	8018a56 <__lo0bits+0x22>
 8018a3e:	07da      	lsls	r2, r3, #31
 8018a40:	d424      	bmi.n	8018a8c <__lo0bits+0x58>
 8018a42:	0798      	lsls	r0, r3, #30
 8018a44:	bf49      	itett	mi
 8018a46:	085b      	lsrmi	r3, r3, #1
 8018a48:	089b      	lsrpl	r3, r3, #2
 8018a4a:	2001      	movmi	r0, #1
 8018a4c:	600b      	strmi	r3, [r1, #0]
 8018a4e:	bf5c      	itt	pl
 8018a50:	600b      	strpl	r3, [r1, #0]
 8018a52:	2002      	movpl	r0, #2
 8018a54:	4770      	bx	lr
 8018a56:	b298      	uxth	r0, r3
 8018a58:	b9b0      	cbnz	r0, 8018a88 <__lo0bits+0x54>
 8018a5a:	0c1b      	lsrs	r3, r3, #16
 8018a5c:	2010      	movs	r0, #16
 8018a5e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018a62:	bf04      	itt	eq
 8018a64:	0a1b      	lsreq	r3, r3, #8
 8018a66:	3008      	addeq	r0, #8
 8018a68:	071a      	lsls	r2, r3, #28
 8018a6a:	bf04      	itt	eq
 8018a6c:	091b      	lsreq	r3, r3, #4
 8018a6e:	3004      	addeq	r0, #4
 8018a70:	079a      	lsls	r2, r3, #30
 8018a72:	bf04      	itt	eq
 8018a74:	089b      	lsreq	r3, r3, #2
 8018a76:	3002      	addeq	r0, #2
 8018a78:	07da      	lsls	r2, r3, #31
 8018a7a:	d403      	bmi.n	8018a84 <__lo0bits+0x50>
 8018a7c:	085b      	lsrs	r3, r3, #1
 8018a7e:	f100 0001 	add.w	r0, r0, #1
 8018a82:	d005      	beq.n	8018a90 <__lo0bits+0x5c>
 8018a84:	600b      	str	r3, [r1, #0]
 8018a86:	4770      	bx	lr
 8018a88:	4610      	mov	r0, r2
 8018a8a:	e7e8      	b.n	8018a5e <__lo0bits+0x2a>
 8018a8c:	2000      	movs	r0, #0
 8018a8e:	4770      	bx	lr
 8018a90:	2020      	movs	r0, #32
 8018a92:	4770      	bx	lr

08018a94 <__i2b>:
 8018a94:	b510      	push	{r4, lr}
 8018a96:	460c      	mov	r4, r1
 8018a98:	2101      	movs	r1, #1
 8018a9a:	f7ff feb5 	bl	8018808 <_Balloc>
 8018a9e:	4602      	mov	r2, r0
 8018aa0:	b928      	cbnz	r0, 8018aae <__i2b+0x1a>
 8018aa2:	4b05      	ldr	r3, [pc, #20]	; (8018ab8 <__i2b+0x24>)
 8018aa4:	4805      	ldr	r0, [pc, #20]	; (8018abc <__i2b+0x28>)
 8018aa6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8018aaa:	f001 fbf3 	bl	801a294 <__assert_func>
 8018aae:	2301      	movs	r3, #1
 8018ab0:	6144      	str	r4, [r0, #20]
 8018ab2:	6103      	str	r3, [r0, #16]
 8018ab4:	bd10      	pop	{r4, pc}
 8018ab6:	bf00      	nop
 8018ab8:	0801b1ac 	.word	0x0801b1ac
 8018abc:	0801b2a0 	.word	0x0801b2a0

08018ac0 <__multiply>:
 8018ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ac4:	4614      	mov	r4, r2
 8018ac6:	690a      	ldr	r2, [r1, #16]
 8018ac8:	6923      	ldr	r3, [r4, #16]
 8018aca:	429a      	cmp	r2, r3
 8018acc:	bfb8      	it	lt
 8018ace:	460b      	movlt	r3, r1
 8018ad0:	460d      	mov	r5, r1
 8018ad2:	bfbc      	itt	lt
 8018ad4:	4625      	movlt	r5, r4
 8018ad6:	461c      	movlt	r4, r3
 8018ad8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8018adc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018ae0:	68ab      	ldr	r3, [r5, #8]
 8018ae2:	6869      	ldr	r1, [r5, #4]
 8018ae4:	eb0a 0709 	add.w	r7, sl, r9
 8018ae8:	42bb      	cmp	r3, r7
 8018aea:	b085      	sub	sp, #20
 8018aec:	bfb8      	it	lt
 8018aee:	3101      	addlt	r1, #1
 8018af0:	f7ff fe8a 	bl	8018808 <_Balloc>
 8018af4:	b930      	cbnz	r0, 8018b04 <__multiply+0x44>
 8018af6:	4602      	mov	r2, r0
 8018af8:	4b42      	ldr	r3, [pc, #264]	; (8018c04 <__multiply+0x144>)
 8018afa:	4843      	ldr	r0, [pc, #268]	; (8018c08 <__multiply+0x148>)
 8018afc:	f240 115d 	movw	r1, #349	; 0x15d
 8018b00:	f001 fbc8 	bl	801a294 <__assert_func>
 8018b04:	f100 0614 	add.w	r6, r0, #20
 8018b08:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8018b0c:	4633      	mov	r3, r6
 8018b0e:	2200      	movs	r2, #0
 8018b10:	4543      	cmp	r3, r8
 8018b12:	d31e      	bcc.n	8018b52 <__multiply+0x92>
 8018b14:	f105 0c14 	add.w	ip, r5, #20
 8018b18:	f104 0314 	add.w	r3, r4, #20
 8018b1c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8018b20:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8018b24:	9202      	str	r2, [sp, #8]
 8018b26:	ebac 0205 	sub.w	r2, ip, r5
 8018b2a:	3a15      	subs	r2, #21
 8018b2c:	f022 0203 	bic.w	r2, r2, #3
 8018b30:	3204      	adds	r2, #4
 8018b32:	f105 0115 	add.w	r1, r5, #21
 8018b36:	458c      	cmp	ip, r1
 8018b38:	bf38      	it	cc
 8018b3a:	2204      	movcc	r2, #4
 8018b3c:	9201      	str	r2, [sp, #4]
 8018b3e:	9a02      	ldr	r2, [sp, #8]
 8018b40:	9303      	str	r3, [sp, #12]
 8018b42:	429a      	cmp	r2, r3
 8018b44:	d808      	bhi.n	8018b58 <__multiply+0x98>
 8018b46:	2f00      	cmp	r7, #0
 8018b48:	dc55      	bgt.n	8018bf6 <__multiply+0x136>
 8018b4a:	6107      	str	r7, [r0, #16]
 8018b4c:	b005      	add	sp, #20
 8018b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b52:	f843 2b04 	str.w	r2, [r3], #4
 8018b56:	e7db      	b.n	8018b10 <__multiply+0x50>
 8018b58:	f8b3 a000 	ldrh.w	sl, [r3]
 8018b5c:	f1ba 0f00 	cmp.w	sl, #0
 8018b60:	d020      	beq.n	8018ba4 <__multiply+0xe4>
 8018b62:	f105 0e14 	add.w	lr, r5, #20
 8018b66:	46b1      	mov	r9, r6
 8018b68:	2200      	movs	r2, #0
 8018b6a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8018b6e:	f8d9 b000 	ldr.w	fp, [r9]
 8018b72:	b2a1      	uxth	r1, r4
 8018b74:	fa1f fb8b 	uxth.w	fp, fp
 8018b78:	fb0a b101 	mla	r1, sl, r1, fp
 8018b7c:	4411      	add	r1, r2
 8018b7e:	f8d9 2000 	ldr.w	r2, [r9]
 8018b82:	0c24      	lsrs	r4, r4, #16
 8018b84:	0c12      	lsrs	r2, r2, #16
 8018b86:	fb0a 2404 	mla	r4, sl, r4, r2
 8018b8a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8018b8e:	b289      	uxth	r1, r1
 8018b90:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8018b94:	45f4      	cmp	ip, lr
 8018b96:	f849 1b04 	str.w	r1, [r9], #4
 8018b9a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8018b9e:	d8e4      	bhi.n	8018b6a <__multiply+0xaa>
 8018ba0:	9901      	ldr	r1, [sp, #4]
 8018ba2:	5072      	str	r2, [r6, r1]
 8018ba4:	9a03      	ldr	r2, [sp, #12]
 8018ba6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018baa:	3304      	adds	r3, #4
 8018bac:	f1b9 0f00 	cmp.w	r9, #0
 8018bb0:	d01f      	beq.n	8018bf2 <__multiply+0x132>
 8018bb2:	6834      	ldr	r4, [r6, #0]
 8018bb4:	f105 0114 	add.w	r1, r5, #20
 8018bb8:	46b6      	mov	lr, r6
 8018bba:	f04f 0a00 	mov.w	sl, #0
 8018bbe:	880a      	ldrh	r2, [r1, #0]
 8018bc0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8018bc4:	fb09 b202 	mla	r2, r9, r2, fp
 8018bc8:	4492      	add	sl, r2
 8018bca:	b2a4      	uxth	r4, r4
 8018bcc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8018bd0:	f84e 4b04 	str.w	r4, [lr], #4
 8018bd4:	f851 4b04 	ldr.w	r4, [r1], #4
 8018bd8:	f8be 2000 	ldrh.w	r2, [lr]
 8018bdc:	0c24      	lsrs	r4, r4, #16
 8018bde:	fb09 2404 	mla	r4, r9, r4, r2
 8018be2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8018be6:	458c      	cmp	ip, r1
 8018be8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018bec:	d8e7      	bhi.n	8018bbe <__multiply+0xfe>
 8018bee:	9a01      	ldr	r2, [sp, #4]
 8018bf0:	50b4      	str	r4, [r6, r2]
 8018bf2:	3604      	adds	r6, #4
 8018bf4:	e7a3      	b.n	8018b3e <__multiply+0x7e>
 8018bf6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d1a5      	bne.n	8018b4a <__multiply+0x8a>
 8018bfe:	3f01      	subs	r7, #1
 8018c00:	e7a1      	b.n	8018b46 <__multiply+0x86>
 8018c02:	bf00      	nop
 8018c04:	0801b1ac 	.word	0x0801b1ac
 8018c08:	0801b2a0 	.word	0x0801b2a0

08018c0c <__pow5mult>:
 8018c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c10:	4615      	mov	r5, r2
 8018c12:	f012 0203 	ands.w	r2, r2, #3
 8018c16:	4606      	mov	r6, r0
 8018c18:	460f      	mov	r7, r1
 8018c1a:	d007      	beq.n	8018c2c <__pow5mult+0x20>
 8018c1c:	4c25      	ldr	r4, [pc, #148]	; (8018cb4 <__pow5mult+0xa8>)
 8018c1e:	3a01      	subs	r2, #1
 8018c20:	2300      	movs	r3, #0
 8018c22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018c26:	f7ff fe51 	bl	80188cc <__multadd>
 8018c2a:	4607      	mov	r7, r0
 8018c2c:	10ad      	asrs	r5, r5, #2
 8018c2e:	d03d      	beq.n	8018cac <__pow5mult+0xa0>
 8018c30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018c32:	b97c      	cbnz	r4, 8018c54 <__pow5mult+0x48>
 8018c34:	2010      	movs	r0, #16
 8018c36:	f7ff fdcd 	bl	80187d4 <malloc>
 8018c3a:	4602      	mov	r2, r0
 8018c3c:	6270      	str	r0, [r6, #36]	; 0x24
 8018c3e:	b928      	cbnz	r0, 8018c4c <__pow5mult+0x40>
 8018c40:	4b1d      	ldr	r3, [pc, #116]	; (8018cb8 <__pow5mult+0xac>)
 8018c42:	481e      	ldr	r0, [pc, #120]	; (8018cbc <__pow5mult+0xb0>)
 8018c44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8018c48:	f001 fb24 	bl	801a294 <__assert_func>
 8018c4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018c50:	6004      	str	r4, [r0, #0]
 8018c52:	60c4      	str	r4, [r0, #12]
 8018c54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018c58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018c5c:	b94c      	cbnz	r4, 8018c72 <__pow5mult+0x66>
 8018c5e:	f240 2171 	movw	r1, #625	; 0x271
 8018c62:	4630      	mov	r0, r6
 8018c64:	f7ff ff16 	bl	8018a94 <__i2b>
 8018c68:	2300      	movs	r3, #0
 8018c6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8018c6e:	4604      	mov	r4, r0
 8018c70:	6003      	str	r3, [r0, #0]
 8018c72:	f04f 0900 	mov.w	r9, #0
 8018c76:	07eb      	lsls	r3, r5, #31
 8018c78:	d50a      	bpl.n	8018c90 <__pow5mult+0x84>
 8018c7a:	4639      	mov	r1, r7
 8018c7c:	4622      	mov	r2, r4
 8018c7e:	4630      	mov	r0, r6
 8018c80:	f7ff ff1e 	bl	8018ac0 <__multiply>
 8018c84:	4639      	mov	r1, r7
 8018c86:	4680      	mov	r8, r0
 8018c88:	4630      	mov	r0, r6
 8018c8a:	f7ff fdfd 	bl	8018888 <_Bfree>
 8018c8e:	4647      	mov	r7, r8
 8018c90:	106d      	asrs	r5, r5, #1
 8018c92:	d00b      	beq.n	8018cac <__pow5mult+0xa0>
 8018c94:	6820      	ldr	r0, [r4, #0]
 8018c96:	b938      	cbnz	r0, 8018ca8 <__pow5mult+0x9c>
 8018c98:	4622      	mov	r2, r4
 8018c9a:	4621      	mov	r1, r4
 8018c9c:	4630      	mov	r0, r6
 8018c9e:	f7ff ff0f 	bl	8018ac0 <__multiply>
 8018ca2:	6020      	str	r0, [r4, #0]
 8018ca4:	f8c0 9000 	str.w	r9, [r0]
 8018ca8:	4604      	mov	r4, r0
 8018caa:	e7e4      	b.n	8018c76 <__pow5mult+0x6a>
 8018cac:	4638      	mov	r0, r7
 8018cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018cb2:	bf00      	nop
 8018cb4:	0801b3f0 	.word	0x0801b3f0
 8018cb8:	0801b136 	.word	0x0801b136
 8018cbc:	0801b2a0 	.word	0x0801b2a0

08018cc0 <__lshift>:
 8018cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cc4:	460c      	mov	r4, r1
 8018cc6:	6849      	ldr	r1, [r1, #4]
 8018cc8:	6923      	ldr	r3, [r4, #16]
 8018cca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018cce:	68a3      	ldr	r3, [r4, #8]
 8018cd0:	4607      	mov	r7, r0
 8018cd2:	4691      	mov	r9, r2
 8018cd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018cd8:	f108 0601 	add.w	r6, r8, #1
 8018cdc:	42b3      	cmp	r3, r6
 8018cde:	db0b      	blt.n	8018cf8 <__lshift+0x38>
 8018ce0:	4638      	mov	r0, r7
 8018ce2:	f7ff fd91 	bl	8018808 <_Balloc>
 8018ce6:	4605      	mov	r5, r0
 8018ce8:	b948      	cbnz	r0, 8018cfe <__lshift+0x3e>
 8018cea:	4602      	mov	r2, r0
 8018cec:	4b28      	ldr	r3, [pc, #160]	; (8018d90 <__lshift+0xd0>)
 8018cee:	4829      	ldr	r0, [pc, #164]	; (8018d94 <__lshift+0xd4>)
 8018cf0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018cf4:	f001 face 	bl	801a294 <__assert_func>
 8018cf8:	3101      	adds	r1, #1
 8018cfa:	005b      	lsls	r3, r3, #1
 8018cfc:	e7ee      	b.n	8018cdc <__lshift+0x1c>
 8018cfe:	2300      	movs	r3, #0
 8018d00:	f100 0114 	add.w	r1, r0, #20
 8018d04:	f100 0210 	add.w	r2, r0, #16
 8018d08:	4618      	mov	r0, r3
 8018d0a:	4553      	cmp	r3, sl
 8018d0c:	db33      	blt.n	8018d76 <__lshift+0xb6>
 8018d0e:	6920      	ldr	r0, [r4, #16]
 8018d10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018d14:	f104 0314 	add.w	r3, r4, #20
 8018d18:	f019 091f 	ands.w	r9, r9, #31
 8018d1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018d20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018d24:	d02b      	beq.n	8018d7e <__lshift+0xbe>
 8018d26:	f1c9 0e20 	rsb	lr, r9, #32
 8018d2a:	468a      	mov	sl, r1
 8018d2c:	2200      	movs	r2, #0
 8018d2e:	6818      	ldr	r0, [r3, #0]
 8018d30:	fa00 f009 	lsl.w	r0, r0, r9
 8018d34:	4302      	orrs	r2, r0
 8018d36:	f84a 2b04 	str.w	r2, [sl], #4
 8018d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d3e:	459c      	cmp	ip, r3
 8018d40:	fa22 f20e 	lsr.w	r2, r2, lr
 8018d44:	d8f3      	bhi.n	8018d2e <__lshift+0x6e>
 8018d46:	ebac 0304 	sub.w	r3, ip, r4
 8018d4a:	3b15      	subs	r3, #21
 8018d4c:	f023 0303 	bic.w	r3, r3, #3
 8018d50:	3304      	adds	r3, #4
 8018d52:	f104 0015 	add.w	r0, r4, #21
 8018d56:	4584      	cmp	ip, r0
 8018d58:	bf38      	it	cc
 8018d5a:	2304      	movcc	r3, #4
 8018d5c:	50ca      	str	r2, [r1, r3]
 8018d5e:	b10a      	cbz	r2, 8018d64 <__lshift+0xa4>
 8018d60:	f108 0602 	add.w	r6, r8, #2
 8018d64:	3e01      	subs	r6, #1
 8018d66:	4638      	mov	r0, r7
 8018d68:	612e      	str	r6, [r5, #16]
 8018d6a:	4621      	mov	r1, r4
 8018d6c:	f7ff fd8c 	bl	8018888 <_Bfree>
 8018d70:	4628      	mov	r0, r5
 8018d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d76:	f842 0f04 	str.w	r0, [r2, #4]!
 8018d7a:	3301      	adds	r3, #1
 8018d7c:	e7c5      	b.n	8018d0a <__lshift+0x4a>
 8018d7e:	3904      	subs	r1, #4
 8018d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d84:	f841 2f04 	str.w	r2, [r1, #4]!
 8018d88:	459c      	cmp	ip, r3
 8018d8a:	d8f9      	bhi.n	8018d80 <__lshift+0xc0>
 8018d8c:	e7ea      	b.n	8018d64 <__lshift+0xa4>
 8018d8e:	bf00      	nop
 8018d90:	0801b1ac 	.word	0x0801b1ac
 8018d94:	0801b2a0 	.word	0x0801b2a0

08018d98 <__mcmp>:
 8018d98:	b530      	push	{r4, r5, lr}
 8018d9a:	6902      	ldr	r2, [r0, #16]
 8018d9c:	690c      	ldr	r4, [r1, #16]
 8018d9e:	1b12      	subs	r2, r2, r4
 8018da0:	d10e      	bne.n	8018dc0 <__mcmp+0x28>
 8018da2:	f100 0314 	add.w	r3, r0, #20
 8018da6:	3114      	adds	r1, #20
 8018da8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018dac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018db0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018db4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018db8:	42a5      	cmp	r5, r4
 8018dba:	d003      	beq.n	8018dc4 <__mcmp+0x2c>
 8018dbc:	d305      	bcc.n	8018dca <__mcmp+0x32>
 8018dbe:	2201      	movs	r2, #1
 8018dc0:	4610      	mov	r0, r2
 8018dc2:	bd30      	pop	{r4, r5, pc}
 8018dc4:	4283      	cmp	r3, r0
 8018dc6:	d3f3      	bcc.n	8018db0 <__mcmp+0x18>
 8018dc8:	e7fa      	b.n	8018dc0 <__mcmp+0x28>
 8018dca:	f04f 32ff 	mov.w	r2, #4294967295
 8018dce:	e7f7      	b.n	8018dc0 <__mcmp+0x28>

08018dd0 <__mdiff>:
 8018dd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dd4:	460c      	mov	r4, r1
 8018dd6:	4606      	mov	r6, r0
 8018dd8:	4611      	mov	r1, r2
 8018dda:	4620      	mov	r0, r4
 8018ddc:	4617      	mov	r7, r2
 8018dde:	f7ff ffdb 	bl	8018d98 <__mcmp>
 8018de2:	1e05      	subs	r5, r0, #0
 8018de4:	d110      	bne.n	8018e08 <__mdiff+0x38>
 8018de6:	4629      	mov	r1, r5
 8018de8:	4630      	mov	r0, r6
 8018dea:	f7ff fd0d 	bl	8018808 <_Balloc>
 8018dee:	b930      	cbnz	r0, 8018dfe <__mdiff+0x2e>
 8018df0:	4b39      	ldr	r3, [pc, #228]	; (8018ed8 <__mdiff+0x108>)
 8018df2:	4602      	mov	r2, r0
 8018df4:	f240 2132 	movw	r1, #562	; 0x232
 8018df8:	4838      	ldr	r0, [pc, #224]	; (8018edc <__mdiff+0x10c>)
 8018dfa:	f001 fa4b 	bl	801a294 <__assert_func>
 8018dfe:	2301      	movs	r3, #1
 8018e00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018e04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e08:	bfa4      	itt	ge
 8018e0a:	463b      	movge	r3, r7
 8018e0c:	4627      	movge	r7, r4
 8018e0e:	4630      	mov	r0, r6
 8018e10:	6879      	ldr	r1, [r7, #4]
 8018e12:	bfa6      	itte	ge
 8018e14:	461c      	movge	r4, r3
 8018e16:	2500      	movge	r5, #0
 8018e18:	2501      	movlt	r5, #1
 8018e1a:	f7ff fcf5 	bl	8018808 <_Balloc>
 8018e1e:	b920      	cbnz	r0, 8018e2a <__mdiff+0x5a>
 8018e20:	4b2d      	ldr	r3, [pc, #180]	; (8018ed8 <__mdiff+0x108>)
 8018e22:	4602      	mov	r2, r0
 8018e24:	f44f 7110 	mov.w	r1, #576	; 0x240
 8018e28:	e7e6      	b.n	8018df8 <__mdiff+0x28>
 8018e2a:	693e      	ldr	r6, [r7, #16]
 8018e2c:	60c5      	str	r5, [r0, #12]
 8018e2e:	6925      	ldr	r5, [r4, #16]
 8018e30:	f107 0114 	add.w	r1, r7, #20
 8018e34:	f104 0914 	add.w	r9, r4, #20
 8018e38:	f100 0e14 	add.w	lr, r0, #20
 8018e3c:	f107 0210 	add.w	r2, r7, #16
 8018e40:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8018e44:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8018e48:	46f2      	mov	sl, lr
 8018e4a:	2700      	movs	r7, #0
 8018e4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8018e50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018e54:	fa1f f883 	uxth.w	r8, r3
 8018e58:	fa17 f78b 	uxtah	r7, r7, fp
 8018e5c:	0c1b      	lsrs	r3, r3, #16
 8018e5e:	eba7 0808 	sub.w	r8, r7, r8
 8018e62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018e66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018e6a:	fa1f f888 	uxth.w	r8, r8
 8018e6e:	141f      	asrs	r7, r3, #16
 8018e70:	454d      	cmp	r5, r9
 8018e72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018e76:	f84a 3b04 	str.w	r3, [sl], #4
 8018e7a:	d8e7      	bhi.n	8018e4c <__mdiff+0x7c>
 8018e7c:	1b2b      	subs	r3, r5, r4
 8018e7e:	3b15      	subs	r3, #21
 8018e80:	f023 0303 	bic.w	r3, r3, #3
 8018e84:	3304      	adds	r3, #4
 8018e86:	3415      	adds	r4, #21
 8018e88:	42a5      	cmp	r5, r4
 8018e8a:	bf38      	it	cc
 8018e8c:	2304      	movcc	r3, #4
 8018e8e:	4419      	add	r1, r3
 8018e90:	4473      	add	r3, lr
 8018e92:	469e      	mov	lr, r3
 8018e94:	460d      	mov	r5, r1
 8018e96:	4565      	cmp	r5, ip
 8018e98:	d30e      	bcc.n	8018eb8 <__mdiff+0xe8>
 8018e9a:	f10c 0203 	add.w	r2, ip, #3
 8018e9e:	1a52      	subs	r2, r2, r1
 8018ea0:	f022 0203 	bic.w	r2, r2, #3
 8018ea4:	3903      	subs	r1, #3
 8018ea6:	458c      	cmp	ip, r1
 8018ea8:	bf38      	it	cc
 8018eaa:	2200      	movcc	r2, #0
 8018eac:	441a      	add	r2, r3
 8018eae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8018eb2:	b17b      	cbz	r3, 8018ed4 <__mdiff+0x104>
 8018eb4:	6106      	str	r6, [r0, #16]
 8018eb6:	e7a5      	b.n	8018e04 <__mdiff+0x34>
 8018eb8:	f855 8b04 	ldr.w	r8, [r5], #4
 8018ebc:	fa17 f488 	uxtah	r4, r7, r8
 8018ec0:	1422      	asrs	r2, r4, #16
 8018ec2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8018ec6:	b2a4      	uxth	r4, r4
 8018ec8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8018ecc:	f84e 4b04 	str.w	r4, [lr], #4
 8018ed0:	1417      	asrs	r7, r2, #16
 8018ed2:	e7e0      	b.n	8018e96 <__mdiff+0xc6>
 8018ed4:	3e01      	subs	r6, #1
 8018ed6:	e7ea      	b.n	8018eae <__mdiff+0xde>
 8018ed8:	0801b1ac 	.word	0x0801b1ac
 8018edc:	0801b2a0 	.word	0x0801b2a0

08018ee0 <__ulp>:
 8018ee0:	b082      	sub	sp, #8
 8018ee2:	ed8d 0b00 	vstr	d0, [sp]
 8018ee6:	9b01      	ldr	r3, [sp, #4]
 8018ee8:	4912      	ldr	r1, [pc, #72]	; (8018f34 <__ulp+0x54>)
 8018eea:	4019      	ands	r1, r3
 8018eec:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8018ef0:	2900      	cmp	r1, #0
 8018ef2:	dd05      	ble.n	8018f00 <__ulp+0x20>
 8018ef4:	2200      	movs	r2, #0
 8018ef6:	460b      	mov	r3, r1
 8018ef8:	ec43 2b10 	vmov	d0, r2, r3
 8018efc:	b002      	add	sp, #8
 8018efe:	4770      	bx	lr
 8018f00:	4249      	negs	r1, r1
 8018f02:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8018f06:	ea4f 5021 	mov.w	r0, r1, asr #20
 8018f0a:	f04f 0200 	mov.w	r2, #0
 8018f0e:	f04f 0300 	mov.w	r3, #0
 8018f12:	da04      	bge.n	8018f1e <__ulp+0x3e>
 8018f14:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8018f18:	fa41 f300 	asr.w	r3, r1, r0
 8018f1c:	e7ec      	b.n	8018ef8 <__ulp+0x18>
 8018f1e:	f1a0 0114 	sub.w	r1, r0, #20
 8018f22:	291e      	cmp	r1, #30
 8018f24:	bfda      	itte	le
 8018f26:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8018f2a:	fa20 f101 	lsrle.w	r1, r0, r1
 8018f2e:	2101      	movgt	r1, #1
 8018f30:	460a      	mov	r2, r1
 8018f32:	e7e1      	b.n	8018ef8 <__ulp+0x18>
 8018f34:	7ff00000 	.word	0x7ff00000

08018f38 <__b2d>:
 8018f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f3a:	6905      	ldr	r5, [r0, #16]
 8018f3c:	f100 0714 	add.w	r7, r0, #20
 8018f40:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018f44:	1f2e      	subs	r6, r5, #4
 8018f46:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018f4a:	4620      	mov	r0, r4
 8018f4c:	f7ff fd52 	bl	80189f4 <__hi0bits>
 8018f50:	f1c0 0320 	rsb	r3, r0, #32
 8018f54:	280a      	cmp	r0, #10
 8018f56:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8018fd4 <__b2d+0x9c>
 8018f5a:	600b      	str	r3, [r1, #0]
 8018f5c:	dc14      	bgt.n	8018f88 <__b2d+0x50>
 8018f5e:	f1c0 0e0b 	rsb	lr, r0, #11
 8018f62:	fa24 f10e 	lsr.w	r1, r4, lr
 8018f66:	42b7      	cmp	r7, r6
 8018f68:	ea41 030c 	orr.w	r3, r1, ip
 8018f6c:	bf34      	ite	cc
 8018f6e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018f72:	2100      	movcs	r1, #0
 8018f74:	3015      	adds	r0, #21
 8018f76:	fa04 f000 	lsl.w	r0, r4, r0
 8018f7a:	fa21 f10e 	lsr.w	r1, r1, lr
 8018f7e:	ea40 0201 	orr.w	r2, r0, r1
 8018f82:	ec43 2b10 	vmov	d0, r2, r3
 8018f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f88:	42b7      	cmp	r7, r6
 8018f8a:	bf3a      	itte	cc
 8018f8c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018f90:	f1a5 0608 	subcc.w	r6, r5, #8
 8018f94:	2100      	movcs	r1, #0
 8018f96:	380b      	subs	r0, #11
 8018f98:	d017      	beq.n	8018fca <__b2d+0x92>
 8018f9a:	f1c0 0c20 	rsb	ip, r0, #32
 8018f9e:	fa04 f500 	lsl.w	r5, r4, r0
 8018fa2:	42be      	cmp	r6, r7
 8018fa4:	fa21 f40c 	lsr.w	r4, r1, ip
 8018fa8:	ea45 0504 	orr.w	r5, r5, r4
 8018fac:	bf8c      	ite	hi
 8018fae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018fb2:	2400      	movls	r4, #0
 8018fb4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8018fb8:	fa01 f000 	lsl.w	r0, r1, r0
 8018fbc:	fa24 f40c 	lsr.w	r4, r4, ip
 8018fc0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018fc4:	ea40 0204 	orr.w	r2, r0, r4
 8018fc8:	e7db      	b.n	8018f82 <__b2d+0x4a>
 8018fca:	ea44 030c 	orr.w	r3, r4, ip
 8018fce:	460a      	mov	r2, r1
 8018fd0:	e7d7      	b.n	8018f82 <__b2d+0x4a>
 8018fd2:	bf00      	nop
 8018fd4:	3ff00000 	.word	0x3ff00000

08018fd8 <__d2b>:
 8018fd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018fdc:	4689      	mov	r9, r1
 8018fde:	2101      	movs	r1, #1
 8018fe0:	ec57 6b10 	vmov	r6, r7, d0
 8018fe4:	4690      	mov	r8, r2
 8018fe6:	f7ff fc0f 	bl	8018808 <_Balloc>
 8018fea:	4604      	mov	r4, r0
 8018fec:	b930      	cbnz	r0, 8018ffc <__d2b+0x24>
 8018fee:	4602      	mov	r2, r0
 8018ff0:	4b25      	ldr	r3, [pc, #148]	; (8019088 <__d2b+0xb0>)
 8018ff2:	4826      	ldr	r0, [pc, #152]	; (801908c <__d2b+0xb4>)
 8018ff4:	f240 310a 	movw	r1, #778	; 0x30a
 8018ff8:	f001 f94c 	bl	801a294 <__assert_func>
 8018ffc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019000:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019004:	bb35      	cbnz	r5, 8019054 <__d2b+0x7c>
 8019006:	2e00      	cmp	r6, #0
 8019008:	9301      	str	r3, [sp, #4]
 801900a:	d028      	beq.n	801905e <__d2b+0x86>
 801900c:	4668      	mov	r0, sp
 801900e:	9600      	str	r6, [sp, #0]
 8019010:	f7ff fd10 	bl	8018a34 <__lo0bits>
 8019014:	9900      	ldr	r1, [sp, #0]
 8019016:	b300      	cbz	r0, 801905a <__d2b+0x82>
 8019018:	9a01      	ldr	r2, [sp, #4]
 801901a:	f1c0 0320 	rsb	r3, r0, #32
 801901e:	fa02 f303 	lsl.w	r3, r2, r3
 8019022:	430b      	orrs	r3, r1
 8019024:	40c2      	lsrs	r2, r0
 8019026:	6163      	str	r3, [r4, #20]
 8019028:	9201      	str	r2, [sp, #4]
 801902a:	9b01      	ldr	r3, [sp, #4]
 801902c:	61a3      	str	r3, [r4, #24]
 801902e:	2b00      	cmp	r3, #0
 8019030:	bf14      	ite	ne
 8019032:	2202      	movne	r2, #2
 8019034:	2201      	moveq	r2, #1
 8019036:	6122      	str	r2, [r4, #16]
 8019038:	b1d5      	cbz	r5, 8019070 <__d2b+0x98>
 801903a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801903e:	4405      	add	r5, r0
 8019040:	f8c9 5000 	str.w	r5, [r9]
 8019044:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019048:	f8c8 0000 	str.w	r0, [r8]
 801904c:	4620      	mov	r0, r4
 801904e:	b003      	add	sp, #12
 8019050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019054:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019058:	e7d5      	b.n	8019006 <__d2b+0x2e>
 801905a:	6161      	str	r1, [r4, #20]
 801905c:	e7e5      	b.n	801902a <__d2b+0x52>
 801905e:	a801      	add	r0, sp, #4
 8019060:	f7ff fce8 	bl	8018a34 <__lo0bits>
 8019064:	9b01      	ldr	r3, [sp, #4]
 8019066:	6163      	str	r3, [r4, #20]
 8019068:	2201      	movs	r2, #1
 801906a:	6122      	str	r2, [r4, #16]
 801906c:	3020      	adds	r0, #32
 801906e:	e7e3      	b.n	8019038 <__d2b+0x60>
 8019070:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019074:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019078:	f8c9 0000 	str.w	r0, [r9]
 801907c:	6918      	ldr	r0, [r3, #16]
 801907e:	f7ff fcb9 	bl	80189f4 <__hi0bits>
 8019082:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019086:	e7df      	b.n	8019048 <__d2b+0x70>
 8019088:	0801b1ac 	.word	0x0801b1ac
 801908c:	0801b2a0 	.word	0x0801b2a0

08019090 <__ratio>:
 8019090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019094:	4688      	mov	r8, r1
 8019096:	4669      	mov	r1, sp
 8019098:	4681      	mov	r9, r0
 801909a:	f7ff ff4d 	bl	8018f38 <__b2d>
 801909e:	a901      	add	r1, sp, #4
 80190a0:	4640      	mov	r0, r8
 80190a2:	ec55 4b10 	vmov	r4, r5, d0
 80190a6:	f7ff ff47 	bl	8018f38 <__b2d>
 80190aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80190ae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80190b2:	eba3 0c02 	sub.w	ip, r3, r2
 80190b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80190ba:	1a9b      	subs	r3, r3, r2
 80190bc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80190c0:	ec51 0b10 	vmov	r0, r1, d0
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	bfd6      	itet	le
 80190c8:	460a      	movle	r2, r1
 80190ca:	462a      	movgt	r2, r5
 80190cc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80190d0:	468b      	mov	fp, r1
 80190d2:	462f      	mov	r7, r5
 80190d4:	bfd4      	ite	le
 80190d6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80190da:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80190de:	4620      	mov	r0, r4
 80190e0:	ee10 2a10 	vmov	r2, s0
 80190e4:	465b      	mov	r3, fp
 80190e6:	4639      	mov	r1, r7
 80190e8:	f7e7 fbc8 	bl	800087c <__aeabi_ddiv>
 80190ec:	ec41 0b10 	vmov	d0, r0, r1
 80190f0:	b003      	add	sp, #12
 80190f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080190f6 <__copybits>:
 80190f6:	3901      	subs	r1, #1
 80190f8:	b570      	push	{r4, r5, r6, lr}
 80190fa:	1149      	asrs	r1, r1, #5
 80190fc:	6914      	ldr	r4, [r2, #16]
 80190fe:	3101      	adds	r1, #1
 8019100:	f102 0314 	add.w	r3, r2, #20
 8019104:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019108:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801910c:	1f05      	subs	r5, r0, #4
 801910e:	42a3      	cmp	r3, r4
 8019110:	d30c      	bcc.n	801912c <__copybits+0x36>
 8019112:	1aa3      	subs	r3, r4, r2
 8019114:	3b11      	subs	r3, #17
 8019116:	f023 0303 	bic.w	r3, r3, #3
 801911a:	3211      	adds	r2, #17
 801911c:	42a2      	cmp	r2, r4
 801911e:	bf88      	it	hi
 8019120:	2300      	movhi	r3, #0
 8019122:	4418      	add	r0, r3
 8019124:	2300      	movs	r3, #0
 8019126:	4288      	cmp	r0, r1
 8019128:	d305      	bcc.n	8019136 <__copybits+0x40>
 801912a:	bd70      	pop	{r4, r5, r6, pc}
 801912c:	f853 6b04 	ldr.w	r6, [r3], #4
 8019130:	f845 6f04 	str.w	r6, [r5, #4]!
 8019134:	e7eb      	b.n	801910e <__copybits+0x18>
 8019136:	f840 3b04 	str.w	r3, [r0], #4
 801913a:	e7f4      	b.n	8019126 <__copybits+0x30>

0801913c <__any_on>:
 801913c:	f100 0214 	add.w	r2, r0, #20
 8019140:	6900      	ldr	r0, [r0, #16]
 8019142:	114b      	asrs	r3, r1, #5
 8019144:	4298      	cmp	r0, r3
 8019146:	b510      	push	{r4, lr}
 8019148:	db11      	blt.n	801916e <__any_on+0x32>
 801914a:	dd0a      	ble.n	8019162 <__any_on+0x26>
 801914c:	f011 011f 	ands.w	r1, r1, #31
 8019150:	d007      	beq.n	8019162 <__any_on+0x26>
 8019152:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019156:	fa24 f001 	lsr.w	r0, r4, r1
 801915a:	fa00 f101 	lsl.w	r1, r0, r1
 801915e:	428c      	cmp	r4, r1
 8019160:	d10b      	bne.n	801917a <__any_on+0x3e>
 8019162:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019166:	4293      	cmp	r3, r2
 8019168:	d803      	bhi.n	8019172 <__any_on+0x36>
 801916a:	2000      	movs	r0, #0
 801916c:	bd10      	pop	{r4, pc}
 801916e:	4603      	mov	r3, r0
 8019170:	e7f7      	b.n	8019162 <__any_on+0x26>
 8019172:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019176:	2900      	cmp	r1, #0
 8019178:	d0f5      	beq.n	8019166 <__any_on+0x2a>
 801917a:	2001      	movs	r0, #1
 801917c:	e7f6      	b.n	801916c <__any_on+0x30>

0801917e <_calloc_r>:
 801917e:	b513      	push	{r0, r1, r4, lr}
 8019180:	434a      	muls	r2, r1
 8019182:	4611      	mov	r1, r2
 8019184:	9201      	str	r2, [sp, #4]
 8019186:	f000 f859 	bl	801923c <_malloc_r>
 801918a:	4604      	mov	r4, r0
 801918c:	b118      	cbz	r0, 8019196 <_calloc_r+0x18>
 801918e:	9a01      	ldr	r2, [sp, #4]
 8019190:	2100      	movs	r1, #0
 8019192:	f7fc f9e7 	bl	8015564 <memset>
 8019196:	4620      	mov	r0, r4
 8019198:	b002      	add	sp, #8
 801919a:	bd10      	pop	{r4, pc}

0801919c <_free_r>:
 801919c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801919e:	2900      	cmp	r1, #0
 80191a0:	d048      	beq.n	8019234 <_free_r+0x98>
 80191a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80191a6:	9001      	str	r0, [sp, #4]
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	f1a1 0404 	sub.w	r4, r1, #4
 80191ae:	bfb8      	it	lt
 80191b0:	18e4      	addlt	r4, r4, r3
 80191b2:	f001 f9df 	bl	801a574 <__malloc_lock>
 80191b6:	4a20      	ldr	r2, [pc, #128]	; (8019238 <_free_r+0x9c>)
 80191b8:	9801      	ldr	r0, [sp, #4]
 80191ba:	6813      	ldr	r3, [r2, #0]
 80191bc:	4615      	mov	r5, r2
 80191be:	b933      	cbnz	r3, 80191ce <_free_r+0x32>
 80191c0:	6063      	str	r3, [r4, #4]
 80191c2:	6014      	str	r4, [r2, #0]
 80191c4:	b003      	add	sp, #12
 80191c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80191ca:	f001 b9d9 	b.w	801a580 <__malloc_unlock>
 80191ce:	42a3      	cmp	r3, r4
 80191d0:	d90b      	bls.n	80191ea <_free_r+0x4e>
 80191d2:	6821      	ldr	r1, [r4, #0]
 80191d4:	1862      	adds	r2, r4, r1
 80191d6:	4293      	cmp	r3, r2
 80191d8:	bf04      	itt	eq
 80191da:	681a      	ldreq	r2, [r3, #0]
 80191dc:	685b      	ldreq	r3, [r3, #4]
 80191de:	6063      	str	r3, [r4, #4]
 80191e0:	bf04      	itt	eq
 80191e2:	1852      	addeq	r2, r2, r1
 80191e4:	6022      	streq	r2, [r4, #0]
 80191e6:	602c      	str	r4, [r5, #0]
 80191e8:	e7ec      	b.n	80191c4 <_free_r+0x28>
 80191ea:	461a      	mov	r2, r3
 80191ec:	685b      	ldr	r3, [r3, #4]
 80191ee:	b10b      	cbz	r3, 80191f4 <_free_r+0x58>
 80191f0:	42a3      	cmp	r3, r4
 80191f2:	d9fa      	bls.n	80191ea <_free_r+0x4e>
 80191f4:	6811      	ldr	r1, [r2, #0]
 80191f6:	1855      	adds	r5, r2, r1
 80191f8:	42a5      	cmp	r5, r4
 80191fa:	d10b      	bne.n	8019214 <_free_r+0x78>
 80191fc:	6824      	ldr	r4, [r4, #0]
 80191fe:	4421      	add	r1, r4
 8019200:	1854      	adds	r4, r2, r1
 8019202:	42a3      	cmp	r3, r4
 8019204:	6011      	str	r1, [r2, #0]
 8019206:	d1dd      	bne.n	80191c4 <_free_r+0x28>
 8019208:	681c      	ldr	r4, [r3, #0]
 801920a:	685b      	ldr	r3, [r3, #4]
 801920c:	6053      	str	r3, [r2, #4]
 801920e:	4421      	add	r1, r4
 8019210:	6011      	str	r1, [r2, #0]
 8019212:	e7d7      	b.n	80191c4 <_free_r+0x28>
 8019214:	d902      	bls.n	801921c <_free_r+0x80>
 8019216:	230c      	movs	r3, #12
 8019218:	6003      	str	r3, [r0, #0]
 801921a:	e7d3      	b.n	80191c4 <_free_r+0x28>
 801921c:	6825      	ldr	r5, [r4, #0]
 801921e:	1961      	adds	r1, r4, r5
 8019220:	428b      	cmp	r3, r1
 8019222:	bf04      	itt	eq
 8019224:	6819      	ldreq	r1, [r3, #0]
 8019226:	685b      	ldreq	r3, [r3, #4]
 8019228:	6063      	str	r3, [r4, #4]
 801922a:	bf04      	itt	eq
 801922c:	1949      	addeq	r1, r1, r5
 801922e:	6021      	streq	r1, [r4, #0]
 8019230:	6054      	str	r4, [r2, #4]
 8019232:	e7c7      	b.n	80191c4 <_free_r+0x28>
 8019234:	b003      	add	sp, #12
 8019236:	bd30      	pop	{r4, r5, pc}
 8019238:	2003d4b4 	.word	0x2003d4b4

0801923c <_malloc_r>:
 801923c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801923e:	1ccd      	adds	r5, r1, #3
 8019240:	f025 0503 	bic.w	r5, r5, #3
 8019244:	3508      	adds	r5, #8
 8019246:	2d0c      	cmp	r5, #12
 8019248:	bf38      	it	cc
 801924a:	250c      	movcc	r5, #12
 801924c:	2d00      	cmp	r5, #0
 801924e:	4606      	mov	r6, r0
 8019250:	db01      	blt.n	8019256 <_malloc_r+0x1a>
 8019252:	42a9      	cmp	r1, r5
 8019254:	d903      	bls.n	801925e <_malloc_r+0x22>
 8019256:	230c      	movs	r3, #12
 8019258:	6033      	str	r3, [r6, #0]
 801925a:	2000      	movs	r0, #0
 801925c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801925e:	f001 f989 	bl	801a574 <__malloc_lock>
 8019262:	4921      	ldr	r1, [pc, #132]	; (80192e8 <_malloc_r+0xac>)
 8019264:	680a      	ldr	r2, [r1, #0]
 8019266:	4614      	mov	r4, r2
 8019268:	b99c      	cbnz	r4, 8019292 <_malloc_r+0x56>
 801926a:	4f20      	ldr	r7, [pc, #128]	; (80192ec <_malloc_r+0xb0>)
 801926c:	683b      	ldr	r3, [r7, #0]
 801926e:	b923      	cbnz	r3, 801927a <_malloc_r+0x3e>
 8019270:	4621      	mov	r1, r4
 8019272:	4630      	mov	r0, r6
 8019274:	f000 fe2c 	bl	8019ed0 <_sbrk_r>
 8019278:	6038      	str	r0, [r7, #0]
 801927a:	4629      	mov	r1, r5
 801927c:	4630      	mov	r0, r6
 801927e:	f000 fe27 	bl	8019ed0 <_sbrk_r>
 8019282:	1c43      	adds	r3, r0, #1
 8019284:	d123      	bne.n	80192ce <_malloc_r+0x92>
 8019286:	230c      	movs	r3, #12
 8019288:	6033      	str	r3, [r6, #0]
 801928a:	4630      	mov	r0, r6
 801928c:	f001 f978 	bl	801a580 <__malloc_unlock>
 8019290:	e7e3      	b.n	801925a <_malloc_r+0x1e>
 8019292:	6823      	ldr	r3, [r4, #0]
 8019294:	1b5b      	subs	r3, r3, r5
 8019296:	d417      	bmi.n	80192c8 <_malloc_r+0x8c>
 8019298:	2b0b      	cmp	r3, #11
 801929a:	d903      	bls.n	80192a4 <_malloc_r+0x68>
 801929c:	6023      	str	r3, [r4, #0]
 801929e:	441c      	add	r4, r3
 80192a0:	6025      	str	r5, [r4, #0]
 80192a2:	e004      	b.n	80192ae <_malloc_r+0x72>
 80192a4:	6863      	ldr	r3, [r4, #4]
 80192a6:	42a2      	cmp	r2, r4
 80192a8:	bf0c      	ite	eq
 80192aa:	600b      	streq	r3, [r1, #0]
 80192ac:	6053      	strne	r3, [r2, #4]
 80192ae:	4630      	mov	r0, r6
 80192b0:	f001 f966 	bl	801a580 <__malloc_unlock>
 80192b4:	f104 000b 	add.w	r0, r4, #11
 80192b8:	1d23      	adds	r3, r4, #4
 80192ba:	f020 0007 	bic.w	r0, r0, #7
 80192be:	1ac2      	subs	r2, r0, r3
 80192c0:	d0cc      	beq.n	801925c <_malloc_r+0x20>
 80192c2:	1a1b      	subs	r3, r3, r0
 80192c4:	50a3      	str	r3, [r4, r2]
 80192c6:	e7c9      	b.n	801925c <_malloc_r+0x20>
 80192c8:	4622      	mov	r2, r4
 80192ca:	6864      	ldr	r4, [r4, #4]
 80192cc:	e7cc      	b.n	8019268 <_malloc_r+0x2c>
 80192ce:	1cc4      	adds	r4, r0, #3
 80192d0:	f024 0403 	bic.w	r4, r4, #3
 80192d4:	42a0      	cmp	r0, r4
 80192d6:	d0e3      	beq.n	80192a0 <_malloc_r+0x64>
 80192d8:	1a21      	subs	r1, r4, r0
 80192da:	4630      	mov	r0, r6
 80192dc:	f000 fdf8 	bl	8019ed0 <_sbrk_r>
 80192e0:	3001      	adds	r0, #1
 80192e2:	d1dd      	bne.n	80192a0 <_malloc_r+0x64>
 80192e4:	e7cf      	b.n	8019286 <_malloc_r+0x4a>
 80192e6:	bf00      	nop
 80192e8:	2003d4b4 	.word	0x2003d4b4
 80192ec:	2003d4b8 	.word	0x2003d4b8

080192f0 <__ssputs_r>:
 80192f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80192f4:	688e      	ldr	r6, [r1, #8]
 80192f6:	429e      	cmp	r6, r3
 80192f8:	4682      	mov	sl, r0
 80192fa:	460c      	mov	r4, r1
 80192fc:	4690      	mov	r8, r2
 80192fe:	461f      	mov	r7, r3
 8019300:	d838      	bhi.n	8019374 <__ssputs_r+0x84>
 8019302:	898a      	ldrh	r2, [r1, #12]
 8019304:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019308:	d032      	beq.n	8019370 <__ssputs_r+0x80>
 801930a:	6825      	ldr	r5, [r4, #0]
 801930c:	6909      	ldr	r1, [r1, #16]
 801930e:	eba5 0901 	sub.w	r9, r5, r1
 8019312:	6965      	ldr	r5, [r4, #20]
 8019314:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019318:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801931c:	3301      	adds	r3, #1
 801931e:	444b      	add	r3, r9
 8019320:	106d      	asrs	r5, r5, #1
 8019322:	429d      	cmp	r5, r3
 8019324:	bf38      	it	cc
 8019326:	461d      	movcc	r5, r3
 8019328:	0553      	lsls	r3, r2, #21
 801932a:	d531      	bpl.n	8019390 <__ssputs_r+0xa0>
 801932c:	4629      	mov	r1, r5
 801932e:	f7ff ff85 	bl	801923c <_malloc_r>
 8019332:	4606      	mov	r6, r0
 8019334:	b950      	cbnz	r0, 801934c <__ssputs_r+0x5c>
 8019336:	230c      	movs	r3, #12
 8019338:	f8ca 3000 	str.w	r3, [sl]
 801933c:	89a3      	ldrh	r3, [r4, #12]
 801933e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019342:	81a3      	strh	r3, [r4, #12]
 8019344:	f04f 30ff 	mov.w	r0, #4294967295
 8019348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801934c:	6921      	ldr	r1, [r4, #16]
 801934e:	464a      	mov	r2, r9
 8019350:	f7fc f8fa 	bl	8015548 <memcpy>
 8019354:	89a3      	ldrh	r3, [r4, #12]
 8019356:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801935a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801935e:	81a3      	strh	r3, [r4, #12]
 8019360:	6126      	str	r6, [r4, #16]
 8019362:	6165      	str	r5, [r4, #20]
 8019364:	444e      	add	r6, r9
 8019366:	eba5 0509 	sub.w	r5, r5, r9
 801936a:	6026      	str	r6, [r4, #0]
 801936c:	60a5      	str	r5, [r4, #8]
 801936e:	463e      	mov	r6, r7
 8019370:	42be      	cmp	r6, r7
 8019372:	d900      	bls.n	8019376 <__ssputs_r+0x86>
 8019374:	463e      	mov	r6, r7
 8019376:	4632      	mov	r2, r6
 8019378:	6820      	ldr	r0, [r4, #0]
 801937a:	4641      	mov	r1, r8
 801937c:	f001 f8e0 	bl	801a540 <memmove>
 8019380:	68a3      	ldr	r3, [r4, #8]
 8019382:	6822      	ldr	r2, [r4, #0]
 8019384:	1b9b      	subs	r3, r3, r6
 8019386:	4432      	add	r2, r6
 8019388:	60a3      	str	r3, [r4, #8]
 801938a:	6022      	str	r2, [r4, #0]
 801938c:	2000      	movs	r0, #0
 801938e:	e7db      	b.n	8019348 <__ssputs_r+0x58>
 8019390:	462a      	mov	r2, r5
 8019392:	f001 f8fb 	bl	801a58c <_realloc_r>
 8019396:	4606      	mov	r6, r0
 8019398:	2800      	cmp	r0, #0
 801939a:	d1e1      	bne.n	8019360 <__ssputs_r+0x70>
 801939c:	6921      	ldr	r1, [r4, #16]
 801939e:	4650      	mov	r0, sl
 80193a0:	f7ff fefc 	bl	801919c <_free_r>
 80193a4:	e7c7      	b.n	8019336 <__ssputs_r+0x46>
	...

080193a8 <_svfiprintf_r>:
 80193a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193ac:	4698      	mov	r8, r3
 80193ae:	898b      	ldrh	r3, [r1, #12]
 80193b0:	061b      	lsls	r3, r3, #24
 80193b2:	b09d      	sub	sp, #116	; 0x74
 80193b4:	4607      	mov	r7, r0
 80193b6:	460d      	mov	r5, r1
 80193b8:	4614      	mov	r4, r2
 80193ba:	d50e      	bpl.n	80193da <_svfiprintf_r+0x32>
 80193bc:	690b      	ldr	r3, [r1, #16]
 80193be:	b963      	cbnz	r3, 80193da <_svfiprintf_r+0x32>
 80193c0:	2140      	movs	r1, #64	; 0x40
 80193c2:	f7ff ff3b 	bl	801923c <_malloc_r>
 80193c6:	6028      	str	r0, [r5, #0]
 80193c8:	6128      	str	r0, [r5, #16]
 80193ca:	b920      	cbnz	r0, 80193d6 <_svfiprintf_r+0x2e>
 80193cc:	230c      	movs	r3, #12
 80193ce:	603b      	str	r3, [r7, #0]
 80193d0:	f04f 30ff 	mov.w	r0, #4294967295
 80193d4:	e0d1      	b.n	801957a <_svfiprintf_r+0x1d2>
 80193d6:	2340      	movs	r3, #64	; 0x40
 80193d8:	616b      	str	r3, [r5, #20]
 80193da:	2300      	movs	r3, #0
 80193dc:	9309      	str	r3, [sp, #36]	; 0x24
 80193de:	2320      	movs	r3, #32
 80193e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80193e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80193e8:	2330      	movs	r3, #48	; 0x30
 80193ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019594 <_svfiprintf_r+0x1ec>
 80193ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80193f2:	f04f 0901 	mov.w	r9, #1
 80193f6:	4623      	mov	r3, r4
 80193f8:	469a      	mov	sl, r3
 80193fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80193fe:	b10a      	cbz	r2, 8019404 <_svfiprintf_r+0x5c>
 8019400:	2a25      	cmp	r2, #37	; 0x25
 8019402:	d1f9      	bne.n	80193f8 <_svfiprintf_r+0x50>
 8019404:	ebba 0b04 	subs.w	fp, sl, r4
 8019408:	d00b      	beq.n	8019422 <_svfiprintf_r+0x7a>
 801940a:	465b      	mov	r3, fp
 801940c:	4622      	mov	r2, r4
 801940e:	4629      	mov	r1, r5
 8019410:	4638      	mov	r0, r7
 8019412:	f7ff ff6d 	bl	80192f0 <__ssputs_r>
 8019416:	3001      	adds	r0, #1
 8019418:	f000 80aa 	beq.w	8019570 <_svfiprintf_r+0x1c8>
 801941c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801941e:	445a      	add	r2, fp
 8019420:	9209      	str	r2, [sp, #36]	; 0x24
 8019422:	f89a 3000 	ldrb.w	r3, [sl]
 8019426:	2b00      	cmp	r3, #0
 8019428:	f000 80a2 	beq.w	8019570 <_svfiprintf_r+0x1c8>
 801942c:	2300      	movs	r3, #0
 801942e:	f04f 32ff 	mov.w	r2, #4294967295
 8019432:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019436:	f10a 0a01 	add.w	sl, sl, #1
 801943a:	9304      	str	r3, [sp, #16]
 801943c:	9307      	str	r3, [sp, #28]
 801943e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019442:	931a      	str	r3, [sp, #104]	; 0x68
 8019444:	4654      	mov	r4, sl
 8019446:	2205      	movs	r2, #5
 8019448:	f814 1b01 	ldrb.w	r1, [r4], #1
 801944c:	4851      	ldr	r0, [pc, #324]	; (8019594 <_svfiprintf_r+0x1ec>)
 801944e:	f7e6 fedf 	bl	8000210 <memchr>
 8019452:	9a04      	ldr	r2, [sp, #16]
 8019454:	b9d8      	cbnz	r0, 801948e <_svfiprintf_r+0xe6>
 8019456:	06d0      	lsls	r0, r2, #27
 8019458:	bf44      	itt	mi
 801945a:	2320      	movmi	r3, #32
 801945c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019460:	0711      	lsls	r1, r2, #28
 8019462:	bf44      	itt	mi
 8019464:	232b      	movmi	r3, #43	; 0x2b
 8019466:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801946a:	f89a 3000 	ldrb.w	r3, [sl]
 801946e:	2b2a      	cmp	r3, #42	; 0x2a
 8019470:	d015      	beq.n	801949e <_svfiprintf_r+0xf6>
 8019472:	9a07      	ldr	r2, [sp, #28]
 8019474:	4654      	mov	r4, sl
 8019476:	2000      	movs	r0, #0
 8019478:	f04f 0c0a 	mov.w	ip, #10
 801947c:	4621      	mov	r1, r4
 801947e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019482:	3b30      	subs	r3, #48	; 0x30
 8019484:	2b09      	cmp	r3, #9
 8019486:	d94e      	bls.n	8019526 <_svfiprintf_r+0x17e>
 8019488:	b1b0      	cbz	r0, 80194b8 <_svfiprintf_r+0x110>
 801948a:	9207      	str	r2, [sp, #28]
 801948c:	e014      	b.n	80194b8 <_svfiprintf_r+0x110>
 801948e:	eba0 0308 	sub.w	r3, r0, r8
 8019492:	fa09 f303 	lsl.w	r3, r9, r3
 8019496:	4313      	orrs	r3, r2
 8019498:	9304      	str	r3, [sp, #16]
 801949a:	46a2      	mov	sl, r4
 801949c:	e7d2      	b.n	8019444 <_svfiprintf_r+0x9c>
 801949e:	9b03      	ldr	r3, [sp, #12]
 80194a0:	1d19      	adds	r1, r3, #4
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	9103      	str	r1, [sp, #12]
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	bfbb      	ittet	lt
 80194aa:	425b      	neglt	r3, r3
 80194ac:	f042 0202 	orrlt.w	r2, r2, #2
 80194b0:	9307      	strge	r3, [sp, #28]
 80194b2:	9307      	strlt	r3, [sp, #28]
 80194b4:	bfb8      	it	lt
 80194b6:	9204      	strlt	r2, [sp, #16]
 80194b8:	7823      	ldrb	r3, [r4, #0]
 80194ba:	2b2e      	cmp	r3, #46	; 0x2e
 80194bc:	d10c      	bne.n	80194d8 <_svfiprintf_r+0x130>
 80194be:	7863      	ldrb	r3, [r4, #1]
 80194c0:	2b2a      	cmp	r3, #42	; 0x2a
 80194c2:	d135      	bne.n	8019530 <_svfiprintf_r+0x188>
 80194c4:	9b03      	ldr	r3, [sp, #12]
 80194c6:	1d1a      	adds	r2, r3, #4
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	9203      	str	r2, [sp, #12]
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	bfb8      	it	lt
 80194d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80194d4:	3402      	adds	r4, #2
 80194d6:	9305      	str	r3, [sp, #20]
 80194d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80195a4 <_svfiprintf_r+0x1fc>
 80194dc:	7821      	ldrb	r1, [r4, #0]
 80194de:	2203      	movs	r2, #3
 80194e0:	4650      	mov	r0, sl
 80194e2:	f7e6 fe95 	bl	8000210 <memchr>
 80194e6:	b140      	cbz	r0, 80194fa <_svfiprintf_r+0x152>
 80194e8:	2340      	movs	r3, #64	; 0x40
 80194ea:	eba0 000a 	sub.w	r0, r0, sl
 80194ee:	fa03 f000 	lsl.w	r0, r3, r0
 80194f2:	9b04      	ldr	r3, [sp, #16]
 80194f4:	4303      	orrs	r3, r0
 80194f6:	3401      	adds	r4, #1
 80194f8:	9304      	str	r3, [sp, #16]
 80194fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80194fe:	4826      	ldr	r0, [pc, #152]	; (8019598 <_svfiprintf_r+0x1f0>)
 8019500:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019504:	2206      	movs	r2, #6
 8019506:	f7e6 fe83 	bl	8000210 <memchr>
 801950a:	2800      	cmp	r0, #0
 801950c:	d038      	beq.n	8019580 <_svfiprintf_r+0x1d8>
 801950e:	4b23      	ldr	r3, [pc, #140]	; (801959c <_svfiprintf_r+0x1f4>)
 8019510:	bb1b      	cbnz	r3, 801955a <_svfiprintf_r+0x1b2>
 8019512:	9b03      	ldr	r3, [sp, #12]
 8019514:	3307      	adds	r3, #7
 8019516:	f023 0307 	bic.w	r3, r3, #7
 801951a:	3308      	adds	r3, #8
 801951c:	9303      	str	r3, [sp, #12]
 801951e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019520:	4433      	add	r3, r6
 8019522:	9309      	str	r3, [sp, #36]	; 0x24
 8019524:	e767      	b.n	80193f6 <_svfiprintf_r+0x4e>
 8019526:	fb0c 3202 	mla	r2, ip, r2, r3
 801952a:	460c      	mov	r4, r1
 801952c:	2001      	movs	r0, #1
 801952e:	e7a5      	b.n	801947c <_svfiprintf_r+0xd4>
 8019530:	2300      	movs	r3, #0
 8019532:	3401      	adds	r4, #1
 8019534:	9305      	str	r3, [sp, #20]
 8019536:	4619      	mov	r1, r3
 8019538:	f04f 0c0a 	mov.w	ip, #10
 801953c:	4620      	mov	r0, r4
 801953e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019542:	3a30      	subs	r2, #48	; 0x30
 8019544:	2a09      	cmp	r2, #9
 8019546:	d903      	bls.n	8019550 <_svfiprintf_r+0x1a8>
 8019548:	2b00      	cmp	r3, #0
 801954a:	d0c5      	beq.n	80194d8 <_svfiprintf_r+0x130>
 801954c:	9105      	str	r1, [sp, #20]
 801954e:	e7c3      	b.n	80194d8 <_svfiprintf_r+0x130>
 8019550:	fb0c 2101 	mla	r1, ip, r1, r2
 8019554:	4604      	mov	r4, r0
 8019556:	2301      	movs	r3, #1
 8019558:	e7f0      	b.n	801953c <_svfiprintf_r+0x194>
 801955a:	ab03      	add	r3, sp, #12
 801955c:	9300      	str	r3, [sp, #0]
 801955e:	462a      	mov	r2, r5
 8019560:	4b0f      	ldr	r3, [pc, #60]	; (80195a0 <_svfiprintf_r+0x1f8>)
 8019562:	a904      	add	r1, sp, #16
 8019564:	4638      	mov	r0, r7
 8019566:	f7fc f8a5 	bl	80156b4 <_printf_float>
 801956a:	1c42      	adds	r2, r0, #1
 801956c:	4606      	mov	r6, r0
 801956e:	d1d6      	bne.n	801951e <_svfiprintf_r+0x176>
 8019570:	89ab      	ldrh	r3, [r5, #12]
 8019572:	065b      	lsls	r3, r3, #25
 8019574:	f53f af2c 	bmi.w	80193d0 <_svfiprintf_r+0x28>
 8019578:	9809      	ldr	r0, [sp, #36]	; 0x24
 801957a:	b01d      	add	sp, #116	; 0x74
 801957c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019580:	ab03      	add	r3, sp, #12
 8019582:	9300      	str	r3, [sp, #0]
 8019584:	462a      	mov	r2, r5
 8019586:	4b06      	ldr	r3, [pc, #24]	; (80195a0 <_svfiprintf_r+0x1f8>)
 8019588:	a904      	add	r1, sp, #16
 801958a:	4638      	mov	r0, r7
 801958c:	f7fc fb36 	bl	8015bfc <_printf_i>
 8019590:	e7eb      	b.n	801956a <_svfiprintf_r+0x1c2>
 8019592:	bf00      	nop
 8019594:	0801b3fc 	.word	0x0801b3fc
 8019598:	0801b406 	.word	0x0801b406
 801959c:	080156b5 	.word	0x080156b5
 80195a0:	080192f1 	.word	0x080192f1
 80195a4:	0801b402 	.word	0x0801b402

080195a8 <_sungetc_r>:
 80195a8:	b538      	push	{r3, r4, r5, lr}
 80195aa:	1c4b      	adds	r3, r1, #1
 80195ac:	4614      	mov	r4, r2
 80195ae:	d103      	bne.n	80195b8 <_sungetc_r+0x10>
 80195b0:	f04f 35ff 	mov.w	r5, #4294967295
 80195b4:	4628      	mov	r0, r5
 80195b6:	bd38      	pop	{r3, r4, r5, pc}
 80195b8:	8993      	ldrh	r3, [r2, #12]
 80195ba:	f023 0320 	bic.w	r3, r3, #32
 80195be:	8193      	strh	r3, [r2, #12]
 80195c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80195c2:	6852      	ldr	r2, [r2, #4]
 80195c4:	b2cd      	uxtb	r5, r1
 80195c6:	b18b      	cbz	r3, 80195ec <_sungetc_r+0x44>
 80195c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80195ca:	4293      	cmp	r3, r2
 80195cc:	dd08      	ble.n	80195e0 <_sungetc_r+0x38>
 80195ce:	6823      	ldr	r3, [r4, #0]
 80195d0:	1e5a      	subs	r2, r3, #1
 80195d2:	6022      	str	r2, [r4, #0]
 80195d4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80195d8:	6863      	ldr	r3, [r4, #4]
 80195da:	3301      	adds	r3, #1
 80195dc:	6063      	str	r3, [r4, #4]
 80195de:	e7e9      	b.n	80195b4 <_sungetc_r+0xc>
 80195e0:	4621      	mov	r1, r4
 80195e2:	f000 fd4f 	bl	801a084 <__submore>
 80195e6:	2800      	cmp	r0, #0
 80195e8:	d0f1      	beq.n	80195ce <_sungetc_r+0x26>
 80195ea:	e7e1      	b.n	80195b0 <_sungetc_r+0x8>
 80195ec:	6921      	ldr	r1, [r4, #16]
 80195ee:	6823      	ldr	r3, [r4, #0]
 80195f0:	b151      	cbz	r1, 8019608 <_sungetc_r+0x60>
 80195f2:	4299      	cmp	r1, r3
 80195f4:	d208      	bcs.n	8019608 <_sungetc_r+0x60>
 80195f6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80195fa:	42a9      	cmp	r1, r5
 80195fc:	d104      	bne.n	8019608 <_sungetc_r+0x60>
 80195fe:	3b01      	subs	r3, #1
 8019600:	3201      	adds	r2, #1
 8019602:	6023      	str	r3, [r4, #0]
 8019604:	6062      	str	r2, [r4, #4]
 8019606:	e7d5      	b.n	80195b4 <_sungetc_r+0xc>
 8019608:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801960c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019610:	6363      	str	r3, [r4, #52]	; 0x34
 8019612:	2303      	movs	r3, #3
 8019614:	63a3      	str	r3, [r4, #56]	; 0x38
 8019616:	4623      	mov	r3, r4
 8019618:	f803 5f46 	strb.w	r5, [r3, #70]!
 801961c:	6023      	str	r3, [r4, #0]
 801961e:	2301      	movs	r3, #1
 8019620:	e7dc      	b.n	80195dc <_sungetc_r+0x34>

08019622 <__ssrefill_r>:
 8019622:	b510      	push	{r4, lr}
 8019624:	460c      	mov	r4, r1
 8019626:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019628:	b169      	cbz	r1, 8019646 <__ssrefill_r+0x24>
 801962a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801962e:	4299      	cmp	r1, r3
 8019630:	d001      	beq.n	8019636 <__ssrefill_r+0x14>
 8019632:	f7ff fdb3 	bl	801919c <_free_r>
 8019636:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019638:	6063      	str	r3, [r4, #4]
 801963a:	2000      	movs	r0, #0
 801963c:	6360      	str	r0, [r4, #52]	; 0x34
 801963e:	b113      	cbz	r3, 8019646 <__ssrefill_r+0x24>
 8019640:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019642:	6023      	str	r3, [r4, #0]
 8019644:	bd10      	pop	{r4, pc}
 8019646:	6923      	ldr	r3, [r4, #16]
 8019648:	6023      	str	r3, [r4, #0]
 801964a:	2300      	movs	r3, #0
 801964c:	6063      	str	r3, [r4, #4]
 801964e:	89a3      	ldrh	r3, [r4, #12]
 8019650:	f043 0320 	orr.w	r3, r3, #32
 8019654:	81a3      	strh	r3, [r4, #12]
 8019656:	f04f 30ff 	mov.w	r0, #4294967295
 801965a:	e7f3      	b.n	8019644 <__ssrefill_r+0x22>

0801965c <__ssvfiscanf_r>:
 801965c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019660:	460c      	mov	r4, r1
 8019662:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8019666:	2100      	movs	r1, #0
 8019668:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801966c:	49b2      	ldr	r1, [pc, #712]	; (8019938 <__ssvfiscanf_r+0x2dc>)
 801966e:	91a0      	str	r1, [sp, #640]	; 0x280
 8019670:	f10d 0804 	add.w	r8, sp, #4
 8019674:	49b1      	ldr	r1, [pc, #708]	; (801993c <__ssvfiscanf_r+0x2e0>)
 8019676:	4fb2      	ldr	r7, [pc, #712]	; (8019940 <__ssvfiscanf_r+0x2e4>)
 8019678:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8019944 <__ssvfiscanf_r+0x2e8>
 801967c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019680:	4606      	mov	r6, r0
 8019682:	91a1      	str	r1, [sp, #644]	; 0x284
 8019684:	9300      	str	r3, [sp, #0]
 8019686:	f892 a000 	ldrb.w	sl, [r2]
 801968a:	f1ba 0f00 	cmp.w	sl, #0
 801968e:	f000 8151 	beq.w	8019934 <__ssvfiscanf_r+0x2d8>
 8019692:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8019696:	f013 0308 	ands.w	r3, r3, #8
 801969a:	f102 0501 	add.w	r5, r2, #1
 801969e:	d019      	beq.n	80196d4 <__ssvfiscanf_r+0x78>
 80196a0:	6863      	ldr	r3, [r4, #4]
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	dd0f      	ble.n	80196c6 <__ssvfiscanf_r+0x6a>
 80196a6:	6823      	ldr	r3, [r4, #0]
 80196a8:	781a      	ldrb	r2, [r3, #0]
 80196aa:	5cba      	ldrb	r2, [r7, r2]
 80196ac:	0712      	lsls	r2, r2, #28
 80196ae:	d401      	bmi.n	80196b4 <__ssvfiscanf_r+0x58>
 80196b0:	462a      	mov	r2, r5
 80196b2:	e7e8      	b.n	8019686 <__ssvfiscanf_r+0x2a>
 80196b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80196b6:	3201      	adds	r2, #1
 80196b8:	9245      	str	r2, [sp, #276]	; 0x114
 80196ba:	6862      	ldr	r2, [r4, #4]
 80196bc:	3301      	adds	r3, #1
 80196be:	3a01      	subs	r2, #1
 80196c0:	6062      	str	r2, [r4, #4]
 80196c2:	6023      	str	r3, [r4, #0]
 80196c4:	e7ec      	b.n	80196a0 <__ssvfiscanf_r+0x44>
 80196c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80196c8:	4621      	mov	r1, r4
 80196ca:	4630      	mov	r0, r6
 80196cc:	4798      	blx	r3
 80196ce:	2800      	cmp	r0, #0
 80196d0:	d0e9      	beq.n	80196a6 <__ssvfiscanf_r+0x4a>
 80196d2:	e7ed      	b.n	80196b0 <__ssvfiscanf_r+0x54>
 80196d4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80196d8:	f040 8083 	bne.w	80197e2 <__ssvfiscanf_r+0x186>
 80196dc:	9341      	str	r3, [sp, #260]	; 0x104
 80196de:	9343      	str	r3, [sp, #268]	; 0x10c
 80196e0:	7853      	ldrb	r3, [r2, #1]
 80196e2:	2b2a      	cmp	r3, #42	; 0x2a
 80196e4:	bf02      	ittt	eq
 80196e6:	2310      	moveq	r3, #16
 80196e8:	1c95      	addeq	r5, r2, #2
 80196ea:	9341      	streq	r3, [sp, #260]	; 0x104
 80196ec:	220a      	movs	r2, #10
 80196ee:	46ab      	mov	fp, r5
 80196f0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80196f4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80196f8:	2b09      	cmp	r3, #9
 80196fa:	d91d      	bls.n	8019738 <__ssvfiscanf_r+0xdc>
 80196fc:	4891      	ldr	r0, [pc, #580]	; (8019944 <__ssvfiscanf_r+0x2e8>)
 80196fe:	2203      	movs	r2, #3
 8019700:	f7e6 fd86 	bl	8000210 <memchr>
 8019704:	b140      	cbz	r0, 8019718 <__ssvfiscanf_r+0xbc>
 8019706:	2301      	movs	r3, #1
 8019708:	eba0 0009 	sub.w	r0, r0, r9
 801970c:	fa03 f000 	lsl.w	r0, r3, r0
 8019710:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019712:	4318      	orrs	r0, r3
 8019714:	9041      	str	r0, [sp, #260]	; 0x104
 8019716:	465d      	mov	r5, fp
 8019718:	f815 3b01 	ldrb.w	r3, [r5], #1
 801971c:	2b78      	cmp	r3, #120	; 0x78
 801971e:	d806      	bhi.n	801972e <__ssvfiscanf_r+0xd2>
 8019720:	2b57      	cmp	r3, #87	; 0x57
 8019722:	d810      	bhi.n	8019746 <__ssvfiscanf_r+0xea>
 8019724:	2b25      	cmp	r3, #37	; 0x25
 8019726:	d05c      	beq.n	80197e2 <__ssvfiscanf_r+0x186>
 8019728:	d856      	bhi.n	80197d8 <__ssvfiscanf_r+0x17c>
 801972a:	2b00      	cmp	r3, #0
 801972c:	d074      	beq.n	8019818 <__ssvfiscanf_r+0x1bc>
 801972e:	2303      	movs	r3, #3
 8019730:	9347      	str	r3, [sp, #284]	; 0x11c
 8019732:	230a      	movs	r3, #10
 8019734:	9342      	str	r3, [sp, #264]	; 0x108
 8019736:	e081      	b.n	801983c <__ssvfiscanf_r+0x1e0>
 8019738:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801973a:	fb02 1303 	mla	r3, r2, r3, r1
 801973e:	3b30      	subs	r3, #48	; 0x30
 8019740:	9343      	str	r3, [sp, #268]	; 0x10c
 8019742:	465d      	mov	r5, fp
 8019744:	e7d3      	b.n	80196ee <__ssvfiscanf_r+0x92>
 8019746:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801974a:	2a20      	cmp	r2, #32
 801974c:	d8ef      	bhi.n	801972e <__ssvfiscanf_r+0xd2>
 801974e:	a101      	add	r1, pc, #4	; (adr r1, 8019754 <__ssvfiscanf_r+0xf8>)
 8019750:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019754:	08019827 	.word	0x08019827
 8019758:	0801972f 	.word	0x0801972f
 801975c:	0801972f 	.word	0x0801972f
 8019760:	08019885 	.word	0x08019885
 8019764:	0801972f 	.word	0x0801972f
 8019768:	0801972f 	.word	0x0801972f
 801976c:	0801972f 	.word	0x0801972f
 8019770:	0801972f 	.word	0x0801972f
 8019774:	0801972f 	.word	0x0801972f
 8019778:	0801972f 	.word	0x0801972f
 801977c:	0801972f 	.word	0x0801972f
 8019780:	0801989b 	.word	0x0801989b
 8019784:	08019871 	.word	0x08019871
 8019788:	080197df 	.word	0x080197df
 801978c:	080197df 	.word	0x080197df
 8019790:	080197df 	.word	0x080197df
 8019794:	0801972f 	.word	0x0801972f
 8019798:	08019875 	.word	0x08019875
 801979c:	0801972f 	.word	0x0801972f
 80197a0:	0801972f 	.word	0x0801972f
 80197a4:	0801972f 	.word	0x0801972f
 80197a8:	0801972f 	.word	0x0801972f
 80197ac:	080198ab 	.word	0x080198ab
 80197b0:	0801987d 	.word	0x0801987d
 80197b4:	0801981f 	.word	0x0801981f
 80197b8:	0801972f 	.word	0x0801972f
 80197bc:	0801972f 	.word	0x0801972f
 80197c0:	080198a7 	.word	0x080198a7
 80197c4:	0801972f 	.word	0x0801972f
 80197c8:	08019871 	.word	0x08019871
 80197cc:	0801972f 	.word	0x0801972f
 80197d0:	0801972f 	.word	0x0801972f
 80197d4:	08019827 	.word	0x08019827
 80197d8:	3b45      	subs	r3, #69	; 0x45
 80197da:	2b02      	cmp	r3, #2
 80197dc:	d8a7      	bhi.n	801972e <__ssvfiscanf_r+0xd2>
 80197de:	2305      	movs	r3, #5
 80197e0:	e02b      	b.n	801983a <__ssvfiscanf_r+0x1de>
 80197e2:	6863      	ldr	r3, [r4, #4]
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	dd0d      	ble.n	8019804 <__ssvfiscanf_r+0x1a8>
 80197e8:	6823      	ldr	r3, [r4, #0]
 80197ea:	781a      	ldrb	r2, [r3, #0]
 80197ec:	4552      	cmp	r2, sl
 80197ee:	f040 80a1 	bne.w	8019934 <__ssvfiscanf_r+0x2d8>
 80197f2:	3301      	adds	r3, #1
 80197f4:	6862      	ldr	r2, [r4, #4]
 80197f6:	6023      	str	r3, [r4, #0]
 80197f8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80197fa:	3a01      	subs	r2, #1
 80197fc:	3301      	adds	r3, #1
 80197fe:	6062      	str	r2, [r4, #4]
 8019800:	9345      	str	r3, [sp, #276]	; 0x114
 8019802:	e755      	b.n	80196b0 <__ssvfiscanf_r+0x54>
 8019804:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019806:	4621      	mov	r1, r4
 8019808:	4630      	mov	r0, r6
 801980a:	4798      	blx	r3
 801980c:	2800      	cmp	r0, #0
 801980e:	d0eb      	beq.n	80197e8 <__ssvfiscanf_r+0x18c>
 8019810:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019812:	2800      	cmp	r0, #0
 8019814:	f040 8084 	bne.w	8019920 <__ssvfiscanf_r+0x2c4>
 8019818:	f04f 30ff 	mov.w	r0, #4294967295
 801981c:	e086      	b.n	801992c <__ssvfiscanf_r+0x2d0>
 801981e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019820:	f042 0220 	orr.w	r2, r2, #32
 8019824:	9241      	str	r2, [sp, #260]	; 0x104
 8019826:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801982c:	9241      	str	r2, [sp, #260]	; 0x104
 801982e:	2210      	movs	r2, #16
 8019830:	2b6f      	cmp	r3, #111	; 0x6f
 8019832:	9242      	str	r2, [sp, #264]	; 0x108
 8019834:	bf34      	ite	cc
 8019836:	2303      	movcc	r3, #3
 8019838:	2304      	movcs	r3, #4
 801983a:	9347      	str	r3, [sp, #284]	; 0x11c
 801983c:	6863      	ldr	r3, [r4, #4]
 801983e:	2b00      	cmp	r3, #0
 8019840:	dd41      	ble.n	80198c6 <__ssvfiscanf_r+0x26a>
 8019842:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019844:	0659      	lsls	r1, r3, #25
 8019846:	d404      	bmi.n	8019852 <__ssvfiscanf_r+0x1f6>
 8019848:	6823      	ldr	r3, [r4, #0]
 801984a:	781a      	ldrb	r2, [r3, #0]
 801984c:	5cba      	ldrb	r2, [r7, r2]
 801984e:	0712      	lsls	r2, r2, #28
 8019850:	d440      	bmi.n	80198d4 <__ssvfiscanf_r+0x278>
 8019852:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019854:	2b02      	cmp	r3, #2
 8019856:	dc4f      	bgt.n	80198f8 <__ssvfiscanf_r+0x29c>
 8019858:	466b      	mov	r3, sp
 801985a:	4622      	mov	r2, r4
 801985c:	a941      	add	r1, sp, #260	; 0x104
 801985e:	4630      	mov	r0, r6
 8019860:	f000 f9ce 	bl	8019c00 <_scanf_chars>
 8019864:	2801      	cmp	r0, #1
 8019866:	d065      	beq.n	8019934 <__ssvfiscanf_r+0x2d8>
 8019868:	2802      	cmp	r0, #2
 801986a:	f47f af21 	bne.w	80196b0 <__ssvfiscanf_r+0x54>
 801986e:	e7cf      	b.n	8019810 <__ssvfiscanf_r+0x1b4>
 8019870:	220a      	movs	r2, #10
 8019872:	e7dd      	b.n	8019830 <__ssvfiscanf_r+0x1d4>
 8019874:	2300      	movs	r3, #0
 8019876:	9342      	str	r3, [sp, #264]	; 0x108
 8019878:	2303      	movs	r3, #3
 801987a:	e7de      	b.n	801983a <__ssvfiscanf_r+0x1de>
 801987c:	2308      	movs	r3, #8
 801987e:	9342      	str	r3, [sp, #264]	; 0x108
 8019880:	2304      	movs	r3, #4
 8019882:	e7da      	b.n	801983a <__ssvfiscanf_r+0x1de>
 8019884:	4629      	mov	r1, r5
 8019886:	4640      	mov	r0, r8
 8019888:	f000 fb32 	bl	8019ef0 <__sccl>
 801988c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801988e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019892:	9341      	str	r3, [sp, #260]	; 0x104
 8019894:	4605      	mov	r5, r0
 8019896:	2301      	movs	r3, #1
 8019898:	e7cf      	b.n	801983a <__ssvfiscanf_r+0x1de>
 801989a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801989c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198a0:	9341      	str	r3, [sp, #260]	; 0x104
 80198a2:	2300      	movs	r3, #0
 80198a4:	e7c9      	b.n	801983a <__ssvfiscanf_r+0x1de>
 80198a6:	2302      	movs	r3, #2
 80198a8:	e7c7      	b.n	801983a <__ssvfiscanf_r+0x1de>
 80198aa:	9841      	ldr	r0, [sp, #260]	; 0x104
 80198ac:	06c3      	lsls	r3, r0, #27
 80198ae:	f53f aeff 	bmi.w	80196b0 <__ssvfiscanf_r+0x54>
 80198b2:	9b00      	ldr	r3, [sp, #0]
 80198b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80198b6:	1d19      	adds	r1, r3, #4
 80198b8:	9100      	str	r1, [sp, #0]
 80198ba:	681b      	ldr	r3, [r3, #0]
 80198bc:	07c0      	lsls	r0, r0, #31
 80198be:	bf4c      	ite	mi
 80198c0:	801a      	strhmi	r2, [r3, #0]
 80198c2:	601a      	strpl	r2, [r3, #0]
 80198c4:	e6f4      	b.n	80196b0 <__ssvfiscanf_r+0x54>
 80198c6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80198c8:	4621      	mov	r1, r4
 80198ca:	4630      	mov	r0, r6
 80198cc:	4798      	blx	r3
 80198ce:	2800      	cmp	r0, #0
 80198d0:	d0b7      	beq.n	8019842 <__ssvfiscanf_r+0x1e6>
 80198d2:	e79d      	b.n	8019810 <__ssvfiscanf_r+0x1b4>
 80198d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80198d6:	3201      	adds	r2, #1
 80198d8:	9245      	str	r2, [sp, #276]	; 0x114
 80198da:	6862      	ldr	r2, [r4, #4]
 80198dc:	3a01      	subs	r2, #1
 80198de:	2a00      	cmp	r2, #0
 80198e0:	6062      	str	r2, [r4, #4]
 80198e2:	dd02      	ble.n	80198ea <__ssvfiscanf_r+0x28e>
 80198e4:	3301      	adds	r3, #1
 80198e6:	6023      	str	r3, [r4, #0]
 80198e8:	e7ae      	b.n	8019848 <__ssvfiscanf_r+0x1ec>
 80198ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80198ec:	4621      	mov	r1, r4
 80198ee:	4630      	mov	r0, r6
 80198f0:	4798      	blx	r3
 80198f2:	2800      	cmp	r0, #0
 80198f4:	d0a8      	beq.n	8019848 <__ssvfiscanf_r+0x1ec>
 80198f6:	e78b      	b.n	8019810 <__ssvfiscanf_r+0x1b4>
 80198f8:	2b04      	cmp	r3, #4
 80198fa:	dc06      	bgt.n	801990a <__ssvfiscanf_r+0x2ae>
 80198fc:	466b      	mov	r3, sp
 80198fe:	4622      	mov	r2, r4
 8019900:	a941      	add	r1, sp, #260	; 0x104
 8019902:	4630      	mov	r0, r6
 8019904:	f000 f9d4 	bl	8019cb0 <_scanf_i>
 8019908:	e7ac      	b.n	8019864 <__ssvfiscanf_r+0x208>
 801990a:	4b0f      	ldr	r3, [pc, #60]	; (8019948 <__ssvfiscanf_r+0x2ec>)
 801990c:	2b00      	cmp	r3, #0
 801990e:	f43f aecf 	beq.w	80196b0 <__ssvfiscanf_r+0x54>
 8019912:	466b      	mov	r3, sp
 8019914:	4622      	mov	r2, r4
 8019916:	a941      	add	r1, sp, #260	; 0x104
 8019918:	4630      	mov	r0, r6
 801991a:	f7fc fa95 	bl	8015e48 <_scanf_float>
 801991e:	e7a1      	b.n	8019864 <__ssvfiscanf_r+0x208>
 8019920:	89a3      	ldrh	r3, [r4, #12]
 8019922:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019926:	bf18      	it	ne
 8019928:	f04f 30ff 	movne.w	r0, #4294967295
 801992c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8019930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019934:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019936:	e7f9      	b.n	801992c <__ssvfiscanf_r+0x2d0>
 8019938:	080195a9 	.word	0x080195a9
 801993c:	08019623 	.word	0x08019623
 8019940:	0801b029 	.word	0x0801b029
 8019944:	0801b402 	.word	0x0801b402
 8019948:	08015e49 	.word	0x08015e49

0801994c <__sfputc_r>:
 801994c:	6893      	ldr	r3, [r2, #8]
 801994e:	3b01      	subs	r3, #1
 8019950:	2b00      	cmp	r3, #0
 8019952:	b410      	push	{r4}
 8019954:	6093      	str	r3, [r2, #8]
 8019956:	da08      	bge.n	801996a <__sfputc_r+0x1e>
 8019958:	6994      	ldr	r4, [r2, #24]
 801995a:	42a3      	cmp	r3, r4
 801995c:	db01      	blt.n	8019962 <__sfputc_r+0x16>
 801995e:	290a      	cmp	r1, #10
 8019960:	d103      	bne.n	801996a <__sfputc_r+0x1e>
 8019962:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019966:	f000 bbc7 	b.w	801a0f8 <__swbuf_r>
 801996a:	6813      	ldr	r3, [r2, #0]
 801996c:	1c58      	adds	r0, r3, #1
 801996e:	6010      	str	r0, [r2, #0]
 8019970:	7019      	strb	r1, [r3, #0]
 8019972:	4608      	mov	r0, r1
 8019974:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019978:	4770      	bx	lr

0801997a <__sfputs_r>:
 801997a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801997c:	4606      	mov	r6, r0
 801997e:	460f      	mov	r7, r1
 8019980:	4614      	mov	r4, r2
 8019982:	18d5      	adds	r5, r2, r3
 8019984:	42ac      	cmp	r4, r5
 8019986:	d101      	bne.n	801998c <__sfputs_r+0x12>
 8019988:	2000      	movs	r0, #0
 801998a:	e007      	b.n	801999c <__sfputs_r+0x22>
 801998c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019990:	463a      	mov	r2, r7
 8019992:	4630      	mov	r0, r6
 8019994:	f7ff ffda 	bl	801994c <__sfputc_r>
 8019998:	1c43      	adds	r3, r0, #1
 801999a:	d1f3      	bne.n	8019984 <__sfputs_r+0xa>
 801999c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080199a0 <_vfiprintf_r>:
 80199a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199a4:	460d      	mov	r5, r1
 80199a6:	b09d      	sub	sp, #116	; 0x74
 80199a8:	4614      	mov	r4, r2
 80199aa:	4698      	mov	r8, r3
 80199ac:	4606      	mov	r6, r0
 80199ae:	b118      	cbz	r0, 80199b8 <_vfiprintf_r+0x18>
 80199b0:	6983      	ldr	r3, [r0, #24]
 80199b2:	b90b      	cbnz	r3, 80199b8 <_vfiprintf_r+0x18>
 80199b4:	f7fe fae8 	bl	8017f88 <__sinit>
 80199b8:	4b89      	ldr	r3, [pc, #548]	; (8019be0 <_vfiprintf_r+0x240>)
 80199ba:	429d      	cmp	r5, r3
 80199bc:	d11b      	bne.n	80199f6 <_vfiprintf_r+0x56>
 80199be:	6875      	ldr	r5, [r6, #4]
 80199c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80199c2:	07d9      	lsls	r1, r3, #31
 80199c4:	d405      	bmi.n	80199d2 <_vfiprintf_r+0x32>
 80199c6:	89ab      	ldrh	r3, [r5, #12]
 80199c8:	059a      	lsls	r2, r3, #22
 80199ca:	d402      	bmi.n	80199d2 <_vfiprintf_r+0x32>
 80199cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80199ce:	f7fe feec 	bl	80187aa <__retarget_lock_acquire_recursive>
 80199d2:	89ab      	ldrh	r3, [r5, #12]
 80199d4:	071b      	lsls	r3, r3, #28
 80199d6:	d501      	bpl.n	80199dc <_vfiprintf_r+0x3c>
 80199d8:	692b      	ldr	r3, [r5, #16]
 80199da:	b9eb      	cbnz	r3, 8019a18 <_vfiprintf_r+0x78>
 80199dc:	4629      	mov	r1, r5
 80199de:	4630      	mov	r0, r6
 80199e0:	f000 fbea 	bl	801a1b8 <__swsetup_r>
 80199e4:	b1c0      	cbz	r0, 8019a18 <_vfiprintf_r+0x78>
 80199e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80199e8:	07dc      	lsls	r4, r3, #31
 80199ea:	d50e      	bpl.n	8019a0a <_vfiprintf_r+0x6a>
 80199ec:	f04f 30ff 	mov.w	r0, #4294967295
 80199f0:	b01d      	add	sp, #116	; 0x74
 80199f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199f6:	4b7b      	ldr	r3, [pc, #492]	; (8019be4 <_vfiprintf_r+0x244>)
 80199f8:	429d      	cmp	r5, r3
 80199fa:	d101      	bne.n	8019a00 <_vfiprintf_r+0x60>
 80199fc:	68b5      	ldr	r5, [r6, #8]
 80199fe:	e7df      	b.n	80199c0 <_vfiprintf_r+0x20>
 8019a00:	4b79      	ldr	r3, [pc, #484]	; (8019be8 <_vfiprintf_r+0x248>)
 8019a02:	429d      	cmp	r5, r3
 8019a04:	bf08      	it	eq
 8019a06:	68f5      	ldreq	r5, [r6, #12]
 8019a08:	e7da      	b.n	80199c0 <_vfiprintf_r+0x20>
 8019a0a:	89ab      	ldrh	r3, [r5, #12]
 8019a0c:	0598      	lsls	r0, r3, #22
 8019a0e:	d4ed      	bmi.n	80199ec <_vfiprintf_r+0x4c>
 8019a10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019a12:	f7fe fecb 	bl	80187ac <__retarget_lock_release_recursive>
 8019a16:	e7e9      	b.n	80199ec <_vfiprintf_r+0x4c>
 8019a18:	2300      	movs	r3, #0
 8019a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8019a1c:	2320      	movs	r3, #32
 8019a1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019a22:	f8cd 800c 	str.w	r8, [sp, #12]
 8019a26:	2330      	movs	r3, #48	; 0x30
 8019a28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019bec <_vfiprintf_r+0x24c>
 8019a2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019a30:	f04f 0901 	mov.w	r9, #1
 8019a34:	4623      	mov	r3, r4
 8019a36:	469a      	mov	sl, r3
 8019a38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019a3c:	b10a      	cbz	r2, 8019a42 <_vfiprintf_r+0xa2>
 8019a3e:	2a25      	cmp	r2, #37	; 0x25
 8019a40:	d1f9      	bne.n	8019a36 <_vfiprintf_r+0x96>
 8019a42:	ebba 0b04 	subs.w	fp, sl, r4
 8019a46:	d00b      	beq.n	8019a60 <_vfiprintf_r+0xc0>
 8019a48:	465b      	mov	r3, fp
 8019a4a:	4622      	mov	r2, r4
 8019a4c:	4629      	mov	r1, r5
 8019a4e:	4630      	mov	r0, r6
 8019a50:	f7ff ff93 	bl	801997a <__sfputs_r>
 8019a54:	3001      	adds	r0, #1
 8019a56:	f000 80aa 	beq.w	8019bae <_vfiprintf_r+0x20e>
 8019a5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019a5c:	445a      	add	r2, fp
 8019a5e:	9209      	str	r2, [sp, #36]	; 0x24
 8019a60:	f89a 3000 	ldrb.w	r3, [sl]
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	f000 80a2 	beq.w	8019bae <_vfiprintf_r+0x20e>
 8019a6a:	2300      	movs	r3, #0
 8019a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8019a70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019a74:	f10a 0a01 	add.w	sl, sl, #1
 8019a78:	9304      	str	r3, [sp, #16]
 8019a7a:	9307      	str	r3, [sp, #28]
 8019a7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019a80:	931a      	str	r3, [sp, #104]	; 0x68
 8019a82:	4654      	mov	r4, sl
 8019a84:	2205      	movs	r2, #5
 8019a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a8a:	4858      	ldr	r0, [pc, #352]	; (8019bec <_vfiprintf_r+0x24c>)
 8019a8c:	f7e6 fbc0 	bl	8000210 <memchr>
 8019a90:	9a04      	ldr	r2, [sp, #16]
 8019a92:	b9d8      	cbnz	r0, 8019acc <_vfiprintf_r+0x12c>
 8019a94:	06d1      	lsls	r1, r2, #27
 8019a96:	bf44      	itt	mi
 8019a98:	2320      	movmi	r3, #32
 8019a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019a9e:	0713      	lsls	r3, r2, #28
 8019aa0:	bf44      	itt	mi
 8019aa2:	232b      	movmi	r3, #43	; 0x2b
 8019aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8019aac:	2b2a      	cmp	r3, #42	; 0x2a
 8019aae:	d015      	beq.n	8019adc <_vfiprintf_r+0x13c>
 8019ab0:	9a07      	ldr	r2, [sp, #28]
 8019ab2:	4654      	mov	r4, sl
 8019ab4:	2000      	movs	r0, #0
 8019ab6:	f04f 0c0a 	mov.w	ip, #10
 8019aba:	4621      	mov	r1, r4
 8019abc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019ac0:	3b30      	subs	r3, #48	; 0x30
 8019ac2:	2b09      	cmp	r3, #9
 8019ac4:	d94e      	bls.n	8019b64 <_vfiprintf_r+0x1c4>
 8019ac6:	b1b0      	cbz	r0, 8019af6 <_vfiprintf_r+0x156>
 8019ac8:	9207      	str	r2, [sp, #28]
 8019aca:	e014      	b.n	8019af6 <_vfiprintf_r+0x156>
 8019acc:	eba0 0308 	sub.w	r3, r0, r8
 8019ad0:	fa09 f303 	lsl.w	r3, r9, r3
 8019ad4:	4313      	orrs	r3, r2
 8019ad6:	9304      	str	r3, [sp, #16]
 8019ad8:	46a2      	mov	sl, r4
 8019ada:	e7d2      	b.n	8019a82 <_vfiprintf_r+0xe2>
 8019adc:	9b03      	ldr	r3, [sp, #12]
 8019ade:	1d19      	adds	r1, r3, #4
 8019ae0:	681b      	ldr	r3, [r3, #0]
 8019ae2:	9103      	str	r1, [sp, #12]
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	bfbb      	ittet	lt
 8019ae8:	425b      	neglt	r3, r3
 8019aea:	f042 0202 	orrlt.w	r2, r2, #2
 8019aee:	9307      	strge	r3, [sp, #28]
 8019af0:	9307      	strlt	r3, [sp, #28]
 8019af2:	bfb8      	it	lt
 8019af4:	9204      	strlt	r2, [sp, #16]
 8019af6:	7823      	ldrb	r3, [r4, #0]
 8019af8:	2b2e      	cmp	r3, #46	; 0x2e
 8019afa:	d10c      	bne.n	8019b16 <_vfiprintf_r+0x176>
 8019afc:	7863      	ldrb	r3, [r4, #1]
 8019afe:	2b2a      	cmp	r3, #42	; 0x2a
 8019b00:	d135      	bne.n	8019b6e <_vfiprintf_r+0x1ce>
 8019b02:	9b03      	ldr	r3, [sp, #12]
 8019b04:	1d1a      	adds	r2, r3, #4
 8019b06:	681b      	ldr	r3, [r3, #0]
 8019b08:	9203      	str	r2, [sp, #12]
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	bfb8      	it	lt
 8019b0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8019b12:	3402      	adds	r4, #2
 8019b14:	9305      	str	r3, [sp, #20]
 8019b16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019bfc <_vfiprintf_r+0x25c>
 8019b1a:	7821      	ldrb	r1, [r4, #0]
 8019b1c:	2203      	movs	r2, #3
 8019b1e:	4650      	mov	r0, sl
 8019b20:	f7e6 fb76 	bl	8000210 <memchr>
 8019b24:	b140      	cbz	r0, 8019b38 <_vfiprintf_r+0x198>
 8019b26:	2340      	movs	r3, #64	; 0x40
 8019b28:	eba0 000a 	sub.w	r0, r0, sl
 8019b2c:	fa03 f000 	lsl.w	r0, r3, r0
 8019b30:	9b04      	ldr	r3, [sp, #16]
 8019b32:	4303      	orrs	r3, r0
 8019b34:	3401      	adds	r4, #1
 8019b36:	9304      	str	r3, [sp, #16]
 8019b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b3c:	482c      	ldr	r0, [pc, #176]	; (8019bf0 <_vfiprintf_r+0x250>)
 8019b3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019b42:	2206      	movs	r2, #6
 8019b44:	f7e6 fb64 	bl	8000210 <memchr>
 8019b48:	2800      	cmp	r0, #0
 8019b4a:	d03f      	beq.n	8019bcc <_vfiprintf_r+0x22c>
 8019b4c:	4b29      	ldr	r3, [pc, #164]	; (8019bf4 <_vfiprintf_r+0x254>)
 8019b4e:	bb1b      	cbnz	r3, 8019b98 <_vfiprintf_r+0x1f8>
 8019b50:	9b03      	ldr	r3, [sp, #12]
 8019b52:	3307      	adds	r3, #7
 8019b54:	f023 0307 	bic.w	r3, r3, #7
 8019b58:	3308      	adds	r3, #8
 8019b5a:	9303      	str	r3, [sp, #12]
 8019b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b5e:	443b      	add	r3, r7
 8019b60:	9309      	str	r3, [sp, #36]	; 0x24
 8019b62:	e767      	b.n	8019a34 <_vfiprintf_r+0x94>
 8019b64:	fb0c 3202 	mla	r2, ip, r2, r3
 8019b68:	460c      	mov	r4, r1
 8019b6a:	2001      	movs	r0, #1
 8019b6c:	e7a5      	b.n	8019aba <_vfiprintf_r+0x11a>
 8019b6e:	2300      	movs	r3, #0
 8019b70:	3401      	adds	r4, #1
 8019b72:	9305      	str	r3, [sp, #20]
 8019b74:	4619      	mov	r1, r3
 8019b76:	f04f 0c0a 	mov.w	ip, #10
 8019b7a:	4620      	mov	r0, r4
 8019b7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019b80:	3a30      	subs	r2, #48	; 0x30
 8019b82:	2a09      	cmp	r2, #9
 8019b84:	d903      	bls.n	8019b8e <_vfiprintf_r+0x1ee>
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d0c5      	beq.n	8019b16 <_vfiprintf_r+0x176>
 8019b8a:	9105      	str	r1, [sp, #20]
 8019b8c:	e7c3      	b.n	8019b16 <_vfiprintf_r+0x176>
 8019b8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8019b92:	4604      	mov	r4, r0
 8019b94:	2301      	movs	r3, #1
 8019b96:	e7f0      	b.n	8019b7a <_vfiprintf_r+0x1da>
 8019b98:	ab03      	add	r3, sp, #12
 8019b9a:	9300      	str	r3, [sp, #0]
 8019b9c:	462a      	mov	r2, r5
 8019b9e:	4b16      	ldr	r3, [pc, #88]	; (8019bf8 <_vfiprintf_r+0x258>)
 8019ba0:	a904      	add	r1, sp, #16
 8019ba2:	4630      	mov	r0, r6
 8019ba4:	f7fb fd86 	bl	80156b4 <_printf_float>
 8019ba8:	4607      	mov	r7, r0
 8019baa:	1c78      	adds	r0, r7, #1
 8019bac:	d1d6      	bne.n	8019b5c <_vfiprintf_r+0x1bc>
 8019bae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019bb0:	07d9      	lsls	r1, r3, #31
 8019bb2:	d405      	bmi.n	8019bc0 <_vfiprintf_r+0x220>
 8019bb4:	89ab      	ldrh	r3, [r5, #12]
 8019bb6:	059a      	lsls	r2, r3, #22
 8019bb8:	d402      	bmi.n	8019bc0 <_vfiprintf_r+0x220>
 8019bba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019bbc:	f7fe fdf6 	bl	80187ac <__retarget_lock_release_recursive>
 8019bc0:	89ab      	ldrh	r3, [r5, #12]
 8019bc2:	065b      	lsls	r3, r3, #25
 8019bc4:	f53f af12 	bmi.w	80199ec <_vfiprintf_r+0x4c>
 8019bc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019bca:	e711      	b.n	80199f0 <_vfiprintf_r+0x50>
 8019bcc:	ab03      	add	r3, sp, #12
 8019bce:	9300      	str	r3, [sp, #0]
 8019bd0:	462a      	mov	r2, r5
 8019bd2:	4b09      	ldr	r3, [pc, #36]	; (8019bf8 <_vfiprintf_r+0x258>)
 8019bd4:	a904      	add	r1, sp, #16
 8019bd6:	4630      	mov	r0, r6
 8019bd8:	f7fc f810 	bl	8015bfc <_printf_i>
 8019bdc:	e7e4      	b.n	8019ba8 <_vfiprintf_r+0x208>
 8019bde:	bf00      	nop
 8019be0:	0801b1e0 	.word	0x0801b1e0
 8019be4:	0801b200 	.word	0x0801b200
 8019be8:	0801b1c0 	.word	0x0801b1c0
 8019bec:	0801b3fc 	.word	0x0801b3fc
 8019bf0:	0801b406 	.word	0x0801b406
 8019bf4:	080156b5 	.word	0x080156b5
 8019bf8:	0801997b 	.word	0x0801997b
 8019bfc:	0801b402 	.word	0x0801b402

08019c00 <_scanf_chars>:
 8019c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c04:	4615      	mov	r5, r2
 8019c06:	688a      	ldr	r2, [r1, #8]
 8019c08:	4680      	mov	r8, r0
 8019c0a:	460c      	mov	r4, r1
 8019c0c:	b932      	cbnz	r2, 8019c1c <_scanf_chars+0x1c>
 8019c0e:	698a      	ldr	r2, [r1, #24]
 8019c10:	2a00      	cmp	r2, #0
 8019c12:	bf0c      	ite	eq
 8019c14:	2201      	moveq	r2, #1
 8019c16:	f04f 32ff 	movne.w	r2, #4294967295
 8019c1a:	608a      	str	r2, [r1, #8]
 8019c1c:	6822      	ldr	r2, [r4, #0]
 8019c1e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8019cac <_scanf_chars+0xac>
 8019c22:	06d1      	lsls	r1, r2, #27
 8019c24:	bf5f      	itttt	pl
 8019c26:	681a      	ldrpl	r2, [r3, #0]
 8019c28:	1d11      	addpl	r1, r2, #4
 8019c2a:	6019      	strpl	r1, [r3, #0]
 8019c2c:	6816      	ldrpl	r6, [r2, #0]
 8019c2e:	2700      	movs	r7, #0
 8019c30:	69a0      	ldr	r0, [r4, #24]
 8019c32:	b188      	cbz	r0, 8019c58 <_scanf_chars+0x58>
 8019c34:	2801      	cmp	r0, #1
 8019c36:	d107      	bne.n	8019c48 <_scanf_chars+0x48>
 8019c38:	682b      	ldr	r3, [r5, #0]
 8019c3a:	781a      	ldrb	r2, [r3, #0]
 8019c3c:	6963      	ldr	r3, [r4, #20]
 8019c3e:	5c9b      	ldrb	r3, [r3, r2]
 8019c40:	b953      	cbnz	r3, 8019c58 <_scanf_chars+0x58>
 8019c42:	bb27      	cbnz	r7, 8019c8e <_scanf_chars+0x8e>
 8019c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c48:	2802      	cmp	r0, #2
 8019c4a:	d120      	bne.n	8019c8e <_scanf_chars+0x8e>
 8019c4c:	682b      	ldr	r3, [r5, #0]
 8019c4e:	781b      	ldrb	r3, [r3, #0]
 8019c50:	f813 3009 	ldrb.w	r3, [r3, r9]
 8019c54:	071b      	lsls	r3, r3, #28
 8019c56:	d41a      	bmi.n	8019c8e <_scanf_chars+0x8e>
 8019c58:	6823      	ldr	r3, [r4, #0]
 8019c5a:	06da      	lsls	r2, r3, #27
 8019c5c:	bf5e      	ittt	pl
 8019c5e:	682b      	ldrpl	r3, [r5, #0]
 8019c60:	781b      	ldrbpl	r3, [r3, #0]
 8019c62:	f806 3b01 	strbpl.w	r3, [r6], #1
 8019c66:	682a      	ldr	r2, [r5, #0]
 8019c68:	686b      	ldr	r3, [r5, #4]
 8019c6a:	3201      	adds	r2, #1
 8019c6c:	602a      	str	r2, [r5, #0]
 8019c6e:	68a2      	ldr	r2, [r4, #8]
 8019c70:	3b01      	subs	r3, #1
 8019c72:	3a01      	subs	r2, #1
 8019c74:	606b      	str	r3, [r5, #4]
 8019c76:	3701      	adds	r7, #1
 8019c78:	60a2      	str	r2, [r4, #8]
 8019c7a:	b142      	cbz	r2, 8019c8e <_scanf_chars+0x8e>
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	dcd7      	bgt.n	8019c30 <_scanf_chars+0x30>
 8019c80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019c84:	4629      	mov	r1, r5
 8019c86:	4640      	mov	r0, r8
 8019c88:	4798      	blx	r3
 8019c8a:	2800      	cmp	r0, #0
 8019c8c:	d0d0      	beq.n	8019c30 <_scanf_chars+0x30>
 8019c8e:	6823      	ldr	r3, [r4, #0]
 8019c90:	f013 0310 	ands.w	r3, r3, #16
 8019c94:	d105      	bne.n	8019ca2 <_scanf_chars+0xa2>
 8019c96:	68e2      	ldr	r2, [r4, #12]
 8019c98:	3201      	adds	r2, #1
 8019c9a:	60e2      	str	r2, [r4, #12]
 8019c9c:	69a2      	ldr	r2, [r4, #24]
 8019c9e:	b102      	cbz	r2, 8019ca2 <_scanf_chars+0xa2>
 8019ca0:	7033      	strb	r3, [r6, #0]
 8019ca2:	6923      	ldr	r3, [r4, #16]
 8019ca4:	441f      	add	r7, r3
 8019ca6:	6127      	str	r7, [r4, #16]
 8019ca8:	2000      	movs	r0, #0
 8019caa:	e7cb      	b.n	8019c44 <_scanf_chars+0x44>
 8019cac:	0801b029 	.word	0x0801b029

08019cb0 <_scanf_i>:
 8019cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cb4:	4698      	mov	r8, r3
 8019cb6:	4b74      	ldr	r3, [pc, #464]	; (8019e88 <_scanf_i+0x1d8>)
 8019cb8:	460c      	mov	r4, r1
 8019cba:	4682      	mov	sl, r0
 8019cbc:	4616      	mov	r6, r2
 8019cbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019cc2:	b087      	sub	sp, #28
 8019cc4:	ab03      	add	r3, sp, #12
 8019cc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019cca:	4b70      	ldr	r3, [pc, #448]	; (8019e8c <_scanf_i+0x1dc>)
 8019ccc:	69a1      	ldr	r1, [r4, #24]
 8019cce:	4a70      	ldr	r2, [pc, #448]	; (8019e90 <_scanf_i+0x1e0>)
 8019cd0:	2903      	cmp	r1, #3
 8019cd2:	bf18      	it	ne
 8019cd4:	461a      	movne	r2, r3
 8019cd6:	68a3      	ldr	r3, [r4, #8]
 8019cd8:	9201      	str	r2, [sp, #4]
 8019cda:	1e5a      	subs	r2, r3, #1
 8019cdc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8019ce0:	bf88      	it	hi
 8019ce2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019ce6:	4627      	mov	r7, r4
 8019ce8:	bf82      	ittt	hi
 8019cea:	eb03 0905 	addhi.w	r9, r3, r5
 8019cee:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019cf2:	60a3      	strhi	r3, [r4, #8]
 8019cf4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8019cf8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019cfc:	bf98      	it	ls
 8019cfe:	f04f 0900 	movls.w	r9, #0
 8019d02:	6023      	str	r3, [r4, #0]
 8019d04:	463d      	mov	r5, r7
 8019d06:	f04f 0b00 	mov.w	fp, #0
 8019d0a:	6831      	ldr	r1, [r6, #0]
 8019d0c:	ab03      	add	r3, sp, #12
 8019d0e:	7809      	ldrb	r1, [r1, #0]
 8019d10:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8019d14:	2202      	movs	r2, #2
 8019d16:	f7e6 fa7b 	bl	8000210 <memchr>
 8019d1a:	b328      	cbz	r0, 8019d68 <_scanf_i+0xb8>
 8019d1c:	f1bb 0f01 	cmp.w	fp, #1
 8019d20:	d159      	bne.n	8019dd6 <_scanf_i+0x126>
 8019d22:	6862      	ldr	r2, [r4, #4]
 8019d24:	b92a      	cbnz	r2, 8019d32 <_scanf_i+0x82>
 8019d26:	6822      	ldr	r2, [r4, #0]
 8019d28:	2308      	movs	r3, #8
 8019d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019d2e:	6063      	str	r3, [r4, #4]
 8019d30:	6022      	str	r2, [r4, #0]
 8019d32:	6822      	ldr	r2, [r4, #0]
 8019d34:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019d38:	6022      	str	r2, [r4, #0]
 8019d3a:	68a2      	ldr	r2, [r4, #8]
 8019d3c:	1e51      	subs	r1, r2, #1
 8019d3e:	60a1      	str	r1, [r4, #8]
 8019d40:	b192      	cbz	r2, 8019d68 <_scanf_i+0xb8>
 8019d42:	6832      	ldr	r2, [r6, #0]
 8019d44:	1c51      	adds	r1, r2, #1
 8019d46:	6031      	str	r1, [r6, #0]
 8019d48:	7812      	ldrb	r2, [r2, #0]
 8019d4a:	f805 2b01 	strb.w	r2, [r5], #1
 8019d4e:	6872      	ldr	r2, [r6, #4]
 8019d50:	3a01      	subs	r2, #1
 8019d52:	2a00      	cmp	r2, #0
 8019d54:	6072      	str	r2, [r6, #4]
 8019d56:	dc07      	bgt.n	8019d68 <_scanf_i+0xb8>
 8019d58:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8019d5c:	4631      	mov	r1, r6
 8019d5e:	4650      	mov	r0, sl
 8019d60:	4790      	blx	r2
 8019d62:	2800      	cmp	r0, #0
 8019d64:	f040 8085 	bne.w	8019e72 <_scanf_i+0x1c2>
 8019d68:	f10b 0b01 	add.w	fp, fp, #1
 8019d6c:	f1bb 0f03 	cmp.w	fp, #3
 8019d70:	d1cb      	bne.n	8019d0a <_scanf_i+0x5a>
 8019d72:	6863      	ldr	r3, [r4, #4]
 8019d74:	b90b      	cbnz	r3, 8019d7a <_scanf_i+0xca>
 8019d76:	230a      	movs	r3, #10
 8019d78:	6063      	str	r3, [r4, #4]
 8019d7a:	6863      	ldr	r3, [r4, #4]
 8019d7c:	4945      	ldr	r1, [pc, #276]	; (8019e94 <_scanf_i+0x1e4>)
 8019d7e:	6960      	ldr	r0, [r4, #20]
 8019d80:	1ac9      	subs	r1, r1, r3
 8019d82:	f000 f8b5 	bl	8019ef0 <__sccl>
 8019d86:	f04f 0b00 	mov.w	fp, #0
 8019d8a:	68a3      	ldr	r3, [r4, #8]
 8019d8c:	6822      	ldr	r2, [r4, #0]
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	d03d      	beq.n	8019e0e <_scanf_i+0x15e>
 8019d92:	6831      	ldr	r1, [r6, #0]
 8019d94:	6960      	ldr	r0, [r4, #20]
 8019d96:	f891 c000 	ldrb.w	ip, [r1]
 8019d9a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019d9e:	2800      	cmp	r0, #0
 8019da0:	d035      	beq.n	8019e0e <_scanf_i+0x15e>
 8019da2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019da6:	d124      	bne.n	8019df2 <_scanf_i+0x142>
 8019da8:	0510      	lsls	r0, r2, #20
 8019daa:	d522      	bpl.n	8019df2 <_scanf_i+0x142>
 8019dac:	f10b 0b01 	add.w	fp, fp, #1
 8019db0:	f1b9 0f00 	cmp.w	r9, #0
 8019db4:	d003      	beq.n	8019dbe <_scanf_i+0x10e>
 8019db6:	3301      	adds	r3, #1
 8019db8:	f109 39ff 	add.w	r9, r9, #4294967295
 8019dbc:	60a3      	str	r3, [r4, #8]
 8019dbe:	6873      	ldr	r3, [r6, #4]
 8019dc0:	3b01      	subs	r3, #1
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	6073      	str	r3, [r6, #4]
 8019dc6:	dd1b      	ble.n	8019e00 <_scanf_i+0x150>
 8019dc8:	6833      	ldr	r3, [r6, #0]
 8019dca:	3301      	adds	r3, #1
 8019dcc:	6033      	str	r3, [r6, #0]
 8019dce:	68a3      	ldr	r3, [r4, #8]
 8019dd0:	3b01      	subs	r3, #1
 8019dd2:	60a3      	str	r3, [r4, #8]
 8019dd4:	e7d9      	b.n	8019d8a <_scanf_i+0xda>
 8019dd6:	f1bb 0f02 	cmp.w	fp, #2
 8019dda:	d1ae      	bne.n	8019d3a <_scanf_i+0x8a>
 8019ddc:	6822      	ldr	r2, [r4, #0]
 8019dde:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019de2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019de6:	d1bf      	bne.n	8019d68 <_scanf_i+0xb8>
 8019de8:	2310      	movs	r3, #16
 8019dea:	6063      	str	r3, [r4, #4]
 8019dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019df0:	e7a2      	b.n	8019d38 <_scanf_i+0x88>
 8019df2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019df6:	6022      	str	r2, [r4, #0]
 8019df8:	780b      	ldrb	r3, [r1, #0]
 8019dfa:	f805 3b01 	strb.w	r3, [r5], #1
 8019dfe:	e7de      	b.n	8019dbe <_scanf_i+0x10e>
 8019e00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019e04:	4631      	mov	r1, r6
 8019e06:	4650      	mov	r0, sl
 8019e08:	4798      	blx	r3
 8019e0a:	2800      	cmp	r0, #0
 8019e0c:	d0df      	beq.n	8019dce <_scanf_i+0x11e>
 8019e0e:	6823      	ldr	r3, [r4, #0]
 8019e10:	05d9      	lsls	r1, r3, #23
 8019e12:	d50d      	bpl.n	8019e30 <_scanf_i+0x180>
 8019e14:	42bd      	cmp	r5, r7
 8019e16:	d909      	bls.n	8019e2c <_scanf_i+0x17c>
 8019e18:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019e1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019e20:	4632      	mov	r2, r6
 8019e22:	4650      	mov	r0, sl
 8019e24:	4798      	blx	r3
 8019e26:	f105 39ff 	add.w	r9, r5, #4294967295
 8019e2a:	464d      	mov	r5, r9
 8019e2c:	42bd      	cmp	r5, r7
 8019e2e:	d028      	beq.n	8019e82 <_scanf_i+0x1d2>
 8019e30:	6822      	ldr	r2, [r4, #0]
 8019e32:	f012 0210 	ands.w	r2, r2, #16
 8019e36:	d113      	bne.n	8019e60 <_scanf_i+0x1b0>
 8019e38:	702a      	strb	r2, [r5, #0]
 8019e3a:	6863      	ldr	r3, [r4, #4]
 8019e3c:	9e01      	ldr	r6, [sp, #4]
 8019e3e:	4639      	mov	r1, r7
 8019e40:	4650      	mov	r0, sl
 8019e42:	47b0      	blx	r6
 8019e44:	f8d8 3000 	ldr.w	r3, [r8]
 8019e48:	6821      	ldr	r1, [r4, #0]
 8019e4a:	1d1a      	adds	r2, r3, #4
 8019e4c:	f8c8 2000 	str.w	r2, [r8]
 8019e50:	f011 0f20 	tst.w	r1, #32
 8019e54:	681b      	ldr	r3, [r3, #0]
 8019e56:	d00f      	beq.n	8019e78 <_scanf_i+0x1c8>
 8019e58:	6018      	str	r0, [r3, #0]
 8019e5a:	68e3      	ldr	r3, [r4, #12]
 8019e5c:	3301      	adds	r3, #1
 8019e5e:	60e3      	str	r3, [r4, #12]
 8019e60:	1bed      	subs	r5, r5, r7
 8019e62:	44ab      	add	fp, r5
 8019e64:	6925      	ldr	r5, [r4, #16]
 8019e66:	445d      	add	r5, fp
 8019e68:	6125      	str	r5, [r4, #16]
 8019e6a:	2000      	movs	r0, #0
 8019e6c:	b007      	add	sp, #28
 8019e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e72:	f04f 0b00 	mov.w	fp, #0
 8019e76:	e7ca      	b.n	8019e0e <_scanf_i+0x15e>
 8019e78:	07ca      	lsls	r2, r1, #31
 8019e7a:	bf4c      	ite	mi
 8019e7c:	8018      	strhmi	r0, [r3, #0]
 8019e7e:	6018      	strpl	r0, [r3, #0]
 8019e80:	e7eb      	b.n	8019e5a <_scanf_i+0x1aa>
 8019e82:	2001      	movs	r0, #1
 8019e84:	e7f2      	b.n	8019e6c <_scanf_i+0x1bc>
 8019e86:	bf00      	nop
 8019e88:	0801ad00 	.word	0x0801ad00
 8019e8c:	0801a081 	.word	0x0801a081
 8019e90:	08017161 	.word	0x08017161
 8019e94:	0801b426 	.word	0x0801b426

08019e98 <_read_r>:
 8019e98:	b538      	push	{r3, r4, r5, lr}
 8019e9a:	4d07      	ldr	r5, [pc, #28]	; (8019eb8 <_read_r+0x20>)
 8019e9c:	4604      	mov	r4, r0
 8019e9e:	4608      	mov	r0, r1
 8019ea0:	4611      	mov	r1, r2
 8019ea2:	2200      	movs	r2, #0
 8019ea4:	602a      	str	r2, [r5, #0]
 8019ea6:	461a      	mov	r2, r3
 8019ea8:	f7ed fb5e 	bl	8007568 <_read>
 8019eac:	1c43      	adds	r3, r0, #1
 8019eae:	d102      	bne.n	8019eb6 <_read_r+0x1e>
 8019eb0:	682b      	ldr	r3, [r5, #0]
 8019eb2:	b103      	cbz	r3, 8019eb6 <_read_r+0x1e>
 8019eb4:	6023      	str	r3, [r4, #0]
 8019eb6:	bd38      	pop	{r3, r4, r5, pc}
 8019eb8:	20041e60 	.word	0x20041e60
 8019ebc:	00000000 	.word	0x00000000

08019ec0 <nan>:
 8019ec0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019ec8 <nan+0x8>
 8019ec4:	4770      	bx	lr
 8019ec6:	bf00      	nop
 8019ec8:	00000000 	.word	0x00000000
 8019ecc:	7ff80000 	.word	0x7ff80000

08019ed0 <_sbrk_r>:
 8019ed0:	b538      	push	{r3, r4, r5, lr}
 8019ed2:	4d06      	ldr	r5, [pc, #24]	; (8019eec <_sbrk_r+0x1c>)
 8019ed4:	2300      	movs	r3, #0
 8019ed6:	4604      	mov	r4, r0
 8019ed8:	4608      	mov	r0, r1
 8019eda:	602b      	str	r3, [r5, #0]
 8019edc:	f7ed fb96 	bl	800760c <_sbrk>
 8019ee0:	1c43      	adds	r3, r0, #1
 8019ee2:	d102      	bne.n	8019eea <_sbrk_r+0x1a>
 8019ee4:	682b      	ldr	r3, [r5, #0]
 8019ee6:	b103      	cbz	r3, 8019eea <_sbrk_r+0x1a>
 8019ee8:	6023      	str	r3, [r4, #0]
 8019eea:	bd38      	pop	{r3, r4, r5, pc}
 8019eec:	20041e60 	.word	0x20041e60

08019ef0 <__sccl>:
 8019ef0:	b570      	push	{r4, r5, r6, lr}
 8019ef2:	780b      	ldrb	r3, [r1, #0]
 8019ef4:	4604      	mov	r4, r0
 8019ef6:	2b5e      	cmp	r3, #94	; 0x5e
 8019ef8:	bf0b      	itete	eq
 8019efa:	784b      	ldrbeq	r3, [r1, #1]
 8019efc:	1c48      	addne	r0, r1, #1
 8019efe:	1c88      	addeq	r0, r1, #2
 8019f00:	2200      	movne	r2, #0
 8019f02:	bf08      	it	eq
 8019f04:	2201      	moveq	r2, #1
 8019f06:	1e61      	subs	r1, r4, #1
 8019f08:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8019f0c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8019f10:	42a9      	cmp	r1, r5
 8019f12:	d1fb      	bne.n	8019f0c <__sccl+0x1c>
 8019f14:	b90b      	cbnz	r3, 8019f1a <__sccl+0x2a>
 8019f16:	3801      	subs	r0, #1
 8019f18:	bd70      	pop	{r4, r5, r6, pc}
 8019f1a:	f082 0101 	eor.w	r1, r2, #1
 8019f1e:	54e1      	strb	r1, [r4, r3]
 8019f20:	1c42      	adds	r2, r0, #1
 8019f22:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8019f26:	2d2d      	cmp	r5, #45	; 0x2d
 8019f28:	f102 36ff 	add.w	r6, r2, #4294967295
 8019f2c:	4610      	mov	r0, r2
 8019f2e:	d006      	beq.n	8019f3e <__sccl+0x4e>
 8019f30:	2d5d      	cmp	r5, #93	; 0x5d
 8019f32:	d0f1      	beq.n	8019f18 <__sccl+0x28>
 8019f34:	b90d      	cbnz	r5, 8019f3a <__sccl+0x4a>
 8019f36:	4630      	mov	r0, r6
 8019f38:	e7ee      	b.n	8019f18 <__sccl+0x28>
 8019f3a:	462b      	mov	r3, r5
 8019f3c:	e7ef      	b.n	8019f1e <__sccl+0x2e>
 8019f3e:	7816      	ldrb	r6, [r2, #0]
 8019f40:	2e5d      	cmp	r6, #93	; 0x5d
 8019f42:	d0fa      	beq.n	8019f3a <__sccl+0x4a>
 8019f44:	42b3      	cmp	r3, r6
 8019f46:	dcf8      	bgt.n	8019f3a <__sccl+0x4a>
 8019f48:	4618      	mov	r0, r3
 8019f4a:	3001      	adds	r0, #1
 8019f4c:	4286      	cmp	r6, r0
 8019f4e:	5421      	strb	r1, [r4, r0]
 8019f50:	dcfb      	bgt.n	8019f4a <__sccl+0x5a>
 8019f52:	43d8      	mvns	r0, r3
 8019f54:	4430      	add	r0, r6
 8019f56:	1c5d      	adds	r5, r3, #1
 8019f58:	42b3      	cmp	r3, r6
 8019f5a:	bfa8      	it	ge
 8019f5c:	2000      	movge	r0, #0
 8019f5e:	182b      	adds	r3, r5, r0
 8019f60:	3202      	adds	r2, #2
 8019f62:	e7de      	b.n	8019f22 <__sccl+0x32>

08019f64 <strncmp>:
 8019f64:	b510      	push	{r4, lr}
 8019f66:	b16a      	cbz	r2, 8019f84 <strncmp+0x20>
 8019f68:	3901      	subs	r1, #1
 8019f6a:	1884      	adds	r4, r0, r2
 8019f6c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019f70:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019f74:	4293      	cmp	r3, r2
 8019f76:	d103      	bne.n	8019f80 <strncmp+0x1c>
 8019f78:	42a0      	cmp	r0, r4
 8019f7a:	d001      	beq.n	8019f80 <strncmp+0x1c>
 8019f7c:	2b00      	cmp	r3, #0
 8019f7e:	d1f5      	bne.n	8019f6c <strncmp+0x8>
 8019f80:	1a98      	subs	r0, r3, r2
 8019f82:	bd10      	pop	{r4, pc}
 8019f84:	4610      	mov	r0, r2
 8019f86:	e7fc      	b.n	8019f82 <strncmp+0x1e>

08019f88 <_strtoul_l.isra.0>:
 8019f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019f8c:	4e3b      	ldr	r6, [pc, #236]	; (801a07c <_strtoul_l.isra.0+0xf4>)
 8019f8e:	4686      	mov	lr, r0
 8019f90:	468c      	mov	ip, r1
 8019f92:	4660      	mov	r0, ip
 8019f94:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8019f98:	5da5      	ldrb	r5, [r4, r6]
 8019f9a:	f015 0508 	ands.w	r5, r5, #8
 8019f9e:	d1f8      	bne.n	8019f92 <_strtoul_l.isra.0+0xa>
 8019fa0:	2c2d      	cmp	r4, #45	; 0x2d
 8019fa2:	d134      	bne.n	801a00e <_strtoul_l.isra.0+0x86>
 8019fa4:	f89c 4000 	ldrb.w	r4, [ip]
 8019fa8:	f04f 0801 	mov.w	r8, #1
 8019fac:	f100 0c02 	add.w	ip, r0, #2
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d05e      	beq.n	801a072 <_strtoul_l.isra.0+0xea>
 8019fb4:	2b10      	cmp	r3, #16
 8019fb6:	d10c      	bne.n	8019fd2 <_strtoul_l.isra.0+0x4a>
 8019fb8:	2c30      	cmp	r4, #48	; 0x30
 8019fba:	d10a      	bne.n	8019fd2 <_strtoul_l.isra.0+0x4a>
 8019fbc:	f89c 0000 	ldrb.w	r0, [ip]
 8019fc0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8019fc4:	2858      	cmp	r0, #88	; 0x58
 8019fc6:	d14f      	bne.n	801a068 <_strtoul_l.isra.0+0xe0>
 8019fc8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8019fcc:	2310      	movs	r3, #16
 8019fce:	f10c 0c02 	add.w	ip, ip, #2
 8019fd2:	f04f 37ff 	mov.w	r7, #4294967295
 8019fd6:	2500      	movs	r5, #0
 8019fd8:	fbb7 f7f3 	udiv	r7, r7, r3
 8019fdc:	fb03 f907 	mul.w	r9, r3, r7
 8019fe0:	ea6f 0909 	mvn.w	r9, r9
 8019fe4:	4628      	mov	r0, r5
 8019fe6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8019fea:	2e09      	cmp	r6, #9
 8019fec:	d818      	bhi.n	801a020 <_strtoul_l.isra.0+0x98>
 8019fee:	4634      	mov	r4, r6
 8019ff0:	42a3      	cmp	r3, r4
 8019ff2:	dd24      	ble.n	801a03e <_strtoul_l.isra.0+0xb6>
 8019ff4:	2d00      	cmp	r5, #0
 8019ff6:	db1f      	blt.n	801a038 <_strtoul_l.isra.0+0xb0>
 8019ff8:	4287      	cmp	r7, r0
 8019ffa:	d31d      	bcc.n	801a038 <_strtoul_l.isra.0+0xb0>
 8019ffc:	d101      	bne.n	801a002 <_strtoul_l.isra.0+0x7a>
 8019ffe:	45a1      	cmp	r9, r4
 801a000:	db1a      	blt.n	801a038 <_strtoul_l.isra.0+0xb0>
 801a002:	fb00 4003 	mla	r0, r0, r3, r4
 801a006:	2501      	movs	r5, #1
 801a008:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801a00c:	e7eb      	b.n	8019fe6 <_strtoul_l.isra.0+0x5e>
 801a00e:	2c2b      	cmp	r4, #43	; 0x2b
 801a010:	bf08      	it	eq
 801a012:	f89c 4000 	ldrbeq.w	r4, [ip]
 801a016:	46a8      	mov	r8, r5
 801a018:	bf08      	it	eq
 801a01a:	f100 0c02 	addeq.w	ip, r0, #2
 801a01e:	e7c7      	b.n	8019fb0 <_strtoul_l.isra.0+0x28>
 801a020:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801a024:	2e19      	cmp	r6, #25
 801a026:	d801      	bhi.n	801a02c <_strtoul_l.isra.0+0xa4>
 801a028:	3c37      	subs	r4, #55	; 0x37
 801a02a:	e7e1      	b.n	8019ff0 <_strtoul_l.isra.0+0x68>
 801a02c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801a030:	2e19      	cmp	r6, #25
 801a032:	d804      	bhi.n	801a03e <_strtoul_l.isra.0+0xb6>
 801a034:	3c57      	subs	r4, #87	; 0x57
 801a036:	e7db      	b.n	8019ff0 <_strtoul_l.isra.0+0x68>
 801a038:	f04f 35ff 	mov.w	r5, #4294967295
 801a03c:	e7e4      	b.n	801a008 <_strtoul_l.isra.0+0x80>
 801a03e:	2d00      	cmp	r5, #0
 801a040:	da07      	bge.n	801a052 <_strtoul_l.isra.0+0xca>
 801a042:	2322      	movs	r3, #34	; 0x22
 801a044:	f8ce 3000 	str.w	r3, [lr]
 801a048:	f04f 30ff 	mov.w	r0, #4294967295
 801a04c:	b942      	cbnz	r2, 801a060 <_strtoul_l.isra.0+0xd8>
 801a04e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a052:	f1b8 0f00 	cmp.w	r8, #0
 801a056:	d000      	beq.n	801a05a <_strtoul_l.isra.0+0xd2>
 801a058:	4240      	negs	r0, r0
 801a05a:	2a00      	cmp	r2, #0
 801a05c:	d0f7      	beq.n	801a04e <_strtoul_l.isra.0+0xc6>
 801a05e:	b10d      	cbz	r5, 801a064 <_strtoul_l.isra.0+0xdc>
 801a060:	f10c 31ff 	add.w	r1, ip, #4294967295
 801a064:	6011      	str	r1, [r2, #0]
 801a066:	e7f2      	b.n	801a04e <_strtoul_l.isra.0+0xc6>
 801a068:	2430      	movs	r4, #48	; 0x30
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d1b1      	bne.n	8019fd2 <_strtoul_l.isra.0+0x4a>
 801a06e:	2308      	movs	r3, #8
 801a070:	e7af      	b.n	8019fd2 <_strtoul_l.isra.0+0x4a>
 801a072:	2c30      	cmp	r4, #48	; 0x30
 801a074:	d0a2      	beq.n	8019fbc <_strtoul_l.isra.0+0x34>
 801a076:	230a      	movs	r3, #10
 801a078:	e7ab      	b.n	8019fd2 <_strtoul_l.isra.0+0x4a>
 801a07a:	bf00      	nop
 801a07c:	0801b029 	.word	0x0801b029

0801a080 <_strtoul_r>:
 801a080:	f7ff bf82 	b.w	8019f88 <_strtoul_l.isra.0>

0801a084 <__submore>:
 801a084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a088:	460c      	mov	r4, r1
 801a08a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801a08c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a090:	4299      	cmp	r1, r3
 801a092:	d11d      	bne.n	801a0d0 <__submore+0x4c>
 801a094:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a098:	f7ff f8d0 	bl	801923c <_malloc_r>
 801a09c:	b918      	cbnz	r0, 801a0a6 <__submore+0x22>
 801a09e:	f04f 30ff 	mov.w	r0, #4294967295
 801a0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a0aa:	63a3      	str	r3, [r4, #56]	; 0x38
 801a0ac:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801a0b0:	6360      	str	r0, [r4, #52]	; 0x34
 801a0b2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801a0b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801a0ba:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801a0be:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a0c2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801a0c6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801a0ca:	6020      	str	r0, [r4, #0]
 801a0cc:	2000      	movs	r0, #0
 801a0ce:	e7e8      	b.n	801a0a2 <__submore+0x1e>
 801a0d0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801a0d2:	0077      	lsls	r7, r6, #1
 801a0d4:	463a      	mov	r2, r7
 801a0d6:	f000 fa59 	bl	801a58c <_realloc_r>
 801a0da:	4605      	mov	r5, r0
 801a0dc:	2800      	cmp	r0, #0
 801a0de:	d0de      	beq.n	801a09e <__submore+0x1a>
 801a0e0:	eb00 0806 	add.w	r8, r0, r6
 801a0e4:	4601      	mov	r1, r0
 801a0e6:	4632      	mov	r2, r6
 801a0e8:	4640      	mov	r0, r8
 801a0ea:	f7fb fa2d 	bl	8015548 <memcpy>
 801a0ee:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801a0f2:	f8c4 8000 	str.w	r8, [r4]
 801a0f6:	e7e9      	b.n	801a0cc <__submore+0x48>

0801a0f8 <__swbuf_r>:
 801a0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0fa:	460e      	mov	r6, r1
 801a0fc:	4614      	mov	r4, r2
 801a0fe:	4605      	mov	r5, r0
 801a100:	b118      	cbz	r0, 801a10a <__swbuf_r+0x12>
 801a102:	6983      	ldr	r3, [r0, #24]
 801a104:	b90b      	cbnz	r3, 801a10a <__swbuf_r+0x12>
 801a106:	f7fd ff3f 	bl	8017f88 <__sinit>
 801a10a:	4b21      	ldr	r3, [pc, #132]	; (801a190 <__swbuf_r+0x98>)
 801a10c:	429c      	cmp	r4, r3
 801a10e:	d12b      	bne.n	801a168 <__swbuf_r+0x70>
 801a110:	686c      	ldr	r4, [r5, #4]
 801a112:	69a3      	ldr	r3, [r4, #24]
 801a114:	60a3      	str	r3, [r4, #8]
 801a116:	89a3      	ldrh	r3, [r4, #12]
 801a118:	071a      	lsls	r2, r3, #28
 801a11a:	d52f      	bpl.n	801a17c <__swbuf_r+0x84>
 801a11c:	6923      	ldr	r3, [r4, #16]
 801a11e:	b36b      	cbz	r3, 801a17c <__swbuf_r+0x84>
 801a120:	6923      	ldr	r3, [r4, #16]
 801a122:	6820      	ldr	r0, [r4, #0]
 801a124:	1ac0      	subs	r0, r0, r3
 801a126:	6963      	ldr	r3, [r4, #20]
 801a128:	b2f6      	uxtb	r6, r6
 801a12a:	4283      	cmp	r3, r0
 801a12c:	4637      	mov	r7, r6
 801a12e:	dc04      	bgt.n	801a13a <__swbuf_r+0x42>
 801a130:	4621      	mov	r1, r4
 801a132:	4628      	mov	r0, r5
 801a134:	f000 f952 	bl	801a3dc <_fflush_r>
 801a138:	bb30      	cbnz	r0, 801a188 <__swbuf_r+0x90>
 801a13a:	68a3      	ldr	r3, [r4, #8]
 801a13c:	3b01      	subs	r3, #1
 801a13e:	60a3      	str	r3, [r4, #8]
 801a140:	6823      	ldr	r3, [r4, #0]
 801a142:	1c5a      	adds	r2, r3, #1
 801a144:	6022      	str	r2, [r4, #0]
 801a146:	701e      	strb	r6, [r3, #0]
 801a148:	6963      	ldr	r3, [r4, #20]
 801a14a:	3001      	adds	r0, #1
 801a14c:	4283      	cmp	r3, r0
 801a14e:	d004      	beq.n	801a15a <__swbuf_r+0x62>
 801a150:	89a3      	ldrh	r3, [r4, #12]
 801a152:	07db      	lsls	r3, r3, #31
 801a154:	d506      	bpl.n	801a164 <__swbuf_r+0x6c>
 801a156:	2e0a      	cmp	r6, #10
 801a158:	d104      	bne.n	801a164 <__swbuf_r+0x6c>
 801a15a:	4621      	mov	r1, r4
 801a15c:	4628      	mov	r0, r5
 801a15e:	f000 f93d 	bl	801a3dc <_fflush_r>
 801a162:	b988      	cbnz	r0, 801a188 <__swbuf_r+0x90>
 801a164:	4638      	mov	r0, r7
 801a166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a168:	4b0a      	ldr	r3, [pc, #40]	; (801a194 <__swbuf_r+0x9c>)
 801a16a:	429c      	cmp	r4, r3
 801a16c:	d101      	bne.n	801a172 <__swbuf_r+0x7a>
 801a16e:	68ac      	ldr	r4, [r5, #8]
 801a170:	e7cf      	b.n	801a112 <__swbuf_r+0x1a>
 801a172:	4b09      	ldr	r3, [pc, #36]	; (801a198 <__swbuf_r+0xa0>)
 801a174:	429c      	cmp	r4, r3
 801a176:	bf08      	it	eq
 801a178:	68ec      	ldreq	r4, [r5, #12]
 801a17a:	e7ca      	b.n	801a112 <__swbuf_r+0x1a>
 801a17c:	4621      	mov	r1, r4
 801a17e:	4628      	mov	r0, r5
 801a180:	f000 f81a 	bl	801a1b8 <__swsetup_r>
 801a184:	2800      	cmp	r0, #0
 801a186:	d0cb      	beq.n	801a120 <__swbuf_r+0x28>
 801a188:	f04f 37ff 	mov.w	r7, #4294967295
 801a18c:	e7ea      	b.n	801a164 <__swbuf_r+0x6c>
 801a18e:	bf00      	nop
 801a190:	0801b1e0 	.word	0x0801b1e0
 801a194:	0801b200 	.word	0x0801b200
 801a198:	0801b1c0 	.word	0x0801b1c0

0801a19c <__ascii_wctomb>:
 801a19c:	b149      	cbz	r1, 801a1b2 <__ascii_wctomb+0x16>
 801a19e:	2aff      	cmp	r2, #255	; 0xff
 801a1a0:	bf85      	ittet	hi
 801a1a2:	238a      	movhi	r3, #138	; 0x8a
 801a1a4:	6003      	strhi	r3, [r0, #0]
 801a1a6:	700a      	strbls	r2, [r1, #0]
 801a1a8:	f04f 30ff 	movhi.w	r0, #4294967295
 801a1ac:	bf98      	it	ls
 801a1ae:	2001      	movls	r0, #1
 801a1b0:	4770      	bx	lr
 801a1b2:	4608      	mov	r0, r1
 801a1b4:	4770      	bx	lr
	...

0801a1b8 <__swsetup_r>:
 801a1b8:	4b32      	ldr	r3, [pc, #200]	; (801a284 <__swsetup_r+0xcc>)
 801a1ba:	b570      	push	{r4, r5, r6, lr}
 801a1bc:	681d      	ldr	r5, [r3, #0]
 801a1be:	4606      	mov	r6, r0
 801a1c0:	460c      	mov	r4, r1
 801a1c2:	b125      	cbz	r5, 801a1ce <__swsetup_r+0x16>
 801a1c4:	69ab      	ldr	r3, [r5, #24]
 801a1c6:	b913      	cbnz	r3, 801a1ce <__swsetup_r+0x16>
 801a1c8:	4628      	mov	r0, r5
 801a1ca:	f7fd fedd 	bl	8017f88 <__sinit>
 801a1ce:	4b2e      	ldr	r3, [pc, #184]	; (801a288 <__swsetup_r+0xd0>)
 801a1d0:	429c      	cmp	r4, r3
 801a1d2:	d10f      	bne.n	801a1f4 <__swsetup_r+0x3c>
 801a1d4:	686c      	ldr	r4, [r5, #4]
 801a1d6:	89a3      	ldrh	r3, [r4, #12]
 801a1d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a1dc:	0719      	lsls	r1, r3, #28
 801a1de:	d42c      	bmi.n	801a23a <__swsetup_r+0x82>
 801a1e0:	06dd      	lsls	r5, r3, #27
 801a1e2:	d411      	bmi.n	801a208 <__swsetup_r+0x50>
 801a1e4:	2309      	movs	r3, #9
 801a1e6:	6033      	str	r3, [r6, #0]
 801a1e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a1ec:	81a3      	strh	r3, [r4, #12]
 801a1ee:	f04f 30ff 	mov.w	r0, #4294967295
 801a1f2:	e03e      	b.n	801a272 <__swsetup_r+0xba>
 801a1f4:	4b25      	ldr	r3, [pc, #148]	; (801a28c <__swsetup_r+0xd4>)
 801a1f6:	429c      	cmp	r4, r3
 801a1f8:	d101      	bne.n	801a1fe <__swsetup_r+0x46>
 801a1fa:	68ac      	ldr	r4, [r5, #8]
 801a1fc:	e7eb      	b.n	801a1d6 <__swsetup_r+0x1e>
 801a1fe:	4b24      	ldr	r3, [pc, #144]	; (801a290 <__swsetup_r+0xd8>)
 801a200:	429c      	cmp	r4, r3
 801a202:	bf08      	it	eq
 801a204:	68ec      	ldreq	r4, [r5, #12]
 801a206:	e7e6      	b.n	801a1d6 <__swsetup_r+0x1e>
 801a208:	0758      	lsls	r0, r3, #29
 801a20a:	d512      	bpl.n	801a232 <__swsetup_r+0x7a>
 801a20c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a20e:	b141      	cbz	r1, 801a222 <__swsetup_r+0x6a>
 801a210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a214:	4299      	cmp	r1, r3
 801a216:	d002      	beq.n	801a21e <__swsetup_r+0x66>
 801a218:	4630      	mov	r0, r6
 801a21a:	f7fe ffbf 	bl	801919c <_free_r>
 801a21e:	2300      	movs	r3, #0
 801a220:	6363      	str	r3, [r4, #52]	; 0x34
 801a222:	89a3      	ldrh	r3, [r4, #12]
 801a224:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a228:	81a3      	strh	r3, [r4, #12]
 801a22a:	2300      	movs	r3, #0
 801a22c:	6063      	str	r3, [r4, #4]
 801a22e:	6923      	ldr	r3, [r4, #16]
 801a230:	6023      	str	r3, [r4, #0]
 801a232:	89a3      	ldrh	r3, [r4, #12]
 801a234:	f043 0308 	orr.w	r3, r3, #8
 801a238:	81a3      	strh	r3, [r4, #12]
 801a23a:	6923      	ldr	r3, [r4, #16]
 801a23c:	b94b      	cbnz	r3, 801a252 <__swsetup_r+0x9a>
 801a23e:	89a3      	ldrh	r3, [r4, #12]
 801a240:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a248:	d003      	beq.n	801a252 <__swsetup_r+0x9a>
 801a24a:	4621      	mov	r1, r4
 801a24c:	4630      	mov	r0, r6
 801a24e:	f000 f937 	bl	801a4c0 <__smakebuf_r>
 801a252:	89a0      	ldrh	r0, [r4, #12]
 801a254:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a258:	f010 0301 	ands.w	r3, r0, #1
 801a25c:	d00a      	beq.n	801a274 <__swsetup_r+0xbc>
 801a25e:	2300      	movs	r3, #0
 801a260:	60a3      	str	r3, [r4, #8]
 801a262:	6963      	ldr	r3, [r4, #20]
 801a264:	425b      	negs	r3, r3
 801a266:	61a3      	str	r3, [r4, #24]
 801a268:	6923      	ldr	r3, [r4, #16]
 801a26a:	b943      	cbnz	r3, 801a27e <__swsetup_r+0xc6>
 801a26c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a270:	d1ba      	bne.n	801a1e8 <__swsetup_r+0x30>
 801a272:	bd70      	pop	{r4, r5, r6, pc}
 801a274:	0781      	lsls	r1, r0, #30
 801a276:	bf58      	it	pl
 801a278:	6963      	ldrpl	r3, [r4, #20]
 801a27a:	60a3      	str	r3, [r4, #8]
 801a27c:	e7f4      	b.n	801a268 <__swsetup_r+0xb0>
 801a27e:	2000      	movs	r0, #0
 801a280:	e7f7      	b.n	801a272 <__swsetup_r+0xba>
 801a282:	bf00      	nop
 801a284:	2000000c 	.word	0x2000000c
 801a288:	0801b1e0 	.word	0x0801b1e0
 801a28c:	0801b200 	.word	0x0801b200
 801a290:	0801b1c0 	.word	0x0801b1c0

0801a294 <__assert_func>:
 801a294:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a296:	4614      	mov	r4, r2
 801a298:	461a      	mov	r2, r3
 801a29a:	4b09      	ldr	r3, [pc, #36]	; (801a2c0 <__assert_func+0x2c>)
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	4605      	mov	r5, r0
 801a2a0:	68d8      	ldr	r0, [r3, #12]
 801a2a2:	b14c      	cbz	r4, 801a2b8 <__assert_func+0x24>
 801a2a4:	4b07      	ldr	r3, [pc, #28]	; (801a2c4 <__assert_func+0x30>)
 801a2a6:	9100      	str	r1, [sp, #0]
 801a2a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a2ac:	4906      	ldr	r1, [pc, #24]	; (801a2c8 <__assert_func+0x34>)
 801a2ae:	462b      	mov	r3, r5
 801a2b0:	f000 f8d0 	bl	801a454 <fiprintf>
 801a2b4:	f000 f990 	bl	801a5d8 <abort>
 801a2b8:	4b04      	ldr	r3, [pc, #16]	; (801a2cc <__assert_func+0x38>)
 801a2ba:	461c      	mov	r4, r3
 801a2bc:	e7f3      	b.n	801a2a6 <__assert_func+0x12>
 801a2be:	bf00      	nop
 801a2c0:	2000000c 	.word	0x2000000c
 801a2c4:	0801b428 	.word	0x0801b428
 801a2c8:	0801b435 	.word	0x0801b435
 801a2cc:	0801b463 	.word	0x0801b463

0801a2d0 <__sflush_r>:
 801a2d0:	898a      	ldrh	r2, [r1, #12]
 801a2d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2d6:	4605      	mov	r5, r0
 801a2d8:	0710      	lsls	r0, r2, #28
 801a2da:	460c      	mov	r4, r1
 801a2dc:	d458      	bmi.n	801a390 <__sflush_r+0xc0>
 801a2de:	684b      	ldr	r3, [r1, #4]
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	dc05      	bgt.n	801a2f0 <__sflush_r+0x20>
 801a2e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a2e6:	2b00      	cmp	r3, #0
 801a2e8:	dc02      	bgt.n	801a2f0 <__sflush_r+0x20>
 801a2ea:	2000      	movs	r0, #0
 801a2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a2f2:	2e00      	cmp	r6, #0
 801a2f4:	d0f9      	beq.n	801a2ea <__sflush_r+0x1a>
 801a2f6:	2300      	movs	r3, #0
 801a2f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a2fc:	682f      	ldr	r7, [r5, #0]
 801a2fe:	602b      	str	r3, [r5, #0]
 801a300:	d032      	beq.n	801a368 <__sflush_r+0x98>
 801a302:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a304:	89a3      	ldrh	r3, [r4, #12]
 801a306:	075a      	lsls	r2, r3, #29
 801a308:	d505      	bpl.n	801a316 <__sflush_r+0x46>
 801a30a:	6863      	ldr	r3, [r4, #4]
 801a30c:	1ac0      	subs	r0, r0, r3
 801a30e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a310:	b10b      	cbz	r3, 801a316 <__sflush_r+0x46>
 801a312:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a314:	1ac0      	subs	r0, r0, r3
 801a316:	2300      	movs	r3, #0
 801a318:	4602      	mov	r2, r0
 801a31a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a31c:	6a21      	ldr	r1, [r4, #32]
 801a31e:	4628      	mov	r0, r5
 801a320:	47b0      	blx	r6
 801a322:	1c43      	adds	r3, r0, #1
 801a324:	89a3      	ldrh	r3, [r4, #12]
 801a326:	d106      	bne.n	801a336 <__sflush_r+0x66>
 801a328:	6829      	ldr	r1, [r5, #0]
 801a32a:	291d      	cmp	r1, #29
 801a32c:	d82c      	bhi.n	801a388 <__sflush_r+0xb8>
 801a32e:	4a2a      	ldr	r2, [pc, #168]	; (801a3d8 <__sflush_r+0x108>)
 801a330:	40ca      	lsrs	r2, r1
 801a332:	07d6      	lsls	r6, r2, #31
 801a334:	d528      	bpl.n	801a388 <__sflush_r+0xb8>
 801a336:	2200      	movs	r2, #0
 801a338:	6062      	str	r2, [r4, #4]
 801a33a:	04d9      	lsls	r1, r3, #19
 801a33c:	6922      	ldr	r2, [r4, #16]
 801a33e:	6022      	str	r2, [r4, #0]
 801a340:	d504      	bpl.n	801a34c <__sflush_r+0x7c>
 801a342:	1c42      	adds	r2, r0, #1
 801a344:	d101      	bne.n	801a34a <__sflush_r+0x7a>
 801a346:	682b      	ldr	r3, [r5, #0]
 801a348:	b903      	cbnz	r3, 801a34c <__sflush_r+0x7c>
 801a34a:	6560      	str	r0, [r4, #84]	; 0x54
 801a34c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a34e:	602f      	str	r7, [r5, #0]
 801a350:	2900      	cmp	r1, #0
 801a352:	d0ca      	beq.n	801a2ea <__sflush_r+0x1a>
 801a354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a358:	4299      	cmp	r1, r3
 801a35a:	d002      	beq.n	801a362 <__sflush_r+0x92>
 801a35c:	4628      	mov	r0, r5
 801a35e:	f7fe ff1d 	bl	801919c <_free_r>
 801a362:	2000      	movs	r0, #0
 801a364:	6360      	str	r0, [r4, #52]	; 0x34
 801a366:	e7c1      	b.n	801a2ec <__sflush_r+0x1c>
 801a368:	6a21      	ldr	r1, [r4, #32]
 801a36a:	2301      	movs	r3, #1
 801a36c:	4628      	mov	r0, r5
 801a36e:	47b0      	blx	r6
 801a370:	1c41      	adds	r1, r0, #1
 801a372:	d1c7      	bne.n	801a304 <__sflush_r+0x34>
 801a374:	682b      	ldr	r3, [r5, #0]
 801a376:	2b00      	cmp	r3, #0
 801a378:	d0c4      	beq.n	801a304 <__sflush_r+0x34>
 801a37a:	2b1d      	cmp	r3, #29
 801a37c:	d001      	beq.n	801a382 <__sflush_r+0xb2>
 801a37e:	2b16      	cmp	r3, #22
 801a380:	d101      	bne.n	801a386 <__sflush_r+0xb6>
 801a382:	602f      	str	r7, [r5, #0]
 801a384:	e7b1      	b.n	801a2ea <__sflush_r+0x1a>
 801a386:	89a3      	ldrh	r3, [r4, #12]
 801a388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a38c:	81a3      	strh	r3, [r4, #12]
 801a38e:	e7ad      	b.n	801a2ec <__sflush_r+0x1c>
 801a390:	690f      	ldr	r7, [r1, #16]
 801a392:	2f00      	cmp	r7, #0
 801a394:	d0a9      	beq.n	801a2ea <__sflush_r+0x1a>
 801a396:	0793      	lsls	r3, r2, #30
 801a398:	680e      	ldr	r6, [r1, #0]
 801a39a:	bf08      	it	eq
 801a39c:	694b      	ldreq	r3, [r1, #20]
 801a39e:	600f      	str	r7, [r1, #0]
 801a3a0:	bf18      	it	ne
 801a3a2:	2300      	movne	r3, #0
 801a3a4:	eba6 0807 	sub.w	r8, r6, r7
 801a3a8:	608b      	str	r3, [r1, #8]
 801a3aa:	f1b8 0f00 	cmp.w	r8, #0
 801a3ae:	dd9c      	ble.n	801a2ea <__sflush_r+0x1a>
 801a3b0:	6a21      	ldr	r1, [r4, #32]
 801a3b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a3b4:	4643      	mov	r3, r8
 801a3b6:	463a      	mov	r2, r7
 801a3b8:	4628      	mov	r0, r5
 801a3ba:	47b0      	blx	r6
 801a3bc:	2800      	cmp	r0, #0
 801a3be:	dc06      	bgt.n	801a3ce <__sflush_r+0xfe>
 801a3c0:	89a3      	ldrh	r3, [r4, #12]
 801a3c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a3c6:	81a3      	strh	r3, [r4, #12]
 801a3c8:	f04f 30ff 	mov.w	r0, #4294967295
 801a3cc:	e78e      	b.n	801a2ec <__sflush_r+0x1c>
 801a3ce:	4407      	add	r7, r0
 801a3d0:	eba8 0800 	sub.w	r8, r8, r0
 801a3d4:	e7e9      	b.n	801a3aa <__sflush_r+0xda>
 801a3d6:	bf00      	nop
 801a3d8:	20400001 	.word	0x20400001

0801a3dc <_fflush_r>:
 801a3dc:	b538      	push	{r3, r4, r5, lr}
 801a3de:	690b      	ldr	r3, [r1, #16]
 801a3e0:	4605      	mov	r5, r0
 801a3e2:	460c      	mov	r4, r1
 801a3e4:	b913      	cbnz	r3, 801a3ec <_fflush_r+0x10>
 801a3e6:	2500      	movs	r5, #0
 801a3e8:	4628      	mov	r0, r5
 801a3ea:	bd38      	pop	{r3, r4, r5, pc}
 801a3ec:	b118      	cbz	r0, 801a3f6 <_fflush_r+0x1a>
 801a3ee:	6983      	ldr	r3, [r0, #24]
 801a3f0:	b90b      	cbnz	r3, 801a3f6 <_fflush_r+0x1a>
 801a3f2:	f7fd fdc9 	bl	8017f88 <__sinit>
 801a3f6:	4b14      	ldr	r3, [pc, #80]	; (801a448 <_fflush_r+0x6c>)
 801a3f8:	429c      	cmp	r4, r3
 801a3fa:	d11b      	bne.n	801a434 <_fflush_r+0x58>
 801a3fc:	686c      	ldr	r4, [r5, #4]
 801a3fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a402:	2b00      	cmp	r3, #0
 801a404:	d0ef      	beq.n	801a3e6 <_fflush_r+0xa>
 801a406:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a408:	07d0      	lsls	r0, r2, #31
 801a40a:	d404      	bmi.n	801a416 <_fflush_r+0x3a>
 801a40c:	0599      	lsls	r1, r3, #22
 801a40e:	d402      	bmi.n	801a416 <_fflush_r+0x3a>
 801a410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a412:	f7fe f9ca 	bl	80187aa <__retarget_lock_acquire_recursive>
 801a416:	4628      	mov	r0, r5
 801a418:	4621      	mov	r1, r4
 801a41a:	f7ff ff59 	bl	801a2d0 <__sflush_r>
 801a41e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a420:	07da      	lsls	r2, r3, #31
 801a422:	4605      	mov	r5, r0
 801a424:	d4e0      	bmi.n	801a3e8 <_fflush_r+0xc>
 801a426:	89a3      	ldrh	r3, [r4, #12]
 801a428:	059b      	lsls	r3, r3, #22
 801a42a:	d4dd      	bmi.n	801a3e8 <_fflush_r+0xc>
 801a42c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a42e:	f7fe f9bd 	bl	80187ac <__retarget_lock_release_recursive>
 801a432:	e7d9      	b.n	801a3e8 <_fflush_r+0xc>
 801a434:	4b05      	ldr	r3, [pc, #20]	; (801a44c <_fflush_r+0x70>)
 801a436:	429c      	cmp	r4, r3
 801a438:	d101      	bne.n	801a43e <_fflush_r+0x62>
 801a43a:	68ac      	ldr	r4, [r5, #8]
 801a43c:	e7df      	b.n	801a3fe <_fflush_r+0x22>
 801a43e:	4b04      	ldr	r3, [pc, #16]	; (801a450 <_fflush_r+0x74>)
 801a440:	429c      	cmp	r4, r3
 801a442:	bf08      	it	eq
 801a444:	68ec      	ldreq	r4, [r5, #12]
 801a446:	e7da      	b.n	801a3fe <_fflush_r+0x22>
 801a448:	0801b1e0 	.word	0x0801b1e0
 801a44c:	0801b200 	.word	0x0801b200
 801a450:	0801b1c0 	.word	0x0801b1c0

0801a454 <fiprintf>:
 801a454:	b40e      	push	{r1, r2, r3}
 801a456:	b503      	push	{r0, r1, lr}
 801a458:	4601      	mov	r1, r0
 801a45a:	ab03      	add	r3, sp, #12
 801a45c:	4805      	ldr	r0, [pc, #20]	; (801a474 <fiprintf+0x20>)
 801a45e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a462:	6800      	ldr	r0, [r0, #0]
 801a464:	9301      	str	r3, [sp, #4]
 801a466:	f7ff fa9b 	bl	80199a0 <_vfiprintf_r>
 801a46a:	b002      	add	sp, #8
 801a46c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a470:	b003      	add	sp, #12
 801a472:	4770      	bx	lr
 801a474:	2000000c 	.word	0x2000000c

0801a478 <__swhatbuf_r>:
 801a478:	b570      	push	{r4, r5, r6, lr}
 801a47a:	460e      	mov	r6, r1
 801a47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a480:	2900      	cmp	r1, #0
 801a482:	b096      	sub	sp, #88	; 0x58
 801a484:	4614      	mov	r4, r2
 801a486:	461d      	mov	r5, r3
 801a488:	da07      	bge.n	801a49a <__swhatbuf_r+0x22>
 801a48a:	2300      	movs	r3, #0
 801a48c:	602b      	str	r3, [r5, #0]
 801a48e:	89b3      	ldrh	r3, [r6, #12]
 801a490:	061a      	lsls	r2, r3, #24
 801a492:	d410      	bmi.n	801a4b6 <__swhatbuf_r+0x3e>
 801a494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a498:	e00e      	b.n	801a4b8 <__swhatbuf_r+0x40>
 801a49a:	466a      	mov	r2, sp
 801a49c:	f000 f8a4 	bl	801a5e8 <_fstat_r>
 801a4a0:	2800      	cmp	r0, #0
 801a4a2:	dbf2      	blt.n	801a48a <__swhatbuf_r+0x12>
 801a4a4:	9a01      	ldr	r2, [sp, #4]
 801a4a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a4aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a4ae:	425a      	negs	r2, r3
 801a4b0:	415a      	adcs	r2, r3
 801a4b2:	602a      	str	r2, [r5, #0]
 801a4b4:	e7ee      	b.n	801a494 <__swhatbuf_r+0x1c>
 801a4b6:	2340      	movs	r3, #64	; 0x40
 801a4b8:	2000      	movs	r0, #0
 801a4ba:	6023      	str	r3, [r4, #0]
 801a4bc:	b016      	add	sp, #88	; 0x58
 801a4be:	bd70      	pop	{r4, r5, r6, pc}

0801a4c0 <__smakebuf_r>:
 801a4c0:	898b      	ldrh	r3, [r1, #12]
 801a4c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a4c4:	079d      	lsls	r5, r3, #30
 801a4c6:	4606      	mov	r6, r0
 801a4c8:	460c      	mov	r4, r1
 801a4ca:	d507      	bpl.n	801a4dc <__smakebuf_r+0x1c>
 801a4cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a4d0:	6023      	str	r3, [r4, #0]
 801a4d2:	6123      	str	r3, [r4, #16]
 801a4d4:	2301      	movs	r3, #1
 801a4d6:	6163      	str	r3, [r4, #20]
 801a4d8:	b002      	add	sp, #8
 801a4da:	bd70      	pop	{r4, r5, r6, pc}
 801a4dc:	ab01      	add	r3, sp, #4
 801a4de:	466a      	mov	r2, sp
 801a4e0:	f7ff ffca 	bl	801a478 <__swhatbuf_r>
 801a4e4:	9900      	ldr	r1, [sp, #0]
 801a4e6:	4605      	mov	r5, r0
 801a4e8:	4630      	mov	r0, r6
 801a4ea:	f7fe fea7 	bl	801923c <_malloc_r>
 801a4ee:	b948      	cbnz	r0, 801a504 <__smakebuf_r+0x44>
 801a4f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a4f4:	059a      	lsls	r2, r3, #22
 801a4f6:	d4ef      	bmi.n	801a4d8 <__smakebuf_r+0x18>
 801a4f8:	f023 0303 	bic.w	r3, r3, #3
 801a4fc:	f043 0302 	orr.w	r3, r3, #2
 801a500:	81a3      	strh	r3, [r4, #12]
 801a502:	e7e3      	b.n	801a4cc <__smakebuf_r+0xc>
 801a504:	4b0d      	ldr	r3, [pc, #52]	; (801a53c <__smakebuf_r+0x7c>)
 801a506:	62b3      	str	r3, [r6, #40]	; 0x28
 801a508:	89a3      	ldrh	r3, [r4, #12]
 801a50a:	6020      	str	r0, [r4, #0]
 801a50c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a510:	81a3      	strh	r3, [r4, #12]
 801a512:	9b00      	ldr	r3, [sp, #0]
 801a514:	6163      	str	r3, [r4, #20]
 801a516:	9b01      	ldr	r3, [sp, #4]
 801a518:	6120      	str	r0, [r4, #16]
 801a51a:	b15b      	cbz	r3, 801a534 <__smakebuf_r+0x74>
 801a51c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a520:	4630      	mov	r0, r6
 801a522:	f000 f873 	bl	801a60c <_isatty_r>
 801a526:	b128      	cbz	r0, 801a534 <__smakebuf_r+0x74>
 801a528:	89a3      	ldrh	r3, [r4, #12]
 801a52a:	f023 0303 	bic.w	r3, r3, #3
 801a52e:	f043 0301 	orr.w	r3, r3, #1
 801a532:	81a3      	strh	r3, [r4, #12]
 801a534:	89a0      	ldrh	r0, [r4, #12]
 801a536:	4305      	orrs	r5, r0
 801a538:	81a5      	strh	r5, [r4, #12]
 801a53a:	e7cd      	b.n	801a4d8 <__smakebuf_r+0x18>
 801a53c:	08017f21 	.word	0x08017f21

0801a540 <memmove>:
 801a540:	4288      	cmp	r0, r1
 801a542:	b510      	push	{r4, lr}
 801a544:	eb01 0402 	add.w	r4, r1, r2
 801a548:	d902      	bls.n	801a550 <memmove+0x10>
 801a54a:	4284      	cmp	r4, r0
 801a54c:	4623      	mov	r3, r4
 801a54e:	d807      	bhi.n	801a560 <memmove+0x20>
 801a550:	1e43      	subs	r3, r0, #1
 801a552:	42a1      	cmp	r1, r4
 801a554:	d008      	beq.n	801a568 <memmove+0x28>
 801a556:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a55a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a55e:	e7f8      	b.n	801a552 <memmove+0x12>
 801a560:	4402      	add	r2, r0
 801a562:	4601      	mov	r1, r0
 801a564:	428a      	cmp	r2, r1
 801a566:	d100      	bne.n	801a56a <memmove+0x2a>
 801a568:	bd10      	pop	{r4, pc}
 801a56a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a56e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a572:	e7f7      	b.n	801a564 <memmove+0x24>

0801a574 <__malloc_lock>:
 801a574:	4801      	ldr	r0, [pc, #4]	; (801a57c <__malloc_lock+0x8>)
 801a576:	f7fe b918 	b.w	80187aa <__retarget_lock_acquire_recursive>
 801a57a:	bf00      	nop
 801a57c:	20041e58 	.word	0x20041e58

0801a580 <__malloc_unlock>:
 801a580:	4801      	ldr	r0, [pc, #4]	; (801a588 <__malloc_unlock+0x8>)
 801a582:	f7fe b913 	b.w	80187ac <__retarget_lock_release_recursive>
 801a586:	bf00      	nop
 801a588:	20041e58 	.word	0x20041e58

0801a58c <_realloc_r>:
 801a58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a58e:	4607      	mov	r7, r0
 801a590:	4614      	mov	r4, r2
 801a592:	460e      	mov	r6, r1
 801a594:	b921      	cbnz	r1, 801a5a0 <_realloc_r+0x14>
 801a596:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a59a:	4611      	mov	r1, r2
 801a59c:	f7fe be4e 	b.w	801923c <_malloc_r>
 801a5a0:	b922      	cbnz	r2, 801a5ac <_realloc_r+0x20>
 801a5a2:	f7fe fdfb 	bl	801919c <_free_r>
 801a5a6:	4625      	mov	r5, r4
 801a5a8:	4628      	mov	r0, r5
 801a5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5ac:	f000 f83e 	bl	801a62c <_malloc_usable_size_r>
 801a5b0:	42a0      	cmp	r0, r4
 801a5b2:	d20f      	bcs.n	801a5d4 <_realloc_r+0x48>
 801a5b4:	4621      	mov	r1, r4
 801a5b6:	4638      	mov	r0, r7
 801a5b8:	f7fe fe40 	bl	801923c <_malloc_r>
 801a5bc:	4605      	mov	r5, r0
 801a5be:	2800      	cmp	r0, #0
 801a5c0:	d0f2      	beq.n	801a5a8 <_realloc_r+0x1c>
 801a5c2:	4631      	mov	r1, r6
 801a5c4:	4622      	mov	r2, r4
 801a5c6:	f7fa ffbf 	bl	8015548 <memcpy>
 801a5ca:	4631      	mov	r1, r6
 801a5cc:	4638      	mov	r0, r7
 801a5ce:	f7fe fde5 	bl	801919c <_free_r>
 801a5d2:	e7e9      	b.n	801a5a8 <_realloc_r+0x1c>
 801a5d4:	4635      	mov	r5, r6
 801a5d6:	e7e7      	b.n	801a5a8 <_realloc_r+0x1c>

0801a5d8 <abort>:
 801a5d8:	b508      	push	{r3, lr}
 801a5da:	2006      	movs	r0, #6
 801a5dc:	f000 f856 	bl	801a68c <raise>
 801a5e0:	2001      	movs	r0, #1
 801a5e2:	f7ec ffb7 	bl	8007554 <_exit>
	...

0801a5e8 <_fstat_r>:
 801a5e8:	b538      	push	{r3, r4, r5, lr}
 801a5ea:	4d07      	ldr	r5, [pc, #28]	; (801a608 <_fstat_r+0x20>)
 801a5ec:	2300      	movs	r3, #0
 801a5ee:	4604      	mov	r4, r0
 801a5f0:	4608      	mov	r0, r1
 801a5f2:	4611      	mov	r1, r2
 801a5f4:	602b      	str	r3, [r5, #0]
 801a5f6:	f7ec ffe0 	bl	80075ba <_fstat>
 801a5fa:	1c43      	adds	r3, r0, #1
 801a5fc:	d102      	bne.n	801a604 <_fstat_r+0x1c>
 801a5fe:	682b      	ldr	r3, [r5, #0]
 801a600:	b103      	cbz	r3, 801a604 <_fstat_r+0x1c>
 801a602:	6023      	str	r3, [r4, #0]
 801a604:	bd38      	pop	{r3, r4, r5, pc}
 801a606:	bf00      	nop
 801a608:	20041e60 	.word	0x20041e60

0801a60c <_isatty_r>:
 801a60c:	b538      	push	{r3, r4, r5, lr}
 801a60e:	4d06      	ldr	r5, [pc, #24]	; (801a628 <_isatty_r+0x1c>)
 801a610:	2300      	movs	r3, #0
 801a612:	4604      	mov	r4, r0
 801a614:	4608      	mov	r0, r1
 801a616:	602b      	str	r3, [r5, #0]
 801a618:	f7ec ffdf 	bl	80075da <_isatty>
 801a61c:	1c43      	adds	r3, r0, #1
 801a61e:	d102      	bne.n	801a626 <_isatty_r+0x1a>
 801a620:	682b      	ldr	r3, [r5, #0]
 801a622:	b103      	cbz	r3, 801a626 <_isatty_r+0x1a>
 801a624:	6023      	str	r3, [r4, #0]
 801a626:	bd38      	pop	{r3, r4, r5, pc}
 801a628:	20041e60 	.word	0x20041e60

0801a62c <_malloc_usable_size_r>:
 801a62c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a630:	1f18      	subs	r0, r3, #4
 801a632:	2b00      	cmp	r3, #0
 801a634:	bfbc      	itt	lt
 801a636:	580b      	ldrlt	r3, [r1, r0]
 801a638:	18c0      	addlt	r0, r0, r3
 801a63a:	4770      	bx	lr

0801a63c <_raise_r>:
 801a63c:	291f      	cmp	r1, #31
 801a63e:	b538      	push	{r3, r4, r5, lr}
 801a640:	4604      	mov	r4, r0
 801a642:	460d      	mov	r5, r1
 801a644:	d904      	bls.n	801a650 <_raise_r+0x14>
 801a646:	2316      	movs	r3, #22
 801a648:	6003      	str	r3, [r0, #0]
 801a64a:	f04f 30ff 	mov.w	r0, #4294967295
 801a64e:	bd38      	pop	{r3, r4, r5, pc}
 801a650:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a652:	b112      	cbz	r2, 801a65a <_raise_r+0x1e>
 801a654:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a658:	b94b      	cbnz	r3, 801a66e <_raise_r+0x32>
 801a65a:	4620      	mov	r0, r4
 801a65c:	f000 f830 	bl	801a6c0 <_getpid_r>
 801a660:	462a      	mov	r2, r5
 801a662:	4601      	mov	r1, r0
 801a664:	4620      	mov	r0, r4
 801a666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a66a:	f000 b817 	b.w	801a69c <_kill_r>
 801a66e:	2b01      	cmp	r3, #1
 801a670:	d00a      	beq.n	801a688 <_raise_r+0x4c>
 801a672:	1c59      	adds	r1, r3, #1
 801a674:	d103      	bne.n	801a67e <_raise_r+0x42>
 801a676:	2316      	movs	r3, #22
 801a678:	6003      	str	r3, [r0, #0]
 801a67a:	2001      	movs	r0, #1
 801a67c:	e7e7      	b.n	801a64e <_raise_r+0x12>
 801a67e:	2400      	movs	r4, #0
 801a680:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a684:	4628      	mov	r0, r5
 801a686:	4798      	blx	r3
 801a688:	2000      	movs	r0, #0
 801a68a:	e7e0      	b.n	801a64e <_raise_r+0x12>

0801a68c <raise>:
 801a68c:	4b02      	ldr	r3, [pc, #8]	; (801a698 <raise+0xc>)
 801a68e:	4601      	mov	r1, r0
 801a690:	6818      	ldr	r0, [r3, #0]
 801a692:	f7ff bfd3 	b.w	801a63c <_raise_r>
 801a696:	bf00      	nop
 801a698:	2000000c 	.word	0x2000000c

0801a69c <_kill_r>:
 801a69c:	b538      	push	{r3, r4, r5, lr}
 801a69e:	4d07      	ldr	r5, [pc, #28]	; (801a6bc <_kill_r+0x20>)
 801a6a0:	2300      	movs	r3, #0
 801a6a2:	4604      	mov	r4, r0
 801a6a4:	4608      	mov	r0, r1
 801a6a6:	4611      	mov	r1, r2
 801a6a8:	602b      	str	r3, [r5, #0]
 801a6aa:	f7ec ff43 	bl	8007534 <_kill>
 801a6ae:	1c43      	adds	r3, r0, #1
 801a6b0:	d102      	bne.n	801a6b8 <_kill_r+0x1c>
 801a6b2:	682b      	ldr	r3, [r5, #0]
 801a6b4:	b103      	cbz	r3, 801a6b8 <_kill_r+0x1c>
 801a6b6:	6023      	str	r3, [r4, #0]
 801a6b8:	bd38      	pop	{r3, r4, r5, pc}
 801a6ba:	bf00      	nop
 801a6bc:	20041e60 	.word	0x20041e60

0801a6c0 <_getpid_r>:
 801a6c0:	f7ec bf30 	b.w	8007524 <_getpid>

0801a6c4 <_init>:
 801a6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6c6:	bf00      	nop
 801a6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a6ca:	bc08      	pop	{r3}
 801a6cc:	469e      	mov	lr, r3
 801a6ce:	4770      	bx	lr

0801a6d0 <_fini>:
 801a6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6d2:	bf00      	nop
 801a6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a6d6:	bc08      	pop	{r3}
 801a6d8:	469e      	mov	lr, r3
 801a6da:	4770      	bx	lr
