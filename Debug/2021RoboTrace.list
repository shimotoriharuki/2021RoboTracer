
2021RoboTrace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a514  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d84  0801a6d8  0801a6d8  0002a6d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b45c  0801b45c  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  0801b45c  0801b45c  0002b45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b464  0801b464  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801b464  0801b464  0002b464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b46c  0801b46c  0002b46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0801b470  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00041c84  200001e0  0801b650  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  20041e64  0801b650  00031e64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f91e  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008892  00000000  00000000  0006fb2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023a8  00000000  00000000  000783c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020d8  00000000  00000000  0007a768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035cc0  00000000  00000000  0007c840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031968  00000000  00000000  000b2500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112be6  00000000  00000000  000e3e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f6a4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000af40  00000000  00000000  001f6aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801a6bc 	.word	0x0801a6bc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	0801a6bc 	.word	0x0801a6bc

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af02      	add	r7, sp, #8
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8001026:	2300      	movs	r3, #0
 8001028:	733b      	strb	r3, [r7, #12]
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 800102e:	f107 020c 	add.w	r2, r7, #12
 8001032:	2364      	movs	r3, #100	; 0x64
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2302      	movs	r3, #2
 8001038:	217c      	movs	r1, #124	; 0x7c
 800103a:	4803      	ldr	r0, [pc, #12]	; (8001048 <lcd_cmd+0x2c>)
 800103c:	f00a f890 	bl	800b160 <HAL_I2C_Master_Transmit>
}
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2003f94c 	.word	0x2003f94c

0800104c <lcd_data>:

void lcd_data(uint8_t data) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af02      	add	r7, sp, #8
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8001056:	2340      	movs	r3, #64	; 0x40
 8001058:	733b      	strb	r3, [r7, #12]
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 800105e:	f107 020c 	add.w	r2, r7, #12
 8001062:	2364      	movs	r3, #100	; 0x64
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2302      	movs	r3, #2
 8001068:	217c      	movs	r1, #124	; 0x7c
 800106a:	4803      	ldr	r0, [pc, #12]	; (8001078 <lcd_data+0x2c>)
 800106c:	f00a f878 	bl	800b160 <HAL_I2C_Master_Transmit>
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2003f94c 	.word	0x2003f94c

0800107c <lcd_init>:

void lcd_init(){
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 8001080:	2201      	movs	r2, #1
 8001082:	2110      	movs	r1, #16
 8001084:	481e      	ldr	r0, [pc, #120]	; (8001100 <lcd_init+0x84>)
 8001086:	f009 ff0d 	bl	800aea4 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 800108a:	2028      	movs	r0, #40	; 0x28
 800108c:	f008 fc6e 	bl	800996c <HAL_Delay>
	lcd_cmd(0x38);
 8001090:	2038      	movs	r0, #56	; 0x38
 8001092:	f7ff ffc3 	bl	800101c <lcd_cmd>
	HAL_Delay(1);
 8001096:	2001      	movs	r0, #1
 8001098:	f008 fc68 	bl	800996c <HAL_Delay>
	lcd_cmd(0x39);
 800109c:	2039      	movs	r0, #57	; 0x39
 800109e:	f7ff ffbd 	bl	800101c <lcd_cmd>
	HAL_Delay(1);
 80010a2:	2001      	movs	r0, #1
 80010a4:	f008 fc62 	bl	800996c <HAL_Delay>
	lcd_cmd(0x14);
 80010a8:	2014      	movs	r0, #20
 80010aa:	f7ff ffb7 	bl	800101c <lcd_cmd>
	HAL_Delay(1);
 80010ae:	2001      	movs	r0, #1
 80010b0:	f008 fc5c 	bl	800996c <HAL_Delay>
	lcd_cmd(0x70);
 80010b4:	2070      	movs	r0, #112	; 0x70
 80010b6:	f7ff ffb1 	bl	800101c <lcd_cmd>
	HAL_Delay(1);
 80010ba:	2001      	movs	r0, #1
 80010bc:	f008 fc56 	bl	800996c <HAL_Delay>
	lcd_cmd(0x56);
 80010c0:	2056      	movs	r0, #86	; 0x56
 80010c2:	f7ff ffab 	bl	800101c <lcd_cmd>
	HAL_Delay(1);
 80010c6:	2001      	movs	r0, #1
 80010c8:	f008 fc50 	bl	800996c <HAL_Delay>
	lcd_cmd(0x6C);
 80010cc:	206c      	movs	r0, #108	; 0x6c
 80010ce:	f7ff ffa5 	bl	800101c <lcd_cmd>
	HAL_Delay(200);
 80010d2:	20c8      	movs	r0, #200	; 0xc8
 80010d4:	f008 fc4a 	bl	800996c <HAL_Delay>
	lcd_cmd(0x38);
 80010d8:	2038      	movs	r0, #56	; 0x38
 80010da:	f7ff ff9f 	bl	800101c <lcd_cmd>
	HAL_Delay(1);
 80010de:	2001      	movs	r0, #1
 80010e0:	f008 fc44 	bl	800996c <HAL_Delay>
	lcd_cmd(0x0C);
 80010e4:	200c      	movs	r0, #12
 80010e6:	f7ff ff99 	bl	800101c <lcd_cmd>
	HAL_Delay(1);
 80010ea:	2001      	movs	r0, #1
 80010ec:	f008 fc3e 	bl	800996c <HAL_Delay>
	lcd_cmd(0x01);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f7ff ff93 	bl	800101c <lcd_cmd>
	HAL_Delay(1);
 80010f6:	2001      	movs	r0, #1
 80010f8:	f008 fc38 	bl	800996c <HAL_Delay>
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40020000 	.word	0x40020000

08001104 <lcd_clear>:

void lcd_clear(){
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 8001108:	2001      	movs	r0, #1
 800110a:	f7ff ff87 	bl	800101c <lcd_cmd>
	HAL_Delay(1);
 800110e:	2001      	movs	r0, #1
 8001110:	f008 fc2c 	bl	800996c <HAL_Delay>
	lcd_cmd(0x02);
 8001114:	2002      	movs	r0, #2
 8001116:	f7ff ff81 	bl	800101c <lcd_cmd>
	HAL_Delay(1);
 800111a:	2001      	movs	r0, #1
 800111c:	f008 fc26 	bl	800996c <HAL_Delay>
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}

08001124 <lcd_locate>:

void lcd_locate(int x, int y) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	3302      	adds	r3, #2
 8001132:	b2db      	uxtb	r3, r3
 8001134:	019b      	lsls	r3, r3, #6
 8001136:	b2da      	uxtb	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4413      	add	r3, r2
 800113e:	b2db      	uxtb	r3, r3
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff6b 	bl	800101c <lcd_cmd>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <lcd_print>:

void lcd_print(const char *str) {
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 8001156:	e007      	b.n	8001168 <lcd_print+0x1a>
	{
			lcd_data(*str);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff75 	bl	800104c <lcd_data>
			str++;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3301      	adds	r3, #1
 8001166:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f3      	bne.n	8001158 <lcd_print+0xa>
	}
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <lcd_printf>:

short lcd_printf(const char *format, ...) {
 800117a:	b40f      	push	{r0, r1, r2, r3}
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 8001182:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001186:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800118e:	4618      	mov	r0, r3
 8001190:	f015 fffa 	bl	8017188 <vsiprintf>
 8001194:	4603      	mov	r3, r0
 8001196:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001198:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800119c:	2b00      	cmp	r3, #0
 800119e:	dd03      	ble.n	80011a8 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ffd3 	bl	800114e <lcd_print>
	}

	return ret;
 80011a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011b6:	b004      	add	sp, #16
 80011b8:	4770      	bx	lr

080011ba <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8001218:	213c      	movs	r1, #60	; 0x3c
 800121a:	4809      	ldr	r0, [pc, #36]	; (8001240 <_ZN7Encoder4initEv+0x30>)
 800121c:	f00d fe40 	bl	800eea0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001220:	213c      	movs	r1, #60	; 0x3c
 8001222:	4808      	ldr	r0, [pc, #32]	; (8001244 <_ZN7Encoder4initEv+0x34>)
 8001224:	f00d fe3c 	bl	800eea0 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN7Encoder4initEv+0x38>)
 800122a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800122e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN7Encoder4initEv+0x3c>)
 8001232:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001236:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2003fba0 	.word	0x2003fba0
 8001244:	2003f884 	.word	0x2003f884
 8001248:	40010000 	.word	0x40010000
 800124c:	40010400 	.word	0x40010400

08001250 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001250:	b5b0      	push	{r4, r5, r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001258:	4b69      	ldr	r3, [pc, #420]	; (8001400 <_ZN7Encoder6updateEv+0x1b0>)
 800125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125c:	ee07 3a90 	vmov	s15, r3
 8001260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001264:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001404 <_ZN7Encoder6updateEv+0x1b4>
 8001268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800126c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001408 <_ZN7Encoder6updateEv+0x1b8>
 8001270:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001274:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001278:	4b64      	ldr	r3, [pc, #400]	; (800140c <_ZN7Encoder6updateEv+0x1bc>)
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001284:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001404 <_ZN7Encoder6updateEv+0x1b4>
 8001288:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800128c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001408 <_ZN7Encoder6updateEv+0x1b8>
 8001290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001294:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001298:	4a5d      	ldr	r2, [pc, #372]	; (8001410 <_ZN7Encoder6updateEv+0x1c0>)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f7ff f96a 	bl	8000578 <__aeabi_f2d>
 80012a4:	a350      	add	r3, pc, #320	; (adr r3, 80013e8 <_ZN7Encoder6updateEv+0x198>)
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	f7ff f9bd 	bl	8000628 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4614      	mov	r4, r2
 80012b4:	461d      	mov	r5, r3
 80012b6:	4b57      	ldr	r3, [pc, #348]	; (8001414 <_ZN7Encoder6updateEv+0x1c4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f95c 	bl	8000578 <__aeabi_f2d>
 80012c0:	a34b      	add	r3, pc, #300	; (adr r3, 80013f0 <_ZN7Encoder6updateEv+0x1a0>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7ff f9af 	bl	8000628 <__aeabi_dmul>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4620      	mov	r0, r4
 80012d0:	4629      	mov	r1, r5
 80012d2:	f7fe fff3 	bl	80002bc <__adddf3>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fc9b 	bl	8000c18 <__aeabi_d2f>
 80012e2:	4602      	mov	r2, r0
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 80012e8:	68b8      	ldr	r0, [r7, #8]
 80012ea:	f7ff f945 	bl	8000578 <__aeabi_f2d>
 80012ee:	a33e      	add	r3, pc, #248	; (adr r3, 80013e8 <_ZN7Encoder6updateEv+0x198>)
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	f7ff f998 	bl	8000628 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4614      	mov	r4, r2
 80012fe:	461d      	mov	r5, r3
 8001300:	4b45      	ldr	r3, [pc, #276]	; (8001418 <_ZN7Encoder6updateEv+0x1c8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f937 	bl	8000578 <__aeabi_f2d>
 800130a:	a339      	add	r3, pc, #228	; (adr r3, 80013f0 <_ZN7Encoder6updateEv+0x1a0>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f7ff f98a 	bl	8000628 <__aeabi_dmul>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4620      	mov	r0, r4
 800131a:	4629      	mov	r1, r5
 800131c:	f7fe ffce 	bl	80002bc <__adddf3>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	f7ff fc76 	bl	8000c18 <__aeabi_d2f>
 800132c:	4602      	mov	r2, r0
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a39      	ldr	r2, [pc, #228]	; (800141c <_ZN7Encoder6updateEv+0x1cc>)
 8001338:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a35      	ldr	r2, [pc, #212]	; (8001414 <_ZN7Encoder6updateEv+0x1c4>)
 8001340:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4a34      	ldr	r2, [pc, #208]	; (8001418 <_ZN7Encoder6updateEv+0x1c8>)
 8001348:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	ed93 7a00 	vldr	s14, [r3]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	edd3 7a01 	vldr	s15, [r3, #4]
 8001356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135a:	ee17 0a90 	vmov	r0, s15
 800135e:	f7ff f90b 	bl	8000578 <__aeabi_f2d>
 8001362:	a325      	add	r3, pc, #148	; (adr r3, 80013f8 <_ZN7Encoder6updateEv+0x1a8>)
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	f7ff f95e 	bl	8000628 <__aeabi_dmul>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4610      	mov	r0, r2
 8001372:	4619      	mov	r1, r3
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800137c:	f7ff fa7e 	bl	800087c <__aeabi_ddiv>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	f7ff fc46 	bl	8000c18 <__aeabi_d2f>
 800138c:	4602      	mov	r2, r0
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	ed93 7a05 	vldr	s14, [r3, #20]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	edd3 7a02 	vldr	s15, [r3, #8]
 800139e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	ed93 7a06 	vldr	s14, [r3, #24]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80013b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	ed93 7a07 	vldr	s14, [r3, #28]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80013ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	4a11      	ldr	r2, [pc, #68]	; (8001420 <_ZN7Encoder6updateEv+0x1d0>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bdb0      	pop	{r4, r5, r7, pc}
 80013e4:	f3af 8000 	nop.w
 80013e8:	9999999a 	.word	0x9999999a
 80013ec:	3fa99999 	.word	0x3fa99999
 80013f0:	66666666 	.word	0x66666666
 80013f4:	3fee6666 	.word	0x3fee6666
 80013f8:	ce73a049 	.word	0xce73a049
 80013fc:	3f77a3f6 	.word	0x3f77a3f6
 8001400:	40010000 	.word	0x40010000
 8001404:	47000000 	.word	0x47000000
 8001408:	3f912547 	.word	0x3f912547
 800140c:	40010400 	.word	0x40010400
 8001410:	20000200 	.word	0x20000200
 8001414:	20000208 	.word	0x20000208
 8001418:	2000020c 	.word	0x2000020c
 800141c:	20000204 	.word	0x20000204
 8001420:	200001fc 	.word	0x200001fc

08001424 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <_ZN7Encoder5clearEv+0x3c>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <_ZN7Encoder5clearEv+0x40>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	40010000 	.word	0x40010000
 8001464:	40010400 	.word	0x40010400

08001468 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	601a      	str	r2, [r3, #0]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	return distance_;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	ee07 3a90 	vmov	s15, r3
}
 80014a0:	eeb0 0a67 	vmov.f32	s0, s15
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	ee07 3a90 	vmov	s15, r3
}
 80014be:	eeb0 0a67 	vmov.f32	s0, s15
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	ee07 3a90 	vmov	s15, r3
}
 80014dc:	eeb0 0a67 	vmov.f32	s0, s15
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	619a      	str	r2, [r3, #24]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	ee07 3a90 	vmov	s15, r3
}
 8001550:	eeb0 0a67 	vmov.f32	s0, s15
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af02      	add	r7, sp, #8
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	4613      	mov	r3, r2
 800158a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f000 f900 	bl	8001798 <create_path>

	if(state == OVER_WRITE){
 8001598:	f897 3020 	ldrb.w	r3, [r7, #32]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d108      	bne.n	80015b2 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80015a0:	4822      	ldr	r0, [pc, #136]	; (800162c <sd_write_array_float+0xb0>)
 80015a2:	f012 fa2b 	bl	80139fc <f_chdir>
		f_unlink(filepath);	//	一回消す
 80015a6:	4822      	ldr	r0, [pc, #136]	; (8001630 <sd_write_array_float+0xb4>)
 80015a8:	f012 fc96 	bl	8013ed8 <f_unlink>
		f_chdir("..");
 80015ac:	4821      	ldr	r0, [pc, #132]	; (8001634 <sd_write_array_float+0xb8>)
 80015ae:	f012 fa25 	bl	80139fc <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80015b2:	f000 f90b 	bl	80017cc <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80015b6:	2300      	movs	r3, #0
 80015b8:	82fb      	strh	r3, [r7, #22]
 80015ba:	e028      	b.n	800160e <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80015bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	4413      	add	r3, r2
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ffd5 	bl	8000578 <__aeabi_f2d>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	e9cd 2300 	strd	r2, r3, [sp]
 80015d6:	4a18      	ldr	r2, [pc, #96]	; (8001638 <sd_write_array_float+0xbc>)
 80015d8:	2180      	movs	r1, #128	; 0x80
 80015da:	4818      	ldr	r0, [pc, #96]	; (800163c <sd_write_array_float+0xc0>)
 80015dc:	f014 fe46 	bl	801626c <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80015e0:	4b17      	ldr	r3, [pc, #92]	; (8001640 <sd_write_array_float+0xc4>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	4619      	mov	r1, r3
 80015e6:	4816      	ldr	r0, [pc, #88]	; (8001640 <sd_write_array_float+0xc4>)
 80015e8:	f012 fa52 	bl	8013a90 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80015ec:	4813      	ldr	r0, [pc, #76]	; (800163c <sd_write_array_float+0xc0>)
 80015ee:	f7fe fe07 	bl	8000200 <strlen>
 80015f2:	4602      	mov	r2, r0
 80015f4:	4b13      	ldr	r3, [pc, #76]	; (8001644 <sd_write_array_float+0xc8>)
 80015f6:	4911      	ldr	r1, [pc, #68]	; (800163c <sd_write_array_float+0xc0>)
 80015f8:	4811      	ldr	r0, [pc, #68]	; (8001640 <sd_write_array_float+0xc4>)
 80015fa:	f011 ffc0 	bl	801357e <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80015fe:	f000 f8ff 	bl	8001800 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001602:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001606:	b29b      	uxth	r3, r3
 8001608:	3301      	adds	r3, #1
 800160a:	b29b      	uxth	r3, r3
 800160c:	82fb      	strh	r3, [r7, #22]
 800160e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001616:	429a      	cmp	r2, r3
 8001618:	dbd0      	blt.n	80015bc <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800161a:	4809      	ldr	r0, [pc, #36]	; (8001640 <sd_write_array_float+0xc4>)
 800161c:	f012 f9c4 	bl	80139a8 <f_close>

	return ret;
 8001620:	7d7b      	ldrb	r3, [r7, #21]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	2003e600 	.word	0x2003e600
 8001630:	2003d4c0 	.word	0x2003d4c0
 8001634:	0801a6f4 	.word	0x0801a6f4
 8001638:	0801a6d8 	.word	0x0801a6d8
 800163c:	2003e700 	.word	0x2003e700
 8001640:	2003e790 	.word	0x2003e790
 8001644:	2003e780 	.word	0x2003e780

08001648 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	4613      	mov	r3, r2
 8001656:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 f898 	bl	8001798 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001668:	f000 f8b0 	bl	80017cc <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800166c:	e019      	b.n	80016a2 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800166e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	4413      	add	r3, r2
 8001678:	461a      	mov	r2, r3
 800167a:	4913      	ldr	r1, [pc, #76]	; (80016c8 <sd_read_array_float+0x80>)
 800167c:	4813      	ldr	r0, [pc, #76]	; (80016cc <sd_read_array_float+0x84>)
 800167e:	f014 fe49 	bl	8016314 <siscanf>
		i++;
 8001682:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001686:	b29b      	uxth	r3, r3
 8001688:	3301      	adds	r3, #1
 800168a:	b29b      	uxth	r3, r3
 800168c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800168e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001696:	429a      	cmp	r2, r3
 8001698:	db03      	blt.n	80016a2 <sd_read_array_float+0x5a>
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	3b01      	subs	r3, #1
 800169e:	b29b      	uxth	r3, r3
 80016a0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016a2:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <sd_read_array_float+0x88>)
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	4809      	ldr	r0, [pc, #36]	; (80016cc <sd_read_array_float+0x84>)
 80016a8:	f012 fdf4 	bl	8014294 <f_gets>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1dd      	bne.n	800166e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80016b2:	f000 f8a5 	bl	8001800 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80016b6:	4806      	ldr	r0, [pc, #24]	; (80016d0 <sd_read_array_float+0x88>)
 80016b8:	f012 f976 	bl	80139a8 <f_close>

	return ret;
 80016bc:	7d7b      	ldrb	r3, [r7, #21]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	0801a6e4 	.word	0x0801a6e4
 80016cc:	2003e700 	.word	0x2003e700
 80016d0:	2003e790 	.word	0x2003e790

080016d4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	4613      	mov	r3, r2
 80016e2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f000 f852 	bl	8001798 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016f4:	f000 f86a 	bl	80017cc <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016f8:	e019      	b.n	800172e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80016fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	4413      	add	r3, r2
 8001704:	461a      	mov	r2, r3
 8001706:	4913      	ldr	r1, [pc, #76]	; (8001754 <sd_read_array_double+0x80>)
 8001708:	4813      	ldr	r0, [pc, #76]	; (8001758 <sd_read_array_double+0x84>)
 800170a:	f014 fe03 	bl	8016314 <siscanf>
		i++;
 800170e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001712:	b29b      	uxth	r3, r3
 8001714:	3301      	adds	r3, #1
 8001716:	b29b      	uxth	r3, r3
 8001718:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800171a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800171e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001722:	429a      	cmp	r2, r3
 8001724:	db03      	blt.n	800172e <sd_read_array_double+0x5a>
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	3b01      	subs	r3, #1
 800172a:	b29b      	uxth	r3, r3
 800172c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <sd_read_array_double+0x88>)
 8001730:	2180      	movs	r1, #128	; 0x80
 8001732:	4809      	ldr	r0, [pc, #36]	; (8001758 <sd_read_array_double+0x84>)
 8001734:	f012 fdae 	bl	8014294 <f_gets>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1dd      	bne.n	80016fa <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800173e:	f000 f85f 	bl	8001800 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001742:	4806      	ldr	r0, [pc, #24]	; (800175c <sd_read_array_double+0x88>)
 8001744:	f012 f930 	bl	80139a8 <f_close>

	return ret;
 8001748:	7d7b      	ldrb	r3, [r7, #21]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	0801a6f0 	.word	0x0801a6f0
 8001758:	2003e700 	.word	0x2003e700
 800175c:	2003e790 	.word	0x2003e790

08001760 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 800176a:	2201      	movs	r2, #1
 800176c:	4908      	ldr	r1, [pc, #32]	; (8001790 <sd_mount+0x30>)
 800176e:	4809      	ldr	r0, [pc, #36]	; (8001794 <sd_mount+0x34>)
 8001770:	f011 fb92 	bl	8012e98 <f_mount>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d102      	bne.n	8001780 <sd_mount+0x20>
 800177a:	2301      	movs	r3, #1
 800177c:	71fb      	strb	r3, [r7, #7]
 800177e:	e001      	b.n	8001784 <sd_mount+0x24>
	else ret = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001784:	79fb      	ldrb	r3, [r7, #7]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	0801a700 	.word	0x0801a700
 8001794:	2003d5c0 	.word	0x2003d5c0

08001798 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	4906      	ldr	r1, [pc, #24]	; (80017c0 <create_path+0x28>)
 80017a6:	4807      	ldr	r0, [pc, #28]	; (80017c4 <create_path+0x2c>)
 80017a8:	f014 fd94 	bl	80162d4 <siprintf>

	sprintf(filepath, "%s", p_file_name);
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	4904      	ldr	r1, [pc, #16]	; (80017c0 <create_path+0x28>)
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <create_path+0x30>)
 80017b2:	f014 fd8f 	bl	80162d4 <siprintf>

}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	0801a704 	.word	0x0801a704
 80017c4:	2003e600 	.word	0x2003e600
 80017c8:	2003d4c0 	.word	0x2003d4c0

080017cc <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 80017d0:	4807      	ldr	r0, [pc, #28]	; (80017f0 <fopen_folder_and_file+0x24>)
 80017d2:	f012 fc43 	bl	801405c <f_mkdir>

	f_chdir(dirpath);
 80017d6:	4806      	ldr	r0, [pc, #24]	; (80017f0 <fopen_folder_and_file+0x24>)
 80017d8:	f012 f910 	bl	80139fc <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80017dc:	2213      	movs	r2, #19
 80017de:	4905      	ldr	r1, [pc, #20]	; (80017f4 <fopen_folder_and_file+0x28>)
 80017e0:	4805      	ldr	r0, [pc, #20]	; (80017f8 <fopen_folder_and_file+0x2c>)
 80017e2:	f011 fb9f 	bl	8012f24 <f_open>

	f_chdir("..");
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <fopen_folder_and_file+0x30>)
 80017e8:	f012 f908 	bl	80139fc <f_chdir>


}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	2003e600 	.word	0x2003e600
 80017f4:	2003d4c0 	.word	0x2003d4c0
 80017f8:	2003e790 	.word	0x2003e790
 80017fc:	0801a6f4 	.word	0x0801a6f4

08001800 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	e007      	b.n	800181c <bufclear+0x1c>
		buffer[i] = '\0';
 800180c:	4a08      	ldr	r2, [pc, #32]	; (8001830 <bufclear+0x30>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	2200      	movs	r2, #0
 8001814:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3301      	adds	r3, #1
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b7f      	cmp	r3, #127	; 0x7f
 8001820:	ddf4      	ble.n	800180c <bufclear+0xc>
	}
}
 8001822:	bf00      	nop
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	2003e700 	.word	0x2003e700

08001834 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001844:	b2db      	uxtb	r3, r3
 8001846:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001848:	2200      	movs	r2, #0
 800184a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800184e:	480e      	ldr	r0, [pc, #56]	; (8001888 <read_byte+0x54>)
 8001850:	f009 fb28 	bl	800aea4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001854:	f107 010f 	add.w	r1, r7, #15
 8001858:	2364      	movs	r3, #100	; 0x64
 800185a:	2201      	movs	r2, #1
 800185c:	480b      	ldr	r0, [pc, #44]	; (800188c <read_byte+0x58>)
 800185e:	f00c fce5 	bl	800e22c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001862:	f107 010e 	add.w	r1, r7, #14
 8001866:	2364      	movs	r3, #100	; 0x64
 8001868:	2201      	movs	r2, #1
 800186a:	4808      	ldr	r0, [pc, #32]	; (800188c <read_byte+0x58>)
 800186c:	f00c fe12 	bl	800e494 <HAL_SPI_Receive>
	CS_SET;
 8001870:	2201      	movs	r2, #1
 8001872:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001876:	4804      	ldr	r0, [pc, #16]	; (8001888 <read_byte+0x54>)
 8001878:	f009 fb14 	bl	800aea4 <HAL_GPIO_WritePin>

	return val;
 800187c:	7bbb      	ldrb	r3, [r7, #14]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40020400 	.word	0x40020400
 800188c:	2003f82c 	.word	0x2003f82c

08001890 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	460a      	mov	r2, r1
 800189a:	71fb      	strb	r3, [r7, #7]
 800189c:	4613      	mov	r3, r2
 800189e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b0:	480c      	ldr	r0, [pc, #48]	; (80018e4 <write_byte+0x54>)
 80018b2:	f009 faf7 	bl	800aea4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018b6:	f107 010f 	add.w	r1, r7, #15
 80018ba:	2364      	movs	r3, #100	; 0x64
 80018bc:	2201      	movs	r2, #1
 80018be:	480a      	ldr	r0, [pc, #40]	; (80018e8 <write_byte+0x58>)
 80018c0:	f00c fcb4 	bl	800e22c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 80018c4:	1db9      	adds	r1, r7, #6
 80018c6:	2364      	movs	r3, #100	; 0x64
 80018c8:	2201      	movs	r2, #1
 80018ca:	4807      	ldr	r0, [pc, #28]	; (80018e8 <write_byte+0x58>)
 80018cc:	f00c fcae 	bl	800e22c <HAL_SPI_Transmit>
	CS_SET;
 80018d0:	2201      	movs	r2, #1
 80018d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018d6:	4803      	ldr	r0, [pc, #12]	; (80018e4 <write_byte+0x54>)
 80018d8:	f009 fae4 	bl	800aea4 <HAL_GPIO_WritePin>
}
 80018dc:	bf00      	nop
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40020400 	.word	0x40020400
 80018e8:	2003f82c 	.word	0x2003f82c

080018ec <IMU_init>:

uint16_t IMU_init() {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 80018f6:	2000      	movs	r0, #0
 80018f8:	f7ff ff9c 	bl	8001834 <read_byte>
 80018fc:	4603      	mov	r3, r0
 80018fe:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001900:	797b      	ldrb	r3, [r7, #5]
 8001902:	2be0      	cmp	r3, #224	; 0xe0
 8001904:	d119      	bne.n	800193a <IMU_init+0x4e>
		ret = 1;
 8001906:	2301      	movs	r3, #1
 8001908:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800190a:	2101      	movs	r1, #1
 800190c:	2006      	movs	r0, #6
 800190e:	f7ff ffbf 	bl	8001890 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001912:	2110      	movs	r1, #16
 8001914:	2003      	movs	r0, #3
 8001916:	f7ff ffbb 	bl	8001890 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800191a:	2120      	movs	r1, #32
 800191c:	207f      	movs	r0, #127	; 0x7f
 800191e:	f7ff ffb7 	bl	8001890 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001922:	2106      	movs	r1, #6
 8001924:	2001      	movs	r0, #1
 8001926:	f7ff ffb3 	bl	8001890 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 800192a:	2106      	movs	r1, #6
 800192c:	2014      	movs	r0, #20
 800192e:	f7ff ffaf 	bl	8001890 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001932:	2100      	movs	r1, #0
 8001934:	207f      	movs	r0, #127	; 0x7f
 8001936:	f7ff ffab 	bl	8001890 <write_byte>
	}
	return ret;
 800193a:	88fb      	ldrh	r3, [r7, #6]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <read_gyro_data>:

void read_gyro_data() {
 8001944:	b598      	push	{r3, r4, r7, lr}
 8001946:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001948:	2033      	movs	r0, #51	; 0x33
 800194a:	f7ff ff73 	bl	8001834 <read_byte>
 800194e:	4603      	mov	r3, r0
 8001950:	021b      	lsls	r3, r3, #8
 8001952:	b21c      	sxth	r4, r3
 8001954:	2034      	movs	r0, #52	; 0x34
 8001956:	f7ff ff6d 	bl	8001834 <read_byte>
 800195a:	4603      	mov	r3, r0
 800195c:	b21b      	sxth	r3, r3
 800195e:	4323      	orrs	r3, r4
 8001960:	b21a      	sxth	r2, r3
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <read_gyro_data+0x64>)
 8001964:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001966:	2035      	movs	r0, #53	; 0x35
 8001968:	f7ff ff64 	bl	8001834 <read_byte>
 800196c:	4603      	mov	r3, r0
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	b21c      	sxth	r4, r3
 8001972:	2036      	movs	r0, #54	; 0x36
 8001974:	f7ff ff5e 	bl	8001834 <read_byte>
 8001978:	4603      	mov	r3, r0
 800197a:	b21b      	sxth	r3, r3
 800197c:	4323      	orrs	r3, r4
 800197e:	b21a      	sxth	r2, r3
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <read_gyro_data+0x68>)
 8001982:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001984:	2037      	movs	r0, #55	; 0x37
 8001986:	f7ff ff55 	bl	8001834 <read_byte>
 800198a:	4603      	mov	r3, r0
 800198c:	021b      	lsls	r3, r3, #8
 800198e:	b21c      	sxth	r4, r3
 8001990:	2038      	movs	r0, #56	; 0x38
 8001992:	f7ff ff4f 	bl	8001834 <read_byte>
 8001996:	4603      	mov	r3, r0
 8001998:	b21b      	sxth	r3, r3
 800199a:	4323      	orrs	r3, r4
 800199c:	b21a      	sxth	r2, r3
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <read_gyro_data+0x6c>)
 80019a0:	801a      	strh	r2, [r3, #0]
}
 80019a2:	bf00      	nop
 80019a4:	bd98      	pop	{r3, r4, r7, pc}
 80019a6:	bf00      	nop
 80019a8:	2003f7c8 	.word	0x2003f7c8
 80019ac:	2003f7c6 	.word	0x2003f7c6
 80019b0:	2003f7c0 	.word	0x2003f7c0

080019b4 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	801a      	strh	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	805a      	strh	r2, [r3, #2]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	809a      	strh	r2, [r3, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	80da      	strh	r2, [r3, #6]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	811a      	strh	r2, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	815a      	strh	r2, [r3, #10]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]
{

}
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <_ZN3IMU4initEv>:

void IMU::init()
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a00:	f7ff ff74 	bl	80018ec <IMU_init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001a08:	f7ff fb7c 	bl	8001104 <lcd_clear>
	lcd_locate(0,0);
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f7ff fb88 	bl	8001124 <lcd_locate>
	lcd_printf("IMUstatus");
 8001a14:	4809      	ldr	r0, [pc, #36]	; (8001a3c <_ZN3IMU4initEv+0x44>)
 8001a16:	f7ff fbb0 	bl	800117a <lcd_printf>
	lcd_locate(0,1);
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f7ff fb81 	bl	8001124 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001a22:	89fb      	ldrh	r3, [r7, #14]
 8001a24:	4619      	mov	r1, r3
 8001a26:	4806      	ldr	r0, [pc, #24]	; (8001a40 <_ZN3IMU4initEv+0x48>)
 8001a28:	f7ff fba7 	bl	800117a <lcd_printf>

	HAL_Delay(500);
 8001a2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a30:	f007 ff9c 	bl	800996c <HAL_Delay>

}
 8001a34:	bf00      	nop
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	0801a708 	.word	0x0801a708
 8001a40:	0801a714 	.word	0x0801a714
 8001a44:	00000000 	.word	0x00000000

08001a48 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001a48:	b5b0      	push	{r4, r5, r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001a50:	f7ff ff78 	bl	8001944 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001a54:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <_ZN3IMU12updateValuesEv+0xa0>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	b21a      	sxth	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001a5e:	4b23      	ldr	r3, [pc, #140]	; (8001aec <_ZN3IMU12updateValuesEv+0xa4>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	b21a      	sxth	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001a68:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <_ZN3IMU12updateValuesEv+0xa8>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fd6b 	bl	8000554 <__aeabi_i2d>
 8001a7e:	a316      	add	r3, pc, #88	; (adr r3, 8001ad8 <_ZN3IMU12updateValuesEv+0x90>)
 8001a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a84:	f7fe fdd0 	bl	8000628 <__aeabi_dmul>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4614      	mov	r4, r2
 8001a8e:	461d      	mov	r5, r3
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <_ZN3IMU12updateValuesEv+0xac>)
 8001a92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fd5c 	bl	8000554 <__aeabi_i2d>
 8001a9c:	a310      	add	r3, pc, #64	; (adr r3, 8001ae0 <_ZN3IMU12updateValuesEv+0x98>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f7fe fdc1 	bl	8000628 <__aeabi_dmul>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4620      	mov	r0, r4
 8001aac:	4629      	mov	r1, r5
 8001aae:	f7fe fc05 	bl	80002bc <__adddf3>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f7ff f865 	bl	8000b88 <__aeabi_d2iz>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	b21a      	sxth	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <_ZN3IMU12updateValuesEv+0xac>)
 8001ace:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad8:	eb851eb8 	.word	0xeb851eb8
 8001adc:	3f9eb851 	.word	0x3f9eb851
 8001ae0:	70a3d70a 	.word	0x70a3d70a
 8001ae4:	3fef0a3d 	.word	0x3fef0a3d
 8001ae8:	2003f7c8 	.word	0x2003f7c8
 8001aec:	2003f7c6 	.word	0x2003f7c6
 8001af0:	2003f7c0 	.word	0x2003f7c0
 8001af4:	20000210 	.word	0x20000210

08001af8 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001af8:	b5b0      	push	{r4, r5, r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b06:	ee07 3a90 	vmov	s15, r3
 8001b0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b18:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f7fe fd2b 	bl	8000578 <__aeabi_f2d>
 8001b22:	a316      	add	r3, pc, #88	; (adr r3, 8001b7c <_ZN3IMU8getOmegaEv+0x84>)
 8001b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b28:	f7fe fea8 	bl	800087c <__aeabi_ddiv>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4614      	mov	r4, r2
 8001b32:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b36:	a313      	add	r3, pc, #76	; (adr r3, 8001b84 <_ZN3IMU8getOmegaEv+0x8c>)
 8001b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	4629      	mov	r1, r5
 8001b40:	f7fe fd72 	bl	8000628 <__aeabi_dmul>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <_ZN3IMU8getOmegaEv+0x80>)
 8001b52:	f7fe fe93 	bl	800087c <__aeabi_ddiv>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f7ff f85b 	bl	8000c18 <__aeabi_d2f>
 8001b62:	4603      	mov	r3, r0
 8001b64:	ee07 3a90 	vmov	s15, r3
}
 8001b68:	eeb0 0a67 	vmov.f32	s0, s15
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bdb0      	pop	{r4, r5, r7, pc}
 8001b72:	bf00      	nop
 8001b74:	f3af 8000 	nop.w
 8001b78:	40668000 	.word	0x40668000
 8001b7c:	66666666 	.word	0x66666666
 8001b80:	40306666 	.word	0x40306666
 8001b84:	54411744 	.word	0x54411744
 8001b88:	400921fb 	.word	0x400921fb

08001b8c <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001b8c:	b5b0      	push	{r4, r5, r7, lr}
 8001b8e:	b08a      	sub	sp, #40	; 0x28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001b94:	466b      	mov	r3, sp
 8001b96:	461d      	mov	r5, r3
	HAL_Delay(1000);
 8001b98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b9c:	f007 fee6 	bl	800996c <HAL_Delay>
	lcd_clear();
 8001ba0:	f7ff fab0 	bl	8001104 <lcd_clear>
	lcd_locate(0,0);
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f7ff fabc 	bl	8001124 <lcd_locate>
	lcd_printf("IMU     ");
 8001bac:	4840      	ldr	r0, [pc, #256]	; (8001cb0 <_ZN3IMU11calibrationEv+0x124>)
 8001bae:	f7ff fae4 	bl	800117a <lcd_printf>
	lcd_locate(0,1);
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7ff fab5 	bl	8001124 <lcd_locate>
	lcd_printf("Calib   ");
 8001bba:	483e      	ldr	r0, [pc, #248]	; (8001cb4 <_ZN3IMU11calibrationEv+0x128>)
 8001bbc:	f7ff fadd 	bl	800117a <lcd_printf>
	int16_t num = 2000;
 8001bc0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001bc4:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001bc6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bca:	1e5c      	subs	r4, r3, #1
 8001bcc:	61bc      	str	r4, [r7, #24]
 8001bce:	4623      	mov	r3, r4
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f04f 0100 	mov.w	r1, #0
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	014b      	lsls	r3, r1, #5
 8001be2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001be6:	0142      	lsls	r2, r0, #5
 8001be8:	4623      	mov	r3, r4
 8001bea:	3301      	adds	r3, #1
 8001bec:	4618      	mov	r0, r3
 8001bee:	f04f 0100 	mov.w	r1, #0
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	014b      	lsls	r3, r1, #5
 8001bfc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c00:	0142      	lsls	r2, r0, #5
 8001c02:	4623      	mov	r3, r4
 8001c04:	3301      	adds	r3, #1
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	3307      	adds	r3, #7
 8001c0a:	08db      	lsrs	r3, r3, #3
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	ebad 0d03 	sub.w	sp, sp, r3
 8001c12:	466b      	mov	r3, sp
 8001c14:	3303      	adds	r3, #3
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	83fb      	strh	r3, [r7, #30]
 8001c20:	8bfa      	ldrh	r2, [r7, #30]
 8001c22:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	da13      	bge.n	8001c52 <_ZN3IMU11calibrationEv+0xc6>
		zg_vals[i] = float(zg_);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001c30:	8bfb      	ldrh	r3, [r7, #30]
 8001c32:	ee07 2a90 	vmov	s15, r2
 8001c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001c44:	2002      	movs	r0, #2
 8001c46:	f007 fe91 	bl	800996c <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001c4a:	8bfb      	ldrh	r3, [r7, #30]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	83fb      	strh	r3, [r7, #30]
 8001c50:	e7e6      	b.n	8001c20 <_ZN3IMU11calibrationEv+0x94>
	for(const auto &v : zg_vals){
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5a:	4623      	mov	r3, r4
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4413      	add	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d00e      	beq.n	8001c8c <_ZN3IMU11calibrationEv+0x100>
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	60bb      	str	r3, [r7, #8]
		sum += v;
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c80:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	3304      	adds	r3, #4
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8a:	e7ec      	b.n	8001c66 <_ZN3IMU11calibrationEv+0xda>
	offset_ = sum / num;
 8001c8c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c90:	ee07 3a90 	vmov	s15, r3
 8001c94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c98:	edd7 6a08 	vldr	s13, [r7, #32]
 8001c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	edc3 7a03 	vstr	s15, [r3, #12]
 8001ca6:	46ad      	mov	sp, r5
}
 8001ca8:	bf00      	nop
 8001caa:	3728      	adds	r7, #40	; 0x28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb0:	0801a718 	.word	0x0801a718
 8001cb4:	0801a724 	.word	0x0801a724

08001cb8 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af02      	add	r7, sp, #8
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	71fb      	strb	r3, [r7, #7]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001cc8:	79bb      	ldrb	r3, [r7, #6]
 8001cca:	b299      	uxth	r1, r3
 8001ccc:	1dfa      	adds	r2, r7, #7
 8001cce:	2364      	movs	r3, #100	; 0x64
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	480c      	ldr	r0, [pc, #48]	; (8001d08 <INA260_read+0x50>)
 8001cd6:	f009 fa43 	bl	800b160 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001cda:	79bb      	ldrb	r3, [r7, #6]
 8001cdc:	b299      	uxth	r1, r3
 8001cde:	f107 020c 	add.w	r2, r7, #12
 8001ce2:	2364      	movs	r3, #100	; 0x64
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	4807      	ldr	r0, [pc, #28]	; (8001d08 <INA260_read+0x50>)
 8001cea:	f009 fb37 	bl	800b35c <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001cee:	7b3b      	ldrb	r3, [r7, #12]
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	b21a      	sxth	r2, r3
 8001cf4:	7b7b      	ldrb	r3, [r7, #13]
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	81fb      	strh	r3, [r7, #14]
	return val;
 8001cfe:	89fb      	ldrh	r3, [r7, #14]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	2003f9e0 	.word	0x2003f9e0

08001d0c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	4604      	mov	r4, r0
 8001d14:	4608      	mov	r0, r1
 8001d16:	4611      	mov	r1, r2
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4623      	mov	r3, r4
 8001d1c:	71fb      	strb	r3, [r7, #7]
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71bb      	strb	r3, [r7, #6]
 8001d22:	460b      	mov	r3, r1
 8001d24:	717b      	strb	r3, [r7, #5]
 8001d26:	4613      	mov	r3, r2
 8001d28:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	733b      	strb	r3, [r7, #12]
 8001d2e:	79bb      	ldrb	r3, [r7, #6]
 8001d30:	737b      	strb	r3, [r7, #13]
 8001d32:	797b      	ldrb	r3, [r7, #5]
 8001d34:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001d36:	793b      	ldrb	r3, [r7, #4]
 8001d38:	b299      	uxth	r1, r3
 8001d3a:	f107 020c 	add.w	r2, r7, #12
 8001d3e:	2364      	movs	r3, #100	; 0x64
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2303      	movs	r3, #3
 8001d44:	4803      	ldr	r0, [pc, #12]	; (8001d54 <INA260_write+0x48>)
 8001d46:	f009 fa0b 	bl	800b160 <HAL_I2C_Master_Transmit>
}
 8001d4a:	bf00      	nop
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd90      	pop	{r4, r7, pc}
 8001d52:	bf00      	nop
 8001d54:	2003f9e0 	.word	0x2003f9e0

08001d58 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
 8001d62:	460b      	mov	r3, r1
 8001d64:	71bb      	strb	r3, [r7, #6]
 8001d66:	4613      	mov	r3, r2
 8001d68:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001d6a:	797b      	ldrb	r3, [r7, #5]
 8001d6c:	79ba      	ldrb	r2, [r7, #6]
 8001d6e:	79f9      	ldrb	r1, [r7, #7]
 8001d70:	2000      	movs	r0, #0
 8001d72:	f7ff ffcb 	bl	8001d0c <INA260_write>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	21df      	movs	r1, #223	; 0xdf
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f7ff ffe2 	bl	8001d58 <setConfig>
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
{

}
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001dc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dc4:	482a      	ldr	r0, [pc, #168]	; (8001e70 <_ZN8JoyStick8getValueEv+0xbc>)
 8001dc6:	f009 f855 	bl	800ae74 <HAL_GPIO_ReadPin>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	bf0c      	ite	eq
 8001dd0:	2301      	moveq	r3, #1
 8001dd2:	2300      	movne	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <_ZN8JoyStick8getValueEv+0x2e>
 8001dda:	89fb      	ldrh	r3, [r7, #14]
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001de2:	2101      	movs	r1, #1
 8001de4:	4823      	ldr	r0, [pc, #140]	; (8001e74 <_ZN8JoyStick8getValueEv+0xc0>)
 8001de6:	f009 f845 	bl	800ae74 <HAL_GPIO_ReadPin>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <_ZN8JoyStick8getValueEv+0x4e>
 8001dfa:	89fb      	ldrh	r3, [r7, #14]
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e06:	481a      	ldr	r0, [pc, #104]	; (8001e70 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e08:	f009 f834 	bl	800ae74 <HAL_GPIO_ReadPin>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	bf0c      	ite	eq
 8001e12:	2301      	moveq	r3, #1
 8001e14:	2300      	movne	r3, #0
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <_ZN8JoyStick8getValueEv+0x70>
 8001e1c:	89fb      	ldrh	r3, [r7, #14]
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001e24:	2104      	movs	r1, #4
 8001e26:	4814      	ldr	r0, [pc, #80]	; (8001e78 <_ZN8JoyStick8getValueEv+0xc4>)
 8001e28:	f009 f824 	bl	800ae74 <HAL_GPIO_ReadPin>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	bf0c      	ite	eq
 8001e32:	2301      	moveq	r3, #1
 8001e34:	2300      	movne	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <_ZN8JoyStick8getValueEv+0x90>
 8001e3c:	89fb      	ldrh	r3, [r7, #14]
 8001e3e:	f043 0308 	orr.w	r3, r3, #8
 8001e42:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001e44:	2180      	movs	r1, #128	; 0x80
 8001e46:	480a      	ldr	r0, [pc, #40]	; (8001e70 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e48:	f009 f814 	bl	800ae74 <HAL_GPIO_ReadPin>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bf0c      	ite	eq
 8001e52:	2301      	moveq	r3, #1
 8001e54:	2300      	movne	r3, #0
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <_ZN8JoyStick8getValueEv+0xb0>
 8001e5c:	89fb      	ldrh	r3, [r7, #14]
 8001e5e:	f043 0310 	orr.w	r3, r3, #16
 8001e62:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001e64:	89fb      	ldrh	r3, [r7, #14]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40020c00 	.word	0x40020c00
 8001e78:	40020400 	.word	0x40020400

08001e7c <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	2b52      	cmp	r3, #82	; 0x52
 8001e8c:	d112      	bne.n	8001eb4 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e94:	4856      	ldr	r0, [pc, #344]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001e96:	f009 f805 	bl	800aea4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ea0:	4853      	ldr	r0, [pc, #332]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001ea2:	f008 ffff 	bl	800aea4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eac:	4850      	ldr	r0, [pc, #320]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001eae:	f008 fff9 	bl	800aea4 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001eb2:	e098      	b.n	8001fe6 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	2b47      	cmp	r3, #71	; 0x47
 8001eb8:	d112      	bne.n	8001ee0 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ec0:	484b      	ldr	r0, [pc, #300]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001ec2:	f008 ffef 	bl	800aea4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ecc:	4848      	ldr	r0, [pc, #288]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001ece:	f008 ffe9 	bl	800aea4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ed8:	4845      	ldr	r0, [pc, #276]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001eda:	f008 ffe3 	bl	800aea4 <HAL_GPIO_WritePin>
}
 8001ede:	e082      	b.n	8001fe6 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	2b42      	cmp	r3, #66	; 0x42
 8001ee4:	d112      	bne.n	8001f0c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eec:	4840      	ldr	r0, [pc, #256]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001eee:	f008 ffd9 	bl	800aea4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ef8:	483d      	ldr	r0, [pc, #244]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001efa:	f008 ffd3 	bl	800aea4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001efe:	2200      	movs	r2, #0
 8001f00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f04:	483a      	ldr	r0, [pc, #232]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001f06:	f008 ffcd 	bl	800aea4 <HAL_GPIO_WritePin>
}
 8001f0a:	e06c      	b.n	8001fe6 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f0c:	78fb      	ldrb	r3, [r7, #3]
 8001f0e:	2b43      	cmp	r3, #67	; 0x43
 8001f10:	d112      	bne.n	8001f38 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f12:	2201      	movs	r2, #1
 8001f14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f18:	4835      	ldr	r0, [pc, #212]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001f1a:	f008 ffc3 	bl	800aea4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f24:	4832      	ldr	r0, [pc, #200]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001f26:	f008 ffbd 	bl	800aea4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f30:	482f      	ldr	r0, [pc, #188]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001f32:	f008 ffb7 	bl	800aea4 <HAL_GPIO_WritePin>
}
 8001f36:	e056      	b.n	8001fe6 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	2b4d      	cmp	r3, #77	; 0x4d
 8001f3c:	d112      	bne.n	8001f64 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f44:	482a      	ldr	r0, [pc, #168]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001f46:	f008 ffad 	bl	800aea4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f50:	4827      	ldr	r0, [pc, #156]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001f52:	f008 ffa7 	bl	800aea4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f56:	2200      	movs	r2, #0
 8001f58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f5c:	4824      	ldr	r0, [pc, #144]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001f5e:	f008 ffa1 	bl	800aea4 <HAL_GPIO_WritePin>
}
 8001f62:	e040      	b.n	8001fe6 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	2b59      	cmp	r3, #89	; 0x59
 8001f68:	d112      	bne.n	8001f90 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f70:	481f      	ldr	r0, [pc, #124]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001f72:	f008 ff97 	bl	800aea4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f7c:	481c      	ldr	r0, [pc, #112]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001f7e:	f008 ff91 	bl	800aea4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f82:	2201      	movs	r2, #1
 8001f84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f88:	4819      	ldr	r0, [pc, #100]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001f8a:	f008 ff8b 	bl	800aea4 <HAL_GPIO_WritePin>
}
 8001f8e:	e02a      	b.n	8001fe6 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	2b57      	cmp	r3, #87	; 0x57
 8001f94:	d112      	bne.n	8001fbc <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f96:	2200      	movs	r2, #0
 8001f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9c:	4814      	ldr	r0, [pc, #80]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001f9e:	f008 ff81 	bl	800aea4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fa8:	4811      	ldr	r0, [pc, #68]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001faa:	f008 ff7b 	bl	800aea4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fb4:	480e      	ldr	r0, [pc, #56]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001fb6:	f008 ff75 	bl	800aea4 <HAL_GPIO_WritePin>
}
 8001fba:	e014      	b.n	8001fe6 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	2b7e      	cmp	r3, #126	; 0x7e
 8001fc0:	d111      	bne.n	8001fe6 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc8:	4809      	ldr	r0, [pc, #36]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001fca:	f008 ff6b 	bl	800aea4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fd4:	4806      	ldr	r0, [pc, #24]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001fd6:	f008 ff65 	bl	800aea4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fe0:	4803      	ldr	r0, [pc, #12]	; (8001ff0 <_ZN3LED9fullColorEc+0x174>)
 8001fe2:	f008 ff5f 	bl	800aea4 <HAL_GPIO_WritePin>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40020000 	.word	0x40020000

08001ff4 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	70fb      	strb	r3, [r7, #3]
 8002000:	4613      	mov	r3, r2
 8002002:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d106      	bne.n	800201a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800200c:	2201      	movs	r2, #1
 800200e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002012:	4813      	ldr	r0, [pc, #76]	; (8002060 <_ZN3LED2LREaa+0x6c>)
 8002014:	f008 ff46 	bl	800aea4 <HAL_GPIO_WritePin>
 8002018:	e009      	b.n	800202e <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800201a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d105      	bne.n	800202e <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002028:	480d      	ldr	r0, [pc, #52]	; (8002060 <_ZN3LED2LREaa+0x6c>)
 800202a:	f008 ff3b 	bl	800aea4 <HAL_GPIO_WritePin>

	if(r_status == 1)
 800202e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d106      	bne.n	8002044 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002036:	2201      	movs	r2, #1
 8002038:	f44f 7100 	mov.w	r1, #512	; 0x200
 800203c:	4808      	ldr	r0, [pc, #32]	; (8002060 <_ZN3LED2LREaa+0x6c>)
 800203e:	f008 ff31 	bl	800aea4 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 8002042:	e009      	b.n	8002058 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8002044:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d105      	bne.n	8002058 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800204c:	2200      	movs	r2, #0
 800204e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002052:	4803      	ldr	r0, [pc, #12]	; (8002060 <_ZN3LED2LREaa+0x6c>)
 8002054:	f008 ff26 	bl	800aea4 <HAL_GPIO_WritePin>
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40020000 	.word	0x40020000

08002064 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 8002064:	b580      	push	{r7, lr}
 8002066:	b092      	sub	sp, #72	; 0x48
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fe92 	bl	8001d9c <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	637b      	str	r3, [r7, #52]	; 0x34
 800207c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207e:	647b      	str	r3, [r7, #68]	; 0x44
 8002080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002082:	331c      	adds	r3, #28
 8002084:	633b      	str	r3, [r7, #48]	; 0x30
 8002086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208a:	429a      	cmp	r2, r3
 800208c:	d008      	beq.n	80020a0 <_ZN10LineSensorC1Ev+0x3c>
 800208e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8002092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002094:	2200      	movs	r2, #0
 8002096:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800209a:	3302      	adds	r3, #2
 800209c:	647b      	str	r3, [r7, #68]	; 0x44
 800209e:	e7f2      	b.n	8002086 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020aa:	643b      	str	r3, [r7, #64]	; 0x40
 80020ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ae:	3338      	adds	r3, #56	; 0x38
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
 80020b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d009      	beq.n	80020ce <_ZN10LineSensorC1Ev+0x6a>
 80020ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020bc:	623b      	str	r3, [r7, #32]
		s = 0;
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80020c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c8:	3304      	adds	r3, #4
 80020ca:	643b      	str	r3, [r7, #64]	; 0x40
 80020cc:	e7f1      	b.n	80020b2 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3338      	adds	r3, #56	; 0x38
 80020de:	61bb      	str	r3, [r7, #24]
 80020e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d009      	beq.n	80020fc <_ZN10LineSensorC1Ev+0x98>
 80020e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ea:	617b      	str	r3, [r7, #20]
		m = 0;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80020f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f6:	3304      	adds	r3, #4
 80020f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020fa:	e7f1      	b.n	80020e0 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	63bb      	str	r3, [r7, #56]	; 0x38
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	3338      	adds	r3, #56	; 0x38
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	429a      	cmp	r2, r3
 8002114:	d009      	beq.n	800212a <_ZN10LineSensorC1Ev+0xc6>
 8002116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002118:	60bb      	str	r3, [r7, #8]
		s = 1;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002120:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8002122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002124:	3304      	adds	r3, #4
 8002126:	63bb      	str	r3, [r7, #56]	; 0x38
 8002128:	e7f1      	b.n	800210e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4618      	mov	r0, r3
 800212e:	3748      	adds	r7, #72	; 0x48
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	220e      	movs	r2, #14
 8002140:	4619      	mov	r1, r3
 8002142:	4803      	ldr	r0, [pc, #12]	; (8002150 <_ZN10LineSensor8ADCStartEv+0x1c>)
 8002144:	f007 fc7a 	bl	8009a3c <HAL_ADC_Start_DMA>
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	2003f904 	.word	0x2003f904

08002154 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b0d      	cmp	r3, #13
 8002164:	dc2f      	bgt.n	80021c6 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3392      	adds	r3, #146	; 0x92
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	3304      	adds	r3, #4
 8002172:	ed93 7a00 	vldr	s14, [r3]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800217e:	ee07 3a90 	vmov	s15, r3
 8002182:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	33a0      	adds	r3, #160	; 0xa0
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	3304      	adds	r3, #4
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800219a:	4b14      	ldr	r3, [pc, #80]	; (80021ec <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	4619      	mov	r1, r3
 80021a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	460b      	mov	r3, r1
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	1a5b      	subs	r3, r3, r1
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	68f9      	ldr	r1, [r7, #12]
 80021b0:	440b      	add	r3, r1
 80021b2:	3306      	adds	r3, #6
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	3304      	adds	r3, #4
 80021ba:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	3301      	adds	r3, #1
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	e7cc      	b.n	8002160 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80021c6:	4b09      	ldr	r3, [pc, #36]	; (80021ec <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	3301      	adds	r3, #1
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4b07      	ldr	r3, [pc, #28]	; (80021ec <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021d0:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b09      	cmp	r3, #9
 80021d8:	d902      	bls.n	80021e0 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80021da:	4b04      	ldr	r3, [pc, #16]	; (80021ec <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]


}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	2000021c 	.word	0x2000021c

080021f0 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80021f0:	b5b0      	push	{r4, r5, r7, lr}
 80021f2:	b08e      	sub	sp, #56	; 0x38
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80021f8:	2300      	movs	r3, #0
 80021fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80021fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002202:	2b0d      	cmp	r3, #13
 8002204:	f200 80b6 	bhi.w	8002374 <_ZN10LineSensor18updateSensorValuesEv+0x184>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002208:	2300      	movs	r3, #0
 800220a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800220e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002212:	2b09      	cmp	r3, #9
 8002214:	d81c      	bhi.n	8002250 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002216:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800221a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800221e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	1a9b      	subs	r3, r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4423      	add	r3, r4
 800222e:	3306      	adds	r3, #6
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4403      	add	r3, r0
 8002234:	3304      	adds	r3, #4
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	008b      	lsls	r3, r1, #2
 800223a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800223e:	440b      	add	r3, r1
 8002240:	3b30      	subs	r3, #48	; 0x30
 8002242:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002244:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002248:	3301      	adds	r3, #1
 800224a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800224e:	e7de      	b.n	800220e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002250:	2300      	movs	r3, #0
 8002252:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002256:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800225a:	2b09      	cmp	r3, #9
 800225c:	d84d      	bhi.n	80022fa <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 800225e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002262:	3301      	adds	r3, #1
 8002264:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002268:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800226c:	2b09      	cmp	r3, #9
 800226e:	d83e      	bhi.n	80022ee <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002270:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800227a:	4413      	add	r3, r2
 800227c:	3b30      	subs	r3, #48	; 0x30
 800227e:	ed93 7a00 	vldr	s14, [r3]
 8002282:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800228c:	4413      	add	r3, r2
 800228e:	3b30      	subs	r3, #48	; 0x30
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229c:	d521      	bpl.n	80022e2 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800229e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022a8:	4413      	add	r3, r2
 80022aa:	3b30      	subs	r3, #48	; 0x30
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80022b0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80022b4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022b8:	0092      	lsls	r2, r2, #2
 80022ba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022be:	440a      	add	r2, r1
 80022c0:	3a30      	subs	r2, #48	; 0x30
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022ca:	440b      	add	r3, r1
 80022cc:	3b30      	subs	r3, #48	; 0x30
 80022ce:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80022d0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022da:	4413      	add	r3, r2
 80022dc:	3b30      	subs	r3, #48	; 0x30
 80022de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022e0:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80022e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022e6:	3301      	adds	r3, #1
 80022e8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022ec:	e7bc      	b.n	8002268 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80022ee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022f2:	3301      	adds	r3, #1
 80022f4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022f8:	e7ad      	b.n	8002256 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe f93b 	bl	8000578 <__aeabi_f2d>
 8002302:	a328      	add	r3, pc, #160	; (adr r3, 80023a4 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002308:	f7fe f98e 	bl	8000628 <__aeabi_dmul>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4614      	mov	r4, r2
 8002312:	461d      	mov	r5, r3
 8002314:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002318:	4a1f      	ldr	r2, [pc, #124]	; (8002398 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe f929 	bl	8000578 <__aeabi_f2d>
 8002326:	a31a      	add	r3, pc, #104	; (adr r3, 8002390 <_ZN10LineSensor18updateSensorValuesEv+0x1a0>)
 8002328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232c:	f7fe f97c 	bl	8000628 <__aeabi_dmul>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4620      	mov	r0, r4
 8002336:	4629      	mov	r1, r5
 8002338:	f7fd ffc0 	bl	80002bc <__adddf3>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002344:	4610      	mov	r0, r2
 8002346:	4619      	mov	r1, r3
 8002348:	f7fe fc66 	bl	8000c18 <__aeabi_d2f>
 800234c:	4601      	mov	r1, r0
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 800235a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	490d      	ldr	r1, [pc, #52]	; (8002398 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002368:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800236c:	3301      	adds	r3, #1
 800236e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002372:	e744      	b.n	80021fe <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800237a:	4a08      	ldr	r2, [pc, #32]	; (800239c <_ZN10LineSensor18updateSensorValuesEv+0x1ac>)
 800237c:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002384:	4a06      	ldr	r2, [pc, #24]	; (80023a0 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 8002386:	6013      	str	r3, [r2, #0]
}
 8002388:	bf00      	nop
 800238a:	3738      	adds	r7, #56	; 0x38
 800238c:	46bd      	mov	sp, r7
 800238e:	bdb0      	pop	{r4, r5, r7, pc}
 8002390:	66666666 	.word	0x66666666
 8002394:	3fee6666 	.word	0x3fee6666
 8002398:	20000220 	.word	0x20000220
 800239c:	20000214 	.word	0x20000214
 80023a0:	20000218 	.word	0x20000218
 80023a4:	9999999a 	.word	0x9999999a
 80023a8:	3fa99999 	.word	0x3fa99999

080023ac <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b0a0      	sub	sp, #128	; 0x80
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80023b4:	2064      	movs	r0, #100	; 0x64
 80023b6:	f007 fad9 	bl	800996c <HAL_Delay>

	lcd_clear();
 80023ba:	f7fe fea3 	bl	8001104 <lcd_clear>
	lcd_locate(0,0);
 80023be:	2100      	movs	r1, #0
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7fe feaf 	bl	8001124 <lcd_locate>
	lcd_printf("LineSens");
 80023c6:	4886      	ldr	r0, [pc, #536]	; (80025e0 <_ZN10LineSensor11calibrationEv+0x234>)
 80023c8:	f7fe fed7 	bl	800117a <lcd_printf>
	lcd_locate(0,1);
 80023cc:	2101      	movs	r1, #1
 80023ce:	2000      	movs	r0, #0
 80023d0:	f7fe fea8 	bl	8001124 <lcd_locate>
	lcd_printf("Calib   ");
 80023d4:	4883      	ldr	r0, [pc, #524]	; (80025e4 <_ZN10LineSensor11calibrationEv+0x238>)
 80023d6:	f7fe fed0 	bl	800117a <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023da:	2300      	movs	r3, #0
 80023dc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80023e0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80023e4:	2b0d      	cmp	r3, #13
 80023e6:	d823      	bhi.n	8002430 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 80023e8:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80023ec:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	32b0      	adds	r2, #176	; 0xb0
 80023f4:	0092      	lsls	r2, r2, #2
 80023f6:	440a      	add	r2, r1
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002400:	440b      	add	r3, r1
 8002402:	3b40      	subs	r3, #64	; 0x40
 8002404:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002406:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800240a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	32b0      	adds	r2, #176	; 0xb0
 8002412:	0092      	lsls	r2, r2, #2
 8002414:	440a      	add	r2, r1
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800241e:	440b      	add	r3, r1
 8002420:	3b78      	subs	r3, #120	; 0x78
 8002422:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002424:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002428:	3301      	adds	r3, #1
 800242a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800242e:	e7d7      	b.n	80023e0 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fcbc 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 800243c:	4603      	mov	r3, r0
 800243e:	2b02      	cmp	r3, #2
 8002440:	bf14      	ite	ne
 8002442:	2301      	movne	r3, #1
 8002444:	2300      	moveq	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d079      	beq.n	8002540 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800244c:	2300      	movs	r3, #0
 800244e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002452:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002456:	2b0d      	cmp	r3, #13
 8002458:	d850      	bhi.n	80024fc <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800245a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002464:	4413      	add	r3, r2
 8002466:	3b40      	subs	r3, #64	; 0x40
 8002468:	ed93 7a00 	vldr	s14, [r3]
 800246c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	33b0      	adds	r3, #176	; 0xb0
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	edd3 7a00 	vldr	s15, [r3]
 800247c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002484:	d50f      	bpl.n	80024a6 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 8002486:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800248a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	32b0      	adds	r2, #176	; 0xb0
 8002492:	0092      	lsls	r2, r2, #2
 8002494:	440a      	add	r2, r1
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800249e:	440b      	add	r3, r1
 80024a0:	3b40      	subs	r3, #64	; 0x40
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	e024      	b.n	80024f0 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80024a6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024b0:	4413      	add	r3, r2
 80024b2:	3b78      	subs	r3, #120	; 0x78
 80024b4:	ed93 7a00 	vldr	s14, [r3]
 80024b8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	33b0      	adds	r3, #176	; 0xb0
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	edd3 7a00 	vldr	s15, [r3]
 80024c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d0:	dd0e      	ble.n	80024f0 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80024d2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80024d6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	32b0      	adds	r2, #176	; 0xb0
 80024de:	0092      	lsls	r2, r2, #2
 80024e0:	440a      	add	r2, r1
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80024ea:	440b      	add	r3, r1
 80024ec:	3b78      	subs	r3, #120	; 0x78
 80024ee:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024f0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024f4:	3301      	adds	r3, #1
 80024f6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80024fa:	e7aa      	b.n	8002452 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002502:	4618      	mov	r0, r3
 8002504:	f002 fe5a 	bl	80051bc <_ZN12RotarySwitch8getValueEv>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	bf0c      	ite	eq
 800250e:	2301      	moveq	r3, #1
 8002510:	2300      	movne	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d009      	beq.n	800252c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800251e:	2201      	movs	r2, #1
 8002520:	f04f 31ff 	mov.w	r1, #4294967295
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fd65 	bl	8001ff4 <_ZN3LED2LREaa>
 800252a:	e781      	b.n	8002430 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002532:	2200      	movs	r2, #0
 8002534:	f04f 31ff 	mov.w	r1, #4294967295
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fd5b 	bl	8001ff4 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800253e:	e777      	b.n	8002430 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002540:	2300      	movs	r3, #0
 8002542:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002546:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800254a:	2b0d      	cmp	r3, #13
 800254c:	d826      	bhi.n	800259c <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800254e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002558:	4413      	add	r3, r2
 800255a:	3b40      	subs	r3, #64	; 0x40
 800255c:	ed93 7a00 	vldr	s14, [r3]
 8002560:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800256a:	4413      	add	r3, r2
 800256c:	3b78      	subs	r3, #120	; 0x78
 800256e:	edd3 7a00 	vldr	s15, [r3]
 8002572:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002576:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800257a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80025e8 <_ZN10LineSensor11calibrationEv+0x23c>
 800257e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	3392      	adds	r3, #146	; 0x92
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	3304      	adds	r3, #4
 800258c:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002590:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002594:	3301      	adds	r3, #1
 8002596:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800259a:	e7d4      	b.n	8002546 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800259c:	2300      	movs	r3, #0
 800259e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80025a2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80025a6:	2b0d      	cmp	r3, #13
 80025a8:	d815      	bhi.n	80025d6 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 80025aa:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80025ae:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80025b2:	0092      	lsls	r2, r2, #2
 80025b4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80025b8:	440a      	add	r2, r1
 80025ba:	3a78      	subs	r2, #120	; 0x78
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	33a0      	adds	r3, #160	; 0xa0
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	3304      	adds	r3, #4
 80025c8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025ca:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80025ce:	3301      	adds	r3, #1
 80025d0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80025d4:	e7e5      	b.n	80025a2 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 80025d6:	bf00      	nop
 80025d8:	3780      	adds	r7, #128	; 0x80
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	0801a730 	.word	0x0801a730
 80025e4:	0801a73c 	.word	0x0801a73c
 80025e8:	447a0000 	.word	0x447a0000

080025ec <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 80025ec:	b480      	push	{r7}
 80025ee:	b089      	sub	sp, #36	; 0x24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	61bb      	str	r3, [r7, #24]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	3338      	adds	r3, #56	; 0x38
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	429a      	cmp	r2, r3
 8002610:	d012      	beq.n	8002638 <_ZN10LineSensor13emergencyStopEv+0x4c>
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	edd3 7a00 	vldr	s15, [r3]
 800261c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800268c <_ZN10LineSensor13emergencyStopEv+0xa0>
 8002620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002628:	db02      	blt.n	8002630 <_ZN10LineSensor13emergencyStopEv+0x44>
 800262a:	8bfb      	ldrh	r3, [r7, #30]
 800262c:	3301      	adds	r3, #1
 800262e:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	3304      	adds	r3, #4
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	e7e8      	b.n	800260a <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 8002638:	8bfb      	ldrh	r3, [r7, #30]
 800263a:	2b0d      	cmp	r3, #13
 800263c:	d906      	bls.n	800264c <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 800263e:	4b14      	ldr	r3, [pc, #80]	; (8002690 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	3301      	adds	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	4b12      	ldr	r3, [pc, #72]	; (8002690 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002648:	801a      	strh	r2, [r3, #0]
 800264a:	e002      	b.n	8002652 <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 800264c:	4b10      	ldr	r3, [pc, #64]	; (8002690 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 800264e:	2200      	movs	r2, #0
 8002650:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 8002652:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	2b31      	cmp	r3, #49	; 0x31
 8002658:	d903      	bls.n	8002662 <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 800265a:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
 8002660:	e002      	b.n	8002668 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 8002662:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002668:	4b09      	ldr	r3, [pc, #36]	; (8002690 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002670:	4293      	cmp	r3, r2
 8002672:	d903      	bls.n	800267c <_ZN10LineSensor13emergencyStopEv+0x90>
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002676:	f242 7210 	movw	r2, #10000	; 0x2710
 800267a:	801a      	strh	r2, [r3, #0]

	return flag;
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 800267e:	781b      	ldrb	r3, [r3, #0]

}
 8002680:	4618      	mov	r0, r3
 8002682:	3724      	adds	r7, #36	; 0x24
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	442f0000 	.word	0x442f0000
 8002690:	20000258 	.word	0x20000258
 8002694:	2000025a 	.word	0x2000025a

08002698 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	ed87 0a01 	vstr	s0, [r7, #4]
 80026a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80026a6:	eef0 7ae7 	vabs.f32	s15, s15
 80026aa:	eeb0 0a67 	vmov.f32	s0, s15
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>:
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;

//#define REVERSE

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu) :
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_fast_(0), kd_fast_(0), ki_fast_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0), all_sideline_flag_(false)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	625a      	str	r2, [r3, #36]	; 0x24
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	629a      	str	r2, [r3, #40]	; 0x28
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	631a      	str	r2, [r3, #48]	; 0x30
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	635a      	str	r2, [r3, #52]	; 0x34
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	639a      	str	r2, [r3, #56]	; 0x38
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	641a      	str	r2, [r3, #64]	; 0x40
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	645a      	str	r2, [r3, #68]	; 0x44
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	64da      	str	r2, [r3, #76]	; 0x4c
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002766:	335c      	adds	r3, #92	; 0x5c
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002774:	3320      	adds	r3, #32
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002780:	3322      	adds	r3, #34	; 0x22
 8002782:	2200      	movs	r2, #0
 8002784:	801a      	strh	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800278c:	3324      	adds	r3, #36	; 0x24
 800278e:	2200      	movs	r2, #0
 8002790:	801a      	strh	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8002798:	33f8      	adds	r3, #248	; 0xf8
 800279a:	2200      	movs	r2, #0
 800279c:	801a      	strh	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80027a4:	33fa      	adds	r3, #250	; 0xfa
 80027a6:	2200      	movs	r2, #0
 80027a8:	801a      	strh	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80027b0:	33fc      	adds	r3, #252	; 0xfc
 80027b2:	2200      	movs	r2, #0
 80027b4:	801a      	strh	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80027bc:	33fe      	adds	r3, #254	; 0xfe
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80027c8:	33ff      	adds	r3, #255	; 0xff
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80027de:	3304      	adds	r3, #4
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80027ec:	3308      	adds	r3, #8
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80027fa:	330c      	adds	r3, #12
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002808:	3310      	adds	r3, #16
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002816:	3314      	adds	r3, #20
 8002818:	2200      	movs	r2, #0
 800281a:	801a      	strh	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002822:	3316      	adds	r3, #22
 8002824:	2200      	movs	r2, #0
 8002826:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a3a      	ldr	r2, [r7, #32]
 800283e:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002844:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800284a:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002850:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002856:	621a      	str	r2, [r3, #32]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002858:	2300      	movs	r3, #0
 800285a:	82fb      	strh	r3, [r7, #22]
 800285c:	8afb      	ldrh	r3, [r7, #22]
 800285e:	f241 726f 	movw	r2, #5999	; 0x176f
 8002862:	4293      	cmp	r3, r2
 8002864:	d80d      	bhi.n	8002882 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1ca>
		velocity_table_[i] = 0;
 8002866:	8afb      	ldrh	r3, [r7, #22]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800286e:	3318      	adds	r3, #24
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800287a:	8afb      	ldrh	r3, [r7, #22]
 800287c:	3301      	adds	r3, #1
 800287e:	82fb      	strh	r3, [r7, #22]
 8002880:	e7ec      	b.n	800285c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1a4>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002882:	2300      	movs	r3, #0
 8002884:	82bb      	strh	r3, [r7, #20]
 8002886:	8abb      	ldrh	r3, [r7, #20]
 8002888:	2b63      	cmp	r3, #99	; 0x63
 800288a:	d80d      	bhi.n	80028a8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1f0>
		crossline_distance_[i] = 0;
 800288c:	8abb      	ldrh	r3, [r7, #20]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002894:	330a      	adds	r3, #10
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80028a0:	8abb      	ldrh	r3, [r7, #20]
 80028a2:	3301      	adds	r3, #1
 80028a4:	82bb      	strh	r3, [r7, #20]
 80028a6:	e7ee      	b.n	8002886 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1ce>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028a8:	2300      	movs	r3, #0
 80028aa:	827b      	strh	r3, [r7, #18]
 80028ac:	8a7b      	ldrh	r3, [r7, #18]
 80028ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028b2:	d20d      	bcs.n	80028d0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x218>
		sideline_distance_[i] = 0;
 80028b4:	8a7b      	ldrh	r3, [r7, #18]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80028bc:	332e      	adds	r3, #46	; 0x2e
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028c8:	8a7b      	ldrh	r3, [r7, #18]
 80028ca:	3301      	adds	r3, #1
 80028cc:	827b      	strh	r3, [r7, #18]
 80028ce:	e7ed      	b.n	80028ac <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1f4>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028d0:	2300      	movs	r3, #0
 80028d2:	823b      	strh	r3, [r7, #16]
 80028d4:	8a3b      	ldrh	r3, [r7, #16]
 80028d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028da:	d20d      	bcs.n	80028f8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x240>
		all_sideline_distance_[i] = 0;
 80028dc:	8a3b      	ldrh	r3, [r7, #16]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	f503 534d 	add.w	r3, r3, #13120	; 0x3340
 80028e4:	3316      	adds	r3, #22
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028f0:	8a3b      	ldrh	r3, [r7, #16]
 80028f2:	3301      	adds	r3, #1
 80028f4:	823b      	strh	r3, [r7, #16]
 80028f6:	e7ed      	b.n	80028d4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x21c>
	}
}
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4618      	mov	r0, r3
 80028fc:	371c      	adds	r7, #28
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002908:	b5b0      	push	{r4, r5, r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002920:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800292c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002938:	ee37 7a27 	vadd.f32	s14, s14, s15
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002944:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002950:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800295c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002970:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 800297c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002988:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 8002994:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80029a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80029ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80029b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b4:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 80029b8:	4a1f      	ldr	r2, [pc, #124]	; (8002a38 <_ZN9LineTrace9calcErrorEv+0x130>)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f7fd fdda 	bl	8000578 <__aeabi_f2d>
 80029c4:	a318      	add	r3, pc, #96	; (adr r3, 8002a28 <_ZN9LineTrace9calcErrorEv+0x120>)
 80029c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ca:	f7fd fe2d 	bl	8000628 <__aeabi_dmul>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	4614      	mov	r4, r2
 80029d4:	461d      	mov	r5, r3
 80029d6:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <_ZN9LineTrace9calcErrorEv+0x134>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fdcc 	bl	8000578 <__aeabi_f2d>
 80029e0:	a313      	add	r3, pc, #76	; (adr r3, 8002a30 <_ZN9LineTrace9calcErrorEv+0x128>)
 80029e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e6:	f7fd fe1f 	bl	8000628 <__aeabi_dmul>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4620      	mov	r0, r4
 80029f0:	4629      	mov	r1, r5
 80029f2:	f7fd fc63 	bl	80002bc <__adddf3>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4610      	mov	r0, r2
 80029fc:	4619      	mov	r1, r3
 80029fe:	f7fe f90b 	bl	8000c18 <__aeabi_d2f>
 8002a02:	4603      	mov	r3, r0
 8002a04:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 8002a06:	4a0e      	ldr	r2, [pc, #56]	; (8002a40 <_ZN9LineTrace9calcErrorEv+0x138>)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 8002a0c:	4a0b      	ldr	r2, [pc, #44]	; (8002a3c <_ZN9LineTrace9calcErrorEv+0x134>)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6013      	str	r3, [r2, #0]

	return diff;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	ee07 3a90 	vmov	s15, r3

}
 8002a18:	eeb0 0a67 	vmov.f32	s0, s15
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bdb0      	pop	{r4, r5, r7, pc}
 8002a22:	bf00      	nop
 8002a24:	f3af 8000 	nop.w
 8002a28:	47ae147b 	.word	0x47ae147b
 8002a2c:	3fb47ae1 	.word	0x3fb47ae1
 8002a30:	d70a3d71 	.word	0xd70a3d71
 8002a34:	3fed70a3 	.word	0x3fed70a3
 8002a38:	2000025c 	.word	0x2000025c
 8002a3c:	20000280 	.word	0x20000280
 8002a40:	20000260 	.word	0x20000260
 8002a44:	00000000 	.word	0x00000000

08002a48 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 8002a48:	b5b0      	push	{r4, r5, r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff ff59 	bl	8002908 <_ZN9LineTrace9calcErrorEv>
 8002a56:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d107      	bne.n	8002a74 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002a64:	4b68      	ldr	r3, [pc, #416]	; (8002c08 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	}

	if(target_velocity_ >= 2.5){
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002a7a:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8002a7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a86:	db4c      	blt.n	8002b22 <_ZN9LineTrace8pidTraceEv+0xda>
		p = kp_fast_ * diff;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002a8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a96:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_fast_ * (diff - pre_diff) / DELTA_T;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002aa0:	4b5a      	ldr	r3, [pc, #360]	; (8002c0c <_ZN9LineTrace8pidTraceEv+0x1c4>)
 8002aa2:	edd3 7a00 	vldr	s15, [r3]
 8002aa6:	edd7 6a03 	vldr	s13, [r7, #12]
 8002aaa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab2:	ee17 0a90 	vmov	r0, s15
 8002ab6:	f7fd fd5f 	bl	8000578 <__aeabi_f2d>
 8002aba:	a351      	add	r3, pc, #324	; (adr r3, 8002c00 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac0:	f7fd fedc 	bl	800087c <__aeabi_ddiv>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	f7fe f8a4 	bl	8000c18 <__aeabi_d2f>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	613b      	str	r3, [r7, #16]
		i += ki_fast_ * diff * DELTA_T;
 8002ad4:	4b4c      	ldr	r3, [pc, #304]	; (8002c08 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fd fd4d 	bl	8000578 <__aeabi_f2d>
 8002ade:	4604      	mov	r4, r0
 8002ae0:	460d      	mov	r5, r1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002ae8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af0:	ee17 0a90 	vmov	r0, s15
 8002af4:	f7fd fd40 	bl	8000578 <__aeabi_f2d>
 8002af8:	a341      	add	r3, pc, #260	; (adr r3, 8002c00 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afe:	f7fd fd93 	bl	8000628 <__aeabi_dmul>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4620      	mov	r0, r4
 8002b08:	4629      	mov	r1, r5
 8002b0a:	f7fd fbd7 	bl	80002bc <__adddf3>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	f7fe f87f 	bl	8000c18 <__aeabi_d2f>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4a3a      	ldr	r2, [pc, #232]	; (8002c08 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	e04b      	b.n	8002bba <_ZN9LineTrace8pidTraceEv+0x172>
	}
	else{
		p = kp_ * diff;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002b28:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b30:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002b3a:	4b34      	ldr	r3, [pc, #208]	; (8002c0c <_ZN9LineTrace8pidTraceEv+0x1c4>)
 8002b3c:	edd3 7a00 	vldr	s15, [r3]
 8002b40:	edd7 6a03 	vldr	s13, [r7, #12]
 8002b44:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b4c:	ee17 0a90 	vmov	r0, s15
 8002b50:	f7fd fd12 	bl	8000578 <__aeabi_f2d>
 8002b54:	a32a      	add	r3, pc, #168	; (adr r3, 8002c00 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5a:	f7fd fe8f 	bl	800087c <__aeabi_ddiv>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4610      	mov	r0, r2
 8002b64:	4619      	mov	r1, r3
 8002b66:	f7fe f857 	bl	8000c18 <__aeabi_d2f>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002b6e:	4b26      	ldr	r3, [pc, #152]	; (8002c08 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fd fd00 	bl	8000578 <__aeabi_f2d>
 8002b78:	4604      	mov	r4, r0
 8002b7a:	460d      	mov	r5, r1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002b82:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b8a:	ee17 0a90 	vmov	r0, s15
 8002b8e:	f7fd fcf3 	bl	8000578 <__aeabi_f2d>
 8002b92:	a31b      	add	r3, pc, #108	; (adr r3, 8002c00 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b98:	f7fd fd46 	bl	8000628 <__aeabi_dmul>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	f7fd fb8a 	bl	80002bc <__adddf3>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4610      	mov	r0, r2
 8002bae:	4619      	mov	r1, r3
 8002bb0:	f7fe f832 	bl	8000c18 <__aeabi_d2f>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	4a14      	ldr	r2, [pc, #80]	; (8002c08 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002bb8:	6013      	str	r3, [r2, #0]
	}

	float rotation_ratio = p + d + i;
 8002bba:	ed97 7a05 	vldr	s14, [r7, #20]
 8002bbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <_ZN9LineTrace8pidTraceEv+0x1c0>)
 8002bc8:	edd3 7a00 	vldr	s15, [r3]
 8002bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd0:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8002bde:	edd7 0a02 	vldr	s1, [r7, #8]
 8002be2:	eeb0 0a67 	vmov.f32	s0, s15
 8002be6:	4610      	mov	r0, r2
 8002be8:	f002 fec2 	bl	8005970 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002bec:	4a07      	ldr	r2, [pc, #28]	; (8002c0c <_ZN9LineTrace8pidTraceEv+0x1c4>)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6013      	str	r3, [r2, #0]

}
 8002bf2:	bf00      	nop
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	f3af 8000 	nop.w
 8002c00:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c04:	3f50624d 	.word	0x3f50624d
 8002c08:	20000288 	.word	0x20000288
 8002c0c:	20000284 	.word	0x20000284

08002c10 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fe fc73 	bl	8001508 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f002 f983 	bl	8004f32 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f001 feb7 	bl	80049a4 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 ff1c 	bl	8004a90 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
}
 8002c60:	bf00      	nop
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002c80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002c8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c90:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002c94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c98:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002cac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002cb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cbc:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002cc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cc4:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8002cc8:	4a3e      	ldr	r2, [pc, #248]	; (8002dc4 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002cce:	4a3e      	ldr	r2, [pc, #248]	; (8002dc8 <_ZN9LineTrace11isCrossLineEv+0x160>)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8002cd4:	4b3d      	ldr	r3, [pc, #244]	; (8002dcc <_ZN9LineTrace11isCrossLineEv+0x164>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d143      	bne.n	8002d64 <_ZN9LineTrace11isCrossLineEv+0xfc>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002cdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ce0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002dd0 <_ZN9LineTrace11isCrossLineEv+0x168>
 8002ce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cec:	d50f      	bpl.n	8002d0e <_ZN9LineTrace11isCrossLineEv+0xa6>
 8002cee:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cf2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002dd0 <_ZN9LineTrace11isCrossLineEv+0x168>
 8002cf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cfe:	d506      	bpl.n	8002d0e <_ZN9LineTrace11isCrossLineEv+0xa6>
			cnt++;
 8002d00:	4b34      	ldr	r3, [pc, #208]	; (8002dd4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	3301      	adds	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	4b32      	ldr	r3, [pc, #200]	; (8002dd4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d0a:	801a      	strh	r2, [r3, #0]
 8002d0c:	e002      	b.n	8002d14 <_ZN9LineTrace11isCrossLineEv+0xac>
		}
		else{
			cnt = 0;
 8002d0e:	4b31      	ldr	r3, [pc, #196]	; (8002dd4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8002d14:	4b2f      	ldr	r3, [pc, #188]	; (8002dd4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d94c      	bls.n	8002db6 <_ZN9LineTrace11isCrossLineEv+0x14e>
			flag = true;
 8002d1c:	4b2e      	ldr	r3, [pc, #184]	; (8002dd8 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8002d22:	4b2a      	ldr	r3, [pc, #168]	; (8002dcc <_ZN9LineTrace11isCrossLineEv+0x164>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002d28:	4b2a      	ldr	r3, [pc, #168]	; (8002dd4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d3e:	3324      	adds	r3, #36	; 0x24
 8002d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d103      	bne.n	8002d50 <_ZN9LineTrace11isCrossLineEv+0xe8>
				storeCrossLineDistance();
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f001 fadd 	bl	8004308 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8002d4e:	e032      	b.n	8002db6 <_ZN9LineTrace11isCrossLineEv+0x14e>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f001 fb7f 	bl	8004454 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				correction_check_cnt_ = 0;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002d5c:	3314      	adds	r3, #20
 8002d5e:	2200      	movs	r2, #0
 8002d60:	801a      	strh	r2, [r3, #0]
 8002d62:	e028      	b.n	8002db6 <_ZN9LineTrace11isCrossLineEv+0x14e>

			//led_.LR(-1, 1);
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8002d64:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d68:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002ddc <_ZN9LineTrace11isCrossLineEv+0x174>
 8002d6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d74:	dd0f      	ble.n	8002d96 <_ZN9LineTrace11isCrossLineEv+0x12e>
 8002d76:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d7a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002ddc <_ZN9LineTrace11isCrossLineEv+0x174>
 8002d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d86:	dd06      	ble.n	8002d96 <_ZN9LineTrace11isCrossLineEv+0x12e>
			cnt++;
 8002d88:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	4b10      	ldr	r3, [pc, #64]	; (8002dd4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d92:	801a      	strh	r2, [r3, #0]
 8002d94:	e002      	b.n	8002d9c <_ZN9LineTrace11isCrossLineEv+0x134>
		}
		else{
			cnt = 0;
 8002d96:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8002d9c:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	2b09      	cmp	r3, #9
 8002da2:	d908      	bls.n	8002db6 <_ZN9LineTrace11isCrossLineEv+0x14e>
			flag = false;
 8002da4:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8002daa:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <_ZN9LineTrace11isCrossLineEv+0x164>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002db0:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	801a      	strh	r2, [r3, #0]
			//led_.LR(-1, 0);
		}

	}

	return flag;
 8002db6:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <_ZN9LineTrace11isCrossLineEv+0x170>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000268 	.word	0x20000268
 8002dc8:	2000026c 	.word	0x2000026c
 8002dcc:	2000028f 	.word	0x2000028f
 8002dd0:	44160000 	.word	0x44160000
 8002dd4:	2000028c 	.word	0x2000028c
 8002dd8:	2000028e 	.word	0x2000028e
 8002ddc:	43fa0000 	.word	0x43fa0000

08002de0 <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002df2:	3324      	adds	r3, #36	; 0x24
 8002df4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d143      	bne.n	8002e84 <_ZN9LineTrace15radius2VelocityEf+0xa4>
		if(radius < 300) velocity = min_velocity_;
 8002dfc:	edd7 7a00 	vldr	s15, [r7]
 8002e00:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002f1c <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8002e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0c:	d504      	bpl.n	8002e18 <_ZN9LineTrace15radius2VelocityEf+0x38>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	e076      	b.n	8002f06 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 800) velocity = 1.7;
 8002e18:	edd7 7a00 	vldr	s15, [r7]
 8002e1c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002f20 <_ZN9LineTrace15radius2VelocityEf+0x140>
 8002e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e28:	d502      	bpl.n	8002e30 <_ZN9LineTrace15radius2VelocityEf+0x50>
 8002e2a:	4b3e      	ldr	r3, [pc, #248]	; (8002f24 <_ZN9LineTrace15radius2VelocityEf+0x144>)
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	e06a      	b.n	8002f06 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1000) velocity = 2.0;
 8002e30:	edd7 7a00 	vldr	s15, [r7]
 8002e34:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002f28 <_ZN9LineTrace15radius2VelocityEf+0x148>
 8002e38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e40:	d503      	bpl.n	8002e4a <_ZN9LineTrace15radius2VelocityEf+0x6a>
 8002e42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	e05d      	b.n	8002f06 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.3;
 8002e4a:	edd7 7a00 	vldr	s15, [r7]
 8002e4e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002f2c <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8002e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5a:	d502      	bpl.n	8002e62 <_ZN9LineTrace15radius2VelocityEf+0x82>
 8002e5c:	4b34      	ldr	r3, [pc, #208]	; (8002f30 <_ZN9LineTrace15radius2VelocityEf+0x150>)
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	e051      	b.n	8002f06 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8002e62:	edd7 7a00 	vldr	s15, [r7]
 8002e66:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002f34 <_ZN9LineTrace15radius2VelocityEf+0x154>
 8002e6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e72:	d502      	bpl.n	8002e7a <_ZN9LineTrace15radius2VelocityEf+0x9a>
 8002e74:	4b30      	ldr	r3, [pc, #192]	; (8002f38 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	e045      	b.n	8002f06 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity_;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	e040      	b.n	8002f06 <_ZN9LineTrace15radius2VelocityEf+0x126>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002e8a:	3324      	adds	r3, #36	; 0x24
 8002e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d136      	bne.n	8002f02 <_ZN9LineTrace15radius2VelocityEf+0x122>
		if(radius < 300) velocity = min_velocity2_;
 8002e94:	edd7 7a00 	vldr	s15, [r7]
 8002e98:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002f1c <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8002e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea4:	d504      	bpl.n	8002eb0 <_ZN9LineTrace15radius2VelocityEf+0xd0>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	e02a      	b.n	8002f06 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.1;
 8002eb0:	edd7 7a00 	vldr	s15, [r7]
 8002eb4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002f2c <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8002eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec0:	d502      	bpl.n	8002ec8 <_ZN9LineTrace15radius2VelocityEf+0xe8>
 8002ec2:	4b1e      	ldr	r3, [pc, #120]	; (8002f3c <_ZN9LineTrace15radius2VelocityEf+0x15c>)
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	e01e      	b.n	8002f06 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8002ec8:	edd7 7a00 	vldr	s15, [r7]
 8002ecc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002f34 <_ZN9LineTrace15radius2VelocityEf+0x154>
 8002ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed8:	d502      	bpl.n	8002ee0 <_ZN9LineTrace15radius2VelocityEf+0x100>
 8002eda:	4b17      	ldr	r3, [pc, #92]	; (8002f38 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	e012      	b.n	8002f06 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2500) velocity = 3.0;
 8002ee0:	edd7 7a00 	vldr	s15, [r7]
 8002ee4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002f40 <_ZN9LineTrace15radius2VelocityEf+0x160>
 8002ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef0:	d502      	bpl.n	8002ef8 <_ZN9LineTrace15radius2VelocityEf+0x118>
 8002ef2:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <_ZN9LineTrace15radius2VelocityEf+0x164>)
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	e006      	b.n	8002f06 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity2_;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	e001      	b.n	8002f06 <_ZN9LineTrace15radius2VelocityEf+0x126>
	}
	else velocity = 1.3;
 8002f02:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <_ZN9LineTrace15radius2VelocityEf+0x168>)
 8002f04:	60fb      	str	r3, [r7, #12]

	return velocity;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	ee07 3a90 	vmov	s15, r3
}
 8002f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	43960000 	.word	0x43960000
 8002f20:	44480000 	.word	0x44480000
 8002f24:	3fd9999a 	.word	0x3fd9999a
 8002f28:	447a0000 	.word	0x447a0000
 8002f2c:	44bb8000 	.word	0x44bb8000
 8002f30:	40133333 	.word	0x40133333
 8002f34:	44fa0000 	.word	0x44fa0000
 8002f38:	40200000 	.word	0x40200000
 8002f3c:	40066666 	.word	0x40066666
 8002f40:	451c4000 	.word	0x451c4000
 8002f44:	40400000 	.word	0x40400000
 8002f48:	3fa66666 	.word	0x3fa66666

08002f4c <_ZN9LineTrace20createVelocityTabeleEv>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::createVelocityTabele()
{
 8002f4c:	b590      	push	{r4, r7, lr}
 8002f4e:	b08b      	sub	sp, #44	; 0x2c
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f001 fc82 	bl	8004862 <_ZN6Logger23getDistanceArrayPointerEv>
 8002f5e:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f001 fc88 	bl	800487a <_ZN6Logger20getThetaArrayPointerEv>
 8002f6a:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	837b      	strh	r3, [r7, #26]
 8002f70:	8b7b      	ldrh	r3, [r7, #26]
 8002f72:	f241 726f 	movw	r2, #5999	; 0x176f
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d84b      	bhi.n	8003012 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8002f7a:	8b7b      	ldrh	r3, [r7, #26]
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4413      	add	r3, r2
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002f86:	8b7b      	ldrh	r3, [r7, #26]
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002f92:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f9e:	d101      	bne.n	8002fa4 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8002fa0:	4b4c      	ldr	r3, [pc, #304]	; (80030d4 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 8002fa2:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002fa4:	ed97 7a02 	vldr	s14, [r7, #8]
 8002fa8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002fb0:	eeb0 0a66 	vmov.f32	s0, s13
 8002fb4:	f7ff fb70 	bl	8002698 <_ZSt3absf>
 8002fb8:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002fbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fc0:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80030d8 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8002fc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fcc:	db01      	blt.n	8002fd2 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8002fce:	4b43      	ldr	r3, [pc, #268]	; (80030dc <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 8002fd0:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8002fd2:	8b7c      	ldrh	r4, [r7, #26]
 8002fd4:	ed97 0a05 	vldr	s0, [r7, #20]
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff ff01 	bl	8002de0 <_ZN9LineTrace15radius2VelocityEf>
 8002fde:	eef0 7a40 	vmov.f32	s15, s0
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8002fe8:	3318      	adds	r3, #24
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8002ff2:	8b7b      	ldrh	r3, [r7, #26]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	441a      	add	r2, r3
 8002ffa:	8b7b      	ldrh	r3, [r7, #26]
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	3326      	adds	r3, #38	; 0x26
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	3304      	adds	r3, #4
 8003008:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800300a:	8b7b      	ldrh	r3, [r7, #26]
 800300c:	3301      	adds	r3, #1
 800300e:	837b      	strh	r3, [r7, #26]
 8003010:	e7ae      	b.n	8002f70 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003018:	3324      	adds	r3, #36	; 0x24
 800301a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d120      	bne.n	8003064 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800302e:	3360      	adds	r3, #96	; 0x60
 8003030:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003038:	3308      	adds	r3, #8
 800303a:	edd3 7a00 	vldr	s15, [r3]
 800303e:	6939      	ldr	r1, [r7, #16]
 8003040:	eeb0 0a67 	vmov.f32	s0, s15
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f93f 	bl	80032c8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003050:	3304      	adds	r3, #4
 8003052:	edd3 7a00 	vldr	s15, [r3]
 8003056:	6939      	ldr	r1, [r7, #16]
 8003058:	eeb0 0a67 	vmov.f32	s0, s15
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f9d7 	bl	8003410 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8003062:	e027      	b.n	80030b4 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800306a:	3324      	adds	r3, #36	; 0x24
 800306c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003070:	2b02      	cmp	r3, #2
 8003072:	d11f      	bne.n	80030b4 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003080:	3360      	adds	r3, #96	; 0x60
 8003082:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800308a:	3310      	adds	r3, #16
 800308c:	edd3 7a00 	vldr	s15, [r3]
 8003090:	6939      	ldr	r1, [r7, #16]
 8003092:	eeb0 0a67 	vmov.f32	s0, s15
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f916 	bl	80032c8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80030a2:	330c      	adds	r3, #12
 80030a4:	edd3 7a00 	vldr	s15, [r3]
 80030a8:	6939      	ldr	r1, [r7, #16]
 80030aa:	eeb0 0a67 	vmov.f32	s0, s15
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f9ae 	bl	8003410 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80030ba:	3360      	adds	r3, #96	; 0x60
 80030bc:	2200      	movs	r2, #0
 80030be:	9200      	str	r2, [sp, #0]
 80030c0:	f241 7270 	movw	r2, #6000	; 0x1770
 80030c4:	4906      	ldr	r1, [pc, #24]	; (80030e0 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 80030c6:	4807      	ldr	r0, [pc, #28]	; (80030e4 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 80030c8:	f7fe fa58 	bl	800157c <sd_write_array_float>

}
 80030cc:	bf00      	nop
 80030ce:	3724      	adds	r7, #36	; 0x24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd90      	pop	{r4, r7, pc}
 80030d4:	3727c5ac 	.word	0x3727c5ac
 80030d8:	459c4000 	.word	0x459c4000
 80030dc:	459c4000 	.word	0x459c4000
 80030e0:	0801a780 	.word	0x0801a780
 80030e4:	0801a790 	.word	0x0801a790

080030e8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

//float mon_crossdis;
void LineTrace::createVelocityTabeleFromSD()
{
 80030e8:	b590      	push	{r4, r7, lr}
 80030ea:	b08b      	sub	sp, #44	; 0x2c
 80030ec:	af02      	add	r7, sp, #8
 80030ee:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69d8      	ldr	r0, [r3, #28]
 80030f4:	4b6b      	ldr	r3, [pc, #428]	; (80032a4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 80030f6:	4a6c      	ldr	r2, [pc, #432]	; (80032a8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 80030f8:	496c      	ldr	r1, [pc, #432]	; (80032ac <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80030fa:	f001 fc36 	bl	800496a <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003104:	3328      	adds	r3, #40	; 0x28
 8003106:	2264      	movs	r2, #100	; 0x64
 8003108:	4969      	ldr	r1, [pc, #420]	; (80032b0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 800310a:	4868      	ldr	r0, [pc, #416]	; (80032ac <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800310c:	f7fe fa9c 	bl	8001648 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8003116:	33b8      	adds	r3, #184	; 0xb8
 8003118:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800311c:	4965      	ldr	r1, [pc, #404]	; (80032b4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 800311e:	4863      	ldr	r0, [pc, #396]	; (80032ac <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8003120:	f7fe fa92 	bl	8001648 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	4618      	mov	r0, r3
 800312a:	f001 fb9a 	bl	8004862 <_ZN6Logger23getDistanceArrayPointerEv>
 800312e:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	4618      	mov	r0, r3
 8003136:	f001 fba0 	bl	800487a <_ZN6Logger20getThetaArrayPointerEv>
 800313a:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800313c:	2300      	movs	r3, #0
 800313e:	837b      	strh	r3, [r7, #26]
 8003140:	8b7b      	ldrh	r3, [r7, #26]
 8003142:	f241 726f 	movw	r2, #5999	; 0x176f
 8003146:	4293      	cmp	r3, r2
 8003148:	d84b      	bhi.n	80031e2 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 800314a:	8b7b      	ldrh	r3, [r7, #26]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4413      	add	r3, r2
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8003156:	8b7b      	ldrh	r3, [r7, #26]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4413      	add	r3, r2
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8003162:	edd7 7a07 	vldr	s15, [r7, #28]
 8003166:	eef5 7a40 	vcmp.f32	s15, #0.0
 800316a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316e:	d101      	bne.n	8003174 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8003170:	4b51      	ldr	r3, [pc, #324]	; (80032b8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 8003172:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 8003174:	ed97 7a02 	vldr	s14, [r7, #8]
 8003178:	edd7 7a07 	vldr	s15, [r7, #28]
 800317c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003180:	eeb0 0a66 	vmov.f32	s0, s13
 8003184:	f7ff fa88 	bl	8002698 <_ZSt3absf>
 8003188:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 800318c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003190:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80032bc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 8003194:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319c:	db01      	blt.n	80031a2 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 800319e:	4b48      	ldr	r3, [pc, #288]	; (80032c0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 80031a0:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 80031a2:	8b7c      	ldrh	r4, [r7, #26]
 80031a4:	ed97 0a05 	vldr	s0, [r7, #20]
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff fe19 	bl	8002de0 <_ZN9LineTrace15radius2VelocityEf>
 80031ae:	eef0 7a40 	vmov.f32	s15, s0
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 80031b8:	3318      	adds	r3, #24
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 80031c2:	8b7b      	ldrh	r3, [r7, #26]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	441a      	add	r2, r3
 80031ca:	8b7b      	ldrh	r3, [r7, #26]
 80031cc:	6812      	ldr	r2, [r2, #0]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	3326      	adds	r3, #38	; 0x26
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	3304      	adds	r3, #4
 80031d8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80031da:	8b7b      	ldrh	r3, [r7, #26]
 80031dc:	3301      	adds	r3, #1
 80031de:	837b      	strh	r3, [r7, #26]
 80031e0:	e7ae      	b.n	8003140 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80031e8:	3324      	adds	r3, #36	; 0x24
 80031ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d120      	bne.n	8003234 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80031fe:	3360      	adds	r3, #96	; 0x60
 8003200:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003208:	3308      	adds	r3, #8
 800320a:	edd3 7a00 	vldr	s15, [r3]
 800320e:	6939      	ldr	r1, [r7, #16]
 8003210:	eeb0 0a67 	vmov.f32	s0, s15
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f857 	bl	80032c8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003220:	3304      	adds	r3, #4
 8003222:	edd3 7a00 	vldr	s15, [r3]
 8003226:	6939      	ldr	r1, [r7, #16]
 8003228:	eeb0 0a67 	vmov.f32	s0, s15
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f8ef 	bl	8003410 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8003232:	e027      	b.n	8003284 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800323a:	3324      	adds	r3, #36	; 0x24
 800323c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d11f      	bne.n	8003284 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003250:	3360      	adds	r3, #96	; 0x60
 8003252:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800325a:	3310      	adds	r3, #16
 800325c:	edd3 7a00 	vldr	s15, [r3]
 8003260:	6939      	ldr	r1, [r7, #16]
 8003262:	eeb0 0a67 	vmov.f32	s0, s15
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f82e 	bl	80032c8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003272:	330c      	adds	r3, #12
 8003274:	edd3 7a00 	vldr	s15, [r3]
 8003278:	6939      	ldr	r1, [r7, #16]
 800327a:	eeb0 0a67 	vmov.f32	s0, s15
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f8c6 	bl	8003410 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800328a:	3360      	adds	r3, #96	; 0x60
 800328c:	2200      	movs	r2, #0
 800328e:	9200      	str	r2, [sp, #0]
 8003290:	f241 7270 	movw	r2, #6000	; 0x1770
 8003294:	490b      	ldr	r1, [pc, #44]	; (80032c4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 8003296:	4805      	ldr	r0, [pc, #20]	; (80032ac <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8003298:	f7fe f970 	bl	800157c <sd_write_array_float>

}
 800329c:	bf00      	nop
 800329e:	3724      	adds	r7, #36	; 0x24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd90      	pop	{r4, r7, pc}
 80032a4:	0801a79c 	.word	0x0801a79c
 80032a8:	0801a7a8 	.word	0x0801a7a8
 80032ac:	0801a790 	.word	0x0801a790
 80032b0:	0801a7b8 	.word	0x0801a7b8
 80032b4:	0801a7c8 	.word	0x0801a7c8
 80032b8:	3727c5ac 	.word	0x3727c5ac
 80032bc:	459c4000 	.word	0x459c4000
 80032c0:	459c4000 	.word	0x459c4000
 80032c4:	0801a780 	.word	0x0801a780

080032c8 <_ZN9LineTrace20decelerateProcessingEfPKf>:

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 80032c8:	b5b0      	push	{r4, r5, r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80032d4:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80032d6:	f241 736f 	movw	r3, #5999	; 0x176f
 80032da:	83fb      	strh	r3, [r7, #30]
 80032dc:	8bfb      	ldrh	r3, [r7, #30]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 808b 	beq.w	80033fa <_ZN9LineTrace20decelerateProcessingEfPKf+0x132>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 80032e4:	8bfb      	ldrh	r3, [r7, #30]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80032ee:	3318      	adds	r3, #24
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	ed93 7a00 	vldr	s14, [r3]
 80032f8:	8bfb      	ldrh	r3, [r7, #30]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003300:	3318      	adds	r3, #24
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	edd3 7a00 	vldr	s15, [r3]
 800330a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800330e:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003312:	edd7 7a06 	vldr	s15, [r7, #24]
 8003316:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800331a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331e:	dd68      	ble.n	80033f2 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12a>
			float t = p_distance[i]*1e-3 / v_diff;
 8003320:	8bfb      	ldrh	r3, [r7, #30]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	4413      	add	r3, r2
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7fd f924 	bl	8000578 <__aeabi_f2d>
 8003330:	a335      	add	r3, pc, #212	; (adr r3, 8003408 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003336:	f7fd f977 	bl	8000628 <__aeabi_dmul>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4614      	mov	r4, r2
 8003340:	461d      	mov	r5, r3
 8003342:	69b8      	ldr	r0, [r7, #24]
 8003344:	f7fd f918 	bl	8000578 <__aeabi_f2d>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4620      	mov	r0, r4
 800334e:	4629      	mov	r1, r5
 8003350:	f7fd fa94 	bl	800087c <__aeabi_ddiv>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4610      	mov	r0, r2
 800335a:	4619      	mov	r1, r3
 800335c:	f7fd fc5c 	bl	8000c18 <__aeabi_d2f>
 8003360:	4603      	mov	r3, r0
 8003362:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003364:	edd7 6a06 	vldr	s13, [r7, #24]
 8003368:	ed97 7a05 	vldr	s14, [r7, #20]
 800336c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003370:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003374:	ed97 7a04 	vldr	s14, [r7, #16]
 8003378:	edd7 7a02 	vldr	s15, [r7, #8]
 800337c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003384:	dd35      	ble.n	80033f2 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12a>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003386:	8bfb      	ldrh	r3, [r7, #30]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800338e:	3318      	adds	r3, #24
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7fd f8ee 	bl	8000578 <__aeabi_f2d>
 800339c:	4604      	mov	r4, r0
 800339e:	460d      	mov	r5, r1
 80033a0:	8bfb      	ldrh	r3, [r7, #30]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	4413      	add	r3, r2
 80033a8:	ed93 7a00 	vldr	s14, [r3]
 80033ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80033b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b4:	ee17 0a90 	vmov	r0, s15
 80033b8:	f7fd f8de 	bl	8000578 <__aeabi_f2d>
 80033bc:	a312      	add	r3, pc, #72	; (adr r3, 8003408 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80033be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c2:	f7fd f931 	bl	8000628 <__aeabi_dmul>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4620      	mov	r0, r4
 80033cc:	4629      	mov	r1, r5
 80033ce:	f7fc ff75 	bl	80002bc <__adddf3>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	4610      	mov	r0, r2
 80033d8:	4619      	mov	r1, r3
 80033da:	8bfb      	ldrh	r3, [r7, #30]
 80033dc:	1e5c      	subs	r4, r3, #1
 80033de:	f7fd fc1b 	bl	8000c18 <__aeabi_d2f>
 80033e2:	4601      	mov	r1, r0
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 80033ea:	3318      	adds	r3, #24
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80033f2:	8bfb      	ldrh	r3, [r7, #30]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	83fb      	strh	r3, [r7, #30]
 80033f8:	e770      	b.n	80032dc <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 80033fa:	bf00      	nop
 80033fc:	3720      	adds	r7, #32
 80033fe:	46bd      	mov	sp, r7
 8003400:	bdb0      	pop	{r4, r5, r7, pc}
 8003402:	bf00      	nop
 8003404:	f3af 8000 	nop.w
 8003408:	d2f1a9fc 	.word	0xd2f1a9fc
 800340c:	3f50624d 	.word	0x3f50624d

08003410 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003410:	b5b0      	push	{r4, r5, r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	ed87 0a02 	vstr	s0, [r7, #8]
 800341c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800341e:	2300      	movs	r3, #0
 8003420:	83fb      	strh	r3, [r7, #30]
 8003422:	8bfb      	ldrh	r3, [r7, #30]
 8003424:	f241 726f 	movw	r2, #5999	; 0x176f
 8003428:	4293      	cmp	r3, r2
 800342a:	f200 808b 	bhi.w	8003544 <_ZN9LineTrace20accelerateProcessingEfPKf+0x134>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 800342e:	8bfb      	ldrh	r3, [r7, #30]
 8003430:	3301      	adds	r3, #1
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003438:	3318      	adds	r3, #24
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	ed93 7a00 	vldr	s14, [r3]
 8003442:	8bfb      	ldrh	r3, [r7, #30]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800344a:	3318      	adds	r3, #24
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	edd3 7a00 	vldr	s15, [r3]
 8003454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003458:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800345c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003460:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003468:	dd68      	ble.n	800353c <_ZN9LineTrace20accelerateProcessingEfPKf+0x12c>
			float t = p_distance[i]*1e-3 / v_diff;
 800346a:	8bfb      	ldrh	r3, [r7, #30]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	4413      	add	r3, r2
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7fd f87f 	bl	8000578 <__aeabi_f2d>
 800347a:	a335      	add	r3, pc, #212	; (adr r3, 8003550 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 800347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003480:	f7fd f8d2 	bl	8000628 <__aeabi_dmul>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4614      	mov	r4, r2
 800348a:	461d      	mov	r5, r3
 800348c:	69b8      	ldr	r0, [r7, #24]
 800348e:	f7fd f873 	bl	8000578 <__aeabi_f2d>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4620      	mov	r0, r4
 8003498:	4629      	mov	r1, r5
 800349a:	f7fd f9ef 	bl	800087c <__aeabi_ddiv>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4610      	mov	r0, r2
 80034a4:	4619      	mov	r1, r3
 80034a6:	f7fd fbb7 	bl	8000c18 <__aeabi_d2f>
 80034aa:	4603      	mov	r3, r0
 80034ac:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80034ae:	edd7 6a06 	vldr	s13, [r7, #24]
 80034b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80034b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034ba:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80034be:	ed97 7a04 	vldr	s14, [r7, #16]
 80034c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80034c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ce:	dd35      	ble.n	800353c <_ZN9LineTrace20accelerateProcessingEfPKf+0x12c>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80034d0:	8bfb      	ldrh	r3, [r7, #30]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80034d8:	3318      	adds	r3, #24
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fd f849 	bl	8000578 <__aeabi_f2d>
 80034e6:	4604      	mov	r4, r0
 80034e8:	460d      	mov	r5, r1
 80034ea:	8bfb      	ldrh	r3, [r7, #30]
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	ed93 7a00 	vldr	s14, [r3]
 80034f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80034fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034fe:	ee17 0a90 	vmov	r0, s15
 8003502:	f7fd f839 	bl	8000578 <__aeabi_f2d>
 8003506:	a312      	add	r3, pc, #72	; (adr r3, 8003550 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350c:	f7fd f88c 	bl	8000628 <__aeabi_dmul>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4620      	mov	r0, r4
 8003516:	4629      	mov	r1, r5
 8003518:	f7fc fed0 	bl	80002bc <__adddf3>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4610      	mov	r0, r2
 8003522:	4619      	mov	r1, r3
 8003524:	8bfb      	ldrh	r3, [r7, #30]
 8003526:	1c5c      	adds	r4, r3, #1
 8003528:	f7fd fb76 	bl	8000c18 <__aeabi_d2f>
 800352c:	4601      	mov	r1, r0
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8003534:	3318      	adds	r3, #24
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800353c:	8bfb      	ldrh	r3, [r7, #30]
 800353e:	3301      	adds	r3, #1
 8003540:	83fb      	strh	r3, [r7, #30]
 8003542:	e76e      	b.n	8003422 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003544:	bf00      	nop
 8003546:	3720      	adds	r7, #32
 8003548:	46bd      	mov	sp, r7
 800354a:	bdb0      	pop	{r4, r5, r7, pc}
 800354c:	f3af 8000 	nop.w
 8003550:	d2f1a9fc 	.word	0xd2f1a9fc
 8003554:	3f50624d 	.word	0x3f50624d

08003558 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()

{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003566:	3320      	adds	r3, #32
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b01      	cmp	r3, #1
 800356c:	f040 8086 	bne.w	800367c <_ZN9LineTrace20updateTargetVelocityEv+0x124>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	4618      	mov	r0, r3
 8003576:	f7fd ffa9 	bl	80014cc <_ZN7Encoder16getTotalDistanceEv>
 800357a:	eeb0 7a40 	vmov.f32	s14, s0
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003584:	335c      	adds	r3, #92	; 0x5c
 8003586:	edd3 7a00 	vldr	s15, [r3]
 800358a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800358e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003592:	bfac      	ite	ge
 8003594:	2301      	movge	r3, #1
 8003596:	2300      	movlt	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d026      	beq.n	80035ec <_ZN9LineTrace20updateTargetVelocityEv+0x94>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80035a4:	335c      	adds	r3, #92	; 0x5c
 80035a6:	ed93 7a00 	vldr	s14, [r3]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035b0:	3322      	adds	r3, #34	; 0x22
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	3326      	adds	r3, #38	; 0x26
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	3304      	adds	r3, #4
 80035be:	edd3 7a00 	vldr	s15, [r3]
 80035c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80035cc:	335c      	adds	r3, #92	; 0x5c
 80035ce:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035d8:	3322      	adds	r3, #34	; 0x22
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	3301      	adds	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035e6:	3322      	adds	r3, #34	; 0x22
 80035e8:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 80035ea:	e7c1      	b.n	8003570 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035f2:	3322      	adds	r3, #34	; 0x22
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	f241 726f 	movw	r2, #5999	; 0x176f
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d906      	bls.n	800360c <_ZN9LineTrace20updateTargetVelocityEv+0xb4>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003604:	3322      	adds	r3, #34	; 0x22
 8003606:	f241 726f 	movw	r2, #5999	; 0x176f
 800360a:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003612:	335c      	adds	r3, #92	; 0x5c
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a1b      	ldr	r2, [pc, #108]	; (8003684 <_ZN9LineTrace20updateTargetVelocityEv+0x12c>)
 8003618:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	4618      	mov	r0, r3
 8003620:	f7fd ff54 	bl	80014cc <_ZN7Encoder16getTotalDistanceEv>
 8003624:	eef0 7a40 	vmov.f32	s15, s0
 8003628:	4b17      	ldr	r3, [pc, #92]	; (8003688 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 800362a:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003634:	3322      	adds	r3, #34	; 0x22
 8003636:	881a      	ldrh	r2, [r3, #0]
 8003638:	4b14      	ldr	r3, [pc, #80]	; (800368c <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 800363a:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003642:	3322      	adds	r3, #34	; 0x22
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800364c:	3318      	adds	r3, #24
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	edd3 7a00 	vldr	s15, [r3]
 8003656:	eeb0 0a67 	vmov.f32	s0, s15
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fa04 	bl	8003a68 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003666:	3322      	adds	r3, #34	; 0x22
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003670:	3318      	adds	r3, #24
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a05      	ldr	r2, [pc, #20]	; (8003690 <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 800367a:	6013      	str	r3, [r2, #0]

	}
}
 800367c:	bf00      	nop
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20000270 	.word	0x20000270
 8003688:	20000274 	.word	0x20000274
 800368c:	20000278 	.word	0x20000278
 8003690:	2000027c 	.word	0x2000027c

08003694 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800369c:	2300      	movs	r3, #0
 800369e:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fd ff02 	bl	80014ae <_ZN7Encoder15getDistance10mmEv>
 80036aa:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f001 fc2b 	bl	8004f0e <_ZN8Odometry8getThetaEv>
 80036b8:	ec53 2b10 	vmov	r2, r3, d0
 80036bc:	4610      	mov	r0, r2
 80036be:	4619      	mov	r1, r3
 80036c0:	f7fd faaa 	bl	8000c18 <__aeabi_d2f>
 80036c4:	4603      	mov	r3, r0
 80036c6:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 80036c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80036cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80036d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d4:	d101      	bne.n	80036da <_ZN9LineTrace8isStableEv+0x46>
 80036d6:	4b22      	ldr	r3, [pc, #136]	; (8003760 <_ZN9LineTrace8isStableEv+0xcc>)
 80036d8:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 80036da:	ed97 7a02 	vldr	s14, [r7, #8]
 80036de:	edd7 7a04 	vldr	s15, [r7, #16]
 80036e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80036e6:	eeb0 0a66 	vmov.f32	s0, s13
 80036ea:	f7fe ffd5 	bl	8002698 <_ZSt3absf>
 80036ee:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 80036f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80036f6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003764 <_ZN9LineTrace8isStableEv+0xd0>
 80036fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003702:	db01      	blt.n	8003708 <_ZN9LineTrace8isStableEv+0x74>
 8003704:	4b18      	ldr	r3, [pc, #96]	; (8003768 <_ZN9LineTrace8isStableEv+0xd4>)
 8003706:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d107      	bne.n	8003724 <_ZN9LineTrace8isStableEv+0x90>
		stable_cnt = 0;
 8003714:	4b15      	ldr	r3, [pc, #84]	; (800376c <_ZN9LineTrace8isStableEv+0xd8>)
 8003716:	2200      	movs	r2, #0
 8003718:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){ //150
 8003724:	edd7 7a03 	vldr	s15, [r7, #12]
 8003728:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003770 <_ZN9LineTrace8isStableEv+0xdc>
 800372c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003734:	db06      	blt.n	8003744 <_ZN9LineTrace8isStableEv+0xb0>
		stable_cnt++;
 8003736:	4b0d      	ldr	r3, [pc, #52]	; (800376c <_ZN9LineTrace8isStableEv+0xd8>)
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	3301      	adds	r3, #1
 800373c:	b29a      	uxth	r2, r3
 800373e:	4b0b      	ldr	r3, [pc, #44]	; (800376c <_ZN9LineTrace8isStableEv+0xd8>)
 8003740:	801a      	strh	r2, [r3, #0]
 8003742:	e002      	b.n	800374a <_ZN9LineTrace8isStableEv+0xb6>
	}
	else{
		stable_cnt = 0;
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <_ZN9LineTrace8isStableEv+0xd8>)
 8003746:	2200      	movs	r2, #0
 8003748:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 800374a:	4b08      	ldr	r3, [pc, #32]	; (800376c <_ZN9LineTrace8isStableEv+0xd8>)
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	2b16      	cmp	r3, #22
 8003750:	d901      	bls.n	8003756 <_ZN9LineTrace8isStableEv+0xc2>
		ret = true;
 8003752:	2301      	movs	r3, #1
 8003754:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003756:	7dfb      	ldrb	r3, [r7, #23]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	3727c5ac 	.word	0x3727c5ac
 8003764:	459c4000 	.word	0x459c4000
 8003768:	459c4000 	.word	0x459c4000
 800376c:	20000290 	.word	0x20000290
 8003770:	44fa0000 	.word	0x44fa0000

08003774 <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b092      	sub	sp, #72	; 0x48
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 800377c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003780:	2201      	movs	r2, #1
 8003782:	4963      	ldr	r1, [pc, #396]	; (8003910 <_ZN9LineTrace4initEv+0x19c>)
 8003784:	4863      	ldr	r0, [pc, #396]	; (8003914 <_ZN9LineTrace4initEv+0x1a0>)
 8003786:	f7fd ff5f 	bl	8001648 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 800378a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800378e:	2201      	movs	r2, #1
 8003790:	4961      	ldr	r1, [pc, #388]	; (8003918 <_ZN9LineTrace4initEv+0x1a4>)
 8003792:	4860      	ldr	r0, [pc, #384]	; (8003914 <_ZN9LineTrace4initEv+0x1a0>)
 8003794:	f7fd ff58 	bl	8001648 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003798:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800379c:	2201      	movs	r2, #1
 800379e:	495f      	ldr	r1, [pc, #380]	; (800391c <_ZN9LineTrace4initEv+0x1a8>)
 80037a0:	485c      	ldr	r0, [pc, #368]	; (8003914 <_ZN9LineTrace4initEv+0x1a0>)
 80037a2:	f7fd ff51 	bl	8001648 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 80037a6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80037aa:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80037ae:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80037b2:	eeb0 1a66 	vmov.f32	s2, s13
 80037b6:	eef0 0a47 	vmov.f32	s1, s14
 80037ba:	eeb0 0a67 	vmov.f32	s0, s15
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f8c6 	bl	8003950 <_ZN9LineTrace7setGainEfff>

	float temp_kp_fast, temp_ki_fast, temp_kd_fast;
	sd_read_array_float("PARAMS", "KPFAST.TXT", 1, &temp_kp_fast);
 80037c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80037c8:	2201      	movs	r2, #1
 80037ca:	4955      	ldr	r1, [pc, #340]	; (8003920 <_ZN9LineTrace4initEv+0x1ac>)
 80037cc:	4851      	ldr	r0, [pc, #324]	; (8003914 <_ZN9LineTrace4initEv+0x1a0>)
 80037ce:	f7fd ff3b 	bl	8001648 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KIFAST.TXT", 1, &temp_ki_fast);
 80037d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037d6:	2201      	movs	r2, #1
 80037d8:	4952      	ldr	r1, [pc, #328]	; (8003924 <_ZN9LineTrace4initEv+0x1b0>)
 80037da:	484e      	ldr	r0, [pc, #312]	; (8003914 <_ZN9LineTrace4initEv+0x1a0>)
 80037dc:	f7fd ff34 	bl	8001648 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KDFAST.TXT", 1, &temp_kd_fast);
 80037e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037e4:	2201      	movs	r2, #1
 80037e6:	4950      	ldr	r1, [pc, #320]	; (8003928 <_ZN9LineTrace4initEv+0x1b4>)
 80037e8:	484a      	ldr	r0, [pc, #296]	; (8003914 <_ZN9LineTrace4initEv+0x1a0>)
 80037ea:	f7fd ff2d 	bl	8001648 <sd_read_array_float>
	setGainFast(temp_kp_fast, temp_ki_fast, temp_kd_fast);
 80037ee:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80037f2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80037f6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80037fa:	eeb0 1a66 	vmov.f32	s2, s13
 80037fe:	eef0 0a47 	vmov.f32	s1, s14
 8003802:	eeb0 0a67 	vmov.f32	s0, s15
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f8bb 	bl	8003982 <_ZN9LineTrace11setGainFastEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 800380c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003810:	2201      	movs	r2, #1
 8003812:	4946      	ldr	r1, [pc, #280]	; (800392c <_ZN9LineTrace4initEv+0x1b8>)
 8003814:	483f      	ldr	r0, [pc, #252]	; (8003914 <_ZN9LineTrace4initEv+0x1a0>)
 8003816:	f7fd ff17 	bl	8001648 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 800381a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800381e:	2201      	movs	r2, #1
 8003820:	4943      	ldr	r1, [pc, #268]	; (8003930 <_ZN9LineTrace4initEv+0x1bc>)
 8003822:	483c      	ldr	r0, [pc, #240]	; (8003914 <_ZN9LineTrace4initEv+0x1a0>)
 8003824:	f7fd ff10 	bl	8001648 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800382c:	2201      	movs	r2, #1
 800382e:	4941      	ldr	r1, [pc, #260]	; (8003934 <_ZN9LineTrace4initEv+0x1c0>)
 8003830:	4838      	ldr	r0, [pc, #224]	; (8003914 <_ZN9LineTrace4initEv+0x1a0>)
 8003832:	f7fd ff09 	bl	8001648 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003836:	f107 0320 	add.w	r3, r7, #32
 800383a:	2201      	movs	r2, #1
 800383c:	493e      	ldr	r1, [pc, #248]	; (8003938 <_ZN9LineTrace4initEv+0x1c4>)
 800383e:	4835      	ldr	r0, [pc, #212]	; (8003914 <_ZN9LineTrace4initEv+0x1a0>)
 8003840:	f7fd ff02 	bl	8001648 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003844:	f107 031c 	add.w	r3, r7, #28
 8003848:	2201      	movs	r2, #1
 800384a:	493c      	ldr	r1, [pc, #240]	; (800393c <_ZN9LineTrace4initEv+0x1c8>)
 800384c:	4831      	ldr	r0, [pc, #196]	; (8003914 <_ZN9LineTrace4initEv+0x1a0>)
 800384e:	f7fd fefb 	bl	8001648 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003852:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003856:	eeb0 0a67 	vmov.f32	s0, s15
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f904 	bl	8003a68 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003860:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003864:	eeb0 0a67 	vmov.f32	s0, s15
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f90d 	bl	8003a88 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 800386e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003872:	eeb0 0a67 	vmov.f32	s0, s15
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f916 	bl	8003aa8 <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 800387c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003880:	eeb0 0a67 	vmov.f32	s0, s15
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f91f 	bl	8003ac8 <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 800388a:	edd7 7a07 	vldr	s15, [r7, #28]
 800388e:	eeb0 0a67 	vmov.f32	s0, s15
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f928 	bl	8003ae8 <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003898:	f107 0318 	add.w	r3, r7, #24
 800389c:	2201      	movs	r2, #1
 800389e:	4928      	ldr	r1, [pc, #160]	; (8003940 <_ZN9LineTrace4initEv+0x1cc>)
 80038a0:	481c      	ldr	r0, [pc, #112]	; (8003914 <_ZN9LineTrace4initEv+0x1a0>)
 80038a2:	f7fd fed1 	bl	8001648 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 80038a6:	f107 0314 	add.w	r3, r7, #20
 80038aa:	2201      	movs	r2, #1
 80038ac:	4925      	ldr	r1, [pc, #148]	; (8003944 <_ZN9LineTrace4initEv+0x1d0>)
 80038ae:	4819      	ldr	r0, [pc, #100]	; (8003914 <_ZN9LineTrace4initEv+0x1a0>)
 80038b0:	f7fd feca 	bl	8001648 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 80038b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80038b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80038bc:	eef0 0a47 	vmov.f32	s1, s14
 80038c0:	eeb0 0a67 	vmov.f32	s0, s15
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f96f 	bl	8003ba8 <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 80038d6:	f107 0310 	add.w	r3, r7, #16
 80038da:	2201      	movs	r2, #1
 80038dc:	491a      	ldr	r1, [pc, #104]	; (8003948 <_ZN9LineTrace4initEv+0x1d4>)
 80038de:	480d      	ldr	r0, [pc, #52]	; (8003914 <_ZN9LineTrace4initEv+0x1a0>)
 80038e0:	f7fd feb2 	bl	8001648 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 80038e4:	f107 030c 	add.w	r3, r7, #12
 80038e8:	2201      	movs	r2, #1
 80038ea:	4918      	ldr	r1, [pc, #96]	; (800394c <_ZN9LineTrace4initEv+0x1d8>)
 80038ec:	4809      	ldr	r0, [pc, #36]	; (8003914 <_ZN9LineTrace4initEv+0x1a0>)
 80038ee:	f7fd feab 	bl	8001648 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 80038f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80038f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80038fa:	eef0 0a47 	vmov.f32	s1, s14
 80038fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f96a 	bl	8003bdc <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003908:	bf00      	nop
 800390a:	3748      	adds	r7, #72	; 0x48
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	0801a7d4 	.word	0x0801a7d4
 8003914:	0801a7dc 	.word	0x0801a7dc
 8003918:	0801a7e4 	.word	0x0801a7e4
 800391c:	0801a7ec 	.word	0x0801a7ec
 8003920:	0801a7f4 	.word	0x0801a7f4
 8003924:	0801a800 	.word	0x0801a800
 8003928:	0801a80c 	.word	0x0801a80c
 800392c:	0801a818 	.word	0x0801a818
 8003930:	0801a824 	.word	0x0801a824
 8003934:	0801a830 	.word	0x0801a830
 8003938:	0801a83c 	.word	0x0801a83c
 800393c:	0801a848 	.word	0x0801a848
 8003940:	0801a854 	.word	0x0801a854
 8003944:	0801a85c 	.word	0x0801a85c
 8003948:	0801a864 	.word	0x0801a864
 800394c:	0801a870 	.word	0x0801a870

08003950 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	ed87 0a02 	vstr	s0, [r7, #8]
 800395c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003960:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	625a      	str	r2, [r3, #36]	; 0x24
	ki_ = ki;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	62da      	str	r2, [r3, #44]	; 0x2c
	kd_ = kd;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003976:	bf00      	nop
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <_ZN9LineTrace11setGainFastEfff>:

void LineTrace::setGainFast(float kp, float ki, float kd)
{
 8003982:	b480      	push	{r7}
 8003984:	b085      	sub	sp, #20
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	ed87 0a02 	vstr	s0, [r7, #8]
 800398e:	edc7 0a01 	vstr	s1, [r7, #4]
 8003992:	ed87 1a00 	vstr	s2, [r7]
	kp_fast_ = kp;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
	ki_fast_ = ki;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	639a      	str	r2, [r3, #56]	; 0x38
	kd_fast_ = kd;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80039a8:	bf00      	nop
 80039aa:	3714      	adds	r7, #20
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
	return kp_;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	ee07 3a90 	vmov	s15, r3
}
 80039c4:	eeb0 0a67 	vmov.f32	s0, s15
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
	return ki_;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	ee07 3a90 	vmov	s15, r3
}
 80039e2:	eeb0 0a67 	vmov.f32	s0, s15
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
	return kd_;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fc:	ee07 3a90 	vmov	s15, r3
}
 8003a00:	eeb0 0a67 	vmov.f32	s0, s15
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <_ZN9LineTrace9getKpFastEv>:

float LineTrace::getKpFast()
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
	return kp_fast_;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	ee07 3a90 	vmov	s15, r3
}
 8003a1e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <_ZN9LineTrace9getKiFastEv>:

float LineTrace::getKiFast()
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
	return ki_fast_;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a38:	ee07 3a90 	vmov	s15, r3
}
 8003a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <_ZN9LineTrace9getKdFastEv>:

float LineTrace::getKdFast()
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
	return kd_fast_;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a56:	ee07 3a90 	vmov	s15, r3
}
 8003a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <_ZN9LineTrace17setTargetVelocityEf>:
{
	normal_ratio_ = ratio;
}

void LineTrace::setTargetVelocity(float velocity)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <_ZN9LineTrace17getTargetVelocityEv>:
float LineTrace::getTargetVelocity()
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b16:	ee07 3a90 	vmov	s15, r3
}
 8003b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b36:	ee07 3a90 	vmov	s15, r3
}
 8003b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b56:	ee07 3a90 	vmov	s15, r3
}
 8003b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b76:	ee07 3a90 	vmov	s15, r3
}
 8003b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b96:	ee07 3a90 	vmov	s15, r3
}
 8003b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <_ZN9LineTrace12setMaxAccDecEff>:
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003bb4:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003bca:	3308      	adds	r3, #8
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	601a      	str	r2, [r3, #0]
}
 8003bd0:	bf00      	nop
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <_ZN9LineTrace13setMaxAccDec2Eff>:
void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	ed87 0a02 	vstr	s0, [r7, #8]
 8003be8:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003bf2:	330c      	adds	r3, #12
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003bfe:	3310      	adds	r3, #16
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	601a      	str	r2, [r3, #0]
}
 8003c04:	bf00      	nop
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003c1e:	3304      	adds	r3, #4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	ee07 3a90 	vmov	s15, r3
}
 8003c26:	eeb0 0a67 	vmov.f32	s0, s15
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003c42:	3310      	adds	r3, #16
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	ee07 3a90 	vmov	s15, r3
}
 8003c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <_ZN9LineTrace10getMaxAcc2Ev>:
float LineTrace::getMaxAcc2()
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003c66:	330c      	adds	r3, #12
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	ee07 3a90 	vmov	s15, r3
}
 8003c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003c8a:	3308      	adds	r3, #8
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	ee07 3a90 	vmov	s15, r3
}
 8003c92:	eeb0 0a67 	vmov.f32	s0, s15
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <_ZN9LineTrace4flipEv>:
void LineTrace::flip()
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	f040 814e 	bne.w	8003f50 <_ZN9LineTrace4flipEv+0x2b0>
		// ---- line following processing -----//
		pidTrace();
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7fe fec7 	bl	8002a48 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();


		if(isTargetDistance(10) == true){
 8003cba:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fb00 	bl	80042c4 <_ZN9LineTrace16isTargetDistanceEf>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	bf0c      	ite	eq
 8003cca:	2301      	moveq	r3, #1
 8003ccc:	2300      	movne	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d028      	beq.n	8003d26 <_ZN9LineTrace4flipEv+0x86>
			// ---- Store Logs ------//
			storeLogs();
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 fa59 	bl	800418c <_ZN9LineTrace9storeLogsEv>

			// -------- Detect Robot stabilization ------//
#ifdef REVERSE
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x01) == 0x01){ // Stabilizing and side sensor is black
#else
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){ // Stabilizing and side sensor is black
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff fcda 	bl	8003694 <_ZN9LineTrace8isStableEv>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d10c      	bne.n	8003d00 <_ZN9LineTrace4flipEv+0x60>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f001 fbac 	bl	8005448 <_ZN10SideSensor9getStatusEv>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d101      	bne.n	8003d00 <_ZN9LineTrace4flipEv+0x60>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <_ZN9LineTrace4flipEv+0x62>
 8003d00:	2300      	movs	r3, #0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d005      	beq.n	8003d12 <_ZN9LineTrace4flipEv+0x72>
#endif
				stable_flag_ = true;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003d0c:	33ff      	adds	r3, #255	; 0xff
 8003d0e:	2201      	movs	r2, #1
 8003d10:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fd fbf6 	bl	8001508 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f001 f906 	bl	8004f32 <_ZN8Odometry13clearPotitionEv>
		}

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7ff fc16 	bl	8003558 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7fe ff9b 	bl	8002c68 <_ZN9LineTrace11isCrossLineEv>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	bf0c      	ite	eq
 8003d38:	2301      	moveq	r3, #1
 8003d3a:	2300      	movne	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d009      	beq.n	8003d56 <_ZN9LineTrace4flipEv+0xb6>
			side_sensor_->enableIgnore();
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f001 fba6 	bl	8005498 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fd fc04 	bl	800155e <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f001 fbb6 	bl	80054cc <_ZN10SideSensor13getIgnoreFlagEv>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d10f      	bne.n	8003d86 <_ZN9LineTrace4flipEv+0xe6>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fd fbe8 	bl	8001540 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003d70:	eef0 7a40 	vmov.f32	s15, s0
 8003d74:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8003f58 <_ZN9LineTrace4flipEv+0x2b8>
 8003d78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d80:	db01      	blt.n	8003d86 <_ZN9LineTrace4flipEv+0xe6>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <_ZN9LineTrace4flipEv+0xe8>
 8003d86:	2300      	movs	r3, #0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d004      	beq.n	8003d96 <_ZN9LineTrace4flipEv+0xf6>
			side_sensor_->disableIgnore();
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f001 fb8e 	bl	80054b2 <_ZN10SideSensor13disableIgnoreEv>

		// ------- Store side line distance ------//
#ifdef REVERSE
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x01) == 0x01){ //stabilizing and side sensor is white
#else
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x02) == 0x02){ //stabilizing and side sensor is white
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003d9c:	33ff      	adds	r3, #255	; 0xff
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d10b      	bne.n	8003dbc <_ZN9LineTrace4flipEv+0x11c>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f001 fb4d 	bl	8005448 <_ZN10SideSensor9getStatusEv>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d101      	bne.n	8003dbc <_ZN9LineTrace4flipEv+0x11c>
 8003db8:	2301      	movs	r3, #1
 8003dba:	e000      	b.n	8003dbe <_ZN9LineTrace4flipEv+0x11e>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d01f      	beq.n	8003e02 <_ZN9LineTrace4flipEv+0x162>
#endif
			//storeSideLineDistance();
			if(mode_selector_ == FIRST_RUNNING){
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003dc8:	3324      	adds	r3, #36	; 0x24
 8003dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d103      	bne.n	8003dda <_ZN9LineTrace4flipEv+0x13a>
				storeSideLineDistance();
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 face 	bl	8004374 <_ZN9LineTrace21storeSideLineDistanceEv>
 8003dd8:	e008      	b.n	8003dec <_ZN9LineTrace4flipEv+0x14c>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fb70 	bl	80044c0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				correction_check_cnt_ = 0;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003de6:	3314      	adds	r3, #20
 8003de8:	2200      	movs	r2, #0
 8003dea:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003df2:	33ff      	adds	r3, #255	; 0xff
 8003df4:	2200      	movs	r2, #0
 8003df6:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003dfe:	2201      	movs	r2, #1
 8003e00:	701a      	strb	r2, [r3, #0]
		}

		if(stable_flag_ == true) led_.LR(-1, 1);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003e08:	33ff      	adds	r3, #255	; 0xff
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d108      	bne.n	8003e22 <_ZN9LineTrace4flipEv+0x182>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	330c      	adds	r3, #12
 8003e14:	2201      	movs	r2, #1
 8003e16:	f04f 31ff 	mov.w	r1, #4294967295
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fe f8ea 	bl	8001ff4 <_ZN3LED2LREaa>
 8003e20:	e007      	b.n	8003e32 <_ZN9LineTrace4flipEv+0x192>
		else led_.LR(-1, 0);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	330c      	adds	r3, #12
 8003e26:	2200      	movs	r2, #0
 8003e28:	f04f 31ff 	mov.w	r1, #4294967295
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fe f8e1 	bl	8001ff4 <_ZN3LED2LREaa>

		// ------ All sideline storing -------//
#ifdef REVERSE
		if(all_sideline_flag_ == false && (side_sensor_->getStatus() & 0x01) == 0x01){
#else
		if(all_sideline_flag_ == false && (side_sensor_->getStatus() & 0x02) == 0x02){
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e38:	3316      	adds	r3, #22
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10b      	bne.n	8003e58 <_ZN9LineTrace4flipEv+0x1b8>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f001 faff 	bl	8005448 <_ZN10SideSensor9getStatusEv>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d101      	bne.n	8003e58 <_ZN9LineTrace4flipEv+0x1b8>
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <_ZN9LineTrace4flipEv+0x1ba>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d011      	beq.n	8003e82 <_ZN9LineTrace4flipEv+0x1e2>
#endif
			all_sideline_flag_ = true;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e64:	3316      	adds	r3, #22
 8003e66:	2201      	movs	r2, #1
 8003e68:	701a      	strb	r2, [r3, #0]

			if(mode_selector_ == FIRST_RUNNING){
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003e70:	3324      	adds	r3, #36	; 0x24
 8003e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d120      	bne.n	8003ebc <_ZN9LineTrace4flipEv+0x21c>
				storeAllSideLineDistance();
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fab2 	bl	80043e4 <_ZN9LineTrace24storeAllSideLineDistanceEv>
 8003e80:	e01c      	b.n	8003ebc <_ZN9LineTrace4flipEv+0x21c>
			}
		}
#ifdef REVERSE
		else if(all_sideline_flag_ == true && (~(side_sensor_->getStatus()) & 0x01) == 0x01){
#else
		else if(all_sideline_flag_ == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e88:	3316      	adds	r3, #22
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d10c      	bne.n	8003eaa <_ZN9LineTrace4flipEv+0x20a>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f001 fad7 	bl	8005448 <_ZN10SideSensor9getStatusEv>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d101      	bne.n	8003eaa <_ZN9LineTrace4flipEv+0x20a>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <_ZN9LineTrace4flipEv+0x20c>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <_ZN9LineTrace4flipEv+0x21c>
#endif
			all_sideline_flag_ = false;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003eb6:	3316      	adds	r3, #22
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]
		}


		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7fe fb93 	bl	80025ec <_ZN10LineSensor13emergencyStopEv>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	bf0c      	ite	eq
 8003ecc:	2301      	moveq	r3, #1
 8003ece:	2300      	movne	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d008      	beq.n	8003ee8 <_ZN9LineTrace4flipEv+0x248>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	eddf 0a20 	vldr	s1, [pc, #128]	; 8003f5c <_ZN9LineTrace4flipEv+0x2bc>
 8003ede:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8003f5c <_ZN9LineTrace4flipEv+0x2bc>
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f001 fd44 	bl	8005970 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}

		correction_check_cnt_++;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003eee:	3314      	adds	r3, #20
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003efc:	3314      	adds	r3, #20
 8003efe:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f06:	3314      	adds	r3, #20
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	f242 720f 	movw	r2, #9999	; 0x270f
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d906      	bls.n	8003f20 <_ZN9LineTrace4flipEv+0x280>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f18:	3314      	adds	r3, #20
 8003f1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f1e:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 80) led_.LR(-1, 1);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f26:	3314      	adds	r3, #20
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	2b50      	cmp	r3, #80	; 0x50
 8003f2c:	d808      	bhi.n	8003f40 <_ZN9LineTrace4flipEv+0x2a0>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	330c      	adds	r3, #12
 8003f32:	2201      	movs	r2, #1
 8003f34:	f04f 31ff 	mov.w	r1, #4294967295
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fe f85b 	bl	8001ff4 <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 8003f3e:	e007      	b.n	8003f50 <_ZN9LineTrace4flipEv+0x2b0>
		else led_.LR(-1, 0);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	330c      	adds	r3, #12
 8003f44:	2200      	movs	r2, #0
 8003f46:	f04f 31ff 	mov.w	r1, #4294967295
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fe f852 	bl	8001ff4 <_ZN3LED2LREaa>
}
 8003f50:	bf00      	nop
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	43480000 	.word	0x43480000
 8003f5c:	00000000 	.word	0x00000000

08003f60 <_ZN9LineTrace5startEv>:
		odometry_->clearPotition();
	}
}

void LineTrace::start()
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	i_reset_flag_ = true;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	velocity_ctrl_->start();
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f001 fd50 	bl	8005a22 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f001 fa76 	bl	8005478 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003f92:	33f8      	adds	r3, #248	; 0xf8
 8003f94:	2200      	movs	r2, #0
 8003f96:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003f9e:	33fa      	adds	r3, #250	; 0xfa
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8003faa:	33fc      	adds	r3, #252	; 0xfc
 8003fac:	2200      	movs	r2, #0
 8003fae:	801a      	strh	r2, [r3, #0]
}
 8003fb0:	bf00      	nop
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	velocity_ctrl_->stop();
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f001 fd3b 	bl	8005a48 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	330c      	adds	r3, #12
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fe f809 	bl	8001ff4 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003fe8:	3324      	adds	r3, #36	; 0x24
 8003fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d107      	bne.n	8004002 <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69d8      	ldr	r0, [r3, #28]
 8003ff6:	4b23      	ldr	r3, [pc, #140]	; (8004084 <_ZN9LineTrace4stopEv+0xcc>)
 8003ff8:	4a23      	ldr	r2, [pc, #140]	; (8004088 <_ZN9LineTrace4stopEv+0xd0>)
 8003ffa:	4924      	ldr	r1, [pc, #144]	; (800408c <_ZN9LineTrace4stopEv+0xd4>)
 8003ffc:	f000 fc70 	bl	80048e0 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8004000:	e006      	b.n	8004010 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69d8      	ldr	r0, [r3, #28]
 8004006:	4b22      	ldr	r3, [pc, #136]	; (8004090 <_ZN9LineTrace4stopEv+0xd8>)
 8004008:	4a22      	ldr	r2, [pc, #136]	; (8004094 <_ZN9LineTrace4stopEv+0xdc>)
 800400a:	4920      	ldr	r1, [pc, #128]	; (800408c <_ZN9LineTrace4stopEv+0xd4>)
 800400c:	f000 fc89 	bl	8004922 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004016:	3328      	adds	r3, #40	; 0x28
 8004018:	2200      	movs	r2, #0
 800401a:	9200      	str	r2, [sp, #0]
 800401c:	2264      	movs	r2, #100	; 0x64
 800401e:	491e      	ldr	r1, [pc, #120]	; (8004098 <_ZN9LineTrace4stopEv+0xe0>)
 8004020:	481a      	ldr	r0, [pc, #104]	; (800408c <_ZN9LineTrace4stopEv+0xd4>)
 8004022:	f7fd faab 	bl	800157c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 800402c:	33b8      	adds	r3, #184	; 0xb8
 800402e:	2200      	movs	r2, #0
 8004030:	9200      	str	r2, [sp, #0]
 8004032:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004036:	4919      	ldr	r1, [pc, #100]	; (800409c <_ZN9LineTrace4stopEv+0xe4>)
 8004038:	4814      	ldr	r0, [pc, #80]	; (800408c <_ZN9LineTrace4stopEv+0xd4>)
 800403a:	f7fd fa9f 	bl	800157c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004044:	3358      	adds	r3, #88	; 0x58
 8004046:	2200      	movs	r2, #0
 8004048:	9200      	str	r2, [sp, #0]
 800404a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800404e:	4914      	ldr	r1, [pc, #80]	; (80040a0 <_ZN9LineTrace4stopEv+0xe8>)
 8004050:	480e      	ldr	r0, [pc, #56]	; (800408c <_ZN9LineTrace4stopEv+0xd4>)
 8004052:	f7fd fa93 	bl	800157c <sd_write_array_float>

	led_.LR(-1, 0);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	330c      	adds	r3, #12
 800405a:	2200      	movs	r2, #0
 800405c:	f04f 31ff 	mov.w	r1, #4294967295
 8004060:	4618      	mov	r0, r3
 8004062:	f7fd ffc7 	bl	8001ff4 <_ZN3LED2LREaa>

	logger_->resetIdx();
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	4618      	mov	r0, r3
 800406c:	f000 fce7 	bl	8004a3e <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fc95 	bl	80049a4 <_ZN6Logger10resetLogs2Ev>
}
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	0801a79c 	.word	0x0801a79c
 8004088:	0801a7a8 	.word	0x0801a7a8
 800408c:	0801a790 	.word	0x0801a790
 8004090:	0801a87c 	.word	0x0801a87c
 8004094:	0801a888 	.word	0x0801a888
 8004098:	0801a7b8 	.word	0x0801a7b8
 800409c:	0801a7c8 	.word	0x0801a7c8
 80040a0:	0801a898 	.word	0x0801a898

080040a4 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 80040b0:	2300      	movs	r3, #0
 80040b2:	737b      	strb	r3, [r7, #13]
	start();
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7ff ff53 	bl	8003f60 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 80040ba:	7b7b      	ldrb	r3, [r7, #13]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d15b      	bne.n	8004178 <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 80040c0:	89fb      	ldrh	r3, [r7, #14]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <_ZN9LineTrace7runningEv+0x28>
 80040c6:	2b0a      	cmp	r3, #10
 80040c8:	d030      	beq.n	800412c <_ZN9LineTrace7runningEv+0x88>
 80040ca:	e054      	b.n	8004176 <_ZN9LineTrace7runningEv+0xd2>
		case 0:
#ifdef REVERSE
			if(side_sensor_->getWhiteLineCntL() == 1){
#else
			if(side_sensor_->getWhiteLineCntR() == 1){
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f001 f9c5 	bl	8005460 <_ZN10SideSensor16getWhiteLineCntREv>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b01      	cmp	r3, #1
 80040da:	bf0c      	ite	eq
 80040dc:	2301      	moveq	r3, #1
 80040de:	2300      	movne	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d044      	beq.n	8004170 <_ZN9LineTrace7runningEv+0xcc>
				}
				else{ // Other than first running
					startVelocityPlay();
				}
				*/
				loggerStart();
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fe fd92 	bl	8002c10 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80040f2:	3324      	adds	r3, #36	; 0x24
 80040f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f89f 	bl	8004240 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	4618      	mov	r0, r3
 8004108:	f7fd fa29 	bl	800155e <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	4618      	mov	r0, r3
 8004112:	f7fd fa07 	bl	8001524 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	330c      	adds	r3, #12
 800411a:	f04f 32ff 	mov.w	r2, #4294967295
 800411e:	2100      	movs	r1, #0
 8004120:	4618      	mov	r0, r3
 8004122:	f7fd ff67 	bl	8001ff4 <_ZN3LED2LREaa>
				stage = 10;
 8004126:	230a      	movs	r3, #10
 8004128:	81fb      	strh	r3, [r7, #14]
			}

			break;
 800412a:	e021      	b.n	8004170 <_ZN9LineTrace7runningEv+0xcc>

		case 10:
#ifdef REVERSE
			if(side_sensor_->getWhiteLineCntL() == 2){
#else
			if(side_sensor_->getWhiteLineCntR() == 2){
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	4618      	mov	r0, r3
 8004132:	f001 f995 	bl	8005460 <_ZN10SideSensor16getWhiteLineCntREv>
 8004136:	4603      	mov	r3, r0
 8004138:	2b02      	cmp	r3, #2
 800413a:	bf0c      	ite	eq
 800413c:	2301      	moveq	r3, #1
 800413e:	2300      	movne	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d016      	beq.n	8004174 <_ZN9LineTrace7runningEv+0xd0>
#endif
				loggerStop();
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fe fd7d 	bl	8002c46 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f88a 	bl	8004266 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8004152:	2064      	movs	r0, #100	; 0x64
 8004154:	f005 fc0a 	bl	800996c <HAL_Delay>

				setTargetVelocity(0);
 8004158:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8004188 <_ZN9LineTrace7runningEv+0xe4>
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff fc83 	bl	8003a68 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8004162:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004166:	f005 fc01 	bl	800996c <HAL_Delay>

				goal_flag = true;
 800416a:	2301      	movs	r3, #1
 800416c:	737b      	strb	r3, [r7, #13]

			}

			break;
 800416e:	e001      	b.n	8004174 <_ZN9LineTrace7runningEv+0xd0>
			break;
 8004170:	bf00      	nop
 8004172:	e7a2      	b.n	80040ba <_ZN9LineTrace7runningEv+0x16>
			break;
 8004174:	bf00      	nop
	while(goal_flag == false){
 8004176:	e7a0      	b.n	80040ba <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff ff1d 	bl	8003fb8 <_ZN9LineTrace4stopEv>
}
 800417e:	bf00      	nop
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	00000000 	.word	0x00000000

0800418c <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 800418c:	b590      	push	{r4, r7, lr}
 800418e:	ed2d 8b02 	vpush	{d8}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d146      	bne.n	8004230 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80041a8:	3324      	adds	r3, #36	; 0x24
 80041aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d11c      	bne.n	80041ec <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69dc      	ldr	r4, [r3, #28]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fd f977 	bl	80014ae <_ZN7Encoder15getDistance10mmEv>
 80041c0:	eeb0 8a40 	vmov.f32	s16, s0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 fea0 	bl	8004f0e <_ZN8Odometry8getThetaEv>
 80041ce:	ec53 2b10 	vmov	r2, r3, d0
 80041d2:	4610      	mov	r0, r2
 80041d4:	4619      	mov	r1, r3
 80041d6:	f7fc fd1f 	bl	8000c18 <__aeabi_d2f>
 80041da:	4603      	mov	r3, r0
 80041dc:	ee00 3a90 	vmov	s1, r3
 80041e0:	eeb0 0a48 	vmov.f32	s0, s16
 80041e4:	4620      	mov	r0, r4
 80041e6:	f000 faac 	bl	8004742 <_ZN6Logger21storeDistanceAndThetaEff>
 80041ea:	e01b      	b.n	8004224 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(velocity_ctrl_->getCurrentVelocity(), odometry_->getTheta());
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	69dc      	ldr	r4, [r3, #28]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f001 fc43 	bl	8005a80 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 80041fa:	eeb0 8a40 	vmov.f32	s16, s0
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fe83 	bl	8004f0e <_ZN8Odometry8getThetaEv>
 8004208:	ec53 2b10 	vmov	r2, r3, d0
 800420c:	4610      	mov	r0, r2
 800420e:	4619      	mov	r1, r3
 8004210:	f7fc fd02 	bl	8000c18 <__aeabi_d2f>
 8004214:	4603      	mov	r3, r0
 8004216:	ee00 3a90 	vmov	s1, r3
 800421a:	eeb0 0a48 	vmov.f32	s0, s16
 800421e:	4620      	mov	r0, r4
 8004220:	f000 fad6 	bl	80047d0 <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 8004224:	4b05      	ldr	r3, [pc, #20]	; (800423c <_ZN9LineTrace9storeLogsEv+0xb0>)
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	3301      	adds	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	4b03      	ldr	r3, [pc, #12]	; (800423c <_ZN9LineTrace9storeLogsEv+0xb0>)
 800422e:	801a      	strh	r2, [r3, #0]
	}
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	ecbd 8b02 	vpop	{d8}
 800423a:	bd90      	pop	{r4, r7, pc}
 800423c:	20000264 	.word	0x20000264

08004240 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	4618      	mov	r0, r3
 800424e:	f7fd f969 	bl	8001524 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004258:	3320      	adds	r3, #32
 800425a:	2201      	movs	r2, #1
 800425c:	701a      	strb	r2, [r3, #0]
}
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004274:	3320      	adds	r3, #32
 8004276:	2200      	movs	r2, #0
 8004278:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004280:	3322      	adds	r3, #34	; 0x22
 8004282:	2200      	movs	r2, #0
 8004284:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800428c:	335c      	adds	r3, #92	; 0x5c
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	601a      	str	r2, [r3, #0]
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80042b2:	3324      	adds	r3, #36	; 0x24
 80042b4:	887a      	ldrh	r2, [r7, #2]
 80042b6:	801a      	strh	r2, [r3, #0]
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 80042d0:	2300      	movs	r3, #0
 80042d2:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fd f8e8 	bl	80014ae <_ZN7Encoder15getDistance10mmEv>
 80042de:	eeb0 7a40 	vmov.f32	s14, s0
 80042e2:	edd7 7a00 	vldr	s15, [r7]
 80042e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ee:	bf94      	ite	ls
 80042f0:	2301      	movls	r3, #1
 80042f2:	2300      	movhi	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 80042fa:	2301      	movs	r3, #1
 80042fc:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8004308:	b590      	push	{r4, r7, lr}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	695a      	ldr	r2, [r3, #20]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800431a:	33f8      	adds	r3, #248	; 0xf8
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	461c      	mov	r4, r3
 8004320:	4610      	mov	r0, r2
 8004322:	f7fd f8d3 	bl	80014cc <_ZN7Encoder16getTotalDistanceEv>
 8004326:	eef0 7a40 	vmov.f32	s15, s0
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8004330:	330a      	adds	r3, #10
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004340:	33f8      	adds	r3, #248	; 0xf8
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	3301      	adds	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800434e:	33f8      	adds	r3, #248	; 0xf8
 8004350:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004358:	33f8      	adds	r3, #248	; 0xf8
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	2b63      	cmp	r3, #99	; 0x63
 800435e:	d905      	bls.n	800436c <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004366:	33f8      	adds	r3, #248	; 0xf8
 8004368:	2263      	movs	r2, #99	; 0x63
 800436a:	801a      	strh	r2, [r3, #0]
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	bd90      	pop	{r4, r7, pc}

08004374 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8004374:	b590      	push	{r4, r7, lr}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	695a      	ldr	r2, [r3, #20]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004386:	33fa      	adds	r3, #250	; 0xfa
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	461c      	mov	r4, r3
 800438c:	4610      	mov	r0, r2
 800438e:	f7fd f89d 	bl	80014cc <_ZN7Encoder16getTotalDistanceEv>
 8004392:	eef0 7a40 	vmov.f32	s15, s0
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 800439c:	332e      	adds	r3, #46	; 0x2e
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80043ac:	33fa      	adds	r3, #250	; 0xfa
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	3301      	adds	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80043ba:	33fa      	adds	r3, #250	; 0xfa
 80043bc:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80043c4:	33fa      	adds	r3, #250	; 0xfa
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043cc:	d306      	bcc.n	80043dc <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80043d4:	33fa      	adds	r3, #250	; 0xfa
 80043d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043da:	801a      	strh	r2, [r3, #0]
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd90      	pop	{r4, r7, pc}

080043e4 <_ZN9LineTrace24storeAllSideLineDistanceEv>:
void LineTrace::storeAllSideLineDistance()
{
 80043e4:	b590      	push	{r4, r7, lr}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
	all_sideline_distance_[all_sideline_idx_] = encoder_->getTotalDistance();
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	695a      	ldr	r2, [r3, #20]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80043f6:	33fc      	adds	r3, #252	; 0xfc
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	461c      	mov	r4, r3
 80043fc:	4610      	mov	r0, r2
 80043fe:	f7fd f865 	bl	80014cc <_ZN7Encoder16getTotalDistanceEv>
 8004402:	eef0 7a40 	vmov.f32	s15, s0
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	f504 534d 	add.w	r3, r4, #13120	; 0x3340
 800440c:	3316      	adds	r3, #22
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	edc3 7a00 	vstr	s15, [r3]
	all_sideline_idx_++;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800441c:	33fc      	adds	r3, #252	; 0xfc
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	3301      	adds	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800442a:	33fc      	adds	r3, #252	; 0xfc
 800442c:	801a      	strh	r2, [r3, #0]

	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004434:	33fc      	adds	r3, #252	; 0xfc
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800443c:	d306      	bcc.n	800444c <_ZN9LineTrace24storeAllSideLineDistanceEv+0x68>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004444:	33fc      	adds	r3, #252	; 0xfc
 8004446:	f240 32e7 	movw	r2, #999	; 0x3e7
 800444a:	801a      	strh	r2, [r3, #0]
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	bd90      	pop	{r4, r7, pc}

08004454 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6959      	ldr	r1, [r3, #20]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004466:	33f8      	adds	r3, #248	; 0xf8
 8004468:	881b      	ldrh	r3, [r3, #0]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8004470:	330a      	adds	r3, #10
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	edd3 7a00 	vldr	s15, [r3]
 800447a:	eeb0 0a67 	vmov.f32	s0, s15
 800447e:	4608      	mov	r0, r1
 8004480:	f7fd f833 	bl	80014ea <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800448a:	33f8      	adds	r3, #248	; 0xf8
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	3301      	adds	r3, #1
 8004490:	b29a      	uxth	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 8004498:	33f8      	adds	r3, #248	; 0xf8
 800449a:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80044a2:	33f8      	adds	r3, #248	; 0xf8
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	2b63      	cmp	r3, #99	; 0x63
 80044a8:	d905      	bls.n	80044b6 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x62>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 80044b0:	33f8      	adds	r3, #248	; 0xf8
 80044b2:	2263      	movs	r2, #99	; 0x63
 80044b4:	801a      	strh	r2, [r3, #0]

}
 80044b6:	bf00      	nop
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80044c8:	2300      	movs	r3, #0
 80044ca:	82fb      	strh	r3, [r7, #22]
 80044cc:	8afb      	ldrh	r3, [r7, #22]
 80044ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044d2:	d237      	bcs.n	8004544 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x84>
		float temp_sideline_distance = sideline_distance_[i];
 80044d4:	8afb      	ldrh	r3, [r7, #22]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80044dc:	332e      	adds	r3, #46	; 0x2e
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fc ffee 	bl	80014cc <_ZN7Encoder16getTotalDistanceEv>
 80044f0:	eeb0 7a40 	vmov.f32	s14, s0
 80044f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80044f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004500:	f7fe f8ca 	bl	8002698 <_ZSt3absf>
 8004504:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 8004508:	edd7 7a03 	vldr	s15, [r7, #12]
 800450c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800456c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xac>
 8004510:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004518:	d810      	bhi.n	800453c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x7c>
			encoder_->setTotalDistance(sideline_distance_[i]);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6959      	ldr	r1, [r3, #20]
 800451e:	8afb      	ldrh	r3, [r7, #22]
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8004526:	332e      	adds	r3, #46	; 0x2e
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	edd3 7a00 	vldr	s15, [r3]
 8004530:	eeb0 0a67 	vmov.f32	s0, s15
 8004534:	4608      	mov	r0, r1
 8004536:	f7fc ffd8 	bl	80014ea <_ZN7Encoder16setTotalDistanceEf>
			break;
 800453a:	e003      	b.n	8004544 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x84>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 800453c:	8afb      	ldrh	r3, [r7, #22]
 800453e:	3301      	adds	r3, #1
 8004540:	82fb      	strh	r3, [r7, #22]
 8004542:	e7c3      	b.n	80044cc <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800454a:	33fa      	adds	r3, #250	; 0xfa
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004552:	d306      	bcc.n	8004562 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa2>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
 800455a:	33fa      	adds	r3, #250	; 0xfa
 800455c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004560:	801a      	strh	r2, [r3, #0]

}
 8004562:	bf00      	nop
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	42a00000 	.word	0x42a00000

08004570 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800457e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004582:	2200      	movs	r2, #0
 8004584:	701a      	strb	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800458c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004590:	2200      	movs	r2, #0
 8004592:	801a      	strh	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800459a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800459e:	2200      	movs	r2, #0
 80045a0:	801a      	strh	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80045a8:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80045ac:	2200      	movs	r2, #0
 80045ae:	801a      	strh	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4618      	mov	r0, r3
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
	...

080045c0 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80045c8:	2300      	movs	r3, #0
 80045ca:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 80045cc:	f7fd f8c8 	bl	8001760 <sd_mount>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	bf0c      	ite	eq
 80045d6:	2301      	moveq	r3, #1
 80045d8:	2300      	movne	r3, #0
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d016      	beq.n	800460e <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 80045e0:	f7fc fd90 	bl	8001104 <lcd_clear>
	  lcd_locate(0,0);
 80045e4:	2100      	movs	r1, #0
 80045e6:	2000      	movs	r0, #0
 80045e8:	f7fc fd9c 	bl	8001124 <lcd_locate>
	  lcd_printf("SD mount");
 80045ec:	4815      	ldr	r0, [pc, #84]	; (8004644 <_ZN6Logger10sdCardInitEv+0x84>)
 80045ee:	f7fc fdc4 	bl	800117a <lcd_printf>
	  lcd_locate(0,1);
 80045f2:	2101      	movs	r1, #1
 80045f4:	2000      	movs	r0, #0
 80045f6:	f7fc fd95 	bl	8001124 <lcd_locate>
	  lcd_printf("success");
 80045fa:	4813      	ldr	r0, [pc, #76]	; (8004648 <_ZN6Logger10sdCardInitEv+0x88>)
 80045fc:	f7fc fdbd 	bl	800117a <lcd_printf>
	  HAL_Delay(500);
 8004600:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004604:	f005 f9b2 	bl	800996c <HAL_Delay>

	  ret = true;
 8004608:	2301      	movs	r3, #1
 800460a:	73fb      	strb	r3, [r7, #15]
 800460c:	e015      	b.n	800463a <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 800460e:	f7fc fd79 	bl	8001104 <lcd_clear>
	  lcd_locate(0,0);
 8004612:	2100      	movs	r1, #0
 8004614:	2000      	movs	r0, #0
 8004616:	f7fc fd85 	bl	8001124 <lcd_locate>
	  lcd_printf("SD mount");
 800461a:	480a      	ldr	r0, [pc, #40]	; (8004644 <_ZN6Logger10sdCardInitEv+0x84>)
 800461c:	f7fc fdad 	bl	800117a <lcd_printf>
	  lcd_locate(0,1);
 8004620:	2101      	movs	r1, #1
 8004622:	2000      	movs	r0, #0
 8004624:	f7fc fd7e 	bl	8001124 <lcd_locate>
	  lcd_printf("fail");
 8004628:	4808      	ldr	r0, [pc, #32]	; (800464c <_ZN6Logger10sdCardInitEv+0x8c>)
 800462a:	f7fc fda6 	bl	800117a <lcd_printf>
	  HAL_Delay(1000);
 800462e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004632:	f005 f99b 	bl	800996c <HAL_Delay>

	  ret = false;
 8004636:	2300      	movs	r3, #0
 8004638:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 800463a:	7bfb      	ldrb	r3, [r7, #15]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	0801a8a8 	.word	0x0801a8a8
 8004648:	0801a8b4 	.word	0x0801a8b4
 800464c:	0801a8bc 	.word	0x0801a8bc

08004650 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004662:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d127      	bne.n	80046bc <_ZN6Logger8storeLogEf+0x6c>
		store_data_float_[log_index_tim_] = data;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004672:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004688:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	3301      	adds	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004698:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800469c:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80046a4:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d006      	beq.n	80046bc <_ZN6Logger8storeLogEf+0x6c>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80046b4:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 80046b8:	2200      	movs	r2, #0
 80046ba:	801a      	strh	r2, [r3, #0]
	}
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80046da:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d128      	bne.n	8004736 <_ZN6Logger9storeLog2Ef+0x6e>
		store_data_float2_[log_index_tim2_] = data;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80046ea:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	3304      	adds	r3, #4
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004702:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	3301      	adds	r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004712:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004716:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800471e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d006      	beq.n	8004736 <_ZN6Logger9storeLog2Ef+0x6e>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800472e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004732:	2200      	movs	r2, #0
 8004734:	801a      	strh	r2, [r3, #0]
	}
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004742:	b480      	push	{r7}
 8004744:	b085      	sub	sp, #20
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	ed87 0a02 	vstr	s0, [r7, #8]
 800474e:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004758:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	3302      	adds	r3, #2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004770:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800477c:	3312      	adds	r3, #18
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800478c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	3301      	adds	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800479c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80047a0:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80047a8:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	f241 726f 	movw	r2, #5999	; 0x176f
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d906      	bls.n	80047c4 <_ZN6Logger21storeDistanceAndThetaEff+0x82>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80047bc:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80047c0:	2200      	movs	r2, #0
 80047c2:	801a      	strh	r2, [r3, #0]
	//}
}
 80047c4:	bf00      	nop
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80047dc:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80047e6:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80047f2:	3322      	adds	r3, #34	; 0x22
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004802:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 800480e:	3352      	adds	r3, #82	; 0x52
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800481e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	3301      	adds	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800482e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004832:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800483a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	f241 726f 	movw	r2, #5999	; 0x176f
 8004844:	4293      	cmp	r3, r2
 8004846:	d906      	bls.n	8004856 <_ZN6Logger22storeDistanceAndTheta2Eff+0x86>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800484e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004852:	2200      	movs	r2, #0
 8004854:	801a      	strh	r2, [r3, #0]
	//}
}
 8004856:	bf00      	nop
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
	return store_distance_;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3308      	adds	r3, #8
}
 800486e:	4618      	mov	r0, r3
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004888:	3348      	adds	r3, #72	; 0x48
}
 800488a:	4618      	mov	r0, r3
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b086      	sub	sp, #24
 800489a:	af02      	add	r7, sp, #8
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	9200      	str	r2, [sp, #0]
 80048a8:	2201      	movs	r2, #1
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	68b8      	ldr	r0, [r7, #8]
 80048ae:	f7fc fe65 	bl	800157c <sd_write_array_float>
}
 80048b2:	bf00      	nop
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b086      	sub	sp, #24
 80048be:	af02      	add	r7, sp, #8
 80048c0:	60f8      	str	r0, [r7, #12]
 80048c2:	60b9      	str	r1, [r7, #8]
 80048c4:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3304      	adds	r3, #4
 80048ca:	2200      	movs	r2, #0
 80048cc:	9200      	str	r2, [sp, #0]
 80048ce:	2201      	movs	r2, #1
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	68b8      	ldr	r0, [r7, #8]
 80048d4:	f7fc fe52 	bl	800157c <sd_write_array_float>
}
 80048d8:	bf00      	nop
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3308      	adds	r3, #8
 80048f2:	2200      	movs	r2, #0
 80048f4:	9200      	str	r2, [sp, #0]
 80048f6:	f241 7270 	movw	r2, #6000	; 0x1770
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	68b8      	ldr	r0, [r7, #8]
 80048fe:	f7fc fe3d 	bl	800157c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004908:	3348      	adds	r3, #72	; 0x48
 800490a:	2200      	movs	r2, #0
 800490c:	9200      	str	r2, [sp, #0]
 800490e:	f241 7270 	movw	r2, #6000	; 0x1770
 8004912:	6839      	ldr	r1, [r7, #0]
 8004914:	68b8      	ldr	r0, [r7, #8]
 8004916:	f7fc fe31 	bl	800157c <sd_write_array_float>
}
 800491a:	bf00      	nop
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b086      	sub	sp, #24
 8004926:	af02      	add	r7, sp, #8
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	607a      	str	r2, [r7, #4]
 800492e:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004936:	3388      	adds	r3, #136	; 0x88
 8004938:	2200      	movs	r2, #0
 800493a:	9200      	str	r2, [sp, #0]
 800493c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	68b8      	ldr	r0, [r7, #8]
 8004944:	f7fc fe1a 	bl	800157c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800494e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8004952:	2200      	movs	r2, #0
 8004954:	9200      	str	r2, [sp, #0]
 8004956:	f241 7270 	movw	r2, #6000	; 0x1770
 800495a:	6839      	ldr	r1, [r7, #0]
 800495c:	68b8      	ldr	r0, [r7, #8]
 800495e:	f7fc fe0d 	bl	800157c <sd_write_array_float>
}
 8004962:	bf00      	nop
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b084      	sub	sp, #16
 800496e:	af00      	add	r7, sp, #0
 8004970:	60f8      	str	r0, [r7, #12]
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	607a      	str	r2, [r7, #4]
 8004976:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	3308      	adds	r3, #8
 800497c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	68b8      	ldr	r0, [r7, #8]
 8004984:	f7fc fe60 	bl	8001648 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800498e:	3348      	adds	r3, #72	; 0x48
 8004990:	f241 7270 	movw	r2, #6000	; 0x1770
 8004994:	6839      	ldr	r1, [r7, #0]
 8004996:	68b8      	ldr	r0, [r7, #8]
 8004998:	f7fc fe56 	bl	8001648 <sd_read_array_float>
}
 800499c:	bf00      	nop
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 80049a4:	b480      	push	{r7}
 80049a6:	b08b      	sub	sp, #44	; 0x2c
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 80049b2:	3388      	adds	r3, #136	; 0x88
 80049b4:	61fb      	str	r3, [r7, #28]
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80049c0:	3340      	adds	r3, #64	; 0x40
 80049c2:	61bb      	str	r3, [r7, #24]
 80049c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d009      	beq.n	80049e0 <_ZN6Logger10resetLogs2Ev+0x3c>
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	617b      	str	r3, [r7, #20]
		log = 0;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	3304      	adds	r3, #4
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24
 80049de:	e7f1      	b.n	80049c4 <_ZN6Logger10resetLogs2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80049e6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80049ea:	613b      	str	r3, [r7, #16]
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	623b      	str	r3, [r7, #32]
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80049f6:	3340      	adds	r3, #64	; 0x40
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	6a3a      	ldr	r2, [r7, #32]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d009      	beq.n	8004a16 <_ZN6Logger10resetLogs2Ev+0x72>
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	f04f 0200 	mov.w	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	3304      	adds	r3, #4
 8004a12:	623b      	str	r3, [r7, #32]
 8004a14:	e7f1      	b.n	80049fa <_ZN6Logger10resetLogs2Ev+0x56>
	}

	log_index_tim_ = 0;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004a1c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004a20:	2200      	movs	r2, #0
 8004a22:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004a2a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004a2e:	2200      	movs	r2, #0
 8004a30:	801a      	strh	r2, [r3, #0]
}
 8004a32:	bf00      	nop
 8004a34:	372c      	adds	r7, #44	; 0x2c
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004a4c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004a50:	2200      	movs	r2, #0
 8004a52:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004a5a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004a5e:	2200      	movs	r2, #0
 8004a60:	801a      	strh	r2, [r3, #0]
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <_ZN6Logger5startEv>:

void Logger::start()
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004a7c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004a80:	2201      	movs	r2, #1
 8004a82:	701a      	strb	r2, [r3, #0]
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004a9e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	701a      	strb	r2, [r3, #0]
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	801a      	strh	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	805a      	strh	r2, [r3, #2]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004adc:	2108      	movs	r1, #8
 8004ade:	4805      	ldr	r0, [pc, #20]	; (8004af4 <_ZN5Motor4initEv+0x20>)
 8004ae0:	f00a f90e 	bl	800ed00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004ae4:	210c      	movs	r1, #12
 8004ae6:	4803      	ldr	r0, [pc, #12]	; (8004af4 <_ZN5Motor4initEv+0x20>)
 8004ae8:	f00a f90a 	bl	800ed00 <HAL_TIM_PWM_Start>

}
 8004aec:	bf00      	nop
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	2003f8c4 	.word	0x2003f8c4

08004af8 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	da0c      	bge.n	8004b24 <_ZN5Motor9motorCtrlEv+0x2c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b10:	481d      	ldr	r0, [pc, #116]	; (8004b88 <_ZN5Motor9motorCtrlEv+0x90>)
 8004b12:	f006 f9c7 	bl	800aea4 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	425b      	negs	r3, r3
 8004b20:	81fb      	strh	r3, [r7, #14]
 8004b22:	e009      	b.n	8004b38 <_ZN5Motor9motorCtrlEv+0x40>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004b24:	2201      	movs	r2, #1
 8004b26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b2a:	4817      	ldr	r0, [pc, #92]	; (8004b88 <_ZN5Motor9motorCtrlEv+0x90>)
 8004b2c:	f006 f9ba 	bl	800aea4 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b36:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	da0c      	bge.n	8004b5c <_ZN5Motor9motorCtrlEv+0x64>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004b42:	2201      	movs	r2, #1
 8004b44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b48:	480f      	ldr	r0, [pc, #60]	; (8004b88 <_ZN5Motor9motorCtrlEv+0x90>)
 8004b4a:	f006 f9ab 	bl	800aea4 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	425b      	negs	r3, r3
 8004b58:	81bb      	strh	r3, [r7, #12]
 8004b5a:	e009      	b.n	8004b70 <_ZN5Motor9motorCtrlEv+0x78>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004b62:	4809      	ldr	r0, [pc, #36]	; (8004b88 <_ZN5Motor9motorCtrlEv+0x90>)
 8004b64:	f006 f99e 	bl	800aea4 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b6e:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004b70:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <_ZN5Motor9motorCtrlEv+0x94>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	89fa      	ldrh	r2, [r7, #14]
 8004b76:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004b78:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <_ZN5Motor9motorCtrlEv+0x94>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	89ba      	ldrh	r2, [r7, #12]
 8004b7e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004b80:	bf00      	nop
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40020c00 	.word	0x40020c00
 8004b8c:	2003f8c4 	.word	0x2003f8c4

08004b90 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6178      	str	r0, [r7, #20]
 8004b98:	ed87 0b02 	vstr	d0, [r7, #8]
 8004b9c:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	4b30      	ldr	r3, [pc, #192]	; (8004c68 <_ZN5Motor8setRatioEdd+0xd8>)
 8004ba6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004baa:	f7fb ffcd 	bl	8000b48 <__aeabi_dcmpgt>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <_ZN5Motor8setRatioEdd+0x30>
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	4b2b      	ldr	r3, [pc, #172]	; (8004c68 <_ZN5Motor8setRatioEdd+0xd8>)
 8004bba:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8004bbe:	e00e      	b.n	8004bde <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	4b29      	ldr	r3, [pc, #164]	; (8004c6c <_ZN5Motor8setRatioEdd+0xdc>)
 8004bc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bca:	f7fb ff9f 	bl	8000b0c <__aeabi_dcmplt>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d004      	beq.n	8004bde <_ZN5Motor8setRatioEdd+0x4e>
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	4b24      	ldr	r3, [pc, #144]	; (8004c6c <_ZN5Motor8setRatioEdd+0xdc>)
 8004bda:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004bde:	f04f 0200 	mov.w	r2, #0
 8004be2:	4b21      	ldr	r3, [pc, #132]	; (8004c68 <_ZN5Motor8setRatioEdd+0xd8>)
 8004be4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004be8:	f7fb ffae 	bl	8000b48 <__aeabi_dcmpgt>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d005      	beq.n	8004bfe <_ZN5Motor8setRatioEdd+0x6e>
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	4b1c      	ldr	r3, [pc, #112]	; (8004c68 <_ZN5Motor8setRatioEdd+0xd8>)
 8004bf8:	e9c7 2300 	strd	r2, r3, [r7]
 8004bfc:	e00e      	b.n	8004c1c <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	4b1a      	ldr	r3, [pc, #104]	; (8004c6c <_ZN5Motor8setRatioEdd+0xdc>)
 8004c04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c08:	f7fb ff80 	bl	8000b0c <__aeabi_dcmplt>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d004      	beq.n	8004c1c <_ZN5Motor8setRatioEdd+0x8c>
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	4b15      	ldr	r3, [pc, #84]	; (8004c6c <_ZN5Motor8setRatioEdd+0xdc>)
 8004c18:	e9c7 2300 	strd	r2, r3, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	4b13      	ldr	r3, [pc, #76]	; (8004c70 <_ZN5Motor8setRatioEdd+0xe0>)
 8004c22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c26:	f7fb fcff 	bl	8000628 <__aeabi_dmul>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4610      	mov	r0, r2
 8004c30:	4619      	mov	r1, r3
 8004c32:	f7fb ffa9 	bl	8000b88 <__aeabi_d2iz>
 8004c36:	4603      	mov	r3, r0
 8004c38:	b21a      	sxth	r2, r3
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <_ZN5Motor8setRatioEdd+0xe0>)
 8004c44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c48:	f7fb fcee 	bl	8000628 <__aeabi_dmul>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4610      	mov	r0, r2
 8004c52:	4619      	mov	r1, r3
 8004c54:	f7fb ff98 	bl	8000b88 <__aeabi_d2iz>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	b21a      	sxth	r2, r3
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	805a      	strh	r2, [r3, #2]

}
 8004c60:	bf00      	nop
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	3ff00000 	.word	0x3ff00000
 8004c6c:	bff00000 	.word	0xbff00000
 8004c70:	409c2000 	.word	0x409c2000

08004c74 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
 8004c82:	68f9      	ldr	r1, [r7, #12]
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004c90:	68f9      	ldr	r1, [r7, #12]
 8004c92:	f04f 0200 	mov.w	r2, #0
 8004c96:	f04f 0300 	mov.w	r3, #0
 8004c9a:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8004c9e:	68f9      	ldr	r1, [r7, #12]
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8004cac:	68f9      	ldr	r1, [r7, #12]
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8004cba:	68f9      	ldr	r1, [r7, #12]
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
{
	encoder_ = encoder;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	609a      	str	r2, [r3, #8]
}
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cec:	b086      	sub	sp, #24
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fc fefe 	bl	8001af8 <_ZN3IMU8getOmegaEv>
 8004cfc:	ee10 3a10 	vmov	r3, s0
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fb fc39 	bl	8000578 <__aeabi_f2d>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	float distance = encoder_->getDistance();
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fc fbbc 	bl	8001490 <_ZN7Encoder11getDistanceEv>
 8004d18:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004d1c:	a374      	add	r3, pc, #464	; (adr r3, 8004ef0 <_ZN8Odometry12calcPotitionEv+0x208>)
 8004d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d26:	f7fb fc7f 	bl	8000628 <__aeabi_dmul>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f7fb fc1c 	bl	8000578 <__aeabi_f2d>
 8004d40:	4682      	mov	sl, r0
 8004d42:	468b      	mov	fp, r1
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d58:	f7fb fd90 	bl	800087c <__aeabi_ddiv>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4640      	mov	r0, r8
 8004d62:	4649      	mov	r1, r9
 8004d64:	f7fb faaa 	bl	80002bc <__adddf3>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	ec43 2b17 	vmov	d7, r2, r3
 8004d70:	eeb0 0a47 	vmov.f32	s0, s14
 8004d74:	eef0 0a67 	vmov.f32	s1, s15
 8004d78:	f00f fb32 	bl	80143e0 <cos>
 8004d7c:	ec53 2b10 	vmov	r2, r3, d0
 8004d80:	4650      	mov	r0, sl
 8004d82:	4659      	mov	r1, fp
 8004d84:	f7fb fc50 	bl	8000628 <__aeabi_dmul>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	4629      	mov	r1, r5
 8004d90:	f7fb fa94 	bl	80002bc <__adddf3>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f7fb fbe7 	bl	8000578 <__aeabi_f2d>
 8004daa:	4682      	mov	sl, r0
 8004dac:	468b      	mov	fp, r1
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dc2:	f7fb fd5b 	bl	800087c <__aeabi_ddiv>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	460b      	mov	r3, r1
 8004dca:	4640      	mov	r0, r8
 8004dcc:	4649      	mov	r1, r9
 8004dce:	f7fb fa75 	bl	80002bc <__adddf3>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	ec43 2b17 	vmov	d7, r2, r3
 8004dda:	eeb0 0a47 	vmov.f32	s0, s14
 8004dde:	eef0 0a67 	vmov.f32	s1, s15
 8004de2:	f00f fb4d 	bl	8014480 <sin>
 8004de6:	ec53 2b10 	vmov	r2, r3, d0
 8004dea:	4650      	mov	r0, sl
 8004dec:	4659      	mov	r1, fp
 8004dee:	f7fb fc1b 	bl	8000628 <__aeabi_dmul>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4620      	mov	r0, r4
 8004df8:	4629      	mov	r1, r5
 8004dfa:	f7fb fa5f 	bl	80002bc <__adddf3>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	e9c1 2306 	strd	r2, r3, [r1, #24]
	theta_= theta_ + delta_theta_;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004e14:	f7fb fa52 	bl	80002bc <__adddf3>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	e9c1 2308 	strd	r2, r3, [r1, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	ed93 7b08 	vldr	d7, [r3, #32]
 8004e2e:	eeb0 0a47 	vmov.f32	s0, s14
 8004e32:	eef0 0a67 	vmov.f32	s1, s15
 8004e36:	f00f fad3 	bl	80143e0 <cos>
 8004e3a:	ec51 0b10 	vmov	r0, r1, d0
 8004e3e:	f04f 0200 	mov.w	r2, #0
 8004e42:	4b27      	ldr	r3, [pc, #156]	; (8004ee0 <_ZN8Odometry12calcPotitionEv+0x1f8>)
 8004e44:	f7fb fbf0 	bl	8000628 <__aeabi_dmul>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	4629      	mov	r1, r5
 8004e50:	f7fb fa34 	bl	80002bc <__adddf3>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	ed93 7b08 	vldr	d7, [r3, #32]
 8004e6a:	eeb0 0a47 	vmov.f32	s0, s14
 8004e6e:	eef0 0a67 	vmov.f32	s1, s15
 8004e72:	f00f fb05 	bl	8014480 <sin>
 8004e76:	ec51 0b10 	vmov	r0, r1, d0
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	4b18      	ldr	r3, [pc, #96]	; (8004ee0 <_ZN8Odometry12calcPotitionEv+0x1f8>)
 8004e80:	f7fb fbd2 	bl	8000628 <__aeabi_dmul>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4620      	mov	r0, r4
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	f7fb fa16 	bl	80002bc <__adddf3>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	monitor_x = x_sens_;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	f7fb feb8 	bl	8000c18 <__aeabi_d2f>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	4a0e      	ldr	r2, [pc, #56]	; (8004ee4 <_ZN8Odometry12calcPotitionEv+0x1fc>)
 8004eac:	6013      	str	r3, [r2, #0]
	monitor_y = y_sens_;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	f7fb feae 	bl	8000c18 <__aeabi_d2f>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	4a0a      	ldr	r2, [pc, #40]	; (8004ee8 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004ec0:	6013      	str	r3, [r2, #0]
	monitor_theta = theta_;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ec8:	4610      	mov	r0, r2
 8004eca:	4619      	mov	r1, r3
 8004ecc:	f7fb fea4 	bl	8000c18 <__aeabi_d2f>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	4a06      	ldr	r2, [pc, #24]	; (8004eec <_ZN8Odometry12calcPotitionEv+0x204>)
 8004ed4:	6013      	str	r3, [r2, #0]
}
 8004ed6:	bf00      	nop
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ee0:	405b8000 	.word	0x405b8000
 8004ee4:	20000294 	.word	0x20000294
 8004ee8:	20000298 	.word	0x20000298
 8004eec:	2000029c 	.word	0x2000029c
 8004ef0:	d2f1a9fc 	.word	0xd2f1a9fc
 8004ef4:	3f50624d 	.word	0x3f50624d

08004ef8 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
	calcPotition();
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7ff fef1 	bl	8004ce8 <_ZN8Odometry12calcPotitionEv>
}
 8004f06:	bf00      	nop
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
	return theta_;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f1c:	ec43 2b17 	vmov	d7, r2, r3
}
 8004f20:	eeb0 0a47 	vmov.f32	s0, s14
 8004f24:	eef0 0a67 	vmov.f32	s1, s15
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	f04f 0300 	mov.w	r3, #0
 8004f44:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	y_sens_ = 0;
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	f04f 0300 	mov.w	r3, #0
 8004f52:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	theta_ = 0;
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	f04f 0300 	mov.w	r3, #0
 8004f60:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	f04f 0200 	mov.w	r2, #0
 8004f84:	f04f 0300 	mov.w	r3, #0
 8004f88:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004f8c:	6879      	ldr	r1, [r7, #4]
 8004f8e:	f04f 0200 	mov.w	r2, #0
 8004f92:	f04f 0300 	mov.w	r3, #0
 8004f96:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004fae:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8004fb6:	492a      	ldr	r1, [pc, #168]	; (8005060 <_ZN13PathFollowingC1Ev+0xf0>)
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	e9c1 2300 	strd	r2, r3, [r1]
	rtParam.ky = 0;
 8004fc4:	4926      	ldr	r1, [pc, #152]	; (8005060 <_ZN13PathFollowingC1Ev+0xf0>)
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	e9c1 2302 	strd	r2, r3, [r1, #8]
	rtParam.kt = 0;
 8004fd2:	4923      	ldr	r1, [pc, #140]	; (8005060 <_ZN13PathFollowingC1Ev+0xf0>)
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	rtU.target_x = 0;
 8004fe0:	4920      	ldr	r1, [pc, #128]	; (8005064 <_ZN13PathFollowingC1Ev+0xf4>)
 8004fe2:	f04f 0200 	mov.w	r2, #0
 8004fe6:	f04f 0300 	mov.w	r3, #0
 8004fea:	e9c1 2300 	strd	r2, r3, [r1]
	rtU.target_y = 0;
 8004fee:	491d      	ldr	r1, [pc, #116]	; (8005064 <_ZN13PathFollowingC1Ev+0xf4>)
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	rtU.th = 0;
 8004ffc:	4919      	ldr	r1, [pc, #100]	; (8005064 <_ZN13PathFollowingC1Ev+0xf4>)
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	e9c1 2304 	strd	r2, r3, [r1, #16]
	rtU.x = 0;
 800500a:	4916      	ldr	r1, [pc, #88]	; (8005064 <_ZN13PathFollowingC1Ev+0xf4>)
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	f04f 0300 	mov.w	r3, #0
 8005014:	e9c1 2306 	strd	r2, r3, [r1, #24]
	rtU.y = 0;
 8005018:	4912      	ldr	r1, [pc, #72]	; (8005064 <_ZN13PathFollowingC1Ev+0xf4>)
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	e9c1 2308 	strd	r2, r3, [r1, #32]
	rtU.th_cur = 0;
 8005026:	490f      	ldr	r1, [pc, #60]	; (8005064 <_ZN13PathFollowingC1Ev+0xf4>)
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	rtY.V_tar = 0;
 8005034:	490c      	ldr	r1, [pc, #48]	; (8005068 <_ZN13PathFollowingC1Ev+0xf8>)
 8005036:	f04f 0200 	mov.w	r2, #0
 800503a:	f04f 0300 	mov.w	r3, #0
 800503e:	e9c1 2300 	strd	r2, r3, [r1]
	rtY.tar = 0;
 8005042:	4909      	ldr	r1, [pc, #36]	; (8005068 <_ZN13PathFollowingC1Ev+0xf8>)
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	e9c1 2302 	strd	r2, r3, [r1, #8]

}
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4618      	mov	r0, r3
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	2003fdc8 	.word	0x2003fdc8
 8005064:	2003fd58 	.word	0x2003fd58
 8005068:	2003fdb8 	.word	0x2003fdb8

0800506c <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8005074:	f001 fcd1 	bl	8006a1a <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005078:	f107 0318 	add.w	r3, r7, #24
 800507c:	2201      	movs	r2, #1
 800507e:	4915      	ldr	r1, [pc, #84]	; (80050d4 <_ZN13PathFollowing4initEv+0x68>)
 8005080:	4815      	ldr	r0, [pc, #84]	; (80050d8 <_ZN13PathFollowing4initEv+0x6c>)
 8005082:	f7fc fb27 	bl	80016d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8005086:	f107 0310 	add.w	r3, r7, #16
 800508a:	2201      	movs	r2, #1
 800508c:	4913      	ldr	r1, [pc, #76]	; (80050dc <_ZN13PathFollowing4initEv+0x70>)
 800508e:	4812      	ldr	r0, [pc, #72]	; (80050d8 <_ZN13PathFollowing4initEv+0x6c>)
 8005090:	f7fc fb20 	bl	80016d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8005094:	f107 0308 	add.w	r3, r7, #8
 8005098:	2201      	movs	r2, #1
 800509a:	4911      	ldr	r1, [pc, #68]	; (80050e0 <_ZN13PathFollowing4initEv+0x74>)
 800509c:	480e      	ldr	r0, [pc, #56]	; (80050d8 <_ZN13PathFollowing4initEv+0x6c>)
 800509e:	f7fc fb19 	bl	80016d4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 80050a2:	ed97 7b06 	vldr	d7, [r7, #24]
 80050a6:	ed97 6b04 	vldr	d6, [r7, #16]
 80050aa:	ed97 5b02 	vldr	d5, [r7, #8]
 80050ae:	eeb0 2a45 	vmov.f32	s4, s10
 80050b2:	eef0 2a65 	vmov.f32	s5, s11
 80050b6:	eeb0 1a46 	vmov.f32	s2, s12
 80050ba:	eef0 1a66 	vmov.f32	s3, s13
 80050be:	eeb0 0a47 	vmov.f32	s0, s14
 80050c2:	eef0 0a67 	vmov.f32	s1, s15
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f80c 	bl	80050e4 <_ZN13PathFollowing7setGainEddd>
}
 80050cc:	bf00      	nop
 80050ce:	3720      	adds	r7, #32
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	0801a8c4 	.word	0x0801a8c4
 80050d8:	0801a8cc 	.word	0x0801a8cc
 80050dc:	0801a8d4 	.word	0x0801a8d4
 80050e0:	0801a8dc 	.word	0x0801a8dc

080050e4 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b089      	sub	sp, #36	; 0x24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	61f8      	str	r0, [r7, #28]
 80050ec:	ed87 0b04 	vstr	d0, [r7, #16]
 80050f0:	ed87 1b02 	vstr	d1, [r7, #8]
 80050f4:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 80050f8:	490a      	ldr	r1, [pc, #40]	; (8005124 <_ZN13PathFollowing7setGainEddd+0x40>)
 80050fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80050fe:	e9c1 2300 	strd	r2, r3, [r1]
	rtParam.ky = ky;
 8005102:	4908      	ldr	r1, [pc, #32]	; (8005124 <_ZN13PathFollowing7setGainEddd+0x40>)
 8005104:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005108:	e9c1 2302 	strd	r2, r3, [r1, #8]
	rtParam.kt = kt;
 800510c:	4905      	ldr	r1, [pc, #20]	; (8005124 <_ZN13PathFollowing7setGainEddd+0x40>)
 800510e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005112:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8005116:	bf00      	nop
 8005118:	3724      	adds	r7, #36	; 0x24
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	2003fdc8 	.word	0x2003fdc8

08005128 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8005130:	2088      	movs	r0, #136	; 0x88
 8005132:	f7fc fe24 	bl	8001d7e <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8005136:	2080      	movs	r0, #128	; 0x80
 8005138:	f7fc fe21 	bl	8001d7e <INA260_init>
}
 800513c:	bf00      	nop
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	0000      	movs	r0, r0
	...

08005148 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8005150:	2188      	movs	r1, #136	; 0x88
 8005152:	2002      	movs	r0, #2
 8005154:	f7fc fdb0 	bl	8001cb8 <INA260_read>
 8005158:	4603      	mov	r3, r0
 800515a:	4618      	mov	r0, r3
 800515c:	f7fb f9fa 	bl	8000554 <__aeabi_i2d>
 8005160:	a30c      	add	r3, pc, #48	; (adr r3, 8005194 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8005162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005166:	f7fb fa5f 	bl	8000628 <__aeabi_dmul>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	4610      	mov	r0, r2
 8005170:	4619      	mov	r1, r3
 8005172:	f7fb fd51 	bl	8000c18 <__aeabi_d2f>
 8005176:	4602      	mov	r2, r0
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	4a03      	ldr	r2, [pc, #12]	; (8005190 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8005182:	6013      	str	r3, [r2, #0]
}
 8005184:	bf00      	nop
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	f3af 8000 	nop.w
 8005190:	200002a0 	.word	0x200002a0
 8005194:	47ae147b 	.word	0x47ae147b
 8005198:	3f547ae1 	.word	0x3f547ae1

0800519c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	ee07 3a90 	vmov	s15, r3

}
 80051ac:	eeb0 0a67 	vmov.f32	s0, s15
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
	...

080051bc <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 80051c8:	2102      	movs	r1, #2
 80051ca:	4822      	ldr	r0, [pc, #136]	; (8005254 <_ZN12RotarySwitch8getValueEv+0x98>)
 80051cc:	f005 fe52 	bl	800ae74 <HAL_GPIO_ReadPin>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	bf0c      	ite	eq
 80051d6:	2301      	moveq	r3, #1
 80051d8:	2300      	movne	r3, #0
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <_ZN12RotarySwitch8getValueEv+0x2c>
 80051e0:	89fb      	ldrh	r3, [r7, #14]
 80051e2:	f043 0301 	orr.w	r3, r3, #1
 80051e6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 80051e8:	2108      	movs	r1, #8
 80051ea:	481a      	ldr	r0, [pc, #104]	; (8005254 <_ZN12RotarySwitch8getValueEv+0x98>)
 80051ec:	f005 fe42 	bl	800ae74 <HAL_GPIO_ReadPin>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	bf0c      	ite	eq
 80051f6:	2301      	moveq	r3, #1
 80051f8:	2300      	movne	r3, #0
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005200:	89fb      	ldrh	r3, [r7, #14]
 8005202:	f043 0302 	orr.w	r3, r3, #2
 8005206:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8005208:	2110      	movs	r1, #16
 800520a:	4812      	ldr	r0, [pc, #72]	; (8005254 <_ZN12RotarySwitch8getValueEv+0x98>)
 800520c:	f005 fe32 	bl	800ae74 <HAL_GPIO_ReadPin>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	bf0c      	ite	eq
 8005216:	2301      	moveq	r3, #1
 8005218:	2300      	movne	r3, #0
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <_ZN12RotarySwitch8getValueEv+0x6c>
 8005220:	89fb      	ldrh	r3, [r7, #14]
 8005222:	f043 0304 	orr.w	r3, r3, #4
 8005226:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8005228:	2180      	movs	r1, #128	; 0x80
 800522a:	480a      	ldr	r0, [pc, #40]	; (8005254 <_ZN12RotarySwitch8getValueEv+0x98>)
 800522c:	f005 fe22 	bl	800ae74 <HAL_GPIO_ReadPin>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	bf0c      	ite	eq
 8005236:	2301      	moveq	r3, #1
 8005238:	2300      	movne	r3, #0
 800523a:	b2db      	uxtb	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d003      	beq.n	8005248 <_ZN12RotarySwitch8getValueEv+0x8c>
 8005240:	89fb      	ldrh	r3, [r7, #14]
 8005242:	f043 0308 	orr.w	r3, r3, #8
 8005246:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8005248:	89fb      	ldrh	r3, [r7, #14]

}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40020c00 	.word	0x40020c00

08005258 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	801a      	strh	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	805a      	strh	r2, [r3, #2]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	809a      	strh	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	719a      	strb	r2, [r3, #6]
{

}
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4618      	mov	r0, r3
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
	...

08005288 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	799b      	ldrb	r3, [r3, #6]
 8005294:	2b00      	cmp	r3, #0
 8005296:	f040 80c1 	bne.w	800541c <_ZN10SideSensor12updateStatusEv+0x194>

		if(white_flag1 == false){
 800529a:	4b62      	ldr	r3, [pc, #392]	; (8005424 <_ZN10SideSensor12updateStatusEv+0x19c>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d127      	bne.n	80052f2 <_ZN10SideSensor12updateStatusEv+0x6a>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 80052a2:	2104      	movs	r1, #4
 80052a4:	4860      	ldr	r0, [pc, #384]	; (8005428 <_ZN10SideSensor12updateStatusEv+0x1a0>)
 80052a6:	f005 fde5 	bl	800ae74 <HAL_GPIO_ReadPin>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	bf0c      	ite	eq
 80052b0:	2301      	moveq	r3, #1
 80052b2:	2300      	movne	r3, #0
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d006      	beq.n	80052c8 <_ZN10SideSensor12updateStatusEv+0x40>
				cnt_r++;
 80052ba:	4b5c      	ldr	r3, [pc, #368]	; (800542c <_ZN10SideSensor12updateStatusEv+0x1a4>)
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	3301      	adds	r3, #1
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	4b5a      	ldr	r3, [pc, #360]	; (800542c <_ZN10SideSensor12updateStatusEv+0x1a4>)
 80052c4:	801a      	strh	r2, [r3, #0]
 80052c6:	e002      	b.n	80052ce <_ZN10SideSensor12updateStatusEv+0x46>
			}
			else{
				cnt_r = 0;
 80052c8:	4b58      	ldr	r3, [pc, #352]	; (800542c <_ZN10SideSensor12updateStatusEv+0x1a4>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80052ce:	4b57      	ldr	r3, [pc, #348]	; (800542c <_ZN10SideSensor12updateStatusEv+0x1a4>)
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d93f      	bls.n	8005356 <_ZN10SideSensor12updateStatusEv+0xce>
				status_ |= 0x01;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	f043 0301 	orr.w	r3, r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 80052e4:	4b4f      	ldr	r3, [pc, #316]	; (8005424 <_ZN10SideSensor12updateStatusEv+0x19c>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 80052ea:	4b50      	ldr	r3, [pc, #320]	; (800542c <_ZN10SideSensor12updateStatusEv+0x1a4>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	801a      	strh	r2, [r3, #0]
 80052f0:	e031      	b.n	8005356 <_ZN10SideSensor12updateStatusEv+0xce>
			}

		}
		else if(white_flag1 == true){
 80052f2:	4b4c      	ldr	r3, [pc, #304]	; (8005424 <_ZN10SideSensor12updateStatusEv+0x19c>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d12d      	bne.n	8005356 <_ZN10SideSensor12updateStatusEv+0xce>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 80052fa:	2104      	movs	r1, #4
 80052fc:	484a      	ldr	r0, [pc, #296]	; (8005428 <_ZN10SideSensor12updateStatusEv+0x1a0>)
 80052fe:	f005 fdb9 	bl	800ae74 <HAL_GPIO_ReadPin>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	bf14      	ite	ne
 8005308:	2301      	movne	r3, #1
 800530a:	2300      	moveq	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d006      	beq.n	8005320 <_ZN10SideSensor12updateStatusEv+0x98>
				cnt_r++;
 8005312:	4b46      	ldr	r3, [pc, #280]	; (800542c <_ZN10SideSensor12updateStatusEv+0x1a4>)
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	3301      	adds	r3, #1
 8005318:	b29a      	uxth	r2, r3
 800531a:	4b44      	ldr	r3, [pc, #272]	; (800542c <_ZN10SideSensor12updateStatusEv+0x1a4>)
 800531c:	801a      	strh	r2, [r3, #0]
 800531e:	e002      	b.n	8005326 <_ZN10SideSensor12updateStatusEv+0x9e>
			}
			else{
				cnt_r = 0;
 8005320:	4b42      	ldr	r3, [pc, #264]	; (800542c <_ZN10SideSensor12updateStatusEv+0x1a4>)
 8005322:	2200      	movs	r2, #0
 8005324:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8005326:	4b41      	ldr	r3, [pc, #260]	; (800542c <_ZN10SideSensor12updateStatusEv+0x1a4>)
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	2b04      	cmp	r3, #4
 800532c:	d913      	bls.n	8005356 <_ZN10SideSensor12updateStatusEv+0xce>
				status_ ^= 0x01;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	f083 0301 	eor.w	r3, r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 800533c:	4b39      	ldr	r3, [pc, #228]	; (8005424 <_ZN10SideSensor12updateStatusEv+0x19c>)
 800533e:	2200      	movs	r2, #0
 8005340:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	889b      	ldrh	r3, [r3, #4]
 8005346:	3301      	adds	r3, #1
 8005348:	b29a      	uxth	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	889a      	ldrh	r2, [r3, #4]
 8005352:	4b37      	ldr	r3, [pc, #220]	; (8005430 <_ZN10SideSensor12updateStatusEv+0x1a8>)
 8005354:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 8005356:	4b37      	ldr	r3, [pc, #220]	; (8005434 <_ZN10SideSensor12updateStatusEv+0x1ac>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d127      	bne.n	80053ae <_ZN10SideSensor12updateStatusEv+0x126>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 800535e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005362:	4835      	ldr	r0, [pc, #212]	; (8005438 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8005364:	f005 fd86 	bl	800ae74 <HAL_GPIO_ReadPin>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	bf0c      	ite	eq
 800536e:	2301      	moveq	r3, #1
 8005370:	2300      	movne	r3, #0
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d006      	beq.n	8005386 <_ZN10SideSensor12updateStatusEv+0xfe>
				cnt_l++;
 8005378:	4b30      	ldr	r3, [pc, #192]	; (800543c <_ZN10SideSensor12updateStatusEv+0x1b4>)
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	3301      	adds	r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	4b2e      	ldr	r3, [pc, #184]	; (800543c <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8005382:	801a      	strh	r2, [r3, #0]
 8005384:	e002      	b.n	800538c <_ZN10SideSensor12updateStatusEv+0x104>
			}
			else{
				cnt_l = 0;
 8005386:	4b2d      	ldr	r3, [pc, #180]	; (800543c <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8005388:	2200      	movs	r2, #0
 800538a:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800538c:	4b2b      	ldr	r3, [pc, #172]	; (800543c <_ZN10SideSensor12updateStatusEv+0x1b4>)
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	2b04      	cmp	r3, #4
 8005392:	d90c      	bls.n	80053ae <_ZN10SideSensor12updateStatusEv+0x126>
				status_ |= 0x02;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	f043 0302 	orr.w	r3, r3, #2
 800539c:	b29a      	uxth	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 80053a2:	4b24      	ldr	r3, [pc, #144]	; (8005434 <_ZN10SideSensor12updateStatusEv+0x1ac>)
 80053a4:	2201      	movs	r2, #1
 80053a6:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 80053a8:	4b24      	ldr	r3, [pc, #144]	; (800543c <_ZN10SideSensor12updateStatusEv+0x1b4>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 80053ae:	4b21      	ldr	r3, [pc, #132]	; (8005434 <_ZN10SideSensor12updateStatusEv+0x1ac>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d12e      	bne.n	8005414 <_ZN10SideSensor12updateStatusEv+0x18c>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 80053b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053ba:	481f      	ldr	r0, [pc, #124]	; (8005438 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 80053bc:	f005 fd5a 	bl	800ae74 <HAL_GPIO_ReadPin>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	bf14      	ite	ne
 80053c6:	2301      	movne	r3, #1
 80053c8:	2300      	moveq	r3, #0
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d006      	beq.n	80053de <_ZN10SideSensor12updateStatusEv+0x156>
				cnt_l++;
 80053d0:	4b1a      	ldr	r3, [pc, #104]	; (800543c <_ZN10SideSensor12updateStatusEv+0x1b4>)
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	3301      	adds	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	4b18      	ldr	r3, [pc, #96]	; (800543c <_ZN10SideSensor12updateStatusEv+0x1b4>)
 80053da:	801a      	strh	r2, [r3, #0]
 80053dc:	e002      	b.n	80053e4 <_ZN10SideSensor12updateStatusEv+0x15c>
			}
			else{
				cnt_l = 0;
 80053de:	4b17      	ldr	r3, [pc, #92]	; (800543c <_ZN10SideSensor12updateStatusEv+0x1b4>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 80053e4:	4b15      	ldr	r3, [pc, #84]	; (800543c <_ZN10SideSensor12updateStatusEv+0x1b4>)
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	2b04      	cmp	r3, #4
 80053ea:	d913      	bls.n	8005414 <_ZN10SideSensor12updateStatusEv+0x18c>
				status_ ^= 0x02;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	f083 0302 	eor.w	r3, r3, #2
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 80053fa:	4b0e      	ldr	r3, [pc, #56]	; (8005434 <_ZN10SideSensor12updateStatusEv+0x1ac>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	885b      	ldrh	r3, [r3, #2]
 8005404:	3301      	adds	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	885a      	ldrh	r2, [r3, #2]
 8005410:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005412:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	881a      	ldrh	r2, [r3, #0]
 8005418:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <_ZN10SideSensor12updateStatusEv+0x1bc>)
 800541a:	801a      	strh	r2, [r3, #0]
	}

}
 800541c:	bf00      	nop
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	200002aa 	.word	0x200002aa
 8005428:	40021000 	.word	0x40021000
 800542c:	200002ae 	.word	0x200002ae
 8005430:	200002a8 	.word	0x200002a8
 8005434:	200002ab 	.word	0x200002ab
 8005438:	40020c00 	.word	0x40020c00
 800543c:	200002ac 	.word	0x200002ac
 8005440:	200002a6 	.word	0x200002a6
 8005444:	200002a4 	.word	0x200002a4

08005448 <_ZN10SideSensor9getStatusEv>:
uint16_t SideSensor::getStatus()
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
	return status_;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	881b      	ldrh	r3, [r3, #0]
}
 8005454:	4618      	mov	r0, r3
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	889b      	ldrh	r3, [r3, #4]
}
 800546c:	4618      	mov	r0, r3
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	809a      	strh	r2, [r3, #4]
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	719a      	strb	r2, [r3, #6]
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	719a      	strb	r2, [r3, #6]
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	799b      	ldrb	r3, [r3, #6]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4a10      	ldr	r2, [pc, #64]	; (8005534 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 80054f4:	3308      	adds	r3, #8
 80054f6:	4611      	mov	r1, r2
 80054f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80054fc:	4618      	mov	r0, r3
 80054fe:	f010 f81f 	bl	8015540 <memcpy>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	0801a900 	.word	0x0801a900

08005538 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800554a:	2b01      	cmp	r3, #1
 800554c:	d110      	bne.n	8005570 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	ed97 0a00 	vldr	s0, [r7]
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff f87a 	bl	8004650 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8005566:	eeb0 0a67 	vmov.f32	s0, s15
 800556a:	4610      	mov	r0, r2
 800556c:	f7ff f8ac 	bl	80046c8 <_ZN6Logger9storeLog2Ef>
	}

}
 8005570:	bf00      	nop
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a07      	ldr	r2, [pc, #28]	; (80055a4 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 8005586:	4908      	ldr	r1, [pc, #32]	; (80055a8 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8005588:	4618      	mov	r0, r3
 800558a:	f7ff f984 	bl	8004896 <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a06      	ldr	r2, [pc, #24]	; (80055ac <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 8005594:	4904      	ldr	r1, [pc, #16]	; (80055a8 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8005596:	4618      	mov	r0, r3
 8005598:	f7ff f98f 	bl	80048ba <_ZN6Logger9saveLogs2EPKcS1_>
}
 800559c:	bf00      	nop
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	0801aaf4 	.word	0x0801aaf4
 80055a8:	0801ab00 	.word	0x0801ab00
 80055ac:	0801ab0c 	.word	0x0801ab0c

080055b0 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 80055b0:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d146      	bne.n	8005652 <_ZN20SystemIdentification10updateMsigEv+0xa2>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80055d0:	461a      	mov	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	3204      	adds	r2, #4
 80055d6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80055da:	ee07 3a90 	vmov	s15, r3
 80055de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80055f2:	3301      	adds	r3, #1
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005602:	4a16      	ldr	r2, [pc, #88]	; (800565c <_ZN20SystemIdentification10updateMsigEv+0xac>)
 8005604:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800560c:	2bf9      	cmp	r3, #249	; 0xf9
 800560e:	d903      	bls.n	8005618 <_ZN20SystemIdentification10updateMsigEv+0x68>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	22fa      	movs	r2, #250	; 0xfa
 8005614:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685c      	ldr	r4, [r3, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005622:	4618      	mov	r0, r3
 8005624:	f7fa ffa8 	bl	8000578 <__aeabi_f2d>
 8005628:	4680      	mov	r8, r0
 800562a:	4689      	mov	r9, r1
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8005632:	eef1 7a67 	vneg.f32	s15, s15
 8005636:	ee17 3a90 	vmov	r3, s15
 800563a:	4618      	mov	r0, r3
 800563c:	f7fa ff9c 	bl	8000578 <__aeabi_f2d>
 8005640:	4602      	mov	r2, r0
 8005642:	460b      	mov	r3, r1
 8005644:	ec43 2b11 	vmov	d1, r2, r3
 8005648:	ec49 8b10 	vmov	d0, r8, r9
 800564c:	4620      	mov	r0, r4
 800564e:	f7ff fa9f 	bl	8004b90 <_ZN5Motor8setRatioEdd>

	}

}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 800565c:	200002b0 	.word	0x200002b0

08005660 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4618      	mov	r0, r3
 800568e:	f7ff f9ee 	bl	8004a6e <_ZN6Logger5startEv>
	processing_flag_ = true;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 800569a:	bf00      	nop
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	0000      	movs	r0, r0
 80056a4:	0000      	movs	r0, r0
	...

080056a8 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
	logger_->stop();
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7ff f9eb 	bl	8004a90 <_ZN6Logger4stopEv>
	processing_flag_ = false;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80056e8 <_ZN20SystemIdentification4stopEv+0x40>
 80056d2:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80056e8 <_ZN20SystemIdentification4stopEv+0x40>
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7ff fa5a 	bl	8004b90 <_ZN5Motor8setRatioEdd>
}
 80056dc:	bf00      	nop
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	f3af 8000 	nop.w
	...

080056f0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	605a      	str	r2, [r3, #4]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	609a      	str	r2, [r3, #8]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	60da      	str	r2, [r3, #12]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	611a      	str	r2, [r3, #16]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	615a      	str	r2, [r3, #20]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	619a      	str	r2, [r3, #24]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	61da      	str	r2, [r3, #28]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f04f 0200 	mov.w	r2, #0
 8005744:	621a      	str	r2, [r3, #32]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	625a      	str	r2, [r3, #36]	; 0x24
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4618      	mov	r0, r3
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
	...

08005788 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005794:	f107 020c 	add.w	r2, r7, #12
 8005798:	f107 0110 	add.w	r1, r7, #16
 800579c:	4618      	mov	r0, r3
 800579e:	f7fb fe63 	bl	8001468 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 80057a2:	ed97 7a04 	vldr	s14, [r7, #16]
 80057a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80057aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057ae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80057b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80057b6:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 80057ba:	6978      	ldr	r0, [r7, #20]
 80057bc:	f7fa fedc 	bl	8000578 <__aeabi_f2d>
 80057c0:	a30b      	add	r3, pc, #44	; (adr r3, 80057f0 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 80057c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c6:	f7fa ff2f 	bl	8000628 <__aeabi_dmul>
 80057ca:	4602      	mov	r2, r0
 80057cc:	460b      	mov	r3, r1
 80057ce:	4610      	mov	r0, r2
 80057d0:	4619      	mov	r1, r3
 80057d2:	f7fb fa21 	bl	8000c18 <__aeabi_d2f>
 80057d6:	4602      	mov	r2, r0
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	ee07 3a90 	vmov	s15, r3
}
 80057e4:	eeb0 0a67 	vmov.f32	s0, s15
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	1ab1d998 	.word	0x1ab1d998
 80057f4:	3f7830b5 	.word	0x3f7830b5

080057f8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 80057f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80057fc:	b086      	sub	sp, #24
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	ed93 7a00 	vldr	s14, [r3]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	edd3 7a02 	vldr	s15, [r3, #8]
 800580e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005812:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800581c:	2b01      	cmp	r3, #1
 800581e:	d107      	bne.n	8005830 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x38>
		v_i = 0;
 8005820:	4b47      	ldr	r3, [pc, #284]	; (8005940 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005822:	f04f 0200 	mov.w	r2, #0
 8005826:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	edd3 7a04 	vldr	s15, [r3, #16]
 8005836:	ed97 7a05 	vldr	s14, [r7, #20]
 800583a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583e:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005842:	4b3f      	ldr	r3, [pc, #252]	; (8005940 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f7fa fe96 	bl	8000578 <__aeabi_f2d>
 800584c:	4604      	mov	r4, r0
 800584e:	460d      	mov	r5, r1
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	ed93 7a06 	vldr	s14, [r3, #24]
 8005856:	edd7 7a05 	vldr	s15, [r7, #20]
 800585a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585e:	ee17 0a90 	vmov	r0, s15
 8005862:	f7fa fe89 	bl	8000578 <__aeabi_f2d>
 8005866:	a334      	add	r3, pc, #208	; (adr r3, 8005938 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586c:	f7fa fedc 	bl	8000628 <__aeabi_dmul>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4620      	mov	r0, r4
 8005876:	4629      	mov	r1, r5
 8005878:	f7fa fd20 	bl	80002bc <__adddf3>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	4610      	mov	r0, r2
 8005882:	4619      	mov	r1, r3
 8005884:	f7fb f9c8 	bl	8000c18 <__aeabi_d2f>
 8005888:	4603      	mov	r3, r0
 800588a:	4a2d      	ldr	r2, [pc, #180]	; (8005940 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800588c:	6013      	str	r3, [r2, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	ed93 7a05 	vldr	s14, [r3, #20]
 8005894:	4b2b      	ldr	r3, [pc, #172]	; (8005944 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005896:	edd3 7a00 	vldr	s15, [r3]
 800589a:	edd7 6a05 	vldr	s13, [r7, #20]
 800589e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80058a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a6:	ee17 0a90 	vmov	r0, s15
 80058aa:	f7fa fe65 	bl	8000578 <__aeabi_f2d>
 80058ae:	a322      	add	r3, pc, #136	; (adr r3, 8005938 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 80058b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b4:	f7fa ffe2 	bl	800087c <__aeabi_ddiv>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	4610      	mov	r0, r2
 80058be:	4619      	mov	r1, r3
 80058c0:	f7fb f9aa 	bl	8000c18 <__aeabi_d2f>
 80058c4:	4603      	mov	r3, r0
 80058c6:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 80058c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80058cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80058d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058d4:	4b1a      	ldr	r3, [pc, #104]	; (8005940 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80058d6:	edd3 7a00 	vldr	s15, [r3]
 80058da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058de:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80058ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80058f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058f4:	ee17 0a90 	vmov	r0, s15
 80058f8:	f7fa fe3e 	bl	8000578 <__aeabi_f2d>
 80058fc:	4680      	mov	r8, r0
 80058fe:	4689      	mov	r9, r1
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005906:	ed97 7a02 	vldr	s14, [r7, #8]
 800590a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800590e:	ee17 0a90 	vmov	r0, s15
 8005912:	f7fa fe31 	bl	8000578 <__aeabi_f2d>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	ec43 2b11 	vmov	d1, r2, r3
 800591e:	ec49 8b10 	vmov	d0, r8, r9
 8005922:	4620      	mov	r0, r4
 8005924:	f7ff f934 	bl	8004b90 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005928:	4a06      	ldr	r2, [pc, #24]	; (8005944 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	6013      	str	r3, [r2, #0]
}
 800592e:	bf00      	nop
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005938:	d2f1a9fc 	.word	0xd2f1a9fc
 800593c:	3f50624d 	.word	0x3f50624d
 8005940:	200002b8 	.word	0x200002b8
 8005944:	200002b4 	.word	0x200002b4

08005948 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	ed87 0a02 	vstr	s0, [r7, #8]
 8005954:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	605a      	str	r2, [r3, #4]
}
 8005964:	bf00      	nop
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	ed87 0a02 	vstr	s0, [r7, #8]
 800597c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800598c:	bf00      	nop
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80059a4:	edc7 0a01 	vstr	s1, [r7, #4]
 80059a8:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	615a      	str	r2, [r3, #20]
}
 80059be:	bf00      	nop
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b085      	sub	sp, #20
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	60f8      	str	r0, [r7, #12]
 80059d2:	ed87 0a02 	vstr	s0, [r7, #8]
 80059d6:	edc7 0a01 	vstr	s1, [r7, #4]
 80059da:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	621a      	str	r2, [r3, #32]
}
 80059f0:	bf00      	nop
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7ff febf 	bl	8005788 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d102      	bne.n	8005a1a <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff feef 	bl	80057f8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
	...

08005a48 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005a78 <_ZN12VelocityCtrl4stopEv+0x30>
 8005a60:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005a78 <_ZN12VelocityCtrl4stopEv+0x30>
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7ff f893 	bl	8004b90 <_ZN5Motor8setRatioEdd>

}
 8005a6a:	bf00      	nop
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	f3af 8000 	nop.w
	...

08005a80 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	ee07 3a90 	vmov	s15, r3
}
 8005a90:	eeb0 0a67 	vmov.f32	s0, s15
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b083      	sub	sp, #12
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005aa6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005aaa:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d013      	beq.n	8005ade <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8005ab6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005aba:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8005abe:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00b      	beq.n	8005ade <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8005ac6:	e000      	b.n	8005aca <ITM_SendChar+0x2c>
    {
      __NOP();
 8005ac8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8005aca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0f9      	beq.n	8005ac8 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8005ad4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	b2d2      	uxtb	r2, r2
 8005adc:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8005ade:	687b      	ldr	r3, [r7, #4]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8005af8:	2300      	movs	r3, #0
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	e009      	b.n	8005b12 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	60ba      	str	r2, [r7, #8]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7ff ffc9 	bl	8005a9e <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	617b      	str	r3, [r7, #20]
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	dbf1      	blt.n	8005afe <_write+0x12>
  }
  return len;
 8005b1a:	687b      	ldr	r3, [r7, #4]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3718      	adds	r7, #24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a1e      	ldr	r2, [pc, #120]	; (8005bac <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d10e      	bne.n	8005b54 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005b36:	f001 fe9d 	bl	8007874 <cppFlip100ns>

		tim7_timer++;
 8005b3a:	4b1d      	ldr	r3, [pc, #116]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	4a1b      	ldr	r2, [pc, #108]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005b42:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005b44:	4b1a      	ldr	r3, [pc, #104]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1a      	ldr	r2, [pc, #104]	; (8005bb4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d902      	bls.n	8005b54 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005b4e:	4b18      	ldr	r3, [pc, #96]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a17      	ldr	r2, [pc, #92]	; (8005bb8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d10e      	bne.n	8005b7c <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005b5e:	f001 fe3f 	bl	80077e0 <cppFlip1ms>

		tim6_timer++;
 8005b62:	4b16      	ldr	r3, [pc, #88]	; (8005bbc <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3301      	adds	r3, #1
 8005b68:	4a14      	ldr	r2, [pc, #80]	; (8005bbc <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005b6a:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005b6c:	4b13      	ldr	r3, [pc, #76]	; (8005bbc <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a10      	ldr	r2, [pc, #64]	; (8005bb4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d902      	bls.n	8005b7c <HAL_TIM_PeriodElapsedCallback+0x58>
 8005b76:	4b11      	ldr	r3, [pc, #68]	; (8005bbc <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a0f      	ldr	r2, [pc, #60]	; (8005bc0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d10e      	bne.n	8005ba4 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005b86:	f001 fe7f 	bl	8007888 <cppFlip10ms>

		tim13_timer++;
 8005b8a:	4b0e      	ldr	r3, [pc, #56]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	4a0c      	ldr	r2, [pc, #48]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005b92:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005b94:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a06      	ldr	r2, [pc, #24]	; (8005bb4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d902      	bls.n	8005ba4 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005b9e:	4b09      	ldr	r3, [pc, #36]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]
	}

}
 8005ba4:	bf00      	nop
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	40001400 	.word	0x40001400
 8005bb0:	2003fa78 	.word	0x2003fa78
 8005bb4:	0001869f 	.word	0x0001869f
 8005bb8:	40001000 	.word	0x40001000
 8005bbc:	2003fa34 	.word	0x2003fa34
 8005bc0:	40001c00 	.word	0x40001c00
 8005bc4:	2003fa7c 	.word	0x2003fa7c

08005bc8 <init>:

void init()
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005bd2:	4808      	ldr	r0, [pc, #32]	; (8005bf4 <init+0x2c>)
 8005bd4:	f005 f966 	bl	800aea4 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005bd8:	4807      	ldr	r0, [pc, #28]	; (8005bf8 <init+0x30>)
 8005bda:	f009 f842 	bl	800ec62 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005bde:	4807      	ldr	r0, [pc, #28]	; (8005bfc <init+0x34>)
 8005be0:	f009 f83f 	bl	800ec62 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005be4:	4806      	ldr	r0, [pc, #24]	; (8005c00 <init+0x38>)
 8005be6:	f009 f83c 	bl	800ec62 <HAL_TIM_Base_Start_IT>

	cppInit();
 8005bea:	f001 fd57 	bl	800769c <cppInit>

	//path_following_initialize();

}
 8005bee:	bf00      	nop
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	40021000 	.word	0x40021000
 8005bf8:	2003fb60 	.word	0x2003fb60
 8005bfc:	2003fd04 	.word	0x2003fd04
 8005c00:	2003fa80 	.word	0x2003fa80

08005c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005c08:	f003 fe3e 	bl	8009888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005c0c:	f000 f82a 	bl	8005c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c10:	f000 fdbc 	bl	800678c <MX_GPIO_Init>
  MX_DMA_Init();
 8005c14:	f000 fd8a 	bl	800672c <MX_DMA_Init>
  MX_I2C2_Init();
 8005c18:	f000 f9e8 	bl	8005fec <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005c1c:	f000 fa14 	bl	8006048 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005c20:	f000 fa32 	bl	8006088 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005c24:	f000 fa66 	bl	80060f4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005c28:	f000 fb70 	bl	800630c <MX_TIM4_Init>
  MX_TIM8_Init();
 8005c2c:	f000 fc3c 	bl	80064a8 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005c30:	f000 fd52 	bl	80066d8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005c34:	f00b f808 	bl	8010c48 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005c38:	f000 fbcc 	bl	80063d4 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005c3c:	f000 f9a8 	bl	8005f90 <MX_I2C1_Init>
  MX_TIM3_Init();
 8005c40:	f000 fb00 	bl	8006244 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005c44:	f000 fc88 	bl	8006558 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005c48:	f000 fcd4 	bl	80065f4 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005c4c:	f000 f898 	bl	8005d80 <MX_ADC2_Init>
  MX_TIM7_Init();
 8005c50:	f000 fbf6 	bl	8006440 <MX_TIM7_Init>
  MX_TIM13_Init();
 8005c54:	f000 fd1c 	bl	8006690 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005c58:	f7ff ffb6 	bl	8005bc8 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005c5c:	f001 fe2c 	bl	80078b8 <cppLoop>
 8005c60:	e7fc      	b.n	8005c5c <main+0x58>
	...

08005c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b0a4      	sub	sp, #144	; 0x90
 8005c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005c6a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005c6e:	2234      	movs	r2, #52	; 0x34
 8005c70:	2100      	movs	r1, #0
 8005c72:	4618      	mov	r0, r3
 8005c74:	f00f fc72 	bl	801555c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005c78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	605a      	str	r2, [r3, #4]
 8005c82:	609a      	str	r2, [r3, #8]
 8005c84:	60da      	str	r2, [r3, #12]
 8005c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005c88:	f107 030c 	add.w	r3, r7, #12
 8005c8c:	223c      	movs	r2, #60	; 0x3c
 8005c8e:	2100      	movs	r1, #0
 8005c90:	4618      	mov	r0, r3
 8005c92:	f00f fc63 	bl	801555c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c96:	2300      	movs	r3, #0
 8005c98:	60bb      	str	r3, [r7, #8]
 8005c9a:	4b37      	ldr	r3, [pc, #220]	; (8005d78 <SystemClock_Config+0x114>)
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	4a36      	ldr	r2, [pc, #216]	; (8005d78 <SystemClock_Config+0x114>)
 8005ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ca6:	4b34      	ldr	r3, [pc, #208]	; (8005d78 <SystemClock_Config+0x114>)
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	607b      	str	r3, [r7, #4]
 8005cb6:	4b31      	ldr	r3, [pc, #196]	; (8005d7c <SystemClock_Config+0x118>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a30      	ldr	r2, [pc, #192]	; (8005d7c <SystemClock_Config+0x118>)
 8005cbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	4b2e      	ldr	r3, [pc, #184]	; (8005d7c <SystemClock_Config+0x118>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005cca:	607b      	str	r3, [r7, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005cd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cd6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005cd8:	2302      	movs	r3, #2
 8005cda:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005cdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005ce0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005ce2:	2308      	movs	r3, #8
 8005ce4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005ce6:	23b4      	movs	r3, #180	; 0xb4
 8005ce8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005cec:	2302      	movs	r3, #2
 8005cee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005cf2:	2308      	movs	r3, #8
 8005cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005cfe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005d02:	4618      	mov	r0, r3
 8005d04:	f006 fd06 	bl	800c714 <HAL_RCC_OscConfig>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005d0e:	f000 fe7f 	bl	8006a10 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005d12:	f006 f877 	bl	800be04 <HAL_PWREx_EnableOverDrive>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005d1c:	f000 fe78 	bl	8006a10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d20:	230f      	movs	r3, #15
 8005d22:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d24:	2302      	movs	r3, #2
 8005d26:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005d2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005d30:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d36:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005d38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d3c:	2105      	movs	r1, #5
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f006 f8b0 	bl	800bea4 <HAL_RCC_ClockConfig>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005d4a:	f000 fe61 	bl	8006a10 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8005d4e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005d52:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005d54:	2300      	movs	r3, #0
 8005d56:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d5c:	f107 030c 	add.w	r3, r7, #12
 8005d60:	4618      	mov	r0, r3
 8005d62:	f006 fa99 	bl	800c298 <HAL_RCCEx_PeriphCLKConfig>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d001      	beq.n	8005d70 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005d6c:	f000 fe50 	bl	8006a10 <Error_Handler>
  }
}
 8005d70:	bf00      	nop
 8005d72:	3790      	adds	r7, #144	; 0x90
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	40023800 	.word	0x40023800
 8005d7c:	40007000 	.word	0x40007000

08005d80 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005d86:	463b      	mov	r3, r7
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	605a      	str	r2, [r3, #4]
 8005d8e:	609a      	str	r2, [r3, #8]
 8005d90:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005d92:	4b7c      	ldr	r3, [pc, #496]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005d94:	4a7c      	ldr	r2, [pc, #496]	; (8005f88 <MX_ADC2_Init+0x208>)
 8005d96:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005d98:	4b7a      	ldr	r3, [pc, #488]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005d9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005d9e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005da0:	4b78      	ldr	r3, [pc, #480]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005da6:	4b77      	ldr	r3, [pc, #476]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005da8:	2201      	movs	r2, #1
 8005daa:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005dac:	4b75      	ldr	r3, [pc, #468]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005dae:	2201      	movs	r2, #1
 8005db0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005db2:	4b74      	ldr	r3, [pc, #464]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005dba:	4b72      	ldr	r3, [pc, #456]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005dc0:	4b70      	ldr	r3, [pc, #448]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005dc2:	4a72      	ldr	r2, [pc, #456]	; (8005f8c <MX_ADC2_Init+0x20c>)
 8005dc4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005dc6:	4b6f      	ldr	r3, [pc, #444]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005dcc:	4b6d      	ldr	r3, [pc, #436]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005dce:	220e      	movs	r2, #14
 8005dd0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005dd2:	4b6c      	ldr	r3, [pc, #432]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005dda:	4b6a      	ldr	r3, [pc, #424]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005ddc:	2201      	movs	r2, #1
 8005dde:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005de0:	4868      	ldr	r0, [pc, #416]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005de2:	f003 fde7 	bl	80099b4 <HAL_ADC_Init>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005dec:	f000 fe10 	bl	8006a10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005df0:	230a      	movs	r3, #10
 8005df2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005df4:	2301      	movs	r3, #1
 8005df6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005df8:	2306      	movs	r3, #6
 8005dfa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005dfc:	463b      	mov	r3, r7
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4860      	ldr	r0, [pc, #384]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005e02:	f003 ff2b 	bl	8009c5c <HAL_ADC_ConfigChannel>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005e0c:	f000 fe00 	bl	8006a10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005e10:	230b      	movs	r3, #11
 8005e12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005e14:	2302      	movs	r3, #2
 8005e16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e18:	463b      	mov	r3, r7
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	4859      	ldr	r0, [pc, #356]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005e1e:	f003 ff1d 	bl	8009c5c <HAL_ADC_ConfigChannel>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005e28:	f000 fdf2 	bl	8006a10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005e2c:	230c      	movs	r3, #12
 8005e2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005e30:	2303      	movs	r3, #3
 8005e32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e34:	463b      	mov	r3, r7
 8005e36:	4619      	mov	r1, r3
 8005e38:	4852      	ldr	r0, [pc, #328]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005e3a:	f003 ff0f 	bl	8009c5c <HAL_ADC_ConfigChannel>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005e44:	f000 fde4 	bl	8006a10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005e48:	230d      	movs	r3, #13
 8005e4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005e4c:	2304      	movs	r3, #4
 8005e4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e50:	463b      	mov	r3, r7
 8005e52:	4619      	mov	r1, r3
 8005e54:	484b      	ldr	r0, [pc, #300]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005e56:	f003 ff01 	bl	8009c5c <HAL_ADC_ConfigChannel>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d001      	beq.n	8005e64 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005e60:	f000 fdd6 	bl	8006a10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005e64:	2300      	movs	r3, #0
 8005e66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005e68:	2305      	movs	r3, #5
 8005e6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e6c:	463b      	mov	r3, r7
 8005e6e:	4619      	mov	r1, r3
 8005e70:	4844      	ldr	r0, [pc, #272]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005e72:	f003 fef3 	bl	8009c5c <HAL_ADC_ConfigChannel>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005e7c:	f000 fdc8 	bl	8006a10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005e80:	2301      	movs	r3, #1
 8005e82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005e84:	2306      	movs	r3, #6
 8005e86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e88:	463b      	mov	r3, r7
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	483d      	ldr	r0, [pc, #244]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005e8e:	f003 fee5 	bl	8009c5c <HAL_ADC_ConfigChannel>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d001      	beq.n	8005e9c <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005e98:	f000 fdba 	bl	8006a10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005ea0:	2307      	movs	r3, #7
 8005ea2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ea4:	463b      	mov	r3, r7
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4836      	ldr	r0, [pc, #216]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005eaa:	f003 fed7 	bl	8009c5c <HAL_ADC_ConfigChannel>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d001      	beq.n	8005eb8 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005eb4:	f000 fdac 	bl	8006a10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005ebc:	2308      	movs	r3, #8
 8005ebe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ec0:	463b      	mov	r3, r7
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	482f      	ldr	r0, [pc, #188]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005ec6:	f003 fec9 	bl	8009c5c <HAL_ADC_ConfigChannel>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8005ed0:	f000 fd9e 	bl	8006a10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005ed4:	2304      	movs	r3, #4
 8005ed6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8005ed8:	2309      	movs	r3, #9
 8005eda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005edc:	463b      	mov	r3, r7
 8005ede:	4619      	mov	r1, r3
 8005ee0:	4828      	ldr	r0, [pc, #160]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005ee2:	f003 febb 	bl	8009c5c <HAL_ADC_ConfigChannel>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8005eec:	f000 fd90 	bl	8006a10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005ef0:	2305      	movs	r3, #5
 8005ef2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005ef4:	230a      	movs	r3, #10
 8005ef6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ef8:	463b      	mov	r3, r7
 8005efa:	4619      	mov	r1, r3
 8005efc:	4821      	ldr	r0, [pc, #132]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005efe:	f003 fead 	bl	8009c5c <HAL_ADC_ConfigChannel>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8005f08:	f000 fd82 	bl	8006a10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005f0c:	2306      	movs	r3, #6
 8005f0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005f10:	230b      	movs	r3, #11
 8005f12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f14:	463b      	mov	r3, r7
 8005f16:	4619      	mov	r1, r3
 8005f18:	481a      	ldr	r0, [pc, #104]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005f1a:	f003 fe9f 	bl	8009c5c <HAL_ADC_ConfigChannel>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8005f24:	f000 fd74 	bl	8006a10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005f28:	2307      	movs	r3, #7
 8005f2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005f2c:	230c      	movs	r3, #12
 8005f2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f30:	463b      	mov	r3, r7
 8005f32:	4619      	mov	r1, r3
 8005f34:	4813      	ldr	r0, [pc, #76]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005f36:	f003 fe91 	bl	8009c5c <HAL_ADC_ConfigChannel>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8005f40:	f000 fd66 	bl	8006a10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005f44:	2308      	movs	r3, #8
 8005f46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8005f48:	230d      	movs	r3, #13
 8005f4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f4c:	463b      	mov	r3, r7
 8005f4e:	4619      	mov	r1, r3
 8005f50:	480c      	ldr	r0, [pc, #48]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005f52:	f003 fe83 	bl	8009c5c <HAL_ADC_ConfigChannel>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8005f5c:	f000 fd58 	bl	8006a10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005f60:	2309      	movs	r3, #9
 8005f62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8005f64:	230e      	movs	r3, #14
 8005f66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f68:	463b      	mov	r3, r7
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4805      	ldr	r0, [pc, #20]	; (8005f84 <MX_ADC2_Init+0x204>)
 8005f6e:	f003 fe75 	bl	8009c5c <HAL_ADC_ConfigChannel>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8005f78:	f000 fd4a 	bl	8006a10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005f7c:	bf00      	nop
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	2003f904 	.word	0x2003f904
 8005f88:	40012100 	.word	0x40012100
 8005f8c:	0f000001 	.word	0x0f000001

08005f90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005f94:	4b12      	ldr	r3, [pc, #72]	; (8005fe0 <MX_I2C1_Init+0x50>)
 8005f96:	4a13      	ldr	r2, [pc, #76]	; (8005fe4 <MX_I2C1_Init+0x54>)
 8005f98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005f9a:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <MX_I2C1_Init+0x50>)
 8005f9c:	4a12      	ldr	r2, [pc, #72]	; (8005fe8 <MX_I2C1_Init+0x58>)
 8005f9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005fa0:	4b0f      	ldr	r3, [pc, #60]	; (8005fe0 <MX_I2C1_Init+0x50>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005fa6:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <MX_I2C1_Init+0x50>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005fac:	4b0c      	ldr	r3, [pc, #48]	; (8005fe0 <MX_I2C1_Init+0x50>)
 8005fae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005fb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005fb4:	4b0a      	ldr	r3, [pc, #40]	; (8005fe0 <MX_I2C1_Init+0x50>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005fba:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <MX_I2C1_Init+0x50>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005fc0:	4b07      	ldr	r3, [pc, #28]	; (8005fe0 <MX_I2C1_Init+0x50>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005fc6:	4b06      	ldr	r3, [pc, #24]	; (8005fe0 <MX_I2C1_Init+0x50>)
 8005fc8:	2280      	movs	r2, #128	; 0x80
 8005fca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005fcc:	4804      	ldr	r0, [pc, #16]	; (8005fe0 <MX_I2C1_Init+0x50>)
 8005fce:	f004 ff83 	bl	800aed8 <HAL_I2C_Init>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005fd8:	f000 fd1a 	bl	8006a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005fdc:	bf00      	nop
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	2003f94c 	.word	0x2003f94c
 8005fe4:	40005400 	.word	0x40005400
 8005fe8:	000186a0 	.word	0x000186a0

08005fec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005ff0:	4b12      	ldr	r3, [pc, #72]	; (800603c <MX_I2C2_Init+0x50>)
 8005ff2:	4a13      	ldr	r2, [pc, #76]	; (8006040 <MX_I2C2_Init+0x54>)
 8005ff4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005ff6:	4b11      	ldr	r3, [pc, #68]	; (800603c <MX_I2C2_Init+0x50>)
 8005ff8:	4a12      	ldr	r2, [pc, #72]	; (8006044 <MX_I2C2_Init+0x58>)
 8005ffa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005ffc:	4b0f      	ldr	r3, [pc, #60]	; (800603c <MX_I2C2_Init+0x50>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006002:	4b0e      	ldr	r3, [pc, #56]	; (800603c <MX_I2C2_Init+0x50>)
 8006004:	2200      	movs	r2, #0
 8006006:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006008:	4b0c      	ldr	r3, [pc, #48]	; (800603c <MX_I2C2_Init+0x50>)
 800600a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800600e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006010:	4b0a      	ldr	r3, [pc, #40]	; (800603c <MX_I2C2_Init+0x50>)
 8006012:	2200      	movs	r2, #0
 8006014:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006016:	4b09      	ldr	r3, [pc, #36]	; (800603c <MX_I2C2_Init+0x50>)
 8006018:	2200      	movs	r2, #0
 800601a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800601c:	4b07      	ldr	r3, [pc, #28]	; (800603c <MX_I2C2_Init+0x50>)
 800601e:	2200      	movs	r2, #0
 8006020:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006022:	4b06      	ldr	r3, [pc, #24]	; (800603c <MX_I2C2_Init+0x50>)
 8006024:	2280      	movs	r2, #128	; 0x80
 8006026:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006028:	4804      	ldr	r0, [pc, #16]	; (800603c <MX_I2C2_Init+0x50>)
 800602a:	f004 ff55 	bl	800aed8 <HAL_I2C_Init>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006034:	f000 fcec 	bl	8006a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006038:	bf00      	nop
 800603a:	bd80      	pop	{r7, pc}
 800603c:	2003f9e0 	.word	0x2003f9e0
 8006040:	40005800 	.word	0x40005800
 8006044:	000186a0 	.word	0x000186a0

08006048 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800604c:	4b0c      	ldr	r3, [pc, #48]	; (8006080 <MX_SDIO_SD_Init+0x38>)
 800604e:	4a0d      	ldr	r2, [pc, #52]	; (8006084 <MX_SDIO_SD_Init+0x3c>)
 8006050:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8006052:	4b0b      	ldr	r3, [pc, #44]	; (8006080 <MX_SDIO_SD_Init+0x38>)
 8006054:	2200      	movs	r2, #0
 8006056:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8006058:	4b09      	ldr	r3, [pc, #36]	; (8006080 <MX_SDIO_SD_Init+0x38>)
 800605a:	2200      	movs	r2, #0
 800605c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800605e:	4b08      	ldr	r3, [pc, #32]	; (8006080 <MX_SDIO_SD_Init+0x38>)
 8006060:	2200      	movs	r2, #0
 8006062:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8006064:	4b06      	ldr	r3, [pc, #24]	; (8006080 <MX_SDIO_SD_Init+0x38>)
 8006066:	2200      	movs	r2, #0
 8006068:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800606a:	4b05      	ldr	r3, [pc, #20]	; (8006080 <MX_SDIO_SD_Init+0x38>)
 800606c:	2200      	movs	r2, #0
 800606e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8006070:	4b03      	ldr	r3, [pc, #12]	; (8006080 <MX_SDIO_SD_Init+0x38>)
 8006072:	2202      	movs	r2, #2
 8006074:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8006076:	bf00      	nop
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	2003fbe0 	.word	0x2003fbe0
 8006084:	40012c00 	.word	0x40012c00

08006088 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800608c:	4b17      	ldr	r3, [pc, #92]	; (80060ec <MX_SPI2_Init+0x64>)
 800608e:	4a18      	ldr	r2, [pc, #96]	; (80060f0 <MX_SPI2_Init+0x68>)
 8006090:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006092:	4b16      	ldr	r3, [pc, #88]	; (80060ec <MX_SPI2_Init+0x64>)
 8006094:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006098:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800609a:	4b14      	ldr	r3, [pc, #80]	; (80060ec <MX_SPI2_Init+0x64>)
 800609c:	2200      	movs	r2, #0
 800609e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80060a0:	4b12      	ldr	r3, [pc, #72]	; (80060ec <MX_SPI2_Init+0x64>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80060a6:	4b11      	ldr	r3, [pc, #68]	; (80060ec <MX_SPI2_Init+0x64>)
 80060a8:	2202      	movs	r2, #2
 80060aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80060ac:	4b0f      	ldr	r3, [pc, #60]	; (80060ec <MX_SPI2_Init+0x64>)
 80060ae:	2201      	movs	r2, #1
 80060b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80060b2:	4b0e      	ldr	r3, [pc, #56]	; (80060ec <MX_SPI2_Init+0x64>)
 80060b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80060ba:	4b0c      	ldr	r3, [pc, #48]	; (80060ec <MX_SPI2_Init+0x64>)
 80060bc:	2228      	movs	r2, #40	; 0x28
 80060be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80060c0:	4b0a      	ldr	r3, [pc, #40]	; (80060ec <MX_SPI2_Init+0x64>)
 80060c2:	2200      	movs	r2, #0
 80060c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80060c6:	4b09      	ldr	r3, [pc, #36]	; (80060ec <MX_SPI2_Init+0x64>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060cc:	4b07      	ldr	r3, [pc, #28]	; (80060ec <MX_SPI2_Init+0x64>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80060d2:	4b06      	ldr	r3, [pc, #24]	; (80060ec <MX_SPI2_Init+0x64>)
 80060d4:	220a      	movs	r2, #10
 80060d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80060d8:	4804      	ldr	r0, [pc, #16]	; (80060ec <MX_SPI2_Init+0x64>)
 80060da:	f008 f843 	bl	800e164 <HAL_SPI_Init>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80060e4:	f000 fc94 	bl	8006a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80060e8:	bf00      	nop
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	2003f82c 	.word	0x2003f82c
 80060f0:	40003800 	.word	0x40003800

080060f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b09a      	sub	sp, #104	; 0x68
 80060f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80060fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80060fe:	2224      	movs	r2, #36	; 0x24
 8006100:	2100      	movs	r1, #0
 8006102:	4618      	mov	r0, r3
 8006104:	f00f fa2a 	bl	801555c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006108:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006112:	f107 0320 	add.w	r3, r7, #32
 8006116:	2200      	movs	r2, #0
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	605a      	str	r2, [r3, #4]
 800611c:	609a      	str	r2, [r3, #8]
 800611e:	60da      	str	r2, [r3, #12]
 8006120:	611a      	str	r2, [r3, #16]
 8006122:	615a      	str	r2, [r3, #20]
 8006124:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006126:	463b      	mov	r3, r7
 8006128:	2220      	movs	r2, #32
 800612a:	2100      	movs	r1, #0
 800612c:	4618      	mov	r0, r3
 800612e:	f00f fa15 	bl	801555c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006132:	4b42      	ldr	r3, [pc, #264]	; (800623c <MX_TIM1_Init+0x148>)
 8006134:	4a42      	ldr	r2, [pc, #264]	; (8006240 <MX_TIM1_Init+0x14c>)
 8006136:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006138:	4b40      	ldr	r3, [pc, #256]	; (800623c <MX_TIM1_Init+0x148>)
 800613a:	2200      	movs	r2, #0
 800613c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800613e:	4b3f      	ldr	r3, [pc, #252]	; (800623c <MX_TIM1_Init+0x148>)
 8006140:	2200      	movs	r2, #0
 8006142:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006144:	4b3d      	ldr	r3, [pc, #244]	; (800623c <MX_TIM1_Init+0x148>)
 8006146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800614a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800614c:	4b3b      	ldr	r3, [pc, #236]	; (800623c <MX_TIM1_Init+0x148>)
 800614e:	2200      	movs	r2, #0
 8006150:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006152:	4b3a      	ldr	r3, [pc, #232]	; (800623c <MX_TIM1_Init+0x148>)
 8006154:	2200      	movs	r2, #0
 8006156:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006158:	4b38      	ldr	r3, [pc, #224]	; (800623c <MX_TIM1_Init+0x148>)
 800615a:	2200      	movs	r2, #0
 800615c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800615e:	4837      	ldr	r0, [pc, #220]	; (800623c <MX_TIM1_Init+0x148>)
 8006160:	f008 fda3 	bl	800ecaa <HAL_TIM_PWM_Init>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800616a:	f000 fc51 	bl	8006a10 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800616e:	2303      	movs	r3, #3
 8006170:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006172:	2300      	movs	r3, #0
 8006174:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006176:	2301      	movs	r3, #1
 8006178:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800617a:	2300      	movs	r3, #0
 800617c:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800617e:	2300      	movs	r3, #0
 8006180:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006182:	2300      	movs	r3, #0
 8006184:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006186:	2301      	movs	r3, #1
 8006188:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800618a:	2300      	movs	r3, #0
 800618c:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8006192:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006196:	4619      	mov	r1, r3
 8006198:	4828      	ldr	r0, [pc, #160]	; (800623c <MX_TIM1_Init+0x148>)
 800619a:	f008 fdef 	bl	800ed7c <HAL_TIM_Encoder_Init>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80061a4:	f000 fc34 	bl	8006a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80061a8:	2300      	movs	r3, #0
 80061aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061ac:	2300      	movs	r3, #0
 80061ae:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80061b0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80061b4:	4619      	mov	r1, r3
 80061b6:	4821      	ldr	r0, [pc, #132]	; (800623c <MX_TIM1_Init+0x148>)
 80061b8:	f009 fb16 	bl	800f7e8 <HAL_TIMEx_MasterConfigSynchronization>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80061c2:	f000 fc25 	bl	8006a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80061c6:	2360      	movs	r3, #96	; 0x60
 80061c8:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80061ca:	2300      	movs	r3, #0
 80061cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80061ce:	2300      	movs	r3, #0
 80061d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80061d2:	2300      	movs	r3, #0
 80061d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80061d6:	2300      	movs	r3, #0
 80061d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80061da:	2300      	movs	r3, #0
 80061dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80061de:	2300      	movs	r3, #0
 80061e0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80061e2:	f107 0320 	add.w	r3, r7, #32
 80061e6:	2208      	movs	r2, #8
 80061e8:	4619      	mov	r1, r3
 80061ea:	4814      	ldr	r0, [pc, #80]	; (800623c <MX_TIM1_Init+0x148>)
 80061ec:	f008 ff98 	bl	800f120 <HAL_TIM_PWM_ConfigChannel>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80061f6:	f000 fc0b 	bl	8006a10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80061fa:	2300      	movs	r3, #0
 80061fc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80061fe:	2300      	movs	r3, #0
 8006200:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006202:	2300      	movs	r3, #0
 8006204:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006206:	2300      	movs	r3, #0
 8006208:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800620a:	2300      	movs	r3, #0
 800620c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800620e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006212:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006214:	2300      	movs	r3, #0
 8006216:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006218:	463b      	mov	r3, r7
 800621a:	4619      	mov	r1, r3
 800621c:	4807      	ldr	r0, [pc, #28]	; (800623c <MX_TIM1_Init+0x148>)
 800621e:	f009 fb5f 	bl	800f8e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8006228:	f000 fbf2 	bl	8006a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800622c:	4803      	ldr	r0, [pc, #12]	; (800623c <MX_TIM1_Init+0x148>)
 800622e:	f000 ffdf 	bl	80071f0 <HAL_TIM_MspPostInit>

}
 8006232:	bf00      	nop
 8006234:	3768      	adds	r7, #104	; 0x68
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	2003fba0 	.word	0x2003fba0
 8006240:	40010000 	.word	0x40010000

08006244 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b08a      	sub	sp, #40	; 0x28
 8006248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800624a:	f107 0320 	add.w	r3, r7, #32
 800624e:	2200      	movs	r2, #0
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006254:	1d3b      	adds	r3, r7, #4
 8006256:	2200      	movs	r2, #0
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	605a      	str	r2, [r3, #4]
 800625c:	609a      	str	r2, [r3, #8]
 800625e:	60da      	str	r2, [r3, #12]
 8006260:	611a      	str	r2, [r3, #16]
 8006262:	615a      	str	r2, [r3, #20]
 8006264:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006266:	4b27      	ldr	r3, [pc, #156]	; (8006304 <MX_TIM3_Init+0xc0>)
 8006268:	4a27      	ldr	r2, [pc, #156]	; (8006308 <MX_TIM3_Init+0xc4>)
 800626a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800626c:	4b25      	ldr	r3, [pc, #148]	; (8006304 <MX_TIM3_Init+0xc0>)
 800626e:	2200      	movs	r2, #0
 8006270:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006272:	4b24      	ldr	r3, [pc, #144]	; (8006304 <MX_TIM3_Init+0xc0>)
 8006274:	2200      	movs	r2, #0
 8006276:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006278:	4b22      	ldr	r3, [pc, #136]	; (8006304 <MX_TIM3_Init+0xc0>)
 800627a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800627e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006280:	4b20      	ldr	r3, [pc, #128]	; (8006304 <MX_TIM3_Init+0xc0>)
 8006282:	2200      	movs	r2, #0
 8006284:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006286:	4b1f      	ldr	r3, [pc, #124]	; (8006304 <MX_TIM3_Init+0xc0>)
 8006288:	2200      	movs	r2, #0
 800628a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800628c:	481d      	ldr	r0, [pc, #116]	; (8006304 <MX_TIM3_Init+0xc0>)
 800628e:	f008 fd0c 	bl	800ecaa <HAL_TIM_PWM_Init>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006298:	f000 fbba 	bl	8006a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800629c:	2300      	movs	r3, #0
 800629e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062a0:	2300      	movs	r3, #0
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80062a4:	f107 0320 	add.w	r3, r7, #32
 80062a8:	4619      	mov	r1, r3
 80062aa:	4816      	ldr	r0, [pc, #88]	; (8006304 <MX_TIM3_Init+0xc0>)
 80062ac:	f009 fa9c 	bl	800f7e8 <HAL_TIMEx_MasterConfigSynchronization>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80062b6:	f000 fbab 	bl	8006a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80062ba:	2360      	movs	r3, #96	; 0x60
 80062bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80062c2:	2300      	movs	r3, #0
 80062c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80062c6:	2300      	movs	r3, #0
 80062c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80062ca:	1d3b      	adds	r3, r7, #4
 80062cc:	2200      	movs	r2, #0
 80062ce:	4619      	mov	r1, r3
 80062d0:	480c      	ldr	r0, [pc, #48]	; (8006304 <MX_TIM3_Init+0xc0>)
 80062d2:	f008 ff25 	bl	800f120 <HAL_TIM_PWM_ConfigChannel>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80062dc:	f000 fb98 	bl	8006a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80062e0:	1d3b      	adds	r3, r7, #4
 80062e2:	2204      	movs	r2, #4
 80062e4:	4619      	mov	r1, r3
 80062e6:	4807      	ldr	r0, [pc, #28]	; (8006304 <MX_TIM3_Init+0xc0>)
 80062e8:	f008 ff1a 	bl	800f120 <HAL_TIM_PWM_ConfigChannel>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80062f2:	f000 fb8d 	bl	8006a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80062f6:	4803      	ldr	r0, [pc, #12]	; (8006304 <MX_TIM3_Init+0xc0>)
 80062f8:	f000 ff7a 	bl	80071f0 <HAL_TIM_MspPostInit>

}
 80062fc:	bf00      	nop
 80062fe:	3728      	adds	r7, #40	; 0x28
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	2003fa38 	.word	0x2003fa38
 8006308:	40000400 	.word	0x40000400

0800630c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08a      	sub	sp, #40	; 0x28
 8006310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006312:	f107 0320 	add.w	r3, r7, #32
 8006316:	2200      	movs	r2, #0
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800631c:	1d3b      	adds	r3, r7, #4
 800631e:	2200      	movs	r2, #0
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	605a      	str	r2, [r3, #4]
 8006324:	609a      	str	r2, [r3, #8]
 8006326:	60da      	str	r2, [r3, #12]
 8006328:	611a      	str	r2, [r3, #16]
 800632a:	615a      	str	r2, [r3, #20]
 800632c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800632e:	4b27      	ldr	r3, [pc, #156]	; (80063cc <MX_TIM4_Init+0xc0>)
 8006330:	4a27      	ldr	r2, [pc, #156]	; (80063d0 <MX_TIM4_Init+0xc4>)
 8006332:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006334:	4b25      	ldr	r3, [pc, #148]	; (80063cc <MX_TIM4_Init+0xc0>)
 8006336:	2200      	movs	r2, #0
 8006338:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800633a:	4b24      	ldr	r3, [pc, #144]	; (80063cc <MX_TIM4_Init+0xc0>)
 800633c:	2200      	movs	r2, #0
 800633e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8006340:	4b22      	ldr	r3, [pc, #136]	; (80063cc <MX_TIM4_Init+0xc0>)
 8006342:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8006346:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006348:	4b20      	ldr	r3, [pc, #128]	; (80063cc <MX_TIM4_Init+0xc0>)
 800634a:	2200      	movs	r2, #0
 800634c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800634e:	4b1f      	ldr	r3, [pc, #124]	; (80063cc <MX_TIM4_Init+0xc0>)
 8006350:	2200      	movs	r2, #0
 8006352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006354:	481d      	ldr	r0, [pc, #116]	; (80063cc <MX_TIM4_Init+0xc0>)
 8006356:	f008 fca8 	bl	800ecaa <HAL_TIM_PWM_Init>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8006360:	f000 fb56 	bl	8006a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006364:	2300      	movs	r3, #0
 8006366:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006368:	2300      	movs	r3, #0
 800636a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800636c:	f107 0320 	add.w	r3, r7, #32
 8006370:	4619      	mov	r1, r3
 8006372:	4816      	ldr	r0, [pc, #88]	; (80063cc <MX_TIM4_Init+0xc0>)
 8006374:	f009 fa38 	bl	800f7e8 <HAL_TIMEx_MasterConfigSynchronization>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800637e:	f000 fb47 	bl	8006a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006382:	2360      	movs	r3, #96	; 0x60
 8006384:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006386:	2300      	movs	r3, #0
 8006388:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800638e:	2300      	movs	r3, #0
 8006390:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006392:	1d3b      	adds	r3, r7, #4
 8006394:	2208      	movs	r2, #8
 8006396:	4619      	mov	r1, r3
 8006398:	480c      	ldr	r0, [pc, #48]	; (80063cc <MX_TIM4_Init+0xc0>)
 800639a:	f008 fec1 	bl	800f120 <HAL_TIM_PWM_ConfigChannel>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80063a4:	f000 fb34 	bl	8006a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80063a8:	1d3b      	adds	r3, r7, #4
 80063aa:	220c      	movs	r2, #12
 80063ac:	4619      	mov	r1, r3
 80063ae:	4807      	ldr	r0, [pc, #28]	; (80063cc <MX_TIM4_Init+0xc0>)
 80063b0:	f008 feb6 	bl	800f120 <HAL_TIM_PWM_ConfigChannel>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80063ba:	f000 fb29 	bl	8006a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80063be:	4803      	ldr	r0, [pc, #12]	; (80063cc <MX_TIM4_Init+0xc0>)
 80063c0:	f000 ff16 	bl	80071f0 <HAL_TIM_MspPostInit>

}
 80063c4:	bf00      	nop
 80063c6:	3728      	adds	r7, #40	; 0x28
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	2003f8c4 	.word	0x2003f8c4
 80063d0:	40000800 	.word	0x40000800

080063d4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063da:	463b      	mov	r3, r7
 80063dc:	2200      	movs	r2, #0
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80063e2:	4b15      	ldr	r3, [pc, #84]	; (8006438 <MX_TIM6_Init+0x64>)
 80063e4:	4a15      	ldr	r2, [pc, #84]	; (800643c <MX_TIM6_Init+0x68>)
 80063e6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 80063e8:	4b13      	ldr	r3, [pc, #76]	; (8006438 <MX_TIM6_Init+0x64>)
 80063ea:	2259      	movs	r2, #89	; 0x59
 80063ec:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063ee:	4b12      	ldr	r3, [pc, #72]	; (8006438 <MX_TIM6_Init+0x64>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80063f4:	4b10      	ldr	r3, [pc, #64]	; (8006438 <MX_TIM6_Init+0x64>)
 80063f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80063fa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80063fc:	4b0e      	ldr	r3, [pc, #56]	; (8006438 <MX_TIM6_Init+0x64>)
 80063fe:	2280      	movs	r2, #128	; 0x80
 8006400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006402:	480d      	ldr	r0, [pc, #52]	; (8006438 <MX_TIM6_Init+0x64>)
 8006404:	f008 fc02 	bl	800ec0c <HAL_TIM_Base_Init>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800640e:	f000 faff 	bl	8006a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006412:	2300      	movs	r3, #0
 8006414:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006416:	2300      	movs	r3, #0
 8006418:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800641a:	463b      	mov	r3, r7
 800641c:	4619      	mov	r1, r3
 800641e:	4806      	ldr	r0, [pc, #24]	; (8006438 <MX_TIM6_Init+0x64>)
 8006420:	f009 f9e2 	bl	800f7e8 <HAL_TIMEx_MasterConfigSynchronization>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800642a:	f000 faf1 	bl	8006a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800642e:	bf00      	nop
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	2003fb60 	.word	0x2003fb60
 800643c:	40001000 	.word	0x40001000

08006440 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006446:	463b      	mov	r3, r7
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800644e:	4b14      	ldr	r3, [pc, #80]	; (80064a0 <MX_TIM7_Init+0x60>)
 8006450:	4a14      	ldr	r2, [pc, #80]	; (80064a4 <MX_TIM7_Init+0x64>)
 8006452:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8006454:	4b12      	ldr	r3, [pc, #72]	; (80064a0 <MX_TIM7_Init+0x60>)
 8006456:	22b3      	movs	r2, #179	; 0xb3
 8006458:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800645a:	4b11      	ldr	r3, [pc, #68]	; (80064a0 <MX_TIM7_Init+0x60>)
 800645c:	2200      	movs	r2, #0
 800645e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8006460:	4b0f      	ldr	r3, [pc, #60]	; (80064a0 <MX_TIM7_Init+0x60>)
 8006462:	2231      	movs	r2, #49	; 0x31
 8006464:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006466:	4b0e      	ldr	r3, [pc, #56]	; (80064a0 <MX_TIM7_Init+0x60>)
 8006468:	2280      	movs	r2, #128	; 0x80
 800646a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800646c:	480c      	ldr	r0, [pc, #48]	; (80064a0 <MX_TIM7_Init+0x60>)
 800646e:	f008 fbcd 	bl	800ec0c <HAL_TIM_Base_Init>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8006478:	f000 faca 	bl	8006a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800647c:	2300      	movs	r3, #0
 800647e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006480:	2300      	movs	r3, #0
 8006482:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006484:	463b      	mov	r3, r7
 8006486:	4619      	mov	r1, r3
 8006488:	4805      	ldr	r0, [pc, #20]	; (80064a0 <MX_TIM7_Init+0x60>)
 800648a:	f009 f9ad 	bl	800f7e8 <HAL_TIMEx_MasterConfigSynchronization>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006494:	f000 fabc 	bl	8006a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006498:	bf00      	nop
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	2003fd04 	.word	0x2003fd04
 80064a4:	40001400 	.word	0x40001400

080064a8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08c      	sub	sp, #48	; 0x30
 80064ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80064ae:	f107 030c 	add.w	r3, r7, #12
 80064b2:	2224      	movs	r2, #36	; 0x24
 80064b4:	2100      	movs	r1, #0
 80064b6:	4618      	mov	r0, r3
 80064b8:	f00f f850 	bl	801555c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064bc:	1d3b      	adds	r3, r7, #4
 80064be:	2200      	movs	r2, #0
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80064c4:	4b22      	ldr	r3, [pc, #136]	; (8006550 <MX_TIM8_Init+0xa8>)
 80064c6:	4a23      	ldr	r2, [pc, #140]	; (8006554 <MX_TIM8_Init+0xac>)
 80064c8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80064ca:	4b21      	ldr	r3, [pc, #132]	; (8006550 <MX_TIM8_Init+0xa8>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80064d0:	4b1f      	ldr	r3, [pc, #124]	; (8006550 <MX_TIM8_Init+0xa8>)
 80064d2:	2210      	movs	r2, #16
 80064d4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80064d6:	4b1e      	ldr	r3, [pc, #120]	; (8006550 <MX_TIM8_Init+0xa8>)
 80064d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064dc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064de:	4b1c      	ldr	r3, [pc, #112]	; (8006550 <MX_TIM8_Init+0xa8>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80064e4:	4b1a      	ldr	r3, [pc, #104]	; (8006550 <MX_TIM8_Init+0xa8>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064ea:	4b19      	ldr	r3, [pc, #100]	; (8006550 <MX_TIM8_Init+0xa8>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80064f0:	2303      	movs	r3, #3
 80064f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80064f4:	2300      	movs	r3, #0
 80064f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80064f8:	2301      	movs	r3, #1
 80064fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80064fc:	2300      	movs	r3, #0
 80064fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006504:	2300      	movs	r3, #0
 8006506:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006508:	2301      	movs	r3, #1
 800650a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800650c:	2300      	movs	r3, #0
 800650e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006510:	2300      	movs	r3, #0
 8006512:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006514:	f107 030c 	add.w	r3, r7, #12
 8006518:	4619      	mov	r1, r3
 800651a:	480d      	ldr	r0, [pc, #52]	; (8006550 <MX_TIM8_Init+0xa8>)
 800651c:	f008 fc2e 	bl	800ed7c <HAL_TIM_Encoder_Init>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006526:	f000 fa73 	bl	8006a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800652a:	2300      	movs	r3, #0
 800652c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800652e:	2300      	movs	r3, #0
 8006530:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006532:	1d3b      	adds	r3, r7, #4
 8006534:	4619      	mov	r1, r3
 8006536:	4806      	ldr	r0, [pc, #24]	; (8006550 <MX_TIM8_Init+0xa8>)
 8006538:	f009 f956 	bl	800f7e8 <HAL_TIMEx_MasterConfigSynchronization>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8006542:	f000 fa65 	bl	8006a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006546:	bf00      	nop
 8006548:	3730      	adds	r7, #48	; 0x30
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	2003f884 	.word	0x2003f884
 8006554:	40010400 	.word	0x40010400

08006558 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b088      	sub	sp, #32
 800655c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800655e:	1d3b      	adds	r3, r7, #4
 8006560:	2200      	movs	r2, #0
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	605a      	str	r2, [r3, #4]
 8006566:	609a      	str	r2, [r3, #8]
 8006568:	60da      	str	r2, [r3, #12]
 800656a:	611a      	str	r2, [r3, #16]
 800656c:	615a      	str	r2, [r3, #20]
 800656e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006570:	4b1e      	ldr	r3, [pc, #120]	; (80065ec <MX_TIM10_Init+0x94>)
 8006572:	4a1f      	ldr	r2, [pc, #124]	; (80065f0 <MX_TIM10_Init+0x98>)
 8006574:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8006576:	4b1d      	ldr	r3, [pc, #116]	; (80065ec <MX_TIM10_Init+0x94>)
 8006578:	2200      	movs	r2, #0
 800657a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800657c:	4b1b      	ldr	r3, [pc, #108]	; (80065ec <MX_TIM10_Init+0x94>)
 800657e:	2200      	movs	r2, #0
 8006580:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8006582:	4b1a      	ldr	r3, [pc, #104]	; (80065ec <MX_TIM10_Init+0x94>)
 8006584:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006588:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800658a:	4b18      	ldr	r3, [pc, #96]	; (80065ec <MX_TIM10_Init+0x94>)
 800658c:	2200      	movs	r2, #0
 800658e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006590:	4b16      	ldr	r3, [pc, #88]	; (80065ec <MX_TIM10_Init+0x94>)
 8006592:	2200      	movs	r2, #0
 8006594:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006596:	4815      	ldr	r0, [pc, #84]	; (80065ec <MX_TIM10_Init+0x94>)
 8006598:	f008 fb38 	bl	800ec0c <HAL_TIM_Base_Init>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80065a2:	f000 fa35 	bl	8006a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80065a6:	4811      	ldr	r0, [pc, #68]	; (80065ec <MX_TIM10_Init+0x94>)
 80065a8:	f008 fb7f 	bl	800ecaa <HAL_TIM_PWM_Init>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80065b2:	f000 fa2d 	bl	8006a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80065b6:	2360      	movs	r3, #96	; 0x60
 80065b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80065c2:	2300      	movs	r3, #0
 80065c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80065c6:	1d3b      	adds	r3, r7, #4
 80065c8:	2200      	movs	r2, #0
 80065ca:	4619      	mov	r1, r3
 80065cc:	4807      	ldr	r0, [pc, #28]	; (80065ec <MX_TIM10_Init+0x94>)
 80065ce:	f008 fda7 	bl	800f120 <HAL_TIM_PWM_ConfigChannel>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80065d8:	f000 fa1a 	bl	8006a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80065dc:	4803      	ldr	r0, [pc, #12]	; (80065ec <MX_TIM10_Init+0x94>)
 80065de:	f000 fe07 	bl	80071f0 <HAL_TIM_MspPostInit>

}
 80065e2:	bf00      	nop
 80065e4:	3720      	adds	r7, #32
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	2003f9a0 	.word	0x2003f9a0
 80065f0:	40014400 	.word	0x40014400

080065f4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80065fa:	1d3b      	adds	r3, r7, #4
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	605a      	str	r2, [r3, #4]
 8006602:	609a      	str	r2, [r3, #8]
 8006604:	60da      	str	r2, [r3, #12]
 8006606:	611a      	str	r2, [r3, #16]
 8006608:	615a      	str	r2, [r3, #20]
 800660a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800660c:	4b1e      	ldr	r3, [pc, #120]	; (8006688 <MX_TIM11_Init+0x94>)
 800660e:	4a1f      	ldr	r2, [pc, #124]	; (800668c <MX_TIM11_Init+0x98>)
 8006610:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8006612:	4b1d      	ldr	r3, [pc, #116]	; (8006688 <MX_TIM11_Init+0x94>)
 8006614:	2200      	movs	r2, #0
 8006616:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006618:	4b1b      	ldr	r3, [pc, #108]	; (8006688 <MX_TIM11_Init+0x94>)
 800661a:	2200      	movs	r2, #0
 800661c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800661e:	4b1a      	ldr	r3, [pc, #104]	; (8006688 <MX_TIM11_Init+0x94>)
 8006620:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006624:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006626:	4b18      	ldr	r3, [pc, #96]	; (8006688 <MX_TIM11_Init+0x94>)
 8006628:	2200      	movs	r2, #0
 800662a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800662c:	4b16      	ldr	r3, [pc, #88]	; (8006688 <MX_TIM11_Init+0x94>)
 800662e:	2200      	movs	r2, #0
 8006630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006632:	4815      	ldr	r0, [pc, #84]	; (8006688 <MX_TIM11_Init+0x94>)
 8006634:	f008 faea 	bl	800ec0c <HAL_TIM_Base_Init>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800663e:	f000 f9e7 	bl	8006a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8006642:	4811      	ldr	r0, [pc, #68]	; (8006688 <MX_TIM11_Init+0x94>)
 8006644:	f008 fb31 	bl	800ecaa <HAL_TIM_PWM_Init>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800664e:	f000 f9df 	bl	8006a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006652:	2360      	movs	r3, #96	; 0x60
 8006654:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006656:	2300      	movs	r3, #0
 8006658:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800665e:	2300      	movs	r3, #0
 8006660:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006662:	1d3b      	adds	r3, r7, #4
 8006664:	2200      	movs	r2, #0
 8006666:	4619      	mov	r1, r3
 8006668:	4807      	ldr	r0, [pc, #28]	; (8006688 <MX_TIM11_Init+0x94>)
 800666a:	f008 fd59 	bl	800f120 <HAL_TIM_PWM_ConfigChannel>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006674:	f000 f9cc 	bl	8006a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006678:	4803      	ldr	r0, [pc, #12]	; (8006688 <MX_TIM11_Init+0x94>)
 800667a:	f000 fdb9 	bl	80071f0 <HAL_TIM_MspPostInit>

}
 800667e:	bf00      	nop
 8006680:	3720      	adds	r7, #32
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	2003fac0 	.word	0x2003fac0
 800668c:	40014800 	.word	0x40014800

08006690 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006694:	4b0e      	ldr	r3, [pc, #56]	; (80066d0 <MX_TIM13_Init+0x40>)
 8006696:	4a0f      	ldr	r2, [pc, #60]	; (80066d4 <MX_TIM13_Init+0x44>)
 8006698:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 800669a:	4b0d      	ldr	r3, [pc, #52]	; (80066d0 <MX_TIM13_Init+0x40>)
 800669c:	2259      	movs	r2, #89	; 0x59
 800669e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066a0:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <MX_TIM13_Init+0x40>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80066a6:	4b0a      	ldr	r3, [pc, #40]	; (80066d0 <MX_TIM13_Init+0x40>)
 80066a8:	f242 720f 	movw	r2, #9999	; 0x270f
 80066ac:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066ae:	4b08      	ldr	r3, [pc, #32]	; (80066d0 <MX_TIM13_Init+0x40>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80066b4:	4b06      	ldr	r3, [pc, #24]	; (80066d0 <MX_TIM13_Init+0x40>)
 80066b6:	2280      	movs	r2, #128	; 0x80
 80066b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80066ba:	4805      	ldr	r0, [pc, #20]	; (80066d0 <MX_TIM13_Init+0x40>)
 80066bc:	f008 faa6 	bl	800ec0c <HAL_TIM_Base_Init>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80066c6:	f000 f9a3 	bl	8006a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80066ca:	bf00      	nop
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	2003fa80 	.word	0x2003fa80
 80066d4:	40001c00 	.word	0x40001c00

080066d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80066dc:	4b11      	ldr	r3, [pc, #68]	; (8006724 <MX_USART2_UART_Init+0x4c>)
 80066de:	4a12      	ldr	r2, [pc, #72]	; (8006728 <MX_USART2_UART_Init+0x50>)
 80066e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80066e2:	4b10      	ldr	r3, [pc, #64]	; (8006724 <MX_USART2_UART_Init+0x4c>)
 80066e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80066e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80066ea:	4b0e      	ldr	r3, [pc, #56]	; (8006724 <MX_USART2_UART_Init+0x4c>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80066f0:	4b0c      	ldr	r3, [pc, #48]	; (8006724 <MX_USART2_UART_Init+0x4c>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80066f6:	4b0b      	ldr	r3, [pc, #44]	; (8006724 <MX_USART2_UART_Init+0x4c>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80066fc:	4b09      	ldr	r3, [pc, #36]	; (8006724 <MX_USART2_UART_Init+0x4c>)
 80066fe:	220c      	movs	r2, #12
 8006700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006702:	4b08      	ldr	r3, [pc, #32]	; (8006724 <MX_USART2_UART_Init+0x4c>)
 8006704:	2200      	movs	r2, #0
 8006706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006708:	4b06      	ldr	r3, [pc, #24]	; (8006724 <MX_USART2_UART_Init+0x4c>)
 800670a:	2200      	movs	r2, #0
 800670c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800670e:	4805      	ldr	r0, [pc, #20]	; (8006724 <MX_USART2_UART_Init+0x4c>)
 8006710:	f009 f94c 	bl	800f9ac <HAL_UART_Init>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800671a:	f000 f979 	bl	8006a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800671e:	bf00      	nop
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	2003fc64 	.word	0x2003fc64
 8006728:	40004400 	.word	0x40004400

0800672c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006732:	2300      	movs	r3, #0
 8006734:	607b      	str	r3, [r7, #4]
 8006736:	4b14      	ldr	r3, [pc, #80]	; (8006788 <MX_DMA_Init+0x5c>)
 8006738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673a:	4a13      	ldr	r2, [pc, #76]	; (8006788 <MX_DMA_Init+0x5c>)
 800673c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006740:	6313      	str	r3, [r2, #48]	; 0x30
 8006742:	4b11      	ldr	r3, [pc, #68]	; (8006788 <MX_DMA_Init+0x5c>)
 8006744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800674a:	607b      	str	r3, [r7, #4]
 800674c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800674e:	2200      	movs	r2, #0
 8006750:	2100      	movs	r1, #0
 8006752:	203a      	movs	r0, #58	; 0x3a
 8006754:	f003 fe0d 	bl	800a372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006758:	203a      	movs	r0, #58	; 0x3a
 800675a:	f003 fe26 	bl	800a3aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800675e:	2200      	movs	r2, #0
 8006760:	2100      	movs	r1, #0
 8006762:	203b      	movs	r0, #59	; 0x3b
 8006764:	f003 fe05 	bl	800a372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006768:	203b      	movs	r0, #59	; 0x3b
 800676a:	f003 fe1e 	bl	800a3aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800676e:	2200      	movs	r2, #0
 8006770:	2100      	movs	r1, #0
 8006772:	2045      	movs	r0, #69	; 0x45
 8006774:	f003 fdfd 	bl	800a372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006778:	2045      	movs	r0, #69	; 0x45
 800677a:	f003 fe16 	bl	800a3aa <HAL_NVIC_EnableIRQ>

}
 800677e:	bf00      	nop
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	40023800 	.word	0x40023800

0800678c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b08c      	sub	sp, #48	; 0x30
 8006790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006792:	f107 031c 	add.w	r3, r7, #28
 8006796:	2200      	movs	r2, #0
 8006798:	601a      	str	r2, [r3, #0]
 800679a:	605a      	str	r2, [r3, #4]
 800679c:	609a      	str	r2, [r3, #8]
 800679e:	60da      	str	r2, [r3, #12]
 80067a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80067a2:	2300      	movs	r3, #0
 80067a4:	61bb      	str	r3, [r7, #24]
 80067a6:	4b94      	ldr	r3, [pc, #592]	; (80069f8 <MX_GPIO_Init+0x26c>)
 80067a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067aa:	4a93      	ldr	r2, [pc, #588]	; (80069f8 <MX_GPIO_Init+0x26c>)
 80067ac:	f043 0310 	orr.w	r3, r3, #16
 80067b0:	6313      	str	r3, [r2, #48]	; 0x30
 80067b2:	4b91      	ldr	r3, [pc, #580]	; (80069f8 <MX_GPIO_Init+0x26c>)
 80067b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b6:	f003 0310 	and.w	r3, r3, #16
 80067ba:	61bb      	str	r3, [r7, #24]
 80067bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80067be:	2300      	movs	r3, #0
 80067c0:	617b      	str	r3, [r7, #20]
 80067c2:	4b8d      	ldr	r3, [pc, #564]	; (80069f8 <MX_GPIO_Init+0x26c>)
 80067c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c6:	4a8c      	ldr	r2, [pc, #560]	; (80069f8 <MX_GPIO_Init+0x26c>)
 80067c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067cc:	6313      	str	r3, [r2, #48]	; 0x30
 80067ce:	4b8a      	ldr	r3, [pc, #552]	; (80069f8 <MX_GPIO_Init+0x26c>)
 80067d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80067da:	2300      	movs	r3, #0
 80067dc:	613b      	str	r3, [r7, #16]
 80067de:	4b86      	ldr	r3, [pc, #536]	; (80069f8 <MX_GPIO_Init+0x26c>)
 80067e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e2:	4a85      	ldr	r2, [pc, #532]	; (80069f8 <MX_GPIO_Init+0x26c>)
 80067e4:	f043 0304 	orr.w	r3, r3, #4
 80067e8:	6313      	str	r3, [r2, #48]	; 0x30
 80067ea:	4b83      	ldr	r3, [pc, #524]	; (80069f8 <MX_GPIO_Init+0x26c>)
 80067ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ee:	f003 0304 	and.w	r3, r3, #4
 80067f2:	613b      	str	r3, [r7, #16]
 80067f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80067f6:	2300      	movs	r3, #0
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	4b7f      	ldr	r3, [pc, #508]	; (80069f8 <MX_GPIO_Init+0x26c>)
 80067fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fe:	4a7e      	ldr	r2, [pc, #504]	; (80069f8 <MX_GPIO_Init+0x26c>)
 8006800:	f043 0301 	orr.w	r3, r3, #1
 8006804:	6313      	str	r3, [r2, #48]	; 0x30
 8006806:	4b7c      	ldr	r3, [pc, #496]	; (80069f8 <MX_GPIO_Init+0x26c>)
 8006808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006812:	2300      	movs	r3, #0
 8006814:	60bb      	str	r3, [r7, #8]
 8006816:	4b78      	ldr	r3, [pc, #480]	; (80069f8 <MX_GPIO_Init+0x26c>)
 8006818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681a:	4a77      	ldr	r2, [pc, #476]	; (80069f8 <MX_GPIO_Init+0x26c>)
 800681c:	f043 0302 	orr.w	r3, r3, #2
 8006820:	6313      	str	r3, [r2, #48]	; 0x30
 8006822:	4b75      	ldr	r3, [pc, #468]	; (80069f8 <MX_GPIO_Init+0x26c>)
 8006824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	60bb      	str	r3, [r7, #8]
 800682c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800682e:	2300      	movs	r3, #0
 8006830:	607b      	str	r3, [r7, #4]
 8006832:	4b71      	ldr	r3, [pc, #452]	; (80069f8 <MX_GPIO_Init+0x26c>)
 8006834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006836:	4a70      	ldr	r2, [pc, #448]	; (80069f8 <MX_GPIO_Init+0x26c>)
 8006838:	f043 0308 	orr.w	r3, r3, #8
 800683c:	6313      	str	r3, [r2, #48]	; 0x30
 800683e:	4b6e      	ldr	r3, [pc, #440]	; (80069f8 <MX_GPIO_Init+0x26c>)
 8006840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006842:	f003 0308 	and.w	r3, r3, #8
 8006846:	607b      	str	r3, [r7, #4]
 8006848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 800684a:	2200      	movs	r2, #0
 800684c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006850:	486a      	ldr	r0, [pc, #424]	; (80069fc <MX_GPIO_Init+0x270>)
 8006852:	f004 fb27 	bl	800aea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006856:	2200      	movs	r2, #0
 8006858:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800685c:	4868      	ldr	r0, [pc, #416]	; (8006a00 <MX_GPIO_Init+0x274>)
 800685e:	f004 fb21 	bl	800aea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006862:	2200      	movs	r2, #0
 8006864:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006868:	4866      	ldr	r0, [pc, #408]	; (8006a04 <MX_GPIO_Init+0x278>)
 800686a:	f004 fb1b 	bl	800aea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800686e:	2200      	movs	r2, #0
 8006870:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006874:	4864      	ldr	r0, [pc, #400]	; (8006a08 <MX_GPIO_Init+0x27c>)
 8006876:	f004 fb15 	bl	800aea4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800687a:	2304      	movs	r3, #4
 800687c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800687e:	2300      	movs	r3, #0
 8006880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006882:	2300      	movs	r3, #0
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006886:	f107 031c 	add.w	r3, r7, #28
 800688a:	4619      	mov	r1, r3
 800688c:	485b      	ldr	r0, [pc, #364]	; (80069fc <MX_GPIO_Init+0x270>)
 800688e:	f004 f945 	bl	800ab1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006892:	230f      	movs	r3, #15
 8006894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006896:	2303      	movs	r3, #3
 8006898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800689a:	2300      	movs	r3, #0
 800689c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800689e:	f107 031c 	add.w	r3, r7, #28
 80068a2:	4619      	mov	r1, r3
 80068a4:	4859      	ldr	r0, [pc, #356]	; (8006a0c <MX_GPIO_Init+0x280>)
 80068a6:	f004 f939 	bl	800ab1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80068aa:	23e1      	movs	r3, #225	; 0xe1
 80068ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068ae:	2303      	movs	r3, #3
 80068b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068b2:	2300      	movs	r3, #0
 80068b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068b6:	f107 031c 	add.w	r3, r7, #28
 80068ba:	4619      	mov	r1, r3
 80068bc:	4852      	ldr	r0, [pc, #328]	; (8006a08 <MX_GPIO_Init+0x27c>)
 80068be:	f004 f92d 	bl	800ab1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80068c2:	2303      	movs	r3, #3
 80068c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068c6:	2303      	movs	r3, #3
 80068c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068ce:	f107 031c 	add.w	r3, r7, #28
 80068d2:	4619      	mov	r1, r3
 80068d4:	484a      	ldr	r0, [pc, #296]	; (8006a00 <MX_GPIO_Init+0x274>)
 80068d6:	f004 f921 	bl	800ab1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80068da:	2304      	movs	r3, #4
 80068dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068de:	2300      	movs	r3, #0
 80068e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80068e2:	2301      	movs	r3, #1
 80068e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068e6:	f107 031c 	add.w	r3, r7, #28
 80068ea:	4619      	mov	r1, r3
 80068ec:	4844      	ldr	r0, [pc, #272]	; (8006a00 <MX_GPIO_Init+0x274>)
 80068ee:	f004 f915 	bl	800ab1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80068f2:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80068f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068f8:	2300      	movs	r3, #0
 80068fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80068fc:	2301      	movs	r3, #1
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006900:	f107 031c 	add.w	r3, r7, #28
 8006904:	4619      	mov	r1, r3
 8006906:	483d      	ldr	r0, [pc, #244]	; (80069fc <MX_GPIO_Init+0x270>)
 8006908:	f004 f908 	bl	800ab1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800690c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006912:	2301      	movs	r3, #1
 8006914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006916:	2300      	movs	r3, #0
 8006918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800691a:	2300      	movs	r3, #0
 800691c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800691e:	f107 031c 	add.w	r3, r7, #28
 8006922:	4619      	mov	r1, r3
 8006924:	4835      	ldr	r0, [pc, #212]	; (80069fc <MX_GPIO_Init+0x270>)
 8006926:	f004 f8f9 	bl	800ab1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800692a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800692e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006930:	2301      	movs	r3, #1
 8006932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006934:	2300      	movs	r3, #0
 8006936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006938:	2300      	movs	r3, #0
 800693a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800693c:	f107 031c 	add.w	r3, r7, #28
 8006940:	4619      	mov	r1, r3
 8006942:	482f      	ldr	r0, [pc, #188]	; (8006a00 <MX_GPIO_Init+0x274>)
 8006944:	f004 f8ea 	bl	800ab1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800694c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800694e:	2300      	movs	r3, #0
 8006950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006952:	2300      	movs	r3, #0
 8006954:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006956:	f107 031c 	add.w	r3, r7, #28
 800695a:	4619      	mov	r1, r3
 800695c:	4829      	ldr	r0, [pc, #164]	; (8006a04 <MX_GPIO_Init+0x278>)
 800695e:	f004 f8dd 	bl	800ab1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006962:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006968:	2301      	movs	r3, #1
 800696a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800696c:	2300      	movs	r3, #0
 800696e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006970:	2300      	movs	r3, #0
 8006972:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006974:	f107 031c 	add.w	r3, r7, #28
 8006978:	4619      	mov	r1, r3
 800697a:	4822      	ldr	r0, [pc, #136]	; (8006a04 <MX_GPIO_Init+0x278>)
 800697c:	f004 f8ce 	bl	800ab1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006986:	2301      	movs	r3, #1
 8006988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800698a:	2301      	movs	r3, #1
 800698c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800698e:	2300      	movs	r3, #0
 8006990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006992:	f107 031c 	add.w	r3, r7, #28
 8006996:	4619      	mov	r1, r3
 8006998:	481a      	ldr	r0, [pc, #104]	; (8006a04 <MX_GPIO_Init+0x278>)
 800699a:	f004 f8bf 	bl	800ab1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800699e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80069a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069a4:	2301      	movs	r3, #1
 80069a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069a8:	2300      	movs	r3, #0
 80069aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069ac:	2300      	movs	r3, #0
 80069ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069b0:	f107 031c 	add.w	r3, r7, #28
 80069b4:	4619      	mov	r1, r3
 80069b6:	4814      	ldr	r0, [pc, #80]	; (8006a08 <MX_GPIO_Init+0x27c>)
 80069b8:	f004 f8b0 	bl	800ab1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80069bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069c2:	2300      	movs	r3, #0
 80069c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c6:	2300      	movs	r3, #0
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069ca:	f107 031c 	add.w	r3, r7, #28
 80069ce:	4619      	mov	r1, r3
 80069d0:	480d      	ldr	r0, [pc, #52]	; (8006a08 <MX_GPIO_Init+0x27c>)
 80069d2:	f004 f8a3 	bl	800ab1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80069d6:	239b      	movs	r3, #155	; 0x9b
 80069d8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069da:	2300      	movs	r3, #0
 80069dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069de:	2301      	movs	r3, #1
 80069e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069e2:	f107 031c 	add.w	r3, r7, #28
 80069e6:	4619      	mov	r1, r3
 80069e8:	4806      	ldr	r0, [pc, #24]	; (8006a04 <MX_GPIO_Init+0x278>)
 80069ea:	f004 f897 	bl	800ab1c <HAL_GPIO_Init>

}
 80069ee:	bf00      	nop
 80069f0:	3730      	adds	r7, #48	; 0x30
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	40023800 	.word	0x40023800
 80069fc:	40021000 	.word	0x40021000
 8006a00:	40020400 	.word	0x40020400
 8006a04:	40020c00 	.word	0x40020c00
 8006a08:	40020000 	.word	0x40020000
 8006a0c:	40020800 	.word	0x40020800

08006a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a10:	b480      	push	{r7}
 8006a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006a14:	b672      	cpsid	i
}
 8006a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006a18:	e7fe      	b.n	8006a18 <Error_Handler+0x8>

08006a1a <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006a1e:	bf00      	nop
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a2e:	2300      	movs	r3, #0
 8006a30:	607b      	str	r3, [r7, #4]
 8006a32:	4b10      	ldr	r3, [pc, #64]	; (8006a74 <HAL_MspInit+0x4c>)
 8006a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a36:	4a0f      	ldr	r2, [pc, #60]	; (8006a74 <HAL_MspInit+0x4c>)
 8006a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8006a3e:	4b0d      	ldr	r3, [pc, #52]	; (8006a74 <HAL_MspInit+0x4c>)
 8006a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a46:	607b      	str	r3, [r7, #4]
 8006a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	603b      	str	r3, [r7, #0]
 8006a4e:	4b09      	ldr	r3, [pc, #36]	; (8006a74 <HAL_MspInit+0x4c>)
 8006a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a52:	4a08      	ldr	r2, [pc, #32]	; (8006a74 <HAL_MspInit+0x4c>)
 8006a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a58:	6413      	str	r3, [r2, #64]	; 0x40
 8006a5a:	4b06      	ldr	r3, [pc, #24]	; (8006a74 <HAL_MspInit+0x4c>)
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a62:	603b      	str	r3, [r7, #0]
 8006a64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006a66:	bf00      	nop
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	40023800 	.word	0x40023800

08006a78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b08c      	sub	sp, #48	; 0x30
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a80:	f107 031c 	add.w	r3, r7, #28
 8006a84:	2200      	movs	r2, #0
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	605a      	str	r2, [r3, #4]
 8006a8a:	609a      	str	r2, [r3, #8]
 8006a8c:	60da      	str	r2, [r3, #12]
 8006a8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a4a      	ldr	r2, [pc, #296]	; (8006bc0 <HAL_ADC_MspInit+0x148>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	f040 808e 	bne.w	8006bb8 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	61bb      	str	r3, [r7, #24]
 8006aa0:	4b48      	ldr	r3, [pc, #288]	; (8006bc4 <HAL_ADC_MspInit+0x14c>)
 8006aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa4:	4a47      	ldr	r2, [pc, #284]	; (8006bc4 <HAL_ADC_MspInit+0x14c>)
 8006aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006aaa:	6453      	str	r3, [r2, #68]	; 0x44
 8006aac:	4b45      	ldr	r3, [pc, #276]	; (8006bc4 <HAL_ADC_MspInit+0x14c>)
 8006aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ab4:	61bb      	str	r3, [r7, #24]
 8006ab6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ab8:	2300      	movs	r3, #0
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	4b41      	ldr	r3, [pc, #260]	; (8006bc4 <HAL_ADC_MspInit+0x14c>)
 8006abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac0:	4a40      	ldr	r2, [pc, #256]	; (8006bc4 <HAL_ADC_MspInit+0x14c>)
 8006ac2:	f043 0304 	orr.w	r3, r3, #4
 8006ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8006ac8:	4b3e      	ldr	r3, [pc, #248]	; (8006bc4 <HAL_ADC_MspInit+0x14c>)
 8006aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	613b      	str	r3, [r7, #16]
 8006ad8:	4b3a      	ldr	r3, [pc, #232]	; (8006bc4 <HAL_ADC_MspInit+0x14c>)
 8006ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006adc:	4a39      	ldr	r2, [pc, #228]	; (8006bc4 <HAL_ADC_MspInit+0x14c>)
 8006ade:	f043 0301 	orr.w	r3, r3, #1
 8006ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8006ae4:	4b37      	ldr	r3, [pc, #220]	; (8006bc4 <HAL_ADC_MspInit+0x14c>)
 8006ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	613b      	str	r3, [r7, #16]
 8006aee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006af0:	2300      	movs	r3, #0
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	4b33      	ldr	r3, [pc, #204]	; (8006bc4 <HAL_ADC_MspInit+0x14c>)
 8006af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af8:	4a32      	ldr	r2, [pc, #200]	; (8006bc4 <HAL_ADC_MspInit+0x14c>)
 8006afa:	f043 0302 	orr.w	r3, r3, #2
 8006afe:	6313      	str	r3, [r2, #48]	; 0x30
 8006b00:	4b30      	ldr	r3, [pc, #192]	; (8006bc4 <HAL_ADC_MspInit+0x14c>)
 8006b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b04:	f003 0302 	and.w	r3, r3, #2
 8006b08:	60fb      	str	r3, [r7, #12]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006b0c:	230f      	movs	r3, #15
 8006b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b10:	2303      	movs	r3, #3
 8006b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b14:	2300      	movs	r3, #0
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b18:	f107 031c 	add.w	r3, r7, #28
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	482a      	ldr	r0, [pc, #168]	; (8006bc8 <HAL_ADC_MspInit+0x150>)
 8006b20:	f003 fffc 	bl	800ab1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006b24:	23ff      	movs	r3, #255	; 0xff
 8006b26:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b30:	f107 031c 	add.w	r3, r7, #28
 8006b34:	4619      	mov	r1, r3
 8006b36:	4825      	ldr	r0, [pc, #148]	; (8006bcc <HAL_ADC_MspInit+0x154>)
 8006b38:	f003 fff0 	bl	800ab1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b40:	2303      	movs	r3, #3
 8006b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b44:	2300      	movs	r3, #0
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b48:	f107 031c 	add.w	r3, r7, #28
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4820      	ldr	r0, [pc, #128]	; (8006bd0 <HAL_ADC_MspInit+0x158>)
 8006b50:	f003 ffe4 	bl	800ab1c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006b54:	4b1f      	ldr	r3, [pc, #124]	; (8006bd4 <HAL_ADC_MspInit+0x15c>)
 8006b56:	4a20      	ldr	r2, [pc, #128]	; (8006bd8 <HAL_ADC_MspInit+0x160>)
 8006b58:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006b5a:	4b1e      	ldr	r3, [pc, #120]	; (8006bd4 <HAL_ADC_MspInit+0x15c>)
 8006b5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b60:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b62:	4b1c      	ldr	r3, [pc, #112]	; (8006bd4 <HAL_ADC_MspInit+0x15c>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b68:	4b1a      	ldr	r3, [pc, #104]	; (8006bd4 <HAL_ADC_MspInit+0x15c>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006b6e:	4b19      	ldr	r3, [pc, #100]	; (8006bd4 <HAL_ADC_MspInit+0x15c>)
 8006b70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b74:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006b76:	4b17      	ldr	r3, [pc, #92]	; (8006bd4 <HAL_ADC_MspInit+0x15c>)
 8006b78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b7c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006b7e:	4b15      	ldr	r3, [pc, #84]	; (8006bd4 <HAL_ADC_MspInit+0x15c>)
 8006b80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006b84:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006b86:	4b13      	ldr	r3, [pc, #76]	; (8006bd4 <HAL_ADC_MspInit+0x15c>)
 8006b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b8c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006b8e:	4b11      	ldr	r3, [pc, #68]	; (8006bd4 <HAL_ADC_MspInit+0x15c>)
 8006b90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006b94:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006b96:	4b0f      	ldr	r3, [pc, #60]	; (8006bd4 <HAL_ADC_MspInit+0x15c>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006b9c:	480d      	ldr	r0, [pc, #52]	; (8006bd4 <HAL_ADC_MspInit+0x15c>)
 8006b9e:	f003 fc1f 	bl	800a3e0 <HAL_DMA_Init>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006ba8:	f7ff ff32 	bl	8006a10 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a09      	ldr	r2, [pc, #36]	; (8006bd4 <HAL_ADC_MspInit+0x15c>)
 8006bb0:	639a      	str	r2, [r3, #56]	; 0x38
 8006bb2:	4a08      	ldr	r2, [pc, #32]	; (8006bd4 <HAL_ADC_MspInit+0x15c>)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006bb8:	bf00      	nop
 8006bba:	3730      	adds	r7, #48	; 0x30
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	40012100 	.word	0x40012100
 8006bc4:	40023800 	.word	0x40023800
 8006bc8:	40020800 	.word	0x40020800
 8006bcc:	40020000 	.word	0x40020000
 8006bd0:	40020400 	.word	0x40020400
 8006bd4:	2003fca4 	.word	0x2003fca4
 8006bd8:	40026440 	.word	0x40026440

08006bdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08c      	sub	sp, #48	; 0x30
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006be4:	f107 031c 	add.w	r3, r7, #28
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	605a      	str	r2, [r3, #4]
 8006bee:	609a      	str	r2, [r3, #8]
 8006bf0:	60da      	str	r2, [r3, #12]
 8006bf2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a32      	ldr	r2, [pc, #200]	; (8006cc4 <HAL_I2C_MspInit+0xe8>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d12c      	bne.n	8006c58 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bfe:	2300      	movs	r3, #0
 8006c00:	61bb      	str	r3, [r7, #24]
 8006c02:	4b31      	ldr	r3, [pc, #196]	; (8006cc8 <HAL_I2C_MspInit+0xec>)
 8006c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c06:	4a30      	ldr	r2, [pc, #192]	; (8006cc8 <HAL_I2C_MspInit+0xec>)
 8006c08:	f043 0302 	orr.w	r3, r3, #2
 8006c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c0e:	4b2e      	ldr	r3, [pc, #184]	; (8006cc8 <HAL_I2C_MspInit+0xec>)
 8006c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	61bb      	str	r3, [r7, #24]
 8006c18:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006c1a:	23c0      	movs	r3, #192	; 0xc0
 8006c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c1e:	2312      	movs	r3, #18
 8006c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c22:	2301      	movs	r3, #1
 8006c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c26:	2303      	movs	r3, #3
 8006c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006c2a:	2304      	movs	r3, #4
 8006c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c2e:	f107 031c 	add.w	r3, r7, #28
 8006c32:	4619      	mov	r1, r3
 8006c34:	4825      	ldr	r0, [pc, #148]	; (8006ccc <HAL_I2C_MspInit+0xf0>)
 8006c36:	f003 ff71 	bl	800ab1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	617b      	str	r3, [r7, #20]
 8006c3e:	4b22      	ldr	r3, [pc, #136]	; (8006cc8 <HAL_I2C_MspInit+0xec>)
 8006c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c42:	4a21      	ldr	r2, [pc, #132]	; (8006cc8 <HAL_I2C_MspInit+0xec>)
 8006c44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c48:	6413      	str	r3, [r2, #64]	; 0x40
 8006c4a:	4b1f      	ldr	r3, [pc, #124]	; (8006cc8 <HAL_I2C_MspInit+0xec>)
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006c56:	e031      	b.n	8006cbc <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a1c      	ldr	r2, [pc, #112]	; (8006cd0 <HAL_I2C_MspInit+0xf4>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d12c      	bne.n	8006cbc <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c62:	2300      	movs	r3, #0
 8006c64:	613b      	str	r3, [r7, #16]
 8006c66:	4b18      	ldr	r3, [pc, #96]	; (8006cc8 <HAL_I2C_MspInit+0xec>)
 8006c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6a:	4a17      	ldr	r2, [pc, #92]	; (8006cc8 <HAL_I2C_MspInit+0xec>)
 8006c6c:	f043 0302 	orr.w	r3, r3, #2
 8006c70:	6313      	str	r3, [r2, #48]	; 0x30
 8006c72:	4b15      	ldr	r3, [pc, #84]	; (8006cc8 <HAL_I2C_MspInit+0xec>)
 8006c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	613b      	str	r3, [r7, #16]
 8006c7c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006c7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c84:	2312      	movs	r3, #18
 8006c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006c90:	2304      	movs	r3, #4
 8006c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c94:	f107 031c 	add.w	r3, r7, #28
 8006c98:	4619      	mov	r1, r3
 8006c9a:	480c      	ldr	r0, [pc, #48]	; (8006ccc <HAL_I2C_MspInit+0xf0>)
 8006c9c:	f003 ff3e 	bl	800ab1c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	4b08      	ldr	r3, [pc, #32]	; (8006cc8 <HAL_I2C_MspInit+0xec>)
 8006ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca8:	4a07      	ldr	r2, [pc, #28]	; (8006cc8 <HAL_I2C_MspInit+0xec>)
 8006caa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006cae:	6413      	str	r3, [r2, #64]	; 0x40
 8006cb0:	4b05      	ldr	r3, [pc, #20]	; (8006cc8 <HAL_I2C_MspInit+0xec>)
 8006cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cb8:	60fb      	str	r3, [r7, #12]
 8006cba:	68fb      	ldr	r3, [r7, #12]
}
 8006cbc:	bf00      	nop
 8006cbe:	3730      	adds	r7, #48	; 0x30
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	40005400 	.word	0x40005400
 8006cc8:	40023800 	.word	0x40023800
 8006ccc:	40020400 	.word	0x40020400
 8006cd0:	40005800 	.word	0x40005800

08006cd4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b08a      	sub	sp, #40	; 0x28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cdc:	f107 0314 	add.w	r3, r7, #20
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	605a      	str	r2, [r3, #4]
 8006ce6:	609a      	str	r2, [r3, #8]
 8006ce8:	60da      	str	r2, [r3, #12]
 8006cea:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a69      	ldr	r2, [pc, #420]	; (8006e98 <HAL_SD_MspInit+0x1c4>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	f040 80cb 	bne.w	8006e8e <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	613b      	str	r3, [r7, #16]
 8006cfc:	4b67      	ldr	r3, [pc, #412]	; (8006e9c <HAL_SD_MspInit+0x1c8>)
 8006cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d00:	4a66      	ldr	r2, [pc, #408]	; (8006e9c <HAL_SD_MspInit+0x1c8>)
 8006d02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d06:	6453      	str	r3, [r2, #68]	; 0x44
 8006d08:	4b64      	ldr	r3, [pc, #400]	; (8006e9c <HAL_SD_MspInit+0x1c8>)
 8006d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d10:	613b      	str	r3, [r7, #16]
 8006d12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d14:	2300      	movs	r3, #0
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	4b60      	ldr	r3, [pc, #384]	; (8006e9c <HAL_SD_MspInit+0x1c8>)
 8006d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1c:	4a5f      	ldr	r2, [pc, #380]	; (8006e9c <HAL_SD_MspInit+0x1c8>)
 8006d1e:	f043 0304 	orr.w	r3, r3, #4
 8006d22:	6313      	str	r3, [r2, #48]	; 0x30
 8006d24:	4b5d      	ldr	r3, [pc, #372]	; (8006e9c <HAL_SD_MspInit+0x1c8>)
 8006d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d28:	f003 0304 	and.w	r3, r3, #4
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d30:	2300      	movs	r3, #0
 8006d32:	60bb      	str	r3, [r7, #8]
 8006d34:	4b59      	ldr	r3, [pc, #356]	; (8006e9c <HAL_SD_MspInit+0x1c8>)
 8006d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d38:	4a58      	ldr	r2, [pc, #352]	; (8006e9c <HAL_SD_MspInit+0x1c8>)
 8006d3a:	f043 0308 	orr.w	r3, r3, #8
 8006d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8006d40:	4b56      	ldr	r3, [pc, #344]	; (8006e9c <HAL_SD_MspInit+0x1c8>)
 8006d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d44:	f003 0308 	and.w	r3, r3, #8
 8006d48:	60bb      	str	r3, [r7, #8]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006d4c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006d50:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d52:	2302      	movs	r3, #2
 8006d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d56:	2300      	movs	r3, #0
 8006d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006d5e:	230c      	movs	r3, #12
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d62:	f107 0314 	add.w	r3, r7, #20
 8006d66:	4619      	mov	r1, r3
 8006d68:	484d      	ldr	r0, [pc, #308]	; (8006ea0 <HAL_SD_MspInit+0x1cc>)
 8006d6a:	f003 fed7 	bl	800ab1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006d6e:	2304      	movs	r3, #4
 8006d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d72:	2302      	movs	r3, #2
 8006d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d76:	2300      	movs	r3, #0
 8006d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006d7e:	230c      	movs	r3, #12
 8006d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d82:	f107 0314 	add.w	r3, r7, #20
 8006d86:	4619      	mov	r1, r3
 8006d88:	4846      	ldr	r0, [pc, #280]	; (8006ea4 <HAL_SD_MspInit+0x1d0>)
 8006d8a:	f003 fec7 	bl	800ab1c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006d8e:	4b46      	ldr	r3, [pc, #280]	; (8006ea8 <HAL_SD_MspInit+0x1d4>)
 8006d90:	4a46      	ldr	r2, [pc, #280]	; (8006eac <HAL_SD_MspInit+0x1d8>)
 8006d92:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006d94:	4b44      	ldr	r3, [pc, #272]	; (8006ea8 <HAL_SD_MspInit+0x1d4>)
 8006d96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006d9a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d9c:	4b42      	ldr	r3, [pc, #264]	; (8006ea8 <HAL_SD_MspInit+0x1d4>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006da2:	4b41      	ldr	r3, [pc, #260]	; (8006ea8 <HAL_SD_MspInit+0x1d4>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006da8:	4b3f      	ldr	r3, [pc, #252]	; (8006ea8 <HAL_SD_MspInit+0x1d4>)
 8006daa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006dae:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006db0:	4b3d      	ldr	r3, [pc, #244]	; (8006ea8 <HAL_SD_MspInit+0x1d4>)
 8006db2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006db6:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006db8:	4b3b      	ldr	r3, [pc, #236]	; (8006ea8 <HAL_SD_MspInit+0x1d4>)
 8006dba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006dbe:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006dc0:	4b39      	ldr	r3, [pc, #228]	; (8006ea8 <HAL_SD_MspInit+0x1d4>)
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006dc6:	4b38      	ldr	r3, [pc, #224]	; (8006ea8 <HAL_SD_MspInit+0x1d4>)
 8006dc8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006dcc:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006dce:	4b36      	ldr	r3, [pc, #216]	; (8006ea8 <HAL_SD_MspInit+0x1d4>)
 8006dd0:	2204      	movs	r2, #4
 8006dd2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006dd4:	4b34      	ldr	r3, [pc, #208]	; (8006ea8 <HAL_SD_MspInit+0x1d4>)
 8006dd6:	2203      	movs	r2, #3
 8006dd8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006dda:	4b33      	ldr	r3, [pc, #204]	; (8006ea8 <HAL_SD_MspInit+0x1d4>)
 8006ddc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006de0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006de2:	4b31      	ldr	r3, [pc, #196]	; (8006ea8 <HAL_SD_MspInit+0x1d4>)
 8006de4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006de8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006dea:	482f      	ldr	r0, [pc, #188]	; (8006ea8 <HAL_SD_MspInit+0x1d4>)
 8006dec:	f003 faf8 	bl	800a3e0 <HAL_DMA_Init>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006df6:	f7ff fe0b 	bl	8006a10 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a2a      	ldr	r2, [pc, #168]	; (8006ea8 <HAL_SD_MspInit+0x1d4>)
 8006dfe:	641a      	str	r2, [r3, #64]	; 0x40
 8006e00:	4a29      	ldr	r2, [pc, #164]	; (8006ea8 <HAL_SD_MspInit+0x1d4>)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006e06:	4b2a      	ldr	r3, [pc, #168]	; (8006eb0 <HAL_SD_MspInit+0x1dc>)
 8006e08:	4a2a      	ldr	r2, [pc, #168]	; (8006eb4 <HAL_SD_MspInit+0x1e0>)
 8006e0a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006e0c:	4b28      	ldr	r3, [pc, #160]	; (8006eb0 <HAL_SD_MspInit+0x1dc>)
 8006e0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006e12:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e14:	4b26      	ldr	r3, [pc, #152]	; (8006eb0 <HAL_SD_MspInit+0x1dc>)
 8006e16:	2240      	movs	r2, #64	; 0x40
 8006e18:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e1a:	4b25      	ldr	r3, [pc, #148]	; (8006eb0 <HAL_SD_MspInit+0x1dc>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006e20:	4b23      	ldr	r3, [pc, #140]	; (8006eb0 <HAL_SD_MspInit+0x1dc>)
 8006e22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e26:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006e28:	4b21      	ldr	r3, [pc, #132]	; (8006eb0 <HAL_SD_MspInit+0x1dc>)
 8006e2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e2e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006e30:	4b1f      	ldr	r3, [pc, #124]	; (8006eb0 <HAL_SD_MspInit+0x1dc>)
 8006e32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e36:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006e38:	4b1d      	ldr	r3, [pc, #116]	; (8006eb0 <HAL_SD_MspInit+0x1dc>)
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006e3e:	4b1c      	ldr	r3, [pc, #112]	; (8006eb0 <HAL_SD_MspInit+0x1dc>)
 8006e40:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006e44:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006e46:	4b1a      	ldr	r3, [pc, #104]	; (8006eb0 <HAL_SD_MspInit+0x1dc>)
 8006e48:	2204      	movs	r2, #4
 8006e4a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006e4c:	4b18      	ldr	r3, [pc, #96]	; (8006eb0 <HAL_SD_MspInit+0x1dc>)
 8006e4e:	2203      	movs	r2, #3
 8006e50:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006e52:	4b17      	ldr	r3, [pc, #92]	; (8006eb0 <HAL_SD_MspInit+0x1dc>)
 8006e54:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006e58:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006e5a:	4b15      	ldr	r3, [pc, #84]	; (8006eb0 <HAL_SD_MspInit+0x1dc>)
 8006e5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006e60:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006e62:	4813      	ldr	r0, [pc, #76]	; (8006eb0 <HAL_SD_MspInit+0x1dc>)
 8006e64:	f003 fabc 	bl	800a3e0 <HAL_DMA_Init>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8006e6e:	f7ff fdcf 	bl	8006a10 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a0e      	ldr	r2, [pc, #56]	; (8006eb0 <HAL_SD_MspInit+0x1dc>)
 8006e76:	63da      	str	r2, [r3, #60]	; 0x3c
 8006e78:	4a0d      	ldr	r2, [pc, #52]	; (8006eb0 <HAL_SD_MspInit+0x1dc>)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006e7e:	2200      	movs	r2, #0
 8006e80:	2100      	movs	r1, #0
 8006e82:	2031      	movs	r0, #49	; 0x31
 8006e84:	f003 fa75 	bl	800a372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006e88:	2031      	movs	r0, #49	; 0x31
 8006e8a:	f003 fa8e 	bl	800a3aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006e8e:	bf00      	nop
 8006e90:	3728      	adds	r7, #40	; 0x28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	40012c00 	.word	0x40012c00
 8006e9c:	40023800 	.word	0x40023800
 8006ea0:	40020800 	.word	0x40020800
 8006ea4:	40020c00 	.word	0x40020c00
 8006ea8:	2003f7cc 	.word	0x2003f7cc
 8006eac:	40026458 	.word	0x40026458
 8006eb0:	2003fb00 	.word	0x2003fb00
 8006eb4:	400264a0 	.word	0x400264a0

08006eb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08a      	sub	sp, #40	; 0x28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ec0:	f107 0314 	add.w	r3, r7, #20
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	605a      	str	r2, [r3, #4]
 8006eca:	609a      	str	r2, [r3, #8]
 8006ecc:	60da      	str	r2, [r3, #12]
 8006ece:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a19      	ldr	r2, [pc, #100]	; (8006f3c <HAL_SPI_MspInit+0x84>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d12c      	bne.n	8006f34 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006eda:	2300      	movs	r3, #0
 8006edc:	613b      	str	r3, [r7, #16]
 8006ede:	4b18      	ldr	r3, [pc, #96]	; (8006f40 <HAL_SPI_MspInit+0x88>)
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	4a17      	ldr	r2, [pc, #92]	; (8006f40 <HAL_SPI_MspInit+0x88>)
 8006ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8006eea:	4b15      	ldr	r3, [pc, #84]	; (8006f40 <HAL_SPI_MspInit+0x88>)
 8006eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ef2:	613b      	str	r3, [r7, #16]
 8006ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	60fb      	str	r3, [r7, #12]
 8006efa:	4b11      	ldr	r3, [pc, #68]	; (8006f40 <HAL_SPI_MspInit+0x88>)
 8006efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efe:	4a10      	ldr	r2, [pc, #64]	; (8006f40 <HAL_SPI_MspInit+0x88>)
 8006f00:	f043 0302 	orr.w	r3, r3, #2
 8006f04:	6313      	str	r3, [r2, #48]	; 0x30
 8006f06:	4b0e      	ldr	r3, [pc, #56]	; (8006f40 <HAL_SPI_MspInit+0x88>)
 8006f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0a:	f003 0302 	and.w	r3, r3, #2
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006f12:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f18:	2302      	movs	r3, #2
 8006f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f20:	2303      	movs	r3, #3
 8006f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006f24:	2305      	movs	r3, #5
 8006f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f28:	f107 0314 	add.w	r3, r7, #20
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	4805      	ldr	r0, [pc, #20]	; (8006f44 <HAL_SPI_MspInit+0x8c>)
 8006f30:	f003 fdf4 	bl	800ab1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006f34:	bf00      	nop
 8006f36:	3728      	adds	r7, #40	; 0x28
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	40003800 	.word	0x40003800
 8006f40:	40023800 	.word	0x40023800
 8006f44:	40020400 	.word	0x40020400

08006f48 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b08c      	sub	sp, #48	; 0x30
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f50:	f107 031c 	add.w	r3, r7, #28
 8006f54:	2200      	movs	r2, #0
 8006f56:	601a      	str	r2, [r3, #0]
 8006f58:	605a      	str	r2, [r3, #4]
 8006f5a:	609a      	str	r2, [r3, #8]
 8006f5c:	60da      	str	r2, [r3, #12]
 8006f5e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a2d      	ldr	r2, [pc, #180]	; (800701c <HAL_TIM_PWM_MspInit+0xd4>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d12d      	bne.n	8006fc6 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	61bb      	str	r3, [r7, #24]
 8006f6e:	4b2c      	ldr	r3, [pc, #176]	; (8007020 <HAL_TIM_PWM_MspInit+0xd8>)
 8006f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f72:	4a2b      	ldr	r2, [pc, #172]	; (8007020 <HAL_TIM_PWM_MspInit+0xd8>)
 8006f74:	f043 0301 	orr.w	r3, r3, #1
 8006f78:	6453      	str	r3, [r2, #68]	; 0x44
 8006f7a:	4b29      	ldr	r3, [pc, #164]	; (8007020 <HAL_TIM_PWM_MspInit+0xd8>)
 8006f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	61bb      	str	r3, [r7, #24]
 8006f84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006f86:	2300      	movs	r3, #0
 8006f88:	617b      	str	r3, [r7, #20]
 8006f8a:	4b25      	ldr	r3, [pc, #148]	; (8007020 <HAL_TIM_PWM_MspInit+0xd8>)
 8006f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8e:	4a24      	ldr	r2, [pc, #144]	; (8007020 <HAL_TIM_PWM_MspInit+0xd8>)
 8006f90:	f043 0310 	orr.w	r3, r3, #16
 8006f94:	6313      	str	r3, [r2, #48]	; 0x30
 8006f96:	4b22      	ldr	r3, [pc, #136]	; (8007020 <HAL_TIM_PWM_MspInit+0xd8>)
 8006f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9a:	f003 0310 	and.w	r3, r3, #16
 8006f9e:	617b      	str	r3, [r7, #20]
 8006fa0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006fa2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fa8:	2302      	movs	r3, #2
 8006faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fac:	2300      	movs	r3, #0
 8006fae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006fb8:	f107 031c 	add.w	r3, r7, #28
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	4819      	ldr	r0, [pc, #100]	; (8007024 <HAL_TIM_PWM_MspInit+0xdc>)
 8006fc0:	f003 fdac 	bl	800ab1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006fc4:	e026      	b.n	8007014 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a17      	ldr	r2, [pc, #92]	; (8007028 <HAL_TIM_PWM_MspInit+0xe0>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d10e      	bne.n	8006fee <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	613b      	str	r3, [r7, #16]
 8006fd4:	4b12      	ldr	r3, [pc, #72]	; (8007020 <HAL_TIM_PWM_MspInit+0xd8>)
 8006fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd8:	4a11      	ldr	r2, [pc, #68]	; (8007020 <HAL_TIM_PWM_MspInit+0xd8>)
 8006fda:	f043 0302 	orr.w	r3, r3, #2
 8006fde:	6413      	str	r3, [r2, #64]	; 0x40
 8006fe0:	4b0f      	ldr	r3, [pc, #60]	; (8007020 <HAL_TIM_PWM_MspInit+0xd8>)
 8006fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	613b      	str	r3, [r7, #16]
 8006fea:	693b      	ldr	r3, [r7, #16]
}
 8006fec:	e012      	b.n	8007014 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a0e      	ldr	r2, [pc, #56]	; (800702c <HAL_TIM_PWM_MspInit+0xe4>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d10d      	bne.n	8007014 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	4b08      	ldr	r3, [pc, #32]	; (8007020 <HAL_TIM_PWM_MspInit+0xd8>)
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	4a07      	ldr	r2, [pc, #28]	; (8007020 <HAL_TIM_PWM_MspInit+0xd8>)
 8007002:	f043 0304 	orr.w	r3, r3, #4
 8007006:	6413      	str	r3, [r2, #64]	; 0x40
 8007008:	4b05      	ldr	r3, [pc, #20]	; (8007020 <HAL_TIM_PWM_MspInit+0xd8>)
 800700a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700c:	f003 0304 	and.w	r3, r3, #4
 8007010:	60fb      	str	r3, [r7, #12]
 8007012:	68fb      	ldr	r3, [r7, #12]
}
 8007014:	bf00      	nop
 8007016:	3730      	adds	r7, #48	; 0x30
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	40010000 	.word	0x40010000
 8007020:	40023800 	.word	0x40023800
 8007024:	40021000 	.word	0x40021000
 8007028:	40000400 	.word	0x40000400
 800702c:	40000800 	.word	0x40000800

08007030 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b088      	sub	sp, #32
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a3e      	ldr	r2, [pc, #248]	; (8007138 <HAL_TIM_Base_MspInit+0x108>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d116      	bne.n	8007070 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007042:	2300      	movs	r3, #0
 8007044:	61fb      	str	r3, [r7, #28]
 8007046:	4b3d      	ldr	r3, [pc, #244]	; (800713c <HAL_TIM_Base_MspInit+0x10c>)
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704a:	4a3c      	ldr	r2, [pc, #240]	; (800713c <HAL_TIM_Base_MspInit+0x10c>)
 800704c:	f043 0310 	orr.w	r3, r3, #16
 8007050:	6413      	str	r3, [r2, #64]	; 0x40
 8007052:	4b3a      	ldr	r3, [pc, #232]	; (800713c <HAL_TIM_Base_MspInit+0x10c>)
 8007054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007056:	f003 0310 	and.w	r3, r3, #16
 800705a:	61fb      	str	r3, [r7, #28]
 800705c:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800705e:	2200      	movs	r2, #0
 8007060:	2101      	movs	r1, #1
 8007062:	2036      	movs	r0, #54	; 0x36
 8007064:	f003 f985 	bl	800a372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007068:	2036      	movs	r0, #54	; 0x36
 800706a:	f003 f99e 	bl	800a3aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800706e:	e05e      	b.n	800712e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a32      	ldr	r2, [pc, #200]	; (8007140 <HAL_TIM_Base_MspInit+0x110>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d116      	bne.n	80070a8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800707a:	2300      	movs	r3, #0
 800707c:	61bb      	str	r3, [r7, #24]
 800707e:	4b2f      	ldr	r3, [pc, #188]	; (800713c <HAL_TIM_Base_MspInit+0x10c>)
 8007080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007082:	4a2e      	ldr	r2, [pc, #184]	; (800713c <HAL_TIM_Base_MspInit+0x10c>)
 8007084:	f043 0320 	orr.w	r3, r3, #32
 8007088:	6413      	str	r3, [r2, #64]	; 0x40
 800708a:	4b2c      	ldr	r3, [pc, #176]	; (800713c <HAL_TIM_Base_MspInit+0x10c>)
 800708c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708e:	f003 0320 	and.w	r3, r3, #32
 8007092:	61bb      	str	r3, [r7, #24]
 8007094:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007096:	2200      	movs	r2, #0
 8007098:	2100      	movs	r1, #0
 800709a:	2037      	movs	r0, #55	; 0x37
 800709c:	f003 f969 	bl	800a372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80070a0:	2037      	movs	r0, #55	; 0x37
 80070a2:	f003 f982 	bl	800a3aa <HAL_NVIC_EnableIRQ>
}
 80070a6:	e042      	b.n	800712e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a25      	ldr	r2, [pc, #148]	; (8007144 <HAL_TIM_Base_MspInit+0x114>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d10e      	bne.n	80070d0 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80070b2:	2300      	movs	r3, #0
 80070b4:	617b      	str	r3, [r7, #20]
 80070b6:	4b21      	ldr	r3, [pc, #132]	; (800713c <HAL_TIM_Base_MspInit+0x10c>)
 80070b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ba:	4a20      	ldr	r2, [pc, #128]	; (800713c <HAL_TIM_Base_MspInit+0x10c>)
 80070bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070c0:	6453      	str	r3, [r2, #68]	; 0x44
 80070c2:	4b1e      	ldr	r3, [pc, #120]	; (800713c <HAL_TIM_Base_MspInit+0x10c>)
 80070c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ca:	617b      	str	r3, [r7, #20]
 80070cc:	697b      	ldr	r3, [r7, #20]
}
 80070ce:	e02e      	b.n	800712e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a1c      	ldr	r2, [pc, #112]	; (8007148 <HAL_TIM_Base_MspInit+0x118>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d10e      	bne.n	80070f8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80070da:	2300      	movs	r3, #0
 80070dc:	613b      	str	r3, [r7, #16]
 80070de:	4b17      	ldr	r3, [pc, #92]	; (800713c <HAL_TIM_Base_MspInit+0x10c>)
 80070e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e2:	4a16      	ldr	r2, [pc, #88]	; (800713c <HAL_TIM_Base_MspInit+0x10c>)
 80070e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070e8:	6453      	str	r3, [r2, #68]	; 0x44
 80070ea:	4b14      	ldr	r3, [pc, #80]	; (800713c <HAL_TIM_Base_MspInit+0x10c>)
 80070ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070f2:	613b      	str	r3, [r7, #16]
 80070f4:	693b      	ldr	r3, [r7, #16]
}
 80070f6:	e01a      	b.n	800712e <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a13      	ldr	r2, [pc, #76]	; (800714c <HAL_TIM_Base_MspInit+0x11c>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d115      	bne.n	800712e <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007102:	2300      	movs	r3, #0
 8007104:	60fb      	str	r3, [r7, #12]
 8007106:	4b0d      	ldr	r3, [pc, #52]	; (800713c <HAL_TIM_Base_MspInit+0x10c>)
 8007108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710a:	4a0c      	ldr	r2, [pc, #48]	; (800713c <HAL_TIM_Base_MspInit+0x10c>)
 800710c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007110:	6413      	str	r3, [r2, #64]	; 0x40
 8007112:	4b0a      	ldr	r3, [pc, #40]	; (800713c <HAL_TIM_Base_MspInit+0x10c>)
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800711a:	60fb      	str	r3, [r7, #12]
 800711c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800711e:	2200      	movs	r2, #0
 8007120:	2100      	movs	r1, #0
 8007122:	202c      	movs	r0, #44	; 0x2c
 8007124:	f003 f925 	bl	800a372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007128:	202c      	movs	r0, #44	; 0x2c
 800712a:	f003 f93e 	bl	800a3aa <HAL_NVIC_EnableIRQ>
}
 800712e:	bf00      	nop
 8007130:	3720      	adds	r7, #32
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	40001000 	.word	0x40001000
 800713c:	40023800 	.word	0x40023800
 8007140:	40001400 	.word	0x40001400
 8007144:	40014400 	.word	0x40014400
 8007148:	40014800 	.word	0x40014800
 800714c:	40001c00 	.word	0x40001c00

08007150 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b08a      	sub	sp, #40	; 0x28
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007158:	f107 0314 	add.w	r3, r7, #20
 800715c:	2200      	movs	r2, #0
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	605a      	str	r2, [r3, #4]
 8007162:	609a      	str	r2, [r3, #8]
 8007164:	60da      	str	r2, [r3, #12]
 8007166:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a1d      	ldr	r2, [pc, #116]	; (80071e4 <HAL_TIM_Encoder_MspInit+0x94>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d133      	bne.n	80071da <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007172:	2300      	movs	r3, #0
 8007174:	613b      	str	r3, [r7, #16]
 8007176:	4b1c      	ldr	r3, [pc, #112]	; (80071e8 <HAL_TIM_Encoder_MspInit+0x98>)
 8007178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800717a:	4a1b      	ldr	r2, [pc, #108]	; (80071e8 <HAL_TIM_Encoder_MspInit+0x98>)
 800717c:	f043 0302 	orr.w	r3, r3, #2
 8007180:	6453      	str	r3, [r2, #68]	; 0x44
 8007182:	4b19      	ldr	r3, [pc, #100]	; (80071e8 <HAL_TIM_Encoder_MspInit+0x98>)
 8007184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	613b      	str	r3, [r7, #16]
 800718c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800718e:	2300      	movs	r3, #0
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	4b15      	ldr	r3, [pc, #84]	; (80071e8 <HAL_TIM_Encoder_MspInit+0x98>)
 8007194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007196:	4a14      	ldr	r2, [pc, #80]	; (80071e8 <HAL_TIM_Encoder_MspInit+0x98>)
 8007198:	f043 0304 	orr.w	r3, r3, #4
 800719c:	6313      	str	r3, [r2, #48]	; 0x30
 800719e:	4b12      	ldr	r3, [pc, #72]	; (80071e8 <HAL_TIM_Encoder_MspInit+0x98>)
 80071a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a2:	f003 0304 	and.w	r3, r3, #4
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80071aa:	23c0      	movs	r3, #192	; 0xc0
 80071ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ae:	2302      	movs	r3, #2
 80071b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071b2:	2300      	movs	r3, #0
 80071b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071b6:	2300      	movs	r3, #0
 80071b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80071ba:	2303      	movs	r3, #3
 80071bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071be:	f107 0314 	add.w	r3, r7, #20
 80071c2:	4619      	mov	r1, r3
 80071c4:	4809      	ldr	r0, [pc, #36]	; (80071ec <HAL_TIM_Encoder_MspInit+0x9c>)
 80071c6:	f003 fca9 	bl	800ab1c <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80071ca:	2200      	movs	r2, #0
 80071cc:	2100      	movs	r1, #0
 80071ce:	202c      	movs	r0, #44	; 0x2c
 80071d0:	f003 f8cf 	bl	800a372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80071d4:	202c      	movs	r0, #44	; 0x2c
 80071d6:	f003 f8e8 	bl	800a3aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80071da:	bf00      	nop
 80071dc:	3728      	adds	r7, #40	; 0x28
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	40010400 	.word	0x40010400
 80071e8:	40023800 	.word	0x40023800
 80071ec:	40020800 	.word	0x40020800

080071f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b08c      	sub	sp, #48	; 0x30
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071f8:	f107 031c 	add.w	r3, r7, #28
 80071fc:	2200      	movs	r2, #0
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	605a      	str	r2, [r3, #4]
 8007202:	609a      	str	r2, [r3, #8]
 8007204:	60da      	str	r2, [r3, #12]
 8007206:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a5c      	ldr	r2, [pc, #368]	; (8007380 <HAL_TIM_MspPostInit+0x190>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d11f      	bne.n	8007252 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007212:	2300      	movs	r3, #0
 8007214:	61bb      	str	r3, [r7, #24]
 8007216:	4b5b      	ldr	r3, [pc, #364]	; (8007384 <HAL_TIM_MspPostInit+0x194>)
 8007218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721a:	4a5a      	ldr	r2, [pc, #360]	; (8007384 <HAL_TIM_MspPostInit+0x194>)
 800721c:	f043 0310 	orr.w	r3, r3, #16
 8007220:	6313      	str	r3, [r2, #48]	; 0x30
 8007222:	4b58      	ldr	r3, [pc, #352]	; (8007384 <HAL_TIM_MspPostInit+0x194>)
 8007224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007226:	f003 0310 	and.w	r3, r3, #16
 800722a:	61bb      	str	r3, [r7, #24]
 800722c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800722e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007234:	2302      	movs	r3, #2
 8007236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007238:	2300      	movs	r3, #0
 800723a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800723c:	2300      	movs	r3, #0
 800723e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007240:	2301      	movs	r3, #1
 8007242:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007244:	f107 031c 	add.w	r3, r7, #28
 8007248:	4619      	mov	r1, r3
 800724a:	484f      	ldr	r0, [pc, #316]	; (8007388 <HAL_TIM_MspPostInit+0x198>)
 800724c:	f003 fc66 	bl	800ab1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8007250:	e091      	b.n	8007376 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a4d      	ldr	r2, [pc, #308]	; (800738c <HAL_TIM_MspPostInit+0x19c>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d11e      	bne.n	800729a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800725c:	2300      	movs	r3, #0
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	4b48      	ldr	r3, [pc, #288]	; (8007384 <HAL_TIM_MspPostInit+0x194>)
 8007262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007264:	4a47      	ldr	r2, [pc, #284]	; (8007384 <HAL_TIM_MspPostInit+0x194>)
 8007266:	f043 0302 	orr.w	r3, r3, #2
 800726a:	6313      	str	r3, [r2, #48]	; 0x30
 800726c:	4b45      	ldr	r3, [pc, #276]	; (8007384 <HAL_TIM_MspPostInit+0x194>)
 800726e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007270:	f003 0302 	and.w	r3, r3, #2
 8007274:	617b      	str	r3, [r7, #20]
 8007276:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007278:	2330      	movs	r3, #48	; 0x30
 800727a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800727c:	2302      	movs	r3, #2
 800727e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007280:	2300      	movs	r3, #0
 8007282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007284:	2300      	movs	r3, #0
 8007286:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007288:	2302      	movs	r3, #2
 800728a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800728c:	f107 031c 	add.w	r3, r7, #28
 8007290:	4619      	mov	r1, r3
 8007292:	483f      	ldr	r0, [pc, #252]	; (8007390 <HAL_TIM_MspPostInit+0x1a0>)
 8007294:	f003 fc42 	bl	800ab1c <HAL_GPIO_Init>
}
 8007298:	e06d      	b.n	8007376 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a3d      	ldr	r2, [pc, #244]	; (8007394 <HAL_TIM_MspPostInit+0x1a4>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d11f      	bne.n	80072e4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80072a4:	2300      	movs	r3, #0
 80072a6:	613b      	str	r3, [r7, #16]
 80072a8:	4b36      	ldr	r3, [pc, #216]	; (8007384 <HAL_TIM_MspPostInit+0x194>)
 80072aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ac:	4a35      	ldr	r2, [pc, #212]	; (8007384 <HAL_TIM_MspPostInit+0x194>)
 80072ae:	f043 0308 	orr.w	r3, r3, #8
 80072b2:	6313      	str	r3, [r2, #48]	; 0x30
 80072b4:	4b33      	ldr	r3, [pc, #204]	; (8007384 <HAL_TIM_MspPostInit+0x194>)
 80072b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b8:	f003 0308 	and.w	r3, r3, #8
 80072bc:	613b      	str	r3, [r7, #16]
 80072be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80072c0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80072c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072c6:	2302      	movs	r3, #2
 80072c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ca:	2300      	movs	r3, #0
 80072cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072ce:	2300      	movs	r3, #0
 80072d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80072d2:	2302      	movs	r3, #2
 80072d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80072d6:	f107 031c 	add.w	r3, r7, #28
 80072da:	4619      	mov	r1, r3
 80072dc:	482e      	ldr	r0, [pc, #184]	; (8007398 <HAL_TIM_MspPostInit+0x1a8>)
 80072de:	f003 fc1d 	bl	800ab1c <HAL_GPIO_Init>
}
 80072e2:	e048      	b.n	8007376 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a2c      	ldr	r2, [pc, #176]	; (800739c <HAL_TIM_MspPostInit+0x1ac>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d11f      	bne.n	800732e <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072ee:	2300      	movs	r3, #0
 80072f0:	60fb      	str	r3, [r7, #12]
 80072f2:	4b24      	ldr	r3, [pc, #144]	; (8007384 <HAL_TIM_MspPostInit+0x194>)
 80072f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f6:	4a23      	ldr	r2, [pc, #140]	; (8007384 <HAL_TIM_MspPostInit+0x194>)
 80072f8:	f043 0302 	orr.w	r3, r3, #2
 80072fc:	6313      	str	r3, [r2, #48]	; 0x30
 80072fe:	4b21      	ldr	r3, [pc, #132]	; (8007384 <HAL_TIM_MspPostInit+0x194>)
 8007300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007302:	f003 0302 	and.w	r3, r3, #2
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800730a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800730e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007310:	2302      	movs	r3, #2
 8007312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007314:	2300      	movs	r3, #0
 8007316:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007318:	2300      	movs	r3, #0
 800731a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800731c:	2303      	movs	r3, #3
 800731e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007320:	f107 031c 	add.w	r3, r7, #28
 8007324:	4619      	mov	r1, r3
 8007326:	481a      	ldr	r0, [pc, #104]	; (8007390 <HAL_TIM_MspPostInit+0x1a0>)
 8007328:	f003 fbf8 	bl	800ab1c <HAL_GPIO_Init>
}
 800732c:	e023      	b.n	8007376 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a1b      	ldr	r2, [pc, #108]	; (80073a0 <HAL_TIM_MspPostInit+0x1b0>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d11e      	bne.n	8007376 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007338:	2300      	movs	r3, #0
 800733a:	60bb      	str	r3, [r7, #8]
 800733c:	4b11      	ldr	r3, [pc, #68]	; (8007384 <HAL_TIM_MspPostInit+0x194>)
 800733e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007340:	4a10      	ldr	r2, [pc, #64]	; (8007384 <HAL_TIM_MspPostInit+0x194>)
 8007342:	f043 0302 	orr.w	r3, r3, #2
 8007346:	6313      	str	r3, [r2, #48]	; 0x30
 8007348:	4b0e      	ldr	r3, [pc, #56]	; (8007384 <HAL_TIM_MspPostInit+0x194>)
 800734a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734c:	f003 0302 	and.w	r3, r3, #2
 8007350:	60bb      	str	r3, [r7, #8]
 8007352:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800735a:	2302      	movs	r3, #2
 800735c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800735e:	2300      	movs	r3, #0
 8007360:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007362:	2300      	movs	r3, #0
 8007364:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8007366:	2303      	movs	r3, #3
 8007368:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800736a:	f107 031c 	add.w	r3, r7, #28
 800736e:	4619      	mov	r1, r3
 8007370:	4807      	ldr	r0, [pc, #28]	; (8007390 <HAL_TIM_MspPostInit+0x1a0>)
 8007372:	f003 fbd3 	bl	800ab1c <HAL_GPIO_Init>
}
 8007376:	bf00      	nop
 8007378:	3730      	adds	r7, #48	; 0x30
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	40010000 	.word	0x40010000
 8007384:	40023800 	.word	0x40023800
 8007388:	40021000 	.word	0x40021000
 800738c:	40000400 	.word	0x40000400
 8007390:	40020400 	.word	0x40020400
 8007394:	40000800 	.word	0x40000800
 8007398:	40020c00 	.word	0x40020c00
 800739c:	40014400 	.word	0x40014400
 80073a0:	40014800 	.word	0x40014800

080073a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b08a      	sub	sp, #40	; 0x28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073ac:	f107 0314 	add.w	r3, r7, #20
 80073b0:	2200      	movs	r2, #0
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	605a      	str	r2, [r3, #4]
 80073b6:	609a      	str	r2, [r3, #8]
 80073b8:	60da      	str	r2, [r3, #12]
 80073ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a19      	ldr	r2, [pc, #100]	; (8007428 <HAL_UART_MspInit+0x84>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d12b      	bne.n	800741e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80073c6:	2300      	movs	r3, #0
 80073c8:	613b      	str	r3, [r7, #16]
 80073ca:	4b18      	ldr	r3, [pc, #96]	; (800742c <HAL_UART_MspInit+0x88>)
 80073cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ce:	4a17      	ldr	r2, [pc, #92]	; (800742c <HAL_UART_MspInit+0x88>)
 80073d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073d4:	6413      	str	r3, [r2, #64]	; 0x40
 80073d6:	4b15      	ldr	r3, [pc, #84]	; (800742c <HAL_UART_MspInit+0x88>)
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073de:	613b      	str	r3, [r7, #16]
 80073e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80073e2:	2300      	movs	r3, #0
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	4b11      	ldr	r3, [pc, #68]	; (800742c <HAL_UART_MspInit+0x88>)
 80073e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ea:	4a10      	ldr	r2, [pc, #64]	; (800742c <HAL_UART_MspInit+0x88>)
 80073ec:	f043 0308 	orr.w	r3, r3, #8
 80073f0:	6313      	str	r3, [r2, #48]	; 0x30
 80073f2:	4b0e      	ldr	r3, [pc, #56]	; (800742c <HAL_UART_MspInit+0x88>)
 80073f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f6:	f003 0308 	and.w	r3, r3, #8
 80073fa:	60fb      	str	r3, [r7, #12]
 80073fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80073fe:	2360      	movs	r3, #96	; 0x60
 8007400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007402:	2302      	movs	r3, #2
 8007404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007406:	2300      	movs	r3, #0
 8007408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800740a:	2303      	movs	r3, #3
 800740c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800740e:	2307      	movs	r3, #7
 8007410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007412:	f107 0314 	add.w	r3, r7, #20
 8007416:	4619      	mov	r1, r3
 8007418:	4805      	ldr	r0, [pc, #20]	; (8007430 <HAL_UART_MspInit+0x8c>)
 800741a:	f003 fb7f 	bl	800ab1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800741e:	bf00      	nop
 8007420:	3728      	adds	r7, #40	; 0x28
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	40004400 	.word	0x40004400
 800742c:	40023800 	.word	0x40023800
 8007430:	40020c00 	.word	0x40020c00

08007434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007434:	b480      	push	{r7}
 8007436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007438:	e7fe      	b.n	8007438 <NMI_Handler+0x4>

0800743a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800743a:	b480      	push	{r7}
 800743c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800743e:	e7fe      	b.n	800743e <HardFault_Handler+0x4>

08007440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007440:	b480      	push	{r7}
 8007442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007444:	e7fe      	b.n	8007444 <MemManage_Handler+0x4>

08007446 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007446:	b480      	push	{r7}
 8007448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800744a:	e7fe      	b.n	800744a <BusFault_Handler+0x4>

0800744c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800744c:	b480      	push	{r7}
 800744e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007450:	e7fe      	b.n	8007450 <UsageFault_Handler+0x4>

08007452 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007452:	b480      	push	{r7}
 8007454:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007456:	bf00      	nop
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007460:	b480      	push	{r7}
 8007462:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007464:	bf00      	nop
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800746e:	b480      	push	{r7}
 8007470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007472:	bf00      	nop
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007480:	f002 fa54 	bl	800992c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007484:	bf00      	nop
 8007486:	bd80      	pop	{r7, pc}

08007488 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800748c:	4803      	ldr	r0, [pc, #12]	; (800749c <TIM8_UP_TIM13_IRQHandler+0x14>)
 800748e:	f007 fd3f 	bl	800ef10 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8007492:	4803      	ldr	r0, [pc, #12]	; (80074a0 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007494:	f007 fd3c 	bl	800ef10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007498:	bf00      	nop
 800749a:	bd80      	pop	{r7, pc}
 800749c:	2003f884 	.word	0x2003f884
 80074a0:	2003fa80 	.word	0x2003fa80

080074a4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80074a8:	4802      	ldr	r0, [pc, #8]	; (80074b4 <SDIO_IRQHandler+0x10>)
 80074aa:	f005 fdd9 	bl	800d060 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80074ae:	bf00      	nop
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	2003fbe0 	.word	0x2003fbe0

080074b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80074bc:	4802      	ldr	r0, [pc, #8]	; (80074c8 <TIM6_DAC_IRQHandler+0x10>)
 80074be:	f007 fd27 	bl	800ef10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80074c2:	bf00      	nop
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	2003fb60 	.word	0x2003fb60

080074cc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80074d0:	4802      	ldr	r0, [pc, #8]	; (80074dc <TIM7_IRQHandler+0x10>)
 80074d2:	f007 fd1d 	bl	800ef10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80074d6:	bf00      	nop
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	2003fd04 	.word	0x2003fd04

080074e0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80074e4:	4802      	ldr	r0, [pc, #8]	; (80074f0 <DMA2_Stream2_IRQHandler+0x10>)
 80074e6:	f003 f8a3 	bl	800a630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80074ea:	bf00      	nop
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	2003fca4 	.word	0x2003fca4

080074f4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80074f8:	4802      	ldr	r0, [pc, #8]	; (8007504 <DMA2_Stream3_IRQHandler+0x10>)
 80074fa:	f003 f899 	bl	800a630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80074fe:	bf00      	nop
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	2003f7cc 	.word	0x2003f7cc

08007508 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800750c:	4802      	ldr	r0, [pc, #8]	; (8007518 <DMA2_Stream6_IRQHandler+0x10>)
 800750e:	f003 f88f 	bl	800a630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007512:	bf00      	nop
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	2003fb00 	.word	0x2003fb00

0800751c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800751c:	b480      	push	{r7}
 800751e:	af00      	add	r7, sp, #0
	return 1;
 8007520:	2301      	movs	r3, #1
}
 8007522:	4618      	mov	r0, r3
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <_kill>:

int _kill(int pid, int sig)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007536:	f00d ffd9 	bl	80154ec <__errno>
 800753a:	4603      	mov	r3, r0
 800753c:	2216      	movs	r2, #22
 800753e:	601a      	str	r2, [r3, #0]
	return -1;
 8007540:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007544:	4618      	mov	r0, r3
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <_exit>:

void _exit (int status)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007554:	f04f 31ff 	mov.w	r1, #4294967295
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7ff ffe7 	bl	800752c <_kill>
	while (1) {}		/* Make sure we hang here */
 800755e:	e7fe      	b.n	800755e <_exit+0x12>

08007560 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800756c:	2300      	movs	r3, #0
 800756e:	617b      	str	r3, [r7, #20]
 8007570:	e00a      	b.n	8007588 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007572:	f3af 8000 	nop.w
 8007576:	4601      	mov	r1, r0
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	60ba      	str	r2, [r7, #8]
 800757e:	b2ca      	uxtb	r2, r1
 8007580:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	3301      	adds	r3, #1
 8007586:	617b      	str	r3, [r7, #20]
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	429a      	cmp	r2, r3
 800758e:	dbf0      	blt.n	8007572 <_read+0x12>
	}

return len;
 8007590:	687b      	ldr	r3, [r7, #4]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <_close>:
	}
	return len;
}

int _close(int file)
{
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
	return -1;
 80075a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80075c2:	605a      	str	r2, [r3, #4]
	return 0;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <_isatty>:

int _isatty(int file)
{
 80075d2:	b480      	push	{r7}
 80075d4:	b083      	sub	sp, #12
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
	return 1;
 80075da:	2301      	movs	r3, #1
}
 80075dc:	4618      	mov	r0, r3
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
	return 0;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
	...

08007604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800760c:	4a14      	ldr	r2, [pc, #80]	; (8007660 <_sbrk+0x5c>)
 800760e:	4b15      	ldr	r3, [pc, #84]	; (8007664 <_sbrk+0x60>)
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007618:	4b13      	ldr	r3, [pc, #76]	; (8007668 <_sbrk+0x64>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d102      	bne.n	8007626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007620:	4b11      	ldr	r3, [pc, #68]	; (8007668 <_sbrk+0x64>)
 8007622:	4a12      	ldr	r2, [pc, #72]	; (800766c <_sbrk+0x68>)
 8007624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007626:	4b10      	ldr	r3, [pc, #64]	; (8007668 <_sbrk+0x64>)
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4413      	add	r3, r2
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	429a      	cmp	r2, r3
 8007632:	d207      	bcs.n	8007644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007634:	f00d ff5a 	bl	80154ec <__errno>
 8007638:	4603      	mov	r3, r0
 800763a:	220c      	movs	r2, #12
 800763c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800763e:	f04f 33ff 	mov.w	r3, #4294967295
 8007642:	e009      	b.n	8007658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007644:	4b08      	ldr	r3, [pc, #32]	; (8007668 <_sbrk+0x64>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800764a:	4b07      	ldr	r3, [pc, #28]	; (8007668 <_sbrk+0x64>)
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4413      	add	r3, r2
 8007652:	4a05      	ldr	r2, [pc, #20]	; (8007668 <_sbrk+0x64>)
 8007654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007656:	68fb      	ldr	r3, [r7, #12]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3718      	adds	r7, #24
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	20050000 	.word	0x20050000
 8007664:	00000800 	.word	0x00000800
 8007668:	200002bc 	.word	0x200002bc
 800766c:	20041e68 	.word	0x20041e68

08007670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007670:	b480      	push	{r7}
 8007672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007674:	4b08      	ldr	r3, [pc, #32]	; (8007698 <SystemInit+0x28>)
 8007676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800767a:	4a07      	ldr	r2, [pc, #28]	; (8007698 <SystemInit+0x28>)
 800767c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007684:	4b04      	ldr	r3, [pc, #16]	; (8007698 <SystemInit+0x28>)
 8007686:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800768a:	609a      	str	r2, [r3, #8]
#endif
}
 800768c:	bf00      	nop
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	e000ed00 	.word	0xe000ed00

0800769c <cppInit>:
		}
	}
}

void cppInit(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
	lcd_init();
 80076a0:	f7f9 fcec 	bl	800107c <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 80076a4:	483b      	ldr	r0, [pc, #236]	; (8007794 <cppInit+0xf8>)
 80076a6:	f7fd fd3f 	bl	8005128 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 80076aa:	2064      	movs	r0, #100	; 0x64
 80076ac:	f002 f95e 	bl	800996c <HAL_Delay>
	power_sensor.updateValues();
 80076b0:	4838      	ldr	r0, [pc, #224]	; (8007794 <cppInit+0xf8>)
 80076b2:	f7fd fd49 	bl	8005148 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 80076b6:	f7f9 fd25 	bl	8001104 <lcd_clear>
	lcd_locate(0,0);
 80076ba:	2100      	movs	r1, #0
 80076bc:	2000      	movs	r0, #0
 80076be:	f7f9 fd31 	bl	8001124 <lcd_locate>
	lcd_printf("Voltage");
 80076c2:	4835      	ldr	r0, [pc, #212]	; (8007798 <cppInit+0xfc>)
 80076c4:	f7f9 fd59 	bl	800117a <lcd_printf>
	lcd_locate(0,1);
 80076c8:	2101      	movs	r1, #1
 80076ca:	2000      	movs	r0, #0
 80076cc:	f7f9 fd2a 	bl	8001124 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 80076d0:	4830      	ldr	r0, [pc, #192]	; (8007794 <cppInit+0xf8>)
 80076d2:	f7fd fd63 	bl	800519c <_ZN11PowerSensor17getButteryVoltageEv>
 80076d6:	ee10 3a10 	vmov	r3, s0
 80076da:	4618      	mov	r0, r3
 80076dc:	f7f8 ff4c 	bl	8000578 <__aeabi_f2d>
 80076e0:	4602      	mov	r2, r0
 80076e2:	460b      	mov	r3, r1
 80076e4:	482d      	ldr	r0, [pc, #180]	; (800779c <cppInit+0x100>)
 80076e6:	f7f9 fd48 	bl	800117a <lcd_printf>
	HAL_Delay(1000);
 80076ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80076ee:	f002 f93d 	bl	800996c <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 80076f2:	482b      	ldr	r0, [pc, #172]	; (80077a0 <cppInit+0x104>)
 80076f4:	f7fc ff64 	bl	80045c0 <_ZN6Logger10sdCardInitEv>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	bf0c      	ite	eq
 80076fe:	2301      	moveq	r3, #1
 8007700:	2300      	movne	r3, #0
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b00      	cmp	r3, #0
 8007706:	d007      	beq.n	8007718 <cppInit+0x7c>
		led.fullColor('G');
 8007708:	2147      	movs	r1, #71	; 0x47
 800770a:	4826      	ldr	r0, [pc, #152]	; (80077a4 <cppInit+0x108>)
 800770c:	f7fa fbb6 	bl	8001e7c <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007710:	2064      	movs	r0, #100	; 0x64
 8007712:	f002 f92b 	bl	800996c <HAL_Delay>
 8007716:	e006      	b.n	8007726 <cppInit+0x8a>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007718:	2152      	movs	r1, #82	; 0x52
 800771a:	4822      	ldr	r0, [pc, #136]	; (80077a4 <cppInit+0x108>)
 800771c:	f7fa fbae 	bl	8001e7c <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007720:	2064      	movs	r0, #100	; 0x64
 8007722:	f002 f923 	bl	800996c <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007726:	4820      	ldr	r0, [pc, #128]	; (80077a8 <cppInit+0x10c>)
 8007728:	f7fa fd04 	bl	8002134 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800772c:	481f      	ldr	r0, [pc, #124]	; (80077ac <cppInit+0x110>)
 800772e:	f7fd f9d1 	bl	8004ad4 <_ZN5Motor4initEv>
	encoder.init();
 8007732:	481f      	ldr	r0, [pc, #124]	; (80077b0 <cppInit+0x114>)
 8007734:	f7f9 fd6c 	bl	8001210 <_ZN7Encoder4initEv>
	imu.init();
 8007738:	481e      	ldr	r0, [pc, #120]	; (80077b4 <cppInit+0x118>)
 800773a:	f7fa f95d 	bl	80019f8 <_ZN3IMU4initEv>
	line_trace.init();
 800773e:	481e      	ldr	r0, [pc, #120]	; (80077b8 <cppInit+0x11c>)
 8007740:	f7fc f818 	bl	8003774 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8007744:	4818      	ldr	r0, [pc, #96]	; (80077a8 <cppInit+0x10c>)
 8007746:	f7fa fe31 	bl	80023ac <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 800774a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800774e:	f002 f90d 	bl	800996c <HAL_Delay>

	led.fullColor('M');
 8007752:	214d      	movs	r1, #77	; 0x4d
 8007754:	4813      	ldr	r0, [pc, #76]	; (80077a4 <cppInit+0x108>)
 8007756:	f7fa fb91 	bl	8001e7c <_ZN3LED9fullColorEc>
	imu.calibration();
 800775a:	4816      	ldr	r0, [pc, #88]	; (80077b4 <cppInit+0x118>)
 800775c:	f7fa fa16 	bl	8001b8c <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 8007760:	ed9f 1a16 	vldr	s2, [pc, #88]	; 80077bc <cppInit+0x120>
 8007764:	eddf 0a16 	vldr	s1, [pc, #88]	; 80077c0 <cppInit+0x124>
 8007768:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80077c4 <cppInit+0x128>
 800776c:	4816      	ldr	r0, [pc, #88]	; (80077c8 <cppInit+0x12c>)
 800776e:	f7fe f913 	bl	8005998 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 8007772:	ed9f 1a16 	vldr	s2, [pc, #88]	; 80077cc <cppInit+0x130>
 8007776:	eddf 0a16 	vldr	s1, [pc, #88]	; 80077d0 <cppInit+0x134>
 800777a:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80077d4 <cppInit+0x138>
 800777e:	4812      	ldr	r0, [pc, #72]	; (80077c8 <cppInit+0x12c>)
 8007780:	f7fe f923 	bl	80059ca <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 8007784:	4814      	ldr	r0, [pc, #80]	; (80077d8 <cppInit+0x13c>)
 8007786:	f7fd fbd4 	bl	8004f32 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 800778a:	4814      	ldr	r0, [pc, #80]	; (80077dc <cppInit+0x140>)
 800778c:	f7fd fc6e 	bl	800506c <_ZN13PathFollowing4initEv>

}
 8007790:	bf00      	nop
 8007792:	bd80      	pop	{r7, pc}
 8007794:	200005d0 	.word	0x200005d0
 8007798:	0801ab24 	.word	0x0801ab24
 800779c:	0801ab2c 	.word	0x0801ab2c
 80077a0:	200005f0 	.word	0x200005f0
 80077a4:	200005cc 	.word	0x200005cc
 80077a8:	200002c0 	.word	0x200002c0
 80077ac:	200005c8 	.word	0x200005c8
 80077b0:	20017d00 	.word	0x20017d00
 80077b4:	200005dc 	.word	0x200005dc
 80077b8:	20017da0 	.word	0x20017da0
 80077bc:	3cceca68 	.word	0x3cceca68
 80077c0:	4180f06f 	.word	0x4180f06f
 80077c4:	3fea2d0e 	.word	0x3fea2d0e
 80077c8:	20017d20 	.word	0x20017d20
 80077cc:	3ab7dacd 	.word	0x3ab7dacd
 80077d0:	3f5e3fbc 	.word	0x3f5e3fbc
 80077d4:	3d8eefa2 	.word	0x3d8eefa2
 80077d8:	20017d60 	.word	0x20017d60
 80077dc:	20025cc8 	.word	0x20025cc8

080077e0 <cppFlip1ms>:

void cppFlip1ms(void)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 80077e4:	4819      	ldr	r0, [pc, #100]	; (800784c <cppFlip1ms+0x6c>)
 80077e6:	f7fa fd03 	bl	80021f0 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 80077ea:	4819      	ldr	r0, [pc, #100]	; (8007850 <cppFlip1ms+0x70>)
 80077ec:	f7fa f92c 	bl	8001a48 <_ZN3IMU12updateValuesEv>
	encoder.update();
 80077f0:	4818      	ldr	r0, [pc, #96]	; (8007854 <cppFlip1ms+0x74>)
 80077f2:	f7f9 fd2d 	bl	8001250 <_ZN7Encoder6updateEv>
	line_trace.flip();
 80077f6:	4818      	ldr	r0, [pc, #96]	; (8007858 <cppFlip1ms+0x78>)
 80077f8:	f7fc fa52 	bl	8003ca0 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 80077fc:	4817      	ldr	r0, [pc, #92]	; (800785c <cppFlip1ms+0x7c>)
 80077fe:	f7fe f8fd 	bl	80059fc <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007802:	4817      	ldr	r0, [pc, #92]	; (8007860 <cppFlip1ms+0x80>)
 8007804:	f7fd fb78 	bl	8004ef8 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007808:	4816      	ldr	r0, [pc, #88]	; (8007864 <cppFlip1ms+0x84>)
 800780a:	f7fd fd3d 	bl	8005288 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 800780e:	4816      	ldr	r0, [pc, #88]	; (8007868 <cppFlip1ms+0x88>)
 8007810:	f7fd f972 	bl	8004af8 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8007814:	4b15      	ldr	r3, [pc, #84]	; (800786c <cppFlip1ms+0x8c>)
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	3301      	adds	r3, #1
 800781a:	b29a      	uxth	r2, r3
 800781c:	4b13      	ldr	r3, [pc, #76]	; (800786c <cppFlip1ms+0x8c>)
 800781e:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8007820:	4b12      	ldr	r3, [pc, #72]	; (800786c <cppFlip1ms+0x8c>)
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d90c      	bls.n	8007842 <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 8007828:	4809      	ldr	r0, [pc, #36]	; (8007850 <cppFlip1ms+0x70>)
 800782a:	f7fa f965 	bl	8001af8 <_ZN3IMU8getOmegaEv>
 800782e:	eef0 7a40 	vmov.f32	s15, s0
 8007832:	eeb0 0a67 	vmov.f32	s0, s15
 8007836:	480e      	ldr	r0, [pc, #56]	; (8007870 <cppFlip1ms+0x90>)
 8007838:	f7fd fe7e 	bl	8005538 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 800783c:	4b0b      	ldr	r3, [pc, #44]	; (800786c <cppFlip1ms+0x8c>)
 800783e:	2200      	movs	r2, #0
 8007840:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007842:	4804      	ldr	r0, [pc, #16]	; (8007854 <cppFlip1ms+0x74>)
 8007844:	f7f9 fdee 	bl	8001424 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007848:	bf00      	nop
 800784a:	bd80      	pop	{r7, pc}
 800784c:	200002c0 	.word	0x200002c0
 8007850:	200005dc 	.word	0x200005dc
 8007854:	20017d00 	.word	0x20017d00
 8007858:	20017da0 	.word	0x20017da0
 800785c:	20017d20 	.word	0x20017d20
 8007860:	20017d60 	.word	0x20017d60
 8007864:	200005b8 	.word	0x200005b8
 8007868:	200005c8 	.word	0x200005c8
 800786c:	2003d3f0 	.word	0x2003d3f0
 8007870:	20025ab8 	.word	0x20025ab8

08007874 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007878:	4802      	ldr	r0, [pc, #8]	; (8007884 <cppFlip100ns+0x10>)
 800787a:	f7fa fc6b 	bl	8002154 <_ZN10LineSensor17storeSensorValuesEv>
	//line_trace.flip100ns();
}
 800787e:	bf00      	nop
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	200002c0 	.word	0x200002c0

08007888 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 800788c:	4b08      	ldr	r3, [pc, #32]	; (80078b0 <cppFlip10ms+0x28>)
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	3301      	adds	r3, #1
 8007892:	b29a      	uxth	r2, r3
 8007894:	4b06      	ldr	r3, [pc, #24]	; (80078b0 <cppFlip10ms+0x28>)
 8007896:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8007898:	4b05      	ldr	r3, [pc, #20]	; (80078b0 <cppFlip10ms+0x28>)
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	2b06      	cmp	r3, #6
 800789e:	d905      	bls.n	80078ac <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 80078a0:	4804      	ldr	r0, [pc, #16]	; (80078b4 <cppFlip10ms+0x2c>)
 80078a2:	f7fd fe85 	bl	80055b0 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 80078a6:	4b02      	ldr	r3, [pc, #8]	; (80078b0 <cppFlip10ms+0x28>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 80078ac:	bf00      	nop
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	2003d3f2 	.word	0x2003d3f2
 80078b4:	20025ab8 	.word	0x20025ab8

080078b8 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 80078b8:	b5b0      	push	{r4, r5, r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;
	static int16_t selector_fast;

	static float adj_kp = line_trace.getKp();
 80078be:	4baf      	ldr	r3, [pc, #700]	; (8007b7c <cppLoop+0x2c4>)
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	f3bf 8f5b 	dmb	ish
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	bf0c      	ite	eq
 80078d0:	2301      	moveq	r3, #1
 80078d2:	2300      	movne	r3, #0
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d015      	beq.n	8007906 <cppLoop+0x4e>
 80078da:	48a8      	ldr	r0, [pc, #672]	; (8007b7c <cppLoop+0x2c4>)
 80078dc:	f00c fd6f 	bl	80143be <__cxa_guard_acquire>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	bf14      	ite	ne
 80078e6:	2301      	movne	r3, #1
 80078e8:	2300      	moveq	r3, #0
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00a      	beq.n	8007906 <cppLoop+0x4e>
 80078f0:	48a3      	ldr	r0, [pc, #652]	; (8007b80 <cppLoop+0x2c8>)
 80078f2:	f7fc f85f 	bl	80039b4 <_ZN9LineTrace5getKpEv>
 80078f6:	eef0 7a40 	vmov.f32	s15, s0
 80078fa:	4ba2      	ldr	r3, [pc, #648]	; (8007b84 <cppLoop+0x2cc>)
 80078fc:	edc3 7a00 	vstr	s15, [r3]
 8007900:	489e      	ldr	r0, [pc, #632]	; (8007b7c <cppLoop+0x2c4>)
 8007902:	f00c fd68 	bl	80143d6 <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007906:	4ba0      	ldr	r3, [pc, #640]	; (8007b88 <cppLoop+0x2d0>)
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	f3bf 8f5b 	dmb	ish
 800790e:	b2db      	uxtb	r3, r3
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	bf0c      	ite	eq
 8007918:	2301      	moveq	r3, #1
 800791a:	2300      	movne	r3, #0
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d015      	beq.n	800794e <cppLoop+0x96>
 8007922:	4899      	ldr	r0, [pc, #612]	; (8007b88 <cppLoop+0x2d0>)
 8007924:	f00c fd4b 	bl	80143be <__cxa_guard_acquire>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	bf14      	ite	ne
 800792e:	2301      	movne	r3, #1
 8007930:	2300      	moveq	r3, #0
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00a      	beq.n	800794e <cppLoop+0x96>
 8007938:	4891      	ldr	r0, [pc, #580]	; (8007b80 <cppLoop+0x2c8>)
 800793a:	f7fc f84a 	bl	80039d2 <_ZN9LineTrace5getKiEv>
 800793e:	eef0 7a40 	vmov.f32	s15, s0
 8007942:	4b92      	ldr	r3, [pc, #584]	; (8007b8c <cppLoop+0x2d4>)
 8007944:	edc3 7a00 	vstr	s15, [r3]
 8007948:	488f      	ldr	r0, [pc, #572]	; (8007b88 <cppLoop+0x2d0>)
 800794a:	f00c fd44 	bl	80143d6 <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 800794e:	4b90      	ldr	r3, [pc, #576]	; (8007b90 <cppLoop+0x2d8>)
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	f3bf 8f5b 	dmb	ish
 8007956:	b2db      	uxtb	r3, r3
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	2b00      	cmp	r3, #0
 800795e:	bf0c      	ite	eq
 8007960:	2301      	moveq	r3, #1
 8007962:	2300      	movne	r3, #0
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d015      	beq.n	8007996 <cppLoop+0xde>
 800796a:	4889      	ldr	r0, [pc, #548]	; (8007b90 <cppLoop+0x2d8>)
 800796c:	f00c fd27 	bl	80143be <__cxa_guard_acquire>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	bf14      	ite	ne
 8007976:	2301      	movne	r3, #1
 8007978:	2300      	moveq	r3, #0
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00a      	beq.n	8007996 <cppLoop+0xde>
 8007980:	487f      	ldr	r0, [pc, #508]	; (8007b80 <cppLoop+0x2c8>)
 8007982:	f7fc f835 	bl	80039f0 <_ZN9LineTrace5getKdEv>
 8007986:	eef0 7a40 	vmov.f32	s15, s0
 800798a:	4b82      	ldr	r3, [pc, #520]	; (8007b94 <cppLoop+0x2dc>)
 800798c:	edc3 7a00 	vstr	s15, [r3]
 8007990:	487f      	ldr	r0, [pc, #508]	; (8007b90 <cppLoop+0x2d8>)
 8007992:	f00c fd20 	bl	80143d6 <__cxa_guard_release>

	static float adj_kp_fast = line_trace.getKpFast();
 8007996:	4b80      	ldr	r3, [pc, #512]	; (8007b98 <cppLoop+0x2e0>)
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	f3bf 8f5b 	dmb	ish
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	bf0c      	ite	eq
 80079a8:	2301      	moveq	r3, #1
 80079aa:	2300      	movne	r3, #0
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d015      	beq.n	80079de <cppLoop+0x126>
 80079b2:	4879      	ldr	r0, [pc, #484]	; (8007b98 <cppLoop+0x2e0>)
 80079b4:	f00c fd03 	bl	80143be <__cxa_guard_acquire>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	bf14      	ite	ne
 80079be:	2301      	movne	r3, #1
 80079c0:	2300      	moveq	r3, #0
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00a      	beq.n	80079de <cppLoop+0x126>
 80079c8:	486d      	ldr	r0, [pc, #436]	; (8007b80 <cppLoop+0x2c8>)
 80079ca:	f7fc f820 	bl	8003a0e <_ZN9LineTrace9getKpFastEv>
 80079ce:	eef0 7a40 	vmov.f32	s15, s0
 80079d2:	4b72      	ldr	r3, [pc, #456]	; (8007b9c <cppLoop+0x2e4>)
 80079d4:	edc3 7a00 	vstr	s15, [r3]
 80079d8:	486f      	ldr	r0, [pc, #444]	; (8007b98 <cppLoop+0x2e0>)
 80079da:	f00c fcfc 	bl	80143d6 <__cxa_guard_release>
	static float adj_ki_fast = line_trace.getKiFast();
 80079de:	4b70      	ldr	r3, [pc, #448]	; (8007ba0 <cppLoop+0x2e8>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	f3bf 8f5b 	dmb	ish
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	bf0c      	ite	eq
 80079f0:	2301      	moveq	r3, #1
 80079f2:	2300      	movne	r3, #0
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d015      	beq.n	8007a26 <cppLoop+0x16e>
 80079fa:	4869      	ldr	r0, [pc, #420]	; (8007ba0 <cppLoop+0x2e8>)
 80079fc:	f00c fcdf 	bl	80143be <__cxa_guard_acquire>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	bf14      	ite	ne
 8007a06:	2301      	movne	r3, #1
 8007a08:	2300      	moveq	r3, #0
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00a      	beq.n	8007a26 <cppLoop+0x16e>
 8007a10:	485b      	ldr	r0, [pc, #364]	; (8007b80 <cppLoop+0x2c8>)
 8007a12:	f7fc f80b 	bl	8003a2c <_ZN9LineTrace9getKiFastEv>
 8007a16:	eef0 7a40 	vmov.f32	s15, s0
 8007a1a:	4b62      	ldr	r3, [pc, #392]	; (8007ba4 <cppLoop+0x2ec>)
 8007a1c:	edc3 7a00 	vstr	s15, [r3]
 8007a20:	485f      	ldr	r0, [pc, #380]	; (8007ba0 <cppLoop+0x2e8>)
 8007a22:	f00c fcd8 	bl	80143d6 <__cxa_guard_release>
	static float adj_kd_fast = line_trace.getKdFast();
 8007a26:	4b60      	ldr	r3, [pc, #384]	; (8007ba8 <cppLoop+0x2f0>)
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	f3bf 8f5b 	dmb	ish
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	bf0c      	ite	eq
 8007a38:	2301      	moveq	r3, #1
 8007a3a:	2300      	movne	r3, #0
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d015      	beq.n	8007a6e <cppLoop+0x1b6>
 8007a42:	4859      	ldr	r0, [pc, #356]	; (8007ba8 <cppLoop+0x2f0>)
 8007a44:	f00c fcbb 	bl	80143be <__cxa_guard_acquire>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	bf14      	ite	ne
 8007a4e:	2301      	movne	r3, #1
 8007a50:	2300      	moveq	r3, #0
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d00a      	beq.n	8007a6e <cppLoop+0x1b6>
 8007a58:	4849      	ldr	r0, [pc, #292]	; (8007b80 <cppLoop+0x2c8>)
 8007a5a:	f7fb fff6 	bl	8003a4a <_ZN9LineTrace9getKdFastEv>
 8007a5e:	eef0 7a40 	vmov.f32	s15, s0
 8007a62:	4b52      	ldr	r3, [pc, #328]	; (8007bac <cppLoop+0x2f4>)
 8007a64:	edc3 7a00 	vstr	s15, [r3]
 8007a68:	484f      	ldr	r0, [pc, #316]	; (8007ba8 <cppLoop+0x2f0>)
 8007a6a:	f00c fcb4 	bl	80143d6 <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007a6e:	4b50      	ldr	r3, [pc, #320]	; (8007bb0 <cppLoop+0x2f8>)
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	f3bf 8f5b 	dmb	ish
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	f003 0301 	and.w	r3, r3, #1
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	bf0c      	ite	eq
 8007a80:	2301      	moveq	r3, #1
 8007a82:	2300      	movne	r3, #0
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d015      	beq.n	8007ab6 <cppLoop+0x1fe>
 8007a8a:	4849      	ldr	r0, [pc, #292]	; (8007bb0 <cppLoop+0x2f8>)
 8007a8c:	f00c fc97 	bl	80143be <__cxa_guard_acquire>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	bf14      	ite	ne
 8007a96:	2301      	movne	r3, #1
 8007a98:	2300      	moveq	r3, #0
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00a      	beq.n	8007ab6 <cppLoop+0x1fe>
 8007aa0:	4837      	ldr	r0, [pc, #220]	; (8007b80 <cppLoop+0x2c8>)
 8007aa2:	f7fc f831 	bl	8003b08 <_ZN9LineTrace17getTargetVelocityEv>
 8007aa6:	eef0 7a40 	vmov.f32	s15, s0
 8007aaa:	4b42      	ldr	r3, [pc, #264]	; (8007bb4 <cppLoop+0x2fc>)
 8007aac:	edc3 7a00 	vstr	s15, [r3]
 8007ab0:	483f      	ldr	r0, [pc, #252]	; (8007bb0 <cppLoop+0x2f8>)
 8007ab2:	f00c fc90 	bl	80143d6 <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007ab6:	4b40      	ldr	r3, [pc, #256]	; (8007bb8 <cppLoop+0x300>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	f3bf 8f5b 	dmb	ish
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	bf0c      	ite	eq
 8007ac8:	2301      	moveq	r3, #1
 8007aca:	2300      	movne	r3, #0
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d015      	beq.n	8007afe <cppLoop+0x246>
 8007ad2:	4839      	ldr	r0, [pc, #228]	; (8007bb8 <cppLoop+0x300>)
 8007ad4:	f00c fc73 	bl	80143be <__cxa_guard_acquire>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	bf14      	ite	ne
 8007ade:	2301      	movne	r3, #1
 8007ae0:	2300      	moveq	r3, #0
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00a      	beq.n	8007afe <cppLoop+0x246>
 8007ae8:	4825      	ldr	r0, [pc, #148]	; (8007b80 <cppLoop+0x2c8>)
 8007aea:	f7fc f81d 	bl	8003b28 <_ZN9LineTrace14getMaxVelocityEv>
 8007aee:	eef0 7a40 	vmov.f32	s15, s0
 8007af2:	4b32      	ldr	r3, [pc, #200]	; (8007bbc <cppLoop+0x304>)
 8007af4:	edc3 7a00 	vstr	s15, [r3]
 8007af8:	482f      	ldr	r0, [pc, #188]	; (8007bb8 <cppLoop+0x300>)
 8007afa:	f00c fc6c 	bl	80143d6 <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007afe:	4b30      	ldr	r3, [pc, #192]	; (8007bc0 <cppLoop+0x308>)
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	f3bf 8f5b 	dmb	ish
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	bf0c      	ite	eq
 8007b10:	2301      	moveq	r3, #1
 8007b12:	2300      	movne	r3, #0
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d015      	beq.n	8007b46 <cppLoop+0x28e>
 8007b1a:	4829      	ldr	r0, [pc, #164]	; (8007bc0 <cppLoop+0x308>)
 8007b1c:	f00c fc4f 	bl	80143be <__cxa_guard_acquire>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	bf14      	ite	ne
 8007b26:	2301      	movne	r3, #1
 8007b28:	2300      	moveq	r3, #0
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00a      	beq.n	8007b46 <cppLoop+0x28e>
 8007b30:	4813      	ldr	r0, [pc, #76]	; (8007b80 <cppLoop+0x2c8>)
 8007b32:	f7fc f809 	bl	8003b48 <_ZN9LineTrace15getMaxVelocity2Ev>
 8007b36:	eef0 7a40 	vmov.f32	s15, s0
 8007b3a:	4b22      	ldr	r3, [pc, #136]	; (8007bc4 <cppLoop+0x30c>)
 8007b3c:	edc3 7a00 	vstr	s15, [r3]
 8007b40:	481f      	ldr	r0, [pc, #124]	; (8007bc0 <cppLoop+0x308>)
 8007b42:	f00c fc48 	bl	80143d6 <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007b46:	4b20      	ldr	r3, [pc, #128]	; (8007bc8 <cppLoop+0x310>)
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	f3bf 8f5b 	dmb	ish
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	bf0c      	ite	eq
 8007b58:	2301      	moveq	r3, #1
 8007b5a:	2300      	movne	r3, #0
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d03f      	beq.n	8007be2 <cppLoop+0x32a>
 8007b62:	4819      	ldr	r0, [pc, #100]	; (8007bc8 <cppLoop+0x310>)
 8007b64:	f00c fc2b 	bl	80143be <__cxa_guard_acquire>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	bf14      	ite	ne
 8007b6e:	2301      	movne	r3, #1
 8007b70:	2300      	moveq	r3, #0
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d034      	beq.n	8007be2 <cppLoop+0x32a>
 8007b78:	e028      	b.n	8007bcc <cppLoop+0x314>
 8007b7a:	bf00      	nop
 8007b7c:	2003d404 	.word	0x2003d404
 8007b80:	20017da0 	.word	0x20017da0
 8007b84:	2003d400 	.word	0x2003d400
 8007b88:	2003d40c 	.word	0x2003d40c
 8007b8c:	2003d408 	.word	0x2003d408
 8007b90:	2003d414 	.word	0x2003d414
 8007b94:	2003d410 	.word	0x2003d410
 8007b98:	2003d41c 	.word	0x2003d41c
 8007b9c:	2003d418 	.word	0x2003d418
 8007ba0:	2003d424 	.word	0x2003d424
 8007ba4:	2003d420 	.word	0x2003d420
 8007ba8:	2003d42c 	.word	0x2003d42c
 8007bac:	2003d428 	.word	0x2003d428
 8007bb0:	2003d434 	.word	0x2003d434
 8007bb4:	2003d430 	.word	0x2003d430
 8007bb8:	2003d43c 	.word	0x2003d43c
 8007bbc:	2003d438 	.word	0x2003d438
 8007bc0:	2003d444 	.word	0x2003d444
 8007bc4:	2003d440 	.word	0x2003d440
 8007bc8:	2003d44c 	.word	0x2003d44c
 8007bcc:	48ae      	ldr	r0, [pc, #696]	; (8007e88 <cppLoop+0x5d0>)
 8007bce:	f7fb ffcb 	bl	8003b68 <_ZN9LineTrace14getMinVelocityEv>
 8007bd2:	eef0 7a40 	vmov.f32	s15, s0
 8007bd6:	4bad      	ldr	r3, [pc, #692]	; (8007e8c <cppLoop+0x5d4>)
 8007bd8:	edc3 7a00 	vstr	s15, [r3]
 8007bdc:	48ac      	ldr	r0, [pc, #688]	; (8007e90 <cppLoop+0x5d8>)
 8007bde:	f00c fbfa 	bl	80143d6 <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007be2:	4bac      	ldr	r3, [pc, #688]	; (8007e94 <cppLoop+0x5dc>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	f3bf 8f5b 	dmb	ish
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	bf0c      	ite	eq
 8007bf4:	2301      	moveq	r3, #1
 8007bf6:	2300      	movne	r3, #0
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d015      	beq.n	8007c2a <cppLoop+0x372>
 8007bfe:	48a5      	ldr	r0, [pc, #660]	; (8007e94 <cppLoop+0x5dc>)
 8007c00:	f00c fbdd 	bl	80143be <__cxa_guard_acquire>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	bf14      	ite	ne
 8007c0a:	2301      	movne	r3, #1
 8007c0c:	2300      	moveq	r3, #0
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00a      	beq.n	8007c2a <cppLoop+0x372>
 8007c14:	489c      	ldr	r0, [pc, #624]	; (8007e88 <cppLoop+0x5d0>)
 8007c16:	f7fb ffb7 	bl	8003b88 <_ZN9LineTrace15getMinVelocity2Ev>
 8007c1a:	eef0 7a40 	vmov.f32	s15, s0
 8007c1e:	4b9e      	ldr	r3, [pc, #632]	; (8007e98 <cppLoop+0x5e0>)
 8007c20:	edc3 7a00 	vstr	s15, [r3]
 8007c24:	489b      	ldr	r0, [pc, #620]	; (8007e94 <cppLoop+0x5dc>)
 8007c26:	f00c fbd6 	bl	80143d6 <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007c2a:	4b9c      	ldr	r3, [pc, #624]	; (8007e9c <cppLoop+0x5e4>)
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	f3bf 8f5b 	dmb	ish
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	bf0c      	ite	eq
 8007c3c:	2301      	moveq	r3, #1
 8007c3e:	2300      	movne	r3, #0
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d015      	beq.n	8007c72 <cppLoop+0x3ba>
 8007c46:	4895      	ldr	r0, [pc, #596]	; (8007e9c <cppLoop+0x5e4>)
 8007c48:	f00c fbb9 	bl	80143be <__cxa_guard_acquire>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	bf14      	ite	ne
 8007c52:	2301      	movne	r3, #1
 8007c54:	2300      	moveq	r3, #0
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00a      	beq.n	8007c72 <cppLoop+0x3ba>
 8007c5c:	488a      	ldr	r0, [pc, #552]	; (8007e88 <cppLoop+0x5d0>)
 8007c5e:	f7fb ffd7 	bl	8003c10 <_ZN9LineTrace9getMaxAccEv>
 8007c62:	eef0 7a40 	vmov.f32	s15, s0
 8007c66:	4b8e      	ldr	r3, [pc, #568]	; (8007ea0 <cppLoop+0x5e8>)
 8007c68:	edc3 7a00 	vstr	s15, [r3]
 8007c6c:	488b      	ldr	r0, [pc, #556]	; (8007e9c <cppLoop+0x5e4>)
 8007c6e:	f00c fbb2 	bl	80143d6 <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007c72:	4b8c      	ldr	r3, [pc, #560]	; (8007ea4 <cppLoop+0x5ec>)
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	f3bf 8f5b 	dmb	ish
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	bf0c      	ite	eq
 8007c84:	2301      	moveq	r3, #1
 8007c86:	2300      	movne	r3, #0
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d015      	beq.n	8007cba <cppLoop+0x402>
 8007c8e:	4885      	ldr	r0, [pc, #532]	; (8007ea4 <cppLoop+0x5ec>)
 8007c90:	f00c fb95 	bl	80143be <__cxa_guard_acquire>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	bf14      	ite	ne
 8007c9a:	2301      	movne	r3, #1
 8007c9c:	2300      	moveq	r3, #0
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00a      	beq.n	8007cba <cppLoop+0x402>
 8007ca4:	4878      	ldr	r0, [pc, #480]	; (8007e88 <cppLoop+0x5d0>)
 8007ca6:	f7fb ffe9 	bl	8003c7c <_ZN9LineTrace9getMaxDecEv>
 8007caa:	eef0 7a40 	vmov.f32	s15, s0
 8007cae:	4b7e      	ldr	r3, [pc, #504]	; (8007ea8 <cppLoop+0x5f0>)
 8007cb0:	edc3 7a00 	vstr	s15, [r3]
 8007cb4:	487b      	ldr	r0, [pc, #492]	; (8007ea4 <cppLoop+0x5ec>)
 8007cb6:	f00c fb8e 	bl	80143d6 <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007cba:	4b7c      	ldr	r3, [pc, #496]	; (8007eac <cppLoop+0x5f4>)
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	f3bf 8f5b 	dmb	ish
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	bf0c      	ite	eq
 8007ccc:	2301      	moveq	r3, #1
 8007cce:	2300      	movne	r3, #0
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d015      	beq.n	8007d02 <cppLoop+0x44a>
 8007cd6:	4875      	ldr	r0, [pc, #468]	; (8007eac <cppLoop+0x5f4>)
 8007cd8:	f00c fb71 	bl	80143be <__cxa_guard_acquire>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	bf14      	ite	ne
 8007ce2:	2301      	movne	r3, #1
 8007ce4:	2300      	moveq	r3, #0
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00a      	beq.n	8007d02 <cppLoop+0x44a>
 8007cec:	4866      	ldr	r0, [pc, #408]	; (8007e88 <cppLoop+0x5d0>)
 8007cee:	f7fb ffb3 	bl	8003c58 <_ZN9LineTrace10getMaxAcc2Ev>
 8007cf2:	eef0 7a40 	vmov.f32	s15, s0
 8007cf6:	4b6e      	ldr	r3, [pc, #440]	; (8007eb0 <cppLoop+0x5f8>)
 8007cf8:	edc3 7a00 	vstr	s15, [r3]
 8007cfc:	486b      	ldr	r0, [pc, #428]	; (8007eac <cppLoop+0x5f4>)
 8007cfe:	f00c fb6a 	bl	80143d6 <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007d02:	4b6c      	ldr	r3, [pc, #432]	; (8007eb4 <cppLoop+0x5fc>)
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	f3bf 8f5b 	dmb	ish
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	f003 0301 	and.w	r3, r3, #1
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	bf0c      	ite	eq
 8007d14:	2301      	moveq	r3, #1
 8007d16:	2300      	movne	r3, #0
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d015      	beq.n	8007d4a <cppLoop+0x492>
 8007d1e:	4865      	ldr	r0, [pc, #404]	; (8007eb4 <cppLoop+0x5fc>)
 8007d20:	f00c fb4d 	bl	80143be <__cxa_guard_acquire>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	bf14      	ite	ne
 8007d2a:	2301      	movne	r3, #1
 8007d2c:	2300      	moveq	r3, #0
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00a      	beq.n	8007d4a <cppLoop+0x492>
 8007d34:	4854      	ldr	r0, [pc, #336]	; (8007e88 <cppLoop+0x5d0>)
 8007d36:	f7fb ff7d 	bl	8003c34 <_ZN9LineTrace10getMaxDec2Ev>
 8007d3a:	eef0 7a40 	vmov.f32	s15, s0
 8007d3e:	4b5e      	ldr	r3, [pc, #376]	; (8007eb8 <cppLoop+0x600>)
 8007d40:	edc3 7a00 	vstr	s15, [r3]
 8007d44:	485b      	ldr	r0, [pc, #364]	; (8007eb4 <cppLoop+0x5fc>)
 8007d46:	f00c fb46 	bl	80143d6 <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007d4a:	485c      	ldr	r0, [pc, #368]	; (8007ebc <cppLoop+0x604>)
 8007d4c:	f7fd fa36 	bl	80051bc <_ZN12RotarySwitch8getValueEv>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b0f      	cmp	r3, #15
 8007d54:	f201 84c9 	bhi.w	80096ea <cppLoop+0x1e32>
 8007d58:	a201      	add	r2, pc, #4	; (adr r2, 8007d60 <cppLoop+0x4a8>)
 8007d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5e:	bf00      	nop
 8007d60:	08007da1 	.word	0x08007da1
 8007d64:	08008185 	.word	0x08008185
 8007d68:	08008215 	.word	0x08008215
 8007d6c:	08008363 	.word	0x08008363
 8007d70:	08008461 	.word	0x08008461
 8007d74:	080086dd 	.word	0x080086dd
 8007d78:	080087a1 	.word	0x080087a1
 8007d7c:	08008a19 	.word	0x08008a19
 8007d80:	08008ca5 	.word	0x08008ca5
 8007d84:	08008f1d 	.word	0x08008f1d
 8007d88:	0800929f 	.word	0x0800929f
 8007d8c:	0800933f 	.word	0x0800933f
 8007d90:	080093db 	.word	0x080093db
 8007d94:	08009475 	.word	0x08009475
 8007d98:	08009585 	.word	0x08009585
 8007d9c:	08009639 	.word	0x08009639
	case 0:
		led.fullColor('W');
 8007da0:	2157      	movs	r1, #87	; 0x57
 8007da2:	4847      	ldr	r0, [pc, #284]	; (8007ec0 <cppLoop+0x608>)
 8007da4:	f7fa f86a 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 8007da8:	f7f9 f9ac 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 8007dac:	2100      	movs	r1, #0
 8007dae:	2000      	movs	r0, #0
 8007db0:	f7f9 f9b8 	bl	8001124 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8007db4:	4834      	ldr	r0, [pc, #208]	; (8007e88 <cppLoop+0x5d0>)
 8007db6:	f7fb fdfd 	bl	80039b4 <_ZN9LineTrace5getKpEv>
 8007dba:	eef0 7a40 	vmov.f32	s15, s0
 8007dbe:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8007ec4 <cppLoop+0x60c>
 8007dc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007dc6:	ee17 0a90 	vmov	r0, s15
 8007dca:	f7f8 fbd5 	bl	8000578 <__aeabi_f2d>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	483d      	ldr	r0, [pc, #244]	; (8007ec8 <cppLoop+0x610>)
 8007dd4:	f7f9 f9d1 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 8007dd8:	2101      	movs	r1, #1
 8007dda:	2000      	movs	r0, #0
 8007ddc:	f7f9 f9a2 	bl	8001124 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8007de0:	4829      	ldr	r0, [pc, #164]	; (8007e88 <cppLoop+0x5d0>)
 8007de2:	f7fb fdf6 	bl	80039d2 <_ZN9LineTrace5getKiEv>
 8007de6:	eef0 7a40 	vmov.f32	s15, s0
 8007dea:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007ecc <cppLoop+0x614>
 8007dee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007df2:	ee17 0a90 	vmov	r0, s15
 8007df6:	f7f8 fbbf 	bl	8000578 <__aeabi_f2d>
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	460d      	mov	r5, r1
 8007dfe:	4822      	ldr	r0, [pc, #136]	; (8007e88 <cppLoop+0x5d0>)
 8007e00:	f7fb fdf6 	bl	80039f0 <_ZN9LineTrace5getKdEv>
 8007e04:	eef0 7a40 	vmov.f32	s15, s0
 8007e08:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007ed0 <cppLoop+0x618>
 8007e0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e10:	ee17 0a90 	vmov	r0, s15
 8007e14:	f7f8 fbb0 	bl	8000578 <__aeabi_f2d>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	e9cd 2300 	strd	r2, r3, [sp]
 8007e20:	4622      	mov	r2, r4
 8007e22:	462b      	mov	r3, r5
 8007e24:	482b      	ldr	r0, [pc, #172]	; (8007ed4 <cppLoop+0x61c>)
 8007e26:	f7f9 f9a8 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007e2a:	482b      	ldr	r0, [pc, #172]	; (8007ed8 <cppLoop+0x620>)
 8007e2c:	f7f9 ffc2 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b08      	cmp	r3, #8
 8007e34:	bf0c      	ite	eq
 8007e36:	2301      	moveq	r3, #1
 8007e38:	2300      	movne	r3, #0
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d04f      	beq.n	8007ee0 <cppLoop+0x628>
			led.LR(-1, 1);
 8007e40:	2201      	movs	r2, #1
 8007e42:	f04f 31ff 	mov.w	r1, #4294967295
 8007e46:	481e      	ldr	r0, [pc, #120]	; (8007ec0 <cppLoop+0x608>)
 8007e48:	f7fa f8d4 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007e4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e50:	f001 fd8c 	bl	800996c <HAL_Delay>

			selector++;
 8007e54:	4b21      	ldr	r3, [pc, #132]	; (8007edc <cppLoop+0x624>)
 8007e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	b21a      	sxth	r2, r3
 8007e62:	4b1e      	ldr	r3, [pc, #120]	; (8007edc <cppLoop+0x624>)
 8007e64:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007e66:	4b1d      	ldr	r3, [pc, #116]	; (8007edc <cppLoop+0x624>)
 8007e68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	dd02      	ble.n	8007e76 <cppLoop+0x5be>
 8007e70:	4b1a      	ldr	r3, [pc, #104]	; (8007edc <cppLoop+0x624>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007e76:	2200      	movs	r2, #0
 8007e78:	f04f 31ff 	mov.w	r1, #4294967295
 8007e7c:	4810      	ldr	r0, [pc, #64]	; (8007ec0 <cppLoop+0x608>)
 8007e7e:	f7fa f8b9 	bl	8001ff4 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8007e82:	f001 bc34 	b.w	80096ee <cppLoop+0x1e36>
 8007e86:	bf00      	nop
 8007e88:	20017da0 	.word	0x20017da0
 8007e8c:	2003d448 	.word	0x2003d448
 8007e90:	2003d44c 	.word	0x2003d44c
 8007e94:	2003d454 	.word	0x2003d454
 8007e98:	2003d450 	.word	0x2003d450
 8007e9c:	2003d45c 	.word	0x2003d45c
 8007ea0:	2003d458 	.word	0x2003d458
 8007ea4:	2003d464 	.word	0x2003d464
 8007ea8:	2003d460 	.word	0x2003d460
 8007eac:	2003d46c 	.word	0x2003d46c
 8007eb0:	2003d468 	.word	0x2003d468
 8007eb4:	2003d474 	.word	0x2003d474
 8007eb8:	2003d470 	.word	0x2003d470
 8007ebc:	200005c4 	.word	0x200005c4
 8007ec0:	200005cc 	.word	0x200005cc
 8007ec4:	447a0000 	.word	0x447a0000
 8007ec8:	0801ab30 	.word	0x0801ab30
 8007ecc:	42c80000 	.word	0x42c80000
 8007ed0:	461c4000 	.word	0x461c4000
 8007ed4:	0801ab3c 	.word	0x0801ab3c
 8007ed8:	200005c0 	.word	0x200005c0
 8007edc:	2003d3f4 	.word	0x2003d3f4
		else if(joy_stick.getValue() == JOY_R){
 8007ee0:	489d      	ldr	r0, [pc, #628]	; (8008158 <cppLoop+0x8a0>)
 8007ee2:	f7f9 ff67 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b10      	cmp	r3, #16
 8007eea:	bf0c      	ite	eq
 8007eec:	2301      	moveq	r3, #1
 8007eee:	2300      	movne	r3, #0
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d059      	beq.n	8007faa <cppLoop+0x6f2>
			led.LR(-1, 1);
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8007efc:	4897      	ldr	r0, [pc, #604]	; (800815c <cppLoop+0x8a4>)
 8007efe:	f7fa f879 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007f02:	2064      	movs	r0, #100	; 0x64
 8007f04:	f001 fd32 	bl	800996c <HAL_Delay>
			if(selector == 0){
 8007f08:	4b95      	ldr	r3, [pc, #596]	; (8008160 <cppLoop+0x8a8>)
 8007f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d113      	bne.n	8007f3a <cppLoop+0x682>
				adj_kp = adj_kp + 0.00001;
 8007f12:	4b94      	ldr	r3, [pc, #592]	; (8008164 <cppLoop+0x8ac>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7f8 fb2e 	bl	8000578 <__aeabi_f2d>
 8007f1c:	a388      	add	r3, pc, #544	; (adr r3, 8008140 <cppLoop+0x888>)
 8007f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f22:	f7f8 f9cb 	bl	80002bc <__adddf3>
 8007f26:	4602      	mov	r2, r0
 8007f28:	460b      	mov	r3, r1
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	f7f8 fe73 	bl	8000c18 <__aeabi_d2f>
 8007f32:	4603      	mov	r3, r0
 8007f34:	4a8b      	ldr	r2, [pc, #556]	; (8008164 <cppLoop+0x8ac>)
 8007f36:	6013      	str	r3, [r2, #0]
 8007f38:	e02b      	b.n	8007f92 <cppLoop+0x6da>
			else if(selector == 1){
 8007f3a:	4b89      	ldr	r3, [pc, #548]	; (8008160 <cppLoop+0x8a8>)
 8007f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d113      	bne.n	8007f6c <cppLoop+0x6b4>
				adj_ki = adj_ki + 0.0001;
 8007f44:	4b88      	ldr	r3, [pc, #544]	; (8008168 <cppLoop+0x8b0>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7f8 fb15 	bl	8000578 <__aeabi_f2d>
 8007f4e:	a37e      	add	r3, pc, #504	; (adr r3, 8008148 <cppLoop+0x890>)
 8007f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f54:	f7f8 f9b2 	bl	80002bc <__adddf3>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	4610      	mov	r0, r2
 8007f5e:	4619      	mov	r1, r3
 8007f60:	f7f8 fe5a 	bl	8000c18 <__aeabi_d2f>
 8007f64:	4603      	mov	r3, r0
 8007f66:	4a80      	ldr	r2, [pc, #512]	; (8008168 <cppLoop+0x8b0>)
 8007f68:	6013      	str	r3, [r2, #0]
 8007f6a:	e012      	b.n	8007f92 <cppLoop+0x6da>
				adj_kd = adj_kd + 0.000001;
 8007f6c:	4b7f      	ldr	r3, [pc, #508]	; (800816c <cppLoop+0x8b4>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7f8 fb01 	bl	8000578 <__aeabi_f2d>
 8007f76:	a376      	add	r3, pc, #472	; (adr r3, 8008150 <cppLoop+0x898>)
 8007f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7c:	f7f8 f99e 	bl	80002bc <__adddf3>
 8007f80:	4602      	mov	r2, r0
 8007f82:	460b      	mov	r3, r1
 8007f84:	4610      	mov	r0, r2
 8007f86:	4619      	mov	r1, r3
 8007f88:	f7f8 fe46 	bl	8000c18 <__aeabi_d2f>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	4a77      	ldr	r2, [pc, #476]	; (800816c <cppLoop+0x8b4>)
 8007f90:	6013      	str	r3, [r2, #0]
			led.fullColor('R');
 8007f92:	2152      	movs	r1, #82	; 0x52
 8007f94:	4871      	ldr	r0, [pc, #452]	; (800815c <cppLoop+0x8a4>)
 8007f96:	f7f9 ff71 	bl	8001e7c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8007fa0:	486e      	ldr	r0, [pc, #440]	; (800815c <cppLoop+0x8a4>)
 8007fa2:	f7fa f827 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8007fa6:	f001 bba2 	b.w	80096ee <cppLoop+0x1e36>
		else if(joy_stick.getValue() == JOY_L){
 8007faa:	486b      	ldr	r0, [pc, #428]	; (8008158 <cppLoop+0x8a0>)
 8007fac:	f7f9 ff02 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	bf0c      	ite	eq
 8007fb6:	2301      	moveq	r3, #1
 8007fb8:	2300      	movne	r3, #0
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d059      	beq.n	8008074 <cppLoop+0x7bc>
			led.LR(-1, 1);
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f04f 31ff 	mov.w	r1, #4294967295
 8007fc6:	4865      	ldr	r0, [pc, #404]	; (800815c <cppLoop+0x8a4>)
 8007fc8:	f7fa f814 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007fcc:	2064      	movs	r0, #100	; 0x64
 8007fce:	f001 fccd 	bl	800996c <HAL_Delay>
			if(selector == 0){
 8007fd2:	4b63      	ldr	r3, [pc, #396]	; (8008160 <cppLoop+0x8a8>)
 8007fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d113      	bne.n	8008004 <cppLoop+0x74c>
				adj_kp = adj_kp - 0.00001;
 8007fdc:	4b61      	ldr	r3, [pc, #388]	; (8008164 <cppLoop+0x8ac>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7f8 fac9 	bl	8000578 <__aeabi_f2d>
 8007fe6:	a356      	add	r3, pc, #344	; (adr r3, 8008140 <cppLoop+0x888>)
 8007fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fec:	f7f8 f964 	bl	80002b8 <__aeabi_dsub>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	4610      	mov	r0, r2
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	f7f8 fe0e 	bl	8000c18 <__aeabi_d2f>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	4a59      	ldr	r2, [pc, #356]	; (8008164 <cppLoop+0x8ac>)
 8008000:	6013      	str	r3, [r2, #0]
 8008002:	e02b      	b.n	800805c <cppLoop+0x7a4>
			else if(selector == 1){
 8008004:	4b56      	ldr	r3, [pc, #344]	; (8008160 <cppLoop+0x8a8>)
 8008006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d113      	bne.n	8008036 <cppLoop+0x77e>
				adj_ki = adj_ki - 0.0001;
 800800e:	4b56      	ldr	r3, [pc, #344]	; (8008168 <cppLoop+0x8b0>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4618      	mov	r0, r3
 8008014:	f7f8 fab0 	bl	8000578 <__aeabi_f2d>
 8008018:	a34b      	add	r3, pc, #300	; (adr r3, 8008148 <cppLoop+0x890>)
 800801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801e:	f7f8 f94b 	bl	80002b8 <__aeabi_dsub>
 8008022:	4602      	mov	r2, r0
 8008024:	460b      	mov	r3, r1
 8008026:	4610      	mov	r0, r2
 8008028:	4619      	mov	r1, r3
 800802a:	f7f8 fdf5 	bl	8000c18 <__aeabi_d2f>
 800802e:	4603      	mov	r3, r0
 8008030:	4a4d      	ldr	r2, [pc, #308]	; (8008168 <cppLoop+0x8b0>)
 8008032:	6013      	str	r3, [r2, #0]
 8008034:	e012      	b.n	800805c <cppLoop+0x7a4>
				adj_kd = adj_kd - 0.000001;
 8008036:	4b4d      	ldr	r3, [pc, #308]	; (800816c <cppLoop+0x8b4>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4618      	mov	r0, r3
 800803c:	f7f8 fa9c 	bl	8000578 <__aeabi_f2d>
 8008040:	a343      	add	r3, pc, #268	; (adr r3, 8008150 <cppLoop+0x898>)
 8008042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008046:	f7f8 f937 	bl	80002b8 <__aeabi_dsub>
 800804a:	4602      	mov	r2, r0
 800804c:	460b      	mov	r3, r1
 800804e:	4610      	mov	r0, r2
 8008050:	4619      	mov	r1, r3
 8008052:	f7f8 fde1 	bl	8000c18 <__aeabi_d2f>
 8008056:	4603      	mov	r3, r0
 8008058:	4a44      	ldr	r2, [pc, #272]	; (800816c <cppLoop+0x8b4>)
 800805a:	6013      	str	r3, [r2, #0]
			led.fullColor('R');
 800805c:	2152      	movs	r1, #82	; 0x52
 800805e:	483f      	ldr	r0, [pc, #252]	; (800815c <cppLoop+0x8a4>)
 8008060:	f7f9 ff0c 	bl	8001e7c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008064:	2200      	movs	r2, #0
 8008066:	f04f 31ff 	mov.w	r1, #4294967295
 800806a:	483c      	ldr	r0, [pc, #240]	; (800815c <cppLoop+0x8a4>)
 800806c:	f7f9 ffc2 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008070:	f001 bb3d 	b.w	80096ee <cppLoop+0x1e36>
		else if(joy_stick.getValue() == JOY_D){
 8008074:	4838      	ldr	r0, [pc, #224]	; (8008158 <cppLoop+0x8a0>)
 8008076:	f7f9 fe9d 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 800807a:	4603      	mov	r3, r0
 800807c:	2b04      	cmp	r3, #4
 800807e:	bf0c      	ite	eq
 8008080:	2301      	moveq	r3, #1
 8008082:	2300      	movne	r3, #0
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d011      	beq.n	80080ae <cppLoop+0x7f6>
			led.LR(-1, 1);
 800808a:	2201      	movs	r2, #1
 800808c:	f04f 31ff 	mov.w	r1, #4294967295
 8008090:	4832      	ldr	r0, [pc, #200]	; (800815c <cppLoop+0x8a4>)
 8008092:	f7f9 ffaf 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008096:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800809a:	f001 fc67 	bl	800996c <HAL_Delay>
			led.LR(-1, 0);
 800809e:	2200      	movs	r2, #0
 80080a0:	f04f 31ff 	mov.w	r1, #4294967295
 80080a4:	482d      	ldr	r0, [pc, #180]	; (800815c <cppLoop+0x8a4>)
 80080a6:	f7f9 ffa5 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 80080aa:	f001 bb20 	b.w	80096ee <cppLoop+0x1e36>
		else if(joy_stick.getValue() == JOY_C){
 80080ae:	482a      	ldr	r0, [pc, #168]	; (8008158 <cppLoop+0x8a0>)
 80080b0:	f7f9 fe80 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	bf0c      	ite	eq
 80080ba:	2301      	moveq	r3, #1
 80080bc:	2300      	movne	r3, #0
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f001 8314 	beq.w	80096ee <cppLoop+0x1e36>
			led.LR(-1, 1);
 80080c6:	2201      	movs	r2, #1
 80080c8:	f04f 31ff 	mov.w	r1, #4294967295
 80080cc:	4823      	ldr	r0, [pc, #140]	; (800815c <cppLoop+0x8a4>)
 80080ce:	f7f9 ff91 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80080d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80080d6:	f001 fc49 	bl	800996c <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 80080da:	2300      	movs	r3, #0
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	4b21      	ldr	r3, [pc, #132]	; (8008164 <cppLoop+0x8ac>)
 80080e0:	2201      	movs	r2, #1
 80080e2:	4923      	ldr	r1, [pc, #140]	; (8008170 <cppLoop+0x8b8>)
 80080e4:	4823      	ldr	r0, [pc, #140]	; (8008174 <cppLoop+0x8bc>)
 80080e6:	f7f9 fa49 	bl	800157c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 80080ea:	2300      	movs	r3, #0
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	4b1e      	ldr	r3, [pc, #120]	; (8008168 <cppLoop+0x8b0>)
 80080f0:	2201      	movs	r2, #1
 80080f2:	4921      	ldr	r1, [pc, #132]	; (8008178 <cppLoop+0x8c0>)
 80080f4:	481f      	ldr	r0, [pc, #124]	; (8008174 <cppLoop+0x8bc>)
 80080f6:	f7f9 fa41 	bl	800157c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 80080fa:	2300      	movs	r3, #0
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	4b1b      	ldr	r3, [pc, #108]	; (800816c <cppLoop+0x8b4>)
 8008100:	2201      	movs	r2, #1
 8008102:	491e      	ldr	r1, [pc, #120]	; (800817c <cppLoop+0x8c4>)
 8008104:	481b      	ldr	r0, [pc, #108]	; (8008174 <cppLoop+0x8bc>)
 8008106:	f7f9 fa39 	bl	800157c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 800810a:	4b16      	ldr	r3, [pc, #88]	; (8008164 <cppLoop+0x8ac>)
 800810c:	edd3 7a00 	vldr	s15, [r3]
 8008110:	4b15      	ldr	r3, [pc, #84]	; (8008168 <cppLoop+0x8b0>)
 8008112:	ed93 7a00 	vldr	s14, [r3]
 8008116:	4b15      	ldr	r3, [pc, #84]	; (800816c <cppLoop+0x8b4>)
 8008118:	edd3 6a00 	vldr	s13, [r3]
 800811c:	eeb0 1a66 	vmov.f32	s2, s13
 8008120:	eef0 0a47 	vmov.f32	s1, s14
 8008124:	eeb0 0a67 	vmov.f32	s0, s15
 8008128:	4815      	ldr	r0, [pc, #84]	; (8008180 <cppLoop+0x8c8>)
 800812a:	f7fb fc11 	bl	8003950 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 800812e:	2200      	movs	r2, #0
 8008130:	f04f 31ff 	mov.w	r1, #4294967295
 8008134:	4809      	ldr	r0, [pc, #36]	; (800815c <cppLoop+0x8a4>)
 8008136:	f7f9 ff5d 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 800813a:	f001 bad8 	b.w	80096ee <cppLoop+0x1e36>
 800813e:	bf00      	nop
 8008140:	88e368f1 	.word	0x88e368f1
 8008144:	3ee4f8b5 	.word	0x3ee4f8b5
 8008148:	eb1c432d 	.word	0xeb1c432d
 800814c:	3f1a36e2 	.word	0x3f1a36e2
 8008150:	a0b5ed8d 	.word	0xa0b5ed8d
 8008154:	3eb0c6f7 	.word	0x3eb0c6f7
 8008158:	200005c0 	.word	0x200005c0
 800815c:	200005cc 	.word	0x200005cc
 8008160:	2003d3f4 	.word	0x2003d3f4
 8008164:	2003d400 	.word	0x2003d400
 8008168:	2003d408 	.word	0x2003d408
 800816c:	2003d410 	.word	0x2003d410
 8008170:	0801ab4c 	.word	0x0801ab4c
 8008174:	0801ab54 	.word	0x0801ab54
 8008178:	0801ab5c 	.word	0x0801ab5c
 800817c:	0801ab64 	.word	0x0801ab64
 8008180:	20017da0 	.word	0x20017da0

	case 1:
		led.fullColor('C');
 8008184:	2143      	movs	r1, #67	; 0x43
 8008186:	48aa      	ldr	r0, [pc, #680]	; (8008430 <cppLoop+0xb78>)
 8008188:	f7f9 fe78 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 800818c:	f7f8 ffba 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 8008190:	2100      	movs	r1, #0
 8008192:	2000      	movs	r0, #0
 8008194:	f7f8 ffc6 	bl	8001124 <lcd_locate>
		lcd_printf("FirstRun");
 8008198:	48a6      	ldr	r0, [pc, #664]	; (8008434 <cppLoop+0xb7c>)
 800819a:	f7f8 ffee 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 800819e:	2101      	movs	r1, #1
 80081a0:	2000      	movs	r0, #0
 80081a2:	f7f8 ffbf 	bl	8001124 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 80081a6:	4ba4      	ldr	r3, [pc, #656]	; (8008438 <cppLoop+0xb80>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7f8 f9e4 	bl	8000578 <__aeabi_f2d>
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	48a1      	ldr	r0, [pc, #644]	; (800843c <cppLoop+0xb84>)
 80081b6:	f7f8 ffe0 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80081ba:	48a1      	ldr	r0, [pc, #644]	; (8008440 <cppLoop+0xb88>)
 80081bc:	f7f9 fdfa 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	bf0c      	ite	eq
 80081c6:	2301      	moveq	r3, #1
 80081c8:	2300      	movne	r3, #0
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f001 8290 	beq.w	80096f2 <cppLoop+0x1e3a>
			HAL_Delay(500);
 80081d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80081d6:	f001 fbc9 	bl	800996c <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 80081da:	4b97      	ldr	r3, [pc, #604]	; (8008438 <cppLoop+0xb80>)
 80081dc:	edd3 7a00 	vldr	s15, [r3]
 80081e0:	eeb0 0a67 	vmov.f32	s0, s15
 80081e4:	4897      	ldr	r0, [pc, #604]	; (8008444 <cppLoop+0xb8c>)
 80081e6:	f7fb fc3f 	bl	8003a68 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 80081ea:	f04f 32ff 	mov.w	r2, #4294967295
 80081ee:	2101      	movs	r1, #1
 80081f0:	488f      	ldr	r0, [pc, #572]	; (8008430 <cppLoop+0xb78>)
 80081f2:	f7f9 feff 	bl	8001ff4 <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 80081f6:	2100      	movs	r1, #0
 80081f8:	4892      	ldr	r0, [pc, #584]	; (8008444 <cppLoop+0xb8c>)
 80081fa:	f7fc f851 	bl	80042a0 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 80081fe:	4891      	ldr	r0, [pc, #580]	; (8008444 <cppLoop+0xb8c>)
 8008200:	f7fb ff50 	bl	80040a4 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008204:	f04f 32ff 	mov.w	r2, #4294967295
 8008208:	2100      	movs	r1, #0
 800820a:	4889      	ldr	r0, [pc, #548]	; (8008430 <cppLoop+0xb78>)
 800820c:	f7f9 fef2 	bl	8001ff4 <_ZN3LED2LREaa>
		}

		break;
 8008210:	f001 ba6f 	b.w	80096f2 <cppLoop+0x1e3a>

	case 2:
		led.fullColor('B');
 8008214:	2142      	movs	r1, #66	; 0x42
 8008216:	4886      	ldr	r0, [pc, #536]	; (8008430 <cppLoop+0xb78>)
 8008218:	f7f9 fe30 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 800821c:	f7f8 ff72 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 8008220:	2100      	movs	r1, #0
 8008222:	2000      	movs	r0, #0
 8008224:	f7f8 ff7e 	bl	8001124 <lcd_locate>
		lcd_printf("FirstRun");
 8008228:	4882      	ldr	r0, [pc, #520]	; (8008434 <cppLoop+0xb7c>)
 800822a:	f7f8 ffa6 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 800822e:	2101      	movs	r1, #1
 8008230:	2000      	movs	r0, #0
 8008232:	f7f8 ff77 	bl	8001124 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 8008236:	4b80      	ldr	r3, [pc, #512]	; (8008438 <cppLoop+0xb80>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4618      	mov	r0, r3
 800823c:	f7f8 f99c 	bl	8000578 <__aeabi_f2d>
 8008240:	4602      	mov	r2, r0
 8008242:	460b      	mov	r3, r1
 8008244:	4880      	ldr	r0, [pc, #512]	; (8008448 <cppLoop+0xb90>)
 8008246:	f7f8 ff98 	bl	800117a <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 800824a:	487d      	ldr	r0, [pc, #500]	; (8008440 <cppLoop+0xb88>)
 800824c:	f7f9 fdb2 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008250:	4603      	mov	r3, r0
 8008252:	2b10      	cmp	r3, #16
 8008254:	bf0c      	ite	eq
 8008256:	2301      	moveq	r3, #1
 8008258:	2300      	movne	r3, #0
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b00      	cmp	r3, #0
 800825e:	d023      	beq.n	80082a8 <cppLoop+0x9f0>
			led.LR(-1, 1);
 8008260:	2201      	movs	r2, #1
 8008262:	f04f 31ff 	mov.w	r1, #4294967295
 8008266:	4872      	ldr	r0, [pc, #456]	; (8008430 <cppLoop+0xb78>)
 8008268:	f7f9 fec4 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800826c:	2064      	movs	r0, #100	; 0x64
 800826e:	f001 fb7d 	bl	800996c <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 8008272:	4b71      	ldr	r3, [pc, #452]	; (8008438 <cppLoop+0xb80>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4618      	mov	r0, r3
 8008278:	f7f8 f97e 	bl	8000578 <__aeabi_f2d>
 800827c:	a36a      	add	r3, pc, #424	; (adr r3, 8008428 <cppLoop+0xb70>)
 800827e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008282:	f7f8 f81b 	bl	80002bc <__adddf3>
 8008286:	4602      	mov	r2, r0
 8008288:	460b      	mov	r3, r1
 800828a:	4610      	mov	r0, r2
 800828c:	4619      	mov	r1, r3
 800828e:	f7f8 fcc3 	bl	8000c18 <__aeabi_d2f>
 8008292:	4603      	mov	r3, r0
 8008294:	4a68      	ldr	r2, [pc, #416]	; (8008438 <cppLoop+0xb80>)
 8008296:	6013      	str	r3, [r2, #0]

			led.LR(-1, 0);
 8008298:	2200      	movs	r2, #0
 800829a:	f04f 31ff 	mov.w	r1, #4294967295
 800829e:	4864      	ldr	r0, [pc, #400]	; (8008430 <cppLoop+0xb78>)
 80082a0:	f7f9 fea8 	bl	8001ff4 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 80082a4:	f001 ba27 	b.w	80096f6 <cppLoop+0x1e3e>
		else if(joy_stick.getValue() == JOY_L){
 80082a8:	4865      	ldr	r0, [pc, #404]	; (8008440 <cppLoop+0xb88>)
 80082aa:	f7f9 fd83 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	bf0c      	ite	eq
 80082b4:	2301      	moveq	r3, #1
 80082b6:	2300      	movne	r3, #0
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d023      	beq.n	8008306 <cppLoop+0xa4e>
			led.LR(-1, 1);
 80082be:	2201      	movs	r2, #1
 80082c0:	f04f 31ff 	mov.w	r1, #4294967295
 80082c4:	485a      	ldr	r0, [pc, #360]	; (8008430 <cppLoop+0xb78>)
 80082c6:	f7f9 fe95 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80082ca:	2064      	movs	r0, #100	; 0x64
 80082cc:	f001 fb4e 	bl	800996c <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 80082d0:	4b59      	ldr	r3, [pc, #356]	; (8008438 <cppLoop+0xb80>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7f8 f94f 	bl	8000578 <__aeabi_f2d>
 80082da:	a353      	add	r3, pc, #332	; (adr r3, 8008428 <cppLoop+0xb70>)
 80082dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e0:	f7f7 ffea 	bl	80002b8 <__aeabi_dsub>
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	4610      	mov	r0, r2
 80082ea:	4619      	mov	r1, r3
 80082ec:	f7f8 fc94 	bl	8000c18 <__aeabi_d2f>
 80082f0:	4603      	mov	r3, r0
 80082f2:	4a51      	ldr	r2, [pc, #324]	; (8008438 <cppLoop+0xb80>)
 80082f4:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 80082f6:	2200      	movs	r2, #0
 80082f8:	f04f 31ff 	mov.w	r1, #4294967295
 80082fc:	484c      	ldr	r0, [pc, #304]	; (8008430 <cppLoop+0xb78>)
 80082fe:	f7f9 fe79 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008302:	f001 b9f8 	b.w	80096f6 <cppLoop+0x1e3e>
		else if(joy_stick.getValue() == JOY_C){
 8008306:	484e      	ldr	r0, [pc, #312]	; (8008440 <cppLoop+0xb88>)
 8008308:	f7f9 fd54 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 800830c:	4603      	mov	r3, r0
 800830e:	2b02      	cmp	r3, #2
 8008310:	bf0c      	ite	eq
 8008312:	2301      	moveq	r3, #1
 8008314:	2300      	movne	r3, #0
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b00      	cmp	r3, #0
 800831a:	f001 81ec 	beq.w	80096f6 <cppLoop+0x1e3e>
			led.LR(-1, 1);
 800831e:	2201      	movs	r2, #1
 8008320:	f04f 31ff 	mov.w	r1, #4294967295
 8008324:	4842      	ldr	r0, [pc, #264]	; (8008430 <cppLoop+0xb78>)
 8008326:	f7f9 fe65 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800832a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800832e:	f001 fb1d 	bl	800996c <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 8008332:	2300      	movs	r3, #0
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	4b40      	ldr	r3, [pc, #256]	; (8008438 <cppLoop+0xb80>)
 8008338:	2201      	movs	r2, #1
 800833a:	4944      	ldr	r1, [pc, #272]	; (800844c <cppLoop+0xb94>)
 800833c:	4844      	ldr	r0, [pc, #272]	; (8008450 <cppLoop+0xb98>)
 800833e:	f7f9 f91d 	bl	800157c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 8008342:	4b3d      	ldr	r3, [pc, #244]	; (8008438 <cppLoop+0xb80>)
 8008344:	edd3 7a00 	vldr	s15, [r3]
 8008348:	eeb0 0a67 	vmov.f32	s0, s15
 800834c:	483d      	ldr	r0, [pc, #244]	; (8008444 <cppLoop+0xb8c>)
 800834e:	f7fb fb8b 	bl	8003a68 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 8008352:	2200      	movs	r2, #0
 8008354:	f04f 31ff 	mov.w	r1, #4294967295
 8008358:	4835      	ldr	r0, [pc, #212]	; (8008430 <cppLoop+0xb78>)
 800835a:	f7f9 fe4b 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 800835e:	f001 b9ca 	b.w	80096f6 <cppLoop+0x1e3e>

	case 3:
		led.fullColor('Y');
 8008362:	2159      	movs	r1, #89	; 0x59
 8008364:	4832      	ldr	r0, [pc, #200]	; (8008430 <cppLoop+0xb78>)
 8008366:	f7f9 fd89 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 800836a:	f7f8 fecb 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 800836e:	2100      	movs	r1, #0
 8008370:	2000      	movs	r0, #0
 8008372:	f7f8 fed7 	bl	8001124 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 8008376:	4b37      	ldr	r3, [pc, #220]	; (8008454 <cppLoop+0xb9c>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4618      	mov	r0, r3
 800837c:	f7f8 f8fc 	bl	8000578 <__aeabi_f2d>
 8008380:	4602      	mov	r2, r0
 8008382:	460b      	mov	r3, r1
 8008384:	4834      	ldr	r0, [pc, #208]	; (8008458 <cppLoop+0xba0>)
 8008386:	f7f8 fef8 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 800838a:	2101      	movs	r1, #1
 800838c:	2000      	movs	r0, #0
 800838e:	f7f8 fec9 	bl	8001124 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 8008392:	4b32      	ldr	r3, [pc, #200]	; (800845c <cppLoop+0xba4>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4618      	mov	r0, r3
 8008398:	f7f8 f8ee 	bl	8000578 <__aeabi_f2d>
 800839c:	4602      	mov	r2, r0
 800839e:	460b      	mov	r3, r1
 80083a0:	4826      	ldr	r0, [pc, #152]	; (800843c <cppLoop+0xb84>)
 80083a2:	f7f8 feea 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80083a6:	4826      	ldr	r0, [pc, #152]	; (8008440 <cppLoop+0xb88>)
 80083a8:	f7f9 fd04 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	bf0c      	ite	eq
 80083b2:	2301      	moveq	r3, #1
 80083b4:	2300      	movne	r3, #0
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f001 819e 	beq.w	80096fa <cppLoop+0x1e42>
			HAL_Delay(500);
 80083be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80083c2:	f001 fad3 	bl	800996c <HAL_Delay>

			led.LR(1, -1);
 80083c6:	f04f 32ff 	mov.w	r2, #4294967295
 80083ca:	2101      	movs	r1, #1
 80083cc:	4818      	ldr	r0, [pc, #96]	; (8008430 <cppLoop+0xb78>)
 80083ce:	f7f9 fe11 	bl	8001ff4 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 80083d2:	2101      	movs	r1, #1
 80083d4:	481b      	ldr	r0, [pc, #108]	; (8008444 <cppLoop+0xb8c>)
 80083d6:	f7fb ff63 	bl	80042a0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 80083da:	4b20      	ldr	r3, [pc, #128]	; (800845c <cppLoop+0xba4>)
 80083dc:	edd3 7a00 	vldr	s15, [r3]
 80083e0:	eeb0 0a67 	vmov.f32	s0, s15
 80083e4:	4817      	ldr	r0, [pc, #92]	; (8008444 <cppLoop+0xb8c>)
 80083e6:	f7fb fb3f 	bl	8003a68 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80083ea:	4b1a      	ldr	r3, [pc, #104]	; (8008454 <cppLoop+0xb9c>)
 80083ec:	edd3 7a00 	vldr	s15, [r3]
 80083f0:	eeb0 0a67 	vmov.f32	s0, s15
 80083f4:	4813      	ldr	r0, [pc, #76]	; (8008444 <cppLoop+0xb8c>)
 80083f6:	f7fb fb47 	bl	8003a88 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80083fa:	4b18      	ldr	r3, [pc, #96]	; (800845c <cppLoop+0xba4>)
 80083fc:	edd3 7a00 	vldr	s15, [r3]
 8008400:	eeb0 0a67 	vmov.f32	s0, s15
 8008404:	480f      	ldr	r0, [pc, #60]	; (8008444 <cppLoop+0xb8c>)
 8008406:	f7fb fb5f 	bl	8003ac8 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 800840a:	480e      	ldr	r0, [pc, #56]	; (8008444 <cppLoop+0xb8c>)
 800840c:	f7fa fd9e 	bl	8002f4c <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008410:	480c      	ldr	r0, [pc, #48]	; (8008444 <cppLoop+0xb8c>)
 8008412:	f7fb fe47 	bl	80040a4 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008416:	f04f 32ff 	mov.w	r2, #4294967295
 800841a:	2100      	movs	r1, #0
 800841c:	4804      	ldr	r0, [pc, #16]	; (8008430 <cppLoop+0xb78>)
 800841e:	f7f9 fde9 	bl	8001ff4 <_ZN3LED2LREaa>
		}

		break;
 8008422:	f001 b96a 	b.w	80096fa <cppLoop+0x1e42>
 8008426:	bf00      	nop
 8008428:	9999999a 	.word	0x9999999a
 800842c:	3fb99999 	.word	0x3fb99999
 8008430:	200005cc 	.word	0x200005cc
 8008434:	0801ab6c 	.word	0x0801ab6c
 8008438:	2003d430 	.word	0x2003d430
 800843c:	0801ab78 	.word	0x0801ab78
 8008440:	200005c0 	.word	0x200005c0
 8008444:	20017da0 	.word	0x20017da0
 8008448:	0801ab84 	.word	0x0801ab84
 800844c:	0801ab90 	.word	0x0801ab90
 8008450:	0801ab54 	.word	0x0801ab54
 8008454:	2003d438 	.word	0x2003d438
 8008458:	0801ab9c 	.word	0x0801ab9c
 800845c:	2003d448 	.word	0x2003d448

	case 4:
		led.fullColor('G');
 8008460:	2147      	movs	r1, #71	; 0x47
 8008462:	4893      	ldr	r0, [pc, #588]	; (80086b0 <cppLoop+0xdf8>)
 8008464:	f7f9 fd0a 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008468:	f7f8 fe4c 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 800846c:	2100      	movs	r1, #0
 800846e:	2000      	movs	r0, #0
 8008470:	f7f8 fe58 	bl	8001124 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 8008474:	488f      	ldr	r0, [pc, #572]	; (80086b4 <cppLoop+0xdfc>)
 8008476:	f7fb fb57 	bl	8003b28 <_ZN9LineTrace14getMaxVelocityEv>
 800847a:	ee10 3a10 	vmov	r3, s0
 800847e:	4618      	mov	r0, r3
 8008480:	f7f8 f87a 	bl	8000578 <__aeabi_f2d>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	488b      	ldr	r0, [pc, #556]	; (80086b8 <cppLoop+0xe00>)
 800848a:	f7f8 fe76 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 800848e:	2101      	movs	r1, #1
 8008490:	2000      	movs	r0, #0
 8008492:	f7f8 fe47 	bl	8001124 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8008496:	4887      	ldr	r0, [pc, #540]	; (80086b4 <cppLoop+0xdfc>)
 8008498:	f7fb fb66 	bl	8003b68 <_ZN9LineTrace14getMinVelocityEv>
 800849c:	ee10 3a10 	vmov	r3, s0
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7f8 f869 	bl	8000578 <__aeabi_f2d>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	4884      	ldr	r0, [pc, #528]	; (80086bc <cppLoop+0xe04>)
 80084ac:	f7f8 fe65 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80084b0:	4883      	ldr	r0, [pc, #524]	; (80086c0 <cppLoop+0xe08>)
 80084b2:	f7f9 fc7f 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b08      	cmp	r3, #8
 80084ba:	bf0c      	ite	eq
 80084bc:	2301      	moveq	r3, #1
 80084be:	2300      	movne	r3, #0
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d022      	beq.n	800850c <cppLoop+0xc54>
			led.LR(-1, 1);
 80084c6:	2201      	movs	r2, #1
 80084c8:	f04f 31ff 	mov.w	r1, #4294967295
 80084cc:	4878      	ldr	r0, [pc, #480]	; (80086b0 <cppLoop+0xdf8>)
 80084ce:	f7f9 fd91 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80084d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80084d6:	f001 fa49 	bl	800996c <HAL_Delay>

			selector_vel++;
 80084da:	4b7a      	ldr	r3, [pc, #488]	; (80086c4 <cppLoop+0xe0c>)
 80084dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	3301      	adds	r3, #1
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	b21a      	sxth	r2, r3
 80084e8:	4b76      	ldr	r3, [pc, #472]	; (80086c4 <cppLoop+0xe0c>)
 80084ea:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 80084ec:	4b75      	ldr	r3, [pc, #468]	; (80086c4 <cppLoop+0xe0c>)
 80084ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	dd02      	ble.n	80084fc <cppLoop+0xc44>
 80084f6:	4b73      	ldr	r3, [pc, #460]	; (80086c4 <cppLoop+0xe0c>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80084fc:	2200      	movs	r2, #0
 80084fe:	f04f 31ff 	mov.w	r1, #4294967295
 8008502:	486b      	ldr	r0, [pc, #428]	; (80086b0 <cppLoop+0xdf8>)
 8008504:	f7f9 fd76 	bl	8001ff4 <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 8008508:	f001 b8f9 	b.w	80096fe <cppLoop+0x1e46>
		else if(joy_stick.getValue() == JOY_R){
 800850c:	486c      	ldr	r0, [pc, #432]	; (80086c0 <cppLoop+0xe08>)
 800850e:	f7f9 fc51 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008512:	4603      	mov	r3, r0
 8008514:	2b10      	cmp	r3, #16
 8008516:	bf0c      	ite	eq
 8008518:	2301      	moveq	r3, #1
 800851a:	2300      	movne	r3, #0
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	d03c      	beq.n	800859c <cppLoop+0xce4>
			led.LR(-1, 1);
 8008522:	2201      	movs	r2, #1
 8008524:	f04f 31ff 	mov.w	r1, #4294967295
 8008528:	4861      	ldr	r0, [pc, #388]	; (80086b0 <cppLoop+0xdf8>)
 800852a:	f7f9 fd63 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800852e:	2064      	movs	r0, #100	; 0x64
 8008530:	f001 fa1c 	bl	800996c <HAL_Delay>
			if(selector_vel == 0)
 8008534:	4b63      	ldr	r3, [pc, #396]	; (80086c4 <cppLoop+0xe0c>)
 8008536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d113      	bne.n	8008566 <cppLoop+0xcae>
				adj_max_velocity = adj_max_velocity + 0.1;
 800853e:	4b62      	ldr	r3, [pc, #392]	; (80086c8 <cppLoop+0xe10>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4618      	mov	r0, r3
 8008544:	f7f8 f818 	bl	8000578 <__aeabi_f2d>
 8008548:	a357      	add	r3, pc, #348	; (adr r3, 80086a8 <cppLoop+0xdf0>)
 800854a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854e:	f7f7 feb5 	bl	80002bc <__adddf3>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	4610      	mov	r0, r2
 8008558:	4619      	mov	r1, r3
 800855a:	f7f8 fb5d 	bl	8000c18 <__aeabi_d2f>
 800855e:	4603      	mov	r3, r0
 8008560:	4a59      	ldr	r2, [pc, #356]	; (80086c8 <cppLoop+0xe10>)
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	e012      	b.n	800858c <cppLoop+0xcd4>
				adj_min_velocity = adj_min_velocity + 0.1;
 8008566:	4b59      	ldr	r3, [pc, #356]	; (80086cc <cppLoop+0xe14>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4618      	mov	r0, r3
 800856c:	f7f8 f804 	bl	8000578 <__aeabi_f2d>
 8008570:	a34d      	add	r3, pc, #308	; (adr r3, 80086a8 <cppLoop+0xdf0>)
 8008572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008576:	f7f7 fea1 	bl	80002bc <__adddf3>
 800857a:	4602      	mov	r2, r0
 800857c:	460b      	mov	r3, r1
 800857e:	4610      	mov	r0, r2
 8008580:	4619      	mov	r1, r3
 8008582:	f7f8 fb49 	bl	8000c18 <__aeabi_d2f>
 8008586:	4603      	mov	r3, r0
 8008588:	4a50      	ldr	r2, [pc, #320]	; (80086cc <cppLoop+0xe14>)
 800858a:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 800858c:	2200      	movs	r2, #0
 800858e:	f04f 31ff 	mov.w	r1, #4294967295
 8008592:	4847      	ldr	r0, [pc, #284]	; (80086b0 <cppLoop+0xdf8>)
 8008594:	f7f9 fd2e 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008598:	f001 b8b1 	b.w	80096fe <cppLoop+0x1e46>
		else if(joy_stick.getValue() == JOY_L){
 800859c:	4848      	ldr	r0, [pc, #288]	; (80086c0 <cppLoop+0xe08>)
 800859e:	f7f9 fc09 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	bf0c      	ite	eq
 80085a8:	2301      	moveq	r3, #1
 80085aa:	2300      	movne	r3, #0
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d03c      	beq.n	800862c <cppLoop+0xd74>
			led.LR(-1, 1);
 80085b2:	2201      	movs	r2, #1
 80085b4:	f04f 31ff 	mov.w	r1, #4294967295
 80085b8:	483d      	ldr	r0, [pc, #244]	; (80086b0 <cppLoop+0xdf8>)
 80085ba:	f7f9 fd1b 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80085be:	2064      	movs	r0, #100	; 0x64
 80085c0:	f001 f9d4 	bl	800996c <HAL_Delay>
			if(selector_vel == 0)
 80085c4:	4b3f      	ldr	r3, [pc, #252]	; (80086c4 <cppLoop+0xe0c>)
 80085c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d113      	bne.n	80085f6 <cppLoop+0xd3e>
				adj_max_velocity = adj_max_velocity - 0.1;
 80085ce:	4b3e      	ldr	r3, [pc, #248]	; (80086c8 <cppLoop+0xe10>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7f7 ffd0 	bl	8000578 <__aeabi_f2d>
 80085d8:	a333      	add	r3, pc, #204	; (adr r3, 80086a8 <cppLoop+0xdf0>)
 80085da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085de:	f7f7 fe6b 	bl	80002b8 <__aeabi_dsub>
 80085e2:	4602      	mov	r2, r0
 80085e4:	460b      	mov	r3, r1
 80085e6:	4610      	mov	r0, r2
 80085e8:	4619      	mov	r1, r3
 80085ea:	f7f8 fb15 	bl	8000c18 <__aeabi_d2f>
 80085ee:	4603      	mov	r3, r0
 80085f0:	4a35      	ldr	r2, [pc, #212]	; (80086c8 <cppLoop+0xe10>)
 80085f2:	6013      	str	r3, [r2, #0]
 80085f4:	e012      	b.n	800861c <cppLoop+0xd64>
				adj_min_velocity = adj_min_velocity - 0.1;
 80085f6:	4b35      	ldr	r3, [pc, #212]	; (80086cc <cppLoop+0xe14>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7f7 ffbc 	bl	8000578 <__aeabi_f2d>
 8008600:	a329      	add	r3, pc, #164	; (adr r3, 80086a8 <cppLoop+0xdf0>)
 8008602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008606:	f7f7 fe57 	bl	80002b8 <__aeabi_dsub>
 800860a:	4602      	mov	r2, r0
 800860c:	460b      	mov	r3, r1
 800860e:	4610      	mov	r0, r2
 8008610:	4619      	mov	r1, r3
 8008612:	f7f8 fb01 	bl	8000c18 <__aeabi_d2f>
 8008616:	4603      	mov	r3, r0
 8008618:	4a2c      	ldr	r2, [pc, #176]	; (80086cc <cppLoop+0xe14>)
 800861a:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 800861c:	2200      	movs	r2, #0
 800861e:	f04f 31ff 	mov.w	r1, #4294967295
 8008622:	4823      	ldr	r0, [pc, #140]	; (80086b0 <cppLoop+0xdf8>)
 8008624:	f7f9 fce6 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008628:	f001 b869 	b.w	80096fe <cppLoop+0x1e46>
		else if(joy_stick.getValue() == JOY_C){
 800862c:	4824      	ldr	r0, [pc, #144]	; (80086c0 <cppLoop+0xe08>)
 800862e:	f7f9 fbc1 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008632:	4603      	mov	r3, r0
 8008634:	2b02      	cmp	r3, #2
 8008636:	bf0c      	ite	eq
 8008638:	2301      	moveq	r3, #1
 800863a:	2300      	movne	r3, #0
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	f001 805d 	beq.w	80096fe <cppLoop+0x1e46>
			led.LR(-1, 1);
 8008644:	2201      	movs	r2, #1
 8008646:	f04f 31ff 	mov.w	r1, #4294967295
 800864a:	4819      	ldr	r0, [pc, #100]	; (80086b0 <cppLoop+0xdf8>)
 800864c:	f7f9 fcd2 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008650:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008654:	f001 f98a 	bl	800996c <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008658:	2300      	movs	r3, #0
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	4b1a      	ldr	r3, [pc, #104]	; (80086c8 <cppLoop+0xe10>)
 800865e:	2201      	movs	r2, #1
 8008660:	491b      	ldr	r1, [pc, #108]	; (80086d0 <cppLoop+0xe18>)
 8008662:	481c      	ldr	r0, [pc, #112]	; (80086d4 <cppLoop+0xe1c>)
 8008664:	f7f8 ff8a 	bl	800157c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008668:	2300      	movs	r3, #0
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	4b17      	ldr	r3, [pc, #92]	; (80086cc <cppLoop+0xe14>)
 800866e:	2201      	movs	r2, #1
 8008670:	4919      	ldr	r1, [pc, #100]	; (80086d8 <cppLoop+0xe20>)
 8008672:	4818      	ldr	r0, [pc, #96]	; (80086d4 <cppLoop+0xe1c>)
 8008674:	f7f8 ff82 	bl	800157c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008678:	4b13      	ldr	r3, [pc, #76]	; (80086c8 <cppLoop+0xe10>)
 800867a:	edd3 7a00 	vldr	s15, [r3]
 800867e:	eeb0 0a67 	vmov.f32	s0, s15
 8008682:	480c      	ldr	r0, [pc, #48]	; (80086b4 <cppLoop+0xdfc>)
 8008684:	f7fb fa00 	bl	8003a88 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008688:	4b10      	ldr	r3, [pc, #64]	; (80086cc <cppLoop+0xe14>)
 800868a:	edd3 7a00 	vldr	s15, [r3]
 800868e:	eeb0 0a67 	vmov.f32	s0, s15
 8008692:	4808      	ldr	r0, [pc, #32]	; (80086b4 <cppLoop+0xdfc>)
 8008694:	f7fb fa18 	bl	8003ac8 <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008698:	2200      	movs	r2, #0
 800869a:	f04f 31ff 	mov.w	r1, #4294967295
 800869e:	4804      	ldr	r0, [pc, #16]	; (80086b0 <cppLoop+0xdf8>)
 80086a0:	f7f9 fca8 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 80086a4:	f001 b82b 	b.w	80096fe <cppLoop+0x1e46>
 80086a8:	9999999a 	.word	0x9999999a
 80086ac:	3fb99999 	.word	0x3fb99999
 80086b0:	200005cc 	.word	0x200005cc
 80086b4:	20017da0 	.word	0x20017da0
 80086b8:	0801ab9c 	.word	0x0801ab9c
 80086bc:	0801ab84 	.word	0x0801ab84
 80086c0:	200005c0 	.word	0x200005c0
 80086c4:	2003d3fa 	.word	0x2003d3fa
 80086c8:	2003d438 	.word	0x2003d438
 80086cc:	2003d448 	.word	0x2003d448
 80086d0:	0801aba8 	.word	0x0801aba8
 80086d4:	0801ab54 	.word	0x0801ab54
 80086d8:	0801abb4 	.word	0x0801abb4

	case 5:
		led.fullColor('M');
 80086dc:	214d      	movs	r1, #77	; 0x4d
 80086de:	48a6      	ldr	r0, [pc, #664]	; (8008978 <cppLoop+0x10c0>)
 80086e0:	f7f9 fbcc 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 80086e4:	f7f8 fd0e 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 80086e8:	2100      	movs	r1, #0
 80086ea:	2000      	movs	r0, #0
 80086ec:	f7f8 fd1a 	bl	8001124 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 80086f0:	4ba2      	ldr	r3, [pc, #648]	; (800897c <cppLoop+0x10c4>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7f7 ff3f 	bl	8000578 <__aeabi_f2d>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	48a0      	ldr	r0, [pc, #640]	; (8008980 <cppLoop+0x10c8>)
 8008700:	f7f8 fd3b 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 8008704:	2101      	movs	r1, #1
 8008706:	2000      	movs	r0, #0
 8008708:	f7f8 fd0c 	bl	8001124 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 800870c:	4b9d      	ldr	r3, [pc, #628]	; (8008984 <cppLoop+0x10cc>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4618      	mov	r0, r3
 8008712:	f7f7 ff31 	bl	8000578 <__aeabi_f2d>
 8008716:	4602      	mov	r2, r0
 8008718:	460b      	mov	r3, r1
 800871a:	489b      	ldr	r0, [pc, #620]	; (8008988 <cppLoop+0x10d0>)
 800871c:	f7f8 fd2d 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008720:	489a      	ldr	r0, [pc, #616]	; (800898c <cppLoop+0x10d4>)
 8008722:	f7f9 fb47 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008726:	4603      	mov	r3, r0
 8008728:	2b02      	cmp	r3, #2
 800872a:	bf0c      	ite	eq
 800872c:	2301      	moveq	r3, #1
 800872e:	2300      	movne	r3, #0
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	f000 87e5 	beq.w	8009702 <cppLoop+0x1e4a>
			HAL_Delay(500);
 8008738:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800873c:	f001 f916 	bl	800996c <HAL_Delay>

			led.LR(1, -1);
 8008740:	f04f 32ff 	mov.w	r2, #4294967295
 8008744:	2101      	movs	r1, #1
 8008746:	488c      	ldr	r0, [pc, #560]	; (8008978 <cppLoop+0x10c0>)
 8008748:	f7f9 fc54 	bl	8001ff4 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 800874c:	2102      	movs	r1, #2
 800874e:	4890      	ldr	r0, [pc, #576]	; (8008990 <cppLoop+0x10d8>)
 8008750:	f7fb fda6 	bl	80042a0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008754:	4b8b      	ldr	r3, [pc, #556]	; (8008984 <cppLoop+0x10cc>)
 8008756:	edd3 7a00 	vldr	s15, [r3]
 800875a:	eeb0 0a67 	vmov.f32	s0, s15
 800875e:	488c      	ldr	r0, [pc, #560]	; (8008990 <cppLoop+0x10d8>)
 8008760:	f7fb f982 	bl	8003a68 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008764:	4b85      	ldr	r3, [pc, #532]	; (800897c <cppLoop+0x10c4>)
 8008766:	edd3 7a00 	vldr	s15, [r3]
 800876a:	eeb0 0a67 	vmov.f32	s0, s15
 800876e:	4888      	ldr	r0, [pc, #544]	; (8008990 <cppLoop+0x10d8>)
 8008770:	f7fb f99a 	bl	8003aa8 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008774:	4b83      	ldr	r3, [pc, #524]	; (8008984 <cppLoop+0x10cc>)
 8008776:	edd3 7a00 	vldr	s15, [r3]
 800877a:	eeb0 0a67 	vmov.f32	s0, s15
 800877e:	4884      	ldr	r0, [pc, #528]	; (8008990 <cppLoop+0x10d8>)
 8008780:	f7fb f9b2 	bl	8003ae8 <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008784:	4882      	ldr	r0, [pc, #520]	; (8008990 <cppLoop+0x10d8>)
 8008786:	f7fa fbe1 	bl	8002f4c <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 800878a:	4881      	ldr	r0, [pc, #516]	; (8008990 <cppLoop+0x10d8>)
 800878c:	f7fb fc8a 	bl	80040a4 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008790:	f04f 32ff 	mov.w	r2, #4294967295
 8008794:	2100      	movs	r1, #0
 8008796:	4878      	ldr	r0, [pc, #480]	; (8008978 <cppLoop+0x10c0>)
 8008798:	f7f9 fc2c 	bl	8001ff4 <_ZN3LED2LREaa>
		}

		break;
 800879c:	f000 bfb1 	b.w	8009702 <cppLoop+0x1e4a>

	case 6:
		led.fullColor('R');
 80087a0:	2152      	movs	r1, #82	; 0x52
 80087a2:	4875      	ldr	r0, [pc, #468]	; (8008978 <cppLoop+0x10c0>)
 80087a4:	f7f9 fb6a 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 80087a8:	f7f8 fcac 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 80087ac:	2100      	movs	r1, #0
 80087ae:	2000      	movs	r0, #0
 80087b0:	f7f8 fcb8 	bl	8001124 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 80087b4:	4876      	ldr	r0, [pc, #472]	; (8008990 <cppLoop+0x10d8>)
 80087b6:	f7fb f9c7 	bl	8003b48 <_ZN9LineTrace15getMaxVelocity2Ev>
 80087ba:	ee10 3a10 	vmov	r3, s0
 80087be:	4618      	mov	r0, r3
 80087c0:	f7f7 feda 	bl	8000578 <__aeabi_f2d>
 80087c4:	4602      	mov	r2, r0
 80087c6:	460b      	mov	r3, r1
 80087c8:	486d      	ldr	r0, [pc, #436]	; (8008980 <cppLoop+0x10c8>)
 80087ca:	f7f8 fcd6 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 80087ce:	2101      	movs	r1, #1
 80087d0:	2000      	movs	r0, #0
 80087d2:	f7f8 fca7 	bl	8001124 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 80087d6:	486e      	ldr	r0, [pc, #440]	; (8008990 <cppLoop+0x10d8>)
 80087d8:	f7fb f9d6 	bl	8003b88 <_ZN9LineTrace15getMinVelocity2Ev>
 80087dc:	ee10 3a10 	vmov	r3, s0
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7f7 fec9 	bl	8000578 <__aeabi_f2d>
 80087e6:	4602      	mov	r2, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	486a      	ldr	r0, [pc, #424]	; (8008994 <cppLoop+0x10dc>)
 80087ec:	f7f8 fcc5 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80087f0:	4866      	ldr	r0, [pc, #408]	; (800898c <cppLoop+0x10d4>)
 80087f2:	f7f9 fadf 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b08      	cmp	r3, #8
 80087fa:	bf0c      	ite	eq
 80087fc:	2301      	moveq	r3, #1
 80087fe:	2300      	movne	r3, #0
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	d022      	beq.n	800884c <cppLoop+0xf94>
			led.LR(-1, 1);
 8008806:	2201      	movs	r2, #1
 8008808:	f04f 31ff 	mov.w	r1, #4294967295
 800880c:	485a      	ldr	r0, [pc, #360]	; (8008978 <cppLoop+0x10c0>)
 800880e:	f7f9 fbf1 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008812:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008816:	f001 f8a9 	bl	800996c <HAL_Delay>

			selector_vel2++;
 800881a:	4b5f      	ldr	r3, [pc, #380]	; (8008998 <cppLoop+0x10e0>)
 800881c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008820:	b29b      	uxth	r3, r3
 8008822:	3301      	adds	r3, #1
 8008824:	b29b      	uxth	r3, r3
 8008826:	b21a      	sxth	r2, r3
 8008828:	4b5b      	ldr	r3, [pc, #364]	; (8008998 <cppLoop+0x10e0>)
 800882a:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 800882c:	4b5a      	ldr	r3, [pc, #360]	; (8008998 <cppLoop+0x10e0>)
 800882e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008832:	2b01      	cmp	r3, #1
 8008834:	dd02      	ble.n	800883c <cppLoop+0xf84>
 8008836:	4b58      	ldr	r3, [pc, #352]	; (8008998 <cppLoop+0x10e0>)
 8008838:	2200      	movs	r2, #0
 800883a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800883c:	2200      	movs	r2, #0
 800883e:	f04f 31ff 	mov.w	r1, #4294967295
 8008842:	484d      	ldr	r0, [pc, #308]	; (8008978 <cppLoop+0x10c0>)
 8008844:	f7f9 fbd6 	bl	8001ff4 <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008848:	f000 bf5d 	b.w	8009706 <cppLoop+0x1e4e>
		else if(joy_stick.getValue() == JOY_R){
 800884c:	484f      	ldr	r0, [pc, #316]	; (800898c <cppLoop+0x10d4>)
 800884e:	f7f9 fab1 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008852:	4603      	mov	r3, r0
 8008854:	2b10      	cmp	r3, #16
 8008856:	bf0c      	ite	eq
 8008858:	2301      	moveq	r3, #1
 800885a:	2300      	movne	r3, #0
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b00      	cmp	r3, #0
 8008860:	d03c      	beq.n	80088dc <cppLoop+0x1024>
			led.LR(-1, 1);
 8008862:	2201      	movs	r2, #1
 8008864:	f04f 31ff 	mov.w	r1, #4294967295
 8008868:	4843      	ldr	r0, [pc, #268]	; (8008978 <cppLoop+0x10c0>)
 800886a:	f7f9 fbc3 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800886e:	2064      	movs	r0, #100	; 0x64
 8008870:	f001 f87c 	bl	800996c <HAL_Delay>
			if(selector_vel2 == 0)
 8008874:	4b48      	ldr	r3, [pc, #288]	; (8008998 <cppLoop+0x10e0>)
 8008876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d113      	bne.n	80088a6 <cppLoop+0xfee>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 800887e:	4b3f      	ldr	r3, [pc, #252]	; (800897c <cppLoop+0x10c4>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4618      	mov	r0, r3
 8008884:	f7f7 fe78 	bl	8000578 <__aeabi_f2d>
 8008888:	a339      	add	r3, pc, #228	; (adr r3, 8008970 <cppLoop+0x10b8>)
 800888a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888e:	f7f7 fd15 	bl	80002bc <__adddf3>
 8008892:	4602      	mov	r2, r0
 8008894:	460b      	mov	r3, r1
 8008896:	4610      	mov	r0, r2
 8008898:	4619      	mov	r1, r3
 800889a:	f7f8 f9bd 	bl	8000c18 <__aeabi_d2f>
 800889e:	4603      	mov	r3, r0
 80088a0:	4a36      	ldr	r2, [pc, #216]	; (800897c <cppLoop+0x10c4>)
 80088a2:	6013      	str	r3, [r2, #0]
 80088a4:	e012      	b.n	80088cc <cppLoop+0x1014>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 80088a6:	4b37      	ldr	r3, [pc, #220]	; (8008984 <cppLoop+0x10cc>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7f7 fe64 	bl	8000578 <__aeabi_f2d>
 80088b0:	a32f      	add	r3, pc, #188	; (adr r3, 8008970 <cppLoop+0x10b8>)
 80088b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b6:	f7f7 fd01 	bl	80002bc <__adddf3>
 80088ba:	4602      	mov	r2, r0
 80088bc:	460b      	mov	r3, r1
 80088be:	4610      	mov	r0, r2
 80088c0:	4619      	mov	r1, r3
 80088c2:	f7f8 f9a9 	bl	8000c18 <__aeabi_d2f>
 80088c6:	4603      	mov	r3, r0
 80088c8:	4a2e      	ldr	r2, [pc, #184]	; (8008984 <cppLoop+0x10cc>)
 80088ca:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 80088cc:	2200      	movs	r2, #0
 80088ce:	f04f 31ff 	mov.w	r1, #4294967295
 80088d2:	4829      	ldr	r0, [pc, #164]	; (8008978 <cppLoop+0x10c0>)
 80088d4:	f7f9 fb8e 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 80088d8:	f000 bf15 	b.w	8009706 <cppLoop+0x1e4e>
		else if(joy_stick.getValue() == JOY_L){
 80088dc:	482b      	ldr	r0, [pc, #172]	; (800898c <cppLoop+0x10d4>)
 80088de:	f7f9 fa69 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	bf0c      	ite	eq
 80088e8:	2301      	moveq	r3, #1
 80088ea:	2300      	movne	r3, #0
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d054      	beq.n	800899c <cppLoop+0x10e4>
			led.LR(-1, 1);
 80088f2:	2201      	movs	r2, #1
 80088f4:	f04f 31ff 	mov.w	r1, #4294967295
 80088f8:	481f      	ldr	r0, [pc, #124]	; (8008978 <cppLoop+0x10c0>)
 80088fa:	f7f9 fb7b 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80088fe:	2064      	movs	r0, #100	; 0x64
 8008900:	f001 f834 	bl	800996c <HAL_Delay>
			if(selector_vel2 == 0)
 8008904:	4b24      	ldr	r3, [pc, #144]	; (8008998 <cppLoop+0x10e0>)
 8008906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d113      	bne.n	8008936 <cppLoop+0x107e>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 800890e:	4b1b      	ldr	r3, [pc, #108]	; (800897c <cppLoop+0x10c4>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4618      	mov	r0, r3
 8008914:	f7f7 fe30 	bl	8000578 <__aeabi_f2d>
 8008918:	a315      	add	r3, pc, #84	; (adr r3, 8008970 <cppLoop+0x10b8>)
 800891a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891e:	f7f7 fccb 	bl	80002b8 <__aeabi_dsub>
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	4610      	mov	r0, r2
 8008928:	4619      	mov	r1, r3
 800892a:	f7f8 f975 	bl	8000c18 <__aeabi_d2f>
 800892e:	4603      	mov	r3, r0
 8008930:	4a12      	ldr	r2, [pc, #72]	; (800897c <cppLoop+0x10c4>)
 8008932:	6013      	str	r3, [r2, #0]
 8008934:	e012      	b.n	800895c <cppLoop+0x10a4>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008936:	4b13      	ldr	r3, [pc, #76]	; (8008984 <cppLoop+0x10cc>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4618      	mov	r0, r3
 800893c:	f7f7 fe1c 	bl	8000578 <__aeabi_f2d>
 8008940:	a30b      	add	r3, pc, #44	; (adr r3, 8008970 <cppLoop+0x10b8>)
 8008942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008946:	f7f7 fcb7 	bl	80002b8 <__aeabi_dsub>
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	4610      	mov	r0, r2
 8008950:	4619      	mov	r1, r3
 8008952:	f7f8 f961 	bl	8000c18 <__aeabi_d2f>
 8008956:	4603      	mov	r3, r0
 8008958:	4a0a      	ldr	r2, [pc, #40]	; (8008984 <cppLoop+0x10cc>)
 800895a:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 800895c:	2200      	movs	r2, #0
 800895e:	f04f 31ff 	mov.w	r1, #4294967295
 8008962:	4805      	ldr	r0, [pc, #20]	; (8008978 <cppLoop+0x10c0>)
 8008964:	f7f9 fb46 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008968:	f000 becd 	b.w	8009706 <cppLoop+0x1e4e>
 800896c:	f3af 8000 	nop.w
 8008970:	9999999a 	.word	0x9999999a
 8008974:	3fb99999 	.word	0x3fb99999
 8008978:	200005cc 	.word	0x200005cc
 800897c:	2003d440 	.word	0x2003d440
 8008980:	0801abc0 	.word	0x0801abc0
 8008984:	2003d450 	.word	0x2003d450
 8008988:	0801ab78 	.word	0x0801ab78
 800898c:	200005c0 	.word	0x200005c0
 8008990:	20017da0 	.word	0x20017da0
 8008994:	0801ab84 	.word	0x0801ab84
 8008998:	2003d3fc 	.word	0x2003d3fc
		else if(joy_stick.getValue() == JOY_C){
 800899c:	48b2      	ldr	r0, [pc, #712]	; (8008c68 <cppLoop+0x13b0>)
 800899e:	f7f9 fa09 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	bf0c      	ite	eq
 80089a8:	2301      	moveq	r3, #1
 80089aa:	2300      	movne	r3, #0
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f000 86a9 	beq.w	8009706 <cppLoop+0x1e4e>
			led.LR(-1, 1);
 80089b4:	2201      	movs	r2, #1
 80089b6:	f04f 31ff 	mov.w	r1, #4294967295
 80089ba:	48ac      	ldr	r0, [pc, #688]	; (8008c6c <cppLoop+0x13b4>)
 80089bc:	f7f9 fb1a 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80089c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80089c4:	f000 ffd2 	bl	800996c <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 80089c8:	2300      	movs	r3, #0
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	4ba8      	ldr	r3, [pc, #672]	; (8008c70 <cppLoop+0x13b8>)
 80089ce:	2201      	movs	r2, #1
 80089d0:	49a8      	ldr	r1, [pc, #672]	; (8008c74 <cppLoop+0x13bc>)
 80089d2:	48a9      	ldr	r0, [pc, #676]	; (8008c78 <cppLoop+0x13c0>)
 80089d4:	f7f8 fdd2 	bl	800157c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 80089d8:	2300      	movs	r3, #0
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	4ba7      	ldr	r3, [pc, #668]	; (8008c7c <cppLoop+0x13c4>)
 80089de:	2201      	movs	r2, #1
 80089e0:	49a7      	ldr	r1, [pc, #668]	; (8008c80 <cppLoop+0x13c8>)
 80089e2:	48a5      	ldr	r0, [pc, #660]	; (8008c78 <cppLoop+0x13c0>)
 80089e4:	f7f8 fdca 	bl	800157c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80089e8:	4ba1      	ldr	r3, [pc, #644]	; (8008c70 <cppLoop+0x13b8>)
 80089ea:	edd3 7a00 	vldr	s15, [r3]
 80089ee:	eeb0 0a67 	vmov.f32	s0, s15
 80089f2:	48a4      	ldr	r0, [pc, #656]	; (8008c84 <cppLoop+0x13cc>)
 80089f4:	f7fb f858 	bl	8003aa8 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 80089f8:	4ba0      	ldr	r3, [pc, #640]	; (8008c7c <cppLoop+0x13c4>)
 80089fa:	edd3 7a00 	vldr	s15, [r3]
 80089fe:	eeb0 0a67 	vmov.f32	s0, s15
 8008a02:	48a0      	ldr	r0, [pc, #640]	; (8008c84 <cppLoop+0x13cc>)
 8008a04:	f7fb f870 	bl	8003ae8 <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f04f 31ff 	mov.w	r1, #4294967295
 8008a0e:	4897      	ldr	r0, [pc, #604]	; (8008c6c <cppLoop+0x13b4>)
 8008a10:	f7f9 faf0 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008a14:	f000 be77 	b.w	8009706 <cppLoop+0x1e4e>

	case 7:
		led.fullColor('W');
 8008a18:	2157      	movs	r1, #87	; 0x57
 8008a1a:	4894      	ldr	r0, [pc, #592]	; (8008c6c <cppLoop+0x13b4>)
 8008a1c:	f7f9 fa2e 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008a20:	f7f8 fb70 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 8008a24:	2100      	movs	r1, #0
 8008a26:	2000      	movs	r0, #0
 8008a28:	f7f8 fb7c 	bl	8001124 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008a2c:	4895      	ldr	r0, [pc, #596]	; (8008c84 <cppLoop+0x13cc>)
 8008a2e:	f7fb f8ef 	bl	8003c10 <_ZN9LineTrace9getMaxAccEv>
 8008a32:	ee10 3a10 	vmov	r3, s0
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7f7 fd9e 	bl	8000578 <__aeabi_f2d>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	4891      	ldr	r0, [pc, #580]	; (8008c88 <cppLoop+0x13d0>)
 8008a42:	f7f8 fb9a 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 8008a46:	2101      	movs	r1, #1
 8008a48:	2000      	movs	r0, #0
 8008a4a:	f7f8 fb6b 	bl	8001124 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008a4e:	488d      	ldr	r0, [pc, #564]	; (8008c84 <cppLoop+0x13cc>)
 8008a50:	f7fb f914 	bl	8003c7c <_ZN9LineTrace9getMaxDecEv>
 8008a54:	ee10 3a10 	vmov	r3, s0
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7f7 fd8d 	bl	8000578 <__aeabi_f2d>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	488a      	ldr	r0, [pc, #552]	; (8008c8c <cppLoop+0x13d4>)
 8008a64:	f7f8 fb89 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008a68:	487f      	ldr	r0, [pc, #508]	; (8008c68 <cppLoop+0x13b0>)
 8008a6a:	f7f9 f9a3 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b08      	cmp	r3, #8
 8008a72:	bf0c      	ite	eq
 8008a74:	2301      	moveq	r3, #1
 8008a76:	2300      	movne	r3, #0
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d022      	beq.n	8008ac4 <cppLoop+0x120c>
			led.LR(-1, 1);
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f04f 31ff 	mov.w	r1, #4294967295
 8008a84:	4879      	ldr	r0, [pc, #484]	; (8008c6c <cppLoop+0x13b4>)
 8008a86:	f7f9 fab5 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008a8a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008a8e:	f000 ff6d 	bl	800996c <HAL_Delay>

			selector_acc++;
 8008a92:	4b7f      	ldr	r3, [pc, #508]	; (8008c90 <cppLoop+0x13d8>)
 8008a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	b21a      	sxth	r2, r3
 8008aa0:	4b7b      	ldr	r3, [pc, #492]	; (8008c90 <cppLoop+0x13d8>)
 8008aa2:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008aa4:	4b7a      	ldr	r3, [pc, #488]	; (8008c90 <cppLoop+0x13d8>)
 8008aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	dd02      	ble.n	8008ab4 <cppLoop+0x11fc>
 8008aae:	4b78      	ldr	r3, [pc, #480]	; (8008c90 <cppLoop+0x13d8>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f04f 31ff 	mov.w	r1, #4294967295
 8008aba:	486c      	ldr	r0, [pc, #432]	; (8008c6c <cppLoop+0x13b4>)
 8008abc:	f7f9 fa9a 	bl	8001ff4 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008ac0:	f000 be23 	b.w	800970a <cppLoop+0x1e52>
		else if(joy_stick.getValue() == JOY_R){
 8008ac4:	4868      	ldr	r0, [pc, #416]	; (8008c68 <cppLoop+0x13b0>)
 8008ac6:	f7f9 f975 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b10      	cmp	r3, #16
 8008ace:	bf0c      	ite	eq
 8008ad0:	2301      	moveq	r3, #1
 8008ad2:	2300      	movne	r3, #0
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d03c      	beq.n	8008b54 <cppLoop+0x129c>
			led.LR(-1, 1);
 8008ada:	2201      	movs	r2, #1
 8008adc:	f04f 31ff 	mov.w	r1, #4294967295
 8008ae0:	4862      	ldr	r0, [pc, #392]	; (8008c6c <cppLoop+0x13b4>)
 8008ae2:	f7f9 fa87 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008ae6:	2064      	movs	r0, #100	; 0x64
 8008ae8:	f000 ff40 	bl	800996c <HAL_Delay>
			if(selector_acc == 0){
 8008aec:	4b68      	ldr	r3, [pc, #416]	; (8008c90 <cppLoop+0x13d8>)
 8008aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d113      	bne.n	8008b1e <cppLoop+0x1266>
				adj_acc = adj_acc + 0.1;
 8008af6:	4b67      	ldr	r3, [pc, #412]	; (8008c94 <cppLoop+0x13dc>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7f7 fd3c 	bl	8000578 <__aeabi_f2d>
 8008b00:	a357      	add	r3, pc, #348	; (adr r3, 8008c60 <cppLoop+0x13a8>)
 8008b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b06:	f7f7 fbd9 	bl	80002bc <__adddf3>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	4610      	mov	r0, r2
 8008b10:	4619      	mov	r1, r3
 8008b12:	f7f8 f881 	bl	8000c18 <__aeabi_d2f>
 8008b16:	4603      	mov	r3, r0
 8008b18:	4a5e      	ldr	r2, [pc, #376]	; (8008c94 <cppLoop+0x13dc>)
 8008b1a:	6013      	str	r3, [r2, #0]
 8008b1c:	e012      	b.n	8008b44 <cppLoop+0x128c>
				adj_dec = adj_dec + 0.1;
 8008b1e:	4b5e      	ldr	r3, [pc, #376]	; (8008c98 <cppLoop+0x13e0>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7f7 fd28 	bl	8000578 <__aeabi_f2d>
 8008b28:	a34d      	add	r3, pc, #308	; (adr r3, 8008c60 <cppLoop+0x13a8>)
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	f7f7 fbc5 	bl	80002bc <__adddf3>
 8008b32:	4602      	mov	r2, r0
 8008b34:	460b      	mov	r3, r1
 8008b36:	4610      	mov	r0, r2
 8008b38:	4619      	mov	r1, r3
 8008b3a:	f7f8 f86d 	bl	8000c18 <__aeabi_d2f>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	4a55      	ldr	r2, [pc, #340]	; (8008c98 <cppLoop+0x13e0>)
 8008b42:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8008b44:	2200      	movs	r2, #0
 8008b46:	f04f 31ff 	mov.w	r1, #4294967295
 8008b4a:	4848      	ldr	r0, [pc, #288]	; (8008c6c <cppLoop+0x13b4>)
 8008b4c:	f7f9 fa52 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008b50:	f000 bddb 	b.w	800970a <cppLoop+0x1e52>
		else if(joy_stick.getValue() == JOY_L){
 8008b54:	4844      	ldr	r0, [pc, #272]	; (8008c68 <cppLoop+0x13b0>)
 8008b56:	f7f9 f92d 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	bf0c      	ite	eq
 8008b60:	2301      	moveq	r3, #1
 8008b62:	2300      	movne	r3, #0
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d03c      	beq.n	8008be4 <cppLoop+0x132c>
			led.LR(-1, 1);
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8008b70:	483e      	ldr	r0, [pc, #248]	; (8008c6c <cppLoop+0x13b4>)
 8008b72:	f7f9 fa3f 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008b76:	2064      	movs	r0, #100	; 0x64
 8008b78:	f000 fef8 	bl	800996c <HAL_Delay>
			if(selector_acc == 0){
 8008b7c:	4b44      	ldr	r3, [pc, #272]	; (8008c90 <cppLoop+0x13d8>)
 8008b7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d113      	bne.n	8008bae <cppLoop+0x12f6>
				adj_acc = adj_acc - 0.1;
 8008b86:	4b43      	ldr	r3, [pc, #268]	; (8008c94 <cppLoop+0x13dc>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7f7 fcf4 	bl	8000578 <__aeabi_f2d>
 8008b90:	a333      	add	r3, pc, #204	; (adr r3, 8008c60 <cppLoop+0x13a8>)
 8008b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b96:	f7f7 fb8f 	bl	80002b8 <__aeabi_dsub>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	4610      	mov	r0, r2
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	f7f8 f839 	bl	8000c18 <__aeabi_d2f>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	4a3a      	ldr	r2, [pc, #232]	; (8008c94 <cppLoop+0x13dc>)
 8008baa:	6013      	str	r3, [r2, #0]
 8008bac:	e012      	b.n	8008bd4 <cppLoop+0x131c>
				adj_dec = adj_dec - 0.1;
 8008bae:	4b3a      	ldr	r3, [pc, #232]	; (8008c98 <cppLoop+0x13e0>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7f7 fce0 	bl	8000578 <__aeabi_f2d>
 8008bb8:	a329      	add	r3, pc, #164	; (adr r3, 8008c60 <cppLoop+0x13a8>)
 8008bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbe:	f7f7 fb7b 	bl	80002b8 <__aeabi_dsub>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	4619      	mov	r1, r3
 8008bca:	f7f8 f825 	bl	8000c18 <__aeabi_d2f>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	4a31      	ldr	r2, [pc, #196]	; (8008c98 <cppLoop+0x13e0>)
 8008bd2:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f04f 31ff 	mov.w	r1, #4294967295
 8008bda:	4824      	ldr	r0, [pc, #144]	; (8008c6c <cppLoop+0x13b4>)
 8008bdc:	f7f9 fa0a 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008be0:	f000 bd93 	b.w	800970a <cppLoop+0x1e52>
		else if(joy_stick.getValue() == JOY_C){
 8008be4:	4820      	ldr	r0, [pc, #128]	; (8008c68 <cppLoop+0x13b0>)
 8008be6:	f7f9 f8e5 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	bf0c      	ite	eq
 8008bf0:	2301      	moveq	r3, #1
 8008bf2:	2300      	movne	r3, #0
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f000 8587 	beq.w	800970a <cppLoop+0x1e52>
			led.LR(-1, 1);
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f04f 31ff 	mov.w	r1, #4294967295
 8008c02:	481a      	ldr	r0, [pc, #104]	; (8008c6c <cppLoop+0x13b4>)
 8008c04:	f7f9 f9f6 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008c08:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008c0c:	f000 feae 	bl	800996c <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008c10:	2300      	movs	r3, #0
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	4b1f      	ldr	r3, [pc, #124]	; (8008c94 <cppLoop+0x13dc>)
 8008c16:	2201      	movs	r2, #1
 8008c18:	4920      	ldr	r1, [pc, #128]	; (8008c9c <cppLoop+0x13e4>)
 8008c1a:	4817      	ldr	r0, [pc, #92]	; (8008c78 <cppLoop+0x13c0>)
 8008c1c:	f7f8 fcae 	bl	800157c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008c20:	2300      	movs	r3, #0
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	4b1c      	ldr	r3, [pc, #112]	; (8008c98 <cppLoop+0x13e0>)
 8008c26:	2201      	movs	r2, #1
 8008c28:	491d      	ldr	r1, [pc, #116]	; (8008ca0 <cppLoop+0x13e8>)
 8008c2a:	4813      	ldr	r0, [pc, #76]	; (8008c78 <cppLoop+0x13c0>)
 8008c2c:	f7f8 fca6 	bl	800157c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008c30:	4b18      	ldr	r3, [pc, #96]	; (8008c94 <cppLoop+0x13dc>)
 8008c32:	edd3 7a00 	vldr	s15, [r3]
 8008c36:	4b18      	ldr	r3, [pc, #96]	; (8008c98 <cppLoop+0x13e0>)
 8008c38:	ed93 7a00 	vldr	s14, [r3]
 8008c3c:	eef0 0a47 	vmov.f32	s1, s14
 8008c40:	eeb0 0a67 	vmov.f32	s0, s15
 8008c44:	480f      	ldr	r0, [pc, #60]	; (8008c84 <cppLoop+0x13cc>)
 8008c46:	f7fa ffaf 	bl	8003ba8 <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8008c50:	4806      	ldr	r0, [pc, #24]	; (8008c6c <cppLoop+0x13b4>)
 8008c52:	f7f9 f9cf 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008c56:	f000 bd58 	b.w	800970a <cppLoop+0x1e52>
 8008c5a:	bf00      	nop
 8008c5c:	f3af 8000 	nop.w
 8008c60:	9999999a 	.word	0x9999999a
 8008c64:	3fb99999 	.word	0x3fb99999
 8008c68:	200005c0 	.word	0x200005c0
 8008c6c:	200005cc 	.word	0x200005cc
 8008c70:	2003d440 	.word	0x2003d440
 8008c74:	0801abcc 	.word	0x0801abcc
 8008c78:	0801ab54 	.word	0x0801ab54
 8008c7c:	2003d450 	.word	0x2003d450
 8008c80:	0801abd8 	.word	0x0801abd8
 8008c84:	20017da0 	.word	0x20017da0
 8008c88:	0801abe4 	.word	0x0801abe4
 8008c8c:	0801abf0 	.word	0x0801abf0
 8008c90:	2003d3f6 	.word	0x2003d3f6
 8008c94:	2003d458 	.word	0x2003d458
 8008c98:	2003d460 	.word	0x2003d460
 8008c9c:	0801abfc 	.word	0x0801abfc
 8008ca0:	0801ac04 	.word	0x0801ac04

	case 8:
		led.fullColor('W');
 8008ca4:	2157      	movs	r1, #87	; 0x57
 8008ca6:	4892      	ldr	r0, [pc, #584]	; (8008ef0 <cppLoop+0x1638>)
 8008ca8:	f7f9 f8e8 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008cac:	f7f8 fa2a 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	f7f8 fa36 	bl	8001124 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8008cb8:	488e      	ldr	r0, [pc, #568]	; (8008ef4 <cppLoop+0x163c>)
 8008cba:	f7fa ffcd 	bl	8003c58 <_ZN9LineTrace10getMaxAcc2Ev>
 8008cbe:	ee10 3a10 	vmov	r3, s0
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7f7 fc58 	bl	8000578 <__aeabi_f2d>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	488a      	ldr	r0, [pc, #552]	; (8008ef8 <cppLoop+0x1640>)
 8008cce:	f7f8 fa54 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 8008cd2:	2101      	movs	r1, #1
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	f7f8 fa25 	bl	8001124 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8008cda:	4886      	ldr	r0, [pc, #536]	; (8008ef4 <cppLoop+0x163c>)
 8008cdc:	f7fa ffaa 	bl	8003c34 <_ZN9LineTrace10getMaxDec2Ev>
 8008ce0:	ee10 3a10 	vmov	r3, s0
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7f7 fc47 	bl	8000578 <__aeabi_f2d>
 8008cea:	4602      	mov	r2, r0
 8008cec:	460b      	mov	r3, r1
 8008cee:	4883      	ldr	r0, [pc, #524]	; (8008efc <cppLoop+0x1644>)
 8008cf0:	f7f8 fa43 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008cf4:	4882      	ldr	r0, [pc, #520]	; (8008f00 <cppLoop+0x1648>)
 8008cf6:	f7f9 f85d 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b08      	cmp	r3, #8
 8008cfe:	bf0c      	ite	eq
 8008d00:	2301      	moveq	r3, #1
 8008d02:	2300      	movne	r3, #0
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d022      	beq.n	8008d50 <cppLoop+0x1498>
			led.LR(-1, 1);
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8008d10:	4877      	ldr	r0, [pc, #476]	; (8008ef0 <cppLoop+0x1638>)
 8008d12:	f7f9 f96f 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008d16:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008d1a:	f000 fe27 	bl	800996c <HAL_Delay>

			selector_acc2++;
 8008d1e:	4b79      	ldr	r3, [pc, #484]	; (8008f04 <cppLoop+0x164c>)
 8008d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	3301      	adds	r3, #1
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	b21a      	sxth	r2, r3
 8008d2c:	4b75      	ldr	r3, [pc, #468]	; (8008f04 <cppLoop+0x164c>)
 8008d2e:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8008d30:	4b74      	ldr	r3, [pc, #464]	; (8008f04 <cppLoop+0x164c>)
 8008d32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	dd02      	ble.n	8008d40 <cppLoop+0x1488>
 8008d3a:	4b72      	ldr	r3, [pc, #456]	; (8008f04 <cppLoop+0x164c>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008d40:	2200      	movs	r2, #0
 8008d42:	f04f 31ff 	mov.w	r1, #4294967295
 8008d46:	486a      	ldr	r0, [pc, #424]	; (8008ef0 <cppLoop+0x1638>)
 8008d48:	f7f9 f954 	bl	8001ff4 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8008d4c:	f000 bcdf 	b.w	800970e <cppLoop+0x1e56>
		else if(joy_stick.getValue() == JOY_R){
 8008d50:	486b      	ldr	r0, [pc, #428]	; (8008f00 <cppLoop+0x1648>)
 8008d52:	f7f9 f82f 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b10      	cmp	r3, #16
 8008d5a:	bf0c      	ite	eq
 8008d5c:	2301      	moveq	r3, #1
 8008d5e:	2300      	movne	r3, #0
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d03c      	beq.n	8008de0 <cppLoop+0x1528>
			led.LR(-1, 1);
 8008d66:	2201      	movs	r2, #1
 8008d68:	f04f 31ff 	mov.w	r1, #4294967295
 8008d6c:	4860      	ldr	r0, [pc, #384]	; (8008ef0 <cppLoop+0x1638>)
 8008d6e:	f7f9 f941 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008d72:	2064      	movs	r0, #100	; 0x64
 8008d74:	f000 fdfa 	bl	800996c <HAL_Delay>
			if(selector_acc2 == 0){
 8008d78:	4b62      	ldr	r3, [pc, #392]	; (8008f04 <cppLoop+0x164c>)
 8008d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d113      	bne.n	8008daa <cppLoop+0x14f2>
				adj_acc2 = adj_acc2 + 0.1;
 8008d82:	4b61      	ldr	r3, [pc, #388]	; (8008f08 <cppLoop+0x1650>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7f7 fbf6 	bl	8000578 <__aeabi_f2d>
 8008d8c:	a356      	add	r3, pc, #344	; (adr r3, 8008ee8 <cppLoop+0x1630>)
 8008d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d92:	f7f7 fa93 	bl	80002bc <__adddf3>
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	4610      	mov	r0, r2
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	f7f7 ff3b 	bl	8000c18 <__aeabi_d2f>
 8008da2:	4603      	mov	r3, r0
 8008da4:	4a58      	ldr	r2, [pc, #352]	; (8008f08 <cppLoop+0x1650>)
 8008da6:	6013      	str	r3, [r2, #0]
 8008da8:	e012      	b.n	8008dd0 <cppLoop+0x1518>
				adj_dec2 = adj_dec2 + 0.1;
 8008daa:	4b58      	ldr	r3, [pc, #352]	; (8008f0c <cppLoop+0x1654>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7f7 fbe2 	bl	8000578 <__aeabi_f2d>
 8008db4:	a34c      	add	r3, pc, #304	; (adr r3, 8008ee8 <cppLoop+0x1630>)
 8008db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dba:	f7f7 fa7f 	bl	80002bc <__adddf3>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	4610      	mov	r0, r2
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	f7f7 ff27 	bl	8000c18 <__aeabi_d2f>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	4a4f      	ldr	r2, [pc, #316]	; (8008f0c <cppLoop+0x1654>)
 8008dce:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f04f 31ff 	mov.w	r1, #4294967295
 8008dd6:	4846      	ldr	r0, [pc, #280]	; (8008ef0 <cppLoop+0x1638>)
 8008dd8:	f7f9 f90c 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008ddc:	f000 bc97 	b.w	800970e <cppLoop+0x1e56>
		else if(joy_stick.getValue() == JOY_L){
 8008de0:	4847      	ldr	r0, [pc, #284]	; (8008f00 <cppLoop+0x1648>)
 8008de2:	f7f8 ffe7 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	bf0c      	ite	eq
 8008dec:	2301      	moveq	r3, #1
 8008dee:	2300      	movne	r3, #0
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d03c      	beq.n	8008e70 <cppLoop+0x15b8>
			led.LR(-1, 1);
 8008df6:	2201      	movs	r2, #1
 8008df8:	f04f 31ff 	mov.w	r1, #4294967295
 8008dfc:	483c      	ldr	r0, [pc, #240]	; (8008ef0 <cppLoop+0x1638>)
 8008dfe:	f7f9 f8f9 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008e02:	2064      	movs	r0, #100	; 0x64
 8008e04:	f000 fdb2 	bl	800996c <HAL_Delay>
			if(selector_acc2 == 0){
 8008e08:	4b3e      	ldr	r3, [pc, #248]	; (8008f04 <cppLoop+0x164c>)
 8008e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d113      	bne.n	8008e3a <cppLoop+0x1582>
				adj_acc2 = adj_acc2 - 0.1;
 8008e12:	4b3d      	ldr	r3, [pc, #244]	; (8008f08 <cppLoop+0x1650>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7f7 fbae 	bl	8000578 <__aeabi_f2d>
 8008e1c:	a332      	add	r3, pc, #200	; (adr r3, 8008ee8 <cppLoop+0x1630>)
 8008e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e22:	f7f7 fa49 	bl	80002b8 <__aeabi_dsub>
 8008e26:	4602      	mov	r2, r0
 8008e28:	460b      	mov	r3, r1
 8008e2a:	4610      	mov	r0, r2
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	f7f7 fef3 	bl	8000c18 <__aeabi_d2f>
 8008e32:	4603      	mov	r3, r0
 8008e34:	4a34      	ldr	r2, [pc, #208]	; (8008f08 <cppLoop+0x1650>)
 8008e36:	6013      	str	r3, [r2, #0]
 8008e38:	e012      	b.n	8008e60 <cppLoop+0x15a8>
				adj_dec2 = adj_dec2 - 0.1;
 8008e3a:	4b34      	ldr	r3, [pc, #208]	; (8008f0c <cppLoop+0x1654>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7f7 fb9a 	bl	8000578 <__aeabi_f2d>
 8008e44:	a328      	add	r3, pc, #160	; (adr r3, 8008ee8 <cppLoop+0x1630>)
 8008e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4a:	f7f7 fa35 	bl	80002b8 <__aeabi_dsub>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	460b      	mov	r3, r1
 8008e52:	4610      	mov	r0, r2
 8008e54:	4619      	mov	r1, r3
 8008e56:	f7f7 fedf 	bl	8000c18 <__aeabi_d2f>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	4a2b      	ldr	r2, [pc, #172]	; (8008f0c <cppLoop+0x1654>)
 8008e5e:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8008e60:	2200      	movs	r2, #0
 8008e62:	f04f 31ff 	mov.w	r1, #4294967295
 8008e66:	4822      	ldr	r0, [pc, #136]	; (8008ef0 <cppLoop+0x1638>)
 8008e68:	f7f9 f8c4 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008e6c:	f000 bc4f 	b.w	800970e <cppLoop+0x1e56>
		else if(joy_stick.getValue() == JOY_C){
 8008e70:	4823      	ldr	r0, [pc, #140]	; (8008f00 <cppLoop+0x1648>)
 8008e72:	f7f8 ff9f 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	bf0c      	ite	eq
 8008e7c:	2301      	moveq	r3, #1
 8008e7e:	2300      	movne	r3, #0
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f000 8443 	beq.w	800970e <cppLoop+0x1e56>
			led.LR(-1, 1);
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f04f 31ff 	mov.w	r1, #4294967295
 8008e8e:	4818      	ldr	r0, [pc, #96]	; (8008ef0 <cppLoop+0x1638>)
 8008e90:	f7f9 f8b0 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008e94:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008e98:	f000 fd68 	bl	800996c <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	9300      	str	r3, [sp, #0]
 8008ea0:	4b19      	ldr	r3, [pc, #100]	; (8008f08 <cppLoop+0x1650>)
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	491a      	ldr	r1, [pc, #104]	; (8008f10 <cppLoop+0x1658>)
 8008ea6:	481b      	ldr	r0, [pc, #108]	; (8008f14 <cppLoop+0x165c>)
 8008ea8:	f7f8 fb68 	bl	800157c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 8008eac:	2300      	movs	r3, #0
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	4b16      	ldr	r3, [pc, #88]	; (8008f0c <cppLoop+0x1654>)
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	4918      	ldr	r1, [pc, #96]	; (8008f18 <cppLoop+0x1660>)
 8008eb6:	4817      	ldr	r0, [pc, #92]	; (8008f14 <cppLoop+0x165c>)
 8008eb8:	f7f8 fb60 	bl	800157c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 8008ebc:	4b12      	ldr	r3, [pc, #72]	; (8008f08 <cppLoop+0x1650>)
 8008ebe:	edd3 7a00 	vldr	s15, [r3]
 8008ec2:	4b12      	ldr	r3, [pc, #72]	; (8008f0c <cppLoop+0x1654>)
 8008ec4:	ed93 7a00 	vldr	s14, [r3]
 8008ec8:	eef0 0a47 	vmov.f32	s1, s14
 8008ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8008ed0:	4808      	ldr	r0, [pc, #32]	; (8008ef4 <cppLoop+0x163c>)
 8008ed2:	f7fa fe83 	bl	8003bdc <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8008edc:	4804      	ldr	r0, [pc, #16]	; (8008ef0 <cppLoop+0x1638>)
 8008ede:	f7f9 f889 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 8008ee2:	f000 bc14 	b.w	800970e <cppLoop+0x1e56>
 8008ee6:	bf00      	nop
 8008ee8:	9999999a 	.word	0x9999999a
 8008eec:	3fb99999 	.word	0x3fb99999
 8008ef0:	200005cc 	.word	0x200005cc
 8008ef4:	20017da0 	.word	0x20017da0
 8008ef8:	0801ac0c 	.word	0x0801ac0c
 8008efc:	0801ac18 	.word	0x0801ac18
 8008f00:	200005c0 	.word	0x200005c0
 8008f04:	2003d3f8 	.word	0x2003d3f8
 8008f08:	2003d468 	.word	0x2003d468
 8008f0c:	2003d470 	.word	0x2003d470
 8008f10:	0801ac24 	.word	0x0801ac24
 8008f14:	0801ab54 	.word	0x0801ab54
 8008f18:	0801ac30 	.word	0x0801ac30

	case 9:
		led.fullColor('W');
 8008f1c:	2157      	movs	r1, #87	; 0x57
 8008f1e:	48b0      	ldr	r0, [pc, #704]	; (80091e0 <cppLoop+0x1928>)
 8008f20:	f7f8 ffac 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008f24:	f7f8 f8ee 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 8008f28:	2100      	movs	r1, #0
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	f7f8 f8fa 	bl	8001124 <lcd_locate>
		lcd_printf("F%4.2lf   ", line_trace.getKpFast()*1000);
 8008f30:	48ac      	ldr	r0, [pc, #688]	; (80091e4 <cppLoop+0x192c>)
 8008f32:	f7fa fd6c 	bl	8003a0e <_ZN9LineTrace9getKpFastEv>
 8008f36:	eef0 7a40 	vmov.f32	s15, s0
 8008f3a:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80091e8 <cppLoop+0x1930>
 8008f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f42:	ee17 0a90 	vmov	r0, s15
 8008f46:	f7f7 fb17 	bl	8000578 <__aeabi_f2d>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	48a7      	ldr	r0, [pc, #668]	; (80091ec <cppLoop+0x1934>)
 8008f50:	f7f8 f913 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 8008f54:	2101      	movs	r1, #1
 8008f56:	2000      	movs	r0, #0
 8008f58:	f7f8 f8e4 	bl	8001124 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKiFast()*100, line_trace.getKdFast()*10000);
 8008f5c:	48a1      	ldr	r0, [pc, #644]	; (80091e4 <cppLoop+0x192c>)
 8008f5e:	f7fa fd65 	bl	8003a2c <_ZN9LineTrace9getKiFastEv>
 8008f62:	eef0 7a40 	vmov.f32	s15, s0
 8008f66:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 80091f0 <cppLoop+0x1938>
 8008f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f6e:	ee17 0a90 	vmov	r0, s15
 8008f72:	f7f7 fb01 	bl	8000578 <__aeabi_f2d>
 8008f76:	4604      	mov	r4, r0
 8008f78:	460d      	mov	r5, r1
 8008f7a:	489a      	ldr	r0, [pc, #616]	; (80091e4 <cppLoop+0x192c>)
 8008f7c:	f7fa fd65 	bl	8003a4a <_ZN9LineTrace9getKdFastEv>
 8008f80:	eef0 7a40 	vmov.f32	s15, s0
 8008f84:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80091f4 <cppLoop+0x193c>
 8008f88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f8c:	ee17 0a90 	vmov	r0, s15
 8008f90:	f7f7 faf2 	bl	8000578 <__aeabi_f2d>
 8008f94:	4602      	mov	r2, r0
 8008f96:	460b      	mov	r3, r1
 8008f98:	e9cd 2300 	strd	r2, r3, [sp]
 8008f9c:	4622      	mov	r2, r4
 8008f9e:	462b      	mov	r3, r5
 8008fa0:	4895      	ldr	r0, [pc, #596]	; (80091f8 <cppLoop+0x1940>)
 8008fa2:	f7f8 f8ea 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008fa6:	4895      	ldr	r0, [pc, #596]	; (80091fc <cppLoop+0x1944>)
 8008fa8:	f7f8 ff04 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b08      	cmp	r3, #8
 8008fb0:	bf0c      	ite	eq
 8008fb2:	2301      	moveq	r3, #1
 8008fb4:	2300      	movne	r3, #0
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d021      	beq.n	8009000 <cppLoop+0x1748>
			led.LR(-1, 1);
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f04f 31ff 	mov.w	r1, #4294967295
 8008fc2:	4887      	ldr	r0, [pc, #540]	; (80091e0 <cppLoop+0x1928>)
 8008fc4:	f7f9 f816 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008fc8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008fcc:	f000 fcce 	bl	800996c <HAL_Delay>

			selector_fast++;
 8008fd0:	4b8b      	ldr	r3, [pc, #556]	; (8009200 <cppLoop+0x1948>)
 8008fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	3301      	adds	r3, #1
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	b21a      	sxth	r2, r3
 8008fde:	4b88      	ldr	r3, [pc, #544]	; (8009200 <cppLoop+0x1948>)
 8008fe0:	801a      	strh	r2, [r3, #0]
			if(selector_fast >= 3) selector_fast = 0;
 8008fe2:	4b87      	ldr	r3, [pc, #540]	; (8009200 <cppLoop+0x1948>)
 8008fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	dd02      	ble.n	8008ff2 <cppLoop+0x173a>
 8008fec:	4b84      	ldr	r3, [pc, #528]	; (8009200 <cppLoop+0x1948>)
 8008fee:	2200      	movs	r2, #0
 8008ff0:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8008ff8:	4879      	ldr	r0, [pc, #484]	; (80091e0 <cppLoop+0x1928>)
 8008ffa:	f7f8 fffb 	bl	8001ff4 <_ZN3LED2LREaa>
			user_fclose();

			led.LR(-1, 0);
		}
		*/
		break;
 8008ffe:	e388      	b.n	8009712 <cppLoop+0x1e5a>
		else if(joy_stick.getValue() == JOY_R){
 8009000:	487e      	ldr	r0, [pc, #504]	; (80091fc <cppLoop+0x1944>)
 8009002:	f7f8 fed7 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8009006:	4603      	mov	r3, r0
 8009008:	2b10      	cmp	r3, #16
 800900a:	bf0c      	ite	eq
 800900c:	2301      	moveq	r3, #1
 800900e:	2300      	movne	r3, #0
 8009010:	b2db      	uxtb	r3, r3
 8009012:	2b00      	cmp	r3, #0
 8009014:	d058      	beq.n	80090c8 <cppLoop+0x1810>
			led.LR(-1, 1);
 8009016:	2201      	movs	r2, #1
 8009018:	f04f 31ff 	mov.w	r1, #4294967295
 800901c:	4870      	ldr	r0, [pc, #448]	; (80091e0 <cppLoop+0x1928>)
 800901e:	f7f8 ffe9 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009022:	2064      	movs	r0, #100	; 0x64
 8009024:	f000 fca2 	bl	800996c <HAL_Delay>
			if(selector_fast == 0){
 8009028:	4b75      	ldr	r3, [pc, #468]	; (8009200 <cppLoop+0x1948>)
 800902a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d113      	bne.n	800905a <cppLoop+0x17a2>
				adj_kp_fast = adj_kp_fast + 0.00001;
 8009032:	4b74      	ldr	r3, [pc, #464]	; (8009204 <cppLoop+0x194c>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4618      	mov	r0, r3
 8009038:	f7f7 fa9e 	bl	8000578 <__aeabi_f2d>
 800903c:	a362      	add	r3, pc, #392	; (adr r3, 80091c8 <cppLoop+0x1910>)
 800903e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009042:	f7f7 f93b 	bl	80002bc <__adddf3>
 8009046:	4602      	mov	r2, r0
 8009048:	460b      	mov	r3, r1
 800904a:	4610      	mov	r0, r2
 800904c:	4619      	mov	r1, r3
 800904e:	f7f7 fde3 	bl	8000c18 <__aeabi_d2f>
 8009052:	4603      	mov	r3, r0
 8009054:	4a6b      	ldr	r2, [pc, #428]	; (8009204 <cppLoop+0x194c>)
 8009056:	6013      	str	r3, [r2, #0]
 8009058:	e02b      	b.n	80090b2 <cppLoop+0x17fa>
			else if(selector_fast == 1){
 800905a:	4b69      	ldr	r3, [pc, #420]	; (8009200 <cppLoop+0x1948>)
 800905c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009060:	2b01      	cmp	r3, #1
 8009062:	d113      	bne.n	800908c <cppLoop+0x17d4>
				adj_ki_fast = adj_ki_fast + 0.0001;
 8009064:	4b68      	ldr	r3, [pc, #416]	; (8009208 <cppLoop+0x1950>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4618      	mov	r0, r3
 800906a:	f7f7 fa85 	bl	8000578 <__aeabi_f2d>
 800906e:	a358      	add	r3, pc, #352	; (adr r3, 80091d0 <cppLoop+0x1918>)
 8009070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009074:	f7f7 f922 	bl	80002bc <__adddf3>
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	4610      	mov	r0, r2
 800907e:	4619      	mov	r1, r3
 8009080:	f7f7 fdca 	bl	8000c18 <__aeabi_d2f>
 8009084:	4603      	mov	r3, r0
 8009086:	4a60      	ldr	r2, [pc, #384]	; (8009208 <cppLoop+0x1950>)
 8009088:	6013      	str	r3, [r2, #0]
 800908a:	e012      	b.n	80090b2 <cppLoop+0x17fa>
				adj_kd_fast = adj_kd_fast + 0.000001;
 800908c:	4b5f      	ldr	r3, [pc, #380]	; (800920c <cppLoop+0x1954>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4618      	mov	r0, r3
 8009092:	f7f7 fa71 	bl	8000578 <__aeabi_f2d>
 8009096:	a350      	add	r3, pc, #320	; (adr r3, 80091d8 <cppLoop+0x1920>)
 8009098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909c:	f7f7 f90e 	bl	80002bc <__adddf3>
 80090a0:	4602      	mov	r2, r0
 80090a2:	460b      	mov	r3, r1
 80090a4:	4610      	mov	r0, r2
 80090a6:	4619      	mov	r1, r3
 80090a8:	f7f7 fdb6 	bl	8000c18 <__aeabi_d2f>
 80090ac:	4603      	mov	r3, r0
 80090ae:	4a57      	ldr	r2, [pc, #348]	; (800920c <cppLoop+0x1954>)
 80090b0:	6013      	str	r3, [r2, #0]
			led.fullColor('R');
 80090b2:	2152      	movs	r1, #82	; 0x52
 80090b4:	484a      	ldr	r0, [pc, #296]	; (80091e0 <cppLoop+0x1928>)
 80090b6:	f7f8 fee1 	bl	8001e7c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80090ba:	2200      	movs	r2, #0
 80090bc:	f04f 31ff 	mov.w	r1, #4294967295
 80090c0:	4847      	ldr	r0, [pc, #284]	; (80091e0 <cppLoop+0x1928>)
 80090c2:	f7f8 ff97 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 80090c6:	e324      	b.n	8009712 <cppLoop+0x1e5a>
		else if(joy_stick.getValue() == JOY_L){
 80090c8:	484c      	ldr	r0, [pc, #304]	; (80091fc <cppLoop+0x1944>)
 80090ca:	f7f8 fe73 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	bf0c      	ite	eq
 80090d4:	2301      	moveq	r3, #1
 80090d6:	2300      	movne	r3, #0
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d058      	beq.n	8009190 <cppLoop+0x18d8>
			led.LR(-1, 1);
 80090de:	2201      	movs	r2, #1
 80090e0:	f04f 31ff 	mov.w	r1, #4294967295
 80090e4:	483e      	ldr	r0, [pc, #248]	; (80091e0 <cppLoop+0x1928>)
 80090e6:	f7f8 ff85 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80090ea:	2064      	movs	r0, #100	; 0x64
 80090ec:	f000 fc3e 	bl	800996c <HAL_Delay>
			if(selector_fast == 0){
 80090f0:	4b43      	ldr	r3, [pc, #268]	; (8009200 <cppLoop+0x1948>)
 80090f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d113      	bne.n	8009122 <cppLoop+0x186a>
				adj_kp_fast = adj_kp_fast - 0.00001;
 80090fa:	4b42      	ldr	r3, [pc, #264]	; (8009204 <cppLoop+0x194c>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4618      	mov	r0, r3
 8009100:	f7f7 fa3a 	bl	8000578 <__aeabi_f2d>
 8009104:	a330      	add	r3, pc, #192	; (adr r3, 80091c8 <cppLoop+0x1910>)
 8009106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910a:	f7f7 f8d5 	bl	80002b8 <__aeabi_dsub>
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	4610      	mov	r0, r2
 8009114:	4619      	mov	r1, r3
 8009116:	f7f7 fd7f 	bl	8000c18 <__aeabi_d2f>
 800911a:	4603      	mov	r3, r0
 800911c:	4a39      	ldr	r2, [pc, #228]	; (8009204 <cppLoop+0x194c>)
 800911e:	6013      	str	r3, [r2, #0]
 8009120:	e02b      	b.n	800917a <cppLoop+0x18c2>
			else if(selector_fast == 1){
 8009122:	4b37      	ldr	r3, [pc, #220]	; (8009200 <cppLoop+0x1948>)
 8009124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d113      	bne.n	8009154 <cppLoop+0x189c>
				adj_ki_fast = adj_ki_fast - 0.0001;
 800912c:	4b36      	ldr	r3, [pc, #216]	; (8009208 <cppLoop+0x1950>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4618      	mov	r0, r3
 8009132:	f7f7 fa21 	bl	8000578 <__aeabi_f2d>
 8009136:	a326      	add	r3, pc, #152	; (adr r3, 80091d0 <cppLoop+0x1918>)
 8009138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913c:	f7f7 f8bc 	bl	80002b8 <__aeabi_dsub>
 8009140:	4602      	mov	r2, r0
 8009142:	460b      	mov	r3, r1
 8009144:	4610      	mov	r0, r2
 8009146:	4619      	mov	r1, r3
 8009148:	f7f7 fd66 	bl	8000c18 <__aeabi_d2f>
 800914c:	4603      	mov	r3, r0
 800914e:	4a2e      	ldr	r2, [pc, #184]	; (8009208 <cppLoop+0x1950>)
 8009150:	6013      	str	r3, [r2, #0]
 8009152:	e012      	b.n	800917a <cppLoop+0x18c2>
				adj_kd_fast = adj_kd_fast - 0.000001;
 8009154:	4b2d      	ldr	r3, [pc, #180]	; (800920c <cppLoop+0x1954>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4618      	mov	r0, r3
 800915a:	f7f7 fa0d 	bl	8000578 <__aeabi_f2d>
 800915e:	a31e      	add	r3, pc, #120	; (adr r3, 80091d8 <cppLoop+0x1920>)
 8009160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009164:	f7f7 f8a8 	bl	80002b8 <__aeabi_dsub>
 8009168:	4602      	mov	r2, r0
 800916a:	460b      	mov	r3, r1
 800916c:	4610      	mov	r0, r2
 800916e:	4619      	mov	r1, r3
 8009170:	f7f7 fd52 	bl	8000c18 <__aeabi_d2f>
 8009174:	4603      	mov	r3, r0
 8009176:	4a25      	ldr	r2, [pc, #148]	; (800920c <cppLoop+0x1954>)
 8009178:	6013      	str	r3, [r2, #0]
			led.fullColor('R');
 800917a:	2152      	movs	r1, #82	; 0x52
 800917c:	4818      	ldr	r0, [pc, #96]	; (80091e0 <cppLoop+0x1928>)
 800917e:	f7f8 fe7d 	bl	8001e7c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009182:	2200      	movs	r2, #0
 8009184:	f04f 31ff 	mov.w	r1, #4294967295
 8009188:	4815      	ldr	r0, [pc, #84]	; (80091e0 <cppLoop+0x1928>)
 800918a:	f7f8 ff33 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 800918e:	e2c0      	b.n	8009712 <cppLoop+0x1e5a>
		else if(joy_stick.getValue() == JOY_D){
 8009190:	481a      	ldr	r0, [pc, #104]	; (80091fc <cppLoop+0x1944>)
 8009192:	f7f8 fe0f 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8009196:	4603      	mov	r3, r0
 8009198:	2b04      	cmp	r3, #4
 800919a:	bf0c      	ite	eq
 800919c:	2301      	moveq	r3, #1
 800919e:	2300      	movne	r3, #0
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d034      	beq.n	8009210 <cppLoop+0x1958>
			led.LR(-1, 1);
 80091a6:	2201      	movs	r2, #1
 80091a8:	f04f 31ff 	mov.w	r1, #4294967295
 80091ac:	480c      	ldr	r0, [pc, #48]	; (80091e0 <cppLoop+0x1928>)
 80091ae:	f7f8 ff21 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80091b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80091b6:	f000 fbd9 	bl	800996c <HAL_Delay>
			led.LR(-1, 0);
 80091ba:	2200      	movs	r2, #0
 80091bc:	f04f 31ff 	mov.w	r1, #4294967295
 80091c0:	4807      	ldr	r0, [pc, #28]	; (80091e0 <cppLoop+0x1928>)
 80091c2:	f7f8 ff17 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 80091c6:	e2a4      	b.n	8009712 <cppLoop+0x1e5a>
 80091c8:	88e368f1 	.word	0x88e368f1
 80091cc:	3ee4f8b5 	.word	0x3ee4f8b5
 80091d0:	eb1c432d 	.word	0xeb1c432d
 80091d4:	3f1a36e2 	.word	0x3f1a36e2
 80091d8:	a0b5ed8d 	.word	0xa0b5ed8d
 80091dc:	3eb0c6f7 	.word	0x3eb0c6f7
 80091e0:	200005cc 	.word	0x200005cc
 80091e4:	20017da0 	.word	0x20017da0
 80091e8:	447a0000 	.word	0x447a0000
 80091ec:	0801ac3c 	.word	0x0801ac3c
 80091f0:	42c80000 	.word	0x42c80000
 80091f4:	461c4000 	.word	0x461c4000
 80091f8:	0801ab3c 	.word	0x0801ab3c
 80091fc:	200005c0 	.word	0x200005c0
 8009200:	2003d3fe 	.word	0x2003d3fe
 8009204:	2003d418 	.word	0x2003d418
 8009208:	2003d420 	.word	0x2003d420
 800920c:	2003d428 	.word	0x2003d428
		else if(joy_stick.getValue() == JOY_C){
 8009210:	48c1      	ldr	r0, [pc, #772]	; (8009518 <cppLoop+0x1c60>)
 8009212:	f7f8 fdcf 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8009216:	4603      	mov	r3, r0
 8009218:	2b02      	cmp	r3, #2
 800921a:	bf0c      	ite	eq
 800921c:	2301      	moveq	r3, #1
 800921e:	2300      	movne	r3, #0
 8009220:	b2db      	uxtb	r3, r3
 8009222:	2b00      	cmp	r3, #0
 8009224:	f000 8275 	beq.w	8009712 <cppLoop+0x1e5a>
			led.LR(-1, 1);
 8009228:	2201      	movs	r2, #1
 800922a:	f04f 31ff 	mov.w	r1, #4294967295
 800922e:	48bb      	ldr	r0, [pc, #748]	; (800951c <cppLoop+0x1c64>)
 8009230:	f7f8 fee0 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009234:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009238:	f000 fb98 	bl	800996c <HAL_Delay>
			sd_write_array_float("PARAMS", "KPFAST.TXT", 1, &adj_kp_fast, OVER_WRITE);
 800923c:	2300      	movs	r3, #0
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	4bb7      	ldr	r3, [pc, #732]	; (8009520 <cppLoop+0x1c68>)
 8009242:	2201      	movs	r2, #1
 8009244:	49b7      	ldr	r1, [pc, #732]	; (8009524 <cppLoop+0x1c6c>)
 8009246:	48b8      	ldr	r0, [pc, #736]	; (8009528 <cppLoop+0x1c70>)
 8009248:	f7f8 f998 	bl	800157c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KIFAST.TXT", 1, &adj_ki_fast, OVER_WRITE);
 800924c:	2300      	movs	r3, #0
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	4bb6      	ldr	r3, [pc, #728]	; (800952c <cppLoop+0x1c74>)
 8009252:	2201      	movs	r2, #1
 8009254:	49b6      	ldr	r1, [pc, #728]	; (8009530 <cppLoop+0x1c78>)
 8009256:	48b4      	ldr	r0, [pc, #720]	; (8009528 <cppLoop+0x1c70>)
 8009258:	f7f8 f990 	bl	800157c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KDFAST.TXT", 1, &adj_kd_fast, OVER_WRITE);
 800925c:	2300      	movs	r3, #0
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	4bb4      	ldr	r3, [pc, #720]	; (8009534 <cppLoop+0x1c7c>)
 8009262:	2201      	movs	r2, #1
 8009264:	49b4      	ldr	r1, [pc, #720]	; (8009538 <cppLoop+0x1c80>)
 8009266:	48b0      	ldr	r0, [pc, #704]	; (8009528 <cppLoop+0x1c70>)
 8009268:	f7f8 f988 	bl	800157c <sd_write_array_float>
			line_trace.setGainFast(adj_kp_fast, adj_ki_fast, adj_kd_fast);
 800926c:	4bac      	ldr	r3, [pc, #688]	; (8009520 <cppLoop+0x1c68>)
 800926e:	edd3 7a00 	vldr	s15, [r3]
 8009272:	4bae      	ldr	r3, [pc, #696]	; (800952c <cppLoop+0x1c74>)
 8009274:	ed93 7a00 	vldr	s14, [r3]
 8009278:	4bae      	ldr	r3, [pc, #696]	; (8009534 <cppLoop+0x1c7c>)
 800927a:	edd3 6a00 	vldr	s13, [r3]
 800927e:	eeb0 1a66 	vmov.f32	s2, s13
 8009282:	eef0 0a47 	vmov.f32	s1, s14
 8009286:	eeb0 0a67 	vmov.f32	s0, s15
 800928a:	48ac      	ldr	r0, [pc, #688]	; (800953c <cppLoop+0x1c84>)
 800928c:	f7fa fb79 	bl	8003982 <_ZN9LineTrace11setGainFastEfff>
			led.LR(-1, 0);
 8009290:	2200      	movs	r2, #0
 8009292:	f04f 31ff 	mov.w	r1, #4294967295
 8009296:	48a1      	ldr	r0, [pc, #644]	; (800951c <cppLoop+0x1c64>)
 8009298:	f7f8 feac 	bl	8001ff4 <_ZN3LED2LREaa>
		break;
 800929c:	e239      	b.n	8009712 <cppLoop+0x1e5a>

	case 10:
		led.fullColor('~');
 800929e:	217e      	movs	r1, #126	; 0x7e
 80092a0:	489e      	ldr	r0, [pc, #632]	; (800951c <cppLoop+0x1c64>)
 80092a2:	f7f8 fdeb 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 80092a6:	f7f7 ff2d 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 80092aa:	2100      	movs	r1, #0
 80092ac:	2000      	movs	r0, #0
 80092ae:	f7f7 ff39 	bl	8001124 <lcd_locate>
		lcd_printf("Create  ");
 80092b2:	48a3      	ldr	r0, [pc, #652]	; (8009540 <cppLoop+0x1c88>)
 80092b4:	f7f7 ff61 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 80092b8:	2101      	movs	r1, #1
 80092ba:	2000      	movs	r0, #0
 80092bc:	f7f7 ff32 	bl	8001124 <lcd_locate>
		lcd_printf("VelTable");
 80092c0:	48a0      	ldr	r0, [pc, #640]	; (8009544 <cppLoop+0x1c8c>)
 80092c2:	f7f7 ff5a 	bl	800117a <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 80092c6:	4894      	ldr	r0, [pc, #592]	; (8009518 <cppLoop+0x1c60>)
 80092c8:	f7f8 fd74 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	bf0c      	ite	eq
 80092d2:	2301      	moveq	r3, #1
 80092d4:	2300      	movne	r3, #0
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 821c 	beq.w	8009716 <cppLoop+0x1e5e>
			HAL_Delay(500);
 80092de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80092e2:	f000 fb43 	bl	800996c <HAL_Delay>
			led.LR(-1, 1);
 80092e6:	2201      	movs	r2, #1
 80092e8:	f04f 31ff 	mov.w	r1, #4294967295
 80092ec:	488b      	ldr	r0, [pc, #556]	; (800951c <cppLoop+0x1c64>)
 80092ee:	f7f8 fe81 	bl	8001ff4 <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 80092f2:	2102      	movs	r1, #2
 80092f4:	4891      	ldr	r0, [pc, #580]	; (800953c <cppLoop+0x1c84>)
 80092f6:	f7fa ffd3 	bl	80042a0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 80092fa:	4b93      	ldr	r3, [pc, #588]	; (8009548 <cppLoop+0x1c90>)
 80092fc:	edd3 7a00 	vldr	s15, [r3]
 8009300:	eeb0 0a67 	vmov.f32	s0, s15
 8009304:	488d      	ldr	r0, [pc, #564]	; (800953c <cppLoop+0x1c84>)
 8009306:	f7fa fbaf 	bl	8003a68 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800930a:	4b8f      	ldr	r3, [pc, #572]	; (8009548 <cppLoop+0x1c90>)
 800930c:	edd3 7a00 	vldr	s15, [r3]
 8009310:	eeb0 0a67 	vmov.f32	s0, s15
 8009314:	4889      	ldr	r0, [pc, #548]	; (800953c <cppLoop+0x1c84>)
 8009316:	f7fa fbb7 	bl	8003a88 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800931a:	4b8b      	ldr	r3, [pc, #556]	; (8009548 <cppLoop+0x1c90>)
 800931c:	edd3 7a00 	vldr	s15, [r3]
 8009320:	eeb0 0a67 	vmov.f32	s0, s15
 8009324:	4885      	ldr	r0, [pc, #532]	; (800953c <cppLoop+0x1c84>)
 8009326:	f7fa fbcf 	bl	8003ac8 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800932a:	4884      	ldr	r0, [pc, #528]	; (800953c <cppLoop+0x1c84>)
 800932c:	f7f9 fedc 	bl	80030e8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 8009330:	2200      	movs	r2, #0
 8009332:	f04f 31ff 	mov.w	r1, #4294967295
 8009336:	4879      	ldr	r0, [pc, #484]	; (800951c <cppLoop+0x1c64>)
 8009338:	f7f8 fe5c 	bl	8001ff4 <_ZN3LED2LREaa>
		}

		break;
 800933c:	e1eb      	b.n	8009716 <cppLoop+0x1e5e>

	case 11:
		led.fullColor('~');
 800933e:	217e      	movs	r1, #126	; 0x7e
 8009340:	4876      	ldr	r0, [pc, #472]	; (800951c <cppLoop+0x1c64>)
 8009342:	f7f8 fd9b 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 8009346:	f7f7 fedd 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 800934a:	2100      	movs	r1, #0
 800934c:	2000      	movs	r0, #0
 800934e:	f7f7 fee9 	bl	8001124 <lcd_locate>
		lcd_printf("Step");
 8009352:	487e      	ldr	r0, [pc, #504]	; (800954c <cppLoop+0x1c94>)
 8009354:	f7f7 ff11 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 8009358:	2101      	movs	r1, #1
 800935a:	2000      	movs	r0, #0
 800935c:	f7f7 fee2 	bl	8001124 <lcd_locate>
		lcd_printf("Record");
 8009360:	487b      	ldr	r0, [pc, #492]	; (8009550 <cppLoop+0x1c98>)
 8009362:	f7f7 ff0a 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009366:	486c      	ldr	r0, [pc, #432]	; (8009518 <cppLoop+0x1c60>)
 8009368:	f7f8 fd24 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 800936c:	4603      	mov	r3, r0
 800936e:	2b02      	cmp	r3, #2
 8009370:	bf0c      	ite	eq
 8009372:	2301      	moveq	r3, #1
 8009374:	2300      	movne	r3, #0
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2b00      	cmp	r3, #0
 800937a:	f000 81ce 	beq.w	800971a <cppLoop+0x1e62>
			HAL_Delay(1500);
 800937e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8009382:	f000 faf3 	bl	800996c <HAL_Delay>
			led.LR(-1, 1);
 8009386:	2201      	movs	r2, #1
 8009388:	f04f 31ff 	mov.w	r1, #4294967295
 800938c:	4863      	ldr	r0, [pc, #396]	; (800951c <cppLoop+0x1c64>)
 800938e:	f7f8 fe31 	bl	8001ff4 <_ZN3LED2LREaa>

			logger.start();
 8009392:	4870      	ldr	r0, [pc, #448]	; (8009554 <cppLoop+0x1c9c>)
 8009394:	f7fb fb6b 	bl	8004a6e <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 8009398:	ed9f 1b59 	vldr	d1, [pc, #356]	; 8009500 <cppLoop+0x1c48>
 800939c:	ed9f 0b5a 	vldr	d0, [pc, #360]	; 8009508 <cppLoop+0x1c50>
 80093a0:	486d      	ldr	r0, [pc, #436]	; (8009558 <cppLoop+0x1ca0>)
 80093a2:	f7fb fbf5 	bl	8004b90 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 80093a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80093aa:	f000 fadf 	bl	800996c <HAL_Delay>

			logger.stop();
 80093ae:	4869      	ldr	r0, [pc, #420]	; (8009554 <cppLoop+0x1c9c>)
 80093b0:	f7fb fb6e 	bl	8004a90 <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 80093b4:	ed9f 1b56 	vldr	d1, [pc, #344]	; 8009510 <cppLoop+0x1c58>
 80093b8:	ed9f 0b55 	vldr	d0, [pc, #340]	; 8009510 <cppLoop+0x1c58>
 80093bc:	4866      	ldr	r0, [pc, #408]	; (8009558 <cppLoop+0x1ca0>)
 80093be:	f7fb fbe7 	bl	8004b90 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 80093c2:	4a66      	ldr	r2, [pc, #408]	; (800955c <cppLoop+0x1ca4>)
 80093c4:	4966      	ldr	r1, [pc, #408]	; (8009560 <cppLoop+0x1ca8>)
 80093c6:	4863      	ldr	r0, [pc, #396]	; (8009554 <cppLoop+0x1c9c>)
 80093c8:	f7fb fa65 	bl	8004896 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80093cc:	2200      	movs	r2, #0
 80093ce:	f04f 31ff 	mov.w	r1, #4294967295
 80093d2:	4852      	ldr	r0, [pc, #328]	; (800951c <cppLoop+0x1c64>)
 80093d4:	f7f8 fe0e 	bl	8001ff4 <_ZN3LED2LREaa>
		}
		break;
 80093d8:	e19f      	b.n	800971a <cppLoop+0x1e62>

	case 12:
		led.fullColor('~');
 80093da:	217e      	movs	r1, #126	; 0x7e
 80093dc:	484f      	ldr	r0, [pc, #316]	; (800951c <cppLoop+0x1c64>)
 80093de:	f7f8 fd4d 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 80093e2:	f7f7 fe8f 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 80093e6:	2100      	movs	r1, #0
 80093e8:	2000      	movs	r0, #0
 80093ea:	f7f7 fe9b 	bl	8001124 <lcd_locate>
		lcd_printf("PID");
 80093ee:	485d      	ldr	r0, [pc, #372]	; (8009564 <cppLoop+0x1cac>)
 80093f0:	f7f7 fec3 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 80093f4:	2101      	movs	r1, #1
 80093f6:	2000      	movs	r0, #0
 80093f8:	f7f7 fe94 	bl	8001124 <lcd_locate>
		lcd_printf("Response");
 80093fc:	485a      	ldr	r0, [pc, #360]	; (8009568 <cppLoop+0x1cb0>)
 80093fe:	f7f7 febc 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009402:	4845      	ldr	r0, [pc, #276]	; (8009518 <cppLoop+0x1c60>)
 8009404:	f7f8 fcd6 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8009408:	4603      	mov	r3, r0
 800940a:	2b02      	cmp	r3, #2
 800940c:	bf0c      	ite	eq
 800940e:	2301      	moveq	r3, #1
 8009410:	2300      	movne	r3, #0
 8009412:	b2db      	uxtb	r3, r3
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 8182 	beq.w	800971e <cppLoop+0x1e66>
			HAL_Delay(1500);
 800941a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800941e:	f000 faa5 	bl	800996c <HAL_Delay>
			led.LR(-1, 1);
 8009422:	2201      	movs	r2, #1
 8009424:	f04f 31ff 	mov.w	r1, #4294967295
 8009428:	483c      	ldr	r0, [pc, #240]	; (800951c <cppLoop+0x1c64>)
 800942a:	f7f8 fde3 	bl	8001ff4 <_ZN3LED2LREaa>

			logger.start();
 800942e:	4849      	ldr	r0, [pc, #292]	; (8009554 <cppLoop+0x1c9c>)
 8009430:	f7fb fb1d 	bl	8004a6e <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8009434:	484d      	ldr	r0, [pc, #308]	; (800956c <cppLoop+0x1cb4>)
 8009436:	f7fc faf4 	bl	8005a22 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 800943a:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8009570 <cppLoop+0x1cb8>
 800943e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009442:	484a      	ldr	r0, [pc, #296]	; (800956c <cppLoop+0x1cb4>)
 8009444:	f7fc fa80 	bl	8005948 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8009448:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800944c:	f000 fa8e 	bl	800996c <HAL_Delay>

			logger.stop();
 8009450:	4840      	ldr	r0, [pc, #256]	; (8009554 <cppLoop+0x1c9c>)
 8009452:	f7fb fb1d 	bl	8004a90 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8009456:	4845      	ldr	r0, [pc, #276]	; (800956c <cppLoop+0x1cb4>)
 8009458:	f7fc faf6 	bl	8005a48 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 800945c:	4a45      	ldr	r2, [pc, #276]	; (8009574 <cppLoop+0x1cbc>)
 800945e:	4940      	ldr	r1, [pc, #256]	; (8009560 <cppLoop+0x1ca8>)
 8009460:	483c      	ldr	r0, [pc, #240]	; (8009554 <cppLoop+0x1c9c>)
 8009462:	f7fb fa18 	bl	8004896 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8009466:	2200      	movs	r2, #0
 8009468:	f04f 31ff 	mov.w	r1, #4294967295
 800946c:	482b      	ldr	r0, [pc, #172]	; (800951c <cppLoop+0x1c64>)
 800946e:	f7f8 fdc1 	bl	8001ff4 <_ZN3LED2LREaa>
		}
		break;
 8009472:	e154      	b.n	800971e <cppLoop+0x1e66>

	case 13:
		led.fullColor('~');
 8009474:	217e      	movs	r1, #126	; 0x7e
 8009476:	4829      	ldr	r0, [pc, #164]	; (800951c <cppLoop+0x1c64>)
 8009478:	f7f8 fd00 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 800947c:	f7f7 fe42 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 8009480:	2100      	movs	r1, #0
 8009482:	2000      	movs	r0, #0
 8009484:	f7f7 fe4e 	bl	8001124 <lcd_locate>
		lcd_printf("Msig");
 8009488:	483b      	ldr	r0, [pc, #236]	; (8009578 <cppLoop+0x1cc0>)
 800948a:	f7f7 fe76 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 800948e:	2101      	movs	r1, #1
 8009490:	2000      	movs	r0, #0
 8009492:	f7f7 fe47 	bl	8001124 <lcd_locate>
		lcd_printf("Record");
 8009496:	482e      	ldr	r0, [pc, #184]	; (8009550 <cppLoop+0x1c98>)
 8009498:	f7f7 fe6f 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800949c:	481e      	ldr	r0, [pc, #120]	; (8009518 <cppLoop+0x1c60>)
 800949e:	f7f8 fc89 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	bf0c      	ite	eq
 80094a8:	2301      	moveq	r3, #1
 80094aa:	2300      	movne	r3, #0
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f000 8137 	beq.w	8009722 <cppLoop+0x1e6a>
			led.LR(-1, 1);
 80094b4:	2201      	movs	r2, #1
 80094b6:	f04f 31ff 	mov.w	r1, #4294967295
 80094ba:	4818      	ldr	r0, [pc, #96]	; (800951c <cppLoop+0x1c64>)
 80094bc:	f7f8 fd9a 	bl	8001ff4 <_ZN3LED2LREaa>
			HAL_Delay(1500);
 80094c0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80094c4:	f000 fa52 	bl	800996c <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 80094c8:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800957c <cppLoop+0x1cc4>
 80094cc:	482c      	ldr	r0, [pc, #176]	; (8009580 <cppLoop+0x1cc8>)
 80094ce:	f7fc f8c7 	bl	8005660 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 80094d2:	482b      	ldr	r0, [pc, #172]	; (8009580 <cppLoop+0x1cc8>)
 80094d4:	f7fc f8d4 	bl	8005680 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 80094d8:	f244 405c 	movw	r0, #17500	; 0x445c
 80094dc:	f000 fa46 	bl	800996c <HAL_Delay>
			sys_ident.stop();
 80094e0:	4827      	ldr	r0, [pc, #156]	; (8009580 <cppLoop+0x1cc8>)
 80094e2:	f7fc f8e1 	bl	80056a8 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 80094e6:	4826      	ldr	r0, [pc, #152]	; (8009580 <cppLoop+0x1cc8>)
 80094e8:	f7fc f846 	bl	8005578 <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 80094ec:	2200      	movs	r2, #0
 80094ee:	f04f 31ff 	mov.w	r1, #4294967295
 80094f2:	480a      	ldr	r0, [pc, #40]	; (800951c <cppLoop+0x1c64>)
 80094f4:	f7f8 fd7e 	bl	8001ff4 <_ZN3LED2LREaa>
		}
		break;
 80094f8:	e113      	b.n	8009722 <cppLoop+0x1e6a>
 80094fa:	bf00      	nop
 80094fc:	f3af 8000 	nop.w
 8009500:	33333333 	.word	0x33333333
 8009504:	bfd33333 	.word	0xbfd33333
 8009508:	33333333 	.word	0x33333333
 800950c:	3fd33333 	.word	0x3fd33333
	...
 8009518:	200005c0 	.word	0x200005c0
 800951c:	200005cc 	.word	0x200005cc
 8009520:	2003d418 	.word	0x2003d418
 8009524:	0801ac48 	.word	0x0801ac48
 8009528:	0801ab54 	.word	0x0801ab54
 800952c:	2003d420 	.word	0x2003d420
 8009530:	0801ac54 	.word	0x0801ac54
 8009534:	2003d428 	.word	0x2003d428
 8009538:	0801ac60 	.word	0x0801ac60
 800953c:	20017da0 	.word	0x20017da0
 8009540:	0801ac6c 	.word	0x0801ac6c
 8009544:	0801ac78 	.word	0x0801ac78
 8009548:	2003d440 	.word	0x2003d440
 800954c:	0801ac84 	.word	0x0801ac84
 8009550:	0801ac8c 	.word	0x0801ac8c
 8009554:	200005f0 	.word	0x200005f0
 8009558:	200005c8 	.word	0x200005c8
 800955c:	0801ac94 	.word	0x0801ac94
 8009560:	0801aca0 	.word	0x0801aca0
 8009564:	0801acac 	.word	0x0801acac
 8009568:	0801acb0 	.word	0x0801acb0
 800956c:	20017d20 	.word	0x20017d20
 8009570:	00000000 	.word	0x00000000
 8009574:	0801acbc 	.word	0x0801acbc
 8009578:	0801acc8 	.word	0x0801acc8
 800957c:	3e99999a 	.word	0x3e99999a
 8009580:	20025ab8 	.word	0x20025ab8

	case 14:
		led.fullColor('W');
 8009584:	2157      	movs	r1, #87	; 0x57
 8009586:	486c      	ldr	r0, [pc, #432]	; (8009738 <cppLoop+0x1e80>)
 8009588:	f7f8 fc78 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 800958c:	f7f7 fdba 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 8009590:	2100      	movs	r1, #0
 8009592:	2000      	movs	r0, #0
 8009594:	f7f7 fdc6 	bl	8001124 <lcd_locate>
		lcd_printf("LogRun2    ");
 8009598:	4868      	ldr	r0, [pc, #416]	; (800973c <cppLoop+0x1e84>)
 800959a:	f7f7 fdee 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 800959e:	2101      	movs	r1, #1
 80095a0:	2000      	movs	r0, #0
 80095a2:	f7f7 fdbf 	bl	8001124 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 80095a6:	4b66      	ldr	r3, [pc, #408]	; (8009740 <cppLoop+0x1e88>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7f6 ffe4 	bl	8000578 <__aeabi_f2d>
 80095b0:	4602      	mov	r2, r0
 80095b2:	460b      	mov	r3, r1
 80095b4:	4863      	ldr	r0, [pc, #396]	; (8009744 <cppLoop+0x1e8c>)
 80095b6:	f7f7 fde0 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80095ba:	4863      	ldr	r0, [pc, #396]	; (8009748 <cppLoop+0x1e90>)
 80095bc:	f7f8 fbfa 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	bf0c      	ite	eq
 80095c6:	2301      	moveq	r3, #1
 80095c8:	2300      	movne	r3, #0
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f000 80aa 	beq.w	8009726 <cppLoop+0x1e6e>
			HAL_Delay(500);
 80095d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80095d6:	f000 f9c9 	bl	800996c <HAL_Delay>

			led.LR(1, -1);
 80095da:	f04f 32ff 	mov.w	r2, #4294967295
 80095de:	2101      	movs	r1, #1
 80095e0:	4855      	ldr	r0, [pc, #340]	; (8009738 <cppLoop+0x1e80>)
 80095e2:	f7f8 fd07 	bl	8001ff4 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 80095e6:	2102      	movs	r1, #2
 80095e8:	4858      	ldr	r0, [pc, #352]	; (800974c <cppLoop+0x1e94>)
 80095ea:	f7fa fe59 	bl	80042a0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 80095ee:	4b58      	ldr	r3, [pc, #352]	; (8009750 <cppLoop+0x1e98>)
 80095f0:	edd3 7a00 	vldr	s15, [r3]
 80095f4:	eeb0 0a67 	vmov.f32	s0, s15
 80095f8:	4854      	ldr	r0, [pc, #336]	; (800974c <cppLoop+0x1e94>)
 80095fa:	f7fa fa35 	bl	8003a68 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 80095fe:	4b50      	ldr	r3, [pc, #320]	; (8009740 <cppLoop+0x1e88>)
 8009600:	edd3 7a00 	vldr	s15, [r3]
 8009604:	eeb0 0a67 	vmov.f32	s0, s15
 8009608:	4850      	ldr	r0, [pc, #320]	; (800974c <cppLoop+0x1e94>)
 800960a:	f7fa fa3d 	bl	8003a88 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800960e:	4b4c      	ldr	r3, [pc, #304]	; (8009740 <cppLoop+0x1e88>)
 8009610:	edd3 7a00 	vldr	s15, [r3]
 8009614:	eeb0 0a67 	vmov.f32	s0, s15
 8009618:	484c      	ldr	r0, [pc, #304]	; (800974c <cppLoop+0x1e94>)
 800961a:	f7fa fa55 	bl	8003ac8 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800961e:	484b      	ldr	r0, [pc, #300]	; (800974c <cppLoop+0x1e94>)
 8009620:	f7f9 fd62 	bl	80030e8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8009624:	4849      	ldr	r0, [pc, #292]	; (800974c <cppLoop+0x1e94>)
 8009626:	f7fa fd3d 	bl	80040a4 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 800962a:	f04f 32ff 	mov.w	r2, #4294967295
 800962e:	2100      	movs	r1, #0
 8009630:	4841      	ldr	r0, [pc, #260]	; (8009738 <cppLoop+0x1e80>)
 8009632:	f7f8 fcdf 	bl	8001ff4 <_ZN3LED2LREaa>
		}

		break;
 8009636:	e076      	b.n	8009726 <cppLoop+0x1e6e>

	case 15:
		led.fullColor('W');
 8009638:	2157      	movs	r1, #87	; 0x57
 800963a:	483f      	ldr	r0, [pc, #252]	; (8009738 <cppLoop+0x1e80>)
 800963c:	f7f8 fc1e 	bl	8001e7c <_ZN3LED9fullColorEc>

		lcd_clear();
 8009640:	f7f7 fd60 	bl	8001104 <lcd_clear>
		lcd_locate(0,0);
 8009644:	2100      	movs	r1, #0
 8009646:	2000      	movs	r0, #0
 8009648:	f7f7 fd6c 	bl	8001124 <lcd_locate>
		lcd_printf("LogRun1    ");
 800964c:	4841      	ldr	r0, [pc, #260]	; (8009754 <cppLoop+0x1e9c>)
 800964e:	f7f7 fd94 	bl	800117a <lcd_printf>
		lcd_locate(0,1);
 8009652:	2101      	movs	r1, #1
 8009654:	2000      	movs	r0, #0
 8009656:	f7f7 fd65 	bl	8001124 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 800965a:	4b3f      	ldr	r3, [pc, #252]	; (8009758 <cppLoop+0x1ea0>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4618      	mov	r0, r3
 8009660:	f7f6 ff8a 	bl	8000578 <__aeabi_f2d>
 8009664:	4602      	mov	r2, r0
 8009666:	460b      	mov	r3, r1
 8009668:	4836      	ldr	r0, [pc, #216]	; (8009744 <cppLoop+0x1e8c>)
 800966a:	f7f7 fd86 	bl	800117a <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800966e:	4836      	ldr	r0, [pc, #216]	; (8009748 <cppLoop+0x1e90>)
 8009670:	f7f8 fba0 	bl	8001db4 <_ZN8JoyStick8getValueEv>
 8009674:	4603      	mov	r3, r0
 8009676:	2b02      	cmp	r3, #2
 8009678:	bf0c      	ite	eq
 800967a:	2301      	moveq	r3, #1
 800967c:	2300      	movne	r3, #0
 800967e:	b2db      	uxtb	r3, r3
 8009680:	2b00      	cmp	r3, #0
 8009682:	d052      	beq.n	800972a <cppLoop+0x1e72>
			HAL_Delay(500);
 8009684:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009688:	f000 f970 	bl	800996c <HAL_Delay>

			led.LR(1, -1);
 800968c:	f04f 32ff 	mov.w	r2, #4294967295
 8009690:	2101      	movs	r1, #1
 8009692:	4829      	ldr	r0, [pc, #164]	; (8009738 <cppLoop+0x1e80>)
 8009694:	f7f8 fcae 	bl	8001ff4 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8009698:	2101      	movs	r1, #1
 800969a:	482c      	ldr	r0, [pc, #176]	; (800974c <cppLoop+0x1e94>)
 800969c:	f7fa fe00 	bl	80042a0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 80096a0:	4b2e      	ldr	r3, [pc, #184]	; (800975c <cppLoop+0x1ea4>)
 80096a2:	edd3 7a00 	vldr	s15, [r3]
 80096a6:	eeb0 0a67 	vmov.f32	s0, s15
 80096aa:	4828      	ldr	r0, [pc, #160]	; (800974c <cppLoop+0x1e94>)
 80096ac:	f7fa f9dc 	bl	8003a68 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80096b0:	4b29      	ldr	r3, [pc, #164]	; (8009758 <cppLoop+0x1ea0>)
 80096b2:	edd3 7a00 	vldr	s15, [r3]
 80096b6:	eeb0 0a67 	vmov.f32	s0, s15
 80096ba:	4824      	ldr	r0, [pc, #144]	; (800974c <cppLoop+0x1e94>)
 80096bc:	f7fa f9e4 	bl	8003a88 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80096c0:	4b26      	ldr	r3, [pc, #152]	; (800975c <cppLoop+0x1ea4>)
 80096c2:	edd3 7a00 	vldr	s15, [r3]
 80096c6:	eeb0 0a67 	vmov.f32	s0, s15
 80096ca:	4820      	ldr	r0, [pc, #128]	; (800974c <cppLoop+0x1e94>)
 80096cc:	f7fa f9fc 	bl	8003ac8 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80096d0:	481e      	ldr	r0, [pc, #120]	; (800974c <cppLoop+0x1e94>)
 80096d2:	f7f9 fd09 	bl	80030e8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 80096d6:	481d      	ldr	r0, [pc, #116]	; (800974c <cppLoop+0x1e94>)
 80096d8:	f7fa fce4 	bl	80040a4 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80096dc:	f04f 32ff 	mov.w	r2, #4294967295
 80096e0:	2100      	movs	r1, #0
 80096e2:	4815      	ldr	r0, [pc, #84]	; (8009738 <cppLoop+0x1e80>)
 80096e4:	f7f8 fc86 	bl	8001ff4 <_ZN3LED2LREaa>
		}
		break;
 80096e8:	e01f      	b.n	800972a <cppLoop+0x1e72>

	default:
		break;
 80096ea:	bf00      	nop
 80096ec:	e01e      	b.n	800972c <cppLoop+0x1e74>
		break;
 80096ee:	bf00      	nop
 80096f0:	e01c      	b.n	800972c <cppLoop+0x1e74>
		break;
 80096f2:	bf00      	nop
 80096f4:	e01a      	b.n	800972c <cppLoop+0x1e74>
		break;
 80096f6:	bf00      	nop
 80096f8:	e018      	b.n	800972c <cppLoop+0x1e74>
		break;
 80096fa:	bf00      	nop
 80096fc:	e016      	b.n	800972c <cppLoop+0x1e74>
		break;
 80096fe:	bf00      	nop
 8009700:	e014      	b.n	800972c <cppLoop+0x1e74>
		break;
 8009702:	bf00      	nop
 8009704:	e012      	b.n	800972c <cppLoop+0x1e74>
		break;
 8009706:	bf00      	nop
 8009708:	e010      	b.n	800972c <cppLoop+0x1e74>
		break;
 800970a:	bf00      	nop
 800970c:	e00e      	b.n	800972c <cppLoop+0x1e74>
		break;
 800970e:	bf00      	nop
 8009710:	e00c      	b.n	800972c <cppLoop+0x1e74>
		break;
 8009712:	bf00      	nop
 8009714:	e00a      	b.n	800972c <cppLoop+0x1e74>
		break;
 8009716:	bf00      	nop
 8009718:	e008      	b.n	800972c <cppLoop+0x1e74>
		break;
 800971a:	bf00      	nop
 800971c:	e006      	b.n	800972c <cppLoop+0x1e74>
		break;
 800971e:	bf00      	nop
 8009720:	e004      	b.n	800972c <cppLoop+0x1e74>
		break;
 8009722:	bf00      	nop
 8009724:	e002      	b.n	800972c <cppLoop+0x1e74>
		break;
 8009726:	bf00      	nop
 8009728:	e000      	b.n	800972c <cppLoop+0x1e74>
		break;
 800972a:	bf00      	nop

	}

	HAL_Delay(30);
 800972c:	201e      	movs	r0, #30
 800972e:	f000 f91d 	bl	800996c <HAL_Delay>

}
 8009732:	bf00      	nop
 8009734:	46bd      	mov	sp, r7
 8009736:	bdb0      	pop	{r4, r5, r7, pc}
 8009738:	200005cc 	.word	0x200005cc
 800973c:	0801acd0 	.word	0x0801acd0
 8009740:	2003d440 	.word	0x2003d440
 8009744:	0801ab78 	.word	0x0801ab78
 8009748:	200005c0 	.word	0x200005c0
 800974c:	20017da0 	.word	0x20017da0
 8009750:	2003d450 	.word	0x2003d450
 8009754:	0801acdc 	.word	0x0801acdc
 8009758:	2003d438 	.word	0x2003d438
 800975c:	2003d448 	.word	0x2003d448

08009760 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009760:	b580      	push	{r7, lr}
 8009762:	b088      	sub	sp, #32
 8009764:	af06      	add	r7, sp, #24
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d13d      	bne.n	80097ec <_Z41__static_initialization_and_destruction_0ii+0x8c>
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009776:	4293      	cmp	r3, r2
 8009778:	d138      	bne.n	80097ec <_Z41__static_initialization_and_destruction_0ii+0x8c>
LineSensor line_sensor;
 800977a:	481e      	ldr	r0, [pc, #120]	; (80097f4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800977c:	f7f8 fc72 	bl	8002064 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009780:	481d      	ldr	r0, [pc, #116]	; (80097f8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8009782:	f7fb fd69 	bl	8005258 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009786:	481d      	ldr	r0, [pc, #116]	; (80097fc <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8009788:	f7f8 fb08 	bl	8001d9c <_ZN8JoyStickC1Ev>
Motor motor;
 800978c:	481c      	ldr	r0, [pc, #112]	; (8009800 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800978e:	f7fb f990 	bl	8004ab2 <_ZN5MotorC1Ev>
IMU imu;
 8009792:	481c      	ldr	r0, [pc, #112]	; (8009804 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009794:	f7f8 f90e 	bl	80019b4 <_ZN3IMUC1Ev>
Logger logger;
 8009798:	481b      	ldr	r0, [pc, #108]	; (8009808 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800979a:	f7fa fee9 	bl	8004570 <_ZN6LoggerC1Ev>
Encoder encoder;
 800979e:	481b      	ldr	r0, [pc, #108]	; (800980c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80097a0:	f7f7 fd0b 	bl	80011ba <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 80097a4:	4b17      	ldr	r3, [pc, #92]	; (8009804 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80097a6:	4a19      	ldr	r2, [pc, #100]	; (800980c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80097a8:	4915      	ldr	r1, [pc, #84]	; (8009800 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80097aa:	4819      	ldr	r0, [pc, #100]	; (8009810 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80097ac:	f7fb ffa0 	bl	80056f0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 80097b0:	4b17      	ldr	r3, [pc, #92]	; (8009810 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80097b2:	4a14      	ldr	r2, [pc, #80]	; (8009804 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80097b4:	4915      	ldr	r1, [pc, #84]	; (800980c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80097b6:	4817      	ldr	r0, [pc, #92]	; (8009814 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80097b8:	f7fb fa5c 	bl	8004c74 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu);
 80097bc:	4b11      	ldr	r3, [pc, #68]	; (8009804 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80097be:	9304      	str	r3, [sp, #16]
 80097c0:	4b11      	ldr	r3, [pc, #68]	; (8009808 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80097c2:	9303      	str	r3, [sp, #12]
 80097c4:	4b13      	ldr	r3, [pc, #76]	; (8009814 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80097c6:	9302      	str	r3, [sp, #8]
 80097c8:	4b10      	ldr	r3, [pc, #64]	; (800980c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80097ca:	9301      	str	r3, [sp, #4]
 80097cc:	4b0a      	ldr	r3, [pc, #40]	; (80097f8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	4b0f      	ldr	r3, [pc, #60]	; (8009810 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80097d2:	4a08      	ldr	r2, [pc, #32]	; (80097f4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80097d4:	490a      	ldr	r1, [pc, #40]	; (8009800 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80097d6:	4810      	ldr	r0, [pc, #64]	; (8009818 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80097d8:	f7f8 ff6e 	bl	80026b8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>
SystemIdentification sys_ident(&logger, &motor);
 80097dc:	4a08      	ldr	r2, [pc, #32]	; (8009800 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80097de:	490a      	ldr	r1, [pc, #40]	; (8009808 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80097e0:	480e      	ldr	r0, [pc, #56]	; (800981c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80097e2:	f7fb fe7f 	bl	80054e4 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 80097e6:	480e      	ldr	r0, [pc, #56]	; (8009820 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80097e8:	f7fb fbc2 	bl	8004f70 <_ZN13PathFollowingC1Ev>
}
 80097ec:	bf00      	nop
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	200002c0 	.word	0x200002c0
 80097f8:	200005b8 	.word	0x200005b8
 80097fc:	200005c0 	.word	0x200005c0
 8009800:	200005c8 	.word	0x200005c8
 8009804:	200005dc 	.word	0x200005dc
 8009808:	200005f0 	.word	0x200005f0
 800980c:	20017d00 	.word	0x20017d00
 8009810:	20017d20 	.word	0x20017d20
 8009814:	20017d60 	.word	0x20017d60
 8009818:	20017da0 	.word	0x20017da0
 800981c:	20025ab8 	.word	0x20025ab8
 8009820:	20025cc8 	.word	0x20025cc8

08009824 <_GLOBAL__sub_I_line_sensor>:
 8009824:	b580      	push	{r7, lr}
 8009826:	af00      	add	r7, sp, #0
 8009828:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800982c:	2001      	movs	r0, #1
 800982e:	f7ff ff97 	bl	8009760 <_Z41__static_initialization_and_destruction_0ii>
 8009832:	bd80      	pop	{r7, pc}

08009834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800986c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009838:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800983a:	e003      	b.n	8009844 <LoopCopyDataInit>

0800983c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800983c:	4b0c      	ldr	r3, [pc, #48]	; (8009870 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800983e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009840:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009842:	3104      	adds	r1, #4

08009844 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009844:	480b      	ldr	r0, [pc, #44]	; (8009874 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009846:	4b0c      	ldr	r3, [pc, #48]	; (8009878 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009848:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800984a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800984c:	d3f6      	bcc.n	800983c <CopyDataInit>
  ldr  r2, =_sbss
 800984e:	4a0b      	ldr	r2, [pc, #44]	; (800987c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009850:	e002      	b.n	8009858 <LoopFillZerobss>

08009852 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009852:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009854:	f842 3b04 	str.w	r3, [r2], #4

08009858 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009858:	4b09      	ldr	r3, [pc, #36]	; (8009880 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800985a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800985c:	d3f9      	bcc.n	8009852 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800985e:	f7fd ff07 	bl	8007670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009862:	f00b fe49 	bl	80154f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009866:	f7fc f9cd 	bl	8005c04 <main>
  bx  lr    
 800986a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800986c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009870:	0801b470 	.word	0x0801b470
  ldr  r0, =_sdata
 8009874:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009878:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800987c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009880:	20041e64 	.word	0x20041e64

08009884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009884:	e7fe      	b.n	8009884 <ADC_IRQHandler>
	...

08009888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800988c:	4b0e      	ldr	r3, [pc, #56]	; (80098c8 <HAL_Init+0x40>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a0d      	ldr	r2, [pc, #52]	; (80098c8 <HAL_Init+0x40>)
 8009892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009898:	4b0b      	ldr	r3, [pc, #44]	; (80098c8 <HAL_Init+0x40>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a0a      	ldr	r2, [pc, #40]	; (80098c8 <HAL_Init+0x40>)
 800989e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80098a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80098a4:	4b08      	ldr	r3, [pc, #32]	; (80098c8 <HAL_Init+0x40>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a07      	ldr	r2, [pc, #28]	; (80098c8 <HAL_Init+0x40>)
 80098aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80098b0:	2003      	movs	r0, #3
 80098b2:	f000 fd53 	bl	800a35c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80098b6:	2000      	movs	r0, #0
 80098b8:	f000 f808 	bl	80098cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80098bc:	f7fd f8b4 	bl	8006a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	40023c00 	.word	0x40023c00

080098cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80098d4:	4b12      	ldr	r3, [pc, #72]	; (8009920 <HAL_InitTick+0x54>)
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	4b12      	ldr	r3, [pc, #72]	; (8009924 <HAL_InitTick+0x58>)
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	4619      	mov	r1, r3
 80098de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80098e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80098e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 fd6b 	bl	800a3c6 <HAL_SYSTICK_Config>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e00e      	b.n	8009918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b0f      	cmp	r3, #15
 80098fe:	d80a      	bhi.n	8009916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009900:	2200      	movs	r2, #0
 8009902:	6879      	ldr	r1, [r7, #4]
 8009904:	f04f 30ff 	mov.w	r0, #4294967295
 8009908:	f000 fd33 	bl	800a372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800990c:	4a06      	ldr	r2, [pc, #24]	; (8009928 <HAL_InitTick+0x5c>)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	e000      	b.n	8009918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009916:	2301      	movs	r3, #1
}
 8009918:	4618      	mov	r0, r3
 800991a:	3708      	adds	r7, #8
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	20000000 	.word	0x20000000
 8009924:	20000008 	.word	0x20000008
 8009928:	20000004 	.word	0x20000004

0800992c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800992c:	b480      	push	{r7}
 800992e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009930:	4b06      	ldr	r3, [pc, #24]	; (800994c <HAL_IncTick+0x20>)
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	461a      	mov	r2, r3
 8009936:	4b06      	ldr	r3, [pc, #24]	; (8009950 <HAL_IncTick+0x24>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4413      	add	r3, r2
 800993c:	4a04      	ldr	r2, [pc, #16]	; (8009950 <HAL_IncTick+0x24>)
 800993e:	6013      	str	r3, [r2, #0]
}
 8009940:	bf00      	nop
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop
 800994c:	20000008 	.word	0x20000008
 8009950:	2003fde0 	.word	0x2003fde0

08009954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009954:	b480      	push	{r7}
 8009956:	af00      	add	r7, sp, #0
  return uwTick;
 8009958:	4b03      	ldr	r3, [pc, #12]	; (8009968 <HAL_GetTick+0x14>)
 800995a:	681b      	ldr	r3, [r3, #0]
}
 800995c:	4618      	mov	r0, r3
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop
 8009968:	2003fde0 	.word	0x2003fde0

0800996c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009974:	f7ff ffee 	bl	8009954 <HAL_GetTick>
 8009978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009984:	d005      	beq.n	8009992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009986:	4b0a      	ldr	r3, [pc, #40]	; (80099b0 <HAL_Delay+0x44>)
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	461a      	mov	r2, r3
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	4413      	add	r3, r2
 8009990:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009992:	bf00      	nop
 8009994:	f7ff ffde 	bl	8009954 <HAL_GetTick>
 8009998:	4602      	mov	r2, r0
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	1ad3      	subs	r3, r2, r3
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d8f7      	bhi.n	8009994 <HAL_Delay+0x28>
  {
  }
}
 80099a4:	bf00      	nop
 80099a6:	bf00      	nop
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	20000008 	.word	0x20000008

080099b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80099bc:	2300      	movs	r3, #0
 80099be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d101      	bne.n	80099ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	e033      	b.n	8009a32 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d109      	bne.n	80099e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f7fd f850 	bl	8006a78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ea:	f003 0310 	and.w	r3, r3, #16
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d118      	bne.n	8009a24 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80099fa:	f023 0302 	bic.w	r3, r3, #2
 80099fe:	f043 0202 	orr.w	r2, r3, #2
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 fa5a 	bl	8009ec0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a16:	f023 0303 	bic.w	r3, r3, #3
 8009a1a:	f043 0201 	orr.w	r2, r3, #1
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	641a      	str	r2, [r3, #64]	; 0x40
 8009a22:	e001      	b.n	8009a28 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
	...

08009a3c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b086      	sub	sp, #24
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d101      	bne.n	8009a5a <HAL_ADC_Start_DMA+0x1e>
 8009a56:	2302      	movs	r3, #2
 8009a58:	e0cc      	b.n	8009bf4 <HAL_ADC_Start_DMA+0x1b8>
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	f003 0301 	and.w	r3, r3, #1
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d018      	beq.n	8009aa2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	689a      	ldr	r2, [r3, #8]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f042 0201 	orr.w	r2, r2, #1
 8009a7e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009a80:	4b5e      	ldr	r3, [pc, #376]	; (8009bfc <HAL_ADC_Start_DMA+0x1c0>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a5e      	ldr	r2, [pc, #376]	; (8009c00 <HAL_ADC_Start_DMA+0x1c4>)
 8009a86:	fba2 2303 	umull	r2, r3, r2, r3
 8009a8a:	0c9a      	lsrs	r2, r3, #18
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	005b      	lsls	r3, r3, #1
 8009a90:	4413      	add	r3, r2
 8009a92:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009a94:	e002      	b.n	8009a9c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1f9      	bne.n	8009a96 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	f003 0301 	and.w	r3, r3, #1
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	f040 80a0 	bne.w	8009bf2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009aba:	f023 0301 	bic.w	r3, r3, #1
 8009abe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d007      	beq.n	8009ae4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009adc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009af0:	d106      	bne.n	8009b00 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009af6:	f023 0206 	bic.w	r2, r3, #6
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	645a      	str	r2, [r3, #68]	; 0x44
 8009afe:	e002      	b.n	8009b06 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2200      	movs	r2, #0
 8009b04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009b0e:	4b3d      	ldr	r3, [pc, #244]	; (8009c04 <HAL_ADC_Start_DMA+0x1c8>)
 8009b10:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b16:	4a3c      	ldr	r2, [pc, #240]	; (8009c08 <HAL_ADC_Start_DMA+0x1cc>)
 8009b18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1e:	4a3b      	ldr	r2, [pc, #236]	; (8009c0c <HAL_ADC_Start_DMA+0x1d0>)
 8009b20:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b26:	4a3a      	ldr	r2, [pc, #232]	; (8009c10 <HAL_ADC_Start_DMA+0x1d4>)
 8009b28:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009b32:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	685a      	ldr	r2, [r3, #4]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009b42:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	689a      	ldr	r2, [r3, #8]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b52:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	334c      	adds	r3, #76	; 0x4c
 8009b5e:	4619      	mov	r1, r3
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f000 fcea 	bl	800a53c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	f003 031f 	and.w	r3, r3, #31
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d12a      	bne.n	8009bca <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a26      	ldr	r2, [pc, #152]	; (8009c14 <HAL_ADC_Start_DMA+0x1d8>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d015      	beq.n	8009baa <HAL_ADC_Start_DMA+0x16e>
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a25      	ldr	r2, [pc, #148]	; (8009c18 <HAL_ADC_Start_DMA+0x1dc>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d105      	bne.n	8009b94 <HAL_ADC_Start_DMA+0x158>
 8009b88:	4b1e      	ldr	r3, [pc, #120]	; (8009c04 <HAL_ADC_Start_DMA+0x1c8>)
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	f003 031f 	and.w	r3, r3, #31
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00a      	beq.n	8009baa <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a20      	ldr	r2, [pc, #128]	; (8009c1c <HAL_ADC_Start_DMA+0x1e0>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d129      	bne.n	8009bf2 <HAL_ADC_Start_DMA+0x1b6>
 8009b9e:	4b19      	ldr	r3, [pc, #100]	; (8009c04 <HAL_ADC_Start_DMA+0x1c8>)
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	f003 0310 	and.w	r3, r3, #16
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d123      	bne.n	8009bf2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d11c      	bne.n	8009bf2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	689a      	ldr	r2, [r3, #8]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009bc6:	609a      	str	r2, [r3, #8]
 8009bc8:	e013      	b.n	8009bf2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a11      	ldr	r2, [pc, #68]	; (8009c14 <HAL_ADC_Start_DMA+0x1d8>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d10e      	bne.n	8009bf2 <HAL_ADC_Start_DMA+0x1b6>
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d107      	bne.n	8009bf2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	689a      	ldr	r2, [r3, #8]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009bf0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009bf2:	2300      	movs	r3, #0
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3718      	adds	r7, #24
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	20000000 	.word	0x20000000
 8009c00:	431bde83 	.word	0x431bde83
 8009c04:	40012300 	.word	0x40012300
 8009c08:	0800a0b9 	.word	0x0800a0b9
 8009c0c:	0800a173 	.word	0x0800a173
 8009c10:	0800a18f 	.word	0x0800a18f
 8009c14:	40012000 	.word	0x40012000
 8009c18:	40012100 	.word	0x40012100
 8009c1c:	40012200 	.word	0x40012200

08009c20 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009c3c:	bf00      	nop
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009c50:	bf00      	nop
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b085      	sub	sp, #20
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009c66:	2300      	movs	r3, #0
 8009c68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d101      	bne.n	8009c78 <HAL_ADC_ConfigChannel+0x1c>
 8009c74:	2302      	movs	r3, #2
 8009c76:	e113      	b.n	8009ea0 <HAL_ADC_ConfigChannel+0x244>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2b09      	cmp	r3, #9
 8009c86:	d925      	bls.n	8009cd4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68d9      	ldr	r1, [r3, #12]
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	461a      	mov	r2, r3
 8009c96:	4613      	mov	r3, r2
 8009c98:	005b      	lsls	r3, r3, #1
 8009c9a:	4413      	add	r3, r2
 8009c9c:	3b1e      	subs	r3, #30
 8009c9e:	2207      	movs	r2, #7
 8009ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca4:	43da      	mvns	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	400a      	ands	r2, r1
 8009cac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68d9      	ldr	r1, [r3, #12]
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	689a      	ldr	r2, [r3, #8]
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	005b      	lsls	r3, r3, #1
 8009cc4:	4403      	add	r3, r0
 8009cc6:	3b1e      	subs	r3, #30
 8009cc8:	409a      	lsls	r2, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	60da      	str	r2, [r3, #12]
 8009cd2:	e022      	b.n	8009d1a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	6919      	ldr	r1, [r3, #16]
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	005b      	lsls	r3, r3, #1
 8009ce6:	4413      	add	r3, r2
 8009ce8:	2207      	movs	r2, #7
 8009cea:	fa02 f303 	lsl.w	r3, r2, r3
 8009cee:	43da      	mvns	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	400a      	ands	r2, r1
 8009cf6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	6919      	ldr	r1, [r3, #16]
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	689a      	ldr	r2, [r3, #8]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	4618      	mov	r0, r3
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	005b      	lsls	r3, r3, #1
 8009d0e:	4403      	add	r3, r0
 8009d10:	409a      	lsls	r2, r3
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	430a      	orrs	r2, r1
 8009d18:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	2b06      	cmp	r3, #6
 8009d20:	d824      	bhi.n	8009d6c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	685a      	ldr	r2, [r3, #4]
 8009d2c:	4613      	mov	r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	4413      	add	r3, r2
 8009d32:	3b05      	subs	r3, #5
 8009d34:	221f      	movs	r2, #31
 8009d36:	fa02 f303 	lsl.w	r3, r2, r3
 8009d3a:	43da      	mvns	r2, r3
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	400a      	ands	r2, r1
 8009d42:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	4618      	mov	r0, r3
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	685a      	ldr	r2, [r3, #4]
 8009d56:	4613      	mov	r3, r2
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4413      	add	r3, r2
 8009d5c:	3b05      	subs	r3, #5
 8009d5e:	fa00 f203 	lsl.w	r2, r0, r3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	430a      	orrs	r2, r1
 8009d68:	635a      	str	r2, [r3, #52]	; 0x34
 8009d6a:	e04c      	b.n	8009e06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	2b0c      	cmp	r3, #12
 8009d72:	d824      	bhi.n	8009dbe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	685a      	ldr	r2, [r3, #4]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	4413      	add	r3, r2
 8009d84:	3b23      	subs	r3, #35	; 0x23
 8009d86:	221f      	movs	r2, #31
 8009d88:	fa02 f303 	lsl.w	r3, r2, r3
 8009d8c:	43da      	mvns	r2, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	400a      	ands	r2, r1
 8009d94:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	4618      	mov	r0, r3
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	685a      	ldr	r2, [r3, #4]
 8009da8:	4613      	mov	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4413      	add	r3, r2
 8009dae:	3b23      	subs	r3, #35	; 0x23
 8009db0:	fa00 f203 	lsl.w	r2, r0, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	430a      	orrs	r2, r1
 8009dba:	631a      	str	r2, [r3, #48]	; 0x30
 8009dbc:	e023      	b.n	8009e06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4413      	add	r3, r2
 8009dce:	3b41      	subs	r3, #65	; 0x41
 8009dd0:	221f      	movs	r2, #31
 8009dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd6:	43da      	mvns	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	400a      	ands	r2, r1
 8009dde:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	4618      	mov	r0, r3
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	685a      	ldr	r2, [r3, #4]
 8009df2:	4613      	mov	r3, r2
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	4413      	add	r3, r2
 8009df8:	3b41      	subs	r3, #65	; 0x41
 8009dfa:	fa00 f203 	lsl.w	r2, r0, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	430a      	orrs	r2, r1
 8009e04:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009e06:	4b29      	ldr	r3, [pc, #164]	; (8009eac <HAL_ADC_ConfigChannel+0x250>)
 8009e08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a28      	ldr	r2, [pc, #160]	; (8009eb0 <HAL_ADC_ConfigChannel+0x254>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d10f      	bne.n	8009e34 <HAL_ADC_ConfigChannel+0x1d8>
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b12      	cmp	r3, #18
 8009e1a:	d10b      	bne.n	8009e34 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a1d      	ldr	r2, [pc, #116]	; (8009eb0 <HAL_ADC_ConfigChannel+0x254>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d12b      	bne.n	8009e96 <HAL_ADC_ConfigChannel+0x23a>
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a1c      	ldr	r2, [pc, #112]	; (8009eb4 <HAL_ADC_ConfigChannel+0x258>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d003      	beq.n	8009e50 <HAL_ADC_ConfigChannel+0x1f4>
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2b11      	cmp	r3, #17
 8009e4e:	d122      	bne.n	8009e96 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a11      	ldr	r2, [pc, #68]	; (8009eb4 <HAL_ADC_ConfigChannel+0x258>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d111      	bne.n	8009e96 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009e72:	4b11      	ldr	r3, [pc, #68]	; (8009eb8 <HAL_ADC_ConfigChannel+0x25c>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a11      	ldr	r2, [pc, #68]	; (8009ebc <HAL_ADC_ConfigChannel+0x260>)
 8009e78:	fba2 2303 	umull	r2, r3, r2, r3
 8009e7c:	0c9a      	lsrs	r2, r3, #18
 8009e7e:	4613      	mov	r3, r2
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	4413      	add	r3, r2
 8009e84:	005b      	lsls	r3, r3, #1
 8009e86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009e88:	e002      	b.n	8009e90 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d1f9      	bne.n	8009e8a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3714      	adds	r7, #20
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	40012300 	.word	0x40012300
 8009eb0:	40012000 	.word	0x40012000
 8009eb4:	10000012 	.word	0x10000012
 8009eb8:	20000000 	.word	0x20000000
 8009ebc:	431bde83 	.word	0x431bde83

08009ec0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009ec8:	4b79      	ldr	r3, [pc, #484]	; (800a0b0 <ADC_Init+0x1f0>)
 8009eca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	685a      	ldr	r2, [r3, #4]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	431a      	orrs	r2, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	685a      	ldr	r2, [r3, #4]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ef4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	6859      	ldr	r1, [r3, #4]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	021a      	lsls	r2, r3, #8
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	430a      	orrs	r2, r1
 8009f08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	685a      	ldr	r2, [r3, #4]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009f18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	6859      	ldr	r1, [r3, #4]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	689a      	ldr	r2, [r3, #8]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	430a      	orrs	r2, r1
 8009f2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	689a      	ldr	r2, [r3, #8]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009f3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	6899      	ldr	r1, [r3, #8]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	68da      	ldr	r2, [r3, #12]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	430a      	orrs	r2, r1
 8009f4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f52:	4a58      	ldr	r2, [pc, #352]	; (800a0b4 <ADC_Init+0x1f4>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d022      	beq.n	8009f9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	689a      	ldr	r2, [r3, #8]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009f66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	6899      	ldr	r1, [r3, #8]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	430a      	orrs	r2, r1
 8009f78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	689a      	ldr	r2, [r3, #8]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009f88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	6899      	ldr	r1, [r3, #8]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	430a      	orrs	r2, r1
 8009f9a:	609a      	str	r2, [r3, #8]
 8009f9c:	e00f      	b.n	8009fbe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	689a      	ldr	r2, [r3, #8]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009fac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	689a      	ldr	r2, [r3, #8]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009fbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	689a      	ldr	r2, [r3, #8]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f022 0202 	bic.w	r2, r2, #2
 8009fcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	6899      	ldr	r1, [r3, #8]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	7e1b      	ldrb	r3, [r3, #24]
 8009fd8:	005a      	lsls	r2, r3, #1
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	430a      	orrs	r2, r1
 8009fe0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d01b      	beq.n	800a024 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	685a      	ldr	r2, [r3, #4]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ffa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	685a      	ldr	r2, [r3, #4]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a00a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6859      	ldr	r1, [r3, #4]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a016:	3b01      	subs	r3, #1
 800a018:	035a      	lsls	r2, r3, #13
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	430a      	orrs	r2, r1
 800a020:	605a      	str	r2, [r3, #4]
 800a022:	e007      	b.n	800a034 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	685a      	ldr	r2, [r3, #4]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a032:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a042:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	69db      	ldr	r3, [r3, #28]
 800a04e:	3b01      	subs	r3, #1
 800a050:	051a      	lsls	r2, r3, #20
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	430a      	orrs	r2, r1
 800a058:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	689a      	ldr	r2, [r3, #8]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a068:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	6899      	ldr	r1, [r3, #8]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a076:	025a      	lsls	r2, r3, #9
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	430a      	orrs	r2, r1
 800a07e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	689a      	ldr	r2, [r3, #8]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a08e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	6899      	ldr	r1, [r3, #8]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	695b      	ldr	r3, [r3, #20]
 800a09a:	029a      	lsls	r2, r3, #10
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	430a      	orrs	r2, r1
 800a0a2:	609a      	str	r2, [r3, #8]
}
 800a0a4:	bf00      	nop
 800a0a6:	3714      	adds	r7, #20
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr
 800a0b0:	40012300 	.word	0x40012300
 800a0b4:	0f000001 	.word	0x0f000001

0800a0b8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d13c      	bne.n	800a14c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d12b      	bne.n	800a144 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d127      	bne.n	800a144 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d006      	beq.n	800a110 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d119      	bne.n	800a144 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	685a      	ldr	r2, [r3, #4]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f022 0220 	bic.w	r2, r2, #32
 800a11e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a124:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a134:	2b00      	cmp	r3, #0
 800a136:	d105      	bne.n	800a144 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13c:	f043 0201 	orr.w	r2, r3, #1
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f7ff fd6b 	bl	8009c20 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a14a:	e00e      	b.n	800a16a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a150:	f003 0310 	and.w	r3, r3, #16
 800a154:	2b00      	cmp	r3, #0
 800a156:	d003      	beq.n	800a160 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f7ff fd75 	bl	8009c48 <HAL_ADC_ErrorCallback>
}
 800a15e:	e004      	b.n	800a16a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	4798      	blx	r3
}
 800a16a:	bf00      	nop
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b084      	sub	sp, #16
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a17e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f7ff fd57 	bl	8009c34 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a186:	bf00      	nop
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b084      	sub	sp, #16
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a19a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2240      	movs	r2, #64	; 0x40
 800a1a0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1a6:	f043 0204 	orr.w	r2, r3, #4
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	f7ff fd4a 	bl	8009c48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a1b4:	bf00      	nop
 800a1b6:	3710      	adds	r7, #16
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <__NVIC_SetPriorityGrouping>:
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b085      	sub	sp, #20
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f003 0307 	and.w	r3, r3, #7
 800a1ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a1cc:	4b0c      	ldr	r3, [pc, #48]	; (800a200 <__NVIC_SetPriorityGrouping+0x44>)
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a1d8:	4013      	ands	r3, r2
 800a1da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a1e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a1e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a1ee:	4a04      	ldr	r2, [pc, #16]	; (800a200 <__NVIC_SetPriorityGrouping+0x44>)
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	60d3      	str	r3, [r2, #12]
}
 800a1f4:	bf00      	nop
 800a1f6:	3714      	adds	r7, #20
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr
 800a200:	e000ed00 	.word	0xe000ed00

0800a204 <__NVIC_GetPriorityGrouping>:
{
 800a204:	b480      	push	{r7}
 800a206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a208:	4b04      	ldr	r3, [pc, #16]	; (800a21c <__NVIC_GetPriorityGrouping+0x18>)
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	0a1b      	lsrs	r3, r3, #8
 800a20e:	f003 0307 	and.w	r3, r3, #7
}
 800a212:	4618      	mov	r0, r3
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr
 800a21c:	e000ed00 	.word	0xe000ed00

0800a220 <__NVIC_EnableIRQ>:
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	4603      	mov	r3, r0
 800a228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a22a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	db0b      	blt.n	800a24a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a232:	79fb      	ldrb	r3, [r7, #7]
 800a234:	f003 021f 	and.w	r2, r3, #31
 800a238:	4907      	ldr	r1, [pc, #28]	; (800a258 <__NVIC_EnableIRQ+0x38>)
 800a23a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a23e:	095b      	lsrs	r3, r3, #5
 800a240:	2001      	movs	r0, #1
 800a242:	fa00 f202 	lsl.w	r2, r0, r2
 800a246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a24a:	bf00      	nop
 800a24c:	370c      	adds	r7, #12
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	e000e100 	.word	0xe000e100

0800a25c <__NVIC_SetPriority>:
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	4603      	mov	r3, r0
 800a264:	6039      	str	r1, [r7, #0]
 800a266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	db0a      	blt.n	800a286 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	b2da      	uxtb	r2, r3
 800a274:	490c      	ldr	r1, [pc, #48]	; (800a2a8 <__NVIC_SetPriority+0x4c>)
 800a276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a27a:	0112      	lsls	r2, r2, #4
 800a27c:	b2d2      	uxtb	r2, r2
 800a27e:	440b      	add	r3, r1
 800a280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a284:	e00a      	b.n	800a29c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	b2da      	uxtb	r2, r3
 800a28a:	4908      	ldr	r1, [pc, #32]	; (800a2ac <__NVIC_SetPriority+0x50>)
 800a28c:	79fb      	ldrb	r3, [r7, #7]
 800a28e:	f003 030f 	and.w	r3, r3, #15
 800a292:	3b04      	subs	r3, #4
 800a294:	0112      	lsls	r2, r2, #4
 800a296:	b2d2      	uxtb	r2, r2
 800a298:	440b      	add	r3, r1
 800a29a:	761a      	strb	r2, [r3, #24]
}
 800a29c:	bf00      	nop
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr
 800a2a8:	e000e100 	.word	0xe000e100
 800a2ac:	e000ed00 	.word	0xe000ed00

0800a2b0 <NVIC_EncodePriority>:
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b089      	sub	sp, #36	; 0x24
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f003 0307 	and.w	r3, r3, #7
 800a2c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	f1c3 0307 	rsb	r3, r3, #7
 800a2ca:	2b04      	cmp	r3, #4
 800a2cc:	bf28      	it	cs
 800a2ce:	2304      	movcs	r3, #4
 800a2d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	3304      	adds	r3, #4
 800a2d6:	2b06      	cmp	r3, #6
 800a2d8:	d902      	bls.n	800a2e0 <NVIC_EncodePriority+0x30>
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	3b03      	subs	r3, #3
 800a2de:	e000      	b.n	800a2e2 <NVIC_EncodePriority+0x32>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ee:	43da      	mvns	r2, r3
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	401a      	ands	r2, r3
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a2f8:	f04f 31ff 	mov.w	r1, #4294967295
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	fa01 f303 	lsl.w	r3, r1, r3
 800a302:	43d9      	mvns	r1, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a308:	4313      	orrs	r3, r2
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3724      	adds	r7, #36	; 0x24
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr
	...

0800a318 <SysTick_Config>:
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	3b01      	subs	r3, #1
 800a324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a328:	d301      	bcc.n	800a32e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800a32a:	2301      	movs	r3, #1
 800a32c:	e00f      	b.n	800a34e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a32e:	4a0a      	ldr	r2, [pc, #40]	; (800a358 <SysTick_Config+0x40>)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	3b01      	subs	r3, #1
 800a334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a336:	210f      	movs	r1, #15
 800a338:	f04f 30ff 	mov.w	r0, #4294967295
 800a33c:	f7ff ff8e 	bl	800a25c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a340:	4b05      	ldr	r3, [pc, #20]	; (800a358 <SysTick_Config+0x40>)
 800a342:	2200      	movs	r2, #0
 800a344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a346:	4b04      	ldr	r3, [pc, #16]	; (800a358 <SysTick_Config+0x40>)
 800a348:	2207      	movs	r2, #7
 800a34a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	e000e010 	.word	0xe000e010

0800a35c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f7ff ff29 	bl	800a1bc <__NVIC_SetPriorityGrouping>
}
 800a36a:	bf00      	nop
 800a36c:	3708      	adds	r7, #8
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a372:	b580      	push	{r7, lr}
 800a374:	b086      	sub	sp, #24
 800a376:	af00      	add	r7, sp, #0
 800a378:	4603      	mov	r3, r0
 800a37a:	60b9      	str	r1, [r7, #8]
 800a37c:	607a      	str	r2, [r7, #4]
 800a37e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a380:	2300      	movs	r3, #0
 800a382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a384:	f7ff ff3e 	bl	800a204 <__NVIC_GetPriorityGrouping>
 800a388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	68b9      	ldr	r1, [r7, #8]
 800a38e:	6978      	ldr	r0, [r7, #20]
 800a390:	f7ff ff8e 	bl	800a2b0 <NVIC_EncodePriority>
 800a394:	4602      	mov	r2, r0
 800a396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a39a:	4611      	mov	r1, r2
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7ff ff5d 	bl	800a25c <__NVIC_SetPriority>
}
 800a3a2:	bf00      	nop
 800a3a4:	3718      	adds	r7, #24
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b082      	sub	sp, #8
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a3b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7ff ff31 	bl	800a220 <__NVIC_EnableIRQ>
}
 800a3be:	bf00      	nop
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b082      	sub	sp, #8
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f7ff ffa2 	bl	800a318 <SysTick_Config>
 800a3d4:	4603      	mov	r3, r0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
	...

0800a3e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a3ec:	f7ff fab2 	bl	8009954 <HAL_GetTick>
 800a3f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d101      	bne.n	800a3fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e099      	b.n	800a530 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2202      	movs	r2, #2
 800a408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f022 0201 	bic.w	r2, r2, #1
 800a41a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a41c:	e00f      	b.n	800a43e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a41e:	f7ff fa99 	bl	8009954 <HAL_GetTick>
 800a422:	4602      	mov	r2, r0
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	1ad3      	subs	r3, r2, r3
 800a428:	2b05      	cmp	r3, #5
 800a42a:	d908      	bls.n	800a43e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2220      	movs	r2, #32
 800a430:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2203      	movs	r2, #3
 800a436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a43a:	2303      	movs	r3, #3
 800a43c:	e078      	b.n	800a530 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f003 0301 	and.w	r3, r3, #1
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1e8      	bne.n	800a41e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a454:	697a      	ldr	r2, [r7, #20]
 800a456:	4b38      	ldr	r3, [pc, #224]	; (800a538 <HAL_DMA_Init+0x158>)
 800a458:	4013      	ands	r3, r2
 800a45a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	685a      	ldr	r2, [r3, #4]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a46a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a476:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	699b      	ldr	r3, [r3, #24]
 800a47c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a482:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6a1b      	ldr	r3, [r3, #32]
 800a488:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a48a:	697a      	ldr	r2, [r7, #20]
 800a48c:	4313      	orrs	r3, r2
 800a48e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a494:	2b04      	cmp	r3, #4
 800a496:	d107      	bne.n	800a4a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	697a      	ldr	r2, [r7, #20]
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	697a      	ldr	r2, [r7, #20]
 800a4ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	695b      	ldr	r3, [r3, #20]
 800a4b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	f023 0307 	bic.w	r3, r3, #7
 800a4be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c4:	697a      	ldr	r2, [r7, #20]
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ce:	2b04      	cmp	r3, #4
 800a4d0:	d117      	bne.n	800a502 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d6:	697a      	ldr	r2, [r7, #20]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00e      	beq.n	800a502 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 fa9d 	bl	800aa24 <DMA_CheckFifoParam>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d008      	beq.n	800a502 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2240      	movs	r2, #64	; 0x40
 800a4f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a4fe:	2301      	movs	r3, #1
 800a500:	e016      	b.n	800a530 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 fa54 	bl	800a9b8 <DMA_CalcBaseAndBitshift>
 800a510:	4603      	mov	r3, r0
 800a512:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a518:	223f      	movs	r2, #63	; 0x3f
 800a51a:	409a      	lsls	r2, r3
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2201      	movs	r2, #1
 800a52a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3718      	adds	r7, #24
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	f010803f 	.word	0xf010803f

0800a53c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b086      	sub	sp, #24
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
 800a548:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a552:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d101      	bne.n	800a562 <HAL_DMA_Start_IT+0x26>
 800a55e:	2302      	movs	r3, #2
 800a560:	e040      	b.n	800a5e4 <HAL_DMA_Start_IT+0xa8>
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2201      	movs	r2, #1
 800a566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a570:	b2db      	uxtb	r3, r3
 800a572:	2b01      	cmp	r3, #1
 800a574:	d12f      	bne.n	800a5d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2202      	movs	r2, #2
 800a57a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2200      	movs	r2, #0
 800a582:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	68b9      	ldr	r1, [r7, #8]
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f000 f9e6 	bl	800a95c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a594:	223f      	movs	r2, #63	; 0x3f
 800a596:	409a      	lsls	r2, r3
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f042 0216 	orr.w	r2, r2, #22
 800a5aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d007      	beq.n	800a5c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f042 0208 	orr.w	r2, r2, #8
 800a5c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f042 0201 	orr.w	r2, r2, #1
 800a5d2:	601a      	str	r2, [r3, #0]
 800a5d4:	e005      	b.n	800a5e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a5de:	2302      	movs	r3, #2
 800a5e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a5e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3718      	adds	r7, #24
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	d004      	beq.n	800a60a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2280      	movs	r2, #128	; 0x80
 800a604:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	e00c      	b.n	800a624 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2205      	movs	r2, #5
 800a60e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f022 0201 	bic.w	r2, r2, #1
 800a620:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a638:	2300      	movs	r3, #0
 800a63a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a63c:	4b92      	ldr	r3, [pc, #584]	; (800a888 <HAL_DMA_IRQHandler+0x258>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a92      	ldr	r2, [pc, #584]	; (800a88c <HAL_DMA_IRQHandler+0x25c>)
 800a642:	fba2 2303 	umull	r2, r3, r2, r3
 800a646:	0a9b      	lsrs	r3, r3, #10
 800a648:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a64e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a65a:	2208      	movs	r2, #8
 800a65c:	409a      	lsls	r2, r3
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	4013      	ands	r3, r2
 800a662:	2b00      	cmp	r3, #0
 800a664:	d01a      	beq.n	800a69c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f003 0304 	and.w	r3, r3, #4
 800a670:	2b00      	cmp	r3, #0
 800a672:	d013      	beq.n	800a69c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f022 0204 	bic.w	r2, r2, #4
 800a682:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a688:	2208      	movs	r2, #8
 800a68a:	409a      	lsls	r2, r3
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a694:	f043 0201 	orr.w	r2, r3, #1
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	409a      	lsls	r2, r3
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	4013      	ands	r3, r2
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d012      	beq.n	800a6d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	695b      	ldr	r3, [r3, #20]
 800a6b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d00b      	beq.n	800a6d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6be:	2201      	movs	r2, #1
 800a6c0:	409a      	lsls	r2, r3
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ca:	f043 0202 	orr.w	r2, r3, #2
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6d6:	2204      	movs	r2, #4
 800a6d8:	409a      	lsls	r2, r3
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	4013      	ands	r3, r2
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d012      	beq.n	800a708 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 0302 	and.w	r3, r3, #2
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d00b      	beq.n	800a708 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6f4:	2204      	movs	r2, #4
 800a6f6:	409a      	lsls	r2, r3
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a700:	f043 0204 	orr.w	r2, r3, #4
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a70c:	2210      	movs	r2, #16
 800a70e:	409a      	lsls	r2, r3
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	4013      	ands	r3, r2
 800a714:	2b00      	cmp	r3, #0
 800a716:	d043      	beq.n	800a7a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 0308 	and.w	r3, r3, #8
 800a722:	2b00      	cmp	r3, #0
 800a724:	d03c      	beq.n	800a7a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a72a:	2210      	movs	r2, #16
 800a72c:	409a      	lsls	r2, r3
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d018      	beq.n	800a772 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d108      	bne.n	800a760 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a752:	2b00      	cmp	r3, #0
 800a754:	d024      	beq.n	800a7a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	4798      	blx	r3
 800a75e:	e01f      	b.n	800a7a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a764:	2b00      	cmp	r3, #0
 800a766:	d01b      	beq.n	800a7a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	4798      	blx	r3
 800a770:	e016      	b.n	800a7a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d107      	bne.n	800a790 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f022 0208 	bic.w	r2, r2, #8
 800a78e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a794:	2b00      	cmp	r3, #0
 800a796:	d003      	beq.n	800a7a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7a4:	2220      	movs	r2, #32
 800a7a6:	409a      	lsls	r2, r3
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	4013      	ands	r3, r2
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f000 808e 	beq.w	800a8ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 0310 	and.w	r3, r3, #16
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f000 8086 	beq.w	800a8ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7c6:	2220      	movs	r2, #32
 800a7c8:	409a      	lsls	r2, r3
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	2b05      	cmp	r3, #5
 800a7d8:	d136      	bne.n	800a848 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f022 0216 	bic.w	r2, r2, #22
 800a7e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	695a      	ldr	r2, [r3, #20]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d103      	bne.n	800a80a <HAL_DMA_IRQHandler+0x1da>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a806:	2b00      	cmp	r3, #0
 800a808:	d007      	beq.n	800a81a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f022 0208 	bic.w	r2, r2, #8
 800a818:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a81e:	223f      	movs	r2, #63	; 0x3f
 800a820:	409a      	lsls	r2, r3
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2201      	movs	r2, #1
 800a832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d07d      	beq.n	800a93a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	4798      	blx	r3
        }
        return;
 800a846:	e078      	b.n	800a93a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a852:	2b00      	cmp	r3, #0
 800a854:	d01c      	beq.n	800a890 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a860:	2b00      	cmp	r3, #0
 800a862:	d108      	bne.n	800a876 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d030      	beq.n	800a8ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	4798      	blx	r3
 800a874:	e02b      	b.n	800a8ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d027      	beq.n	800a8ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	4798      	blx	r3
 800a886:	e022      	b.n	800a8ce <HAL_DMA_IRQHandler+0x29e>
 800a888:	20000000 	.word	0x20000000
 800a88c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d10f      	bne.n	800a8be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f022 0210 	bic.w	r2, r2, #16
 800a8ac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d003      	beq.n	800a8ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d032      	beq.n	800a93c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8da:	f003 0301 	and.w	r3, r3, #1
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d022      	beq.n	800a928 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2205      	movs	r2, #5
 800a8e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f022 0201 	bic.w	r2, r2, #1
 800a8f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	60bb      	str	r3, [r7, #8]
 800a900:	697a      	ldr	r2, [r7, #20]
 800a902:	429a      	cmp	r2, r3
 800a904:	d307      	bcc.n	800a916 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f003 0301 	and.w	r3, r3, #1
 800a910:	2b00      	cmp	r3, #0
 800a912:	d1f2      	bne.n	800a8fa <HAL_DMA_IRQHandler+0x2ca>
 800a914:	e000      	b.n	800a918 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a916:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2201      	movs	r2, #1
 800a924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d005      	beq.n	800a93c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	4798      	blx	r3
 800a938:	e000      	b.n	800a93c <HAL_DMA_IRQHandler+0x30c>
        return;
 800a93a:	bf00      	nop
    }
  }
}
 800a93c:	3718      	adds	r7, #24
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop

0800a944 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a950:	4618      	mov	r0, r3
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b085      	sub	sp, #20
 800a960:	af00      	add	r7, sp, #0
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	607a      	str	r2, [r7, #4]
 800a968:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a978:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	683a      	ldr	r2, [r7, #0]
 800a980:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	689b      	ldr	r3, [r3, #8]
 800a986:	2b40      	cmp	r3, #64	; 0x40
 800a988:	d108      	bne.n	800a99c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	68ba      	ldr	r2, [r7, #8]
 800a998:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a99a:	e007      	b.n	800a9ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	68ba      	ldr	r2, [r7, #8]
 800a9a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	60da      	str	r2, [r3, #12]
}
 800a9ac:	bf00      	nop
 800a9ae:	3714      	adds	r7, #20
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	3b10      	subs	r3, #16
 800a9c8:	4a14      	ldr	r2, [pc, #80]	; (800aa1c <DMA_CalcBaseAndBitshift+0x64>)
 800a9ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a9ce:	091b      	lsrs	r3, r3, #4
 800a9d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a9d2:	4a13      	ldr	r2, [pc, #76]	; (800aa20 <DMA_CalcBaseAndBitshift+0x68>)
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	4413      	add	r3, r2
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d909      	bls.n	800a9fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a9ee:	f023 0303 	bic.w	r3, r3, #3
 800a9f2:	1d1a      	adds	r2, r3, #4
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	659a      	str	r2, [r3, #88]	; 0x58
 800a9f8:	e007      	b.n	800aa0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800aa02:	f023 0303 	bic.w	r3, r3, #3
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3714      	adds	r7, #20
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr
 800aa1a:	bf00      	nop
 800aa1c:	aaaaaaab 	.word	0xaaaaaaab
 800aa20:	0801ad1c 	.word	0x0801ad1c

0800aa24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	699b      	ldr	r3, [r3, #24]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d11f      	bne.n	800aa7e <DMA_CheckFifoParam+0x5a>
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	2b03      	cmp	r3, #3
 800aa42:	d856      	bhi.n	800aaf2 <DMA_CheckFifoParam+0xce>
 800aa44:	a201      	add	r2, pc, #4	; (adr r2, 800aa4c <DMA_CheckFifoParam+0x28>)
 800aa46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa4a:	bf00      	nop
 800aa4c:	0800aa5d 	.word	0x0800aa5d
 800aa50:	0800aa6f 	.word	0x0800aa6f
 800aa54:	0800aa5d 	.word	0x0800aa5d
 800aa58:	0800aaf3 	.word	0x0800aaf3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d046      	beq.n	800aaf6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa6c:	e043      	b.n	800aaf6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aa76:	d140      	bne.n	800aafa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa7c:	e03d      	b.n	800aafa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	699b      	ldr	r3, [r3, #24]
 800aa82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa86:	d121      	bne.n	800aacc <DMA_CheckFifoParam+0xa8>
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	2b03      	cmp	r3, #3
 800aa8c:	d837      	bhi.n	800aafe <DMA_CheckFifoParam+0xda>
 800aa8e:	a201      	add	r2, pc, #4	; (adr r2, 800aa94 <DMA_CheckFifoParam+0x70>)
 800aa90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa94:	0800aaa5 	.word	0x0800aaa5
 800aa98:	0800aaab 	.word	0x0800aaab
 800aa9c:	0800aaa5 	.word	0x0800aaa5
 800aaa0:	0800aabd 	.word	0x0800aabd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	73fb      	strb	r3, [r7, #15]
      break;
 800aaa8:	e030      	b.n	800ab0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d025      	beq.n	800ab02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800aab6:	2301      	movs	r3, #1
 800aab8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aaba:	e022      	b.n	800ab02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aac4:	d11f      	bne.n	800ab06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aaca:	e01c      	b.n	800ab06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	2b02      	cmp	r3, #2
 800aad0:	d903      	bls.n	800aada <DMA_CheckFifoParam+0xb6>
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	2b03      	cmp	r3, #3
 800aad6:	d003      	beq.n	800aae0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aad8:	e018      	b.n	800ab0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	73fb      	strb	r3, [r7, #15]
      break;
 800aade:	e015      	b.n	800ab0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00e      	beq.n	800ab0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800aaec:	2301      	movs	r3, #1
 800aaee:	73fb      	strb	r3, [r7, #15]
      break;
 800aaf0:	e00b      	b.n	800ab0a <DMA_CheckFifoParam+0xe6>
      break;
 800aaf2:	bf00      	nop
 800aaf4:	e00a      	b.n	800ab0c <DMA_CheckFifoParam+0xe8>
      break;
 800aaf6:	bf00      	nop
 800aaf8:	e008      	b.n	800ab0c <DMA_CheckFifoParam+0xe8>
      break;
 800aafa:	bf00      	nop
 800aafc:	e006      	b.n	800ab0c <DMA_CheckFifoParam+0xe8>
      break;
 800aafe:	bf00      	nop
 800ab00:	e004      	b.n	800ab0c <DMA_CheckFifoParam+0xe8>
      break;
 800ab02:	bf00      	nop
 800ab04:	e002      	b.n	800ab0c <DMA_CheckFifoParam+0xe8>
      break;   
 800ab06:	bf00      	nop
 800ab08:	e000      	b.n	800ab0c <DMA_CheckFifoParam+0xe8>
      break;
 800ab0a:	bf00      	nop
    }
  } 
  
  return status; 
 800ab0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3714      	adds	r7, #20
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop

0800ab1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b089      	sub	sp, #36	; 0x24
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ab26:	2300      	movs	r3, #0
 800ab28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ab32:	2300      	movs	r3, #0
 800ab34:	61fb      	str	r3, [r7, #28]
 800ab36:	e177      	b.n	800ae28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ab38:	2201      	movs	r2, #1
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	4013      	ands	r3, r2
 800ab4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ab4c:	693a      	ldr	r2, [r7, #16]
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	f040 8166 	bne.w	800ae22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d00b      	beq.n	800ab76 <HAL_GPIO_Init+0x5a>
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	2b02      	cmp	r3, #2
 800ab64:	d007      	beq.n	800ab76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ab6a:	2b11      	cmp	r3, #17
 800ab6c:	d003      	beq.n	800ab76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	2b12      	cmp	r3, #18
 800ab74:	d130      	bne.n	800abd8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	005b      	lsls	r3, r3, #1
 800ab80:	2203      	movs	r2, #3
 800ab82:	fa02 f303 	lsl.w	r3, r2, r3
 800ab86:	43db      	mvns	r3, r3
 800ab88:	69ba      	ldr	r2, [r7, #24]
 800ab8a:	4013      	ands	r3, r2
 800ab8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	68da      	ldr	r2, [r3, #12]
 800ab92:	69fb      	ldr	r3, [r7, #28]
 800ab94:	005b      	lsls	r3, r3, #1
 800ab96:	fa02 f303 	lsl.w	r3, r2, r3
 800ab9a:	69ba      	ldr	r2, [r7, #24]
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	69ba      	ldr	r2, [r7, #24]
 800aba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800abac:	2201      	movs	r2, #1
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	fa02 f303 	lsl.w	r3, r2, r3
 800abb4:	43db      	mvns	r3, r3
 800abb6:	69ba      	ldr	r2, [r7, #24]
 800abb8:	4013      	ands	r3, r2
 800abba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	091b      	lsrs	r3, r3, #4
 800abc2:	f003 0201 	and.w	r2, r3, #1
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	fa02 f303 	lsl.w	r3, r2, r3
 800abcc:	69ba      	ldr	r2, [r7, #24]
 800abce:	4313      	orrs	r3, r2
 800abd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	69ba      	ldr	r2, [r7, #24]
 800abd6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	005b      	lsls	r3, r3, #1
 800abe2:	2203      	movs	r2, #3
 800abe4:	fa02 f303 	lsl.w	r3, r2, r3
 800abe8:	43db      	mvns	r3, r3
 800abea:	69ba      	ldr	r2, [r7, #24]
 800abec:	4013      	ands	r3, r2
 800abee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	689a      	ldr	r2, [r3, #8]
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	005b      	lsls	r3, r3, #1
 800abf8:	fa02 f303 	lsl.w	r3, r2, r3
 800abfc:	69ba      	ldr	r2, [r7, #24]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	69ba      	ldr	r2, [r7, #24]
 800ac06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	2b02      	cmp	r3, #2
 800ac0e:	d003      	beq.n	800ac18 <HAL_GPIO_Init+0xfc>
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	2b12      	cmp	r3, #18
 800ac16:	d123      	bne.n	800ac60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	08da      	lsrs	r2, r3, #3
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	3208      	adds	r2, #8
 800ac20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	f003 0307 	and.w	r3, r3, #7
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	220f      	movs	r2, #15
 800ac30:	fa02 f303 	lsl.w	r3, r2, r3
 800ac34:	43db      	mvns	r3, r3
 800ac36:	69ba      	ldr	r2, [r7, #24]
 800ac38:	4013      	ands	r3, r2
 800ac3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	691a      	ldr	r2, [r3, #16]
 800ac40:	69fb      	ldr	r3, [r7, #28]
 800ac42:	f003 0307 	and.w	r3, r3, #7
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	fa02 f303 	lsl.w	r3, r2, r3
 800ac4c:	69ba      	ldr	r2, [r7, #24]
 800ac4e:	4313      	orrs	r3, r2
 800ac50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	08da      	lsrs	r2, r3, #3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	3208      	adds	r2, #8
 800ac5a:	69b9      	ldr	r1, [r7, #24]
 800ac5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	005b      	lsls	r3, r3, #1
 800ac6a:	2203      	movs	r2, #3
 800ac6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac70:	43db      	mvns	r3, r3
 800ac72:	69ba      	ldr	r2, [r7, #24]
 800ac74:	4013      	ands	r3, r2
 800ac76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	f003 0203 	and.w	r2, r3, #3
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	005b      	lsls	r3, r3, #1
 800ac84:	fa02 f303 	lsl.w	r3, r2, r3
 800ac88:	69ba      	ldr	r2, [r7, #24]
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	69ba      	ldr	r2, [r7, #24]
 800ac92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f000 80c0 	beq.w	800ae22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aca2:	2300      	movs	r3, #0
 800aca4:	60fb      	str	r3, [r7, #12]
 800aca6:	4b66      	ldr	r3, [pc, #408]	; (800ae40 <HAL_GPIO_Init+0x324>)
 800aca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acaa:	4a65      	ldr	r2, [pc, #404]	; (800ae40 <HAL_GPIO_Init+0x324>)
 800acac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800acb0:	6453      	str	r3, [r2, #68]	; 0x44
 800acb2:	4b63      	ldr	r3, [pc, #396]	; (800ae40 <HAL_GPIO_Init+0x324>)
 800acb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acba:	60fb      	str	r3, [r7, #12]
 800acbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800acbe:	4a61      	ldr	r2, [pc, #388]	; (800ae44 <HAL_GPIO_Init+0x328>)
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	089b      	lsrs	r3, r3, #2
 800acc4:	3302      	adds	r3, #2
 800acc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	f003 0303 	and.w	r3, r3, #3
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	220f      	movs	r2, #15
 800acd6:	fa02 f303 	lsl.w	r3, r2, r3
 800acda:	43db      	mvns	r3, r3
 800acdc:	69ba      	ldr	r2, [r7, #24]
 800acde:	4013      	ands	r3, r2
 800ace0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4a58      	ldr	r2, [pc, #352]	; (800ae48 <HAL_GPIO_Init+0x32c>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d037      	beq.n	800ad5a <HAL_GPIO_Init+0x23e>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	4a57      	ldr	r2, [pc, #348]	; (800ae4c <HAL_GPIO_Init+0x330>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d031      	beq.n	800ad56 <HAL_GPIO_Init+0x23a>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a56      	ldr	r2, [pc, #344]	; (800ae50 <HAL_GPIO_Init+0x334>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d02b      	beq.n	800ad52 <HAL_GPIO_Init+0x236>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4a55      	ldr	r2, [pc, #340]	; (800ae54 <HAL_GPIO_Init+0x338>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d025      	beq.n	800ad4e <HAL_GPIO_Init+0x232>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4a54      	ldr	r2, [pc, #336]	; (800ae58 <HAL_GPIO_Init+0x33c>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d01f      	beq.n	800ad4a <HAL_GPIO_Init+0x22e>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4a53      	ldr	r2, [pc, #332]	; (800ae5c <HAL_GPIO_Init+0x340>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d019      	beq.n	800ad46 <HAL_GPIO_Init+0x22a>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4a52      	ldr	r2, [pc, #328]	; (800ae60 <HAL_GPIO_Init+0x344>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d013      	beq.n	800ad42 <HAL_GPIO_Init+0x226>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4a51      	ldr	r2, [pc, #324]	; (800ae64 <HAL_GPIO_Init+0x348>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d00d      	beq.n	800ad3e <HAL_GPIO_Init+0x222>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	4a50      	ldr	r2, [pc, #320]	; (800ae68 <HAL_GPIO_Init+0x34c>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d007      	beq.n	800ad3a <HAL_GPIO_Init+0x21e>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4a4f      	ldr	r2, [pc, #316]	; (800ae6c <HAL_GPIO_Init+0x350>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d101      	bne.n	800ad36 <HAL_GPIO_Init+0x21a>
 800ad32:	2309      	movs	r3, #9
 800ad34:	e012      	b.n	800ad5c <HAL_GPIO_Init+0x240>
 800ad36:	230a      	movs	r3, #10
 800ad38:	e010      	b.n	800ad5c <HAL_GPIO_Init+0x240>
 800ad3a:	2308      	movs	r3, #8
 800ad3c:	e00e      	b.n	800ad5c <HAL_GPIO_Init+0x240>
 800ad3e:	2307      	movs	r3, #7
 800ad40:	e00c      	b.n	800ad5c <HAL_GPIO_Init+0x240>
 800ad42:	2306      	movs	r3, #6
 800ad44:	e00a      	b.n	800ad5c <HAL_GPIO_Init+0x240>
 800ad46:	2305      	movs	r3, #5
 800ad48:	e008      	b.n	800ad5c <HAL_GPIO_Init+0x240>
 800ad4a:	2304      	movs	r3, #4
 800ad4c:	e006      	b.n	800ad5c <HAL_GPIO_Init+0x240>
 800ad4e:	2303      	movs	r3, #3
 800ad50:	e004      	b.n	800ad5c <HAL_GPIO_Init+0x240>
 800ad52:	2302      	movs	r3, #2
 800ad54:	e002      	b.n	800ad5c <HAL_GPIO_Init+0x240>
 800ad56:	2301      	movs	r3, #1
 800ad58:	e000      	b.n	800ad5c <HAL_GPIO_Init+0x240>
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	69fa      	ldr	r2, [r7, #28]
 800ad5e:	f002 0203 	and.w	r2, r2, #3
 800ad62:	0092      	lsls	r2, r2, #2
 800ad64:	4093      	lsls	r3, r2
 800ad66:	69ba      	ldr	r2, [r7, #24]
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ad6c:	4935      	ldr	r1, [pc, #212]	; (800ae44 <HAL_GPIO_Init+0x328>)
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	089b      	lsrs	r3, r3, #2
 800ad72:	3302      	adds	r3, #2
 800ad74:	69ba      	ldr	r2, [r7, #24]
 800ad76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ad7a:	4b3d      	ldr	r3, [pc, #244]	; (800ae70 <HAL_GPIO_Init+0x354>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	43db      	mvns	r3, r3
 800ad84:	69ba      	ldr	r2, [r7, #24]
 800ad86:	4013      	ands	r3, r2
 800ad88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d003      	beq.n	800ad9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800ad96:	69ba      	ldr	r2, [r7, #24]
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ad9e:	4a34      	ldr	r2, [pc, #208]	; (800ae70 <HAL_GPIO_Init+0x354>)
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ada4:	4b32      	ldr	r3, [pc, #200]	; (800ae70 <HAL_GPIO_Init+0x354>)
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	43db      	mvns	r3, r3
 800adae:	69ba      	ldr	r2, [r7, #24]
 800adb0:	4013      	ands	r3, r2
 800adb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d003      	beq.n	800adc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800adc0:	69ba      	ldr	r2, [r7, #24]
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	4313      	orrs	r3, r2
 800adc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800adc8:	4a29      	ldr	r2, [pc, #164]	; (800ae70 <HAL_GPIO_Init+0x354>)
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800adce:	4b28      	ldr	r3, [pc, #160]	; (800ae70 <HAL_GPIO_Init+0x354>)
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	43db      	mvns	r3, r3
 800add8:	69ba      	ldr	r2, [r7, #24]
 800adda:	4013      	ands	r3, r2
 800addc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d003      	beq.n	800adf2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800adea:	69ba      	ldr	r2, [r7, #24]
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	4313      	orrs	r3, r2
 800adf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800adf2:	4a1f      	ldr	r2, [pc, #124]	; (800ae70 <HAL_GPIO_Init+0x354>)
 800adf4:	69bb      	ldr	r3, [r7, #24]
 800adf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800adf8:	4b1d      	ldr	r3, [pc, #116]	; (800ae70 <HAL_GPIO_Init+0x354>)
 800adfa:	68db      	ldr	r3, [r3, #12]
 800adfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	43db      	mvns	r3, r3
 800ae02:	69ba      	ldr	r2, [r7, #24]
 800ae04:	4013      	ands	r3, r2
 800ae06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d003      	beq.n	800ae1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800ae14:	69ba      	ldr	r2, [r7, #24]
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ae1c:	4a14      	ldr	r2, [pc, #80]	; (800ae70 <HAL_GPIO_Init+0x354>)
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	3301      	adds	r3, #1
 800ae26:	61fb      	str	r3, [r7, #28]
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	2b0f      	cmp	r3, #15
 800ae2c:	f67f ae84 	bls.w	800ab38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ae30:	bf00      	nop
 800ae32:	bf00      	nop
 800ae34:	3724      	adds	r7, #36	; 0x24
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	40023800 	.word	0x40023800
 800ae44:	40013800 	.word	0x40013800
 800ae48:	40020000 	.word	0x40020000
 800ae4c:	40020400 	.word	0x40020400
 800ae50:	40020800 	.word	0x40020800
 800ae54:	40020c00 	.word	0x40020c00
 800ae58:	40021000 	.word	0x40021000
 800ae5c:	40021400 	.word	0x40021400
 800ae60:	40021800 	.word	0x40021800
 800ae64:	40021c00 	.word	0x40021c00
 800ae68:	40022000 	.word	0x40022000
 800ae6c:	40022400 	.word	0x40022400
 800ae70:	40013c00 	.word	0x40013c00

0800ae74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	691a      	ldr	r2, [r3, #16]
 800ae84:	887b      	ldrh	r3, [r7, #2]
 800ae86:	4013      	ands	r3, r2
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d002      	beq.n	800ae92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	73fb      	strb	r3, [r7, #15]
 800ae90:	e001      	b.n	800ae96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ae92:	2300      	movs	r3, #0
 800ae94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ae96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3714      	adds	r7, #20
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr

0800aea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	460b      	mov	r3, r1
 800aeae:	807b      	strh	r3, [r7, #2]
 800aeb0:	4613      	mov	r3, r2
 800aeb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800aeb4:	787b      	ldrb	r3, [r7, #1]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d003      	beq.n	800aec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800aeba:	887a      	ldrh	r2, [r7, #2]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800aec0:	e003      	b.n	800aeca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800aec2:	887b      	ldrh	r3, [r7, #2]
 800aec4:	041a      	lsls	r2, r3, #16
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	619a      	str	r2, [r3, #24]
}
 800aeca:	bf00      	nop
 800aecc:	370c      	adds	r7, #12
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
	...

0800aed8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d101      	bne.n	800aeea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800aee6:	2301      	movs	r3, #1
 800aee8:	e12b      	b.n	800b142 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d106      	bne.n	800af04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f7fb fe6c 	bl	8006bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2224      	movs	r2, #36	; 0x24
 800af08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f022 0201 	bic.w	r2, r2, #1
 800af1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800af3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800af3c:	f001 f984 	bl	800c248 <HAL_RCC_GetPCLK1Freq>
 800af40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	4a81      	ldr	r2, [pc, #516]	; (800b14c <HAL_I2C_Init+0x274>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d807      	bhi.n	800af5c <HAL_I2C_Init+0x84>
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	4a80      	ldr	r2, [pc, #512]	; (800b150 <HAL_I2C_Init+0x278>)
 800af50:	4293      	cmp	r3, r2
 800af52:	bf94      	ite	ls
 800af54:	2301      	movls	r3, #1
 800af56:	2300      	movhi	r3, #0
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	e006      	b.n	800af6a <HAL_I2C_Init+0x92>
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	4a7d      	ldr	r2, [pc, #500]	; (800b154 <HAL_I2C_Init+0x27c>)
 800af60:	4293      	cmp	r3, r2
 800af62:	bf94      	ite	ls
 800af64:	2301      	movls	r3, #1
 800af66:	2300      	movhi	r3, #0
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d001      	beq.n	800af72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	e0e7      	b.n	800b142 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	4a78      	ldr	r2, [pc, #480]	; (800b158 <HAL_I2C_Init+0x280>)
 800af76:	fba2 2303 	umull	r2, r3, r2, r3
 800af7a:	0c9b      	lsrs	r3, r3, #18
 800af7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	68ba      	ldr	r2, [r7, #8]
 800af8e:	430a      	orrs	r2, r1
 800af90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	6a1b      	ldr	r3, [r3, #32]
 800af98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	4a6a      	ldr	r2, [pc, #424]	; (800b14c <HAL_I2C_Init+0x274>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d802      	bhi.n	800afac <HAL_I2C_Init+0xd4>
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	3301      	adds	r3, #1
 800afaa:	e009      	b.n	800afc0 <HAL_I2C_Init+0xe8>
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800afb2:	fb02 f303 	mul.w	r3, r2, r3
 800afb6:	4a69      	ldr	r2, [pc, #420]	; (800b15c <HAL_I2C_Init+0x284>)
 800afb8:	fba2 2303 	umull	r2, r3, r2, r3
 800afbc:	099b      	lsrs	r3, r3, #6
 800afbe:	3301      	adds	r3, #1
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	6812      	ldr	r2, [r2, #0]
 800afc4:	430b      	orrs	r3, r1
 800afc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	69db      	ldr	r3, [r3, #28]
 800afce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800afd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	495c      	ldr	r1, [pc, #368]	; (800b14c <HAL_I2C_Init+0x274>)
 800afdc:	428b      	cmp	r3, r1
 800afde:	d819      	bhi.n	800b014 <HAL_I2C_Init+0x13c>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	1e59      	subs	r1, r3, #1
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	005b      	lsls	r3, r3, #1
 800afea:	fbb1 f3f3 	udiv	r3, r1, r3
 800afee:	1c59      	adds	r1, r3, #1
 800aff0:	f640 73fc 	movw	r3, #4092	; 0xffc
 800aff4:	400b      	ands	r3, r1
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d00a      	beq.n	800b010 <HAL_I2C_Init+0x138>
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	1e59      	subs	r1, r3, #1
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	005b      	lsls	r3, r3, #1
 800b004:	fbb1 f3f3 	udiv	r3, r1, r3
 800b008:	3301      	adds	r3, #1
 800b00a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b00e:	e051      	b.n	800b0b4 <HAL_I2C_Init+0x1dc>
 800b010:	2304      	movs	r3, #4
 800b012:	e04f      	b.n	800b0b4 <HAL_I2C_Init+0x1dc>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d111      	bne.n	800b040 <HAL_I2C_Init+0x168>
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	1e58      	subs	r0, r3, #1
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6859      	ldr	r1, [r3, #4]
 800b024:	460b      	mov	r3, r1
 800b026:	005b      	lsls	r3, r3, #1
 800b028:	440b      	add	r3, r1
 800b02a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b02e:	3301      	adds	r3, #1
 800b030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b034:	2b00      	cmp	r3, #0
 800b036:	bf0c      	ite	eq
 800b038:	2301      	moveq	r3, #1
 800b03a:	2300      	movne	r3, #0
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	e012      	b.n	800b066 <HAL_I2C_Init+0x18e>
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	1e58      	subs	r0, r3, #1
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6859      	ldr	r1, [r3, #4]
 800b048:	460b      	mov	r3, r1
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	440b      	add	r3, r1
 800b04e:	0099      	lsls	r1, r3, #2
 800b050:	440b      	add	r3, r1
 800b052:	fbb0 f3f3 	udiv	r3, r0, r3
 800b056:	3301      	adds	r3, #1
 800b058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	bf0c      	ite	eq
 800b060:	2301      	moveq	r3, #1
 800b062:	2300      	movne	r3, #0
 800b064:	b2db      	uxtb	r3, r3
 800b066:	2b00      	cmp	r3, #0
 800b068:	d001      	beq.n	800b06e <HAL_I2C_Init+0x196>
 800b06a:	2301      	movs	r3, #1
 800b06c:	e022      	b.n	800b0b4 <HAL_I2C_Init+0x1dc>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d10e      	bne.n	800b094 <HAL_I2C_Init+0x1bc>
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	1e58      	subs	r0, r3, #1
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6859      	ldr	r1, [r3, #4]
 800b07e:	460b      	mov	r3, r1
 800b080:	005b      	lsls	r3, r3, #1
 800b082:	440b      	add	r3, r1
 800b084:	fbb0 f3f3 	udiv	r3, r0, r3
 800b088:	3301      	adds	r3, #1
 800b08a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b08e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b092:	e00f      	b.n	800b0b4 <HAL_I2C_Init+0x1dc>
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	1e58      	subs	r0, r3, #1
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6859      	ldr	r1, [r3, #4]
 800b09c:	460b      	mov	r3, r1
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	440b      	add	r3, r1
 800b0a2:	0099      	lsls	r1, r3, #2
 800b0a4:	440b      	add	r3, r1
 800b0a6:	fbb0 f3f3 	udiv	r3, r0, r3
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b0b4:	6879      	ldr	r1, [r7, #4]
 800b0b6:	6809      	ldr	r1, [r1, #0]
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	69da      	ldr	r2, [r3, #28]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6a1b      	ldr	r3, [r3, #32]
 800b0ce:	431a      	orrs	r2, r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	430a      	orrs	r2, r1
 800b0d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b0e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	6911      	ldr	r1, [r2, #16]
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	68d2      	ldr	r2, [r2, #12]
 800b0ee:	4311      	orrs	r1, r2
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	6812      	ldr	r2, [r2, #0]
 800b0f4:	430b      	orrs	r3, r1
 800b0f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	695a      	ldr	r2, [r3, #20]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	699b      	ldr	r3, [r3, #24]
 800b10a:	431a      	orrs	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	430a      	orrs	r2, r1
 800b112:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f042 0201 	orr.w	r2, r2, #1
 800b122:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2220      	movs	r2, #32
 800b12e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	000186a0 	.word	0x000186a0
 800b150:	001e847f 	.word	0x001e847f
 800b154:	003d08ff 	.word	0x003d08ff
 800b158:	431bde83 	.word	0x431bde83
 800b15c:	10624dd3 	.word	0x10624dd3

0800b160 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b088      	sub	sp, #32
 800b164:	af02      	add	r7, sp, #8
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	607a      	str	r2, [r7, #4]
 800b16a:	461a      	mov	r2, r3
 800b16c:	460b      	mov	r3, r1
 800b16e:	817b      	strh	r3, [r7, #10]
 800b170:	4613      	mov	r3, r2
 800b172:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b174:	f7fe fbee 	bl	8009954 <HAL_GetTick>
 800b178:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b180:	b2db      	uxtb	r3, r3
 800b182:	2b20      	cmp	r3, #32
 800b184:	f040 80e0 	bne.w	800b348 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	2319      	movs	r3, #25
 800b18e:	2201      	movs	r2, #1
 800b190:	4970      	ldr	r1, [pc, #448]	; (800b354 <HAL_I2C_Master_Transmit+0x1f4>)
 800b192:	68f8      	ldr	r0, [r7, #12]
 800b194:	f000 fc58 	bl	800ba48 <I2C_WaitOnFlagUntilTimeout>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d001      	beq.n	800b1a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b19e:	2302      	movs	r3, #2
 800b1a0:	e0d3      	b.n	800b34a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d101      	bne.n	800b1b0 <HAL_I2C_Master_Transmit+0x50>
 800b1ac:	2302      	movs	r3, #2
 800b1ae:	e0cc      	b.n	800b34a <HAL_I2C_Master_Transmit+0x1ea>
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f003 0301 	and.w	r3, r3, #1
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d007      	beq.n	800b1d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f042 0201 	orr.w	r2, r2, #1
 800b1d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b1e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2221      	movs	r2, #33	; 0x21
 800b1ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2210      	movs	r2, #16
 800b1f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	893a      	ldrh	r2, [r7, #8]
 800b206:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b20c:	b29a      	uxth	r2, r3
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	4a50      	ldr	r2, [pc, #320]	; (800b358 <HAL_I2C_Master_Transmit+0x1f8>)
 800b216:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b218:	8979      	ldrh	r1, [r7, #10]
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	6a3a      	ldr	r2, [r7, #32]
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f000 fac2 	bl	800b7a8 <I2C_MasterRequestWrite>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d001      	beq.n	800b22e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b22a:	2301      	movs	r3, #1
 800b22c:	e08d      	b.n	800b34a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b22e:	2300      	movs	r3, #0
 800b230:	613b      	str	r3, [r7, #16]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	695b      	ldr	r3, [r3, #20]
 800b238:	613b      	str	r3, [r7, #16]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	613b      	str	r3, [r7, #16]
 800b242:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b244:	e066      	b.n	800b314 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b246:	697a      	ldr	r2, [r7, #20]
 800b248:	6a39      	ldr	r1, [r7, #32]
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f000 fcd2 	bl	800bbf4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00d      	beq.n	800b272 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25a:	2b04      	cmp	r3, #4
 800b25c:	d107      	bne.n	800b26e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b26c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	e06b      	b.n	800b34a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b276:	781a      	ldrb	r2, [r3, #0]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b282:	1c5a      	adds	r2, r3, #1
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	3b01      	subs	r3, #1
 800b290:	b29a      	uxth	r2, r3
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b29a:	3b01      	subs	r3, #1
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	695b      	ldr	r3, [r3, #20]
 800b2a8:	f003 0304 	and.w	r3, r3, #4
 800b2ac:	2b04      	cmp	r3, #4
 800b2ae:	d11b      	bne.n	800b2e8 <HAL_I2C_Master_Transmit+0x188>
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d017      	beq.n	800b2e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2bc:	781a      	ldrb	r2, [r3, #0]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c8:	1c5a      	adds	r2, r3, #1
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	b29a      	uxth	r2, r3
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	b29a      	uxth	r2, r3
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2e8:	697a      	ldr	r2, [r7, #20]
 800b2ea:	6a39      	ldr	r1, [r7, #32]
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f000 fcc2 	bl	800bc76 <I2C_WaitOnBTFFlagUntilTimeout>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d00d      	beq.n	800b314 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2fc:	2b04      	cmp	r3, #4
 800b2fe:	d107      	bne.n	800b310 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b30e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b310:	2301      	movs	r3, #1
 800b312:	e01a      	b.n	800b34a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d194      	bne.n	800b246 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b32a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2220      	movs	r2, #32
 800b330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2200      	movs	r2, #0
 800b338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2200      	movs	r2, #0
 800b340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b344:	2300      	movs	r3, #0
 800b346:	e000      	b.n	800b34a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b348:	2302      	movs	r3, #2
  }
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3718      	adds	r7, #24
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	00100002 	.word	0x00100002
 800b358:	ffff0000 	.word	0xffff0000

0800b35c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b08c      	sub	sp, #48	; 0x30
 800b360:	af02      	add	r7, sp, #8
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	607a      	str	r2, [r7, #4]
 800b366:	461a      	mov	r2, r3
 800b368:	460b      	mov	r3, r1
 800b36a:	817b      	strh	r3, [r7, #10]
 800b36c:	4613      	mov	r3, r2
 800b36e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b370:	f7fe faf0 	bl	8009954 <HAL_GetTick>
 800b374:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	2b20      	cmp	r3, #32
 800b380:	f040 820b 	bne.w	800b79a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b386:	9300      	str	r3, [sp, #0]
 800b388:	2319      	movs	r3, #25
 800b38a:	2201      	movs	r2, #1
 800b38c:	497c      	ldr	r1, [pc, #496]	; (800b580 <HAL_I2C_Master_Receive+0x224>)
 800b38e:	68f8      	ldr	r0, [r7, #12]
 800b390:	f000 fb5a 	bl	800ba48 <I2C_WaitOnFlagUntilTimeout>
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d001      	beq.n	800b39e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b39a:	2302      	movs	r3, #2
 800b39c:	e1fe      	b.n	800b79c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d101      	bne.n	800b3ac <HAL_I2C_Master_Receive+0x50>
 800b3a8:	2302      	movs	r3, #2
 800b3aa:	e1f7      	b.n	800b79c <HAL_I2C_Master_Receive+0x440>
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f003 0301 	and.w	r3, r3, #1
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d007      	beq.n	800b3d2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f042 0201 	orr.w	r2, r2, #1
 800b3d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b3e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2222      	movs	r2, #34	; 0x22
 800b3e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2210      	movs	r2, #16
 800b3ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	893a      	ldrh	r2, [r7, #8]
 800b402:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b408:	b29a      	uxth	r2, r3
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	4a5c      	ldr	r2, [pc, #368]	; (800b584 <HAL_I2C_Master_Receive+0x228>)
 800b412:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b414:	8979      	ldrh	r1, [r7, #10]
 800b416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f000 fa46 	bl	800b8ac <I2C_MasterRequestRead>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d001      	beq.n	800b42a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	e1b8      	b.n	800b79c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d113      	bne.n	800b45a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b432:	2300      	movs	r3, #0
 800b434:	623b      	str	r3, [r7, #32]
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	695b      	ldr	r3, [r3, #20]
 800b43c:	623b      	str	r3, [r7, #32]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	699b      	ldr	r3, [r3, #24]
 800b444:	623b      	str	r3, [r7, #32]
 800b446:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b456:	601a      	str	r2, [r3, #0]
 800b458:	e18c      	b.n	800b774 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d11b      	bne.n	800b49a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b470:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b472:	2300      	movs	r3, #0
 800b474:	61fb      	str	r3, [r7, #28]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	695b      	ldr	r3, [r3, #20]
 800b47c:	61fb      	str	r3, [r7, #28]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	699b      	ldr	r3, [r3, #24]
 800b484:	61fb      	str	r3, [r7, #28]
 800b486:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b496:	601a      	str	r2, [r3, #0]
 800b498:	e16c      	b.n	800b774 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d11b      	bne.n	800b4da <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	61bb      	str	r3, [r7, #24]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	695b      	ldr	r3, [r3, #20]
 800b4cc:	61bb      	str	r3, [r7, #24]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	699b      	ldr	r3, [r3, #24]
 800b4d4:	61bb      	str	r3, [r7, #24]
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	e14c      	b.n	800b774 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b4e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	617b      	str	r3, [r7, #20]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	695b      	ldr	r3, [r3, #20]
 800b4f4:	617b      	str	r3, [r7, #20]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	699b      	ldr	r3, [r3, #24]
 800b4fc:	617b      	str	r3, [r7, #20]
 800b4fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b500:	e138      	b.n	800b774 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b506:	2b03      	cmp	r3, #3
 800b508:	f200 80f1 	bhi.w	800b6ee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b510:	2b01      	cmp	r3, #1
 800b512:	d123      	bne.n	800b55c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b518:	68f8      	ldr	r0, [r7, #12]
 800b51a:	f000 fbed 	bl	800bcf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b51e:	4603      	mov	r3, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d001      	beq.n	800b528 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b524:	2301      	movs	r3, #1
 800b526:	e139      	b.n	800b79c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	691a      	ldr	r2, [r3, #16]
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b532:	b2d2      	uxtb	r2, r2
 800b534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53a:	1c5a      	adds	r2, r3, #1
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b544:	3b01      	subs	r3, #1
 800b546:	b29a      	uxth	r2, r3
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b550:	b29b      	uxth	r3, r3
 800b552:	3b01      	subs	r3, #1
 800b554:	b29a      	uxth	r2, r3
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b55a:	e10b      	b.n	800b774 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b560:	2b02      	cmp	r3, #2
 800b562:	d14e      	bne.n	800b602 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b566:	9300      	str	r3, [sp, #0]
 800b568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56a:	2200      	movs	r2, #0
 800b56c:	4906      	ldr	r1, [pc, #24]	; (800b588 <HAL_I2C_Master_Receive+0x22c>)
 800b56e:	68f8      	ldr	r0, [r7, #12]
 800b570:	f000 fa6a 	bl	800ba48 <I2C_WaitOnFlagUntilTimeout>
 800b574:	4603      	mov	r3, r0
 800b576:	2b00      	cmp	r3, #0
 800b578:	d008      	beq.n	800b58c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	e10e      	b.n	800b79c <HAL_I2C_Master_Receive+0x440>
 800b57e:	bf00      	nop
 800b580:	00100002 	.word	0x00100002
 800b584:	ffff0000 	.word	0xffff0000
 800b588:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b59a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	691a      	ldr	r2, [r3, #16]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a6:	b2d2      	uxtb	r2, r2
 800b5a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ae:	1c5a      	adds	r2, r3, #1
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5b8:	3b01      	subs	r3, #1
 800b5ba:	b29a      	uxth	r2, r3
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	b29a      	uxth	r2, r3
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	691a      	ldr	r2, [r3, #16]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d8:	b2d2      	uxtb	r2, r2
 800b5da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e0:	1c5a      	adds	r2, r3, #1
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5ea:	3b01      	subs	r3, #1
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	3b01      	subs	r3, #1
 800b5fa:	b29a      	uxth	r2, r3
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b600:	e0b8      	b.n	800b774 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b604:	9300      	str	r3, [sp, #0]
 800b606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b608:	2200      	movs	r2, #0
 800b60a:	4966      	ldr	r1, [pc, #408]	; (800b7a4 <HAL_I2C_Master_Receive+0x448>)
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f000 fa1b 	bl	800ba48 <I2C_WaitOnFlagUntilTimeout>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d001      	beq.n	800b61c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b618:	2301      	movs	r3, #1
 800b61a:	e0bf      	b.n	800b79c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b62a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	691a      	ldr	r2, [r3, #16]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b636:	b2d2      	uxtb	r2, r2
 800b638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63e:	1c5a      	adds	r2, r3, #1
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b648:	3b01      	subs	r3, #1
 800b64a:	b29a      	uxth	r2, r3
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b654:	b29b      	uxth	r3, r3
 800b656:	3b01      	subs	r3, #1
 800b658:	b29a      	uxth	r2, r3
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b660:	9300      	str	r3, [sp, #0]
 800b662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b664:	2200      	movs	r2, #0
 800b666:	494f      	ldr	r1, [pc, #316]	; (800b7a4 <HAL_I2C_Master_Receive+0x448>)
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f000 f9ed 	bl	800ba48 <I2C_WaitOnFlagUntilTimeout>
 800b66e:	4603      	mov	r3, r0
 800b670:	2b00      	cmp	r3, #0
 800b672:	d001      	beq.n	800b678 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	e091      	b.n	800b79c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	691a      	ldr	r2, [r3, #16]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b692:	b2d2      	uxtb	r2, r2
 800b694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69a:	1c5a      	adds	r2, r3, #1
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	b29a      	uxth	r2, r3
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	b29a      	uxth	r2, r3
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	691a      	ldr	r2, [r3, #16]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c4:	b2d2      	uxtb	r2, r2
 800b6c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6cc:	1c5a      	adds	r2, r3, #1
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	b29a      	uxth	r2, r3
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	3b01      	subs	r3, #1
 800b6e6:	b29a      	uxth	r2, r3
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b6ec:	e042      	b.n	800b774 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f000 fb00 	bl	800bcf8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d001      	beq.n	800b702 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	e04c      	b.n	800b79c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	691a      	ldr	r2, [r3, #16]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70c:	b2d2      	uxtb	r2, r2
 800b70e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b714:	1c5a      	adds	r2, r3, #1
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b71e:	3b01      	subs	r3, #1
 800b720:	b29a      	uxth	r2, r3
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	3b01      	subs	r3, #1
 800b72e:	b29a      	uxth	r2, r3
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	695b      	ldr	r3, [r3, #20]
 800b73a:	f003 0304 	and.w	r3, r3, #4
 800b73e:	2b04      	cmp	r3, #4
 800b740:	d118      	bne.n	800b774 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	691a      	ldr	r2, [r3, #16]
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b74c:	b2d2      	uxtb	r2, r2
 800b74e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b754:	1c5a      	adds	r2, r3, #1
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b75e:	3b01      	subs	r3, #1
 800b760:	b29a      	uxth	r2, r3
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	3b01      	subs	r3, #1
 800b76e:	b29a      	uxth	r2, r3
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b778:	2b00      	cmp	r3, #0
 800b77a:	f47f aec2 	bne.w	800b502 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2220      	movs	r2, #32
 800b782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2200      	movs	r2, #0
 800b792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b796:	2300      	movs	r3, #0
 800b798:	e000      	b.n	800b79c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b79a:	2302      	movs	r3, #2
  }
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3728      	adds	r7, #40	; 0x28
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	00010004 	.word	0x00010004

0800b7a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b088      	sub	sp, #32
 800b7ac:	af02      	add	r7, sp, #8
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	607a      	str	r2, [r7, #4]
 800b7b2:	603b      	str	r3, [r7, #0]
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	2b08      	cmp	r3, #8
 800b7c2:	d006      	beq.n	800b7d2 <I2C_MasterRequestWrite+0x2a>
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d003      	beq.n	800b7d2 <I2C_MasterRequestWrite+0x2a>
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b7d0:	d108      	bne.n	800b7e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b7e0:	601a      	str	r2, [r3, #0]
 800b7e2:	e00b      	b.n	800b7fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e8:	2b12      	cmp	r3, #18
 800b7ea:	d107      	bne.n	800b7fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b7fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b808:	68f8      	ldr	r0, [r7, #12]
 800b80a:	f000 f91d 	bl	800ba48 <I2C_WaitOnFlagUntilTimeout>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00d      	beq.n	800b830 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b81e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b822:	d103      	bne.n	800b82c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b82a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b82c:	2303      	movs	r3, #3
 800b82e:	e035      	b.n	800b89c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	691b      	ldr	r3, [r3, #16]
 800b834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b838:	d108      	bne.n	800b84c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b83a:	897b      	ldrh	r3, [r7, #10]
 800b83c:	b2db      	uxtb	r3, r3
 800b83e:	461a      	mov	r2, r3
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b848:	611a      	str	r2, [r3, #16]
 800b84a:	e01b      	b.n	800b884 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b84c:	897b      	ldrh	r3, [r7, #10]
 800b84e:	11db      	asrs	r3, r3, #7
 800b850:	b2db      	uxtb	r3, r3
 800b852:	f003 0306 	and.w	r3, r3, #6
 800b856:	b2db      	uxtb	r3, r3
 800b858:	f063 030f 	orn	r3, r3, #15
 800b85c:	b2da      	uxtb	r2, r3
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	490e      	ldr	r1, [pc, #56]	; (800b8a4 <I2C_MasterRequestWrite+0xfc>)
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	f000 f943 	bl	800baf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b870:	4603      	mov	r3, r0
 800b872:	2b00      	cmp	r3, #0
 800b874:	d001      	beq.n	800b87a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b876:	2301      	movs	r3, #1
 800b878:	e010      	b.n	800b89c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b87a:	897b      	ldrh	r3, [r7, #10]
 800b87c:	b2da      	uxtb	r2, r3
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	4907      	ldr	r1, [pc, #28]	; (800b8a8 <I2C_MasterRequestWrite+0x100>)
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	f000 f933 	bl	800baf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	d001      	beq.n	800b89a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b896:	2301      	movs	r3, #1
 800b898:	e000      	b.n	800b89c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b89a:	2300      	movs	r3, #0
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3718      	adds	r7, #24
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	00010008 	.word	0x00010008
 800b8a8:	00010002 	.word	0x00010002

0800b8ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b088      	sub	sp, #32
 800b8b0:	af02      	add	r7, sp, #8
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	607a      	str	r2, [r7, #4]
 800b8b6:	603b      	str	r3, [r7, #0]
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b8d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	2b08      	cmp	r3, #8
 800b8d6:	d006      	beq.n	800b8e6 <I2C_MasterRequestRead+0x3a>
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d003      	beq.n	800b8e6 <I2C_MasterRequestRead+0x3a>
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b8e4:	d108      	bne.n	800b8f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8f4:	601a      	str	r2, [r3, #0]
 800b8f6:	e00b      	b.n	800b910 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8fc:	2b11      	cmp	r3, #17
 800b8fe:	d107      	bne.n	800b910 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b90e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	9300      	str	r3, [sp, #0]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b91c:	68f8      	ldr	r0, [r7, #12]
 800b91e:	f000 f893 	bl	800ba48 <I2C_WaitOnFlagUntilTimeout>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d00d      	beq.n	800b944 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b936:	d103      	bne.n	800b940 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b93e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b940:	2303      	movs	r3, #3
 800b942:	e079      	b.n	800ba38 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	691b      	ldr	r3, [r3, #16]
 800b948:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b94c:	d108      	bne.n	800b960 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b94e:	897b      	ldrh	r3, [r7, #10]
 800b950:	b2db      	uxtb	r3, r3
 800b952:	f043 0301 	orr.w	r3, r3, #1
 800b956:	b2da      	uxtb	r2, r3
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	611a      	str	r2, [r3, #16]
 800b95e:	e05f      	b.n	800ba20 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b960:	897b      	ldrh	r3, [r7, #10]
 800b962:	11db      	asrs	r3, r3, #7
 800b964:	b2db      	uxtb	r3, r3
 800b966:	f003 0306 	and.w	r3, r3, #6
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	f063 030f 	orn	r3, r3, #15
 800b970:	b2da      	uxtb	r2, r3
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	4930      	ldr	r1, [pc, #192]	; (800ba40 <I2C_MasterRequestRead+0x194>)
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f000 f8b9 	bl	800baf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b984:	4603      	mov	r3, r0
 800b986:	2b00      	cmp	r3, #0
 800b988:	d001      	beq.n	800b98e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	e054      	b.n	800ba38 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b98e:	897b      	ldrh	r3, [r7, #10]
 800b990:	b2da      	uxtb	r2, r3
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	687a      	ldr	r2, [r7, #4]
 800b99c:	4929      	ldr	r1, [pc, #164]	; (800ba44 <I2C_MasterRequestRead+0x198>)
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	f000 f8a9 	bl	800baf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d001      	beq.n	800b9ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e044      	b.n	800ba38 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	613b      	str	r3, [r7, #16]
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	695b      	ldr	r3, [r3, #20]
 800b9b8:	613b      	str	r3, [r7, #16]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	699b      	ldr	r3, [r3, #24]
 800b9c0:	613b      	str	r3, [r7, #16]
 800b9c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b9d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b9e0:	68f8      	ldr	r0, [r7, #12]
 800b9e2:	f000 f831 	bl	800ba48 <I2C_WaitOnFlagUntilTimeout>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00d      	beq.n	800ba08 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9fa:	d103      	bne.n	800ba04 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba02:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800ba04:	2303      	movs	r3, #3
 800ba06:	e017      	b.n	800ba38 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800ba08:	897b      	ldrh	r3, [r7, #10]
 800ba0a:	11db      	asrs	r3, r3, #7
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	f003 0306 	and.w	r3, r3, #6
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	f063 030e 	orn	r3, r3, #14
 800ba18:	b2da      	uxtb	r2, r3
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	4907      	ldr	r1, [pc, #28]	; (800ba44 <I2C_MasterRequestRead+0x198>)
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f000 f865 	bl	800baf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d001      	beq.n	800ba36 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800ba32:	2301      	movs	r3, #1
 800ba34:	e000      	b.n	800ba38 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3718      	adds	r7, #24
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	00010008 	.word	0x00010008
 800ba44:	00010002 	.word	0x00010002

0800ba48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	60b9      	str	r1, [r7, #8]
 800ba52:	603b      	str	r3, [r7, #0]
 800ba54:	4613      	mov	r3, r2
 800ba56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba58:	e025      	b.n	800baa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba60:	d021      	beq.n	800baa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba62:	f7fd ff77 	bl	8009954 <HAL_GetTick>
 800ba66:	4602      	mov	r2, r0
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	1ad3      	subs	r3, r2, r3
 800ba6c:	683a      	ldr	r2, [r7, #0]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d302      	bcc.n	800ba78 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d116      	bne.n	800baa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2220      	movs	r2, #32
 800ba82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba92:	f043 0220 	orr.w	r2, r3, #32
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800baa2:	2301      	movs	r3, #1
 800baa4:	e023      	b.n	800baee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	0c1b      	lsrs	r3, r3, #16
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	2b01      	cmp	r3, #1
 800baae:	d10d      	bne.n	800bacc <I2C_WaitOnFlagUntilTimeout+0x84>
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	695b      	ldr	r3, [r3, #20]
 800bab6:	43da      	mvns	r2, r3
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	4013      	ands	r3, r2
 800babc:	b29b      	uxth	r3, r3
 800babe:	2b00      	cmp	r3, #0
 800bac0:	bf0c      	ite	eq
 800bac2:	2301      	moveq	r3, #1
 800bac4:	2300      	movne	r3, #0
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	461a      	mov	r2, r3
 800baca:	e00c      	b.n	800bae6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	699b      	ldr	r3, [r3, #24]
 800bad2:	43da      	mvns	r2, r3
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	4013      	ands	r3, r2
 800bad8:	b29b      	uxth	r3, r3
 800bada:	2b00      	cmp	r3, #0
 800badc:	bf0c      	ite	eq
 800bade:	2301      	moveq	r3, #1
 800bae0:	2300      	movne	r3, #0
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	461a      	mov	r2, r3
 800bae6:	79fb      	ldrb	r3, [r7, #7]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d0b6      	beq.n	800ba5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800baec:	2300      	movs	r3, #0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3710      	adds	r7, #16
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b084      	sub	sp, #16
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	60f8      	str	r0, [r7, #12]
 800bafe:	60b9      	str	r1, [r7, #8]
 800bb00:	607a      	str	r2, [r7, #4]
 800bb02:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bb04:	e051      	b.n	800bbaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	695b      	ldr	r3, [r3, #20]
 800bb0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb14:	d123      	bne.n	800bb5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb24:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bb2e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2200      	movs	r2, #0
 800bb34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2220      	movs	r2, #32
 800bb3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2200      	movs	r2, #0
 800bb42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb4a:	f043 0204 	orr.w	r2, r3, #4
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2200      	movs	r2, #0
 800bb56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e046      	b.n	800bbec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb64:	d021      	beq.n	800bbaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb66:	f7fd fef5 	bl	8009954 <HAL_GetTick>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	1ad3      	subs	r3, r2, r3
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d302      	bcc.n	800bb7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d116      	bne.n	800bbaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2220      	movs	r2, #32
 800bb86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb96:	f043 0220 	orr.w	r2, r3, #32
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2200      	movs	r2, #0
 800bba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	e020      	b.n	800bbec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	0c1b      	lsrs	r3, r3, #16
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d10c      	bne.n	800bbce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	695b      	ldr	r3, [r3, #20]
 800bbba:	43da      	mvns	r2, r3
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	4013      	ands	r3, r2
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	bf14      	ite	ne
 800bbc6:	2301      	movne	r3, #1
 800bbc8:	2300      	moveq	r3, #0
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	e00b      	b.n	800bbe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	699b      	ldr	r3, [r3, #24]
 800bbd4:	43da      	mvns	r2, r3
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	4013      	ands	r3, r2
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	bf14      	ite	ne
 800bbe0:	2301      	movne	r3, #1
 800bbe2:	2300      	moveq	r3, #0
 800bbe4:	b2db      	uxtb	r3, r3
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d18d      	bne.n	800bb06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800bbea:	2300      	movs	r3, #0
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bc00:	e02d      	b.n	800bc5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bc02:	68f8      	ldr	r0, [r7, #12]
 800bc04:	f000 f8ce 	bl	800bda4 <I2C_IsAcknowledgeFailed>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d001      	beq.n	800bc12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bc0e:	2301      	movs	r3, #1
 800bc10:	e02d      	b.n	800bc6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc18:	d021      	beq.n	800bc5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc1a:	f7fd fe9b 	bl	8009954 <HAL_GetTick>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	1ad3      	subs	r3, r2, r3
 800bc24:	68ba      	ldr	r2, [r7, #8]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d302      	bcc.n	800bc30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d116      	bne.n	800bc5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2200      	movs	r2, #0
 800bc34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2220      	movs	r2, #32
 800bc3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2200      	movs	r2, #0
 800bc42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4a:	f043 0220 	orr.w	r2, r3, #32
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2200      	movs	r2, #0
 800bc56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	e007      	b.n	800bc6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	695b      	ldr	r3, [r3, #20]
 800bc64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc68:	2b80      	cmp	r3, #128	; 0x80
 800bc6a:	d1ca      	bne.n	800bc02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b084      	sub	sp, #16
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	60f8      	str	r0, [r7, #12]
 800bc7e:	60b9      	str	r1, [r7, #8]
 800bc80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bc82:	e02d      	b.n	800bce0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bc84:	68f8      	ldr	r0, [r7, #12]
 800bc86:	f000 f88d 	bl	800bda4 <I2C_IsAcknowledgeFailed>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d001      	beq.n	800bc94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bc90:	2301      	movs	r3, #1
 800bc92:	e02d      	b.n	800bcf0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc9a:	d021      	beq.n	800bce0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc9c:	f7fd fe5a 	bl	8009954 <HAL_GetTick>
 800bca0:	4602      	mov	r2, r0
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	1ad3      	subs	r3, r2, r3
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d302      	bcc.n	800bcb2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d116      	bne.n	800bce0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2220      	movs	r2, #32
 800bcbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bccc:	f043 0220 	orr.w	r2, r3, #32
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e007      	b.n	800bcf0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	695b      	ldr	r3, [r3, #20]
 800bce6:	f003 0304 	and.w	r3, r3, #4
 800bcea:	2b04      	cmp	r3, #4
 800bcec:	d1ca      	bne.n	800bc84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bcee:	2300      	movs	r3, #0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3710      	adds	r7, #16
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bd04:	e042      	b.n	800bd8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	695b      	ldr	r3, [r3, #20]
 800bd0c:	f003 0310 	and.w	r3, r3, #16
 800bd10:	2b10      	cmp	r3, #16
 800bd12:	d119      	bne.n	800bd48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f06f 0210 	mvn.w	r2, #16
 800bd1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2200      	movs	r2, #0
 800bd22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2220      	movs	r2, #32
 800bd28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bd44:	2301      	movs	r3, #1
 800bd46:	e029      	b.n	800bd9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd48:	f7fd fe04 	bl	8009954 <HAL_GetTick>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	1ad3      	subs	r3, r2, r3
 800bd52:	68ba      	ldr	r2, [r7, #8]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d302      	bcc.n	800bd5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d116      	bne.n	800bd8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2200      	movs	r2, #0
 800bd62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2220      	movs	r2, #32
 800bd68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd78:	f043 0220 	orr.w	r2, r3, #32
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2200      	movs	r2, #0
 800bd84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	e007      	b.n	800bd9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	695b      	ldr	r3, [r3, #20]
 800bd92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd96:	2b40      	cmp	r3, #64	; 0x40
 800bd98:	d1b5      	bne.n	800bd06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bd9a:	2300      	movs	r3, #0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3710      	adds	r7, #16
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	695b      	ldr	r3, [r3, #20]
 800bdb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bdb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdba:	d11b      	bne.n	800bdf4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bdc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2220      	movs	r2, #32
 800bdd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bde0:	f043 0204 	orr.w	r2, r3, #4
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	e000      	b.n	800bdf6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	370c      	adds	r7, #12
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr
	...

0800be04 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800be0a:	2300      	movs	r3, #0
 800be0c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800be0e:	2300      	movs	r3, #0
 800be10:	603b      	str	r3, [r7, #0]
 800be12:	4b20      	ldr	r3, [pc, #128]	; (800be94 <HAL_PWREx_EnableOverDrive+0x90>)
 800be14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be16:	4a1f      	ldr	r2, [pc, #124]	; (800be94 <HAL_PWREx_EnableOverDrive+0x90>)
 800be18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be1c:	6413      	str	r3, [r2, #64]	; 0x40
 800be1e:	4b1d      	ldr	r3, [pc, #116]	; (800be94 <HAL_PWREx_EnableOverDrive+0x90>)
 800be20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be26:	603b      	str	r3, [r7, #0]
 800be28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800be2a:	4b1b      	ldr	r3, [pc, #108]	; (800be98 <HAL_PWREx_EnableOverDrive+0x94>)
 800be2c:	2201      	movs	r2, #1
 800be2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800be30:	f7fd fd90 	bl	8009954 <HAL_GetTick>
 800be34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800be36:	e009      	b.n	800be4c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800be38:	f7fd fd8c 	bl	8009954 <HAL_GetTick>
 800be3c:	4602      	mov	r2, r0
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	1ad3      	subs	r3, r2, r3
 800be42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be46:	d901      	bls.n	800be4c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800be48:	2303      	movs	r3, #3
 800be4a:	e01f      	b.n	800be8c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800be4c:	4b13      	ldr	r3, [pc, #76]	; (800be9c <HAL_PWREx_EnableOverDrive+0x98>)
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be58:	d1ee      	bne.n	800be38 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800be5a:	4b11      	ldr	r3, [pc, #68]	; (800bea0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800be5c:	2201      	movs	r2, #1
 800be5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800be60:	f7fd fd78 	bl	8009954 <HAL_GetTick>
 800be64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800be66:	e009      	b.n	800be7c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800be68:	f7fd fd74 	bl	8009954 <HAL_GetTick>
 800be6c:	4602      	mov	r2, r0
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	1ad3      	subs	r3, r2, r3
 800be72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be76:	d901      	bls.n	800be7c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800be78:	2303      	movs	r3, #3
 800be7a:	e007      	b.n	800be8c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800be7c:	4b07      	ldr	r3, [pc, #28]	; (800be9c <HAL_PWREx_EnableOverDrive+0x98>)
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be88:	d1ee      	bne.n	800be68 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800be8a:	2300      	movs	r3, #0
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3708      	adds	r7, #8
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}
 800be94:	40023800 	.word	0x40023800
 800be98:	420e0040 	.word	0x420e0040
 800be9c:	40007000 	.word	0x40007000
 800bea0:	420e0044 	.word	0x420e0044

0800bea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d101      	bne.n	800beb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800beb4:	2301      	movs	r3, #1
 800beb6:	e0cc      	b.n	800c052 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800beb8:	4b68      	ldr	r3, [pc, #416]	; (800c05c <HAL_RCC_ClockConfig+0x1b8>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f003 030f 	and.w	r3, r3, #15
 800bec0:	683a      	ldr	r2, [r7, #0]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d90c      	bls.n	800bee0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bec6:	4b65      	ldr	r3, [pc, #404]	; (800c05c <HAL_RCC_ClockConfig+0x1b8>)
 800bec8:	683a      	ldr	r2, [r7, #0]
 800beca:	b2d2      	uxtb	r2, r2
 800becc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bece:	4b63      	ldr	r3, [pc, #396]	; (800c05c <HAL_RCC_ClockConfig+0x1b8>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f003 030f 	and.w	r3, r3, #15
 800bed6:	683a      	ldr	r2, [r7, #0]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d001      	beq.n	800bee0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bedc:	2301      	movs	r3, #1
 800bede:	e0b8      	b.n	800c052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f003 0302 	and.w	r3, r3, #2
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d020      	beq.n	800bf2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f003 0304 	and.w	r3, r3, #4
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d005      	beq.n	800bf04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bef8:	4b59      	ldr	r3, [pc, #356]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800befa:	689b      	ldr	r3, [r3, #8]
 800befc:	4a58      	ldr	r2, [pc, #352]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800befe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bf02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f003 0308 	and.w	r3, r3, #8
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d005      	beq.n	800bf1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bf10:	4b53      	ldr	r3, [pc, #332]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	4a52      	ldr	r2, [pc, #328]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800bf16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bf1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bf1c:	4b50      	ldr	r3, [pc, #320]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	494d      	ldr	r1, [pc, #308]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f003 0301 	and.w	r3, r3, #1
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d044      	beq.n	800bfc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d107      	bne.n	800bf52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bf42:	4b47      	ldr	r3, [pc, #284]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d119      	bne.n	800bf82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e07f      	b.n	800c052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	2b02      	cmp	r3, #2
 800bf58:	d003      	beq.n	800bf62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bf5e:	2b03      	cmp	r3, #3
 800bf60:	d107      	bne.n	800bf72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf62:	4b3f      	ldr	r3, [pc, #252]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d109      	bne.n	800bf82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	e06f      	b.n	800c052 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf72:	4b3b      	ldr	r3, [pc, #236]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f003 0302 	and.w	r3, r3, #2
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d101      	bne.n	800bf82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e067      	b.n	800c052 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bf82:	4b37      	ldr	r3, [pc, #220]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	f023 0203 	bic.w	r2, r3, #3
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	4934      	ldr	r1, [pc, #208]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800bf90:	4313      	orrs	r3, r2
 800bf92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bf94:	f7fd fcde 	bl	8009954 <HAL_GetTick>
 800bf98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf9a:	e00a      	b.n	800bfb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf9c:	f7fd fcda 	bl	8009954 <HAL_GetTick>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	1ad3      	subs	r3, r2, r3
 800bfa6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d901      	bls.n	800bfb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bfae:	2303      	movs	r3, #3
 800bfb0:	e04f      	b.n	800c052 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bfb2:	4b2b      	ldr	r3, [pc, #172]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800bfb4:	689b      	ldr	r3, [r3, #8]
 800bfb6:	f003 020c 	and.w	r2, r3, #12
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d1eb      	bne.n	800bf9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bfc4:	4b25      	ldr	r3, [pc, #148]	; (800c05c <HAL_RCC_ClockConfig+0x1b8>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f003 030f 	and.w	r3, r3, #15
 800bfcc:	683a      	ldr	r2, [r7, #0]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d20c      	bcs.n	800bfec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bfd2:	4b22      	ldr	r3, [pc, #136]	; (800c05c <HAL_RCC_ClockConfig+0x1b8>)
 800bfd4:	683a      	ldr	r2, [r7, #0]
 800bfd6:	b2d2      	uxtb	r2, r2
 800bfd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bfda:	4b20      	ldr	r3, [pc, #128]	; (800c05c <HAL_RCC_ClockConfig+0x1b8>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f003 030f 	and.w	r3, r3, #15
 800bfe2:	683a      	ldr	r2, [r7, #0]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d001      	beq.n	800bfec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	e032      	b.n	800c052 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f003 0304 	and.w	r3, r3, #4
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d008      	beq.n	800c00a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bff8:	4b19      	ldr	r3, [pc, #100]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	4916      	ldr	r1, [pc, #88]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800c006:	4313      	orrs	r3, r2
 800c008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f003 0308 	and.w	r3, r3, #8
 800c012:	2b00      	cmp	r3, #0
 800c014:	d009      	beq.n	800c02a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c016:	4b12      	ldr	r3, [pc, #72]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800c018:	689b      	ldr	r3, [r3, #8]
 800c01a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	691b      	ldr	r3, [r3, #16]
 800c022:	00db      	lsls	r3, r3, #3
 800c024:	490e      	ldr	r1, [pc, #56]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800c026:	4313      	orrs	r3, r2
 800c028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c02a:	f000 f821 	bl	800c070 <HAL_RCC_GetSysClockFreq>
 800c02e:	4602      	mov	r2, r0
 800c030:	4b0b      	ldr	r3, [pc, #44]	; (800c060 <HAL_RCC_ClockConfig+0x1bc>)
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	091b      	lsrs	r3, r3, #4
 800c036:	f003 030f 	and.w	r3, r3, #15
 800c03a:	490a      	ldr	r1, [pc, #40]	; (800c064 <HAL_RCC_ClockConfig+0x1c0>)
 800c03c:	5ccb      	ldrb	r3, [r1, r3]
 800c03e:	fa22 f303 	lsr.w	r3, r2, r3
 800c042:	4a09      	ldr	r2, [pc, #36]	; (800c068 <HAL_RCC_ClockConfig+0x1c4>)
 800c044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c046:	4b09      	ldr	r3, [pc, #36]	; (800c06c <HAL_RCC_ClockConfig+0x1c8>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fd fc3e 	bl	80098cc <HAL_InitTick>

  return HAL_OK;
 800c050:	2300      	movs	r3, #0
}
 800c052:	4618      	mov	r0, r3
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	40023c00 	.word	0x40023c00
 800c060:	40023800 	.word	0x40023800
 800c064:	0801ad04 	.word	0x0801ad04
 800c068:	20000000 	.word	0x20000000
 800c06c:	20000004 	.word	0x20000004

0800c070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c070:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c074:	b084      	sub	sp, #16
 800c076:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c078:	2300      	movs	r3, #0
 800c07a:	607b      	str	r3, [r7, #4]
 800c07c:	2300      	movs	r3, #0
 800c07e:	60fb      	str	r3, [r7, #12]
 800c080:	2300      	movs	r3, #0
 800c082:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c084:	2300      	movs	r3, #0
 800c086:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c088:	4b67      	ldr	r3, [pc, #412]	; (800c228 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c08a:	689b      	ldr	r3, [r3, #8]
 800c08c:	f003 030c 	and.w	r3, r3, #12
 800c090:	2b08      	cmp	r3, #8
 800c092:	d00d      	beq.n	800c0b0 <HAL_RCC_GetSysClockFreq+0x40>
 800c094:	2b08      	cmp	r3, #8
 800c096:	f200 80bd 	bhi.w	800c214 <HAL_RCC_GetSysClockFreq+0x1a4>
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d002      	beq.n	800c0a4 <HAL_RCC_GetSysClockFreq+0x34>
 800c09e:	2b04      	cmp	r3, #4
 800c0a0:	d003      	beq.n	800c0aa <HAL_RCC_GetSysClockFreq+0x3a>
 800c0a2:	e0b7      	b.n	800c214 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c0a4:	4b61      	ldr	r3, [pc, #388]	; (800c22c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c0a6:	60bb      	str	r3, [r7, #8]
       break;
 800c0a8:	e0b7      	b.n	800c21a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c0aa:	4b60      	ldr	r3, [pc, #384]	; (800c22c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c0ac:	60bb      	str	r3, [r7, #8]
      break;
 800c0ae:	e0b4      	b.n	800c21a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c0b0:	4b5d      	ldr	r3, [pc, #372]	; (800c228 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c0ba:	4b5b      	ldr	r3, [pc, #364]	; (800c228 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d04d      	beq.n	800c162 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c0c6:	4b58      	ldr	r3, [pc, #352]	; (800c228 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	099b      	lsrs	r3, r3, #6
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	f04f 0300 	mov.w	r3, #0
 800c0d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c0d6:	f04f 0100 	mov.w	r1, #0
 800c0da:	ea02 0800 	and.w	r8, r2, r0
 800c0de:	ea03 0901 	and.w	r9, r3, r1
 800c0e2:	4640      	mov	r0, r8
 800c0e4:	4649      	mov	r1, r9
 800c0e6:	f04f 0200 	mov.w	r2, #0
 800c0ea:	f04f 0300 	mov.w	r3, #0
 800c0ee:	014b      	lsls	r3, r1, #5
 800c0f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c0f4:	0142      	lsls	r2, r0, #5
 800c0f6:	4610      	mov	r0, r2
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	ebb0 0008 	subs.w	r0, r0, r8
 800c0fe:	eb61 0109 	sbc.w	r1, r1, r9
 800c102:	f04f 0200 	mov.w	r2, #0
 800c106:	f04f 0300 	mov.w	r3, #0
 800c10a:	018b      	lsls	r3, r1, #6
 800c10c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c110:	0182      	lsls	r2, r0, #6
 800c112:	1a12      	subs	r2, r2, r0
 800c114:	eb63 0301 	sbc.w	r3, r3, r1
 800c118:	f04f 0000 	mov.w	r0, #0
 800c11c:	f04f 0100 	mov.w	r1, #0
 800c120:	00d9      	lsls	r1, r3, #3
 800c122:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c126:	00d0      	lsls	r0, r2, #3
 800c128:	4602      	mov	r2, r0
 800c12a:	460b      	mov	r3, r1
 800c12c:	eb12 0208 	adds.w	r2, r2, r8
 800c130:	eb43 0309 	adc.w	r3, r3, r9
 800c134:	f04f 0000 	mov.w	r0, #0
 800c138:	f04f 0100 	mov.w	r1, #0
 800c13c:	0299      	lsls	r1, r3, #10
 800c13e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c142:	0290      	lsls	r0, r2, #10
 800c144:	4602      	mov	r2, r0
 800c146:	460b      	mov	r3, r1
 800c148:	4610      	mov	r0, r2
 800c14a:	4619      	mov	r1, r3
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	461a      	mov	r2, r3
 800c150:	f04f 0300 	mov.w	r3, #0
 800c154:	f7f4 fdb0 	bl	8000cb8 <__aeabi_uldivmod>
 800c158:	4602      	mov	r2, r0
 800c15a:	460b      	mov	r3, r1
 800c15c:	4613      	mov	r3, r2
 800c15e:	60fb      	str	r3, [r7, #12]
 800c160:	e04a      	b.n	800c1f8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c162:	4b31      	ldr	r3, [pc, #196]	; (800c228 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	099b      	lsrs	r3, r3, #6
 800c168:	461a      	mov	r2, r3
 800c16a:	f04f 0300 	mov.w	r3, #0
 800c16e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c172:	f04f 0100 	mov.w	r1, #0
 800c176:	ea02 0400 	and.w	r4, r2, r0
 800c17a:	ea03 0501 	and.w	r5, r3, r1
 800c17e:	4620      	mov	r0, r4
 800c180:	4629      	mov	r1, r5
 800c182:	f04f 0200 	mov.w	r2, #0
 800c186:	f04f 0300 	mov.w	r3, #0
 800c18a:	014b      	lsls	r3, r1, #5
 800c18c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c190:	0142      	lsls	r2, r0, #5
 800c192:	4610      	mov	r0, r2
 800c194:	4619      	mov	r1, r3
 800c196:	1b00      	subs	r0, r0, r4
 800c198:	eb61 0105 	sbc.w	r1, r1, r5
 800c19c:	f04f 0200 	mov.w	r2, #0
 800c1a0:	f04f 0300 	mov.w	r3, #0
 800c1a4:	018b      	lsls	r3, r1, #6
 800c1a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c1aa:	0182      	lsls	r2, r0, #6
 800c1ac:	1a12      	subs	r2, r2, r0
 800c1ae:	eb63 0301 	sbc.w	r3, r3, r1
 800c1b2:	f04f 0000 	mov.w	r0, #0
 800c1b6:	f04f 0100 	mov.w	r1, #0
 800c1ba:	00d9      	lsls	r1, r3, #3
 800c1bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c1c0:	00d0      	lsls	r0, r2, #3
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	1912      	adds	r2, r2, r4
 800c1c8:	eb45 0303 	adc.w	r3, r5, r3
 800c1cc:	f04f 0000 	mov.w	r0, #0
 800c1d0:	f04f 0100 	mov.w	r1, #0
 800c1d4:	0299      	lsls	r1, r3, #10
 800c1d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c1da:	0290      	lsls	r0, r2, #10
 800c1dc:	4602      	mov	r2, r0
 800c1de:	460b      	mov	r3, r1
 800c1e0:	4610      	mov	r0, r2
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	f04f 0300 	mov.w	r3, #0
 800c1ec:	f7f4 fd64 	bl	8000cb8 <__aeabi_uldivmod>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c1f8:	4b0b      	ldr	r3, [pc, #44]	; (800c228 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	0c1b      	lsrs	r3, r3, #16
 800c1fe:	f003 0303 	and.w	r3, r3, #3
 800c202:	3301      	adds	r3, #1
 800c204:	005b      	lsls	r3, r3, #1
 800c206:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c208:	68fa      	ldr	r2, [r7, #12]
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c210:	60bb      	str	r3, [r7, #8]
      break;
 800c212:	e002      	b.n	800c21a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c214:	4b05      	ldr	r3, [pc, #20]	; (800c22c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c216:	60bb      	str	r3, [r7, #8]
      break;
 800c218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c21a:	68bb      	ldr	r3, [r7, #8]
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3710      	adds	r7, #16
 800c220:	46bd      	mov	sp, r7
 800c222:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c226:	bf00      	nop
 800c228:	40023800 	.word	0x40023800
 800c22c:	00f42400 	.word	0x00f42400

0800c230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c230:	b480      	push	{r7}
 800c232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c234:	4b03      	ldr	r3, [pc, #12]	; (800c244 <HAL_RCC_GetHCLKFreq+0x14>)
 800c236:	681b      	ldr	r3, [r3, #0]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr
 800c242:	bf00      	nop
 800c244:	20000000 	.word	0x20000000

0800c248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c24c:	f7ff fff0 	bl	800c230 <HAL_RCC_GetHCLKFreq>
 800c250:	4602      	mov	r2, r0
 800c252:	4b05      	ldr	r3, [pc, #20]	; (800c268 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c254:	689b      	ldr	r3, [r3, #8]
 800c256:	0a9b      	lsrs	r3, r3, #10
 800c258:	f003 0307 	and.w	r3, r3, #7
 800c25c:	4903      	ldr	r1, [pc, #12]	; (800c26c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c25e:	5ccb      	ldrb	r3, [r1, r3]
 800c260:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c264:	4618      	mov	r0, r3
 800c266:	bd80      	pop	{r7, pc}
 800c268:	40023800 	.word	0x40023800
 800c26c:	0801ad14 	.word	0x0801ad14

0800c270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c274:	f7ff ffdc 	bl	800c230 <HAL_RCC_GetHCLKFreq>
 800c278:	4602      	mov	r2, r0
 800c27a:	4b05      	ldr	r3, [pc, #20]	; (800c290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c27c:	689b      	ldr	r3, [r3, #8]
 800c27e:	0b5b      	lsrs	r3, r3, #13
 800c280:	f003 0307 	and.w	r3, r3, #7
 800c284:	4903      	ldr	r1, [pc, #12]	; (800c294 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c286:	5ccb      	ldrb	r3, [r1, r3]
 800c288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	40023800 	.word	0x40023800
 800c294:	0801ad14 	.word	0x0801ad14

0800c298 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b088      	sub	sp, #32
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d00a      	beq.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c2c0:	4b66      	ldr	r3, [pc, #408]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c2c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2c6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2ce:	4963      	ldr	r1, [pc, #396]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c2d0:	4313      	orrs	r3, r2
 800c2d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d00a      	beq.n	800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c2e2:	4b5e      	ldr	r3, [pc, #376]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c2e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2e8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2f0:	495a      	ldr	r1, [pc, #360]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f003 0301 	and.w	r3, r3, #1
 800c300:	2b00      	cmp	r3, #0
 800c302:	d10b      	bne.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d105      	bne.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d075      	beq.n	800c408 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c31c:	4b50      	ldr	r3, [pc, #320]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c31e:	2200      	movs	r2, #0
 800c320:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c322:	f7fd fb17 	bl	8009954 <HAL_GetTick>
 800c326:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c328:	e008      	b.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c32a:	f7fd fb13 	bl	8009954 <HAL_GetTick>
 800c32e:	4602      	mov	r2, r0
 800c330:	69fb      	ldr	r3, [r7, #28]
 800c332:	1ad3      	subs	r3, r2, r3
 800c334:	2b02      	cmp	r3, #2
 800c336:	d901      	bls.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c338:	2303      	movs	r3, #3
 800c33a:	e1dc      	b.n	800c6f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c33c:	4b47      	ldr	r3, [pc, #284]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1f0      	bne.n	800c32a <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f003 0301 	and.w	r3, r3, #1
 800c350:	2b00      	cmp	r3, #0
 800c352:	d009      	beq.n	800c368 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	019a      	lsls	r2, r3, #6
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	689b      	ldr	r3, [r3, #8]
 800c35e:	071b      	lsls	r3, r3, #28
 800c360:	493e      	ldr	r1, [pc, #248]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c362:	4313      	orrs	r3, r2
 800c364:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f003 0302 	and.w	r3, r3, #2
 800c370:	2b00      	cmp	r3, #0
 800c372:	d01f      	beq.n	800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c374:	4b39      	ldr	r3, [pc, #228]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c37a:	0f1b      	lsrs	r3, r3, #28
 800c37c:	f003 0307 	and.w	r3, r3, #7
 800c380:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	019a      	lsls	r2, r3, #6
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	061b      	lsls	r3, r3, #24
 800c38e:	431a      	orrs	r2, r3
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	071b      	lsls	r3, r3, #28
 800c394:	4931      	ldr	r1, [pc, #196]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c396:	4313      	orrs	r3, r2
 800c398:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c39c:	4b2f      	ldr	r3, [pc, #188]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c39e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3a2:	f023 021f 	bic.w	r2, r3, #31
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6a1b      	ldr	r3, [r3, #32]
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	492b      	ldr	r1, [pc, #172]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d00d      	beq.n	800c3dc <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	019a      	lsls	r2, r3, #6
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	68db      	ldr	r3, [r3, #12]
 800c3ca:	061b      	lsls	r3, r3, #24
 800c3cc:	431a      	orrs	r2, r3
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	689b      	ldr	r3, [r3, #8]
 800c3d2:	071b      	lsls	r3, r3, #28
 800c3d4:	4921      	ldr	r1, [pc, #132]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c3dc:	4b20      	ldr	r3, [pc, #128]	; (800c460 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c3de:	2201      	movs	r2, #1
 800c3e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c3e2:	f7fd fab7 	bl	8009954 <HAL_GetTick>
 800c3e6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c3e8:	e008      	b.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c3ea:	f7fd fab3 	bl	8009954 <HAL_GetTick>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	1ad3      	subs	r3, r2, r3
 800c3f4:	2b02      	cmp	r3, #2
 800c3f6:	d901      	bls.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c3f8:	2303      	movs	r3, #3
 800c3fa:	e17c      	b.n	800c6f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c3fc:	4b17      	ldr	r3, [pc, #92]	; (800c45c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c404:	2b00      	cmp	r3, #0
 800c406:	d0f0      	beq.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f003 0304 	and.w	r3, r3, #4
 800c410:	2b00      	cmp	r3, #0
 800c412:	d112      	bne.n	800c43a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d10c      	bne.n	800c43a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c428:	2b00      	cmp	r3, #0
 800c42a:	f000 80ce 	beq.w	800c5ca <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c432:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c436:	f040 80c8 	bne.w	800c5ca <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c43a:	4b0a      	ldr	r3, [pc, #40]	; (800c464 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c43c:	2200      	movs	r2, #0
 800c43e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c440:	f7fd fa88 	bl	8009954 <HAL_GetTick>
 800c444:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c446:	e00f      	b.n	800c468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c448:	f7fd fa84 	bl	8009954 <HAL_GetTick>
 800c44c:	4602      	mov	r2, r0
 800c44e:	69fb      	ldr	r3, [r7, #28]
 800c450:	1ad3      	subs	r3, r2, r3
 800c452:	2b02      	cmp	r3, #2
 800c454:	d908      	bls.n	800c468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c456:	2303      	movs	r3, #3
 800c458:	e14d      	b.n	800c6f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c45a:	bf00      	nop
 800c45c:	40023800 	.word	0x40023800
 800c460:	42470068 	.word	0x42470068
 800c464:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c468:	4ba5      	ldr	r3, [pc, #660]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c474:	d0e8      	beq.n	800c448 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f003 0304 	and.w	r3, r3, #4
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d02e      	beq.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c482:	4b9f      	ldr	r3, [pc, #636]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c488:	0c1b      	lsrs	r3, r3, #16
 800c48a:	f003 0303 	and.w	r3, r3, #3
 800c48e:	3301      	adds	r3, #1
 800c490:	005b      	lsls	r3, r3, #1
 800c492:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c494:	4b9a      	ldr	r3, [pc, #616]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c49a:	0f1b      	lsrs	r3, r3, #28
 800c49c:	f003 0307 	and.w	r3, r3, #7
 800c4a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	691b      	ldr	r3, [r3, #16]
 800c4a6:	019a      	lsls	r2, r3, #6
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	085b      	lsrs	r3, r3, #1
 800c4ac:	3b01      	subs	r3, #1
 800c4ae:	041b      	lsls	r3, r3, #16
 800c4b0:	431a      	orrs	r2, r3
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	699b      	ldr	r3, [r3, #24]
 800c4b6:	061b      	lsls	r3, r3, #24
 800c4b8:	431a      	orrs	r2, r3
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	071b      	lsls	r3, r3, #28
 800c4be:	4990      	ldr	r1, [pc, #576]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4c0:	4313      	orrs	r3, r2
 800c4c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c4c6:	4b8e      	ldr	r3, [pc, #568]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4d4:	3b01      	subs	r3, #1
 800c4d6:	021b      	lsls	r3, r3, #8
 800c4d8:	4989      	ldr	r1, [pc, #548]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f003 0308 	and.w	r3, r3, #8
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d02c      	beq.n	800c546 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c4ec:	4b84      	ldr	r3, [pc, #528]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4f2:	0c1b      	lsrs	r3, r3, #16
 800c4f4:	f003 0303 	and.w	r3, r3, #3
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	005b      	lsls	r3, r3, #1
 800c4fc:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c4fe:	4b80      	ldr	r3, [pc, #512]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c504:	0e1b      	lsrs	r3, r3, #24
 800c506:	f003 030f 	and.w	r3, r3, #15
 800c50a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	691b      	ldr	r3, [r3, #16]
 800c510:	019a      	lsls	r2, r3, #6
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	085b      	lsrs	r3, r3, #1
 800c516:	3b01      	subs	r3, #1
 800c518:	041b      	lsls	r3, r3, #16
 800c51a:	431a      	orrs	r2, r3
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	061b      	lsls	r3, r3, #24
 800c520:	431a      	orrs	r2, r3
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	69db      	ldr	r3, [r3, #28]
 800c526:	071b      	lsls	r3, r3, #28
 800c528:	4975      	ldr	r1, [pc, #468]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c52a:	4313      	orrs	r3, r2
 800c52c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c530:	4b73      	ldr	r3, [pc, #460]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c536:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c53e:	4970      	ldr	r1, [pc, #448]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c540:	4313      	orrs	r3, r2
 800c542:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d024      	beq.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c556:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c55a:	d11f      	bne.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c55c:	4b68      	ldr	r3, [pc, #416]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c55e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c562:	0e1b      	lsrs	r3, r3, #24
 800c564:	f003 030f 	and.w	r3, r3, #15
 800c568:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c56a:	4b65      	ldr	r3, [pc, #404]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c56c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c570:	0f1b      	lsrs	r3, r3, #28
 800c572:	f003 0307 	and.w	r3, r3, #7
 800c576:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	691b      	ldr	r3, [r3, #16]
 800c57c:	019a      	lsls	r2, r3, #6
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	695b      	ldr	r3, [r3, #20]
 800c582:	085b      	lsrs	r3, r3, #1
 800c584:	3b01      	subs	r3, #1
 800c586:	041b      	lsls	r3, r3, #16
 800c588:	431a      	orrs	r2, r3
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	061b      	lsls	r3, r3, #24
 800c58e:	431a      	orrs	r2, r3
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	071b      	lsls	r3, r3, #28
 800c594:	495a      	ldr	r1, [pc, #360]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c596:	4313      	orrs	r3, r2
 800c598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c59c:	4b59      	ldr	r3, [pc, #356]	; (800c704 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c59e:	2201      	movs	r2, #1
 800c5a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c5a2:	f7fd f9d7 	bl	8009954 <HAL_GetTick>
 800c5a6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c5a8:	e008      	b.n	800c5bc <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c5aa:	f7fd f9d3 	bl	8009954 <HAL_GetTick>
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	1ad3      	subs	r3, r2, r3
 800c5b4:	2b02      	cmp	r3, #2
 800c5b6:	d901      	bls.n	800c5bc <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c5b8:	2303      	movs	r3, #3
 800c5ba:	e09c      	b.n	800c6f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c5bc:	4b50      	ldr	r3, [pc, #320]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5c8:	d1ef      	bne.n	800c5aa <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f003 0320 	and.w	r3, r3, #32
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	f000 8083 	beq.w	800c6de <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c5d8:	2300      	movs	r3, #0
 800c5da:	60bb      	str	r3, [r7, #8]
 800c5dc:	4b48      	ldr	r3, [pc, #288]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5e0:	4a47      	ldr	r2, [pc, #284]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c5e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5e6:	6413      	str	r3, [r2, #64]	; 0x40
 800c5e8:	4b45      	ldr	r3, [pc, #276]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5f0:	60bb      	str	r3, [r7, #8]
 800c5f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c5f4:	4b44      	ldr	r3, [pc, #272]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4a43      	ldr	r2, [pc, #268]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c5fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5fe:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c600:	f7fd f9a8 	bl	8009954 <HAL_GetTick>
 800c604:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c606:	e008      	b.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c608:	f7fd f9a4 	bl	8009954 <HAL_GetTick>
 800c60c:	4602      	mov	r2, r0
 800c60e:	69fb      	ldr	r3, [r7, #28]
 800c610:	1ad3      	subs	r3, r2, r3
 800c612:	2b02      	cmp	r3, #2
 800c614:	d901      	bls.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c616:	2303      	movs	r3, #3
 800c618:	e06d      	b.n	800c6f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c61a:	4b3b      	ldr	r3, [pc, #236]	; (800c708 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c622:	2b00      	cmp	r3, #0
 800c624:	d0f0      	beq.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c626:	4b36      	ldr	r3, [pc, #216]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c62a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c62e:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c630:	69bb      	ldr	r3, [r7, #24]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d02f      	beq.n	800c696 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c63a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c63e:	69ba      	ldr	r2, [r7, #24]
 800c640:	429a      	cmp	r2, r3
 800c642:	d028      	beq.n	800c696 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c644:	4b2e      	ldr	r3, [pc, #184]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c64c:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c64e:	4b2f      	ldr	r3, [pc, #188]	; (800c70c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c650:	2201      	movs	r2, #1
 800c652:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c654:	4b2d      	ldr	r3, [pc, #180]	; (800c70c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c656:	2200      	movs	r2, #0
 800c658:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c65a:	4a29      	ldr	r2, [pc, #164]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c660:	4b27      	ldr	r3, [pc, #156]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c664:	f003 0301 	and.w	r3, r3, #1
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d114      	bne.n	800c696 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c66c:	f7fd f972 	bl	8009954 <HAL_GetTick>
 800c670:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c672:	e00a      	b.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c674:	f7fd f96e 	bl	8009954 <HAL_GetTick>
 800c678:	4602      	mov	r2, r0
 800c67a:	69fb      	ldr	r3, [r7, #28]
 800c67c:	1ad3      	subs	r3, r2, r3
 800c67e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c682:	4293      	cmp	r3, r2
 800c684:	d901      	bls.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800c686:	2303      	movs	r3, #3
 800c688:	e035      	b.n	800c6f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c68a:	4b1d      	ldr	r3, [pc, #116]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c68c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c68e:	f003 0302 	and.w	r3, r3, #2
 800c692:	2b00      	cmp	r3, #0
 800c694:	d0ee      	beq.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c69a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c69e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6a2:	d10d      	bne.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800c6a4:	4b16      	ldr	r3, [pc, #88]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c6b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6b8:	4911      	ldr	r1, [pc, #68]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	608b      	str	r3, [r1, #8]
 800c6be:	e005      	b.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x434>
 800c6c0:	4b0f      	ldr	r3, [pc, #60]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6c2:	689b      	ldr	r3, [r3, #8]
 800c6c4:	4a0e      	ldr	r2, [pc, #56]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c6ca:	6093      	str	r3, [r2, #8]
 800c6cc:	4b0c      	ldr	r3, [pc, #48]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c6d8:	4909      	ldr	r1, [pc, #36]	; (800c700 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f003 0310 	and.w	r3, r3, #16
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d004      	beq.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c6f0:	4b07      	ldr	r3, [pc, #28]	; (800c710 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800c6f2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c6f4:	2300      	movs	r3, #0
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3720      	adds	r7, #32
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	40023800 	.word	0x40023800
 800c704:	42470070 	.word	0x42470070
 800c708:	40007000 	.word	0x40007000
 800c70c:	42470e40 	.word	0x42470e40
 800c710:	424711e0 	.word	0x424711e0

0800c714 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b086      	sub	sp, #24
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c71c:	2300      	movs	r3, #0
 800c71e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f003 0301 	and.w	r3, r3, #1
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d075      	beq.n	800c818 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c72c:	4ba2      	ldr	r3, [pc, #648]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c72e:	689b      	ldr	r3, [r3, #8]
 800c730:	f003 030c 	and.w	r3, r3, #12
 800c734:	2b04      	cmp	r3, #4
 800c736:	d00c      	beq.n	800c752 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c738:	4b9f      	ldr	r3, [pc, #636]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c73a:	689b      	ldr	r3, [r3, #8]
 800c73c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c740:	2b08      	cmp	r3, #8
 800c742:	d112      	bne.n	800c76a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c744:	4b9c      	ldr	r3, [pc, #624]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c74c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c750:	d10b      	bne.n	800c76a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c752:	4b99      	ldr	r3, [pc, #612]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d05b      	beq.n	800c816 <HAL_RCC_OscConfig+0x102>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	685b      	ldr	r3, [r3, #4]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d157      	bne.n	800c816 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800c766:	2301      	movs	r3, #1
 800c768:	e20b      	b.n	800cb82 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c772:	d106      	bne.n	800c782 <HAL_RCC_OscConfig+0x6e>
 800c774:	4b90      	ldr	r3, [pc, #576]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	4a8f      	ldr	r2, [pc, #572]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c77a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c77e:	6013      	str	r3, [r2, #0]
 800c780:	e01d      	b.n	800c7be <HAL_RCC_OscConfig+0xaa>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c78a:	d10c      	bne.n	800c7a6 <HAL_RCC_OscConfig+0x92>
 800c78c:	4b8a      	ldr	r3, [pc, #552]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4a89      	ldr	r2, [pc, #548]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c796:	6013      	str	r3, [r2, #0]
 800c798:	4b87      	ldr	r3, [pc, #540]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a86      	ldr	r2, [pc, #536]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c79e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c7a2:	6013      	str	r3, [r2, #0]
 800c7a4:	e00b      	b.n	800c7be <HAL_RCC_OscConfig+0xaa>
 800c7a6:	4b84      	ldr	r3, [pc, #528]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4a83      	ldr	r2, [pc, #524]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c7ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c7b0:	6013      	str	r3, [r2, #0]
 800c7b2:	4b81      	ldr	r3, [pc, #516]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4a80      	ldr	r2, [pc, #512]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c7b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c7bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d013      	beq.n	800c7ee <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7c6:	f7fd f8c5 	bl	8009954 <HAL_GetTick>
 800c7ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c7cc:	e008      	b.n	800c7e0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c7ce:	f7fd f8c1 	bl	8009954 <HAL_GetTick>
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	1ad3      	subs	r3, r2, r3
 800c7d8:	2b64      	cmp	r3, #100	; 0x64
 800c7da:	d901      	bls.n	800c7e0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800c7dc:	2303      	movs	r3, #3
 800c7de:	e1d0      	b.n	800cb82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c7e0:	4b75      	ldr	r3, [pc, #468]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d0f0      	beq.n	800c7ce <HAL_RCC_OscConfig+0xba>
 800c7ec:	e014      	b.n	800c818 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7ee:	f7fd f8b1 	bl	8009954 <HAL_GetTick>
 800c7f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c7f4:	e008      	b.n	800c808 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c7f6:	f7fd f8ad 	bl	8009954 <HAL_GetTick>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	1ad3      	subs	r3, r2, r3
 800c800:	2b64      	cmp	r3, #100	; 0x64
 800c802:	d901      	bls.n	800c808 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800c804:	2303      	movs	r3, #3
 800c806:	e1bc      	b.n	800cb82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c808:	4b6b      	ldr	r3, [pc, #428]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c810:	2b00      	cmp	r3, #0
 800c812:	d1f0      	bne.n	800c7f6 <HAL_RCC_OscConfig+0xe2>
 800c814:	e000      	b.n	800c818 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c816:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f003 0302 	and.w	r3, r3, #2
 800c820:	2b00      	cmp	r3, #0
 800c822:	d063      	beq.n	800c8ec <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c824:	4b64      	ldr	r3, [pc, #400]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	f003 030c 	and.w	r3, r3, #12
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d00b      	beq.n	800c848 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c830:	4b61      	ldr	r3, [pc, #388]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c832:	689b      	ldr	r3, [r3, #8]
 800c834:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c838:	2b08      	cmp	r3, #8
 800c83a:	d11c      	bne.n	800c876 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c83c:	4b5e      	ldr	r3, [pc, #376]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c844:	2b00      	cmp	r3, #0
 800c846:	d116      	bne.n	800c876 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c848:	4b5b      	ldr	r3, [pc, #364]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f003 0302 	and.w	r3, r3, #2
 800c850:	2b00      	cmp	r3, #0
 800c852:	d005      	beq.n	800c860 <HAL_RCC_OscConfig+0x14c>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d001      	beq.n	800c860 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800c85c:	2301      	movs	r3, #1
 800c85e:	e190      	b.n	800cb82 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c860:	4b55      	ldr	r3, [pc, #340]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	691b      	ldr	r3, [r3, #16]
 800c86c:	00db      	lsls	r3, r3, #3
 800c86e:	4952      	ldr	r1, [pc, #328]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c870:	4313      	orrs	r3, r2
 800c872:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c874:	e03a      	b.n	800c8ec <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	68db      	ldr	r3, [r3, #12]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d020      	beq.n	800c8c0 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c87e:	4b4f      	ldr	r3, [pc, #316]	; (800c9bc <HAL_RCC_OscConfig+0x2a8>)
 800c880:	2201      	movs	r2, #1
 800c882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c884:	f7fd f866 	bl	8009954 <HAL_GetTick>
 800c888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c88a:	e008      	b.n	800c89e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c88c:	f7fd f862 	bl	8009954 <HAL_GetTick>
 800c890:	4602      	mov	r2, r0
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	1ad3      	subs	r3, r2, r3
 800c896:	2b02      	cmp	r3, #2
 800c898:	d901      	bls.n	800c89e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800c89a:	2303      	movs	r3, #3
 800c89c:	e171      	b.n	800cb82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c89e:	4b46      	ldr	r3, [pc, #280]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f003 0302 	and.w	r3, r3, #2
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d0f0      	beq.n	800c88c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c8aa:	4b43      	ldr	r3, [pc, #268]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	691b      	ldr	r3, [r3, #16]
 800c8b6:	00db      	lsls	r3, r3, #3
 800c8b8:	493f      	ldr	r1, [pc, #252]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	600b      	str	r3, [r1, #0]
 800c8be:	e015      	b.n	800c8ec <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c8c0:	4b3e      	ldr	r3, [pc, #248]	; (800c9bc <HAL_RCC_OscConfig+0x2a8>)
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8c6:	f7fd f845 	bl	8009954 <HAL_GetTick>
 800c8ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c8cc:	e008      	b.n	800c8e0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c8ce:	f7fd f841 	bl	8009954 <HAL_GetTick>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	1ad3      	subs	r3, r2, r3
 800c8d8:	2b02      	cmp	r3, #2
 800c8da:	d901      	bls.n	800c8e0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c8dc:	2303      	movs	r3, #3
 800c8de:	e150      	b.n	800cb82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c8e0:	4b35      	ldr	r3, [pc, #212]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f003 0302 	and.w	r3, r3, #2
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d1f0      	bne.n	800c8ce <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f003 0308 	and.w	r3, r3, #8
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d030      	beq.n	800c95a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	695b      	ldr	r3, [r3, #20]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d016      	beq.n	800c92e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c900:	4b2f      	ldr	r3, [pc, #188]	; (800c9c0 <HAL_RCC_OscConfig+0x2ac>)
 800c902:	2201      	movs	r2, #1
 800c904:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c906:	f7fd f825 	bl	8009954 <HAL_GetTick>
 800c90a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c90c:	e008      	b.n	800c920 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c90e:	f7fd f821 	bl	8009954 <HAL_GetTick>
 800c912:	4602      	mov	r2, r0
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	1ad3      	subs	r3, r2, r3
 800c918:	2b02      	cmp	r3, #2
 800c91a:	d901      	bls.n	800c920 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800c91c:	2303      	movs	r3, #3
 800c91e:	e130      	b.n	800cb82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c920:	4b25      	ldr	r3, [pc, #148]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c924:	f003 0302 	and.w	r3, r3, #2
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d0f0      	beq.n	800c90e <HAL_RCC_OscConfig+0x1fa>
 800c92c:	e015      	b.n	800c95a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c92e:	4b24      	ldr	r3, [pc, #144]	; (800c9c0 <HAL_RCC_OscConfig+0x2ac>)
 800c930:	2200      	movs	r2, #0
 800c932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c934:	f7fd f80e 	bl	8009954 <HAL_GetTick>
 800c938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c93a:	e008      	b.n	800c94e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c93c:	f7fd f80a 	bl	8009954 <HAL_GetTick>
 800c940:	4602      	mov	r2, r0
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	1ad3      	subs	r3, r2, r3
 800c946:	2b02      	cmp	r3, #2
 800c948:	d901      	bls.n	800c94e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800c94a:	2303      	movs	r3, #3
 800c94c:	e119      	b.n	800cb82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c94e:	4b1a      	ldr	r3, [pc, #104]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c952:	f003 0302 	and.w	r3, r3, #2
 800c956:	2b00      	cmp	r3, #0
 800c958:	d1f0      	bne.n	800c93c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f003 0304 	and.w	r3, r3, #4
 800c962:	2b00      	cmp	r3, #0
 800c964:	f000 809f 	beq.w	800caa6 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c968:	2300      	movs	r3, #0
 800c96a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c96c:	4b12      	ldr	r3, [pc, #72]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c974:	2b00      	cmp	r3, #0
 800c976:	d10f      	bne.n	800c998 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c978:	2300      	movs	r3, #0
 800c97a:	60fb      	str	r3, [r7, #12]
 800c97c:	4b0e      	ldr	r3, [pc, #56]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c980:	4a0d      	ldr	r2, [pc, #52]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c986:	6413      	str	r3, [r2, #64]	; 0x40
 800c988:	4b0b      	ldr	r3, [pc, #44]	; (800c9b8 <HAL_RCC_OscConfig+0x2a4>)
 800c98a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c98c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c990:	60fb      	str	r3, [r7, #12]
 800c992:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c994:	2301      	movs	r3, #1
 800c996:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c998:	4b0a      	ldr	r3, [pc, #40]	; (800c9c4 <HAL_RCC_OscConfig+0x2b0>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d120      	bne.n	800c9e6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c9a4:	4b07      	ldr	r3, [pc, #28]	; (800c9c4 <HAL_RCC_OscConfig+0x2b0>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4a06      	ldr	r2, [pc, #24]	; (800c9c4 <HAL_RCC_OscConfig+0x2b0>)
 800c9aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c9ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c9b0:	f7fc ffd0 	bl	8009954 <HAL_GetTick>
 800c9b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c9b6:	e010      	b.n	800c9da <HAL_RCC_OscConfig+0x2c6>
 800c9b8:	40023800 	.word	0x40023800
 800c9bc:	42470000 	.word	0x42470000
 800c9c0:	42470e80 	.word	0x42470e80
 800c9c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c9c8:	f7fc ffc4 	bl	8009954 <HAL_GetTick>
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	1ad3      	subs	r3, r2, r3
 800c9d2:	2b02      	cmp	r3, #2
 800c9d4:	d901      	bls.n	800c9da <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800c9d6:	2303      	movs	r3, #3
 800c9d8:	e0d3      	b.n	800cb82 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c9da:	4b6c      	ldr	r3, [pc, #432]	; (800cb8c <HAL_RCC_OscConfig+0x478>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d0f0      	beq.n	800c9c8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	689b      	ldr	r3, [r3, #8]
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	d106      	bne.n	800c9fc <HAL_RCC_OscConfig+0x2e8>
 800c9ee:	4b68      	ldr	r3, [pc, #416]	; (800cb90 <HAL_RCC_OscConfig+0x47c>)
 800c9f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9f2:	4a67      	ldr	r2, [pc, #412]	; (800cb90 <HAL_RCC_OscConfig+0x47c>)
 800c9f4:	f043 0301 	orr.w	r3, r3, #1
 800c9f8:	6713      	str	r3, [r2, #112]	; 0x70
 800c9fa:	e01c      	b.n	800ca36 <HAL_RCC_OscConfig+0x322>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	689b      	ldr	r3, [r3, #8]
 800ca00:	2b05      	cmp	r3, #5
 800ca02:	d10c      	bne.n	800ca1e <HAL_RCC_OscConfig+0x30a>
 800ca04:	4b62      	ldr	r3, [pc, #392]	; (800cb90 <HAL_RCC_OscConfig+0x47c>)
 800ca06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca08:	4a61      	ldr	r2, [pc, #388]	; (800cb90 <HAL_RCC_OscConfig+0x47c>)
 800ca0a:	f043 0304 	orr.w	r3, r3, #4
 800ca0e:	6713      	str	r3, [r2, #112]	; 0x70
 800ca10:	4b5f      	ldr	r3, [pc, #380]	; (800cb90 <HAL_RCC_OscConfig+0x47c>)
 800ca12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca14:	4a5e      	ldr	r2, [pc, #376]	; (800cb90 <HAL_RCC_OscConfig+0x47c>)
 800ca16:	f043 0301 	orr.w	r3, r3, #1
 800ca1a:	6713      	str	r3, [r2, #112]	; 0x70
 800ca1c:	e00b      	b.n	800ca36 <HAL_RCC_OscConfig+0x322>
 800ca1e:	4b5c      	ldr	r3, [pc, #368]	; (800cb90 <HAL_RCC_OscConfig+0x47c>)
 800ca20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca22:	4a5b      	ldr	r2, [pc, #364]	; (800cb90 <HAL_RCC_OscConfig+0x47c>)
 800ca24:	f023 0301 	bic.w	r3, r3, #1
 800ca28:	6713      	str	r3, [r2, #112]	; 0x70
 800ca2a:	4b59      	ldr	r3, [pc, #356]	; (800cb90 <HAL_RCC_OscConfig+0x47c>)
 800ca2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca2e:	4a58      	ldr	r2, [pc, #352]	; (800cb90 <HAL_RCC_OscConfig+0x47c>)
 800ca30:	f023 0304 	bic.w	r3, r3, #4
 800ca34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d015      	beq.n	800ca6a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca3e:	f7fc ff89 	bl	8009954 <HAL_GetTick>
 800ca42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca44:	e00a      	b.n	800ca5c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ca46:	f7fc ff85 	bl	8009954 <HAL_GetTick>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	1ad3      	subs	r3, r2, r3
 800ca50:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d901      	bls.n	800ca5c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800ca58:	2303      	movs	r3, #3
 800ca5a:	e092      	b.n	800cb82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca5c:	4b4c      	ldr	r3, [pc, #304]	; (800cb90 <HAL_RCC_OscConfig+0x47c>)
 800ca5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca60:	f003 0302 	and.w	r3, r3, #2
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d0ee      	beq.n	800ca46 <HAL_RCC_OscConfig+0x332>
 800ca68:	e014      	b.n	800ca94 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca6a:	f7fc ff73 	bl	8009954 <HAL_GetTick>
 800ca6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ca70:	e00a      	b.n	800ca88 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ca72:	f7fc ff6f 	bl	8009954 <HAL_GetTick>
 800ca76:	4602      	mov	r2, r0
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	1ad3      	subs	r3, r2, r3
 800ca7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d901      	bls.n	800ca88 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800ca84:	2303      	movs	r3, #3
 800ca86:	e07c      	b.n	800cb82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ca88:	4b41      	ldr	r3, [pc, #260]	; (800cb90 <HAL_RCC_OscConfig+0x47c>)
 800ca8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca8c:	f003 0302 	and.w	r3, r3, #2
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d1ee      	bne.n	800ca72 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ca94:	7dfb      	ldrb	r3, [r7, #23]
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	d105      	bne.n	800caa6 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ca9a:	4b3d      	ldr	r3, [pc, #244]	; (800cb90 <HAL_RCC_OscConfig+0x47c>)
 800ca9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca9e:	4a3c      	ldr	r2, [pc, #240]	; (800cb90 <HAL_RCC_OscConfig+0x47c>)
 800caa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800caa4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	699b      	ldr	r3, [r3, #24]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d068      	beq.n	800cb80 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800caae:	4b38      	ldr	r3, [pc, #224]	; (800cb90 <HAL_RCC_OscConfig+0x47c>)
 800cab0:	689b      	ldr	r3, [r3, #8]
 800cab2:	f003 030c 	and.w	r3, r3, #12
 800cab6:	2b08      	cmp	r3, #8
 800cab8:	d060      	beq.n	800cb7c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	699b      	ldr	r3, [r3, #24]
 800cabe:	2b02      	cmp	r3, #2
 800cac0:	d145      	bne.n	800cb4e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cac2:	4b34      	ldr	r3, [pc, #208]	; (800cb94 <HAL_RCC_OscConfig+0x480>)
 800cac4:	2200      	movs	r2, #0
 800cac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cac8:	f7fc ff44 	bl	8009954 <HAL_GetTick>
 800cacc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cace:	e008      	b.n	800cae2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cad0:	f7fc ff40 	bl	8009954 <HAL_GetTick>
 800cad4:	4602      	mov	r2, r0
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	1ad3      	subs	r3, r2, r3
 800cada:	2b02      	cmp	r3, #2
 800cadc:	d901      	bls.n	800cae2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800cade:	2303      	movs	r3, #3
 800cae0:	e04f      	b.n	800cb82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cae2:	4b2b      	ldr	r3, [pc, #172]	; (800cb90 <HAL_RCC_OscConfig+0x47c>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800caea:	2b00      	cmp	r3, #0
 800caec:	d1f0      	bne.n	800cad0 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	69da      	ldr	r2, [r3, #28]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6a1b      	ldr	r3, [r3, #32]
 800caf6:	431a      	orrs	r2, r3
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cafc:	019b      	lsls	r3, r3, #6
 800cafe:	431a      	orrs	r2, r3
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb04:	085b      	lsrs	r3, r3, #1
 800cb06:	3b01      	subs	r3, #1
 800cb08:	041b      	lsls	r3, r3, #16
 800cb0a:	431a      	orrs	r2, r3
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb10:	061b      	lsls	r3, r3, #24
 800cb12:	431a      	orrs	r2, r3
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb18:	071b      	lsls	r3, r3, #28
 800cb1a:	491d      	ldr	r1, [pc, #116]	; (800cb90 <HAL_RCC_OscConfig+0x47c>)
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cb20:	4b1c      	ldr	r3, [pc, #112]	; (800cb94 <HAL_RCC_OscConfig+0x480>)
 800cb22:	2201      	movs	r2, #1
 800cb24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb26:	f7fc ff15 	bl	8009954 <HAL_GetTick>
 800cb2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb2c:	e008      	b.n	800cb40 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb2e:	f7fc ff11 	bl	8009954 <HAL_GetTick>
 800cb32:	4602      	mov	r2, r0
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	1ad3      	subs	r3, r2, r3
 800cb38:	2b02      	cmp	r3, #2
 800cb3a:	d901      	bls.n	800cb40 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800cb3c:	2303      	movs	r3, #3
 800cb3e:	e020      	b.n	800cb82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb40:	4b13      	ldr	r3, [pc, #76]	; (800cb90 <HAL_RCC_OscConfig+0x47c>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d0f0      	beq.n	800cb2e <HAL_RCC_OscConfig+0x41a>
 800cb4c:	e018      	b.n	800cb80 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cb4e:	4b11      	ldr	r3, [pc, #68]	; (800cb94 <HAL_RCC_OscConfig+0x480>)
 800cb50:	2200      	movs	r2, #0
 800cb52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb54:	f7fc fefe 	bl	8009954 <HAL_GetTick>
 800cb58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb5a:	e008      	b.n	800cb6e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb5c:	f7fc fefa 	bl	8009954 <HAL_GetTick>
 800cb60:	4602      	mov	r2, r0
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	1ad3      	subs	r3, r2, r3
 800cb66:	2b02      	cmp	r3, #2
 800cb68:	d901      	bls.n	800cb6e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800cb6a:	2303      	movs	r3, #3
 800cb6c:	e009      	b.n	800cb82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb6e:	4b08      	ldr	r3, [pc, #32]	; (800cb90 <HAL_RCC_OscConfig+0x47c>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d1f0      	bne.n	800cb5c <HAL_RCC_OscConfig+0x448>
 800cb7a:	e001      	b.n	800cb80 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	e000      	b.n	800cb82 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800cb80:	2300      	movs	r3, #0
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3718      	adds	r7, #24
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	40007000 	.word	0x40007000
 800cb90:	40023800 	.word	0x40023800
 800cb94:	42470060 	.word	0x42470060

0800cb98 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d101      	bne.n	800cbaa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cba6:	2301      	movs	r3, #1
 800cba8:	e022      	b.n	800cbf0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cbb0:	b2db      	uxtb	r3, r3
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d105      	bne.n	800cbc2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f7fa f889 	bl	8006cd4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2203      	movs	r2, #3
 800cbc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 f814 	bl	800cbf8 <HAL_SD_InitCard>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d001      	beq.n	800cbda <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	e00a      	b.n	800cbf0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2201      	movs	r2, #1
 800cbea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cbee:	2300      	movs	r3, #0
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3708      	adds	r7, #8
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cbf8:	b5b0      	push	{r4, r5, r7, lr}
 800cbfa:	b08e      	sub	sp, #56	; 0x38
 800cbfc:	af04      	add	r7, sp, #16
 800cbfe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800cc00:	2300      	movs	r3, #0
 800cc02:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800cc04:	2300      	movs	r3, #0
 800cc06:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cc10:	2300      	movs	r3, #0
 800cc12:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800cc14:	2376      	movs	r3, #118	; 0x76
 800cc16:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681d      	ldr	r5, [r3, #0]
 800cc1c:	466c      	mov	r4, sp
 800cc1e:	f107 0314 	add.w	r3, r7, #20
 800cc22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cc26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cc2a:	f107 0308 	add.w	r3, r7, #8
 800cc2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cc30:	4628      	mov	r0, r5
 800cc32:	f003 faa5 	bl	8010180 <SDIO_Init>
 800cc36:	4603      	mov	r3, r0
 800cc38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800cc3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d001      	beq.n	800cc48 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800cc44:	2301      	movs	r3, #1
 800cc46:	e031      	b.n	800ccac <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800cc48:	4b1a      	ldr	r3, [pc, #104]	; (800ccb4 <HAL_SD_InitCard+0xbc>)
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4618      	mov	r0, r3
 800cc54:	f003 fadd 	bl	8010212 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800cc58:	4b16      	ldr	r3, [pc, #88]	; (800ccb4 <HAL_SD_InitCard+0xbc>)
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f000 ffc4 	bl	800dbec <SD_PowerON>
 800cc64:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc66:	6a3b      	ldr	r3, [r7, #32]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d00b      	beq.n	800cc84 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2201      	movs	r2, #1
 800cc70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc78:	6a3b      	ldr	r3, [r7, #32]
 800cc7a:	431a      	orrs	r2, r3
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc80:	2301      	movs	r3, #1
 800cc82:	e013      	b.n	800ccac <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f000 fee5 	bl	800da54 <SD_InitCard>
 800cc8a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc8c:	6a3b      	ldr	r3, [r7, #32]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d00b      	beq.n	800ccaa <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2201      	movs	r2, #1
 800cc96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc9e:	6a3b      	ldr	r3, [r7, #32]
 800cca0:	431a      	orrs	r2, r3
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cca6:	2301      	movs	r3, #1
 800cca8:	e000      	b.n	800ccac <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800ccaa:	2300      	movs	r3, #0
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3728      	adds	r7, #40	; 0x28
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bdb0      	pop	{r4, r5, r7, pc}
 800ccb4:	422580a0 	.word	0x422580a0

0800ccb8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b08c      	sub	sp, #48	; 0x30
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	60f8      	str	r0, [r7, #12]
 800ccc0:	60b9      	str	r1, [r7, #8]
 800ccc2:	607a      	str	r2, [r7, #4]
 800ccc4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d107      	bne.n	800cce0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccd4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	e0c7      	b.n	800ce70 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	f040 80c0 	bne.w	800ce6e <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ccf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	441a      	add	r2, r3
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d907      	bls.n	800cd12 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd06:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	e0ae      	b.n	800ce70 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2203      	movs	r2, #3
 800cd16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800cd30:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd36:	4a50      	ldr	r2, [pc, #320]	; (800ce78 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800cd38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd3e:	4a4f      	ldr	r2, [pc, #316]	; (800ce7c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800cd40:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd46:	2200      	movs	r2, #0
 800cd48:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	3380      	adds	r3, #128	; 0x80
 800cd54:	4619      	mov	r1, r3
 800cd56:	68ba      	ldr	r2, [r7, #8]
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	025b      	lsls	r3, r3, #9
 800cd5c:	089b      	lsrs	r3, r3, #2
 800cd5e:	f7fd fbed 	bl	800a53c <HAL_DMA_Start_IT>
 800cd62:	4603      	mov	r3, r0
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d017      	beq.n	800cd98 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800cd76:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4a40      	ldr	r2, [pc, #256]	; (800ce80 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cd7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cd94:	2301      	movs	r3, #1
 800cd96:	e06b      	b.n	800ce70 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800cd98:	4b3a      	ldr	r3, [pc, #232]	; (800ce84 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d002      	beq.n	800cdac <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800cda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda8:	025b      	lsls	r3, r3, #9
 800cdaa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f003 fabf 	bl	8010338 <SDMMC_CmdBlockLength>
 800cdba:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800cdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d00f      	beq.n	800cde2 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4a2e      	ldr	r2, [pc, #184]	; (800ce80 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cdc8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd0:	431a      	orrs	r2, r3
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	2201      	movs	r2, #1
 800cdda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800cdde:	2301      	movs	r3, #1
 800cde0:	e046      	b.n	800ce70 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cde2:	f04f 33ff 	mov.w	r3, #4294967295
 800cde6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	025b      	lsls	r3, r3, #9
 800cdec:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cdee:	2390      	movs	r3, #144	; 0x90
 800cdf0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800cdf2:	2302      	movs	r3, #2
 800cdf4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f107 0210 	add.w	r2, r7, #16
 800ce06:	4611      	mov	r1, r2
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f003 fa69 	bl	80102e0 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d90a      	bls.n	800ce2a <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2282      	movs	r2, #130	; 0x82
 800ce18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce20:	4618      	mov	r0, r3
 800ce22:	f003 facd 	bl	80103c0 <SDMMC_CmdReadMultiBlock>
 800ce26:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ce28:	e009      	b.n	800ce3e <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	2281      	movs	r2, #129	; 0x81
 800ce2e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce36:	4618      	mov	r0, r3
 800ce38:	f003 faa0 	bl	801037c <SDMMC_CmdReadSingleBlock>
 800ce3c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800ce3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d012      	beq.n	800ce6a <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	4a0d      	ldr	r2, [pc, #52]	; (800ce80 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800ce4a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce52:	431a      	orrs	r2, r3
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	2200      	movs	r2, #0
 800ce64:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800ce66:	2301      	movs	r3, #1
 800ce68:	e002      	b.n	800ce70 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	e000      	b.n	800ce70 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800ce6e:	2302      	movs	r3, #2
  }
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3730      	adds	r7, #48	; 0x30
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	0800d863 	.word	0x0800d863
 800ce7c:	0800d8d5 	.word	0x0800d8d5
 800ce80:	004005ff 	.word	0x004005ff
 800ce84:	4225858c 	.word	0x4225858c

0800ce88 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b08c      	sub	sp, #48	; 0x30
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	60f8      	str	r0, [r7, #12]
 800ce90:	60b9      	str	r1, [r7, #8]
 800ce92:	607a      	str	r2, [r7, #4]
 800ce94:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d107      	bne.n	800ceb0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ceac:	2301      	movs	r3, #1
 800ceae:	e0ca      	b.n	800d046 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	f040 80c3 	bne.w	800d044 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2200      	movs	r2, #0
 800cec2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	441a      	add	r2, r3
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cece:	429a      	cmp	r2, r3
 800ced0:	d907      	bls.n	800cee2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ced6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cede:	2301      	movs	r3, #1
 800cee0:	e0b1      	b.n	800d046 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2203      	movs	r2, #3
 800cee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	2200      	movs	r2, #0
 800cef0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f042 021a 	orr.w	r2, r2, #26
 800cf00:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf06:	4a52      	ldr	r2, [pc, #328]	; (800d050 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800cf08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf0e:	4a51      	ldr	r2, [pc, #324]	; (800d054 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800cf10:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf16:	2200      	movs	r2, #0
 800cf18:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d002      	beq.n	800cf28 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800cf22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf24:	025b      	lsls	r3, r3, #9
 800cf26:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cf30:	4618      	mov	r0, r3
 800cf32:	f003 fa01 	bl	8010338 <SDMMC_CmdBlockLength>
 800cf36:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d00f      	beq.n	800cf5e <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	4a45      	ldr	r2, [pc, #276]	; (800d058 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cf44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf4c:	431a      	orrs	r2, r3
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2201      	movs	r2, #1
 800cf56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	e073      	b.n	800d046 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d90a      	bls.n	800cf7a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	22a0      	movs	r2, #160	; 0xa0
 800cf68:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf70:	4618      	mov	r0, r3
 800cf72:	f003 fa69 	bl	8010448 <SDMMC_CmdWriteMultiBlock>
 800cf76:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cf78:	e009      	b.n	800cf8e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2290      	movs	r2, #144	; 0x90
 800cf7e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf86:	4618      	mov	r0, r3
 800cf88:	f003 fa3c 	bl	8010404 <SDMMC_CmdWriteSingleBlock>
 800cf8c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d012      	beq.n	800cfba <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4a2f      	ldr	r2, [pc, #188]	; (800d058 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cf9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa2:	431a      	orrs	r2, r3
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2201      	movs	r2, #1
 800cfac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	e045      	b.n	800d046 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800cfba:	4b28      	ldr	r3, [pc, #160]	; (800d05c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800cfc4:	68b9      	ldr	r1, [r7, #8]
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	3380      	adds	r3, #128	; 0x80
 800cfcc:	461a      	mov	r2, r3
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	025b      	lsls	r3, r3, #9
 800cfd2:	089b      	lsrs	r3, r3, #2
 800cfd4:	f7fd fab2 	bl	800a53c <HAL_DMA_Start_IT>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d01a      	beq.n	800d014 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f022 021a 	bic.w	r2, r2, #26
 800cfec:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	4a19      	ldr	r2, [pc, #100]	; (800d058 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cff4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cffa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2201      	movs	r2, #1
 800d006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2200      	movs	r2, #0
 800d00e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d010:	2301      	movs	r3, #1
 800d012:	e018      	b.n	800d046 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d014:	f04f 33ff 	mov.w	r3, #4294967295
 800d018:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	025b      	lsls	r3, r3, #9
 800d01e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d020:	2390      	movs	r3, #144	; 0x90
 800d022:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d024:	2300      	movs	r3, #0
 800d026:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d028:	2300      	movs	r3, #0
 800d02a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d02c:	2301      	movs	r3, #1
 800d02e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f107 0210 	add.w	r2, r7, #16
 800d038:	4611      	mov	r1, r2
 800d03a:	4618      	mov	r0, r3
 800d03c:	f003 f950 	bl	80102e0 <SDIO_ConfigData>

      return HAL_OK;
 800d040:	2300      	movs	r3, #0
 800d042:	e000      	b.n	800d046 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d044:	2302      	movs	r3, #2
  }
}
 800d046:	4618      	mov	r0, r3
 800d048:	3730      	adds	r7, #48	; 0x30
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	bf00      	nop
 800d050:	0800d839 	.word	0x0800d839
 800d054:	0800d8d5 	.word	0x0800d8d5
 800d058:	004005ff 	.word	0x004005ff
 800d05c:	4225858c 	.word	0x4225858c

0800d060 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d06c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d008      	beq.n	800d08e <HAL_SD_IRQHandler+0x2e>
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f003 0308 	and.w	r3, r3, #8
 800d082:	2b00      	cmp	r3, #0
 800d084:	d003      	beq.n	800d08e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f000 ffc6 	bl	800e018 <SD_Read_IT>
 800d08c:	e155      	b.n	800d33a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d098:	2b00      	cmp	r3, #0
 800d09a:	f000 808f 	beq.w	800d1bc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0a6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	6812      	ldr	r2, [r2, #0]
 800d0b2:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d0b6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d0ba:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f022 0201 	bic.w	r2, r2, #1
 800d0ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	f003 0308 	and.w	r3, r3, #8
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d039      	beq.n	800d14a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	f003 0302 	and.w	r3, r3, #2
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d104      	bne.n	800d0ea <HAL_SD_IRQHandler+0x8a>
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	f003 0320 	and.w	r3, r3, #32
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d011      	beq.n	800d10e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f003 f9cc 	bl	801048c <SDMMC_CmdStopTransfer>
 800d0f4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d008      	beq.n	800d10e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	431a      	orrs	r2, r3
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f000 f91f 	bl	800d34c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	f240 523a 	movw	r2, #1338	; 0x53a
 800d116:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2201      	movs	r2, #1
 800d11c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2200      	movs	r2, #0
 800d124:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	f003 0301 	and.w	r3, r3, #1
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d104      	bne.n	800d13a <HAL_SD_IRQHandler+0xda>
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f003 0302 	and.w	r3, r3, #2
 800d136:	2b00      	cmp	r3, #0
 800d138:	d003      	beq.n	800d142 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f003 fe22 	bl	8010d84 <HAL_SD_RxCpltCallback>
 800d140:	e0fb      	b.n	800d33a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f003 fe14 	bl	8010d70 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d148:	e0f7      	b.n	800d33a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d150:	2b00      	cmp	r3, #0
 800d152:	f000 80f2 	beq.w	800d33a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	f003 0320 	and.w	r3, r3, #32
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d011      	beq.n	800d184 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4618      	mov	r0, r3
 800d166:	f003 f991 	bl	801048c <SDMMC_CmdStopTransfer>
 800d16a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d008      	beq.n	800d184 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	431a      	orrs	r2, r3
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 f8e4 	bl	800d34c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f003 0301 	and.w	r3, r3, #1
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	f040 80d5 	bne.w	800d33a <HAL_SD_IRQHandler+0x2da>
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	f003 0302 	and.w	r3, r3, #2
 800d196:	2b00      	cmp	r3, #0
 800d198:	f040 80cf 	bne.w	800d33a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f022 0208 	bic.w	r2, r2, #8
 800d1aa:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f003 fddb 	bl	8010d70 <HAL_SD_TxCpltCallback>
}
 800d1ba:	e0be      	b.n	800d33a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d008      	beq.n	800d1dc <HAL_SD_IRQHandler+0x17c>
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	f003 0308 	and.w	r3, r3, #8
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d003      	beq.n	800d1dc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f000 ff70 	bl	800e0ba <SD_Write_IT>
 800d1da:	e0ae      	b.n	800d33a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1e2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	f000 80a7 	beq.w	800d33a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1f2:	f003 0302 	and.w	r3, r3, #2
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d005      	beq.n	800d206 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1fe:	f043 0202 	orr.w	r2, r3, #2
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d20c:	f003 0308 	and.w	r3, r3, #8
 800d210:	2b00      	cmp	r3, #0
 800d212:	d005      	beq.n	800d220 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d218:	f043 0208 	orr.w	r2, r3, #8
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d226:	f003 0320 	and.w	r3, r3, #32
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d005      	beq.n	800d23a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d232:	f043 0220 	orr.w	r2, r3, #32
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d240:	f003 0310 	and.w	r3, r3, #16
 800d244:	2b00      	cmp	r3, #0
 800d246:	d005      	beq.n	800d254 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d24c:	f043 0210 	orr.w	r2, r3, #16
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f240 523a 	movw	r2, #1338	; 0x53a
 800d25c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d26c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	4618      	mov	r0, r3
 800d274:	f003 f90a 	bl	801048c <SDMMC_CmdStopTransfer>
 800d278:	4602      	mov	r2, r0
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d27e:	431a      	orrs	r2, r3
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f003 0308 	and.w	r3, r3, #8
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d00a      	beq.n	800d2a4 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2201      	movs	r2, #1
 800d292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2200      	movs	r2, #0
 800d29a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 f855 	bl	800d34c <HAL_SD_ErrorCallback>
}
 800d2a2:	e04a      	b.n	800d33a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d045      	beq.n	800d33a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	f003 0310 	and.w	r3, r3, #16
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d104      	bne.n	800d2c2 <HAL_SD_IRQHandler+0x262>
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	f003 0320 	and.w	r3, r3, #32
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d011      	beq.n	800d2e6 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2c6:	4a1f      	ldr	r2, [pc, #124]	; (800d344 <HAL_SD_IRQHandler+0x2e4>)
 800d2c8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7fd f98c 	bl	800a5ec <HAL_DMA_Abort_IT>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d02f      	beq.n	800d33a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f000 fb4a 	bl	800d978 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d2e4:	e029      	b.n	800d33a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f003 0301 	and.w	r3, r3, #1
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d104      	bne.n	800d2fa <HAL_SD_IRQHandler+0x29a>
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f003 0302 	and.w	r3, r3, #2
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d011      	beq.n	800d31e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2fe:	4a12      	ldr	r2, [pc, #72]	; (800d348 <HAL_SD_IRQHandler+0x2e8>)
 800d300:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d306:	4618      	mov	r0, r3
 800d308:	f7fd f970 	bl	800a5ec <HAL_DMA_Abort_IT>
 800d30c:	4603      	mov	r3, r0
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d013      	beq.n	800d33a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d316:	4618      	mov	r0, r3
 800d318:	f000 fb65 	bl	800d9e6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d31c:	e00d      	b.n	800d33a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2200      	movs	r2, #0
 800d322:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2201      	movs	r2, #1
 800d328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2200      	movs	r2, #0
 800d330:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f003 fd12 	bl	8010d5c <HAL_SD_AbortCallback>
}
 800d338:	e7ff      	b.n	800d33a <HAL_SD_IRQHandler+0x2da>
 800d33a:	bf00      	nop
 800d33c:	3710      	adds	r7, #16
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
 800d342:	bf00      	nop
 800d344:	0800d979 	.word	0x0800d979
 800d348:	0800d9e7 	.word	0x0800d9e7

0800d34c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d34c:	b480      	push	{r7}
 800d34e:	b083      	sub	sp, #12
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d354:	bf00      	nop
 800d356:	370c      	adds	r7, #12
 800d358:	46bd      	mov	sp, r7
 800d35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35e:	4770      	bx	lr

0800d360 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d360:	b480      	push	{r7}
 800d362:	b083      	sub	sp, #12
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d36e:	0f9b      	lsrs	r3, r3, #30
 800d370:	b2da      	uxtb	r2, r3
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d37a:	0e9b      	lsrs	r3, r3, #26
 800d37c:	b2db      	uxtb	r3, r3
 800d37e:	f003 030f 	and.w	r3, r3, #15
 800d382:	b2da      	uxtb	r2, r3
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d38c:	0e1b      	lsrs	r3, r3, #24
 800d38e:	b2db      	uxtb	r3, r3
 800d390:	f003 0303 	and.w	r3, r3, #3
 800d394:	b2da      	uxtb	r2, r3
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d39e:	0c1b      	lsrs	r3, r3, #16
 800d3a0:	b2da      	uxtb	r2, r3
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3aa:	0a1b      	lsrs	r3, r3, #8
 800d3ac:	b2da      	uxtb	r2, r3
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3b6:	b2da      	uxtb	r2, r3
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3c0:	0d1b      	lsrs	r3, r3, #20
 800d3c2:	b29a      	uxth	r2, r3
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3cc:	0c1b      	lsrs	r3, r3, #16
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	f003 030f 	and.w	r3, r3, #15
 800d3d4:	b2da      	uxtb	r2, r3
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3de:	0bdb      	lsrs	r3, r3, #15
 800d3e0:	b2db      	uxtb	r3, r3
 800d3e2:	f003 0301 	and.w	r3, r3, #1
 800d3e6:	b2da      	uxtb	r2, r3
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3f0:	0b9b      	lsrs	r3, r3, #14
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	f003 0301 	and.w	r3, r3, #1
 800d3f8:	b2da      	uxtb	r2, r3
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d402:	0b5b      	lsrs	r3, r3, #13
 800d404:	b2db      	uxtb	r3, r3
 800d406:	f003 0301 	and.w	r3, r3, #1
 800d40a:	b2da      	uxtb	r2, r3
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d414:	0b1b      	lsrs	r3, r3, #12
 800d416:	b2db      	uxtb	r3, r3
 800d418:	f003 0301 	and.w	r3, r3, #1
 800d41c:	b2da      	uxtb	r2, r3
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	2200      	movs	r2, #0
 800d426:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d163      	bne.n	800d4f8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d434:	009a      	lsls	r2, r3, #2
 800d436:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d43a:	4013      	ands	r3, r2
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d440:	0f92      	lsrs	r2, r2, #30
 800d442:	431a      	orrs	r2, r3
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d44c:	0edb      	lsrs	r3, r3, #27
 800d44e:	b2db      	uxtb	r3, r3
 800d450:	f003 0307 	and.w	r3, r3, #7
 800d454:	b2da      	uxtb	r2, r3
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d45e:	0e1b      	lsrs	r3, r3, #24
 800d460:	b2db      	uxtb	r3, r3
 800d462:	f003 0307 	and.w	r3, r3, #7
 800d466:	b2da      	uxtb	r2, r3
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d470:	0d5b      	lsrs	r3, r3, #21
 800d472:	b2db      	uxtb	r3, r3
 800d474:	f003 0307 	and.w	r3, r3, #7
 800d478:	b2da      	uxtb	r2, r3
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d482:	0c9b      	lsrs	r3, r3, #18
 800d484:	b2db      	uxtb	r3, r3
 800d486:	f003 0307 	and.w	r3, r3, #7
 800d48a:	b2da      	uxtb	r2, r3
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d494:	0bdb      	lsrs	r3, r3, #15
 800d496:	b2db      	uxtb	r3, r3
 800d498:	f003 0307 	and.w	r3, r3, #7
 800d49c:	b2da      	uxtb	r2, r3
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	691b      	ldr	r3, [r3, #16]
 800d4a6:	1c5a      	adds	r2, r3, #1
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	7e1b      	ldrb	r3, [r3, #24]
 800d4b0:	b2db      	uxtb	r3, r3
 800d4b2:	f003 0307 	and.w	r3, r3, #7
 800d4b6:	3302      	adds	r3, #2
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d4c2:	fb02 f203 	mul.w	r2, r2, r3
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	7a1b      	ldrb	r3, [r3, #8]
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	f003 030f 	and.w	r3, r3, #15
 800d4d4:	2201      	movs	r2, #1
 800d4d6:	409a      	lsls	r2, r3
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4e0:	687a      	ldr	r2, [r7, #4]
 800d4e2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d4e4:	0a52      	lsrs	r2, r2, #9
 800d4e6:	fb02 f203 	mul.w	r2, r2, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d4f4:	661a      	str	r2, [r3, #96]	; 0x60
 800d4f6:	e031      	b.n	800d55c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d11d      	bne.n	800d53c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d504:	041b      	lsls	r3, r3, #16
 800d506:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d50e:	0c1b      	lsrs	r3, r3, #16
 800d510:	431a      	orrs	r2, r3
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	691b      	ldr	r3, [r3, #16]
 800d51a:	3301      	adds	r3, #1
 800d51c:	029a      	lsls	r2, r3, #10
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d530:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	661a      	str	r2, [r3, #96]	; 0x60
 800d53a:	e00f      	b.n	800d55c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4a58      	ldr	r2, [pc, #352]	; (800d6a4 <HAL_SD_GetCardCSD+0x344>)
 800d542:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d548:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2201      	movs	r2, #1
 800d554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d558:	2301      	movs	r3, #1
 800d55a:	e09d      	b.n	800d698 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d560:	0b9b      	lsrs	r3, r3, #14
 800d562:	b2db      	uxtb	r3, r3
 800d564:	f003 0301 	and.w	r3, r3, #1
 800d568:	b2da      	uxtb	r2, r3
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d572:	09db      	lsrs	r3, r3, #7
 800d574:	b2db      	uxtb	r3, r3
 800d576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d57a:	b2da      	uxtb	r2, r3
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d584:	b2db      	uxtb	r3, r3
 800d586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d58a:	b2da      	uxtb	r2, r3
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d594:	0fdb      	lsrs	r3, r3, #31
 800d596:	b2da      	uxtb	r2, r3
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5a0:	0f5b      	lsrs	r3, r3, #29
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	f003 0303 	and.w	r3, r3, #3
 800d5a8:	b2da      	uxtb	r2, r3
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5b2:	0e9b      	lsrs	r3, r3, #26
 800d5b4:	b2db      	uxtb	r3, r3
 800d5b6:	f003 0307 	and.w	r3, r3, #7
 800d5ba:	b2da      	uxtb	r2, r3
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5c4:	0d9b      	lsrs	r3, r3, #22
 800d5c6:	b2db      	uxtb	r3, r3
 800d5c8:	f003 030f 	and.w	r3, r3, #15
 800d5cc:	b2da      	uxtb	r2, r3
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5d6:	0d5b      	lsrs	r3, r3, #21
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	f003 0301 	and.w	r3, r3, #1
 800d5de:	b2da      	uxtb	r2, r3
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5f2:	0c1b      	lsrs	r3, r3, #16
 800d5f4:	b2db      	uxtb	r3, r3
 800d5f6:	f003 0301 	and.w	r3, r3, #1
 800d5fa:	b2da      	uxtb	r2, r3
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d606:	0bdb      	lsrs	r3, r3, #15
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	f003 0301 	and.w	r3, r3, #1
 800d60e:	b2da      	uxtb	r2, r3
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d61a:	0b9b      	lsrs	r3, r3, #14
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	f003 0301 	and.w	r3, r3, #1
 800d622:	b2da      	uxtb	r2, r3
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d62e:	0b5b      	lsrs	r3, r3, #13
 800d630:	b2db      	uxtb	r3, r3
 800d632:	f003 0301 	and.w	r3, r3, #1
 800d636:	b2da      	uxtb	r2, r3
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d642:	0b1b      	lsrs	r3, r3, #12
 800d644:	b2db      	uxtb	r3, r3
 800d646:	f003 0301 	and.w	r3, r3, #1
 800d64a:	b2da      	uxtb	r2, r3
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d656:	0a9b      	lsrs	r3, r3, #10
 800d658:	b2db      	uxtb	r3, r3
 800d65a:	f003 0303 	and.w	r3, r3, #3
 800d65e:	b2da      	uxtb	r2, r3
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d66a:	0a1b      	lsrs	r3, r3, #8
 800d66c:	b2db      	uxtb	r3, r3
 800d66e:	f003 0303 	and.w	r3, r3, #3
 800d672:	b2da      	uxtb	r2, r3
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d67e:	085b      	lsrs	r3, r3, #1
 800d680:	b2db      	uxtb	r3, r3
 800d682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d686:	b2da      	uxtb	r2, r3
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	2201      	movs	r2, #1
 800d692:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d696:	2300      	movs	r3, #0
}
 800d698:	4618      	mov	r0, r3
 800d69a:	370c      	adds	r7, #12
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr
 800d6a4:	004005ff 	.word	0x004005ff

0800d6a8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b083      	sub	sp, #12
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d6f2:	2300      	movs	r3, #0
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	370c      	adds	r7, #12
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr

0800d700 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d700:	b5b0      	push	{r4, r5, r7, lr}
 800d702:	b08e      	sub	sp, #56	; 0x38
 800d704:	af04      	add	r7, sp, #16
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2203      	movs	r2, #3
 800d70e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d716:	2b03      	cmp	r3, #3
 800d718:	d02e      	beq.n	800d778 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d720:	d106      	bne.n	800d730 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d726:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	639a      	str	r2, [r3, #56]	; 0x38
 800d72e:	e029      	b.n	800d784 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d736:	d10a      	bne.n	800d74e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f000 fb0d 	bl	800dd58 <SD_WideBus_Enable>
 800d73e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d746:	431a      	orrs	r2, r3
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	639a      	str	r2, [r3, #56]	; 0x38
 800d74c:	e01a      	b.n	800d784 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d10a      	bne.n	800d76a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f000 fb4a 	bl	800ddee <SD_WideBus_Disable>
 800d75a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d762:	431a      	orrs	r2, r3
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	639a      	str	r2, [r3, #56]	; 0x38
 800d768:	e00c      	b.n	800d784 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d76e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	639a      	str	r2, [r3, #56]	; 0x38
 800d776:	e005      	b.n	800d784 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d77c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d009      	beq.n	800d7a0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	4a18      	ldr	r2, [pc, #96]	; (800d7f4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800d792:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2201      	movs	r2, #1
 800d798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d79c:	2301      	movs	r3, #1
 800d79e:	e024      	b.n	800d7ea <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	689b      	ldr	r3, [r3, #8]
 800d7aa:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	68db      	ldr	r3, [r3, #12]
 800d7b0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	695b      	ldr	r3, [r3, #20]
 800d7ba:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	699b      	ldr	r3, [r3, #24]
 800d7c0:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681d      	ldr	r5, [r3, #0]
 800d7c6:	466c      	mov	r4, sp
 800d7c8:	f107 0318 	add.w	r3, r7, #24
 800d7cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d7d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d7d4:	f107 030c 	add.w	r3, r7, #12
 800d7d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d7da:	4628      	mov	r0, r5
 800d7dc:	f002 fcd0 	bl	8010180 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d7e8:	2300      	movs	r3, #0
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3728      	adds	r7, #40	; 0x28
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bdb0      	pop	{r4, r5, r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	004005ff 	.word	0x004005ff

0800d7f8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b086      	sub	sp, #24
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d800:	2300      	movs	r3, #0
 800d802:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d804:	f107 030c 	add.w	r3, r7, #12
 800d808:	4619      	mov	r1, r3
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f000 fa7c 	bl	800dd08 <SD_SendStatus>
 800d810:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d005      	beq.n	800d824 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	431a      	orrs	r2, r3
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	0a5b      	lsrs	r3, r3, #9
 800d828:	f003 030f 	and.w	r3, r3, #15
 800d82c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d82e:	693b      	ldr	r3, [r7, #16]
}
 800d830:	4618      	mov	r0, r3
 800d832:	3718      	adds	r7, #24
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d838:	b480      	push	{r7}
 800d83a:	b085      	sub	sp, #20
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d844:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d854:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d856:	bf00      	nop
 800d858:	3714      	adds	r7, #20
 800d85a:	46bd      	mov	sp, r7
 800d85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d860:	4770      	bx	lr

0800d862 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d862:	b580      	push	{r7, lr}
 800d864:	b084      	sub	sp, #16
 800d866:	af00      	add	r7, sp, #0
 800d868:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d86e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d874:	2b82      	cmp	r3, #130	; 0x82
 800d876:	d111      	bne.n	800d89c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	4618      	mov	r0, r3
 800d87e:	f002 fe05 	bl	801048c <SDMMC_CmdStopTransfer>
 800d882:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d008      	beq.n	800d89c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	431a      	orrs	r2, r3
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	f7ff fd58 	bl	800d34c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	f022 0208 	bic.w	r2, r2, #8
 800d8aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f240 523a 	movw	r2, #1338	; 0x53a
 800d8b4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f003 fa5d 	bl	8010d84 <HAL_SD_RxCpltCallback>
#endif
}
 800d8ca:	bf00      	nop
 800d8cc:	3710      	adds	r7, #16
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
	...

0800d8d4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b086      	sub	sp, #24
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8e0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f7fd f82e 	bl	800a944 <HAL_DMA_GetError>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	2b02      	cmp	r3, #2
 800d8ec:	d03e      	beq.n	800d96c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8f4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8fc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	2b01      	cmp	r3, #1
 800d902:	d002      	beq.n	800d90a <SD_DMAError+0x36>
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2b01      	cmp	r3, #1
 800d908:	d12d      	bne.n	800d966 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	4a19      	ldr	r2, [pc, #100]	; (800d974 <SD_DMAError+0xa0>)
 800d910:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d920:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d926:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d92e:	6978      	ldr	r0, [r7, #20]
 800d930:	f7ff ff62 	bl	800d7f8 <HAL_SD_GetCardState>
 800d934:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	2b06      	cmp	r3, #6
 800d93a:	d002      	beq.n	800d942 <SD_DMAError+0x6e>
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	2b05      	cmp	r3, #5
 800d940:	d10a      	bne.n	800d958 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4618      	mov	r0, r3
 800d948:	f002 fda0 	bl	801048c <SDMMC_CmdStopTransfer>
 800d94c:	4602      	mov	r2, r0
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d952:	431a      	orrs	r2, r3
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	2201      	movs	r2, #1
 800d95c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	2200      	movs	r2, #0
 800d964:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d966:	6978      	ldr	r0, [r7, #20]
 800d968:	f7ff fcf0 	bl	800d34c <HAL_SD_ErrorCallback>
#endif
  }
}
 800d96c:	bf00      	nop
 800d96e:	3718      	adds	r7, #24
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}
 800d974:	004005ff 	.word	0x004005ff

0800d978 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b084      	sub	sp, #16
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d984:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f240 523a 	movw	r2, #1338	; 0x53a
 800d98e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d990:	68f8      	ldr	r0, [r7, #12]
 800d992:	f7ff ff31 	bl	800d7f8 <HAL_SD_GetCardState>
 800d996:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2201      	movs	r2, #1
 800d99c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	2b06      	cmp	r3, #6
 800d9aa:	d002      	beq.n	800d9b2 <SD_DMATxAbort+0x3a>
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	2b05      	cmp	r3, #5
 800d9b0:	d10a      	bne.n	800d9c8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f002 fd68 	bl	801048c <SDMMC_CmdStopTransfer>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c2:	431a      	orrs	r2, r3
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d103      	bne.n	800d9d8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d9d0:	68f8      	ldr	r0, [r7, #12]
 800d9d2:	f003 f9c3 	bl	8010d5c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d9d6:	e002      	b.n	800d9de <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f7ff fcb7 	bl	800d34c <HAL_SD_ErrorCallback>
}
 800d9de:	bf00      	nop
 800d9e0:	3710      	adds	r7, #16
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}

0800d9e6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d9e6:	b580      	push	{r7, lr}
 800d9e8:	b084      	sub	sp, #16
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9f2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f240 523a 	movw	r2, #1338	; 0x53a
 800d9fc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d9fe:	68f8      	ldr	r0, [r7, #12]
 800da00:	f7ff fefa 	bl	800d7f8 <HAL_SD_GetCardState>
 800da04:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2201      	movs	r2, #1
 800da0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	2200      	movs	r2, #0
 800da12:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	2b06      	cmp	r3, #6
 800da18:	d002      	beq.n	800da20 <SD_DMARxAbort+0x3a>
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	2b05      	cmp	r3, #5
 800da1e:	d10a      	bne.n	800da36 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4618      	mov	r0, r3
 800da26:	f002 fd31 	bl	801048c <SDMMC_CmdStopTransfer>
 800da2a:	4602      	mov	r2, r0
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da30:	431a      	orrs	r2, r3
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d103      	bne.n	800da46 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800da3e:	68f8      	ldr	r0, [r7, #12]
 800da40:	f003 f98c 	bl	8010d5c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800da44:	e002      	b.n	800da4c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800da46:	68f8      	ldr	r0, [r7, #12]
 800da48:	f7ff fc80 	bl	800d34c <HAL_SD_ErrorCallback>
}
 800da4c:	bf00      	nop
 800da4e:	3710      	adds	r7, #16
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}

0800da54 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800da54:	b5b0      	push	{r4, r5, r7, lr}
 800da56:	b094      	sub	sp, #80	; 0x50
 800da58:	af04      	add	r7, sp, #16
 800da5a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800da5c:	2301      	movs	r3, #1
 800da5e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	4618      	mov	r0, r3
 800da66:	f002 fbe3 	bl	8010230 <SDIO_GetPowerState>
 800da6a:	4603      	mov	r3, r0
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d102      	bne.n	800da76 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800da70:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800da74:	e0b6      	b.n	800dbe4 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da7a:	2b03      	cmp	r3, #3
 800da7c:	d02f      	beq.n	800dade <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	4618      	mov	r0, r3
 800da84:	f002 fe0c 	bl	80106a0 <SDMMC_CmdSendCID>
 800da88:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800da8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d001      	beq.n	800da94 <SD_InitCard+0x40>
    {
      return errorstate;
 800da90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da92:	e0a7      	b.n	800dbe4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	2100      	movs	r1, #0
 800da9a:	4618      	mov	r0, r3
 800da9c:	f002 fc0d 	bl	80102ba <SDIO_GetResponse>
 800daa0:	4602      	mov	r2, r0
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	2104      	movs	r1, #4
 800daac:	4618      	mov	r0, r3
 800daae:	f002 fc04 	bl	80102ba <SDIO_GetResponse>
 800dab2:	4602      	mov	r2, r0
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	2108      	movs	r1, #8
 800dabe:	4618      	mov	r0, r3
 800dac0:	f002 fbfb 	bl	80102ba <SDIO_GetResponse>
 800dac4:	4602      	mov	r2, r0
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	210c      	movs	r1, #12
 800dad0:	4618      	mov	r0, r3
 800dad2:	f002 fbf2 	bl	80102ba <SDIO_GetResponse>
 800dad6:	4602      	mov	r2, r0
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dae2:	2b03      	cmp	r3, #3
 800dae4:	d00d      	beq.n	800db02 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f107 020e 	add.w	r2, r7, #14
 800daee:	4611      	mov	r1, r2
 800daf0:	4618      	mov	r0, r3
 800daf2:	f002 fe12 	bl	801071a <SDMMC_CmdSetRelAdd>
 800daf6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800daf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d001      	beq.n	800db02 <SD_InitCard+0xae>
    {
      return errorstate;
 800dafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db00:	e070      	b.n	800dbe4 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db06:	2b03      	cmp	r3, #3
 800db08:	d036      	beq.n	800db78 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800db0a:	89fb      	ldrh	r3, [r7, #14]
 800db0c:	461a      	mov	r2, r3
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681a      	ldr	r2, [r3, #0]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db1a:	041b      	lsls	r3, r3, #16
 800db1c:	4619      	mov	r1, r3
 800db1e:	4610      	mov	r0, r2
 800db20:	f002 fddc 	bl	80106dc <SDMMC_CmdSendCSD>
 800db24:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800db26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d001      	beq.n	800db30 <SD_InitCard+0xdc>
    {
      return errorstate;
 800db2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db2e:	e059      	b.n	800dbe4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2100      	movs	r1, #0
 800db36:	4618      	mov	r0, r3
 800db38:	f002 fbbf 	bl	80102ba <SDIO_GetResponse>
 800db3c:	4602      	mov	r2, r0
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	2104      	movs	r1, #4
 800db48:	4618      	mov	r0, r3
 800db4a:	f002 fbb6 	bl	80102ba <SDIO_GetResponse>
 800db4e:	4602      	mov	r2, r0
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	2108      	movs	r1, #8
 800db5a:	4618      	mov	r0, r3
 800db5c:	f002 fbad 	bl	80102ba <SDIO_GetResponse>
 800db60:	4602      	mov	r2, r0
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	210c      	movs	r1, #12
 800db6c:	4618      	mov	r0, r3
 800db6e:	f002 fba4 	bl	80102ba <SDIO_GetResponse>
 800db72:	4602      	mov	r2, r0
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	2104      	movs	r1, #4
 800db7e:	4618      	mov	r0, r3
 800db80:	f002 fb9b 	bl	80102ba <SDIO_GetResponse>
 800db84:	4603      	mov	r3, r0
 800db86:	0d1a      	lsrs	r2, r3, #20
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800db8c:	f107 0310 	add.w	r3, r7, #16
 800db90:	4619      	mov	r1, r3
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f7ff fbe4 	bl	800d360 <HAL_SD_GetCardCSD>
 800db98:	4603      	mov	r3, r0
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d002      	beq.n	800dba4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dba2:	e01f      	b.n	800dbe4 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6819      	ldr	r1, [r3, #0]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbac:	041b      	lsls	r3, r3, #16
 800dbae:	461a      	mov	r2, r3
 800dbb0:	f04f 0300 	mov.w	r3, #0
 800dbb4:	4608      	mov	r0, r1
 800dbb6:	f002 fc8b 	bl	80104d0 <SDMMC_CmdSelDesel>
 800dbba:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d001      	beq.n	800dbc6 <SD_InitCard+0x172>
  {
    return errorstate;
 800dbc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbc4:	e00e      	b.n	800dbe4 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681d      	ldr	r5, [r3, #0]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	466c      	mov	r4, sp
 800dbce:	f103 0210 	add.w	r2, r3, #16
 800dbd2:	ca07      	ldmia	r2, {r0, r1, r2}
 800dbd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dbd8:	3304      	adds	r3, #4
 800dbda:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dbdc:	4628      	mov	r0, r5
 800dbde:	f002 facf 	bl	8010180 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800dbe2:	2300      	movs	r3, #0
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3740      	adds	r7, #64	; 0x40
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bdb0      	pop	{r4, r5, r7, pc}

0800dbec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b086      	sub	sp, #24
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	617b      	str	r3, [r7, #20]
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	4618      	mov	r0, r3
 800dc06:	f002 fc86 	bl	8010516 <SDMMC_CmdGoIdleState>
 800dc0a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d001      	beq.n	800dc16 <SD_PowerON+0x2a>
  {
    return errorstate;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	e072      	b.n	800dcfc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f002 fc99 	bl	8010552 <SDMMC_CmdOperCond>
 800dc20:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d00d      	beq.n	800dc44 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4618      	mov	r0, r3
 800dc34:	f002 fc6f 	bl	8010516 <SDMMC_CmdGoIdleState>
 800dc38:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d004      	beq.n	800dc4a <SD_PowerON+0x5e>
    {
      return errorstate;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	e05b      	b.n	800dcfc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2201      	movs	r2, #1
 800dc48:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d137      	bne.n	800dcc2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	2100      	movs	r1, #0
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f002 fc99 	bl	8010590 <SDMMC_CmdAppCommand>
 800dc5e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d02d      	beq.n	800dcc2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dc6a:	e047      	b.n	800dcfc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	2100      	movs	r1, #0
 800dc72:	4618      	mov	r0, r3
 800dc74:	f002 fc8c 	bl	8010590 <SDMMC_CmdAppCommand>
 800dc78:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d001      	beq.n	800dc84 <SD_PowerON+0x98>
    {
      return errorstate;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	e03b      	b.n	800dcfc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	491e      	ldr	r1, [pc, #120]	; (800dd04 <SD_PowerON+0x118>)
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f002 fca2 	bl	80105d4 <SDMMC_CmdAppOperCommand>
 800dc90:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d002      	beq.n	800dc9e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dc9c:	e02e      	b.n	800dcfc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	2100      	movs	r1, #0
 800dca4:	4618      	mov	r0, r3
 800dca6:	f002 fb08 	bl	80102ba <SDIO_GetResponse>
 800dcaa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	0fdb      	lsrs	r3, r3, #31
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d101      	bne.n	800dcb8 <SD_PowerON+0xcc>
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	e000      	b.n	800dcba <SD_PowerON+0xce>
 800dcb8:	2300      	movs	r3, #0
 800dcba:	613b      	str	r3, [r7, #16]

    count++;
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d802      	bhi.n	800dcd2 <SD_PowerON+0xe6>
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d0cc      	beq.n	800dc6c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dcd8:	4293      	cmp	r3, r2
 800dcda:	d902      	bls.n	800dce2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dcdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dce0:	e00c      	b.n	800dcfc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d003      	beq.n	800dcf4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2201      	movs	r2, #1
 800dcf0:	645a      	str	r2, [r3, #68]	; 0x44
 800dcf2:	e002      	b.n	800dcfa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800dcfa:	2300      	movs	r3, #0
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3718      	adds	r7, #24
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	c1100000 	.word	0xc1100000

0800dd08 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b084      	sub	sp, #16
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d102      	bne.n	800dd1e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800dd18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dd1c:	e018      	b.n	800dd50 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd26:	041b      	lsls	r3, r3, #16
 800dd28:	4619      	mov	r1, r3
 800dd2a:	4610      	mov	r0, r2
 800dd2c:	f002 fd16 	bl	801075c <SDMMC_CmdSendStatus>
 800dd30:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d001      	beq.n	800dd3c <SD_SendStatus+0x34>
  {
    return errorstate;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	e009      	b.n	800dd50 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	2100      	movs	r1, #0
 800dd42:	4618      	mov	r0, r3
 800dd44:	f002 fab9 	bl	80102ba <SDIO_GetResponse>
 800dd48:	4602      	mov	r2, r0
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800dd4e:	2300      	movs	r3, #0
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3710      	adds	r7, #16
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b086      	sub	sp, #24
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dd60:	2300      	movs	r3, #0
 800dd62:	60fb      	str	r3, [r7, #12]
 800dd64:	2300      	movs	r3, #0
 800dd66:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	2100      	movs	r1, #0
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f002 faa3 	bl	80102ba <SDIO_GetResponse>
 800dd74:	4603      	mov	r3, r0
 800dd76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dd7e:	d102      	bne.n	800dd86 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dd80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dd84:	e02f      	b.n	800dde6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dd86:	f107 030c 	add.w	r3, r7, #12
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f000 f879 	bl	800de84 <SD_FindSCR>
 800dd92:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d001      	beq.n	800dd9e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	e023      	b.n	800dde6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dd9e:	693b      	ldr	r3, [r7, #16]
 800dda0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d01c      	beq.n	800dde2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681a      	ldr	r2, [r3, #0]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddb0:	041b      	lsls	r3, r3, #16
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	4610      	mov	r0, r2
 800ddb6:	f002 fbeb 	bl	8010590 <SDMMC_CmdAppCommand>
 800ddba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d001      	beq.n	800ddc6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	e00f      	b.n	800dde6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	2102      	movs	r1, #2
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f002 fc24 	bl	801061a <SDMMC_CmdBusWidth>
 800ddd2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d001      	beq.n	800ddde <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	e003      	b.n	800dde6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ddde:	2300      	movs	r3, #0
 800dde0:	e001      	b.n	800dde6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dde2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3718      	adds	r7, #24
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}

0800ddee <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ddee:	b580      	push	{r7, lr}
 800ddf0:	b086      	sub	sp, #24
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	60fb      	str	r3, [r7, #12]
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	2100      	movs	r1, #0
 800de04:	4618      	mov	r0, r3
 800de06:	f002 fa58 	bl	80102ba <SDIO_GetResponse>
 800de0a:	4603      	mov	r3, r0
 800de0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800de10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de14:	d102      	bne.n	800de1c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800de16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800de1a:	e02f      	b.n	800de7c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800de1c:	f107 030c 	add.w	r3, r7, #12
 800de20:	4619      	mov	r1, r3
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f000 f82e 	bl	800de84 <SD_FindSCR>
 800de28:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d001      	beq.n	800de34 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	e023      	b.n	800de7c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d01c      	beq.n	800de78 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681a      	ldr	r2, [r3, #0]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de46:	041b      	lsls	r3, r3, #16
 800de48:	4619      	mov	r1, r3
 800de4a:	4610      	mov	r0, r2
 800de4c:	f002 fba0 	bl	8010590 <SDMMC_CmdAppCommand>
 800de50:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d001      	beq.n	800de5c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	e00f      	b.n	800de7c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	2100      	movs	r1, #0
 800de62:	4618      	mov	r0, r3
 800de64:	f002 fbd9 	bl	801061a <SDMMC_CmdBusWidth>
 800de68:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d001      	beq.n	800de74 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	e003      	b.n	800de7c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800de74:	2300      	movs	r3, #0
 800de76:	e001      	b.n	800de7c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800de78:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3718      	adds	r7, #24
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}

0800de84 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800de84:	b590      	push	{r4, r7, lr}
 800de86:	b08f      	sub	sp, #60	; 0x3c
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800de8e:	f7fb fd61 	bl	8009954 <HAL_GetTick>
 800de92:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800de94:	2300      	movs	r3, #0
 800de96:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800de98:	2300      	movs	r3, #0
 800de9a:	60bb      	str	r3, [r7, #8]
 800de9c:	2300      	movs	r3, #0
 800de9e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	2108      	movs	r1, #8
 800deaa:	4618      	mov	r0, r3
 800deac:	f002 fa44 	bl	8010338 <SDMMC_CmdBlockLength>
 800deb0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800deb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d001      	beq.n	800debc <SD_FindSCR+0x38>
  {
    return errorstate;
 800deb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deba:	e0a9      	b.n	800e010 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681a      	ldr	r2, [r3, #0]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dec4:	041b      	lsls	r3, r3, #16
 800dec6:	4619      	mov	r1, r3
 800dec8:	4610      	mov	r0, r2
 800deca:	f002 fb61 	bl	8010590 <SDMMC_CmdAppCommand>
 800dece:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ded0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d001      	beq.n	800deda <SD_FindSCR+0x56>
  {
    return errorstate;
 800ded6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded8:	e09a      	b.n	800e010 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800deda:	f04f 33ff 	mov.w	r3, #4294967295
 800dede:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dee0:	2308      	movs	r3, #8
 800dee2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800dee4:	2330      	movs	r3, #48	; 0x30
 800dee6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800dee8:	2302      	movs	r3, #2
 800deea:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800deec:	2300      	movs	r3, #0
 800deee:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800def0:	2301      	movs	r3, #1
 800def2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f107 0210 	add.w	r2, r7, #16
 800defc:	4611      	mov	r1, r2
 800defe:	4618      	mov	r0, r3
 800df00:	f002 f9ee 	bl	80102e0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	4618      	mov	r0, r3
 800df0a:	f002 fba8 	bl	801065e <SDMMC_CmdSendSCR>
 800df0e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800df10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df12:	2b00      	cmp	r3, #0
 800df14:	d022      	beq.n	800df5c <SD_FindSCR+0xd8>
  {
    return errorstate;
 800df16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df18:	e07a      	b.n	800e010 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800df24:	2b00      	cmp	r3, #0
 800df26:	d00e      	beq.n	800df46 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6819      	ldr	r1, [r3, #0]
 800df2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df2e:	009b      	lsls	r3, r3, #2
 800df30:	f107 0208 	add.w	r2, r7, #8
 800df34:	18d4      	adds	r4, r2, r3
 800df36:	4608      	mov	r0, r1
 800df38:	f002 f94d 	bl	80101d6 <SDIO_ReadFIFO>
 800df3c:	4603      	mov	r3, r0
 800df3e:	6023      	str	r3, [r4, #0]
      index++;
 800df40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df42:	3301      	adds	r3, #1
 800df44:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800df46:	f7fb fd05 	bl	8009954 <HAL_GetTick>
 800df4a:	4602      	mov	r2, r0
 800df4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df4e:	1ad3      	subs	r3, r2, r3
 800df50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df54:	d102      	bne.n	800df5c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800df56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df5a:	e059      	b.n	800e010 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df62:	f240 432a 	movw	r3, #1066	; 0x42a
 800df66:	4013      	ands	r3, r2
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d0d6      	beq.n	800df1a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df72:	f003 0308 	and.w	r3, r3, #8
 800df76:	2b00      	cmp	r3, #0
 800df78:	d005      	beq.n	800df86 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	2208      	movs	r2, #8
 800df80:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800df82:	2308      	movs	r3, #8
 800df84:	e044      	b.n	800e010 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df8c:	f003 0302 	and.w	r3, r3, #2
 800df90:	2b00      	cmp	r3, #0
 800df92:	d005      	beq.n	800dfa0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	2202      	movs	r2, #2
 800df9a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800df9c:	2302      	movs	r3, #2
 800df9e:	e037      	b.n	800e010 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfa6:	f003 0320 	and.w	r3, r3, #32
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d005      	beq.n	800dfba <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2220      	movs	r2, #32
 800dfb4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dfb6:	2320      	movs	r3, #32
 800dfb8:	e02a      	b.n	800e010 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f240 523a 	movw	r2, #1338	; 0x53a
 800dfc2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	061a      	lsls	r2, r3, #24
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	021b      	lsls	r3, r3, #8
 800dfcc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dfd0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	0a1b      	lsrs	r3, r3, #8
 800dfd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dfda:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	0e1b      	lsrs	r3, r3, #24
 800dfe0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dfe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe4:	601a      	str	r2, [r3, #0]
    scr++;
 800dfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe8:	3304      	adds	r3, #4
 800dfea:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	061a      	lsls	r2, r3, #24
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	021b      	lsls	r3, r3, #8
 800dff4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dff8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	0a1b      	lsrs	r3, r3, #8
 800dffe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e002:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	0e1b      	lsrs	r3, r3, #24
 800e008:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e00c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e00e:	2300      	movs	r3, #0
}
 800e010:	4618      	mov	r0, r3
 800e012:	373c      	adds	r7, #60	; 0x3c
 800e014:	46bd      	mov	sp, r7
 800e016:	bd90      	pop	{r4, r7, pc}

0800e018 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b086      	sub	sp, #24
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e024:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e02a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d03f      	beq.n	800e0b2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e032:	2300      	movs	r3, #0
 800e034:	617b      	str	r3, [r7, #20]
 800e036:	e033      	b.n	800e0a0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	4618      	mov	r0, r3
 800e03e:	f002 f8ca 	bl	80101d6 <SDIO_ReadFIFO>
 800e042:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	b2da      	uxtb	r2, r3
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	3301      	adds	r3, #1
 800e050:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	3b01      	subs	r3, #1
 800e056:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	0a1b      	lsrs	r3, r3, #8
 800e05c:	b2da      	uxtb	r2, r3
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	3301      	adds	r3, #1
 800e066:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	3b01      	subs	r3, #1
 800e06c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	0c1b      	lsrs	r3, r3, #16
 800e072:	b2da      	uxtb	r2, r3
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	3301      	adds	r3, #1
 800e07c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	3b01      	subs	r3, #1
 800e082:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	0e1b      	lsrs	r3, r3, #24
 800e088:	b2da      	uxtb	r2, r3
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	3301      	adds	r3, #1
 800e092:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	3b01      	subs	r3, #1
 800e098:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	3301      	adds	r3, #1
 800e09e:	617b      	str	r3, [r7, #20]
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	2b07      	cmp	r3, #7
 800e0a4:	d9c8      	bls.n	800e038 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	68fa      	ldr	r2, [r7, #12]
 800e0aa:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	693a      	ldr	r2, [r7, #16]
 800e0b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e0b2:	bf00      	nop
 800e0b4:	3718      	adds	r7, #24
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}

0800e0ba <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e0ba:	b580      	push	{r7, lr}
 800e0bc:	b086      	sub	sp, #24
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6a1b      	ldr	r3, [r3, #32]
 800e0c6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0cc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d043      	beq.n	800e15c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	617b      	str	r3, [r7, #20]
 800e0d8:	e037      	b.n	800e14a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	3b01      	subs	r3, #1
 800e0ea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	781b      	ldrb	r3, [r3, #0]
 800e0f0:	021a      	lsls	r2, r3, #8
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	4313      	orrs	r3, r2
 800e0f6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	3b01      	subs	r3, #1
 800e102:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	041a      	lsls	r2, r3, #16
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	4313      	orrs	r3, r2
 800e10e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	3301      	adds	r3, #1
 800e114:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	3b01      	subs	r3, #1
 800e11a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	781b      	ldrb	r3, [r3, #0]
 800e120:	061a      	lsls	r2, r3, #24
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	4313      	orrs	r3, r2
 800e126:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	3301      	adds	r3, #1
 800e12c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	3b01      	subs	r3, #1
 800e132:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f107 0208 	add.w	r2, r7, #8
 800e13c:	4611      	mov	r1, r2
 800e13e:	4618      	mov	r0, r3
 800e140:	f002 f856 	bl	80101f0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	3301      	adds	r3, #1
 800e148:	617b      	str	r3, [r7, #20]
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	2b07      	cmp	r3, #7
 800e14e:	d9c4      	bls.n	800e0da <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	68fa      	ldr	r2, [r7, #12]
 800e154:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	693a      	ldr	r2, [r7, #16]
 800e15a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e15c:	bf00      	nop
 800e15e:	3718      	adds	r7, #24
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d101      	bne.n	800e176 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e172:	2301      	movs	r3, #1
 800e174:	e056      	b.n	800e224 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2200      	movs	r2, #0
 800e17a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e182:	b2db      	uxtb	r3, r3
 800e184:	2b00      	cmp	r3, #0
 800e186:	d106      	bne.n	800e196 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2200      	movs	r2, #0
 800e18c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f7f8 fe91 	bl	8006eb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2202      	movs	r2, #2
 800e19a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	681a      	ldr	r2, [r3, #0]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1ac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	685a      	ldr	r2, [r3, #4]
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	689b      	ldr	r3, [r3, #8]
 800e1b6:	431a      	orrs	r2, r3
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	68db      	ldr	r3, [r3, #12]
 800e1bc:	431a      	orrs	r2, r3
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	691b      	ldr	r3, [r3, #16]
 800e1c2:	431a      	orrs	r2, r3
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	695b      	ldr	r3, [r3, #20]
 800e1c8:	431a      	orrs	r2, r3
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	699b      	ldr	r3, [r3, #24]
 800e1ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e1d2:	431a      	orrs	r2, r3
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	69db      	ldr	r3, [r3, #28]
 800e1d8:	431a      	orrs	r2, r3
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6a1b      	ldr	r3, [r3, #32]
 800e1de:	ea42 0103 	orr.w	r1, r2, r3
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	430a      	orrs	r2, r1
 800e1ec:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	699b      	ldr	r3, [r3, #24]
 800e1f2:	0c1b      	lsrs	r3, r3, #16
 800e1f4:	f003 0104 	and.w	r1, r3, #4
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	430a      	orrs	r2, r1
 800e202:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	69da      	ldr	r2, [r3, #28]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e212:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2200      	movs	r2, #0
 800e218:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2201      	movs	r2, #1
 800e21e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e222:	2300      	movs	r3, #0
}
 800e224:	4618      	mov	r0, r3
 800e226:	3708      	adds	r7, #8
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}

0800e22c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b088      	sub	sp, #32
 800e230:	af00      	add	r7, sp, #0
 800e232:	60f8      	str	r0, [r7, #12]
 800e234:	60b9      	str	r1, [r7, #8]
 800e236:	603b      	str	r3, [r7, #0]
 800e238:	4613      	mov	r3, r2
 800e23a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e23c:	2300      	movs	r3, #0
 800e23e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e246:	2b01      	cmp	r3, #1
 800e248:	d101      	bne.n	800e24e <HAL_SPI_Transmit+0x22>
 800e24a:	2302      	movs	r3, #2
 800e24c:	e11e      	b.n	800e48c <HAL_SPI_Transmit+0x260>
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	2201      	movs	r2, #1
 800e252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e256:	f7fb fb7d 	bl	8009954 <HAL_GetTick>
 800e25a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e25c:	88fb      	ldrh	r3, [r7, #6]
 800e25e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e266:	b2db      	uxtb	r3, r3
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d002      	beq.n	800e272 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e26c:	2302      	movs	r3, #2
 800e26e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e270:	e103      	b.n	800e47a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d002      	beq.n	800e27e <HAL_SPI_Transmit+0x52>
 800e278:	88fb      	ldrh	r3, [r7, #6]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d102      	bne.n	800e284 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e27e:	2301      	movs	r3, #1
 800e280:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e282:	e0fa      	b.n	800e47a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	2203      	movs	r2, #3
 800e288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2200      	movs	r2, #0
 800e290:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	68ba      	ldr	r2, [r7, #8]
 800e296:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	88fa      	ldrh	r2, [r7, #6]
 800e29c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	88fa      	ldrh	r2, [r7, #6]
 800e2a2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	2200      	movs	r2, #0
 800e2c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	689b      	ldr	r3, [r3, #8]
 800e2c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2ca:	d107      	bne.n	800e2dc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	681a      	ldr	r2, [r3, #0]
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e2da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2e6:	2b40      	cmp	r3, #64	; 0x40
 800e2e8:	d007      	beq.n	800e2fa <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	681a      	ldr	r2, [r3, #0]
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e2f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	68db      	ldr	r3, [r3, #12]
 800e2fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e302:	d14b      	bne.n	800e39c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	685b      	ldr	r3, [r3, #4]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d002      	beq.n	800e312 <HAL_SPI_Transmit+0xe6>
 800e30c:	8afb      	ldrh	r3, [r7, #22]
 800e30e:	2b01      	cmp	r3, #1
 800e310:	d13e      	bne.n	800e390 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e316:	881a      	ldrh	r2, [r3, #0]
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e322:	1c9a      	adds	r2, r3, #2
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	3b01      	subs	r3, #1
 800e330:	b29a      	uxth	r2, r3
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e336:	e02b      	b.n	800e390 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	689b      	ldr	r3, [r3, #8]
 800e33e:	f003 0302 	and.w	r3, r3, #2
 800e342:	2b02      	cmp	r3, #2
 800e344:	d112      	bne.n	800e36c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e34a:	881a      	ldrh	r2, [r3, #0]
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e356:	1c9a      	adds	r2, r3, #2
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e360:	b29b      	uxth	r3, r3
 800e362:	3b01      	subs	r3, #1
 800e364:	b29a      	uxth	r2, r3
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	86da      	strh	r2, [r3, #54]	; 0x36
 800e36a:	e011      	b.n	800e390 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e36c:	f7fb faf2 	bl	8009954 <HAL_GetTick>
 800e370:	4602      	mov	r2, r0
 800e372:	69bb      	ldr	r3, [r7, #24]
 800e374:	1ad3      	subs	r3, r2, r3
 800e376:	683a      	ldr	r2, [r7, #0]
 800e378:	429a      	cmp	r2, r3
 800e37a:	d803      	bhi.n	800e384 <HAL_SPI_Transmit+0x158>
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e382:	d102      	bne.n	800e38a <HAL_SPI_Transmit+0x15e>
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d102      	bne.n	800e390 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e38a:	2303      	movs	r3, #3
 800e38c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e38e:	e074      	b.n	800e47a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e394:	b29b      	uxth	r3, r3
 800e396:	2b00      	cmp	r3, #0
 800e398:	d1ce      	bne.n	800e338 <HAL_SPI_Transmit+0x10c>
 800e39a:	e04c      	b.n	800e436 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	685b      	ldr	r3, [r3, #4]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d002      	beq.n	800e3aa <HAL_SPI_Transmit+0x17e>
 800e3a4:	8afb      	ldrh	r3, [r7, #22]
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	d140      	bne.n	800e42c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	330c      	adds	r3, #12
 800e3b4:	7812      	ldrb	r2, [r2, #0]
 800e3b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3bc:	1c5a      	adds	r2, r3, #1
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e3c6:	b29b      	uxth	r3, r3
 800e3c8:	3b01      	subs	r3, #1
 800e3ca:	b29a      	uxth	r2, r3
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e3d0:	e02c      	b.n	800e42c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	689b      	ldr	r3, [r3, #8]
 800e3d8:	f003 0302 	and.w	r3, r3, #2
 800e3dc:	2b02      	cmp	r3, #2
 800e3de:	d113      	bne.n	800e408 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	330c      	adds	r3, #12
 800e3ea:	7812      	ldrb	r2, [r2, #0]
 800e3ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3f2:	1c5a      	adds	r2, r3, #1
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e3fc:	b29b      	uxth	r3, r3
 800e3fe:	3b01      	subs	r3, #1
 800e400:	b29a      	uxth	r2, r3
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	86da      	strh	r2, [r3, #54]	; 0x36
 800e406:	e011      	b.n	800e42c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e408:	f7fb faa4 	bl	8009954 <HAL_GetTick>
 800e40c:	4602      	mov	r2, r0
 800e40e:	69bb      	ldr	r3, [r7, #24]
 800e410:	1ad3      	subs	r3, r2, r3
 800e412:	683a      	ldr	r2, [r7, #0]
 800e414:	429a      	cmp	r2, r3
 800e416:	d803      	bhi.n	800e420 <HAL_SPI_Transmit+0x1f4>
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e41e:	d102      	bne.n	800e426 <HAL_SPI_Transmit+0x1fa>
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d102      	bne.n	800e42c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e426:	2303      	movs	r3, #3
 800e428:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e42a:	e026      	b.n	800e47a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e430:	b29b      	uxth	r3, r3
 800e432:	2b00      	cmp	r3, #0
 800e434:	d1cd      	bne.n	800e3d2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e436:	69ba      	ldr	r2, [r7, #24]
 800e438:	6839      	ldr	r1, [r7, #0]
 800e43a:	68f8      	ldr	r0, [r7, #12]
 800e43c:	f000 fba4 	bl	800eb88 <SPI_EndRxTxTransaction>
 800e440:	4603      	mov	r3, r0
 800e442:	2b00      	cmp	r3, #0
 800e444:	d002      	beq.n	800e44c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2220      	movs	r2, #32
 800e44a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	689b      	ldr	r3, [r3, #8]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d10a      	bne.n	800e46a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e454:	2300      	movs	r3, #0
 800e456:	613b      	str	r3, [r7, #16]
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	68db      	ldr	r3, [r3, #12]
 800e45e:	613b      	str	r3, [r7, #16]
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	689b      	ldr	r3, [r3, #8]
 800e466:	613b      	str	r3, [r7, #16]
 800e468:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d002      	beq.n	800e478 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e472:	2301      	movs	r3, #1
 800e474:	77fb      	strb	r3, [r7, #31]
 800e476:	e000      	b.n	800e47a <HAL_SPI_Transmit+0x24e>
  }

error:
 800e478:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	2201      	movs	r2, #1
 800e47e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2200      	movs	r2, #0
 800e486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e48a:	7ffb      	ldrb	r3, [r7, #31]
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3720      	adds	r7, #32
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}

0800e494 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b088      	sub	sp, #32
 800e498:	af02      	add	r7, sp, #8
 800e49a:	60f8      	str	r0, [r7, #12]
 800e49c:	60b9      	str	r1, [r7, #8]
 800e49e:	603b      	str	r3, [r7, #0]
 800e4a0:	4613      	mov	r3, r2
 800e4a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	685b      	ldr	r3, [r3, #4]
 800e4ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e4b0:	d112      	bne.n	800e4d8 <HAL_SPI_Receive+0x44>
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	689b      	ldr	r3, [r3, #8]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d10e      	bne.n	800e4d8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	2204      	movs	r2, #4
 800e4be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e4c2:	88fa      	ldrh	r2, [r7, #6]
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	9300      	str	r3, [sp, #0]
 800e4c8:	4613      	mov	r3, r2
 800e4ca:	68ba      	ldr	r2, [r7, #8]
 800e4cc:	68b9      	ldr	r1, [r7, #8]
 800e4ce:	68f8      	ldr	r0, [r7, #12]
 800e4d0:	f000 f8e9 	bl	800e6a6 <HAL_SPI_TransmitReceive>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	e0e2      	b.n	800e69e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e4de:	2b01      	cmp	r3, #1
 800e4e0:	d101      	bne.n	800e4e6 <HAL_SPI_Receive+0x52>
 800e4e2:	2302      	movs	r3, #2
 800e4e4:	e0db      	b.n	800e69e <HAL_SPI_Receive+0x20a>
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	2201      	movs	r2, #1
 800e4ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e4ee:	f7fb fa31 	bl	8009954 <HAL_GetTick>
 800e4f2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	d002      	beq.n	800e506 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e500:	2302      	movs	r3, #2
 800e502:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e504:	e0c2      	b.n	800e68c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d002      	beq.n	800e512 <HAL_SPI_Receive+0x7e>
 800e50c:	88fb      	ldrh	r3, [r7, #6]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d102      	bne.n	800e518 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e512:	2301      	movs	r3, #1
 800e514:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e516:	e0b9      	b.n	800e68c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	2204      	movs	r2, #4
 800e51c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	2200      	movs	r2, #0
 800e524:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	68ba      	ldr	r2, [r7, #8]
 800e52a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	88fa      	ldrh	r2, [r7, #6]
 800e530:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	88fa      	ldrh	r2, [r7, #6]
 800e536:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	2200      	movs	r2, #0
 800e53c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2200      	movs	r2, #0
 800e542:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2200      	movs	r2, #0
 800e548:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	2200      	movs	r2, #0
 800e54e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	2200      	movs	r2, #0
 800e554:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	689b      	ldr	r3, [r3, #8]
 800e55a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e55e:	d107      	bne.n	800e570 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	681a      	ldr	r2, [r3, #0]
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e56e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e57a:	2b40      	cmp	r3, #64	; 0x40
 800e57c:	d007      	beq.n	800e58e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	681a      	ldr	r2, [r3, #0]
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e58c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	68db      	ldr	r3, [r3, #12]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d162      	bne.n	800e65c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e596:	e02e      	b.n	800e5f6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	689b      	ldr	r3, [r3, #8]
 800e59e:	f003 0301 	and.w	r3, r3, #1
 800e5a2:	2b01      	cmp	r3, #1
 800e5a4:	d115      	bne.n	800e5d2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	f103 020c 	add.w	r2, r3, #12
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5b2:	7812      	ldrb	r2, [r2, #0]
 800e5b4:	b2d2      	uxtb	r2, r2
 800e5b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5bc:	1c5a      	adds	r2, r3, #1
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5c6:	b29b      	uxth	r3, r3
 800e5c8:	3b01      	subs	r3, #1
 800e5ca:	b29a      	uxth	r2, r3
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e5d0:	e011      	b.n	800e5f6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e5d2:	f7fb f9bf 	bl	8009954 <HAL_GetTick>
 800e5d6:	4602      	mov	r2, r0
 800e5d8:	693b      	ldr	r3, [r7, #16]
 800e5da:	1ad3      	subs	r3, r2, r3
 800e5dc:	683a      	ldr	r2, [r7, #0]
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d803      	bhi.n	800e5ea <HAL_SPI_Receive+0x156>
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5e8:	d102      	bne.n	800e5f0 <HAL_SPI_Receive+0x15c>
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d102      	bne.n	800e5f6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e5f0:	2303      	movs	r3, #3
 800e5f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e5f4:	e04a      	b.n	800e68c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d1cb      	bne.n	800e598 <HAL_SPI_Receive+0x104>
 800e600:	e031      	b.n	800e666 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	689b      	ldr	r3, [r3, #8]
 800e608:	f003 0301 	and.w	r3, r3, #1
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d113      	bne.n	800e638 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	68da      	ldr	r2, [r3, #12]
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e61a:	b292      	uxth	r2, r2
 800e61c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e622:	1c9a      	adds	r2, r3, #2
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e62c:	b29b      	uxth	r3, r3
 800e62e:	3b01      	subs	r3, #1
 800e630:	b29a      	uxth	r2, r3
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e636:	e011      	b.n	800e65c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e638:	f7fb f98c 	bl	8009954 <HAL_GetTick>
 800e63c:	4602      	mov	r2, r0
 800e63e:	693b      	ldr	r3, [r7, #16]
 800e640:	1ad3      	subs	r3, r2, r3
 800e642:	683a      	ldr	r2, [r7, #0]
 800e644:	429a      	cmp	r2, r3
 800e646:	d803      	bhi.n	800e650 <HAL_SPI_Receive+0x1bc>
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e64e:	d102      	bne.n	800e656 <HAL_SPI_Receive+0x1c2>
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d102      	bne.n	800e65c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800e656:	2303      	movs	r3, #3
 800e658:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e65a:	e017      	b.n	800e68c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e660:	b29b      	uxth	r3, r3
 800e662:	2b00      	cmp	r3, #0
 800e664:	d1cd      	bne.n	800e602 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e666:	693a      	ldr	r2, [r7, #16]
 800e668:	6839      	ldr	r1, [r7, #0]
 800e66a:	68f8      	ldr	r0, [r7, #12]
 800e66c:	f000 fa27 	bl	800eabe <SPI_EndRxTransaction>
 800e670:	4603      	mov	r3, r0
 800e672:	2b00      	cmp	r3, #0
 800e674:	d002      	beq.n	800e67c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	2220      	movs	r2, #32
 800e67a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e680:	2b00      	cmp	r3, #0
 800e682:	d002      	beq.n	800e68a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800e684:	2301      	movs	r3, #1
 800e686:	75fb      	strb	r3, [r7, #23]
 800e688:	e000      	b.n	800e68c <HAL_SPI_Receive+0x1f8>
  }

error :
 800e68a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	2201      	movs	r2, #1
 800e690:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2200      	movs	r2, #0
 800e698:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e69c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3718      	adds	r7, #24
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}

0800e6a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e6a6:	b580      	push	{r7, lr}
 800e6a8:	b08c      	sub	sp, #48	; 0x30
 800e6aa:	af00      	add	r7, sp, #0
 800e6ac:	60f8      	str	r0, [r7, #12]
 800e6ae:	60b9      	str	r1, [r7, #8]
 800e6b0:	607a      	str	r2, [r7, #4]
 800e6b2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e6c4:	2b01      	cmp	r3, #1
 800e6c6:	d101      	bne.n	800e6cc <HAL_SPI_TransmitReceive+0x26>
 800e6c8:	2302      	movs	r3, #2
 800e6ca:	e18a      	b.n	800e9e2 <HAL_SPI_TransmitReceive+0x33c>
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e6d4:	f7fb f93e 	bl	8009954 <HAL_GetTick>
 800e6d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e6e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e6ea:	887b      	ldrh	r3, [r7, #2]
 800e6ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e6ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d00f      	beq.n	800e716 <HAL_SPI_TransmitReceive+0x70>
 800e6f6:	69fb      	ldr	r3, [r7, #28]
 800e6f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e6fc:	d107      	bne.n	800e70e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	689b      	ldr	r3, [r3, #8]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d103      	bne.n	800e70e <HAL_SPI_TransmitReceive+0x68>
 800e706:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e70a:	2b04      	cmp	r3, #4
 800e70c:	d003      	beq.n	800e716 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e70e:	2302      	movs	r3, #2
 800e710:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e714:	e15b      	b.n	800e9ce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d005      	beq.n	800e728 <HAL_SPI_TransmitReceive+0x82>
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d002      	beq.n	800e728 <HAL_SPI_TransmitReceive+0x82>
 800e722:	887b      	ldrh	r3, [r7, #2]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d103      	bne.n	800e730 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e728:	2301      	movs	r3, #1
 800e72a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e72e:	e14e      	b.n	800e9ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e736:	b2db      	uxtb	r3, r3
 800e738:	2b04      	cmp	r3, #4
 800e73a:	d003      	beq.n	800e744 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	2205      	movs	r2, #5
 800e740:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	2200      	movs	r2, #0
 800e748:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	887a      	ldrh	r2, [r7, #2]
 800e754:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	887a      	ldrh	r2, [r7, #2]
 800e75a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	68ba      	ldr	r2, [r7, #8]
 800e760:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	887a      	ldrh	r2, [r7, #2]
 800e766:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	887a      	ldrh	r2, [r7, #2]
 800e76c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	2200      	movs	r2, #0
 800e772:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	2200      	movs	r2, #0
 800e778:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e784:	2b40      	cmp	r3, #64	; 0x40
 800e786:	d007      	beq.n	800e798 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	681a      	ldr	r2, [r3, #0]
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e796:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	68db      	ldr	r3, [r3, #12]
 800e79c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e7a0:	d178      	bne.n	800e894 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d002      	beq.n	800e7b0 <HAL_SPI_TransmitReceive+0x10a>
 800e7aa:	8b7b      	ldrh	r3, [r7, #26]
 800e7ac:	2b01      	cmp	r3, #1
 800e7ae:	d166      	bne.n	800e87e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7b4:	881a      	ldrh	r2, [r3, #0]
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7c0:	1c9a      	adds	r2, r3, #2
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7ca:	b29b      	uxth	r3, r3
 800e7cc:	3b01      	subs	r3, #1
 800e7ce:	b29a      	uxth	r2, r3
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e7d4:	e053      	b.n	800e87e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	689b      	ldr	r3, [r3, #8]
 800e7dc:	f003 0302 	and.w	r3, r3, #2
 800e7e0:	2b02      	cmp	r3, #2
 800e7e2:	d11b      	bne.n	800e81c <HAL_SPI_TransmitReceive+0x176>
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d016      	beq.n	800e81c <HAL_SPI_TransmitReceive+0x176>
 800e7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f0:	2b01      	cmp	r3, #1
 800e7f2:	d113      	bne.n	800e81c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7f8:	881a      	ldrh	r2, [r3, #0]
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e804:	1c9a      	adds	r2, r3, #2
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e80e:	b29b      	uxth	r3, r3
 800e810:	3b01      	subs	r3, #1
 800e812:	b29a      	uxth	r2, r3
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e818:	2300      	movs	r3, #0
 800e81a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	689b      	ldr	r3, [r3, #8]
 800e822:	f003 0301 	and.w	r3, r3, #1
 800e826:	2b01      	cmp	r3, #1
 800e828:	d119      	bne.n	800e85e <HAL_SPI_TransmitReceive+0x1b8>
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e82e:	b29b      	uxth	r3, r3
 800e830:	2b00      	cmp	r3, #0
 800e832:	d014      	beq.n	800e85e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	68da      	ldr	r2, [r3, #12]
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e83e:	b292      	uxth	r2, r2
 800e840:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e846:	1c9a      	adds	r2, r3, #2
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e850:	b29b      	uxth	r3, r3
 800e852:	3b01      	subs	r3, #1
 800e854:	b29a      	uxth	r2, r3
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e85a:	2301      	movs	r3, #1
 800e85c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e85e:	f7fb f879 	bl	8009954 <HAL_GetTick>
 800e862:	4602      	mov	r2, r0
 800e864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e866:	1ad3      	subs	r3, r2, r3
 800e868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e86a:	429a      	cmp	r2, r3
 800e86c:	d807      	bhi.n	800e87e <HAL_SPI_TransmitReceive+0x1d8>
 800e86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e870:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e874:	d003      	beq.n	800e87e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e876:	2303      	movs	r3, #3
 800e878:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e87c:	e0a7      	b.n	800e9ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e882:	b29b      	uxth	r3, r3
 800e884:	2b00      	cmp	r3, #0
 800e886:	d1a6      	bne.n	800e7d6 <HAL_SPI_TransmitReceive+0x130>
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e88c:	b29b      	uxth	r3, r3
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d1a1      	bne.n	800e7d6 <HAL_SPI_TransmitReceive+0x130>
 800e892:	e07c      	b.n	800e98e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d002      	beq.n	800e8a2 <HAL_SPI_TransmitReceive+0x1fc>
 800e89c:	8b7b      	ldrh	r3, [r7, #26]
 800e89e:	2b01      	cmp	r3, #1
 800e8a0:	d16b      	bne.n	800e97a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	330c      	adds	r3, #12
 800e8ac:	7812      	ldrb	r2, [r2, #0]
 800e8ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8b4:	1c5a      	adds	r2, r3, #1
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e8be:	b29b      	uxth	r3, r3
 800e8c0:	3b01      	subs	r3, #1
 800e8c2:	b29a      	uxth	r2, r3
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e8c8:	e057      	b.n	800e97a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	689b      	ldr	r3, [r3, #8]
 800e8d0:	f003 0302 	and.w	r3, r3, #2
 800e8d4:	2b02      	cmp	r3, #2
 800e8d6:	d11c      	bne.n	800e912 <HAL_SPI_TransmitReceive+0x26c>
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e8dc:	b29b      	uxth	r3, r3
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d017      	beq.n	800e912 <HAL_SPI_TransmitReceive+0x26c>
 800e8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	d114      	bne.n	800e912 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	330c      	adds	r3, #12
 800e8f2:	7812      	ldrb	r2, [r2, #0]
 800e8f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8fa:	1c5a      	adds	r2, r3, #1
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e904:	b29b      	uxth	r3, r3
 800e906:	3b01      	subs	r3, #1
 800e908:	b29a      	uxth	r2, r3
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e90e:	2300      	movs	r3, #0
 800e910:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	689b      	ldr	r3, [r3, #8]
 800e918:	f003 0301 	and.w	r3, r3, #1
 800e91c:	2b01      	cmp	r3, #1
 800e91e:	d119      	bne.n	800e954 <HAL_SPI_TransmitReceive+0x2ae>
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e924:	b29b      	uxth	r3, r3
 800e926:	2b00      	cmp	r3, #0
 800e928:	d014      	beq.n	800e954 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	68da      	ldr	r2, [r3, #12]
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e934:	b2d2      	uxtb	r2, r2
 800e936:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e93c:	1c5a      	adds	r2, r3, #1
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e946:	b29b      	uxth	r3, r3
 800e948:	3b01      	subs	r3, #1
 800e94a:	b29a      	uxth	r2, r3
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e950:	2301      	movs	r3, #1
 800e952:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e954:	f7fa fffe 	bl	8009954 <HAL_GetTick>
 800e958:	4602      	mov	r2, r0
 800e95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e95c:	1ad3      	subs	r3, r2, r3
 800e95e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e960:	429a      	cmp	r2, r3
 800e962:	d803      	bhi.n	800e96c <HAL_SPI_TransmitReceive+0x2c6>
 800e964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e96a:	d102      	bne.n	800e972 <HAL_SPI_TransmitReceive+0x2cc>
 800e96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d103      	bne.n	800e97a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e972:	2303      	movs	r3, #3
 800e974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e978:	e029      	b.n	800e9ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e97e:	b29b      	uxth	r3, r3
 800e980:	2b00      	cmp	r3, #0
 800e982:	d1a2      	bne.n	800e8ca <HAL_SPI_TransmitReceive+0x224>
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e988:	b29b      	uxth	r3, r3
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d19d      	bne.n	800e8ca <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e98e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e990:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e992:	68f8      	ldr	r0, [r7, #12]
 800e994:	f000 f8f8 	bl	800eb88 <SPI_EndRxTxTransaction>
 800e998:	4603      	mov	r3, r0
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d006      	beq.n	800e9ac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e99e:	2301      	movs	r3, #1
 800e9a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2220      	movs	r2, #32
 800e9a8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e9aa:	e010      	b.n	800e9ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	689b      	ldr	r3, [r3, #8]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d10b      	bne.n	800e9cc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	617b      	str	r3, [r7, #20]
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	68db      	ldr	r3, [r3, #12]
 800e9be:	617b      	str	r3, [r7, #20]
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	689b      	ldr	r3, [r3, #8]
 800e9c6:	617b      	str	r3, [r7, #20]
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	e000      	b.n	800e9ce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e9cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	2201      	movs	r2, #1
 800e9d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e9de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3730      	adds	r7, #48	; 0x30
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}

0800e9ea <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e9ea:	b580      	push	{r7, lr}
 800e9ec:	b084      	sub	sp, #16
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	60f8      	str	r0, [r7, #12]
 800e9f2:	60b9      	str	r1, [r7, #8]
 800e9f4:	603b      	str	r3, [r7, #0]
 800e9f6:	4613      	mov	r3, r2
 800e9f8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e9fa:	e04c      	b.n	800ea96 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea02:	d048      	beq.n	800ea96 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ea04:	f7fa ffa6 	bl	8009954 <HAL_GetTick>
 800ea08:	4602      	mov	r2, r0
 800ea0a:	69bb      	ldr	r3, [r7, #24]
 800ea0c:	1ad3      	subs	r3, r2, r3
 800ea0e:	683a      	ldr	r2, [r7, #0]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d902      	bls.n	800ea1a <SPI_WaitFlagStateUntilTimeout+0x30>
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d13d      	bne.n	800ea96 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	685a      	ldr	r2, [r3, #4]
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ea28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	685b      	ldr	r3, [r3, #4]
 800ea2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea32:	d111      	bne.n	800ea58 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	689b      	ldr	r3, [r3, #8]
 800ea38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea3c:	d004      	beq.n	800ea48 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	689b      	ldr	r3, [r3, #8]
 800ea42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea46:	d107      	bne.n	800ea58 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea60:	d10f      	bne.n	800ea82 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	681a      	ldr	r2, [r3, #0]
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ea70:	601a      	str	r2, [r3, #0]
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	681a      	ldr	r2, [r3, #0]
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ea80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	2201      	movs	r2, #1
 800ea86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ea92:	2303      	movs	r3, #3
 800ea94:	e00f      	b.n	800eab6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	689a      	ldr	r2, [r3, #8]
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	4013      	ands	r3, r2
 800eaa0:	68ba      	ldr	r2, [r7, #8]
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	bf0c      	ite	eq
 800eaa6:	2301      	moveq	r3, #1
 800eaa8:	2300      	movne	r3, #0
 800eaaa:	b2db      	uxtb	r3, r3
 800eaac:	461a      	mov	r2, r3
 800eaae:	79fb      	ldrb	r3, [r7, #7]
 800eab0:	429a      	cmp	r2, r3
 800eab2:	d1a3      	bne.n	800e9fc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800eab4:	2300      	movs	r3, #0
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3710      	adds	r7, #16
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}

0800eabe <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800eabe:	b580      	push	{r7, lr}
 800eac0:	b086      	sub	sp, #24
 800eac2:	af02      	add	r7, sp, #8
 800eac4:	60f8      	str	r0, [r7, #12]
 800eac6:	60b9      	str	r1, [r7, #8]
 800eac8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	685b      	ldr	r3, [r3, #4]
 800eace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ead2:	d111      	bne.n	800eaf8 <SPI_EndRxTransaction+0x3a>
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	689b      	ldr	r3, [r3, #8]
 800ead8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eadc:	d004      	beq.n	800eae8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	689b      	ldr	r3, [r3, #8]
 800eae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eae6:	d107      	bne.n	800eaf8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eaf6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	685b      	ldr	r3, [r3, #4]
 800eafc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eb00:	d12a      	bne.n	800eb58 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	689b      	ldr	r3, [r3, #8]
 800eb06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb0a:	d012      	beq.n	800eb32 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	9300      	str	r3, [sp, #0]
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	2200      	movs	r2, #0
 800eb14:	2180      	movs	r1, #128	; 0x80
 800eb16:	68f8      	ldr	r0, [r7, #12]
 800eb18:	f7ff ff67 	bl	800e9ea <SPI_WaitFlagStateUntilTimeout>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d02d      	beq.n	800eb7e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb26:	f043 0220 	orr.w	r2, r3, #32
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800eb2e:	2303      	movs	r3, #3
 800eb30:	e026      	b.n	800eb80 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	9300      	str	r3, [sp, #0]
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	2101      	movs	r1, #1
 800eb3c:	68f8      	ldr	r0, [r7, #12]
 800eb3e:	f7ff ff54 	bl	800e9ea <SPI_WaitFlagStateUntilTimeout>
 800eb42:	4603      	mov	r3, r0
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d01a      	beq.n	800eb7e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb4c:	f043 0220 	orr.w	r2, r3, #32
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800eb54:	2303      	movs	r3, #3
 800eb56:	e013      	b.n	800eb80 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	9300      	str	r3, [sp, #0]
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	2101      	movs	r1, #1
 800eb62:	68f8      	ldr	r0, [r7, #12]
 800eb64:	f7ff ff41 	bl	800e9ea <SPI_WaitFlagStateUntilTimeout>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d007      	beq.n	800eb7e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb72:	f043 0220 	orr.w	r2, r3, #32
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800eb7a:	2303      	movs	r3, #3
 800eb7c:	e000      	b.n	800eb80 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800eb7e:	2300      	movs	r3, #0
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	3710      	adds	r7, #16
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}

0800eb88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b088      	sub	sp, #32
 800eb8c:	af02      	add	r7, sp, #8
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800eb94:	4b1b      	ldr	r3, [pc, #108]	; (800ec04 <SPI_EndRxTxTransaction+0x7c>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	4a1b      	ldr	r2, [pc, #108]	; (800ec08 <SPI_EndRxTxTransaction+0x80>)
 800eb9a:	fba2 2303 	umull	r2, r3, r2, r3
 800eb9e:	0d5b      	lsrs	r3, r3, #21
 800eba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eba4:	fb02 f303 	mul.w	r3, r2, r3
 800eba8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	685b      	ldr	r3, [r3, #4]
 800ebae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ebb2:	d112      	bne.n	800ebda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	9300      	str	r3, [sp, #0]
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	2180      	movs	r1, #128	; 0x80
 800ebbe:	68f8      	ldr	r0, [r7, #12]
 800ebc0:	f7ff ff13 	bl	800e9ea <SPI_WaitFlagStateUntilTimeout>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d016      	beq.n	800ebf8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebce:	f043 0220 	orr.w	r2, r3, #32
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ebd6:	2303      	movs	r3, #3
 800ebd8:	e00f      	b.n	800ebfa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d00a      	beq.n	800ebf6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	3b01      	subs	r3, #1
 800ebe4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	689b      	ldr	r3, [r3, #8]
 800ebec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebf0:	2b80      	cmp	r3, #128	; 0x80
 800ebf2:	d0f2      	beq.n	800ebda <SPI_EndRxTxTransaction+0x52>
 800ebf4:	e000      	b.n	800ebf8 <SPI_EndRxTxTransaction+0x70>
        break;
 800ebf6:	bf00      	nop
  }

  return HAL_OK;
 800ebf8:	2300      	movs	r3, #0
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3718      	adds	r7, #24
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
 800ec02:	bf00      	nop
 800ec04:	20000000 	.word	0x20000000
 800ec08:	165e9f81 	.word	0x165e9f81

0800ec0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b082      	sub	sp, #8
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d101      	bne.n	800ec1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	e01d      	b.n	800ec5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec24:	b2db      	uxtb	r3, r3
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d106      	bne.n	800ec38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f7f8 f9fc 	bl	8007030 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2202      	movs	r2, #2
 800ec3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681a      	ldr	r2, [r3, #0]
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	3304      	adds	r3, #4
 800ec48:	4619      	mov	r1, r3
 800ec4a:	4610      	mov	r0, r2
 800ec4c:	f000 fb56 	bl	800f2fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2201      	movs	r2, #1
 800ec54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec58:	2300      	movs	r3, #0
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3708      	adds	r7, #8
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}

0800ec62 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ec62:	b480      	push	{r7}
 800ec64:	b085      	sub	sp, #20
 800ec66:	af00      	add	r7, sp, #0
 800ec68:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	68da      	ldr	r2, [r3, #12]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f042 0201 	orr.w	r2, r2, #1
 800ec78:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	689b      	ldr	r3, [r3, #8]
 800ec80:	f003 0307 	and.w	r3, r3, #7
 800ec84:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2b06      	cmp	r3, #6
 800ec8a:	d007      	beq.n	800ec9c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	681a      	ldr	r2, [r3, #0]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f042 0201 	orr.w	r2, r2, #1
 800ec9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ec9c:	2300      	movs	r3, #0
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3714      	adds	r7, #20
 800eca2:	46bd      	mov	sp, r7
 800eca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca8:	4770      	bx	lr

0800ecaa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ecaa:	b580      	push	{r7, lr}
 800ecac:	b082      	sub	sp, #8
 800ecae:	af00      	add	r7, sp, #0
 800ecb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d101      	bne.n	800ecbc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ecb8:	2301      	movs	r3, #1
 800ecba:	e01d      	b.n	800ecf8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ecc2:	b2db      	uxtb	r3, r3
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d106      	bne.n	800ecd6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2200      	movs	r2, #0
 800eccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f7f8 f939 	bl	8006f48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2202      	movs	r2, #2
 800ecda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681a      	ldr	r2, [r3, #0]
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	3304      	adds	r3, #4
 800ece6:	4619      	mov	r1, r3
 800ece8:	4610      	mov	r0, r2
 800ecea:	f000 fb07 	bl	800f2fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2201      	movs	r2, #1
 800ecf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ecf6:	2300      	movs	r3, #0
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3708      	adds	r7, #8
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	2201      	movs	r2, #1
 800ed10:	6839      	ldr	r1, [r7, #0]
 800ed12:	4618      	mov	r0, r3
 800ed14:	f000 fd42 	bl	800f79c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	4a15      	ldr	r2, [pc, #84]	; (800ed74 <HAL_TIM_PWM_Start+0x74>)
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	d004      	beq.n	800ed2c <HAL_TIM_PWM_Start+0x2c>
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	4a14      	ldr	r2, [pc, #80]	; (800ed78 <HAL_TIM_PWM_Start+0x78>)
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	d101      	bne.n	800ed30 <HAL_TIM_PWM_Start+0x30>
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	e000      	b.n	800ed32 <HAL_TIM_PWM_Start+0x32>
 800ed30:	2300      	movs	r3, #0
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d007      	beq.n	800ed46 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ed44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	689b      	ldr	r3, [r3, #8]
 800ed4c:	f003 0307 	and.w	r3, r3, #7
 800ed50:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	2b06      	cmp	r3, #6
 800ed56:	d007      	beq.n	800ed68 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	681a      	ldr	r2, [r3, #0]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	f042 0201 	orr.w	r2, r2, #1
 800ed66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ed68:	2300      	movs	r3, #0
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3710      	adds	r7, #16
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop
 800ed74:	40010000 	.word	0x40010000
 800ed78:	40010400 	.word	0x40010400

0800ed7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b086      	sub	sp, #24
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d101      	bne.n	800ed90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	e083      	b.n	800ee98 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed96:	b2db      	uxtb	r3, r3
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d106      	bne.n	800edaa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f7f8 f9d3 	bl	8007150 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2202      	movs	r2, #2
 800edae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	689b      	ldr	r3, [r3, #8]
 800edb8:	687a      	ldr	r2, [r7, #4]
 800edba:	6812      	ldr	r2, [r2, #0]
 800edbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800edc0:	f023 0307 	bic.w	r3, r3, #7
 800edc4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681a      	ldr	r2, [r3, #0]
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	3304      	adds	r3, #4
 800edce:	4619      	mov	r1, r3
 800edd0:	4610      	mov	r0, r2
 800edd2:	f000 fa93 	bl	800f2fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	689b      	ldr	r3, [r3, #8]
 800eddc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	699b      	ldr	r3, [r3, #24]
 800ede4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	6a1b      	ldr	r3, [r3, #32]
 800edec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	697a      	ldr	r2, [r7, #20]
 800edf4:	4313      	orrs	r3, r2
 800edf6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800edfe:	f023 0303 	bic.w	r3, r3, #3
 800ee02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	689a      	ldr	r2, [r3, #8]
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	699b      	ldr	r3, [r3, #24]
 800ee0c:	021b      	lsls	r3, r3, #8
 800ee0e:	4313      	orrs	r3, r2
 800ee10:	693a      	ldr	r2, [r7, #16]
 800ee12:	4313      	orrs	r3, r2
 800ee14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ee1c:	f023 030c 	bic.w	r3, r3, #12
 800ee20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ee28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ee2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	68da      	ldr	r2, [r3, #12]
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	69db      	ldr	r3, [r3, #28]
 800ee36:	021b      	lsls	r3, r3, #8
 800ee38:	4313      	orrs	r3, r2
 800ee3a:	693a      	ldr	r2, [r7, #16]
 800ee3c:	4313      	orrs	r3, r2
 800ee3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	691b      	ldr	r3, [r3, #16]
 800ee44:	011a      	lsls	r2, r3, #4
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	6a1b      	ldr	r3, [r3, #32]
 800ee4a:	031b      	lsls	r3, r3, #12
 800ee4c:	4313      	orrs	r3, r2
 800ee4e:	693a      	ldr	r2, [r7, #16]
 800ee50:	4313      	orrs	r3, r2
 800ee52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ee5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ee62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ee64:	683b      	ldr	r3, [r7, #0]
 800ee66:	685a      	ldr	r2, [r3, #4]
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	695b      	ldr	r3, [r3, #20]
 800ee6c:	011b      	lsls	r3, r3, #4
 800ee6e:	4313      	orrs	r3, r2
 800ee70:	68fa      	ldr	r2, [r7, #12]
 800ee72:	4313      	orrs	r3, r2
 800ee74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	697a      	ldr	r2, [r7, #20]
 800ee7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	693a      	ldr	r2, [r7, #16]
 800ee84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	68fa      	ldr	r2, [r7, #12]
 800ee8c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2201      	movs	r2, #1
 800ee92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ee96:	2300      	movs	r3, #0
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	3718      	adds	r7, #24
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}

0800eea0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d003      	beq.n	800eeb8 <HAL_TIM_Encoder_Start+0x18>
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	2b04      	cmp	r3, #4
 800eeb4:	d008      	beq.n	800eec8 <HAL_TIM_Encoder_Start+0x28>
 800eeb6:	e00f      	b.n	800eed8 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	2201      	movs	r2, #1
 800eebe:	2100      	movs	r1, #0
 800eec0:	4618      	mov	r0, r3
 800eec2:	f000 fc6b 	bl	800f79c <TIM_CCxChannelCmd>
      break;
 800eec6:	e016      	b.n	800eef6 <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	2201      	movs	r2, #1
 800eece:	2104      	movs	r1, #4
 800eed0:	4618      	mov	r0, r3
 800eed2:	f000 fc63 	bl	800f79c <TIM_CCxChannelCmd>
      break;
 800eed6:	e00e      	b.n	800eef6 <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	2201      	movs	r2, #1
 800eede:	2100      	movs	r1, #0
 800eee0:	4618      	mov	r0, r3
 800eee2:	f000 fc5b 	bl	800f79c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	2201      	movs	r2, #1
 800eeec:	2104      	movs	r1, #4
 800eeee:	4618      	mov	r0, r3
 800eef0:	f000 fc54 	bl	800f79c <TIM_CCxChannelCmd>
      break;
 800eef4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	681a      	ldr	r2, [r3, #0]
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	f042 0201 	orr.w	r2, r2, #1
 800ef04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ef06:	2300      	movs	r3, #0
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3708      	adds	r7, #8
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}

0800ef10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b082      	sub	sp, #8
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	691b      	ldr	r3, [r3, #16]
 800ef1e:	f003 0302 	and.w	r3, r3, #2
 800ef22:	2b02      	cmp	r3, #2
 800ef24:	d122      	bne.n	800ef6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	68db      	ldr	r3, [r3, #12]
 800ef2c:	f003 0302 	and.w	r3, r3, #2
 800ef30:	2b02      	cmp	r3, #2
 800ef32:	d11b      	bne.n	800ef6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	f06f 0202 	mvn.w	r2, #2
 800ef3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2201      	movs	r2, #1
 800ef42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	699b      	ldr	r3, [r3, #24]
 800ef4a:	f003 0303 	and.w	r3, r3, #3
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d003      	beq.n	800ef5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f000 f9b4 	bl	800f2c0 <HAL_TIM_IC_CaptureCallback>
 800ef58:	e005      	b.n	800ef66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f000 f9a6 	bl	800f2ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef60:	6878      	ldr	r0, [r7, #4]
 800ef62:	f000 f9b7 	bl	800f2d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	691b      	ldr	r3, [r3, #16]
 800ef72:	f003 0304 	and.w	r3, r3, #4
 800ef76:	2b04      	cmp	r3, #4
 800ef78:	d122      	bne.n	800efc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	68db      	ldr	r3, [r3, #12]
 800ef80:	f003 0304 	and.w	r3, r3, #4
 800ef84:	2b04      	cmp	r3, #4
 800ef86:	d11b      	bne.n	800efc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	f06f 0204 	mvn.w	r2, #4
 800ef90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2202      	movs	r2, #2
 800ef96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	699b      	ldr	r3, [r3, #24]
 800ef9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d003      	beq.n	800efae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f000 f98a 	bl	800f2c0 <HAL_TIM_IC_CaptureCallback>
 800efac:	e005      	b.n	800efba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f000 f97c 	bl	800f2ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f000 f98d 	bl	800f2d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2200      	movs	r2, #0
 800efbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	691b      	ldr	r3, [r3, #16]
 800efc6:	f003 0308 	and.w	r3, r3, #8
 800efca:	2b08      	cmp	r3, #8
 800efcc:	d122      	bne.n	800f014 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	68db      	ldr	r3, [r3, #12]
 800efd4:	f003 0308 	and.w	r3, r3, #8
 800efd8:	2b08      	cmp	r3, #8
 800efda:	d11b      	bne.n	800f014 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	f06f 0208 	mvn.w	r2, #8
 800efe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2204      	movs	r2, #4
 800efea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	69db      	ldr	r3, [r3, #28]
 800eff2:	f003 0303 	and.w	r3, r3, #3
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d003      	beq.n	800f002 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f000 f960 	bl	800f2c0 <HAL_TIM_IC_CaptureCallback>
 800f000:	e005      	b.n	800f00e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f000 f952 	bl	800f2ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f000 f963 	bl	800f2d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2200      	movs	r2, #0
 800f012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	691b      	ldr	r3, [r3, #16]
 800f01a:	f003 0310 	and.w	r3, r3, #16
 800f01e:	2b10      	cmp	r3, #16
 800f020:	d122      	bne.n	800f068 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	68db      	ldr	r3, [r3, #12]
 800f028:	f003 0310 	and.w	r3, r3, #16
 800f02c:	2b10      	cmp	r3, #16
 800f02e:	d11b      	bne.n	800f068 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f06f 0210 	mvn.w	r2, #16
 800f038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2208      	movs	r2, #8
 800f03e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	69db      	ldr	r3, [r3, #28]
 800f046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d003      	beq.n	800f056 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f000 f936 	bl	800f2c0 <HAL_TIM_IC_CaptureCallback>
 800f054:	e005      	b.n	800f062 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f000 f928 	bl	800f2ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f000 f939 	bl	800f2d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2200      	movs	r2, #0
 800f066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	691b      	ldr	r3, [r3, #16]
 800f06e:	f003 0301 	and.w	r3, r3, #1
 800f072:	2b01      	cmp	r3, #1
 800f074:	d10e      	bne.n	800f094 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	68db      	ldr	r3, [r3, #12]
 800f07c:	f003 0301 	and.w	r3, r3, #1
 800f080:	2b01      	cmp	r3, #1
 800f082:	d107      	bne.n	800f094 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f06f 0201 	mvn.w	r2, #1
 800f08c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f7f6 fd48 	bl	8005b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	691b      	ldr	r3, [r3, #16]
 800f09a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f09e:	2b80      	cmp	r3, #128	; 0x80
 800f0a0:	d10e      	bne.n	800f0c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	68db      	ldr	r3, [r3, #12]
 800f0a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0ac:	2b80      	cmp	r3, #128	; 0x80
 800f0ae:	d107      	bne.n	800f0c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f0b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f000 fc6c 	bl	800f998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	691b      	ldr	r3, [r3, #16]
 800f0c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0ca:	2b40      	cmp	r3, #64	; 0x40
 800f0cc:	d10e      	bne.n	800f0ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	68db      	ldr	r3, [r3, #12]
 800f0d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0d8:	2b40      	cmp	r3, #64	; 0x40
 800f0da:	d107      	bne.n	800f0ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f0e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f000 f8fe 	bl	800f2e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	691b      	ldr	r3, [r3, #16]
 800f0f2:	f003 0320 	and.w	r3, r3, #32
 800f0f6:	2b20      	cmp	r3, #32
 800f0f8:	d10e      	bne.n	800f118 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	68db      	ldr	r3, [r3, #12]
 800f100:	f003 0320 	and.w	r3, r3, #32
 800f104:	2b20      	cmp	r3, #32
 800f106:	d107      	bne.n	800f118 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f06f 0220 	mvn.w	r2, #32
 800f110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f000 fc36 	bl	800f984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f118:	bf00      	nop
 800f11a:	3708      	adds	r7, #8
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}

0800f120 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b084      	sub	sp, #16
 800f124:	af00      	add	r7, sp, #0
 800f126:	60f8      	str	r0, [r7, #12]
 800f128:	60b9      	str	r1, [r7, #8]
 800f12a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f132:	2b01      	cmp	r3, #1
 800f134:	d101      	bne.n	800f13a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f136:	2302      	movs	r3, #2
 800f138:	e0b4      	b.n	800f2a4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2201      	movs	r2, #1
 800f13e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	2202      	movs	r2, #2
 800f146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2b0c      	cmp	r3, #12
 800f14e:	f200 809f 	bhi.w	800f290 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f152:	a201      	add	r2, pc, #4	; (adr r2, 800f158 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f158:	0800f18d 	.word	0x0800f18d
 800f15c:	0800f291 	.word	0x0800f291
 800f160:	0800f291 	.word	0x0800f291
 800f164:	0800f291 	.word	0x0800f291
 800f168:	0800f1cd 	.word	0x0800f1cd
 800f16c:	0800f291 	.word	0x0800f291
 800f170:	0800f291 	.word	0x0800f291
 800f174:	0800f291 	.word	0x0800f291
 800f178:	0800f20f 	.word	0x0800f20f
 800f17c:	0800f291 	.word	0x0800f291
 800f180:	0800f291 	.word	0x0800f291
 800f184:	0800f291 	.word	0x0800f291
 800f188:	0800f24f 	.word	0x0800f24f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	68b9      	ldr	r1, [r7, #8]
 800f192:	4618      	mov	r0, r3
 800f194:	f000 f952 	bl	800f43c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	699a      	ldr	r2, [r3, #24]
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	f042 0208 	orr.w	r2, r2, #8
 800f1a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	699a      	ldr	r2, [r3, #24]
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f022 0204 	bic.w	r2, r2, #4
 800f1b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	6999      	ldr	r1, [r3, #24]
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	691a      	ldr	r2, [r3, #16]
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	430a      	orrs	r2, r1
 800f1c8:	619a      	str	r2, [r3, #24]
      break;
 800f1ca:	e062      	b.n	800f292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	68b9      	ldr	r1, [r7, #8]
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f000 f9a2 	bl	800f51c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	699a      	ldr	r2, [r3, #24]
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f1e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	699a      	ldr	r2, [r3, #24]
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f1f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	6999      	ldr	r1, [r3, #24]
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	691b      	ldr	r3, [r3, #16]
 800f202:	021a      	lsls	r2, r3, #8
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	430a      	orrs	r2, r1
 800f20a:	619a      	str	r2, [r3, #24]
      break;
 800f20c:	e041      	b.n	800f292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	68b9      	ldr	r1, [r7, #8]
 800f214:	4618      	mov	r0, r3
 800f216:	f000 f9f7 	bl	800f608 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	69da      	ldr	r2, [r3, #28]
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	f042 0208 	orr.w	r2, r2, #8
 800f228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	69da      	ldr	r2, [r3, #28]
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	f022 0204 	bic.w	r2, r2, #4
 800f238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	69d9      	ldr	r1, [r3, #28]
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	691a      	ldr	r2, [r3, #16]
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	430a      	orrs	r2, r1
 800f24a:	61da      	str	r2, [r3, #28]
      break;
 800f24c:	e021      	b.n	800f292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	68b9      	ldr	r1, [r7, #8]
 800f254:	4618      	mov	r0, r3
 800f256:	f000 fa4b 	bl	800f6f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	69da      	ldr	r2, [r3, #28]
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	69da      	ldr	r2, [r3, #28]
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	69d9      	ldr	r1, [r3, #28]
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	691b      	ldr	r3, [r3, #16]
 800f284:	021a      	lsls	r2, r3, #8
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	430a      	orrs	r2, r1
 800f28c:	61da      	str	r2, [r3, #28]
      break;
 800f28e:	e000      	b.n	800f292 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f290:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	2201      	movs	r2, #1
 800f296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	2200      	movs	r2, #0
 800f29e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f2a2:	2300      	movs	r3, #0
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3710      	adds	r7, #16
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}

0800f2ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	b083      	sub	sp, #12
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f2b4:	bf00      	nop
 800f2b6:	370c      	adds	r7, #12
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2be:	4770      	bx	lr

0800f2c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b083      	sub	sp, #12
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f2c8:	bf00      	nop
 800f2ca:	370c      	adds	r7, #12
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d2:	4770      	bx	lr

0800f2d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f2d4:	b480      	push	{r7}
 800f2d6:	b083      	sub	sp, #12
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f2dc:	bf00      	nop
 800f2de:	370c      	adds	r7, #12
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e6:	4770      	bx	lr

0800f2e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b083      	sub	sp, #12
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f2f0:	bf00      	nop
 800f2f2:	370c      	adds	r7, #12
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fa:	4770      	bx	lr

0800f2fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b085      	sub	sp, #20
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
 800f304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	4a40      	ldr	r2, [pc, #256]	; (800f410 <TIM_Base_SetConfig+0x114>)
 800f310:	4293      	cmp	r3, r2
 800f312:	d013      	beq.n	800f33c <TIM_Base_SetConfig+0x40>
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f31a:	d00f      	beq.n	800f33c <TIM_Base_SetConfig+0x40>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	4a3d      	ldr	r2, [pc, #244]	; (800f414 <TIM_Base_SetConfig+0x118>)
 800f320:	4293      	cmp	r3, r2
 800f322:	d00b      	beq.n	800f33c <TIM_Base_SetConfig+0x40>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	4a3c      	ldr	r2, [pc, #240]	; (800f418 <TIM_Base_SetConfig+0x11c>)
 800f328:	4293      	cmp	r3, r2
 800f32a:	d007      	beq.n	800f33c <TIM_Base_SetConfig+0x40>
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	4a3b      	ldr	r2, [pc, #236]	; (800f41c <TIM_Base_SetConfig+0x120>)
 800f330:	4293      	cmp	r3, r2
 800f332:	d003      	beq.n	800f33c <TIM_Base_SetConfig+0x40>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	4a3a      	ldr	r2, [pc, #232]	; (800f420 <TIM_Base_SetConfig+0x124>)
 800f338:	4293      	cmp	r3, r2
 800f33a:	d108      	bne.n	800f34e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	685b      	ldr	r3, [r3, #4]
 800f348:	68fa      	ldr	r2, [r7, #12]
 800f34a:	4313      	orrs	r3, r2
 800f34c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	4a2f      	ldr	r2, [pc, #188]	; (800f410 <TIM_Base_SetConfig+0x114>)
 800f352:	4293      	cmp	r3, r2
 800f354:	d02b      	beq.n	800f3ae <TIM_Base_SetConfig+0xb2>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f35c:	d027      	beq.n	800f3ae <TIM_Base_SetConfig+0xb2>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	4a2c      	ldr	r2, [pc, #176]	; (800f414 <TIM_Base_SetConfig+0x118>)
 800f362:	4293      	cmp	r3, r2
 800f364:	d023      	beq.n	800f3ae <TIM_Base_SetConfig+0xb2>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	4a2b      	ldr	r2, [pc, #172]	; (800f418 <TIM_Base_SetConfig+0x11c>)
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d01f      	beq.n	800f3ae <TIM_Base_SetConfig+0xb2>
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	4a2a      	ldr	r2, [pc, #168]	; (800f41c <TIM_Base_SetConfig+0x120>)
 800f372:	4293      	cmp	r3, r2
 800f374:	d01b      	beq.n	800f3ae <TIM_Base_SetConfig+0xb2>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	4a29      	ldr	r2, [pc, #164]	; (800f420 <TIM_Base_SetConfig+0x124>)
 800f37a:	4293      	cmp	r3, r2
 800f37c:	d017      	beq.n	800f3ae <TIM_Base_SetConfig+0xb2>
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	4a28      	ldr	r2, [pc, #160]	; (800f424 <TIM_Base_SetConfig+0x128>)
 800f382:	4293      	cmp	r3, r2
 800f384:	d013      	beq.n	800f3ae <TIM_Base_SetConfig+0xb2>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	4a27      	ldr	r2, [pc, #156]	; (800f428 <TIM_Base_SetConfig+0x12c>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d00f      	beq.n	800f3ae <TIM_Base_SetConfig+0xb2>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	4a26      	ldr	r2, [pc, #152]	; (800f42c <TIM_Base_SetConfig+0x130>)
 800f392:	4293      	cmp	r3, r2
 800f394:	d00b      	beq.n	800f3ae <TIM_Base_SetConfig+0xb2>
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	4a25      	ldr	r2, [pc, #148]	; (800f430 <TIM_Base_SetConfig+0x134>)
 800f39a:	4293      	cmp	r3, r2
 800f39c:	d007      	beq.n	800f3ae <TIM_Base_SetConfig+0xb2>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	4a24      	ldr	r2, [pc, #144]	; (800f434 <TIM_Base_SetConfig+0x138>)
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	d003      	beq.n	800f3ae <TIM_Base_SetConfig+0xb2>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	4a23      	ldr	r2, [pc, #140]	; (800f438 <TIM_Base_SetConfig+0x13c>)
 800f3aa:	4293      	cmp	r3, r2
 800f3ac:	d108      	bne.n	800f3c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f3b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	68db      	ldr	r3, [r3, #12]
 800f3ba:	68fa      	ldr	r2, [r7, #12]
 800f3bc:	4313      	orrs	r3, r2
 800f3be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	695b      	ldr	r3, [r3, #20]
 800f3ca:	4313      	orrs	r3, r2
 800f3cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	68fa      	ldr	r2, [r7, #12]
 800f3d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	689a      	ldr	r2, [r3, #8]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	681a      	ldr	r2, [r3, #0]
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	4a0a      	ldr	r2, [pc, #40]	; (800f410 <TIM_Base_SetConfig+0x114>)
 800f3e8:	4293      	cmp	r3, r2
 800f3ea:	d003      	beq.n	800f3f4 <TIM_Base_SetConfig+0xf8>
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	4a0c      	ldr	r2, [pc, #48]	; (800f420 <TIM_Base_SetConfig+0x124>)
 800f3f0:	4293      	cmp	r3, r2
 800f3f2:	d103      	bne.n	800f3fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	691a      	ldr	r2, [r3, #16]
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2201      	movs	r2, #1
 800f400:	615a      	str	r2, [r3, #20]
}
 800f402:	bf00      	nop
 800f404:	3714      	adds	r7, #20
 800f406:	46bd      	mov	sp, r7
 800f408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40c:	4770      	bx	lr
 800f40e:	bf00      	nop
 800f410:	40010000 	.word	0x40010000
 800f414:	40000400 	.word	0x40000400
 800f418:	40000800 	.word	0x40000800
 800f41c:	40000c00 	.word	0x40000c00
 800f420:	40010400 	.word	0x40010400
 800f424:	40014000 	.word	0x40014000
 800f428:	40014400 	.word	0x40014400
 800f42c:	40014800 	.word	0x40014800
 800f430:	40001800 	.word	0x40001800
 800f434:	40001c00 	.word	0x40001c00
 800f438:	40002000 	.word	0x40002000

0800f43c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f43c:	b480      	push	{r7}
 800f43e:	b087      	sub	sp, #28
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
 800f444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6a1b      	ldr	r3, [r3, #32]
 800f44a:	f023 0201 	bic.w	r2, r3, #1
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6a1b      	ldr	r3, [r3, #32]
 800f456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	685b      	ldr	r3, [r3, #4]
 800f45c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	699b      	ldr	r3, [r3, #24]
 800f462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f46a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	f023 0303 	bic.w	r3, r3, #3
 800f472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	68fa      	ldr	r2, [r7, #12]
 800f47a:	4313      	orrs	r3, r2
 800f47c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	f023 0302 	bic.w	r3, r3, #2
 800f484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	689b      	ldr	r3, [r3, #8]
 800f48a:	697a      	ldr	r2, [r7, #20]
 800f48c:	4313      	orrs	r3, r2
 800f48e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	4a20      	ldr	r2, [pc, #128]	; (800f514 <TIM_OC1_SetConfig+0xd8>)
 800f494:	4293      	cmp	r3, r2
 800f496:	d003      	beq.n	800f4a0 <TIM_OC1_SetConfig+0x64>
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	4a1f      	ldr	r2, [pc, #124]	; (800f518 <TIM_OC1_SetConfig+0xdc>)
 800f49c:	4293      	cmp	r3, r2
 800f49e:	d10c      	bne.n	800f4ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	f023 0308 	bic.w	r3, r3, #8
 800f4a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	68db      	ldr	r3, [r3, #12]
 800f4ac:	697a      	ldr	r2, [r7, #20]
 800f4ae:	4313      	orrs	r3, r2
 800f4b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	f023 0304 	bic.w	r3, r3, #4
 800f4b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	4a15      	ldr	r2, [pc, #84]	; (800f514 <TIM_OC1_SetConfig+0xd8>)
 800f4be:	4293      	cmp	r3, r2
 800f4c0:	d003      	beq.n	800f4ca <TIM_OC1_SetConfig+0x8e>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	4a14      	ldr	r2, [pc, #80]	; (800f518 <TIM_OC1_SetConfig+0xdc>)
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	d111      	bne.n	800f4ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f4ca:	693b      	ldr	r3, [r7, #16]
 800f4cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f4d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f4d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	695b      	ldr	r3, [r3, #20]
 800f4de:	693a      	ldr	r2, [r7, #16]
 800f4e0:	4313      	orrs	r3, r2
 800f4e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	699b      	ldr	r3, [r3, #24]
 800f4e8:	693a      	ldr	r2, [r7, #16]
 800f4ea:	4313      	orrs	r3, r2
 800f4ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	693a      	ldr	r2, [r7, #16]
 800f4f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	68fa      	ldr	r2, [r7, #12]
 800f4f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	685a      	ldr	r2, [r3, #4]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	697a      	ldr	r2, [r7, #20]
 800f506:	621a      	str	r2, [r3, #32]
}
 800f508:	bf00      	nop
 800f50a:	371c      	adds	r7, #28
 800f50c:	46bd      	mov	sp, r7
 800f50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f512:	4770      	bx	lr
 800f514:	40010000 	.word	0x40010000
 800f518:	40010400 	.word	0x40010400

0800f51c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b087      	sub	sp, #28
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6a1b      	ldr	r3, [r3, #32]
 800f52a:	f023 0210 	bic.w	r2, r3, #16
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6a1b      	ldr	r3, [r3, #32]
 800f536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	699b      	ldr	r3, [r3, #24]
 800f542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f54a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	021b      	lsls	r3, r3, #8
 800f55a:	68fa      	ldr	r2, [r7, #12]
 800f55c:	4313      	orrs	r3, r2
 800f55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f560:	697b      	ldr	r3, [r7, #20]
 800f562:	f023 0320 	bic.w	r3, r3, #32
 800f566:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	689b      	ldr	r3, [r3, #8]
 800f56c:	011b      	lsls	r3, r3, #4
 800f56e:	697a      	ldr	r2, [r7, #20]
 800f570:	4313      	orrs	r3, r2
 800f572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	4a22      	ldr	r2, [pc, #136]	; (800f600 <TIM_OC2_SetConfig+0xe4>)
 800f578:	4293      	cmp	r3, r2
 800f57a:	d003      	beq.n	800f584 <TIM_OC2_SetConfig+0x68>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	4a21      	ldr	r2, [pc, #132]	; (800f604 <TIM_OC2_SetConfig+0xe8>)
 800f580:	4293      	cmp	r3, r2
 800f582:	d10d      	bne.n	800f5a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f58a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	68db      	ldr	r3, [r3, #12]
 800f590:	011b      	lsls	r3, r3, #4
 800f592:	697a      	ldr	r2, [r7, #20]
 800f594:	4313      	orrs	r3, r2
 800f596:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f59e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	4a17      	ldr	r2, [pc, #92]	; (800f600 <TIM_OC2_SetConfig+0xe4>)
 800f5a4:	4293      	cmp	r3, r2
 800f5a6:	d003      	beq.n	800f5b0 <TIM_OC2_SetConfig+0x94>
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	4a16      	ldr	r2, [pc, #88]	; (800f604 <TIM_OC2_SetConfig+0xe8>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d113      	bne.n	800f5d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f5b0:	693b      	ldr	r3, [r7, #16]
 800f5b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f5b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f5b8:	693b      	ldr	r3, [r7, #16]
 800f5ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f5be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	695b      	ldr	r3, [r3, #20]
 800f5c4:	009b      	lsls	r3, r3, #2
 800f5c6:	693a      	ldr	r2, [r7, #16]
 800f5c8:	4313      	orrs	r3, r2
 800f5ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	699b      	ldr	r3, [r3, #24]
 800f5d0:	009b      	lsls	r3, r3, #2
 800f5d2:	693a      	ldr	r2, [r7, #16]
 800f5d4:	4313      	orrs	r3, r2
 800f5d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	693a      	ldr	r2, [r7, #16]
 800f5dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	68fa      	ldr	r2, [r7, #12]
 800f5e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	685a      	ldr	r2, [r3, #4]
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	697a      	ldr	r2, [r7, #20]
 800f5f0:	621a      	str	r2, [r3, #32]
}
 800f5f2:	bf00      	nop
 800f5f4:	371c      	adds	r7, #28
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fc:	4770      	bx	lr
 800f5fe:	bf00      	nop
 800f600:	40010000 	.word	0x40010000
 800f604:	40010400 	.word	0x40010400

0800f608 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f608:	b480      	push	{r7}
 800f60a:	b087      	sub	sp, #28
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
 800f610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6a1b      	ldr	r3, [r3, #32]
 800f616:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6a1b      	ldr	r3, [r3, #32]
 800f622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	69db      	ldr	r3, [r3, #28]
 800f62e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	f023 0303 	bic.w	r3, r3, #3
 800f63e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	68fa      	ldr	r2, [r7, #12]
 800f646:	4313      	orrs	r3, r2
 800f648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	689b      	ldr	r3, [r3, #8]
 800f656:	021b      	lsls	r3, r3, #8
 800f658:	697a      	ldr	r2, [r7, #20]
 800f65a:	4313      	orrs	r3, r2
 800f65c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	4a21      	ldr	r2, [pc, #132]	; (800f6e8 <TIM_OC3_SetConfig+0xe0>)
 800f662:	4293      	cmp	r3, r2
 800f664:	d003      	beq.n	800f66e <TIM_OC3_SetConfig+0x66>
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	4a20      	ldr	r2, [pc, #128]	; (800f6ec <TIM_OC3_SetConfig+0xe4>)
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d10d      	bne.n	800f68a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f674:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	68db      	ldr	r3, [r3, #12]
 800f67a:	021b      	lsls	r3, r3, #8
 800f67c:	697a      	ldr	r2, [r7, #20]
 800f67e:	4313      	orrs	r3, r2
 800f680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f682:	697b      	ldr	r3, [r7, #20]
 800f684:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	4a16      	ldr	r2, [pc, #88]	; (800f6e8 <TIM_OC3_SetConfig+0xe0>)
 800f68e:	4293      	cmp	r3, r2
 800f690:	d003      	beq.n	800f69a <TIM_OC3_SetConfig+0x92>
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	4a15      	ldr	r2, [pc, #84]	; (800f6ec <TIM_OC3_SetConfig+0xe4>)
 800f696:	4293      	cmp	r3, r2
 800f698:	d113      	bne.n	800f6c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f6a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f6a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	695b      	ldr	r3, [r3, #20]
 800f6ae:	011b      	lsls	r3, r3, #4
 800f6b0:	693a      	ldr	r2, [r7, #16]
 800f6b2:	4313      	orrs	r3, r2
 800f6b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	699b      	ldr	r3, [r3, #24]
 800f6ba:	011b      	lsls	r3, r3, #4
 800f6bc:	693a      	ldr	r2, [r7, #16]
 800f6be:	4313      	orrs	r3, r2
 800f6c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	693a      	ldr	r2, [r7, #16]
 800f6c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	68fa      	ldr	r2, [r7, #12]
 800f6cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	685a      	ldr	r2, [r3, #4]
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	697a      	ldr	r2, [r7, #20]
 800f6da:	621a      	str	r2, [r3, #32]
}
 800f6dc:	bf00      	nop
 800f6de:	371c      	adds	r7, #28
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e6:	4770      	bx	lr
 800f6e8:	40010000 	.word	0x40010000
 800f6ec:	40010400 	.word	0x40010400

0800f6f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b087      	sub	sp, #28
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	6a1b      	ldr	r3, [r3, #32]
 800f6fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6a1b      	ldr	r3, [r3, #32]
 800f70a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	69db      	ldr	r3, [r3, #28]
 800f716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f71e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	021b      	lsls	r3, r3, #8
 800f72e:	68fa      	ldr	r2, [r7, #12]
 800f730:	4313      	orrs	r3, r2
 800f732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f73a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	689b      	ldr	r3, [r3, #8]
 800f740:	031b      	lsls	r3, r3, #12
 800f742:	693a      	ldr	r2, [r7, #16]
 800f744:	4313      	orrs	r3, r2
 800f746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	4a12      	ldr	r2, [pc, #72]	; (800f794 <TIM_OC4_SetConfig+0xa4>)
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d003      	beq.n	800f758 <TIM_OC4_SetConfig+0x68>
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	4a11      	ldr	r2, [pc, #68]	; (800f798 <TIM_OC4_SetConfig+0xa8>)
 800f754:	4293      	cmp	r3, r2
 800f756:	d109      	bne.n	800f76c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f758:	697b      	ldr	r3, [r7, #20]
 800f75a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f75e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	695b      	ldr	r3, [r3, #20]
 800f764:	019b      	lsls	r3, r3, #6
 800f766:	697a      	ldr	r2, [r7, #20]
 800f768:	4313      	orrs	r3, r2
 800f76a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	697a      	ldr	r2, [r7, #20]
 800f770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	68fa      	ldr	r2, [r7, #12]
 800f776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	685a      	ldr	r2, [r3, #4]
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	693a      	ldr	r2, [r7, #16]
 800f784:	621a      	str	r2, [r3, #32]
}
 800f786:	bf00      	nop
 800f788:	371c      	adds	r7, #28
 800f78a:	46bd      	mov	sp, r7
 800f78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f790:	4770      	bx	lr
 800f792:	bf00      	nop
 800f794:	40010000 	.word	0x40010000
 800f798:	40010400 	.word	0x40010400

0800f79c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f79c:	b480      	push	{r7}
 800f79e:	b087      	sub	sp, #28
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	60f8      	str	r0, [r7, #12]
 800f7a4:	60b9      	str	r1, [r7, #8]
 800f7a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	f003 031f 	and.w	r3, r3, #31
 800f7ae:	2201      	movs	r2, #1
 800f7b0:	fa02 f303 	lsl.w	r3, r2, r3
 800f7b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	6a1a      	ldr	r2, [r3, #32]
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	43db      	mvns	r3, r3
 800f7be:	401a      	ands	r2, r3
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	6a1a      	ldr	r2, [r3, #32]
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	f003 031f 	and.w	r3, r3, #31
 800f7ce:	6879      	ldr	r1, [r7, #4]
 800f7d0:	fa01 f303 	lsl.w	r3, r1, r3
 800f7d4:	431a      	orrs	r2, r3
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	621a      	str	r2, [r3, #32]
}
 800f7da:	bf00      	nop
 800f7dc:	371c      	adds	r7, #28
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e4:	4770      	bx	lr
	...

0800f7e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b085      	sub	sp, #20
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f7f8:	2b01      	cmp	r3, #1
 800f7fa:	d101      	bne.n	800f800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f7fc:	2302      	movs	r3, #2
 800f7fe:	e05a      	b.n	800f8b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2201      	movs	r2, #1
 800f804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2202      	movs	r2, #2
 800f80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	685b      	ldr	r3, [r3, #4]
 800f816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	689b      	ldr	r3, [r3, #8]
 800f81e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	68fa      	ldr	r2, [r7, #12]
 800f82e:	4313      	orrs	r3, r2
 800f830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	68fa      	ldr	r2, [r7, #12]
 800f838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	4a21      	ldr	r2, [pc, #132]	; (800f8c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f840:	4293      	cmp	r3, r2
 800f842:	d022      	beq.n	800f88a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f84c:	d01d      	beq.n	800f88a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	4a1d      	ldr	r2, [pc, #116]	; (800f8c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f854:	4293      	cmp	r3, r2
 800f856:	d018      	beq.n	800f88a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	4a1b      	ldr	r2, [pc, #108]	; (800f8cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f85e:	4293      	cmp	r3, r2
 800f860:	d013      	beq.n	800f88a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	4a1a      	ldr	r2, [pc, #104]	; (800f8d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f868:	4293      	cmp	r3, r2
 800f86a:	d00e      	beq.n	800f88a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	4a18      	ldr	r2, [pc, #96]	; (800f8d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f872:	4293      	cmp	r3, r2
 800f874:	d009      	beq.n	800f88a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	4a17      	ldr	r2, [pc, #92]	; (800f8d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f87c:	4293      	cmp	r3, r2
 800f87e:	d004      	beq.n	800f88a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	4a15      	ldr	r2, [pc, #84]	; (800f8dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f886:	4293      	cmp	r3, r2
 800f888:	d10c      	bne.n	800f8a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f890:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	685b      	ldr	r3, [r3, #4]
 800f896:	68ba      	ldr	r2, [r7, #8]
 800f898:	4313      	orrs	r3, r2
 800f89a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	68ba      	ldr	r2, [r7, #8]
 800f8a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2201      	movs	r2, #1
 800f8a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f8b4:	2300      	movs	r3, #0
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3714      	adds	r7, #20
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c0:	4770      	bx	lr
 800f8c2:	bf00      	nop
 800f8c4:	40010000 	.word	0x40010000
 800f8c8:	40000400 	.word	0x40000400
 800f8cc:	40000800 	.word	0x40000800
 800f8d0:	40000c00 	.word	0x40000c00
 800f8d4:	40010400 	.word	0x40010400
 800f8d8:	40014000 	.word	0x40014000
 800f8dc:	40001800 	.word	0x40001800

0800f8e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f8e0:	b480      	push	{r7}
 800f8e2:	b085      	sub	sp, #20
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
 800f8e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f8f4:	2b01      	cmp	r3, #1
 800f8f6:	d101      	bne.n	800f8fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f8f8:	2302      	movs	r3, #2
 800f8fa:	e03d      	b.n	800f978 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2201      	movs	r2, #1
 800f900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	68db      	ldr	r3, [r3, #12]
 800f90e:	4313      	orrs	r3, r2
 800f910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	689b      	ldr	r3, [r3, #8]
 800f91c:	4313      	orrs	r3, r2
 800f91e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	685b      	ldr	r3, [r3, #4]
 800f92a:	4313      	orrs	r3, r2
 800f92c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	4313      	orrs	r3, r2
 800f93a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	691b      	ldr	r3, [r3, #16]
 800f946:	4313      	orrs	r3, r2
 800f948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	695b      	ldr	r3, [r3, #20]
 800f954:	4313      	orrs	r3, r2
 800f956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	69db      	ldr	r3, [r3, #28]
 800f962:	4313      	orrs	r3, r2
 800f964:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	68fa      	ldr	r2, [r7, #12]
 800f96c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	2200      	movs	r2, #0
 800f972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f976:	2300      	movs	r3, #0
}
 800f978:	4618      	mov	r0, r3
 800f97a:	3714      	adds	r7, #20
 800f97c:	46bd      	mov	sp, r7
 800f97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f982:	4770      	bx	lr

0800f984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f984:	b480      	push	{r7}
 800f986:	b083      	sub	sp, #12
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f98c:	bf00      	nop
 800f98e:	370c      	adds	r7, #12
 800f990:	46bd      	mov	sp, r7
 800f992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f996:	4770      	bx	lr

0800f998 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f998:	b480      	push	{r7}
 800f99a:	b083      	sub	sp, #12
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f9a0:	bf00      	nop
 800f9a2:	370c      	adds	r7, #12
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9aa:	4770      	bx	lr

0800f9ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b082      	sub	sp, #8
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d101      	bne.n	800f9be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	e03f      	b.n	800fa3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f9c4:	b2db      	uxtb	r3, r3
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d106      	bne.n	800f9d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f7f7 fce6 	bl	80073a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2224      	movs	r2, #36	; 0x24
 800f9dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	68da      	ldr	r2, [r3, #12]
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f9ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f000 f829 	bl	800fa48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	691a      	ldr	r2, [r3, #16]
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fa04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	695a      	ldr	r2, [r3, #20]
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fa14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	68da      	ldr	r2, [r3, #12]
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fa24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2220      	movs	r2, #32
 800fa30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2220      	movs	r2, #32
 800fa38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800fa3c:	2300      	movs	r3, #0
}
 800fa3e:	4618      	mov	r0, r3
 800fa40:	3708      	adds	r7, #8
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}
	...

0800fa48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fa48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa4c:	b0bd      	sub	sp, #244	; 0xf4
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fa54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	691b      	ldr	r3, [r3, #16]
 800fa5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800fa60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa64:	68d9      	ldr	r1, [r3, #12]
 800fa66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa6a:	681a      	ldr	r2, [r3, #0]
 800fa6c:	ea40 0301 	orr.w	r3, r0, r1
 800fa70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fa72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa76:	689a      	ldr	r2, [r3, #8]
 800fa78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa7c:	691b      	ldr	r3, [r3, #16]
 800fa7e:	431a      	orrs	r2, r3
 800fa80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa84:	695b      	ldr	r3, [r3, #20]
 800fa86:	431a      	orrs	r2, r3
 800fa88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa8c:	69db      	ldr	r3, [r3, #28]
 800fa8e:	4313      	orrs	r3, r2
 800fa90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800fa94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	68db      	ldr	r3, [r3, #12]
 800fa9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800faa0:	f021 010c 	bic.w	r1, r1, #12
 800faa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800faa8:	681a      	ldr	r2, [r3, #0]
 800faaa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800faae:	430b      	orrs	r3, r1
 800fab0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	695b      	ldr	r3, [r3, #20]
 800faba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800fabe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fac2:	6999      	ldr	r1, [r3, #24]
 800fac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fac8:	681a      	ldr	r2, [r3, #0]
 800faca:	ea40 0301 	orr.w	r3, r0, r1
 800face:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fad4:	69db      	ldr	r3, [r3, #28]
 800fad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fada:	f040 81a5 	bne.w	800fe28 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fae2:	681a      	ldr	r2, [r3, #0]
 800fae4:	4bcd      	ldr	r3, [pc, #820]	; (800fe1c <UART_SetConfig+0x3d4>)
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d006      	beq.n	800faf8 <UART_SetConfig+0xb0>
 800faea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800faee:	681a      	ldr	r2, [r3, #0]
 800faf0:	4bcb      	ldr	r3, [pc, #812]	; (800fe20 <UART_SetConfig+0x3d8>)
 800faf2:	429a      	cmp	r2, r3
 800faf4:	f040 80cb 	bne.w	800fc8e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800faf8:	f7fc fbba 	bl	800c270 <HAL_RCC_GetPCLK2Freq>
 800fafc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fb00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fb04:	461c      	mov	r4, r3
 800fb06:	f04f 0500 	mov.w	r5, #0
 800fb0a:	4622      	mov	r2, r4
 800fb0c:	462b      	mov	r3, r5
 800fb0e:	1891      	adds	r1, r2, r2
 800fb10:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800fb14:	415b      	adcs	r3, r3
 800fb16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fb1a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800fb1e:	1912      	adds	r2, r2, r4
 800fb20:	eb45 0303 	adc.w	r3, r5, r3
 800fb24:	f04f 0000 	mov.w	r0, #0
 800fb28:	f04f 0100 	mov.w	r1, #0
 800fb2c:	00d9      	lsls	r1, r3, #3
 800fb2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fb32:	00d0      	lsls	r0, r2, #3
 800fb34:	4602      	mov	r2, r0
 800fb36:	460b      	mov	r3, r1
 800fb38:	1911      	adds	r1, r2, r4
 800fb3a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800fb3e:	416b      	adcs	r3, r5
 800fb40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800fb44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb48:	685b      	ldr	r3, [r3, #4]
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	f04f 0300 	mov.w	r3, #0
 800fb50:	1891      	adds	r1, r2, r2
 800fb52:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800fb56:	415b      	adcs	r3, r3
 800fb58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fb5c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800fb60:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800fb64:	f7f1 f8a8 	bl	8000cb8 <__aeabi_uldivmod>
 800fb68:	4602      	mov	r2, r0
 800fb6a:	460b      	mov	r3, r1
 800fb6c:	4bad      	ldr	r3, [pc, #692]	; (800fe24 <UART_SetConfig+0x3dc>)
 800fb6e:	fba3 2302 	umull	r2, r3, r3, r2
 800fb72:	095b      	lsrs	r3, r3, #5
 800fb74:	011e      	lsls	r6, r3, #4
 800fb76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fb7a:	461c      	mov	r4, r3
 800fb7c:	f04f 0500 	mov.w	r5, #0
 800fb80:	4622      	mov	r2, r4
 800fb82:	462b      	mov	r3, r5
 800fb84:	1891      	adds	r1, r2, r2
 800fb86:	67b9      	str	r1, [r7, #120]	; 0x78
 800fb88:	415b      	adcs	r3, r3
 800fb8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fb8c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800fb90:	1912      	adds	r2, r2, r4
 800fb92:	eb45 0303 	adc.w	r3, r5, r3
 800fb96:	f04f 0000 	mov.w	r0, #0
 800fb9a:	f04f 0100 	mov.w	r1, #0
 800fb9e:	00d9      	lsls	r1, r3, #3
 800fba0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fba4:	00d0      	lsls	r0, r2, #3
 800fba6:	4602      	mov	r2, r0
 800fba8:	460b      	mov	r3, r1
 800fbaa:	1911      	adds	r1, r2, r4
 800fbac:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800fbb0:	416b      	adcs	r3, r5
 800fbb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800fbb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fbba:	685b      	ldr	r3, [r3, #4]
 800fbbc:	461a      	mov	r2, r3
 800fbbe:	f04f 0300 	mov.w	r3, #0
 800fbc2:	1891      	adds	r1, r2, r2
 800fbc4:	6739      	str	r1, [r7, #112]	; 0x70
 800fbc6:	415b      	adcs	r3, r3
 800fbc8:	677b      	str	r3, [r7, #116]	; 0x74
 800fbca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800fbce:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800fbd2:	f7f1 f871 	bl	8000cb8 <__aeabi_uldivmod>
 800fbd6:	4602      	mov	r2, r0
 800fbd8:	460b      	mov	r3, r1
 800fbda:	4b92      	ldr	r3, [pc, #584]	; (800fe24 <UART_SetConfig+0x3dc>)
 800fbdc:	fba3 1302 	umull	r1, r3, r3, r2
 800fbe0:	095b      	lsrs	r3, r3, #5
 800fbe2:	2164      	movs	r1, #100	; 0x64
 800fbe4:	fb01 f303 	mul.w	r3, r1, r3
 800fbe8:	1ad3      	subs	r3, r2, r3
 800fbea:	00db      	lsls	r3, r3, #3
 800fbec:	3332      	adds	r3, #50	; 0x32
 800fbee:	4a8d      	ldr	r2, [pc, #564]	; (800fe24 <UART_SetConfig+0x3dc>)
 800fbf0:	fba2 2303 	umull	r2, r3, r2, r3
 800fbf4:	095b      	lsrs	r3, r3, #5
 800fbf6:	005b      	lsls	r3, r3, #1
 800fbf8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fbfc:	441e      	add	r6, r3
 800fbfe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fc02:	4618      	mov	r0, r3
 800fc04:	f04f 0100 	mov.w	r1, #0
 800fc08:	4602      	mov	r2, r0
 800fc0a:	460b      	mov	r3, r1
 800fc0c:	1894      	adds	r4, r2, r2
 800fc0e:	66bc      	str	r4, [r7, #104]	; 0x68
 800fc10:	415b      	adcs	r3, r3
 800fc12:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fc14:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800fc18:	1812      	adds	r2, r2, r0
 800fc1a:	eb41 0303 	adc.w	r3, r1, r3
 800fc1e:	f04f 0400 	mov.w	r4, #0
 800fc22:	f04f 0500 	mov.w	r5, #0
 800fc26:	00dd      	lsls	r5, r3, #3
 800fc28:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fc2c:	00d4      	lsls	r4, r2, #3
 800fc2e:	4622      	mov	r2, r4
 800fc30:	462b      	mov	r3, r5
 800fc32:	1814      	adds	r4, r2, r0
 800fc34:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800fc38:	414b      	adcs	r3, r1
 800fc3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800fc3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc42:	685b      	ldr	r3, [r3, #4]
 800fc44:	461a      	mov	r2, r3
 800fc46:	f04f 0300 	mov.w	r3, #0
 800fc4a:	1891      	adds	r1, r2, r2
 800fc4c:	6639      	str	r1, [r7, #96]	; 0x60
 800fc4e:	415b      	adcs	r3, r3
 800fc50:	667b      	str	r3, [r7, #100]	; 0x64
 800fc52:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800fc56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800fc5a:	f7f1 f82d 	bl	8000cb8 <__aeabi_uldivmod>
 800fc5e:	4602      	mov	r2, r0
 800fc60:	460b      	mov	r3, r1
 800fc62:	4b70      	ldr	r3, [pc, #448]	; (800fe24 <UART_SetConfig+0x3dc>)
 800fc64:	fba3 1302 	umull	r1, r3, r3, r2
 800fc68:	095b      	lsrs	r3, r3, #5
 800fc6a:	2164      	movs	r1, #100	; 0x64
 800fc6c:	fb01 f303 	mul.w	r3, r1, r3
 800fc70:	1ad3      	subs	r3, r2, r3
 800fc72:	00db      	lsls	r3, r3, #3
 800fc74:	3332      	adds	r3, #50	; 0x32
 800fc76:	4a6b      	ldr	r2, [pc, #428]	; (800fe24 <UART_SetConfig+0x3dc>)
 800fc78:	fba2 2303 	umull	r2, r3, r2, r3
 800fc7c:	095b      	lsrs	r3, r3, #5
 800fc7e:	f003 0207 	and.w	r2, r3, #7
 800fc82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	4432      	add	r2, r6
 800fc8a:	609a      	str	r2, [r3, #8]
 800fc8c:	e26d      	b.n	801016a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fc8e:	f7fc fadb 	bl	800c248 <HAL_RCC_GetPCLK1Freq>
 800fc92:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fc96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fc9a:	461c      	mov	r4, r3
 800fc9c:	f04f 0500 	mov.w	r5, #0
 800fca0:	4622      	mov	r2, r4
 800fca2:	462b      	mov	r3, r5
 800fca4:	1891      	adds	r1, r2, r2
 800fca6:	65b9      	str	r1, [r7, #88]	; 0x58
 800fca8:	415b      	adcs	r3, r3
 800fcaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fcac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800fcb0:	1912      	adds	r2, r2, r4
 800fcb2:	eb45 0303 	adc.w	r3, r5, r3
 800fcb6:	f04f 0000 	mov.w	r0, #0
 800fcba:	f04f 0100 	mov.w	r1, #0
 800fcbe:	00d9      	lsls	r1, r3, #3
 800fcc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fcc4:	00d0      	lsls	r0, r2, #3
 800fcc6:	4602      	mov	r2, r0
 800fcc8:	460b      	mov	r3, r1
 800fcca:	1911      	adds	r1, r2, r4
 800fccc:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800fcd0:	416b      	adcs	r3, r5
 800fcd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fcd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fcda:	685b      	ldr	r3, [r3, #4]
 800fcdc:	461a      	mov	r2, r3
 800fcde:	f04f 0300 	mov.w	r3, #0
 800fce2:	1891      	adds	r1, r2, r2
 800fce4:	6539      	str	r1, [r7, #80]	; 0x50
 800fce6:	415b      	adcs	r3, r3
 800fce8:	657b      	str	r3, [r7, #84]	; 0x54
 800fcea:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800fcee:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800fcf2:	f7f0 ffe1 	bl	8000cb8 <__aeabi_uldivmod>
 800fcf6:	4602      	mov	r2, r0
 800fcf8:	460b      	mov	r3, r1
 800fcfa:	4b4a      	ldr	r3, [pc, #296]	; (800fe24 <UART_SetConfig+0x3dc>)
 800fcfc:	fba3 2302 	umull	r2, r3, r3, r2
 800fd00:	095b      	lsrs	r3, r3, #5
 800fd02:	011e      	lsls	r6, r3, #4
 800fd04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fd08:	461c      	mov	r4, r3
 800fd0a:	f04f 0500 	mov.w	r5, #0
 800fd0e:	4622      	mov	r2, r4
 800fd10:	462b      	mov	r3, r5
 800fd12:	1891      	adds	r1, r2, r2
 800fd14:	64b9      	str	r1, [r7, #72]	; 0x48
 800fd16:	415b      	adcs	r3, r3
 800fd18:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd1a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800fd1e:	1912      	adds	r2, r2, r4
 800fd20:	eb45 0303 	adc.w	r3, r5, r3
 800fd24:	f04f 0000 	mov.w	r0, #0
 800fd28:	f04f 0100 	mov.w	r1, #0
 800fd2c:	00d9      	lsls	r1, r3, #3
 800fd2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fd32:	00d0      	lsls	r0, r2, #3
 800fd34:	4602      	mov	r2, r0
 800fd36:	460b      	mov	r3, r1
 800fd38:	1911      	adds	r1, r2, r4
 800fd3a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800fd3e:	416b      	adcs	r3, r5
 800fd40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fd44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	461a      	mov	r2, r3
 800fd4c:	f04f 0300 	mov.w	r3, #0
 800fd50:	1891      	adds	r1, r2, r2
 800fd52:	6439      	str	r1, [r7, #64]	; 0x40
 800fd54:	415b      	adcs	r3, r3
 800fd56:	647b      	str	r3, [r7, #68]	; 0x44
 800fd58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800fd5c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800fd60:	f7f0 ffaa 	bl	8000cb8 <__aeabi_uldivmod>
 800fd64:	4602      	mov	r2, r0
 800fd66:	460b      	mov	r3, r1
 800fd68:	4b2e      	ldr	r3, [pc, #184]	; (800fe24 <UART_SetConfig+0x3dc>)
 800fd6a:	fba3 1302 	umull	r1, r3, r3, r2
 800fd6e:	095b      	lsrs	r3, r3, #5
 800fd70:	2164      	movs	r1, #100	; 0x64
 800fd72:	fb01 f303 	mul.w	r3, r1, r3
 800fd76:	1ad3      	subs	r3, r2, r3
 800fd78:	00db      	lsls	r3, r3, #3
 800fd7a:	3332      	adds	r3, #50	; 0x32
 800fd7c:	4a29      	ldr	r2, [pc, #164]	; (800fe24 <UART_SetConfig+0x3dc>)
 800fd7e:	fba2 2303 	umull	r2, r3, r2, r3
 800fd82:	095b      	lsrs	r3, r3, #5
 800fd84:	005b      	lsls	r3, r3, #1
 800fd86:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fd8a:	441e      	add	r6, r3
 800fd8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fd90:	4618      	mov	r0, r3
 800fd92:	f04f 0100 	mov.w	r1, #0
 800fd96:	4602      	mov	r2, r0
 800fd98:	460b      	mov	r3, r1
 800fd9a:	1894      	adds	r4, r2, r2
 800fd9c:	63bc      	str	r4, [r7, #56]	; 0x38
 800fd9e:	415b      	adcs	r3, r3
 800fda0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fda2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800fda6:	1812      	adds	r2, r2, r0
 800fda8:	eb41 0303 	adc.w	r3, r1, r3
 800fdac:	f04f 0400 	mov.w	r4, #0
 800fdb0:	f04f 0500 	mov.w	r5, #0
 800fdb4:	00dd      	lsls	r5, r3, #3
 800fdb6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fdba:	00d4      	lsls	r4, r2, #3
 800fdbc:	4622      	mov	r2, r4
 800fdbe:	462b      	mov	r3, r5
 800fdc0:	1814      	adds	r4, r2, r0
 800fdc2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800fdc6:	414b      	adcs	r3, r1
 800fdc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fdcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fdd0:	685b      	ldr	r3, [r3, #4]
 800fdd2:	461a      	mov	r2, r3
 800fdd4:	f04f 0300 	mov.w	r3, #0
 800fdd8:	1891      	adds	r1, r2, r2
 800fdda:	6339      	str	r1, [r7, #48]	; 0x30
 800fddc:	415b      	adcs	r3, r3
 800fdde:	637b      	str	r3, [r7, #52]	; 0x34
 800fde0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800fde4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800fde8:	f7f0 ff66 	bl	8000cb8 <__aeabi_uldivmod>
 800fdec:	4602      	mov	r2, r0
 800fdee:	460b      	mov	r3, r1
 800fdf0:	4b0c      	ldr	r3, [pc, #48]	; (800fe24 <UART_SetConfig+0x3dc>)
 800fdf2:	fba3 1302 	umull	r1, r3, r3, r2
 800fdf6:	095b      	lsrs	r3, r3, #5
 800fdf8:	2164      	movs	r1, #100	; 0x64
 800fdfa:	fb01 f303 	mul.w	r3, r1, r3
 800fdfe:	1ad3      	subs	r3, r2, r3
 800fe00:	00db      	lsls	r3, r3, #3
 800fe02:	3332      	adds	r3, #50	; 0x32
 800fe04:	4a07      	ldr	r2, [pc, #28]	; (800fe24 <UART_SetConfig+0x3dc>)
 800fe06:	fba2 2303 	umull	r2, r3, r2, r3
 800fe0a:	095b      	lsrs	r3, r3, #5
 800fe0c:	f003 0207 	and.w	r2, r3, #7
 800fe10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	4432      	add	r2, r6
 800fe18:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800fe1a:	e1a6      	b.n	801016a <UART_SetConfig+0x722>
 800fe1c:	40011000 	.word	0x40011000
 800fe20:	40011400 	.word	0x40011400
 800fe24:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fe28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe2c:	681a      	ldr	r2, [r3, #0]
 800fe2e:	4bd1      	ldr	r3, [pc, #836]	; (8010174 <UART_SetConfig+0x72c>)
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d006      	beq.n	800fe42 <UART_SetConfig+0x3fa>
 800fe34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe38:	681a      	ldr	r2, [r3, #0]
 800fe3a:	4bcf      	ldr	r3, [pc, #828]	; (8010178 <UART_SetConfig+0x730>)
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	f040 80ca 	bne.w	800ffd6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800fe42:	f7fc fa15 	bl	800c270 <HAL_RCC_GetPCLK2Freq>
 800fe46:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fe4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fe4e:	461c      	mov	r4, r3
 800fe50:	f04f 0500 	mov.w	r5, #0
 800fe54:	4622      	mov	r2, r4
 800fe56:	462b      	mov	r3, r5
 800fe58:	1891      	adds	r1, r2, r2
 800fe5a:	62b9      	str	r1, [r7, #40]	; 0x28
 800fe5c:	415b      	adcs	r3, r3
 800fe5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fe64:	1912      	adds	r2, r2, r4
 800fe66:	eb45 0303 	adc.w	r3, r5, r3
 800fe6a:	f04f 0000 	mov.w	r0, #0
 800fe6e:	f04f 0100 	mov.w	r1, #0
 800fe72:	00d9      	lsls	r1, r3, #3
 800fe74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fe78:	00d0      	lsls	r0, r2, #3
 800fe7a:	4602      	mov	r2, r0
 800fe7c:	460b      	mov	r3, r1
 800fe7e:	eb12 0a04 	adds.w	sl, r2, r4
 800fe82:	eb43 0b05 	adc.w	fp, r3, r5
 800fe86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe8a:	685b      	ldr	r3, [r3, #4]
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f04f 0100 	mov.w	r1, #0
 800fe92:	f04f 0200 	mov.w	r2, #0
 800fe96:	f04f 0300 	mov.w	r3, #0
 800fe9a:	008b      	lsls	r3, r1, #2
 800fe9c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800fea0:	0082      	lsls	r2, r0, #2
 800fea2:	4650      	mov	r0, sl
 800fea4:	4659      	mov	r1, fp
 800fea6:	f7f0 ff07 	bl	8000cb8 <__aeabi_uldivmod>
 800feaa:	4602      	mov	r2, r0
 800feac:	460b      	mov	r3, r1
 800feae:	4bb3      	ldr	r3, [pc, #716]	; (801017c <UART_SetConfig+0x734>)
 800feb0:	fba3 2302 	umull	r2, r3, r3, r2
 800feb4:	095b      	lsrs	r3, r3, #5
 800feb6:	011e      	lsls	r6, r3, #4
 800feb8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800febc:	4618      	mov	r0, r3
 800febe:	f04f 0100 	mov.w	r1, #0
 800fec2:	4602      	mov	r2, r0
 800fec4:	460b      	mov	r3, r1
 800fec6:	1894      	adds	r4, r2, r2
 800fec8:	623c      	str	r4, [r7, #32]
 800feca:	415b      	adcs	r3, r3
 800fecc:	627b      	str	r3, [r7, #36]	; 0x24
 800fece:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fed2:	1812      	adds	r2, r2, r0
 800fed4:	eb41 0303 	adc.w	r3, r1, r3
 800fed8:	f04f 0400 	mov.w	r4, #0
 800fedc:	f04f 0500 	mov.w	r5, #0
 800fee0:	00dd      	lsls	r5, r3, #3
 800fee2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fee6:	00d4      	lsls	r4, r2, #3
 800fee8:	4622      	mov	r2, r4
 800feea:	462b      	mov	r3, r5
 800feec:	1814      	adds	r4, r2, r0
 800feee:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800fef2:	414b      	adcs	r3, r1
 800fef4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fefc:	685b      	ldr	r3, [r3, #4]
 800fefe:	4618      	mov	r0, r3
 800ff00:	f04f 0100 	mov.w	r1, #0
 800ff04:	f04f 0200 	mov.w	r2, #0
 800ff08:	f04f 0300 	mov.w	r3, #0
 800ff0c:	008b      	lsls	r3, r1, #2
 800ff0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ff12:	0082      	lsls	r2, r0, #2
 800ff14:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800ff18:	f7f0 fece 	bl	8000cb8 <__aeabi_uldivmod>
 800ff1c:	4602      	mov	r2, r0
 800ff1e:	460b      	mov	r3, r1
 800ff20:	4b96      	ldr	r3, [pc, #600]	; (801017c <UART_SetConfig+0x734>)
 800ff22:	fba3 1302 	umull	r1, r3, r3, r2
 800ff26:	095b      	lsrs	r3, r3, #5
 800ff28:	2164      	movs	r1, #100	; 0x64
 800ff2a:	fb01 f303 	mul.w	r3, r1, r3
 800ff2e:	1ad3      	subs	r3, r2, r3
 800ff30:	011b      	lsls	r3, r3, #4
 800ff32:	3332      	adds	r3, #50	; 0x32
 800ff34:	4a91      	ldr	r2, [pc, #580]	; (801017c <UART_SetConfig+0x734>)
 800ff36:	fba2 2303 	umull	r2, r3, r2, r3
 800ff3a:	095b      	lsrs	r3, r3, #5
 800ff3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ff40:	441e      	add	r6, r3
 800ff42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ff46:	4618      	mov	r0, r3
 800ff48:	f04f 0100 	mov.w	r1, #0
 800ff4c:	4602      	mov	r2, r0
 800ff4e:	460b      	mov	r3, r1
 800ff50:	1894      	adds	r4, r2, r2
 800ff52:	61bc      	str	r4, [r7, #24]
 800ff54:	415b      	adcs	r3, r3
 800ff56:	61fb      	str	r3, [r7, #28]
 800ff58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ff5c:	1812      	adds	r2, r2, r0
 800ff5e:	eb41 0303 	adc.w	r3, r1, r3
 800ff62:	f04f 0400 	mov.w	r4, #0
 800ff66:	f04f 0500 	mov.w	r5, #0
 800ff6a:	00dd      	lsls	r5, r3, #3
 800ff6c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ff70:	00d4      	lsls	r4, r2, #3
 800ff72:	4622      	mov	r2, r4
 800ff74:	462b      	mov	r3, r5
 800ff76:	1814      	adds	r4, r2, r0
 800ff78:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800ff7c:	414b      	adcs	r3, r1
 800ff7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ff82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff86:	685b      	ldr	r3, [r3, #4]
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f04f 0100 	mov.w	r1, #0
 800ff8e:	f04f 0200 	mov.w	r2, #0
 800ff92:	f04f 0300 	mov.w	r3, #0
 800ff96:	008b      	lsls	r3, r1, #2
 800ff98:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ff9c:	0082      	lsls	r2, r0, #2
 800ff9e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800ffa2:	f7f0 fe89 	bl	8000cb8 <__aeabi_uldivmod>
 800ffa6:	4602      	mov	r2, r0
 800ffa8:	460b      	mov	r3, r1
 800ffaa:	4b74      	ldr	r3, [pc, #464]	; (801017c <UART_SetConfig+0x734>)
 800ffac:	fba3 1302 	umull	r1, r3, r3, r2
 800ffb0:	095b      	lsrs	r3, r3, #5
 800ffb2:	2164      	movs	r1, #100	; 0x64
 800ffb4:	fb01 f303 	mul.w	r3, r1, r3
 800ffb8:	1ad3      	subs	r3, r2, r3
 800ffba:	011b      	lsls	r3, r3, #4
 800ffbc:	3332      	adds	r3, #50	; 0x32
 800ffbe:	4a6f      	ldr	r2, [pc, #444]	; (801017c <UART_SetConfig+0x734>)
 800ffc0:	fba2 2303 	umull	r2, r3, r2, r3
 800ffc4:	095b      	lsrs	r3, r3, #5
 800ffc6:	f003 020f 	and.w	r2, r3, #15
 800ffca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	4432      	add	r2, r6
 800ffd2:	609a      	str	r2, [r3, #8]
 800ffd4:	e0c9      	b.n	801016a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ffd6:	f7fc f937 	bl	800c248 <HAL_RCC_GetPCLK1Freq>
 800ffda:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ffde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ffe2:	461c      	mov	r4, r3
 800ffe4:	f04f 0500 	mov.w	r5, #0
 800ffe8:	4622      	mov	r2, r4
 800ffea:	462b      	mov	r3, r5
 800ffec:	1891      	adds	r1, r2, r2
 800ffee:	6139      	str	r1, [r7, #16]
 800fff0:	415b      	adcs	r3, r3
 800fff2:	617b      	str	r3, [r7, #20]
 800fff4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fff8:	1912      	adds	r2, r2, r4
 800fffa:	eb45 0303 	adc.w	r3, r5, r3
 800fffe:	f04f 0000 	mov.w	r0, #0
 8010002:	f04f 0100 	mov.w	r1, #0
 8010006:	00d9      	lsls	r1, r3, #3
 8010008:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801000c:	00d0      	lsls	r0, r2, #3
 801000e:	4602      	mov	r2, r0
 8010010:	460b      	mov	r3, r1
 8010012:	eb12 0804 	adds.w	r8, r2, r4
 8010016:	eb43 0905 	adc.w	r9, r3, r5
 801001a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801001e:	685b      	ldr	r3, [r3, #4]
 8010020:	4618      	mov	r0, r3
 8010022:	f04f 0100 	mov.w	r1, #0
 8010026:	f04f 0200 	mov.w	r2, #0
 801002a:	f04f 0300 	mov.w	r3, #0
 801002e:	008b      	lsls	r3, r1, #2
 8010030:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010034:	0082      	lsls	r2, r0, #2
 8010036:	4640      	mov	r0, r8
 8010038:	4649      	mov	r1, r9
 801003a:	f7f0 fe3d 	bl	8000cb8 <__aeabi_uldivmod>
 801003e:	4602      	mov	r2, r0
 8010040:	460b      	mov	r3, r1
 8010042:	4b4e      	ldr	r3, [pc, #312]	; (801017c <UART_SetConfig+0x734>)
 8010044:	fba3 2302 	umull	r2, r3, r3, r2
 8010048:	095b      	lsrs	r3, r3, #5
 801004a:	011e      	lsls	r6, r3, #4
 801004c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010050:	4618      	mov	r0, r3
 8010052:	f04f 0100 	mov.w	r1, #0
 8010056:	4602      	mov	r2, r0
 8010058:	460b      	mov	r3, r1
 801005a:	1894      	adds	r4, r2, r2
 801005c:	60bc      	str	r4, [r7, #8]
 801005e:	415b      	adcs	r3, r3
 8010060:	60fb      	str	r3, [r7, #12]
 8010062:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010066:	1812      	adds	r2, r2, r0
 8010068:	eb41 0303 	adc.w	r3, r1, r3
 801006c:	f04f 0400 	mov.w	r4, #0
 8010070:	f04f 0500 	mov.w	r5, #0
 8010074:	00dd      	lsls	r5, r3, #3
 8010076:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801007a:	00d4      	lsls	r4, r2, #3
 801007c:	4622      	mov	r2, r4
 801007e:	462b      	mov	r3, r5
 8010080:	1814      	adds	r4, r2, r0
 8010082:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8010086:	414b      	adcs	r3, r1
 8010088:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801008c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010090:	685b      	ldr	r3, [r3, #4]
 8010092:	4618      	mov	r0, r3
 8010094:	f04f 0100 	mov.w	r1, #0
 8010098:	f04f 0200 	mov.w	r2, #0
 801009c:	f04f 0300 	mov.w	r3, #0
 80100a0:	008b      	lsls	r3, r1, #2
 80100a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80100a6:	0082      	lsls	r2, r0, #2
 80100a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80100ac:	f7f0 fe04 	bl	8000cb8 <__aeabi_uldivmod>
 80100b0:	4602      	mov	r2, r0
 80100b2:	460b      	mov	r3, r1
 80100b4:	4b31      	ldr	r3, [pc, #196]	; (801017c <UART_SetConfig+0x734>)
 80100b6:	fba3 1302 	umull	r1, r3, r3, r2
 80100ba:	095b      	lsrs	r3, r3, #5
 80100bc:	2164      	movs	r1, #100	; 0x64
 80100be:	fb01 f303 	mul.w	r3, r1, r3
 80100c2:	1ad3      	subs	r3, r2, r3
 80100c4:	011b      	lsls	r3, r3, #4
 80100c6:	3332      	adds	r3, #50	; 0x32
 80100c8:	4a2c      	ldr	r2, [pc, #176]	; (801017c <UART_SetConfig+0x734>)
 80100ca:	fba2 2303 	umull	r2, r3, r2, r3
 80100ce:	095b      	lsrs	r3, r3, #5
 80100d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80100d4:	441e      	add	r6, r3
 80100d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80100da:	4618      	mov	r0, r3
 80100dc:	f04f 0100 	mov.w	r1, #0
 80100e0:	4602      	mov	r2, r0
 80100e2:	460b      	mov	r3, r1
 80100e4:	1894      	adds	r4, r2, r2
 80100e6:	603c      	str	r4, [r7, #0]
 80100e8:	415b      	adcs	r3, r3
 80100ea:	607b      	str	r3, [r7, #4]
 80100ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100f0:	1812      	adds	r2, r2, r0
 80100f2:	eb41 0303 	adc.w	r3, r1, r3
 80100f6:	f04f 0400 	mov.w	r4, #0
 80100fa:	f04f 0500 	mov.w	r5, #0
 80100fe:	00dd      	lsls	r5, r3, #3
 8010100:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010104:	00d4      	lsls	r4, r2, #3
 8010106:	4622      	mov	r2, r4
 8010108:	462b      	mov	r3, r5
 801010a:	1814      	adds	r4, r2, r0
 801010c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8010110:	414b      	adcs	r3, r1
 8010112:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801011a:	685b      	ldr	r3, [r3, #4]
 801011c:	4618      	mov	r0, r3
 801011e:	f04f 0100 	mov.w	r1, #0
 8010122:	f04f 0200 	mov.w	r2, #0
 8010126:	f04f 0300 	mov.w	r3, #0
 801012a:	008b      	lsls	r3, r1, #2
 801012c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8010130:	0082      	lsls	r2, r0, #2
 8010132:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8010136:	f7f0 fdbf 	bl	8000cb8 <__aeabi_uldivmod>
 801013a:	4602      	mov	r2, r0
 801013c:	460b      	mov	r3, r1
 801013e:	4b0f      	ldr	r3, [pc, #60]	; (801017c <UART_SetConfig+0x734>)
 8010140:	fba3 1302 	umull	r1, r3, r3, r2
 8010144:	095b      	lsrs	r3, r3, #5
 8010146:	2164      	movs	r1, #100	; 0x64
 8010148:	fb01 f303 	mul.w	r3, r1, r3
 801014c:	1ad3      	subs	r3, r2, r3
 801014e:	011b      	lsls	r3, r3, #4
 8010150:	3332      	adds	r3, #50	; 0x32
 8010152:	4a0a      	ldr	r2, [pc, #40]	; (801017c <UART_SetConfig+0x734>)
 8010154:	fba2 2303 	umull	r2, r3, r2, r3
 8010158:	095b      	lsrs	r3, r3, #5
 801015a:	f003 020f 	and.w	r2, r3, #15
 801015e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	4432      	add	r2, r6
 8010166:	609a      	str	r2, [r3, #8]
}
 8010168:	e7ff      	b.n	801016a <UART_SetConfig+0x722>
 801016a:	bf00      	nop
 801016c:	37f4      	adds	r7, #244	; 0xf4
 801016e:	46bd      	mov	sp, r7
 8010170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010174:	40011000 	.word	0x40011000
 8010178:	40011400 	.word	0x40011400
 801017c:	51eb851f 	.word	0x51eb851f

08010180 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8010180:	b084      	sub	sp, #16
 8010182:	b480      	push	{r7}
 8010184:	b085      	sub	sp, #20
 8010186:	af00      	add	r7, sp, #0
 8010188:	6078      	str	r0, [r7, #4]
 801018a:	f107 001c 	add.w	r0, r7, #28
 801018e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010192:	2300      	movs	r3, #0
 8010194:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010196:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010198:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801019a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 801019c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 801019e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80101a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80101a2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80101a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80101a6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80101a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80101aa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80101ac:	68fa      	ldr	r2, [r7, #12]
 80101ae:	4313      	orrs	r3, r2
 80101b0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	685b      	ldr	r3, [r3, #4]
 80101b6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80101ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80101be:	68fa      	ldr	r2, [r7, #12]
 80101c0:	431a      	orrs	r2, r3
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80101c6:	2300      	movs	r3, #0
}
 80101c8:	4618      	mov	r0, r3
 80101ca:	3714      	adds	r7, #20
 80101cc:	46bd      	mov	sp, r7
 80101ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d2:	b004      	add	sp, #16
 80101d4:	4770      	bx	lr

080101d6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80101d6:	b480      	push	{r7}
 80101d8:	b083      	sub	sp, #12
 80101da:	af00      	add	r7, sp, #0
 80101dc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	370c      	adds	r7, #12
 80101e8:	46bd      	mov	sp, r7
 80101ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ee:	4770      	bx	lr

080101f0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80101f0:	b480      	push	{r7}
 80101f2:	b083      	sub	sp, #12
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
 80101f8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	681a      	ldr	r2, [r3, #0]
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010204:	2300      	movs	r3, #0
}
 8010206:	4618      	mov	r0, r3
 8010208:	370c      	adds	r7, #12
 801020a:	46bd      	mov	sp, r7
 801020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010210:	4770      	bx	lr

08010212 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8010212:	b580      	push	{r7, lr}
 8010214:	b082      	sub	sp, #8
 8010216:	af00      	add	r7, sp, #0
 8010218:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2203      	movs	r2, #3
 801021e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010220:	2002      	movs	r0, #2
 8010222:	f7f9 fba3 	bl	800996c <HAL_Delay>
  
  return HAL_OK;
 8010226:	2300      	movs	r3, #0
}
 8010228:	4618      	mov	r0, r3
 801022a:	3708      	adds	r7, #8
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}

08010230 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010230:	b480      	push	{r7}
 8010232:	b083      	sub	sp, #12
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	f003 0303 	and.w	r3, r3, #3
}
 8010240:	4618      	mov	r0, r3
 8010242:	370c      	adds	r7, #12
 8010244:	46bd      	mov	sp, r7
 8010246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024a:	4770      	bx	lr

0801024c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 801024c:	b480      	push	{r7}
 801024e:	b085      	sub	sp, #20
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
 8010254:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010256:	2300      	movs	r3, #0
 8010258:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	681a      	ldr	r2, [r3, #0]
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801026a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010270:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010276:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010278:	68fa      	ldr	r2, [r7, #12]
 801027a:	4313      	orrs	r3, r2
 801027c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	68db      	ldr	r3, [r3, #12]
 8010282:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010286:	f023 030f 	bic.w	r3, r3, #15
 801028a:	68fa      	ldr	r2, [r7, #12]
 801028c:	431a      	orrs	r2, r3
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010292:	2300      	movs	r3, #0
}
 8010294:	4618      	mov	r0, r3
 8010296:	3714      	adds	r7, #20
 8010298:	46bd      	mov	sp, r7
 801029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029e:	4770      	bx	lr

080102a0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80102a0:	b480      	push	{r7}
 80102a2:	b083      	sub	sp, #12
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	691b      	ldr	r3, [r3, #16]
 80102ac:	b2db      	uxtb	r3, r3
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	370c      	adds	r7, #12
 80102b2:	46bd      	mov	sp, r7
 80102b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b8:	4770      	bx	lr

080102ba <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80102ba:	b480      	push	{r7}
 80102bc:	b085      	sub	sp, #20
 80102be:	af00      	add	r7, sp, #0
 80102c0:	6078      	str	r0, [r7, #4]
 80102c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	3314      	adds	r3, #20
 80102c8:	461a      	mov	r2, r3
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	4413      	add	r3, r2
 80102ce:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	681b      	ldr	r3, [r3, #0]
}  
 80102d4:	4618      	mov	r0, r3
 80102d6:	3714      	adds	r7, #20
 80102d8:	46bd      	mov	sp, r7
 80102da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102de:	4770      	bx	lr

080102e0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80102e0:	b480      	push	{r7}
 80102e2:	b085      	sub	sp, #20
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
 80102e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80102ea:	2300      	movs	r3, #0
 80102ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	681a      	ldr	r2, [r3, #0]
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	685a      	ldr	r2, [r3, #4]
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010306:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801030c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010312:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010314:	68fa      	ldr	r2, [r7, #12]
 8010316:	4313      	orrs	r3, r2
 8010318:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801031e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	431a      	orrs	r2, r3
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801032a:	2300      	movs	r3, #0

}
 801032c:	4618      	mov	r0, r3
 801032e:	3714      	adds	r7, #20
 8010330:	46bd      	mov	sp, r7
 8010332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010336:	4770      	bx	lr

08010338 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b088      	sub	sp, #32
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010346:	2310      	movs	r3, #16
 8010348:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801034a:	2340      	movs	r3, #64	; 0x40
 801034c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801034e:	2300      	movs	r3, #0
 8010350:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010356:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010358:	f107 0308 	add.w	r3, r7, #8
 801035c:	4619      	mov	r1, r3
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f7ff ff74 	bl	801024c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8010364:	f241 3288 	movw	r2, #5000	; 0x1388
 8010368:	2110      	movs	r1, #16
 801036a:	6878      	ldr	r0, [r7, #4]
 801036c:	f000 fa40 	bl	80107f0 <SDMMC_GetCmdResp1>
 8010370:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010372:	69fb      	ldr	r3, [r7, #28]
}
 8010374:	4618      	mov	r0, r3
 8010376:	3720      	adds	r7, #32
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}

0801037c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b088      	sub	sp, #32
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
 8010384:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010386:	683b      	ldr	r3, [r7, #0]
 8010388:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801038a:	2311      	movs	r3, #17
 801038c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801038e:	2340      	movs	r3, #64	; 0x40
 8010390:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010392:	2300      	movs	r3, #0
 8010394:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801039a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801039c:	f107 0308 	add.w	r3, r7, #8
 80103a0:	4619      	mov	r1, r3
 80103a2:	6878      	ldr	r0, [r7, #4]
 80103a4:	f7ff ff52 	bl	801024c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80103a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80103ac:	2111      	movs	r1, #17
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f000 fa1e 	bl	80107f0 <SDMMC_GetCmdResp1>
 80103b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103b6:	69fb      	ldr	r3, [r7, #28]
}
 80103b8:	4618      	mov	r0, r3
 80103ba:	3720      	adds	r7, #32
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b088      	sub	sp, #32
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
 80103c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80103ce:	2312      	movs	r3, #18
 80103d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80103d2:	2340      	movs	r3, #64	; 0x40
 80103d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80103d6:	2300      	movs	r3, #0
 80103d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80103da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80103e0:	f107 0308 	add.w	r3, r7, #8
 80103e4:	4619      	mov	r1, r3
 80103e6:	6878      	ldr	r0, [r7, #4]
 80103e8:	f7ff ff30 	bl	801024c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80103ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80103f0:	2112      	movs	r1, #18
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f000 f9fc 	bl	80107f0 <SDMMC_GetCmdResp1>
 80103f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103fa:	69fb      	ldr	r3, [r7, #28]
}
 80103fc:	4618      	mov	r0, r3
 80103fe:	3720      	adds	r7, #32
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b088      	sub	sp, #32
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010412:	2318      	movs	r3, #24
 8010414:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010416:	2340      	movs	r3, #64	; 0x40
 8010418:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801041a:	2300      	movs	r3, #0
 801041c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801041e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010422:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010424:	f107 0308 	add.w	r3, r7, #8
 8010428:	4619      	mov	r1, r3
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f7ff ff0e 	bl	801024c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010430:	f241 3288 	movw	r2, #5000	; 0x1388
 8010434:	2118      	movs	r1, #24
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f000 f9da 	bl	80107f0 <SDMMC_GetCmdResp1>
 801043c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801043e:	69fb      	ldr	r3, [r7, #28]
}
 8010440:	4618      	mov	r0, r3
 8010442:	3720      	adds	r7, #32
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}

08010448 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b088      	sub	sp, #32
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010456:	2319      	movs	r3, #25
 8010458:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801045a:	2340      	movs	r3, #64	; 0x40
 801045c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801045e:	2300      	movs	r3, #0
 8010460:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010466:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010468:	f107 0308 	add.w	r3, r7, #8
 801046c:	4619      	mov	r1, r3
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f7ff feec 	bl	801024c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010474:	f241 3288 	movw	r2, #5000	; 0x1388
 8010478:	2119      	movs	r1, #25
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f000 f9b8 	bl	80107f0 <SDMMC_GetCmdResp1>
 8010480:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010482:	69fb      	ldr	r3, [r7, #28]
}
 8010484:	4618      	mov	r0, r3
 8010486:	3720      	adds	r7, #32
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}

0801048c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b088      	sub	sp, #32
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010494:	2300      	movs	r3, #0
 8010496:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010498:	230c      	movs	r3, #12
 801049a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801049c:	2340      	movs	r3, #64	; 0x40
 801049e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80104a0:	2300      	movs	r3, #0
 80104a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80104a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80104aa:	f107 0308 	add.w	r3, r7, #8
 80104ae:	4619      	mov	r1, r3
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f7ff fecb 	bl	801024c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80104b6:	4a05      	ldr	r2, [pc, #20]	; (80104cc <SDMMC_CmdStopTransfer+0x40>)
 80104b8:	210c      	movs	r1, #12
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	f000 f998 	bl	80107f0 <SDMMC_GetCmdResp1>
 80104c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104c2:	69fb      	ldr	r3, [r7, #28]
}
 80104c4:	4618      	mov	r0, r3
 80104c6:	3720      	adds	r7, #32
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}
 80104cc:	05f5e100 	.word	0x05f5e100

080104d0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b08a      	sub	sp, #40	; 0x28
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	60f8      	str	r0, [r7, #12]
 80104d8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80104e0:	2307      	movs	r3, #7
 80104e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80104e4:	2340      	movs	r3, #64	; 0x40
 80104e6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80104e8:	2300      	movs	r3, #0
 80104ea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80104ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104f0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80104f2:	f107 0310 	add.w	r3, r7, #16
 80104f6:	4619      	mov	r1, r3
 80104f8:	68f8      	ldr	r0, [r7, #12]
 80104fa:	f7ff fea7 	bl	801024c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80104fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8010502:	2107      	movs	r1, #7
 8010504:	68f8      	ldr	r0, [r7, #12]
 8010506:	f000 f973 	bl	80107f0 <SDMMC_GetCmdResp1>
 801050a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 801050c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801050e:	4618      	mov	r0, r3
 8010510:	3728      	adds	r7, #40	; 0x28
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}

08010516 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8010516:	b580      	push	{r7, lr}
 8010518:	b088      	sub	sp, #32
 801051a:	af00      	add	r7, sp, #0
 801051c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 801051e:	2300      	movs	r3, #0
 8010520:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010522:	2300      	movs	r3, #0
 8010524:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8010526:	2300      	movs	r3, #0
 8010528:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801052a:	2300      	movs	r3, #0
 801052c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801052e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010532:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010534:	f107 0308 	add.w	r3, r7, #8
 8010538:	4619      	mov	r1, r3
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	f7ff fe86 	bl	801024c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f000 f92d 	bl	80107a0 <SDMMC_GetCmdError>
 8010546:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010548:	69fb      	ldr	r3, [r7, #28]
}
 801054a:	4618      	mov	r0, r3
 801054c:	3720      	adds	r7, #32
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}

08010552 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8010552:	b580      	push	{r7, lr}
 8010554:	b088      	sub	sp, #32
 8010556:	af00      	add	r7, sp, #0
 8010558:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801055a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801055e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010560:	2308      	movs	r3, #8
 8010562:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010564:	2340      	movs	r3, #64	; 0x40
 8010566:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010568:	2300      	movs	r3, #0
 801056a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801056c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010570:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010572:	f107 0308 	add.w	r3, r7, #8
 8010576:	4619      	mov	r1, r3
 8010578:	6878      	ldr	r0, [r7, #4]
 801057a:	f7ff fe67 	bl	801024c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f000 fb16 	bl	8010bb0 <SDMMC_GetCmdResp7>
 8010584:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010586:	69fb      	ldr	r3, [r7, #28]
}
 8010588:	4618      	mov	r0, r3
 801058a:	3720      	adds	r7, #32
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}

08010590 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b088      	sub	sp, #32
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801059e:	2337      	movs	r3, #55	; 0x37
 80105a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80105a2:	2340      	movs	r3, #64	; 0x40
 80105a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80105a6:	2300      	movs	r3, #0
 80105a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80105aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80105b0:	f107 0308 	add.w	r3, r7, #8
 80105b4:	4619      	mov	r1, r3
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f7ff fe48 	bl	801024c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80105bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80105c0:	2137      	movs	r1, #55	; 0x37
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f000 f914 	bl	80107f0 <SDMMC_GetCmdResp1>
 80105c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105ca:	69fb      	ldr	r3, [r7, #28]
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	3720      	adds	r7, #32
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}

080105d4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b088      	sub	sp, #32
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80105e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80105e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80105ea:	2329      	movs	r3, #41	; 0x29
 80105ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80105ee:	2340      	movs	r3, #64	; 0x40
 80105f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80105f2:	2300      	movs	r3, #0
 80105f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80105f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80105fc:	f107 0308 	add.w	r3, r7, #8
 8010600:	4619      	mov	r1, r3
 8010602:	6878      	ldr	r0, [r7, #4]
 8010604:	f7ff fe22 	bl	801024c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010608:	6878      	ldr	r0, [r7, #4]
 801060a:	f000 fa23 	bl	8010a54 <SDMMC_GetCmdResp3>
 801060e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010610:	69fb      	ldr	r3, [r7, #28]
}
 8010612:	4618      	mov	r0, r3
 8010614:	3720      	adds	r7, #32
 8010616:	46bd      	mov	sp, r7
 8010618:	bd80      	pop	{r7, pc}

0801061a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 801061a:	b580      	push	{r7, lr}
 801061c:	b088      	sub	sp, #32
 801061e:	af00      	add	r7, sp, #0
 8010620:	6078      	str	r0, [r7, #4]
 8010622:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010628:	2306      	movs	r3, #6
 801062a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801062c:	2340      	movs	r3, #64	; 0x40
 801062e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010630:	2300      	movs	r3, #0
 8010632:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010638:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801063a:	f107 0308 	add.w	r3, r7, #8
 801063e:	4619      	mov	r1, r3
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f7ff fe03 	bl	801024c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8010646:	f241 3288 	movw	r2, #5000	; 0x1388
 801064a:	2106      	movs	r1, #6
 801064c:	6878      	ldr	r0, [r7, #4]
 801064e:	f000 f8cf 	bl	80107f0 <SDMMC_GetCmdResp1>
 8010652:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010654:	69fb      	ldr	r3, [r7, #28]
}
 8010656:	4618      	mov	r0, r3
 8010658:	3720      	adds	r7, #32
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}

0801065e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 801065e:	b580      	push	{r7, lr}
 8010660:	b088      	sub	sp, #32
 8010662:	af00      	add	r7, sp, #0
 8010664:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010666:	2300      	movs	r3, #0
 8010668:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801066a:	2333      	movs	r3, #51	; 0x33
 801066c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801066e:	2340      	movs	r3, #64	; 0x40
 8010670:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010672:	2300      	movs	r3, #0
 8010674:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801067a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801067c:	f107 0308 	add.w	r3, r7, #8
 8010680:	4619      	mov	r1, r3
 8010682:	6878      	ldr	r0, [r7, #4]
 8010684:	f7ff fde2 	bl	801024c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010688:	f241 3288 	movw	r2, #5000	; 0x1388
 801068c:	2133      	movs	r1, #51	; 0x33
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f000 f8ae 	bl	80107f0 <SDMMC_GetCmdResp1>
 8010694:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010696:	69fb      	ldr	r3, [r7, #28]
}
 8010698:	4618      	mov	r0, r3
 801069a:	3720      	adds	r7, #32
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}

080106a0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b088      	sub	sp, #32
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80106a8:	2300      	movs	r3, #0
 80106aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80106ac:	2302      	movs	r3, #2
 80106ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80106b0:	23c0      	movs	r3, #192	; 0xc0
 80106b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106b4:	2300      	movs	r3, #0
 80106b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80106be:	f107 0308 	add.w	r3, r7, #8
 80106c2:	4619      	mov	r1, r3
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f7ff fdc1 	bl	801024c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f000 f97c 	bl	80109c8 <SDMMC_GetCmdResp2>
 80106d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106d2:	69fb      	ldr	r3, [r7, #28]
}
 80106d4:	4618      	mov	r0, r3
 80106d6:	3720      	adds	r7, #32
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}

080106dc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b088      	sub	sp, #32
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
 80106e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80106e6:	683b      	ldr	r3, [r7, #0]
 80106e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80106ea:	2309      	movs	r3, #9
 80106ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80106ee:	23c0      	movs	r3, #192	; 0xc0
 80106f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106f2:	2300      	movs	r3, #0
 80106f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80106fc:	f107 0308 	add.w	r3, r7, #8
 8010700:	4619      	mov	r1, r3
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f7ff fda2 	bl	801024c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010708:	6878      	ldr	r0, [r7, #4]
 801070a:	f000 f95d 	bl	80109c8 <SDMMC_GetCmdResp2>
 801070e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010710:	69fb      	ldr	r3, [r7, #28]
}
 8010712:	4618      	mov	r0, r3
 8010714:	3720      	adds	r7, #32
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}

0801071a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 801071a:	b580      	push	{r7, lr}
 801071c:	b088      	sub	sp, #32
 801071e:	af00      	add	r7, sp, #0
 8010720:	6078      	str	r0, [r7, #4]
 8010722:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010724:	2300      	movs	r3, #0
 8010726:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010728:	2303      	movs	r3, #3
 801072a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801072c:	2340      	movs	r3, #64	; 0x40
 801072e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010730:	2300      	movs	r3, #0
 8010732:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010738:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801073a:	f107 0308 	add.w	r3, r7, #8
 801073e:	4619      	mov	r1, r3
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f7ff fd83 	bl	801024c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010746:	683a      	ldr	r2, [r7, #0]
 8010748:	2103      	movs	r1, #3
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f000 f9bc 	bl	8010ac8 <SDMMC_GetCmdResp6>
 8010750:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010752:	69fb      	ldr	r3, [r7, #28]
}
 8010754:	4618      	mov	r0, r3
 8010756:	3720      	adds	r7, #32
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}

0801075c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b088      	sub	sp, #32
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801076a:	230d      	movs	r3, #13
 801076c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801076e:	2340      	movs	r3, #64	; 0x40
 8010770:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010772:	2300      	movs	r3, #0
 8010774:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801077a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801077c:	f107 0308 	add.w	r3, r7, #8
 8010780:	4619      	mov	r1, r3
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	f7ff fd62 	bl	801024c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010788:	f241 3288 	movw	r2, #5000	; 0x1388
 801078c:	210d      	movs	r1, #13
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f000 f82e 	bl	80107f0 <SDMMC_GetCmdResp1>
 8010794:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010796:	69fb      	ldr	r3, [r7, #28]
}
 8010798:	4618      	mov	r0, r3
 801079a:	3720      	adds	r7, #32
 801079c:	46bd      	mov	sp, r7
 801079e:	bd80      	pop	{r7, pc}

080107a0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80107a0:	b490      	push	{r4, r7}
 80107a2:	b082      	sub	sp, #8
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80107a8:	4b0f      	ldr	r3, [pc, #60]	; (80107e8 <SDMMC_GetCmdError+0x48>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	4a0f      	ldr	r2, [pc, #60]	; (80107ec <SDMMC_GetCmdError+0x4c>)
 80107ae:	fba2 2303 	umull	r2, r3, r2, r3
 80107b2:	0a5b      	lsrs	r3, r3, #9
 80107b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80107b8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80107bc:	4623      	mov	r3, r4
 80107be:	1e5c      	subs	r4, r3, #1
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d102      	bne.n	80107ca <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80107c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80107c8:	e009      	b.n	80107de <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d0f2      	beq.n	80107bc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	22c5      	movs	r2, #197	; 0xc5
 80107da:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80107dc:	2300      	movs	r3, #0
}
 80107de:	4618      	mov	r0, r3
 80107e0:	3708      	adds	r7, #8
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bc90      	pop	{r4, r7}
 80107e6:	4770      	bx	lr
 80107e8:	20000000 	.word	0x20000000
 80107ec:	10624dd3 	.word	0x10624dd3

080107f0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80107f0:	b590      	push	{r4, r7, lr}
 80107f2:	b087      	sub	sp, #28
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	60f8      	str	r0, [r7, #12]
 80107f8:	460b      	mov	r3, r1
 80107fa:	607a      	str	r2, [r7, #4]
 80107fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80107fe:	4b6f      	ldr	r3, [pc, #444]	; (80109bc <SDMMC_GetCmdResp1+0x1cc>)
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	4a6f      	ldr	r2, [pc, #444]	; (80109c0 <SDMMC_GetCmdResp1+0x1d0>)
 8010804:	fba2 2303 	umull	r2, r3, r2, r3
 8010808:	0a5b      	lsrs	r3, r3, #9
 801080a:	687a      	ldr	r2, [r7, #4]
 801080c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010810:	4623      	mov	r3, r4
 8010812:	1e5c      	subs	r4, r3, #1
 8010814:	2b00      	cmp	r3, #0
 8010816:	d102      	bne.n	801081e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010818:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801081c:	e0c9      	b.n	80109b2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010822:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801082a:	2b00      	cmp	r3, #0
 801082c:	d0f0      	beq.n	8010810 <SDMMC_GetCmdResp1+0x20>
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010834:	2b00      	cmp	r3, #0
 8010836:	d1eb      	bne.n	8010810 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801083c:	f003 0304 	and.w	r3, r3, #4
 8010840:	2b00      	cmp	r3, #0
 8010842:	d004      	beq.n	801084e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	2204      	movs	r2, #4
 8010848:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801084a:	2304      	movs	r3, #4
 801084c:	e0b1      	b.n	80109b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010852:	f003 0301 	and.w	r3, r3, #1
 8010856:	2b00      	cmp	r3, #0
 8010858:	d004      	beq.n	8010864 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	2201      	movs	r2, #1
 801085e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010860:	2301      	movs	r3, #1
 8010862:	e0a6      	b.n	80109b2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	22c5      	movs	r2, #197	; 0xc5
 8010868:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801086a:	68f8      	ldr	r0, [r7, #12]
 801086c:	f7ff fd18 	bl	80102a0 <SDIO_GetCommandResponse>
 8010870:	4603      	mov	r3, r0
 8010872:	461a      	mov	r2, r3
 8010874:	7afb      	ldrb	r3, [r7, #11]
 8010876:	4293      	cmp	r3, r2
 8010878:	d001      	beq.n	801087e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801087a:	2301      	movs	r3, #1
 801087c:	e099      	b.n	80109b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 801087e:	2100      	movs	r1, #0
 8010880:	68f8      	ldr	r0, [r7, #12]
 8010882:	f7ff fd1a 	bl	80102ba <SDIO_GetResponse>
 8010886:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010888:	693a      	ldr	r2, [r7, #16]
 801088a:	4b4e      	ldr	r3, [pc, #312]	; (80109c4 <SDMMC_GetCmdResp1+0x1d4>)
 801088c:	4013      	ands	r3, r2
 801088e:	2b00      	cmp	r3, #0
 8010890:	d101      	bne.n	8010896 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010892:	2300      	movs	r3, #0
 8010894:	e08d      	b.n	80109b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010896:	693b      	ldr	r3, [r7, #16]
 8010898:	2b00      	cmp	r3, #0
 801089a:	da02      	bge.n	80108a2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801089c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80108a0:	e087      	b.n	80109b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80108a2:	693b      	ldr	r3, [r7, #16]
 80108a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d001      	beq.n	80108b0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80108ac:	2340      	movs	r3, #64	; 0x40
 80108ae:	e080      	b.n	80109b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80108b0:	693b      	ldr	r3, [r7, #16]
 80108b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d001      	beq.n	80108be <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80108ba:	2380      	movs	r3, #128	; 0x80
 80108bc:	e079      	b.n	80109b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80108be:	693b      	ldr	r3, [r7, #16]
 80108c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d002      	beq.n	80108ce <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80108c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80108cc:	e071      	b.n	80109b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80108ce:	693b      	ldr	r3, [r7, #16]
 80108d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d002      	beq.n	80108de <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80108d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80108dc:	e069      	b.n	80109b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80108de:	693b      	ldr	r3, [r7, #16]
 80108e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d002      	beq.n	80108ee <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80108e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108ec:	e061      	b.n	80109b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80108ee:	693b      	ldr	r3, [r7, #16]
 80108f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d002      	beq.n	80108fe <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80108f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80108fc:	e059      	b.n	80109b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010904:	2b00      	cmp	r3, #0
 8010906:	d002      	beq.n	801090e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801090c:	e051      	b.n	80109b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801090e:	693b      	ldr	r3, [r7, #16]
 8010910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010914:	2b00      	cmp	r3, #0
 8010916:	d002      	beq.n	801091e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801091c:	e049      	b.n	80109b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801091e:	693b      	ldr	r3, [r7, #16]
 8010920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010924:	2b00      	cmp	r3, #0
 8010926:	d002      	beq.n	801092e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010928:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801092c:	e041      	b.n	80109b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010934:	2b00      	cmp	r3, #0
 8010936:	d002      	beq.n	801093e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010938:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801093c:	e039      	b.n	80109b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801093e:	693b      	ldr	r3, [r7, #16]
 8010940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010944:	2b00      	cmp	r3, #0
 8010946:	d002      	beq.n	801094e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010948:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801094c:	e031      	b.n	80109b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801094e:	693b      	ldr	r3, [r7, #16]
 8010950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010954:	2b00      	cmp	r3, #0
 8010956:	d002      	beq.n	801095e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010958:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801095c:	e029      	b.n	80109b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801095e:	693b      	ldr	r3, [r7, #16]
 8010960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010964:	2b00      	cmp	r3, #0
 8010966:	d002      	beq.n	801096e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010968:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801096c:	e021      	b.n	80109b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801096e:	693b      	ldr	r3, [r7, #16]
 8010970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010974:	2b00      	cmp	r3, #0
 8010976:	d002      	beq.n	801097e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010978:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801097c:	e019      	b.n	80109b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801097e:	693b      	ldr	r3, [r7, #16]
 8010980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010984:	2b00      	cmp	r3, #0
 8010986:	d002      	beq.n	801098e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010988:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801098c:	e011      	b.n	80109b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801098e:	693b      	ldr	r3, [r7, #16]
 8010990:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010994:	2b00      	cmp	r3, #0
 8010996:	d002      	beq.n	801099e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010998:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801099c:	e009      	b.n	80109b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801099e:	693b      	ldr	r3, [r7, #16]
 80109a0:	f003 0308 	and.w	r3, r3, #8
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d002      	beq.n	80109ae <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80109a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80109ac:	e001      	b.n	80109b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80109ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80109b2:	4618      	mov	r0, r3
 80109b4:	371c      	adds	r7, #28
 80109b6:	46bd      	mov	sp, r7
 80109b8:	bd90      	pop	{r4, r7, pc}
 80109ba:	bf00      	nop
 80109bc:	20000000 	.word	0x20000000
 80109c0:	10624dd3 	.word	0x10624dd3
 80109c4:	fdffe008 	.word	0xfdffe008

080109c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80109c8:	b490      	push	{r4, r7}
 80109ca:	b084      	sub	sp, #16
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80109d0:	4b1e      	ldr	r3, [pc, #120]	; (8010a4c <SDMMC_GetCmdResp2+0x84>)
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	4a1e      	ldr	r2, [pc, #120]	; (8010a50 <SDMMC_GetCmdResp2+0x88>)
 80109d6:	fba2 2303 	umull	r2, r3, r2, r3
 80109da:	0a5b      	lsrs	r3, r3, #9
 80109dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80109e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80109e4:	4623      	mov	r3, r4
 80109e6:	1e5c      	subs	r4, r3, #1
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d102      	bne.n	80109f2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80109ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80109f0:	e026      	b.n	8010a40 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109f6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d0f0      	beq.n	80109e4 <SDMMC_GetCmdResp2+0x1c>
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d1eb      	bne.n	80109e4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a10:	f003 0304 	and.w	r3, r3, #4
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d004      	beq.n	8010a22 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2204      	movs	r2, #4
 8010a1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a1e:	2304      	movs	r3, #4
 8010a20:	e00e      	b.n	8010a40 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a26:	f003 0301 	and.w	r3, r3, #1
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d004      	beq.n	8010a38 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2201      	movs	r2, #1
 8010a32:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a34:	2301      	movs	r3, #1
 8010a36:	e003      	b.n	8010a40 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	22c5      	movs	r2, #197	; 0xc5
 8010a3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010a3e:	2300      	movs	r3, #0
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	3710      	adds	r7, #16
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bc90      	pop	{r4, r7}
 8010a48:	4770      	bx	lr
 8010a4a:	bf00      	nop
 8010a4c:	20000000 	.word	0x20000000
 8010a50:	10624dd3 	.word	0x10624dd3

08010a54 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010a54:	b490      	push	{r4, r7}
 8010a56:	b084      	sub	sp, #16
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010a5c:	4b18      	ldr	r3, [pc, #96]	; (8010ac0 <SDMMC_GetCmdResp3+0x6c>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	4a18      	ldr	r2, [pc, #96]	; (8010ac4 <SDMMC_GetCmdResp3+0x70>)
 8010a62:	fba2 2303 	umull	r2, r3, r2, r3
 8010a66:	0a5b      	lsrs	r3, r3, #9
 8010a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a6c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010a70:	4623      	mov	r3, r4
 8010a72:	1e5c      	subs	r4, r3, #1
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d102      	bne.n	8010a7e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a7c:	e01b      	b.n	8010ab6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a82:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d0f0      	beq.n	8010a70 <SDMMC_GetCmdResp3+0x1c>
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d1eb      	bne.n	8010a70 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a9c:	f003 0304 	and.w	r3, r3, #4
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d004      	beq.n	8010aae <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	2204      	movs	r2, #4
 8010aa8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010aaa:	2304      	movs	r3, #4
 8010aac:	e003      	b.n	8010ab6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	22c5      	movs	r2, #197	; 0xc5
 8010ab2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010ab4:	2300      	movs	r3, #0
}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3710      	adds	r7, #16
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bc90      	pop	{r4, r7}
 8010abe:	4770      	bx	lr
 8010ac0:	20000000 	.word	0x20000000
 8010ac4:	10624dd3 	.word	0x10624dd3

08010ac8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010ac8:	b590      	push	{r4, r7, lr}
 8010aca:	b087      	sub	sp, #28
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	60f8      	str	r0, [r7, #12]
 8010ad0:	460b      	mov	r3, r1
 8010ad2:	607a      	str	r2, [r7, #4]
 8010ad4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010ad6:	4b34      	ldr	r3, [pc, #208]	; (8010ba8 <SDMMC_GetCmdResp6+0xe0>)
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	4a34      	ldr	r2, [pc, #208]	; (8010bac <SDMMC_GetCmdResp6+0xe4>)
 8010adc:	fba2 2303 	umull	r2, r3, r2, r3
 8010ae0:	0a5b      	lsrs	r3, r3, #9
 8010ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ae6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010aea:	4623      	mov	r3, r4
 8010aec:	1e5c      	subs	r4, r3, #1
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d102      	bne.n	8010af8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010af2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010af6:	e052      	b.n	8010b9e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010afc:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010afe:	697b      	ldr	r3, [r7, #20]
 8010b00:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d0f0      	beq.n	8010aea <SDMMC_GetCmdResp6+0x22>
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d1eb      	bne.n	8010aea <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b16:	f003 0304 	and.w	r3, r3, #4
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d004      	beq.n	8010b28 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	2204      	movs	r2, #4
 8010b22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b24:	2304      	movs	r3, #4
 8010b26:	e03a      	b.n	8010b9e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b2c:	f003 0301 	and.w	r3, r3, #1
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d004      	beq.n	8010b3e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	2201      	movs	r2, #1
 8010b38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	e02f      	b.n	8010b9e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010b3e:	68f8      	ldr	r0, [r7, #12]
 8010b40:	f7ff fbae 	bl	80102a0 <SDIO_GetCommandResponse>
 8010b44:	4603      	mov	r3, r0
 8010b46:	461a      	mov	r2, r3
 8010b48:	7afb      	ldrb	r3, [r7, #11]
 8010b4a:	4293      	cmp	r3, r2
 8010b4c:	d001      	beq.n	8010b52 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b4e:	2301      	movs	r3, #1
 8010b50:	e025      	b.n	8010b9e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	22c5      	movs	r2, #197	; 0xc5
 8010b56:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010b58:	2100      	movs	r1, #0
 8010b5a:	68f8      	ldr	r0, [r7, #12]
 8010b5c:	f7ff fbad 	bl	80102ba <SDIO_GetResponse>
 8010b60:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010b62:	693b      	ldr	r3, [r7, #16]
 8010b64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d106      	bne.n	8010b7a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010b6c:	693b      	ldr	r3, [r7, #16]
 8010b6e:	0c1b      	lsrs	r3, r3, #16
 8010b70:	b29a      	uxth	r2, r3
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010b76:	2300      	movs	r3, #0
 8010b78:	e011      	b.n	8010b9e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010b7a:	693b      	ldr	r3, [r7, #16]
 8010b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d002      	beq.n	8010b8a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010b88:	e009      	b.n	8010b9e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010b8a:	693b      	ldr	r3, [r7, #16]
 8010b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d002      	beq.n	8010b9a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b98:	e001      	b.n	8010b9e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010b9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	371c      	adds	r7, #28
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd90      	pop	{r4, r7, pc}
 8010ba6:	bf00      	nop
 8010ba8:	20000000 	.word	0x20000000
 8010bac:	10624dd3 	.word	0x10624dd3

08010bb0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010bb0:	b490      	push	{r4, r7}
 8010bb2:	b084      	sub	sp, #16
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010bb8:	4b21      	ldr	r3, [pc, #132]	; (8010c40 <SDMMC_GetCmdResp7+0x90>)
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	4a21      	ldr	r2, [pc, #132]	; (8010c44 <SDMMC_GetCmdResp7+0x94>)
 8010bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8010bc2:	0a5b      	lsrs	r3, r3, #9
 8010bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010bc8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010bcc:	4623      	mov	r3, r4
 8010bce:	1e5c      	subs	r4, r3, #1
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d102      	bne.n	8010bda <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010bd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010bd8:	e02c      	b.n	8010c34 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bde:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d0f0      	beq.n	8010bcc <SDMMC_GetCmdResp7+0x1c>
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d1eb      	bne.n	8010bcc <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bf8:	f003 0304 	and.w	r3, r3, #4
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d004      	beq.n	8010c0a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2204      	movs	r2, #4
 8010c04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c06:	2304      	movs	r3, #4
 8010c08:	e014      	b.n	8010c34 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c0e:	f003 0301 	and.w	r3, r3, #1
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d004      	beq.n	8010c20 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	2201      	movs	r2, #1
 8010c1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c1c:	2301      	movs	r3, #1
 8010c1e:	e009      	b.n	8010c34 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d002      	beq.n	8010c32 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2240      	movs	r2, #64	; 0x40
 8010c30:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010c32:	2300      	movs	r3, #0
  
}
 8010c34:	4618      	mov	r0, r3
 8010c36:	3710      	adds	r7, #16
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bc90      	pop	{r4, r7}
 8010c3c:	4770      	bx	lr
 8010c3e:	bf00      	nop
 8010c40:	20000000 	.word	0x20000000
 8010c44:	10624dd3 	.word	0x10624dd3

08010c48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010c4c:	4904      	ldr	r1, [pc, #16]	; (8010c60 <MX_FATFS_Init+0x18>)
 8010c4e:	4805      	ldr	r0, [pc, #20]	; (8010c64 <MX_FATFS_Init+0x1c>)
 8010c50:	f003 fba6 	bl	80143a0 <FATFS_LinkDriver>
 8010c54:	4603      	mov	r3, r0
 8010c56:	461a      	mov	r2, r3
 8010c58:	4b03      	ldr	r3, [pc, #12]	; (8010c68 <MX_FATFS_Init+0x20>)
 8010c5a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010c5c:	bf00      	nop
 8010c5e:	bd80      	pop	{r7, pc}
 8010c60:	2003fde8 	.word	0x2003fde8
 8010c64:	0801ad24 	.word	0x0801ad24
 8010c68:	2003fde4 	.word	0x2003fde4

08010c6c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b082      	sub	sp, #8
 8010c70:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010c72:	2300      	movs	r3, #0
 8010c74:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010c76:	f000 f896 	bl	8010da6 <BSP_SD_IsDetected>
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	2b01      	cmp	r3, #1
 8010c7e:	d001      	beq.n	8010c84 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010c80:	2301      	movs	r3, #1
 8010c82:	e012      	b.n	8010caa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010c84:	480b      	ldr	r0, [pc, #44]	; (8010cb4 <BSP_SD_Init+0x48>)
 8010c86:	f7fb ff87 	bl	800cb98 <HAL_SD_Init>
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010c8e:	79fb      	ldrb	r3, [r7, #7]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d109      	bne.n	8010ca8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010c94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010c98:	4806      	ldr	r0, [pc, #24]	; (8010cb4 <BSP_SD_Init+0x48>)
 8010c9a:	f7fc fd31 	bl	800d700 <HAL_SD_ConfigWideBusOperation>
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d001      	beq.n	8010ca8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010ca4:	2301      	movs	r3, #1
 8010ca6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010ca8:	79fb      	ldrb	r3, [r7, #7]
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3708      	adds	r7, #8
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}
 8010cb2:	bf00      	nop
 8010cb4:	2003fbe0 	.word	0x2003fbe0

08010cb8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b086      	sub	sp, #24
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	60f8      	str	r0, [r7, #12]
 8010cc0:	60b9      	str	r1, [r7, #8]
 8010cc2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	68ba      	ldr	r2, [r7, #8]
 8010ccc:	68f9      	ldr	r1, [r7, #12]
 8010cce:	4806      	ldr	r0, [pc, #24]	; (8010ce8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010cd0:	f7fb fff2 	bl	800ccb8 <HAL_SD_ReadBlocks_DMA>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d001      	beq.n	8010cde <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010cda:	2301      	movs	r3, #1
 8010cdc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3718      	adds	r7, #24
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}
 8010ce8:	2003fbe0 	.word	0x2003fbe0

08010cec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b086      	sub	sp, #24
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	60f8      	str	r0, [r7, #12]
 8010cf4:	60b9      	str	r1, [r7, #8]
 8010cf6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	68ba      	ldr	r2, [r7, #8]
 8010d00:	68f9      	ldr	r1, [r7, #12]
 8010d02:	4806      	ldr	r0, [pc, #24]	; (8010d1c <BSP_SD_WriteBlocks_DMA+0x30>)
 8010d04:	f7fc f8c0 	bl	800ce88 <HAL_SD_WriteBlocks_DMA>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d001      	beq.n	8010d12 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010d0e:	2301      	movs	r3, #1
 8010d10:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d14:	4618      	mov	r0, r3
 8010d16:	3718      	adds	r7, #24
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}
 8010d1c:	2003fbe0 	.word	0x2003fbe0

08010d20 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010d24:	4805      	ldr	r0, [pc, #20]	; (8010d3c <BSP_SD_GetCardState+0x1c>)
 8010d26:	f7fc fd67 	bl	800d7f8 <HAL_SD_GetCardState>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	2b04      	cmp	r3, #4
 8010d2e:	bf14      	ite	ne
 8010d30:	2301      	movne	r3, #1
 8010d32:	2300      	moveq	r3, #0
 8010d34:	b2db      	uxtb	r3, r3
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	bd80      	pop	{r7, pc}
 8010d3a:	bf00      	nop
 8010d3c:	2003fbe0 	.word	0x2003fbe0

08010d40 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b082      	sub	sp, #8
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010d48:	6879      	ldr	r1, [r7, #4]
 8010d4a:	4803      	ldr	r0, [pc, #12]	; (8010d58 <BSP_SD_GetCardInfo+0x18>)
 8010d4c:	f7fc fcac 	bl	800d6a8 <HAL_SD_GetCardInfo>
}
 8010d50:	bf00      	nop
 8010d52:	3708      	adds	r7, #8
 8010d54:	46bd      	mov	sp, r7
 8010d56:	bd80      	pop	{r7, pc}
 8010d58:	2003fbe0 	.word	0x2003fbe0

08010d5c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b082      	sub	sp, #8
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8010d64:	f000 f818 	bl	8010d98 <BSP_SD_AbortCallback>
}
 8010d68:	bf00      	nop
 8010d6a:	3708      	adds	r7, #8
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}

08010d70 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b082      	sub	sp, #8
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010d78:	f000 f9a8 	bl	80110cc <BSP_SD_WriteCpltCallback>
}
 8010d7c:	bf00      	nop
 8010d7e:	3708      	adds	r7, #8
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}

08010d84 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b082      	sub	sp, #8
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010d8c:	f000 f9aa 	bl	80110e4 <BSP_SD_ReadCpltCallback>
}
 8010d90:	bf00      	nop
 8010d92:	3708      	adds	r7, #8
 8010d94:	46bd      	mov	sp, r7
 8010d96:	bd80      	pop	{r7, pc}

08010d98 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010d98:	b480      	push	{r7}
 8010d9a:	af00      	add	r7, sp, #0

}
 8010d9c:	bf00      	nop
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da4:	4770      	bx	lr

08010da6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010da6:	b580      	push	{r7, lr}
 8010da8:	b082      	sub	sp, #8
 8010daa:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010dac:	2301      	movs	r3, #1
 8010dae:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010db0:	f000 f80c 	bl	8010dcc <BSP_PlatformIsDetected>
 8010db4:	4603      	mov	r3, r0
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d101      	bne.n	8010dbe <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010dbe:	79fb      	ldrb	r3, [r7, #7]
 8010dc0:	b2db      	uxtb	r3, r3
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	3708      	adds	r7, #8
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}
	...

08010dcc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b082      	sub	sp, #8
 8010dd0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010dd2:	2301      	movs	r3, #1
 8010dd4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010dd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010dda:	4806      	ldr	r0, [pc, #24]	; (8010df4 <BSP_PlatformIsDetected+0x28>)
 8010ddc:	f7fa f84a 	bl	800ae74 <HAL_GPIO_ReadPin>
 8010de0:	4603      	mov	r3, r0
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d001      	beq.n	8010dea <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010de6:	2300      	movs	r3, #0
 8010de8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010dea:	79fb      	ldrb	r3, [r7, #7]
}
 8010dec:	4618      	mov	r0, r3
 8010dee:	3708      	adds	r7, #8
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}
 8010df4:	40020000 	.word	0x40020000

08010df8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b084      	sub	sp, #16
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010e00:	f7f8 fda8 	bl	8009954 <HAL_GetTick>
 8010e04:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010e06:	e006      	b.n	8010e16 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010e08:	f7ff ff8a 	bl	8010d20 <BSP_SD_GetCardState>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d101      	bne.n	8010e16 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010e12:	2300      	movs	r3, #0
 8010e14:	e009      	b.n	8010e2a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010e16:	f7f8 fd9d 	bl	8009954 <HAL_GetTick>
 8010e1a:	4602      	mov	r2, r0
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	1ad3      	subs	r3, r2, r3
 8010e20:	687a      	ldr	r2, [r7, #4]
 8010e22:	429a      	cmp	r2, r3
 8010e24:	d8f0      	bhi.n	8010e08 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010e26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	3710      	adds	r7, #16
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	bd80      	pop	{r7, pc}
	...

08010e34 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b082      	sub	sp, #8
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010e3e:	4b0b      	ldr	r3, [pc, #44]	; (8010e6c <SD_CheckStatus+0x38>)
 8010e40:	2201      	movs	r2, #1
 8010e42:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010e44:	f7ff ff6c 	bl	8010d20 <BSP_SD_GetCardState>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d107      	bne.n	8010e5e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010e4e:	4b07      	ldr	r3, [pc, #28]	; (8010e6c <SD_CheckStatus+0x38>)
 8010e50:	781b      	ldrb	r3, [r3, #0]
 8010e52:	b2db      	uxtb	r3, r3
 8010e54:	f023 0301 	bic.w	r3, r3, #1
 8010e58:	b2da      	uxtb	r2, r3
 8010e5a:	4b04      	ldr	r3, [pc, #16]	; (8010e6c <SD_CheckStatus+0x38>)
 8010e5c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010e5e:	4b03      	ldr	r3, [pc, #12]	; (8010e6c <SD_CheckStatus+0x38>)
 8010e60:	781b      	ldrb	r3, [r3, #0]
 8010e62:	b2db      	uxtb	r3, r3
}
 8010e64:	4618      	mov	r0, r3
 8010e66:	3708      	adds	r7, #8
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}
 8010e6c:	20000009 	.word	0x20000009

08010e70 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b082      	sub	sp, #8
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	4603      	mov	r3, r0
 8010e78:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010e7a:	f7ff fef7 	bl	8010c6c <BSP_SD_Init>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d107      	bne.n	8010e94 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010e84:	79fb      	ldrb	r3, [r7, #7]
 8010e86:	4618      	mov	r0, r3
 8010e88:	f7ff ffd4 	bl	8010e34 <SD_CheckStatus>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	461a      	mov	r2, r3
 8010e90:	4b04      	ldr	r3, [pc, #16]	; (8010ea4 <SD_initialize+0x34>)
 8010e92:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010e94:	4b03      	ldr	r3, [pc, #12]	; (8010ea4 <SD_initialize+0x34>)
 8010e96:	781b      	ldrb	r3, [r3, #0]
 8010e98:	b2db      	uxtb	r3, r3
}
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	3708      	adds	r7, #8
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	bd80      	pop	{r7, pc}
 8010ea2:	bf00      	nop
 8010ea4:	20000009 	.word	0x20000009

08010ea8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b082      	sub	sp, #8
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	4603      	mov	r3, r0
 8010eb0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010eb2:	79fb      	ldrb	r3, [r7, #7]
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	f7ff ffbd 	bl	8010e34 <SD_CheckStatus>
 8010eba:	4603      	mov	r3, r0
}
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	3708      	adds	r7, #8
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}

08010ec4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b086      	sub	sp, #24
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	60b9      	str	r1, [r7, #8]
 8010ecc:	607a      	str	r2, [r7, #4]
 8010ece:	603b      	str	r3, [r7, #0]
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010ed8:	f247 5030 	movw	r0, #30000	; 0x7530
 8010edc:	f7ff ff8c 	bl	8010df8 <SD_CheckStatusWithTimeout>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	da01      	bge.n	8010eea <SD_read+0x26>
  {
    return res;
 8010ee6:	7dfb      	ldrb	r3, [r7, #23]
 8010ee8:	e03b      	b.n	8010f62 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010eea:	683a      	ldr	r2, [r7, #0]
 8010eec:	6879      	ldr	r1, [r7, #4]
 8010eee:	68b8      	ldr	r0, [r7, #8]
 8010ef0:	f7ff fee2 	bl	8010cb8 <BSP_SD_ReadBlocks_DMA>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d132      	bne.n	8010f60 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010efa:	4b1c      	ldr	r3, [pc, #112]	; (8010f6c <SD_read+0xa8>)
 8010efc:	2200      	movs	r2, #0
 8010efe:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010f00:	f7f8 fd28 	bl	8009954 <HAL_GetTick>
 8010f04:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010f06:	bf00      	nop
 8010f08:	4b18      	ldr	r3, [pc, #96]	; (8010f6c <SD_read+0xa8>)
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d108      	bne.n	8010f22 <SD_read+0x5e>
 8010f10:	f7f8 fd20 	bl	8009954 <HAL_GetTick>
 8010f14:	4602      	mov	r2, r0
 8010f16:	693b      	ldr	r3, [r7, #16]
 8010f18:	1ad3      	subs	r3, r2, r3
 8010f1a:	f247 522f 	movw	r2, #29999	; 0x752f
 8010f1e:	4293      	cmp	r3, r2
 8010f20:	d9f2      	bls.n	8010f08 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8010f22:	4b12      	ldr	r3, [pc, #72]	; (8010f6c <SD_read+0xa8>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d102      	bne.n	8010f30 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	75fb      	strb	r3, [r7, #23]
 8010f2e:	e017      	b.n	8010f60 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010f30:	4b0e      	ldr	r3, [pc, #56]	; (8010f6c <SD_read+0xa8>)
 8010f32:	2200      	movs	r2, #0
 8010f34:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010f36:	f7f8 fd0d 	bl	8009954 <HAL_GetTick>
 8010f3a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010f3c:	e007      	b.n	8010f4e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010f3e:	f7ff feef 	bl	8010d20 <BSP_SD_GetCardState>
 8010f42:	4603      	mov	r3, r0
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d102      	bne.n	8010f4e <SD_read+0x8a>
          {
            res = RES_OK;
 8010f48:	2300      	movs	r3, #0
 8010f4a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010f4c:	e008      	b.n	8010f60 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010f4e:	f7f8 fd01 	bl	8009954 <HAL_GetTick>
 8010f52:	4602      	mov	r2, r0
 8010f54:	693b      	ldr	r3, [r7, #16]
 8010f56:	1ad3      	subs	r3, r2, r3
 8010f58:	f247 522f 	movw	r2, #29999	; 0x752f
 8010f5c:	4293      	cmp	r3, r2
 8010f5e:	d9ee      	bls.n	8010f3e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f62:	4618      	mov	r0, r3
 8010f64:	3718      	adds	r7, #24
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd80      	pop	{r7, pc}
 8010f6a:	bf00      	nop
 8010f6c:	2003d47c 	.word	0x2003d47c

08010f70 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b086      	sub	sp, #24
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	60b9      	str	r1, [r7, #8]
 8010f78:	607a      	str	r2, [r7, #4]
 8010f7a:	603b      	str	r3, [r7, #0]
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010f80:	2301      	movs	r3, #1
 8010f82:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010f84:	4b24      	ldr	r3, [pc, #144]	; (8011018 <SD_write+0xa8>)
 8010f86:	2200      	movs	r2, #0
 8010f88:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010f8a:	f247 5030 	movw	r0, #30000	; 0x7530
 8010f8e:	f7ff ff33 	bl	8010df8 <SD_CheckStatusWithTimeout>
 8010f92:	4603      	mov	r3, r0
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	da01      	bge.n	8010f9c <SD_write+0x2c>
  {
    return res;
 8010f98:	7dfb      	ldrb	r3, [r7, #23]
 8010f9a:	e038      	b.n	801100e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010f9c:	683a      	ldr	r2, [r7, #0]
 8010f9e:	6879      	ldr	r1, [r7, #4]
 8010fa0:	68b8      	ldr	r0, [r7, #8]
 8010fa2:	f7ff fea3 	bl	8010cec <BSP_SD_WriteBlocks_DMA>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d12f      	bne.n	801100c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010fac:	f7f8 fcd2 	bl	8009954 <HAL_GetTick>
 8010fb0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010fb2:	bf00      	nop
 8010fb4:	4b18      	ldr	r3, [pc, #96]	; (8011018 <SD_write+0xa8>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d108      	bne.n	8010fce <SD_write+0x5e>
 8010fbc:	f7f8 fcca 	bl	8009954 <HAL_GetTick>
 8010fc0:	4602      	mov	r2, r0
 8010fc2:	693b      	ldr	r3, [r7, #16]
 8010fc4:	1ad3      	subs	r3, r2, r3
 8010fc6:	f247 522f 	movw	r2, #29999	; 0x752f
 8010fca:	4293      	cmp	r3, r2
 8010fcc:	d9f2      	bls.n	8010fb4 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8010fce:	4b12      	ldr	r3, [pc, #72]	; (8011018 <SD_write+0xa8>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d102      	bne.n	8010fdc <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	75fb      	strb	r3, [r7, #23]
 8010fda:	e017      	b.n	801100c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010fdc:	4b0e      	ldr	r3, [pc, #56]	; (8011018 <SD_write+0xa8>)
 8010fde:	2200      	movs	r2, #0
 8010fe0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010fe2:	f7f8 fcb7 	bl	8009954 <HAL_GetTick>
 8010fe6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010fe8:	e007      	b.n	8010ffa <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010fea:	f7ff fe99 	bl	8010d20 <BSP_SD_GetCardState>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d102      	bne.n	8010ffa <SD_write+0x8a>
          {
            res = RES_OK;
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	75fb      	strb	r3, [r7, #23]
            break;
 8010ff8:	e008      	b.n	801100c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010ffa:	f7f8 fcab 	bl	8009954 <HAL_GetTick>
 8010ffe:	4602      	mov	r2, r0
 8011000:	693b      	ldr	r3, [r7, #16]
 8011002:	1ad3      	subs	r3, r2, r3
 8011004:	f247 522f 	movw	r2, #29999	; 0x752f
 8011008:	4293      	cmp	r3, r2
 801100a:	d9ee      	bls.n	8010fea <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801100c:	7dfb      	ldrb	r3, [r7, #23]
}
 801100e:	4618      	mov	r0, r3
 8011010:	3718      	adds	r7, #24
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}
 8011016:	bf00      	nop
 8011018:	2003d478 	.word	0x2003d478

0801101c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b08c      	sub	sp, #48	; 0x30
 8011020:	af00      	add	r7, sp, #0
 8011022:	4603      	mov	r3, r0
 8011024:	603a      	str	r2, [r7, #0]
 8011026:	71fb      	strb	r3, [r7, #7]
 8011028:	460b      	mov	r3, r1
 801102a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801102c:	2301      	movs	r3, #1
 801102e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011032:	4b25      	ldr	r3, [pc, #148]	; (80110c8 <SD_ioctl+0xac>)
 8011034:	781b      	ldrb	r3, [r3, #0]
 8011036:	b2db      	uxtb	r3, r3
 8011038:	f003 0301 	and.w	r3, r3, #1
 801103c:	2b00      	cmp	r3, #0
 801103e:	d001      	beq.n	8011044 <SD_ioctl+0x28>
 8011040:	2303      	movs	r3, #3
 8011042:	e03c      	b.n	80110be <SD_ioctl+0xa2>

  switch (cmd)
 8011044:	79bb      	ldrb	r3, [r7, #6]
 8011046:	2b03      	cmp	r3, #3
 8011048:	d834      	bhi.n	80110b4 <SD_ioctl+0x98>
 801104a:	a201      	add	r2, pc, #4	; (adr r2, 8011050 <SD_ioctl+0x34>)
 801104c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011050:	08011061 	.word	0x08011061
 8011054:	08011069 	.word	0x08011069
 8011058:	08011081 	.word	0x08011081
 801105c:	0801109b 	.word	0x0801109b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011060:	2300      	movs	r3, #0
 8011062:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011066:	e028      	b.n	80110ba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011068:	f107 030c 	add.w	r3, r7, #12
 801106c:	4618      	mov	r0, r3
 801106e:	f7ff fe67 	bl	8010d40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011074:	683b      	ldr	r3, [r7, #0]
 8011076:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011078:	2300      	movs	r3, #0
 801107a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801107e:	e01c      	b.n	80110ba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011080:	f107 030c 	add.w	r3, r7, #12
 8011084:	4618      	mov	r0, r3
 8011086:	f7ff fe5b 	bl	8010d40 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801108a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801108c:	b29a      	uxth	r2, r3
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011092:	2300      	movs	r3, #0
 8011094:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011098:	e00f      	b.n	80110ba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801109a:	f107 030c 	add.w	r3, r7, #12
 801109e:	4618      	mov	r0, r3
 80110a0:	f7ff fe4e 	bl	8010d40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80110a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110a6:	0a5a      	lsrs	r2, r3, #9
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80110ac:	2300      	movs	r3, #0
 80110ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80110b2:	e002      	b.n	80110ba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80110b4:	2304      	movs	r3, #4
 80110b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80110ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80110be:	4618      	mov	r0, r3
 80110c0:	3730      	adds	r7, #48	; 0x30
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}
 80110c6:	bf00      	nop
 80110c8:	20000009 	.word	0x20000009

080110cc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80110cc:	b480      	push	{r7}
 80110ce:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80110d0:	4b03      	ldr	r3, [pc, #12]	; (80110e0 <BSP_SD_WriteCpltCallback+0x14>)
 80110d2:	2201      	movs	r2, #1
 80110d4:	601a      	str	r2, [r3, #0]
}
 80110d6:	bf00      	nop
 80110d8:	46bd      	mov	sp, r7
 80110da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110de:	4770      	bx	lr
 80110e0:	2003d478 	.word	0x2003d478

080110e4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80110e4:	b480      	push	{r7}
 80110e6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80110e8:	4b03      	ldr	r3, [pc, #12]	; (80110f8 <BSP_SD_ReadCpltCallback+0x14>)
 80110ea:	2201      	movs	r2, #1
 80110ec:	601a      	str	r2, [r3, #0]
}
 80110ee:	bf00      	nop
 80110f0:	46bd      	mov	sp, r7
 80110f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f6:	4770      	bx	lr
 80110f8:	2003d47c 	.word	0x2003d47c

080110fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b084      	sub	sp, #16
 8011100:	af00      	add	r7, sp, #0
 8011102:	4603      	mov	r3, r0
 8011104:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011106:	79fb      	ldrb	r3, [r7, #7]
 8011108:	4a08      	ldr	r2, [pc, #32]	; (801112c <disk_status+0x30>)
 801110a:	009b      	lsls	r3, r3, #2
 801110c:	4413      	add	r3, r2
 801110e:	685b      	ldr	r3, [r3, #4]
 8011110:	685b      	ldr	r3, [r3, #4]
 8011112:	79fa      	ldrb	r2, [r7, #7]
 8011114:	4905      	ldr	r1, [pc, #20]	; (801112c <disk_status+0x30>)
 8011116:	440a      	add	r2, r1
 8011118:	7a12      	ldrb	r2, [r2, #8]
 801111a:	4610      	mov	r0, r2
 801111c:	4798      	blx	r3
 801111e:	4603      	mov	r3, r0
 8011120:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011122:	7bfb      	ldrb	r3, [r7, #15]
}
 8011124:	4618      	mov	r0, r3
 8011126:	3710      	adds	r7, #16
 8011128:	46bd      	mov	sp, r7
 801112a:	bd80      	pop	{r7, pc}
 801112c:	2003d4a8 	.word	0x2003d4a8

08011130 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b084      	sub	sp, #16
 8011134:	af00      	add	r7, sp, #0
 8011136:	4603      	mov	r3, r0
 8011138:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801113a:	2300      	movs	r3, #0
 801113c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801113e:	79fb      	ldrb	r3, [r7, #7]
 8011140:	4a0d      	ldr	r2, [pc, #52]	; (8011178 <disk_initialize+0x48>)
 8011142:	5cd3      	ldrb	r3, [r2, r3]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d111      	bne.n	801116c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011148:	79fb      	ldrb	r3, [r7, #7]
 801114a:	4a0b      	ldr	r2, [pc, #44]	; (8011178 <disk_initialize+0x48>)
 801114c:	2101      	movs	r1, #1
 801114e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011150:	79fb      	ldrb	r3, [r7, #7]
 8011152:	4a09      	ldr	r2, [pc, #36]	; (8011178 <disk_initialize+0x48>)
 8011154:	009b      	lsls	r3, r3, #2
 8011156:	4413      	add	r3, r2
 8011158:	685b      	ldr	r3, [r3, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	79fa      	ldrb	r2, [r7, #7]
 801115e:	4906      	ldr	r1, [pc, #24]	; (8011178 <disk_initialize+0x48>)
 8011160:	440a      	add	r2, r1
 8011162:	7a12      	ldrb	r2, [r2, #8]
 8011164:	4610      	mov	r0, r2
 8011166:	4798      	blx	r3
 8011168:	4603      	mov	r3, r0
 801116a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801116c:	7bfb      	ldrb	r3, [r7, #15]
}
 801116e:	4618      	mov	r0, r3
 8011170:	3710      	adds	r7, #16
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}
 8011176:	bf00      	nop
 8011178:	2003d4a8 	.word	0x2003d4a8

0801117c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801117c:	b590      	push	{r4, r7, lr}
 801117e:	b087      	sub	sp, #28
 8011180:	af00      	add	r7, sp, #0
 8011182:	60b9      	str	r1, [r7, #8]
 8011184:	607a      	str	r2, [r7, #4]
 8011186:	603b      	str	r3, [r7, #0]
 8011188:	4603      	mov	r3, r0
 801118a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801118c:	7bfb      	ldrb	r3, [r7, #15]
 801118e:	4a0a      	ldr	r2, [pc, #40]	; (80111b8 <disk_read+0x3c>)
 8011190:	009b      	lsls	r3, r3, #2
 8011192:	4413      	add	r3, r2
 8011194:	685b      	ldr	r3, [r3, #4]
 8011196:	689c      	ldr	r4, [r3, #8]
 8011198:	7bfb      	ldrb	r3, [r7, #15]
 801119a:	4a07      	ldr	r2, [pc, #28]	; (80111b8 <disk_read+0x3c>)
 801119c:	4413      	add	r3, r2
 801119e:	7a18      	ldrb	r0, [r3, #8]
 80111a0:	683b      	ldr	r3, [r7, #0]
 80111a2:	687a      	ldr	r2, [r7, #4]
 80111a4:	68b9      	ldr	r1, [r7, #8]
 80111a6:	47a0      	blx	r4
 80111a8:	4603      	mov	r3, r0
 80111aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80111ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80111ae:	4618      	mov	r0, r3
 80111b0:	371c      	adds	r7, #28
 80111b2:	46bd      	mov	sp, r7
 80111b4:	bd90      	pop	{r4, r7, pc}
 80111b6:	bf00      	nop
 80111b8:	2003d4a8 	.word	0x2003d4a8

080111bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80111bc:	b590      	push	{r4, r7, lr}
 80111be:	b087      	sub	sp, #28
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	60b9      	str	r1, [r7, #8]
 80111c4:	607a      	str	r2, [r7, #4]
 80111c6:	603b      	str	r3, [r7, #0]
 80111c8:	4603      	mov	r3, r0
 80111ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80111cc:	7bfb      	ldrb	r3, [r7, #15]
 80111ce:	4a0a      	ldr	r2, [pc, #40]	; (80111f8 <disk_write+0x3c>)
 80111d0:	009b      	lsls	r3, r3, #2
 80111d2:	4413      	add	r3, r2
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	68dc      	ldr	r4, [r3, #12]
 80111d8:	7bfb      	ldrb	r3, [r7, #15]
 80111da:	4a07      	ldr	r2, [pc, #28]	; (80111f8 <disk_write+0x3c>)
 80111dc:	4413      	add	r3, r2
 80111de:	7a18      	ldrb	r0, [r3, #8]
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	687a      	ldr	r2, [r7, #4]
 80111e4:	68b9      	ldr	r1, [r7, #8]
 80111e6:	47a0      	blx	r4
 80111e8:	4603      	mov	r3, r0
 80111ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80111ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80111ee:	4618      	mov	r0, r3
 80111f0:	371c      	adds	r7, #28
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bd90      	pop	{r4, r7, pc}
 80111f6:	bf00      	nop
 80111f8:	2003d4a8 	.word	0x2003d4a8

080111fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b084      	sub	sp, #16
 8011200:	af00      	add	r7, sp, #0
 8011202:	4603      	mov	r3, r0
 8011204:	603a      	str	r2, [r7, #0]
 8011206:	71fb      	strb	r3, [r7, #7]
 8011208:	460b      	mov	r3, r1
 801120a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801120c:	79fb      	ldrb	r3, [r7, #7]
 801120e:	4a09      	ldr	r2, [pc, #36]	; (8011234 <disk_ioctl+0x38>)
 8011210:	009b      	lsls	r3, r3, #2
 8011212:	4413      	add	r3, r2
 8011214:	685b      	ldr	r3, [r3, #4]
 8011216:	691b      	ldr	r3, [r3, #16]
 8011218:	79fa      	ldrb	r2, [r7, #7]
 801121a:	4906      	ldr	r1, [pc, #24]	; (8011234 <disk_ioctl+0x38>)
 801121c:	440a      	add	r2, r1
 801121e:	7a10      	ldrb	r0, [r2, #8]
 8011220:	79b9      	ldrb	r1, [r7, #6]
 8011222:	683a      	ldr	r2, [r7, #0]
 8011224:	4798      	blx	r3
 8011226:	4603      	mov	r3, r0
 8011228:	73fb      	strb	r3, [r7, #15]
  return res;
 801122a:	7bfb      	ldrb	r3, [r7, #15]
}
 801122c:	4618      	mov	r0, r3
 801122e:	3710      	adds	r7, #16
 8011230:	46bd      	mov	sp, r7
 8011232:	bd80      	pop	{r7, pc}
 8011234:	2003d4a8 	.word	0x2003d4a8

08011238 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011238:	b480      	push	{r7}
 801123a:	b085      	sub	sp, #20
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	3301      	adds	r3, #1
 8011244:	781b      	ldrb	r3, [r3, #0]
 8011246:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011248:	89fb      	ldrh	r3, [r7, #14]
 801124a:	021b      	lsls	r3, r3, #8
 801124c:	b21a      	sxth	r2, r3
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	781b      	ldrb	r3, [r3, #0]
 8011252:	b21b      	sxth	r3, r3
 8011254:	4313      	orrs	r3, r2
 8011256:	b21b      	sxth	r3, r3
 8011258:	81fb      	strh	r3, [r7, #14]
	return rv;
 801125a:	89fb      	ldrh	r3, [r7, #14]
}
 801125c:	4618      	mov	r0, r3
 801125e:	3714      	adds	r7, #20
 8011260:	46bd      	mov	sp, r7
 8011262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011266:	4770      	bx	lr

08011268 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011268:	b480      	push	{r7}
 801126a:	b085      	sub	sp, #20
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	3303      	adds	r3, #3
 8011274:	781b      	ldrb	r3, [r3, #0]
 8011276:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	021b      	lsls	r3, r3, #8
 801127c:	687a      	ldr	r2, [r7, #4]
 801127e:	3202      	adds	r2, #2
 8011280:	7812      	ldrb	r2, [r2, #0]
 8011282:	4313      	orrs	r3, r2
 8011284:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	021b      	lsls	r3, r3, #8
 801128a:	687a      	ldr	r2, [r7, #4]
 801128c:	3201      	adds	r2, #1
 801128e:	7812      	ldrb	r2, [r2, #0]
 8011290:	4313      	orrs	r3, r2
 8011292:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	021b      	lsls	r3, r3, #8
 8011298:	687a      	ldr	r2, [r7, #4]
 801129a:	7812      	ldrb	r2, [r2, #0]
 801129c:	4313      	orrs	r3, r2
 801129e:	60fb      	str	r3, [r7, #12]
	return rv;
 80112a0:	68fb      	ldr	r3, [r7, #12]
}
 80112a2:	4618      	mov	r0, r3
 80112a4:	3714      	adds	r7, #20
 80112a6:	46bd      	mov	sp, r7
 80112a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ac:	4770      	bx	lr

080112ae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80112ae:	b480      	push	{r7}
 80112b0:	b083      	sub	sp, #12
 80112b2:	af00      	add	r7, sp, #0
 80112b4:	6078      	str	r0, [r7, #4]
 80112b6:	460b      	mov	r3, r1
 80112b8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	1c5a      	adds	r2, r3, #1
 80112be:	607a      	str	r2, [r7, #4]
 80112c0:	887a      	ldrh	r2, [r7, #2]
 80112c2:	b2d2      	uxtb	r2, r2
 80112c4:	701a      	strb	r2, [r3, #0]
 80112c6:	887b      	ldrh	r3, [r7, #2]
 80112c8:	0a1b      	lsrs	r3, r3, #8
 80112ca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	1c5a      	adds	r2, r3, #1
 80112d0:	607a      	str	r2, [r7, #4]
 80112d2:	887a      	ldrh	r2, [r7, #2]
 80112d4:	b2d2      	uxtb	r2, r2
 80112d6:	701a      	strb	r2, [r3, #0]
}
 80112d8:	bf00      	nop
 80112da:	370c      	adds	r7, #12
 80112dc:	46bd      	mov	sp, r7
 80112de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e2:	4770      	bx	lr

080112e4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80112e4:	b480      	push	{r7}
 80112e6:	b083      	sub	sp, #12
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
 80112ec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	1c5a      	adds	r2, r3, #1
 80112f2:	607a      	str	r2, [r7, #4]
 80112f4:	683a      	ldr	r2, [r7, #0]
 80112f6:	b2d2      	uxtb	r2, r2
 80112f8:	701a      	strb	r2, [r3, #0]
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	0a1b      	lsrs	r3, r3, #8
 80112fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	1c5a      	adds	r2, r3, #1
 8011304:	607a      	str	r2, [r7, #4]
 8011306:	683a      	ldr	r2, [r7, #0]
 8011308:	b2d2      	uxtb	r2, r2
 801130a:	701a      	strb	r2, [r3, #0]
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	0a1b      	lsrs	r3, r3, #8
 8011310:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	1c5a      	adds	r2, r3, #1
 8011316:	607a      	str	r2, [r7, #4]
 8011318:	683a      	ldr	r2, [r7, #0]
 801131a:	b2d2      	uxtb	r2, r2
 801131c:	701a      	strb	r2, [r3, #0]
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	0a1b      	lsrs	r3, r3, #8
 8011322:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	1c5a      	adds	r2, r3, #1
 8011328:	607a      	str	r2, [r7, #4]
 801132a:	683a      	ldr	r2, [r7, #0]
 801132c:	b2d2      	uxtb	r2, r2
 801132e:	701a      	strb	r2, [r3, #0]
}
 8011330:	bf00      	nop
 8011332:	370c      	adds	r7, #12
 8011334:	46bd      	mov	sp, r7
 8011336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133a:	4770      	bx	lr

0801133c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801133c:	b480      	push	{r7}
 801133e:	b087      	sub	sp, #28
 8011340:	af00      	add	r7, sp, #0
 8011342:	60f8      	str	r0, [r7, #12]
 8011344:	60b9      	str	r1, [r7, #8]
 8011346:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d00d      	beq.n	8011372 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011356:	693a      	ldr	r2, [r7, #16]
 8011358:	1c53      	adds	r3, r2, #1
 801135a:	613b      	str	r3, [r7, #16]
 801135c:	697b      	ldr	r3, [r7, #20]
 801135e:	1c59      	adds	r1, r3, #1
 8011360:	6179      	str	r1, [r7, #20]
 8011362:	7812      	ldrb	r2, [r2, #0]
 8011364:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	3b01      	subs	r3, #1
 801136a:	607b      	str	r3, [r7, #4]
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d1f1      	bne.n	8011356 <mem_cpy+0x1a>
	}
}
 8011372:	bf00      	nop
 8011374:	371c      	adds	r7, #28
 8011376:	46bd      	mov	sp, r7
 8011378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137c:	4770      	bx	lr

0801137e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801137e:	b480      	push	{r7}
 8011380:	b087      	sub	sp, #28
 8011382:	af00      	add	r7, sp, #0
 8011384:	60f8      	str	r0, [r7, #12]
 8011386:	60b9      	str	r1, [r7, #8]
 8011388:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	1c5a      	adds	r2, r3, #1
 8011392:	617a      	str	r2, [r7, #20]
 8011394:	68ba      	ldr	r2, [r7, #8]
 8011396:	b2d2      	uxtb	r2, r2
 8011398:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	3b01      	subs	r3, #1
 801139e:	607b      	str	r3, [r7, #4]
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d1f3      	bne.n	801138e <mem_set+0x10>
}
 80113a6:	bf00      	nop
 80113a8:	bf00      	nop
 80113aa:	371c      	adds	r7, #28
 80113ac:	46bd      	mov	sp, r7
 80113ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b2:	4770      	bx	lr

080113b4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80113b4:	b480      	push	{r7}
 80113b6:	b089      	sub	sp, #36	; 0x24
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	60f8      	str	r0, [r7, #12]
 80113bc:	60b9      	str	r1, [r7, #8]
 80113be:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	61fb      	str	r3, [r7, #28]
 80113c4:	68bb      	ldr	r3, [r7, #8]
 80113c6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80113c8:	2300      	movs	r3, #0
 80113ca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80113cc:	69fb      	ldr	r3, [r7, #28]
 80113ce:	1c5a      	adds	r2, r3, #1
 80113d0:	61fa      	str	r2, [r7, #28]
 80113d2:	781b      	ldrb	r3, [r3, #0]
 80113d4:	4619      	mov	r1, r3
 80113d6:	69bb      	ldr	r3, [r7, #24]
 80113d8:	1c5a      	adds	r2, r3, #1
 80113da:	61ba      	str	r2, [r7, #24]
 80113dc:	781b      	ldrb	r3, [r3, #0]
 80113de:	1acb      	subs	r3, r1, r3
 80113e0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	3b01      	subs	r3, #1
 80113e6:	607b      	str	r3, [r7, #4]
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d002      	beq.n	80113f4 <mem_cmp+0x40>
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d0eb      	beq.n	80113cc <mem_cmp+0x18>

	return r;
 80113f4:	697b      	ldr	r3, [r7, #20]
}
 80113f6:	4618      	mov	r0, r3
 80113f8:	3724      	adds	r7, #36	; 0x24
 80113fa:	46bd      	mov	sp, r7
 80113fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011400:	4770      	bx	lr

08011402 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011402:	b480      	push	{r7}
 8011404:	b083      	sub	sp, #12
 8011406:	af00      	add	r7, sp, #0
 8011408:	6078      	str	r0, [r7, #4]
 801140a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801140c:	e002      	b.n	8011414 <chk_chr+0x12>
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	3301      	adds	r3, #1
 8011412:	607b      	str	r3, [r7, #4]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	781b      	ldrb	r3, [r3, #0]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d005      	beq.n	8011428 <chk_chr+0x26>
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	781b      	ldrb	r3, [r3, #0]
 8011420:	461a      	mov	r2, r3
 8011422:	683b      	ldr	r3, [r7, #0]
 8011424:	4293      	cmp	r3, r2
 8011426:	d1f2      	bne.n	801140e <chk_chr+0xc>
	return *str;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	781b      	ldrb	r3, [r3, #0]
}
 801142c:	4618      	mov	r0, r3
 801142e:	370c      	adds	r7, #12
 8011430:	46bd      	mov	sp, r7
 8011432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011436:	4770      	bx	lr

08011438 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011438:	b480      	push	{r7}
 801143a:	b085      	sub	sp, #20
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011442:	2300      	movs	r3, #0
 8011444:	60bb      	str	r3, [r7, #8]
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	60fb      	str	r3, [r7, #12]
 801144a:	e029      	b.n	80114a0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801144c:	4a27      	ldr	r2, [pc, #156]	; (80114ec <chk_lock+0xb4>)
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	011b      	lsls	r3, r3, #4
 8011452:	4413      	add	r3, r2
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d01d      	beq.n	8011496 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801145a:	4a24      	ldr	r2, [pc, #144]	; (80114ec <chk_lock+0xb4>)
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	011b      	lsls	r3, r3, #4
 8011460:	4413      	add	r3, r2
 8011462:	681a      	ldr	r2, [r3, #0]
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	429a      	cmp	r2, r3
 801146a:	d116      	bne.n	801149a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801146c:	4a1f      	ldr	r2, [pc, #124]	; (80114ec <chk_lock+0xb4>)
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	011b      	lsls	r3, r3, #4
 8011472:	4413      	add	r3, r2
 8011474:	3304      	adds	r3, #4
 8011476:	681a      	ldr	r2, [r3, #0]
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801147c:	429a      	cmp	r2, r3
 801147e:	d10c      	bne.n	801149a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011480:	4a1a      	ldr	r2, [pc, #104]	; (80114ec <chk_lock+0xb4>)
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	011b      	lsls	r3, r3, #4
 8011486:	4413      	add	r3, r2
 8011488:	3308      	adds	r3, #8
 801148a:	681a      	ldr	r2, [r3, #0]
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011490:	429a      	cmp	r2, r3
 8011492:	d102      	bne.n	801149a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011494:	e007      	b.n	80114a6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011496:	2301      	movs	r3, #1
 8011498:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	3301      	adds	r3, #1
 801149e:	60fb      	str	r3, [r7, #12]
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	2b01      	cmp	r3, #1
 80114a4:	d9d2      	bls.n	801144c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	2b02      	cmp	r3, #2
 80114aa:	d109      	bne.n	80114c0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d102      	bne.n	80114b8 <chk_lock+0x80>
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	2b02      	cmp	r3, #2
 80114b6:	d101      	bne.n	80114bc <chk_lock+0x84>
 80114b8:	2300      	movs	r3, #0
 80114ba:	e010      	b.n	80114de <chk_lock+0xa6>
 80114bc:	2312      	movs	r3, #18
 80114be:	e00e      	b.n	80114de <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80114c0:	683b      	ldr	r3, [r7, #0]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d108      	bne.n	80114d8 <chk_lock+0xa0>
 80114c6:	4a09      	ldr	r2, [pc, #36]	; (80114ec <chk_lock+0xb4>)
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	011b      	lsls	r3, r3, #4
 80114cc:	4413      	add	r3, r2
 80114ce:	330c      	adds	r3, #12
 80114d0:	881b      	ldrh	r3, [r3, #0]
 80114d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80114d6:	d101      	bne.n	80114dc <chk_lock+0xa4>
 80114d8:	2310      	movs	r3, #16
 80114da:	e000      	b.n	80114de <chk_lock+0xa6>
 80114dc:	2300      	movs	r3, #0
}
 80114de:	4618      	mov	r0, r3
 80114e0:	3714      	adds	r7, #20
 80114e2:	46bd      	mov	sp, r7
 80114e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e8:	4770      	bx	lr
 80114ea:	bf00      	nop
 80114ec:	2003d488 	.word	0x2003d488

080114f0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80114f0:	b480      	push	{r7}
 80114f2:	b083      	sub	sp, #12
 80114f4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80114f6:	2300      	movs	r3, #0
 80114f8:	607b      	str	r3, [r7, #4]
 80114fa:	e002      	b.n	8011502 <enq_lock+0x12>
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	3301      	adds	r3, #1
 8011500:	607b      	str	r3, [r7, #4]
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	2b01      	cmp	r3, #1
 8011506:	d806      	bhi.n	8011516 <enq_lock+0x26>
 8011508:	4a09      	ldr	r2, [pc, #36]	; (8011530 <enq_lock+0x40>)
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	011b      	lsls	r3, r3, #4
 801150e:	4413      	add	r3, r2
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d1f2      	bne.n	80114fc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	2b02      	cmp	r3, #2
 801151a:	bf14      	ite	ne
 801151c:	2301      	movne	r3, #1
 801151e:	2300      	moveq	r3, #0
 8011520:	b2db      	uxtb	r3, r3
}
 8011522:	4618      	mov	r0, r3
 8011524:	370c      	adds	r7, #12
 8011526:	46bd      	mov	sp, r7
 8011528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152c:	4770      	bx	lr
 801152e:	bf00      	nop
 8011530:	2003d488 	.word	0x2003d488

08011534 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011534:	b480      	push	{r7}
 8011536:	b085      	sub	sp, #20
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
 801153c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801153e:	2300      	movs	r3, #0
 8011540:	60fb      	str	r3, [r7, #12]
 8011542:	e01f      	b.n	8011584 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011544:	4a41      	ldr	r2, [pc, #260]	; (801164c <inc_lock+0x118>)
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	011b      	lsls	r3, r3, #4
 801154a:	4413      	add	r3, r2
 801154c:	681a      	ldr	r2, [r3, #0]
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	429a      	cmp	r2, r3
 8011554:	d113      	bne.n	801157e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011556:	4a3d      	ldr	r2, [pc, #244]	; (801164c <inc_lock+0x118>)
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	011b      	lsls	r3, r3, #4
 801155c:	4413      	add	r3, r2
 801155e:	3304      	adds	r3, #4
 8011560:	681a      	ldr	r2, [r3, #0]
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011566:	429a      	cmp	r2, r3
 8011568:	d109      	bne.n	801157e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801156a:	4a38      	ldr	r2, [pc, #224]	; (801164c <inc_lock+0x118>)
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	011b      	lsls	r3, r3, #4
 8011570:	4413      	add	r3, r2
 8011572:	3308      	adds	r3, #8
 8011574:	681a      	ldr	r2, [r3, #0]
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801157a:	429a      	cmp	r2, r3
 801157c:	d006      	beq.n	801158c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	3301      	adds	r3, #1
 8011582:	60fb      	str	r3, [r7, #12]
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	2b01      	cmp	r3, #1
 8011588:	d9dc      	bls.n	8011544 <inc_lock+0x10>
 801158a:	e000      	b.n	801158e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801158c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	2b02      	cmp	r3, #2
 8011592:	d132      	bne.n	80115fa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011594:	2300      	movs	r3, #0
 8011596:	60fb      	str	r3, [r7, #12]
 8011598:	e002      	b.n	80115a0 <inc_lock+0x6c>
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	3301      	adds	r3, #1
 801159e:	60fb      	str	r3, [r7, #12]
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	2b01      	cmp	r3, #1
 80115a4:	d806      	bhi.n	80115b4 <inc_lock+0x80>
 80115a6:	4a29      	ldr	r2, [pc, #164]	; (801164c <inc_lock+0x118>)
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	011b      	lsls	r3, r3, #4
 80115ac:	4413      	add	r3, r2
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d1f2      	bne.n	801159a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	2b02      	cmp	r3, #2
 80115b8:	d101      	bne.n	80115be <inc_lock+0x8a>
 80115ba:	2300      	movs	r3, #0
 80115bc:	e040      	b.n	8011640 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	681a      	ldr	r2, [r3, #0]
 80115c2:	4922      	ldr	r1, [pc, #136]	; (801164c <inc_lock+0x118>)
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	011b      	lsls	r3, r3, #4
 80115c8:	440b      	add	r3, r1
 80115ca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	689a      	ldr	r2, [r3, #8]
 80115d0:	491e      	ldr	r1, [pc, #120]	; (801164c <inc_lock+0x118>)
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	011b      	lsls	r3, r3, #4
 80115d6:	440b      	add	r3, r1
 80115d8:	3304      	adds	r3, #4
 80115da:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	695a      	ldr	r2, [r3, #20]
 80115e0:	491a      	ldr	r1, [pc, #104]	; (801164c <inc_lock+0x118>)
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	011b      	lsls	r3, r3, #4
 80115e6:	440b      	add	r3, r1
 80115e8:	3308      	adds	r3, #8
 80115ea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80115ec:	4a17      	ldr	r2, [pc, #92]	; (801164c <inc_lock+0x118>)
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	011b      	lsls	r3, r3, #4
 80115f2:	4413      	add	r3, r2
 80115f4:	330c      	adds	r3, #12
 80115f6:	2200      	movs	r2, #0
 80115f8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80115fa:	683b      	ldr	r3, [r7, #0]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d009      	beq.n	8011614 <inc_lock+0xe0>
 8011600:	4a12      	ldr	r2, [pc, #72]	; (801164c <inc_lock+0x118>)
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	011b      	lsls	r3, r3, #4
 8011606:	4413      	add	r3, r2
 8011608:	330c      	adds	r3, #12
 801160a:	881b      	ldrh	r3, [r3, #0]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d001      	beq.n	8011614 <inc_lock+0xe0>
 8011610:	2300      	movs	r3, #0
 8011612:	e015      	b.n	8011640 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d108      	bne.n	801162c <inc_lock+0xf8>
 801161a:	4a0c      	ldr	r2, [pc, #48]	; (801164c <inc_lock+0x118>)
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	011b      	lsls	r3, r3, #4
 8011620:	4413      	add	r3, r2
 8011622:	330c      	adds	r3, #12
 8011624:	881b      	ldrh	r3, [r3, #0]
 8011626:	3301      	adds	r3, #1
 8011628:	b29a      	uxth	r2, r3
 801162a:	e001      	b.n	8011630 <inc_lock+0xfc>
 801162c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011630:	4906      	ldr	r1, [pc, #24]	; (801164c <inc_lock+0x118>)
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	011b      	lsls	r3, r3, #4
 8011636:	440b      	add	r3, r1
 8011638:	330c      	adds	r3, #12
 801163a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	3301      	adds	r3, #1
}
 8011640:	4618      	mov	r0, r3
 8011642:	3714      	adds	r7, #20
 8011644:	46bd      	mov	sp, r7
 8011646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164a:	4770      	bx	lr
 801164c:	2003d488 	.word	0x2003d488

08011650 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011650:	b480      	push	{r7}
 8011652:	b085      	sub	sp, #20
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	3b01      	subs	r3, #1
 801165c:	607b      	str	r3, [r7, #4]
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2b01      	cmp	r3, #1
 8011662:	d825      	bhi.n	80116b0 <dec_lock+0x60>
		n = Files[i].ctr;
 8011664:	4a17      	ldr	r2, [pc, #92]	; (80116c4 <dec_lock+0x74>)
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	011b      	lsls	r3, r3, #4
 801166a:	4413      	add	r3, r2
 801166c:	330c      	adds	r3, #12
 801166e:	881b      	ldrh	r3, [r3, #0]
 8011670:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011672:	89fb      	ldrh	r3, [r7, #14]
 8011674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011678:	d101      	bne.n	801167e <dec_lock+0x2e>
 801167a:	2300      	movs	r3, #0
 801167c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801167e:	89fb      	ldrh	r3, [r7, #14]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d002      	beq.n	801168a <dec_lock+0x3a>
 8011684:	89fb      	ldrh	r3, [r7, #14]
 8011686:	3b01      	subs	r3, #1
 8011688:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801168a:	4a0e      	ldr	r2, [pc, #56]	; (80116c4 <dec_lock+0x74>)
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	011b      	lsls	r3, r3, #4
 8011690:	4413      	add	r3, r2
 8011692:	330c      	adds	r3, #12
 8011694:	89fa      	ldrh	r2, [r7, #14]
 8011696:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011698:	89fb      	ldrh	r3, [r7, #14]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d105      	bne.n	80116aa <dec_lock+0x5a>
 801169e:	4a09      	ldr	r2, [pc, #36]	; (80116c4 <dec_lock+0x74>)
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	011b      	lsls	r3, r3, #4
 80116a4:	4413      	add	r3, r2
 80116a6:	2200      	movs	r2, #0
 80116a8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80116aa:	2300      	movs	r3, #0
 80116ac:	737b      	strb	r3, [r7, #13]
 80116ae:	e001      	b.n	80116b4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80116b0:	2302      	movs	r3, #2
 80116b2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80116b4:	7b7b      	ldrb	r3, [r7, #13]
}
 80116b6:	4618      	mov	r0, r3
 80116b8:	3714      	adds	r7, #20
 80116ba:	46bd      	mov	sp, r7
 80116bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c0:	4770      	bx	lr
 80116c2:	bf00      	nop
 80116c4:	2003d488 	.word	0x2003d488

080116c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80116c8:	b480      	push	{r7}
 80116ca:	b085      	sub	sp, #20
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80116d0:	2300      	movs	r3, #0
 80116d2:	60fb      	str	r3, [r7, #12]
 80116d4:	e010      	b.n	80116f8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80116d6:	4a0d      	ldr	r2, [pc, #52]	; (801170c <clear_lock+0x44>)
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	011b      	lsls	r3, r3, #4
 80116dc:	4413      	add	r3, r2
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	687a      	ldr	r2, [r7, #4]
 80116e2:	429a      	cmp	r2, r3
 80116e4:	d105      	bne.n	80116f2 <clear_lock+0x2a>
 80116e6:	4a09      	ldr	r2, [pc, #36]	; (801170c <clear_lock+0x44>)
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	011b      	lsls	r3, r3, #4
 80116ec:	4413      	add	r3, r2
 80116ee:	2200      	movs	r2, #0
 80116f0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	3301      	adds	r3, #1
 80116f6:	60fb      	str	r3, [r7, #12]
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	2b01      	cmp	r3, #1
 80116fc:	d9eb      	bls.n	80116d6 <clear_lock+0xe>
	}
}
 80116fe:	bf00      	nop
 8011700:	bf00      	nop
 8011702:	3714      	adds	r7, #20
 8011704:	46bd      	mov	sp, r7
 8011706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170a:	4770      	bx	lr
 801170c:	2003d488 	.word	0x2003d488

08011710 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b086      	sub	sp, #24
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011718:	2300      	movs	r3, #0
 801171a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	78db      	ldrb	r3, [r3, #3]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d034      	beq.n	801178e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011728:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	7858      	ldrb	r0, [r3, #1]
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011734:	2301      	movs	r3, #1
 8011736:	697a      	ldr	r2, [r7, #20]
 8011738:	f7ff fd40 	bl	80111bc <disk_write>
 801173c:	4603      	mov	r3, r0
 801173e:	2b00      	cmp	r3, #0
 8011740:	d002      	beq.n	8011748 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011742:	2301      	movs	r3, #1
 8011744:	73fb      	strb	r3, [r7, #15]
 8011746:	e022      	b.n	801178e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	2200      	movs	r2, #0
 801174c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011752:	697a      	ldr	r2, [r7, #20]
 8011754:	1ad2      	subs	r2, r2, r3
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	6a1b      	ldr	r3, [r3, #32]
 801175a:	429a      	cmp	r2, r3
 801175c:	d217      	bcs.n	801178e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	789b      	ldrb	r3, [r3, #2]
 8011762:	613b      	str	r3, [r7, #16]
 8011764:	e010      	b.n	8011788 <sync_window+0x78>
					wsect += fs->fsize;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	6a1b      	ldr	r3, [r3, #32]
 801176a:	697a      	ldr	r2, [r7, #20]
 801176c:	4413      	add	r3, r2
 801176e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	7858      	ldrb	r0, [r3, #1]
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801177a:	2301      	movs	r3, #1
 801177c:	697a      	ldr	r2, [r7, #20]
 801177e:	f7ff fd1d 	bl	80111bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011782:	693b      	ldr	r3, [r7, #16]
 8011784:	3b01      	subs	r3, #1
 8011786:	613b      	str	r3, [r7, #16]
 8011788:	693b      	ldr	r3, [r7, #16]
 801178a:	2b01      	cmp	r3, #1
 801178c:	d8eb      	bhi.n	8011766 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801178e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011790:	4618      	mov	r0, r3
 8011792:	3718      	adds	r7, #24
 8011794:	46bd      	mov	sp, r7
 8011796:	bd80      	pop	{r7, pc}

08011798 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b084      	sub	sp, #16
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
 80117a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80117a2:	2300      	movs	r3, #0
 80117a4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117aa:	683a      	ldr	r2, [r7, #0]
 80117ac:	429a      	cmp	r2, r3
 80117ae:	d01b      	beq.n	80117e8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f7ff ffad 	bl	8011710 <sync_window>
 80117b6:	4603      	mov	r3, r0
 80117b8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80117ba:	7bfb      	ldrb	r3, [r7, #15]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d113      	bne.n	80117e8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	7858      	ldrb	r0, [r3, #1]
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80117ca:	2301      	movs	r3, #1
 80117cc:	683a      	ldr	r2, [r7, #0]
 80117ce:	f7ff fcd5 	bl	801117c <disk_read>
 80117d2:	4603      	mov	r3, r0
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d004      	beq.n	80117e2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80117d8:	f04f 33ff 	mov.w	r3, #4294967295
 80117dc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80117de:	2301      	movs	r3, #1
 80117e0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	683a      	ldr	r2, [r7, #0]
 80117e6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80117e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3710      	adds	r7, #16
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}
	...

080117f4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b084      	sub	sp, #16
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80117fc:	6878      	ldr	r0, [r7, #4]
 80117fe:	f7ff ff87 	bl	8011710 <sync_window>
 8011802:	4603      	mov	r3, r0
 8011804:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011806:	7bfb      	ldrb	r3, [r7, #15]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d159      	bne.n	80118c0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	781b      	ldrb	r3, [r3, #0]
 8011810:	2b03      	cmp	r3, #3
 8011812:	d149      	bne.n	80118a8 <sync_fs+0xb4>
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	791b      	ldrb	r3, [r3, #4]
 8011818:	2b01      	cmp	r3, #1
 801181a:	d145      	bne.n	80118a8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	899b      	ldrh	r3, [r3, #12]
 8011826:	461a      	mov	r2, r3
 8011828:	2100      	movs	r1, #0
 801182a:	f7ff fda8 	bl	801137e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	3338      	adds	r3, #56	; 0x38
 8011832:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011836:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801183a:	4618      	mov	r0, r3
 801183c:	f7ff fd37 	bl	80112ae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	3338      	adds	r3, #56	; 0x38
 8011844:	4921      	ldr	r1, [pc, #132]	; (80118cc <sync_fs+0xd8>)
 8011846:	4618      	mov	r0, r3
 8011848:	f7ff fd4c 	bl	80112e4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	3338      	adds	r3, #56	; 0x38
 8011850:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011854:	491e      	ldr	r1, [pc, #120]	; (80118d0 <sync_fs+0xdc>)
 8011856:	4618      	mov	r0, r3
 8011858:	f7ff fd44 	bl	80112e4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	3338      	adds	r3, #56	; 0x38
 8011860:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	695b      	ldr	r3, [r3, #20]
 8011868:	4619      	mov	r1, r3
 801186a:	4610      	mov	r0, r2
 801186c:	f7ff fd3a 	bl	80112e4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	3338      	adds	r3, #56	; 0x38
 8011874:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	691b      	ldr	r3, [r3, #16]
 801187c:	4619      	mov	r1, r3
 801187e:	4610      	mov	r0, r2
 8011880:	f7ff fd30 	bl	80112e4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011888:	1c5a      	adds	r2, r3, #1
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	7858      	ldrb	r0, [r3, #1]
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801189c:	2301      	movs	r3, #1
 801189e:	f7ff fc8d 	bl	80111bc <disk_write>
			fs->fsi_flag = 0;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	2200      	movs	r2, #0
 80118a6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	785b      	ldrb	r3, [r3, #1]
 80118ac:	2200      	movs	r2, #0
 80118ae:	2100      	movs	r1, #0
 80118b0:	4618      	mov	r0, r3
 80118b2:	f7ff fca3 	bl	80111fc <disk_ioctl>
 80118b6:	4603      	mov	r3, r0
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d001      	beq.n	80118c0 <sync_fs+0xcc>
 80118bc:	2301      	movs	r3, #1
 80118be:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80118c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	3710      	adds	r7, #16
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}
 80118ca:	bf00      	nop
 80118cc:	41615252 	.word	0x41615252
 80118d0:	61417272 	.word	0x61417272

080118d4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80118d4:	b480      	push	{r7}
 80118d6:	b083      	sub	sp, #12
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
 80118dc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	3b02      	subs	r3, #2
 80118e2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	69db      	ldr	r3, [r3, #28]
 80118e8:	3b02      	subs	r3, #2
 80118ea:	683a      	ldr	r2, [r7, #0]
 80118ec:	429a      	cmp	r2, r3
 80118ee:	d301      	bcc.n	80118f4 <clust2sect+0x20>
 80118f0:	2300      	movs	r3, #0
 80118f2:	e008      	b.n	8011906 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	895b      	ldrh	r3, [r3, #10]
 80118f8:	461a      	mov	r2, r3
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	fb03 f202 	mul.w	r2, r3, r2
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011904:	4413      	add	r3, r2
}
 8011906:	4618      	mov	r0, r3
 8011908:	370c      	adds	r7, #12
 801190a:	46bd      	mov	sp, r7
 801190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011910:	4770      	bx	lr

08011912 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011912:	b580      	push	{r7, lr}
 8011914:	b086      	sub	sp, #24
 8011916:	af00      	add	r7, sp, #0
 8011918:	6078      	str	r0, [r7, #4]
 801191a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011922:	683b      	ldr	r3, [r7, #0]
 8011924:	2b01      	cmp	r3, #1
 8011926:	d904      	bls.n	8011932 <get_fat+0x20>
 8011928:	693b      	ldr	r3, [r7, #16]
 801192a:	69db      	ldr	r3, [r3, #28]
 801192c:	683a      	ldr	r2, [r7, #0]
 801192e:	429a      	cmp	r2, r3
 8011930:	d302      	bcc.n	8011938 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011932:	2301      	movs	r3, #1
 8011934:	617b      	str	r3, [r7, #20]
 8011936:	e0bb      	b.n	8011ab0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011938:	f04f 33ff 	mov.w	r3, #4294967295
 801193c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801193e:	693b      	ldr	r3, [r7, #16]
 8011940:	781b      	ldrb	r3, [r3, #0]
 8011942:	2b03      	cmp	r3, #3
 8011944:	f000 8083 	beq.w	8011a4e <get_fat+0x13c>
 8011948:	2b03      	cmp	r3, #3
 801194a:	f300 80a7 	bgt.w	8011a9c <get_fat+0x18a>
 801194e:	2b01      	cmp	r3, #1
 8011950:	d002      	beq.n	8011958 <get_fat+0x46>
 8011952:	2b02      	cmp	r3, #2
 8011954:	d056      	beq.n	8011a04 <get_fat+0xf2>
 8011956:	e0a1      	b.n	8011a9c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	60fb      	str	r3, [r7, #12]
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	085b      	lsrs	r3, r3, #1
 8011960:	68fa      	ldr	r2, [r7, #12]
 8011962:	4413      	add	r3, r2
 8011964:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	899b      	ldrh	r3, [r3, #12]
 801196e:	4619      	mov	r1, r3
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	fbb3 f3f1 	udiv	r3, r3, r1
 8011976:	4413      	add	r3, r2
 8011978:	4619      	mov	r1, r3
 801197a:	6938      	ldr	r0, [r7, #16]
 801197c:	f7ff ff0c 	bl	8011798 <move_window>
 8011980:	4603      	mov	r3, r0
 8011982:	2b00      	cmp	r3, #0
 8011984:	f040 808d 	bne.w	8011aa2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	1c5a      	adds	r2, r3, #1
 801198c:	60fa      	str	r2, [r7, #12]
 801198e:	693a      	ldr	r2, [r7, #16]
 8011990:	8992      	ldrh	r2, [r2, #12]
 8011992:	fbb3 f1f2 	udiv	r1, r3, r2
 8011996:	fb02 f201 	mul.w	r2, r2, r1
 801199a:	1a9b      	subs	r3, r3, r2
 801199c:	693a      	ldr	r2, [r7, #16]
 801199e:	4413      	add	r3, r2
 80119a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80119a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80119a6:	693b      	ldr	r3, [r7, #16]
 80119a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80119aa:	693b      	ldr	r3, [r7, #16]
 80119ac:	899b      	ldrh	r3, [r3, #12]
 80119ae:	4619      	mov	r1, r3
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80119b6:	4413      	add	r3, r2
 80119b8:	4619      	mov	r1, r3
 80119ba:	6938      	ldr	r0, [r7, #16]
 80119bc:	f7ff feec 	bl	8011798 <move_window>
 80119c0:	4603      	mov	r3, r0
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d16f      	bne.n	8011aa6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80119c6:	693b      	ldr	r3, [r7, #16]
 80119c8:	899b      	ldrh	r3, [r3, #12]
 80119ca:	461a      	mov	r2, r3
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80119d2:	fb02 f201 	mul.w	r2, r2, r1
 80119d6:	1a9b      	subs	r3, r3, r2
 80119d8:	693a      	ldr	r2, [r7, #16]
 80119da:	4413      	add	r3, r2
 80119dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80119e0:	021b      	lsls	r3, r3, #8
 80119e2:	461a      	mov	r2, r3
 80119e4:	68bb      	ldr	r3, [r7, #8]
 80119e6:	4313      	orrs	r3, r2
 80119e8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80119ea:	683b      	ldr	r3, [r7, #0]
 80119ec:	f003 0301 	and.w	r3, r3, #1
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d002      	beq.n	80119fa <get_fat+0xe8>
 80119f4:	68bb      	ldr	r3, [r7, #8]
 80119f6:	091b      	lsrs	r3, r3, #4
 80119f8:	e002      	b.n	8011a00 <get_fat+0xee>
 80119fa:	68bb      	ldr	r3, [r7, #8]
 80119fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011a00:	617b      	str	r3, [r7, #20]
			break;
 8011a02:	e055      	b.n	8011ab0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011a04:	693b      	ldr	r3, [r7, #16]
 8011a06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011a08:	693b      	ldr	r3, [r7, #16]
 8011a0a:	899b      	ldrh	r3, [r3, #12]
 8011a0c:	085b      	lsrs	r3, r3, #1
 8011a0e:	b29b      	uxth	r3, r3
 8011a10:	4619      	mov	r1, r3
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	fbb3 f3f1 	udiv	r3, r3, r1
 8011a18:	4413      	add	r3, r2
 8011a1a:	4619      	mov	r1, r3
 8011a1c:	6938      	ldr	r0, [r7, #16]
 8011a1e:	f7ff febb 	bl	8011798 <move_window>
 8011a22:	4603      	mov	r3, r0
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d140      	bne.n	8011aaa <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011a28:	693b      	ldr	r3, [r7, #16]
 8011a2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011a2e:	683b      	ldr	r3, [r7, #0]
 8011a30:	005b      	lsls	r3, r3, #1
 8011a32:	693a      	ldr	r2, [r7, #16]
 8011a34:	8992      	ldrh	r2, [r2, #12]
 8011a36:	fbb3 f0f2 	udiv	r0, r3, r2
 8011a3a:	fb02 f200 	mul.w	r2, r2, r0
 8011a3e:	1a9b      	subs	r3, r3, r2
 8011a40:	440b      	add	r3, r1
 8011a42:	4618      	mov	r0, r3
 8011a44:	f7ff fbf8 	bl	8011238 <ld_word>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	617b      	str	r3, [r7, #20]
			break;
 8011a4c:	e030      	b.n	8011ab0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011a4e:	693b      	ldr	r3, [r7, #16]
 8011a50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011a52:	693b      	ldr	r3, [r7, #16]
 8011a54:	899b      	ldrh	r3, [r3, #12]
 8011a56:	089b      	lsrs	r3, r3, #2
 8011a58:	b29b      	uxth	r3, r3
 8011a5a:	4619      	mov	r1, r3
 8011a5c:	683b      	ldr	r3, [r7, #0]
 8011a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011a62:	4413      	add	r3, r2
 8011a64:	4619      	mov	r1, r3
 8011a66:	6938      	ldr	r0, [r7, #16]
 8011a68:	f7ff fe96 	bl	8011798 <move_window>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d11d      	bne.n	8011aae <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	009b      	lsls	r3, r3, #2
 8011a7c:	693a      	ldr	r2, [r7, #16]
 8011a7e:	8992      	ldrh	r2, [r2, #12]
 8011a80:	fbb3 f0f2 	udiv	r0, r3, r2
 8011a84:	fb02 f200 	mul.w	r2, r2, r0
 8011a88:	1a9b      	subs	r3, r3, r2
 8011a8a:	440b      	add	r3, r1
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f7ff fbeb 	bl	8011268 <ld_dword>
 8011a92:	4603      	mov	r3, r0
 8011a94:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011a98:	617b      	str	r3, [r7, #20]
			break;
 8011a9a:	e009      	b.n	8011ab0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011a9c:	2301      	movs	r3, #1
 8011a9e:	617b      	str	r3, [r7, #20]
 8011aa0:	e006      	b.n	8011ab0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011aa2:	bf00      	nop
 8011aa4:	e004      	b.n	8011ab0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011aa6:	bf00      	nop
 8011aa8:	e002      	b.n	8011ab0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011aaa:	bf00      	nop
 8011aac:	e000      	b.n	8011ab0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011aae:	bf00      	nop
		}
	}

	return val;
 8011ab0:	697b      	ldr	r3, [r7, #20]
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3718      	adds	r7, #24
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}

08011aba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011aba:	b590      	push	{r4, r7, lr}
 8011abc:	b089      	sub	sp, #36	; 0x24
 8011abe:	af00      	add	r7, sp, #0
 8011ac0:	60f8      	str	r0, [r7, #12]
 8011ac2:	60b9      	str	r1, [r7, #8]
 8011ac4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011ac6:	2302      	movs	r3, #2
 8011ac8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011aca:	68bb      	ldr	r3, [r7, #8]
 8011acc:	2b01      	cmp	r3, #1
 8011ace:	f240 8102 	bls.w	8011cd6 <put_fat+0x21c>
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	69db      	ldr	r3, [r3, #28]
 8011ad6:	68ba      	ldr	r2, [r7, #8]
 8011ad8:	429a      	cmp	r2, r3
 8011ada:	f080 80fc 	bcs.w	8011cd6 <put_fat+0x21c>
		switch (fs->fs_type) {
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	781b      	ldrb	r3, [r3, #0]
 8011ae2:	2b03      	cmp	r3, #3
 8011ae4:	f000 80b6 	beq.w	8011c54 <put_fat+0x19a>
 8011ae8:	2b03      	cmp	r3, #3
 8011aea:	f300 80fd 	bgt.w	8011ce8 <put_fat+0x22e>
 8011aee:	2b01      	cmp	r3, #1
 8011af0:	d003      	beq.n	8011afa <put_fat+0x40>
 8011af2:	2b02      	cmp	r3, #2
 8011af4:	f000 8083 	beq.w	8011bfe <put_fat+0x144>
 8011af8:	e0f6      	b.n	8011ce8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011afa:	68bb      	ldr	r3, [r7, #8]
 8011afc:	61bb      	str	r3, [r7, #24]
 8011afe:	69bb      	ldr	r3, [r7, #24]
 8011b00:	085b      	lsrs	r3, r3, #1
 8011b02:	69ba      	ldr	r2, [r7, #24]
 8011b04:	4413      	add	r3, r2
 8011b06:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	899b      	ldrh	r3, [r3, #12]
 8011b10:	4619      	mov	r1, r3
 8011b12:	69bb      	ldr	r3, [r7, #24]
 8011b14:	fbb3 f3f1 	udiv	r3, r3, r1
 8011b18:	4413      	add	r3, r2
 8011b1a:	4619      	mov	r1, r3
 8011b1c:	68f8      	ldr	r0, [r7, #12]
 8011b1e:	f7ff fe3b 	bl	8011798 <move_window>
 8011b22:	4603      	mov	r3, r0
 8011b24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011b26:	7ffb      	ldrb	r3, [r7, #31]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	f040 80d6 	bne.w	8011cda <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011b34:	69bb      	ldr	r3, [r7, #24]
 8011b36:	1c5a      	adds	r2, r3, #1
 8011b38:	61ba      	str	r2, [r7, #24]
 8011b3a:	68fa      	ldr	r2, [r7, #12]
 8011b3c:	8992      	ldrh	r2, [r2, #12]
 8011b3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011b42:	fb02 f200 	mul.w	r2, r2, r0
 8011b46:	1a9b      	subs	r3, r3, r2
 8011b48:	440b      	add	r3, r1
 8011b4a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	f003 0301 	and.w	r3, r3, #1
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d00d      	beq.n	8011b72 <put_fat+0xb8>
 8011b56:	697b      	ldr	r3, [r7, #20]
 8011b58:	781b      	ldrb	r3, [r3, #0]
 8011b5a:	b25b      	sxtb	r3, r3
 8011b5c:	f003 030f 	and.w	r3, r3, #15
 8011b60:	b25a      	sxtb	r2, r3
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	b2db      	uxtb	r3, r3
 8011b66:	011b      	lsls	r3, r3, #4
 8011b68:	b25b      	sxtb	r3, r3
 8011b6a:	4313      	orrs	r3, r2
 8011b6c:	b25b      	sxtb	r3, r3
 8011b6e:	b2db      	uxtb	r3, r3
 8011b70:	e001      	b.n	8011b76 <put_fat+0xbc>
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	b2db      	uxtb	r3, r3
 8011b76:	697a      	ldr	r2, [r7, #20]
 8011b78:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	2201      	movs	r2, #1
 8011b7e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	899b      	ldrh	r3, [r3, #12]
 8011b88:	4619      	mov	r1, r3
 8011b8a:	69bb      	ldr	r3, [r7, #24]
 8011b8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011b90:	4413      	add	r3, r2
 8011b92:	4619      	mov	r1, r3
 8011b94:	68f8      	ldr	r0, [r7, #12]
 8011b96:	f7ff fdff 	bl	8011798 <move_window>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011b9e:	7ffb      	ldrb	r3, [r7, #31]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	f040 809c 	bne.w	8011cde <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	899b      	ldrh	r3, [r3, #12]
 8011bb0:	461a      	mov	r2, r3
 8011bb2:	69bb      	ldr	r3, [r7, #24]
 8011bb4:	fbb3 f0f2 	udiv	r0, r3, r2
 8011bb8:	fb02 f200 	mul.w	r2, r2, r0
 8011bbc:	1a9b      	subs	r3, r3, r2
 8011bbe:	440b      	add	r3, r1
 8011bc0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011bc2:	68bb      	ldr	r3, [r7, #8]
 8011bc4:	f003 0301 	and.w	r3, r3, #1
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d003      	beq.n	8011bd4 <put_fat+0x11a>
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	091b      	lsrs	r3, r3, #4
 8011bd0:	b2db      	uxtb	r3, r3
 8011bd2:	e00e      	b.n	8011bf2 <put_fat+0x138>
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	781b      	ldrb	r3, [r3, #0]
 8011bd8:	b25b      	sxtb	r3, r3
 8011bda:	f023 030f 	bic.w	r3, r3, #15
 8011bde:	b25a      	sxtb	r2, r3
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	0a1b      	lsrs	r3, r3, #8
 8011be4:	b25b      	sxtb	r3, r3
 8011be6:	f003 030f 	and.w	r3, r3, #15
 8011bea:	b25b      	sxtb	r3, r3
 8011bec:	4313      	orrs	r3, r2
 8011bee:	b25b      	sxtb	r3, r3
 8011bf0:	b2db      	uxtb	r3, r3
 8011bf2:	697a      	ldr	r2, [r7, #20]
 8011bf4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	2201      	movs	r2, #1
 8011bfa:	70da      	strb	r2, [r3, #3]
			break;
 8011bfc:	e074      	b.n	8011ce8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	899b      	ldrh	r3, [r3, #12]
 8011c06:	085b      	lsrs	r3, r3, #1
 8011c08:	b29b      	uxth	r3, r3
 8011c0a:	4619      	mov	r1, r3
 8011c0c:	68bb      	ldr	r3, [r7, #8]
 8011c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c12:	4413      	add	r3, r2
 8011c14:	4619      	mov	r1, r3
 8011c16:	68f8      	ldr	r0, [r7, #12]
 8011c18:	f7ff fdbe 	bl	8011798 <move_window>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011c20:	7ffb      	ldrb	r3, [r7, #31]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d15d      	bne.n	8011ce2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c2c:	68bb      	ldr	r3, [r7, #8]
 8011c2e:	005b      	lsls	r3, r3, #1
 8011c30:	68fa      	ldr	r2, [r7, #12]
 8011c32:	8992      	ldrh	r2, [r2, #12]
 8011c34:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c38:	fb02 f200 	mul.w	r2, r2, r0
 8011c3c:	1a9b      	subs	r3, r3, r2
 8011c3e:	440b      	add	r3, r1
 8011c40:	687a      	ldr	r2, [r7, #4]
 8011c42:	b292      	uxth	r2, r2
 8011c44:	4611      	mov	r1, r2
 8011c46:	4618      	mov	r0, r3
 8011c48:	f7ff fb31 	bl	80112ae <st_word>
			fs->wflag = 1;
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	2201      	movs	r2, #1
 8011c50:	70da      	strb	r2, [r3, #3]
			break;
 8011c52:	e049      	b.n	8011ce8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	899b      	ldrh	r3, [r3, #12]
 8011c5c:	089b      	lsrs	r3, r3, #2
 8011c5e:	b29b      	uxth	r3, r3
 8011c60:	4619      	mov	r1, r3
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c68:	4413      	add	r3, r2
 8011c6a:	4619      	mov	r1, r3
 8011c6c:	68f8      	ldr	r0, [r7, #12]
 8011c6e:	f7ff fd93 	bl	8011798 <move_window>
 8011c72:	4603      	mov	r3, r0
 8011c74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011c76:	7ffb      	ldrb	r3, [r7, #31]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d134      	bne.n	8011ce6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	009b      	lsls	r3, r3, #2
 8011c8c:	68fa      	ldr	r2, [r7, #12]
 8011c8e:	8992      	ldrh	r2, [r2, #12]
 8011c90:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c94:	fb02 f200 	mul.w	r2, r2, r0
 8011c98:	1a9b      	subs	r3, r3, r2
 8011c9a:	440b      	add	r3, r1
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f7ff fae3 	bl	8011268 <ld_dword>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011ca8:	4323      	orrs	r3, r4
 8011caa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	009b      	lsls	r3, r3, #2
 8011cb6:	68fa      	ldr	r2, [r7, #12]
 8011cb8:	8992      	ldrh	r2, [r2, #12]
 8011cba:	fbb3 f0f2 	udiv	r0, r3, r2
 8011cbe:	fb02 f200 	mul.w	r2, r2, r0
 8011cc2:	1a9b      	subs	r3, r3, r2
 8011cc4:	440b      	add	r3, r1
 8011cc6:	6879      	ldr	r1, [r7, #4]
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f7ff fb0b 	bl	80112e4 <st_dword>
			fs->wflag = 1;
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	2201      	movs	r2, #1
 8011cd2:	70da      	strb	r2, [r3, #3]
			break;
 8011cd4:	e008      	b.n	8011ce8 <put_fat+0x22e>
		}
	}
 8011cd6:	bf00      	nop
 8011cd8:	e006      	b.n	8011ce8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8011cda:	bf00      	nop
 8011cdc:	e004      	b.n	8011ce8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8011cde:	bf00      	nop
 8011ce0:	e002      	b.n	8011ce8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8011ce2:	bf00      	nop
 8011ce4:	e000      	b.n	8011ce8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8011ce6:	bf00      	nop
	return res;
 8011ce8:	7ffb      	ldrb	r3, [r7, #31]
}
 8011cea:	4618      	mov	r0, r3
 8011cec:	3724      	adds	r7, #36	; 0x24
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd90      	pop	{r4, r7, pc}

08011cf2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011cf2:	b580      	push	{r7, lr}
 8011cf4:	b088      	sub	sp, #32
 8011cf6:	af00      	add	r7, sp, #0
 8011cf8:	60f8      	str	r0, [r7, #12]
 8011cfa:	60b9      	str	r1, [r7, #8]
 8011cfc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011d08:	68bb      	ldr	r3, [r7, #8]
 8011d0a:	2b01      	cmp	r3, #1
 8011d0c:	d904      	bls.n	8011d18 <remove_chain+0x26>
 8011d0e:	69bb      	ldr	r3, [r7, #24]
 8011d10:	69db      	ldr	r3, [r3, #28]
 8011d12:	68ba      	ldr	r2, [r7, #8]
 8011d14:	429a      	cmp	r2, r3
 8011d16:	d301      	bcc.n	8011d1c <remove_chain+0x2a>
 8011d18:	2302      	movs	r3, #2
 8011d1a:	e04b      	b.n	8011db4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d00c      	beq.n	8011d3c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011d22:	f04f 32ff 	mov.w	r2, #4294967295
 8011d26:	6879      	ldr	r1, [r7, #4]
 8011d28:	69b8      	ldr	r0, [r7, #24]
 8011d2a:	f7ff fec6 	bl	8011aba <put_fat>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011d32:	7ffb      	ldrb	r3, [r7, #31]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d001      	beq.n	8011d3c <remove_chain+0x4a>
 8011d38:	7ffb      	ldrb	r3, [r7, #31]
 8011d3a:	e03b      	b.n	8011db4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011d3c:	68b9      	ldr	r1, [r7, #8]
 8011d3e:	68f8      	ldr	r0, [r7, #12]
 8011d40:	f7ff fde7 	bl	8011912 <get_fat>
 8011d44:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011d46:	697b      	ldr	r3, [r7, #20]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d031      	beq.n	8011db0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011d4c:	697b      	ldr	r3, [r7, #20]
 8011d4e:	2b01      	cmp	r3, #1
 8011d50:	d101      	bne.n	8011d56 <remove_chain+0x64>
 8011d52:	2302      	movs	r3, #2
 8011d54:	e02e      	b.n	8011db4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011d56:	697b      	ldr	r3, [r7, #20]
 8011d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d5c:	d101      	bne.n	8011d62 <remove_chain+0x70>
 8011d5e:	2301      	movs	r3, #1
 8011d60:	e028      	b.n	8011db4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011d62:	2200      	movs	r2, #0
 8011d64:	68b9      	ldr	r1, [r7, #8]
 8011d66:	69b8      	ldr	r0, [r7, #24]
 8011d68:	f7ff fea7 	bl	8011aba <put_fat>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011d70:	7ffb      	ldrb	r3, [r7, #31]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d001      	beq.n	8011d7a <remove_chain+0x88>
 8011d76:	7ffb      	ldrb	r3, [r7, #31]
 8011d78:	e01c      	b.n	8011db4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011d7a:	69bb      	ldr	r3, [r7, #24]
 8011d7c:	695a      	ldr	r2, [r3, #20]
 8011d7e:	69bb      	ldr	r3, [r7, #24]
 8011d80:	69db      	ldr	r3, [r3, #28]
 8011d82:	3b02      	subs	r3, #2
 8011d84:	429a      	cmp	r2, r3
 8011d86:	d20b      	bcs.n	8011da0 <remove_chain+0xae>
			fs->free_clst++;
 8011d88:	69bb      	ldr	r3, [r7, #24]
 8011d8a:	695b      	ldr	r3, [r3, #20]
 8011d8c:	1c5a      	adds	r2, r3, #1
 8011d8e:	69bb      	ldr	r3, [r7, #24]
 8011d90:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011d92:	69bb      	ldr	r3, [r7, #24]
 8011d94:	791b      	ldrb	r3, [r3, #4]
 8011d96:	f043 0301 	orr.w	r3, r3, #1
 8011d9a:	b2da      	uxtb	r2, r3
 8011d9c:	69bb      	ldr	r3, [r7, #24]
 8011d9e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011da0:	697b      	ldr	r3, [r7, #20]
 8011da2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011da4:	69bb      	ldr	r3, [r7, #24]
 8011da6:	69db      	ldr	r3, [r3, #28]
 8011da8:	68ba      	ldr	r2, [r7, #8]
 8011daa:	429a      	cmp	r2, r3
 8011dac:	d3c6      	bcc.n	8011d3c <remove_chain+0x4a>
 8011dae:	e000      	b.n	8011db2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011db0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011db2:	2300      	movs	r3, #0
}
 8011db4:	4618      	mov	r0, r3
 8011db6:	3720      	adds	r7, #32
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}

08011dbc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b088      	sub	sp, #32
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
 8011dc4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d10d      	bne.n	8011dee <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011dd2:	693b      	ldr	r3, [r7, #16]
 8011dd4:	691b      	ldr	r3, [r3, #16]
 8011dd6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011dd8:	69bb      	ldr	r3, [r7, #24]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d004      	beq.n	8011de8 <create_chain+0x2c>
 8011dde:	693b      	ldr	r3, [r7, #16]
 8011de0:	69db      	ldr	r3, [r3, #28]
 8011de2:	69ba      	ldr	r2, [r7, #24]
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d31b      	bcc.n	8011e20 <create_chain+0x64>
 8011de8:	2301      	movs	r3, #1
 8011dea:	61bb      	str	r3, [r7, #24]
 8011dec:	e018      	b.n	8011e20 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011dee:	6839      	ldr	r1, [r7, #0]
 8011df0:	6878      	ldr	r0, [r7, #4]
 8011df2:	f7ff fd8e 	bl	8011912 <get_fat>
 8011df6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	2b01      	cmp	r3, #1
 8011dfc:	d801      	bhi.n	8011e02 <create_chain+0x46>
 8011dfe:	2301      	movs	r3, #1
 8011e00:	e070      	b.n	8011ee4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e08:	d101      	bne.n	8011e0e <create_chain+0x52>
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	e06a      	b.n	8011ee4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011e0e:	693b      	ldr	r3, [r7, #16]
 8011e10:	69db      	ldr	r3, [r3, #28]
 8011e12:	68fa      	ldr	r2, [r7, #12]
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d201      	bcs.n	8011e1c <create_chain+0x60>
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	e063      	b.n	8011ee4 <create_chain+0x128>
		scl = clst;
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011e20:	69bb      	ldr	r3, [r7, #24]
 8011e22:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011e24:	69fb      	ldr	r3, [r7, #28]
 8011e26:	3301      	adds	r3, #1
 8011e28:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011e2a:	693b      	ldr	r3, [r7, #16]
 8011e2c:	69db      	ldr	r3, [r3, #28]
 8011e2e:	69fa      	ldr	r2, [r7, #28]
 8011e30:	429a      	cmp	r2, r3
 8011e32:	d307      	bcc.n	8011e44 <create_chain+0x88>
				ncl = 2;
 8011e34:	2302      	movs	r3, #2
 8011e36:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011e38:	69fa      	ldr	r2, [r7, #28]
 8011e3a:	69bb      	ldr	r3, [r7, #24]
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	d901      	bls.n	8011e44 <create_chain+0x88>
 8011e40:	2300      	movs	r3, #0
 8011e42:	e04f      	b.n	8011ee4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011e44:	69f9      	ldr	r1, [r7, #28]
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f7ff fd63 	bl	8011912 <get_fat>
 8011e4c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d00e      	beq.n	8011e72 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	2b01      	cmp	r3, #1
 8011e58:	d003      	beq.n	8011e62 <create_chain+0xa6>
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e60:	d101      	bne.n	8011e66 <create_chain+0xaa>
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	e03e      	b.n	8011ee4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011e66:	69fa      	ldr	r2, [r7, #28]
 8011e68:	69bb      	ldr	r3, [r7, #24]
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	d1da      	bne.n	8011e24 <create_chain+0x68>
 8011e6e:	2300      	movs	r3, #0
 8011e70:	e038      	b.n	8011ee4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011e72:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011e74:	f04f 32ff 	mov.w	r2, #4294967295
 8011e78:	69f9      	ldr	r1, [r7, #28]
 8011e7a:	6938      	ldr	r0, [r7, #16]
 8011e7c:	f7ff fe1d 	bl	8011aba <put_fat>
 8011e80:	4603      	mov	r3, r0
 8011e82:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011e84:	7dfb      	ldrb	r3, [r7, #23]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d109      	bne.n	8011e9e <create_chain+0xe2>
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d006      	beq.n	8011e9e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011e90:	69fa      	ldr	r2, [r7, #28]
 8011e92:	6839      	ldr	r1, [r7, #0]
 8011e94:	6938      	ldr	r0, [r7, #16]
 8011e96:	f7ff fe10 	bl	8011aba <put_fat>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011e9e:	7dfb      	ldrb	r3, [r7, #23]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d116      	bne.n	8011ed2 <create_chain+0x116>
		fs->last_clst = ncl;
 8011ea4:	693b      	ldr	r3, [r7, #16]
 8011ea6:	69fa      	ldr	r2, [r7, #28]
 8011ea8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011eaa:	693b      	ldr	r3, [r7, #16]
 8011eac:	695a      	ldr	r2, [r3, #20]
 8011eae:	693b      	ldr	r3, [r7, #16]
 8011eb0:	69db      	ldr	r3, [r3, #28]
 8011eb2:	3b02      	subs	r3, #2
 8011eb4:	429a      	cmp	r2, r3
 8011eb6:	d804      	bhi.n	8011ec2 <create_chain+0x106>
 8011eb8:	693b      	ldr	r3, [r7, #16]
 8011eba:	695b      	ldr	r3, [r3, #20]
 8011ebc:	1e5a      	subs	r2, r3, #1
 8011ebe:	693b      	ldr	r3, [r7, #16]
 8011ec0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011ec2:	693b      	ldr	r3, [r7, #16]
 8011ec4:	791b      	ldrb	r3, [r3, #4]
 8011ec6:	f043 0301 	orr.w	r3, r3, #1
 8011eca:	b2da      	uxtb	r2, r3
 8011ecc:	693b      	ldr	r3, [r7, #16]
 8011ece:	711a      	strb	r2, [r3, #4]
 8011ed0:	e007      	b.n	8011ee2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011ed2:	7dfb      	ldrb	r3, [r7, #23]
 8011ed4:	2b01      	cmp	r3, #1
 8011ed6:	d102      	bne.n	8011ede <create_chain+0x122>
 8011ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8011edc:	e000      	b.n	8011ee0 <create_chain+0x124>
 8011ede:	2301      	movs	r3, #1
 8011ee0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011ee2:	69fb      	ldr	r3, [r7, #28]
}
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	3720      	adds	r7, #32
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	bd80      	pop	{r7, pc}

08011eec <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011eec:	b480      	push	{r7}
 8011eee:	b087      	sub	sp, #28
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
 8011ef4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f00:	3304      	adds	r3, #4
 8011f02:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	899b      	ldrh	r3, [r3, #12]
 8011f08:	461a      	mov	r2, r3
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f10:	68fa      	ldr	r2, [r7, #12]
 8011f12:	8952      	ldrh	r2, [r2, #10]
 8011f14:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f18:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011f1a:	693b      	ldr	r3, [r7, #16]
 8011f1c:	1d1a      	adds	r2, r3, #4
 8011f1e:	613a      	str	r2, [r7, #16]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011f24:	68bb      	ldr	r3, [r7, #8]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d101      	bne.n	8011f2e <clmt_clust+0x42>
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	e010      	b.n	8011f50 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011f2e:	697a      	ldr	r2, [r7, #20]
 8011f30:	68bb      	ldr	r3, [r7, #8]
 8011f32:	429a      	cmp	r2, r3
 8011f34:	d307      	bcc.n	8011f46 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011f36:	697a      	ldr	r2, [r7, #20]
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	1ad3      	subs	r3, r2, r3
 8011f3c:	617b      	str	r3, [r7, #20]
 8011f3e:	693b      	ldr	r3, [r7, #16]
 8011f40:	3304      	adds	r3, #4
 8011f42:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011f44:	e7e9      	b.n	8011f1a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011f46:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011f48:	693b      	ldr	r3, [r7, #16]
 8011f4a:	681a      	ldr	r2, [r3, #0]
 8011f4c:	697b      	ldr	r3, [r7, #20]
 8011f4e:	4413      	add	r3, r2
}
 8011f50:	4618      	mov	r0, r3
 8011f52:	371c      	adds	r7, #28
 8011f54:	46bd      	mov	sp, r7
 8011f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5a:	4770      	bx	lr

08011f5c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b086      	sub	sp, #24
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
 8011f64:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011f6c:	683b      	ldr	r3, [r7, #0]
 8011f6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011f72:	d204      	bcs.n	8011f7e <dir_sdi+0x22>
 8011f74:	683b      	ldr	r3, [r7, #0]
 8011f76:	f003 031f 	and.w	r3, r3, #31
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d001      	beq.n	8011f82 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011f7e:	2302      	movs	r3, #2
 8011f80:	e071      	b.n	8012066 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	683a      	ldr	r2, [r7, #0]
 8011f86:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	689b      	ldr	r3, [r3, #8]
 8011f8c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011f8e:	697b      	ldr	r3, [r7, #20]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d106      	bne.n	8011fa2 <dir_sdi+0x46>
 8011f94:	693b      	ldr	r3, [r7, #16]
 8011f96:	781b      	ldrb	r3, [r3, #0]
 8011f98:	2b02      	cmp	r3, #2
 8011f9a:	d902      	bls.n	8011fa2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011f9c:	693b      	ldr	r3, [r7, #16]
 8011f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fa0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011fa2:	697b      	ldr	r3, [r7, #20]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d10c      	bne.n	8011fc2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011fa8:	683b      	ldr	r3, [r7, #0]
 8011faa:	095b      	lsrs	r3, r3, #5
 8011fac:	693a      	ldr	r2, [r7, #16]
 8011fae:	8912      	ldrh	r2, [r2, #8]
 8011fb0:	4293      	cmp	r3, r2
 8011fb2:	d301      	bcc.n	8011fb8 <dir_sdi+0x5c>
 8011fb4:	2302      	movs	r3, #2
 8011fb6:	e056      	b.n	8012066 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8011fb8:	693b      	ldr	r3, [r7, #16]
 8011fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	61da      	str	r2, [r3, #28]
 8011fc0:	e02d      	b.n	801201e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011fc2:	693b      	ldr	r3, [r7, #16]
 8011fc4:	895b      	ldrh	r3, [r3, #10]
 8011fc6:	461a      	mov	r2, r3
 8011fc8:	693b      	ldr	r3, [r7, #16]
 8011fca:	899b      	ldrh	r3, [r3, #12]
 8011fcc:	fb03 f302 	mul.w	r3, r3, r2
 8011fd0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011fd2:	e019      	b.n	8012008 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6979      	ldr	r1, [r7, #20]
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f7ff fc9a 	bl	8011912 <get_fat>
 8011fde:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011fe0:	697b      	ldr	r3, [r7, #20]
 8011fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fe6:	d101      	bne.n	8011fec <dir_sdi+0x90>
 8011fe8:	2301      	movs	r3, #1
 8011fea:	e03c      	b.n	8012066 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011fec:	697b      	ldr	r3, [r7, #20]
 8011fee:	2b01      	cmp	r3, #1
 8011ff0:	d904      	bls.n	8011ffc <dir_sdi+0xa0>
 8011ff2:	693b      	ldr	r3, [r7, #16]
 8011ff4:	69db      	ldr	r3, [r3, #28]
 8011ff6:	697a      	ldr	r2, [r7, #20]
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d301      	bcc.n	8012000 <dir_sdi+0xa4>
 8011ffc:	2302      	movs	r3, #2
 8011ffe:	e032      	b.n	8012066 <dir_sdi+0x10a>
			ofs -= csz;
 8012000:	683a      	ldr	r2, [r7, #0]
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	1ad3      	subs	r3, r2, r3
 8012006:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012008:	683a      	ldr	r2, [r7, #0]
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	429a      	cmp	r2, r3
 801200e:	d2e1      	bcs.n	8011fd4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8012010:	6979      	ldr	r1, [r7, #20]
 8012012:	6938      	ldr	r0, [r7, #16]
 8012014:	f7ff fc5e 	bl	80118d4 <clust2sect>
 8012018:	4602      	mov	r2, r0
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	697a      	ldr	r2, [r7, #20]
 8012022:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	69db      	ldr	r3, [r3, #28]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d101      	bne.n	8012030 <dir_sdi+0xd4>
 801202c:	2302      	movs	r3, #2
 801202e:	e01a      	b.n	8012066 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	69da      	ldr	r2, [r3, #28]
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	899b      	ldrh	r3, [r3, #12]
 8012038:	4619      	mov	r1, r3
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	fbb3 f3f1 	udiv	r3, r3, r1
 8012040:	441a      	add	r2, r3
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012046:	693b      	ldr	r3, [r7, #16]
 8012048:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801204c:	693b      	ldr	r3, [r7, #16]
 801204e:	899b      	ldrh	r3, [r3, #12]
 8012050:	461a      	mov	r2, r3
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	fbb3 f0f2 	udiv	r0, r3, r2
 8012058:	fb02 f200 	mul.w	r2, r2, r0
 801205c:	1a9b      	subs	r3, r3, r2
 801205e:	18ca      	adds	r2, r1, r3
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012064:	2300      	movs	r3, #0
}
 8012066:	4618      	mov	r0, r3
 8012068:	3718      	adds	r7, #24
 801206a:	46bd      	mov	sp, r7
 801206c:	bd80      	pop	{r7, pc}

0801206e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801206e:	b580      	push	{r7, lr}
 8012070:	b086      	sub	sp, #24
 8012072:	af00      	add	r7, sp, #0
 8012074:	6078      	str	r0, [r7, #4]
 8012076:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	695b      	ldr	r3, [r3, #20]
 8012082:	3320      	adds	r3, #32
 8012084:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	69db      	ldr	r3, [r3, #28]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d003      	beq.n	8012096 <dir_next+0x28>
 801208e:	68bb      	ldr	r3, [r7, #8]
 8012090:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012094:	d301      	bcc.n	801209a <dir_next+0x2c>
 8012096:	2304      	movs	r3, #4
 8012098:	e0bb      	b.n	8012212 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	899b      	ldrh	r3, [r3, #12]
 801209e:	461a      	mov	r2, r3
 80120a0:	68bb      	ldr	r3, [r7, #8]
 80120a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80120a6:	fb02 f201 	mul.w	r2, r2, r1
 80120aa:	1a9b      	subs	r3, r3, r2
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	f040 809d 	bne.w	80121ec <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	69db      	ldr	r3, [r3, #28]
 80120b6:	1c5a      	adds	r2, r3, #1
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	699b      	ldr	r3, [r3, #24]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d10b      	bne.n	80120dc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	095b      	lsrs	r3, r3, #5
 80120c8:	68fa      	ldr	r2, [r7, #12]
 80120ca:	8912      	ldrh	r2, [r2, #8]
 80120cc:	4293      	cmp	r3, r2
 80120ce:	f0c0 808d 	bcc.w	80121ec <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2200      	movs	r2, #0
 80120d6:	61da      	str	r2, [r3, #28]
 80120d8:	2304      	movs	r3, #4
 80120da:	e09a      	b.n	8012212 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	899b      	ldrh	r3, [r3, #12]
 80120e0:	461a      	mov	r2, r3
 80120e2:	68bb      	ldr	r3, [r7, #8]
 80120e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80120e8:	68fa      	ldr	r2, [r7, #12]
 80120ea:	8952      	ldrh	r2, [r2, #10]
 80120ec:	3a01      	subs	r2, #1
 80120ee:	4013      	ands	r3, r2
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d17b      	bne.n	80121ec <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80120f4:	687a      	ldr	r2, [r7, #4]
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	699b      	ldr	r3, [r3, #24]
 80120fa:	4619      	mov	r1, r3
 80120fc:	4610      	mov	r0, r2
 80120fe:	f7ff fc08 	bl	8011912 <get_fat>
 8012102:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012104:	697b      	ldr	r3, [r7, #20]
 8012106:	2b01      	cmp	r3, #1
 8012108:	d801      	bhi.n	801210e <dir_next+0xa0>
 801210a:	2302      	movs	r3, #2
 801210c:	e081      	b.n	8012212 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801210e:	697b      	ldr	r3, [r7, #20]
 8012110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012114:	d101      	bne.n	801211a <dir_next+0xac>
 8012116:	2301      	movs	r3, #1
 8012118:	e07b      	b.n	8012212 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	69db      	ldr	r3, [r3, #28]
 801211e:	697a      	ldr	r2, [r7, #20]
 8012120:	429a      	cmp	r2, r3
 8012122:	d359      	bcc.n	80121d8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012124:	683b      	ldr	r3, [r7, #0]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d104      	bne.n	8012134 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	2200      	movs	r2, #0
 801212e:	61da      	str	r2, [r3, #28]
 8012130:	2304      	movs	r3, #4
 8012132:	e06e      	b.n	8012212 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012134:	687a      	ldr	r2, [r7, #4]
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	699b      	ldr	r3, [r3, #24]
 801213a:	4619      	mov	r1, r3
 801213c:	4610      	mov	r0, r2
 801213e:	f7ff fe3d 	bl	8011dbc <create_chain>
 8012142:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012144:	697b      	ldr	r3, [r7, #20]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d101      	bne.n	801214e <dir_next+0xe0>
 801214a:	2307      	movs	r3, #7
 801214c:	e061      	b.n	8012212 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801214e:	697b      	ldr	r3, [r7, #20]
 8012150:	2b01      	cmp	r3, #1
 8012152:	d101      	bne.n	8012158 <dir_next+0xea>
 8012154:	2302      	movs	r3, #2
 8012156:	e05c      	b.n	8012212 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801215e:	d101      	bne.n	8012164 <dir_next+0xf6>
 8012160:	2301      	movs	r3, #1
 8012162:	e056      	b.n	8012212 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012164:	68f8      	ldr	r0, [r7, #12]
 8012166:	f7ff fad3 	bl	8011710 <sync_window>
 801216a:	4603      	mov	r3, r0
 801216c:	2b00      	cmp	r3, #0
 801216e:	d001      	beq.n	8012174 <dir_next+0x106>
 8012170:	2301      	movs	r3, #1
 8012172:	e04e      	b.n	8012212 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	899b      	ldrh	r3, [r3, #12]
 801217e:	461a      	mov	r2, r3
 8012180:	2100      	movs	r1, #0
 8012182:	f7ff f8fc 	bl	801137e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012186:	2300      	movs	r3, #0
 8012188:	613b      	str	r3, [r7, #16]
 801218a:	6979      	ldr	r1, [r7, #20]
 801218c:	68f8      	ldr	r0, [r7, #12]
 801218e:	f7ff fba1 	bl	80118d4 <clust2sect>
 8012192:	4602      	mov	r2, r0
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	635a      	str	r2, [r3, #52]	; 0x34
 8012198:	e012      	b.n	80121c0 <dir_next+0x152>
						fs->wflag = 1;
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	2201      	movs	r2, #1
 801219e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80121a0:	68f8      	ldr	r0, [r7, #12]
 80121a2:	f7ff fab5 	bl	8011710 <sync_window>
 80121a6:	4603      	mov	r3, r0
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d001      	beq.n	80121b0 <dir_next+0x142>
 80121ac:	2301      	movs	r3, #1
 80121ae:	e030      	b.n	8012212 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80121b0:	693b      	ldr	r3, [r7, #16]
 80121b2:	3301      	adds	r3, #1
 80121b4:	613b      	str	r3, [r7, #16]
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121ba:	1c5a      	adds	r2, r3, #1
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	635a      	str	r2, [r3, #52]	; 0x34
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	895b      	ldrh	r3, [r3, #10]
 80121c4:	461a      	mov	r2, r3
 80121c6:	693b      	ldr	r3, [r7, #16]
 80121c8:	4293      	cmp	r3, r2
 80121ca:	d3e6      	bcc.n	801219a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80121d0:	693b      	ldr	r3, [r7, #16]
 80121d2:	1ad2      	subs	r2, r2, r3
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	697a      	ldr	r2, [r7, #20]
 80121dc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80121de:	6979      	ldr	r1, [r7, #20]
 80121e0:	68f8      	ldr	r0, [r7, #12]
 80121e2:	f7ff fb77 	bl	80118d4 <clust2sect>
 80121e6:	4602      	mov	r2, r0
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	68ba      	ldr	r2, [r7, #8]
 80121f0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	899b      	ldrh	r3, [r3, #12]
 80121fc:	461a      	mov	r2, r3
 80121fe:	68bb      	ldr	r3, [r7, #8]
 8012200:	fbb3 f0f2 	udiv	r0, r3, r2
 8012204:	fb02 f200 	mul.w	r2, r2, r0
 8012208:	1a9b      	subs	r3, r3, r2
 801220a:	18ca      	adds	r2, r1, r3
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012210:	2300      	movs	r3, #0
}
 8012212:	4618      	mov	r0, r3
 8012214:	3718      	adds	r7, #24
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}

0801221a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801221a:	b580      	push	{r7, lr}
 801221c:	b086      	sub	sp, #24
 801221e:	af00      	add	r7, sp, #0
 8012220:	6078      	str	r0, [r7, #4]
 8012222:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801222a:	2100      	movs	r1, #0
 801222c:	6878      	ldr	r0, [r7, #4]
 801222e:	f7ff fe95 	bl	8011f5c <dir_sdi>
 8012232:	4603      	mov	r3, r0
 8012234:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012236:	7dfb      	ldrb	r3, [r7, #23]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d12b      	bne.n	8012294 <dir_alloc+0x7a>
		n = 0;
 801223c:	2300      	movs	r3, #0
 801223e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	69db      	ldr	r3, [r3, #28]
 8012244:	4619      	mov	r1, r3
 8012246:	68f8      	ldr	r0, [r7, #12]
 8012248:	f7ff faa6 	bl	8011798 <move_window>
 801224c:	4603      	mov	r3, r0
 801224e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012250:	7dfb      	ldrb	r3, [r7, #23]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d11d      	bne.n	8012292 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	6a1b      	ldr	r3, [r3, #32]
 801225a:	781b      	ldrb	r3, [r3, #0]
 801225c:	2be5      	cmp	r3, #229	; 0xe5
 801225e:	d004      	beq.n	801226a <dir_alloc+0x50>
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	6a1b      	ldr	r3, [r3, #32]
 8012264:	781b      	ldrb	r3, [r3, #0]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d107      	bne.n	801227a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801226a:	693b      	ldr	r3, [r7, #16]
 801226c:	3301      	adds	r3, #1
 801226e:	613b      	str	r3, [r7, #16]
 8012270:	693a      	ldr	r2, [r7, #16]
 8012272:	683b      	ldr	r3, [r7, #0]
 8012274:	429a      	cmp	r2, r3
 8012276:	d102      	bne.n	801227e <dir_alloc+0x64>
 8012278:	e00c      	b.n	8012294 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801227a:	2300      	movs	r3, #0
 801227c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801227e:	2101      	movs	r1, #1
 8012280:	6878      	ldr	r0, [r7, #4]
 8012282:	f7ff fef4 	bl	801206e <dir_next>
 8012286:	4603      	mov	r3, r0
 8012288:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801228a:	7dfb      	ldrb	r3, [r7, #23]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d0d7      	beq.n	8012240 <dir_alloc+0x26>
 8012290:	e000      	b.n	8012294 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012292:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012294:	7dfb      	ldrb	r3, [r7, #23]
 8012296:	2b04      	cmp	r3, #4
 8012298:	d101      	bne.n	801229e <dir_alloc+0x84>
 801229a:	2307      	movs	r3, #7
 801229c:	75fb      	strb	r3, [r7, #23]
	return res;
 801229e:	7dfb      	ldrb	r3, [r7, #23]
}
 80122a0:	4618      	mov	r0, r3
 80122a2:	3718      	adds	r7, #24
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}

080122a8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b084      	sub	sp, #16
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
 80122b0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	331a      	adds	r3, #26
 80122b6:	4618      	mov	r0, r3
 80122b8:	f7fe ffbe 	bl	8011238 <ld_word>
 80122bc:	4603      	mov	r3, r0
 80122be:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	781b      	ldrb	r3, [r3, #0]
 80122c4:	2b03      	cmp	r3, #3
 80122c6:	d109      	bne.n	80122dc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	3314      	adds	r3, #20
 80122cc:	4618      	mov	r0, r3
 80122ce:	f7fe ffb3 	bl	8011238 <ld_word>
 80122d2:	4603      	mov	r3, r0
 80122d4:	041b      	lsls	r3, r3, #16
 80122d6:	68fa      	ldr	r2, [r7, #12]
 80122d8:	4313      	orrs	r3, r2
 80122da:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80122dc:	68fb      	ldr	r3, [r7, #12]
}
 80122de:	4618      	mov	r0, r3
 80122e0:	3710      	adds	r7, #16
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}

080122e6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80122e6:	b580      	push	{r7, lr}
 80122e8:	b084      	sub	sp, #16
 80122ea:	af00      	add	r7, sp, #0
 80122ec:	60f8      	str	r0, [r7, #12]
 80122ee:	60b9      	str	r1, [r7, #8]
 80122f0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80122f2:	68bb      	ldr	r3, [r7, #8]
 80122f4:	331a      	adds	r3, #26
 80122f6:	687a      	ldr	r2, [r7, #4]
 80122f8:	b292      	uxth	r2, r2
 80122fa:	4611      	mov	r1, r2
 80122fc:	4618      	mov	r0, r3
 80122fe:	f7fe ffd6 	bl	80112ae <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	781b      	ldrb	r3, [r3, #0]
 8012306:	2b03      	cmp	r3, #3
 8012308:	d109      	bne.n	801231e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801230a:	68bb      	ldr	r3, [r7, #8]
 801230c:	f103 0214 	add.w	r2, r3, #20
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	0c1b      	lsrs	r3, r3, #16
 8012314:	b29b      	uxth	r3, r3
 8012316:	4619      	mov	r1, r3
 8012318:	4610      	mov	r0, r2
 801231a:	f7fe ffc8 	bl	80112ae <st_word>
	}
}
 801231e:	bf00      	nop
 8012320:	3710      	adds	r7, #16
 8012322:	46bd      	mov	sp, r7
 8012324:	bd80      	pop	{r7, pc}

08012326 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012326:	b580      	push	{r7, lr}
 8012328:	b086      	sub	sp, #24
 801232a:	af00      	add	r7, sp, #0
 801232c:	6078      	str	r0, [r7, #4]
 801232e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012330:	2304      	movs	r3, #4
 8012332:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801233a:	e03c      	b.n	80123b6 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	69db      	ldr	r3, [r3, #28]
 8012340:	4619      	mov	r1, r3
 8012342:	6938      	ldr	r0, [r7, #16]
 8012344:	f7ff fa28 	bl	8011798 <move_window>
 8012348:	4603      	mov	r3, r0
 801234a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801234c:	7dfb      	ldrb	r3, [r7, #23]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d136      	bne.n	80123c0 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	6a1b      	ldr	r3, [r3, #32]
 8012356:	781b      	ldrb	r3, [r3, #0]
 8012358:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 801235a:	7bfb      	ldrb	r3, [r7, #15]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d102      	bne.n	8012366 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012360:	2304      	movs	r3, #4
 8012362:	75fb      	strb	r3, [r7, #23]
 8012364:	e031      	b.n	80123ca <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	6a1b      	ldr	r3, [r3, #32]
 801236a:	330b      	adds	r3, #11
 801236c:	781b      	ldrb	r3, [r3, #0]
 801236e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012372:	73bb      	strb	r3, [r7, #14]
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	7bba      	ldrb	r2, [r7, #14]
 8012378:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 801237a:	7bfb      	ldrb	r3, [r7, #15]
 801237c:	2be5      	cmp	r3, #229	; 0xe5
 801237e:	d011      	beq.n	80123a4 <dir_read+0x7e>
 8012380:	7bfb      	ldrb	r3, [r7, #15]
 8012382:	2b2e      	cmp	r3, #46	; 0x2e
 8012384:	d00e      	beq.n	80123a4 <dir_read+0x7e>
 8012386:	7bbb      	ldrb	r3, [r7, #14]
 8012388:	2b0f      	cmp	r3, #15
 801238a:	d00b      	beq.n	80123a4 <dir_read+0x7e>
 801238c:	7bbb      	ldrb	r3, [r7, #14]
 801238e:	f023 0320 	bic.w	r3, r3, #32
 8012392:	2b08      	cmp	r3, #8
 8012394:	bf0c      	ite	eq
 8012396:	2301      	moveq	r3, #1
 8012398:	2300      	movne	r3, #0
 801239a:	b2db      	uxtb	r3, r3
 801239c:	461a      	mov	r2, r3
 801239e:	683b      	ldr	r3, [r7, #0]
 80123a0:	4293      	cmp	r3, r2
 80123a2:	d00f      	beq.n	80123c4 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80123a4:	2100      	movs	r1, #0
 80123a6:	6878      	ldr	r0, [r7, #4]
 80123a8:	f7ff fe61 	bl	801206e <dir_next>
 80123ac:	4603      	mov	r3, r0
 80123ae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80123b0:	7dfb      	ldrb	r3, [r7, #23]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d108      	bne.n	80123c8 <dir_read+0xa2>
	while (dp->sect) {
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	69db      	ldr	r3, [r3, #28]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d1be      	bne.n	801233c <dir_read+0x16>
 80123be:	e004      	b.n	80123ca <dir_read+0xa4>
		if (res != FR_OK) break;
 80123c0:	bf00      	nop
 80123c2:	e002      	b.n	80123ca <dir_read+0xa4>
				break;
 80123c4:	bf00      	nop
 80123c6:	e000      	b.n	80123ca <dir_read+0xa4>
		if (res != FR_OK) break;
 80123c8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80123ca:	7dfb      	ldrb	r3, [r7, #23]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d002      	beq.n	80123d6 <dir_read+0xb0>
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2200      	movs	r2, #0
 80123d4:	61da      	str	r2, [r3, #28]
	return res;
 80123d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80123d8:	4618      	mov	r0, r3
 80123da:	3718      	adds	r7, #24
 80123dc:	46bd      	mov	sp, r7
 80123de:	bd80      	pop	{r7, pc}

080123e0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b086      	sub	sp, #24
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80123ee:	2100      	movs	r1, #0
 80123f0:	6878      	ldr	r0, [r7, #4]
 80123f2:	f7ff fdb3 	bl	8011f5c <dir_sdi>
 80123f6:	4603      	mov	r3, r0
 80123f8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80123fa:	7dfb      	ldrb	r3, [r7, #23]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d001      	beq.n	8012404 <dir_find+0x24>
 8012400:	7dfb      	ldrb	r3, [r7, #23]
 8012402:	e03e      	b.n	8012482 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	69db      	ldr	r3, [r3, #28]
 8012408:	4619      	mov	r1, r3
 801240a:	6938      	ldr	r0, [r7, #16]
 801240c:	f7ff f9c4 	bl	8011798 <move_window>
 8012410:	4603      	mov	r3, r0
 8012412:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012414:	7dfb      	ldrb	r3, [r7, #23]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d12f      	bne.n	801247a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6a1b      	ldr	r3, [r3, #32]
 801241e:	781b      	ldrb	r3, [r3, #0]
 8012420:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012422:	7bfb      	ldrb	r3, [r7, #15]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d102      	bne.n	801242e <dir_find+0x4e>
 8012428:	2304      	movs	r3, #4
 801242a:	75fb      	strb	r3, [r7, #23]
 801242c:	e028      	b.n	8012480 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	6a1b      	ldr	r3, [r3, #32]
 8012432:	330b      	adds	r3, #11
 8012434:	781b      	ldrb	r3, [r3, #0]
 8012436:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801243a:	b2da      	uxtb	r2, r3
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	6a1b      	ldr	r3, [r3, #32]
 8012444:	330b      	adds	r3, #11
 8012446:	781b      	ldrb	r3, [r3, #0]
 8012448:	f003 0308 	and.w	r3, r3, #8
 801244c:	2b00      	cmp	r3, #0
 801244e:	d10a      	bne.n	8012466 <dir_find+0x86>
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	6a18      	ldr	r0, [r3, #32]
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	3324      	adds	r3, #36	; 0x24
 8012458:	220b      	movs	r2, #11
 801245a:	4619      	mov	r1, r3
 801245c:	f7fe ffaa 	bl	80113b4 <mem_cmp>
 8012460:	4603      	mov	r3, r0
 8012462:	2b00      	cmp	r3, #0
 8012464:	d00b      	beq.n	801247e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012466:	2100      	movs	r1, #0
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f7ff fe00 	bl	801206e <dir_next>
 801246e:	4603      	mov	r3, r0
 8012470:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012472:	7dfb      	ldrb	r3, [r7, #23]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d0c5      	beq.n	8012404 <dir_find+0x24>
 8012478:	e002      	b.n	8012480 <dir_find+0xa0>
		if (res != FR_OK) break;
 801247a:	bf00      	nop
 801247c:	e000      	b.n	8012480 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801247e:	bf00      	nop

	return res;
 8012480:	7dfb      	ldrb	r3, [r7, #23]
}
 8012482:	4618      	mov	r0, r3
 8012484:	3718      	adds	r7, #24
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}

0801248a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801248a:	b580      	push	{r7, lr}
 801248c:	b084      	sub	sp, #16
 801248e:	af00      	add	r7, sp, #0
 8012490:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012498:	2101      	movs	r1, #1
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	f7ff febd 	bl	801221a <dir_alloc>
 80124a0:	4603      	mov	r3, r0
 80124a2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80124a4:	7bfb      	ldrb	r3, [r7, #15]
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d11c      	bne.n	80124e4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	69db      	ldr	r3, [r3, #28]
 80124ae:	4619      	mov	r1, r3
 80124b0:	68b8      	ldr	r0, [r7, #8]
 80124b2:	f7ff f971 	bl	8011798 <move_window>
 80124b6:	4603      	mov	r3, r0
 80124b8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80124ba:	7bfb      	ldrb	r3, [r7, #15]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d111      	bne.n	80124e4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	6a1b      	ldr	r3, [r3, #32]
 80124c4:	2220      	movs	r2, #32
 80124c6:	2100      	movs	r1, #0
 80124c8:	4618      	mov	r0, r3
 80124ca:	f7fe ff58 	bl	801137e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	6a18      	ldr	r0, [r3, #32]
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	3324      	adds	r3, #36	; 0x24
 80124d6:	220b      	movs	r2, #11
 80124d8:	4619      	mov	r1, r3
 80124da:	f7fe ff2f 	bl	801133c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80124de:	68bb      	ldr	r3, [r7, #8]
 80124e0:	2201      	movs	r2, #1
 80124e2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80124e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	3710      	adds	r7, #16
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}

080124ee <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80124ee:	b580      	push	{r7, lr}
 80124f0:	b084      	sub	sp, #16
 80124f2:	af00      	add	r7, sp, #0
 80124f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	69db      	ldr	r3, [r3, #28]
 8012500:	4619      	mov	r1, r3
 8012502:	68f8      	ldr	r0, [r7, #12]
 8012504:	f7ff f948 	bl	8011798 <move_window>
 8012508:	4603      	mov	r3, r0
 801250a:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 801250c:	7afb      	ldrb	r3, [r7, #11]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d106      	bne.n	8012520 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	6a1b      	ldr	r3, [r3, #32]
 8012516:	22e5      	movs	r2, #229	; 0xe5
 8012518:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	2201      	movs	r2, #1
 801251e:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012520:	7afb      	ldrb	r3, [r7, #11]
}
 8012522:	4618      	mov	r0, r3
 8012524:	3710      	adds	r7, #16
 8012526:	46bd      	mov	sp, r7
 8012528:	bd80      	pop	{r7, pc}
	...

0801252c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b088      	sub	sp, #32
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
 8012534:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012536:	683b      	ldr	r3, [r7, #0]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	60fb      	str	r3, [r7, #12]
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	3324      	adds	r3, #36	; 0x24
 8012540:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012542:	220b      	movs	r2, #11
 8012544:	2120      	movs	r1, #32
 8012546:	68b8      	ldr	r0, [r7, #8]
 8012548:	f7fe ff19 	bl	801137e <mem_set>
	si = i = 0; ni = 8;
 801254c:	2300      	movs	r3, #0
 801254e:	613b      	str	r3, [r7, #16]
 8012550:	693b      	ldr	r3, [r7, #16]
 8012552:	61fb      	str	r3, [r7, #28]
 8012554:	2308      	movs	r3, #8
 8012556:	617b      	str	r3, [r7, #20]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8012558:	68fa      	ldr	r2, [r7, #12]
 801255a:	69fb      	ldr	r3, [r7, #28]
 801255c:	4413      	add	r3, r2
 801255e:	781b      	ldrb	r3, [r3, #0]
 8012560:	2b2e      	cmp	r3, #46	; 0x2e
 8012562:	d12f      	bne.n	80125c4 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8012564:	69fb      	ldr	r3, [r7, #28]
 8012566:	1c5a      	adds	r2, r3, #1
 8012568:	61fa      	str	r2, [r7, #28]
 801256a:	68fa      	ldr	r2, [r7, #12]
 801256c:	4413      	add	r3, r2
 801256e:	781b      	ldrb	r3, [r3, #0]
 8012570:	76fb      	strb	r3, [r7, #27]
			if (c != '.' || si >= 3) break;
 8012572:	7efb      	ldrb	r3, [r7, #27]
 8012574:	2b2e      	cmp	r3, #46	; 0x2e
 8012576:	d10a      	bne.n	801258e <create_name+0x62>
 8012578:	69fb      	ldr	r3, [r7, #28]
 801257a:	2b02      	cmp	r3, #2
 801257c:	d807      	bhi.n	801258e <create_name+0x62>
			sfn[i++] = c;
 801257e:	693b      	ldr	r3, [r7, #16]
 8012580:	1c5a      	adds	r2, r3, #1
 8012582:	613a      	str	r2, [r7, #16]
 8012584:	68ba      	ldr	r2, [r7, #8]
 8012586:	4413      	add	r3, r2
 8012588:	7efa      	ldrb	r2, [r7, #27]
 801258a:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 801258c:	e7ea      	b.n	8012564 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 801258e:	7efb      	ldrb	r3, [r7, #27]
 8012590:	2b2f      	cmp	r3, #47	; 0x2f
 8012592:	d007      	beq.n	80125a4 <create_name+0x78>
 8012594:	7efb      	ldrb	r3, [r7, #27]
 8012596:	2b5c      	cmp	r3, #92	; 0x5c
 8012598:	d004      	beq.n	80125a4 <create_name+0x78>
 801259a:	7efb      	ldrb	r3, [r7, #27]
 801259c:	2b20      	cmp	r3, #32
 801259e:	d901      	bls.n	80125a4 <create_name+0x78>
 80125a0:	2306      	movs	r3, #6
 80125a2:	e084      	b.n	80126ae <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 80125a4:	68fa      	ldr	r2, [r7, #12]
 80125a6:	69fb      	ldr	r3, [r7, #28]
 80125a8:	441a      	add	r2, r3
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 80125ae:	7efb      	ldrb	r3, [r7, #27]
 80125b0:	2b20      	cmp	r3, #32
 80125b2:	d801      	bhi.n	80125b8 <create_name+0x8c>
 80125b4:	2224      	movs	r2, #36	; 0x24
 80125b6:	e000      	b.n	80125ba <create_name+0x8e>
 80125b8:	2220      	movs	r2, #32
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	330b      	adds	r3, #11
 80125be:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80125c0:	2300      	movs	r3, #0
 80125c2:	e074      	b.n	80126ae <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80125c4:	69fb      	ldr	r3, [r7, #28]
 80125c6:	1c5a      	adds	r2, r3, #1
 80125c8:	61fa      	str	r2, [r7, #28]
 80125ca:	68fa      	ldr	r2, [r7, #12]
 80125cc:	4413      	add	r3, r2
 80125ce:	781b      	ldrb	r3, [r3, #0]
 80125d0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80125d2:	7efb      	ldrb	r3, [r7, #27]
 80125d4:	2b20      	cmp	r3, #32
 80125d6:	d94e      	bls.n	8012676 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80125d8:	7efb      	ldrb	r3, [r7, #27]
 80125da:	2b2f      	cmp	r3, #47	; 0x2f
 80125dc:	d006      	beq.n	80125ec <create_name+0xc0>
 80125de:	7efb      	ldrb	r3, [r7, #27]
 80125e0:	2b5c      	cmp	r3, #92	; 0x5c
 80125e2:	d110      	bne.n	8012606 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80125e4:	e002      	b.n	80125ec <create_name+0xc0>
 80125e6:	69fb      	ldr	r3, [r7, #28]
 80125e8:	3301      	adds	r3, #1
 80125ea:	61fb      	str	r3, [r7, #28]
 80125ec:	68fa      	ldr	r2, [r7, #12]
 80125ee:	69fb      	ldr	r3, [r7, #28]
 80125f0:	4413      	add	r3, r2
 80125f2:	781b      	ldrb	r3, [r3, #0]
 80125f4:	2b2f      	cmp	r3, #47	; 0x2f
 80125f6:	d0f6      	beq.n	80125e6 <create_name+0xba>
 80125f8:	68fa      	ldr	r2, [r7, #12]
 80125fa:	69fb      	ldr	r3, [r7, #28]
 80125fc:	4413      	add	r3, r2
 80125fe:	781b      	ldrb	r3, [r3, #0]
 8012600:	2b5c      	cmp	r3, #92	; 0x5c
 8012602:	d0f0      	beq.n	80125e6 <create_name+0xba>
			break;
 8012604:	e038      	b.n	8012678 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012606:	7efb      	ldrb	r3, [r7, #27]
 8012608:	2b2e      	cmp	r3, #46	; 0x2e
 801260a:	d003      	beq.n	8012614 <create_name+0xe8>
 801260c:	693a      	ldr	r2, [r7, #16]
 801260e:	697b      	ldr	r3, [r7, #20]
 8012610:	429a      	cmp	r2, r3
 8012612:	d30c      	bcc.n	801262e <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012614:	697b      	ldr	r3, [r7, #20]
 8012616:	2b0b      	cmp	r3, #11
 8012618:	d002      	beq.n	8012620 <create_name+0xf4>
 801261a:	7efb      	ldrb	r3, [r7, #27]
 801261c:	2b2e      	cmp	r3, #46	; 0x2e
 801261e:	d001      	beq.n	8012624 <create_name+0xf8>
 8012620:	2306      	movs	r3, #6
 8012622:	e044      	b.n	80126ae <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8012624:	2308      	movs	r3, #8
 8012626:	613b      	str	r3, [r7, #16]
 8012628:	230b      	movs	r3, #11
 801262a:	617b      	str	r3, [r7, #20]
			continue;
 801262c:	e022      	b.n	8012674 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 801262e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012632:	2b00      	cmp	r3, #0
 8012634:	da04      	bge.n	8012640 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012636:	7efb      	ldrb	r3, [r7, #27]
 8012638:	3b80      	subs	r3, #128	; 0x80
 801263a:	4a1f      	ldr	r2, [pc, #124]	; (80126b8 <create_name+0x18c>)
 801263c:	5cd3      	ldrb	r3, [r2, r3]
 801263e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012640:	7efb      	ldrb	r3, [r7, #27]
 8012642:	4619      	mov	r1, r3
 8012644:	481d      	ldr	r0, [pc, #116]	; (80126bc <create_name+0x190>)
 8012646:	f7fe fedc 	bl	8011402 <chk_chr>
 801264a:	4603      	mov	r3, r0
 801264c:	2b00      	cmp	r3, #0
 801264e:	d001      	beq.n	8012654 <create_name+0x128>
 8012650:	2306      	movs	r3, #6
 8012652:	e02c      	b.n	80126ae <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012654:	7efb      	ldrb	r3, [r7, #27]
 8012656:	2b60      	cmp	r3, #96	; 0x60
 8012658:	d905      	bls.n	8012666 <create_name+0x13a>
 801265a:	7efb      	ldrb	r3, [r7, #27]
 801265c:	2b7a      	cmp	r3, #122	; 0x7a
 801265e:	d802      	bhi.n	8012666 <create_name+0x13a>
 8012660:	7efb      	ldrb	r3, [r7, #27]
 8012662:	3b20      	subs	r3, #32
 8012664:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8012666:	693b      	ldr	r3, [r7, #16]
 8012668:	1c5a      	adds	r2, r3, #1
 801266a:	613a      	str	r2, [r7, #16]
 801266c:	68ba      	ldr	r2, [r7, #8]
 801266e:	4413      	add	r3, r2
 8012670:	7efa      	ldrb	r2, [r7, #27]
 8012672:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012674:	e7a6      	b.n	80125c4 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012676:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012678:	68fa      	ldr	r2, [r7, #12]
 801267a:	69fb      	ldr	r3, [r7, #28]
 801267c:	441a      	add	r2, r3
 801267e:	683b      	ldr	r3, [r7, #0]
 8012680:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012682:	693b      	ldr	r3, [r7, #16]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d101      	bne.n	801268c <create_name+0x160>
 8012688:	2306      	movs	r3, #6
 801268a:	e010      	b.n	80126ae <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801268c:	68bb      	ldr	r3, [r7, #8]
 801268e:	781b      	ldrb	r3, [r3, #0]
 8012690:	2be5      	cmp	r3, #229	; 0xe5
 8012692:	d102      	bne.n	801269a <create_name+0x16e>
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	2205      	movs	r2, #5
 8012698:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801269a:	7efb      	ldrb	r3, [r7, #27]
 801269c:	2b20      	cmp	r3, #32
 801269e:	d801      	bhi.n	80126a4 <create_name+0x178>
 80126a0:	2204      	movs	r2, #4
 80126a2:	e000      	b.n	80126a6 <create_name+0x17a>
 80126a4:	2200      	movs	r2, #0
 80126a6:	68bb      	ldr	r3, [r7, #8]
 80126a8:	330b      	adds	r3, #11
 80126aa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80126ac:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80126ae:	4618      	mov	r0, r3
 80126b0:	3720      	adds	r7, #32
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}
 80126b6:	bf00      	nop
 80126b8:	0801ad38 	.word	0x0801ad38
 80126bc:	0801ace8 	.word	0x0801ace8

080126c0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b086      	sub	sp, #24
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
 80126c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80126ce:	693b      	ldr	r3, [r7, #16]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	781b      	ldrb	r3, [r3, #0]
 80126d8:	2b2f      	cmp	r3, #47	; 0x2f
 80126da:	d00b      	beq.n	80126f4 <follow_path+0x34>
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	781b      	ldrb	r3, [r3, #0]
 80126e0:	2b5c      	cmp	r3, #92	; 0x5c
 80126e2:	d007      	beq.n	80126f4 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	699a      	ldr	r2, [r3, #24]
 80126e8:	693b      	ldr	r3, [r7, #16]
 80126ea:	609a      	str	r2, [r3, #8]
 80126ec:	e00d      	b.n	801270a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	3301      	adds	r3, #1
 80126f2:	603b      	str	r3, [r7, #0]
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	781b      	ldrb	r3, [r3, #0]
 80126f8:	2b2f      	cmp	r3, #47	; 0x2f
 80126fa:	d0f8      	beq.n	80126ee <follow_path+0x2e>
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	781b      	ldrb	r3, [r3, #0]
 8012700:	2b5c      	cmp	r3, #92	; 0x5c
 8012702:	d0f4      	beq.n	80126ee <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012704:	693b      	ldr	r3, [r7, #16]
 8012706:	2200      	movs	r2, #0
 8012708:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801270a:	683b      	ldr	r3, [r7, #0]
 801270c:	781b      	ldrb	r3, [r3, #0]
 801270e:	2b1f      	cmp	r3, #31
 8012710:	d80a      	bhi.n	8012728 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	2280      	movs	r2, #128	; 0x80
 8012716:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801271a:	2100      	movs	r1, #0
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	f7ff fc1d 	bl	8011f5c <dir_sdi>
 8012722:	4603      	mov	r3, r0
 8012724:	75fb      	strb	r3, [r7, #23]
 8012726:	e05b      	b.n	80127e0 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012728:	463b      	mov	r3, r7
 801272a:	4619      	mov	r1, r3
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f7ff fefd 	bl	801252c <create_name>
 8012732:	4603      	mov	r3, r0
 8012734:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012736:	7dfb      	ldrb	r3, [r7, #23]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d14c      	bne.n	80127d6 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	f7ff fe4f 	bl	80123e0 <dir_find>
 8012742:	4603      	mov	r3, r0
 8012744:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801274c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801274e:	7dfb      	ldrb	r3, [r7, #23]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d01b      	beq.n	801278c <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012754:	7dfb      	ldrb	r3, [r7, #23]
 8012756:	2b04      	cmp	r3, #4
 8012758:	d13f      	bne.n	80127da <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 801275a:	7afb      	ldrb	r3, [r7, #11]
 801275c:	f003 0320 	and.w	r3, r3, #32
 8012760:	2b00      	cmp	r3, #0
 8012762:	d00b      	beq.n	801277c <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012764:	7afb      	ldrb	r3, [r7, #11]
 8012766:	f003 0304 	and.w	r3, r3, #4
 801276a:	2b00      	cmp	r3, #0
 801276c:	d031      	beq.n	80127d2 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	2280      	movs	r2, #128	; 0x80
 8012772:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8012776:	2300      	movs	r3, #0
 8012778:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 801277a:	e02e      	b.n	80127da <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801277c:	7afb      	ldrb	r3, [r7, #11]
 801277e:	f003 0304 	and.w	r3, r3, #4
 8012782:	2b00      	cmp	r3, #0
 8012784:	d129      	bne.n	80127da <follow_path+0x11a>
 8012786:	2305      	movs	r3, #5
 8012788:	75fb      	strb	r3, [r7, #23]
				break;
 801278a:	e026      	b.n	80127da <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801278c:	7afb      	ldrb	r3, [r7, #11]
 801278e:	f003 0304 	and.w	r3, r3, #4
 8012792:	2b00      	cmp	r3, #0
 8012794:	d123      	bne.n	80127de <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012796:	693b      	ldr	r3, [r7, #16]
 8012798:	799b      	ldrb	r3, [r3, #6]
 801279a:	f003 0310 	and.w	r3, r3, #16
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d102      	bne.n	80127a8 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80127a2:	2305      	movs	r3, #5
 80127a4:	75fb      	strb	r3, [r7, #23]
 80127a6:	e01b      	b.n	80127e0 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	695b      	ldr	r3, [r3, #20]
 80127b2:	68fa      	ldr	r2, [r7, #12]
 80127b4:	8992      	ldrh	r2, [r2, #12]
 80127b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80127ba:	fb02 f200 	mul.w	r2, r2, r0
 80127be:	1a9b      	subs	r3, r3, r2
 80127c0:	440b      	add	r3, r1
 80127c2:	4619      	mov	r1, r3
 80127c4:	68f8      	ldr	r0, [r7, #12]
 80127c6:	f7ff fd6f 	bl	80122a8 <ld_clust>
 80127ca:	4602      	mov	r2, r0
 80127cc:	693b      	ldr	r3, [r7, #16]
 80127ce:	609a      	str	r2, [r3, #8]
 80127d0:	e7aa      	b.n	8012728 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80127d2:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80127d4:	e7a8      	b.n	8012728 <follow_path+0x68>
			if (res != FR_OK) break;
 80127d6:	bf00      	nop
 80127d8:	e002      	b.n	80127e0 <follow_path+0x120>
				break;
 80127da:	bf00      	nop
 80127dc:	e000      	b.n	80127e0 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80127de:	bf00      	nop
			}
		}
	}

	return res;
 80127e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3718      	adds	r7, #24
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}

080127ea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80127ea:	b480      	push	{r7}
 80127ec:	b087      	sub	sp, #28
 80127ee:	af00      	add	r7, sp, #0
 80127f0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80127f2:	f04f 33ff 	mov.w	r3, #4294967295
 80127f6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d031      	beq.n	8012864 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	617b      	str	r3, [r7, #20]
 8012806:	e002      	b.n	801280e <get_ldnumber+0x24>
 8012808:	697b      	ldr	r3, [r7, #20]
 801280a:	3301      	adds	r3, #1
 801280c:	617b      	str	r3, [r7, #20]
 801280e:	697b      	ldr	r3, [r7, #20]
 8012810:	781b      	ldrb	r3, [r3, #0]
 8012812:	2b20      	cmp	r3, #32
 8012814:	d903      	bls.n	801281e <get_ldnumber+0x34>
 8012816:	697b      	ldr	r3, [r7, #20]
 8012818:	781b      	ldrb	r3, [r3, #0]
 801281a:	2b3a      	cmp	r3, #58	; 0x3a
 801281c:	d1f4      	bne.n	8012808 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	781b      	ldrb	r3, [r3, #0]
 8012822:	2b3a      	cmp	r3, #58	; 0x3a
 8012824:	d11c      	bne.n	8012860 <get_ldnumber+0x76>
			tp = *path;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	1c5a      	adds	r2, r3, #1
 8012830:	60fa      	str	r2, [r7, #12]
 8012832:	781b      	ldrb	r3, [r3, #0]
 8012834:	3b30      	subs	r3, #48	; 0x30
 8012836:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	2b09      	cmp	r3, #9
 801283c:	d80e      	bhi.n	801285c <get_ldnumber+0x72>
 801283e:	68fa      	ldr	r2, [r7, #12]
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	429a      	cmp	r2, r3
 8012844:	d10a      	bne.n	801285c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012846:	68bb      	ldr	r3, [r7, #8]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d107      	bne.n	801285c <get_ldnumber+0x72>
					vol = (int)i;
 801284c:	68bb      	ldr	r3, [r7, #8]
 801284e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012850:	697b      	ldr	r3, [r7, #20]
 8012852:	3301      	adds	r3, #1
 8012854:	617b      	str	r3, [r7, #20]
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	697a      	ldr	r2, [r7, #20]
 801285a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801285c:	693b      	ldr	r3, [r7, #16]
 801285e:	e002      	b.n	8012866 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012860:	2300      	movs	r3, #0
 8012862:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012864:	693b      	ldr	r3, [r7, #16]
}
 8012866:	4618      	mov	r0, r3
 8012868:	371c      	adds	r7, #28
 801286a:	46bd      	mov	sp, r7
 801286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012870:	4770      	bx	lr
	...

08012874 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b082      	sub	sp, #8
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
 801287c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	2200      	movs	r2, #0
 8012882:	70da      	strb	r2, [r3, #3]
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f04f 32ff 	mov.w	r2, #4294967295
 801288a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801288c:	6839      	ldr	r1, [r7, #0]
 801288e:	6878      	ldr	r0, [r7, #4]
 8012890:	f7fe ff82 	bl	8011798 <move_window>
 8012894:	4603      	mov	r3, r0
 8012896:	2b00      	cmp	r3, #0
 8012898:	d001      	beq.n	801289e <check_fs+0x2a>
 801289a:	2304      	movs	r3, #4
 801289c:	e038      	b.n	8012910 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	3338      	adds	r3, #56	; 0x38
 80128a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7fe fcc6 	bl	8011238 <ld_word>
 80128ac:	4603      	mov	r3, r0
 80128ae:	461a      	mov	r2, r3
 80128b0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80128b4:	429a      	cmp	r2, r3
 80128b6:	d001      	beq.n	80128bc <check_fs+0x48>
 80128b8:	2303      	movs	r3, #3
 80128ba:	e029      	b.n	8012910 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80128c2:	2be9      	cmp	r3, #233	; 0xe9
 80128c4:	d009      	beq.n	80128da <check_fs+0x66>
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80128cc:	2beb      	cmp	r3, #235	; 0xeb
 80128ce:	d11e      	bne.n	801290e <check_fs+0x9a>
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80128d6:	2b90      	cmp	r3, #144	; 0x90
 80128d8:	d119      	bne.n	801290e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	3338      	adds	r3, #56	; 0x38
 80128de:	3336      	adds	r3, #54	; 0x36
 80128e0:	4618      	mov	r0, r3
 80128e2:	f7fe fcc1 	bl	8011268 <ld_dword>
 80128e6:	4603      	mov	r3, r0
 80128e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80128ec:	4a0a      	ldr	r2, [pc, #40]	; (8012918 <check_fs+0xa4>)
 80128ee:	4293      	cmp	r3, r2
 80128f0:	d101      	bne.n	80128f6 <check_fs+0x82>
 80128f2:	2300      	movs	r3, #0
 80128f4:	e00c      	b.n	8012910 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	3338      	adds	r3, #56	; 0x38
 80128fa:	3352      	adds	r3, #82	; 0x52
 80128fc:	4618      	mov	r0, r3
 80128fe:	f7fe fcb3 	bl	8011268 <ld_dword>
 8012902:	4603      	mov	r3, r0
 8012904:	4a05      	ldr	r2, [pc, #20]	; (801291c <check_fs+0xa8>)
 8012906:	4293      	cmp	r3, r2
 8012908:	d101      	bne.n	801290e <check_fs+0x9a>
 801290a:	2300      	movs	r3, #0
 801290c:	e000      	b.n	8012910 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801290e:	2302      	movs	r3, #2
}
 8012910:	4618      	mov	r0, r3
 8012912:	3708      	adds	r7, #8
 8012914:	46bd      	mov	sp, r7
 8012916:	bd80      	pop	{r7, pc}
 8012918:	00544146 	.word	0x00544146
 801291c:	33544146 	.word	0x33544146

08012920 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b096      	sub	sp, #88	; 0x58
 8012924:	af00      	add	r7, sp, #0
 8012926:	60f8      	str	r0, [r7, #12]
 8012928:	60b9      	str	r1, [r7, #8]
 801292a:	4613      	mov	r3, r2
 801292c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801292e:	68bb      	ldr	r3, [r7, #8]
 8012930:	2200      	movs	r2, #0
 8012932:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012934:	68f8      	ldr	r0, [r7, #12]
 8012936:	f7ff ff58 	bl	80127ea <get_ldnumber>
 801293a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801293c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801293e:	2b00      	cmp	r3, #0
 8012940:	da01      	bge.n	8012946 <find_volume+0x26>
 8012942:	230b      	movs	r3, #11
 8012944:	e268      	b.n	8012e18 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012946:	4ab0      	ldr	r2, [pc, #704]	; (8012c08 <find_volume+0x2e8>)
 8012948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801294a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801294e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012952:	2b00      	cmp	r3, #0
 8012954:	d101      	bne.n	801295a <find_volume+0x3a>
 8012956:	230c      	movs	r3, #12
 8012958:	e25e      	b.n	8012e18 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801295a:	68bb      	ldr	r3, [r7, #8]
 801295c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801295e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012960:	79fb      	ldrb	r3, [r7, #7]
 8012962:	f023 0301 	bic.w	r3, r3, #1
 8012966:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801296a:	781b      	ldrb	r3, [r3, #0]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d01a      	beq.n	80129a6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012972:	785b      	ldrb	r3, [r3, #1]
 8012974:	4618      	mov	r0, r3
 8012976:	f7fe fbc1 	bl	80110fc <disk_status>
 801297a:	4603      	mov	r3, r0
 801297c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012980:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012984:	f003 0301 	and.w	r3, r3, #1
 8012988:	2b00      	cmp	r3, #0
 801298a:	d10c      	bne.n	80129a6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801298c:	79fb      	ldrb	r3, [r7, #7]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d007      	beq.n	80129a2 <find_volume+0x82>
 8012992:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012996:	f003 0304 	and.w	r3, r3, #4
 801299a:	2b00      	cmp	r3, #0
 801299c:	d001      	beq.n	80129a2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801299e:	230a      	movs	r3, #10
 80129a0:	e23a      	b.n	8012e18 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80129a2:	2300      	movs	r3, #0
 80129a4:	e238      	b.n	8012e18 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80129a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129a8:	2200      	movs	r2, #0
 80129aa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80129ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129ae:	b2da      	uxtb	r2, r3
 80129b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80129b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b6:	785b      	ldrb	r3, [r3, #1]
 80129b8:	4618      	mov	r0, r3
 80129ba:	f7fe fbb9 	bl	8011130 <disk_initialize>
 80129be:	4603      	mov	r3, r0
 80129c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80129c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80129c8:	f003 0301 	and.w	r3, r3, #1
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d001      	beq.n	80129d4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80129d0:	2303      	movs	r3, #3
 80129d2:	e221      	b.n	8012e18 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80129d4:	79fb      	ldrb	r3, [r7, #7]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d007      	beq.n	80129ea <find_volume+0xca>
 80129da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80129de:	f003 0304 	and.w	r3, r3, #4
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d001      	beq.n	80129ea <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80129e6:	230a      	movs	r3, #10
 80129e8:	e216      	b.n	8012e18 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80129ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ec:	7858      	ldrb	r0, [r3, #1]
 80129ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129f0:	330c      	adds	r3, #12
 80129f2:	461a      	mov	r2, r3
 80129f4:	2102      	movs	r1, #2
 80129f6:	f7fe fc01 	bl	80111fc <disk_ioctl>
 80129fa:	4603      	mov	r3, r0
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d001      	beq.n	8012a04 <find_volume+0xe4>
 8012a00:	2301      	movs	r3, #1
 8012a02:	e209      	b.n	8012e18 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a06:	899b      	ldrh	r3, [r3, #12]
 8012a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012a0c:	d80d      	bhi.n	8012a2a <find_volume+0x10a>
 8012a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a10:	899b      	ldrh	r3, [r3, #12]
 8012a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012a16:	d308      	bcc.n	8012a2a <find_volume+0x10a>
 8012a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a1a:	899b      	ldrh	r3, [r3, #12]
 8012a1c:	461a      	mov	r2, r3
 8012a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a20:	899b      	ldrh	r3, [r3, #12]
 8012a22:	3b01      	subs	r3, #1
 8012a24:	4013      	ands	r3, r2
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d001      	beq.n	8012a2e <find_volume+0x10e>
 8012a2a:	2301      	movs	r3, #1
 8012a2c:	e1f4      	b.n	8012e18 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012a2e:	2300      	movs	r3, #0
 8012a30:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012a32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012a34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012a36:	f7ff ff1d 	bl	8012874 <check_fs>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012a40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a44:	2b02      	cmp	r3, #2
 8012a46:	d14b      	bne.n	8012ae0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012a48:	2300      	movs	r3, #0
 8012a4a:	643b      	str	r3, [r7, #64]	; 0x40
 8012a4c:	e01f      	b.n	8012a8e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a50:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a56:	011b      	lsls	r3, r3, #4
 8012a58:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012a5c:	4413      	add	r3, r2
 8012a5e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a62:	3304      	adds	r3, #4
 8012a64:	781b      	ldrb	r3, [r3, #0]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d006      	beq.n	8012a78 <find_volume+0x158>
 8012a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a6c:	3308      	adds	r3, #8
 8012a6e:	4618      	mov	r0, r3
 8012a70:	f7fe fbfa 	bl	8011268 <ld_dword>
 8012a74:	4602      	mov	r2, r0
 8012a76:	e000      	b.n	8012a7a <find_volume+0x15a>
 8012a78:	2200      	movs	r2, #0
 8012a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a7c:	009b      	lsls	r3, r3, #2
 8012a7e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012a82:	440b      	add	r3, r1
 8012a84:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a8a:	3301      	adds	r3, #1
 8012a8c:	643b      	str	r3, [r7, #64]	; 0x40
 8012a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a90:	2b03      	cmp	r3, #3
 8012a92:	d9dc      	bls.n	8012a4e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012a94:	2300      	movs	r3, #0
 8012a96:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d002      	beq.n	8012aa4 <find_volume+0x184>
 8012a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012aa0:	3b01      	subs	r3, #1
 8012aa2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012aa6:	009b      	lsls	r3, r3, #2
 8012aa8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012aac:	4413      	add	r3, r2
 8012aae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012ab2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d005      	beq.n	8012ac6 <find_volume+0x1a6>
 8012aba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012abc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012abe:	f7ff fed9 	bl	8012874 <check_fs>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	e000      	b.n	8012ac8 <find_volume+0x1a8>
 8012ac6:	2303      	movs	r3, #3
 8012ac8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012acc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ad0:	2b01      	cmp	r3, #1
 8012ad2:	d905      	bls.n	8012ae0 <find_volume+0x1c0>
 8012ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ad6:	3301      	adds	r3, #1
 8012ad8:	643b      	str	r3, [r7, #64]	; 0x40
 8012ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012adc:	2b03      	cmp	r3, #3
 8012ade:	d9e1      	bls.n	8012aa4 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012ae0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ae4:	2b04      	cmp	r3, #4
 8012ae6:	d101      	bne.n	8012aec <find_volume+0x1cc>
 8012ae8:	2301      	movs	r3, #1
 8012aea:	e195      	b.n	8012e18 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012aec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012af0:	2b01      	cmp	r3, #1
 8012af2:	d901      	bls.n	8012af8 <find_volume+0x1d8>
 8012af4:	230d      	movs	r3, #13
 8012af6:	e18f      	b.n	8012e18 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012afa:	3338      	adds	r3, #56	; 0x38
 8012afc:	330b      	adds	r3, #11
 8012afe:	4618      	mov	r0, r3
 8012b00:	f7fe fb9a 	bl	8011238 <ld_word>
 8012b04:	4603      	mov	r3, r0
 8012b06:	461a      	mov	r2, r3
 8012b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b0a:	899b      	ldrh	r3, [r3, #12]
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	d001      	beq.n	8012b14 <find_volume+0x1f4>
 8012b10:	230d      	movs	r3, #13
 8012b12:	e181      	b.n	8012e18 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b16:	3338      	adds	r3, #56	; 0x38
 8012b18:	3316      	adds	r3, #22
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f7fe fb8c 	bl	8011238 <ld_word>
 8012b20:	4603      	mov	r3, r0
 8012b22:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d106      	bne.n	8012b38 <find_volume+0x218>
 8012b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b2c:	3338      	adds	r3, #56	; 0x38
 8012b2e:	3324      	adds	r3, #36	; 0x24
 8012b30:	4618      	mov	r0, r3
 8012b32:	f7fe fb99 	bl	8011268 <ld_dword>
 8012b36:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012b3c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b40:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b46:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b4a:	789b      	ldrb	r3, [r3, #2]
 8012b4c:	2b01      	cmp	r3, #1
 8012b4e:	d005      	beq.n	8012b5c <find_volume+0x23c>
 8012b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b52:	789b      	ldrb	r3, [r3, #2]
 8012b54:	2b02      	cmp	r3, #2
 8012b56:	d001      	beq.n	8012b5c <find_volume+0x23c>
 8012b58:	230d      	movs	r3, #13
 8012b5a:	e15d      	b.n	8012e18 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b5e:	789b      	ldrb	r3, [r3, #2]
 8012b60:	461a      	mov	r2, r3
 8012b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b64:	fb02 f303 	mul.w	r3, r2, r3
 8012b68:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b70:	b29a      	uxth	r2, r3
 8012b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b74:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b78:	895b      	ldrh	r3, [r3, #10]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d008      	beq.n	8012b90 <find_volume+0x270>
 8012b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b80:	895b      	ldrh	r3, [r3, #10]
 8012b82:	461a      	mov	r2, r3
 8012b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b86:	895b      	ldrh	r3, [r3, #10]
 8012b88:	3b01      	subs	r3, #1
 8012b8a:	4013      	ands	r3, r2
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d001      	beq.n	8012b94 <find_volume+0x274>
 8012b90:	230d      	movs	r3, #13
 8012b92:	e141      	b.n	8012e18 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b96:	3338      	adds	r3, #56	; 0x38
 8012b98:	3311      	adds	r3, #17
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	f7fe fb4c 	bl	8011238 <ld_word>
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	461a      	mov	r2, r3
 8012ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ba6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012baa:	891b      	ldrh	r3, [r3, #8]
 8012bac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012bae:	8992      	ldrh	r2, [r2, #12]
 8012bb0:	0952      	lsrs	r2, r2, #5
 8012bb2:	b292      	uxth	r2, r2
 8012bb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8012bb8:	fb02 f201 	mul.w	r2, r2, r1
 8012bbc:	1a9b      	subs	r3, r3, r2
 8012bbe:	b29b      	uxth	r3, r3
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d001      	beq.n	8012bc8 <find_volume+0x2a8>
 8012bc4:	230d      	movs	r3, #13
 8012bc6:	e127      	b.n	8012e18 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bca:	3338      	adds	r3, #56	; 0x38
 8012bcc:	3313      	adds	r3, #19
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f7fe fb32 	bl	8011238 <ld_word>
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d106      	bne.n	8012bec <find_volume+0x2cc>
 8012bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012be0:	3338      	adds	r3, #56	; 0x38
 8012be2:	3320      	adds	r3, #32
 8012be4:	4618      	mov	r0, r3
 8012be6:	f7fe fb3f 	bl	8011268 <ld_dword>
 8012bea:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bee:	3338      	adds	r3, #56	; 0x38
 8012bf0:	330e      	adds	r3, #14
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	f7fe fb20 	bl	8011238 <ld_word>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012bfc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d104      	bne.n	8012c0c <find_volume+0x2ec>
 8012c02:	230d      	movs	r3, #13
 8012c04:	e108      	b.n	8012e18 <find_volume+0x4f8>
 8012c06:	bf00      	nop
 8012c08:	2003d480 	.word	0x2003d480

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012c0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c10:	4413      	add	r3, r2
 8012c12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c14:	8911      	ldrh	r1, [r2, #8]
 8012c16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c18:	8992      	ldrh	r2, [r2, #12]
 8012c1a:	0952      	lsrs	r2, r2, #5
 8012c1c:	b292      	uxth	r2, r2
 8012c1e:	fbb1 f2f2 	udiv	r2, r1, r2
 8012c22:	b292      	uxth	r2, r2
 8012c24:	4413      	add	r3, r2
 8012c26:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012c28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c2c:	429a      	cmp	r2, r3
 8012c2e:	d201      	bcs.n	8012c34 <find_volume+0x314>
 8012c30:	230d      	movs	r3, #13
 8012c32:	e0f1      	b.n	8012e18 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012c34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c38:	1ad3      	subs	r3, r2, r3
 8012c3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c3c:	8952      	ldrh	r2, [r2, #10]
 8012c3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012c42:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d101      	bne.n	8012c4e <find_volume+0x32e>
 8012c4a:	230d      	movs	r3, #13
 8012c4c:	e0e4      	b.n	8012e18 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012c4e:	2303      	movs	r3, #3
 8012c50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c56:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012c5a:	4293      	cmp	r3, r2
 8012c5c:	d802      	bhi.n	8012c64 <find_volume+0x344>
 8012c5e:	2302      	movs	r3, #2
 8012c60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c66:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012c6a:	4293      	cmp	r3, r2
 8012c6c:	d802      	bhi.n	8012c74 <find_volume+0x354>
 8012c6e:	2301      	movs	r3, #1
 8012c70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c76:	1c9a      	adds	r2, r3, #2
 8012c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c7a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012c80:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012c82:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c86:	441a      	add	r2, r3
 8012c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c8a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8012c8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c90:	441a      	add	r2, r3
 8012c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c94:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8012c96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c9a:	2b03      	cmp	r3, #3
 8012c9c:	d11e      	bne.n	8012cdc <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ca0:	3338      	adds	r3, #56	; 0x38
 8012ca2:	332a      	adds	r3, #42	; 0x2a
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f7fe fac7 	bl	8011238 <ld_word>
 8012caa:	4603      	mov	r3, r0
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d001      	beq.n	8012cb4 <find_volume+0x394>
 8012cb0:	230d      	movs	r3, #13
 8012cb2:	e0b1      	b.n	8012e18 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cb6:	891b      	ldrh	r3, [r3, #8]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d001      	beq.n	8012cc0 <find_volume+0x3a0>
 8012cbc:	230d      	movs	r3, #13
 8012cbe:	e0ab      	b.n	8012e18 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cc2:	3338      	adds	r3, #56	; 0x38
 8012cc4:	332c      	adds	r3, #44	; 0x2c
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	f7fe face 	bl	8011268 <ld_dword>
 8012ccc:	4602      	mov	r2, r0
 8012cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd4:	69db      	ldr	r3, [r3, #28]
 8012cd6:	009b      	lsls	r3, r3, #2
 8012cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8012cda:	e01f      	b.n	8012d1c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cde:	891b      	ldrh	r3, [r3, #8]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d101      	bne.n	8012ce8 <find_volume+0x3c8>
 8012ce4:	230d      	movs	r3, #13
 8012ce6:	e097      	b.n	8012e18 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cee:	441a      	add	r2, r3
 8012cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012cf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012cf8:	2b02      	cmp	r3, #2
 8012cfa:	d103      	bne.n	8012d04 <find_volume+0x3e4>
 8012cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cfe:	69db      	ldr	r3, [r3, #28]
 8012d00:	005b      	lsls	r3, r3, #1
 8012d02:	e00a      	b.n	8012d1a <find_volume+0x3fa>
 8012d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d06:	69da      	ldr	r2, [r3, #28]
 8012d08:	4613      	mov	r3, r2
 8012d0a:	005b      	lsls	r3, r3, #1
 8012d0c:	4413      	add	r3, r2
 8012d0e:	085a      	lsrs	r2, r3, #1
 8012d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d12:	69db      	ldr	r3, [r3, #28]
 8012d14:	f003 0301 	and.w	r3, r3, #1
 8012d18:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012d1a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d1e:	6a1a      	ldr	r2, [r3, #32]
 8012d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d22:	899b      	ldrh	r3, [r3, #12]
 8012d24:	4619      	mov	r1, r3
 8012d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d28:	440b      	add	r3, r1
 8012d2a:	3b01      	subs	r3, #1
 8012d2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012d2e:	8989      	ldrh	r1, [r1, #12]
 8012d30:	fbb3 f3f1 	udiv	r3, r3, r1
 8012d34:	429a      	cmp	r2, r3
 8012d36:	d201      	bcs.n	8012d3c <find_volume+0x41c>
 8012d38:	230d      	movs	r3, #13
 8012d3a:	e06d      	b.n	8012e18 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8012d42:	615a      	str	r2, [r3, #20]
 8012d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d46:	695a      	ldr	r2, [r3, #20]
 8012d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d4a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d4e:	2280      	movs	r2, #128	; 0x80
 8012d50:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012d52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d56:	2b03      	cmp	r3, #3
 8012d58:	d149      	bne.n	8012dee <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d5c:	3338      	adds	r3, #56	; 0x38
 8012d5e:	3330      	adds	r3, #48	; 0x30
 8012d60:	4618      	mov	r0, r3
 8012d62:	f7fe fa69 	bl	8011238 <ld_word>
 8012d66:	4603      	mov	r3, r0
 8012d68:	2b01      	cmp	r3, #1
 8012d6a:	d140      	bne.n	8012dee <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d6e:	3301      	adds	r3, #1
 8012d70:	4619      	mov	r1, r3
 8012d72:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012d74:	f7fe fd10 	bl	8011798 <move_window>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d137      	bne.n	8012dee <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d80:	2200      	movs	r2, #0
 8012d82:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d86:	3338      	adds	r3, #56	; 0x38
 8012d88:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	f7fe fa53 	bl	8011238 <ld_word>
 8012d92:	4603      	mov	r3, r0
 8012d94:	461a      	mov	r2, r3
 8012d96:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	d127      	bne.n	8012dee <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da0:	3338      	adds	r3, #56	; 0x38
 8012da2:	4618      	mov	r0, r3
 8012da4:	f7fe fa60 	bl	8011268 <ld_dword>
 8012da8:	4603      	mov	r3, r0
 8012daa:	4a1d      	ldr	r2, [pc, #116]	; (8012e20 <find_volume+0x500>)
 8012dac:	4293      	cmp	r3, r2
 8012dae:	d11e      	bne.n	8012dee <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db2:	3338      	adds	r3, #56	; 0x38
 8012db4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012db8:	4618      	mov	r0, r3
 8012dba:	f7fe fa55 	bl	8011268 <ld_dword>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	4a18      	ldr	r2, [pc, #96]	; (8012e24 <find_volume+0x504>)
 8012dc2:	4293      	cmp	r3, r2
 8012dc4:	d113      	bne.n	8012dee <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc8:	3338      	adds	r3, #56	; 0x38
 8012dca:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f7fe fa4a 	bl	8011268 <ld_dword>
 8012dd4:	4602      	mov	r2, r0
 8012dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dd8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ddc:	3338      	adds	r3, #56	; 0x38
 8012dde:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012de2:	4618      	mov	r0, r3
 8012de4:	f7fe fa40 	bl	8011268 <ld_dword>
 8012de8:	4602      	mov	r2, r0
 8012dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dec:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012df0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012df4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012df6:	4b0c      	ldr	r3, [pc, #48]	; (8012e28 <find_volume+0x508>)
 8012df8:	881b      	ldrh	r3, [r3, #0]
 8012dfa:	3301      	adds	r3, #1
 8012dfc:	b29a      	uxth	r2, r3
 8012dfe:	4b0a      	ldr	r3, [pc, #40]	; (8012e28 <find_volume+0x508>)
 8012e00:	801a      	strh	r2, [r3, #0]
 8012e02:	4b09      	ldr	r3, [pc, #36]	; (8012e28 <find_volume+0x508>)
 8012e04:	881a      	ldrh	r2, [r3, #0]
 8012e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e08:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8012e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012e10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012e12:	f7fe fc59 	bl	80116c8 <clear_lock>
#endif
	return FR_OK;
 8012e16:	2300      	movs	r3, #0
}
 8012e18:	4618      	mov	r0, r3
 8012e1a:	3758      	adds	r7, #88	; 0x58
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	bd80      	pop	{r7, pc}
 8012e20:	41615252 	.word	0x41615252
 8012e24:	61417272 	.word	0x61417272
 8012e28:	2003d484 	.word	0x2003d484

08012e2c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b084      	sub	sp, #16
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
 8012e34:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012e36:	2309      	movs	r3, #9
 8012e38:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d01c      	beq.n	8012e7a <validate+0x4e>
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d018      	beq.n	8012e7a <validate+0x4e>
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	781b      	ldrb	r3, [r3, #0]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d013      	beq.n	8012e7a <validate+0x4e>
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	889a      	ldrh	r2, [r3, #4]
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	88db      	ldrh	r3, [r3, #6]
 8012e5c:	429a      	cmp	r2, r3
 8012e5e:	d10c      	bne.n	8012e7a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	785b      	ldrb	r3, [r3, #1]
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7fe f948 	bl	80110fc <disk_status>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	f003 0301 	and.w	r3, r3, #1
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d101      	bne.n	8012e7a <validate+0x4e>
			res = FR_OK;
 8012e76:	2300      	movs	r3, #0
 8012e78:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012e7a:	7bfb      	ldrb	r3, [r7, #15]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d102      	bne.n	8012e86 <validate+0x5a>
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	e000      	b.n	8012e88 <validate+0x5c>
 8012e86:	2300      	movs	r3, #0
 8012e88:	683a      	ldr	r2, [r7, #0]
 8012e8a:	6013      	str	r3, [r2, #0]
	return res;
 8012e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	3710      	adds	r7, #16
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}
	...

08012e98 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b088      	sub	sp, #32
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	60f8      	str	r0, [r7, #12]
 8012ea0:	60b9      	str	r1, [r7, #8]
 8012ea2:	4613      	mov	r3, r2
 8012ea4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012eaa:	f107 0310 	add.w	r3, r7, #16
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f7ff fc9b 	bl	80127ea <get_ldnumber>
 8012eb4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012eb6:	69fb      	ldr	r3, [r7, #28]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	da01      	bge.n	8012ec0 <f_mount+0x28>
 8012ebc:	230b      	movs	r3, #11
 8012ebe:	e02b      	b.n	8012f18 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012ec0:	4a17      	ldr	r2, [pc, #92]	; (8012f20 <f_mount+0x88>)
 8012ec2:	69fb      	ldr	r3, [r7, #28]
 8012ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ec8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012eca:	69bb      	ldr	r3, [r7, #24]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d005      	beq.n	8012edc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012ed0:	69b8      	ldr	r0, [r7, #24]
 8012ed2:	f7fe fbf9 	bl	80116c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012ed6:	69bb      	ldr	r3, [r7, #24]
 8012ed8:	2200      	movs	r2, #0
 8012eda:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d002      	beq.n	8012ee8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012ee8:	68fa      	ldr	r2, [r7, #12]
 8012eea:	490d      	ldr	r1, [pc, #52]	; (8012f20 <f_mount+0x88>)
 8012eec:	69fb      	ldr	r3, [r7, #28]
 8012eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d002      	beq.n	8012efe <f_mount+0x66>
 8012ef8:	79fb      	ldrb	r3, [r7, #7]
 8012efa:	2b01      	cmp	r3, #1
 8012efc:	d001      	beq.n	8012f02 <f_mount+0x6a>
 8012efe:	2300      	movs	r3, #0
 8012f00:	e00a      	b.n	8012f18 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012f02:	f107 010c 	add.w	r1, r7, #12
 8012f06:	f107 0308 	add.w	r3, r7, #8
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f7ff fd07 	bl	8012920 <find_volume>
 8012f12:	4603      	mov	r3, r0
 8012f14:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f18:	4618      	mov	r0, r3
 8012f1a:	3720      	adds	r7, #32
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	bd80      	pop	{r7, pc}
 8012f20:	2003d480 	.word	0x2003d480

08012f24 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b098      	sub	sp, #96	; 0x60
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	60f8      	str	r0, [r7, #12]
 8012f2c:	60b9      	str	r1, [r7, #8]
 8012f2e:	4613      	mov	r3, r2
 8012f30:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d101      	bne.n	8012f3c <f_open+0x18>
 8012f38:	2309      	movs	r3, #9
 8012f3a:	e1ba      	b.n	80132b2 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012f3c:	79fb      	ldrb	r3, [r7, #7]
 8012f3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012f42:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012f44:	79fa      	ldrb	r2, [r7, #7]
 8012f46:	f107 0110 	add.w	r1, r7, #16
 8012f4a:	f107 0308 	add.w	r3, r7, #8
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f7ff fce6 	bl	8012920 <find_volume>
 8012f54:	4603      	mov	r3, r0
 8012f56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012f5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	f040 819e 	bne.w	80132a0 <f_open+0x37c>
		dj.obj.fs = fs;
 8012f64:	693b      	ldr	r3, [r7, #16]
 8012f66:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012f68:	68ba      	ldr	r2, [r7, #8]
 8012f6a:	f107 0314 	add.w	r3, r7, #20
 8012f6e:	4611      	mov	r1, r2
 8012f70:	4618      	mov	r0, r3
 8012f72:	f7ff fba5 	bl	80126c0 <follow_path>
 8012f76:	4603      	mov	r3, r0
 8012f78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012f7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d11a      	bne.n	8012fba <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012f84:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012f88:	b25b      	sxtb	r3, r3
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	da03      	bge.n	8012f96 <f_open+0x72>
				res = FR_INVALID_NAME;
 8012f8e:	2306      	movs	r3, #6
 8012f90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012f94:	e011      	b.n	8012fba <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012f96:	79fb      	ldrb	r3, [r7, #7]
 8012f98:	f023 0301 	bic.w	r3, r3, #1
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	bf14      	ite	ne
 8012fa0:	2301      	movne	r3, #1
 8012fa2:	2300      	moveq	r3, #0
 8012fa4:	b2db      	uxtb	r3, r3
 8012fa6:	461a      	mov	r2, r3
 8012fa8:	f107 0314 	add.w	r3, r7, #20
 8012fac:	4611      	mov	r1, r2
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f7fe fa42 	bl	8011438 <chk_lock>
 8012fb4:	4603      	mov	r3, r0
 8012fb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012fba:	79fb      	ldrb	r3, [r7, #7]
 8012fbc:	f003 031c 	and.w	r3, r3, #28
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d07e      	beq.n	80130c2 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8012fc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d017      	beq.n	8012ffc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012fcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012fd0:	2b04      	cmp	r3, #4
 8012fd2:	d10e      	bne.n	8012ff2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012fd4:	f7fe fa8c 	bl	80114f0 <enq_lock>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d006      	beq.n	8012fec <f_open+0xc8>
 8012fde:	f107 0314 	add.w	r3, r7, #20
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	f7ff fa51 	bl	801248a <dir_register>
 8012fe8:	4603      	mov	r3, r0
 8012fea:	e000      	b.n	8012fee <f_open+0xca>
 8012fec:	2312      	movs	r3, #18
 8012fee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012ff2:	79fb      	ldrb	r3, [r7, #7]
 8012ff4:	f043 0308 	orr.w	r3, r3, #8
 8012ff8:	71fb      	strb	r3, [r7, #7]
 8012ffa:	e010      	b.n	801301e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012ffc:	7ebb      	ldrb	r3, [r7, #26]
 8012ffe:	f003 0311 	and.w	r3, r3, #17
 8013002:	2b00      	cmp	r3, #0
 8013004:	d003      	beq.n	801300e <f_open+0xea>
					res = FR_DENIED;
 8013006:	2307      	movs	r3, #7
 8013008:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801300c:	e007      	b.n	801301e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801300e:	79fb      	ldrb	r3, [r7, #7]
 8013010:	f003 0304 	and.w	r3, r3, #4
 8013014:	2b00      	cmp	r3, #0
 8013016:	d002      	beq.n	801301e <f_open+0xfa>
 8013018:	2308      	movs	r3, #8
 801301a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801301e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013022:	2b00      	cmp	r3, #0
 8013024:	d167      	bne.n	80130f6 <f_open+0x1d2>
 8013026:	79fb      	ldrb	r3, [r7, #7]
 8013028:	f003 0308 	and.w	r3, r3, #8
 801302c:	2b00      	cmp	r3, #0
 801302e:	d062      	beq.n	80130f6 <f_open+0x1d2>
				dw = GET_FATTIME();
 8013030:	4ba2      	ldr	r3, [pc, #648]	; (80132bc <f_open+0x398>)
 8013032:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013036:	330e      	adds	r3, #14
 8013038:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801303a:	4618      	mov	r0, r3
 801303c:	f7fe f952 	bl	80112e4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013042:	3316      	adds	r3, #22
 8013044:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013046:	4618      	mov	r0, r3
 8013048:	f7fe f94c 	bl	80112e4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801304c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801304e:	330b      	adds	r3, #11
 8013050:	2220      	movs	r2, #32
 8013052:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013054:	693b      	ldr	r3, [r7, #16]
 8013056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013058:	4611      	mov	r1, r2
 801305a:	4618      	mov	r0, r3
 801305c:	f7ff f924 	bl	80122a8 <ld_clust>
 8013060:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013062:	693b      	ldr	r3, [r7, #16]
 8013064:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013066:	2200      	movs	r2, #0
 8013068:	4618      	mov	r0, r3
 801306a:	f7ff f93c 	bl	80122e6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801306e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013070:	331c      	adds	r3, #28
 8013072:	2100      	movs	r1, #0
 8013074:	4618      	mov	r0, r3
 8013076:	f7fe f935 	bl	80112e4 <st_dword>
					fs->wflag = 1;
 801307a:	693b      	ldr	r3, [r7, #16]
 801307c:	2201      	movs	r2, #1
 801307e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013082:	2b00      	cmp	r3, #0
 8013084:	d037      	beq.n	80130f6 <f_open+0x1d2>
						dw = fs->winsect;
 8013086:	693b      	ldr	r3, [r7, #16]
 8013088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801308a:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801308c:	f107 0314 	add.w	r3, r7, #20
 8013090:	2200      	movs	r2, #0
 8013092:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013094:	4618      	mov	r0, r3
 8013096:	f7fe fe2c 	bl	8011cf2 <remove_chain>
 801309a:	4603      	mov	r3, r0
 801309c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80130a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d126      	bne.n	80130f6 <f_open+0x1d2>
							res = move_window(fs, dw);
 80130a8:	693b      	ldr	r3, [r7, #16]
 80130aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80130ac:	4618      	mov	r0, r3
 80130ae:	f7fe fb73 	bl	8011798 <move_window>
 80130b2:	4603      	mov	r3, r0
 80130b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80130b8:	693b      	ldr	r3, [r7, #16]
 80130ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80130bc:	3a01      	subs	r2, #1
 80130be:	611a      	str	r2, [r3, #16]
 80130c0:	e019      	b.n	80130f6 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80130c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d115      	bne.n	80130f6 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80130ca:	7ebb      	ldrb	r3, [r7, #26]
 80130cc:	f003 0310 	and.w	r3, r3, #16
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d003      	beq.n	80130dc <f_open+0x1b8>
					res = FR_NO_FILE;
 80130d4:	2304      	movs	r3, #4
 80130d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80130da:	e00c      	b.n	80130f6 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80130dc:	79fb      	ldrb	r3, [r7, #7]
 80130de:	f003 0302 	and.w	r3, r3, #2
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d007      	beq.n	80130f6 <f_open+0x1d2>
 80130e6:	7ebb      	ldrb	r3, [r7, #26]
 80130e8:	f003 0301 	and.w	r3, r3, #1
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d002      	beq.n	80130f6 <f_open+0x1d2>
						res = FR_DENIED;
 80130f0:	2307      	movs	r3, #7
 80130f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80130f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d128      	bne.n	8013150 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80130fe:	79fb      	ldrb	r3, [r7, #7]
 8013100:	f003 0308 	and.w	r3, r3, #8
 8013104:	2b00      	cmp	r3, #0
 8013106:	d003      	beq.n	8013110 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8013108:	79fb      	ldrb	r3, [r7, #7]
 801310a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801310e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013110:	693b      	ldr	r3, [r7, #16]
 8013112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013118:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801311e:	79fb      	ldrb	r3, [r7, #7]
 8013120:	f023 0301 	bic.w	r3, r3, #1
 8013124:	2b00      	cmp	r3, #0
 8013126:	bf14      	ite	ne
 8013128:	2301      	movne	r3, #1
 801312a:	2300      	moveq	r3, #0
 801312c:	b2db      	uxtb	r3, r3
 801312e:	461a      	mov	r2, r3
 8013130:	f107 0314 	add.w	r3, r7, #20
 8013134:	4611      	mov	r1, r2
 8013136:	4618      	mov	r0, r3
 8013138:	f7fe f9fc 	bl	8011534 <inc_lock>
 801313c:	4602      	mov	r2, r0
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	691b      	ldr	r3, [r3, #16]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d102      	bne.n	8013150 <f_open+0x22c>
 801314a:	2302      	movs	r3, #2
 801314c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013150:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013154:	2b00      	cmp	r3, #0
 8013156:	f040 80a3 	bne.w	80132a0 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801315a:	693b      	ldr	r3, [r7, #16]
 801315c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801315e:	4611      	mov	r1, r2
 8013160:	4618      	mov	r0, r3
 8013162:	f7ff f8a1 	bl	80122a8 <ld_clust>
 8013166:	4602      	mov	r2, r0
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801316c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801316e:	331c      	adds	r3, #28
 8013170:	4618      	mov	r0, r3
 8013172:	f7fe f879 	bl	8011268 <ld_dword>
 8013176:	4602      	mov	r2, r0
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	2200      	movs	r2, #0
 8013180:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013182:	693a      	ldr	r2, [r7, #16]
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013188:	693b      	ldr	r3, [r7, #16]
 801318a:	88da      	ldrh	r2, [r3, #6]
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	79fa      	ldrb	r2, [r7, #7]
 8013194:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	2200      	movs	r2, #0
 801319a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	2200      	movs	r2, #0
 80131a0:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	2200      	movs	r2, #0
 80131a6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	3330      	adds	r3, #48	; 0x30
 80131ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80131b0:	2100      	movs	r1, #0
 80131b2:	4618      	mov	r0, r3
 80131b4:	f7fe f8e3 	bl	801137e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80131b8:	79fb      	ldrb	r3, [r7, #7]
 80131ba:	f003 0320 	and.w	r3, r3, #32
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d06e      	beq.n	80132a0 <f_open+0x37c>
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	68db      	ldr	r3, [r3, #12]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d06a      	beq.n	80132a0 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	68da      	ldr	r2, [r3, #12]
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80131d2:	693b      	ldr	r3, [r7, #16]
 80131d4:	895b      	ldrh	r3, [r3, #10]
 80131d6:	461a      	mov	r2, r3
 80131d8:	693b      	ldr	r3, [r7, #16]
 80131da:	899b      	ldrh	r3, [r3, #12]
 80131dc:	fb03 f302 	mul.w	r3, r3, r2
 80131e0:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	689b      	ldr	r3, [r3, #8]
 80131e6:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	68db      	ldr	r3, [r3, #12]
 80131ec:	657b      	str	r3, [r7, #84]	; 0x54
 80131ee:	e016      	b.n	801321e <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80131f4:	4618      	mov	r0, r3
 80131f6:	f7fe fb8c 	bl	8011912 <get_fat>
 80131fa:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80131fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80131fe:	2b01      	cmp	r3, #1
 8013200:	d802      	bhi.n	8013208 <f_open+0x2e4>
 8013202:	2302      	movs	r3, #2
 8013204:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013208:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801320a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801320e:	d102      	bne.n	8013216 <f_open+0x2f2>
 8013210:	2301      	movs	r3, #1
 8013212:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013216:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801321a:	1ad3      	subs	r3, r2, r3
 801321c:	657b      	str	r3, [r7, #84]	; 0x54
 801321e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013222:	2b00      	cmp	r3, #0
 8013224:	d103      	bne.n	801322e <f_open+0x30a>
 8013226:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801322a:	429a      	cmp	r2, r3
 801322c:	d8e0      	bhi.n	80131f0 <f_open+0x2cc>
				}
				fp->clust = clst;
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013232:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013234:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013238:	2b00      	cmp	r3, #0
 801323a:	d131      	bne.n	80132a0 <f_open+0x37c>
 801323c:	693b      	ldr	r3, [r7, #16]
 801323e:	899b      	ldrh	r3, [r3, #12]
 8013240:	461a      	mov	r2, r3
 8013242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013244:	fbb3 f1f2 	udiv	r1, r3, r2
 8013248:	fb02 f201 	mul.w	r2, r2, r1
 801324c:	1a9b      	subs	r3, r3, r2
 801324e:	2b00      	cmp	r3, #0
 8013250:	d026      	beq.n	80132a0 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013252:	693b      	ldr	r3, [r7, #16]
 8013254:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013256:	4618      	mov	r0, r3
 8013258:	f7fe fb3c 	bl	80118d4 <clust2sect>
 801325c:	6478      	str	r0, [r7, #68]	; 0x44
 801325e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013260:	2b00      	cmp	r3, #0
 8013262:	d103      	bne.n	801326c <f_open+0x348>
						res = FR_INT_ERR;
 8013264:	2302      	movs	r3, #2
 8013266:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801326a:	e019      	b.n	80132a0 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801326c:	693b      	ldr	r3, [r7, #16]
 801326e:	899b      	ldrh	r3, [r3, #12]
 8013270:	461a      	mov	r2, r3
 8013272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013274:	fbb3 f2f2 	udiv	r2, r3, r2
 8013278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801327a:	441a      	add	r2, r3
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013280:	693b      	ldr	r3, [r7, #16]
 8013282:	7858      	ldrb	r0, [r3, #1]
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	6a1a      	ldr	r2, [r3, #32]
 801328e:	2301      	movs	r3, #1
 8013290:	f7fd ff74 	bl	801117c <disk_read>
 8013294:	4603      	mov	r3, r0
 8013296:	2b00      	cmp	r3, #0
 8013298:	d002      	beq.n	80132a0 <f_open+0x37c>
 801329a:	2301      	movs	r3, #1
 801329c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80132a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d002      	beq.n	80132ae <f_open+0x38a>
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	2200      	movs	r2, #0
 80132ac:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80132ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	3760      	adds	r7, #96	; 0x60
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bd80      	pop	{r7, pc}
 80132ba:	bf00      	nop
 80132bc:	274a0000 	.word	0x274a0000

080132c0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b08e      	sub	sp, #56	; 0x38
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	60f8      	str	r0, [r7, #12]
 80132c8:	60b9      	str	r1, [r7, #8]
 80132ca:	607a      	str	r2, [r7, #4]
 80132cc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80132ce:	68bb      	ldr	r3, [r7, #8]
 80132d0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80132d2:	683b      	ldr	r3, [r7, #0]
 80132d4:	2200      	movs	r2, #0
 80132d6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	f107 0214 	add.w	r2, r7, #20
 80132de:	4611      	mov	r1, r2
 80132e0:	4618      	mov	r0, r3
 80132e2:	f7ff fda3 	bl	8012e2c <validate>
 80132e6:	4603      	mov	r3, r0
 80132e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80132ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d107      	bne.n	8013304 <f_read+0x44>
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	7d5b      	ldrb	r3, [r3, #21]
 80132f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80132fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013300:	2b00      	cmp	r3, #0
 8013302:	d002      	beq.n	801330a <f_read+0x4a>
 8013304:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013308:	e135      	b.n	8013576 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	7d1b      	ldrb	r3, [r3, #20]
 801330e:	f003 0301 	and.w	r3, r3, #1
 8013312:	2b00      	cmp	r3, #0
 8013314:	d101      	bne.n	801331a <f_read+0x5a>
 8013316:	2307      	movs	r3, #7
 8013318:	e12d      	b.n	8013576 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	68da      	ldr	r2, [r3, #12]
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	699b      	ldr	r3, [r3, #24]
 8013322:	1ad3      	subs	r3, r2, r3
 8013324:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013326:	687a      	ldr	r2, [r7, #4]
 8013328:	6a3b      	ldr	r3, [r7, #32]
 801332a:	429a      	cmp	r2, r3
 801332c:	f240 811e 	bls.w	801356c <f_read+0x2ac>
 8013330:	6a3b      	ldr	r3, [r7, #32]
 8013332:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013334:	e11a      	b.n	801356c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	699b      	ldr	r3, [r3, #24]
 801333a:	697a      	ldr	r2, [r7, #20]
 801333c:	8992      	ldrh	r2, [r2, #12]
 801333e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013342:	fb02 f201 	mul.w	r2, r2, r1
 8013346:	1a9b      	subs	r3, r3, r2
 8013348:	2b00      	cmp	r3, #0
 801334a:	f040 80d5 	bne.w	80134f8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	699b      	ldr	r3, [r3, #24]
 8013352:	697a      	ldr	r2, [r7, #20]
 8013354:	8992      	ldrh	r2, [r2, #12]
 8013356:	fbb3 f3f2 	udiv	r3, r3, r2
 801335a:	697a      	ldr	r2, [r7, #20]
 801335c:	8952      	ldrh	r2, [r2, #10]
 801335e:	3a01      	subs	r2, #1
 8013360:	4013      	ands	r3, r2
 8013362:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013364:	69fb      	ldr	r3, [r7, #28]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d12f      	bne.n	80133ca <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	699b      	ldr	r3, [r3, #24]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d103      	bne.n	801337a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	689b      	ldr	r3, [r3, #8]
 8013376:	633b      	str	r3, [r7, #48]	; 0x30
 8013378:	e013      	b.n	80133a2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801337e:	2b00      	cmp	r3, #0
 8013380:	d007      	beq.n	8013392 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	699b      	ldr	r3, [r3, #24]
 8013386:	4619      	mov	r1, r3
 8013388:	68f8      	ldr	r0, [r7, #12]
 801338a:	f7fe fdaf 	bl	8011eec <clmt_clust>
 801338e:	6338      	str	r0, [r7, #48]	; 0x30
 8013390:	e007      	b.n	80133a2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8013392:	68fa      	ldr	r2, [r7, #12]
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	69db      	ldr	r3, [r3, #28]
 8013398:	4619      	mov	r1, r3
 801339a:	4610      	mov	r0, r2
 801339c:	f7fe fab9 	bl	8011912 <get_fat>
 80133a0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80133a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133a4:	2b01      	cmp	r3, #1
 80133a6:	d804      	bhi.n	80133b2 <f_read+0xf2>
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	2202      	movs	r2, #2
 80133ac:	755a      	strb	r2, [r3, #21]
 80133ae:	2302      	movs	r3, #2
 80133b0:	e0e1      	b.n	8013576 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80133b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133b8:	d104      	bne.n	80133c4 <f_read+0x104>
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	2201      	movs	r2, #1
 80133be:	755a      	strb	r2, [r3, #21]
 80133c0:	2301      	movs	r3, #1
 80133c2:	e0d8      	b.n	8013576 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133c8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80133ca:	697a      	ldr	r2, [r7, #20]
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	69db      	ldr	r3, [r3, #28]
 80133d0:	4619      	mov	r1, r3
 80133d2:	4610      	mov	r0, r2
 80133d4:	f7fe fa7e 	bl	80118d4 <clust2sect>
 80133d8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80133da:	69bb      	ldr	r3, [r7, #24]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d104      	bne.n	80133ea <f_read+0x12a>
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	2202      	movs	r2, #2
 80133e4:	755a      	strb	r2, [r3, #21]
 80133e6:	2302      	movs	r3, #2
 80133e8:	e0c5      	b.n	8013576 <f_read+0x2b6>
			sect += csect;
 80133ea:	69ba      	ldr	r2, [r7, #24]
 80133ec:	69fb      	ldr	r3, [r7, #28]
 80133ee:	4413      	add	r3, r2
 80133f0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80133f2:	697b      	ldr	r3, [r7, #20]
 80133f4:	899b      	ldrh	r3, [r3, #12]
 80133f6:	461a      	mov	r2, r3
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80133fe:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013402:	2b00      	cmp	r3, #0
 8013404:	d041      	beq.n	801348a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013406:	69fa      	ldr	r2, [r7, #28]
 8013408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801340a:	4413      	add	r3, r2
 801340c:	697a      	ldr	r2, [r7, #20]
 801340e:	8952      	ldrh	r2, [r2, #10]
 8013410:	4293      	cmp	r3, r2
 8013412:	d905      	bls.n	8013420 <f_read+0x160>
					cc = fs->csize - csect;
 8013414:	697b      	ldr	r3, [r7, #20]
 8013416:	895b      	ldrh	r3, [r3, #10]
 8013418:	461a      	mov	r2, r3
 801341a:	69fb      	ldr	r3, [r7, #28]
 801341c:	1ad3      	subs	r3, r2, r3
 801341e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013420:	697b      	ldr	r3, [r7, #20]
 8013422:	7858      	ldrb	r0, [r3, #1]
 8013424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013426:	69ba      	ldr	r2, [r7, #24]
 8013428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801342a:	f7fd fea7 	bl	801117c <disk_read>
 801342e:	4603      	mov	r3, r0
 8013430:	2b00      	cmp	r3, #0
 8013432:	d004      	beq.n	801343e <f_read+0x17e>
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	2201      	movs	r2, #1
 8013438:	755a      	strb	r2, [r3, #21]
 801343a:	2301      	movs	r3, #1
 801343c:	e09b      	b.n	8013576 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	7d1b      	ldrb	r3, [r3, #20]
 8013442:	b25b      	sxtb	r3, r3
 8013444:	2b00      	cmp	r3, #0
 8013446:	da18      	bge.n	801347a <f_read+0x1ba>
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	6a1a      	ldr	r2, [r3, #32]
 801344c:	69bb      	ldr	r3, [r7, #24]
 801344e:	1ad3      	subs	r3, r2, r3
 8013450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013452:	429a      	cmp	r2, r3
 8013454:	d911      	bls.n	801347a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	6a1a      	ldr	r2, [r3, #32]
 801345a:	69bb      	ldr	r3, [r7, #24]
 801345c:	1ad3      	subs	r3, r2, r3
 801345e:	697a      	ldr	r2, [r7, #20]
 8013460:	8992      	ldrh	r2, [r2, #12]
 8013462:	fb02 f303 	mul.w	r3, r2, r3
 8013466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013468:	18d0      	adds	r0, r2, r3
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013470:	697b      	ldr	r3, [r7, #20]
 8013472:	899b      	ldrh	r3, [r3, #12]
 8013474:	461a      	mov	r2, r3
 8013476:	f7fd ff61 	bl	801133c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801347a:	697b      	ldr	r3, [r7, #20]
 801347c:	899b      	ldrh	r3, [r3, #12]
 801347e:	461a      	mov	r2, r3
 8013480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013482:	fb02 f303 	mul.w	r3, r2, r3
 8013486:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8013488:	e05c      	b.n	8013544 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	6a1b      	ldr	r3, [r3, #32]
 801348e:	69ba      	ldr	r2, [r7, #24]
 8013490:	429a      	cmp	r2, r3
 8013492:	d02e      	beq.n	80134f2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	7d1b      	ldrb	r3, [r3, #20]
 8013498:	b25b      	sxtb	r3, r3
 801349a:	2b00      	cmp	r3, #0
 801349c:	da18      	bge.n	80134d0 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801349e:	697b      	ldr	r3, [r7, #20]
 80134a0:	7858      	ldrb	r0, [r3, #1]
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	6a1a      	ldr	r2, [r3, #32]
 80134ac:	2301      	movs	r3, #1
 80134ae:	f7fd fe85 	bl	80111bc <disk_write>
 80134b2:	4603      	mov	r3, r0
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d004      	beq.n	80134c2 <f_read+0x202>
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	2201      	movs	r2, #1
 80134bc:	755a      	strb	r2, [r3, #21]
 80134be:	2301      	movs	r3, #1
 80134c0:	e059      	b.n	8013576 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	7d1b      	ldrb	r3, [r3, #20]
 80134c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80134ca:	b2da      	uxtb	r2, r3
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80134d0:	697b      	ldr	r3, [r7, #20]
 80134d2:	7858      	ldrb	r0, [r3, #1]
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80134da:	2301      	movs	r3, #1
 80134dc:	69ba      	ldr	r2, [r7, #24]
 80134de:	f7fd fe4d 	bl	801117c <disk_read>
 80134e2:	4603      	mov	r3, r0
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d004      	beq.n	80134f2 <f_read+0x232>
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	2201      	movs	r2, #1
 80134ec:	755a      	strb	r2, [r3, #21]
 80134ee:	2301      	movs	r3, #1
 80134f0:	e041      	b.n	8013576 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	69ba      	ldr	r2, [r7, #24]
 80134f6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80134f8:	697b      	ldr	r3, [r7, #20]
 80134fa:	899b      	ldrh	r3, [r3, #12]
 80134fc:	4618      	mov	r0, r3
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	699b      	ldr	r3, [r3, #24]
 8013502:	697a      	ldr	r2, [r7, #20]
 8013504:	8992      	ldrh	r2, [r2, #12]
 8013506:	fbb3 f1f2 	udiv	r1, r3, r2
 801350a:	fb02 f201 	mul.w	r2, r2, r1
 801350e:	1a9b      	subs	r3, r3, r2
 8013510:	1ac3      	subs	r3, r0, r3
 8013512:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	429a      	cmp	r2, r3
 801351a:	d901      	bls.n	8013520 <f_read+0x260>
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	699b      	ldr	r3, [r3, #24]
 801352a:	697a      	ldr	r2, [r7, #20]
 801352c:	8992      	ldrh	r2, [r2, #12]
 801352e:	fbb3 f0f2 	udiv	r0, r3, r2
 8013532:	fb02 f200 	mul.w	r2, r2, r0
 8013536:	1a9b      	subs	r3, r3, r2
 8013538:	440b      	add	r3, r1
 801353a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801353c:	4619      	mov	r1, r3
 801353e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013540:	f7fd fefc 	bl	801133c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013548:	4413      	add	r3, r2
 801354a:	627b      	str	r3, [r7, #36]	; 0x24
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	699a      	ldr	r2, [r3, #24]
 8013550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013552:	441a      	add	r2, r3
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	619a      	str	r2, [r3, #24]
 8013558:	683b      	ldr	r3, [r7, #0]
 801355a:	681a      	ldr	r2, [r3, #0]
 801355c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801355e:	441a      	add	r2, r3
 8013560:	683b      	ldr	r3, [r7, #0]
 8013562:	601a      	str	r2, [r3, #0]
 8013564:	687a      	ldr	r2, [r7, #4]
 8013566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013568:	1ad3      	subs	r3, r2, r3
 801356a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	2b00      	cmp	r3, #0
 8013570:	f47f aee1 	bne.w	8013336 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013574:	2300      	movs	r3, #0
}
 8013576:	4618      	mov	r0, r3
 8013578:	3738      	adds	r7, #56	; 0x38
 801357a:	46bd      	mov	sp, r7
 801357c:	bd80      	pop	{r7, pc}

0801357e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801357e:	b580      	push	{r7, lr}
 8013580:	b08c      	sub	sp, #48	; 0x30
 8013582:	af00      	add	r7, sp, #0
 8013584:	60f8      	str	r0, [r7, #12]
 8013586:	60b9      	str	r1, [r7, #8]
 8013588:	607a      	str	r2, [r7, #4]
 801358a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801358c:	68bb      	ldr	r3, [r7, #8]
 801358e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013590:	683b      	ldr	r3, [r7, #0]
 8013592:	2200      	movs	r2, #0
 8013594:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	f107 0210 	add.w	r2, r7, #16
 801359c:	4611      	mov	r1, r2
 801359e:	4618      	mov	r0, r3
 80135a0:	f7ff fc44 	bl	8012e2c <validate>
 80135a4:	4603      	mov	r3, r0
 80135a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80135aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d107      	bne.n	80135c2 <f_write+0x44>
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	7d5b      	ldrb	r3, [r3, #21]
 80135b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80135ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d002      	beq.n	80135c8 <f_write+0x4a>
 80135c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80135c6:	e16a      	b.n	801389e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	7d1b      	ldrb	r3, [r3, #20]
 80135cc:	f003 0302 	and.w	r3, r3, #2
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d101      	bne.n	80135d8 <f_write+0x5a>
 80135d4:	2307      	movs	r3, #7
 80135d6:	e162      	b.n	801389e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	699a      	ldr	r2, [r3, #24]
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	441a      	add	r2, r3
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	699b      	ldr	r3, [r3, #24]
 80135e4:	429a      	cmp	r2, r3
 80135e6:	f080 814c 	bcs.w	8013882 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	699b      	ldr	r3, [r3, #24]
 80135ee:	43db      	mvns	r3, r3
 80135f0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80135f2:	e146      	b.n	8013882 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	699b      	ldr	r3, [r3, #24]
 80135f8:	693a      	ldr	r2, [r7, #16]
 80135fa:	8992      	ldrh	r2, [r2, #12]
 80135fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8013600:	fb02 f201 	mul.w	r2, r2, r1
 8013604:	1a9b      	subs	r3, r3, r2
 8013606:	2b00      	cmp	r3, #0
 8013608:	f040 80f1 	bne.w	80137ee <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	699b      	ldr	r3, [r3, #24]
 8013610:	693a      	ldr	r2, [r7, #16]
 8013612:	8992      	ldrh	r2, [r2, #12]
 8013614:	fbb3 f3f2 	udiv	r3, r3, r2
 8013618:	693a      	ldr	r2, [r7, #16]
 801361a:	8952      	ldrh	r2, [r2, #10]
 801361c:	3a01      	subs	r2, #1
 801361e:	4013      	ands	r3, r2
 8013620:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013622:	69bb      	ldr	r3, [r7, #24]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d143      	bne.n	80136b0 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	699b      	ldr	r3, [r3, #24]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d10c      	bne.n	801364a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	689b      	ldr	r3, [r3, #8]
 8013634:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013638:	2b00      	cmp	r3, #0
 801363a:	d11a      	bne.n	8013672 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	2100      	movs	r1, #0
 8013640:	4618      	mov	r0, r3
 8013642:	f7fe fbbb 	bl	8011dbc <create_chain>
 8013646:	62b8      	str	r0, [r7, #40]	; 0x28
 8013648:	e013      	b.n	8013672 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801364e:	2b00      	cmp	r3, #0
 8013650:	d007      	beq.n	8013662 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	699b      	ldr	r3, [r3, #24]
 8013656:	4619      	mov	r1, r3
 8013658:	68f8      	ldr	r0, [r7, #12]
 801365a:	f7fe fc47 	bl	8011eec <clmt_clust>
 801365e:	62b8      	str	r0, [r7, #40]	; 0x28
 8013660:	e007      	b.n	8013672 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013662:	68fa      	ldr	r2, [r7, #12]
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	69db      	ldr	r3, [r3, #28]
 8013668:	4619      	mov	r1, r3
 801366a:	4610      	mov	r0, r2
 801366c:	f7fe fba6 	bl	8011dbc <create_chain>
 8013670:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013674:	2b00      	cmp	r3, #0
 8013676:	f000 8109 	beq.w	801388c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801367c:	2b01      	cmp	r3, #1
 801367e:	d104      	bne.n	801368a <f_write+0x10c>
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	2202      	movs	r2, #2
 8013684:	755a      	strb	r2, [r3, #21]
 8013686:	2302      	movs	r3, #2
 8013688:	e109      	b.n	801389e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801368a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801368c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013690:	d104      	bne.n	801369c <f_write+0x11e>
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	2201      	movs	r2, #1
 8013696:	755a      	strb	r2, [r3, #21]
 8013698:	2301      	movs	r3, #1
 801369a:	e100      	b.n	801389e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136a0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	689b      	ldr	r3, [r3, #8]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d102      	bne.n	80136b0 <f_write+0x132>
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136ae:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	7d1b      	ldrb	r3, [r3, #20]
 80136b4:	b25b      	sxtb	r3, r3
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	da18      	bge.n	80136ec <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80136ba:	693b      	ldr	r3, [r7, #16]
 80136bc:	7858      	ldrb	r0, [r3, #1]
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	6a1a      	ldr	r2, [r3, #32]
 80136c8:	2301      	movs	r3, #1
 80136ca:	f7fd fd77 	bl	80111bc <disk_write>
 80136ce:	4603      	mov	r3, r0
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d004      	beq.n	80136de <f_write+0x160>
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	2201      	movs	r2, #1
 80136d8:	755a      	strb	r2, [r3, #21]
 80136da:	2301      	movs	r3, #1
 80136dc:	e0df      	b.n	801389e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	7d1b      	ldrb	r3, [r3, #20]
 80136e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80136e6:	b2da      	uxtb	r2, r3
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80136ec:	693a      	ldr	r2, [r7, #16]
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	69db      	ldr	r3, [r3, #28]
 80136f2:	4619      	mov	r1, r3
 80136f4:	4610      	mov	r0, r2
 80136f6:	f7fe f8ed 	bl	80118d4 <clust2sect>
 80136fa:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80136fc:	697b      	ldr	r3, [r7, #20]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d104      	bne.n	801370c <f_write+0x18e>
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	2202      	movs	r2, #2
 8013706:	755a      	strb	r2, [r3, #21]
 8013708:	2302      	movs	r3, #2
 801370a:	e0c8      	b.n	801389e <f_write+0x320>
			sect += csect;
 801370c:	697a      	ldr	r2, [r7, #20]
 801370e:	69bb      	ldr	r3, [r7, #24]
 8013710:	4413      	add	r3, r2
 8013712:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013714:	693b      	ldr	r3, [r7, #16]
 8013716:	899b      	ldrh	r3, [r3, #12]
 8013718:	461a      	mov	r2, r3
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013720:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013722:	6a3b      	ldr	r3, [r7, #32]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d043      	beq.n	80137b0 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013728:	69ba      	ldr	r2, [r7, #24]
 801372a:	6a3b      	ldr	r3, [r7, #32]
 801372c:	4413      	add	r3, r2
 801372e:	693a      	ldr	r2, [r7, #16]
 8013730:	8952      	ldrh	r2, [r2, #10]
 8013732:	4293      	cmp	r3, r2
 8013734:	d905      	bls.n	8013742 <f_write+0x1c4>
					cc = fs->csize - csect;
 8013736:	693b      	ldr	r3, [r7, #16]
 8013738:	895b      	ldrh	r3, [r3, #10]
 801373a:	461a      	mov	r2, r3
 801373c:	69bb      	ldr	r3, [r7, #24]
 801373e:	1ad3      	subs	r3, r2, r3
 8013740:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013742:	693b      	ldr	r3, [r7, #16]
 8013744:	7858      	ldrb	r0, [r3, #1]
 8013746:	6a3b      	ldr	r3, [r7, #32]
 8013748:	697a      	ldr	r2, [r7, #20]
 801374a:	69f9      	ldr	r1, [r7, #28]
 801374c:	f7fd fd36 	bl	80111bc <disk_write>
 8013750:	4603      	mov	r3, r0
 8013752:	2b00      	cmp	r3, #0
 8013754:	d004      	beq.n	8013760 <f_write+0x1e2>
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	2201      	movs	r2, #1
 801375a:	755a      	strb	r2, [r3, #21]
 801375c:	2301      	movs	r3, #1
 801375e:	e09e      	b.n	801389e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	6a1a      	ldr	r2, [r3, #32]
 8013764:	697b      	ldr	r3, [r7, #20]
 8013766:	1ad3      	subs	r3, r2, r3
 8013768:	6a3a      	ldr	r2, [r7, #32]
 801376a:	429a      	cmp	r2, r3
 801376c:	d918      	bls.n	80137a0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	6a1a      	ldr	r2, [r3, #32]
 8013778:	697b      	ldr	r3, [r7, #20]
 801377a:	1ad3      	subs	r3, r2, r3
 801377c:	693a      	ldr	r2, [r7, #16]
 801377e:	8992      	ldrh	r2, [r2, #12]
 8013780:	fb02 f303 	mul.w	r3, r2, r3
 8013784:	69fa      	ldr	r2, [r7, #28]
 8013786:	18d1      	adds	r1, r2, r3
 8013788:	693b      	ldr	r3, [r7, #16]
 801378a:	899b      	ldrh	r3, [r3, #12]
 801378c:	461a      	mov	r2, r3
 801378e:	f7fd fdd5 	bl	801133c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	7d1b      	ldrb	r3, [r3, #20]
 8013796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801379a:	b2da      	uxtb	r2, r3
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80137a0:	693b      	ldr	r3, [r7, #16]
 80137a2:	899b      	ldrh	r3, [r3, #12]
 80137a4:	461a      	mov	r2, r3
 80137a6:	6a3b      	ldr	r3, [r7, #32]
 80137a8:	fb02 f303 	mul.w	r3, r2, r3
 80137ac:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80137ae:	e04b      	b.n	8013848 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	6a1b      	ldr	r3, [r3, #32]
 80137b4:	697a      	ldr	r2, [r7, #20]
 80137b6:	429a      	cmp	r2, r3
 80137b8:	d016      	beq.n	80137e8 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	699a      	ldr	r2, [r3, #24]
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80137c2:	429a      	cmp	r2, r3
 80137c4:	d210      	bcs.n	80137e8 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80137c6:	693b      	ldr	r3, [r7, #16]
 80137c8:	7858      	ldrb	r0, [r3, #1]
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80137d0:	2301      	movs	r3, #1
 80137d2:	697a      	ldr	r2, [r7, #20]
 80137d4:	f7fd fcd2 	bl	801117c <disk_read>
 80137d8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d004      	beq.n	80137e8 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	2201      	movs	r2, #1
 80137e2:	755a      	strb	r2, [r3, #21]
 80137e4:	2301      	movs	r3, #1
 80137e6:	e05a      	b.n	801389e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	697a      	ldr	r2, [r7, #20]
 80137ec:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80137ee:	693b      	ldr	r3, [r7, #16]
 80137f0:	899b      	ldrh	r3, [r3, #12]
 80137f2:	4618      	mov	r0, r3
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	699b      	ldr	r3, [r3, #24]
 80137f8:	693a      	ldr	r2, [r7, #16]
 80137fa:	8992      	ldrh	r2, [r2, #12]
 80137fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8013800:	fb02 f201 	mul.w	r2, r2, r1
 8013804:	1a9b      	subs	r3, r3, r2
 8013806:	1ac3      	subs	r3, r0, r3
 8013808:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801380a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	429a      	cmp	r2, r3
 8013810:	d901      	bls.n	8013816 <f_write+0x298>
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	699b      	ldr	r3, [r3, #24]
 8013820:	693a      	ldr	r2, [r7, #16]
 8013822:	8992      	ldrh	r2, [r2, #12]
 8013824:	fbb3 f0f2 	udiv	r0, r3, r2
 8013828:	fb02 f200 	mul.w	r2, r2, r0
 801382c:	1a9b      	subs	r3, r3, r2
 801382e:	440b      	add	r3, r1
 8013830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013832:	69f9      	ldr	r1, [r7, #28]
 8013834:	4618      	mov	r0, r3
 8013836:	f7fd fd81 	bl	801133c <mem_cpy>
		fp->flag |= FA_DIRTY;
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	7d1b      	ldrb	r3, [r3, #20]
 801383e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013842:	b2da      	uxtb	r2, r3
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013848:	69fa      	ldr	r2, [r7, #28]
 801384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801384c:	4413      	add	r3, r2
 801384e:	61fb      	str	r3, [r7, #28]
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	699a      	ldr	r2, [r3, #24]
 8013854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013856:	441a      	add	r2, r3
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	619a      	str	r2, [r3, #24]
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	68da      	ldr	r2, [r3, #12]
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	699b      	ldr	r3, [r3, #24]
 8013864:	429a      	cmp	r2, r3
 8013866:	bf38      	it	cc
 8013868:	461a      	movcc	r2, r3
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	60da      	str	r2, [r3, #12]
 801386e:	683b      	ldr	r3, [r7, #0]
 8013870:	681a      	ldr	r2, [r3, #0]
 8013872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013874:	441a      	add	r2, r3
 8013876:	683b      	ldr	r3, [r7, #0]
 8013878:	601a      	str	r2, [r3, #0]
 801387a:	687a      	ldr	r2, [r7, #4]
 801387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801387e:	1ad3      	subs	r3, r2, r3
 8013880:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	2b00      	cmp	r3, #0
 8013886:	f47f aeb5 	bne.w	80135f4 <f_write+0x76>
 801388a:	e000      	b.n	801388e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801388c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	7d1b      	ldrb	r3, [r3, #20]
 8013892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013896:	b2da      	uxtb	r2, r3
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801389c:	2300      	movs	r3, #0
}
 801389e:	4618      	mov	r0, r3
 80138a0:	3730      	adds	r7, #48	; 0x30
 80138a2:	46bd      	mov	sp, r7
 80138a4:	bd80      	pop	{r7, pc}
	...

080138a8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b086      	sub	sp, #24
 80138ac:	af00      	add	r7, sp, #0
 80138ae:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	f107 0208 	add.w	r2, r7, #8
 80138b6:	4611      	mov	r1, r2
 80138b8:	4618      	mov	r0, r3
 80138ba:	f7ff fab7 	bl	8012e2c <validate>
 80138be:	4603      	mov	r3, r0
 80138c0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80138c2:	7dfb      	ldrb	r3, [r7, #23]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d167      	bne.n	8013998 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	7d1b      	ldrb	r3, [r3, #20]
 80138cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d061      	beq.n	8013998 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	7d1b      	ldrb	r3, [r3, #20]
 80138d8:	b25b      	sxtb	r3, r3
 80138da:	2b00      	cmp	r3, #0
 80138dc:	da15      	bge.n	801390a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80138de:	68bb      	ldr	r3, [r7, #8]
 80138e0:	7858      	ldrb	r0, [r3, #1]
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	6a1a      	ldr	r2, [r3, #32]
 80138ec:	2301      	movs	r3, #1
 80138ee:	f7fd fc65 	bl	80111bc <disk_write>
 80138f2:	4603      	mov	r3, r0
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d001      	beq.n	80138fc <f_sync+0x54>
 80138f8:	2301      	movs	r3, #1
 80138fa:	e04e      	b.n	801399a <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	7d1b      	ldrb	r3, [r3, #20]
 8013900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013904:	b2da      	uxtb	r2, r3
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801390a:	4b26      	ldr	r3, [pc, #152]	; (80139a4 <f_sync+0xfc>)
 801390c:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801390e:	68ba      	ldr	r2, [r7, #8]
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013914:	4619      	mov	r1, r3
 8013916:	4610      	mov	r0, r2
 8013918:	f7fd ff3e 	bl	8011798 <move_window>
 801391c:	4603      	mov	r3, r0
 801391e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013920:	7dfb      	ldrb	r3, [r7, #23]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d138      	bne.n	8013998 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801392a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	330b      	adds	r3, #11
 8013930:	781a      	ldrb	r2, [r3, #0]
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	330b      	adds	r3, #11
 8013936:	f042 0220 	orr.w	r2, r2, #32
 801393a:	b2d2      	uxtb	r2, r2
 801393c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	6818      	ldr	r0, [r3, #0]
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	689b      	ldr	r3, [r3, #8]
 8013946:	461a      	mov	r2, r3
 8013948:	68f9      	ldr	r1, [r7, #12]
 801394a:	f7fe fccc 	bl	80122e6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	f103 021c 	add.w	r2, r3, #28
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	68db      	ldr	r3, [r3, #12]
 8013958:	4619      	mov	r1, r3
 801395a:	4610      	mov	r0, r2
 801395c:	f7fd fcc2 	bl	80112e4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	3316      	adds	r3, #22
 8013964:	6939      	ldr	r1, [r7, #16]
 8013966:	4618      	mov	r0, r3
 8013968:	f7fd fcbc 	bl	80112e4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	3312      	adds	r3, #18
 8013970:	2100      	movs	r1, #0
 8013972:	4618      	mov	r0, r3
 8013974:	f7fd fc9b 	bl	80112ae <st_word>
					fs->wflag = 1;
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	2201      	movs	r2, #1
 801397c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801397e:	68bb      	ldr	r3, [r7, #8]
 8013980:	4618      	mov	r0, r3
 8013982:	f7fd ff37 	bl	80117f4 <sync_fs>
 8013986:	4603      	mov	r3, r0
 8013988:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	7d1b      	ldrb	r3, [r3, #20]
 801398e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013992:	b2da      	uxtb	r2, r3
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013998:	7dfb      	ldrb	r3, [r7, #23]
}
 801399a:	4618      	mov	r0, r3
 801399c:	3718      	adds	r7, #24
 801399e:	46bd      	mov	sp, r7
 80139a0:	bd80      	pop	{r7, pc}
 80139a2:	bf00      	nop
 80139a4:	274a0000 	.word	0x274a0000

080139a8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b084      	sub	sp, #16
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80139b0:	6878      	ldr	r0, [r7, #4]
 80139b2:	f7ff ff79 	bl	80138a8 <f_sync>
 80139b6:	4603      	mov	r3, r0
 80139b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80139ba:	7bfb      	ldrb	r3, [r7, #15]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d118      	bne.n	80139f2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	f107 0208 	add.w	r2, r7, #8
 80139c6:	4611      	mov	r1, r2
 80139c8:	4618      	mov	r0, r3
 80139ca:	f7ff fa2f 	bl	8012e2c <validate>
 80139ce:	4603      	mov	r3, r0
 80139d0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80139d2:	7bfb      	ldrb	r3, [r7, #15]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d10c      	bne.n	80139f2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	691b      	ldr	r3, [r3, #16]
 80139dc:	4618      	mov	r0, r3
 80139de:	f7fd fe37 	bl	8011650 <dec_lock>
 80139e2:	4603      	mov	r3, r0
 80139e4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80139e6:	7bfb      	ldrb	r3, [r7, #15]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d102      	bne.n	80139f2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	2200      	movs	r2, #0
 80139f0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80139f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80139f4:	4618      	mov	r0, r3
 80139f6:	3710      	adds	r7, #16
 80139f8:	46bd      	mov	sp, r7
 80139fa:	bd80      	pop	{r7, pc}

080139fc <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80139fc:	b590      	push	{r4, r7, lr}
 80139fe:	b091      	sub	sp, #68	; 0x44
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013a04:	f107 0108 	add.w	r1, r7, #8
 8013a08:	1d3b      	adds	r3, r7, #4
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	f7fe ff87 	bl	8012920 <find_volume>
 8013a12:	4603      	mov	r3, r0
 8013a14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013a18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d131      	bne.n	8013a84 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013a20:	68bb      	ldr	r3, [r7, #8]
 8013a22:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013a24:	687a      	ldr	r2, [r7, #4]
 8013a26:	f107 030c 	add.w	r3, r7, #12
 8013a2a:	4611      	mov	r1, r2
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	f7fe fe47 	bl	80126c0 <follow_path>
 8013a32:	4603      	mov	r3, r0
 8013a34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013a38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d11a      	bne.n	8013a76 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013a40:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013a44:	b25b      	sxtb	r3, r3
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	da03      	bge.n	8013a52 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013a4a:	68bb      	ldr	r3, [r7, #8]
 8013a4c:	697a      	ldr	r2, [r7, #20]
 8013a4e:	619a      	str	r2, [r3, #24]
 8013a50:	e011      	b.n	8013a76 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013a52:	7cbb      	ldrb	r3, [r7, #18]
 8013a54:	f003 0310 	and.w	r3, r3, #16
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d009      	beq.n	8013a70 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013a5c:	68bb      	ldr	r3, [r7, #8]
 8013a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a60:	68bc      	ldr	r4, [r7, #8]
 8013a62:	4611      	mov	r1, r2
 8013a64:	4618      	mov	r0, r3
 8013a66:	f7fe fc1f 	bl	80122a8 <ld_clust>
 8013a6a:	4603      	mov	r3, r0
 8013a6c:	61a3      	str	r3, [r4, #24]
 8013a6e:	e002      	b.n	8013a76 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013a70:	2305      	movs	r3, #5
 8013a72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013a76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013a7a:	2b04      	cmp	r3, #4
 8013a7c:	d102      	bne.n	8013a84 <f_chdir+0x88>
 8013a7e:	2305      	movs	r3, #5
 8013a80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013a84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013a88:	4618      	mov	r0, r3
 8013a8a:	3744      	adds	r7, #68	; 0x44
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	bd90      	pop	{r4, r7, pc}

08013a90 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b090      	sub	sp, #64	; 0x40
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
 8013a98:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	f107 0208 	add.w	r2, r7, #8
 8013aa0:	4611      	mov	r1, r2
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f7ff f9c2 	bl	8012e2c <validate>
 8013aa8:	4603      	mov	r3, r0
 8013aaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013aae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d103      	bne.n	8013abe <f_lseek+0x2e>
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	7d5b      	ldrb	r3, [r3, #21]
 8013aba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013abe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d002      	beq.n	8013acc <f_lseek+0x3c>
 8013ac6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013aca:	e201      	b.n	8013ed0 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	f000 80d9 	beq.w	8013c88 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013ad6:	683b      	ldr	r3, [r7, #0]
 8013ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013adc:	d15a      	bne.n	8013b94 <f_lseek+0x104>
			tbl = fp->cltbl;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ae2:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae6:	1d1a      	adds	r2, r3, #4
 8013ae8:	627a      	str	r2, [r7, #36]	; 0x24
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	617b      	str	r3, [r7, #20]
 8013aee:	2302      	movs	r3, #2
 8013af0:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	689b      	ldr	r3, [r3, #8]
 8013af6:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d03a      	beq.n	8013b74 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b00:	613b      	str	r3, [r7, #16]
 8013b02:	2300      	movs	r3, #0
 8013b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b08:	3302      	adds	r3, #2
 8013b0a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b0e:	60fb      	str	r3, [r7, #12]
 8013b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b12:	3301      	adds	r3, #1
 8013b14:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	f7fd fef9 	bl	8011912 <get_fat>
 8013b20:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b24:	2b01      	cmp	r3, #1
 8013b26:	d804      	bhi.n	8013b32 <f_lseek+0xa2>
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	2202      	movs	r2, #2
 8013b2c:	755a      	strb	r2, [r3, #21]
 8013b2e:	2302      	movs	r3, #2
 8013b30:	e1ce      	b.n	8013ed0 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b38:	d104      	bne.n	8013b44 <f_lseek+0xb4>
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	2201      	movs	r2, #1
 8013b3e:	755a      	strb	r2, [r3, #21]
 8013b40:	2301      	movs	r3, #1
 8013b42:	e1c5      	b.n	8013ed0 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	3301      	adds	r3, #1
 8013b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b4a:	429a      	cmp	r2, r3
 8013b4c:	d0de      	beq.n	8013b0c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013b4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b50:	697b      	ldr	r3, [r7, #20]
 8013b52:	429a      	cmp	r2, r3
 8013b54:	d809      	bhi.n	8013b6a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b58:	1d1a      	adds	r2, r3, #4
 8013b5a:	627a      	str	r2, [r7, #36]	; 0x24
 8013b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b5e:	601a      	str	r2, [r3, #0]
 8013b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b62:	1d1a      	adds	r2, r3, #4
 8013b64:	627a      	str	r2, [r7, #36]	; 0x24
 8013b66:	693a      	ldr	r2, [r7, #16]
 8013b68:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013b6a:	68bb      	ldr	r3, [r7, #8]
 8013b6c:	69db      	ldr	r3, [r3, #28]
 8013b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b70:	429a      	cmp	r2, r3
 8013b72:	d3c4      	bcc.n	8013afe <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b7a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013b7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b7e:	697b      	ldr	r3, [r7, #20]
 8013b80:	429a      	cmp	r2, r3
 8013b82:	d803      	bhi.n	8013b8c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b86:	2200      	movs	r2, #0
 8013b88:	601a      	str	r2, [r3, #0]
 8013b8a:	e19f      	b.n	8013ecc <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013b8c:	2311      	movs	r3, #17
 8013b8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013b92:	e19b      	b.n	8013ecc <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	68db      	ldr	r3, [r3, #12]
 8013b98:	683a      	ldr	r2, [r7, #0]
 8013b9a:	429a      	cmp	r2, r3
 8013b9c:	d902      	bls.n	8013ba4 <f_lseek+0x114>
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	68db      	ldr	r3, [r3, #12]
 8013ba2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	683a      	ldr	r2, [r7, #0]
 8013ba8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013baa:	683b      	ldr	r3, [r7, #0]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	f000 818d 	beq.w	8013ecc <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013bb2:	683b      	ldr	r3, [r7, #0]
 8013bb4:	3b01      	subs	r3, #1
 8013bb6:	4619      	mov	r1, r3
 8013bb8:	6878      	ldr	r0, [r7, #4]
 8013bba:	f7fe f997 	bl	8011eec <clmt_clust>
 8013bbe:	4602      	mov	r2, r0
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013bc4:	68ba      	ldr	r2, [r7, #8]
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	69db      	ldr	r3, [r3, #28]
 8013bca:	4619      	mov	r1, r3
 8013bcc:	4610      	mov	r0, r2
 8013bce:	f7fd fe81 	bl	80118d4 <clust2sect>
 8013bd2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013bd4:	69bb      	ldr	r3, [r7, #24]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d104      	bne.n	8013be4 <f_lseek+0x154>
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	2202      	movs	r2, #2
 8013bde:	755a      	strb	r2, [r3, #21]
 8013be0:	2302      	movs	r3, #2
 8013be2:	e175      	b.n	8013ed0 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013be4:	683b      	ldr	r3, [r7, #0]
 8013be6:	3b01      	subs	r3, #1
 8013be8:	68ba      	ldr	r2, [r7, #8]
 8013bea:	8992      	ldrh	r2, [r2, #12]
 8013bec:	fbb3 f3f2 	udiv	r3, r3, r2
 8013bf0:	68ba      	ldr	r2, [r7, #8]
 8013bf2:	8952      	ldrh	r2, [r2, #10]
 8013bf4:	3a01      	subs	r2, #1
 8013bf6:	4013      	ands	r3, r2
 8013bf8:	69ba      	ldr	r2, [r7, #24]
 8013bfa:	4413      	add	r3, r2
 8013bfc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	699b      	ldr	r3, [r3, #24]
 8013c02:	68ba      	ldr	r2, [r7, #8]
 8013c04:	8992      	ldrh	r2, [r2, #12]
 8013c06:	fbb3 f1f2 	udiv	r1, r3, r2
 8013c0a:	fb02 f201 	mul.w	r2, r2, r1
 8013c0e:	1a9b      	subs	r3, r3, r2
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	f000 815b 	beq.w	8013ecc <f_lseek+0x43c>
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	6a1b      	ldr	r3, [r3, #32]
 8013c1a:	69ba      	ldr	r2, [r7, #24]
 8013c1c:	429a      	cmp	r2, r3
 8013c1e:	f000 8155 	beq.w	8013ecc <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	7d1b      	ldrb	r3, [r3, #20]
 8013c26:	b25b      	sxtb	r3, r3
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	da18      	bge.n	8013c5e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013c2c:	68bb      	ldr	r3, [r7, #8]
 8013c2e:	7858      	ldrb	r0, [r3, #1]
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	6a1a      	ldr	r2, [r3, #32]
 8013c3a:	2301      	movs	r3, #1
 8013c3c:	f7fd fabe 	bl	80111bc <disk_write>
 8013c40:	4603      	mov	r3, r0
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d004      	beq.n	8013c50 <f_lseek+0x1c0>
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	2201      	movs	r2, #1
 8013c4a:	755a      	strb	r2, [r3, #21]
 8013c4c:	2301      	movs	r3, #1
 8013c4e:	e13f      	b.n	8013ed0 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	7d1b      	ldrb	r3, [r3, #20]
 8013c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013c58:	b2da      	uxtb	r2, r3
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013c5e:	68bb      	ldr	r3, [r7, #8]
 8013c60:	7858      	ldrb	r0, [r3, #1]
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c68:	2301      	movs	r3, #1
 8013c6a:	69ba      	ldr	r2, [r7, #24]
 8013c6c:	f7fd fa86 	bl	801117c <disk_read>
 8013c70:	4603      	mov	r3, r0
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d004      	beq.n	8013c80 <f_lseek+0x1f0>
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	2201      	movs	r2, #1
 8013c7a:	755a      	strb	r2, [r3, #21]
 8013c7c:	2301      	movs	r3, #1
 8013c7e:	e127      	b.n	8013ed0 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	69ba      	ldr	r2, [r7, #24]
 8013c84:	621a      	str	r2, [r3, #32]
 8013c86:	e121      	b.n	8013ecc <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	68db      	ldr	r3, [r3, #12]
 8013c8c:	683a      	ldr	r2, [r7, #0]
 8013c8e:	429a      	cmp	r2, r3
 8013c90:	d908      	bls.n	8013ca4 <f_lseek+0x214>
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	7d1b      	ldrb	r3, [r3, #20]
 8013c96:	f003 0302 	and.w	r3, r3, #2
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d102      	bne.n	8013ca4 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	68db      	ldr	r3, [r3, #12]
 8013ca2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	699b      	ldr	r3, [r3, #24]
 8013ca8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013caa:	2300      	movs	r3, #0
 8013cac:	637b      	str	r3, [r7, #52]	; 0x34
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013cb2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013cb4:	683b      	ldr	r3, [r7, #0]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	f000 80b5 	beq.w	8013e26 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013cbc:	68bb      	ldr	r3, [r7, #8]
 8013cbe:	895b      	ldrh	r3, [r3, #10]
 8013cc0:	461a      	mov	r2, r3
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	899b      	ldrh	r3, [r3, #12]
 8013cc6:	fb03 f302 	mul.w	r3, r3, r2
 8013cca:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013ccc:	6a3b      	ldr	r3, [r7, #32]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d01b      	beq.n	8013d0a <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013cd2:	683b      	ldr	r3, [r7, #0]
 8013cd4:	1e5a      	subs	r2, r3, #1
 8013cd6:	69fb      	ldr	r3, [r7, #28]
 8013cd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8013cdc:	6a3b      	ldr	r3, [r7, #32]
 8013cde:	1e59      	subs	r1, r3, #1
 8013ce0:	69fb      	ldr	r3, [r7, #28]
 8013ce2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013ce6:	429a      	cmp	r2, r3
 8013ce8:	d30f      	bcc.n	8013d0a <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013cea:	6a3b      	ldr	r3, [r7, #32]
 8013cec:	1e5a      	subs	r2, r3, #1
 8013cee:	69fb      	ldr	r3, [r7, #28]
 8013cf0:	425b      	negs	r3, r3
 8013cf2:	401a      	ands	r2, r3
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	699b      	ldr	r3, [r3, #24]
 8013cfc:	683a      	ldr	r2, [r7, #0]
 8013cfe:	1ad3      	subs	r3, r2, r3
 8013d00:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	69db      	ldr	r3, [r3, #28]
 8013d06:	63bb      	str	r3, [r7, #56]	; 0x38
 8013d08:	e022      	b.n	8013d50 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	689b      	ldr	r3, [r3, #8]
 8013d0e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d119      	bne.n	8013d4a <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	2100      	movs	r1, #0
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f7fe f84e 	bl	8011dbc <create_chain>
 8013d20:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d24:	2b01      	cmp	r3, #1
 8013d26:	d104      	bne.n	8013d32 <f_lseek+0x2a2>
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	2202      	movs	r2, #2
 8013d2c:	755a      	strb	r2, [r3, #21]
 8013d2e:	2302      	movs	r3, #2
 8013d30:	e0ce      	b.n	8013ed0 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d38:	d104      	bne.n	8013d44 <f_lseek+0x2b4>
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	2201      	movs	r2, #1
 8013d3e:	755a      	strb	r2, [r3, #21]
 8013d40:	2301      	movs	r3, #1
 8013d42:	e0c5      	b.n	8013ed0 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d48:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d4e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d067      	beq.n	8013e26 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8013d56:	e03a      	b.n	8013dce <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8013d58:	683a      	ldr	r2, [r7, #0]
 8013d5a:	69fb      	ldr	r3, [r7, #28]
 8013d5c:	1ad3      	subs	r3, r2, r3
 8013d5e:	603b      	str	r3, [r7, #0]
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	699a      	ldr	r2, [r3, #24]
 8013d64:	69fb      	ldr	r3, [r7, #28]
 8013d66:	441a      	add	r2, r3
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	7d1b      	ldrb	r3, [r3, #20]
 8013d70:	f003 0302 	and.w	r3, r3, #2
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d00b      	beq.n	8013d90 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	f7fe f81d 	bl	8011dbc <create_chain>
 8013d82:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d108      	bne.n	8013d9c <f_lseek+0x30c>
							ofs = 0; break;
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	603b      	str	r3, [r7, #0]
 8013d8e:	e022      	b.n	8013dd6 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013d94:	4618      	mov	r0, r3
 8013d96:	f7fd fdbc 	bl	8011912 <get_fat>
 8013d9a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013da2:	d104      	bne.n	8013dae <f_lseek+0x31e>
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	2201      	movs	r2, #1
 8013da8:	755a      	strb	r2, [r3, #21]
 8013daa:	2301      	movs	r3, #1
 8013dac:	e090      	b.n	8013ed0 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013db0:	2b01      	cmp	r3, #1
 8013db2:	d904      	bls.n	8013dbe <f_lseek+0x32e>
 8013db4:	68bb      	ldr	r3, [r7, #8]
 8013db6:	69db      	ldr	r3, [r3, #28]
 8013db8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013dba:	429a      	cmp	r2, r3
 8013dbc:	d304      	bcc.n	8013dc8 <f_lseek+0x338>
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	2202      	movs	r2, #2
 8013dc2:	755a      	strb	r2, [r3, #21]
 8013dc4:	2302      	movs	r3, #2
 8013dc6:	e083      	b.n	8013ed0 <f_lseek+0x440>
					fp->clust = clst;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013dcc:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013dce:	683a      	ldr	r2, [r7, #0]
 8013dd0:	69fb      	ldr	r3, [r7, #28]
 8013dd2:	429a      	cmp	r2, r3
 8013dd4:	d8c0      	bhi.n	8013d58 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	699a      	ldr	r2, [r3, #24]
 8013dda:	683b      	ldr	r3, [r7, #0]
 8013ddc:	441a      	add	r2, r3
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013de2:	68bb      	ldr	r3, [r7, #8]
 8013de4:	899b      	ldrh	r3, [r3, #12]
 8013de6:	461a      	mov	r2, r3
 8013de8:	683b      	ldr	r3, [r7, #0]
 8013dea:	fbb3 f1f2 	udiv	r1, r3, r2
 8013dee:	fb02 f201 	mul.w	r2, r2, r1
 8013df2:	1a9b      	subs	r3, r3, r2
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d016      	beq.n	8013e26 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013df8:	68bb      	ldr	r3, [r7, #8]
 8013dfa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	f7fd fd69 	bl	80118d4 <clust2sect>
 8013e02:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d104      	bne.n	8013e14 <f_lseek+0x384>
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	2202      	movs	r2, #2
 8013e0e:	755a      	strb	r2, [r3, #21]
 8013e10:	2302      	movs	r3, #2
 8013e12:	e05d      	b.n	8013ed0 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8013e14:	68bb      	ldr	r3, [r7, #8]
 8013e16:	899b      	ldrh	r3, [r3, #12]
 8013e18:	461a      	mov	r2, r3
 8013e1a:	683b      	ldr	r3, [r7, #0]
 8013e1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e22:	4413      	add	r3, r2
 8013e24:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	699a      	ldr	r2, [r3, #24]
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	68db      	ldr	r3, [r3, #12]
 8013e2e:	429a      	cmp	r2, r3
 8013e30:	d90a      	bls.n	8013e48 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	699a      	ldr	r2, [r3, #24]
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	7d1b      	ldrb	r3, [r3, #20]
 8013e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e42:	b2da      	uxtb	r2, r3
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	699b      	ldr	r3, [r3, #24]
 8013e4c:	68ba      	ldr	r2, [r7, #8]
 8013e4e:	8992      	ldrh	r2, [r2, #12]
 8013e50:	fbb3 f1f2 	udiv	r1, r3, r2
 8013e54:	fb02 f201 	mul.w	r2, r2, r1
 8013e58:	1a9b      	subs	r3, r3, r2
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d036      	beq.n	8013ecc <f_lseek+0x43c>
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	6a1b      	ldr	r3, [r3, #32]
 8013e62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e64:	429a      	cmp	r2, r3
 8013e66:	d031      	beq.n	8013ecc <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	7d1b      	ldrb	r3, [r3, #20]
 8013e6c:	b25b      	sxtb	r3, r3
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	da18      	bge.n	8013ea4 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013e72:	68bb      	ldr	r3, [r7, #8]
 8013e74:	7858      	ldrb	r0, [r3, #1]
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	6a1a      	ldr	r2, [r3, #32]
 8013e80:	2301      	movs	r3, #1
 8013e82:	f7fd f99b 	bl	80111bc <disk_write>
 8013e86:	4603      	mov	r3, r0
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d004      	beq.n	8013e96 <f_lseek+0x406>
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	2201      	movs	r2, #1
 8013e90:	755a      	strb	r2, [r3, #21]
 8013e92:	2301      	movs	r3, #1
 8013e94:	e01c      	b.n	8013ed0 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	7d1b      	ldrb	r3, [r3, #20]
 8013e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e9e:	b2da      	uxtb	r2, r3
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013ea4:	68bb      	ldr	r3, [r7, #8]
 8013ea6:	7858      	ldrb	r0, [r3, #1]
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013eae:	2301      	movs	r3, #1
 8013eb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013eb2:	f7fd f963 	bl	801117c <disk_read>
 8013eb6:	4603      	mov	r3, r0
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d004      	beq.n	8013ec6 <f_lseek+0x436>
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	2201      	movs	r2, #1
 8013ec0:	755a      	strb	r2, [r3, #21]
 8013ec2:	2301      	movs	r3, #1
 8013ec4:	e004      	b.n	8013ed0 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013eca:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013ecc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	3740      	adds	r7, #64	; 0x40
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd80      	pop	{r7, pc}

08013ed8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b09e      	sub	sp, #120	; 0x78
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013ee4:	f107 010c 	add.w	r1, r7, #12
 8013ee8:	1d3b      	adds	r3, r7, #4
 8013eea:	2202      	movs	r2, #2
 8013eec:	4618      	mov	r0, r3
 8013eee:	f7fe fd17 	bl	8012920 <find_volume>
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8013efc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	f040 80a4 	bne.w	801404e <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8013f06:	687a      	ldr	r2, [r7, #4]
 8013f08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013f0c:	4611      	mov	r1, r2
 8013f0e:	4618      	mov	r0, r3
 8013f10:	f7fe fbd6 	bl	80126c0 <follow_path>
 8013f14:	4603      	mov	r3, r0
 8013f16:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8013f1a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d108      	bne.n	8013f34 <f_unlink+0x5c>
 8013f22:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013f26:	f003 0320 	and.w	r3, r3, #32
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d002      	beq.n	8013f34 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8013f2e:	2306      	movs	r3, #6
 8013f30:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013f34:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d108      	bne.n	8013f4e <f_unlink+0x76>
 8013f3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013f40:	2102      	movs	r1, #2
 8013f42:	4618      	mov	r0, r3
 8013f44:	f7fd fa78 	bl	8011438 <chk_lock>
 8013f48:	4603      	mov	r3, r0
 8013f4a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013f4e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d17b      	bne.n	801404e <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013f56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013f5a:	b25b      	sxtb	r3, r3
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	da03      	bge.n	8013f68 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013f60:	2306      	movs	r3, #6
 8013f62:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013f66:	e008      	b.n	8013f7a <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8013f68:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013f6c:	f003 0301 	and.w	r3, r3, #1
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d002      	beq.n	8013f7a <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013f74:	2307      	movs	r3, #7
 8013f76:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8013f7a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d13d      	bne.n	8013ffe <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013f86:	4611      	mov	r1, r2
 8013f88:	4618      	mov	r0, r3
 8013f8a:	f7fe f98d 	bl	80122a8 <ld_clust>
 8013f8e:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013f90:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013f94:	f003 0310 	and.w	r3, r3, #16
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d030      	beq.n	8013ffe <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	699b      	ldr	r3, [r3, #24]
 8013fa0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013fa2:	429a      	cmp	r2, r3
 8013fa4:	d103      	bne.n	8013fae <f_unlink+0xd6>
						res = FR_DENIED;
 8013fa6:	2307      	movs	r3, #7
 8013fa8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013fac:	e027      	b.n	8013ffe <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013fb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013fb4:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013fb6:	f107 0310 	add.w	r3, r7, #16
 8013fba:	2100      	movs	r1, #0
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	f7fd ffcd 	bl	8011f5c <dir_sdi>
 8013fc2:	4603      	mov	r3, r0
 8013fc4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8013fc8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d116      	bne.n	8013ffe <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013fd0:	f107 0310 	add.w	r3, r7, #16
 8013fd4:	2100      	movs	r1, #0
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f7fe f9a5 	bl	8012326 <dir_read>
 8013fdc:	4603      	mov	r3, r0
 8013fde:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8013fe2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d102      	bne.n	8013ff0 <f_unlink+0x118>
 8013fea:	2307      	movs	r3, #7
 8013fec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013ff0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013ff4:	2b04      	cmp	r3, #4
 8013ff6:	d102      	bne.n	8013ffe <f_unlink+0x126>
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8013ffe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014002:	2b00      	cmp	r3, #0
 8014004:	d123      	bne.n	801404e <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8014006:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801400a:	4618      	mov	r0, r3
 801400c:	f7fe fa6f 	bl	80124ee <dir_remove>
 8014010:	4603      	mov	r3, r0
 8014012:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8014016:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801401a:	2b00      	cmp	r3, #0
 801401c:	d10c      	bne.n	8014038 <f_unlink+0x160>
 801401e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014020:	2b00      	cmp	r3, #0
 8014022:	d009      	beq.n	8014038 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8014024:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014028:	2200      	movs	r2, #0
 801402a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801402c:	4618      	mov	r0, r3
 801402e:	f7fd fe60 	bl	8011cf2 <remove_chain>
 8014032:	4603      	mov	r3, r0
 8014034:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8014038:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801403c:	2b00      	cmp	r3, #0
 801403e:	d106      	bne.n	801404e <f_unlink+0x176>
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	4618      	mov	r0, r3
 8014044:	f7fd fbd6 	bl	80117f4 <sync_fs>
 8014048:	4603      	mov	r3, r0
 801404a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801404e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8014052:	4618      	mov	r0, r3
 8014054:	3778      	adds	r7, #120	; 0x78
 8014056:	46bd      	mov	sp, r7
 8014058:	bd80      	pop	{r7, pc}
	...

0801405c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 801405c:	b580      	push	{r7, lr}
 801405e:	b096      	sub	sp, #88	; 0x58
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014064:	f107 0108 	add.w	r1, r7, #8
 8014068:	1d3b      	adds	r3, r7, #4
 801406a:	2202      	movs	r2, #2
 801406c:	4618      	mov	r0, r3
 801406e:	f7fe fc57 	bl	8012920 <find_volume>
 8014072:	4603      	mov	r3, r0
 8014074:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8014078:	68bb      	ldr	r3, [r7, #8]
 801407a:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 801407c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014080:	2b00      	cmp	r3, #0
 8014082:	f040 80fe 	bne.w	8014282 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8014086:	687a      	ldr	r2, [r7, #4]
 8014088:	f107 030c 	add.w	r3, r7, #12
 801408c:	4611      	mov	r1, r2
 801408e:	4618      	mov	r0, r3
 8014090:	f7fe fb16 	bl	80126c0 <follow_path>
 8014094:	4603      	mov	r3, r0
 8014096:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801409a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d102      	bne.n	80140a8 <f_mkdir+0x4c>
 80140a2:	2308      	movs	r3, #8
 80140a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80140a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80140ac:	2b04      	cmp	r3, #4
 80140ae:	d108      	bne.n	80140c2 <f_mkdir+0x66>
 80140b0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80140b4:	f003 0320 	and.w	r3, r3, #32
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d002      	beq.n	80140c2 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80140bc:	2306      	movs	r3, #6
 80140be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80140c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80140c6:	2b04      	cmp	r3, #4
 80140c8:	f040 80db 	bne.w	8014282 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80140cc:	f107 030c 	add.w	r3, r7, #12
 80140d0:	2100      	movs	r1, #0
 80140d2:	4618      	mov	r0, r3
 80140d4:	f7fd fe72 	bl	8011dbc <create_chain>
 80140d8:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80140da:	68bb      	ldr	r3, [r7, #8]
 80140dc:	895b      	ldrh	r3, [r3, #10]
 80140de:	461a      	mov	r2, r3
 80140e0:	68bb      	ldr	r3, [r7, #8]
 80140e2:	899b      	ldrh	r3, [r3, #12]
 80140e4:	fb03 f302 	mul.w	r3, r3, r2
 80140e8:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80140ea:	2300      	movs	r3, #0
 80140ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80140f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d102      	bne.n	80140fc <f_mkdir+0xa0>
 80140f6:	2307      	movs	r3, #7
 80140f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80140fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140fe:	2b01      	cmp	r3, #1
 8014100:	d102      	bne.n	8014108 <f_mkdir+0xac>
 8014102:	2302      	movs	r3, #2
 8014104:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801410e:	d102      	bne.n	8014116 <f_mkdir+0xba>
 8014110:	2301      	movs	r3, #1
 8014112:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8014116:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801411a:	2b00      	cmp	r3, #0
 801411c:	d106      	bne.n	801412c <f_mkdir+0xd0>
 801411e:	68bb      	ldr	r3, [r7, #8]
 8014120:	4618      	mov	r0, r3
 8014122:	f7fd faf5 	bl	8011710 <sync_window>
 8014126:	4603      	mov	r3, r0
 8014128:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 801412c:	4b58      	ldr	r3, [pc, #352]	; (8014290 <f_mkdir+0x234>)
 801412e:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8014130:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014134:	2b00      	cmp	r3, #0
 8014136:	d16c      	bne.n	8014212 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8014138:	68bb      	ldr	r3, [r7, #8]
 801413a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801413c:	4618      	mov	r0, r3
 801413e:	f7fd fbc9 	bl	80118d4 <clust2sect>
 8014142:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8014144:	68bb      	ldr	r3, [r7, #8]
 8014146:	3338      	adds	r3, #56	; 0x38
 8014148:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 801414a:	68bb      	ldr	r3, [r7, #8]
 801414c:	899b      	ldrh	r3, [r3, #12]
 801414e:	461a      	mov	r2, r3
 8014150:	2100      	movs	r1, #0
 8014152:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014154:	f7fd f913 	bl	801137e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8014158:	220b      	movs	r2, #11
 801415a:	2120      	movs	r1, #32
 801415c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801415e:	f7fd f90e 	bl	801137e <mem_set>
					dir[DIR_Name] = '.';
 8014162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014164:	222e      	movs	r2, #46	; 0x2e
 8014166:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8014168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801416a:	330b      	adds	r3, #11
 801416c:	2210      	movs	r2, #16
 801416e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8014170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014172:	3316      	adds	r3, #22
 8014174:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014176:	4618      	mov	r0, r3
 8014178:	f7fd f8b4 	bl	80112e4 <st_dword>
					st_clust(fs, dir, dcl);
 801417c:	68bb      	ldr	r3, [r7, #8]
 801417e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014180:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014182:	4618      	mov	r0, r3
 8014184:	f7fe f8af 	bl	80122e6 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8014188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801418a:	3320      	adds	r3, #32
 801418c:	2220      	movs	r2, #32
 801418e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014190:	4618      	mov	r0, r3
 8014192:	f7fd f8d3 	bl	801133c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8014196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014198:	3321      	adds	r3, #33	; 0x21
 801419a:	222e      	movs	r2, #46	; 0x2e
 801419c:	701a      	strb	r2, [r3, #0]
 801419e:	697b      	ldr	r3, [r7, #20]
 80141a0:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80141a2:	68bb      	ldr	r3, [r7, #8]
 80141a4:	781b      	ldrb	r3, [r3, #0]
 80141a6:	2b03      	cmp	r3, #3
 80141a8:	d106      	bne.n	80141b8 <f_mkdir+0x15c>
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80141b0:	429a      	cmp	r2, r3
 80141b2:	d101      	bne.n	80141b8 <f_mkdir+0x15c>
 80141b4:	2300      	movs	r3, #0
 80141b6:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80141b8:	68b8      	ldr	r0, [r7, #8]
 80141ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141bc:	3320      	adds	r3, #32
 80141be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80141c0:	4619      	mov	r1, r3
 80141c2:	f7fe f890 	bl	80122e6 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80141c6:	68bb      	ldr	r3, [r7, #8]
 80141c8:	895b      	ldrh	r3, [r3, #10]
 80141ca:	653b      	str	r3, [r7, #80]	; 0x50
 80141cc:	e01c      	b.n	8014208 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 80141ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141d0:	1c5a      	adds	r2, r3, #1
 80141d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80141d4:	68ba      	ldr	r2, [r7, #8]
 80141d6:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80141d8:	68bb      	ldr	r3, [r7, #8]
 80141da:	2201      	movs	r2, #1
 80141dc:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80141de:	68bb      	ldr	r3, [r7, #8]
 80141e0:	4618      	mov	r0, r3
 80141e2:	f7fd fa95 	bl	8011710 <sync_window>
 80141e6:	4603      	mov	r3, r0
 80141e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80141ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d10d      	bne.n	8014210 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 80141f4:	68bb      	ldr	r3, [r7, #8]
 80141f6:	899b      	ldrh	r3, [r3, #12]
 80141f8:	461a      	mov	r2, r3
 80141fa:	2100      	movs	r1, #0
 80141fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80141fe:	f7fd f8be 	bl	801137e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014204:	3b01      	subs	r3, #1
 8014206:	653b      	str	r3, [r7, #80]	; 0x50
 8014208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801420a:	2b00      	cmp	r3, #0
 801420c:	d1df      	bne.n	80141ce <f_mkdir+0x172>
 801420e:	e000      	b.n	8014212 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8014210:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8014212:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014216:	2b00      	cmp	r3, #0
 8014218:	d107      	bne.n	801422a <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801421a:	f107 030c 	add.w	r3, r7, #12
 801421e:	4618      	mov	r0, r3
 8014220:	f7fe f933 	bl	801248a <dir_register>
 8014224:	4603      	mov	r3, r0
 8014226:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801422a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801422e:	2b00      	cmp	r3, #0
 8014230:	d120      	bne.n	8014274 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8014232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014234:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8014236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014238:	3316      	adds	r3, #22
 801423a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801423c:	4618      	mov	r0, r3
 801423e:	f7fd f851 	bl	80112e4 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8014242:	68bb      	ldr	r3, [r7, #8]
 8014244:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014246:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014248:	4618      	mov	r0, r3
 801424a:	f7fe f84c 	bl	80122e6 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801424e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014250:	330b      	adds	r3, #11
 8014252:	2210      	movs	r2, #16
 8014254:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8014256:	68bb      	ldr	r3, [r7, #8]
 8014258:	2201      	movs	r2, #1
 801425a:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 801425c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014260:	2b00      	cmp	r3, #0
 8014262:	d10e      	bne.n	8014282 <f_mkdir+0x226>
					res = sync_fs(fs);
 8014264:	68bb      	ldr	r3, [r7, #8]
 8014266:	4618      	mov	r0, r3
 8014268:	f7fd fac4 	bl	80117f4 <sync_fs>
 801426c:	4603      	mov	r3, r0
 801426e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8014272:	e006      	b.n	8014282 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014274:	f107 030c 	add.w	r3, r7, #12
 8014278:	2200      	movs	r2, #0
 801427a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801427c:	4618      	mov	r0, r3
 801427e:	f7fd fd38 	bl	8011cf2 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014282:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8014286:	4618      	mov	r0, r3
 8014288:	3758      	adds	r7, #88	; 0x58
 801428a:	46bd      	mov	sp, r7
 801428c:	bd80      	pop	{r7, pc}
 801428e:	bf00      	nop
 8014290:	274a0000 	.word	0x274a0000

08014294 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b088      	sub	sp, #32
 8014298:	af00      	add	r7, sp, #0
 801429a:	60f8      	str	r0, [r7, #12]
 801429c:	60b9      	str	r1, [r7, #8]
 801429e:	607a      	str	r2, [r7, #4]
	int n = 0;
 80142a0:	2300      	movs	r3, #0
 80142a2:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80142a8:	e017      	b.n	80142da <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80142aa:	f107 0310 	add.w	r3, r7, #16
 80142ae:	f107 0114 	add.w	r1, r7, #20
 80142b2:	2201      	movs	r2, #1
 80142b4:	6878      	ldr	r0, [r7, #4]
 80142b6:	f7ff f803 	bl	80132c0 <f_read>
		if (rc != 1) break;
 80142ba:	693b      	ldr	r3, [r7, #16]
 80142bc:	2b01      	cmp	r3, #1
 80142be:	d112      	bne.n	80142e6 <f_gets+0x52>
		c = s[0];
 80142c0:	7d3b      	ldrb	r3, [r7, #20]
 80142c2:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80142c4:	69bb      	ldr	r3, [r7, #24]
 80142c6:	1c5a      	adds	r2, r3, #1
 80142c8:	61ba      	str	r2, [r7, #24]
 80142ca:	7dfa      	ldrb	r2, [r7, #23]
 80142cc:	701a      	strb	r2, [r3, #0]
		n++;
 80142ce:	69fb      	ldr	r3, [r7, #28]
 80142d0:	3301      	adds	r3, #1
 80142d2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80142d4:	7dfb      	ldrb	r3, [r7, #23]
 80142d6:	2b0a      	cmp	r3, #10
 80142d8:	d007      	beq.n	80142ea <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80142da:	68bb      	ldr	r3, [r7, #8]
 80142dc:	3b01      	subs	r3, #1
 80142de:	69fa      	ldr	r2, [r7, #28]
 80142e0:	429a      	cmp	r2, r3
 80142e2:	dbe2      	blt.n	80142aa <f_gets+0x16>
 80142e4:	e002      	b.n	80142ec <f_gets+0x58>
		if (rc != 1) break;
 80142e6:	bf00      	nop
 80142e8:	e000      	b.n	80142ec <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 80142ea:	bf00      	nop
	}
	*p = 0;
 80142ec:	69bb      	ldr	r3, [r7, #24]
 80142ee:	2200      	movs	r2, #0
 80142f0:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80142f2:	69fb      	ldr	r3, [r7, #28]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d001      	beq.n	80142fc <f_gets+0x68>
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	e000      	b.n	80142fe <f_gets+0x6a>
 80142fc:	2300      	movs	r3, #0
}
 80142fe:	4618      	mov	r0, r3
 8014300:	3720      	adds	r7, #32
 8014302:	46bd      	mov	sp, r7
 8014304:	bd80      	pop	{r7, pc}
	...

08014308 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014308:	b480      	push	{r7}
 801430a:	b087      	sub	sp, #28
 801430c:	af00      	add	r7, sp, #0
 801430e:	60f8      	str	r0, [r7, #12]
 8014310:	60b9      	str	r1, [r7, #8]
 8014312:	4613      	mov	r3, r2
 8014314:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014316:	2301      	movs	r3, #1
 8014318:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801431a:	2300      	movs	r3, #0
 801431c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801431e:	4b1f      	ldr	r3, [pc, #124]	; (801439c <FATFS_LinkDriverEx+0x94>)
 8014320:	7a5b      	ldrb	r3, [r3, #9]
 8014322:	b2db      	uxtb	r3, r3
 8014324:	2b00      	cmp	r3, #0
 8014326:	d131      	bne.n	801438c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014328:	4b1c      	ldr	r3, [pc, #112]	; (801439c <FATFS_LinkDriverEx+0x94>)
 801432a:	7a5b      	ldrb	r3, [r3, #9]
 801432c:	b2db      	uxtb	r3, r3
 801432e:	461a      	mov	r2, r3
 8014330:	4b1a      	ldr	r3, [pc, #104]	; (801439c <FATFS_LinkDriverEx+0x94>)
 8014332:	2100      	movs	r1, #0
 8014334:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014336:	4b19      	ldr	r3, [pc, #100]	; (801439c <FATFS_LinkDriverEx+0x94>)
 8014338:	7a5b      	ldrb	r3, [r3, #9]
 801433a:	b2db      	uxtb	r3, r3
 801433c:	4a17      	ldr	r2, [pc, #92]	; (801439c <FATFS_LinkDriverEx+0x94>)
 801433e:	009b      	lsls	r3, r3, #2
 8014340:	4413      	add	r3, r2
 8014342:	68fa      	ldr	r2, [r7, #12]
 8014344:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014346:	4b15      	ldr	r3, [pc, #84]	; (801439c <FATFS_LinkDriverEx+0x94>)
 8014348:	7a5b      	ldrb	r3, [r3, #9]
 801434a:	b2db      	uxtb	r3, r3
 801434c:	461a      	mov	r2, r3
 801434e:	4b13      	ldr	r3, [pc, #76]	; (801439c <FATFS_LinkDriverEx+0x94>)
 8014350:	4413      	add	r3, r2
 8014352:	79fa      	ldrb	r2, [r7, #7]
 8014354:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014356:	4b11      	ldr	r3, [pc, #68]	; (801439c <FATFS_LinkDriverEx+0x94>)
 8014358:	7a5b      	ldrb	r3, [r3, #9]
 801435a:	b2db      	uxtb	r3, r3
 801435c:	1c5a      	adds	r2, r3, #1
 801435e:	b2d1      	uxtb	r1, r2
 8014360:	4a0e      	ldr	r2, [pc, #56]	; (801439c <FATFS_LinkDriverEx+0x94>)
 8014362:	7251      	strb	r1, [r2, #9]
 8014364:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014366:	7dbb      	ldrb	r3, [r7, #22]
 8014368:	3330      	adds	r3, #48	; 0x30
 801436a:	b2da      	uxtb	r2, r3
 801436c:	68bb      	ldr	r3, [r7, #8]
 801436e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014370:	68bb      	ldr	r3, [r7, #8]
 8014372:	3301      	adds	r3, #1
 8014374:	223a      	movs	r2, #58	; 0x3a
 8014376:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	3302      	adds	r3, #2
 801437c:	222f      	movs	r2, #47	; 0x2f
 801437e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014380:	68bb      	ldr	r3, [r7, #8]
 8014382:	3303      	adds	r3, #3
 8014384:	2200      	movs	r2, #0
 8014386:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014388:	2300      	movs	r3, #0
 801438a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801438c:	7dfb      	ldrb	r3, [r7, #23]
}
 801438e:	4618      	mov	r0, r3
 8014390:	371c      	adds	r7, #28
 8014392:	46bd      	mov	sp, r7
 8014394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014398:	4770      	bx	lr
 801439a:	bf00      	nop
 801439c:	2003d4a8 	.word	0x2003d4a8

080143a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b082      	sub	sp, #8
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
 80143a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80143aa:	2200      	movs	r2, #0
 80143ac:	6839      	ldr	r1, [r7, #0]
 80143ae:	6878      	ldr	r0, [r7, #4]
 80143b0:	f7ff ffaa 	bl	8014308 <FATFS_LinkDriverEx>
 80143b4:	4603      	mov	r3, r0
}
 80143b6:	4618      	mov	r0, r3
 80143b8:	3708      	adds	r7, #8
 80143ba:	46bd      	mov	sp, r7
 80143bc:	bd80      	pop	{r7, pc}

080143be <__cxa_guard_acquire>:
 80143be:	6803      	ldr	r3, [r0, #0]
 80143c0:	07db      	lsls	r3, r3, #31
 80143c2:	d406      	bmi.n	80143d2 <__cxa_guard_acquire+0x14>
 80143c4:	7843      	ldrb	r3, [r0, #1]
 80143c6:	b103      	cbz	r3, 80143ca <__cxa_guard_acquire+0xc>
 80143c8:	deff      	udf	#255	; 0xff
 80143ca:	2301      	movs	r3, #1
 80143cc:	7043      	strb	r3, [r0, #1]
 80143ce:	4618      	mov	r0, r3
 80143d0:	4770      	bx	lr
 80143d2:	2000      	movs	r0, #0
 80143d4:	4770      	bx	lr

080143d6 <__cxa_guard_release>:
 80143d6:	2301      	movs	r3, #1
 80143d8:	6003      	str	r3, [r0, #0]
 80143da:	4770      	bx	lr
 80143dc:	0000      	movs	r0, r0
	...

080143e0 <cos>:
 80143e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80143e2:	ec53 2b10 	vmov	r2, r3, d0
 80143e6:	4824      	ldr	r0, [pc, #144]	; (8014478 <cos+0x98>)
 80143e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80143ec:	4281      	cmp	r1, r0
 80143ee:	dc06      	bgt.n	80143fe <cos+0x1e>
 80143f0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8014470 <cos+0x90>
 80143f4:	f000 faa4 	bl	8014940 <__kernel_cos>
 80143f8:	ec51 0b10 	vmov	r0, r1, d0
 80143fc:	e007      	b.n	801440e <cos+0x2e>
 80143fe:	481f      	ldr	r0, [pc, #124]	; (801447c <cos+0x9c>)
 8014400:	4281      	cmp	r1, r0
 8014402:	dd09      	ble.n	8014418 <cos+0x38>
 8014404:	ee10 0a10 	vmov	r0, s0
 8014408:	4619      	mov	r1, r3
 801440a:	f7eb ff55 	bl	80002b8 <__aeabi_dsub>
 801440e:	ec41 0b10 	vmov	d0, r0, r1
 8014412:	b005      	add	sp, #20
 8014414:	f85d fb04 	ldr.w	pc, [sp], #4
 8014418:	4668      	mov	r0, sp
 801441a:	f000 f885 	bl	8014528 <__ieee754_rem_pio2>
 801441e:	f000 0003 	and.w	r0, r0, #3
 8014422:	2801      	cmp	r0, #1
 8014424:	d007      	beq.n	8014436 <cos+0x56>
 8014426:	2802      	cmp	r0, #2
 8014428:	d012      	beq.n	8014450 <cos+0x70>
 801442a:	b9c0      	cbnz	r0, 801445e <cos+0x7e>
 801442c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014430:	ed9d 0b00 	vldr	d0, [sp]
 8014434:	e7de      	b.n	80143f4 <cos+0x14>
 8014436:	ed9d 1b02 	vldr	d1, [sp, #8]
 801443a:	ed9d 0b00 	vldr	d0, [sp]
 801443e:	f000 fe87 	bl	8015150 <__kernel_sin>
 8014442:	ec53 2b10 	vmov	r2, r3, d0
 8014446:	ee10 0a10 	vmov	r0, s0
 801444a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801444e:	e7de      	b.n	801440e <cos+0x2e>
 8014450:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014454:	ed9d 0b00 	vldr	d0, [sp]
 8014458:	f000 fa72 	bl	8014940 <__kernel_cos>
 801445c:	e7f1      	b.n	8014442 <cos+0x62>
 801445e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014462:	ed9d 0b00 	vldr	d0, [sp]
 8014466:	2001      	movs	r0, #1
 8014468:	f000 fe72 	bl	8015150 <__kernel_sin>
 801446c:	e7c4      	b.n	80143f8 <cos+0x18>
 801446e:	bf00      	nop
	...
 8014478:	3fe921fb 	.word	0x3fe921fb
 801447c:	7fefffff 	.word	0x7fefffff

08014480 <sin>:
 8014480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014482:	ec53 2b10 	vmov	r2, r3, d0
 8014486:	4826      	ldr	r0, [pc, #152]	; (8014520 <sin+0xa0>)
 8014488:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801448c:	4281      	cmp	r1, r0
 801448e:	dc07      	bgt.n	80144a0 <sin+0x20>
 8014490:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8014518 <sin+0x98>
 8014494:	2000      	movs	r0, #0
 8014496:	f000 fe5b 	bl	8015150 <__kernel_sin>
 801449a:	ec51 0b10 	vmov	r0, r1, d0
 801449e:	e007      	b.n	80144b0 <sin+0x30>
 80144a0:	4820      	ldr	r0, [pc, #128]	; (8014524 <sin+0xa4>)
 80144a2:	4281      	cmp	r1, r0
 80144a4:	dd09      	ble.n	80144ba <sin+0x3a>
 80144a6:	ee10 0a10 	vmov	r0, s0
 80144aa:	4619      	mov	r1, r3
 80144ac:	f7eb ff04 	bl	80002b8 <__aeabi_dsub>
 80144b0:	ec41 0b10 	vmov	d0, r0, r1
 80144b4:	b005      	add	sp, #20
 80144b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80144ba:	4668      	mov	r0, sp
 80144bc:	f000 f834 	bl	8014528 <__ieee754_rem_pio2>
 80144c0:	f000 0003 	and.w	r0, r0, #3
 80144c4:	2801      	cmp	r0, #1
 80144c6:	d008      	beq.n	80144da <sin+0x5a>
 80144c8:	2802      	cmp	r0, #2
 80144ca:	d00d      	beq.n	80144e8 <sin+0x68>
 80144cc:	b9d0      	cbnz	r0, 8014504 <sin+0x84>
 80144ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80144d2:	ed9d 0b00 	vldr	d0, [sp]
 80144d6:	2001      	movs	r0, #1
 80144d8:	e7dd      	b.n	8014496 <sin+0x16>
 80144da:	ed9d 1b02 	vldr	d1, [sp, #8]
 80144de:	ed9d 0b00 	vldr	d0, [sp]
 80144e2:	f000 fa2d 	bl	8014940 <__kernel_cos>
 80144e6:	e7d8      	b.n	801449a <sin+0x1a>
 80144e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80144ec:	ed9d 0b00 	vldr	d0, [sp]
 80144f0:	2001      	movs	r0, #1
 80144f2:	f000 fe2d 	bl	8015150 <__kernel_sin>
 80144f6:	ec53 2b10 	vmov	r2, r3, d0
 80144fa:	ee10 0a10 	vmov	r0, s0
 80144fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014502:	e7d5      	b.n	80144b0 <sin+0x30>
 8014504:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014508:	ed9d 0b00 	vldr	d0, [sp]
 801450c:	f000 fa18 	bl	8014940 <__kernel_cos>
 8014510:	e7f1      	b.n	80144f6 <sin+0x76>
 8014512:	bf00      	nop
 8014514:	f3af 8000 	nop.w
	...
 8014520:	3fe921fb 	.word	0x3fe921fb
 8014524:	7fefffff 	.word	0x7fefffff

08014528 <__ieee754_rem_pio2>:
 8014528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801452c:	ed2d 8b02 	vpush	{d8}
 8014530:	ec55 4b10 	vmov	r4, r5, d0
 8014534:	4bca      	ldr	r3, [pc, #808]	; (8014860 <__ieee754_rem_pio2+0x338>)
 8014536:	b08b      	sub	sp, #44	; 0x2c
 8014538:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801453c:	4598      	cmp	r8, r3
 801453e:	4682      	mov	sl, r0
 8014540:	9502      	str	r5, [sp, #8]
 8014542:	dc08      	bgt.n	8014556 <__ieee754_rem_pio2+0x2e>
 8014544:	2200      	movs	r2, #0
 8014546:	2300      	movs	r3, #0
 8014548:	ed80 0b00 	vstr	d0, [r0]
 801454c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014550:	f04f 0b00 	mov.w	fp, #0
 8014554:	e028      	b.n	80145a8 <__ieee754_rem_pio2+0x80>
 8014556:	4bc3      	ldr	r3, [pc, #780]	; (8014864 <__ieee754_rem_pio2+0x33c>)
 8014558:	4598      	cmp	r8, r3
 801455a:	dc78      	bgt.n	801464e <__ieee754_rem_pio2+0x126>
 801455c:	9b02      	ldr	r3, [sp, #8]
 801455e:	4ec2      	ldr	r6, [pc, #776]	; (8014868 <__ieee754_rem_pio2+0x340>)
 8014560:	2b00      	cmp	r3, #0
 8014562:	ee10 0a10 	vmov	r0, s0
 8014566:	a3b0      	add	r3, pc, #704	; (adr r3, 8014828 <__ieee754_rem_pio2+0x300>)
 8014568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801456c:	4629      	mov	r1, r5
 801456e:	dd39      	ble.n	80145e4 <__ieee754_rem_pio2+0xbc>
 8014570:	f7eb fea2 	bl	80002b8 <__aeabi_dsub>
 8014574:	45b0      	cmp	r8, r6
 8014576:	4604      	mov	r4, r0
 8014578:	460d      	mov	r5, r1
 801457a:	d01b      	beq.n	80145b4 <__ieee754_rem_pio2+0x8c>
 801457c:	a3ac      	add	r3, pc, #688	; (adr r3, 8014830 <__ieee754_rem_pio2+0x308>)
 801457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014582:	f7eb fe99 	bl	80002b8 <__aeabi_dsub>
 8014586:	4602      	mov	r2, r0
 8014588:	460b      	mov	r3, r1
 801458a:	e9ca 2300 	strd	r2, r3, [sl]
 801458e:	4620      	mov	r0, r4
 8014590:	4629      	mov	r1, r5
 8014592:	f7eb fe91 	bl	80002b8 <__aeabi_dsub>
 8014596:	a3a6      	add	r3, pc, #664	; (adr r3, 8014830 <__ieee754_rem_pio2+0x308>)
 8014598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801459c:	f7eb fe8c 	bl	80002b8 <__aeabi_dsub>
 80145a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80145a4:	f04f 0b01 	mov.w	fp, #1
 80145a8:	4658      	mov	r0, fp
 80145aa:	b00b      	add	sp, #44	; 0x2c
 80145ac:	ecbd 8b02 	vpop	{d8}
 80145b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145b4:	a3a0      	add	r3, pc, #640	; (adr r3, 8014838 <__ieee754_rem_pio2+0x310>)
 80145b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ba:	f7eb fe7d 	bl	80002b8 <__aeabi_dsub>
 80145be:	a3a0      	add	r3, pc, #640	; (adr r3, 8014840 <__ieee754_rem_pio2+0x318>)
 80145c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145c4:	4604      	mov	r4, r0
 80145c6:	460d      	mov	r5, r1
 80145c8:	f7eb fe76 	bl	80002b8 <__aeabi_dsub>
 80145cc:	4602      	mov	r2, r0
 80145ce:	460b      	mov	r3, r1
 80145d0:	e9ca 2300 	strd	r2, r3, [sl]
 80145d4:	4620      	mov	r0, r4
 80145d6:	4629      	mov	r1, r5
 80145d8:	f7eb fe6e 	bl	80002b8 <__aeabi_dsub>
 80145dc:	a398      	add	r3, pc, #608	; (adr r3, 8014840 <__ieee754_rem_pio2+0x318>)
 80145de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145e2:	e7db      	b.n	801459c <__ieee754_rem_pio2+0x74>
 80145e4:	f7eb fe6a 	bl	80002bc <__adddf3>
 80145e8:	45b0      	cmp	r8, r6
 80145ea:	4604      	mov	r4, r0
 80145ec:	460d      	mov	r5, r1
 80145ee:	d016      	beq.n	801461e <__ieee754_rem_pio2+0xf6>
 80145f0:	a38f      	add	r3, pc, #572	; (adr r3, 8014830 <__ieee754_rem_pio2+0x308>)
 80145f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145f6:	f7eb fe61 	bl	80002bc <__adddf3>
 80145fa:	4602      	mov	r2, r0
 80145fc:	460b      	mov	r3, r1
 80145fe:	e9ca 2300 	strd	r2, r3, [sl]
 8014602:	4620      	mov	r0, r4
 8014604:	4629      	mov	r1, r5
 8014606:	f7eb fe57 	bl	80002b8 <__aeabi_dsub>
 801460a:	a389      	add	r3, pc, #548	; (adr r3, 8014830 <__ieee754_rem_pio2+0x308>)
 801460c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014610:	f7eb fe54 	bl	80002bc <__adddf3>
 8014614:	f04f 3bff 	mov.w	fp, #4294967295
 8014618:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801461c:	e7c4      	b.n	80145a8 <__ieee754_rem_pio2+0x80>
 801461e:	a386      	add	r3, pc, #536	; (adr r3, 8014838 <__ieee754_rem_pio2+0x310>)
 8014620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014624:	f7eb fe4a 	bl	80002bc <__adddf3>
 8014628:	a385      	add	r3, pc, #532	; (adr r3, 8014840 <__ieee754_rem_pio2+0x318>)
 801462a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801462e:	4604      	mov	r4, r0
 8014630:	460d      	mov	r5, r1
 8014632:	f7eb fe43 	bl	80002bc <__adddf3>
 8014636:	4602      	mov	r2, r0
 8014638:	460b      	mov	r3, r1
 801463a:	e9ca 2300 	strd	r2, r3, [sl]
 801463e:	4620      	mov	r0, r4
 8014640:	4629      	mov	r1, r5
 8014642:	f7eb fe39 	bl	80002b8 <__aeabi_dsub>
 8014646:	a37e      	add	r3, pc, #504	; (adr r3, 8014840 <__ieee754_rem_pio2+0x318>)
 8014648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801464c:	e7e0      	b.n	8014610 <__ieee754_rem_pio2+0xe8>
 801464e:	4b87      	ldr	r3, [pc, #540]	; (801486c <__ieee754_rem_pio2+0x344>)
 8014650:	4598      	cmp	r8, r3
 8014652:	f300 80d9 	bgt.w	8014808 <__ieee754_rem_pio2+0x2e0>
 8014656:	f000 fe39 	bl	80152cc <fabs>
 801465a:	ec55 4b10 	vmov	r4, r5, d0
 801465e:	ee10 0a10 	vmov	r0, s0
 8014662:	a379      	add	r3, pc, #484	; (adr r3, 8014848 <__ieee754_rem_pio2+0x320>)
 8014664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014668:	4629      	mov	r1, r5
 801466a:	f7eb ffdd 	bl	8000628 <__aeabi_dmul>
 801466e:	4b80      	ldr	r3, [pc, #512]	; (8014870 <__ieee754_rem_pio2+0x348>)
 8014670:	2200      	movs	r2, #0
 8014672:	f7eb fe23 	bl	80002bc <__adddf3>
 8014676:	f7ec fa87 	bl	8000b88 <__aeabi_d2iz>
 801467a:	4683      	mov	fp, r0
 801467c:	f7eb ff6a 	bl	8000554 <__aeabi_i2d>
 8014680:	4602      	mov	r2, r0
 8014682:	460b      	mov	r3, r1
 8014684:	ec43 2b18 	vmov	d8, r2, r3
 8014688:	a367      	add	r3, pc, #412	; (adr r3, 8014828 <__ieee754_rem_pio2+0x300>)
 801468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801468e:	f7eb ffcb 	bl	8000628 <__aeabi_dmul>
 8014692:	4602      	mov	r2, r0
 8014694:	460b      	mov	r3, r1
 8014696:	4620      	mov	r0, r4
 8014698:	4629      	mov	r1, r5
 801469a:	f7eb fe0d 	bl	80002b8 <__aeabi_dsub>
 801469e:	a364      	add	r3, pc, #400	; (adr r3, 8014830 <__ieee754_rem_pio2+0x308>)
 80146a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146a4:	4606      	mov	r6, r0
 80146a6:	460f      	mov	r7, r1
 80146a8:	ec51 0b18 	vmov	r0, r1, d8
 80146ac:	f7eb ffbc 	bl	8000628 <__aeabi_dmul>
 80146b0:	f1bb 0f1f 	cmp.w	fp, #31
 80146b4:	4604      	mov	r4, r0
 80146b6:	460d      	mov	r5, r1
 80146b8:	dc0d      	bgt.n	80146d6 <__ieee754_rem_pio2+0x1ae>
 80146ba:	4b6e      	ldr	r3, [pc, #440]	; (8014874 <__ieee754_rem_pio2+0x34c>)
 80146bc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80146c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146c4:	4543      	cmp	r3, r8
 80146c6:	d006      	beq.n	80146d6 <__ieee754_rem_pio2+0x1ae>
 80146c8:	4622      	mov	r2, r4
 80146ca:	462b      	mov	r3, r5
 80146cc:	4630      	mov	r0, r6
 80146ce:	4639      	mov	r1, r7
 80146d0:	f7eb fdf2 	bl	80002b8 <__aeabi_dsub>
 80146d4:	e00f      	b.n	80146f6 <__ieee754_rem_pio2+0x1ce>
 80146d6:	462b      	mov	r3, r5
 80146d8:	4622      	mov	r2, r4
 80146da:	4630      	mov	r0, r6
 80146dc:	4639      	mov	r1, r7
 80146de:	f7eb fdeb 	bl	80002b8 <__aeabi_dsub>
 80146e2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80146e6:	9303      	str	r3, [sp, #12]
 80146e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80146ec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80146f0:	f1b8 0f10 	cmp.w	r8, #16
 80146f4:	dc02      	bgt.n	80146fc <__ieee754_rem_pio2+0x1d4>
 80146f6:	e9ca 0100 	strd	r0, r1, [sl]
 80146fa:	e039      	b.n	8014770 <__ieee754_rem_pio2+0x248>
 80146fc:	a34e      	add	r3, pc, #312	; (adr r3, 8014838 <__ieee754_rem_pio2+0x310>)
 80146fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014702:	ec51 0b18 	vmov	r0, r1, d8
 8014706:	f7eb ff8f 	bl	8000628 <__aeabi_dmul>
 801470a:	4604      	mov	r4, r0
 801470c:	460d      	mov	r5, r1
 801470e:	4602      	mov	r2, r0
 8014710:	460b      	mov	r3, r1
 8014712:	4630      	mov	r0, r6
 8014714:	4639      	mov	r1, r7
 8014716:	f7eb fdcf 	bl	80002b8 <__aeabi_dsub>
 801471a:	4602      	mov	r2, r0
 801471c:	460b      	mov	r3, r1
 801471e:	4680      	mov	r8, r0
 8014720:	4689      	mov	r9, r1
 8014722:	4630      	mov	r0, r6
 8014724:	4639      	mov	r1, r7
 8014726:	f7eb fdc7 	bl	80002b8 <__aeabi_dsub>
 801472a:	4622      	mov	r2, r4
 801472c:	462b      	mov	r3, r5
 801472e:	f7eb fdc3 	bl	80002b8 <__aeabi_dsub>
 8014732:	a343      	add	r3, pc, #268	; (adr r3, 8014840 <__ieee754_rem_pio2+0x318>)
 8014734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014738:	4604      	mov	r4, r0
 801473a:	460d      	mov	r5, r1
 801473c:	ec51 0b18 	vmov	r0, r1, d8
 8014740:	f7eb ff72 	bl	8000628 <__aeabi_dmul>
 8014744:	4622      	mov	r2, r4
 8014746:	462b      	mov	r3, r5
 8014748:	f7eb fdb6 	bl	80002b8 <__aeabi_dsub>
 801474c:	4602      	mov	r2, r0
 801474e:	460b      	mov	r3, r1
 8014750:	4604      	mov	r4, r0
 8014752:	460d      	mov	r5, r1
 8014754:	4640      	mov	r0, r8
 8014756:	4649      	mov	r1, r9
 8014758:	f7eb fdae 	bl	80002b8 <__aeabi_dsub>
 801475c:	9a03      	ldr	r2, [sp, #12]
 801475e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014762:	1ad3      	subs	r3, r2, r3
 8014764:	2b31      	cmp	r3, #49	; 0x31
 8014766:	dc24      	bgt.n	80147b2 <__ieee754_rem_pio2+0x28a>
 8014768:	e9ca 0100 	strd	r0, r1, [sl]
 801476c:	4646      	mov	r6, r8
 801476e:	464f      	mov	r7, r9
 8014770:	e9da 8900 	ldrd	r8, r9, [sl]
 8014774:	4630      	mov	r0, r6
 8014776:	4642      	mov	r2, r8
 8014778:	464b      	mov	r3, r9
 801477a:	4639      	mov	r1, r7
 801477c:	f7eb fd9c 	bl	80002b8 <__aeabi_dsub>
 8014780:	462b      	mov	r3, r5
 8014782:	4622      	mov	r2, r4
 8014784:	f7eb fd98 	bl	80002b8 <__aeabi_dsub>
 8014788:	9b02      	ldr	r3, [sp, #8]
 801478a:	2b00      	cmp	r3, #0
 801478c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014790:	f6bf af0a 	bge.w	80145a8 <__ieee754_rem_pio2+0x80>
 8014794:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014798:	f8ca 3004 	str.w	r3, [sl, #4]
 801479c:	f8ca 8000 	str.w	r8, [sl]
 80147a0:	f8ca 0008 	str.w	r0, [sl, #8]
 80147a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80147a8:	f8ca 300c 	str.w	r3, [sl, #12]
 80147ac:	f1cb 0b00 	rsb	fp, fp, #0
 80147b0:	e6fa      	b.n	80145a8 <__ieee754_rem_pio2+0x80>
 80147b2:	a327      	add	r3, pc, #156	; (adr r3, 8014850 <__ieee754_rem_pio2+0x328>)
 80147b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147b8:	ec51 0b18 	vmov	r0, r1, d8
 80147bc:	f7eb ff34 	bl	8000628 <__aeabi_dmul>
 80147c0:	4604      	mov	r4, r0
 80147c2:	460d      	mov	r5, r1
 80147c4:	4602      	mov	r2, r0
 80147c6:	460b      	mov	r3, r1
 80147c8:	4640      	mov	r0, r8
 80147ca:	4649      	mov	r1, r9
 80147cc:	f7eb fd74 	bl	80002b8 <__aeabi_dsub>
 80147d0:	4602      	mov	r2, r0
 80147d2:	460b      	mov	r3, r1
 80147d4:	4606      	mov	r6, r0
 80147d6:	460f      	mov	r7, r1
 80147d8:	4640      	mov	r0, r8
 80147da:	4649      	mov	r1, r9
 80147dc:	f7eb fd6c 	bl	80002b8 <__aeabi_dsub>
 80147e0:	4622      	mov	r2, r4
 80147e2:	462b      	mov	r3, r5
 80147e4:	f7eb fd68 	bl	80002b8 <__aeabi_dsub>
 80147e8:	a31b      	add	r3, pc, #108	; (adr r3, 8014858 <__ieee754_rem_pio2+0x330>)
 80147ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147ee:	4604      	mov	r4, r0
 80147f0:	460d      	mov	r5, r1
 80147f2:	ec51 0b18 	vmov	r0, r1, d8
 80147f6:	f7eb ff17 	bl	8000628 <__aeabi_dmul>
 80147fa:	4622      	mov	r2, r4
 80147fc:	462b      	mov	r3, r5
 80147fe:	f7eb fd5b 	bl	80002b8 <__aeabi_dsub>
 8014802:	4604      	mov	r4, r0
 8014804:	460d      	mov	r5, r1
 8014806:	e75f      	b.n	80146c8 <__ieee754_rem_pio2+0x1a0>
 8014808:	4b1b      	ldr	r3, [pc, #108]	; (8014878 <__ieee754_rem_pio2+0x350>)
 801480a:	4598      	cmp	r8, r3
 801480c:	dd36      	ble.n	801487c <__ieee754_rem_pio2+0x354>
 801480e:	ee10 2a10 	vmov	r2, s0
 8014812:	462b      	mov	r3, r5
 8014814:	4620      	mov	r0, r4
 8014816:	4629      	mov	r1, r5
 8014818:	f7eb fd4e 	bl	80002b8 <__aeabi_dsub>
 801481c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8014820:	e9ca 0100 	strd	r0, r1, [sl]
 8014824:	e694      	b.n	8014550 <__ieee754_rem_pio2+0x28>
 8014826:	bf00      	nop
 8014828:	54400000 	.word	0x54400000
 801482c:	3ff921fb 	.word	0x3ff921fb
 8014830:	1a626331 	.word	0x1a626331
 8014834:	3dd0b461 	.word	0x3dd0b461
 8014838:	1a600000 	.word	0x1a600000
 801483c:	3dd0b461 	.word	0x3dd0b461
 8014840:	2e037073 	.word	0x2e037073
 8014844:	3ba3198a 	.word	0x3ba3198a
 8014848:	6dc9c883 	.word	0x6dc9c883
 801484c:	3fe45f30 	.word	0x3fe45f30
 8014850:	2e000000 	.word	0x2e000000
 8014854:	3ba3198a 	.word	0x3ba3198a
 8014858:	252049c1 	.word	0x252049c1
 801485c:	397b839a 	.word	0x397b839a
 8014860:	3fe921fb 	.word	0x3fe921fb
 8014864:	4002d97b 	.word	0x4002d97b
 8014868:	3ff921fb 	.word	0x3ff921fb
 801486c:	413921fb 	.word	0x413921fb
 8014870:	3fe00000 	.word	0x3fe00000
 8014874:	0801adb8 	.word	0x0801adb8
 8014878:	7fefffff 	.word	0x7fefffff
 801487c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8014880:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8014884:	ee10 0a10 	vmov	r0, s0
 8014888:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801488c:	ee10 6a10 	vmov	r6, s0
 8014890:	460f      	mov	r7, r1
 8014892:	f7ec f979 	bl	8000b88 <__aeabi_d2iz>
 8014896:	f7eb fe5d 	bl	8000554 <__aeabi_i2d>
 801489a:	4602      	mov	r2, r0
 801489c:	460b      	mov	r3, r1
 801489e:	4630      	mov	r0, r6
 80148a0:	4639      	mov	r1, r7
 80148a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80148a6:	f7eb fd07 	bl	80002b8 <__aeabi_dsub>
 80148aa:	4b22      	ldr	r3, [pc, #136]	; (8014934 <__ieee754_rem_pio2+0x40c>)
 80148ac:	2200      	movs	r2, #0
 80148ae:	f7eb febb 	bl	8000628 <__aeabi_dmul>
 80148b2:	460f      	mov	r7, r1
 80148b4:	4606      	mov	r6, r0
 80148b6:	f7ec f967 	bl	8000b88 <__aeabi_d2iz>
 80148ba:	f7eb fe4b 	bl	8000554 <__aeabi_i2d>
 80148be:	4602      	mov	r2, r0
 80148c0:	460b      	mov	r3, r1
 80148c2:	4630      	mov	r0, r6
 80148c4:	4639      	mov	r1, r7
 80148c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80148ca:	f7eb fcf5 	bl	80002b8 <__aeabi_dsub>
 80148ce:	4b19      	ldr	r3, [pc, #100]	; (8014934 <__ieee754_rem_pio2+0x40c>)
 80148d0:	2200      	movs	r2, #0
 80148d2:	f7eb fea9 	bl	8000628 <__aeabi_dmul>
 80148d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80148da:	ad04      	add	r5, sp, #16
 80148dc:	f04f 0803 	mov.w	r8, #3
 80148e0:	46a9      	mov	r9, r5
 80148e2:	2600      	movs	r6, #0
 80148e4:	2700      	movs	r7, #0
 80148e6:	4632      	mov	r2, r6
 80148e8:	463b      	mov	r3, r7
 80148ea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80148ee:	46c3      	mov	fp, r8
 80148f0:	3d08      	subs	r5, #8
 80148f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80148f6:	f7ec f8ff 	bl	8000af8 <__aeabi_dcmpeq>
 80148fa:	2800      	cmp	r0, #0
 80148fc:	d1f3      	bne.n	80148e6 <__ieee754_rem_pio2+0x3be>
 80148fe:	4b0e      	ldr	r3, [pc, #56]	; (8014938 <__ieee754_rem_pio2+0x410>)
 8014900:	9301      	str	r3, [sp, #4]
 8014902:	2302      	movs	r3, #2
 8014904:	9300      	str	r3, [sp, #0]
 8014906:	4622      	mov	r2, r4
 8014908:	465b      	mov	r3, fp
 801490a:	4651      	mov	r1, sl
 801490c:	4648      	mov	r0, r9
 801490e:	f000 f8df 	bl	8014ad0 <__kernel_rem_pio2>
 8014912:	9b02      	ldr	r3, [sp, #8]
 8014914:	2b00      	cmp	r3, #0
 8014916:	4683      	mov	fp, r0
 8014918:	f6bf ae46 	bge.w	80145a8 <__ieee754_rem_pio2+0x80>
 801491c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8014920:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014924:	f8ca 3004 	str.w	r3, [sl, #4]
 8014928:	f8da 300c 	ldr.w	r3, [sl, #12]
 801492c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014930:	e73a      	b.n	80147a8 <__ieee754_rem_pio2+0x280>
 8014932:	bf00      	nop
 8014934:	41700000 	.word	0x41700000
 8014938:	0801ae38 	.word	0x0801ae38
 801493c:	00000000 	.word	0x00000000

08014940 <__kernel_cos>:
 8014940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014944:	ec57 6b10 	vmov	r6, r7, d0
 8014948:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801494c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8014950:	ed8d 1b00 	vstr	d1, [sp]
 8014954:	da07      	bge.n	8014966 <__kernel_cos+0x26>
 8014956:	ee10 0a10 	vmov	r0, s0
 801495a:	4639      	mov	r1, r7
 801495c:	f7ec f914 	bl	8000b88 <__aeabi_d2iz>
 8014960:	2800      	cmp	r0, #0
 8014962:	f000 8088 	beq.w	8014a76 <__kernel_cos+0x136>
 8014966:	4632      	mov	r2, r6
 8014968:	463b      	mov	r3, r7
 801496a:	4630      	mov	r0, r6
 801496c:	4639      	mov	r1, r7
 801496e:	f7eb fe5b 	bl	8000628 <__aeabi_dmul>
 8014972:	4b51      	ldr	r3, [pc, #324]	; (8014ab8 <__kernel_cos+0x178>)
 8014974:	2200      	movs	r2, #0
 8014976:	4604      	mov	r4, r0
 8014978:	460d      	mov	r5, r1
 801497a:	f7eb fe55 	bl	8000628 <__aeabi_dmul>
 801497e:	a340      	add	r3, pc, #256	; (adr r3, 8014a80 <__kernel_cos+0x140>)
 8014980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014984:	4682      	mov	sl, r0
 8014986:	468b      	mov	fp, r1
 8014988:	4620      	mov	r0, r4
 801498a:	4629      	mov	r1, r5
 801498c:	f7eb fe4c 	bl	8000628 <__aeabi_dmul>
 8014990:	a33d      	add	r3, pc, #244	; (adr r3, 8014a88 <__kernel_cos+0x148>)
 8014992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014996:	f7eb fc91 	bl	80002bc <__adddf3>
 801499a:	4622      	mov	r2, r4
 801499c:	462b      	mov	r3, r5
 801499e:	f7eb fe43 	bl	8000628 <__aeabi_dmul>
 80149a2:	a33b      	add	r3, pc, #236	; (adr r3, 8014a90 <__kernel_cos+0x150>)
 80149a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149a8:	f7eb fc86 	bl	80002b8 <__aeabi_dsub>
 80149ac:	4622      	mov	r2, r4
 80149ae:	462b      	mov	r3, r5
 80149b0:	f7eb fe3a 	bl	8000628 <__aeabi_dmul>
 80149b4:	a338      	add	r3, pc, #224	; (adr r3, 8014a98 <__kernel_cos+0x158>)
 80149b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ba:	f7eb fc7f 	bl	80002bc <__adddf3>
 80149be:	4622      	mov	r2, r4
 80149c0:	462b      	mov	r3, r5
 80149c2:	f7eb fe31 	bl	8000628 <__aeabi_dmul>
 80149c6:	a336      	add	r3, pc, #216	; (adr r3, 8014aa0 <__kernel_cos+0x160>)
 80149c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149cc:	f7eb fc74 	bl	80002b8 <__aeabi_dsub>
 80149d0:	4622      	mov	r2, r4
 80149d2:	462b      	mov	r3, r5
 80149d4:	f7eb fe28 	bl	8000628 <__aeabi_dmul>
 80149d8:	a333      	add	r3, pc, #204	; (adr r3, 8014aa8 <__kernel_cos+0x168>)
 80149da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149de:	f7eb fc6d 	bl	80002bc <__adddf3>
 80149e2:	4622      	mov	r2, r4
 80149e4:	462b      	mov	r3, r5
 80149e6:	f7eb fe1f 	bl	8000628 <__aeabi_dmul>
 80149ea:	4622      	mov	r2, r4
 80149ec:	462b      	mov	r3, r5
 80149ee:	f7eb fe1b 	bl	8000628 <__aeabi_dmul>
 80149f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80149f6:	4604      	mov	r4, r0
 80149f8:	460d      	mov	r5, r1
 80149fa:	4630      	mov	r0, r6
 80149fc:	4639      	mov	r1, r7
 80149fe:	f7eb fe13 	bl	8000628 <__aeabi_dmul>
 8014a02:	460b      	mov	r3, r1
 8014a04:	4602      	mov	r2, r0
 8014a06:	4629      	mov	r1, r5
 8014a08:	4620      	mov	r0, r4
 8014a0a:	f7eb fc55 	bl	80002b8 <__aeabi_dsub>
 8014a0e:	4b2b      	ldr	r3, [pc, #172]	; (8014abc <__kernel_cos+0x17c>)
 8014a10:	4598      	cmp	r8, r3
 8014a12:	4606      	mov	r6, r0
 8014a14:	460f      	mov	r7, r1
 8014a16:	dc10      	bgt.n	8014a3a <__kernel_cos+0xfa>
 8014a18:	4602      	mov	r2, r0
 8014a1a:	460b      	mov	r3, r1
 8014a1c:	4650      	mov	r0, sl
 8014a1e:	4659      	mov	r1, fp
 8014a20:	f7eb fc4a 	bl	80002b8 <__aeabi_dsub>
 8014a24:	460b      	mov	r3, r1
 8014a26:	4926      	ldr	r1, [pc, #152]	; (8014ac0 <__kernel_cos+0x180>)
 8014a28:	4602      	mov	r2, r0
 8014a2a:	2000      	movs	r0, #0
 8014a2c:	f7eb fc44 	bl	80002b8 <__aeabi_dsub>
 8014a30:	ec41 0b10 	vmov	d0, r0, r1
 8014a34:	b003      	add	sp, #12
 8014a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a3a:	4b22      	ldr	r3, [pc, #136]	; (8014ac4 <__kernel_cos+0x184>)
 8014a3c:	4920      	ldr	r1, [pc, #128]	; (8014ac0 <__kernel_cos+0x180>)
 8014a3e:	4598      	cmp	r8, r3
 8014a40:	bfcc      	ite	gt
 8014a42:	4d21      	ldrgt	r5, [pc, #132]	; (8014ac8 <__kernel_cos+0x188>)
 8014a44:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8014a48:	2400      	movs	r4, #0
 8014a4a:	4622      	mov	r2, r4
 8014a4c:	462b      	mov	r3, r5
 8014a4e:	2000      	movs	r0, #0
 8014a50:	f7eb fc32 	bl	80002b8 <__aeabi_dsub>
 8014a54:	4622      	mov	r2, r4
 8014a56:	4680      	mov	r8, r0
 8014a58:	4689      	mov	r9, r1
 8014a5a:	462b      	mov	r3, r5
 8014a5c:	4650      	mov	r0, sl
 8014a5e:	4659      	mov	r1, fp
 8014a60:	f7eb fc2a 	bl	80002b8 <__aeabi_dsub>
 8014a64:	4632      	mov	r2, r6
 8014a66:	463b      	mov	r3, r7
 8014a68:	f7eb fc26 	bl	80002b8 <__aeabi_dsub>
 8014a6c:	4602      	mov	r2, r0
 8014a6e:	460b      	mov	r3, r1
 8014a70:	4640      	mov	r0, r8
 8014a72:	4649      	mov	r1, r9
 8014a74:	e7da      	b.n	8014a2c <__kernel_cos+0xec>
 8014a76:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8014ab0 <__kernel_cos+0x170>
 8014a7a:	e7db      	b.n	8014a34 <__kernel_cos+0xf4>
 8014a7c:	f3af 8000 	nop.w
 8014a80:	be8838d4 	.word	0xbe8838d4
 8014a84:	bda8fae9 	.word	0xbda8fae9
 8014a88:	bdb4b1c4 	.word	0xbdb4b1c4
 8014a8c:	3e21ee9e 	.word	0x3e21ee9e
 8014a90:	809c52ad 	.word	0x809c52ad
 8014a94:	3e927e4f 	.word	0x3e927e4f
 8014a98:	19cb1590 	.word	0x19cb1590
 8014a9c:	3efa01a0 	.word	0x3efa01a0
 8014aa0:	16c15177 	.word	0x16c15177
 8014aa4:	3f56c16c 	.word	0x3f56c16c
 8014aa8:	5555554c 	.word	0x5555554c
 8014aac:	3fa55555 	.word	0x3fa55555
 8014ab0:	00000000 	.word	0x00000000
 8014ab4:	3ff00000 	.word	0x3ff00000
 8014ab8:	3fe00000 	.word	0x3fe00000
 8014abc:	3fd33332 	.word	0x3fd33332
 8014ac0:	3ff00000 	.word	0x3ff00000
 8014ac4:	3fe90000 	.word	0x3fe90000
 8014ac8:	3fd20000 	.word	0x3fd20000
 8014acc:	00000000 	.word	0x00000000

08014ad0 <__kernel_rem_pio2>:
 8014ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ad4:	ed2d 8b02 	vpush	{d8}
 8014ad8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8014adc:	f112 0f14 	cmn.w	r2, #20
 8014ae0:	9308      	str	r3, [sp, #32]
 8014ae2:	9101      	str	r1, [sp, #4]
 8014ae4:	4bc6      	ldr	r3, [pc, #792]	; (8014e00 <__kernel_rem_pio2+0x330>)
 8014ae6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8014ae8:	9009      	str	r0, [sp, #36]	; 0x24
 8014aea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014aee:	9304      	str	r3, [sp, #16]
 8014af0:	9b08      	ldr	r3, [sp, #32]
 8014af2:	f103 33ff 	add.w	r3, r3, #4294967295
 8014af6:	bfa8      	it	ge
 8014af8:	1ed4      	subge	r4, r2, #3
 8014afa:	9306      	str	r3, [sp, #24]
 8014afc:	bfb2      	itee	lt
 8014afe:	2400      	movlt	r4, #0
 8014b00:	2318      	movge	r3, #24
 8014b02:	fb94 f4f3 	sdivge	r4, r4, r3
 8014b06:	f06f 0317 	mvn.w	r3, #23
 8014b0a:	fb04 3303 	mla	r3, r4, r3, r3
 8014b0e:	eb03 0a02 	add.w	sl, r3, r2
 8014b12:	9b04      	ldr	r3, [sp, #16]
 8014b14:	9a06      	ldr	r2, [sp, #24]
 8014b16:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8014df0 <__kernel_rem_pio2+0x320>
 8014b1a:	eb03 0802 	add.w	r8, r3, r2
 8014b1e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8014b20:	1aa7      	subs	r7, r4, r2
 8014b22:	ae20      	add	r6, sp, #128	; 0x80
 8014b24:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014b28:	2500      	movs	r5, #0
 8014b2a:	4545      	cmp	r5, r8
 8014b2c:	dd18      	ble.n	8014b60 <__kernel_rem_pio2+0x90>
 8014b2e:	9b08      	ldr	r3, [sp, #32]
 8014b30:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8014b34:	aa20      	add	r2, sp, #128	; 0x80
 8014b36:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8014df0 <__kernel_rem_pio2+0x320>
 8014b3a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8014b3e:	f1c3 0301 	rsb	r3, r3, #1
 8014b42:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8014b46:	9307      	str	r3, [sp, #28]
 8014b48:	9b07      	ldr	r3, [sp, #28]
 8014b4a:	9a04      	ldr	r2, [sp, #16]
 8014b4c:	4443      	add	r3, r8
 8014b4e:	429a      	cmp	r2, r3
 8014b50:	db2f      	blt.n	8014bb2 <__kernel_rem_pio2+0xe2>
 8014b52:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014b56:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8014b5a:	462f      	mov	r7, r5
 8014b5c:	2600      	movs	r6, #0
 8014b5e:	e01b      	b.n	8014b98 <__kernel_rem_pio2+0xc8>
 8014b60:	42ef      	cmn	r7, r5
 8014b62:	d407      	bmi.n	8014b74 <__kernel_rem_pio2+0xa4>
 8014b64:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014b68:	f7eb fcf4 	bl	8000554 <__aeabi_i2d>
 8014b6c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014b70:	3501      	adds	r5, #1
 8014b72:	e7da      	b.n	8014b2a <__kernel_rem_pio2+0x5a>
 8014b74:	ec51 0b18 	vmov	r0, r1, d8
 8014b78:	e7f8      	b.n	8014b6c <__kernel_rem_pio2+0x9c>
 8014b7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014b7e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014b82:	f7eb fd51 	bl	8000628 <__aeabi_dmul>
 8014b86:	4602      	mov	r2, r0
 8014b88:	460b      	mov	r3, r1
 8014b8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b8e:	f7eb fb95 	bl	80002bc <__adddf3>
 8014b92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014b96:	3601      	adds	r6, #1
 8014b98:	9b06      	ldr	r3, [sp, #24]
 8014b9a:	429e      	cmp	r6, r3
 8014b9c:	f1a7 0708 	sub.w	r7, r7, #8
 8014ba0:	ddeb      	ble.n	8014b7a <__kernel_rem_pio2+0xaa>
 8014ba2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014ba6:	3508      	adds	r5, #8
 8014ba8:	ecab 7b02 	vstmia	fp!, {d7}
 8014bac:	f108 0801 	add.w	r8, r8, #1
 8014bb0:	e7ca      	b.n	8014b48 <__kernel_rem_pio2+0x78>
 8014bb2:	9b04      	ldr	r3, [sp, #16]
 8014bb4:	aa0c      	add	r2, sp, #48	; 0x30
 8014bb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014bba:	930b      	str	r3, [sp, #44]	; 0x2c
 8014bbc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8014bbe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014bc2:	9c04      	ldr	r4, [sp, #16]
 8014bc4:	930a      	str	r3, [sp, #40]	; 0x28
 8014bc6:	ab98      	add	r3, sp, #608	; 0x260
 8014bc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014bcc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8014bd0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8014bd4:	f8cd b008 	str.w	fp, [sp, #8]
 8014bd8:	4625      	mov	r5, r4
 8014bda:	2d00      	cmp	r5, #0
 8014bdc:	dc78      	bgt.n	8014cd0 <__kernel_rem_pio2+0x200>
 8014bde:	ec47 6b10 	vmov	d0, r6, r7
 8014be2:	4650      	mov	r0, sl
 8014be4:	f000 fbfc 	bl	80153e0 <scalbn>
 8014be8:	ec57 6b10 	vmov	r6, r7, d0
 8014bec:	2200      	movs	r2, #0
 8014bee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014bf2:	ee10 0a10 	vmov	r0, s0
 8014bf6:	4639      	mov	r1, r7
 8014bf8:	f7eb fd16 	bl	8000628 <__aeabi_dmul>
 8014bfc:	ec41 0b10 	vmov	d0, r0, r1
 8014c00:	f000 fb6e 	bl	80152e0 <floor>
 8014c04:	4b7f      	ldr	r3, [pc, #508]	; (8014e04 <__kernel_rem_pio2+0x334>)
 8014c06:	ec51 0b10 	vmov	r0, r1, d0
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	f7eb fd0c 	bl	8000628 <__aeabi_dmul>
 8014c10:	4602      	mov	r2, r0
 8014c12:	460b      	mov	r3, r1
 8014c14:	4630      	mov	r0, r6
 8014c16:	4639      	mov	r1, r7
 8014c18:	f7eb fb4e 	bl	80002b8 <__aeabi_dsub>
 8014c1c:	460f      	mov	r7, r1
 8014c1e:	4606      	mov	r6, r0
 8014c20:	f7eb ffb2 	bl	8000b88 <__aeabi_d2iz>
 8014c24:	9007      	str	r0, [sp, #28]
 8014c26:	f7eb fc95 	bl	8000554 <__aeabi_i2d>
 8014c2a:	4602      	mov	r2, r0
 8014c2c:	460b      	mov	r3, r1
 8014c2e:	4630      	mov	r0, r6
 8014c30:	4639      	mov	r1, r7
 8014c32:	f7eb fb41 	bl	80002b8 <__aeabi_dsub>
 8014c36:	f1ba 0f00 	cmp.w	sl, #0
 8014c3a:	4606      	mov	r6, r0
 8014c3c:	460f      	mov	r7, r1
 8014c3e:	dd70      	ble.n	8014d22 <__kernel_rem_pio2+0x252>
 8014c40:	1e62      	subs	r2, r4, #1
 8014c42:	ab0c      	add	r3, sp, #48	; 0x30
 8014c44:	9d07      	ldr	r5, [sp, #28]
 8014c46:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014c4a:	f1ca 0118 	rsb	r1, sl, #24
 8014c4e:	fa40 f301 	asr.w	r3, r0, r1
 8014c52:	441d      	add	r5, r3
 8014c54:	408b      	lsls	r3, r1
 8014c56:	1ac0      	subs	r0, r0, r3
 8014c58:	ab0c      	add	r3, sp, #48	; 0x30
 8014c5a:	9507      	str	r5, [sp, #28]
 8014c5c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014c60:	f1ca 0317 	rsb	r3, sl, #23
 8014c64:	fa40 f303 	asr.w	r3, r0, r3
 8014c68:	9302      	str	r3, [sp, #8]
 8014c6a:	9b02      	ldr	r3, [sp, #8]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	dd66      	ble.n	8014d3e <__kernel_rem_pio2+0x26e>
 8014c70:	9b07      	ldr	r3, [sp, #28]
 8014c72:	2200      	movs	r2, #0
 8014c74:	3301      	adds	r3, #1
 8014c76:	9307      	str	r3, [sp, #28]
 8014c78:	4615      	mov	r5, r2
 8014c7a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014c7e:	4294      	cmp	r4, r2
 8014c80:	f300 8099 	bgt.w	8014db6 <__kernel_rem_pio2+0x2e6>
 8014c84:	f1ba 0f00 	cmp.w	sl, #0
 8014c88:	dd07      	ble.n	8014c9a <__kernel_rem_pio2+0x1ca>
 8014c8a:	f1ba 0f01 	cmp.w	sl, #1
 8014c8e:	f000 80a5 	beq.w	8014ddc <__kernel_rem_pio2+0x30c>
 8014c92:	f1ba 0f02 	cmp.w	sl, #2
 8014c96:	f000 80c1 	beq.w	8014e1c <__kernel_rem_pio2+0x34c>
 8014c9a:	9b02      	ldr	r3, [sp, #8]
 8014c9c:	2b02      	cmp	r3, #2
 8014c9e:	d14e      	bne.n	8014d3e <__kernel_rem_pio2+0x26e>
 8014ca0:	4632      	mov	r2, r6
 8014ca2:	463b      	mov	r3, r7
 8014ca4:	4958      	ldr	r1, [pc, #352]	; (8014e08 <__kernel_rem_pio2+0x338>)
 8014ca6:	2000      	movs	r0, #0
 8014ca8:	f7eb fb06 	bl	80002b8 <__aeabi_dsub>
 8014cac:	4606      	mov	r6, r0
 8014cae:	460f      	mov	r7, r1
 8014cb0:	2d00      	cmp	r5, #0
 8014cb2:	d044      	beq.n	8014d3e <__kernel_rem_pio2+0x26e>
 8014cb4:	4650      	mov	r0, sl
 8014cb6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8014df8 <__kernel_rem_pio2+0x328>
 8014cba:	f000 fb91 	bl	80153e0 <scalbn>
 8014cbe:	4630      	mov	r0, r6
 8014cc0:	4639      	mov	r1, r7
 8014cc2:	ec53 2b10 	vmov	r2, r3, d0
 8014cc6:	f7eb faf7 	bl	80002b8 <__aeabi_dsub>
 8014cca:	4606      	mov	r6, r0
 8014ccc:	460f      	mov	r7, r1
 8014cce:	e036      	b.n	8014d3e <__kernel_rem_pio2+0x26e>
 8014cd0:	4b4e      	ldr	r3, [pc, #312]	; (8014e0c <__kernel_rem_pio2+0x33c>)
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	4630      	mov	r0, r6
 8014cd6:	4639      	mov	r1, r7
 8014cd8:	f7eb fca6 	bl	8000628 <__aeabi_dmul>
 8014cdc:	f7eb ff54 	bl	8000b88 <__aeabi_d2iz>
 8014ce0:	f7eb fc38 	bl	8000554 <__aeabi_i2d>
 8014ce4:	4b4a      	ldr	r3, [pc, #296]	; (8014e10 <__kernel_rem_pio2+0x340>)
 8014ce6:	2200      	movs	r2, #0
 8014ce8:	4680      	mov	r8, r0
 8014cea:	4689      	mov	r9, r1
 8014cec:	f7eb fc9c 	bl	8000628 <__aeabi_dmul>
 8014cf0:	4602      	mov	r2, r0
 8014cf2:	460b      	mov	r3, r1
 8014cf4:	4630      	mov	r0, r6
 8014cf6:	4639      	mov	r1, r7
 8014cf8:	f7eb fade 	bl	80002b8 <__aeabi_dsub>
 8014cfc:	f7eb ff44 	bl	8000b88 <__aeabi_d2iz>
 8014d00:	9b02      	ldr	r3, [sp, #8]
 8014d02:	f843 0b04 	str.w	r0, [r3], #4
 8014d06:	3d01      	subs	r5, #1
 8014d08:	9302      	str	r3, [sp, #8]
 8014d0a:	ab70      	add	r3, sp, #448	; 0x1c0
 8014d0c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d14:	4640      	mov	r0, r8
 8014d16:	4649      	mov	r1, r9
 8014d18:	f7eb fad0 	bl	80002bc <__adddf3>
 8014d1c:	4606      	mov	r6, r0
 8014d1e:	460f      	mov	r7, r1
 8014d20:	e75b      	b.n	8014bda <__kernel_rem_pio2+0x10a>
 8014d22:	d105      	bne.n	8014d30 <__kernel_rem_pio2+0x260>
 8014d24:	1e63      	subs	r3, r4, #1
 8014d26:	aa0c      	add	r2, sp, #48	; 0x30
 8014d28:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014d2c:	15c3      	asrs	r3, r0, #23
 8014d2e:	e79b      	b.n	8014c68 <__kernel_rem_pio2+0x198>
 8014d30:	4b38      	ldr	r3, [pc, #224]	; (8014e14 <__kernel_rem_pio2+0x344>)
 8014d32:	2200      	movs	r2, #0
 8014d34:	f7eb fefe 	bl	8000b34 <__aeabi_dcmpge>
 8014d38:	2800      	cmp	r0, #0
 8014d3a:	d139      	bne.n	8014db0 <__kernel_rem_pio2+0x2e0>
 8014d3c:	9002      	str	r0, [sp, #8]
 8014d3e:	2200      	movs	r2, #0
 8014d40:	2300      	movs	r3, #0
 8014d42:	4630      	mov	r0, r6
 8014d44:	4639      	mov	r1, r7
 8014d46:	f7eb fed7 	bl	8000af8 <__aeabi_dcmpeq>
 8014d4a:	2800      	cmp	r0, #0
 8014d4c:	f000 80b4 	beq.w	8014eb8 <__kernel_rem_pio2+0x3e8>
 8014d50:	f104 3bff 	add.w	fp, r4, #4294967295
 8014d54:	465b      	mov	r3, fp
 8014d56:	2200      	movs	r2, #0
 8014d58:	9904      	ldr	r1, [sp, #16]
 8014d5a:	428b      	cmp	r3, r1
 8014d5c:	da65      	bge.n	8014e2a <__kernel_rem_pio2+0x35a>
 8014d5e:	2a00      	cmp	r2, #0
 8014d60:	d07b      	beq.n	8014e5a <__kernel_rem_pio2+0x38a>
 8014d62:	ab0c      	add	r3, sp, #48	; 0x30
 8014d64:	f1aa 0a18 	sub.w	sl, sl, #24
 8014d68:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	f000 80a0 	beq.w	8014eb2 <__kernel_rem_pio2+0x3e2>
 8014d72:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8014df8 <__kernel_rem_pio2+0x328>
 8014d76:	4650      	mov	r0, sl
 8014d78:	f000 fb32 	bl	80153e0 <scalbn>
 8014d7c:	4f23      	ldr	r7, [pc, #140]	; (8014e0c <__kernel_rem_pio2+0x33c>)
 8014d7e:	ec55 4b10 	vmov	r4, r5, d0
 8014d82:	46d8      	mov	r8, fp
 8014d84:	2600      	movs	r6, #0
 8014d86:	f1b8 0f00 	cmp.w	r8, #0
 8014d8a:	f280 80cf 	bge.w	8014f2c <__kernel_rem_pio2+0x45c>
 8014d8e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8014df0 <__kernel_rem_pio2+0x320>
 8014d92:	465f      	mov	r7, fp
 8014d94:	f04f 0800 	mov.w	r8, #0
 8014d98:	2f00      	cmp	r7, #0
 8014d9a:	f2c0 80fd 	blt.w	8014f98 <__kernel_rem_pio2+0x4c8>
 8014d9e:	ab70      	add	r3, sp, #448	; 0x1c0
 8014da0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8014e18 <__kernel_rem_pio2+0x348>
 8014da4:	ec55 4b18 	vmov	r4, r5, d8
 8014da8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8014dac:	2600      	movs	r6, #0
 8014dae:	e0e5      	b.n	8014f7c <__kernel_rem_pio2+0x4ac>
 8014db0:	2302      	movs	r3, #2
 8014db2:	9302      	str	r3, [sp, #8]
 8014db4:	e75c      	b.n	8014c70 <__kernel_rem_pio2+0x1a0>
 8014db6:	f8db 3000 	ldr.w	r3, [fp]
 8014dba:	b955      	cbnz	r5, 8014dd2 <__kernel_rem_pio2+0x302>
 8014dbc:	b123      	cbz	r3, 8014dc8 <__kernel_rem_pio2+0x2f8>
 8014dbe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8014dc2:	f8cb 3000 	str.w	r3, [fp]
 8014dc6:	2301      	movs	r3, #1
 8014dc8:	3201      	adds	r2, #1
 8014dca:	f10b 0b04 	add.w	fp, fp, #4
 8014dce:	461d      	mov	r5, r3
 8014dd0:	e755      	b.n	8014c7e <__kernel_rem_pio2+0x1ae>
 8014dd2:	1acb      	subs	r3, r1, r3
 8014dd4:	f8cb 3000 	str.w	r3, [fp]
 8014dd8:	462b      	mov	r3, r5
 8014dda:	e7f5      	b.n	8014dc8 <__kernel_rem_pio2+0x2f8>
 8014ddc:	1e62      	subs	r2, r4, #1
 8014dde:	ab0c      	add	r3, sp, #48	; 0x30
 8014de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014de4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014de8:	a90c      	add	r1, sp, #48	; 0x30
 8014dea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014dee:	e754      	b.n	8014c9a <__kernel_rem_pio2+0x1ca>
	...
 8014dfc:	3ff00000 	.word	0x3ff00000
 8014e00:	0801af80 	.word	0x0801af80
 8014e04:	40200000 	.word	0x40200000
 8014e08:	3ff00000 	.word	0x3ff00000
 8014e0c:	3e700000 	.word	0x3e700000
 8014e10:	41700000 	.word	0x41700000
 8014e14:	3fe00000 	.word	0x3fe00000
 8014e18:	0801af40 	.word	0x0801af40
 8014e1c:	1e62      	subs	r2, r4, #1
 8014e1e:	ab0c      	add	r3, sp, #48	; 0x30
 8014e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e24:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014e28:	e7de      	b.n	8014de8 <__kernel_rem_pio2+0x318>
 8014e2a:	a90c      	add	r1, sp, #48	; 0x30
 8014e2c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014e30:	3b01      	subs	r3, #1
 8014e32:	430a      	orrs	r2, r1
 8014e34:	e790      	b.n	8014d58 <__kernel_rem_pio2+0x288>
 8014e36:	3301      	adds	r3, #1
 8014e38:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014e3c:	2900      	cmp	r1, #0
 8014e3e:	d0fa      	beq.n	8014e36 <__kernel_rem_pio2+0x366>
 8014e40:	9a08      	ldr	r2, [sp, #32]
 8014e42:	18e3      	adds	r3, r4, r3
 8014e44:	18a6      	adds	r6, r4, r2
 8014e46:	aa20      	add	r2, sp, #128	; 0x80
 8014e48:	1c65      	adds	r5, r4, #1
 8014e4a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8014e4e:	9302      	str	r3, [sp, #8]
 8014e50:	9b02      	ldr	r3, [sp, #8]
 8014e52:	42ab      	cmp	r3, r5
 8014e54:	da04      	bge.n	8014e60 <__kernel_rem_pio2+0x390>
 8014e56:	461c      	mov	r4, r3
 8014e58:	e6b5      	b.n	8014bc6 <__kernel_rem_pio2+0xf6>
 8014e5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014e5c:	2301      	movs	r3, #1
 8014e5e:	e7eb      	b.n	8014e38 <__kernel_rem_pio2+0x368>
 8014e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014e66:	f7eb fb75 	bl	8000554 <__aeabi_i2d>
 8014e6a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e70:	46b3      	mov	fp, r6
 8014e72:	461c      	mov	r4, r3
 8014e74:	2700      	movs	r7, #0
 8014e76:	f04f 0800 	mov.w	r8, #0
 8014e7a:	f04f 0900 	mov.w	r9, #0
 8014e7e:	9b06      	ldr	r3, [sp, #24]
 8014e80:	429f      	cmp	r7, r3
 8014e82:	dd06      	ble.n	8014e92 <__kernel_rem_pio2+0x3c2>
 8014e84:	ab70      	add	r3, sp, #448	; 0x1c0
 8014e86:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014e8a:	e9c3 8900 	strd	r8, r9, [r3]
 8014e8e:	3501      	adds	r5, #1
 8014e90:	e7de      	b.n	8014e50 <__kernel_rem_pio2+0x380>
 8014e92:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8014e96:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8014e9a:	f7eb fbc5 	bl	8000628 <__aeabi_dmul>
 8014e9e:	4602      	mov	r2, r0
 8014ea0:	460b      	mov	r3, r1
 8014ea2:	4640      	mov	r0, r8
 8014ea4:	4649      	mov	r1, r9
 8014ea6:	f7eb fa09 	bl	80002bc <__adddf3>
 8014eaa:	3701      	adds	r7, #1
 8014eac:	4680      	mov	r8, r0
 8014eae:	4689      	mov	r9, r1
 8014eb0:	e7e5      	b.n	8014e7e <__kernel_rem_pio2+0x3ae>
 8014eb2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014eb6:	e754      	b.n	8014d62 <__kernel_rem_pio2+0x292>
 8014eb8:	ec47 6b10 	vmov	d0, r6, r7
 8014ebc:	f1ca 0000 	rsb	r0, sl, #0
 8014ec0:	f000 fa8e 	bl	80153e0 <scalbn>
 8014ec4:	ec57 6b10 	vmov	r6, r7, d0
 8014ec8:	4b9f      	ldr	r3, [pc, #636]	; (8015148 <__kernel_rem_pio2+0x678>)
 8014eca:	ee10 0a10 	vmov	r0, s0
 8014ece:	2200      	movs	r2, #0
 8014ed0:	4639      	mov	r1, r7
 8014ed2:	f7eb fe2f 	bl	8000b34 <__aeabi_dcmpge>
 8014ed6:	b300      	cbz	r0, 8014f1a <__kernel_rem_pio2+0x44a>
 8014ed8:	4b9c      	ldr	r3, [pc, #624]	; (801514c <__kernel_rem_pio2+0x67c>)
 8014eda:	2200      	movs	r2, #0
 8014edc:	4630      	mov	r0, r6
 8014ede:	4639      	mov	r1, r7
 8014ee0:	f7eb fba2 	bl	8000628 <__aeabi_dmul>
 8014ee4:	f7eb fe50 	bl	8000b88 <__aeabi_d2iz>
 8014ee8:	4605      	mov	r5, r0
 8014eea:	f7eb fb33 	bl	8000554 <__aeabi_i2d>
 8014eee:	4b96      	ldr	r3, [pc, #600]	; (8015148 <__kernel_rem_pio2+0x678>)
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	f7eb fb99 	bl	8000628 <__aeabi_dmul>
 8014ef6:	460b      	mov	r3, r1
 8014ef8:	4602      	mov	r2, r0
 8014efa:	4639      	mov	r1, r7
 8014efc:	4630      	mov	r0, r6
 8014efe:	f7eb f9db 	bl	80002b8 <__aeabi_dsub>
 8014f02:	f7eb fe41 	bl	8000b88 <__aeabi_d2iz>
 8014f06:	f104 0b01 	add.w	fp, r4, #1
 8014f0a:	ab0c      	add	r3, sp, #48	; 0x30
 8014f0c:	f10a 0a18 	add.w	sl, sl, #24
 8014f10:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014f14:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8014f18:	e72b      	b.n	8014d72 <__kernel_rem_pio2+0x2a2>
 8014f1a:	4630      	mov	r0, r6
 8014f1c:	4639      	mov	r1, r7
 8014f1e:	f7eb fe33 	bl	8000b88 <__aeabi_d2iz>
 8014f22:	ab0c      	add	r3, sp, #48	; 0x30
 8014f24:	46a3      	mov	fp, r4
 8014f26:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014f2a:	e722      	b.n	8014d72 <__kernel_rem_pio2+0x2a2>
 8014f2c:	ab70      	add	r3, sp, #448	; 0x1c0
 8014f2e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8014f32:	ab0c      	add	r3, sp, #48	; 0x30
 8014f34:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8014f38:	f7eb fb0c 	bl	8000554 <__aeabi_i2d>
 8014f3c:	4622      	mov	r2, r4
 8014f3e:	462b      	mov	r3, r5
 8014f40:	f7eb fb72 	bl	8000628 <__aeabi_dmul>
 8014f44:	4632      	mov	r2, r6
 8014f46:	e9c9 0100 	strd	r0, r1, [r9]
 8014f4a:	463b      	mov	r3, r7
 8014f4c:	4620      	mov	r0, r4
 8014f4e:	4629      	mov	r1, r5
 8014f50:	f7eb fb6a 	bl	8000628 <__aeabi_dmul>
 8014f54:	f108 38ff 	add.w	r8, r8, #4294967295
 8014f58:	4604      	mov	r4, r0
 8014f5a:	460d      	mov	r5, r1
 8014f5c:	e713      	b.n	8014d86 <__kernel_rem_pio2+0x2b6>
 8014f5e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8014f62:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8014f66:	f7eb fb5f 	bl	8000628 <__aeabi_dmul>
 8014f6a:	4602      	mov	r2, r0
 8014f6c:	460b      	mov	r3, r1
 8014f6e:	4620      	mov	r0, r4
 8014f70:	4629      	mov	r1, r5
 8014f72:	f7eb f9a3 	bl	80002bc <__adddf3>
 8014f76:	3601      	adds	r6, #1
 8014f78:	4604      	mov	r4, r0
 8014f7a:	460d      	mov	r5, r1
 8014f7c:	9b04      	ldr	r3, [sp, #16]
 8014f7e:	429e      	cmp	r6, r3
 8014f80:	dc01      	bgt.n	8014f86 <__kernel_rem_pio2+0x4b6>
 8014f82:	45b0      	cmp	r8, r6
 8014f84:	daeb      	bge.n	8014f5e <__kernel_rem_pio2+0x48e>
 8014f86:	ab48      	add	r3, sp, #288	; 0x120
 8014f88:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014f8c:	e9c3 4500 	strd	r4, r5, [r3]
 8014f90:	3f01      	subs	r7, #1
 8014f92:	f108 0801 	add.w	r8, r8, #1
 8014f96:	e6ff      	b.n	8014d98 <__kernel_rem_pio2+0x2c8>
 8014f98:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8014f9a:	2b02      	cmp	r3, #2
 8014f9c:	dc0b      	bgt.n	8014fb6 <__kernel_rem_pio2+0x4e6>
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	dc6e      	bgt.n	8015080 <__kernel_rem_pio2+0x5b0>
 8014fa2:	d045      	beq.n	8015030 <__kernel_rem_pio2+0x560>
 8014fa4:	9b07      	ldr	r3, [sp, #28]
 8014fa6:	f003 0007 	and.w	r0, r3, #7
 8014faa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8014fae:	ecbd 8b02 	vpop	{d8}
 8014fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fb6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8014fb8:	2b03      	cmp	r3, #3
 8014fba:	d1f3      	bne.n	8014fa4 <__kernel_rem_pio2+0x4d4>
 8014fbc:	ab48      	add	r3, sp, #288	; 0x120
 8014fbe:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8014fc2:	46d0      	mov	r8, sl
 8014fc4:	46d9      	mov	r9, fp
 8014fc6:	f1b9 0f00 	cmp.w	r9, #0
 8014fca:	f1a8 0808 	sub.w	r8, r8, #8
 8014fce:	dc64      	bgt.n	801509a <__kernel_rem_pio2+0x5ca>
 8014fd0:	465c      	mov	r4, fp
 8014fd2:	2c01      	cmp	r4, #1
 8014fd4:	f1aa 0a08 	sub.w	sl, sl, #8
 8014fd8:	dc7e      	bgt.n	80150d8 <__kernel_rem_pio2+0x608>
 8014fda:	2000      	movs	r0, #0
 8014fdc:	2100      	movs	r1, #0
 8014fde:	f1bb 0f01 	cmp.w	fp, #1
 8014fe2:	f300 8097 	bgt.w	8015114 <__kernel_rem_pio2+0x644>
 8014fe6:	9b02      	ldr	r3, [sp, #8]
 8014fe8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8014fec:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	f040 8099 	bne.w	8015128 <__kernel_rem_pio2+0x658>
 8014ff6:	9b01      	ldr	r3, [sp, #4]
 8014ff8:	e9c3 5600 	strd	r5, r6, [r3]
 8014ffc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8015000:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8015004:	e7ce      	b.n	8014fa4 <__kernel_rem_pio2+0x4d4>
 8015006:	ab48      	add	r3, sp, #288	; 0x120
 8015008:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015010:	f7eb f954 	bl	80002bc <__adddf3>
 8015014:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015018:	f1bb 0f00 	cmp.w	fp, #0
 801501c:	daf3      	bge.n	8015006 <__kernel_rem_pio2+0x536>
 801501e:	9b02      	ldr	r3, [sp, #8]
 8015020:	b113      	cbz	r3, 8015028 <__kernel_rem_pio2+0x558>
 8015022:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015026:	4619      	mov	r1, r3
 8015028:	9b01      	ldr	r3, [sp, #4]
 801502a:	e9c3 0100 	strd	r0, r1, [r3]
 801502e:	e7b9      	b.n	8014fa4 <__kernel_rem_pio2+0x4d4>
 8015030:	2000      	movs	r0, #0
 8015032:	2100      	movs	r1, #0
 8015034:	e7f0      	b.n	8015018 <__kernel_rem_pio2+0x548>
 8015036:	ab48      	add	r3, sp, #288	; 0x120
 8015038:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801503c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015040:	f7eb f93c 	bl	80002bc <__adddf3>
 8015044:	3c01      	subs	r4, #1
 8015046:	2c00      	cmp	r4, #0
 8015048:	daf5      	bge.n	8015036 <__kernel_rem_pio2+0x566>
 801504a:	9b02      	ldr	r3, [sp, #8]
 801504c:	b1e3      	cbz	r3, 8015088 <__kernel_rem_pio2+0x5b8>
 801504e:	4602      	mov	r2, r0
 8015050:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015054:	9c01      	ldr	r4, [sp, #4]
 8015056:	e9c4 2300 	strd	r2, r3, [r4]
 801505a:	4602      	mov	r2, r0
 801505c:	460b      	mov	r3, r1
 801505e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8015062:	f7eb f929 	bl	80002b8 <__aeabi_dsub>
 8015066:	ad4a      	add	r5, sp, #296	; 0x128
 8015068:	2401      	movs	r4, #1
 801506a:	45a3      	cmp	fp, r4
 801506c:	da0f      	bge.n	801508e <__kernel_rem_pio2+0x5be>
 801506e:	9b02      	ldr	r3, [sp, #8]
 8015070:	b113      	cbz	r3, 8015078 <__kernel_rem_pio2+0x5a8>
 8015072:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015076:	4619      	mov	r1, r3
 8015078:	9b01      	ldr	r3, [sp, #4]
 801507a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801507e:	e791      	b.n	8014fa4 <__kernel_rem_pio2+0x4d4>
 8015080:	465c      	mov	r4, fp
 8015082:	2000      	movs	r0, #0
 8015084:	2100      	movs	r1, #0
 8015086:	e7de      	b.n	8015046 <__kernel_rem_pio2+0x576>
 8015088:	4602      	mov	r2, r0
 801508a:	460b      	mov	r3, r1
 801508c:	e7e2      	b.n	8015054 <__kernel_rem_pio2+0x584>
 801508e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8015092:	f7eb f913 	bl	80002bc <__adddf3>
 8015096:	3401      	adds	r4, #1
 8015098:	e7e7      	b.n	801506a <__kernel_rem_pio2+0x59a>
 801509a:	e9d8 4500 	ldrd	r4, r5, [r8]
 801509e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80150a2:	4620      	mov	r0, r4
 80150a4:	4632      	mov	r2, r6
 80150a6:	463b      	mov	r3, r7
 80150a8:	4629      	mov	r1, r5
 80150aa:	f7eb f907 	bl	80002bc <__adddf3>
 80150ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80150b2:	4602      	mov	r2, r0
 80150b4:	460b      	mov	r3, r1
 80150b6:	4620      	mov	r0, r4
 80150b8:	4629      	mov	r1, r5
 80150ba:	f7eb f8fd 	bl	80002b8 <__aeabi_dsub>
 80150be:	4632      	mov	r2, r6
 80150c0:	463b      	mov	r3, r7
 80150c2:	f7eb f8fb 	bl	80002bc <__adddf3>
 80150c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80150ca:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80150ce:	ed88 7b00 	vstr	d7, [r8]
 80150d2:	f109 39ff 	add.w	r9, r9, #4294967295
 80150d6:	e776      	b.n	8014fc6 <__kernel_rem_pio2+0x4f6>
 80150d8:	e9da 8900 	ldrd	r8, r9, [sl]
 80150dc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80150e0:	4640      	mov	r0, r8
 80150e2:	4632      	mov	r2, r6
 80150e4:	463b      	mov	r3, r7
 80150e6:	4649      	mov	r1, r9
 80150e8:	f7eb f8e8 	bl	80002bc <__adddf3>
 80150ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80150f0:	4602      	mov	r2, r0
 80150f2:	460b      	mov	r3, r1
 80150f4:	4640      	mov	r0, r8
 80150f6:	4649      	mov	r1, r9
 80150f8:	f7eb f8de 	bl	80002b8 <__aeabi_dsub>
 80150fc:	4632      	mov	r2, r6
 80150fe:	463b      	mov	r3, r7
 8015100:	f7eb f8dc 	bl	80002bc <__adddf3>
 8015104:	ed9d 7b04 	vldr	d7, [sp, #16]
 8015108:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801510c:	ed8a 7b00 	vstr	d7, [sl]
 8015110:	3c01      	subs	r4, #1
 8015112:	e75e      	b.n	8014fd2 <__kernel_rem_pio2+0x502>
 8015114:	ab48      	add	r3, sp, #288	; 0x120
 8015116:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801511a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801511e:	f7eb f8cd 	bl	80002bc <__adddf3>
 8015122:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015126:	e75a      	b.n	8014fde <__kernel_rem_pio2+0x50e>
 8015128:	9b01      	ldr	r3, [sp, #4]
 801512a:	9a01      	ldr	r2, [sp, #4]
 801512c:	601d      	str	r5, [r3, #0]
 801512e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8015132:	605c      	str	r4, [r3, #4]
 8015134:	609f      	str	r7, [r3, #8]
 8015136:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801513a:	60d3      	str	r3, [r2, #12]
 801513c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015140:	6110      	str	r0, [r2, #16]
 8015142:	6153      	str	r3, [r2, #20]
 8015144:	e72e      	b.n	8014fa4 <__kernel_rem_pio2+0x4d4>
 8015146:	bf00      	nop
 8015148:	41700000 	.word	0x41700000
 801514c:	3e700000 	.word	0x3e700000

08015150 <__kernel_sin>:
 8015150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015154:	ed2d 8b04 	vpush	{d8-d9}
 8015158:	eeb0 8a41 	vmov.f32	s16, s2
 801515c:	eef0 8a61 	vmov.f32	s17, s3
 8015160:	ec55 4b10 	vmov	r4, r5, d0
 8015164:	b083      	sub	sp, #12
 8015166:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801516a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801516e:	9001      	str	r0, [sp, #4]
 8015170:	da06      	bge.n	8015180 <__kernel_sin+0x30>
 8015172:	ee10 0a10 	vmov	r0, s0
 8015176:	4629      	mov	r1, r5
 8015178:	f7eb fd06 	bl	8000b88 <__aeabi_d2iz>
 801517c:	2800      	cmp	r0, #0
 801517e:	d051      	beq.n	8015224 <__kernel_sin+0xd4>
 8015180:	4622      	mov	r2, r4
 8015182:	462b      	mov	r3, r5
 8015184:	4620      	mov	r0, r4
 8015186:	4629      	mov	r1, r5
 8015188:	f7eb fa4e 	bl	8000628 <__aeabi_dmul>
 801518c:	4682      	mov	sl, r0
 801518e:	468b      	mov	fp, r1
 8015190:	4602      	mov	r2, r0
 8015192:	460b      	mov	r3, r1
 8015194:	4620      	mov	r0, r4
 8015196:	4629      	mov	r1, r5
 8015198:	f7eb fa46 	bl	8000628 <__aeabi_dmul>
 801519c:	a341      	add	r3, pc, #260	; (adr r3, 80152a4 <__kernel_sin+0x154>)
 801519e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151a2:	4680      	mov	r8, r0
 80151a4:	4689      	mov	r9, r1
 80151a6:	4650      	mov	r0, sl
 80151a8:	4659      	mov	r1, fp
 80151aa:	f7eb fa3d 	bl	8000628 <__aeabi_dmul>
 80151ae:	a33f      	add	r3, pc, #252	; (adr r3, 80152ac <__kernel_sin+0x15c>)
 80151b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151b4:	f7eb f880 	bl	80002b8 <__aeabi_dsub>
 80151b8:	4652      	mov	r2, sl
 80151ba:	465b      	mov	r3, fp
 80151bc:	f7eb fa34 	bl	8000628 <__aeabi_dmul>
 80151c0:	a33c      	add	r3, pc, #240	; (adr r3, 80152b4 <__kernel_sin+0x164>)
 80151c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151c6:	f7eb f879 	bl	80002bc <__adddf3>
 80151ca:	4652      	mov	r2, sl
 80151cc:	465b      	mov	r3, fp
 80151ce:	f7eb fa2b 	bl	8000628 <__aeabi_dmul>
 80151d2:	a33a      	add	r3, pc, #232	; (adr r3, 80152bc <__kernel_sin+0x16c>)
 80151d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151d8:	f7eb f86e 	bl	80002b8 <__aeabi_dsub>
 80151dc:	4652      	mov	r2, sl
 80151de:	465b      	mov	r3, fp
 80151e0:	f7eb fa22 	bl	8000628 <__aeabi_dmul>
 80151e4:	a337      	add	r3, pc, #220	; (adr r3, 80152c4 <__kernel_sin+0x174>)
 80151e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ea:	f7eb f867 	bl	80002bc <__adddf3>
 80151ee:	9b01      	ldr	r3, [sp, #4]
 80151f0:	4606      	mov	r6, r0
 80151f2:	460f      	mov	r7, r1
 80151f4:	b9eb      	cbnz	r3, 8015232 <__kernel_sin+0xe2>
 80151f6:	4602      	mov	r2, r0
 80151f8:	460b      	mov	r3, r1
 80151fa:	4650      	mov	r0, sl
 80151fc:	4659      	mov	r1, fp
 80151fe:	f7eb fa13 	bl	8000628 <__aeabi_dmul>
 8015202:	a325      	add	r3, pc, #148	; (adr r3, 8015298 <__kernel_sin+0x148>)
 8015204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015208:	f7eb f856 	bl	80002b8 <__aeabi_dsub>
 801520c:	4642      	mov	r2, r8
 801520e:	464b      	mov	r3, r9
 8015210:	f7eb fa0a 	bl	8000628 <__aeabi_dmul>
 8015214:	4602      	mov	r2, r0
 8015216:	460b      	mov	r3, r1
 8015218:	4620      	mov	r0, r4
 801521a:	4629      	mov	r1, r5
 801521c:	f7eb f84e 	bl	80002bc <__adddf3>
 8015220:	4604      	mov	r4, r0
 8015222:	460d      	mov	r5, r1
 8015224:	ec45 4b10 	vmov	d0, r4, r5
 8015228:	b003      	add	sp, #12
 801522a:	ecbd 8b04 	vpop	{d8-d9}
 801522e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015232:	4b1b      	ldr	r3, [pc, #108]	; (80152a0 <__kernel_sin+0x150>)
 8015234:	ec51 0b18 	vmov	r0, r1, d8
 8015238:	2200      	movs	r2, #0
 801523a:	f7eb f9f5 	bl	8000628 <__aeabi_dmul>
 801523e:	4632      	mov	r2, r6
 8015240:	ec41 0b19 	vmov	d9, r0, r1
 8015244:	463b      	mov	r3, r7
 8015246:	4640      	mov	r0, r8
 8015248:	4649      	mov	r1, r9
 801524a:	f7eb f9ed 	bl	8000628 <__aeabi_dmul>
 801524e:	4602      	mov	r2, r0
 8015250:	460b      	mov	r3, r1
 8015252:	ec51 0b19 	vmov	r0, r1, d9
 8015256:	f7eb f82f 	bl	80002b8 <__aeabi_dsub>
 801525a:	4652      	mov	r2, sl
 801525c:	465b      	mov	r3, fp
 801525e:	f7eb f9e3 	bl	8000628 <__aeabi_dmul>
 8015262:	ec53 2b18 	vmov	r2, r3, d8
 8015266:	f7eb f827 	bl	80002b8 <__aeabi_dsub>
 801526a:	a30b      	add	r3, pc, #44	; (adr r3, 8015298 <__kernel_sin+0x148>)
 801526c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015270:	4606      	mov	r6, r0
 8015272:	460f      	mov	r7, r1
 8015274:	4640      	mov	r0, r8
 8015276:	4649      	mov	r1, r9
 8015278:	f7eb f9d6 	bl	8000628 <__aeabi_dmul>
 801527c:	4602      	mov	r2, r0
 801527e:	460b      	mov	r3, r1
 8015280:	4630      	mov	r0, r6
 8015282:	4639      	mov	r1, r7
 8015284:	f7eb f81a 	bl	80002bc <__adddf3>
 8015288:	4602      	mov	r2, r0
 801528a:	460b      	mov	r3, r1
 801528c:	4620      	mov	r0, r4
 801528e:	4629      	mov	r1, r5
 8015290:	f7eb f812 	bl	80002b8 <__aeabi_dsub>
 8015294:	e7c4      	b.n	8015220 <__kernel_sin+0xd0>
 8015296:	bf00      	nop
 8015298:	55555549 	.word	0x55555549
 801529c:	3fc55555 	.word	0x3fc55555
 80152a0:	3fe00000 	.word	0x3fe00000
 80152a4:	5acfd57c 	.word	0x5acfd57c
 80152a8:	3de5d93a 	.word	0x3de5d93a
 80152ac:	8a2b9ceb 	.word	0x8a2b9ceb
 80152b0:	3e5ae5e6 	.word	0x3e5ae5e6
 80152b4:	57b1fe7d 	.word	0x57b1fe7d
 80152b8:	3ec71de3 	.word	0x3ec71de3
 80152bc:	19c161d5 	.word	0x19c161d5
 80152c0:	3f2a01a0 	.word	0x3f2a01a0
 80152c4:	1110f8a6 	.word	0x1110f8a6
 80152c8:	3f811111 	.word	0x3f811111

080152cc <fabs>:
 80152cc:	ec51 0b10 	vmov	r0, r1, d0
 80152d0:	ee10 2a10 	vmov	r2, s0
 80152d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80152d8:	ec43 2b10 	vmov	d0, r2, r3
 80152dc:	4770      	bx	lr
	...

080152e0 <floor>:
 80152e0:	ec51 0b10 	vmov	r0, r1, d0
 80152e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80152ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80152f0:	2e13      	cmp	r6, #19
 80152f2:	ee10 5a10 	vmov	r5, s0
 80152f6:	ee10 8a10 	vmov	r8, s0
 80152fa:	460c      	mov	r4, r1
 80152fc:	dc32      	bgt.n	8015364 <floor+0x84>
 80152fe:	2e00      	cmp	r6, #0
 8015300:	da14      	bge.n	801532c <floor+0x4c>
 8015302:	a333      	add	r3, pc, #204	; (adr r3, 80153d0 <floor+0xf0>)
 8015304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015308:	f7ea ffd8 	bl	80002bc <__adddf3>
 801530c:	2200      	movs	r2, #0
 801530e:	2300      	movs	r3, #0
 8015310:	f7eb fc1a 	bl	8000b48 <__aeabi_dcmpgt>
 8015314:	b138      	cbz	r0, 8015326 <floor+0x46>
 8015316:	2c00      	cmp	r4, #0
 8015318:	da57      	bge.n	80153ca <floor+0xea>
 801531a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801531e:	431d      	orrs	r5, r3
 8015320:	d001      	beq.n	8015326 <floor+0x46>
 8015322:	4c2d      	ldr	r4, [pc, #180]	; (80153d8 <floor+0xf8>)
 8015324:	2500      	movs	r5, #0
 8015326:	4621      	mov	r1, r4
 8015328:	4628      	mov	r0, r5
 801532a:	e025      	b.n	8015378 <floor+0x98>
 801532c:	4f2b      	ldr	r7, [pc, #172]	; (80153dc <floor+0xfc>)
 801532e:	4137      	asrs	r7, r6
 8015330:	ea01 0307 	and.w	r3, r1, r7
 8015334:	4303      	orrs	r3, r0
 8015336:	d01f      	beq.n	8015378 <floor+0x98>
 8015338:	a325      	add	r3, pc, #148	; (adr r3, 80153d0 <floor+0xf0>)
 801533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801533e:	f7ea ffbd 	bl	80002bc <__adddf3>
 8015342:	2200      	movs	r2, #0
 8015344:	2300      	movs	r3, #0
 8015346:	f7eb fbff 	bl	8000b48 <__aeabi_dcmpgt>
 801534a:	2800      	cmp	r0, #0
 801534c:	d0eb      	beq.n	8015326 <floor+0x46>
 801534e:	2c00      	cmp	r4, #0
 8015350:	bfbe      	ittt	lt
 8015352:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015356:	fa43 f606 	asrlt.w	r6, r3, r6
 801535a:	19a4      	addlt	r4, r4, r6
 801535c:	ea24 0407 	bic.w	r4, r4, r7
 8015360:	2500      	movs	r5, #0
 8015362:	e7e0      	b.n	8015326 <floor+0x46>
 8015364:	2e33      	cmp	r6, #51	; 0x33
 8015366:	dd0b      	ble.n	8015380 <floor+0xa0>
 8015368:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801536c:	d104      	bne.n	8015378 <floor+0x98>
 801536e:	ee10 2a10 	vmov	r2, s0
 8015372:	460b      	mov	r3, r1
 8015374:	f7ea ffa2 	bl	80002bc <__adddf3>
 8015378:	ec41 0b10 	vmov	d0, r0, r1
 801537c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015380:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015384:	f04f 33ff 	mov.w	r3, #4294967295
 8015388:	fa23 f707 	lsr.w	r7, r3, r7
 801538c:	4207      	tst	r7, r0
 801538e:	d0f3      	beq.n	8015378 <floor+0x98>
 8015390:	a30f      	add	r3, pc, #60	; (adr r3, 80153d0 <floor+0xf0>)
 8015392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015396:	f7ea ff91 	bl	80002bc <__adddf3>
 801539a:	2200      	movs	r2, #0
 801539c:	2300      	movs	r3, #0
 801539e:	f7eb fbd3 	bl	8000b48 <__aeabi_dcmpgt>
 80153a2:	2800      	cmp	r0, #0
 80153a4:	d0bf      	beq.n	8015326 <floor+0x46>
 80153a6:	2c00      	cmp	r4, #0
 80153a8:	da02      	bge.n	80153b0 <floor+0xd0>
 80153aa:	2e14      	cmp	r6, #20
 80153ac:	d103      	bne.n	80153b6 <floor+0xd6>
 80153ae:	3401      	adds	r4, #1
 80153b0:	ea25 0507 	bic.w	r5, r5, r7
 80153b4:	e7b7      	b.n	8015326 <floor+0x46>
 80153b6:	2301      	movs	r3, #1
 80153b8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80153bc:	fa03 f606 	lsl.w	r6, r3, r6
 80153c0:	4435      	add	r5, r6
 80153c2:	4545      	cmp	r5, r8
 80153c4:	bf38      	it	cc
 80153c6:	18e4      	addcc	r4, r4, r3
 80153c8:	e7f2      	b.n	80153b0 <floor+0xd0>
 80153ca:	2500      	movs	r5, #0
 80153cc:	462c      	mov	r4, r5
 80153ce:	e7aa      	b.n	8015326 <floor+0x46>
 80153d0:	8800759c 	.word	0x8800759c
 80153d4:	7e37e43c 	.word	0x7e37e43c
 80153d8:	bff00000 	.word	0xbff00000
 80153dc:	000fffff 	.word	0x000fffff

080153e0 <scalbn>:
 80153e0:	b570      	push	{r4, r5, r6, lr}
 80153e2:	ec55 4b10 	vmov	r4, r5, d0
 80153e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80153ea:	4606      	mov	r6, r0
 80153ec:	462b      	mov	r3, r5
 80153ee:	b99a      	cbnz	r2, 8015418 <scalbn+0x38>
 80153f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80153f4:	4323      	orrs	r3, r4
 80153f6:	d036      	beq.n	8015466 <scalbn+0x86>
 80153f8:	4b39      	ldr	r3, [pc, #228]	; (80154e0 <scalbn+0x100>)
 80153fa:	4629      	mov	r1, r5
 80153fc:	ee10 0a10 	vmov	r0, s0
 8015400:	2200      	movs	r2, #0
 8015402:	f7eb f911 	bl	8000628 <__aeabi_dmul>
 8015406:	4b37      	ldr	r3, [pc, #220]	; (80154e4 <scalbn+0x104>)
 8015408:	429e      	cmp	r6, r3
 801540a:	4604      	mov	r4, r0
 801540c:	460d      	mov	r5, r1
 801540e:	da10      	bge.n	8015432 <scalbn+0x52>
 8015410:	a32b      	add	r3, pc, #172	; (adr r3, 80154c0 <scalbn+0xe0>)
 8015412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015416:	e03a      	b.n	801548e <scalbn+0xae>
 8015418:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801541c:	428a      	cmp	r2, r1
 801541e:	d10c      	bne.n	801543a <scalbn+0x5a>
 8015420:	ee10 2a10 	vmov	r2, s0
 8015424:	4620      	mov	r0, r4
 8015426:	4629      	mov	r1, r5
 8015428:	f7ea ff48 	bl	80002bc <__adddf3>
 801542c:	4604      	mov	r4, r0
 801542e:	460d      	mov	r5, r1
 8015430:	e019      	b.n	8015466 <scalbn+0x86>
 8015432:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015436:	460b      	mov	r3, r1
 8015438:	3a36      	subs	r2, #54	; 0x36
 801543a:	4432      	add	r2, r6
 801543c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015440:	428a      	cmp	r2, r1
 8015442:	dd08      	ble.n	8015456 <scalbn+0x76>
 8015444:	2d00      	cmp	r5, #0
 8015446:	a120      	add	r1, pc, #128	; (adr r1, 80154c8 <scalbn+0xe8>)
 8015448:	e9d1 0100 	ldrd	r0, r1, [r1]
 801544c:	da1c      	bge.n	8015488 <scalbn+0xa8>
 801544e:	a120      	add	r1, pc, #128	; (adr r1, 80154d0 <scalbn+0xf0>)
 8015450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015454:	e018      	b.n	8015488 <scalbn+0xa8>
 8015456:	2a00      	cmp	r2, #0
 8015458:	dd08      	ble.n	801546c <scalbn+0x8c>
 801545a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801545e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015462:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015466:	ec45 4b10 	vmov	d0, r4, r5
 801546a:	bd70      	pop	{r4, r5, r6, pc}
 801546c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015470:	da19      	bge.n	80154a6 <scalbn+0xc6>
 8015472:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015476:	429e      	cmp	r6, r3
 8015478:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801547c:	dd0a      	ble.n	8015494 <scalbn+0xb4>
 801547e:	a112      	add	r1, pc, #72	; (adr r1, 80154c8 <scalbn+0xe8>)
 8015480:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d1e2      	bne.n	801544e <scalbn+0x6e>
 8015488:	a30f      	add	r3, pc, #60	; (adr r3, 80154c8 <scalbn+0xe8>)
 801548a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801548e:	f7eb f8cb 	bl	8000628 <__aeabi_dmul>
 8015492:	e7cb      	b.n	801542c <scalbn+0x4c>
 8015494:	a10a      	add	r1, pc, #40	; (adr r1, 80154c0 <scalbn+0xe0>)
 8015496:	e9d1 0100 	ldrd	r0, r1, [r1]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d0b8      	beq.n	8015410 <scalbn+0x30>
 801549e:	a10e      	add	r1, pc, #56	; (adr r1, 80154d8 <scalbn+0xf8>)
 80154a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154a4:	e7b4      	b.n	8015410 <scalbn+0x30>
 80154a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80154aa:	3236      	adds	r2, #54	; 0x36
 80154ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80154b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80154b4:	4620      	mov	r0, r4
 80154b6:	4b0c      	ldr	r3, [pc, #48]	; (80154e8 <scalbn+0x108>)
 80154b8:	2200      	movs	r2, #0
 80154ba:	e7e8      	b.n	801548e <scalbn+0xae>
 80154bc:	f3af 8000 	nop.w
 80154c0:	c2f8f359 	.word	0xc2f8f359
 80154c4:	01a56e1f 	.word	0x01a56e1f
 80154c8:	8800759c 	.word	0x8800759c
 80154cc:	7e37e43c 	.word	0x7e37e43c
 80154d0:	8800759c 	.word	0x8800759c
 80154d4:	fe37e43c 	.word	0xfe37e43c
 80154d8:	c2f8f359 	.word	0xc2f8f359
 80154dc:	81a56e1f 	.word	0x81a56e1f
 80154e0:	43500000 	.word	0x43500000
 80154e4:	ffff3cb0 	.word	0xffff3cb0
 80154e8:	3c900000 	.word	0x3c900000

080154ec <__errno>:
 80154ec:	4b01      	ldr	r3, [pc, #4]	; (80154f4 <__errno+0x8>)
 80154ee:	6818      	ldr	r0, [r3, #0]
 80154f0:	4770      	bx	lr
 80154f2:	bf00      	nop
 80154f4:	2000000c 	.word	0x2000000c

080154f8 <__libc_init_array>:
 80154f8:	b570      	push	{r4, r5, r6, lr}
 80154fa:	4d0d      	ldr	r5, [pc, #52]	; (8015530 <__libc_init_array+0x38>)
 80154fc:	4c0d      	ldr	r4, [pc, #52]	; (8015534 <__libc_init_array+0x3c>)
 80154fe:	1b64      	subs	r4, r4, r5
 8015500:	10a4      	asrs	r4, r4, #2
 8015502:	2600      	movs	r6, #0
 8015504:	42a6      	cmp	r6, r4
 8015506:	d109      	bne.n	801551c <__libc_init_array+0x24>
 8015508:	4d0b      	ldr	r5, [pc, #44]	; (8015538 <__libc_init_array+0x40>)
 801550a:	4c0c      	ldr	r4, [pc, #48]	; (801553c <__libc_init_array+0x44>)
 801550c:	f005 f8d6 	bl	801a6bc <_init>
 8015510:	1b64      	subs	r4, r4, r5
 8015512:	10a4      	asrs	r4, r4, #2
 8015514:	2600      	movs	r6, #0
 8015516:	42a6      	cmp	r6, r4
 8015518:	d105      	bne.n	8015526 <__libc_init_array+0x2e>
 801551a:	bd70      	pop	{r4, r5, r6, pc}
 801551c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015520:	4798      	blx	r3
 8015522:	3601      	adds	r6, #1
 8015524:	e7ee      	b.n	8015504 <__libc_init_array+0xc>
 8015526:	f855 3b04 	ldr.w	r3, [r5], #4
 801552a:	4798      	blx	r3
 801552c:	3601      	adds	r6, #1
 801552e:	e7f2      	b.n	8015516 <__libc_init_array+0x1e>
 8015530:	0801b464 	.word	0x0801b464
 8015534:	0801b464 	.word	0x0801b464
 8015538:	0801b464 	.word	0x0801b464
 801553c:	0801b46c 	.word	0x0801b46c

08015540 <memcpy>:
 8015540:	440a      	add	r2, r1
 8015542:	4291      	cmp	r1, r2
 8015544:	f100 33ff 	add.w	r3, r0, #4294967295
 8015548:	d100      	bne.n	801554c <memcpy+0xc>
 801554a:	4770      	bx	lr
 801554c:	b510      	push	{r4, lr}
 801554e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015552:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015556:	4291      	cmp	r1, r2
 8015558:	d1f9      	bne.n	801554e <memcpy+0xe>
 801555a:	bd10      	pop	{r4, pc}

0801555c <memset>:
 801555c:	4402      	add	r2, r0
 801555e:	4603      	mov	r3, r0
 8015560:	4293      	cmp	r3, r2
 8015562:	d100      	bne.n	8015566 <memset+0xa>
 8015564:	4770      	bx	lr
 8015566:	f803 1b01 	strb.w	r1, [r3], #1
 801556a:	e7f9      	b.n	8015560 <memset+0x4>

0801556c <__cvt>:
 801556c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015570:	ec55 4b10 	vmov	r4, r5, d0
 8015574:	2d00      	cmp	r5, #0
 8015576:	460e      	mov	r6, r1
 8015578:	4619      	mov	r1, r3
 801557a:	462b      	mov	r3, r5
 801557c:	bfbb      	ittet	lt
 801557e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015582:	461d      	movlt	r5, r3
 8015584:	2300      	movge	r3, #0
 8015586:	232d      	movlt	r3, #45	; 0x2d
 8015588:	700b      	strb	r3, [r1, #0]
 801558a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801558c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015590:	4691      	mov	r9, r2
 8015592:	f023 0820 	bic.w	r8, r3, #32
 8015596:	bfbc      	itt	lt
 8015598:	4622      	movlt	r2, r4
 801559a:	4614      	movlt	r4, r2
 801559c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80155a0:	d005      	beq.n	80155ae <__cvt+0x42>
 80155a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80155a6:	d100      	bne.n	80155aa <__cvt+0x3e>
 80155a8:	3601      	adds	r6, #1
 80155aa:	2102      	movs	r1, #2
 80155ac:	e000      	b.n	80155b0 <__cvt+0x44>
 80155ae:	2103      	movs	r1, #3
 80155b0:	ab03      	add	r3, sp, #12
 80155b2:	9301      	str	r3, [sp, #4]
 80155b4:	ab02      	add	r3, sp, #8
 80155b6:	9300      	str	r3, [sp, #0]
 80155b8:	ec45 4b10 	vmov	d0, r4, r5
 80155bc:	4653      	mov	r3, sl
 80155be:	4632      	mov	r2, r6
 80155c0:	f001 fe9a 	bl	80172f8 <_dtoa_r>
 80155c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80155c8:	4607      	mov	r7, r0
 80155ca:	d102      	bne.n	80155d2 <__cvt+0x66>
 80155cc:	f019 0f01 	tst.w	r9, #1
 80155d0:	d022      	beq.n	8015618 <__cvt+0xac>
 80155d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80155d6:	eb07 0906 	add.w	r9, r7, r6
 80155da:	d110      	bne.n	80155fe <__cvt+0x92>
 80155dc:	783b      	ldrb	r3, [r7, #0]
 80155de:	2b30      	cmp	r3, #48	; 0x30
 80155e0:	d10a      	bne.n	80155f8 <__cvt+0x8c>
 80155e2:	2200      	movs	r2, #0
 80155e4:	2300      	movs	r3, #0
 80155e6:	4620      	mov	r0, r4
 80155e8:	4629      	mov	r1, r5
 80155ea:	f7eb fa85 	bl	8000af8 <__aeabi_dcmpeq>
 80155ee:	b918      	cbnz	r0, 80155f8 <__cvt+0x8c>
 80155f0:	f1c6 0601 	rsb	r6, r6, #1
 80155f4:	f8ca 6000 	str.w	r6, [sl]
 80155f8:	f8da 3000 	ldr.w	r3, [sl]
 80155fc:	4499      	add	r9, r3
 80155fe:	2200      	movs	r2, #0
 8015600:	2300      	movs	r3, #0
 8015602:	4620      	mov	r0, r4
 8015604:	4629      	mov	r1, r5
 8015606:	f7eb fa77 	bl	8000af8 <__aeabi_dcmpeq>
 801560a:	b108      	cbz	r0, 8015610 <__cvt+0xa4>
 801560c:	f8cd 900c 	str.w	r9, [sp, #12]
 8015610:	2230      	movs	r2, #48	; 0x30
 8015612:	9b03      	ldr	r3, [sp, #12]
 8015614:	454b      	cmp	r3, r9
 8015616:	d307      	bcc.n	8015628 <__cvt+0xbc>
 8015618:	9b03      	ldr	r3, [sp, #12]
 801561a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801561c:	1bdb      	subs	r3, r3, r7
 801561e:	4638      	mov	r0, r7
 8015620:	6013      	str	r3, [r2, #0]
 8015622:	b004      	add	sp, #16
 8015624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015628:	1c59      	adds	r1, r3, #1
 801562a:	9103      	str	r1, [sp, #12]
 801562c:	701a      	strb	r2, [r3, #0]
 801562e:	e7f0      	b.n	8015612 <__cvt+0xa6>

08015630 <__exponent>:
 8015630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015632:	4603      	mov	r3, r0
 8015634:	2900      	cmp	r1, #0
 8015636:	bfb8      	it	lt
 8015638:	4249      	neglt	r1, r1
 801563a:	f803 2b02 	strb.w	r2, [r3], #2
 801563e:	bfb4      	ite	lt
 8015640:	222d      	movlt	r2, #45	; 0x2d
 8015642:	222b      	movge	r2, #43	; 0x2b
 8015644:	2909      	cmp	r1, #9
 8015646:	7042      	strb	r2, [r0, #1]
 8015648:	dd2a      	ble.n	80156a0 <__exponent+0x70>
 801564a:	f10d 0407 	add.w	r4, sp, #7
 801564e:	46a4      	mov	ip, r4
 8015650:	270a      	movs	r7, #10
 8015652:	46a6      	mov	lr, r4
 8015654:	460a      	mov	r2, r1
 8015656:	fb91 f6f7 	sdiv	r6, r1, r7
 801565a:	fb07 1516 	mls	r5, r7, r6, r1
 801565e:	3530      	adds	r5, #48	; 0x30
 8015660:	2a63      	cmp	r2, #99	; 0x63
 8015662:	f104 34ff 	add.w	r4, r4, #4294967295
 8015666:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801566a:	4631      	mov	r1, r6
 801566c:	dcf1      	bgt.n	8015652 <__exponent+0x22>
 801566e:	3130      	adds	r1, #48	; 0x30
 8015670:	f1ae 0502 	sub.w	r5, lr, #2
 8015674:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015678:	1c44      	adds	r4, r0, #1
 801567a:	4629      	mov	r1, r5
 801567c:	4561      	cmp	r1, ip
 801567e:	d30a      	bcc.n	8015696 <__exponent+0x66>
 8015680:	f10d 0209 	add.w	r2, sp, #9
 8015684:	eba2 020e 	sub.w	r2, r2, lr
 8015688:	4565      	cmp	r5, ip
 801568a:	bf88      	it	hi
 801568c:	2200      	movhi	r2, #0
 801568e:	4413      	add	r3, r2
 8015690:	1a18      	subs	r0, r3, r0
 8015692:	b003      	add	sp, #12
 8015694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015696:	f811 2b01 	ldrb.w	r2, [r1], #1
 801569a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801569e:	e7ed      	b.n	801567c <__exponent+0x4c>
 80156a0:	2330      	movs	r3, #48	; 0x30
 80156a2:	3130      	adds	r1, #48	; 0x30
 80156a4:	7083      	strb	r3, [r0, #2]
 80156a6:	70c1      	strb	r1, [r0, #3]
 80156a8:	1d03      	adds	r3, r0, #4
 80156aa:	e7f1      	b.n	8015690 <__exponent+0x60>

080156ac <_printf_float>:
 80156ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156b0:	ed2d 8b02 	vpush	{d8}
 80156b4:	b08d      	sub	sp, #52	; 0x34
 80156b6:	460c      	mov	r4, r1
 80156b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80156bc:	4616      	mov	r6, r2
 80156be:	461f      	mov	r7, r3
 80156c0:	4605      	mov	r5, r0
 80156c2:	f003 f869 	bl	8018798 <_localeconv_r>
 80156c6:	f8d0 a000 	ldr.w	sl, [r0]
 80156ca:	4650      	mov	r0, sl
 80156cc:	f7ea fd98 	bl	8000200 <strlen>
 80156d0:	2300      	movs	r3, #0
 80156d2:	930a      	str	r3, [sp, #40]	; 0x28
 80156d4:	6823      	ldr	r3, [r4, #0]
 80156d6:	9305      	str	r3, [sp, #20]
 80156d8:	f8d8 3000 	ldr.w	r3, [r8]
 80156dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80156e0:	3307      	adds	r3, #7
 80156e2:	f023 0307 	bic.w	r3, r3, #7
 80156e6:	f103 0208 	add.w	r2, r3, #8
 80156ea:	f8c8 2000 	str.w	r2, [r8]
 80156ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80156f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80156fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80156fe:	9307      	str	r3, [sp, #28]
 8015700:	f8cd 8018 	str.w	r8, [sp, #24]
 8015704:	ee08 0a10 	vmov	s16, r0
 8015708:	4b9f      	ldr	r3, [pc, #636]	; (8015988 <_printf_float+0x2dc>)
 801570a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801570e:	f04f 32ff 	mov.w	r2, #4294967295
 8015712:	f7eb fa23 	bl	8000b5c <__aeabi_dcmpun>
 8015716:	bb88      	cbnz	r0, 801577c <_printf_float+0xd0>
 8015718:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801571c:	4b9a      	ldr	r3, [pc, #616]	; (8015988 <_printf_float+0x2dc>)
 801571e:	f04f 32ff 	mov.w	r2, #4294967295
 8015722:	f7eb f9fd 	bl	8000b20 <__aeabi_dcmple>
 8015726:	bb48      	cbnz	r0, 801577c <_printf_float+0xd0>
 8015728:	2200      	movs	r2, #0
 801572a:	2300      	movs	r3, #0
 801572c:	4640      	mov	r0, r8
 801572e:	4649      	mov	r1, r9
 8015730:	f7eb f9ec 	bl	8000b0c <__aeabi_dcmplt>
 8015734:	b110      	cbz	r0, 801573c <_printf_float+0x90>
 8015736:	232d      	movs	r3, #45	; 0x2d
 8015738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801573c:	4b93      	ldr	r3, [pc, #588]	; (801598c <_printf_float+0x2e0>)
 801573e:	4894      	ldr	r0, [pc, #592]	; (8015990 <_printf_float+0x2e4>)
 8015740:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015744:	bf94      	ite	ls
 8015746:	4698      	movls	r8, r3
 8015748:	4680      	movhi	r8, r0
 801574a:	2303      	movs	r3, #3
 801574c:	6123      	str	r3, [r4, #16]
 801574e:	9b05      	ldr	r3, [sp, #20]
 8015750:	f023 0204 	bic.w	r2, r3, #4
 8015754:	6022      	str	r2, [r4, #0]
 8015756:	f04f 0900 	mov.w	r9, #0
 801575a:	9700      	str	r7, [sp, #0]
 801575c:	4633      	mov	r3, r6
 801575e:	aa0b      	add	r2, sp, #44	; 0x2c
 8015760:	4621      	mov	r1, r4
 8015762:	4628      	mov	r0, r5
 8015764:	f000 f9d8 	bl	8015b18 <_printf_common>
 8015768:	3001      	adds	r0, #1
 801576a:	f040 8090 	bne.w	801588e <_printf_float+0x1e2>
 801576e:	f04f 30ff 	mov.w	r0, #4294967295
 8015772:	b00d      	add	sp, #52	; 0x34
 8015774:	ecbd 8b02 	vpop	{d8}
 8015778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801577c:	4642      	mov	r2, r8
 801577e:	464b      	mov	r3, r9
 8015780:	4640      	mov	r0, r8
 8015782:	4649      	mov	r1, r9
 8015784:	f7eb f9ea 	bl	8000b5c <__aeabi_dcmpun>
 8015788:	b140      	cbz	r0, 801579c <_printf_float+0xf0>
 801578a:	464b      	mov	r3, r9
 801578c:	2b00      	cmp	r3, #0
 801578e:	bfbc      	itt	lt
 8015790:	232d      	movlt	r3, #45	; 0x2d
 8015792:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015796:	487f      	ldr	r0, [pc, #508]	; (8015994 <_printf_float+0x2e8>)
 8015798:	4b7f      	ldr	r3, [pc, #508]	; (8015998 <_printf_float+0x2ec>)
 801579a:	e7d1      	b.n	8015740 <_printf_float+0x94>
 801579c:	6863      	ldr	r3, [r4, #4]
 801579e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80157a2:	9206      	str	r2, [sp, #24]
 80157a4:	1c5a      	adds	r2, r3, #1
 80157a6:	d13f      	bne.n	8015828 <_printf_float+0x17c>
 80157a8:	2306      	movs	r3, #6
 80157aa:	6063      	str	r3, [r4, #4]
 80157ac:	9b05      	ldr	r3, [sp, #20]
 80157ae:	6861      	ldr	r1, [r4, #4]
 80157b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80157b4:	2300      	movs	r3, #0
 80157b6:	9303      	str	r3, [sp, #12]
 80157b8:	ab0a      	add	r3, sp, #40	; 0x28
 80157ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80157be:	ab09      	add	r3, sp, #36	; 0x24
 80157c0:	ec49 8b10 	vmov	d0, r8, r9
 80157c4:	9300      	str	r3, [sp, #0]
 80157c6:	6022      	str	r2, [r4, #0]
 80157c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80157cc:	4628      	mov	r0, r5
 80157ce:	f7ff fecd 	bl	801556c <__cvt>
 80157d2:	9b06      	ldr	r3, [sp, #24]
 80157d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80157d6:	2b47      	cmp	r3, #71	; 0x47
 80157d8:	4680      	mov	r8, r0
 80157da:	d108      	bne.n	80157ee <_printf_float+0x142>
 80157dc:	1cc8      	adds	r0, r1, #3
 80157de:	db02      	blt.n	80157e6 <_printf_float+0x13a>
 80157e0:	6863      	ldr	r3, [r4, #4]
 80157e2:	4299      	cmp	r1, r3
 80157e4:	dd41      	ble.n	801586a <_printf_float+0x1be>
 80157e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80157ea:	fa5f fb8b 	uxtb.w	fp, fp
 80157ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80157f2:	d820      	bhi.n	8015836 <_printf_float+0x18a>
 80157f4:	3901      	subs	r1, #1
 80157f6:	465a      	mov	r2, fp
 80157f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80157fc:	9109      	str	r1, [sp, #36]	; 0x24
 80157fe:	f7ff ff17 	bl	8015630 <__exponent>
 8015802:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015804:	1813      	adds	r3, r2, r0
 8015806:	2a01      	cmp	r2, #1
 8015808:	4681      	mov	r9, r0
 801580a:	6123      	str	r3, [r4, #16]
 801580c:	dc02      	bgt.n	8015814 <_printf_float+0x168>
 801580e:	6822      	ldr	r2, [r4, #0]
 8015810:	07d2      	lsls	r2, r2, #31
 8015812:	d501      	bpl.n	8015818 <_printf_float+0x16c>
 8015814:	3301      	adds	r3, #1
 8015816:	6123      	str	r3, [r4, #16]
 8015818:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801581c:	2b00      	cmp	r3, #0
 801581e:	d09c      	beq.n	801575a <_printf_float+0xae>
 8015820:	232d      	movs	r3, #45	; 0x2d
 8015822:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015826:	e798      	b.n	801575a <_printf_float+0xae>
 8015828:	9a06      	ldr	r2, [sp, #24]
 801582a:	2a47      	cmp	r2, #71	; 0x47
 801582c:	d1be      	bne.n	80157ac <_printf_float+0x100>
 801582e:	2b00      	cmp	r3, #0
 8015830:	d1bc      	bne.n	80157ac <_printf_float+0x100>
 8015832:	2301      	movs	r3, #1
 8015834:	e7b9      	b.n	80157aa <_printf_float+0xfe>
 8015836:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801583a:	d118      	bne.n	801586e <_printf_float+0x1c2>
 801583c:	2900      	cmp	r1, #0
 801583e:	6863      	ldr	r3, [r4, #4]
 8015840:	dd0b      	ble.n	801585a <_printf_float+0x1ae>
 8015842:	6121      	str	r1, [r4, #16]
 8015844:	b913      	cbnz	r3, 801584c <_printf_float+0x1a0>
 8015846:	6822      	ldr	r2, [r4, #0]
 8015848:	07d0      	lsls	r0, r2, #31
 801584a:	d502      	bpl.n	8015852 <_printf_float+0x1a6>
 801584c:	3301      	adds	r3, #1
 801584e:	440b      	add	r3, r1
 8015850:	6123      	str	r3, [r4, #16]
 8015852:	65a1      	str	r1, [r4, #88]	; 0x58
 8015854:	f04f 0900 	mov.w	r9, #0
 8015858:	e7de      	b.n	8015818 <_printf_float+0x16c>
 801585a:	b913      	cbnz	r3, 8015862 <_printf_float+0x1b6>
 801585c:	6822      	ldr	r2, [r4, #0]
 801585e:	07d2      	lsls	r2, r2, #31
 8015860:	d501      	bpl.n	8015866 <_printf_float+0x1ba>
 8015862:	3302      	adds	r3, #2
 8015864:	e7f4      	b.n	8015850 <_printf_float+0x1a4>
 8015866:	2301      	movs	r3, #1
 8015868:	e7f2      	b.n	8015850 <_printf_float+0x1a4>
 801586a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801586e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015870:	4299      	cmp	r1, r3
 8015872:	db05      	blt.n	8015880 <_printf_float+0x1d4>
 8015874:	6823      	ldr	r3, [r4, #0]
 8015876:	6121      	str	r1, [r4, #16]
 8015878:	07d8      	lsls	r0, r3, #31
 801587a:	d5ea      	bpl.n	8015852 <_printf_float+0x1a6>
 801587c:	1c4b      	adds	r3, r1, #1
 801587e:	e7e7      	b.n	8015850 <_printf_float+0x1a4>
 8015880:	2900      	cmp	r1, #0
 8015882:	bfd4      	ite	le
 8015884:	f1c1 0202 	rsble	r2, r1, #2
 8015888:	2201      	movgt	r2, #1
 801588a:	4413      	add	r3, r2
 801588c:	e7e0      	b.n	8015850 <_printf_float+0x1a4>
 801588e:	6823      	ldr	r3, [r4, #0]
 8015890:	055a      	lsls	r2, r3, #21
 8015892:	d407      	bmi.n	80158a4 <_printf_float+0x1f8>
 8015894:	6923      	ldr	r3, [r4, #16]
 8015896:	4642      	mov	r2, r8
 8015898:	4631      	mov	r1, r6
 801589a:	4628      	mov	r0, r5
 801589c:	47b8      	blx	r7
 801589e:	3001      	adds	r0, #1
 80158a0:	d12c      	bne.n	80158fc <_printf_float+0x250>
 80158a2:	e764      	b.n	801576e <_printf_float+0xc2>
 80158a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80158a8:	f240 80e0 	bls.w	8015a6c <_printf_float+0x3c0>
 80158ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80158b0:	2200      	movs	r2, #0
 80158b2:	2300      	movs	r3, #0
 80158b4:	f7eb f920 	bl	8000af8 <__aeabi_dcmpeq>
 80158b8:	2800      	cmp	r0, #0
 80158ba:	d034      	beq.n	8015926 <_printf_float+0x27a>
 80158bc:	4a37      	ldr	r2, [pc, #220]	; (801599c <_printf_float+0x2f0>)
 80158be:	2301      	movs	r3, #1
 80158c0:	4631      	mov	r1, r6
 80158c2:	4628      	mov	r0, r5
 80158c4:	47b8      	blx	r7
 80158c6:	3001      	adds	r0, #1
 80158c8:	f43f af51 	beq.w	801576e <_printf_float+0xc2>
 80158cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80158d0:	429a      	cmp	r2, r3
 80158d2:	db02      	blt.n	80158da <_printf_float+0x22e>
 80158d4:	6823      	ldr	r3, [r4, #0]
 80158d6:	07d8      	lsls	r0, r3, #31
 80158d8:	d510      	bpl.n	80158fc <_printf_float+0x250>
 80158da:	ee18 3a10 	vmov	r3, s16
 80158de:	4652      	mov	r2, sl
 80158e0:	4631      	mov	r1, r6
 80158e2:	4628      	mov	r0, r5
 80158e4:	47b8      	blx	r7
 80158e6:	3001      	adds	r0, #1
 80158e8:	f43f af41 	beq.w	801576e <_printf_float+0xc2>
 80158ec:	f04f 0800 	mov.w	r8, #0
 80158f0:	f104 091a 	add.w	r9, r4, #26
 80158f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158f6:	3b01      	subs	r3, #1
 80158f8:	4543      	cmp	r3, r8
 80158fa:	dc09      	bgt.n	8015910 <_printf_float+0x264>
 80158fc:	6823      	ldr	r3, [r4, #0]
 80158fe:	079b      	lsls	r3, r3, #30
 8015900:	f100 8105 	bmi.w	8015b0e <_printf_float+0x462>
 8015904:	68e0      	ldr	r0, [r4, #12]
 8015906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015908:	4298      	cmp	r0, r3
 801590a:	bfb8      	it	lt
 801590c:	4618      	movlt	r0, r3
 801590e:	e730      	b.n	8015772 <_printf_float+0xc6>
 8015910:	2301      	movs	r3, #1
 8015912:	464a      	mov	r2, r9
 8015914:	4631      	mov	r1, r6
 8015916:	4628      	mov	r0, r5
 8015918:	47b8      	blx	r7
 801591a:	3001      	adds	r0, #1
 801591c:	f43f af27 	beq.w	801576e <_printf_float+0xc2>
 8015920:	f108 0801 	add.w	r8, r8, #1
 8015924:	e7e6      	b.n	80158f4 <_printf_float+0x248>
 8015926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015928:	2b00      	cmp	r3, #0
 801592a:	dc39      	bgt.n	80159a0 <_printf_float+0x2f4>
 801592c:	4a1b      	ldr	r2, [pc, #108]	; (801599c <_printf_float+0x2f0>)
 801592e:	2301      	movs	r3, #1
 8015930:	4631      	mov	r1, r6
 8015932:	4628      	mov	r0, r5
 8015934:	47b8      	blx	r7
 8015936:	3001      	adds	r0, #1
 8015938:	f43f af19 	beq.w	801576e <_printf_float+0xc2>
 801593c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015940:	4313      	orrs	r3, r2
 8015942:	d102      	bne.n	801594a <_printf_float+0x29e>
 8015944:	6823      	ldr	r3, [r4, #0]
 8015946:	07d9      	lsls	r1, r3, #31
 8015948:	d5d8      	bpl.n	80158fc <_printf_float+0x250>
 801594a:	ee18 3a10 	vmov	r3, s16
 801594e:	4652      	mov	r2, sl
 8015950:	4631      	mov	r1, r6
 8015952:	4628      	mov	r0, r5
 8015954:	47b8      	blx	r7
 8015956:	3001      	adds	r0, #1
 8015958:	f43f af09 	beq.w	801576e <_printf_float+0xc2>
 801595c:	f04f 0900 	mov.w	r9, #0
 8015960:	f104 0a1a 	add.w	sl, r4, #26
 8015964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015966:	425b      	negs	r3, r3
 8015968:	454b      	cmp	r3, r9
 801596a:	dc01      	bgt.n	8015970 <_printf_float+0x2c4>
 801596c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801596e:	e792      	b.n	8015896 <_printf_float+0x1ea>
 8015970:	2301      	movs	r3, #1
 8015972:	4652      	mov	r2, sl
 8015974:	4631      	mov	r1, r6
 8015976:	4628      	mov	r0, r5
 8015978:	47b8      	blx	r7
 801597a:	3001      	adds	r0, #1
 801597c:	f43f aef7 	beq.w	801576e <_printf_float+0xc2>
 8015980:	f109 0901 	add.w	r9, r9, #1
 8015984:	e7ee      	b.n	8015964 <_printf_float+0x2b8>
 8015986:	bf00      	nop
 8015988:	7fefffff 	.word	0x7fefffff
 801598c:	0801af94 	.word	0x0801af94
 8015990:	0801af98 	.word	0x0801af98
 8015994:	0801afa0 	.word	0x0801afa0
 8015998:	0801af9c 	.word	0x0801af9c
 801599c:	0801b409 	.word	0x0801b409
 80159a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80159a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80159a4:	429a      	cmp	r2, r3
 80159a6:	bfa8      	it	ge
 80159a8:	461a      	movge	r2, r3
 80159aa:	2a00      	cmp	r2, #0
 80159ac:	4691      	mov	r9, r2
 80159ae:	dc37      	bgt.n	8015a20 <_printf_float+0x374>
 80159b0:	f04f 0b00 	mov.w	fp, #0
 80159b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80159b8:	f104 021a 	add.w	r2, r4, #26
 80159bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80159be:	9305      	str	r3, [sp, #20]
 80159c0:	eba3 0309 	sub.w	r3, r3, r9
 80159c4:	455b      	cmp	r3, fp
 80159c6:	dc33      	bgt.n	8015a30 <_printf_float+0x384>
 80159c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80159cc:	429a      	cmp	r2, r3
 80159ce:	db3b      	blt.n	8015a48 <_printf_float+0x39c>
 80159d0:	6823      	ldr	r3, [r4, #0]
 80159d2:	07da      	lsls	r2, r3, #31
 80159d4:	d438      	bmi.n	8015a48 <_printf_float+0x39c>
 80159d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80159d8:	9b05      	ldr	r3, [sp, #20]
 80159da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80159dc:	1ad3      	subs	r3, r2, r3
 80159de:	eba2 0901 	sub.w	r9, r2, r1
 80159e2:	4599      	cmp	r9, r3
 80159e4:	bfa8      	it	ge
 80159e6:	4699      	movge	r9, r3
 80159e8:	f1b9 0f00 	cmp.w	r9, #0
 80159ec:	dc35      	bgt.n	8015a5a <_printf_float+0x3ae>
 80159ee:	f04f 0800 	mov.w	r8, #0
 80159f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80159f6:	f104 0a1a 	add.w	sl, r4, #26
 80159fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80159fe:	1a9b      	subs	r3, r3, r2
 8015a00:	eba3 0309 	sub.w	r3, r3, r9
 8015a04:	4543      	cmp	r3, r8
 8015a06:	f77f af79 	ble.w	80158fc <_printf_float+0x250>
 8015a0a:	2301      	movs	r3, #1
 8015a0c:	4652      	mov	r2, sl
 8015a0e:	4631      	mov	r1, r6
 8015a10:	4628      	mov	r0, r5
 8015a12:	47b8      	blx	r7
 8015a14:	3001      	adds	r0, #1
 8015a16:	f43f aeaa 	beq.w	801576e <_printf_float+0xc2>
 8015a1a:	f108 0801 	add.w	r8, r8, #1
 8015a1e:	e7ec      	b.n	80159fa <_printf_float+0x34e>
 8015a20:	4613      	mov	r3, r2
 8015a22:	4631      	mov	r1, r6
 8015a24:	4642      	mov	r2, r8
 8015a26:	4628      	mov	r0, r5
 8015a28:	47b8      	blx	r7
 8015a2a:	3001      	adds	r0, #1
 8015a2c:	d1c0      	bne.n	80159b0 <_printf_float+0x304>
 8015a2e:	e69e      	b.n	801576e <_printf_float+0xc2>
 8015a30:	2301      	movs	r3, #1
 8015a32:	4631      	mov	r1, r6
 8015a34:	4628      	mov	r0, r5
 8015a36:	9205      	str	r2, [sp, #20]
 8015a38:	47b8      	blx	r7
 8015a3a:	3001      	adds	r0, #1
 8015a3c:	f43f ae97 	beq.w	801576e <_printf_float+0xc2>
 8015a40:	9a05      	ldr	r2, [sp, #20]
 8015a42:	f10b 0b01 	add.w	fp, fp, #1
 8015a46:	e7b9      	b.n	80159bc <_printf_float+0x310>
 8015a48:	ee18 3a10 	vmov	r3, s16
 8015a4c:	4652      	mov	r2, sl
 8015a4e:	4631      	mov	r1, r6
 8015a50:	4628      	mov	r0, r5
 8015a52:	47b8      	blx	r7
 8015a54:	3001      	adds	r0, #1
 8015a56:	d1be      	bne.n	80159d6 <_printf_float+0x32a>
 8015a58:	e689      	b.n	801576e <_printf_float+0xc2>
 8015a5a:	9a05      	ldr	r2, [sp, #20]
 8015a5c:	464b      	mov	r3, r9
 8015a5e:	4442      	add	r2, r8
 8015a60:	4631      	mov	r1, r6
 8015a62:	4628      	mov	r0, r5
 8015a64:	47b8      	blx	r7
 8015a66:	3001      	adds	r0, #1
 8015a68:	d1c1      	bne.n	80159ee <_printf_float+0x342>
 8015a6a:	e680      	b.n	801576e <_printf_float+0xc2>
 8015a6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a6e:	2a01      	cmp	r2, #1
 8015a70:	dc01      	bgt.n	8015a76 <_printf_float+0x3ca>
 8015a72:	07db      	lsls	r3, r3, #31
 8015a74:	d538      	bpl.n	8015ae8 <_printf_float+0x43c>
 8015a76:	2301      	movs	r3, #1
 8015a78:	4642      	mov	r2, r8
 8015a7a:	4631      	mov	r1, r6
 8015a7c:	4628      	mov	r0, r5
 8015a7e:	47b8      	blx	r7
 8015a80:	3001      	adds	r0, #1
 8015a82:	f43f ae74 	beq.w	801576e <_printf_float+0xc2>
 8015a86:	ee18 3a10 	vmov	r3, s16
 8015a8a:	4652      	mov	r2, sl
 8015a8c:	4631      	mov	r1, r6
 8015a8e:	4628      	mov	r0, r5
 8015a90:	47b8      	blx	r7
 8015a92:	3001      	adds	r0, #1
 8015a94:	f43f ae6b 	beq.w	801576e <_printf_float+0xc2>
 8015a98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015a9c:	2200      	movs	r2, #0
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	f7eb f82a 	bl	8000af8 <__aeabi_dcmpeq>
 8015aa4:	b9d8      	cbnz	r0, 8015ade <_printf_float+0x432>
 8015aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015aa8:	f108 0201 	add.w	r2, r8, #1
 8015aac:	3b01      	subs	r3, #1
 8015aae:	4631      	mov	r1, r6
 8015ab0:	4628      	mov	r0, r5
 8015ab2:	47b8      	blx	r7
 8015ab4:	3001      	adds	r0, #1
 8015ab6:	d10e      	bne.n	8015ad6 <_printf_float+0x42a>
 8015ab8:	e659      	b.n	801576e <_printf_float+0xc2>
 8015aba:	2301      	movs	r3, #1
 8015abc:	4652      	mov	r2, sl
 8015abe:	4631      	mov	r1, r6
 8015ac0:	4628      	mov	r0, r5
 8015ac2:	47b8      	blx	r7
 8015ac4:	3001      	adds	r0, #1
 8015ac6:	f43f ae52 	beq.w	801576e <_printf_float+0xc2>
 8015aca:	f108 0801 	add.w	r8, r8, #1
 8015ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ad0:	3b01      	subs	r3, #1
 8015ad2:	4543      	cmp	r3, r8
 8015ad4:	dcf1      	bgt.n	8015aba <_printf_float+0x40e>
 8015ad6:	464b      	mov	r3, r9
 8015ad8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015adc:	e6dc      	b.n	8015898 <_printf_float+0x1ec>
 8015ade:	f04f 0800 	mov.w	r8, #0
 8015ae2:	f104 0a1a 	add.w	sl, r4, #26
 8015ae6:	e7f2      	b.n	8015ace <_printf_float+0x422>
 8015ae8:	2301      	movs	r3, #1
 8015aea:	4642      	mov	r2, r8
 8015aec:	e7df      	b.n	8015aae <_printf_float+0x402>
 8015aee:	2301      	movs	r3, #1
 8015af0:	464a      	mov	r2, r9
 8015af2:	4631      	mov	r1, r6
 8015af4:	4628      	mov	r0, r5
 8015af6:	47b8      	blx	r7
 8015af8:	3001      	adds	r0, #1
 8015afa:	f43f ae38 	beq.w	801576e <_printf_float+0xc2>
 8015afe:	f108 0801 	add.w	r8, r8, #1
 8015b02:	68e3      	ldr	r3, [r4, #12]
 8015b04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015b06:	1a5b      	subs	r3, r3, r1
 8015b08:	4543      	cmp	r3, r8
 8015b0a:	dcf0      	bgt.n	8015aee <_printf_float+0x442>
 8015b0c:	e6fa      	b.n	8015904 <_printf_float+0x258>
 8015b0e:	f04f 0800 	mov.w	r8, #0
 8015b12:	f104 0919 	add.w	r9, r4, #25
 8015b16:	e7f4      	b.n	8015b02 <_printf_float+0x456>

08015b18 <_printf_common>:
 8015b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b1c:	4616      	mov	r6, r2
 8015b1e:	4699      	mov	r9, r3
 8015b20:	688a      	ldr	r2, [r1, #8]
 8015b22:	690b      	ldr	r3, [r1, #16]
 8015b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015b28:	4293      	cmp	r3, r2
 8015b2a:	bfb8      	it	lt
 8015b2c:	4613      	movlt	r3, r2
 8015b2e:	6033      	str	r3, [r6, #0]
 8015b30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015b34:	4607      	mov	r7, r0
 8015b36:	460c      	mov	r4, r1
 8015b38:	b10a      	cbz	r2, 8015b3e <_printf_common+0x26>
 8015b3a:	3301      	adds	r3, #1
 8015b3c:	6033      	str	r3, [r6, #0]
 8015b3e:	6823      	ldr	r3, [r4, #0]
 8015b40:	0699      	lsls	r1, r3, #26
 8015b42:	bf42      	ittt	mi
 8015b44:	6833      	ldrmi	r3, [r6, #0]
 8015b46:	3302      	addmi	r3, #2
 8015b48:	6033      	strmi	r3, [r6, #0]
 8015b4a:	6825      	ldr	r5, [r4, #0]
 8015b4c:	f015 0506 	ands.w	r5, r5, #6
 8015b50:	d106      	bne.n	8015b60 <_printf_common+0x48>
 8015b52:	f104 0a19 	add.w	sl, r4, #25
 8015b56:	68e3      	ldr	r3, [r4, #12]
 8015b58:	6832      	ldr	r2, [r6, #0]
 8015b5a:	1a9b      	subs	r3, r3, r2
 8015b5c:	42ab      	cmp	r3, r5
 8015b5e:	dc26      	bgt.n	8015bae <_printf_common+0x96>
 8015b60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015b64:	1e13      	subs	r3, r2, #0
 8015b66:	6822      	ldr	r2, [r4, #0]
 8015b68:	bf18      	it	ne
 8015b6a:	2301      	movne	r3, #1
 8015b6c:	0692      	lsls	r2, r2, #26
 8015b6e:	d42b      	bmi.n	8015bc8 <_printf_common+0xb0>
 8015b70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015b74:	4649      	mov	r1, r9
 8015b76:	4638      	mov	r0, r7
 8015b78:	47c0      	blx	r8
 8015b7a:	3001      	adds	r0, #1
 8015b7c:	d01e      	beq.n	8015bbc <_printf_common+0xa4>
 8015b7e:	6823      	ldr	r3, [r4, #0]
 8015b80:	68e5      	ldr	r5, [r4, #12]
 8015b82:	6832      	ldr	r2, [r6, #0]
 8015b84:	f003 0306 	and.w	r3, r3, #6
 8015b88:	2b04      	cmp	r3, #4
 8015b8a:	bf08      	it	eq
 8015b8c:	1aad      	subeq	r5, r5, r2
 8015b8e:	68a3      	ldr	r3, [r4, #8]
 8015b90:	6922      	ldr	r2, [r4, #16]
 8015b92:	bf0c      	ite	eq
 8015b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015b98:	2500      	movne	r5, #0
 8015b9a:	4293      	cmp	r3, r2
 8015b9c:	bfc4      	itt	gt
 8015b9e:	1a9b      	subgt	r3, r3, r2
 8015ba0:	18ed      	addgt	r5, r5, r3
 8015ba2:	2600      	movs	r6, #0
 8015ba4:	341a      	adds	r4, #26
 8015ba6:	42b5      	cmp	r5, r6
 8015ba8:	d11a      	bne.n	8015be0 <_printf_common+0xc8>
 8015baa:	2000      	movs	r0, #0
 8015bac:	e008      	b.n	8015bc0 <_printf_common+0xa8>
 8015bae:	2301      	movs	r3, #1
 8015bb0:	4652      	mov	r2, sl
 8015bb2:	4649      	mov	r1, r9
 8015bb4:	4638      	mov	r0, r7
 8015bb6:	47c0      	blx	r8
 8015bb8:	3001      	adds	r0, #1
 8015bba:	d103      	bne.n	8015bc4 <_printf_common+0xac>
 8015bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8015bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bc4:	3501      	adds	r5, #1
 8015bc6:	e7c6      	b.n	8015b56 <_printf_common+0x3e>
 8015bc8:	18e1      	adds	r1, r4, r3
 8015bca:	1c5a      	adds	r2, r3, #1
 8015bcc:	2030      	movs	r0, #48	; 0x30
 8015bce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015bd2:	4422      	add	r2, r4
 8015bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015bd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015bdc:	3302      	adds	r3, #2
 8015bde:	e7c7      	b.n	8015b70 <_printf_common+0x58>
 8015be0:	2301      	movs	r3, #1
 8015be2:	4622      	mov	r2, r4
 8015be4:	4649      	mov	r1, r9
 8015be6:	4638      	mov	r0, r7
 8015be8:	47c0      	blx	r8
 8015bea:	3001      	adds	r0, #1
 8015bec:	d0e6      	beq.n	8015bbc <_printf_common+0xa4>
 8015bee:	3601      	adds	r6, #1
 8015bf0:	e7d9      	b.n	8015ba6 <_printf_common+0x8e>
	...

08015bf4 <_printf_i>:
 8015bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015bf8:	460c      	mov	r4, r1
 8015bfa:	4691      	mov	r9, r2
 8015bfc:	7e27      	ldrb	r7, [r4, #24]
 8015bfe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015c00:	2f78      	cmp	r7, #120	; 0x78
 8015c02:	4680      	mov	r8, r0
 8015c04:	469a      	mov	sl, r3
 8015c06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015c0a:	d807      	bhi.n	8015c1c <_printf_i+0x28>
 8015c0c:	2f62      	cmp	r7, #98	; 0x62
 8015c0e:	d80a      	bhi.n	8015c26 <_printf_i+0x32>
 8015c10:	2f00      	cmp	r7, #0
 8015c12:	f000 80d8 	beq.w	8015dc6 <_printf_i+0x1d2>
 8015c16:	2f58      	cmp	r7, #88	; 0x58
 8015c18:	f000 80a3 	beq.w	8015d62 <_printf_i+0x16e>
 8015c1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015c20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015c24:	e03a      	b.n	8015c9c <_printf_i+0xa8>
 8015c26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015c2a:	2b15      	cmp	r3, #21
 8015c2c:	d8f6      	bhi.n	8015c1c <_printf_i+0x28>
 8015c2e:	a001      	add	r0, pc, #4	; (adr r0, 8015c34 <_printf_i+0x40>)
 8015c30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8015c34:	08015c8d 	.word	0x08015c8d
 8015c38:	08015ca1 	.word	0x08015ca1
 8015c3c:	08015c1d 	.word	0x08015c1d
 8015c40:	08015c1d 	.word	0x08015c1d
 8015c44:	08015c1d 	.word	0x08015c1d
 8015c48:	08015c1d 	.word	0x08015c1d
 8015c4c:	08015ca1 	.word	0x08015ca1
 8015c50:	08015c1d 	.word	0x08015c1d
 8015c54:	08015c1d 	.word	0x08015c1d
 8015c58:	08015c1d 	.word	0x08015c1d
 8015c5c:	08015c1d 	.word	0x08015c1d
 8015c60:	08015dad 	.word	0x08015dad
 8015c64:	08015cd1 	.word	0x08015cd1
 8015c68:	08015d8f 	.word	0x08015d8f
 8015c6c:	08015c1d 	.word	0x08015c1d
 8015c70:	08015c1d 	.word	0x08015c1d
 8015c74:	08015dcf 	.word	0x08015dcf
 8015c78:	08015c1d 	.word	0x08015c1d
 8015c7c:	08015cd1 	.word	0x08015cd1
 8015c80:	08015c1d 	.word	0x08015c1d
 8015c84:	08015c1d 	.word	0x08015c1d
 8015c88:	08015d97 	.word	0x08015d97
 8015c8c:	680b      	ldr	r3, [r1, #0]
 8015c8e:	1d1a      	adds	r2, r3, #4
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	600a      	str	r2, [r1, #0]
 8015c94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015c9c:	2301      	movs	r3, #1
 8015c9e:	e0a3      	b.n	8015de8 <_printf_i+0x1f4>
 8015ca0:	6825      	ldr	r5, [r4, #0]
 8015ca2:	6808      	ldr	r0, [r1, #0]
 8015ca4:	062e      	lsls	r6, r5, #24
 8015ca6:	f100 0304 	add.w	r3, r0, #4
 8015caa:	d50a      	bpl.n	8015cc2 <_printf_i+0xce>
 8015cac:	6805      	ldr	r5, [r0, #0]
 8015cae:	600b      	str	r3, [r1, #0]
 8015cb0:	2d00      	cmp	r5, #0
 8015cb2:	da03      	bge.n	8015cbc <_printf_i+0xc8>
 8015cb4:	232d      	movs	r3, #45	; 0x2d
 8015cb6:	426d      	negs	r5, r5
 8015cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015cbc:	485e      	ldr	r0, [pc, #376]	; (8015e38 <_printf_i+0x244>)
 8015cbe:	230a      	movs	r3, #10
 8015cc0:	e019      	b.n	8015cf6 <_printf_i+0x102>
 8015cc2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8015cc6:	6805      	ldr	r5, [r0, #0]
 8015cc8:	600b      	str	r3, [r1, #0]
 8015cca:	bf18      	it	ne
 8015ccc:	b22d      	sxthne	r5, r5
 8015cce:	e7ef      	b.n	8015cb0 <_printf_i+0xbc>
 8015cd0:	680b      	ldr	r3, [r1, #0]
 8015cd2:	6825      	ldr	r5, [r4, #0]
 8015cd4:	1d18      	adds	r0, r3, #4
 8015cd6:	6008      	str	r0, [r1, #0]
 8015cd8:	0628      	lsls	r0, r5, #24
 8015cda:	d501      	bpl.n	8015ce0 <_printf_i+0xec>
 8015cdc:	681d      	ldr	r5, [r3, #0]
 8015cde:	e002      	b.n	8015ce6 <_printf_i+0xf2>
 8015ce0:	0669      	lsls	r1, r5, #25
 8015ce2:	d5fb      	bpl.n	8015cdc <_printf_i+0xe8>
 8015ce4:	881d      	ldrh	r5, [r3, #0]
 8015ce6:	4854      	ldr	r0, [pc, #336]	; (8015e38 <_printf_i+0x244>)
 8015ce8:	2f6f      	cmp	r7, #111	; 0x6f
 8015cea:	bf0c      	ite	eq
 8015cec:	2308      	moveq	r3, #8
 8015cee:	230a      	movne	r3, #10
 8015cf0:	2100      	movs	r1, #0
 8015cf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015cf6:	6866      	ldr	r6, [r4, #4]
 8015cf8:	60a6      	str	r6, [r4, #8]
 8015cfa:	2e00      	cmp	r6, #0
 8015cfc:	bfa2      	ittt	ge
 8015cfe:	6821      	ldrge	r1, [r4, #0]
 8015d00:	f021 0104 	bicge.w	r1, r1, #4
 8015d04:	6021      	strge	r1, [r4, #0]
 8015d06:	b90d      	cbnz	r5, 8015d0c <_printf_i+0x118>
 8015d08:	2e00      	cmp	r6, #0
 8015d0a:	d04d      	beq.n	8015da8 <_printf_i+0x1b4>
 8015d0c:	4616      	mov	r6, r2
 8015d0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8015d12:	fb03 5711 	mls	r7, r3, r1, r5
 8015d16:	5dc7      	ldrb	r7, [r0, r7]
 8015d18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015d1c:	462f      	mov	r7, r5
 8015d1e:	42bb      	cmp	r3, r7
 8015d20:	460d      	mov	r5, r1
 8015d22:	d9f4      	bls.n	8015d0e <_printf_i+0x11a>
 8015d24:	2b08      	cmp	r3, #8
 8015d26:	d10b      	bne.n	8015d40 <_printf_i+0x14c>
 8015d28:	6823      	ldr	r3, [r4, #0]
 8015d2a:	07df      	lsls	r7, r3, #31
 8015d2c:	d508      	bpl.n	8015d40 <_printf_i+0x14c>
 8015d2e:	6923      	ldr	r3, [r4, #16]
 8015d30:	6861      	ldr	r1, [r4, #4]
 8015d32:	4299      	cmp	r1, r3
 8015d34:	bfde      	ittt	le
 8015d36:	2330      	movle	r3, #48	; 0x30
 8015d38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015d3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015d40:	1b92      	subs	r2, r2, r6
 8015d42:	6122      	str	r2, [r4, #16]
 8015d44:	f8cd a000 	str.w	sl, [sp]
 8015d48:	464b      	mov	r3, r9
 8015d4a:	aa03      	add	r2, sp, #12
 8015d4c:	4621      	mov	r1, r4
 8015d4e:	4640      	mov	r0, r8
 8015d50:	f7ff fee2 	bl	8015b18 <_printf_common>
 8015d54:	3001      	adds	r0, #1
 8015d56:	d14c      	bne.n	8015df2 <_printf_i+0x1fe>
 8015d58:	f04f 30ff 	mov.w	r0, #4294967295
 8015d5c:	b004      	add	sp, #16
 8015d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d62:	4835      	ldr	r0, [pc, #212]	; (8015e38 <_printf_i+0x244>)
 8015d64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015d68:	6823      	ldr	r3, [r4, #0]
 8015d6a:	680e      	ldr	r6, [r1, #0]
 8015d6c:	061f      	lsls	r7, r3, #24
 8015d6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8015d72:	600e      	str	r6, [r1, #0]
 8015d74:	d514      	bpl.n	8015da0 <_printf_i+0x1ac>
 8015d76:	07d9      	lsls	r1, r3, #31
 8015d78:	bf44      	itt	mi
 8015d7a:	f043 0320 	orrmi.w	r3, r3, #32
 8015d7e:	6023      	strmi	r3, [r4, #0]
 8015d80:	b91d      	cbnz	r5, 8015d8a <_printf_i+0x196>
 8015d82:	6823      	ldr	r3, [r4, #0]
 8015d84:	f023 0320 	bic.w	r3, r3, #32
 8015d88:	6023      	str	r3, [r4, #0]
 8015d8a:	2310      	movs	r3, #16
 8015d8c:	e7b0      	b.n	8015cf0 <_printf_i+0xfc>
 8015d8e:	6823      	ldr	r3, [r4, #0]
 8015d90:	f043 0320 	orr.w	r3, r3, #32
 8015d94:	6023      	str	r3, [r4, #0]
 8015d96:	2378      	movs	r3, #120	; 0x78
 8015d98:	4828      	ldr	r0, [pc, #160]	; (8015e3c <_printf_i+0x248>)
 8015d9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015d9e:	e7e3      	b.n	8015d68 <_printf_i+0x174>
 8015da0:	065e      	lsls	r6, r3, #25
 8015da2:	bf48      	it	mi
 8015da4:	b2ad      	uxthmi	r5, r5
 8015da6:	e7e6      	b.n	8015d76 <_printf_i+0x182>
 8015da8:	4616      	mov	r6, r2
 8015daa:	e7bb      	b.n	8015d24 <_printf_i+0x130>
 8015dac:	680b      	ldr	r3, [r1, #0]
 8015dae:	6826      	ldr	r6, [r4, #0]
 8015db0:	6960      	ldr	r0, [r4, #20]
 8015db2:	1d1d      	adds	r5, r3, #4
 8015db4:	600d      	str	r5, [r1, #0]
 8015db6:	0635      	lsls	r5, r6, #24
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	d501      	bpl.n	8015dc0 <_printf_i+0x1cc>
 8015dbc:	6018      	str	r0, [r3, #0]
 8015dbe:	e002      	b.n	8015dc6 <_printf_i+0x1d2>
 8015dc0:	0671      	lsls	r1, r6, #25
 8015dc2:	d5fb      	bpl.n	8015dbc <_printf_i+0x1c8>
 8015dc4:	8018      	strh	r0, [r3, #0]
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	6123      	str	r3, [r4, #16]
 8015dca:	4616      	mov	r6, r2
 8015dcc:	e7ba      	b.n	8015d44 <_printf_i+0x150>
 8015dce:	680b      	ldr	r3, [r1, #0]
 8015dd0:	1d1a      	adds	r2, r3, #4
 8015dd2:	600a      	str	r2, [r1, #0]
 8015dd4:	681e      	ldr	r6, [r3, #0]
 8015dd6:	6862      	ldr	r2, [r4, #4]
 8015dd8:	2100      	movs	r1, #0
 8015dda:	4630      	mov	r0, r6
 8015ddc:	f7ea fa18 	bl	8000210 <memchr>
 8015de0:	b108      	cbz	r0, 8015de6 <_printf_i+0x1f2>
 8015de2:	1b80      	subs	r0, r0, r6
 8015de4:	6060      	str	r0, [r4, #4]
 8015de6:	6863      	ldr	r3, [r4, #4]
 8015de8:	6123      	str	r3, [r4, #16]
 8015dea:	2300      	movs	r3, #0
 8015dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015df0:	e7a8      	b.n	8015d44 <_printf_i+0x150>
 8015df2:	6923      	ldr	r3, [r4, #16]
 8015df4:	4632      	mov	r2, r6
 8015df6:	4649      	mov	r1, r9
 8015df8:	4640      	mov	r0, r8
 8015dfa:	47d0      	blx	sl
 8015dfc:	3001      	adds	r0, #1
 8015dfe:	d0ab      	beq.n	8015d58 <_printf_i+0x164>
 8015e00:	6823      	ldr	r3, [r4, #0]
 8015e02:	079b      	lsls	r3, r3, #30
 8015e04:	d413      	bmi.n	8015e2e <_printf_i+0x23a>
 8015e06:	68e0      	ldr	r0, [r4, #12]
 8015e08:	9b03      	ldr	r3, [sp, #12]
 8015e0a:	4298      	cmp	r0, r3
 8015e0c:	bfb8      	it	lt
 8015e0e:	4618      	movlt	r0, r3
 8015e10:	e7a4      	b.n	8015d5c <_printf_i+0x168>
 8015e12:	2301      	movs	r3, #1
 8015e14:	4632      	mov	r2, r6
 8015e16:	4649      	mov	r1, r9
 8015e18:	4640      	mov	r0, r8
 8015e1a:	47d0      	blx	sl
 8015e1c:	3001      	adds	r0, #1
 8015e1e:	d09b      	beq.n	8015d58 <_printf_i+0x164>
 8015e20:	3501      	adds	r5, #1
 8015e22:	68e3      	ldr	r3, [r4, #12]
 8015e24:	9903      	ldr	r1, [sp, #12]
 8015e26:	1a5b      	subs	r3, r3, r1
 8015e28:	42ab      	cmp	r3, r5
 8015e2a:	dcf2      	bgt.n	8015e12 <_printf_i+0x21e>
 8015e2c:	e7eb      	b.n	8015e06 <_printf_i+0x212>
 8015e2e:	2500      	movs	r5, #0
 8015e30:	f104 0619 	add.w	r6, r4, #25
 8015e34:	e7f5      	b.n	8015e22 <_printf_i+0x22e>
 8015e36:	bf00      	nop
 8015e38:	0801afa4 	.word	0x0801afa4
 8015e3c:	0801afb5 	.word	0x0801afb5

08015e40 <_scanf_float>:
 8015e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e44:	b087      	sub	sp, #28
 8015e46:	4617      	mov	r7, r2
 8015e48:	9303      	str	r3, [sp, #12]
 8015e4a:	688b      	ldr	r3, [r1, #8]
 8015e4c:	1e5a      	subs	r2, r3, #1
 8015e4e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015e52:	bf83      	ittte	hi
 8015e54:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015e58:	195b      	addhi	r3, r3, r5
 8015e5a:	9302      	strhi	r3, [sp, #8]
 8015e5c:	2300      	movls	r3, #0
 8015e5e:	bf86      	itte	hi
 8015e60:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015e64:	608b      	strhi	r3, [r1, #8]
 8015e66:	9302      	strls	r3, [sp, #8]
 8015e68:	680b      	ldr	r3, [r1, #0]
 8015e6a:	468b      	mov	fp, r1
 8015e6c:	2500      	movs	r5, #0
 8015e6e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015e72:	f84b 3b1c 	str.w	r3, [fp], #28
 8015e76:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015e7a:	4680      	mov	r8, r0
 8015e7c:	460c      	mov	r4, r1
 8015e7e:	465e      	mov	r6, fp
 8015e80:	46aa      	mov	sl, r5
 8015e82:	46a9      	mov	r9, r5
 8015e84:	9501      	str	r5, [sp, #4]
 8015e86:	68a2      	ldr	r2, [r4, #8]
 8015e88:	b152      	cbz	r2, 8015ea0 <_scanf_float+0x60>
 8015e8a:	683b      	ldr	r3, [r7, #0]
 8015e8c:	781b      	ldrb	r3, [r3, #0]
 8015e8e:	2b4e      	cmp	r3, #78	; 0x4e
 8015e90:	d864      	bhi.n	8015f5c <_scanf_float+0x11c>
 8015e92:	2b40      	cmp	r3, #64	; 0x40
 8015e94:	d83c      	bhi.n	8015f10 <_scanf_float+0xd0>
 8015e96:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8015e9a:	b2c8      	uxtb	r0, r1
 8015e9c:	280e      	cmp	r0, #14
 8015e9e:	d93a      	bls.n	8015f16 <_scanf_float+0xd6>
 8015ea0:	f1b9 0f00 	cmp.w	r9, #0
 8015ea4:	d003      	beq.n	8015eae <_scanf_float+0x6e>
 8015ea6:	6823      	ldr	r3, [r4, #0]
 8015ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015eac:	6023      	str	r3, [r4, #0]
 8015eae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015eb2:	f1ba 0f01 	cmp.w	sl, #1
 8015eb6:	f200 8113 	bhi.w	80160e0 <_scanf_float+0x2a0>
 8015eba:	455e      	cmp	r6, fp
 8015ebc:	f200 8105 	bhi.w	80160ca <_scanf_float+0x28a>
 8015ec0:	2501      	movs	r5, #1
 8015ec2:	4628      	mov	r0, r5
 8015ec4:	b007      	add	sp, #28
 8015ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015eca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8015ece:	2a0d      	cmp	r2, #13
 8015ed0:	d8e6      	bhi.n	8015ea0 <_scanf_float+0x60>
 8015ed2:	a101      	add	r1, pc, #4	; (adr r1, 8015ed8 <_scanf_float+0x98>)
 8015ed4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015ed8:	08016017 	.word	0x08016017
 8015edc:	08015ea1 	.word	0x08015ea1
 8015ee0:	08015ea1 	.word	0x08015ea1
 8015ee4:	08015ea1 	.word	0x08015ea1
 8015ee8:	08016077 	.word	0x08016077
 8015eec:	0801604f 	.word	0x0801604f
 8015ef0:	08015ea1 	.word	0x08015ea1
 8015ef4:	08015ea1 	.word	0x08015ea1
 8015ef8:	08016025 	.word	0x08016025
 8015efc:	08015ea1 	.word	0x08015ea1
 8015f00:	08015ea1 	.word	0x08015ea1
 8015f04:	08015ea1 	.word	0x08015ea1
 8015f08:	08015ea1 	.word	0x08015ea1
 8015f0c:	08015fdd 	.word	0x08015fdd
 8015f10:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8015f14:	e7db      	b.n	8015ece <_scanf_float+0x8e>
 8015f16:	290e      	cmp	r1, #14
 8015f18:	d8c2      	bhi.n	8015ea0 <_scanf_float+0x60>
 8015f1a:	a001      	add	r0, pc, #4	; (adr r0, 8015f20 <_scanf_float+0xe0>)
 8015f1c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8015f20:	08015fcf 	.word	0x08015fcf
 8015f24:	08015ea1 	.word	0x08015ea1
 8015f28:	08015fcf 	.word	0x08015fcf
 8015f2c:	08016063 	.word	0x08016063
 8015f30:	08015ea1 	.word	0x08015ea1
 8015f34:	08015f7d 	.word	0x08015f7d
 8015f38:	08015fb9 	.word	0x08015fb9
 8015f3c:	08015fb9 	.word	0x08015fb9
 8015f40:	08015fb9 	.word	0x08015fb9
 8015f44:	08015fb9 	.word	0x08015fb9
 8015f48:	08015fb9 	.word	0x08015fb9
 8015f4c:	08015fb9 	.word	0x08015fb9
 8015f50:	08015fb9 	.word	0x08015fb9
 8015f54:	08015fb9 	.word	0x08015fb9
 8015f58:	08015fb9 	.word	0x08015fb9
 8015f5c:	2b6e      	cmp	r3, #110	; 0x6e
 8015f5e:	d809      	bhi.n	8015f74 <_scanf_float+0x134>
 8015f60:	2b60      	cmp	r3, #96	; 0x60
 8015f62:	d8b2      	bhi.n	8015eca <_scanf_float+0x8a>
 8015f64:	2b54      	cmp	r3, #84	; 0x54
 8015f66:	d077      	beq.n	8016058 <_scanf_float+0x218>
 8015f68:	2b59      	cmp	r3, #89	; 0x59
 8015f6a:	d199      	bne.n	8015ea0 <_scanf_float+0x60>
 8015f6c:	2d07      	cmp	r5, #7
 8015f6e:	d197      	bne.n	8015ea0 <_scanf_float+0x60>
 8015f70:	2508      	movs	r5, #8
 8015f72:	e029      	b.n	8015fc8 <_scanf_float+0x188>
 8015f74:	2b74      	cmp	r3, #116	; 0x74
 8015f76:	d06f      	beq.n	8016058 <_scanf_float+0x218>
 8015f78:	2b79      	cmp	r3, #121	; 0x79
 8015f7a:	e7f6      	b.n	8015f6a <_scanf_float+0x12a>
 8015f7c:	6821      	ldr	r1, [r4, #0]
 8015f7e:	05c8      	lsls	r0, r1, #23
 8015f80:	d51a      	bpl.n	8015fb8 <_scanf_float+0x178>
 8015f82:	9b02      	ldr	r3, [sp, #8]
 8015f84:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015f88:	6021      	str	r1, [r4, #0]
 8015f8a:	f109 0901 	add.w	r9, r9, #1
 8015f8e:	b11b      	cbz	r3, 8015f98 <_scanf_float+0x158>
 8015f90:	3b01      	subs	r3, #1
 8015f92:	3201      	adds	r2, #1
 8015f94:	9302      	str	r3, [sp, #8]
 8015f96:	60a2      	str	r2, [r4, #8]
 8015f98:	68a3      	ldr	r3, [r4, #8]
 8015f9a:	3b01      	subs	r3, #1
 8015f9c:	60a3      	str	r3, [r4, #8]
 8015f9e:	6923      	ldr	r3, [r4, #16]
 8015fa0:	3301      	adds	r3, #1
 8015fa2:	6123      	str	r3, [r4, #16]
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	3b01      	subs	r3, #1
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	607b      	str	r3, [r7, #4]
 8015fac:	f340 8084 	ble.w	80160b8 <_scanf_float+0x278>
 8015fb0:	683b      	ldr	r3, [r7, #0]
 8015fb2:	3301      	adds	r3, #1
 8015fb4:	603b      	str	r3, [r7, #0]
 8015fb6:	e766      	b.n	8015e86 <_scanf_float+0x46>
 8015fb8:	eb1a 0f05 	cmn.w	sl, r5
 8015fbc:	f47f af70 	bne.w	8015ea0 <_scanf_float+0x60>
 8015fc0:	6822      	ldr	r2, [r4, #0]
 8015fc2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8015fc6:	6022      	str	r2, [r4, #0]
 8015fc8:	f806 3b01 	strb.w	r3, [r6], #1
 8015fcc:	e7e4      	b.n	8015f98 <_scanf_float+0x158>
 8015fce:	6822      	ldr	r2, [r4, #0]
 8015fd0:	0610      	lsls	r0, r2, #24
 8015fd2:	f57f af65 	bpl.w	8015ea0 <_scanf_float+0x60>
 8015fd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015fda:	e7f4      	b.n	8015fc6 <_scanf_float+0x186>
 8015fdc:	f1ba 0f00 	cmp.w	sl, #0
 8015fe0:	d10e      	bne.n	8016000 <_scanf_float+0x1c0>
 8015fe2:	f1b9 0f00 	cmp.w	r9, #0
 8015fe6:	d10e      	bne.n	8016006 <_scanf_float+0x1c6>
 8015fe8:	6822      	ldr	r2, [r4, #0]
 8015fea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8015fee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8015ff2:	d108      	bne.n	8016006 <_scanf_float+0x1c6>
 8015ff4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015ff8:	6022      	str	r2, [r4, #0]
 8015ffa:	f04f 0a01 	mov.w	sl, #1
 8015ffe:	e7e3      	b.n	8015fc8 <_scanf_float+0x188>
 8016000:	f1ba 0f02 	cmp.w	sl, #2
 8016004:	d055      	beq.n	80160b2 <_scanf_float+0x272>
 8016006:	2d01      	cmp	r5, #1
 8016008:	d002      	beq.n	8016010 <_scanf_float+0x1d0>
 801600a:	2d04      	cmp	r5, #4
 801600c:	f47f af48 	bne.w	8015ea0 <_scanf_float+0x60>
 8016010:	3501      	adds	r5, #1
 8016012:	b2ed      	uxtb	r5, r5
 8016014:	e7d8      	b.n	8015fc8 <_scanf_float+0x188>
 8016016:	f1ba 0f01 	cmp.w	sl, #1
 801601a:	f47f af41 	bne.w	8015ea0 <_scanf_float+0x60>
 801601e:	f04f 0a02 	mov.w	sl, #2
 8016022:	e7d1      	b.n	8015fc8 <_scanf_float+0x188>
 8016024:	b97d      	cbnz	r5, 8016046 <_scanf_float+0x206>
 8016026:	f1b9 0f00 	cmp.w	r9, #0
 801602a:	f47f af3c 	bne.w	8015ea6 <_scanf_float+0x66>
 801602e:	6822      	ldr	r2, [r4, #0]
 8016030:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016034:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016038:	f47f af39 	bne.w	8015eae <_scanf_float+0x6e>
 801603c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016040:	6022      	str	r2, [r4, #0]
 8016042:	2501      	movs	r5, #1
 8016044:	e7c0      	b.n	8015fc8 <_scanf_float+0x188>
 8016046:	2d03      	cmp	r5, #3
 8016048:	d0e2      	beq.n	8016010 <_scanf_float+0x1d0>
 801604a:	2d05      	cmp	r5, #5
 801604c:	e7de      	b.n	801600c <_scanf_float+0x1cc>
 801604e:	2d02      	cmp	r5, #2
 8016050:	f47f af26 	bne.w	8015ea0 <_scanf_float+0x60>
 8016054:	2503      	movs	r5, #3
 8016056:	e7b7      	b.n	8015fc8 <_scanf_float+0x188>
 8016058:	2d06      	cmp	r5, #6
 801605a:	f47f af21 	bne.w	8015ea0 <_scanf_float+0x60>
 801605e:	2507      	movs	r5, #7
 8016060:	e7b2      	b.n	8015fc8 <_scanf_float+0x188>
 8016062:	6822      	ldr	r2, [r4, #0]
 8016064:	0591      	lsls	r1, r2, #22
 8016066:	f57f af1b 	bpl.w	8015ea0 <_scanf_float+0x60>
 801606a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801606e:	6022      	str	r2, [r4, #0]
 8016070:	f8cd 9004 	str.w	r9, [sp, #4]
 8016074:	e7a8      	b.n	8015fc8 <_scanf_float+0x188>
 8016076:	6822      	ldr	r2, [r4, #0]
 8016078:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801607c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016080:	d006      	beq.n	8016090 <_scanf_float+0x250>
 8016082:	0550      	lsls	r0, r2, #21
 8016084:	f57f af0c 	bpl.w	8015ea0 <_scanf_float+0x60>
 8016088:	f1b9 0f00 	cmp.w	r9, #0
 801608c:	f43f af0f 	beq.w	8015eae <_scanf_float+0x6e>
 8016090:	0591      	lsls	r1, r2, #22
 8016092:	bf58      	it	pl
 8016094:	9901      	ldrpl	r1, [sp, #4]
 8016096:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801609a:	bf58      	it	pl
 801609c:	eba9 0101 	subpl.w	r1, r9, r1
 80160a0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80160a4:	bf58      	it	pl
 80160a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80160aa:	6022      	str	r2, [r4, #0]
 80160ac:	f04f 0900 	mov.w	r9, #0
 80160b0:	e78a      	b.n	8015fc8 <_scanf_float+0x188>
 80160b2:	f04f 0a03 	mov.w	sl, #3
 80160b6:	e787      	b.n	8015fc8 <_scanf_float+0x188>
 80160b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80160bc:	4639      	mov	r1, r7
 80160be:	4640      	mov	r0, r8
 80160c0:	4798      	blx	r3
 80160c2:	2800      	cmp	r0, #0
 80160c4:	f43f aedf 	beq.w	8015e86 <_scanf_float+0x46>
 80160c8:	e6ea      	b.n	8015ea0 <_scanf_float+0x60>
 80160ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80160ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80160d2:	463a      	mov	r2, r7
 80160d4:	4640      	mov	r0, r8
 80160d6:	4798      	blx	r3
 80160d8:	6923      	ldr	r3, [r4, #16]
 80160da:	3b01      	subs	r3, #1
 80160dc:	6123      	str	r3, [r4, #16]
 80160de:	e6ec      	b.n	8015eba <_scanf_float+0x7a>
 80160e0:	1e6b      	subs	r3, r5, #1
 80160e2:	2b06      	cmp	r3, #6
 80160e4:	d825      	bhi.n	8016132 <_scanf_float+0x2f2>
 80160e6:	2d02      	cmp	r5, #2
 80160e8:	d836      	bhi.n	8016158 <_scanf_float+0x318>
 80160ea:	455e      	cmp	r6, fp
 80160ec:	f67f aee8 	bls.w	8015ec0 <_scanf_float+0x80>
 80160f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80160f4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80160f8:	463a      	mov	r2, r7
 80160fa:	4640      	mov	r0, r8
 80160fc:	4798      	blx	r3
 80160fe:	6923      	ldr	r3, [r4, #16]
 8016100:	3b01      	subs	r3, #1
 8016102:	6123      	str	r3, [r4, #16]
 8016104:	e7f1      	b.n	80160ea <_scanf_float+0x2aa>
 8016106:	9802      	ldr	r0, [sp, #8]
 8016108:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801610c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016110:	9002      	str	r0, [sp, #8]
 8016112:	463a      	mov	r2, r7
 8016114:	4640      	mov	r0, r8
 8016116:	4798      	blx	r3
 8016118:	6923      	ldr	r3, [r4, #16]
 801611a:	3b01      	subs	r3, #1
 801611c:	6123      	str	r3, [r4, #16]
 801611e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016122:	fa5f fa8a 	uxtb.w	sl, sl
 8016126:	f1ba 0f02 	cmp.w	sl, #2
 801612a:	d1ec      	bne.n	8016106 <_scanf_float+0x2c6>
 801612c:	3d03      	subs	r5, #3
 801612e:	b2ed      	uxtb	r5, r5
 8016130:	1b76      	subs	r6, r6, r5
 8016132:	6823      	ldr	r3, [r4, #0]
 8016134:	05da      	lsls	r2, r3, #23
 8016136:	d52f      	bpl.n	8016198 <_scanf_float+0x358>
 8016138:	055b      	lsls	r3, r3, #21
 801613a:	d510      	bpl.n	801615e <_scanf_float+0x31e>
 801613c:	455e      	cmp	r6, fp
 801613e:	f67f aebf 	bls.w	8015ec0 <_scanf_float+0x80>
 8016142:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016146:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801614a:	463a      	mov	r2, r7
 801614c:	4640      	mov	r0, r8
 801614e:	4798      	blx	r3
 8016150:	6923      	ldr	r3, [r4, #16]
 8016152:	3b01      	subs	r3, #1
 8016154:	6123      	str	r3, [r4, #16]
 8016156:	e7f1      	b.n	801613c <_scanf_float+0x2fc>
 8016158:	46aa      	mov	sl, r5
 801615a:	9602      	str	r6, [sp, #8]
 801615c:	e7df      	b.n	801611e <_scanf_float+0x2de>
 801615e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016162:	6923      	ldr	r3, [r4, #16]
 8016164:	2965      	cmp	r1, #101	; 0x65
 8016166:	f103 33ff 	add.w	r3, r3, #4294967295
 801616a:	f106 35ff 	add.w	r5, r6, #4294967295
 801616e:	6123      	str	r3, [r4, #16]
 8016170:	d00c      	beq.n	801618c <_scanf_float+0x34c>
 8016172:	2945      	cmp	r1, #69	; 0x45
 8016174:	d00a      	beq.n	801618c <_scanf_float+0x34c>
 8016176:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801617a:	463a      	mov	r2, r7
 801617c:	4640      	mov	r0, r8
 801617e:	4798      	blx	r3
 8016180:	6923      	ldr	r3, [r4, #16]
 8016182:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016186:	3b01      	subs	r3, #1
 8016188:	1eb5      	subs	r5, r6, #2
 801618a:	6123      	str	r3, [r4, #16]
 801618c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016190:	463a      	mov	r2, r7
 8016192:	4640      	mov	r0, r8
 8016194:	4798      	blx	r3
 8016196:	462e      	mov	r6, r5
 8016198:	6825      	ldr	r5, [r4, #0]
 801619a:	f015 0510 	ands.w	r5, r5, #16
 801619e:	d158      	bne.n	8016252 <_scanf_float+0x412>
 80161a0:	7035      	strb	r5, [r6, #0]
 80161a2:	6823      	ldr	r3, [r4, #0]
 80161a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80161a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80161ac:	d11c      	bne.n	80161e8 <_scanf_float+0x3a8>
 80161ae:	9b01      	ldr	r3, [sp, #4]
 80161b0:	454b      	cmp	r3, r9
 80161b2:	eba3 0209 	sub.w	r2, r3, r9
 80161b6:	d124      	bne.n	8016202 <_scanf_float+0x3c2>
 80161b8:	2200      	movs	r2, #0
 80161ba:	4659      	mov	r1, fp
 80161bc:	4640      	mov	r0, r8
 80161be:	f000 ff41 	bl	8017044 <_strtod_r>
 80161c2:	9b03      	ldr	r3, [sp, #12]
 80161c4:	6821      	ldr	r1, [r4, #0]
 80161c6:	681b      	ldr	r3, [r3, #0]
 80161c8:	f011 0f02 	tst.w	r1, #2
 80161cc:	ec57 6b10 	vmov	r6, r7, d0
 80161d0:	f103 0204 	add.w	r2, r3, #4
 80161d4:	d020      	beq.n	8016218 <_scanf_float+0x3d8>
 80161d6:	9903      	ldr	r1, [sp, #12]
 80161d8:	600a      	str	r2, [r1, #0]
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	e9c3 6700 	strd	r6, r7, [r3]
 80161e0:	68e3      	ldr	r3, [r4, #12]
 80161e2:	3301      	adds	r3, #1
 80161e4:	60e3      	str	r3, [r4, #12]
 80161e6:	e66c      	b.n	8015ec2 <_scanf_float+0x82>
 80161e8:	9b04      	ldr	r3, [sp, #16]
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d0e4      	beq.n	80161b8 <_scanf_float+0x378>
 80161ee:	9905      	ldr	r1, [sp, #20]
 80161f0:	230a      	movs	r3, #10
 80161f2:	462a      	mov	r2, r5
 80161f4:	3101      	adds	r1, #1
 80161f6:	4640      	mov	r0, r8
 80161f8:	f000 ffae 	bl	8017158 <_strtol_r>
 80161fc:	9b04      	ldr	r3, [sp, #16]
 80161fe:	9e05      	ldr	r6, [sp, #20]
 8016200:	1ac2      	subs	r2, r0, r3
 8016202:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016206:	429e      	cmp	r6, r3
 8016208:	bf28      	it	cs
 801620a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801620e:	4912      	ldr	r1, [pc, #72]	; (8016258 <_scanf_float+0x418>)
 8016210:	4630      	mov	r0, r6
 8016212:	f000 f85f 	bl	80162d4 <siprintf>
 8016216:	e7cf      	b.n	80161b8 <_scanf_float+0x378>
 8016218:	f011 0f04 	tst.w	r1, #4
 801621c:	9903      	ldr	r1, [sp, #12]
 801621e:	600a      	str	r2, [r1, #0]
 8016220:	d1db      	bne.n	80161da <_scanf_float+0x39a>
 8016222:	f8d3 8000 	ldr.w	r8, [r3]
 8016226:	ee10 2a10 	vmov	r2, s0
 801622a:	ee10 0a10 	vmov	r0, s0
 801622e:	463b      	mov	r3, r7
 8016230:	4639      	mov	r1, r7
 8016232:	f7ea fc93 	bl	8000b5c <__aeabi_dcmpun>
 8016236:	b128      	cbz	r0, 8016244 <_scanf_float+0x404>
 8016238:	4808      	ldr	r0, [pc, #32]	; (801625c <_scanf_float+0x41c>)
 801623a:	f000 f811 	bl	8016260 <nanf>
 801623e:	ed88 0a00 	vstr	s0, [r8]
 8016242:	e7cd      	b.n	80161e0 <_scanf_float+0x3a0>
 8016244:	4630      	mov	r0, r6
 8016246:	4639      	mov	r1, r7
 8016248:	f7ea fce6 	bl	8000c18 <__aeabi_d2f>
 801624c:	f8c8 0000 	str.w	r0, [r8]
 8016250:	e7c6      	b.n	80161e0 <_scanf_float+0x3a0>
 8016252:	2500      	movs	r5, #0
 8016254:	e635      	b.n	8015ec2 <_scanf_float+0x82>
 8016256:	bf00      	nop
 8016258:	0801afc6 	.word	0x0801afc6
 801625c:	0801b45b 	.word	0x0801b45b

08016260 <nanf>:
 8016260:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016268 <nanf+0x8>
 8016264:	4770      	bx	lr
 8016266:	bf00      	nop
 8016268:	7fc00000 	.word	0x7fc00000

0801626c <sniprintf>:
 801626c:	b40c      	push	{r2, r3}
 801626e:	b530      	push	{r4, r5, lr}
 8016270:	4b17      	ldr	r3, [pc, #92]	; (80162d0 <sniprintf+0x64>)
 8016272:	1e0c      	subs	r4, r1, #0
 8016274:	681d      	ldr	r5, [r3, #0]
 8016276:	b09d      	sub	sp, #116	; 0x74
 8016278:	da08      	bge.n	801628c <sniprintf+0x20>
 801627a:	238b      	movs	r3, #139	; 0x8b
 801627c:	602b      	str	r3, [r5, #0]
 801627e:	f04f 30ff 	mov.w	r0, #4294967295
 8016282:	b01d      	add	sp, #116	; 0x74
 8016284:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016288:	b002      	add	sp, #8
 801628a:	4770      	bx	lr
 801628c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016290:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016294:	bf14      	ite	ne
 8016296:	f104 33ff 	addne.w	r3, r4, #4294967295
 801629a:	4623      	moveq	r3, r4
 801629c:	9304      	str	r3, [sp, #16]
 801629e:	9307      	str	r3, [sp, #28]
 80162a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80162a4:	9002      	str	r0, [sp, #8]
 80162a6:	9006      	str	r0, [sp, #24]
 80162a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80162ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80162ae:	ab21      	add	r3, sp, #132	; 0x84
 80162b0:	a902      	add	r1, sp, #8
 80162b2:	4628      	mov	r0, r5
 80162b4:	9301      	str	r3, [sp, #4]
 80162b6:	f003 f873 	bl	80193a0 <_svfiprintf_r>
 80162ba:	1c43      	adds	r3, r0, #1
 80162bc:	bfbc      	itt	lt
 80162be:	238b      	movlt	r3, #139	; 0x8b
 80162c0:	602b      	strlt	r3, [r5, #0]
 80162c2:	2c00      	cmp	r4, #0
 80162c4:	d0dd      	beq.n	8016282 <sniprintf+0x16>
 80162c6:	9b02      	ldr	r3, [sp, #8]
 80162c8:	2200      	movs	r2, #0
 80162ca:	701a      	strb	r2, [r3, #0]
 80162cc:	e7d9      	b.n	8016282 <sniprintf+0x16>
 80162ce:	bf00      	nop
 80162d0:	2000000c 	.word	0x2000000c

080162d4 <siprintf>:
 80162d4:	b40e      	push	{r1, r2, r3}
 80162d6:	b500      	push	{lr}
 80162d8:	b09c      	sub	sp, #112	; 0x70
 80162da:	ab1d      	add	r3, sp, #116	; 0x74
 80162dc:	9002      	str	r0, [sp, #8]
 80162de:	9006      	str	r0, [sp, #24]
 80162e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80162e4:	4809      	ldr	r0, [pc, #36]	; (801630c <siprintf+0x38>)
 80162e6:	9107      	str	r1, [sp, #28]
 80162e8:	9104      	str	r1, [sp, #16]
 80162ea:	4909      	ldr	r1, [pc, #36]	; (8016310 <siprintf+0x3c>)
 80162ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80162f0:	9105      	str	r1, [sp, #20]
 80162f2:	6800      	ldr	r0, [r0, #0]
 80162f4:	9301      	str	r3, [sp, #4]
 80162f6:	a902      	add	r1, sp, #8
 80162f8:	f003 f852 	bl	80193a0 <_svfiprintf_r>
 80162fc:	9b02      	ldr	r3, [sp, #8]
 80162fe:	2200      	movs	r2, #0
 8016300:	701a      	strb	r2, [r3, #0]
 8016302:	b01c      	add	sp, #112	; 0x70
 8016304:	f85d eb04 	ldr.w	lr, [sp], #4
 8016308:	b003      	add	sp, #12
 801630a:	4770      	bx	lr
 801630c:	2000000c 	.word	0x2000000c
 8016310:	ffff0208 	.word	0xffff0208

08016314 <siscanf>:
 8016314:	b40e      	push	{r1, r2, r3}
 8016316:	b510      	push	{r4, lr}
 8016318:	b09f      	sub	sp, #124	; 0x7c
 801631a:	ac21      	add	r4, sp, #132	; 0x84
 801631c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8016320:	f854 2b04 	ldr.w	r2, [r4], #4
 8016324:	9201      	str	r2, [sp, #4]
 8016326:	f8ad 101c 	strh.w	r1, [sp, #28]
 801632a:	9004      	str	r0, [sp, #16]
 801632c:	9008      	str	r0, [sp, #32]
 801632e:	f7e9 ff67 	bl	8000200 <strlen>
 8016332:	4b0c      	ldr	r3, [pc, #48]	; (8016364 <siscanf+0x50>)
 8016334:	9005      	str	r0, [sp, #20]
 8016336:	9009      	str	r0, [sp, #36]	; 0x24
 8016338:	930d      	str	r3, [sp, #52]	; 0x34
 801633a:	480b      	ldr	r0, [pc, #44]	; (8016368 <siscanf+0x54>)
 801633c:	9a01      	ldr	r2, [sp, #4]
 801633e:	6800      	ldr	r0, [r0, #0]
 8016340:	9403      	str	r4, [sp, #12]
 8016342:	2300      	movs	r3, #0
 8016344:	9311      	str	r3, [sp, #68]	; 0x44
 8016346:	9316      	str	r3, [sp, #88]	; 0x58
 8016348:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801634c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016350:	a904      	add	r1, sp, #16
 8016352:	4623      	mov	r3, r4
 8016354:	f003 f97e 	bl	8019654 <__ssvfiscanf_r>
 8016358:	b01f      	add	sp, #124	; 0x7c
 801635a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801635e:	b003      	add	sp, #12
 8016360:	4770      	bx	lr
 8016362:	bf00      	nop
 8016364:	0801638f 	.word	0x0801638f
 8016368:	2000000c 	.word	0x2000000c

0801636c <__sread>:
 801636c:	b510      	push	{r4, lr}
 801636e:	460c      	mov	r4, r1
 8016370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016374:	f003 fd8c 	bl	8019e90 <_read_r>
 8016378:	2800      	cmp	r0, #0
 801637a:	bfab      	itete	ge
 801637c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801637e:	89a3      	ldrhlt	r3, [r4, #12]
 8016380:	181b      	addge	r3, r3, r0
 8016382:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016386:	bfac      	ite	ge
 8016388:	6563      	strge	r3, [r4, #84]	; 0x54
 801638a:	81a3      	strhlt	r3, [r4, #12]
 801638c:	bd10      	pop	{r4, pc}

0801638e <__seofread>:
 801638e:	2000      	movs	r0, #0
 8016390:	4770      	bx	lr

08016392 <__swrite>:
 8016392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016396:	461f      	mov	r7, r3
 8016398:	898b      	ldrh	r3, [r1, #12]
 801639a:	05db      	lsls	r3, r3, #23
 801639c:	4605      	mov	r5, r0
 801639e:	460c      	mov	r4, r1
 80163a0:	4616      	mov	r6, r2
 80163a2:	d505      	bpl.n	80163b0 <__swrite+0x1e>
 80163a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163a8:	2302      	movs	r3, #2
 80163aa:	2200      	movs	r2, #0
 80163ac:	f002 f9fc 	bl	80187a8 <_lseek_r>
 80163b0:	89a3      	ldrh	r3, [r4, #12]
 80163b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80163b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80163ba:	81a3      	strh	r3, [r4, #12]
 80163bc:	4632      	mov	r2, r6
 80163be:	463b      	mov	r3, r7
 80163c0:	4628      	mov	r0, r5
 80163c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80163c6:	f000 bee9 	b.w	801719c <_write_r>

080163ca <__sseek>:
 80163ca:	b510      	push	{r4, lr}
 80163cc:	460c      	mov	r4, r1
 80163ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163d2:	f002 f9e9 	bl	80187a8 <_lseek_r>
 80163d6:	1c43      	adds	r3, r0, #1
 80163d8:	89a3      	ldrh	r3, [r4, #12]
 80163da:	bf15      	itete	ne
 80163dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80163de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80163e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80163e6:	81a3      	strheq	r3, [r4, #12]
 80163e8:	bf18      	it	ne
 80163ea:	81a3      	strhne	r3, [r4, #12]
 80163ec:	bd10      	pop	{r4, pc}

080163ee <__sclose>:
 80163ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163f2:	f000 bee5 	b.w	80171c0 <_close_r>

080163f6 <sulp>:
 80163f6:	b570      	push	{r4, r5, r6, lr}
 80163f8:	4604      	mov	r4, r0
 80163fa:	460d      	mov	r5, r1
 80163fc:	ec45 4b10 	vmov	d0, r4, r5
 8016400:	4616      	mov	r6, r2
 8016402:	f002 fd69 	bl	8018ed8 <__ulp>
 8016406:	ec51 0b10 	vmov	r0, r1, d0
 801640a:	b17e      	cbz	r6, 801642c <sulp+0x36>
 801640c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016410:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016414:	2b00      	cmp	r3, #0
 8016416:	dd09      	ble.n	801642c <sulp+0x36>
 8016418:	051b      	lsls	r3, r3, #20
 801641a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801641e:	2400      	movs	r4, #0
 8016420:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016424:	4622      	mov	r2, r4
 8016426:	462b      	mov	r3, r5
 8016428:	f7ea f8fe 	bl	8000628 <__aeabi_dmul>
 801642c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016430 <_strtod_l>:
 8016430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016434:	b0a3      	sub	sp, #140	; 0x8c
 8016436:	461f      	mov	r7, r3
 8016438:	2300      	movs	r3, #0
 801643a:	931e      	str	r3, [sp, #120]	; 0x78
 801643c:	4ba4      	ldr	r3, [pc, #656]	; (80166d0 <_strtod_l+0x2a0>)
 801643e:	9219      	str	r2, [sp, #100]	; 0x64
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	9307      	str	r3, [sp, #28]
 8016444:	4604      	mov	r4, r0
 8016446:	4618      	mov	r0, r3
 8016448:	4688      	mov	r8, r1
 801644a:	f7e9 fed9 	bl	8000200 <strlen>
 801644e:	f04f 0a00 	mov.w	sl, #0
 8016452:	4605      	mov	r5, r0
 8016454:	f04f 0b00 	mov.w	fp, #0
 8016458:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801645c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801645e:	781a      	ldrb	r2, [r3, #0]
 8016460:	2a2b      	cmp	r2, #43	; 0x2b
 8016462:	d04c      	beq.n	80164fe <_strtod_l+0xce>
 8016464:	d839      	bhi.n	80164da <_strtod_l+0xaa>
 8016466:	2a0d      	cmp	r2, #13
 8016468:	d832      	bhi.n	80164d0 <_strtod_l+0xa0>
 801646a:	2a08      	cmp	r2, #8
 801646c:	d832      	bhi.n	80164d4 <_strtod_l+0xa4>
 801646e:	2a00      	cmp	r2, #0
 8016470:	d03c      	beq.n	80164ec <_strtod_l+0xbc>
 8016472:	2300      	movs	r3, #0
 8016474:	930e      	str	r3, [sp, #56]	; 0x38
 8016476:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016478:	7833      	ldrb	r3, [r6, #0]
 801647a:	2b30      	cmp	r3, #48	; 0x30
 801647c:	f040 80b4 	bne.w	80165e8 <_strtod_l+0x1b8>
 8016480:	7873      	ldrb	r3, [r6, #1]
 8016482:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016486:	2b58      	cmp	r3, #88	; 0x58
 8016488:	d16c      	bne.n	8016564 <_strtod_l+0x134>
 801648a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801648c:	9301      	str	r3, [sp, #4]
 801648e:	ab1e      	add	r3, sp, #120	; 0x78
 8016490:	9702      	str	r7, [sp, #8]
 8016492:	9300      	str	r3, [sp, #0]
 8016494:	4a8f      	ldr	r2, [pc, #572]	; (80166d4 <_strtod_l+0x2a4>)
 8016496:	ab1f      	add	r3, sp, #124	; 0x7c
 8016498:	a91d      	add	r1, sp, #116	; 0x74
 801649a:	4620      	mov	r0, r4
 801649c:	f001 fe74 	bl	8018188 <__gethex>
 80164a0:	f010 0707 	ands.w	r7, r0, #7
 80164a4:	4605      	mov	r5, r0
 80164a6:	d005      	beq.n	80164b4 <_strtod_l+0x84>
 80164a8:	2f06      	cmp	r7, #6
 80164aa:	d12a      	bne.n	8016502 <_strtod_l+0xd2>
 80164ac:	3601      	adds	r6, #1
 80164ae:	2300      	movs	r3, #0
 80164b0:	961d      	str	r6, [sp, #116]	; 0x74
 80164b2:	930e      	str	r3, [sp, #56]	; 0x38
 80164b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	f040 8596 	bne.w	8016fe8 <_strtod_l+0xbb8>
 80164bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164be:	b1db      	cbz	r3, 80164f8 <_strtod_l+0xc8>
 80164c0:	4652      	mov	r2, sl
 80164c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80164c6:	ec43 2b10 	vmov	d0, r2, r3
 80164ca:	b023      	add	sp, #140	; 0x8c
 80164cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164d0:	2a20      	cmp	r2, #32
 80164d2:	d1ce      	bne.n	8016472 <_strtod_l+0x42>
 80164d4:	3301      	adds	r3, #1
 80164d6:	931d      	str	r3, [sp, #116]	; 0x74
 80164d8:	e7c0      	b.n	801645c <_strtod_l+0x2c>
 80164da:	2a2d      	cmp	r2, #45	; 0x2d
 80164dc:	d1c9      	bne.n	8016472 <_strtod_l+0x42>
 80164de:	2201      	movs	r2, #1
 80164e0:	920e      	str	r2, [sp, #56]	; 0x38
 80164e2:	1c5a      	adds	r2, r3, #1
 80164e4:	921d      	str	r2, [sp, #116]	; 0x74
 80164e6:	785b      	ldrb	r3, [r3, #1]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d1c4      	bne.n	8016476 <_strtod_l+0x46>
 80164ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80164ee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	f040 8576 	bne.w	8016fe4 <_strtod_l+0xbb4>
 80164f8:	4652      	mov	r2, sl
 80164fa:	465b      	mov	r3, fp
 80164fc:	e7e3      	b.n	80164c6 <_strtod_l+0x96>
 80164fe:	2200      	movs	r2, #0
 8016500:	e7ee      	b.n	80164e0 <_strtod_l+0xb0>
 8016502:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016504:	b13a      	cbz	r2, 8016516 <_strtod_l+0xe6>
 8016506:	2135      	movs	r1, #53	; 0x35
 8016508:	a820      	add	r0, sp, #128	; 0x80
 801650a:	f002 fdf0 	bl	80190ee <__copybits>
 801650e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016510:	4620      	mov	r0, r4
 8016512:	f002 f9b5 	bl	8018880 <_Bfree>
 8016516:	3f01      	subs	r7, #1
 8016518:	2f05      	cmp	r7, #5
 801651a:	d807      	bhi.n	801652c <_strtod_l+0xfc>
 801651c:	e8df f007 	tbb	[pc, r7]
 8016520:	1d180b0e 	.word	0x1d180b0e
 8016524:	030e      	.short	0x030e
 8016526:	f04f 0b00 	mov.w	fp, #0
 801652a:	46da      	mov	sl, fp
 801652c:	0728      	lsls	r0, r5, #28
 801652e:	d5c1      	bpl.n	80164b4 <_strtod_l+0x84>
 8016530:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016534:	e7be      	b.n	80164b4 <_strtod_l+0x84>
 8016536:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801653a:	e7f7      	b.n	801652c <_strtod_l+0xfc>
 801653c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8016540:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016542:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016546:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801654a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801654e:	e7ed      	b.n	801652c <_strtod_l+0xfc>
 8016550:	f8df b184 	ldr.w	fp, [pc, #388]	; 80166d8 <_strtod_l+0x2a8>
 8016554:	f04f 0a00 	mov.w	sl, #0
 8016558:	e7e8      	b.n	801652c <_strtod_l+0xfc>
 801655a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801655e:	f04f 3aff 	mov.w	sl, #4294967295
 8016562:	e7e3      	b.n	801652c <_strtod_l+0xfc>
 8016564:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016566:	1c5a      	adds	r2, r3, #1
 8016568:	921d      	str	r2, [sp, #116]	; 0x74
 801656a:	785b      	ldrb	r3, [r3, #1]
 801656c:	2b30      	cmp	r3, #48	; 0x30
 801656e:	d0f9      	beq.n	8016564 <_strtod_l+0x134>
 8016570:	2b00      	cmp	r3, #0
 8016572:	d09f      	beq.n	80164b4 <_strtod_l+0x84>
 8016574:	2301      	movs	r3, #1
 8016576:	f04f 0900 	mov.w	r9, #0
 801657a:	9304      	str	r3, [sp, #16]
 801657c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801657e:	930a      	str	r3, [sp, #40]	; 0x28
 8016580:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8016584:	464f      	mov	r7, r9
 8016586:	220a      	movs	r2, #10
 8016588:	981d      	ldr	r0, [sp, #116]	; 0x74
 801658a:	7806      	ldrb	r6, [r0, #0]
 801658c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8016590:	b2d9      	uxtb	r1, r3
 8016592:	2909      	cmp	r1, #9
 8016594:	d92a      	bls.n	80165ec <_strtod_l+0x1bc>
 8016596:	9907      	ldr	r1, [sp, #28]
 8016598:	462a      	mov	r2, r5
 801659a:	f003 fcdf 	bl	8019f5c <strncmp>
 801659e:	b398      	cbz	r0, 8016608 <_strtod_l+0x1d8>
 80165a0:	2000      	movs	r0, #0
 80165a2:	4633      	mov	r3, r6
 80165a4:	463d      	mov	r5, r7
 80165a6:	9007      	str	r0, [sp, #28]
 80165a8:	4602      	mov	r2, r0
 80165aa:	2b65      	cmp	r3, #101	; 0x65
 80165ac:	d001      	beq.n	80165b2 <_strtod_l+0x182>
 80165ae:	2b45      	cmp	r3, #69	; 0x45
 80165b0:	d118      	bne.n	80165e4 <_strtod_l+0x1b4>
 80165b2:	b91d      	cbnz	r5, 80165bc <_strtod_l+0x18c>
 80165b4:	9b04      	ldr	r3, [sp, #16]
 80165b6:	4303      	orrs	r3, r0
 80165b8:	d098      	beq.n	80164ec <_strtod_l+0xbc>
 80165ba:	2500      	movs	r5, #0
 80165bc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80165c0:	f108 0301 	add.w	r3, r8, #1
 80165c4:	931d      	str	r3, [sp, #116]	; 0x74
 80165c6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80165ca:	2b2b      	cmp	r3, #43	; 0x2b
 80165cc:	d075      	beq.n	80166ba <_strtod_l+0x28a>
 80165ce:	2b2d      	cmp	r3, #45	; 0x2d
 80165d0:	d07b      	beq.n	80166ca <_strtod_l+0x29a>
 80165d2:	f04f 0c00 	mov.w	ip, #0
 80165d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80165da:	2909      	cmp	r1, #9
 80165dc:	f240 8082 	bls.w	80166e4 <_strtod_l+0x2b4>
 80165e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80165e4:	2600      	movs	r6, #0
 80165e6:	e09d      	b.n	8016724 <_strtod_l+0x2f4>
 80165e8:	2300      	movs	r3, #0
 80165ea:	e7c4      	b.n	8016576 <_strtod_l+0x146>
 80165ec:	2f08      	cmp	r7, #8
 80165ee:	bfd8      	it	le
 80165f0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80165f2:	f100 0001 	add.w	r0, r0, #1
 80165f6:	bfda      	itte	le
 80165f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80165fc:	9309      	strle	r3, [sp, #36]	; 0x24
 80165fe:	fb02 3909 	mlagt	r9, r2, r9, r3
 8016602:	3701      	adds	r7, #1
 8016604:	901d      	str	r0, [sp, #116]	; 0x74
 8016606:	e7bf      	b.n	8016588 <_strtod_l+0x158>
 8016608:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801660a:	195a      	adds	r2, r3, r5
 801660c:	921d      	str	r2, [sp, #116]	; 0x74
 801660e:	5d5b      	ldrb	r3, [r3, r5]
 8016610:	2f00      	cmp	r7, #0
 8016612:	d037      	beq.n	8016684 <_strtod_l+0x254>
 8016614:	9007      	str	r0, [sp, #28]
 8016616:	463d      	mov	r5, r7
 8016618:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801661c:	2a09      	cmp	r2, #9
 801661e:	d912      	bls.n	8016646 <_strtod_l+0x216>
 8016620:	2201      	movs	r2, #1
 8016622:	e7c2      	b.n	80165aa <_strtod_l+0x17a>
 8016624:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016626:	1c5a      	adds	r2, r3, #1
 8016628:	921d      	str	r2, [sp, #116]	; 0x74
 801662a:	785b      	ldrb	r3, [r3, #1]
 801662c:	3001      	adds	r0, #1
 801662e:	2b30      	cmp	r3, #48	; 0x30
 8016630:	d0f8      	beq.n	8016624 <_strtod_l+0x1f4>
 8016632:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016636:	2a08      	cmp	r2, #8
 8016638:	f200 84db 	bhi.w	8016ff2 <_strtod_l+0xbc2>
 801663c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801663e:	9007      	str	r0, [sp, #28]
 8016640:	2000      	movs	r0, #0
 8016642:	920a      	str	r2, [sp, #40]	; 0x28
 8016644:	4605      	mov	r5, r0
 8016646:	3b30      	subs	r3, #48	; 0x30
 8016648:	f100 0201 	add.w	r2, r0, #1
 801664c:	d014      	beq.n	8016678 <_strtod_l+0x248>
 801664e:	9907      	ldr	r1, [sp, #28]
 8016650:	4411      	add	r1, r2
 8016652:	9107      	str	r1, [sp, #28]
 8016654:	462a      	mov	r2, r5
 8016656:	eb00 0e05 	add.w	lr, r0, r5
 801665a:	210a      	movs	r1, #10
 801665c:	4572      	cmp	r2, lr
 801665e:	d113      	bne.n	8016688 <_strtod_l+0x258>
 8016660:	182a      	adds	r2, r5, r0
 8016662:	2a08      	cmp	r2, #8
 8016664:	f105 0501 	add.w	r5, r5, #1
 8016668:	4405      	add	r5, r0
 801666a:	dc1c      	bgt.n	80166a6 <_strtod_l+0x276>
 801666c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801666e:	220a      	movs	r2, #10
 8016670:	fb02 3301 	mla	r3, r2, r1, r3
 8016674:	9309      	str	r3, [sp, #36]	; 0x24
 8016676:	2200      	movs	r2, #0
 8016678:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801667a:	1c59      	adds	r1, r3, #1
 801667c:	911d      	str	r1, [sp, #116]	; 0x74
 801667e:	785b      	ldrb	r3, [r3, #1]
 8016680:	4610      	mov	r0, r2
 8016682:	e7c9      	b.n	8016618 <_strtod_l+0x1e8>
 8016684:	4638      	mov	r0, r7
 8016686:	e7d2      	b.n	801662e <_strtod_l+0x1fe>
 8016688:	2a08      	cmp	r2, #8
 801668a:	dc04      	bgt.n	8016696 <_strtod_l+0x266>
 801668c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801668e:	434e      	muls	r6, r1
 8016690:	9609      	str	r6, [sp, #36]	; 0x24
 8016692:	3201      	adds	r2, #1
 8016694:	e7e2      	b.n	801665c <_strtod_l+0x22c>
 8016696:	f102 0c01 	add.w	ip, r2, #1
 801669a:	f1bc 0f10 	cmp.w	ip, #16
 801669e:	bfd8      	it	le
 80166a0:	fb01 f909 	mulle.w	r9, r1, r9
 80166a4:	e7f5      	b.n	8016692 <_strtod_l+0x262>
 80166a6:	2d10      	cmp	r5, #16
 80166a8:	bfdc      	itt	le
 80166aa:	220a      	movle	r2, #10
 80166ac:	fb02 3909 	mlale	r9, r2, r9, r3
 80166b0:	e7e1      	b.n	8016676 <_strtod_l+0x246>
 80166b2:	2300      	movs	r3, #0
 80166b4:	9307      	str	r3, [sp, #28]
 80166b6:	2201      	movs	r2, #1
 80166b8:	e77c      	b.n	80165b4 <_strtod_l+0x184>
 80166ba:	f04f 0c00 	mov.w	ip, #0
 80166be:	f108 0302 	add.w	r3, r8, #2
 80166c2:	931d      	str	r3, [sp, #116]	; 0x74
 80166c4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80166c8:	e785      	b.n	80165d6 <_strtod_l+0x1a6>
 80166ca:	f04f 0c01 	mov.w	ip, #1
 80166ce:	e7f6      	b.n	80166be <_strtod_l+0x28e>
 80166d0:	0801b284 	.word	0x0801b284
 80166d4:	0801afcc 	.word	0x0801afcc
 80166d8:	7ff00000 	.word	0x7ff00000
 80166dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80166de:	1c59      	adds	r1, r3, #1
 80166e0:	911d      	str	r1, [sp, #116]	; 0x74
 80166e2:	785b      	ldrb	r3, [r3, #1]
 80166e4:	2b30      	cmp	r3, #48	; 0x30
 80166e6:	d0f9      	beq.n	80166dc <_strtod_l+0x2ac>
 80166e8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80166ec:	2908      	cmp	r1, #8
 80166ee:	f63f af79 	bhi.w	80165e4 <_strtod_l+0x1b4>
 80166f2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80166f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80166f8:	9308      	str	r3, [sp, #32]
 80166fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80166fc:	1c59      	adds	r1, r3, #1
 80166fe:	911d      	str	r1, [sp, #116]	; 0x74
 8016700:	785b      	ldrb	r3, [r3, #1]
 8016702:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8016706:	2e09      	cmp	r6, #9
 8016708:	d937      	bls.n	801677a <_strtod_l+0x34a>
 801670a:	9e08      	ldr	r6, [sp, #32]
 801670c:	1b89      	subs	r1, r1, r6
 801670e:	2908      	cmp	r1, #8
 8016710:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8016714:	dc02      	bgt.n	801671c <_strtod_l+0x2ec>
 8016716:	4576      	cmp	r6, lr
 8016718:	bfa8      	it	ge
 801671a:	4676      	movge	r6, lr
 801671c:	f1bc 0f00 	cmp.w	ip, #0
 8016720:	d000      	beq.n	8016724 <_strtod_l+0x2f4>
 8016722:	4276      	negs	r6, r6
 8016724:	2d00      	cmp	r5, #0
 8016726:	d14f      	bne.n	80167c8 <_strtod_l+0x398>
 8016728:	9904      	ldr	r1, [sp, #16]
 801672a:	4301      	orrs	r1, r0
 801672c:	f47f aec2 	bne.w	80164b4 <_strtod_l+0x84>
 8016730:	2a00      	cmp	r2, #0
 8016732:	f47f aedb 	bne.w	80164ec <_strtod_l+0xbc>
 8016736:	2b69      	cmp	r3, #105	; 0x69
 8016738:	d027      	beq.n	801678a <_strtod_l+0x35a>
 801673a:	dc24      	bgt.n	8016786 <_strtod_l+0x356>
 801673c:	2b49      	cmp	r3, #73	; 0x49
 801673e:	d024      	beq.n	801678a <_strtod_l+0x35a>
 8016740:	2b4e      	cmp	r3, #78	; 0x4e
 8016742:	f47f aed3 	bne.w	80164ec <_strtod_l+0xbc>
 8016746:	499e      	ldr	r1, [pc, #632]	; (80169c0 <_strtod_l+0x590>)
 8016748:	a81d      	add	r0, sp, #116	; 0x74
 801674a:	f001 ff75 	bl	8018638 <__match>
 801674e:	2800      	cmp	r0, #0
 8016750:	f43f aecc 	beq.w	80164ec <_strtod_l+0xbc>
 8016754:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016756:	781b      	ldrb	r3, [r3, #0]
 8016758:	2b28      	cmp	r3, #40	; 0x28
 801675a:	d12d      	bne.n	80167b8 <_strtod_l+0x388>
 801675c:	4999      	ldr	r1, [pc, #612]	; (80169c4 <_strtod_l+0x594>)
 801675e:	aa20      	add	r2, sp, #128	; 0x80
 8016760:	a81d      	add	r0, sp, #116	; 0x74
 8016762:	f001 ff7d 	bl	8018660 <__hexnan>
 8016766:	2805      	cmp	r0, #5
 8016768:	d126      	bne.n	80167b8 <_strtod_l+0x388>
 801676a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801676c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8016770:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016774:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016778:	e69c      	b.n	80164b4 <_strtod_l+0x84>
 801677a:	210a      	movs	r1, #10
 801677c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016780:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016784:	e7b9      	b.n	80166fa <_strtod_l+0x2ca>
 8016786:	2b6e      	cmp	r3, #110	; 0x6e
 8016788:	e7db      	b.n	8016742 <_strtod_l+0x312>
 801678a:	498f      	ldr	r1, [pc, #572]	; (80169c8 <_strtod_l+0x598>)
 801678c:	a81d      	add	r0, sp, #116	; 0x74
 801678e:	f001 ff53 	bl	8018638 <__match>
 8016792:	2800      	cmp	r0, #0
 8016794:	f43f aeaa 	beq.w	80164ec <_strtod_l+0xbc>
 8016798:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801679a:	498c      	ldr	r1, [pc, #560]	; (80169cc <_strtod_l+0x59c>)
 801679c:	3b01      	subs	r3, #1
 801679e:	a81d      	add	r0, sp, #116	; 0x74
 80167a0:	931d      	str	r3, [sp, #116]	; 0x74
 80167a2:	f001 ff49 	bl	8018638 <__match>
 80167a6:	b910      	cbnz	r0, 80167ae <_strtod_l+0x37e>
 80167a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80167aa:	3301      	adds	r3, #1
 80167ac:	931d      	str	r3, [sp, #116]	; 0x74
 80167ae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80169dc <_strtod_l+0x5ac>
 80167b2:	f04f 0a00 	mov.w	sl, #0
 80167b6:	e67d      	b.n	80164b4 <_strtod_l+0x84>
 80167b8:	4885      	ldr	r0, [pc, #532]	; (80169d0 <_strtod_l+0x5a0>)
 80167ba:	f003 fb7d 	bl	8019eb8 <nan>
 80167be:	ed8d 0b04 	vstr	d0, [sp, #16]
 80167c2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80167c6:	e675      	b.n	80164b4 <_strtod_l+0x84>
 80167c8:	9b07      	ldr	r3, [sp, #28]
 80167ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80167cc:	1af3      	subs	r3, r6, r3
 80167ce:	2f00      	cmp	r7, #0
 80167d0:	bf08      	it	eq
 80167d2:	462f      	moveq	r7, r5
 80167d4:	2d10      	cmp	r5, #16
 80167d6:	9308      	str	r3, [sp, #32]
 80167d8:	46a8      	mov	r8, r5
 80167da:	bfa8      	it	ge
 80167dc:	f04f 0810 	movge.w	r8, #16
 80167e0:	f7e9 fea8 	bl	8000534 <__aeabi_ui2d>
 80167e4:	2d09      	cmp	r5, #9
 80167e6:	4682      	mov	sl, r0
 80167e8:	468b      	mov	fp, r1
 80167ea:	dd13      	ble.n	8016814 <_strtod_l+0x3e4>
 80167ec:	4b79      	ldr	r3, [pc, #484]	; (80169d4 <_strtod_l+0x5a4>)
 80167ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80167f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80167f6:	f7e9 ff17 	bl	8000628 <__aeabi_dmul>
 80167fa:	4682      	mov	sl, r0
 80167fc:	4648      	mov	r0, r9
 80167fe:	468b      	mov	fp, r1
 8016800:	f7e9 fe98 	bl	8000534 <__aeabi_ui2d>
 8016804:	4602      	mov	r2, r0
 8016806:	460b      	mov	r3, r1
 8016808:	4650      	mov	r0, sl
 801680a:	4659      	mov	r1, fp
 801680c:	f7e9 fd56 	bl	80002bc <__adddf3>
 8016810:	4682      	mov	sl, r0
 8016812:	468b      	mov	fp, r1
 8016814:	2d0f      	cmp	r5, #15
 8016816:	dc38      	bgt.n	801688a <_strtod_l+0x45a>
 8016818:	9b08      	ldr	r3, [sp, #32]
 801681a:	2b00      	cmp	r3, #0
 801681c:	f43f ae4a 	beq.w	80164b4 <_strtod_l+0x84>
 8016820:	dd24      	ble.n	801686c <_strtod_l+0x43c>
 8016822:	2b16      	cmp	r3, #22
 8016824:	dc0b      	bgt.n	801683e <_strtod_l+0x40e>
 8016826:	4d6b      	ldr	r5, [pc, #428]	; (80169d4 <_strtod_l+0x5a4>)
 8016828:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801682c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016830:	4652      	mov	r2, sl
 8016832:	465b      	mov	r3, fp
 8016834:	f7e9 fef8 	bl	8000628 <__aeabi_dmul>
 8016838:	4682      	mov	sl, r0
 801683a:	468b      	mov	fp, r1
 801683c:	e63a      	b.n	80164b4 <_strtod_l+0x84>
 801683e:	9a08      	ldr	r2, [sp, #32]
 8016840:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8016844:	4293      	cmp	r3, r2
 8016846:	db20      	blt.n	801688a <_strtod_l+0x45a>
 8016848:	4c62      	ldr	r4, [pc, #392]	; (80169d4 <_strtod_l+0x5a4>)
 801684a:	f1c5 050f 	rsb	r5, r5, #15
 801684e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8016852:	4652      	mov	r2, sl
 8016854:	465b      	mov	r3, fp
 8016856:	e9d1 0100 	ldrd	r0, r1, [r1]
 801685a:	f7e9 fee5 	bl	8000628 <__aeabi_dmul>
 801685e:	9b08      	ldr	r3, [sp, #32]
 8016860:	1b5d      	subs	r5, r3, r5
 8016862:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8016866:	e9d4 2300 	ldrd	r2, r3, [r4]
 801686a:	e7e3      	b.n	8016834 <_strtod_l+0x404>
 801686c:	9b08      	ldr	r3, [sp, #32]
 801686e:	3316      	adds	r3, #22
 8016870:	db0b      	blt.n	801688a <_strtod_l+0x45a>
 8016872:	9b07      	ldr	r3, [sp, #28]
 8016874:	4a57      	ldr	r2, [pc, #348]	; (80169d4 <_strtod_l+0x5a4>)
 8016876:	1b9e      	subs	r6, r3, r6
 8016878:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801687c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016880:	4650      	mov	r0, sl
 8016882:	4659      	mov	r1, fp
 8016884:	f7e9 fffa 	bl	800087c <__aeabi_ddiv>
 8016888:	e7d6      	b.n	8016838 <_strtod_l+0x408>
 801688a:	9b08      	ldr	r3, [sp, #32]
 801688c:	eba5 0808 	sub.w	r8, r5, r8
 8016890:	4498      	add	r8, r3
 8016892:	f1b8 0f00 	cmp.w	r8, #0
 8016896:	dd71      	ble.n	801697c <_strtod_l+0x54c>
 8016898:	f018 030f 	ands.w	r3, r8, #15
 801689c:	d00a      	beq.n	80168b4 <_strtod_l+0x484>
 801689e:	494d      	ldr	r1, [pc, #308]	; (80169d4 <_strtod_l+0x5a4>)
 80168a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80168a4:	4652      	mov	r2, sl
 80168a6:	465b      	mov	r3, fp
 80168a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168ac:	f7e9 febc 	bl	8000628 <__aeabi_dmul>
 80168b0:	4682      	mov	sl, r0
 80168b2:	468b      	mov	fp, r1
 80168b4:	f038 080f 	bics.w	r8, r8, #15
 80168b8:	d04d      	beq.n	8016956 <_strtod_l+0x526>
 80168ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80168be:	dd22      	ble.n	8016906 <_strtod_l+0x4d6>
 80168c0:	2500      	movs	r5, #0
 80168c2:	462e      	mov	r6, r5
 80168c4:	9509      	str	r5, [sp, #36]	; 0x24
 80168c6:	9507      	str	r5, [sp, #28]
 80168c8:	2322      	movs	r3, #34	; 0x22
 80168ca:	f8df b110 	ldr.w	fp, [pc, #272]	; 80169dc <_strtod_l+0x5ac>
 80168ce:	6023      	str	r3, [r4, #0]
 80168d0:	f04f 0a00 	mov.w	sl, #0
 80168d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	f43f adec 	beq.w	80164b4 <_strtod_l+0x84>
 80168dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80168de:	4620      	mov	r0, r4
 80168e0:	f001 ffce 	bl	8018880 <_Bfree>
 80168e4:	9907      	ldr	r1, [sp, #28]
 80168e6:	4620      	mov	r0, r4
 80168e8:	f001 ffca 	bl	8018880 <_Bfree>
 80168ec:	4631      	mov	r1, r6
 80168ee:	4620      	mov	r0, r4
 80168f0:	f001 ffc6 	bl	8018880 <_Bfree>
 80168f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80168f6:	4620      	mov	r0, r4
 80168f8:	f001 ffc2 	bl	8018880 <_Bfree>
 80168fc:	4629      	mov	r1, r5
 80168fe:	4620      	mov	r0, r4
 8016900:	f001 ffbe 	bl	8018880 <_Bfree>
 8016904:	e5d6      	b.n	80164b4 <_strtod_l+0x84>
 8016906:	2300      	movs	r3, #0
 8016908:	ea4f 1828 	mov.w	r8, r8, asr #4
 801690c:	4650      	mov	r0, sl
 801690e:	4659      	mov	r1, fp
 8016910:	4699      	mov	r9, r3
 8016912:	f1b8 0f01 	cmp.w	r8, #1
 8016916:	dc21      	bgt.n	801695c <_strtod_l+0x52c>
 8016918:	b10b      	cbz	r3, 801691e <_strtod_l+0x4ee>
 801691a:	4682      	mov	sl, r0
 801691c:	468b      	mov	fp, r1
 801691e:	4b2e      	ldr	r3, [pc, #184]	; (80169d8 <_strtod_l+0x5a8>)
 8016920:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016924:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8016928:	4652      	mov	r2, sl
 801692a:	465b      	mov	r3, fp
 801692c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8016930:	f7e9 fe7a 	bl	8000628 <__aeabi_dmul>
 8016934:	4b29      	ldr	r3, [pc, #164]	; (80169dc <_strtod_l+0x5ac>)
 8016936:	460a      	mov	r2, r1
 8016938:	400b      	ands	r3, r1
 801693a:	4929      	ldr	r1, [pc, #164]	; (80169e0 <_strtod_l+0x5b0>)
 801693c:	428b      	cmp	r3, r1
 801693e:	4682      	mov	sl, r0
 8016940:	d8be      	bhi.n	80168c0 <_strtod_l+0x490>
 8016942:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016946:	428b      	cmp	r3, r1
 8016948:	bf86      	itte	hi
 801694a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80169e4 <_strtod_l+0x5b4>
 801694e:	f04f 3aff 	movhi.w	sl, #4294967295
 8016952:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016956:	2300      	movs	r3, #0
 8016958:	9304      	str	r3, [sp, #16]
 801695a:	e081      	b.n	8016a60 <_strtod_l+0x630>
 801695c:	f018 0f01 	tst.w	r8, #1
 8016960:	d007      	beq.n	8016972 <_strtod_l+0x542>
 8016962:	4b1d      	ldr	r3, [pc, #116]	; (80169d8 <_strtod_l+0x5a8>)
 8016964:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8016968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801696c:	f7e9 fe5c 	bl	8000628 <__aeabi_dmul>
 8016970:	2301      	movs	r3, #1
 8016972:	f109 0901 	add.w	r9, r9, #1
 8016976:	ea4f 0868 	mov.w	r8, r8, asr #1
 801697a:	e7ca      	b.n	8016912 <_strtod_l+0x4e2>
 801697c:	d0eb      	beq.n	8016956 <_strtod_l+0x526>
 801697e:	f1c8 0800 	rsb	r8, r8, #0
 8016982:	f018 020f 	ands.w	r2, r8, #15
 8016986:	d00a      	beq.n	801699e <_strtod_l+0x56e>
 8016988:	4b12      	ldr	r3, [pc, #72]	; (80169d4 <_strtod_l+0x5a4>)
 801698a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801698e:	4650      	mov	r0, sl
 8016990:	4659      	mov	r1, fp
 8016992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016996:	f7e9 ff71 	bl	800087c <__aeabi_ddiv>
 801699a:	4682      	mov	sl, r0
 801699c:	468b      	mov	fp, r1
 801699e:	ea5f 1828 	movs.w	r8, r8, asr #4
 80169a2:	d0d8      	beq.n	8016956 <_strtod_l+0x526>
 80169a4:	f1b8 0f1f 	cmp.w	r8, #31
 80169a8:	dd1e      	ble.n	80169e8 <_strtod_l+0x5b8>
 80169aa:	2500      	movs	r5, #0
 80169ac:	462e      	mov	r6, r5
 80169ae:	9509      	str	r5, [sp, #36]	; 0x24
 80169b0:	9507      	str	r5, [sp, #28]
 80169b2:	2322      	movs	r3, #34	; 0x22
 80169b4:	f04f 0a00 	mov.w	sl, #0
 80169b8:	f04f 0b00 	mov.w	fp, #0
 80169bc:	6023      	str	r3, [r4, #0]
 80169be:	e789      	b.n	80168d4 <_strtod_l+0x4a4>
 80169c0:	0801afa1 	.word	0x0801afa1
 80169c4:	0801afe0 	.word	0x0801afe0
 80169c8:	0801af99 	.word	0x0801af99
 80169cc:	0801b124 	.word	0x0801b124
 80169d0:	0801b45b 	.word	0x0801b45b
 80169d4:	0801b320 	.word	0x0801b320
 80169d8:	0801b2f8 	.word	0x0801b2f8
 80169dc:	7ff00000 	.word	0x7ff00000
 80169e0:	7ca00000 	.word	0x7ca00000
 80169e4:	7fefffff 	.word	0x7fefffff
 80169e8:	f018 0310 	ands.w	r3, r8, #16
 80169ec:	bf18      	it	ne
 80169ee:	236a      	movne	r3, #106	; 0x6a
 80169f0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8016da8 <_strtod_l+0x978>
 80169f4:	9304      	str	r3, [sp, #16]
 80169f6:	4650      	mov	r0, sl
 80169f8:	4659      	mov	r1, fp
 80169fa:	2300      	movs	r3, #0
 80169fc:	f018 0f01 	tst.w	r8, #1
 8016a00:	d004      	beq.n	8016a0c <_strtod_l+0x5dc>
 8016a02:	e9d9 2300 	ldrd	r2, r3, [r9]
 8016a06:	f7e9 fe0f 	bl	8000628 <__aeabi_dmul>
 8016a0a:	2301      	movs	r3, #1
 8016a0c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8016a10:	f109 0908 	add.w	r9, r9, #8
 8016a14:	d1f2      	bne.n	80169fc <_strtod_l+0x5cc>
 8016a16:	b10b      	cbz	r3, 8016a1c <_strtod_l+0x5ec>
 8016a18:	4682      	mov	sl, r0
 8016a1a:	468b      	mov	fp, r1
 8016a1c:	9b04      	ldr	r3, [sp, #16]
 8016a1e:	b1bb      	cbz	r3, 8016a50 <_strtod_l+0x620>
 8016a20:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016a24:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	4659      	mov	r1, fp
 8016a2c:	dd10      	ble.n	8016a50 <_strtod_l+0x620>
 8016a2e:	2b1f      	cmp	r3, #31
 8016a30:	f340 8128 	ble.w	8016c84 <_strtod_l+0x854>
 8016a34:	2b34      	cmp	r3, #52	; 0x34
 8016a36:	bfde      	ittt	le
 8016a38:	3b20      	suble	r3, #32
 8016a3a:	f04f 32ff 	movle.w	r2, #4294967295
 8016a3e:	fa02 f303 	lslle.w	r3, r2, r3
 8016a42:	f04f 0a00 	mov.w	sl, #0
 8016a46:	bfcc      	ite	gt
 8016a48:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016a4c:	ea03 0b01 	andle.w	fp, r3, r1
 8016a50:	2200      	movs	r2, #0
 8016a52:	2300      	movs	r3, #0
 8016a54:	4650      	mov	r0, sl
 8016a56:	4659      	mov	r1, fp
 8016a58:	f7ea f84e 	bl	8000af8 <__aeabi_dcmpeq>
 8016a5c:	2800      	cmp	r0, #0
 8016a5e:	d1a4      	bne.n	80169aa <_strtod_l+0x57a>
 8016a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a62:	9300      	str	r3, [sp, #0]
 8016a64:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016a66:	462b      	mov	r3, r5
 8016a68:	463a      	mov	r2, r7
 8016a6a:	4620      	mov	r0, r4
 8016a6c:	f001 ff74 	bl	8018958 <__s2b>
 8016a70:	9009      	str	r0, [sp, #36]	; 0x24
 8016a72:	2800      	cmp	r0, #0
 8016a74:	f43f af24 	beq.w	80168c0 <_strtod_l+0x490>
 8016a78:	9b07      	ldr	r3, [sp, #28]
 8016a7a:	1b9e      	subs	r6, r3, r6
 8016a7c:	9b08      	ldr	r3, [sp, #32]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	bfb4      	ite	lt
 8016a82:	4633      	movlt	r3, r6
 8016a84:	2300      	movge	r3, #0
 8016a86:	9310      	str	r3, [sp, #64]	; 0x40
 8016a88:	9b08      	ldr	r3, [sp, #32]
 8016a8a:	2500      	movs	r5, #0
 8016a8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016a90:	9318      	str	r3, [sp, #96]	; 0x60
 8016a92:	462e      	mov	r6, r5
 8016a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a96:	4620      	mov	r0, r4
 8016a98:	6859      	ldr	r1, [r3, #4]
 8016a9a:	f001 feb1 	bl	8018800 <_Balloc>
 8016a9e:	9007      	str	r0, [sp, #28]
 8016aa0:	2800      	cmp	r0, #0
 8016aa2:	f43f af11 	beq.w	80168c8 <_strtod_l+0x498>
 8016aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016aa8:	691a      	ldr	r2, [r3, #16]
 8016aaa:	3202      	adds	r2, #2
 8016aac:	f103 010c 	add.w	r1, r3, #12
 8016ab0:	0092      	lsls	r2, r2, #2
 8016ab2:	300c      	adds	r0, #12
 8016ab4:	f7fe fd44 	bl	8015540 <memcpy>
 8016ab8:	ec4b ab10 	vmov	d0, sl, fp
 8016abc:	aa20      	add	r2, sp, #128	; 0x80
 8016abe:	a91f      	add	r1, sp, #124	; 0x7c
 8016ac0:	4620      	mov	r0, r4
 8016ac2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8016ac6:	f002 fa83 	bl	8018fd0 <__d2b>
 8016aca:	901e      	str	r0, [sp, #120]	; 0x78
 8016acc:	2800      	cmp	r0, #0
 8016ace:	f43f aefb 	beq.w	80168c8 <_strtod_l+0x498>
 8016ad2:	2101      	movs	r1, #1
 8016ad4:	4620      	mov	r0, r4
 8016ad6:	f001 ffd9 	bl	8018a8c <__i2b>
 8016ada:	4606      	mov	r6, r0
 8016adc:	2800      	cmp	r0, #0
 8016ade:	f43f aef3 	beq.w	80168c8 <_strtod_l+0x498>
 8016ae2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016ae4:	9904      	ldr	r1, [sp, #16]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	bfab      	itete	ge
 8016aea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8016aec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8016aee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8016af0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8016af4:	bfac      	ite	ge
 8016af6:	eb03 0902 	addge.w	r9, r3, r2
 8016afa:	1ad7      	sublt	r7, r2, r3
 8016afc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016afe:	eba3 0801 	sub.w	r8, r3, r1
 8016b02:	4490      	add	r8, r2
 8016b04:	4ba3      	ldr	r3, [pc, #652]	; (8016d94 <_strtod_l+0x964>)
 8016b06:	f108 38ff 	add.w	r8, r8, #4294967295
 8016b0a:	4598      	cmp	r8, r3
 8016b0c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016b10:	f280 80cc 	bge.w	8016cac <_strtod_l+0x87c>
 8016b14:	eba3 0308 	sub.w	r3, r3, r8
 8016b18:	2b1f      	cmp	r3, #31
 8016b1a:	eba2 0203 	sub.w	r2, r2, r3
 8016b1e:	f04f 0101 	mov.w	r1, #1
 8016b22:	f300 80b6 	bgt.w	8016c92 <_strtod_l+0x862>
 8016b26:	fa01 f303 	lsl.w	r3, r1, r3
 8016b2a:	9311      	str	r3, [sp, #68]	; 0x44
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	930c      	str	r3, [sp, #48]	; 0x30
 8016b30:	eb09 0802 	add.w	r8, r9, r2
 8016b34:	9b04      	ldr	r3, [sp, #16]
 8016b36:	45c1      	cmp	r9, r8
 8016b38:	4417      	add	r7, r2
 8016b3a:	441f      	add	r7, r3
 8016b3c:	464b      	mov	r3, r9
 8016b3e:	bfa8      	it	ge
 8016b40:	4643      	movge	r3, r8
 8016b42:	42bb      	cmp	r3, r7
 8016b44:	bfa8      	it	ge
 8016b46:	463b      	movge	r3, r7
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	bfc2      	ittt	gt
 8016b4c:	eba8 0803 	subgt.w	r8, r8, r3
 8016b50:	1aff      	subgt	r7, r7, r3
 8016b52:	eba9 0903 	subgt.w	r9, r9, r3
 8016b56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	dd17      	ble.n	8016b8c <_strtod_l+0x75c>
 8016b5c:	4631      	mov	r1, r6
 8016b5e:	461a      	mov	r2, r3
 8016b60:	4620      	mov	r0, r4
 8016b62:	f002 f84f 	bl	8018c04 <__pow5mult>
 8016b66:	4606      	mov	r6, r0
 8016b68:	2800      	cmp	r0, #0
 8016b6a:	f43f aead 	beq.w	80168c8 <_strtod_l+0x498>
 8016b6e:	4601      	mov	r1, r0
 8016b70:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016b72:	4620      	mov	r0, r4
 8016b74:	f001 ffa0 	bl	8018ab8 <__multiply>
 8016b78:	900f      	str	r0, [sp, #60]	; 0x3c
 8016b7a:	2800      	cmp	r0, #0
 8016b7c:	f43f aea4 	beq.w	80168c8 <_strtod_l+0x498>
 8016b80:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016b82:	4620      	mov	r0, r4
 8016b84:	f001 fe7c 	bl	8018880 <_Bfree>
 8016b88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016b8a:	931e      	str	r3, [sp, #120]	; 0x78
 8016b8c:	f1b8 0f00 	cmp.w	r8, #0
 8016b90:	f300 8091 	bgt.w	8016cb6 <_strtod_l+0x886>
 8016b94:	9b08      	ldr	r3, [sp, #32]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	dd08      	ble.n	8016bac <_strtod_l+0x77c>
 8016b9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016b9c:	9907      	ldr	r1, [sp, #28]
 8016b9e:	4620      	mov	r0, r4
 8016ba0:	f002 f830 	bl	8018c04 <__pow5mult>
 8016ba4:	9007      	str	r0, [sp, #28]
 8016ba6:	2800      	cmp	r0, #0
 8016ba8:	f43f ae8e 	beq.w	80168c8 <_strtod_l+0x498>
 8016bac:	2f00      	cmp	r7, #0
 8016bae:	dd08      	ble.n	8016bc2 <_strtod_l+0x792>
 8016bb0:	9907      	ldr	r1, [sp, #28]
 8016bb2:	463a      	mov	r2, r7
 8016bb4:	4620      	mov	r0, r4
 8016bb6:	f002 f87f 	bl	8018cb8 <__lshift>
 8016bba:	9007      	str	r0, [sp, #28]
 8016bbc:	2800      	cmp	r0, #0
 8016bbe:	f43f ae83 	beq.w	80168c8 <_strtod_l+0x498>
 8016bc2:	f1b9 0f00 	cmp.w	r9, #0
 8016bc6:	dd08      	ble.n	8016bda <_strtod_l+0x7aa>
 8016bc8:	4631      	mov	r1, r6
 8016bca:	464a      	mov	r2, r9
 8016bcc:	4620      	mov	r0, r4
 8016bce:	f002 f873 	bl	8018cb8 <__lshift>
 8016bd2:	4606      	mov	r6, r0
 8016bd4:	2800      	cmp	r0, #0
 8016bd6:	f43f ae77 	beq.w	80168c8 <_strtod_l+0x498>
 8016bda:	9a07      	ldr	r2, [sp, #28]
 8016bdc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016bde:	4620      	mov	r0, r4
 8016be0:	f002 f8f2 	bl	8018dc8 <__mdiff>
 8016be4:	4605      	mov	r5, r0
 8016be6:	2800      	cmp	r0, #0
 8016be8:	f43f ae6e 	beq.w	80168c8 <_strtod_l+0x498>
 8016bec:	68c3      	ldr	r3, [r0, #12]
 8016bee:	930f      	str	r3, [sp, #60]	; 0x3c
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	60c3      	str	r3, [r0, #12]
 8016bf4:	4631      	mov	r1, r6
 8016bf6:	f002 f8cb 	bl	8018d90 <__mcmp>
 8016bfa:	2800      	cmp	r0, #0
 8016bfc:	da65      	bge.n	8016cca <_strtod_l+0x89a>
 8016bfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c00:	ea53 030a 	orrs.w	r3, r3, sl
 8016c04:	f040 8087 	bne.w	8016d16 <_strtod_l+0x8e6>
 8016c08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	f040 8082 	bne.w	8016d16 <_strtod_l+0x8e6>
 8016c12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016c16:	0d1b      	lsrs	r3, r3, #20
 8016c18:	051b      	lsls	r3, r3, #20
 8016c1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016c1e:	d97a      	bls.n	8016d16 <_strtod_l+0x8e6>
 8016c20:	696b      	ldr	r3, [r5, #20]
 8016c22:	b913      	cbnz	r3, 8016c2a <_strtod_l+0x7fa>
 8016c24:	692b      	ldr	r3, [r5, #16]
 8016c26:	2b01      	cmp	r3, #1
 8016c28:	dd75      	ble.n	8016d16 <_strtod_l+0x8e6>
 8016c2a:	4629      	mov	r1, r5
 8016c2c:	2201      	movs	r2, #1
 8016c2e:	4620      	mov	r0, r4
 8016c30:	f002 f842 	bl	8018cb8 <__lshift>
 8016c34:	4631      	mov	r1, r6
 8016c36:	4605      	mov	r5, r0
 8016c38:	f002 f8aa 	bl	8018d90 <__mcmp>
 8016c3c:	2800      	cmp	r0, #0
 8016c3e:	dd6a      	ble.n	8016d16 <_strtod_l+0x8e6>
 8016c40:	9904      	ldr	r1, [sp, #16]
 8016c42:	4a55      	ldr	r2, [pc, #340]	; (8016d98 <_strtod_l+0x968>)
 8016c44:	465b      	mov	r3, fp
 8016c46:	2900      	cmp	r1, #0
 8016c48:	f000 8085 	beq.w	8016d56 <_strtod_l+0x926>
 8016c4c:	ea02 010b 	and.w	r1, r2, fp
 8016c50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016c54:	dc7f      	bgt.n	8016d56 <_strtod_l+0x926>
 8016c56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016c5a:	f77f aeaa 	ble.w	80169b2 <_strtod_l+0x582>
 8016c5e:	4a4f      	ldr	r2, [pc, #316]	; (8016d9c <_strtod_l+0x96c>)
 8016c60:	2300      	movs	r3, #0
 8016c62:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8016c66:	4650      	mov	r0, sl
 8016c68:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8016c6c:	4659      	mov	r1, fp
 8016c6e:	f7e9 fcdb 	bl	8000628 <__aeabi_dmul>
 8016c72:	460b      	mov	r3, r1
 8016c74:	4303      	orrs	r3, r0
 8016c76:	bf08      	it	eq
 8016c78:	2322      	moveq	r3, #34	; 0x22
 8016c7a:	4682      	mov	sl, r0
 8016c7c:	468b      	mov	fp, r1
 8016c7e:	bf08      	it	eq
 8016c80:	6023      	streq	r3, [r4, #0]
 8016c82:	e62b      	b.n	80168dc <_strtod_l+0x4ac>
 8016c84:	f04f 32ff 	mov.w	r2, #4294967295
 8016c88:	fa02 f303 	lsl.w	r3, r2, r3
 8016c8c:	ea03 0a0a 	and.w	sl, r3, sl
 8016c90:	e6de      	b.n	8016a50 <_strtod_l+0x620>
 8016c92:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8016c96:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8016c9a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8016c9e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8016ca2:	fa01 f308 	lsl.w	r3, r1, r8
 8016ca6:	930c      	str	r3, [sp, #48]	; 0x30
 8016ca8:	9111      	str	r1, [sp, #68]	; 0x44
 8016caa:	e741      	b.n	8016b30 <_strtod_l+0x700>
 8016cac:	2300      	movs	r3, #0
 8016cae:	930c      	str	r3, [sp, #48]	; 0x30
 8016cb0:	2301      	movs	r3, #1
 8016cb2:	9311      	str	r3, [sp, #68]	; 0x44
 8016cb4:	e73c      	b.n	8016b30 <_strtod_l+0x700>
 8016cb6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016cb8:	4642      	mov	r2, r8
 8016cba:	4620      	mov	r0, r4
 8016cbc:	f001 fffc 	bl	8018cb8 <__lshift>
 8016cc0:	901e      	str	r0, [sp, #120]	; 0x78
 8016cc2:	2800      	cmp	r0, #0
 8016cc4:	f47f af66 	bne.w	8016b94 <_strtod_l+0x764>
 8016cc8:	e5fe      	b.n	80168c8 <_strtod_l+0x498>
 8016cca:	465f      	mov	r7, fp
 8016ccc:	d16e      	bne.n	8016dac <_strtod_l+0x97c>
 8016cce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016cd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016cd4:	b342      	cbz	r2, 8016d28 <_strtod_l+0x8f8>
 8016cd6:	4a32      	ldr	r2, [pc, #200]	; (8016da0 <_strtod_l+0x970>)
 8016cd8:	4293      	cmp	r3, r2
 8016cda:	d128      	bne.n	8016d2e <_strtod_l+0x8fe>
 8016cdc:	9b04      	ldr	r3, [sp, #16]
 8016cde:	4650      	mov	r0, sl
 8016ce0:	b1eb      	cbz	r3, 8016d1e <_strtod_l+0x8ee>
 8016ce2:	4a2d      	ldr	r2, [pc, #180]	; (8016d98 <_strtod_l+0x968>)
 8016ce4:	403a      	ands	r2, r7
 8016ce6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016cea:	f04f 31ff 	mov.w	r1, #4294967295
 8016cee:	d819      	bhi.n	8016d24 <_strtod_l+0x8f4>
 8016cf0:	0d12      	lsrs	r2, r2, #20
 8016cf2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8016cfa:	4298      	cmp	r0, r3
 8016cfc:	d117      	bne.n	8016d2e <_strtod_l+0x8fe>
 8016cfe:	4b29      	ldr	r3, [pc, #164]	; (8016da4 <_strtod_l+0x974>)
 8016d00:	429f      	cmp	r7, r3
 8016d02:	d102      	bne.n	8016d0a <_strtod_l+0x8da>
 8016d04:	3001      	adds	r0, #1
 8016d06:	f43f addf 	beq.w	80168c8 <_strtod_l+0x498>
 8016d0a:	4b23      	ldr	r3, [pc, #140]	; (8016d98 <_strtod_l+0x968>)
 8016d0c:	403b      	ands	r3, r7
 8016d0e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016d12:	f04f 0a00 	mov.w	sl, #0
 8016d16:	9b04      	ldr	r3, [sp, #16]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d1a0      	bne.n	8016c5e <_strtod_l+0x82e>
 8016d1c:	e5de      	b.n	80168dc <_strtod_l+0x4ac>
 8016d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8016d22:	e7ea      	b.n	8016cfa <_strtod_l+0x8ca>
 8016d24:	460b      	mov	r3, r1
 8016d26:	e7e8      	b.n	8016cfa <_strtod_l+0x8ca>
 8016d28:	ea53 030a 	orrs.w	r3, r3, sl
 8016d2c:	d088      	beq.n	8016c40 <_strtod_l+0x810>
 8016d2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d30:	b1db      	cbz	r3, 8016d6a <_strtod_l+0x93a>
 8016d32:	423b      	tst	r3, r7
 8016d34:	d0ef      	beq.n	8016d16 <_strtod_l+0x8e6>
 8016d36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d38:	9a04      	ldr	r2, [sp, #16]
 8016d3a:	4650      	mov	r0, sl
 8016d3c:	4659      	mov	r1, fp
 8016d3e:	b1c3      	cbz	r3, 8016d72 <_strtod_l+0x942>
 8016d40:	f7ff fb59 	bl	80163f6 <sulp>
 8016d44:	4602      	mov	r2, r0
 8016d46:	460b      	mov	r3, r1
 8016d48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016d4c:	f7e9 fab6 	bl	80002bc <__adddf3>
 8016d50:	4682      	mov	sl, r0
 8016d52:	468b      	mov	fp, r1
 8016d54:	e7df      	b.n	8016d16 <_strtod_l+0x8e6>
 8016d56:	4013      	ands	r3, r2
 8016d58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016d5c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016d60:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016d64:	f04f 3aff 	mov.w	sl, #4294967295
 8016d68:	e7d5      	b.n	8016d16 <_strtod_l+0x8e6>
 8016d6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016d6c:	ea13 0f0a 	tst.w	r3, sl
 8016d70:	e7e0      	b.n	8016d34 <_strtod_l+0x904>
 8016d72:	f7ff fb40 	bl	80163f6 <sulp>
 8016d76:	4602      	mov	r2, r0
 8016d78:	460b      	mov	r3, r1
 8016d7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016d7e:	f7e9 fa9b 	bl	80002b8 <__aeabi_dsub>
 8016d82:	2200      	movs	r2, #0
 8016d84:	2300      	movs	r3, #0
 8016d86:	4682      	mov	sl, r0
 8016d88:	468b      	mov	fp, r1
 8016d8a:	f7e9 feb5 	bl	8000af8 <__aeabi_dcmpeq>
 8016d8e:	2800      	cmp	r0, #0
 8016d90:	d0c1      	beq.n	8016d16 <_strtod_l+0x8e6>
 8016d92:	e60e      	b.n	80169b2 <_strtod_l+0x582>
 8016d94:	fffffc02 	.word	0xfffffc02
 8016d98:	7ff00000 	.word	0x7ff00000
 8016d9c:	39500000 	.word	0x39500000
 8016da0:	000fffff 	.word	0x000fffff
 8016da4:	7fefffff 	.word	0x7fefffff
 8016da8:	0801aff8 	.word	0x0801aff8
 8016dac:	4631      	mov	r1, r6
 8016dae:	4628      	mov	r0, r5
 8016db0:	f002 f96a 	bl	8019088 <__ratio>
 8016db4:	ec59 8b10 	vmov	r8, r9, d0
 8016db8:	ee10 0a10 	vmov	r0, s0
 8016dbc:	2200      	movs	r2, #0
 8016dbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016dc2:	4649      	mov	r1, r9
 8016dc4:	f7e9 feac 	bl	8000b20 <__aeabi_dcmple>
 8016dc8:	2800      	cmp	r0, #0
 8016dca:	d07c      	beq.n	8016ec6 <_strtod_l+0xa96>
 8016dcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d04c      	beq.n	8016e6c <_strtod_l+0xa3c>
 8016dd2:	4b95      	ldr	r3, [pc, #596]	; (8017028 <_strtod_l+0xbf8>)
 8016dd4:	2200      	movs	r2, #0
 8016dd6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016dda:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8017028 <_strtod_l+0xbf8>
 8016dde:	f04f 0800 	mov.w	r8, #0
 8016de2:	4b92      	ldr	r3, [pc, #584]	; (801702c <_strtod_l+0xbfc>)
 8016de4:	403b      	ands	r3, r7
 8016de6:	9311      	str	r3, [sp, #68]	; 0x44
 8016de8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016dea:	4b91      	ldr	r3, [pc, #580]	; (8017030 <_strtod_l+0xc00>)
 8016dec:	429a      	cmp	r2, r3
 8016dee:	f040 80b2 	bne.w	8016f56 <_strtod_l+0xb26>
 8016df2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016df6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016dfa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8016dfe:	ec4b ab10 	vmov	d0, sl, fp
 8016e02:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8016e06:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016e0a:	f002 f865 	bl	8018ed8 <__ulp>
 8016e0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016e12:	ec53 2b10 	vmov	r2, r3, d0
 8016e16:	f7e9 fc07 	bl	8000628 <__aeabi_dmul>
 8016e1a:	4652      	mov	r2, sl
 8016e1c:	465b      	mov	r3, fp
 8016e1e:	f7e9 fa4d 	bl	80002bc <__adddf3>
 8016e22:	460b      	mov	r3, r1
 8016e24:	4981      	ldr	r1, [pc, #516]	; (801702c <_strtod_l+0xbfc>)
 8016e26:	4a83      	ldr	r2, [pc, #524]	; (8017034 <_strtod_l+0xc04>)
 8016e28:	4019      	ands	r1, r3
 8016e2a:	4291      	cmp	r1, r2
 8016e2c:	4682      	mov	sl, r0
 8016e2e:	d95e      	bls.n	8016eee <_strtod_l+0xabe>
 8016e30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e32:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016e36:	4293      	cmp	r3, r2
 8016e38:	d103      	bne.n	8016e42 <_strtod_l+0xa12>
 8016e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e3c:	3301      	adds	r3, #1
 8016e3e:	f43f ad43 	beq.w	80168c8 <_strtod_l+0x498>
 8016e42:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8017040 <_strtod_l+0xc10>
 8016e46:	f04f 3aff 	mov.w	sl, #4294967295
 8016e4a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016e4c:	4620      	mov	r0, r4
 8016e4e:	f001 fd17 	bl	8018880 <_Bfree>
 8016e52:	9907      	ldr	r1, [sp, #28]
 8016e54:	4620      	mov	r0, r4
 8016e56:	f001 fd13 	bl	8018880 <_Bfree>
 8016e5a:	4631      	mov	r1, r6
 8016e5c:	4620      	mov	r0, r4
 8016e5e:	f001 fd0f 	bl	8018880 <_Bfree>
 8016e62:	4629      	mov	r1, r5
 8016e64:	4620      	mov	r0, r4
 8016e66:	f001 fd0b 	bl	8018880 <_Bfree>
 8016e6a:	e613      	b.n	8016a94 <_strtod_l+0x664>
 8016e6c:	f1ba 0f00 	cmp.w	sl, #0
 8016e70:	d11b      	bne.n	8016eaa <_strtod_l+0xa7a>
 8016e72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016e76:	b9f3      	cbnz	r3, 8016eb6 <_strtod_l+0xa86>
 8016e78:	4b6b      	ldr	r3, [pc, #428]	; (8017028 <_strtod_l+0xbf8>)
 8016e7a:	2200      	movs	r2, #0
 8016e7c:	4640      	mov	r0, r8
 8016e7e:	4649      	mov	r1, r9
 8016e80:	f7e9 fe44 	bl	8000b0c <__aeabi_dcmplt>
 8016e84:	b9d0      	cbnz	r0, 8016ebc <_strtod_l+0xa8c>
 8016e86:	4640      	mov	r0, r8
 8016e88:	4649      	mov	r1, r9
 8016e8a:	4b6b      	ldr	r3, [pc, #428]	; (8017038 <_strtod_l+0xc08>)
 8016e8c:	2200      	movs	r2, #0
 8016e8e:	f7e9 fbcb 	bl	8000628 <__aeabi_dmul>
 8016e92:	4680      	mov	r8, r0
 8016e94:	4689      	mov	r9, r1
 8016e96:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016e9a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8016e9e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016ea0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8016ea4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016ea8:	e79b      	b.n	8016de2 <_strtod_l+0x9b2>
 8016eaa:	f1ba 0f01 	cmp.w	sl, #1
 8016eae:	d102      	bne.n	8016eb6 <_strtod_l+0xa86>
 8016eb0:	2f00      	cmp	r7, #0
 8016eb2:	f43f ad7e 	beq.w	80169b2 <_strtod_l+0x582>
 8016eb6:	4b61      	ldr	r3, [pc, #388]	; (801703c <_strtod_l+0xc0c>)
 8016eb8:	2200      	movs	r2, #0
 8016eba:	e78c      	b.n	8016dd6 <_strtod_l+0x9a6>
 8016ebc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8017038 <_strtod_l+0xc08>
 8016ec0:	f04f 0800 	mov.w	r8, #0
 8016ec4:	e7e7      	b.n	8016e96 <_strtod_l+0xa66>
 8016ec6:	4b5c      	ldr	r3, [pc, #368]	; (8017038 <_strtod_l+0xc08>)
 8016ec8:	4640      	mov	r0, r8
 8016eca:	4649      	mov	r1, r9
 8016ecc:	2200      	movs	r2, #0
 8016ece:	f7e9 fbab 	bl	8000628 <__aeabi_dmul>
 8016ed2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ed4:	4680      	mov	r8, r0
 8016ed6:	4689      	mov	r9, r1
 8016ed8:	b933      	cbnz	r3, 8016ee8 <_strtod_l+0xab8>
 8016eda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016ede:	9012      	str	r0, [sp, #72]	; 0x48
 8016ee0:	9313      	str	r3, [sp, #76]	; 0x4c
 8016ee2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016ee6:	e7dd      	b.n	8016ea4 <_strtod_l+0xa74>
 8016ee8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8016eec:	e7f9      	b.n	8016ee2 <_strtod_l+0xab2>
 8016eee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016ef2:	9b04      	ldr	r3, [sp, #16]
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d1a8      	bne.n	8016e4a <_strtod_l+0xa1a>
 8016ef8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016efc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016efe:	0d1b      	lsrs	r3, r3, #20
 8016f00:	051b      	lsls	r3, r3, #20
 8016f02:	429a      	cmp	r2, r3
 8016f04:	d1a1      	bne.n	8016e4a <_strtod_l+0xa1a>
 8016f06:	4640      	mov	r0, r8
 8016f08:	4649      	mov	r1, r9
 8016f0a:	f7e9 feed 	bl	8000ce8 <__aeabi_d2lz>
 8016f0e:	f7e9 fb5d 	bl	80005cc <__aeabi_l2d>
 8016f12:	4602      	mov	r2, r0
 8016f14:	460b      	mov	r3, r1
 8016f16:	4640      	mov	r0, r8
 8016f18:	4649      	mov	r1, r9
 8016f1a:	f7e9 f9cd 	bl	80002b8 <__aeabi_dsub>
 8016f1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016f20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016f24:	ea43 030a 	orr.w	r3, r3, sl
 8016f28:	4313      	orrs	r3, r2
 8016f2a:	4680      	mov	r8, r0
 8016f2c:	4689      	mov	r9, r1
 8016f2e:	d053      	beq.n	8016fd8 <_strtod_l+0xba8>
 8016f30:	a335      	add	r3, pc, #212	; (adr r3, 8017008 <_strtod_l+0xbd8>)
 8016f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f36:	f7e9 fde9 	bl	8000b0c <__aeabi_dcmplt>
 8016f3a:	2800      	cmp	r0, #0
 8016f3c:	f47f acce 	bne.w	80168dc <_strtod_l+0x4ac>
 8016f40:	a333      	add	r3, pc, #204	; (adr r3, 8017010 <_strtod_l+0xbe0>)
 8016f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f46:	4640      	mov	r0, r8
 8016f48:	4649      	mov	r1, r9
 8016f4a:	f7e9 fdfd 	bl	8000b48 <__aeabi_dcmpgt>
 8016f4e:	2800      	cmp	r0, #0
 8016f50:	f43f af7b 	beq.w	8016e4a <_strtod_l+0xa1a>
 8016f54:	e4c2      	b.n	80168dc <_strtod_l+0x4ac>
 8016f56:	9b04      	ldr	r3, [sp, #16]
 8016f58:	b333      	cbz	r3, 8016fa8 <_strtod_l+0xb78>
 8016f5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016f5c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016f60:	d822      	bhi.n	8016fa8 <_strtod_l+0xb78>
 8016f62:	a32d      	add	r3, pc, #180	; (adr r3, 8017018 <_strtod_l+0xbe8>)
 8016f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f68:	4640      	mov	r0, r8
 8016f6a:	4649      	mov	r1, r9
 8016f6c:	f7e9 fdd8 	bl	8000b20 <__aeabi_dcmple>
 8016f70:	b1a0      	cbz	r0, 8016f9c <_strtod_l+0xb6c>
 8016f72:	4649      	mov	r1, r9
 8016f74:	4640      	mov	r0, r8
 8016f76:	f7e9 fe2f 	bl	8000bd8 <__aeabi_d2uiz>
 8016f7a:	2801      	cmp	r0, #1
 8016f7c:	bf38      	it	cc
 8016f7e:	2001      	movcc	r0, #1
 8016f80:	f7e9 fad8 	bl	8000534 <__aeabi_ui2d>
 8016f84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f86:	4680      	mov	r8, r0
 8016f88:	4689      	mov	r9, r1
 8016f8a:	bb13      	cbnz	r3, 8016fd2 <_strtod_l+0xba2>
 8016f8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016f90:	9014      	str	r0, [sp, #80]	; 0x50
 8016f92:	9315      	str	r3, [sp, #84]	; 0x54
 8016f94:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016f98:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8016f9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016fa0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016fa4:	1a9b      	subs	r3, r3, r2
 8016fa6:	930d      	str	r3, [sp, #52]	; 0x34
 8016fa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016fac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8016fb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016fb4:	f001 ff90 	bl	8018ed8 <__ulp>
 8016fb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016fbc:	ec53 2b10 	vmov	r2, r3, d0
 8016fc0:	f7e9 fb32 	bl	8000628 <__aeabi_dmul>
 8016fc4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016fc8:	f7e9 f978 	bl	80002bc <__adddf3>
 8016fcc:	4682      	mov	sl, r0
 8016fce:	468b      	mov	fp, r1
 8016fd0:	e78f      	b.n	8016ef2 <_strtod_l+0xac2>
 8016fd2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8016fd6:	e7dd      	b.n	8016f94 <_strtod_l+0xb64>
 8016fd8:	a311      	add	r3, pc, #68	; (adr r3, 8017020 <_strtod_l+0xbf0>)
 8016fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fde:	f7e9 fd95 	bl	8000b0c <__aeabi_dcmplt>
 8016fe2:	e7b4      	b.n	8016f4e <_strtod_l+0xb1e>
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	930e      	str	r3, [sp, #56]	; 0x38
 8016fe8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016fea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016fec:	6013      	str	r3, [r2, #0]
 8016fee:	f7ff ba65 	b.w	80164bc <_strtod_l+0x8c>
 8016ff2:	2b65      	cmp	r3, #101	; 0x65
 8016ff4:	f43f ab5d 	beq.w	80166b2 <_strtod_l+0x282>
 8016ff8:	2b45      	cmp	r3, #69	; 0x45
 8016ffa:	f43f ab5a 	beq.w	80166b2 <_strtod_l+0x282>
 8016ffe:	2201      	movs	r2, #1
 8017000:	f7ff bb92 	b.w	8016728 <_strtod_l+0x2f8>
 8017004:	f3af 8000 	nop.w
 8017008:	94a03595 	.word	0x94a03595
 801700c:	3fdfffff 	.word	0x3fdfffff
 8017010:	35afe535 	.word	0x35afe535
 8017014:	3fe00000 	.word	0x3fe00000
 8017018:	ffc00000 	.word	0xffc00000
 801701c:	41dfffff 	.word	0x41dfffff
 8017020:	94a03595 	.word	0x94a03595
 8017024:	3fcfffff 	.word	0x3fcfffff
 8017028:	3ff00000 	.word	0x3ff00000
 801702c:	7ff00000 	.word	0x7ff00000
 8017030:	7fe00000 	.word	0x7fe00000
 8017034:	7c9fffff 	.word	0x7c9fffff
 8017038:	3fe00000 	.word	0x3fe00000
 801703c:	bff00000 	.word	0xbff00000
 8017040:	7fefffff 	.word	0x7fefffff

08017044 <_strtod_r>:
 8017044:	4b01      	ldr	r3, [pc, #4]	; (801704c <_strtod_r+0x8>)
 8017046:	f7ff b9f3 	b.w	8016430 <_strtod_l>
 801704a:	bf00      	nop
 801704c:	20000074 	.word	0x20000074

08017050 <_strtol_l.isra.0>:
 8017050:	2b01      	cmp	r3, #1
 8017052:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017056:	d001      	beq.n	801705c <_strtol_l.isra.0+0xc>
 8017058:	2b24      	cmp	r3, #36	; 0x24
 801705a:	d906      	bls.n	801706a <_strtol_l.isra.0+0x1a>
 801705c:	f7fe fa46 	bl	80154ec <__errno>
 8017060:	2316      	movs	r3, #22
 8017062:	6003      	str	r3, [r0, #0]
 8017064:	2000      	movs	r0, #0
 8017066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801706a:	4f3a      	ldr	r7, [pc, #232]	; (8017154 <_strtol_l.isra.0+0x104>)
 801706c:	468e      	mov	lr, r1
 801706e:	4676      	mov	r6, lr
 8017070:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017074:	5de5      	ldrb	r5, [r4, r7]
 8017076:	f015 0508 	ands.w	r5, r5, #8
 801707a:	d1f8      	bne.n	801706e <_strtol_l.isra.0+0x1e>
 801707c:	2c2d      	cmp	r4, #45	; 0x2d
 801707e:	d134      	bne.n	80170ea <_strtol_l.isra.0+0x9a>
 8017080:	f89e 4000 	ldrb.w	r4, [lr]
 8017084:	f04f 0801 	mov.w	r8, #1
 8017088:	f106 0e02 	add.w	lr, r6, #2
 801708c:	2b00      	cmp	r3, #0
 801708e:	d05c      	beq.n	801714a <_strtol_l.isra.0+0xfa>
 8017090:	2b10      	cmp	r3, #16
 8017092:	d10c      	bne.n	80170ae <_strtol_l.isra.0+0x5e>
 8017094:	2c30      	cmp	r4, #48	; 0x30
 8017096:	d10a      	bne.n	80170ae <_strtol_l.isra.0+0x5e>
 8017098:	f89e 4000 	ldrb.w	r4, [lr]
 801709c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80170a0:	2c58      	cmp	r4, #88	; 0x58
 80170a2:	d14d      	bne.n	8017140 <_strtol_l.isra.0+0xf0>
 80170a4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80170a8:	2310      	movs	r3, #16
 80170aa:	f10e 0e02 	add.w	lr, lr, #2
 80170ae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80170b2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80170b6:	2600      	movs	r6, #0
 80170b8:	fbbc f9f3 	udiv	r9, ip, r3
 80170bc:	4635      	mov	r5, r6
 80170be:	fb03 ca19 	mls	sl, r3, r9, ip
 80170c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80170c6:	2f09      	cmp	r7, #9
 80170c8:	d818      	bhi.n	80170fc <_strtol_l.isra.0+0xac>
 80170ca:	463c      	mov	r4, r7
 80170cc:	42a3      	cmp	r3, r4
 80170ce:	dd24      	ble.n	801711a <_strtol_l.isra.0+0xca>
 80170d0:	2e00      	cmp	r6, #0
 80170d2:	db1f      	blt.n	8017114 <_strtol_l.isra.0+0xc4>
 80170d4:	45a9      	cmp	r9, r5
 80170d6:	d31d      	bcc.n	8017114 <_strtol_l.isra.0+0xc4>
 80170d8:	d101      	bne.n	80170de <_strtol_l.isra.0+0x8e>
 80170da:	45a2      	cmp	sl, r4
 80170dc:	db1a      	blt.n	8017114 <_strtol_l.isra.0+0xc4>
 80170de:	fb05 4503 	mla	r5, r5, r3, r4
 80170e2:	2601      	movs	r6, #1
 80170e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80170e8:	e7eb      	b.n	80170c2 <_strtol_l.isra.0+0x72>
 80170ea:	2c2b      	cmp	r4, #43	; 0x2b
 80170ec:	bf08      	it	eq
 80170ee:	f89e 4000 	ldrbeq.w	r4, [lr]
 80170f2:	46a8      	mov	r8, r5
 80170f4:	bf08      	it	eq
 80170f6:	f106 0e02 	addeq.w	lr, r6, #2
 80170fa:	e7c7      	b.n	801708c <_strtol_l.isra.0+0x3c>
 80170fc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017100:	2f19      	cmp	r7, #25
 8017102:	d801      	bhi.n	8017108 <_strtol_l.isra.0+0xb8>
 8017104:	3c37      	subs	r4, #55	; 0x37
 8017106:	e7e1      	b.n	80170cc <_strtol_l.isra.0+0x7c>
 8017108:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801710c:	2f19      	cmp	r7, #25
 801710e:	d804      	bhi.n	801711a <_strtol_l.isra.0+0xca>
 8017110:	3c57      	subs	r4, #87	; 0x57
 8017112:	e7db      	b.n	80170cc <_strtol_l.isra.0+0x7c>
 8017114:	f04f 36ff 	mov.w	r6, #4294967295
 8017118:	e7e4      	b.n	80170e4 <_strtol_l.isra.0+0x94>
 801711a:	2e00      	cmp	r6, #0
 801711c:	da05      	bge.n	801712a <_strtol_l.isra.0+0xda>
 801711e:	2322      	movs	r3, #34	; 0x22
 8017120:	6003      	str	r3, [r0, #0]
 8017122:	4665      	mov	r5, ip
 8017124:	b942      	cbnz	r2, 8017138 <_strtol_l.isra.0+0xe8>
 8017126:	4628      	mov	r0, r5
 8017128:	e79d      	b.n	8017066 <_strtol_l.isra.0+0x16>
 801712a:	f1b8 0f00 	cmp.w	r8, #0
 801712e:	d000      	beq.n	8017132 <_strtol_l.isra.0+0xe2>
 8017130:	426d      	negs	r5, r5
 8017132:	2a00      	cmp	r2, #0
 8017134:	d0f7      	beq.n	8017126 <_strtol_l.isra.0+0xd6>
 8017136:	b10e      	cbz	r6, 801713c <_strtol_l.isra.0+0xec>
 8017138:	f10e 31ff 	add.w	r1, lr, #4294967295
 801713c:	6011      	str	r1, [r2, #0]
 801713e:	e7f2      	b.n	8017126 <_strtol_l.isra.0+0xd6>
 8017140:	2430      	movs	r4, #48	; 0x30
 8017142:	2b00      	cmp	r3, #0
 8017144:	d1b3      	bne.n	80170ae <_strtol_l.isra.0+0x5e>
 8017146:	2308      	movs	r3, #8
 8017148:	e7b1      	b.n	80170ae <_strtol_l.isra.0+0x5e>
 801714a:	2c30      	cmp	r4, #48	; 0x30
 801714c:	d0a4      	beq.n	8017098 <_strtol_l.isra.0+0x48>
 801714e:	230a      	movs	r3, #10
 8017150:	e7ad      	b.n	80170ae <_strtol_l.isra.0+0x5e>
 8017152:	bf00      	nop
 8017154:	0801b021 	.word	0x0801b021

08017158 <_strtol_r>:
 8017158:	f7ff bf7a 	b.w	8017050 <_strtol_l.isra.0>

0801715c <_vsiprintf_r>:
 801715c:	b500      	push	{lr}
 801715e:	b09b      	sub	sp, #108	; 0x6c
 8017160:	9100      	str	r1, [sp, #0]
 8017162:	9104      	str	r1, [sp, #16]
 8017164:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017168:	9105      	str	r1, [sp, #20]
 801716a:	9102      	str	r1, [sp, #8]
 801716c:	4905      	ldr	r1, [pc, #20]	; (8017184 <_vsiprintf_r+0x28>)
 801716e:	9103      	str	r1, [sp, #12]
 8017170:	4669      	mov	r1, sp
 8017172:	f002 f915 	bl	80193a0 <_svfiprintf_r>
 8017176:	9b00      	ldr	r3, [sp, #0]
 8017178:	2200      	movs	r2, #0
 801717a:	701a      	strb	r2, [r3, #0]
 801717c:	b01b      	add	sp, #108	; 0x6c
 801717e:	f85d fb04 	ldr.w	pc, [sp], #4
 8017182:	bf00      	nop
 8017184:	ffff0208 	.word	0xffff0208

08017188 <vsiprintf>:
 8017188:	4613      	mov	r3, r2
 801718a:	460a      	mov	r2, r1
 801718c:	4601      	mov	r1, r0
 801718e:	4802      	ldr	r0, [pc, #8]	; (8017198 <vsiprintf+0x10>)
 8017190:	6800      	ldr	r0, [r0, #0]
 8017192:	f7ff bfe3 	b.w	801715c <_vsiprintf_r>
 8017196:	bf00      	nop
 8017198:	2000000c 	.word	0x2000000c

0801719c <_write_r>:
 801719c:	b538      	push	{r3, r4, r5, lr}
 801719e:	4d07      	ldr	r5, [pc, #28]	; (80171bc <_write_r+0x20>)
 80171a0:	4604      	mov	r4, r0
 80171a2:	4608      	mov	r0, r1
 80171a4:	4611      	mov	r1, r2
 80171a6:	2200      	movs	r2, #0
 80171a8:	602a      	str	r2, [r5, #0]
 80171aa:	461a      	mov	r2, r3
 80171ac:	f7ee fc9e 	bl	8005aec <_write>
 80171b0:	1c43      	adds	r3, r0, #1
 80171b2:	d102      	bne.n	80171ba <_write_r+0x1e>
 80171b4:	682b      	ldr	r3, [r5, #0]
 80171b6:	b103      	cbz	r3, 80171ba <_write_r+0x1e>
 80171b8:	6023      	str	r3, [r4, #0]
 80171ba:	bd38      	pop	{r3, r4, r5, pc}
 80171bc:	20041e60 	.word	0x20041e60

080171c0 <_close_r>:
 80171c0:	b538      	push	{r3, r4, r5, lr}
 80171c2:	4d06      	ldr	r5, [pc, #24]	; (80171dc <_close_r+0x1c>)
 80171c4:	2300      	movs	r3, #0
 80171c6:	4604      	mov	r4, r0
 80171c8:	4608      	mov	r0, r1
 80171ca:	602b      	str	r3, [r5, #0]
 80171cc:	f7f0 f9e5 	bl	800759a <_close>
 80171d0:	1c43      	adds	r3, r0, #1
 80171d2:	d102      	bne.n	80171da <_close_r+0x1a>
 80171d4:	682b      	ldr	r3, [r5, #0]
 80171d6:	b103      	cbz	r3, 80171da <_close_r+0x1a>
 80171d8:	6023      	str	r3, [r4, #0]
 80171da:	bd38      	pop	{r3, r4, r5, pc}
 80171dc:	20041e60 	.word	0x20041e60

080171e0 <quorem>:
 80171e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171e4:	6903      	ldr	r3, [r0, #16]
 80171e6:	690c      	ldr	r4, [r1, #16]
 80171e8:	42a3      	cmp	r3, r4
 80171ea:	4607      	mov	r7, r0
 80171ec:	f2c0 8081 	blt.w	80172f2 <quorem+0x112>
 80171f0:	3c01      	subs	r4, #1
 80171f2:	f101 0814 	add.w	r8, r1, #20
 80171f6:	f100 0514 	add.w	r5, r0, #20
 80171fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80171fe:	9301      	str	r3, [sp, #4]
 8017200:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017204:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017208:	3301      	adds	r3, #1
 801720a:	429a      	cmp	r2, r3
 801720c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017210:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017214:	fbb2 f6f3 	udiv	r6, r2, r3
 8017218:	d331      	bcc.n	801727e <quorem+0x9e>
 801721a:	f04f 0e00 	mov.w	lr, #0
 801721e:	4640      	mov	r0, r8
 8017220:	46ac      	mov	ip, r5
 8017222:	46f2      	mov	sl, lr
 8017224:	f850 2b04 	ldr.w	r2, [r0], #4
 8017228:	b293      	uxth	r3, r2
 801722a:	fb06 e303 	mla	r3, r6, r3, lr
 801722e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017232:	b29b      	uxth	r3, r3
 8017234:	ebaa 0303 	sub.w	r3, sl, r3
 8017238:	0c12      	lsrs	r2, r2, #16
 801723a:	f8dc a000 	ldr.w	sl, [ip]
 801723e:	fb06 e202 	mla	r2, r6, r2, lr
 8017242:	fa13 f38a 	uxtah	r3, r3, sl
 8017246:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801724a:	fa1f fa82 	uxth.w	sl, r2
 801724e:	f8dc 2000 	ldr.w	r2, [ip]
 8017252:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8017256:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801725a:	b29b      	uxth	r3, r3
 801725c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017260:	4581      	cmp	r9, r0
 8017262:	f84c 3b04 	str.w	r3, [ip], #4
 8017266:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801726a:	d2db      	bcs.n	8017224 <quorem+0x44>
 801726c:	f855 300b 	ldr.w	r3, [r5, fp]
 8017270:	b92b      	cbnz	r3, 801727e <quorem+0x9e>
 8017272:	9b01      	ldr	r3, [sp, #4]
 8017274:	3b04      	subs	r3, #4
 8017276:	429d      	cmp	r5, r3
 8017278:	461a      	mov	r2, r3
 801727a:	d32e      	bcc.n	80172da <quorem+0xfa>
 801727c:	613c      	str	r4, [r7, #16]
 801727e:	4638      	mov	r0, r7
 8017280:	f001 fd86 	bl	8018d90 <__mcmp>
 8017284:	2800      	cmp	r0, #0
 8017286:	db24      	blt.n	80172d2 <quorem+0xf2>
 8017288:	3601      	adds	r6, #1
 801728a:	4628      	mov	r0, r5
 801728c:	f04f 0c00 	mov.w	ip, #0
 8017290:	f858 2b04 	ldr.w	r2, [r8], #4
 8017294:	f8d0 e000 	ldr.w	lr, [r0]
 8017298:	b293      	uxth	r3, r2
 801729a:	ebac 0303 	sub.w	r3, ip, r3
 801729e:	0c12      	lsrs	r2, r2, #16
 80172a0:	fa13 f38e 	uxtah	r3, r3, lr
 80172a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80172a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80172ac:	b29b      	uxth	r3, r3
 80172ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80172b2:	45c1      	cmp	r9, r8
 80172b4:	f840 3b04 	str.w	r3, [r0], #4
 80172b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80172bc:	d2e8      	bcs.n	8017290 <quorem+0xb0>
 80172be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80172c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80172c6:	b922      	cbnz	r2, 80172d2 <quorem+0xf2>
 80172c8:	3b04      	subs	r3, #4
 80172ca:	429d      	cmp	r5, r3
 80172cc:	461a      	mov	r2, r3
 80172ce:	d30a      	bcc.n	80172e6 <quorem+0x106>
 80172d0:	613c      	str	r4, [r7, #16]
 80172d2:	4630      	mov	r0, r6
 80172d4:	b003      	add	sp, #12
 80172d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172da:	6812      	ldr	r2, [r2, #0]
 80172dc:	3b04      	subs	r3, #4
 80172de:	2a00      	cmp	r2, #0
 80172e0:	d1cc      	bne.n	801727c <quorem+0x9c>
 80172e2:	3c01      	subs	r4, #1
 80172e4:	e7c7      	b.n	8017276 <quorem+0x96>
 80172e6:	6812      	ldr	r2, [r2, #0]
 80172e8:	3b04      	subs	r3, #4
 80172ea:	2a00      	cmp	r2, #0
 80172ec:	d1f0      	bne.n	80172d0 <quorem+0xf0>
 80172ee:	3c01      	subs	r4, #1
 80172f0:	e7eb      	b.n	80172ca <quorem+0xea>
 80172f2:	2000      	movs	r0, #0
 80172f4:	e7ee      	b.n	80172d4 <quorem+0xf4>
	...

080172f8 <_dtoa_r>:
 80172f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172fc:	ed2d 8b02 	vpush	{d8}
 8017300:	ec57 6b10 	vmov	r6, r7, d0
 8017304:	b095      	sub	sp, #84	; 0x54
 8017306:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017308:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801730c:	9105      	str	r1, [sp, #20]
 801730e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8017312:	4604      	mov	r4, r0
 8017314:	9209      	str	r2, [sp, #36]	; 0x24
 8017316:	930f      	str	r3, [sp, #60]	; 0x3c
 8017318:	b975      	cbnz	r5, 8017338 <_dtoa_r+0x40>
 801731a:	2010      	movs	r0, #16
 801731c:	f001 fa56 	bl	80187cc <malloc>
 8017320:	4602      	mov	r2, r0
 8017322:	6260      	str	r0, [r4, #36]	; 0x24
 8017324:	b920      	cbnz	r0, 8017330 <_dtoa_r+0x38>
 8017326:	4bb2      	ldr	r3, [pc, #712]	; (80175f0 <_dtoa_r+0x2f8>)
 8017328:	21ea      	movs	r1, #234	; 0xea
 801732a:	48b2      	ldr	r0, [pc, #712]	; (80175f4 <_dtoa_r+0x2fc>)
 801732c:	f002 ffae 	bl	801a28c <__assert_func>
 8017330:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017334:	6005      	str	r5, [r0, #0]
 8017336:	60c5      	str	r5, [r0, #12]
 8017338:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801733a:	6819      	ldr	r1, [r3, #0]
 801733c:	b151      	cbz	r1, 8017354 <_dtoa_r+0x5c>
 801733e:	685a      	ldr	r2, [r3, #4]
 8017340:	604a      	str	r2, [r1, #4]
 8017342:	2301      	movs	r3, #1
 8017344:	4093      	lsls	r3, r2
 8017346:	608b      	str	r3, [r1, #8]
 8017348:	4620      	mov	r0, r4
 801734a:	f001 fa99 	bl	8018880 <_Bfree>
 801734e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017350:	2200      	movs	r2, #0
 8017352:	601a      	str	r2, [r3, #0]
 8017354:	1e3b      	subs	r3, r7, #0
 8017356:	bfb9      	ittee	lt
 8017358:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801735c:	9303      	strlt	r3, [sp, #12]
 801735e:	2300      	movge	r3, #0
 8017360:	f8c8 3000 	strge.w	r3, [r8]
 8017364:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017368:	4ba3      	ldr	r3, [pc, #652]	; (80175f8 <_dtoa_r+0x300>)
 801736a:	bfbc      	itt	lt
 801736c:	2201      	movlt	r2, #1
 801736e:	f8c8 2000 	strlt.w	r2, [r8]
 8017372:	ea33 0309 	bics.w	r3, r3, r9
 8017376:	d11b      	bne.n	80173b0 <_dtoa_r+0xb8>
 8017378:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801737a:	f242 730f 	movw	r3, #9999	; 0x270f
 801737e:	6013      	str	r3, [r2, #0]
 8017380:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017384:	4333      	orrs	r3, r6
 8017386:	f000 857a 	beq.w	8017e7e <_dtoa_r+0xb86>
 801738a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801738c:	b963      	cbnz	r3, 80173a8 <_dtoa_r+0xb0>
 801738e:	4b9b      	ldr	r3, [pc, #620]	; (80175fc <_dtoa_r+0x304>)
 8017390:	e024      	b.n	80173dc <_dtoa_r+0xe4>
 8017392:	4b9b      	ldr	r3, [pc, #620]	; (8017600 <_dtoa_r+0x308>)
 8017394:	9300      	str	r3, [sp, #0]
 8017396:	3308      	adds	r3, #8
 8017398:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801739a:	6013      	str	r3, [r2, #0]
 801739c:	9800      	ldr	r0, [sp, #0]
 801739e:	b015      	add	sp, #84	; 0x54
 80173a0:	ecbd 8b02 	vpop	{d8}
 80173a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173a8:	4b94      	ldr	r3, [pc, #592]	; (80175fc <_dtoa_r+0x304>)
 80173aa:	9300      	str	r3, [sp, #0]
 80173ac:	3303      	adds	r3, #3
 80173ae:	e7f3      	b.n	8017398 <_dtoa_r+0xa0>
 80173b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80173b4:	2200      	movs	r2, #0
 80173b6:	ec51 0b17 	vmov	r0, r1, d7
 80173ba:	2300      	movs	r3, #0
 80173bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80173c0:	f7e9 fb9a 	bl	8000af8 <__aeabi_dcmpeq>
 80173c4:	4680      	mov	r8, r0
 80173c6:	b158      	cbz	r0, 80173e0 <_dtoa_r+0xe8>
 80173c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80173ca:	2301      	movs	r3, #1
 80173cc:	6013      	str	r3, [r2, #0]
 80173ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	f000 8551 	beq.w	8017e78 <_dtoa_r+0xb80>
 80173d6:	488b      	ldr	r0, [pc, #556]	; (8017604 <_dtoa_r+0x30c>)
 80173d8:	6018      	str	r0, [r3, #0]
 80173da:	1e43      	subs	r3, r0, #1
 80173dc:	9300      	str	r3, [sp, #0]
 80173de:	e7dd      	b.n	801739c <_dtoa_r+0xa4>
 80173e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80173e4:	aa12      	add	r2, sp, #72	; 0x48
 80173e6:	a913      	add	r1, sp, #76	; 0x4c
 80173e8:	4620      	mov	r0, r4
 80173ea:	f001 fdf1 	bl	8018fd0 <__d2b>
 80173ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80173f2:	4683      	mov	fp, r0
 80173f4:	2d00      	cmp	r5, #0
 80173f6:	d07c      	beq.n	80174f2 <_dtoa_r+0x1fa>
 80173f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80173fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80173fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017402:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8017406:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801740a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801740e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017412:	4b7d      	ldr	r3, [pc, #500]	; (8017608 <_dtoa_r+0x310>)
 8017414:	2200      	movs	r2, #0
 8017416:	4630      	mov	r0, r6
 8017418:	4639      	mov	r1, r7
 801741a:	f7e8 ff4d 	bl	80002b8 <__aeabi_dsub>
 801741e:	a36e      	add	r3, pc, #440	; (adr r3, 80175d8 <_dtoa_r+0x2e0>)
 8017420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017424:	f7e9 f900 	bl	8000628 <__aeabi_dmul>
 8017428:	a36d      	add	r3, pc, #436	; (adr r3, 80175e0 <_dtoa_r+0x2e8>)
 801742a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801742e:	f7e8 ff45 	bl	80002bc <__adddf3>
 8017432:	4606      	mov	r6, r0
 8017434:	4628      	mov	r0, r5
 8017436:	460f      	mov	r7, r1
 8017438:	f7e9 f88c 	bl	8000554 <__aeabi_i2d>
 801743c:	a36a      	add	r3, pc, #424	; (adr r3, 80175e8 <_dtoa_r+0x2f0>)
 801743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017442:	f7e9 f8f1 	bl	8000628 <__aeabi_dmul>
 8017446:	4602      	mov	r2, r0
 8017448:	460b      	mov	r3, r1
 801744a:	4630      	mov	r0, r6
 801744c:	4639      	mov	r1, r7
 801744e:	f7e8 ff35 	bl	80002bc <__adddf3>
 8017452:	4606      	mov	r6, r0
 8017454:	460f      	mov	r7, r1
 8017456:	f7e9 fb97 	bl	8000b88 <__aeabi_d2iz>
 801745a:	2200      	movs	r2, #0
 801745c:	4682      	mov	sl, r0
 801745e:	2300      	movs	r3, #0
 8017460:	4630      	mov	r0, r6
 8017462:	4639      	mov	r1, r7
 8017464:	f7e9 fb52 	bl	8000b0c <__aeabi_dcmplt>
 8017468:	b148      	cbz	r0, 801747e <_dtoa_r+0x186>
 801746a:	4650      	mov	r0, sl
 801746c:	f7e9 f872 	bl	8000554 <__aeabi_i2d>
 8017470:	4632      	mov	r2, r6
 8017472:	463b      	mov	r3, r7
 8017474:	f7e9 fb40 	bl	8000af8 <__aeabi_dcmpeq>
 8017478:	b908      	cbnz	r0, 801747e <_dtoa_r+0x186>
 801747a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801747e:	f1ba 0f16 	cmp.w	sl, #22
 8017482:	d854      	bhi.n	801752e <_dtoa_r+0x236>
 8017484:	4b61      	ldr	r3, [pc, #388]	; (801760c <_dtoa_r+0x314>)
 8017486:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801748a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801748e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017492:	f7e9 fb3b 	bl	8000b0c <__aeabi_dcmplt>
 8017496:	2800      	cmp	r0, #0
 8017498:	d04b      	beq.n	8017532 <_dtoa_r+0x23a>
 801749a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801749e:	2300      	movs	r3, #0
 80174a0:	930e      	str	r3, [sp, #56]	; 0x38
 80174a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80174a4:	1b5d      	subs	r5, r3, r5
 80174a6:	1e6b      	subs	r3, r5, #1
 80174a8:	9304      	str	r3, [sp, #16]
 80174aa:	bf43      	ittte	mi
 80174ac:	2300      	movmi	r3, #0
 80174ae:	f1c5 0801 	rsbmi	r8, r5, #1
 80174b2:	9304      	strmi	r3, [sp, #16]
 80174b4:	f04f 0800 	movpl.w	r8, #0
 80174b8:	f1ba 0f00 	cmp.w	sl, #0
 80174bc:	db3b      	blt.n	8017536 <_dtoa_r+0x23e>
 80174be:	9b04      	ldr	r3, [sp, #16]
 80174c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80174c4:	4453      	add	r3, sl
 80174c6:	9304      	str	r3, [sp, #16]
 80174c8:	2300      	movs	r3, #0
 80174ca:	9306      	str	r3, [sp, #24]
 80174cc:	9b05      	ldr	r3, [sp, #20]
 80174ce:	2b09      	cmp	r3, #9
 80174d0:	d869      	bhi.n	80175a6 <_dtoa_r+0x2ae>
 80174d2:	2b05      	cmp	r3, #5
 80174d4:	bfc4      	itt	gt
 80174d6:	3b04      	subgt	r3, #4
 80174d8:	9305      	strgt	r3, [sp, #20]
 80174da:	9b05      	ldr	r3, [sp, #20]
 80174dc:	f1a3 0302 	sub.w	r3, r3, #2
 80174e0:	bfcc      	ite	gt
 80174e2:	2500      	movgt	r5, #0
 80174e4:	2501      	movle	r5, #1
 80174e6:	2b03      	cmp	r3, #3
 80174e8:	d869      	bhi.n	80175be <_dtoa_r+0x2c6>
 80174ea:	e8df f003 	tbb	[pc, r3]
 80174ee:	4e2c      	.short	0x4e2c
 80174f0:	5a4c      	.short	0x5a4c
 80174f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80174f6:	441d      	add	r5, r3
 80174f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80174fc:	2b20      	cmp	r3, #32
 80174fe:	bfc1      	itttt	gt
 8017500:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017504:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8017508:	fa09 f303 	lslgt.w	r3, r9, r3
 801750c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017510:	bfda      	itte	le
 8017512:	f1c3 0320 	rsble	r3, r3, #32
 8017516:	fa06 f003 	lslle.w	r0, r6, r3
 801751a:	4318      	orrgt	r0, r3
 801751c:	f7e9 f80a 	bl	8000534 <__aeabi_ui2d>
 8017520:	2301      	movs	r3, #1
 8017522:	4606      	mov	r6, r0
 8017524:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8017528:	3d01      	subs	r5, #1
 801752a:	9310      	str	r3, [sp, #64]	; 0x40
 801752c:	e771      	b.n	8017412 <_dtoa_r+0x11a>
 801752e:	2301      	movs	r3, #1
 8017530:	e7b6      	b.n	80174a0 <_dtoa_r+0x1a8>
 8017532:	900e      	str	r0, [sp, #56]	; 0x38
 8017534:	e7b5      	b.n	80174a2 <_dtoa_r+0x1aa>
 8017536:	f1ca 0300 	rsb	r3, sl, #0
 801753a:	9306      	str	r3, [sp, #24]
 801753c:	2300      	movs	r3, #0
 801753e:	eba8 080a 	sub.w	r8, r8, sl
 8017542:	930d      	str	r3, [sp, #52]	; 0x34
 8017544:	e7c2      	b.n	80174cc <_dtoa_r+0x1d4>
 8017546:	2300      	movs	r3, #0
 8017548:	9308      	str	r3, [sp, #32]
 801754a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801754c:	2b00      	cmp	r3, #0
 801754e:	dc39      	bgt.n	80175c4 <_dtoa_r+0x2cc>
 8017550:	f04f 0901 	mov.w	r9, #1
 8017554:	f8cd 9004 	str.w	r9, [sp, #4]
 8017558:	464b      	mov	r3, r9
 801755a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801755e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017560:	2200      	movs	r2, #0
 8017562:	6042      	str	r2, [r0, #4]
 8017564:	2204      	movs	r2, #4
 8017566:	f102 0614 	add.w	r6, r2, #20
 801756a:	429e      	cmp	r6, r3
 801756c:	6841      	ldr	r1, [r0, #4]
 801756e:	d92f      	bls.n	80175d0 <_dtoa_r+0x2d8>
 8017570:	4620      	mov	r0, r4
 8017572:	f001 f945 	bl	8018800 <_Balloc>
 8017576:	9000      	str	r0, [sp, #0]
 8017578:	2800      	cmp	r0, #0
 801757a:	d14b      	bne.n	8017614 <_dtoa_r+0x31c>
 801757c:	4b24      	ldr	r3, [pc, #144]	; (8017610 <_dtoa_r+0x318>)
 801757e:	4602      	mov	r2, r0
 8017580:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017584:	e6d1      	b.n	801732a <_dtoa_r+0x32>
 8017586:	2301      	movs	r3, #1
 8017588:	e7de      	b.n	8017548 <_dtoa_r+0x250>
 801758a:	2300      	movs	r3, #0
 801758c:	9308      	str	r3, [sp, #32]
 801758e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017590:	eb0a 0903 	add.w	r9, sl, r3
 8017594:	f109 0301 	add.w	r3, r9, #1
 8017598:	2b01      	cmp	r3, #1
 801759a:	9301      	str	r3, [sp, #4]
 801759c:	bfb8      	it	lt
 801759e:	2301      	movlt	r3, #1
 80175a0:	e7dd      	b.n	801755e <_dtoa_r+0x266>
 80175a2:	2301      	movs	r3, #1
 80175a4:	e7f2      	b.n	801758c <_dtoa_r+0x294>
 80175a6:	2501      	movs	r5, #1
 80175a8:	2300      	movs	r3, #0
 80175aa:	9305      	str	r3, [sp, #20]
 80175ac:	9508      	str	r5, [sp, #32]
 80175ae:	f04f 39ff 	mov.w	r9, #4294967295
 80175b2:	2200      	movs	r2, #0
 80175b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80175b8:	2312      	movs	r3, #18
 80175ba:	9209      	str	r2, [sp, #36]	; 0x24
 80175bc:	e7cf      	b.n	801755e <_dtoa_r+0x266>
 80175be:	2301      	movs	r3, #1
 80175c0:	9308      	str	r3, [sp, #32]
 80175c2:	e7f4      	b.n	80175ae <_dtoa_r+0x2b6>
 80175c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80175c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80175cc:	464b      	mov	r3, r9
 80175ce:	e7c6      	b.n	801755e <_dtoa_r+0x266>
 80175d0:	3101      	adds	r1, #1
 80175d2:	6041      	str	r1, [r0, #4]
 80175d4:	0052      	lsls	r2, r2, #1
 80175d6:	e7c6      	b.n	8017566 <_dtoa_r+0x26e>
 80175d8:	636f4361 	.word	0x636f4361
 80175dc:	3fd287a7 	.word	0x3fd287a7
 80175e0:	8b60c8b3 	.word	0x8b60c8b3
 80175e4:	3fc68a28 	.word	0x3fc68a28
 80175e8:	509f79fb 	.word	0x509f79fb
 80175ec:	3fd34413 	.word	0x3fd34413
 80175f0:	0801b12e 	.word	0x0801b12e
 80175f4:	0801b145 	.word	0x0801b145
 80175f8:	7ff00000 	.word	0x7ff00000
 80175fc:	0801b12a 	.word	0x0801b12a
 8017600:	0801b121 	.word	0x0801b121
 8017604:	0801b40a 	.word	0x0801b40a
 8017608:	3ff80000 	.word	0x3ff80000
 801760c:	0801b320 	.word	0x0801b320
 8017610:	0801b1a4 	.word	0x0801b1a4
 8017614:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017616:	9a00      	ldr	r2, [sp, #0]
 8017618:	601a      	str	r2, [r3, #0]
 801761a:	9b01      	ldr	r3, [sp, #4]
 801761c:	2b0e      	cmp	r3, #14
 801761e:	f200 80ad 	bhi.w	801777c <_dtoa_r+0x484>
 8017622:	2d00      	cmp	r5, #0
 8017624:	f000 80aa 	beq.w	801777c <_dtoa_r+0x484>
 8017628:	f1ba 0f00 	cmp.w	sl, #0
 801762c:	dd36      	ble.n	801769c <_dtoa_r+0x3a4>
 801762e:	4ac3      	ldr	r2, [pc, #780]	; (801793c <_dtoa_r+0x644>)
 8017630:	f00a 030f 	and.w	r3, sl, #15
 8017634:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017638:	ed93 7b00 	vldr	d7, [r3]
 801763c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8017640:	ea4f 172a 	mov.w	r7, sl, asr #4
 8017644:	eeb0 8a47 	vmov.f32	s16, s14
 8017648:	eef0 8a67 	vmov.f32	s17, s15
 801764c:	d016      	beq.n	801767c <_dtoa_r+0x384>
 801764e:	4bbc      	ldr	r3, [pc, #752]	; (8017940 <_dtoa_r+0x648>)
 8017650:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017654:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017658:	f7e9 f910 	bl	800087c <__aeabi_ddiv>
 801765c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017660:	f007 070f 	and.w	r7, r7, #15
 8017664:	2503      	movs	r5, #3
 8017666:	4eb6      	ldr	r6, [pc, #728]	; (8017940 <_dtoa_r+0x648>)
 8017668:	b957      	cbnz	r7, 8017680 <_dtoa_r+0x388>
 801766a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801766e:	ec53 2b18 	vmov	r2, r3, d8
 8017672:	f7e9 f903 	bl	800087c <__aeabi_ddiv>
 8017676:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801767a:	e029      	b.n	80176d0 <_dtoa_r+0x3d8>
 801767c:	2502      	movs	r5, #2
 801767e:	e7f2      	b.n	8017666 <_dtoa_r+0x36e>
 8017680:	07f9      	lsls	r1, r7, #31
 8017682:	d508      	bpl.n	8017696 <_dtoa_r+0x39e>
 8017684:	ec51 0b18 	vmov	r0, r1, d8
 8017688:	e9d6 2300 	ldrd	r2, r3, [r6]
 801768c:	f7e8 ffcc 	bl	8000628 <__aeabi_dmul>
 8017690:	ec41 0b18 	vmov	d8, r0, r1
 8017694:	3501      	adds	r5, #1
 8017696:	107f      	asrs	r7, r7, #1
 8017698:	3608      	adds	r6, #8
 801769a:	e7e5      	b.n	8017668 <_dtoa_r+0x370>
 801769c:	f000 80a6 	beq.w	80177ec <_dtoa_r+0x4f4>
 80176a0:	f1ca 0600 	rsb	r6, sl, #0
 80176a4:	4ba5      	ldr	r3, [pc, #660]	; (801793c <_dtoa_r+0x644>)
 80176a6:	4fa6      	ldr	r7, [pc, #664]	; (8017940 <_dtoa_r+0x648>)
 80176a8:	f006 020f 	and.w	r2, r6, #15
 80176ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80176b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80176b8:	f7e8 ffb6 	bl	8000628 <__aeabi_dmul>
 80176bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80176c0:	1136      	asrs	r6, r6, #4
 80176c2:	2300      	movs	r3, #0
 80176c4:	2502      	movs	r5, #2
 80176c6:	2e00      	cmp	r6, #0
 80176c8:	f040 8085 	bne.w	80177d6 <_dtoa_r+0x4de>
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d1d2      	bne.n	8017676 <_dtoa_r+0x37e>
 80176d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	f000 808c 	beq.w	80177f0 <_dtoa_r+0x4f8>
 80176d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80176dc:	4b99      	ldr	r3, [pc, #612]	; (8017944 <_dtoa_r+0x64c>)
 80176de:	2200      	movs	r2, #0
 80176e0:	4630      	mov	r0, r6
 80176e2:	4639      	mov	r1, r7
 80176e4:	f7e9 fa12 	bl	8000b0c <__aeabi_dcmplt>
 80176e8:	2800      	cmp	r0, #0
 80176ea:	f000 8081 	beq.w	80177f0 <_dtoa_r+0x4f8>
 80176ee:	9b01      	ldr	r3, [sp, #4]
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d07d      	beq.n	80177f0 <_dtoa_r+0x4f8>
 80176f4:	f1b9 0f00 	cmp.w	r9, #0
 80176f8:	dd3c      	ble.n	8017774 <_dtoa_r+0x47c>
 80176fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80176fe:	9307      	str	r3, [sp, #28]
 8017700:	2200      	movs	r2, #0
 8017702:	4b91      	ldr	r3, [pc, #580]	; (8017948 <_dtoa_r+0x650>)
 8017704:	4630      	mov	r0, r6
 8017706:	4639      	mov	r1, r7
 8017708:	f7e8 ff8e 	bl	8000628 <__aeabi_dmul>
 801770c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017710:	3501      	adds	r5, #1
 8017712:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8017716:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801771a:	4628      	mov	r0, r5
 801771c:	f7e8 ff1a 	bl	8000554 <__aeabi_i2d>
 8017720:	4632      	mov	r2, r6
 8017722:	463b      	mov	r3, r7
 8017724:	f7e8 ff80 	bl	8000628 <__aeabi_dmul>
 8017728:	4b88      	ldr	r3, [pc, #544]	; (801794c <_dtoa_r+0x654>)
 801772a:	2200      	movs	r2, #0
 801772c:	f7e8 fdc6 	bl	80002bc <__adddf3>
 8017730:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8017734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017738:	9303      	str	r3, [sp, #12]
 801773a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801773c:	2b00      	cmp	r3, #0
 801773e:	d15c      	bne.n	80177fa <_dtoa_r+0x502>
 8017740:	4b83      	ldr	r3, [pc, #524]	; (8017950 <_dtoa_r+0x658>)
 8017742:	2200      	movs	r2, #0
 8017744:	4630      	mov	r0, r6
 8017746:	4639      	mov	r1, r7
 8017748:	f7e8 fdb6 	bl	80002b8 <__aeabi_dsub>
 801774c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017750:	4606      	mov	r6, r0
 8017752:	460f      	mov	r7, r1
 8017754:	f7e9 f9f8 	bl	8000b48 <__aeabi_dcmpgt>
 8017758:	2800      	cmp	r0, #0
 801775a:	f040 8296 	bne.w	8017c8a <_dtoa_r+0x992>
 801775e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017762:	4630      	mov	r0, r6
 8017764:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017768:	4639      	mov	r1, r7
 801776a:	f7e9 f9cf 	bl	8000b0c <__aeabi_dcmplt>
 801776e:	2800      	cmp	r0, #0
 8017770:	f040 8288 	bne.w	8017c84 <_dtoa_r+0x98c>
 8017774:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017778:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801777c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801777e:	2b00      	cmp	r3, #0
 8017780:	f2c0 8158 	blt.w	8017a34 <_dtoa_r+0x73c>
 8017784:	f1ba 0f0e 	cmp.w	sl, #14
 8017788:	f300 8154 	bgt.w	8017a34 <_dtoa_r+0x73c>
 801778c:	4b6b      	ldr	r3, [pc, #428]	; (801793c <_dtoa_r+0x644>)
 801778e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017792:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017798:	2b00      	cmp	r3, #0
 801779a:	f280 80e3 	bge.w	8017964 <_dtoa_r+0x66c>
 801779e:	9b01      	ldr	r3, [sp, #4]
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	f300 80df 	bgt.w	8017964 <_dtoa_r+0x66c>
 80177a6:	f040 826d 	bne.w	8017c84 <_dtoa_r+0x98c>
 80177aa:	4b69      	ldr	r3, [pc, #420]	; (8017950 <_dtoa_r+0x658>)
 80177ac:	2200      	movs	r2, #0
 80177ae:	4640      	mov	r0, r8
 80177b0:	4649      	mov	r1, r9
 80177b2:	f7e8 ff39 	bl	8000628 <__aeabi_dmul>
 80177b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80177ba:	f7e9 f9bb 	bl	8000b34 <__aeabi_dcmpge>
 80177be:	9e01      	ldr	r6, [sp, #4]
 80177c0:	4637      	mov	r7, r6
 80177c2:	2800      	cmp	r0, #0
 80177c4:	f040 8243 	bne.w	8017c4e <_dtoa_r+0x956>
 80177c8:	9d00      	ldr	r5, [sp, #0]
 80177ca:	2331      	movs	r3, #49	; 0x31
 80177cc:	f805 3b01 	strb.w	r3, [r5], #1
 80177d0:	f10a 0a01 	add.w	sl, sl, #1
 80177d4:	e23f      	b.n	8017c56 <_dtoa_r+0x95e>
 80177d6:	07f2      	lsls	r2, r6, #31
 80177d8:	d505      	bpl.n	80177e6 <_dtoa_r+0x4ee>
 80177da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80177de:	f7e8 ff23 	bl	8000628 <__aeabi_dmul>
 80177e2:	3501      	adds	r5, #1
 80177e4:	2301      	movs	r3, #1
 80177e6:	1076      	asrs	r6, r6, #1
 80177e8:	3708      	adds	r7, #8
 80177ea:	e76c      	b.n	80176c6 <_dtoa_r+0x3ce>
 80177ec:	2502      	movs	r5, #2
 80177ee:	e76f      	b.n	80176d0 <_dtoa_r+0x3d8>
 80177f0:	9b01      	ldr	r3, [sp, #4]
 80177f2:	f8cd a01c 	str.w	sl, [sp, #28]
 80177f6:	930c      	str	r3, [sp, #48]	; 0x30
 80177f8:	e78d      	b.n	8017716 <_dtoa_r+0x41e>
 80177fa:	9900      	ldr	r1, [sp, #0]
 80177fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80177fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017800:	4b4e      	ldr	r3, [pc, #312]	; (801793c <_dtoa_r+0x644>)
 8017802:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017806:	4401      	add	r1, r0
 8017808:	9102      	str	r1, [sp, #8]
 801780a:	9908      	ldr	r1, [sp, #32]
 801780c:	eeb0 8a47 	vmov.f32	s16, s14
 8017810:	eef0 8a67 	vmov.f32	s17, s15
 8017814:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017818:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801781c:	2900      	cmp	r1, #0
 801781e:	d045      	beq.n	80178ac <_dtoa_r+0x5b4>
 8017820:	494c      	ldr	r1, [pc, #304]	; (8017954 <_dtoa_r+0x65c>)
 8017822:	2000      	movs	r0, #0
 8017824:	f7e9 f82a 	bl	800087c <__aeabi_ddiv>
 8017828:	ec53 2b18 	vmov	r2, r3, d8
 801782c:	f7e8 fd44 	bl	80002b8 <__aeabi_dsub>
 8017830:	9d00      	ldr	r5, [sp, #0]
 8017832:	ec41 0b18 	vmov	d8, r0, r1
 8017836:	4639      	mov	r1, r7
 8017838:	4630      	mov	r0, r6
 801783a:	f7e9 f9a5 	bl	8000b88 <__aeabi_d2iz>
 801783e:	900c      	str	r0, [sp, #48]	; 0x30
 8017840:	f7e8 fe88 	bl	8000554 <__aeabi_i2d>
 8017844:	4602      	mov	r2, r0
 8017846:	460b      	mov	r3, r1
 8017848:	4630      	mov	r0, r6
 801784a:	4639      	mov	r1, r7
 801784c:	f7e8 fd34 	bl	80002b8 <__aeabi_dsub>
 8017850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017852:	3330      	adds	r3, #48	; 0x30
 8017854:	f805 3b01 	strb.w	r3, [r5], #1
 8017858:	ec53 2b18 	vmov	r2, r3, d8
 801785c:	4606      	mov	r6, r0
 801785e:	460f      	mov	r7, r1
 8017860:	f7e9 f954 	bl	8000b0c <__aeabi_dcmplt>
 8017864:	2800      	cmp	r0, #0
 8017866:	d165      	bne.n	8017934 <_dtoa_r+0x63c>
 8017868:	4632      	mov	r2, r6
 801786a:	463b      	mov	r3, r7
 801786c:	4935      	ldr	r1, [pc, #212]	; (8017944 <_dtoa_r+0x64c>)
 801786e:	2000      	movs	r0, #0
 8017870:	f7e8 fd22 	bl	80002b8 <__aeabi_dsub>
 8017874:	ec53 2b18 	vmov	r2, r3, d8
 8017878:	f7e9 f948 	bl	8000b0c <__aeabi_dcmplt>
 801787c:	2800      	cmp	r0, #0
 801787e:	f040 80b9 	bne.w	80179f4 <_dtoa_r+0x6fc>
 8017882:	9b02      	ldr	r3, [sp, #8]
 8017884:	429d      	cmp	r5, r3
 8017886:	f43f af75 	beq.w	8017774 <_dtoa_r+0x47c>
 801788a:	4b2f      	ldr	r3, [pc, #188]	; (8017948 <_dtoa_r+0x650>)
 801788c:	ec51 0b18 	vmov	r0, r1, d8
 8017890:	2200      	movs	r2, #0
 8017892:	f7e8 fec9 	bl	8000628 <__aeabi_dmul>
 8017896:	4b2c      	ldr	r3, [pc, #176]	; (8017948 <_dtoa_r+0x650>)
 8017898:	ec41 0b18 	vmov	d8, r0, r1
 801789c:	2200      	movs	r2, #0
 801789e:	4630      	mov	r0, r6
 80178a0:	4639      	mov	r1, r7
 80178a2:	f7e8 fec1 	bl	8000628 <__aeabi_dmul>
 80178a6:	4606      	mov	r6, r0
 80178a8:	460f      	mov	r7, r1
 80178aa:	e7c4      	b.n	8017836 <_dtoa_r+0x53e>
 80178ac:	ec51 0b17 	vmov	r0, r1, d7
 80178b0:	f7e8 feba 	bl	8000628 <__aeabi_dmul>
 80178b4:	9b02      	ldr	r3, [sp, #8]
 80178b6:	9d00      	ldr	r5, [sp, #0]
 80178b8:	930c      	str	r3, [sp, #48]	; 0x30
 80178ba:	ec41 0b18 	vmov	d8, r0, r1
 80178be:	4639      	mov	r1, r7
 80178c0:	4630      	mov	r0, r6
 80178c2:	f7e9 f961 	bl	8000b88 <__aeabi_d2iz>
 80178c6:	9011      	str	r0, [sp, #68]	; 0x44
 80178c8:	f7e8 fe44 	bl	8000554 <__aeabi_i2d>
 80178cc:	4602      	mov	r2, r0
 80178ce:	460b      	mov	r3, r1
 80178d0:	4630      	mov	r0, r6
 80178d2:	4639      	mov	r1, r7
 80178d4:	f7e8 fcf0 	bl	80002b8 <__aeabi_dsub>
 80178d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80178da:	3330      	adds	r3, #48	; 0x30
 80178dc:	f805 3b01 	strb.w	r3, [r5], #1
 80178e0:	9b02      	ldr	r3, [sp, #8]
 80178e2:	429d      	cmp	r5, r3
 80178e4:	4606      	mov	r6, r0
 80178e6:	460f      	mov	r7, r1
 80178e8:	f04f 0200 	mov.w	r2, #0
 80178ec:	d134      	bne.n	8017958 <_dtoa_r+0x660>
 80178ee:	4b19      	ldr	r3, [pc, #100]	; (8017954 <_dtoa_r+0x65c>)
 80178f0:	ec51 0b18 	vmov	r0, r1, d8
 80178f4:	f7e8 fce2 	bl	80002bc <__adddf3>
 80178f8:	4602      	mov	r2, r0
 80178fa:	460b      	mov	r3, r1
 80178fc:	4630      	mov	r0, r6
 80178fe:	4639      	mov	r1, r7
 8017900:	f7e9 f922 	bl	8000b48 <__aeabi_dcmpgt>
 8017904:	2800      	cmp	r0, #0
 8017906:	d175      	bne.n	80179f4 <_dtoa_r+0x6fc>
 8017908:	ec53 2b18 	vmov	r2, r3, d8
 801790c:	4911      	ldr	r1, [pc, #68]	; (8017954 <_dtoa_r+0x65c>)
 801790e:	2000      	movs	r0, #0
 8017910:	f7e8 fcd2 	bl	80002b8 <__aeabi_dsub>
 8017914:	4602      	mov	r2, r0
 8017916:	460b      	mov	r3, r1
 8017918:	4630      	mov	r0, r6
 801791a:	4639      	mov	r1, r7
 801791c:	f7e9 f8f6 	bl	8000b0c <__aeabi_dcmplt>
 8017920:	2800      	cmp	r0, #0
 8017922:	f43f af27 	beq.w	8017774 <_dtoa_r+0x47c>
 8017926:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017928:	1e6b      	subs	r3, r5, #1
 801792a:	930c      	str	r3, [sp, #48]	; 0x30
 801792c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017930:	2b30      	cmp	r3, #48	; 0x30
 8017932:	d0f8      	beq.n	8017926 <_dtoa_r+0x62e>
 8017934:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017938:	e04a      	b.n	80179d0 <_dtoa_r+0x6d8>
 801793a:	bf00      	nop
 801793c:	0801b320 	.word	0x0801b320
 8017940:	0801b2f8 	.word	0x0801b2f8
 8017944:	3ff00000 	.word	0x3ff00000
 8017948:	40240000 	.word	0x40240000
 801794c:	401c0000 	.word	0x401c0000
 8017950:	40140000 	.word	0x40140000
 8017954:	3fe00000 	.word	0x3fe00000
 8017958:	4baf      	ldr	r3, [pc, #700]	; (8017c18 <_dtoa_r+0x920>)
 801795a:	f7e8 fe65 	bl	8000628 <__aeabi_dmul>
 801795e:	4606      	mov	r6, r0
 8017960:	460f      	mov	r7, r1
 8017962:	e7ac      	b.n	80178be <_dtoa_r+0x5c6>
 8017964:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017968:	9d00      	ldr	r5, [sp, #0]
 801796a:	4642      	mov	r2, r8
 801796c:	464b      	mov	r3, r9
 801796e:	4630      	mov	r0, r6
 8017970:	4639      	mov	r1, r7
 8017972:	f7e8 ff83 	bl	800087c <__aeabi_ddiv>
 8017976:	f7e9 f907 	bl	8000b88 <__aeabi_d2iz>
 801797a:	9002      	str	r0, [sp, #8]
 801797c:	f7e8 fdea 	bl	8000554 <__aeabi_i2d>
 8017980:	4642      	mov	r2, r8
 8017982:	464b      	mov	r3, r9
 8017984:	f7e8 fe50 	bl	8000628 <__aeabi_dmul>
 8017988:	4602      	mov	r2, r0
 801798a:	460b      	mov	r3, r1
 801798c:	4630      	mov	r0, r6
 801798e:	4639      	mov	r1, r7
 8017990:	f7e8 fc92 	bl	80002b8 <__aeabi_dsub>
 8017994:	9e02      	ldr	r6, [sp, #8]
 8017996:	9f01      	ldr	r7, [sp, #4]
 8017998:	3630      	adds	r6, #48	; 0x30
 801799a:	f805 6b01 	strb.w	r6, [r5], #1
 801799e:	9e00      	ldr	r6, [sp, #0]
 80179a0:	1bae      	subs	r6, r5, r6
 80179a2:	42b7      	cmp	r7, r6
 80179a4:	4602      	mov	r2, r0
 80179a6:	460b      	mov	r3, r1
 80179a8:	d137      	bne.n	8017a1a <_dtoa_r+0x722>
 80179aa:	f7e8 fc87 	bl	80002bc <__adddf3>
 80179ae:	4642      	mov	r2, r8
 80179b0:	464b      	mov	r3, r9
 80179b2:	4606      	mov	r6, r0
 80179b4:	460f      	mov	r7, r1
 80179b6:	f7e9 f8c7 	bl	8000b48 <__aeabi_dcmpgt>
 80179ba:	b9c8      	cbnz	r0, 80179f0 <_dtoa_r+0x6f8>
 80179bc:	4642      	mov	r2, r8
 80179be:	464b      	mov	r3, r9
 80179c0:	4630      	mov	r0, r6
 80179c2:	4639      	mov	r1, r7
 80179c4:	f7e9 f898 	bl	8000af8 <__aeabi_dcmpeq>
 80179c8:	b110      	cbz	r0, 80179d0 <_dtoa_r+0x6d8>
 80179ca:	9b02      	ldr	r3, [sp, #8]
 80179cc:	07d9      	lsls	r1, r3, #31
 80179ce:	d40f      	bmi.n	80179f0 <_dtoa_r+0x6f8>
 80179d0:	4620      	mov	r0, r4
 80179d2:	4659      	mov	r1, fp
 80179d4:	f000 ff54 	bl	8018880 <_Bfree>
 80179d8:	2300      	movs	r3, #0
 80179da:	702b      	strb	r3, [r5, #0]
 80179dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80179de:	f10a 0001 	add.w	r0, sl, #1
 80179e2:	6018      	str	r0, [r3, #0]
 80179e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	f43f acd8 	beq.w	801739c <_dtoa_r+0xa4>
 80179ec:	601d      	str	r5, [r3, #0]
 80179ee:	e4d5      	b.n	801739c <_dtoa_r+0xa4>
 80179f0:	f8cd a01c 	str.w	sl, [sp, #28]
 80179f4:	462b      	mov	r3, r5
 80179f6:	461d      	mov	r5, r3
 80179f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80179fc:	2a39      	cmp	r2, #57	; 0x39
 80179fe:	d108      	bne.n	8017a12 <_dtoa_r+0x71a>
 8017a00:	9a00      	ldr	r2, [sp, #0]
 8017a02:	429a      	cmp	r2, r3
 8017a04:	d1f7      	bne.n	80179f6 <_dtoa_r+0x6fe>
 8017a06:	9a07      	ldr	r2, [sp, #28]
 8017a08:	9900      	ldr	r1, [sp, #0]
 8017a0a:	3201      	adds	r2, #1
 8017a0c:	9207      	str	r2, [sp, #28]
 8017a0e:	2230      	movs	r2, #48	; 0x30
 8017a10:	700a      	strb	r2, [r1, #0]
 8017a12:	781a      	ldrb	r2, [r3, #0]
 8017a14:	3201      	adds	r2, #1
 8017a16:	701a      	strb	r2, [r3, #0]
 8017a18:	e78c      	b.n	8017934 <_dtoa_r+0x63c>
 8017a1a:	4b7f      	ldr	r3, [pc, #508]	; (8017c18 <_dtoa_r+0x920>)
 8017a1c:	2200      	movs	r2, #0
 8017a1e:	f7e8 fe03 	bl	8000628 <__aeabi_dmul>
 8017a22:	2200      	movs	r2, #0
 8017a24:	2300      	movs	r3, #0
 8017a26:	4606      	mov	r6, r0
 8017a28:	460f      	mov	r7, r1
 8017a2a:	f7e9 f865 	bl	8000af8 <__aeabi_dcmpeq>
 8017a2e:	2800      	cmp	r0, #0
 8017a30:	d09b      	beq.n	801796a <_dtoa_r+0x672>
 8017a32:	e7cd      	b.n	80179d0 <_dtoa_r+0x6d8>
 8017a34:	9a08      	ldr	r2, [sp, #32]
 8017a36:	2a00      	cmp	r2, #0
 8017a38:	f000 80c4 	beq.w	8017bc4 <_dtoa_r+0x8cc>
 8017a3c:	9a05      	ldr	r2, [sp, #20]
 8017a3e:	2a01      	cmp	r2, #1
 8017a40:	f300 80a8 	bgt.w	8017b94 <_dtoa_r+0x89c>
 8017a44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017a46:	2a00      	cmp	r2, #0
 8017a48:	f000 80a0 	beq.w	8017b8c <_dtoa_r+0x894>
 8017a4c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017a50:	9e06      	ldr	r6, [sp, #24]
 8017a52:	4645      	mov	r5, r8
 8017a54:	9a04      	ldr	r2, [sp, #16]
 8017a56:	2101      	movs	r1, #1
 8017a58:	441a      	add	r2, r3
 8017a5a:	4620      	mov	r0, r4
 8017a5c:	4498      	add	r8, r3
 8017a5e:	9204      	str	r2, [sp, #16]
 8017a60:	f001 f814 	bl	8018a8c <__i2b>
 8017a64:	4607      	mov	r7, r0
 8017a66:	2d00      	cmp	r5, #0
 8017a68:	dd0b      	ble.n	8017a82 <_dtoa_r+0x78a>
 8017a6a:	9b04      	ldr	r3, [sp, #16]
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	dd08      	ble.n	8017a82 <_dtoa_r+0x78a>
 8017a70:	42ab      	cmp	r3, r5
 8017a72:	9a04      	ldr	r2, [sp, #16]
 8017a74:	bfa8      	it	ge
 8017a76:	462b      	movge	r3, r5
 8017a78:	eba8 0803 	sub.w	r8, r8, r3
 8017a7c:	1aed      	subs	r5, r5, r3
 8017a7e:	1ad3      	subs	r3, r2, r3
 8017a80:	9304      	str	r3, [sp, #16]
 8017a82:	9b06      	ldr	r3, [sp, #24]
 8017a84:	b1fb      	cbz	r3, 8017ac6 <_dtoa_r+0x7ce>
 8017a86:	9b08      	ldr	r3, [sp, #32]
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	f000 809f 	beq.w	8017bcc <_dtoa_r+0x8d4>
 8017a8e:	2e00      	cmp	r6, #0
 8017a90:	dd11      	ble.n	8017ab6 <_dtoa_r+0x7be>
 8017a92:	4639      	mov	r1, r7
 8017a94:	4632      	mov	r2, r6
 8017a96:	4620      	mov	r0, r4
 8017a98:	f001 f8b4 	bl	8018c04 <__pow5mult>
 8017a9c:	465a      	mov	r2, fp
 8017a9e:	4601      	mov	r1, r0
 8017aa0:	4607      	mov	r7, r0
 8017aa2:	4620      	mov	r0, r4
 8017aa4:	f001 f808 	bl	8018ab8 <__multiply>
 8017aa8:	4659      	mov	r1, fp
 8017aaa:	9007      	str	r0, [sp, #28]
 8017aac:	4620      	mov	r0, r4
 8017aae:	f000 fee7 	bl	8018880 <_Bfree>
 8017ab2:	9b07      	ldr	r3, [sp, #28]
 8017ab4:	469b      	mov	fp, r3
 8017ab6:	9b06      	ldr	r3, [sp, #24]
 8017ab8:	1b9a      	subs	r2, r3, r6
 8017aba:	d004      	beq.n	8017ac6 <_dtoa_r+0x7ce>
 8017abc:	4659      	mov	r1, fp
 8017abe:	4620      	mov	r0, r4
 8017ac0:	f001 f8a0 	bl	8018c04 <__pow5mult>
 8017ac4:	4683      	mov	fp, r0
 8017ac6:	2101      	movs	r1, #1
 8017ac8:	4620      	mov	r0, r4
 8017aca:	f000 ffdf 	bl	8018a8c <__i2b>
 8017ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	4606      	mov	r6, r0
 8017ad4:	dd7c      	ble.n	8017bd0 <_dtoa_r+0x8d8>
 8017ad6:	461a      	mov	r2, r3
 8017ad8:	4601      	mov	r1, r0
 8017ada:	4620      	mov	r0, r4
 8017adc:	f001 f892 	bl	8018c04 <__pow5mult>
 8017ae0:	9b05      	ldr	r3, [sp, #20]
 8017ae2:	2b01      	cmp	r3, #1
 8017ae4:	4606      	mov	r6, r0
 8017ae6:	dd76      	ble.n	8017bd6 <_dtoa_r+0x8de>
 8017ae8:	2300      	movs	r3, #0
 8017aea:	9306      	str	r3, [sp, #24]
 8017aec:	6933      	ldr	r3, [r6, #16]
 8017aee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017af2:	6918      	ldr	r0, [r3, #16]
 8017af4:	f000 ff7a 	bl	80189ec <__hi0bits>
 8017af8:	f1c0 0020 	rsb	r0, r0, #32
 8017afc:	9b04      	ldr	r3, [sp, #16]
 8017afe:	4418      	add	r0, r3
 8017b00:	f010 001f 	ands.w	r0, r0, #31
 8017b04:	f000 8086 	beq.w	8017c14 <_dtoa_r+0x91c>
 8017b08:	f1c0 0320 	rsb	r3, r0, #32
 8017b0c:	2b04      	cmp	r3, #4
 8017b0e:	dd7f      	ble.n	8017c10 <_dtoa_r+0x918>
 8017b10:	f1c0 001c 	rsb	r0, r0, #28
 8017b14:	9b04      	ldr	r3, [sp, #16]
 8017b16:	4403      	add	r3, r0
 8017b18:	4480      	add	r8, r0
 8017b1a:	4405      	add	r5, r0
 8017b1c:	9304      	str	r3, [sp, #16]
 8017b1e:	f1b8 0f00 	cmp.w	r8, #0
 8017b22:	dd05      	ble.n	8017b30 <_dtoa_r+0x838>
 8017b24:	4659      	mov	r1, fp
 8017b26:	4642      	mov	r2, r8
 8017b28:	4620      	mov	r0, r4
 8017b2a:	f001 f8c5 	bl	8018cb8 <__lshift>
 8017b2e:	4683      	mov	fp, r0
 8017b30:	9b04      	ldr	r3, [sp, #16]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	dd05      	ble.n	8017b42 <_dtoa_r+0x84a>
 8017b36:	4631      	mov	r1, r6
 8017b38:	461a      	mov	r2, r3
 8017b3a:	4620      	mov	r0, r4
 8017b3c:	f001 f8bc 	bl	8018cb8 <__lshift>
 8017b40:	4606      	mov	r6, r0
 8017b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d069      	beq.n	8017c1c <_dtoa_r+0x924>
 8017b48:	4631      	mov	r1, r6
 8017b4a:	4658      	mov	r0, fp
 8017b4c:	f001 f920 	bl	8018d90 <__mcmp>
 8017b50:	2800      	cmp	r0, #0
 8017b52:	da63      	bge.n	8017c1c <_dtoa_r+0x924>
 8017b54:	2300      	movs	r3, #0
 8017b56:	4659      	mov	r1, fp
 8017b58:	220a      	movs	r2, #10
 8017b5a:	4620      	mov	r0, r4
 8017b5c:	f000 feb2 	bl	80188c4 <__multadd>
 8017b60:	9b08      	ldr	r3, [sp, #32]
 8017b62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017b66:	4683      	mov	fp, r0
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	f000 818f 	beq.w	8017e8c <_dtoa_r+0xb94>
 8017b6e:	4639      	mov	r1, r7
 8017b70:	2300      	movs	r3, #0
 8017b72:	220a      	movs	r2, #10
 8017b74:	4620      	mov	r0, r4
 8017b76:	f000 fea5 	bl	80188c4 <__multadd>
 8017b7a:	f1b9 0f00 	cmp.w	r9, #0
 8017b7e:	4607      	mov	r7, r0
 8017b80:	f300 808e 	bgt.w	8017ca0 <_dtoa_r+0x9a8>
 8017b84:	9b05      	ldr	r3, [sp, #20]
 8017b86:	2b02      	cmp	r3, #2
 8017b88:	dc50      	bgt.n	8017c2c <_dtoa_r+0x934>
 8017b8a:	e089      	b.n	8017ca0 <_dtoa_r+0x9a8>
 8017b8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017b8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017b92:	e75d      	b.n	8017a50 <_dtoa_r+0x758>
 8017b94:	9b01      	ldr	r3, [sp, #4]
 8017b96:	1e5e      	subs	r6, r3, #1
 8017b98:	9b06      	ldr	r3, [sp, #24]
 8017b9a:	42b3      	cmp	r3, r6
 8017b9c:	bfbf      	itttt	lt
 8017b9e:	9b06      	ldrlt	r3, [sp, #24]
 8017ba0:	9606      	strlt	r6, [sp, #24]
 8017ba2:	1af2      	sublt	r2, r6, r3
 8017ba4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8017ba6:	bfb6      	itet	lt
 8017ba8:	189b      	addlt	r3, r3, r2
 8017baa:	1b9e      	subge	r6, r3, r6
 8017bac:	930d      	strlt	r3, [sp, #52]	; 0x34
 8017bae:	9b01      	ldr	r3, [sp, #4]
 8017bb0:	bfb8      	it	lt
 8017bb2:	2600      	movlt	r6, #0
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	bfb5      	itete	lt
 8017bb8:	eba8 0503 	sublt.w	r5, r8, r3
 8017bbc:	9b01      	ldrge	r3, [sp, #4]
 8017bbe:	2300      	movlt	r3, #0
 8017bc0:	4645      	movge	r5, r8
 8017bc2:	e747      	b.n	8017a54 <_dtoa_r+0x75c>
 8017bc4:	9e06      	ldr	r6, [sp, #24]
 8017bc6:	9f08      	ldr	r7, [sp, #32]
 8017bc8:	4645      	mov	r5, r8
 8017bca:	e74c      	b.n	8017a66 <_dtoa_r+0x76e>
 8017bcc:	9a06      	ldr	r2, [sp, #24]
 8017bce:	e775      	b.n	8017abc <_dtoa_r+0x7c4>
 8017bd0:	9b05      	ldr	r3, [sp, #20]
 8017bd2:	2b01      	cmp	r3, #1
 8017bd4:	dc18      	bgt.n	8017c08 <_dtoa_r+0x910>
 8017bd6:	9b02      	ldr	r3, [sp, #8]
 8017bd8:	b9b3      	cbnz	r3, 8017c08 <_dtoa_r+0x910>
 8017bda:	9b03      	ldr	r3, [sp, #12]
 8017bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017be0:	b9a3      	cbnz	r3, 8017c0c <_dtoa_r+0x914>
 8017be2:	9b03      	ldr	r3, [sp, #12]
 8017be4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017be8:	0d1b      	lsrs	r3, r3, #20
 8017bea:	051b      	lsls	r3, r3, #20
 8017bec:	b12b      	cbz	r3, 8017bfa <_dtoa_r+0x902>
 8017bee:	9b04      	ldr	r3, [sp, #16]
 8017bf0:	3301      	adds	r3, #1
 8017bf2:	9304      	str	r3, [sp, #16]
 8017bf4:	f108 0801 	add.w	r8, r8, #1
 8017bf8:	2301      	movs	r3, #1
 8017bfa:	9306      	str	r3, [sp, #24]
 8017bfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	f47f af74 	bne.w	8017aec <_dtoa_r+0x7f4>
 8017c04:	2001      	movs	r0, #1
 8017c06:	e779      	b.n	8017afc <_dtoa_r+0x804>
 8017c08:	2300      	movs	r3, #0
 8017c0a:	e7f6      	b.n	8017bfa <_dtoa_r+0x902>
 8017c0c:	9b02      	ldr	r3, [sp, #8]
 8017c0e:	e7f4      	b.n	8017bfa <_dtoa_r+0x902>
 8017c10:	d085      	beq.n	8017b1e <_dtoa_r+0x826>
 8017c12:	4618      	mov	r0, r3
 8017c14:	301c      	adds	r0, #28
 8017c16:	e77d      	b.n	8017b14 <_dtoa_r+0x81c>
 8017c18:	40240000 	.word	0x40240000
 8017c1c:	9b01      	ldr	r3, [sp, #4]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	dc38      	bgt.n	8017c94 <_dtoa_r+0x99c>
 8017c22:	9b05      	ldr	r3, [sp, #20]
 8017c24:	2b02      	cmp	r3, #2
 8017c26:	dd35      	ble.n	8017c94 <_dtoa_r+0x99c>
 8017c28:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017c2c:	f1b9 0f00 	cmp.w	r9, #0
 8017c30:	d10d      	bne.n	8017c4e <_dtoa_r+0x956>
 8017c32:	4631      	mov	r1, r6
 8017c34:	464b      	mov	r3, r9
 8017c36:	2205      	movs	r2, #5
 8017c38:	4620      	mov	r0, r4
 8017c3a:	f000 fe43 	bl	80188c4 <__multadd>
 8017c3e:	4601      	mov	r1, r0
 8017c40:	4606      	mov	r6, r0
 8017c42:	4658      	mov	r0, fp
 8017c44:	f001 f8a4 	bl	8018d90 <__mcmp>
 8017c48:	2800      	cmp	r0, #0
 8017c4a:	f73f adbd 	bgt.w	80177c8 <_dtoa_r+0x4d0>
 8017c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c50:	9d00      	ldr	r5, [sp, #0]
 8017c52:	ea6f 0a03 	mvn.w	sl, r3
 8017c56:	f04f 0800 	mov.w	r8, #0
 8017c5a:	4631      	mov	r1, r6
 8017c5c:	4620      	mov	r0, r4
 8017c5e:	f000 fe0f 	bl	8018880 <_Bfree>
 8017c62:	2f00      	cmp	r7, #0
 8017c64:	f43f aeb4 	beq.w	80179d0 <_dtoa_r+0x6d8>
 8017c68:	f1b8 0f00 	cmp.w	r8, #0
 8017c6c:	d005      	beq.n	8017c7a <_dtoa_r+0x982>
 8017c6e:	45b8      	cmp	r8, r7
 8017c70:	d003      	beq.n	8017c7a <_dtoa_r+0x982>
 8017c72:	4641      	mov	r1, r8
 8017c74:	4620      	mov	r0, r4
 8017c76:	f000 fe03 	bl	8018880 <_Bfree>
 8017c7a:	4639      	mov	r1, r7
 8017c7c:	4620      	mov	r0, r4
 8017c7e:	f000 fdff 	bl	8018880 <_Bfree>
 8017c82:	e6a5      	b.n	80179d0 <_dtoa_r+0x6d8>
 8017c84:	2600      	movs	r6, #0
 8017c86:	4637      	mov	r7, r6
 8017c88:	e7e1      	b.n	8017c4e <_dtoa_r+0x956>
 8017c8a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017c8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017c90:	4637      	mov	r7, r6
 8017c92:	e599      	b.n	80177c8 <_dtoa_r+0x4d0>
 8017c94:	9b08      	ldr	r3, [sp, #32]
 8017c96:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	f000 80fd 	beq.w	8017e9a <_dtoa_r+0xba2>
 8017ca0:	2d00      	cmp	r5, #0
 8017ca2:	dd05      	ble.n	8017cb0 <_dtoa_r+0x9b8>
 8017ca4:	4639      	mov	r1, r7
 8017ca6:	462a      	mov	r2, r5
 8017ca8:	4620      	mov	r0, r4
 8017caa:	f001 f805 	bl	8018cb8 <__lshift>
 8017cae:	4607      	mov	r7, r0
 8017cb0:	9b06      	ldr	r3, [sp, #24]
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d05c      	beq.n	8017d70 <_dtoa_r+0xa78>
 8017cb6:	6879      	ldr	r1, [r7, #4]
 8017cb8:	4620      	mov	r0, r4
 8017cba:	f000 fda1 	bl	8018800 <_Balloc>
 8017cbe:	4605      	mov	r5, r0
 8017cc0:	b928      	cbnz	r0, 8017cce <_dtoa_r+0x9d6>
 8017cc2:	4b80      	ldr	r3, [pc, #512]	; (8017ec4 <_dtoa_r+0xbcc>)
 8017cc4:	4602      	mov	r2, r0
 8017cc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8017cca:	f7ff bb2e 	b.w	801732a <_dtoa_r+0x32>
 8017cce:	693a      	ldr	r2, [r7, #16]
 8017cd0:	3202      	adds	r2, #2
 8017cd2:	0092      	lsls	r2, r2, #2
 8017cd4:	f107 010c 	add.w	r1, r7, #12
 8017cd8:	300c      	adds	r0, #12
 8017cda:	f7fd fc31 	bl	8015540 <memcpy>
 8017cde:	2201      	movs	r2, #1
 8017ce0:	4629      	mov	r1, r5
 8017ce2:	4620      	mov	r0, r4
 8017ce4:	f000 ffe8 	bl	8018cb8 <__lshift>
 8017ce8:	9b00      	ldr	r3, [sp, #0]
 8017cea:	3301      	adds	r3, #1
 8017cec:	9301      	str	r3, [sp, #4]
 8017cee:	9b00      	ldr	r3, [sp, #0]
 8017cf0:	444b      	add	r3, r9
 8017cf2:	9307      	str	r3, [sp, #28]
 8017cf4:	9b02      	ldr	r3, [sp, #8]
 8017cf6:	f003 0301 	and.w	r3, r3, #1
 8017cfa:	46b8      	mov	r8, r7
 8017cfc:	9306      	str	r3, [sp, #24]
 8017cfe:	4607      	mov	r7, r0
 8017d00:	9b01      	ldr	r3, [sp, #4]
 8017d02:	4631      	mov	r1, r6
 8017d04:	3b01      	subs	r3, #1
 8017d06:	4658      	mov	r0, fp
 8017d08:	9302      	str	r3, [sp, #8]
 8017d0a:	f7ff fa69 	bl	80171e0 <quorem>
 8017d0e:	4603      	mov	r3, r0
 8017d10:	3330      	adds	r3, #48	; 0x30
 8017d12:	9004      	str	r0, [sp, #16]
 8017d14:	4641      	mov	r1, r8
 8017d16:	4658      	mov	r0, fp
 8017d18:	9308      	str	r3, [sp, #32]
 8017d1a:	f001 f839 	bl	8018d90 <__mcmp>
 8017d1e:	463a      	mov	r2, r7
 8017d20:	4681      	mov	r9, r0
 8017d22:	4631      	mov	r1, r6
 8017d24:	4620      	mov	r0, r4
 8017d26:	f001 f84f 	bl	8018dc8 <__mdiff>
 8017d2a:	68c2      	ldr	r2, [r0, #12]
 8017d2c:	9b08      	ldr	r3, [sp, #32]
 8017d2e:	4605      	mov	r5, r0
 8017d30:	bb02      	cbnz	r2, 8017d74 <_dtoa_r+0xa7c>
 8017d32:	4601      	mov	r1, r0
 8017d34:	4658      	mov	r0, fp
 8017d36:	f001 f82b 	bl	8018d90 <__mcmp>
 8017d3a:	9b08      	ldr	r3, [sp, #32]
 8017d3c:	4602      	mov	r2, r0
 8017d3e:	4629      	mov	r1, r5
 8017d40:	4620      	mov	r0, r4
 8017d42:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8017d46:	f000 fd9b 	bl	8018880 <_Bfree>
 8017d4a:	9b05      	ldr	r3, [sp, #20]
 8017d4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017d4e:	9d01      	ldr	r5, [sp, #4]
 8017d50:	ea43 0102 	orr.w	r1, r3, r2
 8017d54:	9b06      	ldr	r3, [sp, #24]
 8017d56:	430b      	orrs	r3, r1
 8017d58:	9b08      	ldr	r3, [sp, #32]
 8017d5a:	d10d      	bne.n	8017d78 <_dtoa_r+0xa80>
 8017d5c:	2b39      	cmp	r3, #57	; 0x39
 8017d5e:	d029      	beq.n	8017db4 <_dtoa_r+0xabc>
 8017d60:	f1b9 0f00 	cmp.w	r9, #0
 8017d64:	dd01      	ble.n	8017d6a <_dtoa_r+0xa72>
 8017d66:	9b04      	ldr	r3, [sp, #16]
 8017d68:	3331      	adds	r3, #49	; 0x31
 8017d6a:	9a02      	ldr	r2, [sp, #8]
 8017d6c:	7013      	strb	r3, [r2, #0]
 8017d6e:	e774      	b.n	8017c5a <_dtoa_r+0x962>
 8017d70:	4638      	mov	r0, r7
 8017d72:	e7b9      	b.n	8017ce8 <_dtoa_r+0x9f0>
 8017d74:	2201      	movs	r2, #1
 8017d76:	e7e2      	b.n	8017d3e <_dtoa_r+0xa46>
 8017d78:	f1b9 0f00 	cmp.w	r9, #0
 8017d7c:	db06      	blt.n	8017d8c <_dtoa_r+0xa94>
 8017d7e:	9905      	ldr	r1, [sp, #20]
 8017d80:	ea41 0909 	orr.w	r9, r1, r9
 8017d84:	9906      	ldr	r1, [sp, #24]
 8017d86:	ea59 0101 	orrs.w	r1, r9, r1
 8017d8a:	d120      	bne.n	8017dce <_dtoa_r+0xad6>
 8017d8c:	2a00      	cmp	r2, #0
 8017d8e:	ddec      	ble.n	8017d6a <_dtoa_r+0xa72>
 8017d90:	4659      	mov	r1, fp
 8017d92:	2201      	movs	r2, #1
 8017d94:	4620      	mov	r0, r4
 8017d96:	9301      	str	r3, [sp, #4]
 8017d98:	f000 ff8e 	bl	8018cb8 <__lshift>
 8017d9c:	4631      	mov	r1, r6
 8017d9e:	4683      	mov	fp, r0
 8017da0:	f000 fff6 	bl	8018d90 <__mcmp>
 8017da4:	2800      	cmp	r0, #0
 8017da6:	9b01      	ldr	r3, [sp, #4]
 8017da8:	dc02      	bgt.n	8017db0 <_dtoa_r+0xab8>
 8017daa:	d1de      	bne.n	8017d6a <_dtoa_r+0xa72>
 8017dac:	07da      	lsls	r2, r3, #31
 8017dae:	d5dc      	bpl.n	8017d6a <_dtoa_r+0xa72>
 8017db0:	2b39      	cmp	r3, #57	; 0x39
 8017db2:	d1d8      	bne.n	8017d66 <_dtoa_r+0xa6e>
 8017db4:	9a02      	ldr	r2, [sp, #8]
 8017db6:	2339      	movs	r3, #57	; 0x39
 8017db8:	7013      	strb	r3, [r2, #0]
 8017dba:	462b      	mov	r3, r5
 8017dbc:	461d      	mov	r5, r3
 8017dbe:	3b01      	subs	r3, #1
 8017dc0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017dc4:	2a39      	cmp	r2, #57	; 0x39
 8017dc6:	d050      	beq.n	8017e6a <_dtoa_r+0xb72>
 8017dc8:	3201      	adds	r2, #1
 8017dca:	701a      	strb	r2, [r3, #0]
 8017dcc:	e745      	b.n	8017c5a <_dtoa_r+0x962>
 8017dce:	2a00      	cmp	r2, #0
 8017dd0:	dd03      	ble.n	8017dda <_dtoa_r+0xae2>
 8017dd2:	2b39      	cmp	r3, #57	; 0x39
 8017dd4:	d0ee      	beq.n	8017db4 <_dtoa_r+0xabc>
 8017dd6:	3301      	adds	r3, #1
 8017dd8:	e7c7      	b.n	8017d6a <_dtoa_r+0xa72>
 8017dda:	9a01      	ldr	r2, [sp, #4]
 8017ddc:	9907      	ldr	r1, [sp, #28]
 8017dde:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017de2:	428a      	cmp	r2, r1
 8017de4:	d02a      	beq.n	8017e3c <_dtoa_r+0xb44>
 8017de6:	4659      	mov	r1, fp
 8017de8:	2300      	movs	r3, #0
 8017dea:	220a      	movs	r2, #10
 8017dec:	4620      	mov	r0, r4
 8017dee:	f000 fd69 	bl	80188c4 <__multadd>
 8017df2:	45b8      	cmp	r8, r7
 8017df4:	4683      	mov	fp, r0
 8017df6:	f04f 0300 	mov.w	r3, #0
 8017dfa:	f04f 020a 	mov.w	r2, #10
 8017dfe:	4641      	mov	r1, r8
 8017e00:	4620      	mov	r0, r4
 8017e02:	d107      	bne.n	8017e14 <_dtoa_r+0xb1c>
 8017e04:	f000 fd5e 	bl	80188c4 <__multadd>
 8017e08:	4680      	mov	r8, r0
 8017e0a:	4607      	mov	r7, r0
 8017e0c:	9b01      	ldr	r3, [sp, #4]
 8017e0e:	3301      	adds	r3, #1
 8017e10:	9301      	str	r3, [sp, #4]
 8017e12:	e775      	b.n	8017d00 <_dtoa_r+0xa08>
 8017e14:	f000 fd56 	bl	80188c4 <__multadd>
 8017e18:	4639      	mov	r1, r7
 8017e1a:	4680      	mov	r8, r0
 8017e1c:	2300      	movs	r3, #0
 8017e1e:	220a      	movs	r2, #10
 8017e20:	4620      	mov	r0, r4
 8017e22:	f000 fd4f 	bl	80188c4 <__multadd>
 8017e26:	4607      	mov	r7, r0
 8017e28:	e7f0      	b.n	8017e0c <_dtoa_r+0xb14>
 8017e2a:	f1b9 0f00 	cmp.w	r9, #0
 8017e2e:	9a00      	ldr	r2, [sp, #0]
 8017e30:	bfcc      	ite	gt
 8017e32:	464d      	movgt	r5, r9
 8017e34:	2501      	movle	r5, #1
 8017e36:	4415      	add	r5, r2
 8017e38:	f04f 0800 	mov.w	r8, #0
 8017e3c:	4659      	mov	r1, fp
 8017e3e:	2201      	movs	r2, #1
 8017e40:	4620      	mov	r0, r4
 8017e42:	9301      	str	r3, [sp, #4]
 8017e44:	f000 ff38 	bl	8018cb8 <__lshift>
 8017e48:	4631      	mov	r1, r6
 8017e4a:	4683      	mov	fp, r0
 8017e4c:	f000 ffa0 	bl	8018d90 <__mcmp>
 8017e50:	2800      	cmp	r0, #0
 8017e52:	dcb2      	bgt.n	8017dba <_dtoa_r+0xac2>
 8017e54:	d102      	bne.n	8017e5c <_dtoa_r+0xb64>
 8017e56:	9b01      	ldr	r3, [sp, #4]
 8017e58:	07db      	lsls	r3, r3, #31
 8017e5a:	d4ae      	bmi.n	8017dba <_dtoa_r+0xac2>
 8017e5c:	462b      	mov	r3, r5
 8017e5e:	461d      	mov	r5, r3
 8017e60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017e64:	2a30      	cmp	r2, #48	; 0x30
 8017e66:	d0fa      	beq.n	8017e5e <_dtoa_r+0xb66>
 8017e68:	e6f7      	b.n	8017c5a <_dtoa_r+0x962>
 8017e6a:	9a00      	ldr	r2, [sp, #0]
 8017e6c:	429a      	cmp	r2, r3
 8017e6e:	d1a5      	bne.n	8017dbc <_dtoa_r+0xac4>
 8017e70:	f10a 0a01 	add.w	sl, sl, #1
 8017e74:	2331      	movs	r3, #49	; 0x31
 8017e76:	e779      	b.n	8017d6c <_dtoa_r+0xa74>
 8017e78:	4b13      	ldr	r3, [pc, #76]	; (8017ec8 <_dtoa_r+0xbd0>)
 8017e7a:	f7ff baaf 	b.w	80173dc <_dtoa_r+0xe4>
 8017e7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	f47f aa86 	bne.w	8017392 <_dtoa_r+0x9a>
 8017e86:	4b11      	ldr	r3, [pc, #68]	; (8017ecc <_dtoa_r+0xbd4>)
 8017e88:	f7ff baa8 	b.w	80173dc <_dtoa_r+0xe4>
 8017e8c:	f1b9 0f00 	cmp.w	r9, #0
 8017e90:	dc03      	bgt.n	8017e9a <_dtoa_r+0xba2>
 8017e92:	9b05      	ldr	r3, [sp, #20]
 8017e94:	2b02      	cmp	r3, #2
 8017e96:	f73f aec9 	bgt.w	8017c2c <_dtoa_r+0x934>
 8017e9a:	9d00      	ldr	r5, [sp, #0]
 8017e9c:	4631      	mov	r1, r6
 8017e9e:	4658      	mov	r0, fp
 8017ea0:	f7ff f99e 	bl	80171e0 <quorem>
 8017ea4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8017ea8:	f805 3b01 	strb.w	r3, [r5], #1
 8017eac:	9a00      	ldr	r2, [sp, #0]
 8017eae:	1aaa      	subs	r2, r5, r2
 8017eb0:	4591      	cmp	r9, r2
 8017eb2:	ddba      	ble.n	8017e2a <_dtoa_r+0xb32>
 8017eb4:	4659      	mov	r1, fp
 8017eb6:	2300      	movs	r3, #0
 8017eb8:	220a      	movs	r2, #10
 8017eba:	4620      	mov	r0, r4
 8017ebc:	f000 fd02 	bl	80188c4 <__multadd>
 8017ec0:	4683      	mov	fp, r0
 8017ec2:	e7eb      	b.n	8017e9c <_dtoa_r+0xba4>
 8017ec4:	0801b1a4 	.word	0x0801b1a4
 8017ec8:	0801b409 	.word	0x0801b409
 8017ecc:	0801b121 	.word	0x0801b121

08017ed0 <std>:
 8017ed0:	2300      	movs	r3, #0
 8017ed2:	b510      	push	{r4, lr}
 8017ed4:	4604      	mov	r4, r0
 8017ed6:	e9c0 3300 	strd	r3, r3, [r0]
 8017eda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017ede:	6083      	str	r3, [r0, #8]
 8017ee0:	8181      	strh	r1, [r0, #12]
 8017ee2:	6643      	str	r3, [r0, #100]	; 0x64
 8017ee4:	81c2      	strh	r2, [r0, #14]
 8017ee6:	6183      	str	r3, [r0, #24]
 8017ee8:	4619      	mov	r1, r3
 8017eea:	2208      	movs	r2, #8
 8017eec:	305c      	adds	r0, #92	; 0x5c
 8017eee:	f7fd fb35 	bl	801555c <memset>
 8017ef2:	4b05      	ldr	r3, [pc, #20]	; (8017f08 <std+0x38>)
 8017ef4:	6263      	str	r3, [r4, #36]	; 0x24
 8017ef6:	4b05      	ldr	r3, [pc, #20]	; (8017f0c <std+0x3c>)
 8017ef8:	62a3      	str	r3, [r4, #40]	; 0x28
 8017efa:	4b05      	ldr	r3, [pc, #20]	; (8017f10 <std+0x40>)
 8017efc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017efe:	4b05      	ldr	r3, [pc, #20]	; (8017f14 <std+0x44>)
 8017f00:	6224      	str	r4, [r4, #32]
 8017f02:	6323      	str	r3, [r4, #48]	; 0x30
 8017f04:	bd10      	pop	{r4, pc}
 8017f06:	bf00      	nop
 8017f08:	0801636d 	.word	0x0801636d
 8017f0c:	08016393 	.word	0x08016393
 8017f10:	080163cb 	.word	0x080163cb
 8017f14:	080163ef 	.word	0x080163ef

08017f18 <_cleanup_r>:
 8017f18:	4901      	ldr	r1, [pc, #4]	; (8017f20 <_cleanup_r+0x8>)
 8017f1a:	f000 b8af 	b.w	801807c <_fwalk_reent>
 8017f1e:	bf00      	nop
 8017f20:	0801a3d5 	.word	0x0801a3d5

08017f24 <__sfmoreglue>:
 8017f24:	b570      	push	{r4, r5, r6, lr}
 8017f26:	1e4a      	subs	r2, r1, #1
 8017f28:	2568      	movs	r5, #104	; 0x68
 8017f2a:	4355      	muls	r5, r2
 8017f2c:	460e      	mov	r6, r1
 8017f2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017f32:	f001 f97f 	bl	8019234 <_malloc_r>
 8017f36:	4604      	mov	r4, r0
 8017f38:	b140      	cbz	r0, 8017f4c <__sfmoreglue+0x28>
 8017f3a:	2100      	movs	r1, #0
 8017f3c:	e9c0 1600 	strd	r1, r6, [r0]
 8017f40:	300c      	adds	r0, #12
 8017f42:	60a0      	str	r0, [r4, #8]
 8017f44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017f48:	f7fd fb08 	bl	801555c <memset>
 8017f4c:	4620      	mov	r0, r4
 8017f4e:	bd70      	pop	{r4, r5, r6, pc}

08017f50 <__sfp_lock_acquire>:
 8017f50:	4801      	ldr	r0, [pc, #4]	; (8017f58 <__sfp_lock_acquire+0x8>)
 8017f52:	f000 bc26 	b.w	80187a2 <__retarget_lock_acquire_recursive>
 8017f56:	bf00      	nop
 8017f58:	20041e5c 	.word	0x20041e5c

08017f5c <__sfp_lock_release>:
 8017f5c:	4801      	ldr	r0, [pc, #4]	; (8017f64 <__sfp_lock_release+0x8>)
 8017f5e:	f000 bc21 	b.w	80187a4 <__retarget_lock_release_recursive>
 8017f62:	bf00      	nop
 8017f64:	20041e5c 	.word	0x20041e5c

08017f68 <__sinit_lock_acquire>:
 8017f68:	4801      	ldr	r0, [pc, #4]	; (8017f70 <__sinit_lock_acquire+0x8>)
 8017f6a:	f000 bc1a 	b.w	80187a2 <__retarget_lock_acquire_recursive>
 8017f6e:	bf00      	nop
 8017f70:	20041e57 	.word	0x20041e57

08017f74 <__sinit_lock_release>:
 8017f74:	4801      	ldr	r0, [pc, #4]	; (8017f7c <__sinit_lock_release+0x8>)
 8017f76:	f000 bc15 	b.w	80187a4 <__retarget_lock_release_recursive>
 8017f7a:	bf00      	nop
 8017f7c:	20041e57 	.word	0x20041e57

08017f80 <__sinit>:
 8017f80:	b510      	push	{r4, lr}
 8017f82:	4604      	mov	r4, r0
 8017f84:	f7ff fff0 	bl	8017f68 <__sinit_lock_acquire>
 8017f88:	69a3      	ldr	r3, [r4, #24]
 8017f8a:	b11b      	cbz	r3, 8017f94 <__sinit+0x14>
 8017f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f90:	f7ff bff0 	b.w	8017f74 <__sinit_lock_release>
 8017f94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017f98:	6523      	str	r3, [r4, #80]	; 0x50
 8017f9a:	4b13      	ldr	r3, [pc, #76]	; (8017fe8 <__sinit+0x68>)
 8017f9c:	4a13      	ldr	r2, [pc, #76]	; (8017fec <__sinit+0x6c>)
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	62a2      	str	r2, [r4, #40]	; 0x28
 8017fa2:	42a3      	cmp	r3, r4
 8017fa4:	bf04      	itt	eq
 8017fa6:	2301      	moveq	r3, #1
 8017fa8:	61a3      	streq	r3, [r4, #24]
 8017faa:	4620      	mov	r0, r4
 8017fac:	f000 f820 	bl	8017ff0 <__sfp>
 8017fb0:	6060      	str	r0, [r4, #4]
 8017fb2:	4620      	mov	r0, r4
 8017fb4:	f000 f81c 	bl	8017ff0 <__sfp>
 8017fb8:	60a0      	str	r0, [r4, #8]
 8017fba:	4620      	mov	r0, r4
 8017fbc:	f000 f818 	bl	8017ff0 <__sfp>
 8017fc0:	2200      	movs	r2, #0
 8017fc2:	60e0      	str	r0, [r4, #12]
 8017fc4:	2104      	movs	r1, #4
 8017fc6:	6860      	ldr	r0, [r4, #4]
 8017fc8:	f7ff ff82 	bl	8017ed0 <std>
 8017fcc:	68a0      	ldr	r0, [r4, #8]
 8017fce:	2201      	movs	r2, #1
 8017fd0:	2109      	movs	r1, #9
 8017fd2:	f7ff ff7d 	bl	8017ed0 <std>
 8017fd6:	68e0      	ldr	r0, [r4, #12]
 8017fd8:	2202      	movs	r2, #2
 8017fda:	2112      	movs	r1, #18
 8017fdc:	f7ff ff78 	bl	8017ed0 <std>
 8017fe0:	2301      	movs	r3, #1
 8017fe2:	61a3      	str	r3, [r4, #24]
 8017fe4:	e7d2      	b.n	8017f8c <__sinit+0xc>
 8017fe6:	bf00      	nop
 8017fe8:	0801af90 	.word	0x0801af90
 8017fec:	08017f19 	.word	0x08017f19

08017ff0 <__sfp>:
 8017ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ff2:	4607      	mov	r7, r0
 8017ff4:	f7ff ffac 	bl	8017f50 <__sfp_lock_acquire>
 8017ff8:	4b1e      	ldr	r3, [pc, #120]	; (8018074 <__sfp+0x84>)
 8017ffa:	681e      	ldr	r6, [r3, #0]
 8017ffc:	69b3      	ldr	r3, [r6, #24]
 8017ffe:	b913      	cbnz	r3, 8018006 <__sfp+0x16>
 8018000:	4630      	mov	r0, r6
 8018002:	f7ff ffbd 	bl	8017f80 <__sinit>
 8018006:	3648      	adds	r6, #72	; 0x48
 8018008:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801800c:	3b01      	subs	r3, #1
 801800e:	d503      	bpl.n	8018018 <__sfp+0x28>
 8018010:	6833      	ldr	r3, [r6, #0]
 8018012:	b30b      	cbz	r3, 8018058 <__sfp+0x68>
 8018014:	6836      	ldr	r6, [r6, #0]
 8018016:	e7f7      	b.n	8018008 <__sfp+0x18>
 8018018:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801801c:	b9d5      	cbnz	r5, 8018054 <__sfp+0x64>
 801801e:	4b16      	ldr	r3, [pc, #88]	; (8018078 <__sfp+0x88>)
 8018020:	60e3      	str	r3, [r4, #12]
 8018022:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018026:	6665      	str	r5, [r4, #100]	; 0x64
 8018028:	f000 fbba 	bl	80187a0 <__retarget_lock_init_recursive>
 801802c:	f7ff ff96 	bl	8017f5c <__sfp_lock_release>
 8018030:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018034:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018038:	6025      	str	r5, [r4, #0]
 801803a:	61a5      	str	r5, [r4, #24]
 801803c:	2208      	movs	r2, #8
 801803e:	4629      	mov	r1, r5
 8018040:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018044:	f7fd fa8a 	bl	801555c <memset>
 8018048:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801804c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018050:	4620      	mov	r0, r4
 8018052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018054:	3468      	adds	r4, #104	; 0x68
 8018056:	e7d9      	b.n	801800c <__sfp+0x1c>
 8018058:	2104      	movs	r1, #4
 801805a:	4638      	mov	r0, r7
 801805c:	f7ff ff62 	bl	8017f24 <__sfmoreglue>
 8018060:	4604      	mov	r4, r0
 8018062:	6030      	str	r0, [r6, #0]
 8018064:	2800      	cmp	r0, #0
 8018066:	d1d5      	bne.n	8018014 <__sfp+0x24>
 8018068:	f7ff ff78 	bl	8017f5c <__sfp_lock_release>
 801806c:	230c      	movs	r3, #12
 801806e:	603b      	str	r3, [r7, #0]
 8018070:	e7ee      	b.n	8018050 <__sfp+0x60>
 8018072:	bf00      	nop
 8018074:	0801af90 	.word	0x0801af90
 8018078:	ffff0001 	.word	0xffff0001

0801807c <_fwalk_reent>:
 801807c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018080:	4606      	mov	r6, r0
 8018082:	4688      	mov	r8, r1
 8018084:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018088:	2700      	movs	r7, #0
 801808a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801808e:	f1b9 0901 	subs.w	r9, r9, #1
 8018092:	d505      	bpl.n	80180a0 <_fwalk_reent+0x24>
 8018094:	6824      	ldr	r4, [r4, #0]
 8018096:	2c00      	cmp	r4, #0
 8018098:	d1f7      	bne.n	801808a <_fwalk_reent+0xe>
 801809a:	4638      	mov	r0, r7
 801809c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180a0:	89ab      	ldrh	r3, [r5, #12]
 80180a2:	2b01      	cmp	r3, #1
 80180a4:	d907      	bls.n	80180b6 <_fwalk_reent+0x3a>
 80180a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80180aa:	3301      	adds	r3, #1
 80180ac:	d003      	beq.n	80180b6 <_fwalk_reent+0x3a>
 80180ae:	4629      	mov	r1, r5
 80180b0:	4630      	mov	r0, r6
 80180b2:	47c0      	blx	r8
 80180b4:	4307      	orrs	r7, r0
 80180b6:	3568      	adds	r5, #104	; 0x68
 80180b8:	e7e9      	b.n	801808e <_fwalk_reent+0x12>

080180ba <rshift>:
 80180ba:	6903      	ldr	r3, [r0, #16]
 80180bc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80180c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80180c4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80180c8:	f100 0414 	add.w	r4, r0, #20
 80180cc:	dd45      	ble.n	801815a <rshift+0xa0>
 80180ce:	f011 011f 	ands.w	r1, r1, #31
 80180d2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80180d6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80180da:	d10c      	bne.n	80180f6 <rshift+0x3c>
 80180dc:	f100 0710 	add.w	r7, r0, #16
 80180e0:	4629      	mov	r1, r5
 80180e2:	42b1      	cmp	r1, r6
 80180e4:	d334      	bcc.n	8018150 <rshift+0x96>
 80180e6:	1a9b      	subs	r3, r3, r2
 80180e8:	009b      	lsls	r3, r3, #2
 80180ea:	1eea      	subs	r2, r5, #3
 80180ec:	4296      	cmp	r6, r2
 80180ee:	bf38      	it	cc
 80180f0:	2300      	movcc	r3, #0
 80180f2:	4423      	add	r3, r4
 80180f4:	e015      	b.n	8018122 <rshift+0x68>
 80180f6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80180fa:	f1c1 0820 	rsb	r8, r1, #32
 80180fe:	40cf      	lsrs	r7, r1
 8018100:	f105 0e04 	add.w	lr, r5, #4
 8018104:	46a1      	mov	r9, r4
 8018106:	4576      	cmp	r6, lr
 8018108:	46f4      	mov	ip, lr
 801810a:	d815      	bhi.n	8018138 <rshift+0x7e>
 801810c:	1a9b      	subs	r3, r3, r2
 801810e:	009a      	lsls	r2, r3, #2
 8018110:	3a04      	subs	r2, #4
 8018112:	3501      	adds	r5, #1
 8018114:	42ae      	cmp	r6, r5
 8018116:	bf38      	it	cc
 8018118:	2200      	movcc	r2, #0
 801811a:	18a3      	adds	r3, r4, r2
 801811c:	50a7      	str	r7, [r4, r2]
 801811e:	b107      	cbz	r7, 8018122 <rshift+0x68>
 8018120:	3304      	adds	r3, #4
 8018122:	1b1a      	subs	r2, r3, r4
 8018124:	42a3      	cmp	r3, r4
 8018126:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801812a:	bf08      	it	eq
 801812c:	2300      	moveq	r3, #0
 801812e:	6102      	str	r2, [r0, #16]
 8018130:	bf08      	it	eq
 8018132:	6143      	streq	r3, [r0, #20]
 8018134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018138:	f8dc c000 	ldr.w	ip, [ip]
 801813c:	fa0c fc08 	lsl.w	ip, ip, r8
 8018140:	ea4c 0707 	orr.w	r7, ip, r7
 8018144:	f849 7b04 	str.w	r7, [r9], #4
 8018148:	f85e 7b04 	ldr.w	r7, [lr], #4
 801814c:	40cf      	lsrs	r7, r1
 801814e:	e7da      	b.n	8018106 <rshift+0x4c>
 8018150:	f851 cb04 	ldr.w	ip, [r1], #4
 8018154:	f847 cf04 	str.w	ip, [r7, #4]!
 8018158:	e7c3      	b.n	80180e2 <rshift+0x28>
 801815a:	4623      	mov	r3, r4
 801815c:	e7e1      	b.n	8018122 <rshift+0x68>

0801815e <__hexdig_fun>:
 801815e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018162:	2b09      	cmp	r3, #9
 8018164:	d802      	bhi.n	801816c <__hexdig_fun+0xe>
 8018166:	3820      	subs	r0, #32
 8018168:	b2c0      	uxtb	r0, r0
 801816a:	4770      	bx	lr
 801816c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018170:	2b05      	cmp	r3, #5
 8018172:	d801      	bhi.n	8018178 <__hexdig_fun+0x1a>
 8018174:	3847      	subs	r0, #71	; 0x47
 8018176:	e7f7      	b.n	8018168 <__hexdig_fun+0xa>
 8018178:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801817c:	2b05      	cmp	r3, #5
 801817e:	d801      	bhi.n	8018184 <__hexdig_fun+0x26>
 8018180:	3827      	subs	r0, #39	; 0x27
 8018182:	e7f1      	b.n	8018168 <__hexdig_fun+0xa>
 8018184:	2000      	movs	r0, #0
 8018186:	4770      	bx	lr

08018188 <__gethex>:
 8018188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801818c:	ed2d 8b02 	vpush	{d8}
 8018190:	b089      	sub	sp, #36	; 0x24
 8018192:	ee08 0a10 	vmov	s16, r0
 8018196:	9304      	str	r3, [sp, #16]
 8018198:	4bbc      	ldr	r3, [pc, #752]	; (801848c <__gethex+0x304>)
 801819a:	681b      	ldr	r3, [r3, #0]
 801819c:	9301      	str	r3, [sp, #4]
 801819e:	4618      	mov	r0, r3
 80181a0:	468b      	mov	fp, r1
 80181a2:	4690      	mov	r8, r2
 80181a4:	f7e8 f82c 	bl	8000200 <strlen>
 80181a8:	9b01      	ldr	r3, [sp, #4]
 80181aa:	f8db 2000 	ldr.w	r2, [fp]
 80181ae:	4403      	add	r3, r0
 80181b0:	4682      	mov	sl, r0
 80181b2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80181b6:	9305      	str	r3, [sp, #20]
 80181b8:	1c93      	adds	r3, r2, #2
 80181ba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80181be:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80181c2:	32fe      	adds	r2, #254	; 0xfe
 80181c4:	18d1      	adds	r1, r2, r3
 80181c6:	461f      	mov	r7, r3
 80181c8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80181cc:	9100      	str	r1, [sp, #0]
 80181ce:	2830      	cmp	r0, #48	; 0x30
 80181d0:	d0f8      	beq.n	80181c4 <__gethex+0x3c>
 80181d2:	f7ff ffc4 	bl	801815e <__hexdig_fun>
 80181d6:	4604      	mov	r4, r0
 80181d8:	2800      	cmp	r0, #0
 80181da:	d13a      	bne.n	8018252 <__gethex+0xca>
 80181dc:	9901      	ldr	r1, [sp, #4]
 80181de:	4652      	mov	r2, sl
 80181e0:	4638      	mov	r0, r7
 80181e2:	f001 febb 	bl	8019f5c <strncmp>
 80181e6:	4605      	mov	r5, r0
 80181e8:	2800      	cmp	r0, #0
 80181ea:	d168      	bne.n	80182be <__gethex+0x136>
 80181ec:	f817 000a 	ldrb.w	r0, [r7, sl]
 80181f0:	eb07 060a 	add.w	r6, r7, sl
 80181f4:	f7ff ffb3 	bl	801815e <__hexdig_fun>
 80181f8:	2800      	cmp	r0, #0
 80181fa:	d062      	beq.n	80182c2 <__gethex+0x13a>
 80181fc:	4633      	mov	r3, r6
 80181fe:	7818      	ldrb	r0, [r3, #0]
 8018200:	2830      	cmp	r0, #48	; 0x30
 8018202:	461f      	mov	r7, r3
 8018204:	f103 0301 	add.w	r3, r3, #1
 8018208:	d0f9      	beq.n	80181fe <__gethex+0x76>
 801820a:	f7ff ffa8 	bl	801815e <__hexdig_fun>
 801820e:	2301      	movs	r3, #1
 8018210:	fab0 f480 	clz	r4, r0
 8018214:	0964      	lsrs	r4, r4, #5
 8018216:	4635      	mov	r5, r6
 8018218:	9300      	str	r3, [sp, #0]
 801821a:	463a      	mov	r2, r7
 801821c:	4616      	mov	r6, r2
 801821e:	3201      	adds	r2, #1
 8018220:	7830      	ldrb	r0, [r6, #0]
 8018222:	f7ff ff9c 	bl	801815e <__hexdig_fun>
 8018226:	2800      	cmp	r0, #0
 8018228:	d1f8      	bne.n	801821c <__gethex+0x94>
 801822a:	9901      	ldr	r1, [sp, #4]
 801822c:	4652      	mov	r2, sl
 801822e:	4630      	mov	r0, r6
 8018230:	f001 fe94 	bl	8019f5c <strncmp>
 8018234:	b980      	cbnz	r0, 8018258 <__gethex+0xd0>
 8018236:	b94d      	cbnz	r5, 801824c <__gethex+0xc4>
 8018238:	eb06 050a 	add.w	r5, r6, sl
 801823c:	462a      	mov	r2, r5
 801823e:	4616      	mov	r6, r2
 8018240:	3201      	adds	r2, #1
 8018242:	7830      	ldrb	r0, [r6, #0]
 8018244:	f7ff ff8b 	bl	801815e <__hexdig_fun>
 8018248:	2800      	cmp	r0, #0
 801824a:	d1f8      	bne.n	801823e <__gethex+0xb6>
 801824c:	1bad      	subs	r5, r5, r6
 801824e:	00ad      	lsls	r5, r5, #2
 8018250:	e004      	b.n	801825c <__gethex+0xd4>
 8018252:	2400      	movs	r4, #0
 8018254:	4625      	mov	r5, r4
 8018256:	e7e0      	b.n	801821a <__gethex+0x92>
 8018258:	2d00      	cmp	r5, #0
 801825a:	d1f7      	bne.n	801824c <__gethex+0xc4>
 801825c:	7833      	ldrb	r3, [r6, #0]
 801825e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018262:	2b50      	cmp	r3, #80	; 0x50
 8018264:	d13b      	bne.n	80182de <__gethex+0x156>
 8018266:	7873      	ldrb	r3, [r6, #1]
 8018268:	2b2b      	cmp	r3, #43	; 0x2b
 801826a:	d02c      	beq.n	80182c6 <__gethex+0x13e>
 801826c:	2b2d      	cmp	r3, #45	; 0x2d
 801826e:	d02e      	beq.n	80182ce <__gethex+0x146>
 8018270:	1c71      	adds	r1, r6, #1
 8018272:	f04f 0900 	mov.w	r9, #0
 8018276:	7808      	ldrb	r0, [r1, #0]
 8018278:	f7ff ff71 	bl	801815e <__hexdig_fun>
 801827c:	1e43      	subs	r3, r0, #1
 801827e:	b2db      	uxtb	r3, r3
 8018280:	2b18      	cmp	r3, #24
 8018282:	d82c      	bhi.n	80182de <__gethex+0x156>
 8018284:	f1a0 0210 	sub.w	r2, r0, #16
 8018288:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801828c:	f7ff ff67 	bl	801815e <__hexdig_fun>
 8018290:	1e43      	subs	r3, r0, #1
 8018292:	b2db      	uxtb	r3, r3
 8018294:	2b18      	cmp	r3, #24
 8018296:	d91d      	bls.n	80182d4 <__gethex+0x14c>
 8018298:	f1b9 0f00 	cmp.w	r9, #0
 801829c:	d000      	beq.n	80182a0 <__gethex+0x118>
 801829e:	4252      	negs	r2, r2
 80182a0:	4415      	add	r5, r2
 80182a2:	f8cb 1000 	str.w	r1, [fp]
 80182a6:	b1e4      	cbz	r4, 80182e2 <__gethex+0x15a>
 80182a8:	9b00      	ldr	r3, [sp, #0]
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	bf14      	ite	ne
 80182ae:	2700      	movne	r7, #0
 80182b0:	2706      	moveq	r7, #6
 80182b2:	4638      	mov	r0, r7
 80182b4:	b009      	add	sp, #36	; 0x24
 80182b6:	ecbd 8b02 	vpop	{d8}
 80182ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182be:	463e      	mov	r6, r7
 80182c0:	4625      	mov	r5, r4
 80182c2:	2401      	movs	r4, #1
 80182c4:	e7ca      	b.n	801825c <__gethex+0xd4>
 80182c6:	f04f 0900 	mov.w	r9, #0
 80182ca:	1cb1      	adds	r1, r6, #2
 80182cc:	e7d3      	b.n	8018276 <__gethex+0xee>
 80182ce:	f04f 0901 	mov.w	r9, #1
 80182d2:	e7fa      	b.n	80182ca <__gethex+0x142>
 80182d4:	230a      	movs	r3, #10
 80182d6:	fb03 0202 	mla	r2, r3, r2, r0
 80182da:	3a10      	subs	r2, #16
 80182dc:	e7d4      	b.n	8018288 <__gethex+0x100>
 80182de:	4631      	mov	r1, r6
 80182e0:	e7df      	b.n	80182a2 <__gethex+0x11a>
 80182e2:	1bf3      	subs	r3, r6, r7
 80182e4:	3b01      	subs	r3, #1
 80182e6:	4621      	mov	r1, r4
 80182e8:	2b07      	cmp	r3, #7
 80182ea:	dc0b      	bgt.n	8018304 <__gethex+0x17c>
 80182ec:	ee18 0a10 	vmov	r0, s16
 80182f0:	f000 fa86 	bl	8018800 <_Balloc>
 80182f4:	4604      	mov	r4, r0
 80182f6:	b940      	cbnz	r0, 801830a <__gethex+0x182>
 80182f8:	4b65      	ldr	r3, [pc, #404]	; (8018490 <__gethex+0x308>)
 80182fa:	4602      	mov	r2, r0
 80182fc:	21de      	movs	r1, #222	; 0xde
 80182fe:	4865      	ldr	r0, [pc, #404]	; (8018494 <__gethex+0x30c>)
 8018300:	f001 ffc4 	bl	801a28c <__assert_func>
 8018304:	3101      	adds	r1, #1
 8018306:	105b      	asrs	r3, r3, #1
 8018308:	e7ee      	b.n	80182e8 <__gethex+0x160>
 801830a:	f100 0914 	add.w	r9, r0, #20
 801830e:	f04f 0b00 	mov.w	fp, #0
 8018312:	f1ca 0301 	rsb	r3, sl, #1
 8018316:	f8cd 9008 	str.w	r9, [sp, #8]
 801831a:	f8cd b000 	str.w	fp, [sp]
 801831e:	9306      	str	r3, [sp, #24]
 8018320:	42b7      	cmp	r7, r6
 8018322:	d340      	bcc.n	80183a6 <__gethex+0x21e>
 8018324:	9802      	ldr	r0, [sp, #8]
 8018326:	9b00      	ldr	r3, [sp, #0]
 8018328:	f840 3b04 	str.w	r3, [r0], #4
 801832c:	eba0 0009 	sub.w	r0, r0, r9
 8018330:	1080      	asrs	r0, r0, #2
 8018332:	0146      	lsls	r6, r0, #5
 8018334:	6120      	str	r0, [r4, #16]
 8018336:	4618      	mov	r0, r3
 8018338:	f000 fb58 	bl	80189ec <__hi0bits>
 801833c:	1a30      	subs	r0, r6, r0
 801833e:	f8d8 6000 	ldr.w	r6, [r8]
 8018342:	42b0      	cmp	r0, r6
 8018344:	dd63      	ble.n	801840e <__gethex+0x286>
 8018346:	1b87      	subs	r7, r0, r6
 8018348:	4639      	mov	r1, r7
 801834a:	4620      	mov	r0, r4
 801834c:	f000 fef2 	bl	8019134 <__any_on>
 8018350:	4682      	mov	sl, r0
 8018352:	b1a8      	cbz	r0, 8018380 <__gethex+0x1f8>
 8018354:	1e7b      	subs	r3, r7, #1
 8018356:	1159      	asrs	r1, r3, #5
 8018358:	f003 021f 	and.w	r2, r3, #31
 801835c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018360:	f04f 0a01 	mov.w	sl, #1
 8018364:	fa0a f202 	lsl.w	r2, sl, r2
 8018368:	420a      	tst	r2, r1
 801836a:	d009      	beq.n	8018380 <__gethex+0x1f8>
 801836c:	4553      	cmp	r3, sl
 801836e:	dd05      	ble.n	801837c <__gethex+0x1f4>
 8018370:	1eb9      	subs	r1, r7, #2
 8018372:	4620      	mov	r0, r4
 8018374:	f000 fede 	bl	8019134 <__any_on>
 8018378:	2800      	cmp	r0, #0
 801837a:	d145      	bne.n	8018408 <__gethex+0x280>
 801837c:	f04f 0a02 	mov.w	sl, #2
 8018380:	4639      	mov	r1, r7
 8018382:	4620      	mov	r0, r4
 8018384:	f7ff fe99 	bl	80180ba <rshift>
 8018388:	443d      	add	r5, r7
 801838a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801838e:	42ab      	cmp	r3, r5
 8018390:	da4c      	bge.n	801842c <__gethex+0x2a4>
 8018392:	ee18 0a10 	vmov	r0, s16
 8018396:	4621      	mov	r1, r4
 8018398:	f000 fa72 	bl	8018880 <_Bfree>
 801839c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801839e:	2300      	movs	r3, #0
 80183a0:	6013      	str	r3, [r2, #0]
 80183a2:	27a3      	movs	r7, #163	; 0xa3
 80183a4:	e785      	b.n	80182b2 <__gethex+0x12a>
 80183a6:	1e73      	subs	r3, r6, #1
 80183a8:	9a05      	ldr	r2, [sp, #20]
 80183aa:	9303      	str	r3, [sp, #12]
 80183ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80183b0:	4293      	cmp	r3, r2
 80183b2:	d019      	beq.n	80183e8 <__gethex+0x260>
 80183b4:	f1bb 0f20 	cmp.w	fp, #32
 80183b8:	d107      	bne.n	80183ca <__gethex+0x242>
 80183ba:	9b02      	ldr	r3, [sp, #8]
 80183bc:	9a00      	ldr	r2, [sp, #0]
 80183be:	f843 2b04 	str.w	r2, [r3], #4
 80183c2:	9302      	str	r3, [sp, #8]
 80183c4:	2300      	movs	r3, #0
 80183c6:	9300      	str	r3, [sp, #0]
 80183c8:	469b      	mov	fp, r3
 80183ca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80183ce:	f7ff fec6 	bl	801815e <__hexdig_fun>
 80183d2:	9b00      	ldr	r3, [sp, #0]
 80183d4:	f000 000f 	and.w	r0, r0, #15
 80183d8:	fa00 f00b 	lsl.w	r0, r0, fp
 80183dc:	4303      	orrs	r3, r0
 80183de:	9300      	str	r3, [sp, #0]
 80183e0:	f10b 0b04 	add.w	fp, fp, #4
 80183e4:	9b03      	ldr	r3, [sp, #12]
 80183e6:	e00d      	b.n	8018404 <__gethex+0x27c>
 80183e8:	9b03      	ldr	r3, [sp, #12]
 80183ea:	9a06      	ldr	r2, [sp, #24]
 80183ec:	4413      	add	r3, r2
 80183ee:	42bb      	cmp	r3, r7
 80183f0:	d3e0      	bcc.n	80183b4 <__gethex+0x22c>
 80183f2:	4618      	mov	r0, r3
 80183f4:	9901      	ldr	r1, [sp, #4]
 80183f6:	9307      	str	r3, [sp, #28]
 80183f8:	4652      	mov	r2, sl
 80183fa:	f001 fdaf 	bl	8019f5c <strncmp>
 80183fe:	9b07      	ldr	r3, [sp, #28]
 8018400:	2800      	cmp	r0, #0
 8018402:	d1d7      	bne.n	80183b4 <__gethex+0x22c>
 8018404:	461e      	mov	r6, r3
 8018406:	e78b      	b.n	8018320 <__gethex+0x198>
 8018408:	f04f 0a03 	mov.w	sl, #3
 801840c:	e7b8      	b.n	8018380 <__gethex+0x1f8>
 801840e:	da0a      	bge.n	8018426 <__gethex+0x29e>
 8018410:	1a37      	subs	r7, r6, r0
 8018412:	4621      	mov	r1, r4
 8018414:	ee18 0a10 	vmov	r0, s16
 8018418:	463a      	mov	r2, r7
 801841a:	f000 fc4d 	bl	8018cb8 <__lshift>
 801841e:	1bed      	subs	r5, r5, r7
 8018420:	4604      	mov	r4, r0
 8018422:	f100 0914 	add.w	r9, r0, #20
 8018426:	f04f 0a00 	mov.w	sl, #0
 801842a:	e7ae      	b.n	801838a <__gethex+0x202>
 801842c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018430:	42a8      	cmp	r0, r5
 8018432:	dd72      	ble.n	801851a <__gethex+0x392>
 8018434:	1b45      	subs	r5, r0, r5
 8018436:	42ae      	cmp	r6, r5
 8018438:	dc36      	bgt.n	80184a8 <__gethex+0x320>
 801843a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801843e:	2b02      	cmp	r3, #2
 8018440:	d02a      	beq.n	8018498 <__gethex+0x310>
 8018442:	2b03      	cmp	r3, #3
 8018444:	d02c      	beq.n	80184a0 <__gethex+0x318>
 8018446:	2b01      	cmp	r3, #1
 8018448:	d115      	bne.n	8018476 <__gethex+0x2ee>
 801844a:	42ae      	cmp	r6, r5
 801844c:	d113      	bne.n	8018476 <__gethex+0x2ee>
 801844e:	2e01      	cmp	r6, #1
 8018450:	d10b      	bne.n	801846a <__gethex+0x2e2>
 8018452:	9a04      	ldr	r2, [sp, #16]
 8018454:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018458:	6013      	str	r3, [r2, #0]
 801845a:	2301      	movs	r3, #1
 801845c:	6123      	str	r3, [r4, #16]
 801845e:	f8c9 3000 	str.w	r3, [r9]
 8018462:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018464:	2762      	movs	r7, #98	; 0x62
 8018466:	601c      	str	r4, [r3, #0]
 8018468:	e723      	b.n	80182b2 <__gethex+0x12a>
 801846a:	1e71      	subs	r1, r6, #1
 801846c:	4620      	mov	r0, r4
 801846e:	f000 fe61 	bl	8019134 <__any_on>
 8018472:	2800      	cmp	r0, #0
 8018474:	d1ed      	bne.n	8018452 <__gethex+0x2ca>
 8018476:	ee18 0a10 	vmov	r0, s16
 801847a:	4621      	mov	r1, r4
 801847c:	f000 fa00 	bl	8018880 <_Bfree>
 8018480:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018482:	2300      	movs	r3, #0
 8018484:	6013      	str	r3, [r2, #0]
 8018486:	2750      	movs	r7, #80	; 0x50
 8018488:	e713      	b.n	80182b2 <__gethex+0x12a>
 801848a:	bf00      	nop
 801848c:	0801b284 	.word	0x0801b284
 8018490:	0801b1a4 	.word	0x0801b1a4
 8018494:	0801b218 	.word	0x0801b218
 8018498:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801849a:	2b00      	cmp	r3, #0
 801849c:	d1eb      	bne.n	8018476 <__gethex+0x2ee>
 801849e:	e7d8      	b.n	8018452 <__gethex+0x2ca>
 80184a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d1d5      	bne.n	8018452 <__gethex+0x2ca>
 80184a6:	e7e6      	b.n	8018476 <__gethex+0x2ee>
 80184a8:	1e6f      	subs	r7, r5, #1
 80184aa:	f1ba 0f00 	cmp.w	sl, #0
 80184ae:	d131      	bne.n	8018514 <__gethex+0x38c>
 80184b0:	b127      	cbz	r7, 80184bc <__gethex+0x334>
 80184b2:	4639      	mov	r1, r7
 80184b4:	4620      	mov	r0, r4
 80184b6:	f000 fe3d 	bl	8019134 <__any_on>
 80184ba:	4682      	mov	sl, r0
 80184bc:	117b      	asrs	r3, r7, #5
 80184be:	2101      	movs	r1, #1
 80184c0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80184c4:	f007 071f 	and.w	r7, r7, #31
 80184c8:	fa01 f707 	lsl.w	r7, r1, r7
 80184cc:	421f      	tst	r7, r3
 80184ce:	4629      	mov	r1, r5
 80184d0:	4620      	mov	r0, r4
 80184d2:	bf18      	it	ne
 80184d4:	f04a 0a02 	orrne.w	sl, sl, #2
 80184d8:	1b76      	subs	r6, r6, r5
 80184da:	f7ff fdee 	bl	80180ba <rshift>
 80184de:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80184e2:	2702      	movs	r7, #2
 80184e4:	f1ba 0f00 	cmp.w	sl, #0
 80184e8:	d048      	beq.n	801857c <__gethex+0x3f4>
 80184ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80184ee:	2b02      	cmp	r3, #2
 80184f0:	d015      	beq.n	801851e <__gethex+0x396>
 80184f2:	2b03      	cmp	r3, #3
 80184f4:	d017      	beq.n	8018526 <__gethex+0x39e>
 80184f6:	2b01      	cmp	r3, #1
 80184f8:	d109      	bne.n	801850e <__gethex+0x386>
 80184fa:	f01a 0f02 	tst.w	sl, #2
 80184fe:	d006      	beq.n	801850e <__gethex+0x386>
 8018500:	f8d9 0000 	ldr.w	r0, [r9]
 8018504:	ea4a 0a00 	orr.w	sl, sl, r0
 8018508:	f01a 0f01 	tst.w	sl, #1
 801850c:	d10e      	bne.n	801852c <__gethex+0x3a4>
 801850e:	f047 0710 	orr.w	r7, r7, #16
 8018512:	e033      	b.n	801857c <__gethex+0x3f4>
 8018514:	f04f 0a01 	mov.w	sl, #1
 8018518:	e7d0      	b.n	80184bc <__gethex+0x334>
 801851a:	2701      	movs	r7, #1
 801851c:	e7e2      	b.n	80184e4 <__gethex+0x35c>
 801851e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018520:	f1c3 0301 	rsb	r3, r3, #1
 8018524:	9315      	str	r3, [sp, #84]	; 0x54
 8018526:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018528:	2b00      	cmp	r3, #0
 801852a:	d0f0      	beq.n	801850e <__gethex+0x386>
 801852c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018530:	f104 0314 	add.w	r3, r4, #20
 8018534:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018538:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801853c:	f04f 0c00 	mov.w	ip, #0
 8018540:	4618      	mov	r0, r3
 8018542:	f853 2b04 	ldr.w	r2, [r3], #4
 8018546:	f1b2 3fff 	cmp.w	r2, #4294967295
 801854a:	d01c      	beq.n	8018586 <__gethex+0x3fe>
 801854c:	3201      	adds	r2, #1
 801854e:	6002      	str	r2, [r0, #0]
 8018550:	2f02      	cmp	r7, #2
 8018552:	f104 0314 	add.w	r3, r4, #20
 8018556:	d13f      	bne.n	80185d8 <__gethex+0x450>
 8018558:	f8d8 2000 	ldr.w	r2, [r8]
 801855c:	3a01      	subs	r2, #1
 801855e:	42b2      	cmp	r2, r6
 8018560:	d10a      	bne.n	8018578 <__gethex+0x3f0>
 8018562:	1171      	asrs	r1, r6, #5
 8018564:	2201      	movs	r2, #1
 8018566:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801856a:	f006 061f 	and.w	r6, r6, #31
 801856e:	fa02 f606 	lsl.w	r6, r2, r6
 8018572:	421e      	tst	r6, r3
 8018574:	bf18      	it	ne
 8018576:	4617      	movne	r7, r2
 8018578:	f047 0720 	orr.w	r7, r7, #32
 801857c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801857e:	601c      	str	r4, [r3, #0]
 8018580:	9b04      	ldr	r3, [sp, #16]
 8018582:	601d      	str	r5, [r3, #0]
 8018584:	e695      	b.n	80182b2 <__gethex+0x12a>
 8018586:	4299      	cmp	r1, r3
 8018588:	f843 cc04 	str.w	ip, [r3, #-4]
 801858c:	d8d8      	bhi.n	8018540 <__gethex+0x3b8>
 801858e:	68a3      	ldr	r3, [r4, #8]
 8018590:	459b      	cmp	fp, r3
 8018592:	db19      	blt.n	80185c8 <__gethex+0x440>
 8018594:	6861      	ldr	r1, [r4, #4]
 8018596:	ee18 0a10 	vmov	r0, s16
 801859a:	3101      	adds	r1, #1
 801859c:	f000 f930 	bl	8018800 <_Balloc>
 80185a0:	4681      	mov	r9, r0
 80185a2:	b918      	cbnz	r0, 80185ac <__gethex+0x424>
 80185a4:	4b1a      	ldr	r3, [pc, #104]	; (8018610 <__gethex+0x488>)
 80185a6:	4602      	mov	r2, r0
 80185a8:	2184      	movs	r1, #132	; 0x84
 80185aa:	e6a8      	b.n	80182fe <__gethex+0x176>
 80185ac:	6922      	ldr	r2, [r4, #16]
 80185ae:	3202      	adds	r2, #2
 80185b0:	f104 010c 	add.w	r1, r4, #12
 80185b4:	0092      	lsls	r2, r2, #2
 80185b6:	300c      	adds	r0, #12
 80185b8:	f7fc ffc2 	bl	8015540 <memcpy>
 80185bc:	4621      	mov	r1, r4
 80185be:	ee18 0a10 	vmov	r0, s16
 80185c2:	f000 f95d 	bl	8018880 <_Bfree>
 80185c6:	464c      	mov	r4, r9
 80185c8:	6923      	ldr	r3, [r4, #16]
 80185ca:	1c5a      	adds	r2, r3, #1
 80185cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80185d0:	6122      	str	r2, [r4, #16]
 80185d2:	2201      	movs	r2, #1
 80185d4:	615a      	str	r2, [r3, #20]
 80185d6:	e7bb      	b.n	8018550 <__gethex+0x3c8>
 80185d8:	6922      	ldr	r2, [r4, #16]
 80185da:	455a      	cmp	r2, fp
 80185dc:	dd0b      	ble.n	80185f6 <__gethex+0x46e>
 80185de:	2101      	movs	r1, #1
 80185e0:	4620      	mov	r0, r4
 80185e2:	f7ff fd6a 	bl	80180ba <rshift>
 80185e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80185ea:	3501      	adds	r5, #1
 80185ec:	42ab      	cmp	r3, r5
 80185ee:	f6ff aed0 	blt.w	8018392 <__gethex+0x20a>
 80185f2:	2701      	movs	r7, #1
 80185f4:	e7c0      	b.n	8018578 <__gethex+0x3f0>
 80185f6:	f016 061f 	ands.w	r6, r6, #31
 80185fa:	d0fa      	beq.n	80185f2 <__gethex+0x46a>
 80185fc:	449a      	add	sl, r3
 80185fe:	f1c6 0620 	rsb	r6, r6, #32
 8018602:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018606:	f000 f9f1 	bl	80189ec <__hi0bits>
 801860a:	42b0      	cmp	r0, r6
 801860c:	dbe7      	blt.n	80185de <__gethex+0x456>
 801860e:	e7f0      	b.n	80185f2 <__gethex+0x46a>
 8018610:	0801b1a4 	.word	0x0801b1a4

08018614 <L_shift>:
 8018614:	f1c2 0208 	rsb	r2, r2, #8
 8018618:	0092      	lsls	r2, r2, #2
 801861a:	b570      	push	{r4, r5, r6, lr}
 801861c:	f1c2 0620 	rsb	r6, r2, #32
 8018620:	6843      	ldr	r3, [r0, #4]
 8018622:	6804      	ldr	r4, [r0, #0]
 8018624:	fa03 f506 	lsl.w	r5, r3, r6
 8018628:	432c      	orrs	r4, r5
 801862a:	40d3      	lsrs	r3, r2
 801862c:	6004      	str	r4, [r0, #0]
 801862e:	f840 3f04 	str.w	r3, [r0, #4]!
 8018632:	4288      	cmp	r0, r1
 8018634:	d3f4      	bcc.n	8018620 <L_shift+0xc>
 8018636:	bd70      	pop	{r4, r5, r6, pc}

08018638 <__match>:
 8018638:	b530      	push	{r4, r5, lr}
 801863a:	6803      	ldr	r3, [r0, #0]
 801863c:	3301      	adds	r3, #1
 801863e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018642:	b914      	cbnz	r4, 801864a <__match+0x12>
 8018644:	6003      	str	r3, [r0, #0]
 8018646:	2001      	movs	r0, #1
 8018648:	bd30      	pop	{r4, r5, pc}
 801864a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801864e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018652:	2d19      	cmp	r5, #25
 8018654:	bf98      	it	ls
 8018656:	3220      	addls	r2, #32
 8018658:	42a2      	cmp	r2, r4
 801865a:	d0f0      	beq.n	801863e <__match+0x6>
 801865c:	2000      	movs	r0, #0
 801865e:	e7f3      	b.n	8018648 <__match+0x10>

08018660 <__hexnan>:
 8018660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018664:	680b      	ldr	r3, [r1, #0]
 8018666:	6801      	ldr	r1, [r0, #0]
 8018668:	115e      	asrs	r6, r3, #5
 801866a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801866e:	f013 031f 	ands.w	r3, r3, #31
 8018672:	b087      	sub	sp, #28
 8018674:	bf18      	it	ne
 8018676:	3604      	addne	r6, #4
 8018678:	2500      	movs	r5, #0
 801867a:	1f37      	subs	r7, r6, #4
 801867c:	4682      	mov	sl, r0
 801867e:	4690      	mov	r8, r2
 8018680:	9301      	str	r3, [sp, #4]
 8018682:	f846 5c04 	str.w	r5, [r6, #-4]
 8018686:	46b9      	mov	r9, r7
 8018688:	463c      	mov	r4, r7
 801868a:	9502      	str	r5, [sp, #8]
 801868c:	46ab      	mov	fp, r5
 801868e:	784a      	ldrb	r2, [r1, #1]
 8018690:	1c4b      	adds	r3, r1, #1
 8018692:	9303      	str	r3, [sp, #12]
 8018694:	b342      	cbz	r2, 80186e8 <__hexnan+0x88>
 8018696:	4610      	mov	r0, r2
 8018698:	9105      	str	r1, [sp, #20]
 801869a:	9204      	str	r2, [sp, #16]
 801869c:	f7ff fd5f 	bl	801815e <__hexdig_fun>
 80186a0:	2800      	cmp	r0, #0
 80186a2:	d14f      	bne.n	8018744 <__hexnan+0xe4>
 80186a4:	9a04      	ldr	r2, [sp, #16]
 80186a6:	9905      	ldr	r1, [sp, #20]
 80186a8:	2a20      	cmp	r2, #32
 80186aa:	d818      	bhi.n	80186de <__hexnan+0x7e>
 80186ac:	9b02      	ldr	r3, [sp, #8]
 80186ae:	459b      	cmp	fp, r3
 80186b0:	dd13      	ble.n	80186da <__hexnan+0x7a>
 80186b2:	454c      	cmp	r4, r9
 80186b4:	d206      	bcs.n	80186c4 <__hexnan+0x64>
 80186b6:	2d07      	cmp	r5, #7
 80186b8:	dc04      	bgt.n	80186c4 <__hexnan+0x64>
 80186ba:	462a      	mov	r2, r5
 80186bc:	4649      	mov	r1, r9
 80186be:	4620      	mov	r0, r4
 80186c0:	f7ff ffa8 	bl	8018614 <L_shift>
 80186c4:	4544      	cmp	r4, r8
 80186c6:	d950      	bls.n	801876a <__hexnan+0x10a>
 80186c8:	2300      	movs	r3, #0
 80186ca:	f1a4 0904 	sub.w	r9, r4, #4
 80186ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80186d2:	f8cd b008 	str.w	fp, [sp, #8]
 80186d6:	464c      	mov	r4, r9
 80186d8:	461d      	mov	r5, r3
 80186da:	9903      	ldr	r1, [sp, #12]
 80186dc:	e7d7      	b.n	801868e <__hexnan+0x2e>
 80186de:	2a29      	cmp	r2, #41	; 0x29
 80186e0:	d156      	bne.n	8018790 <__hexnan+0x130>
 80186e2:	3102      	adds	r1, #2
 80186e4:	f8ca 1000 	str.w	r1, [sl]
 80186e8:	f1bb 0f00 	cmp.w	fp, #0
 80186ec:	d050      	beq.n	8018790 <__hexnan+0x130>
 80186ee:	454c      	cmp	r4, r9
 80186f0:	d206      	bcs.n	8018700 <__hexnan+0xa0>
 80186f2:	2d07      	cmp	r5, #7
 80186f4:	dc04      	bgt.n	8018700 <__hexnan+0xa0>
 80186f6:	462a      	mov	r2, r5
 80186f8:	4649      	mov	r1, r9
 80186fa:	4620      	mov	r0, r4
 80186fc:	f7ff ff8a 	bl	8018614 <L_shift>
 8018700:	4544      	cmp	r4, r8
 8018702:	d934      	bls.n	801876e <__hexnan+0x10e>
 8018704:	f1a8 0204 	sub.w	r2, r8, #4
 8018708:	4623      	mov	r3, r4
 801870a:	f853 1b04 	ldr.w	r1, [r3], #4
 801870e:	f842 1f04 	str.w	r1, [r2, #4]!
 8018712:	429f      	cmp	r7, r3
 8018714:	d2f9      	bcs.n	801870a <__hexnan+0xaa>
 8018716:	1b3b      	subs	r3, r7, r4
 8018718:	f023 0303 	bic.w	r3, r3, #3
 801871c:	3304      	adds	r3, #4
 801871e:	3401      	adds	r4, #1
 8018720:	3e03      	subs	r6, #3
 8018722:	42b4      	cmp	r4, r6
 8018724:	bf88      	it	hi
 8018726:	2304      	movhi	r3, #4
 8018728:	4443      	add	r3, r8
 801872a:	2200      	movs	r2, #0
 801872c:	f843 2b04 	str.w	r2, [r3], #4
 8018730:	429f      	cmp	r7, r3
 8018732:	d2fb      	bcs.n	801872c <__hexnan+0xcc>
 8018734:	683b      	ldr	r3, [r7, #0]
 8018736:	b91b      	cbnz	r3, 8018740 <__hexnan+0xe0>
 8018738:	4547      	cmp	r7, r8
 801873a:	d127      	bne.n	801878c <__hexnan+0x12c>
 801873c:	2301      	movs	r3, #1
 801873e:	603b      	str	r3, [r7, #0]
 8018740:	2005      	movs	r0, #5
 8018742:	e026      	b.n	8018792 <__hexnan+0x132>
 8018744:	3501      	adds	r5, #1
 8018746:	2d08      	cmp	r5, #8
 8018748:	f10b 0b01 	add.w	fp, fp, #1
 801874c:	dd06      	ble.n	801875c <__hexnan+0xfc>
 801874e:	4544      	cmp	r4, r8
 8018750:	d9c3      	bls.n	80186da <__hexnan+0x7a>
 8018752:	2300      	movs	r3, #0
 8018754:	f844 3c04 	str.w	r3, [r4, #-4]
 8018758:	2501      	movs	r5, #1
 801875a:	3c04      	subs	r4, #4
 801875c:	6822      	ldr	r2, [r4, #0]
 801875e:	f000 000f 	and.w	r0, r0, #15
 8018762:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8018766:	6022      	str	r2, [r4, #0]
 8018768:	e7b7      	b.n	80186da <__hexnan+0x7a>
 801876a:	2508      	movs	r5, #8
 801876c:	e7b5      	b.n	80186da <__hexnan+0x7a>
 801876e:	9b01      	ldr	r3, [sp, #4]
 8018770:	2b00      	cmp	r3, #0
 8018772:	d0df      	beq.n	8018734 <__hexnan+0xd4>
 8018774:	f04f 32ff 	mov.w	r2, #4294967295
 8018778:	f1c3 0320 	rsb	r3, r3, #32
 801877c:	fa22 f303 	lsr.w	r3, r2, r3
 8018780:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018784:	401a      	ands	r2, r3
 8018786:	f846 2c04 	str.w	r2, [r6, #-4]
 801878a:	e7d3      	b.n	8018734 <__hexnan+0xd4>
 801878c:	3f04      	subs	r7, #4
 801878e:	e7d1      	b.n	8018734 <__hexnan+0xd4>
 8018790:	2004      	movs	r0, #4
 8018792:	b007      	add	sp, #28
 8018794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018798 <_localeconv_r>:
 8018798:	4800      	ldr	r0, [pc, #0]	; (801879c <_localeconv_r+0x4>)
 801879a:	4770      	bx	lr
 801879c:	20000164 	.word	0x20000164

080187a0 <__retarget_lock_init_recursive>:
 80187a0:	4770      	bx	lr

080187a2 <__retarget_lock_acquire_recursive>:
 80187a2:	4770      	bx	lr

080187a4 <__retarget_lock_release_recursive>:
 80187a4:	4770      	bx	lr
	...

080187a8 <_lseek_r>:
 80187a8:	b538      	push	{r3, r4, r5, lr}
 80187aa:	4d07      	ldr	r5, [pc, #28]	; (80187c8 <_lseek_r+0x20>)
 80187ac:	4604      	mov	r4, r0
 80187ae:	4608      	mov	r0, r1
 80187b0:	4611      	mov	r1, r2
 80187b2:	2200      	movs	r2, #0
 80187b4:	602a      	str	r2, [r5, #0]
 80187b6:	461a      	mov	r2, r3
 80187b8:	f7ee ff16 	bl	80075e8 <_lseek>
 80187bc:	1c43      	adds	r3, r0, #1
 80187be:	d102      	bne.n	80187c6 <_lseek_r+0x1e>
 80187c0:	682b      	ldr	r3, [r5, #0]
 80187c2:	b103      	cbz	r3, 80187c6 <_lseek_r+0x1e>
 80187c4:	6023      	str	r3, [r4, #0]
 80187c6:	bd38      	pop	{r3, r4, r5, pc}
 80187c8:	20041e60 	.word	0x20041e60

080187cc <malloc>:
 80187cc:	4b02      	ldr	r3, [pc, #8]	; (80187d8 <malloc+0xc>)
 80187ce:	4601      	mov	r1, r0
 80187d0:	6818      	ldr	r0, [r3, #0]
 80187d2:	f000 bd2f 	b.w	8019234 <_malloc_r>
 80187d6:	bf00      	nop
 80187d8:	2000000c 	.word	0x2000000c

080187dc <__ascii_mbtowc>:
 80187dc:	b082      	sub	sp, #8
 80187de:	b901      	cbnz	r1, 80187e2 <__ascii_mbtowc+0x6>
 80187e0:	a901      	add	r1, sp, #4
 80187e2:	b142      	cbz	r2, 80187f6 <__ascii_mbtowc+0x1a>
 80187e4:	b14b      	cbz	r3, 80187fa <__ascii_mbtowc+0x1e>
 80187e6:	7813      	ldrb	r3, [r2, #0]
 80187e8:	600b      	str	r3, [r1, #0]
 80187ea:	7812      	ldrb	r2, [r2, #0]
 80187ec:	1e10      	subs	r0, r2, #0
 80187ee:	bf18      	it	ne
 80187f0:	2001      	movne	r0, #1
 80187f2:	b002      	add	sp, #8
 80187f4:	4770      	bx	lr
 80187f6:	4610      	mov	r0, r2
 80187f8:	e7fb      	b.n	80187f2 <__ascii_mbtowc+0x16>
 80187fa:	f06f 0001 	mvn.w	r0, #1
 80187fe:	e7f8      	b.n	80187f2 <__ascii_mbtowc+0x16>

08018800 <_Balloc>:
 8018800:	b570      	push	{r4, r5, r6, lr}
 8018802:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018804:	4604      	mov	r4, r0
 8018806:	460d      	mov	r5, r1
 8018808:	b976      	cbnz	r6, 8018828 <_Balloc+0x28>
 801880a:	2010      	movs	r0, #16
 801880c:	f7ff ffde 	bl	80187cc <malloc>
 8018810:	4602      	mov	r2, r0
 8018812:	6260      	str	r0, [r4, #36]	; 0x24
 8018814:	b920      	cbnz	r0, 8018820 <_Balloc+0x20>
 8018816:	4b18      	ldr	r3, [pc, #96]	; (8018878 <_Balloc+0x78>)
 8018818:	4818      	ldr	r0, [pc, #96]	; (801887c <_Balloc+0x7c>)
 801881a:	2166      	movs	r1, #102	; 0x66
 801881c:	f001 fd36 	bl	801a28c <__assert_func>
 8018820:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018824:	6006      	str	r6, [r0, #0]
 8018826:	60c6      	str	r6, [r0, #12]
 8018828:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801882a:	68f3      	ldr	r3, [r6, #12]
 801882c:	b183      	cbz	r3, 8018850 <_Balloc+0x50>
 801882e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018830:	68db      	ldr	r3, [r3, #12]
 8018832:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018836:	b9b8      	cbnz	r0, 8018868 <_Balloc+0x68>
 8018838:	2101      	movs	r1, #1
 801883a:	fa01 f605 	lsl.w	r6, r1, r5
 801883e:	1d72      	adds	r2, r6, #5
 8018840:	0092      	lsls	r2, r2, #2
 8018842:	4620      	mov	r0, r4
 8018844:	f000 fc97 	bl	8019176 <_calloc_r>
 8018848:	b160      	cbz	r0, 8018864 <_Balloc+0x64>
 801884a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801884e:	e00e      	b.n	801886e <_Balloc+0x6e>
 8018850:	2221      	movs	r2, #33	; 0x21
 8018852:	2104      	movs	r1, #4
 8018854:	4620      	mov	r0, r4
 8018856:	f000 fc8e 	bl	8019176 <_calloc_r>
 801885a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801885c:	60f0      	str	r0, [r6, #12]
 801885e:	68db      	ldr	r3, [r3, #12]
 8018860:	2b00      	cmp	r3, #0
 8018862:	d1e4      	bne.n	801882e <_Balloc+0x2e>
 8018864:	2000      	movs	r0, #0
 8018866:	bd70      	pop	{r4, r5, r6, pc}
 8018868:	6802      	ldr	r2, [r0, #0]
 801886a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801886e:	2300      	movs	r3, #0
 8018870:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018874:	e7f7      	b.n	8018866 <_Balloc+0x66>
 8018876:	bf00      	nop
 8018878:	0801b12e 	.word	0x0801b12e
 801887c:	0801b298 	.word	0x0801b298

08018880 <_Bfree>:
 8018880:	b570      	push	{r4, r5, r6, lr}
 8018882:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018884:	4605      	mov	r5, r0
 8018886:	460c      	mov	r4, r1
 8018888:	b976      	cbnz	r6, 80188a8 <_Bfree+0x28>
 801888a:	2010      	movs	r0, #16
 801888c:	f7ff ff9e 	bl	80187cc <malloc>
 8018890:	4602      	mov	r2, r0
 8018892:	6268      	str	r0, [r5, #36]	; 0x24
 8018894:	b920      	cbnz	r0, 80188a0 <_Bfree+0x20>
 8018896:	4b09      	ldr	r3, [pc, #36]	; (80188bc <_Bfree+0x3c>)
 8018898:	4809      	ldr	r0, [pc, #36]	; (80188c0 <_Bfree+0x40>)
 801889a:	218a      	movs	r1, #138	; 0x8a
 801889c:	f001 fcf6 	bl	801a28c <__assert_func>
 80188a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80188a4:	6006      	str	r6, [r0, #0]
 80188a6:	60c6      	str	r6, [r0, #12]
 80188a8:	b13c      	cbz	r4, 80188ba <_Bfree+0x3a>
 80188aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80188ac:	6862      	ldr	r2, [r4, #4]
 80188ae:	68db      	ldr	r3, [r3, #12]
 80188b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80188b4:	6021      	str	r1, [r4, #0]
 80188b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80188ba:	bd70      	pop	{r4, r5, r6, pc}
 80188bc:	0801b12e 	.word	0x0801b12e
 80188c0:	0801b298 	.word	0x0801b298

080188c4 <__multadd>:
 80188c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188c8:	690e      	ldr	r6, [r1, #16]
 80188ca:	4607      	mov	r7, r0
 80188cc:	4698      	mov	r8, r3
 80188ce:	460c      	mov	r4, r1
 80188d0:	f101 0014 	add.w	r0, r1, #20
 80188d4:	2300      	movs	r3, #0
 80188d6:	6805      	ldr	r5, [r0, #0]
 80188d8:	b2a9      	uxth	r1, r5
 80188da:	fb02 8101 	mla	r1, r2, r1, r8
 80188de:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80188e2:	0c2d      	lsrs	r5, r5, #16
 80188e4:	fb02 c505 	mla	r5, r2, r5, ip
 80188e8:	b289      	uxth	r1, r1
 80188ea:	3301      	adds	r3, #1
 80188ec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80188f0:	429e      	cmp	r6, r3
 80188f2:	f840 1b04 	str.w	r1, [r0], #4
 80188f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80188fa:	dcec      	bgt.n	80188d6 <__multadd+0x12>
 80188fc:	f1b8 0f00 	cmp.w	r8, #0
 8018900:	d022      	beq.n	8018948 <__multadd+0x84>
 8018902:	68a3      	ldr	r3, [r4, #8]
 8018904:	42b3      	cmp	r3, r6
 8018906:	dc19      	bgt.n	801893c <__multadd+0x78>
 8018908:	6861      	ldr	r1, [r4, #4]
 801890a:	4638      	mov	r0, r7
 801890c:	3101      	adds	r1, #1
 801890e:	f7ff ff77 	bl	8018800 <_Balloc>
 8018912:	4605      	mov	r5, r0
 8018914:	b928      	cbnz	r0, 8018922 <__multadd+0x5e>
 8018916:	4602      	mov	r2, r0
 8018918:	4b0d      	ldr	r3, [pc, #52]	; (8018950 <__multadd+0x8c>)
 801891a:	480e      	ldr	r0, [pc, #56]	; (8018954 <__multadd+0x90>)
 801891c:	21b5      	movs	r1, #181	; 0xb5
 801891e:	f001 fcb5 	bl	801a28c <__assert_func>
 8018922:	6922      	ldr	r2, [r4, #16]
 8018924:	3202      	adds	r2, #2
 8018926:	f104 010c 	add.w	r1, r4, #12
 801892a:	0092      	lsls	r2, r2, #2
 801892c:	300c      	adds	r0, #12
 801892e:	f7fc fe07 	bl	8015540 <memcpy>
 8018932:	4621      	mov	r1, r4
 8018934:	4638      	mov	r0, r7
 8018936:	f7ff ffa3 	bl	8018880 <_Bfree>
 801893a:	462c      	mov	r4, r5
 801893c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018940:	3601      	adds	r6, #1
 8018942:	f8c3 8014 	str.w	r8, [r3, #20]
 8018946:	6126      	str	r6, [r4, #16]
 8018948:	4620      	mov	r0, r4
 801894a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801894e:	bf00      	nop
 8018950:	0801b1a4 	.word	0x0801b1a4
 8018954:	0801b298 	.word	0x0801b298

08018958 <__s2b>:
 8018958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801895c:	460c      	mov	r4, r1
 801895e:	4615      	mov	r5, r2
 8018960:	461f      	mov	r7, r3
 8018962:	2209      	movs	r2, #9
 8018964:	3308      	adds	r3, #8
 8018966:	4606      	mov	r6, r0
 8018968:	fb93 f3f2 	sdiv	r3, r3, r2
 801896c:	2100      	movs	r1, #0
 801896e:	2201      	movs	r2, #1
 8018970:	429a      	cmp	r2, r3
 8018972:	db09      	blt.n	8018988 <__s2b+0x30>
 8018974:	4630      	mov	r0, r6
 8018976:	f7ff ff43 	bl	8018800 <_Balloc>
 801897a:	b940      	cbnz	r0, 801898e <__s2b+0x36>
 801897c:	4602      	mov	r2, r0
 801897e:	4b19      	ldr	r3, [pc, #100]	; (80189e4 <__s2b+0x8c>)
 8018980:	4819      	ldr	r0, [pc, #100]	; (80189e8 <__s2b+0x90>)
 8018982:	21ce      	movs	r1, #206	; 0xce
 8018984:	f001 fc82 	bl	801a28c <__assert_func>
 8018988:	0052      	lsls	r2, r2, #1
 801898a:	3101      	adds	r1, #1
 801898c:	e7f0      	b.n	8018970 <__s2b+0x18>
 801898e:	9b08      	ldr	r3, [sp, #32]
 8018990:	6143      	str	r3, [r0, #20]
 8018992:	2d09      	cmp	r5, #9
 8018994:	f04f 0301 	mov.w	r3, #1
 8018998:	6103      	str	r3, [r0, #16]
 801899a:	dd16      	ble.n	80189ca <__s2b+0x72>
 801899c:	f104 0909 	add.w	r9, r4, #9
 80189a0:	46c8      	mov	r8, r9
 80189a2:	442c      	add	r4, r5
 80189a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80189a8:	4601      	mov	r1, r0
 80189aa:	3b30      	subs	r3, #48	; 0x30
 80189ac:	220a      	movs	r2, #10
 80189ae:	4630      	mov	r0, r6
 80189b0:	f7ff ff88 	bl	80188c4 <__multadd>
 80189b4:	45a0      	cmp	r8, r4
 80189b6:	d1f5      	bne.n	80189a4 <__s2b+0x4c>
 80189b8:	f1a5 0408 	sub.w	r4, r5, #8
 80189bc:	444c      	add	r4, r9
 80189be:	1b2d      	subs	r5, r5, r4
 80189c0:	1963      	adds	r3, r4, r5
 80189c2:	42bb      	cmp	r3, r7
 80189c4:	db04      	blt.n	80189d0 <__s2b+0x78>
 80189c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80189ca:	340a      	adds	r4, #10
 80189cc:	2509      	movs	r5, #9
 80189ce:	e7f6      	b.n	80189be <__s2b+0x66>
 80189d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80189d4:	4601      	mov	r1, r0
 80189d6:	3b30      	subs	r3, #48	; 0x30
 80189d8:	220a      	movs	r2, #10
 80189da:	4630      	mov	r0, r6
 80189dc:	f7ff ff72 	bl	80188c4 <__multadd>
 80189e0:	e7ee      	b.n	80189c0 <__s2b+0x68>
 80189e2:	bf00      	nop
 80189e4:	0801b1a4 	.word	0x0801b1a4
 80189e8:	0801b298 	.word	0x0801b298

080189ec <__hi0bits>:
 80189ec:	0c03      	lsrs	r3, r0, #16
 80189ee:	041b      	lsls	r3, r3, #16
 80189f0:	b9d3      	cbnz	r3, 8018a28 <__hi0bits+0x3c>
 80189f2:	0400      	lsls	r0, r0, #16
 80189f4:	2310      	movs	r3, #16
 80189f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80189fa:	bf04      	itt	eq
 80189fc:	0200      	lsleq	r0, r0, #8
 80189fe:	3308      	addeq	r3, #8
 8018a00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018a04:	bf04      	itt	eq
 8018a06:	0100      	lsleq	r0, r0, #4
 8018a08:	3304      	addeq	r3, #4
 8018a0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018a0e:	bf04      	itt	eq
 8018a10:	0080      	lsleq	r0, r0, #2
 8018a12:	3302      	addeq	r3, #2
 8018a14:	2800      	cmp	r0, #0
 8018a16:	db05      	blt.n	8018a24 <__hi0bits+0x38>
 8018a18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018a1c:	f103 0301 	add.w	r3, r3, #1
 8018a20:	bf08      	it	eq
 8018a22:	2320      	moveq	r3, #32
 8018a24:	4618      	mov	r0, r3
 8018a26:	4770      	bx	lr
 8018a28:	2300      	movs	r3, #0
 8018a2a:	e7e4      	b.n	80189f6 <__hi0bits+0xa>

08018a2c <__lo0bits>:
 8018a2c:	6803      	ldr	r3, [r0, #0]
 8018a2e:	f013 0207 	ands.w	r2, r3, #7
 8018a32:	4601      	mov	r1, r0
 8018a34:	d00b      	beq.n	8018a4e <__lo0bits+0x22>
 8018a36:	07da      	lsls	r2, r3, #31
 8018a38:	d424      	bmi.n	8018a84 <__lo0bits+0x58>
 8018a3a:	0798      	lsls	r0, r3, #30
 8018a3c:	bf49      	itett	mi
 8018a3e:	085b      	lsrmi	r3, r3, #1
 8018a40:	089b      	lsrpl	r3, r3, #2
 8018a42:	2001      	movmi	r0, #1
 8018a44:	600b      	strmi	r3, [r1, #0]
 8018a46:	bf5c      	itt	pl
 8018a48:	600b      	strpl	r3, [r1, #0]
 8018a4a:	2002      	movpl	r0, #2
 8018a4c:	4770      	bx	lr
 8018a4e:	b298      	uxth	r0, r3
 8018a50:	b9b0      	cbnz	r0, 8018a80 <__lo0bits+0x54>
 8018a52:	0c1b      	lsrs	r3, r3, #16
 8018a54:	2010      	movs	r0, #16
 8018a56:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018a5a:	bf04      	itt	eq
 8018a5c:	0a1b      	lsreq	r3, r3, #8
 8018a5e:	3008      	addeq	r0, #8
 8018a60:	071a      	lsls	r2, r3, #28
 8018a62:	bf04      	itt	eq
 8018a64:	091b      	lsreq	r3, r3, #4
 8018a66:	3004      	addeq	r0, #4
 8018a68:	079a      	lsls	r2, r3, #30
 8018a6a:	bf04      	itt	eq
 8018a6c:	089b      	lsreq	r3, r3, #2
 8018a6e:	3002      	addeq	r0, #2
 8018a70:	07da      	lsls	r2, r3, #31
 8018a72:	d403      	bmi.n	8018a7c <__lo0bits+0x50>
 8018a74:	085b      	lsrs	r3, r3, #1
 8018a76:	f100 0001 	add.w	r0, r0, #1
 8018a7a:	d005      	beq.n	8018a88 <__lo0bits+0x5c>
 8018a7c:	600b      	str	r3, [r1, #0]
 8018a7e:	4770      	bx	lr
 8018a80:	4610      	mov	r0, r2
 8018a82:	e7e8      	b.n	8018a56 <__lo0bits+0x2a>
 8018a84:	2000      	movs	r0, #0
 8018a86:	4770      	bx	lr
 8018a88:	2020      	movs	r0, #32
 8018a8a:	4770      	bx	lr

08018a8c <__i2b>:
 8018a8c:	b510      	push	{r4, lr}
 8018a8e:	460c      	mov	r4, r1
 8018a90:	2101      	movs	r1, #1
 8018a92:	f7ff feb5 	bl	8018800 <_Balloc>
 8018a96:	4602      	mov	r2, r0
 8018a98:	b928      	cbnz	r0, 8018aa6 <__i2b+0x1a>
 8018a9a:	4b05      	ldr	r3, [pc, #20]	; (8018ab0 <__i2b+0x24>)
 8018a9c:	4805      	ldr	r0, [pc, #20]	; (8018ab4 <__i2b+0x28>)
 8018a9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8018aa2:	f001 fbf3 	bl	801a28c <__assert_func>
 8018aa6:	2301      	movs	r3, #1
 8018aa8:	6144      	str	r4, [r0, #20]
 8018aaa:	6103      	str	r3, [r0, #16]
 8018aac:	bd10      	pop	{r4, pc}
 8018aae:	bf00      	nop
 8018ab0:	0801b1a4 	.word	0x0801b1a4
 8018ab4:	0801b298 	.word	0x0801b298

08018ab8 <__multiply>:
 8018ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018abc:	4614      	mov	r4, r2
 8018abe:	690a      	ldr	r2, [r1, #16]
 8018ac0:	6923      	ldr	r3, [r4, #16]
 8018ac2:	429a      	cmp	r2, r3
 8018ac4:	bfb8      	it	lt
 8018ac6:	460b      	movlt	r3, r1
 8018ac8:	460d      	mov	r5, r1
 8018aca:	bfbc      	itt	lt
 8018acc:	4625      	movlt	r5, r4
 8018ace:	461c      	movlt	r4, r3
 8018ad0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8018ad4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018ad8:	68ab      	ldr	r3, [r5, #8]
 8018ada:	6869      	ldr	r1, [r5, #4]
 8018adc:	eb0a 0709 	add.w	r7, sl, r9
 8018ae0:	42bb      	cmp	r3, r7
 8018ae2:	b085      	sub	sp, #20
 8018ae4:	bfb8      	it	lt
 8018ae6:	3101      	addlt	r1, #1
 8018ae8:	f7ff fe8a 	bl	8018800 <_Balloc>
 8018aec:	b930      	cbnz	r0, 8018afc <__multiply+0x44>
 8018aee:	4602      	mov	r2, r0
 8018af0:	4b42      	ldr	r3, [pc, #264]	; (8018bfc <__multiply+0x144>)
 8018af2:	4843      	ldr	r0, [pc, #268]	; (8018c00 <__multiply+0x148>)
 8018af4:	f240 115d 	movw	r1, #349	; 0x15d
 8018af8:	f001 fbc8 	bl	801a28c <__assert_func>
 8018afc:	f100 0614 	add.w	r6, r0, #20
 8018b00:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8018b04:	4633      	mov	r3, r6
 8018b06:	2200      	movs	r2, #0
 8018b08:	4543      	cmp	r3, r8
 8018b0a:	d31e      	bcc.n	8018b4a <__multiply+0x92>
 8018b0c:	f105 0c14 	add.w	ip, r5, #20
 8018b10:	f104 0314 	add.w	r3, r4, #20
 8018b14:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8018b18:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8018b1c:	9202      	str	r2, [sp, #8]
 8018b1e:	ebac 0205 	sub.w	r2, ip, r5
 8018b22:	3a15      	subs	r2, #21
 8018b24:	f022 0203 	bic.w	r2, r2, #3
 8018b28:	3204      	adds	r2, #4
 8018b2a:	f105 0115 	add.w	r1, r5, #21
 8018b2e:	458c      	cmp	ip, r1
 8018b30:	bf38      	it	cc
 8018b32:	2204      	movcc	r2, #4
 8018b34:	9201      	str	r2, [sp, #4]
 8018b36:	9a02      	ldr	r2, [sp, #8]
 8018b38:	9303      	str	r3, [sp, #12]
 8018b3a:	429a      	cmp	r2, r3
 8018b3c:	d808      	bhi.n	8018b50 <__multiply+0x98>
 8018b3e:	2f00      	cmp	r7, #0
 8018b40:	dc55      	bgt.n	8018bee <__multiply+0x136>
 8018b42:	6107      	str	r7, [r0, #16]
 8018b44:	b005      	add	sp, #20
 8018b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b4a:	f843 2b04 	str.w	r2, [r3], #4
 8018b4e:	e7db      	b.n	8018b08 <__multiply+0x50>
 8018b50:	f8b3 a000 	ldrh.w	sl, [r3]
 8018b54:	f1ba 0f00 	cmp.w	sl, #0
 8018b58:	d020      	beq.n	8018b9c <__multiply+0xe4>
 8018b5a:	f105 0e14 	add.w	lr, r5, #20
 8018b5e:	46b1      	mov	r9, r6
 8018b60:	2200      	movs	r2, #0
 8018b62:	f85e 4b04 	ldr.w	r4, [lr], #4
 8018b66:	f8d9 b000 	ldr.w	fp, [r9]
 8018b6a:	b2a1      	uxth	r1, r4
 8018b6c:	fa1f fb8b 	uxth.w	fp, fp
 8018b70:	fb0a b101 	mla	r1, sl, r1, fp
 8018b74:	4411      	add	r1, r2
 8018b76:	f8d9 2000 	ldr.w	r2, [r9]
 8018b7a:	0c24      	lsrs	r4, r4, #16
 8018b7c:	0c12      	lsrs	r2, r2, #16
 8018b7e:	fb0a 2404 	mla	r4, sl, r4, r2
 8018b82:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8018b86:	b289      	uxth	r1, r1
 8018b88:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8018b8c:	45f4      	cmp	ip, lr
 8018b8e:	f849 1b04 	str.w	r1, [r9], #4
 8018b92:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8018b96:	d8e4      	bhi.n	8018b62 <__multiply+0xaa>
 8018b98:	9901      	ldr	r1, [sp, #4]
 8018b9a:	5072      	str	r2, [r6, r1]
 8018b9c:	9a03      	ldr	r2, [sp, #12]
 8018b9e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018ba2:	3304      	adds	r3, #4
 8018ba4:	f1b9 0f00 	cmp.w	r9, #0
 8018ba8:	d01f      	beq.n	8018bea <__multiply+0x132>
 8018baa:	6834      	ldr	r4, [r6, #0]
 8018bac:	f105 0114 	add.w	r1, r5, #20
 8018bb0:	46b6      	mov	lr, r6
 8018bb2:	f04f 0a00 	mov.w	sl, #0
 8018bb6:	880a      	ldrh	r2, [r1, #0]
 8018bb8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8018bbc:	fb09 b202 	mla	r2, r9, r2, fp
 8018bc0:	4492      	add	sl, r2
 8018bc2:	b2a4      	uxth	r4, r4
 8018bc4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8018bc8:	f84e 4b04 	str.w	r4, [lr], #4
 8018bcc:	f851 4b04 	ldr.w	r4, [r1], #4
 8018bd0:	f8be 2000 	ldrh.w	r2, [lr]
 8018bd4:	0c24      	lsrs	r4, r4, #16
 8018bd6:	fb09 2404 	mla	r4, r9, r4, r2
 8018bda:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8018bde:	458c      	cmp	ip, r1
 8018be0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018be4:	d8e7      	bhi.n	8018bb6 <__multiply+0xfe>
 8018be6:	9a01      	ldr	r2, [sp, #4]
 8018be8:	50b4      	str	r4, [r6, r2]
 8018bea:	3604      	adds	r6, #4
 8018bec:	e7a3      	b.n	8018b36 <__multiply+0x7e>
 8018bee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d1a5      	bne.n	8018b42 <__multiply+0x8a>
 8018bf6:	3f01      	subs	r7, #1
 8018bf8:	e7a1      	b.n	8018b3e <__multiply+0x86>
 8018bfa:	bf00      	nop
 8018bfc:	0801b1a4 	.word	0x0801b1a4
 8018c00:	0801b298 	.word	0x0801b298

08018c04 <__pow5mult>:
 8018c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c08:	4615      	mov	r5, r2
 8018c0a:	f012 0203 	ands.w	r2, r2, #3
 8018c0e:	4606      	mov	r6, r0
 8018c10:	460f      	mov	r7, r1
 8018c12:	d007      	beq.n	8018c24 <__pow5mult+0x20>
 8018c14:	4c25      	ldr	r4, [pc, #148]	; (8018cac <__pow5mult+0xa8>)
 8018c16:	3a01      	subs	r2, #1
 8018c18:	2300      	movs	r3, #0
 8018c1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018c1e:	f7ff fe51 	bl	80188c4 <__multadd>
 8018c22:	4607      	mov	r7, r0
 8018c24:	10ad      	asrs	r5, r5, #2
 8018c26:	d03d      	beq.n	8018ca4 <__pow5mult+0xa0>
 8018c28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018c2a:	b97c      	cbnz	r4, 8018c4c <__pow5mult+0x48>
 8018c2c:	2010      	movs	r0, #16
 8018c2e:	f7ff fdcd 	bl	80187cc <malloc>
 8018c32:	4602      	mov	r2, r0
 8018c34:	6270      	str	r0, [r6, #36]	; 0x24
 8018c36:	b928      	cbnz	r0, 8018c44 <__pow5mult+0x40>
 8018c38:	4b1d      	ldr	r3, [pc, #116]	; (8018cb0 <__pow5mult+0xac>)
 8018c3a:	481e      	ldr	r0, [pc, #120]	; (8018cb4 <__pow5mult+0xb0>)
 8018c3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8018c40:	f001 fb24 	bl	801a28c <__assert_func>
 8018c44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018c48:	6004      	str	r4, [r0, #0]
 8018c4a:	60c4      	str	r4, [r0, #12]
 8018c4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018c50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018c54:	b94c      	cbnz	r4, 8018c6a <__pow5mult+0x66>
 8018c56:	f240 2171 	movw	r1, #625	; 0x271
 8018c5a:	4630      	mov	r0, r6
 8018c5c:	f7ff ff16 	bl	8018a8c <__i2b>
 8018c60:	2300      	movs	r3, #0
 8018c62:	f8c8 0008 	str.w	r0, [r8, #8]
 8018c66:	4604      	mov	r4, r0
 8018c68:	6003      	str	r3, [r0, #0]
 8018c6a:	f04f 0900 	mov.w	r9, #0
 8018c6e:	07eb      	lsls	r3, r5, #31
 8018c70:	d50a      	bpl.n	8018c88 <__pow5mult+0x84>
 8018c72:	4639      	mov	r1, r7
 8018c74:	4622      	mov	r2, r4
 8018c76:	4630      	mov	r0, r6
 8018c78:	f7ff ff1e 	bl	8018ab8 <__multiply>
 8018c7c:	4639      	mov	r1, r7
 8018c7e:	4680      	mov	r8, r0
 8018c80:	4630      	mov	r0, r6
 8018c82:	f7ff fdfd 	bl	8018880 <_Bfree>
 8018c86:	4647      	mov	r7, r8
 8018c88:	106d      	asrs	r5, r5, #1
 8018c8a:	d00b      	beq.n	8018ca4 <__pow5mult+0xa0>
 8018c8c:	6820      	ldr	r0, [r4, #0]
 8018c8e:	b938      	cbnz	r0, 8018ca0 <__pow5mult+0x9c>
 8018c90:	4622      	mov	r2, r4
 8018c92:	4621      	mov	r1, r4
 8018c94:	4630      	mov	r0, r6
 8018c96:	f7ff ff0f 	bl	8018ab8 <__multiply>
 8018c9a:	6020      	str	r0, [r4, #0]
 8018c9c:	f8c0 9000 	str.w	r9, [r0]
 8018ca0:	4604      	mov	r4, r0
 8018ca2:	e7e4      	b.n	8018c6e <__pow5mult+0x6a>
 8018ca4:	4638      	mov	r0, r7
 8018ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018caa:	bf00      	nop
 8018cac:	0801b3e8 	.word	0x0801b3e8
 8018cb0:	0801b12e 	.word	0x0801b12e
 8018cb4:	0801b298 	.word	0x0801b298

08018cb8 <__lshift>:
 8018cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cbc:	460c      	mov	r4, r1
 8018cbe:	6849      	ldr	r1, [r1, #4]
 8018cc0:	6923      	ldr	r3, [r4, #16]
 8018cc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018cc6:	68a3      	ldr	r3, [r4, #8]
 8018cc8:	4607      	mov	r7, r0
 8018cca:	4691      	mov	r9, r2
 8018ccc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018cd0:	f108 0601 	add.w	r6, r8, #1
 8018cd4:	42b3      	cmp	r3, r6
 8018cd6:	db0b      	blt.n	8018cf0 <__lshift+0x38>
 8018cd8:	4638      	mov	r0, r7
 8018cda:	f7ff fd91 	bl	8018800 <_Balloc>
 8018cde:	4605      	mov	r5, r0
 8018ce0:	b948      	cbnz	r0, 8018cf6 <__lshift+0x3e>
 8018ce2:	4602      	mov	r2, r0
 8018ce4:	4b28      	ldr	r3, [pc, #160]	; (8018d88 <__lshift+0xd0>)
 8018ce6:	4829      	ldr	r0, [pc, #164]	; (8018d8c <__lshift+0xd4>)
 8018ce8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018cec:	f001 face 	bl	801a28c <__assert_func>
 8018cf0:	3101      	adds	r1, #1
 8018cf2:	005b      	lsls	r3, r3, #1
 8018cf4:	e7ee      	b.n	8018cd4 <__lshift+0x1c>
 8018cf6:	2300      	movs	r3, #0
 8018cf8:	f100 0114 	add.w	r1, r0, #20
 8018cfc:	f100 0210 	add.w	r2, r0, #16
 8018d00:	4618      	mov	r0, r3
 8018d02:	4553      	cmp	r3, sl
 8018d04:	db33      	blt.n	8018d6e <__lshift+0xb6>
 8018d06:	6920      	ldr	r0, [r4, #16]
 8018d08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018d0c:	f104 0314 	add.w	r3, r4, #20
 8018d10:	f019 091f 	ands.w	r9, r9, #31
 8018d14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018d18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018d1c:	d02b      	beq.n	8018d76 <__lshift+0xbe>
 8018d1e:	f1c9 0e20 	rsb	lr, r9, #32
 8018d22:	468a      	mov	sl, r1
 8018d24:	2200      	movs	r2, #0
 8018d26:	6818      	ldr	r0, [r3, #0]
 8018d28:	fa00 f009 	lsl.w	r0, r0, r9
 8018d2c:	4302      	orrs	r2, r0
 8018d2e:	f84a 2b04 	str.w	r2, [sl], #4
 8018d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d36:	459c      	cmp	ip, r3
 8018d38:	fa22 f20e 	lsr.w	r2, r2, lr
 8018d3c:	d8f3      	bhi.n	8018d26 <__lshift+0x6e>
 8018d3e:	ebac 0304 	sub.w	r3, ip, r4
 8018d42:	3b15      	subs	r3, #21
 8018d44:	f023 0303 	bic.w	r3, r3, #3
 8018d48:	3304      	adds	r3, #4
 8018d4a:	f104 0015 	add.w	r0, r4, #21
 8018d4e:	4584      	cmp	ip, r0
 8018d50:	bf38      	it	cc
 8018d52:	2304      	movcc	r3, #4
 8018d54:	50ca      	str	r2, [r1, r3]
 8018d56:	b10a      	cbz	r2, 8018d5c <__lshift+0xa4>
 8018d58:	f108 0602 	add.w	r6, r8, #2
 8018d5c:	3e01      	subs	r6, #1
 8018d5e:	4638      	mov	r0, r7
 8018d60:	612e      	str	r6, [r5, #16]
 8018d62:	4621      	mov	r1, r4
 8018d64:	f7ff fd8c 	bl	8018880 <_Bfree>
 8018d68:	4628      	mov	r0, r5
 8018d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8018d72:	3301      	adds	r3, #1
 8018d74:	e7c5      	b.n	8018d02 <__lshift+0x4a>
 8018d76:	3904      	subs	r1, #4
 8018d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8018d80:	459c      	cmp	ip, r3
 8018d82:	d8f9      	bhi.n	8018d78 <__lshift+0xc0>
 8018d84:	e7ea      	b.n	8018d5c <__lshift+0xa4>
 8018d86:	bf00      	nop
 8018d88:	0801b1a4 	.word	0x0801b1a4
 8018d8c:	0801b298 	.word	0x0801b298

08018d90 <__mcmp>:
 8018d90:	b530      	push	{r4, r5, lr}
 8018d92:	6902      	ldr	r2, [r0, #16]
 8018d94:	690c      	ldr	r4, [r1, #16]
 8018d96:	1b12      	subs	r2, r2, r4
 8018d98:	d10e      	bne.n	8018db8 <__mcmp+0x28>
 8018d9a:	f100 0314 	add.w	r3, r0, #20
 8018d9e:	3114      	adds	r1, #20
 8018da0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018da4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018da8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018dac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018db0:	42a5      	cmp	r5, r4
 8018db2:	d003      	beq.n	8018dbc <__mcmp+0x2c>
 8018db4:	d305      	bcc.n	8018dc2 <__mcmp+0x32>
 8018db6:	2201      	movs	r2, #1
 8018db8:	4610      	mov	r0, r2
 8018dba:	bd30      	pop	{r4, r5, pc}
 8018dbc:	4283      	cmp	r3, r0
 8018dbe:	d3f3      	bcc.n	8018da8 <__mcmp+0x18>
 8018dc0:	e7fa      	b.n	8018db8 <__mcmp+0x28>
 8018dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8018dc6:	e7f7      	b.n	8018db8 <__mcmp+0x28>

08018dc8 <__mdiff>:
 8018dc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dcc:	460c      	mov	r4, r1
 8018dce:	4606      	mov	r6, r0
 8018dd0:	4611      	mov	r1, r2
 8018dd2:	4620      	mov	r0, r4
 8018dd4:	4617      	mov	r7, r2
 8018dd6:	f7ff ffdb 	bl	8018d90 <__mcmp>
 8018dda:	1e05      	subs	r5, r0, #0
 8018ddc:	d110      	bne.n	8018e00 <__mdiff+0x38>
 8018dde:	4629      	mov	r1, r5
 8018de0:	4630      	mov	r0, r6
 8018de2:	f7ff fd0d 	bl	8018800 <_Balloc>
 8018de6:	b930      	cbnz	r0, 8018df6 <__mdiff+0x2e>
 8018de8:	4b39      	ldr	r3, [pc, #228]	; (8018ed0 <__mdiff+0x108>)
 8018dea:	4602      	mov	r2, r0
 8018dec:	f240 2132 	movw	r1, #562	; 0x232
 8018df0:	4838      	ldr	r0, [pc, #224]	; (8018ed4 <__mdiff+0x10c>)
 8018df2:	f001 fa4b 	bl	801a28c <__assert_func>
 8018df6:	2301      	movs	r3, #1
 8018df8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018dfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e00:	bfa4      	itt	ge
 8018e02:	463b      	movge	r3, r7
 8018e04:	4627      	movge	r7, r4
 8018e06:	4630      	mov	r0, r6
 8018e08:	6879      	ldr	r1, [r7, #4]
 8018e0a:	bfa6      	itte	ge
 8018e0c:	461c      	movge	r4, r3
 8018e0e:	2500      	movge	r5, #0
 8018e10:	2501      	movlt	r5, #1
 8018e12:	f7ff fcf5 	bl	8018800 <_Balloc>
 8018e16:	b920      	cbnz	r0, 8018e22 <__mdiff+0x5a>
 8018e18:	4b2d      	ldr	r3, [pc, #180]	; (8018ed0 <__mdiff+0x108>)
 8018e1a:	4602      	mov	r2, r0
 8018e1c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8018e20:	e7e6      	b.n	8018df0 <__mdiff+0x28>
 8018e22:	693e      	ldr	r6, [r7, #16]
 8018e24:	60c5      	str	r5, [r0, #12]
 8018e26:	6925      	ldr	r5, [r4, #16]
 8018e28:	f107 0114 	add.w	r1, r7, #20
 8018e2c:	f104 0914 	add.w	r9, r4, #20
 8018e30:	f100 0e14 	add.w	lr, r0, #20
 8018e34:	f107 0210 	add.w	r2, r7, #16
 8018e38:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8018e3c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8018e40:	46f2      	mov	sl, lr
 8018e42:	2700      	movs	r7, #0
 8018e44:	f859 3b04 	ldr.w	r3, [r9], #4
 8018e48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018e4c:	fa1f f883 	uxth.w	r8, r3
 8018e50:	fa17 f78b 	uxtah	r7, r7, fp
 8018e54:	0c1b      	lsrs	r3, r3, #16
 8018e56:	eba7 0808 	sub.w	r8, r7, r8
 8018e5a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018e5e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018e62:	fa1f f888 	uxth.w	r8, r8
 8018e66:	141f      	asrs	r7, r3, #16
 8018e68:	454d      	cmp	r5, r9
 8018e6a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018e6e:	f84a 3b04 	str.w	r3, [sl], #4
 8018e72:	d8e7      	bhi.n	8018e44 <__mdiff+0x7c>
 8018e74:	1b2b      	subs	r3, r5, r4
 8018e76:	3b15      	subs	r3, #21
 8018e78:	f023 0303 	bic.w	r3, r3, #3
 8018e7c:	3304      	adds	r3, #4
 8018e7e:	3415      	adds	r4, #21
 8018e80:	42a5      	cmp	r5, r4
 8018e82:	bf38      	it	cc
 8018e84:	2304      	movcc	r3, #4
 8018e86:	4419      	add	r1, r3
 8018e88:	4473      	add	r3, lr
 8018e8a:	469e      	mov	lr, r3
 8018e8c:	460d      	mov	r5, r1
 8018e8e:	4565      	cmp	r5, ip
 8018e90:	d30e      	bcc.n	8018eb0 <__mdiff+0xe8>
 8018e92:	f10c 0203 	add.w	r2, ip, #3
 8018e96:	1a52      	subs	r2, r2, r1
 8018e98:	f022 0203 	bic.w	r2, r2, #3
 8018e9c:	3903      	subs	r1, #3
 8018e9e:	458c      	cmp	ip, r1
 8018ea0:	bf38      	it	cc
 8018ea2:	2200      	movcc	r2, #0
 8018ea4:	441a      	add	r2, r3
 8018ea6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8018eaa:	b17b      	cbz	r3, 8018ecc <__mdiff+0x104>
 8018eac:	6106      	str	r6, [r0, #16]
 8018eae:	e7a5      	b.n	8018dfc <__mdiff+0x34>
 8018eb0:	f855 8b04 	ldr.w	r8, [r5], #4
 8018eb4:	fa17 f488 	uxtah	r4, r7, r8
 8018eb8:	1422      	asrs	r2, r4, #16
 8018eba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8018ebe:	b2a4      	uxth	r4, r4
 8018ec0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8018ec4:	f84e 4b04 	str.w	r4, [lr], #4
 8018ec8:	1417      	asrs	r7, r2, #16
 8018eca:	e7e0      	b.n	8018e8e <__mdiff+0xc6>
 8018ecc:	3e01      	subs	r6, #1
 8018ece:	e7ea      	b.n	8018ea6 <__mdiff+0xde>
 8018ed0:	0801b1a4 	.word	0x0801b1a4
 8018ed4:	0801b298 	.word	0x0801b298

08018ed8 <__ulp>:
 8018ed8:	b082      	sub	sp, #8
 8018eda:	ed8d 0b00 	vstr	d0, [sp]
 8018ede:	9b01      	ldr	r3, [sp, #4]
 8018ee0:	4912      	ldr	r1, [pc, #72]	; (8018f2c <__ulp+0x54>)
 8018ee2:	4019      	ands	r1, r3
 8018ee4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8018ee8:	2900      	cmp	r1, #0
 8018eea:	dd05      	ble.n	8018ef8 <__ulp+0x20>
 8018eec:	2200      	movs	r2, #0
 8018eee:	460b      	mov	r3, r1
 8018ef0:	ec43 2b10 	vmov	d0, r2, r3
 8018ef4:	b002      	add	sp, #8
 8018ef6:	4770      	bx	lr
 8018ef8:	4249      	negs	r1, r1
 8018efa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8018efe:	ea4f 5021 	mov.w	r0, r1, asr #20
 8018f02:	f04f 0200 	mov.w	r2, #0
 8018f06:	f04f 0300 	mov.w	r3, #0
 8018f0a:	da04      	bge.n	8018f16 <__ulp+0x3e>
 8018f0c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8018f10:	fa41 f300 	asr.w	r3, r1, r0
 8018f14:	e7ec      	b.n	8018ef0 <__ulp+0x18>
 8018f16:	f1a0 0114 	sub.w	r1, r0, #20
 8018f1a:	291e      	cmp	r1, #30
 8018f1c:	bfda      	itte	le
 8018f1e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8018f22:	fa20 f101 	lsrle.w	r1, r0, r1
 8018f26:	2101      	movgt	r1, #1
 8018f28:	460a      	mov	r2, r1
 8018f2a:	e7e1      	b.n	8018ef0 <__ulp+0x18>
 8018f2c:	7ff00000 	.word	0x7ff00000

08018f30 <__b2d>:
 8018f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f32:	6905      	ldr	r5, [r0, #16]
 8018f34:	f100 0714 	add.w	r7, r0, #20
 8018f38:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018f3c:	1f2e      	subs	r6, r5, #4
 8018f3e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018f42:	4620      	mov	r0, r4
 8018f44:	f7ff fd52 	bl	80189ec <__hi0bits>
 8018f48:	f1c0 0320 	rsb	r3, r0, #32
 8018f4c:	280a      	cmp	r0, #10
 8018f4e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8018fcc <__b2d+0x9c>
 8018f52:	600b      	str	r3, [r1, #0]
 8018f54:	dc14      	bgt.n	8018f80 <__b2d+0x50>
 8018f56:	f1c0 0e0b 	rsb	lr, r0, #11
 8018f5a:	fa24 f10e 	lsr.w	r1, r4, lr
 8018f5e:	42b7      	cmp	r7, r6
 8018f60:	ea41 030c 	orr.w	r3, r1, ip
 8018f64:	bf34      	ite	cc
 8018f66:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018f6a:	2100      	movcs	r1, #0
 8018f6c:	3015      	adds	r0, #21
 8018f6e:	fa04 f000 	lsl.w	r0, r4, r0
 8018f72:	fa21 f10e 	lsr.w	r1, r1, lr
 8018f76:	ea40 0201 	orr.w	r2, r0, r1
 8018f7a:	ec43 2b10 	vmov	d0, r2, r3
 8018f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f80:	42b7      	cmp	r7, r6
 8018f82:	bf3a      	itte	cc
 8018f84:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018f88:	f1a5 0608 	subcc.w	r6, r5, #8
 8018f8c:	2100      	movcs	r1, #0
 8018f8e:	380b      	subs	r0, #11
 8018f90:	d017      	beq.n	8018fc2 <__b2d+0x92>
 8018f92:	f1c0 0c20 	rsb	ip, r0, #32
 8018f96:	fa04 f500 	lsl.w	r5, r4, r0
 8018f9a:	42be      	cmp	r6, r7
 8018f9c:	fa21 f40c 	lsr.w	r4, r1, ip
 8018fa0:	ea45 0504 	orr.w	r5, r5, r4
 8018fa4:	bf8c      	ite	hi
 8018fa6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018faa:	2400      	movls	r4, #0
 8018fac:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8018fb0:	fa01 f000 	lsl.w	r0, r1, r0
 8018fb4:	fa24 f40c 	lsr.w	r4, r4, ip
 8018fb8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018fbc:	ea40 0204 	orr.w	r2, r0, r4
 8018fc0:	e7db      	b.n	8018f7a <__b2d+0x4a>
 8018fc2:	ea44 030c 	orr.w	r3, r4, ip
 8018fc6:	460a      	mov	r2, r1
 8018fc8:	e7d7      	b.n	8018f7a <__b2d+0x4a>
 8018fca:	bf00      	nop
 8018fcc:	3ff00000 	.word	0x3ff00000

08018fd0 <__d2b>:
 8018fd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018fd4:	4689      	mov	r9, r1
 8018fd6:	2101      	movs	r1, #1
 8018fd8:	ec57 6b10 	vmov	r6, r7, d0
 8018fdc:	4690      	mov	r8, r2
 8018fde:	f7ff fc0f 	bl	8018800 <_Balloc>
 8018fe2:	4604      	mov	r4, r0
 8018fe4:	b930      	cbnz	r0, 8018ff4 <__d2b+0x24>
 8018fe6:	4602      	mov	r2, r0
 8018fe8:	4b25      	ldr	r3, [pc, #148]	; (8019080 <__d2b+0xb0>)
 8018fea:	4826      	ldr	r0, [pc, #152]	; (8019084 <__d2b+0xb4>)
 8018fec:	f240 310a 	movw	r1, #778	; 0x30a
 8018ff0:	f001 f94c 	bl	801a28c <__assert_func>
 8018ff4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018ff8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018ffc:	bb35      	cbnz	r5, 801904c <__d2b+0x7c>
 8018ffe:	2e00      	cmp	r6, #0
 8019000:	9301      	str	r3, [sp, #4]
 8019002:	d028      	beq.n	8019056 <__d2b+0x86>
 8019004:	4668      	mov	r0, sp
 8019006:	9600      	str	r6, [sp, #0]
 8019008:	f7ff fd10 	bl	8018a2c <__lo0bits>
 801900c:	9900      	ldr	r1, [sp, #0]
 801900e:	b300      	cbz	r0, 8019052 <__d2b+0x82>
 8019010:	9a01      	ldr	r2, [sp, #4]
 8019012:	f1c0 0320 	rsb	r3, r0, #32
 8019016:	fa02 f303 	lsl.w	r3, r2, r3
 801901a:	430b      	orrs	r3, r1
 801901c:	40c2      	lsrs	r2, r0
 801901e:	6163      	str	r3, [r4, #20]
 8019020:	9201      	str	r2, [sp, #4]
 8019022:	9b01      	ldr	r3, [sp, #4]
 8019024:	61a3      	str	r3, [r4, #24]
 8019026:	2b00      	cmp	r3, #0
 8019028:	bf14      	ite	ne
 801902a:	2202      	movne	r2, #2
 801902c:	2201      	moveq	r2, #1
 801902e:	6122      	str	r2, [r4, #16]
 8019030:	b1d5      	cbz	r5, 8019068 <__d2b+0x98>
 8019032:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019036:	4405      	add	r5, r0
 8019038:	f8c9 5000 	str.w	r5, [r9]
 801903c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019040:	f8c8 0000 	str.w	r0, [r8]
 8019044:	4620      	mov	r0, r4
 8019046:	b003      	add	sp, #12
 8019048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801904c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019050:	e7d5      	b.n	8018ffe <__d2b+0x2e>
 8019052:	6161      	str	r1, [r4, #20]
 8019054:	e7e5      	b.n	8019022 <__d2b+0x52>
 8019056:	a801      	add	r0, sp, #4
 8019058:	f7ff fce8 	bl	8018a2c <__lo0bits>
 801905c:	9b01      	ldr	r3, [sp, #4]
 801905e:	6163      	str	r3, [r4, #20]
 8019060:	2201      	movs	r2, #1
 8019062:	6122      	str	r2, [r4, #16]
 8019064:	3020      	adds	r0, #32
 8019066:	e7e3      	b.n	8019030 <__d2b+0x60>
 8019068:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801906c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019070:	f8c9 0000 	str.w	r0, [r9]
 8019074:	6918      	ldr	r0, [r3, #16]
 8019076:	f7ff fcb9 	bl	80189ec <__hi0bits>
 801907a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801907e:	e7df      	b.n	8019040 <__d2b+0x70>
 8019080:	0801b1a4 	.word	0x0801b1a4
 8019084:	0801b298 	.word	0x0801b298

08019088 <__ratio>:
 8019088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801908c:	4688      	mov	r8, r1
 801908e:	4669      	mov	r1, sp
 8019090:	4681      	mov	r9, r0
 8019092:	f7ff ff4d 	bl	8018f30 <__b2d>
 8019096:	a901      	add	r1, sp, #4
 8019098:	4640      	mov	r0, r8
 801909a:	ec55 4b10 	vmov	r4, r5, d0
 801909e:	f7ff ff47 	bl	8018f30 <__b2d>
 80190a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80190a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80190aa:	eba3 0c02 	sub.w	ip, r3, r2
 80190ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 80190b2:	1a9b      	subs	r3, r3, r2
 80190b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80190b8:	ec51 0b10 	vmov	r0, r1, d0
 80190bc:	2b00      	cmp	r3, #0
 80190be:	bfd6      	itet	le
 80190c0:	460a      	movle	r2, r1
 80190c2:	462a      	movgt	r2, r5
 80190c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80190c8:	468b      	mov	fp, r1
 80190ca:	462f      	mov	r7, r5
 80190cc:	bfd4      	ite	le
 80190ce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80190d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80190d6:	4620      	mov	r0, r4
 80190d8:	ee10 2a10 	vmov	r2, s0
 80190dc:	465b      	mov	r3, fp
 80190de:	4639      	mov	r1, r7
 80190e0:	f7e7 fbcc 	bl	800087c <__aeabi_ddiv>
 80190e4:	ec41 0b10 	vmov	d0, r0, r1
 80190e8:	b003      	add	sp, #12
 80190ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080190ee <__copybits>:
 80190ee:	3901      	subs	r1, #1
 80190f0:	b570      	push	{r4, r5, r6, lr}
 80190f2:	1149      	asrs	r1, r1, #5
 80190f4:	6914      	ldr	r4, [r2, #16]
 80190f6:	3101      	adds	r1, #1
 80190f8:	f102 0314 	add.w	r3, r2, #20
 80190fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019100:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019104:	1f05      	subs	r5, r0, #4
 8019106:	42a3      	cmp	r3, r4
 8019108:	d30c      	bcc.n	8019124 <__copybits+0x36>
 801910a:	1aa3      	subs	r3, r4, r2
 801910c:	3b11      	subs	r3, #17
 801910e:	f023 0303 	bic.w	r3, r3, #3
 8019112:	3211      	adds	r2, #17
 8019114:	42a2      	cmp	r2, r4
 8019116:	bf88      	it	hi
 8019118:	2300      	movhi	r3, #0
 801911a:	4418      	add	r0, r3
 801911c:	2300      	movs	r3, #0
 801911e:	4288      	cmp	r0, r1
 8019120:	d305      	bcc.n	801912e <__copybits+0x40>
 8019122:	bd70      	pop	{r4, r5, r6, pc}
 8019124:	f853 6b04 	ldr.w	r6, [r3], #4
 8019128:	f845 6f04 	str.w	r6, [r5, #4]!
 801912c:	e7eb      	b.n	8019106 <__copybits+0x18>
 801912e:	f840 3b04 	str.w	r3, [r0], #4
 8019132:	e7f4      	b.n	801911e <__copybits+0x30>

08019134 <__any_on>:
 8019134:	f100 0214 	add.w	r2, r0, #20
 8019138:	6900      	ldr	r0, [r0, #16]
 801913a:	114b      	asrs	r3, r1, #5
 801913c:	4298      	cmp	r0, r3
 801913e:	b510      	push	{r4, lr}
 8019140:	db11      	blt.n	8019166 <__any_on+0x32>
 8019142:	dd0a      	ble.n	801915a <__any_on+0x26>
 8019144:	f011 011f 	ands.w	r1, r1, #31
 8019148:	d007      	beq.n	801915a <__any_on+0x26>
 801914a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801914e:	fa24 f001 	lsr.w	r0, r4, r1
 8019152:	fa00 f101 	lsl.w	r1, r0, r1
 8019156:	428c      	cmp	r4, r1
 8019158:	d10b      	bne.n	8019172 <__any_on+0x3e>
 801915a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801915e:	4293      	cmp	r3, r2
 8019160:	d803      	bhi.n	801916a <__any_on+0x36>
 8019162:	2000      	movs	r0, #0
 8019164:	bd10      	pop	{r4, pc}
 8019166:	4603      	mov	r3, r0
 8019168:	e7f7      	b.n	801915a <__any_on+0x26>
 801916a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801916e:	2900      	cmp	r1, #0
 8019170:	d0f5      	beq.n	801915e <__any_on+0x2a>
 8019172:	2001      	movs	r0, #1
 8019174:	e7f6      	b.n	8019164 <__any_on+0x30>

08019176 <_calloc_r>:
 8019176:	b513      	push	{r0, r1, r4, lr}
 8019178:	434a      	muls	r2, r1
 801917a:	4611      	mov	r1, r2
 801917c:	9201      	str	r2, [sp, #4]
 801917e:	f000 f859 	bl	8019234 <_malloc_r>
 8019182:	4604      	mov	r4, r0
 8019184:	b118      	cbz	r0, 801918e <_calloc_r+0x18>
 8019186:	9a01      	ldr	r2, [sp, #4]
 8019188:	2100      	movs	r1, #0
 801918a:	f7fc f9e7 	bl	801555c <memset>
 801918e:	4620      	mov	r0, r4
 8019190:	b002      	add	sp, #8
 8019192:	bd10      	pop	{r4, pc}

08019194 <_free_r>:
 8019194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019196:	2900      	cmp	r1, #0
 8019198:	d048      	beq.n	801922c <_free_r+0x98>
 801919a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801919e:	9001      	str	r0, [sp, #4]
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	f1a1 0404 	sub.w	r4, r1, #4
 80191a6:	bfb8      	it	lt
 80191a8:	18e4      	addlt	r4, r4, r3
 80191aa:	f001 f9df 	bl	801a56c <__malloc_lock>
 80191ae:	4a20      	ldr	r2, [pc, #128]	; (8019230 <_free_r+0x9c>)
 80191b0:	9801      	ldr	r0, [sp, #4]
 80191b2:	6813      	ldr	r3, [r2, #0]
 80191b4:	4615      	mov	r5, r2
 80191b6:	b933      	cbnz	r3, 80191c6 <_free_r+0x32>
 80191b8:	6063      	str	r3, [r4, #4]
 80191ba:	6014      	str	r4, [r2, #0]
 80191bc:	b003      	add	sp, #12
 80191be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80191c2:	f001 b9d9 	b.w	801a578 <__malloc_unlock>
 80191c6:	42a3      	cmp	r3, r4
 80191c8:	d90b      	bls.n	80191e2 <_free_r+0x4e>
 80191ca:	6821      	ldr	r1, [r4, #0]
 80191cc:	1862      	adds	r2, r4, r1
 80191ce:	4293      	cmp	r3, r2
 80191d0:	bf04      	itt	eq
 80191d2:	681a      	ldreq	r2, [r3, #0]
 80191d4:	685b      	ldreq	r3, [r3, #4]
 80191d6:	6063      	str	r3, [r4, #4]
 80191d8:	bf04      	itt	eq
 80191da:	1852      	addeq	r2, r2, r1
 80191dc:	6022      	streq	r2, [r4, #0]
 80191de:	602c      	str	r4, [r5, #0]
 80191e0:	e7ec      	b.n	80191bc <_free_r+0x28>
 80191e2:	461a      	mov	r2, r3
 80191e4:	685b      	ldr	r3, [r3, #4]
 80191e6:	b10b      	cbz	r3, 80191ec <_free_r+0x58>
 80191e8:	42a3      	cmp	r3, r4
 80191ea:	d9fa      	bls.n	80191e2 <_free_r+0x4e>
 80191ec:	6811      	ldr	r1, [r2, #0]
 80191ee:	1855      	adds	r5, r2, r1
 80191f0:	42a5      	cmp	r5, r4
 80191f2:	d10b      	bne.n	801920c <_free_r+0x78>
 80191f4:	6824      	ldr	r4, [r4, #0]
 80191f6:	4421      	add	r1, r4
 80191f8:	1854      	adds	r4, r2, r1
 80191fa:	42a3      	cmp	r3, r4
 80191fc:	6011      	str	r1, [r2, #0]
 80191fe:	d1dd      	bne.n	80191bc <_free_r+0x28>
 8019200:	681c      	ldr	r4, [r3, #0]
 8019202:	685b      	ldr	r3, [r3, #4]
 8019204:	6053      	str	r3, [r2, #4]
 8019206:	4421      	add	r1, r4
 8019208:	6011      	str	r1, [r2, #0]
 801920a:	e7d7      	b.n	80191bc <_free_r+0x28>
 801920c:	d902      	bls.n	8019214 <_free_r+0x80>
 801920e:	230c      	movs	r3, #12
 8019210:	6003      	str	r3, [r0, #0]
 8019212:	e7d3      	b.n	80191bc <_free_r+0x28>
 8019214:	6825      	ldr	r5, [r4, #0]
 8019216:	1961      	adds	r1, r4, r5
 8019218:	428b      	cmp	r3, r1
 801921a:	bf04      	itt	eq
 801921c:	6819      	ldreq	r1, [r3, #0]
 801921e:	685b      	ldreq	r3, [r3, #4]
 8019220:	6063      	str	r3, [r4, #4]
 8019222:	bf04      	itt	eq
 8019224:	1949      	addeq	r1, r1, r5
 8019226:	6021      	streq	r1, [r4, #0]
 8019228:	6054      	str	r4, [r2, #4]
 801922a:	e7c7      	b.n	80191bc <_free_r+0x28>
 801922c:	b003      	add	sp, #12
 801922e:	bd30      	pop	{r4, r5, pc}
 8019230:	2003d4b4 	.word	0x2003d4b4

08019234 <_malloc_r>:
 8019234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019236:	1ccd      	adds	r5, r1, #3
 8019238:	f025 0503 	bic.w	r5, r5, #3
 801923c:	3508      	adds	r5, #8
 801923e:	2d0c      	cmp	r5, #12
 8019240:	bf38      	it	cc
 8019242:	250c      	movcc	r5, #12
 8019244:	2d00      	cmp	r5, #0
 8019246:	4606      	mov	r6, r0
 8019248:	db01      	blt.n	801924e <_malloc_r+0x1a>
 801924a:	42a9      	cmp	r1, r5
 801924c:	d903      	bls.n	8019256 <_malloc_r+0x22>
 801924e:	230c      	movs	r3, #12
 8019250:	6033      	str	r3, [r6, #0]
 8019252:	2000      	movs	r0, #0
 8019254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019256:	f001 f989 	bl	801a56c <__malloc_lock>
 801925a:	4921      	ldr	r1, [pc, #132]	; (80192e0 <_malloc_r+0xac>)
 801925c:	680a      	ldr	r2, [r1, #0]
 801925e:	4614      	mov	r4, r2
 8019260:	b99c      	cbnz	r4, 801928a <_malloc_r+0x56>
 8019262:	4f20      	ldr	r7, [pc, #128]	; (80192e4 <_malloc_r+0xb0>)
 8019264:	683b      	ldr	r3, [r7, #0]
 8019266:	b923      	cbnz	r3, 8019272 <_malloc_r+0x3e>
 8019268:	4621      	mov	r1, r4
 801926a:	4630      	mov	r0, r6
 801926c:	f000 fe2c 	bl	8019ec8 <_sbrk_r>
 8019270:	6038      	str	r0, [r7, #0]
 8019272:	4629      	mov	r1, r5
 8019274:	4630      	mov	r0, r6
 8019276:	f000 fe27 	bl	8019ec8 <_sbrk_r>
 801927a:	1c43      	adds	r3, r0, #1
 801927c:	d123      	bne.n	80192c6 <_malloc_r+0x92>
 801927e:	230c      	movs	r3, #12
 8019280:	6033      	str	r3, [r6, #0]
 8019282:	4630      	mov	r0, r6
 8019284:	f001 f978 	bl	801a578 <__malloc_unlock>
 8019288:	e7e3      	b.n	8019252 <_malloc_r+0x1e>
 801928a:	6823      	ldr	r3, [r4, #0]
 801928c:	1b5b      	subs	r3, r3, r5
 801928e:	d417      	bmi.n	80192c0 <_malloc_r+0x8c>
 8019290:	2b0b      	cmp	r3, #11
 8019292:	d903      	bls.n	801929c <_malloc_r+0x68>
 8019294:	6023      	str	r3, [r4, #0]
 8019296:	441c      	add	r4, r3
 8019298:	6025      	str	r5, [r4, #0]
 801929a:	e004      	b.n	80192a6 <_malloc_r+0x72>
 801929c:	6863      	ldr	r3, [r4, #4]
 801929e:	42a2      	cmp	r2, r4
 80192a0:	bf0c      	ite	eq
 80192a2:	600b      	streq	r3, [r1, #0]
 80192a4:	6053      	strne	r3, [r2, #4]
 80192a6:	4630      	mov	r0, r6
 80192a8:	f001 f966 	bl	801a578 <__malloc_unlock>
 80192ac:	f104 000b 	add.w	r0, r4, #11
 80192b0:	1d23      	adds	r3, r4, #4
 80192b2:	f020 0007 	bic.w	r0, r0, #7
 80192b6:	1ac2      	subs	r2, r0, r3
 80192b8:	d0cc      	beq.n	8019254 <_malloc_r+0x20>
 80192ba:	1a1b      	subs	r3, r3, r0
 80192bc:	50a3      	str	r3, [r4, r2]
 80192be:	e7c9      	b.n	8019254 <_malloc_r+0x20>
 80192c0:	4622      	mov	r2, r4
 80192c2:	6864      	ldr	r4, [r4, #4]
 80192c4:	e7cc      	b.n	8019260 <_malloc_r+0x2c>
 80192c6:	1cc4      	adds	r4, r0, #3
 80192c8:	f024 0403 	bic.w	r4, r4, #3
 80192cc:	42a0      	cmp	r0, r4
 80192ce:	d0e3      	beq.n	8019298 <_malloc_r+0x64>
 80192d0:	1a21      	subs	r1, r4, r0
 80192d2:	4630      	mov	r0, r6
 80192d4:	f000 fdf8 	bl	8019ec8 <_sbrk_r>
 80192d8:	3001      	adds	r0, #1
 80192da:	d1dd      	bne.n	8019298 <_malloc_r+0x64>
 80192dc:	e7cf      	b.n	801927e <_malloc_r+0x4a>
 80192de:	bf00      	nop
 80192e0:	2003d4b4 	.word	0x2003d4b4
 80192e4:	2003d4b8 	.word	0x2003d4b8

080192e8 <__ssputs_r>:
 80192e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80192ec:	688e      	ldr	r6, [r1, #8]
 80192ee:	429e      	cmp	r6, r3
 80192f0:	4682      	mov	sl, r0
 80192f2:	460c      	mov	r4, r1
 80192f4:	4690      	mov	r8, r2
 80192f6:	461f      	mov	r7, r3
 80192f8:	d838      	bhi.n	801936c <__ssputs_r+0x84>
 80192fa:	898a      	ldrh	r2, [r1, #12]
 80192fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019300:	d032      	beq.n	8019368 <__ssputs_r+0x80>
 8019302:	6825      	ldr	r5, [r4, #0]
 8019304:	6909      	ldr	r1, [r1, #16]
 8019306:	eba5 0901 	sub.w	r9, r5, r1
 801930a:	6965      	ldr	r5, [r4, #20]
 801930c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019310:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019314:	3301      	adds	r3, #1
 8019316:	444b      	add	r3, r9
 8019318:	106d      	asrs	r5, r5, #1
 801931a:	429d      	cmp	r5, r3
 801931c:	bf38      	it	cc
 801931e:	461d      	movcc	r5, r3
 8019320:	0553      	lsls	r3, r2, #21
 8019322:	d531      	bpl.n	8019388 <__ssputs_r+0xa0>
 8019324:	4629      	mov	r1, r5
 8019326:	f7ff ff85 	bl	8019234 <_malloc_r>
 801932a:	4606      	mov	r6, r0
 801932c:	b950      	cbnz	r0, 8019344 <__ssputs_r+0x5c>
 801932e:	230c      	movs	r3, #12
 8019330:	f8ca 3000 	str.w	r3, [sl]
 8019334:	89a3      	ldrh	r3, [r4, #12]
 8019336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801933a:	81a3      	strh	r3, [r4, #12]
 801933c:	f04f 30ff 	mov.w	r0, #4294967295
 8019340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019344:	6921      	ldr	r1, [r4, #16]
 8019346:	464a      	mov	r2, r9
 8019348:	f7fc f8fa 	bl	8015540 <memcpy>
 801934c:	89a3      	ldrh	r3, [r4, #12]
 801934e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019356:	81a3      	strh	r3, [r4, #12]
 8019358:	6126      	str	r6, [r4, #16]
 801935a:	6165      	str	r5, [r4, #20]
 801935c:	444e      	add	r6, r9
 801935e:	eba5 0509 	sub.w	r5, r5, r9
 8019362:	6026      	str	r6, [r4, #0]
 8019364:	60a5      	str	r5, [r4, #8]
 8019366:	463e      	mov	r6, r7
 8019368:	42be      	cmp	r6, r7
 801936a:	d900      	bls.n	801936e <__ssputs_r+0x86>
 801936c:	463e      	mov	r6, r7
 801936e:	4632      	mov	r2, r6
 8019370:	6820      	ldr	r0, [r4, #0]
 8019372:	4641      	mov	r1, r8
 8019374:	f001 f8e0 	bl	801a538 <memmove>
 8019378:	68a3      	ldr	r3, [r4, #8]
 801937a:	6822      	ldr	r2, [r4, #0]
 801937c:	1b9b      	subs	r3, r3, r6
 801937e:	4432      	add	r2, r6
 8019380:	60a3      	str	r3, [r4, #8]
 8019382:	6022      	str	r2, [r4, #0]
 8019384:	2000      	movs	r0, #0
 8019386:	e7db      	b.n	8019340 <__ssputs_r+0x58>
 8019388:	462a      	mov	r2, r5
 801938a:	f001 f8fb 	bl	801a584 <_realloc_r>
 801938e:	4606      	mov	r6, r0
 8019390:	2800      	cmp	r0, #0
 8019392:	d1e1      	bne.n	8019358 <__ssputs_r+0x70>
 8019394:	6921      	ldr	r1, [r4, #16]
 8019396:	4650      	mov	r0, sl
 8019398:	f7ff fefc 	bl	8019194 <_free_r>
 801939c:	e7c7      	b.n	801932e <__ssputs_r+0x46>
	...

080193a0 <_svfiprintf_r>:
 80193a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193a4:	4698      	mov	r8, r3
 80193a6:	898b      	ldrh	r3, [r1, #12]
 80193a8:	061b      	lsls	r3, r3, #24
 80193aa:	b09d      	sub	sp, #116	; 0x74
 80193ac:	4607      	mov	r7, r0
 80193ae:	460d      	mov	r5, r1
 80193b0:	4614      	mov	r4, r2
 80193b2:	d50e      	bpl.n	80193d2 <_svfiprintf_r+0x32>
 80193b4:	690b      	ldr	r3, [r1, #16]
 80193b6:	b963      	cbnz	r3, 80193d2 <_svfiprintf_r+0x32>
 80193b8:	2140      	movs	r1, #64	; 0x40
 80193ba:	f7ff ff3b 	bl	8019234 <_malloc_r>
 80193be:	6028      	str	r0, [r5, #0]
 80193c0:	6128      	str	r0, [r5, #16]
 80193c2:	b920      	cbnz	r0, 80193ce <_svfiprintf_r+0x2e>
 80193c4:	230c      	movs	r3, #12
 80193c6:	603b      	str	r3, [r7, #0]
 80193c8:	f04f 30ff 	mov.w	r0, #4294967295
 80193cc:	e0d1      	b.n	8019572 <_svfiprintf_r+0x1d2>
 80193ce:	2340      	movs	r3, #64	; 0x40
 80193d0:	616b      	str	r3, [r5, #20]
 80193d2:	2300      	movs	r3, #0
 80193d4:	9309      	str	r3, [sp, #36]	; 0x24
 80193d6:	2320      	movs	r3, #32
 80193d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80193dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80193e0:	2330      	movs	r3, #48	; 0x30
 80193e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801958c <_svfiprintf_r+0x1ec>
 80193e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80193ea:	f04f 0901 	mov.w	r9, #1
 80193ee:	4623      	mov	r3, r4
 80193f0:	469a      	mov	sl, r3
 80193f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80193f6:	b10a      	cbz	r2, 80193fc <_svfiprintf_r+0x5c>
 80193f8:	2a25      	cmp	r2, #37	; 0x25
 80193fa:	d1f9      	bne.n	80193f0 <_svfiprintf_r+0x50>
 80193fc:	ebba 0b04 	subs.w	fp, sl, r4
 8019400:	d00b      	beq.n	801941a <_svfiprintf_r+0x7a>
 8019402:	465b      	mov	r3, fp
 8019404:	4622      	mov	r2, r4
 8019406:	4629      	mov	r1, r5
 8019408:	4638      	mov	r0, r7
 801940a:	f7ff ff6d 	bl	80192e8 <__ssputs_r>
 801940e:	3001      	adds	r0, #1
 8019410:	f000 80aa 	beq.w	8019568 <_svfiprintf_r+0x1c8>
 8019414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019416:	445a      	add	r2, fp
 8019418:	9209      	str	r2, [sp, #36]	; 0x24
 801941a:	f89a 3000 	ldrb.w	r3, [sl]
 801941e:	2b00      	cmp	r3, #0
 8019420:	f000 80a2 	beq.w	8019568 <_svfiprintf_r+0x1c8>
 8019424:	2300      	movs	r3, #0
 8019426:	f04f 32ff 	mov.w	r2, #4294967295
 801942a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801942e:	f10a 0a01 	add.w	sl, sl, #1
 8019432:	9304      	str	r3, [sp, #16]
 8019434:	9307      	str	r3, [sp, #28]
 8019436:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801943a:	931a      	str	r3, [sp, #104]	; 0x68
 801943c:	4654      	mov	r4, sl
 801943e:	2205      	movs	r2, #5
 8019440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019444:	4851      	ldr	r0, [pc, #324]	; (801958c <_svfiprintf_r+0x1ec>)
 8019446:	f7e6 fee3 	bl	8000210 <memchr>
 801944a:	9a04      	ldr	r2, [sp, #16]
 801944c:	b9d8      	cbnz	r0, 8019486 <_svfiprintf_r+0xe6>
 801944e:	06d0      	lsls	r0, r2, #27
 8019450:	bf44      	itt	mi
 8019452:	2320      	movmi	r3, #32
 8019454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019458:	0711      	lsls	r1, r2, #28
 801945a:	bf44      	itt	mi
 801945c:	232b      	movmi	r3, #43	; 0x2b
 801945e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019462:	f89a 3000 	ldrb.w	r3, [sl]
 8019466:	2b2a      	cmp	r3, #42	; 0x2a
 8019468:	d015      	beq.n	8019496 <_svfiprintf_r+0xf6>
 801946a:	9a07      	ldr	r2, [sp, #28]
 801946c:	4654      	mov	r4, sl
 801946e:	2000      	movs	r0, #0
 8019470:	f04f 0c0a 	mov.w	ip, #10
 8019474:	4621      	mov	r1, r4
 8019476:	f811 3b01 	ldrb.w	r3, [r1], #1
 801947a:	3b30      	subs	r3, #48	; 0x30
 801947c:	2b09      	cmp	r3, #9
 801947e:	d94e      	bls.n	801951e <_svfiprintf_r+0x17e>
 8019480:	b1b0      	cbz	r0, 80194b0 <_svfiprintf_r+0x110>
 8019482:	9207      	str	r2, [sp, #28]
 8019484:	e014      	b.n	80194b0 <_svfiprintf_r+0x110>
 8019486:	eba0 0308 	sub.w	r3, r0, r8
 801948a:	fa09 f303 	lsl.w	r3, r9, r3
 801948e:	4313      	orrs	r3, r2
 8019490:	9304      	str	r3, [sp, #16]
 8019492:	46a2      	mov	sl, r4
 8019494:	e7d2      	b.n	801943c <_svfiprintf_r+0x9c>
 8019496:	9b03      	ldr	r3, [sp, #12]
 8019498:	1d19      	adds	r1, r3, #4
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	9103      	str	r1, [sp, #12]
 801949e:	2b00      	cmp	r3, #0
 80194a0:	bfbb      	ittet	lt
 80194a2:	425b      	neglt	r3, r3
 80194a4:	f042 0202 	orrlt.w	r2, r2, #2
 80194a8:	9307      	strge	r3, [sp, #28]
 80194aa:	9307      	strlt	r3, [sp, #28]
 80194ac:	bfb8      	it	lt
 80194ae:	9204      	strlt	r2, [sp, #16]
 80194b0:	7823      	ldrb	r3, [r4, #0]
 80194b2:	2b2e      	cmp	r3, #46	; 0x2e
 80194b4:	d10c      	bne.n	80194d0 <_svfiprintf_r+0x130>
 80194b6:	7863      	ldrb	r3, [r4, #1]
 80194b8:	2b2a      	cmp	r3, #42	; 0x2a
 80194ba:	d135      	bne.n	8019528 <_svfiprintf_r+0x188>
 80194bc:	9b03      	ldr	r3, [sp, #12]
 80194be:	1d1a      	adds	r2, r3, #4
 80194c0:	681b      	ldr	r3, [r3, #0]
 80194c2:	9203      	str	r2, [sp, #12]
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	bfb8      	it	lt
 80194c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80194cc:	3402      	adds	r4, #2
 80194ce:	9305      	str	r3, [sp, #20]
 80194d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801959c <_svfiprintf_r+0x1fc>
 80194d4:	7821      	ldrb	r1, [r4, #0]
 80194d6:	2203      	movs	r2, #3
 80194d8:	4650      	mov	r0, sl
 80194da:	f7e6 fe99 	bl	8000210 <memchr>
 80194de:	b140      	cbz	r0, 80194f2 <_svfiprintf_r+0x152>
 80194e0:	2340      	movs	r3, #64	; 0x40
 80194e2:	eba0 000a 	sub.w	r0, r0, sl
 80194e6:	fa03 f000 	lsl.w	r0, r3, r0
 80194ea:	9b04      	ldr	r3, [sp, #16]
 80194ec:	4303      	orrs	r3, r0
 80194ee:	3401      	adds	r4, #1
 80194f0:	9304      	str	r3, [sp, #16]
 80194f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80194f6:	4826      	ldr	r0, [pc, #152]	; (8019590 <_svfiprintf_r+0x1f0>)
 80194f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80194fc:	2206      	movs	r2, #6
 80194fe:	f7e6 fe87 	bl	8000210 <memchr>
 8019502:	2800      	cmp	r0, #0
 8019504:	d038      	beq.n	8019578 <_svfiprintf_r+0x1d8>
 8019506:	4b23      	ldr	r3, [pc, #140]	; (8019594 <_svfiprintf_r+0x1f4>)
 8019508:	bb1b      	cbnz	r3, 8019552 <_svfiprintf_r+0x1b2>
 801950a:	9b03      	ldr	r3, [sp, #12]
 801950c:	3307      	adds	r3, #7
 801950e:	f023 0307 	bic.w	r3, r3, #7
 8019512:	3308      	adds	r3, #8
 8019514:	9303      	str	r3, [sp, #12]
 8019516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019518:	4433      	add	r3, r6
 801951a:	9309      	str	r3, [sp, #36]	; 0x24
 801951c:	e767      	b.n	80193ee <_svfiprintf_r+0x4e>
 801951e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019522:	460c      	mov	r4, r1
 8019524:	2001      	movs	r0, #1
 8019526:	e7a5      	b.n	8019474 <_svfiprintf_r+0xd4>
 8019528:	2300      	movs	r3, #0
 801952a:	3401      	adds	r4, #1
 801952c:	9305      	str	r3, [sp, #20]
 801952e:	4619      	mov	r1, r3
 8019530:	f04f 0c0a 	mov.w	ip, #10
 8019534:	4620      	mov	r0, r4
 8019536:	f810 2b01 	ldrb.w	r2, [r0], #1
 801953a:	3a30      	subs	r2, #48	; 0x30
 801953c:	2a09      	cmp	r2, #9
 801953e:	d903      	bls.n	8019548 <_svfiprintf_r+0x1a8>
 8019540:	2b00      	cmp	r3, #0
 8019542:	d0c5      	beq.n	80194d0 <_svfiprintf_r+0x130>
 8019544:	9105      	str	r1, [sp, #20]
 8019546:	e7c3      	b.n	80194d0 <_svfiprintf_r+0x130>
 8019548:	fb0c 2101 	mla	r1, ip, r1, r2
 801954c:	4604      	mov	r4, r0
 801954e:	2301      	movs	r3, #1
 8019550:	e7f0      	b.n	8019534 <_svfiprintf_r+0x194>
 8019552:	ab03      	add	r3, sp, #12
 8019554:	9300      	str	r3, [sp, #0]
 8019556:	462a      	mov	r2, r5
 8019558:	4b0f      	ldr	r3, [pc, #60]	; (8019598 <_svfiprintf_r+0x1f8>)
 801955a:	a904      	add	r1, sp, #16
 801955c:	4638      	mov	r0, r7
 801955e:	f7fc f8a5 	bl	80156ac <_printf_float>
 8019562:	1c42      	adds	r2, r0, #1
 8019564:	4606      	mov	r6, r0
 8019566:	d1d6      	bne.n	8019516 <_svfiprintf_r+0x176>
 8019568:	89ab      	ldrh	r3, [r5, #12]
 801956a:	065b      	lsls	r3, r3, #25
 801956c:	f53f af2c 	bmi.w	80193c8 <_svfiprintf_r+0x28>
 8019570:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019572:	b01d      	add	sp, #116	; 0x74
 8019574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019578:	ab03      	add	r3, sp, #12
 801957a:	9300      	str	r3, [sp, #0]
 801957c:	462a      	mov	r2, r5
 801957e:	4b06      	ldr	r3, [pc, #24]	; (8019598 <_svfiprintf_r+0x1f8>)
 8019580:	a904      	add	r1, sp, #16
 8019582:	4638      	mov	r0, r7
 8019584:	f7fc fb36 	bl	8015bf4 <_printf_i>
 8019588:	e7eb      	b.n	8019562 <_svfiprintf_r+0x1c2>
 801958a:	bf00      	nop
 801958c:	0801b3f4 	.word	0x0801b3f4
 8019590:	0801b3fe 	.word	0x0801b3fe
 8019594:	080156ad 	.word	0x080156ad
 8019598:	080192e9 	.word	0x080192e9
 801959c:	0801b3fa 	.word	0x0801b3fa

080195a0 <_sungetc_r>:
 80195a0:	b538      	push	{r3, r4, r5, lr}
 80195a2:	1c4b      	adds	r3, r1, #1
 80195a4:	4614      	mov	r4, r2
 80195a6:	d103      	bne.n	80195b0 <_sungetc_r+0x10>
 80195a8:	f04f 35ff 	mov.w	r5, #4294967295
 80195ac:	4628      	mov	r0, r5
 80195ae:	bd38      	pop	{r3, r4, r5, pc}
 80195b0:	8993      	ldrh	r3, [r2, #12]
 80195b2:	f023 0320 	bic.w	r3, r3, #32
 80195b6:	8193      	strh	r3, [r2, #12]
 80195b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80195ba:	6852      	ldr	r2, [r2, #4]
 80195bc:	b2cd      	uxtb	r5, r1
 80195be:	b18b      	cbz	r3, 80195e4 <_sungetc_r+0x44>
 80195c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80195c2:	4293      	cmp	r3, r2
 80195c4:	dd08      	ble.n	80195d8 <_sungetc_r+0x38>
 80195c6:	6823      	ldr	r3, [r4, #0]
 80195c8:	1e5a      	subs	r2, r3, #1
 80195ca:	6022      	str	r2, [r4, #0]
 80195cc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80195d0:	6863      	ldr	r3, [r4, #4]
 80195d2:	3301      	adds	r3, #1
 80195d4:	6063      	str	r3, [r4, #4]
 80195d6:	e7e9      	b.n	80195ac <_sungetc_r+0xc>
 80195d8:	4621      	mov	r1, r4
 80195da:	f000 fd4f 	bl	801a07c <__submore>
 80195de:	2800      	cmp	r0, #0
 80195e0:	d0f1      	beq.n	80195c6 <_sungetc_r+0x26>
 80195e2:	e7e1      	b.n	80195a8 <_sungetc_r+0x8>
 80195e4:	6921      	ldr	r1, [r4, #16]
 80195e6:	6823      	ldr	r3, [r4, #0]
 80195e8:	b151      	cbz	r1, 8019600 <_sungetc_r+0x60>
 80195ea:	4299      	cmp	r1, r3
 80195ec:	d208      	bcs.n	8019600 <_sungetc_r+0x60>
 80195ee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80195f2:	42a9      	cmp	r1, r5
 80195f4:	d104      	bne.n	8019600 <_sungetc_r+0x60>
 80195f6:	3b01      	subs	r3, #1
 80195f8:	3201      	adds	r2, #1
 80195fa:	6023      	str	r3, [r4, #0]
 80195fc:	6062      	str	r2, [r4, #4]
 80195fe:	e7d5      	b.n	80195ac <_sungetc_r+0xc>
 8019600:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8019604:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019608:	6363      	str	r3, [r4, #52]	; 0x34
 801960a:	2303      	movs	r3, #3
 801960c:	63a3      	str	r3, [r4, #56]	; 0x38
 801960e:	4623      	mov	r3, r4
 8019610:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019614:	6023      	str	r3, [r4, #0]
 8019616:	2301      	movs	r3, #1
 8019618:	e7dc      	b.n	80195d4 <_sungetc_r+0x34>

0801961a <__ssrefill_r>:
 801961a:	b510      	push	{r4, lr}
 801961c:	460c      	mov	r4, r1
 801961e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019620:	b169      	cbz	r1, 801963e <__ssrefill_r+0x24>
 8019622:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019626:	4299      	cmp	r1, r3
 8019628:	d001      	beq.n	801962e <__ssrefill_r+0x14>
 801962a:	f7ff fdb3 	bl	8019194 <_free_r>
 801962e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019630:	6063      	str	r3, [r4, #4]
 8019632:	2000      	movs	r0, #0
 8019634:	6360      	str	r0, [r4, #52]	; 0x34
 8019636:	b113      	cbz	r3, 801963e <__ssrefill_r+0x24>
 8019638:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801963a:	6023      	str	r3, [r4, #0]
 801963c:	bd10      	pop	{r4, pc}
 801963e:	6923      	ldr	r3, [r4, #16]
 8019640:	6023      	str	r3, [r4, #0]
 8019642:	2300      	movs	r3, #0
 8019644:	6063      	str	r3, [r4, #4]
 8019646:	89a3      	ldrh	r3, [r4, #12]
 8019648:	f043 0320 	orr.w	r3, r3, #32
 801964c:	81a3      	strh	r3, [r4, #12]
 801964e:	f04f 30ff 	mov.w	r0, #4294967295
 8019652:	e7f3      	b.n	801963c <__ssrefill_r+0x22>

08019654 <__ssvfiscanf_r>:
 8019654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019658:	460c      	mov	r4, r1
 801965a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801965e:	2100      	movs	r1, #0
 8019660:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8019664:	49b2      	ldr	r1, [pc, #712]	; (8019930 <__ssvfiscanf_r+0x2dc>)
 8019666:	91a0      	str	r1, [sp, #640]	; 0x280
 8019668:	f10d 0804 	add.w	r8, sp, #4
 801966c:	49b1      	ldr	r1, [pc, #708]	; (8019934 <__ssvfiscanf_r+0x2e0>)
 801966e:	4fb2      	ldr	r7, [pc, #712]	; (8019938 <__ssvfiscanf_r+0x2e4>)
 8019670:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801993c <__ssvfiscanf_r+0x2e8>
 8019674:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019678:	4606      	mov	r6, r0
 801967a:	91a1      	str	r1, [sp, #644]	; 0x284
 801967c:	9300      	str	r3, [sp, #0]
 801967e:	f892 a000 	ldrb.w	sl, [r2]
 8019682:	f1ba 0f00 	cmp.w	sl, #0
 8019686:	f000 8151 	beq.w	801992c <__ssvfiscanf_r+0x2d8>
 801968a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801968e:	f013 0308 	ands.w	r3, r3, #8
 8019692:	f102 0501 	add.w	r5, r2, #1
 8019696:	d019      	beq.n	80196cc <__ssvfiscanf_r+0x78>
 8019698:	6863      	ldr	r3, [r4, #4]
 801969a:	2b00      	cmp	r3, #0
 801969c:	dd0f      	ble.n	80196be <__ssvfiscanf_r+0x6a>
 801969e:	6823      	ldr	r3, [r4, #0]
 80196a0:	781a      	ldrb	r2, [r3, #0]
 80196a2:	5cba      	ldrb	r2, [r7, r2]
 80196a4:	0712      	lsls	r2, r2, #28
 80196a6:	d401      	bmi.n	80196ac <__ssvfiscanf_r+0x58>
 80196a8:	462a      	mov	r2, r5
 80196aa:	e7e8      	b.n	801967e <__ssvfiscanf_r+0x2a>
 80196ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80196ae:	3201      	adds	r2, #1
 80196b0:	9245      	str	r2, [sp, #276]	; 0x114
 80196b2:	6862      	ldr	r2, [r4, #4]
 80196b4:	3301      	adds	r3, #1
 80196b6:	3a01      	subs	r2, #1
 80196b8:	6062      	str	r2, [r4, #4]
 80196ba:	6023      	str	r3, [r4, #0]
 80196bc:	e7ec      	b.n	8019698 <__ssvfiscanf_r+0x44>
 80196be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80196c0:	4621      	mov	r1, r4
 80196c2:	4630      	mov	r0, r6
 80196c4:	4798      	blx	r3
 80196c6:	2800      	cmp	r0, #0
 80196c8:	d0e9      	beq.n	801969e <__ssvfiscanf_r+0x4a>
 80196ca:	e7ed      	b.n	80196a8 <__ssvfiscanf_r+0x54>
 80196cc:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80196d0:	f040 8083 	bne.w	80197da <__ssvfiscanf_r+0x186>
 80196d4:	9341      	str	r3, [sp, #260]	; 0x104
 80196d6:	9343      	str	r3, [sp, #268]	; 0x10c
 80196d8:	7853      	ldrb	r3, [r2, #1]
 80196da:	2b2a      	cmp	r3, #42	; 0x2a
 80196dc:	bf02      	ittt	eq
 80196de:	2310      	moveq	r3, #16
 80196e0:	1c95      	addeq	r5, r2, #2
 80196e2:	9341      	streq	r3, [sp, #260]	; 0x104
 80196e4:	220a      	movs	r2, #10
 80196e6:	46ab      	mov	fp, r5
 80196e8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80196ec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80196f0:	2b09      	cmp	r3, #9
 80196f2:	d91d      	bls.n	8019730 <__ssvfiscanf_r+0xdc>
 80196f4:	4891      	ldr	r0, [pc, #580]	; (801993c <__ssvfiscanf_r+0x2e8>)
 80196f6:	2203      	movs	r2, #3
 80196f8:	f7e6 fd8a 	bl	8000210 <memchr>
 80196fc:	b140      	cbz	r0, 8019710 <__ssvfiscanf_r+0xbc>
 80196fe:	2301      	movs	r3, #1
 8019700:	eba0 0009 	sub.w	r0, r0, r9
 8019704:	fa03 f000 	lsl.w	r0, r3, r0
 8019708:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801970a:	4318      	orrs	r0, r3
 801970c:	9041      	str	r0, [sp, #260]	; 0x104
 801970e:	465d      	mov	r5, fp
 8019710:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019714:	2b78      	cmp	r3, #120	; 0x78
 8019716:	d806      	bhi.n	8019726 <__ssvfiscanf_r+0xd2>
 8019718:	2b57      	cmp	r3, #87	; 0x57
 801971a:	d810      	bhi.n	801973e <__ssvfiscanf_r+0xea>
 801971c:	2b25      	cmp	r3, #37	; 0x25
 801971e:	d05c      	beq.n	80197da <__ssvfiscanf_r+0x186>
 8019720:	d856      	bhi.n	80197d0 <__ssvfiscanf_r+0x17c>
 8019722:	2b00      	cmp	r3, #0
 8019724:	d074      	beq.n	8019810 <__ssvfiscanf_r+0x1bc>
 8019726:	2303      	movs	r3, #3
 8019728:	9347      	str	r3, [sp, #284]	; 0x11c
 801972a:	230a      	movs	r3, #10
 801972c:	9342      	str	r3, [sp, #264]	; 0x108
 801972e:	e081      	b.n	8019834 <__ssvfiscanf_r+0x1e0>
 8019730:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019732:	fb02 1303 	mla	r3, r2, r3, r1
 8019736:	3b30      	subs	r3, #48	; 0x30
 8019738:	9343      	str	r3, [sp, #268]	; 0x10c
 801973a:	465d      	mov	r5, fp
 801973c:	e7d3      	b.n	80196e6 <__ssvfiscanf_r+0x92>
 801973e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8019742:	2a20      	cmp	r2, #32
 8019744:	d8ef      	bhi.n	8019726 <__ssvfiscanf_r+0xd2>
 8019746:	a101      	add	r1, pc, #4	; (adr r1, 801974c <__ssvfiscanf_r+0xf8>)
 8019748:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801974c:	0801981f 	.word	0x0801981f
 8019750:	08019727 	.word	0x08019727
 8019754:	08019727 	.word	0x08019727
 8019758:	0801987d 	.word	0x0801987d
 801975c:	08019727 	.word	0x08019727
 8019760:	08019727 	.word	0x08019727
 8019764:	08019727 	.word	0x08019727
 8019768:	08019727 	.word	0x08019727
 801976c:	08019727 	.word	0x08019727
 8019770:	08019727 	.word	0x08019727
 8019774:	08019727 	.word	0x08019727
 8019778:	08019893 	.word	0x08019893
 801977c:	08019869 	.word	0x08019869
 8019780:	080197d7 	.word	0x080197d7
 8019784:	080197d7 	.word	0x080197d7
 8019788:	080197d7 	.word	0x080197d7
 801978c:	08019727 	.word	0x08019727
 8019790:	0801986d 	.word	0x0801986d
 8019794:	08019727 	.word	0x08019727
 8019798:	08019727 	.word	0x08019727
 801979c:	08019727 	.word	0x08019727
 80197a0:	08019727 	.word	0x08019727
 80197a4:	080198a3 	.word	0x080198a3
 80197a8:	08019875 	.word	0x08019875
 80197ac:	08019817 	.word	0x08019817
 80197b0:	08019727 	.word	0x08019727
 80197b4:	08019727 	.word	0x08019727
 80197b8:	0801989f 	.word	0x0801989f
 80197bc:	08019727 	.word	0x08019727
 80197c0:	08019869 	.word	0x08019869
 80197c4:	08019727 	.word	0x08019727
 80197c8:	08019727 	.word	0x08019727
 80197cc:	0801981f 	.word	0x0801981f
 80197d0:	3b45      	subs	r3, #69	; 0x45
 80197d2:	2b02      	cmp	r3, #2
 80197d4:	d8a7      	bhi.n	8019726 <__ssvfiscanf_r+0xd2>
 80197d6:	2305      	movs	r3, #5
 80197d8:	e02b      	b.n	8019832 <__ssvfiscanf_r+0x1de>
 80197da:	6863      	ldr	r3, [r4, #4]
 80197dc:	2b00      	cmp	r3, #0
 80197de:	dd0d      	ble.n	80197fc <__ssvfiscanf_r+0x1a8>
 80197e0:	6823      	ldr	r3, [r4, #0]
 80197e2:	781a      	ldrb	r2, [r3, #0]
 80197e4:	4552      	cmp	r2, sl
 80197e6:	f040 80a1 	bne.w	801992c <__ssvfiscanf_r+0x2d8>
 80197ea:	3301      	adds	r3, #1
 80197ec:	6862      	ldr	r2, [r4, #4]
 80197ee:	6023      	str	r3, [r4, #0]
 80197f0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80197f2:	3a01      	subs	r2, #1
 80197f4:	3301      	adds	r3, #1
 80197f6:	6062      	str	r2, [r4, #4]
 80197f8:	9345      	str	r3, [sp, #276]	; 0x114
 80197fa:	e755      	b.n	80196a8 <__ssvfiscanf_r+0x54>
 80197fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80197fe:	4621      	mov	r1, r4
 8019800:	4630      	mov	r0, r6
 8019802:	4798      	blx	r3
 8019804:	2800      	cmp	r0, #0
 8019806:	d0eb      	beq.n	80197e0 <__ssvfiscanf_r+0x18c>
 8019808:	9844      	ldr	r0, [sp, #272]	; 0x110
 801980a:	2800      	cmp	r0, #0
 801980c:	f040 8084 	bne.w	8019918 <__ssvfiscanf_r+0x2c4>
 8019810:	f04f 30ff 	mov.w	r0, #4294967295
 8019814:	e086      	b.n	8019924 <__ssvfiscanf_r+0x2d0>
 8019816:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019818:	f042 0220 	orr.w	r2, r2, #32
 801981c:	9241      	str	r2, [sp, #260]	; 0x104
 801981e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019824:	9241      	str	r2, [sp, #260]	; 0x104
 8019826:	2210      	movs	r2, #16
 8019828:	2b6f      	cmp	r3, #111	; 0x6f
 801982a:	9242      	str	r2, [sp, #264]	; 0x108
 801982c:	bf34      	ite	cc
 801982e:	2303      	movcc	r3, #3
 8019830:	2304      	movcs	r3, #4
 8019832:	9347      	str	r3, [sp, #284]	; 0x11c
 8019834:	6863      	ldr	r3, [r4, #4]
 8019836:	2b00      	cmp	r3, #0
 8019838:	dd41      	ble.n	80198be <__ssvfiscanf_r+0x26a>
 801983a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801983c:	0659      	lsls	r1, r3, #25
 801983e:	d404      	bmi.n	801984a <__ssvfiscanf_r+0x1f6>
 8019840:	6823      	ldr	r3, [r4, #0]
 8019842:	781a      	ldrb	r2, [r3, #0]
 8019844:	5cba      	ldrb	r2, [r7, r2]
 8019846:	0712      	lsls	r2, r2, #28
 8019848:	d440      	bmi.n	80198cc <__ssvfiscanf_r+0x278>
 801984a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801984c:	2b02      	cmp	r3, #2
 801984e:	dc4f      	bgt.n	80198f0 <__ssvfiscanf_r+0x29c>
 8019850:	466b      	mov	r3, sp
 8019852:	4622      	mov	r2, r4
 8019854:	a941      	add	r1, sp, #260	; 0x104
 8019856:	4630      	mov	r0, r6
 8019858:	f000 f9ce 	bl	8019bf8 <_scanf_chars>
 801985c:	2801      	cmp	r0, #1
 801985e:	d065      	beq.n	801992c <__ssvfiscanf_r+0x2d8>
 8019860:	2802      	cmp	r0, #2
 8019862:	f47f af21 	bne.w	80196a8 <__ssvfiscanf_r+0x54>
 8019866:	e7cf      	b.n	8019808 <__ssvfiscanf_r+0x1b4>
 8019868:	220a      	movs	r2, #10
 801986a:	e7dd      	b.n	8019828 <__ssvfiscanf_r+0x1d4>
 801986c:	2300      	movs	r3, #0
 801986e:	9342      	str	r3, [sp, #264]	; 0x108
 8019870:	2303      	movs	r3, #3
 8019872:	e7de      	b.n	8019832 <__ssvfiscanf_r+0x1de>
 8019874:	2308      	movs	r3, #8
 8019876:	9342      	str	r3, [sp, #264]	; 0x108
 8019878:	2304      	movs	r3, #4
 801987a:	e7da      	b.n	8019832 <__ssvfiscanf_r+0x1de>
 801987c:	4629      	mov	r1, r5
 801987e:	4640      	mov	r0, r8
 8019880:	f000 fb32 	bl	8019ee8 <__sccl>
 8019884:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801988a:	9341      	str	r3, [sp, #260]	; 0x104
 801988c:	4605      	mov	r5, r0
 801988e:	2301      	movs	r3, #1
 8019890:	e7cf      	b.n	8019832 <__ssvfiscanf_r+0x1de>
 8019892:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019898:	9341      	str	r3, [sp, #260]	; 0x104
 801989a:	2300      	movs	r3, #0
 801989c:	e7c9      	b.n	8019832 <__ssvfiscanf_r+0x1de>
 801989e:	2302      	movs	r3, #2
 80198a0:	e7c7      	b.n	8019832 <__ssvfiscanf_r+0x1de>
 80198a2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80198a4:	06c3      	lsls	r3, r0, #27
 80198a6:	f53f aeff 	bmi.w	80196a8 <__ssvfiscanf_r+0x54>
 80198aa:	9b00      	ldr	r3, [sp, #0]
 80198ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80198ae:	1d19      	adds	r1, r3, #4
 80198b0:	9100      	str	r1, [sp, #0]
 80198b2:	681b      	ldr	r3, [r3, #0]
 80198b4:	07c0      	lsls	r0, r0, #31
 80198b6:	bf4c      	ite	mi
 80198b8:	801a      	strhmi	r2, [r3, #0]
 80198ba:	601a      	strpl	r2, [r3, #0]
 80198bc:	e6f4      	b.n	80196a8 <__ssvfiscanf_r+0x54>
 80198be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80198c0:	4621      	mov	r1, r4
 80198c2:	4630      	mov	r0, r6
 80198c4:	4798      	blx	r3
 80198c6:	2800      	cmp	r0, #0
 80198c8:	d0b7      	beq.n	801983a <__ssvfiscanf_r+0x1e6>
 80198ca:	e79d      	b.n	8019808 <__ssvfiscanf_r+0x1b4>
 80198cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80198ce:	3201      	adds	r2, #1
 80198d0:	9245      	str	r2, [sp, #276]	; 0x114
 80198d2:	6862      	ldr	r2, [r4, #4]
 80198d4:	3a01      	subs	r2, #1
 80198d6:	2a00      	cmp	r2, #0
 80198d8:	6062      	str	r2, [r4, #4]
 80198da:	dd02      	ble.n	80198e2 <__ssvfiscanf_r+0x28e>
 80198dc:	3301      	adds	r3, #1
 80198de:	6023      	str	r3, [r4, #0]
 80198e0:	e7ae      	b.n	8019840 <__ssvfiscanf_r+0x1ec>
 80198e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80198e4:	4621      	mov	r1, r4
 80198e6:	4630      	mov	r0, r6
 80198e8:	4798      	blx	r3
 80198ea:	2800      	cmp	r0, #0
 80198ec:	d0a8      	beq.n	8019840 <__ssvfiscanf_r+0x1ec>
 80198ee:	e78b      	b.n	8019808 <__ssvfiscanf_r+0x1b4>
 80198f0:	2b04      	cmp	r3, #4
 80198f2:	dc06      	bgt.n	8019902 <__ssvfiscanf_r+0x2ae>
 80198f4:	466b      	mov	r3, sp
 80198f6:	4622      	mov	r2, r4
 80198f8:	a941      	add	r1, sp, #260	; 0x104
 80198fa:	4630      	mov	r0, r6
 80198fc:	f000 f9d4 	bl	8019ca8 <_scanf_i>
 8019900:	e7ac      	b.n	801985c <__ssvfiscanf_r+0x208>
 8019902:	4b0f      	ldr	r3, [pc, #60]	; (8019940 <__ssvfiscanf_r+0x2ec>)
 8019904:	2b00      	cmp	r3, #0
 8019906:	f43f aecf 	beq.w	80196a8 <__ssvfiscanf_r+0x54>
 801990a:	466b      	mov	r3, sp
 801990c:	4622      	mov	r2, r4
 801990e:	a941      	add	r1, sp, #260	; 0x104
 8019910:	4630      	mov	r0, r6
 8019912:	f7fc fa95 	bl	8015e40 <_scanf_float>
 8019916:	e7a1      	b.n	801985c <__ssvfiscanf_r+0x208>
 8019918:	89a3      	ldrh	r3, [r4, #12]
 801991a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801991e:	bf18      	it	ne
 8019920:	f04f 30ff 	movne.w	r0, #4294967295
 8019924:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8019928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801992c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801992e:	e7f9      	b.n	8019924 <__ssvfiscanf_r+0x2d0>
 8019930:	080195a1 	.word	0x080195a1
 8019934:	0801961b 	.word	0x0801961b
 8019938:	0801b021 	.word	0x0801b021
 801993c:	0801b3fa 	.word	0x0801b3fa
 8019940:	08015e41 	.word	0x08015e41

08019944 <__sfputc_r>:
 8019944:	6893      	ldr	r3, [r2, #8]
 8019946:	3b01      	subs	r3, #1
 8019948:	2b00      	cmp	r3, #0
 801994a:	b410      	push	{r4}
 801994c:	6093      	str	r3, [r2, #8]
 801994e:	da08      	bge.n	8019962 <__sfputc_r+0x1e>
 8019950:	6994      	ldr	r4, [r2, #24]
 8019952:	42a3      	cmp	r3, r4
 8019954:	db01      	blt.n	801995a <__sfputc_r+0x16>
 8019956:	290a      	cmp	r1, #10
 8019958:	d103      	bne.n	8019962 <__sfputc_r+0x1e>
 801995a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801995e:	f000 bbc7 	b.w	801a0f0 <__swbuf_r>
 8019962:	6813      	ldr	r3, [r2, #0]
 8019964:	1c58      	adds	r0, r3, #1
 8019966:	6010      	str	r0, [r2, #0]
 8019968:	7019      	strb	r1, [r3, #0]
 801996a:	4608      	mov	r0, r1
 801996c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019970:	4770      	bx	lr

08019972 <__sfputs_r>:
 8019972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019974:	4606      	mov	r6, r0
 8019976:	460f      	mov	r7, r1
 8019978:	4614      	mov	r4, r2
 801997a:	18d5      	adds	r5, r2, r3
 801997c:	42ac      	cmp	r4, r5
 801997e:	d101      	bne.n	8019984 <__sfputs_r+0x12>
 8019980:	2000      	movs	r0, #0
 8019982:	e007      	b.n	8019994 <__sfputs_r+0x22>
 8019984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019988:	463a      	mov	r2, r7
 801998a:	4630      	mov	r0, r6
 801998c:	f7ff ffda 	bl	8019944 <__sfputc_r>
 8019990:	1c43      	adds	r3, r0, #1
 8019992:	d1f3      	bne.n	801997c <__sfputs_r+0xa>
 8019994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019998 <_vfiprintf_r>:
 8019998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801999c:	460d      	mov	r5, r1
 801999e:	b09d      	sub	sp, #116	; 0x74
 80199a0:	4614      	mov	r4, r2
 80199a2:	4698      	mov	r8, r3
 80199a4:	4606      	mov	r6, r0
 80199a6:	b118      	cbz	r0, 80199b0 <_vfiprintf_r+0x18>
 80199a8:	6983      	ldr	r3, [r0, #24]
 80199aa:	b90b      	cbnz	r3, 80199b0 <_vfiprintf_r+0x18>
 80199ac:	f7fe fae8 	bl	8017f80 <__sinit>
 80199b0:	4b89      	ldr	r3, [pc, #548]	; (8019bd8 <_vfiprintf_r+0x240>)
 80199b2:	429d      	cmp	r5, r3
 80199b4:	d11b      	bne.n	80199ee <_vfiprintf_r+0x56>
 80199b6:	6875      	ldr	r5, [r6, #4]
 80199b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80199ba:	07d9      	lsls	r1, r3, #31
 80199bc:	d405      	bmi.n	80199ca <_vfiprintf_r+0x32>
 80199be:	89ab      	ldrh	r3, [r5, #12]
 80199c0:	059a      	lsls	r2, r3, #22
 80199c2:	d402      	bmi.n	80199ca <_vfiprintf_r+0x32>
 80199c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80199c6:	f7fe feec 	bl	80187a2 <__retarget_lock_acquire_recursive>
 80199ca:	89ab      	ldrh	r3, [r5, #12]
 80199cc:	071b      	lsls	r3, r3, #28
 80199ce:	d501      	bpl.n	80199d4 <_vfiprintf_r+0x3c>
 80199d0:	692b      	ldr	r3, [r5, #16]
 80199d2:	b9eb      	cbnz	r3, 8019a10 <_vfiprintf_r+0x78>
 80199d4:	4629      	mov	r1, r5
 80199d6:	4630      	mov	r0, r6
 80199d8:	f000 fbea 	bl	801a1b0 <__swsetup_r>
 80199dc:	b1c0      	cbz	r0, 8019a10 <_vfiprintf_r+0x78>
 80199de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80199e0:	07dc      	lsls	r4, r3, #31
 80199e2:	d50e      	bpl.n	8019a02 <_vfiprintf_r+0x6a>
 80199e4:	f04f 30ff 	mov.w	r0, #4294967295
 80199e8:	b01d      	add	sp, #116	; 0x74
 80199ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199ee:	4b7b      	ldr	r3, [pc, #492]	; (8019bdc <_vfiprintf_r+0x244>)
 80199f0:	429d      	cmp	r5, r3
 80199f2:	d101      	bne.n	80199f8 <_vfiprintf_r+0x60>
 80199f4:	68b5      	ldr	r5, [r6, #8]
 80199f6:	e7df      	b.n	80199b8 <_vfiprintf_r+0x20>
 80199f8:	4b79      	ldr	r3, [pc, #484]	; (8019be0 <_vfiprintf_r+0x248>)
 80199fa:	429d      	cmp	r5, r3
 80199fc:	bf08      	it	eq
 80199fe:	68f5      	ldreq	r5, [r6, #12]
 8019a00:	e7da      	b.n	80199b8 <_vfiprintf_r+0x20>
 8019a02:	89ab      	ldrh	r3, [r5, #12]
 8019a04:	0598      	lsls	r0, r3, #22
 8019a06:	d4ed      	bmi.n	80199e4 <_vfiprintf_r+0x4c>
 8019a08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019a0a:	f7fe fecb 	bl	80187a4 <__retarget_lock_release_recursive>
 8019a0e:	e7e9      	b.n	80199e4 <_vfiprintf_r+0x4c>
 8019a10:	2300      	movs	r3, #0
 8019a12:	9309      	str	r3, [sp, #36]	; 0x24
 8019a14:	2320      	movs	r3, #32
 8019a16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019a1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8019a1e:	2330      	movs	r3, #48	; 0x30
 8019a20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019be4 <_vfiprintf_r+0x24c>
 8019a24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019a28:	f04f 0901 	mov.w	r9, #1
 8019a2c:	4623      	mov	r3, r4
 8019a2e:	469a      	mov	sl, r3
 8019a30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019a34:	b10a      	cbz	r2, 8019a3a <_vfiprintf_r+0xa2>
 8019a36:	2a25      	cmp	r2, #37	; 0x25
 8019a38:	d1f9      	bne.n	8019a2e <_vfiprintf_r+0x96>
 8019a3a:	ebba 0b04 	subs.w	fp, sl, r4
 8019a3e:	d00b      	beq.n	8019a58 <_vfiprintf_r+0xc0>
 8019a40:	465b      	mov	r3, fp
 8019a42:	4622      	mov	r2, r4
 8019a44:	4629      	mov	r1, r5
 8019a46:	4630      	mov	r0, r6
 8019a48:	f7ff ff93 	bl	8019972 <__sfputs_r>
 8019a4c:	3001      	adds	r0, #1
 8019a4e:	f000 80aa 	beq.w	8019ba6 <_vfiprintf_r+0x20e>
 8019a52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019a54:	445a      	add	r2, fp
 8019a56:	9209      	str	r2, [sp, #36]	; 0x24
 8019a58:	f89a 3000 	ldrb.w	r3, [sl]
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	f000 80a2 	beq.w	8019ba6 <_vfiprintf_r+0x20e>
 8019a62:	2300      	movs	r3, #0
 8019a64:	f04f 32ff 	mov.w	r2, #4294967295
 8019a68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019a6c:	f10a 0a01 	add.w	sl, sl, #1
 8019a70:	9304      	str	r3, [sp, #16]
 8019a72:	9307      	str	r3, [sp, #28]
 8019a74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019a78:	931a      	str	r3, [sp, #104]	; 0x68
 8019a7a:	4654      	mov	r4, sl
 8019a7c:	2205      	movs	r2, #5
 8019a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a82:	4858      	ldr	r0, [pc, #352]	; (8019be4 <_vfiprintf_r+0x24c>)
 8019a84:	f7e6 fbc4 	bl	8000210 <memchr>
 8019a88:	9a04      	ldr	r2, [sp, #16]
 8019a8a:	b9d8      	cbnz	r0, 8019ac4 <_vfiprintf_r+0x12c>
 8019a8c:	06d1      	lsls	r1, r2, #27
 8019a8e:	bf44      	itt	mi
 8019a90:	2320      	movmi	r3, #32
 8019a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019a96:	0713      	lsls	r3, r2, #28
 8019a98:	bf44      	itt	mi
 8019a9a:	232b      	movmi	r3, #43	; 0x2b
 8019a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8019aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8019aa6:	d015      	beq.n	8019ad4 <_vfiprintf_r+0x13c>
 8019aa8:	9a07      	ldr	r2, [sp, #28]
 8019aaa:	4654      	mov	r4, sl
 8019aac:	2000      	movs	r0, #0
 8019aae:	f04f 0c0a 	mov.w	ip, #10
 8019ab2:	4621      	mov	r1, r4
 8019ab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019ab8:	3b30      	subs	r3, #48	; 0x30
 8019aba:	2b09      	cmp	r3, #9
 8019abc:	d94e      	bls.n	8019b5c <_vfiprintf_r+0x1c4>
 8019abe:	b1b0      	cbz	r0, 8019aee <_vfiprintf_r+0x156>
 8019ac0:	9207      	str	r2, [sp, #28]
 8019ac2:	e014      	b.n	8019aee <_vfiprintf_r+0x156>
 8019ac4:	eba0 0308 	sub.w	r3, r0, r8
 8019ac8:	fa09 f303 	lsl.w	r3, r9, r3
 8019acc:	4313      	orrs	r3, r2
 8019ace:	9304      	str	r3, [sp, #16]
 8019ad0:	46a2      	mov	sl, r4
 8019ad2:	e7d2      	b.n	8019a7a <_vfiprintf_r+0xe2>
 8019ad4:	9b03      	ldr	r3, [sp, #12]
 8019ad6:	1d19      	adds	r1, r3, #4
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	9103      	str	r1, [sp, #12]
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	bfbb      	ittet	lt
 8019ae0:	425b      	neglt	r3, r3
 8019ae2:	f042 0202 	orrlt.w	r2, r2, #2
 8019ae6:	9307      	strge	r3, [sp, #28]
 8019ae8:	9307      	strlt	r3, [sp, #28]
 8019aea:	bfb8      	it	lt
 8019aec:	9204      	strlt	r2, [sp, #16]
 8019aee:	7823      	ldrb	r3, [r4, #0]
 8019af0:	2b2e      	cmp	r3, #46	; 0x2e
 8019af2:	d10c      	bne.n	8019b0e <_vfiprintf_r+0x176>
 8019af4:	7863      	ldrb	r3, [r4, #1]
 8019af6:	2b2a      	cmp	r3, #42	; 0x2a
 8019af8:	d135      	bne.n	8019b66 <_vfiprintf_r+0x1ce>
 8019afa:	9b03      	ldr	r3, [sp, #12]
 8019afc:	1d1a      	adds	r2, r3, #4
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	9203      	str	r2, [sp, #12]
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	bfb8      	it	lt
 8019b06:	f04f 33ff 	movlt.w	r3, #4294967295
 8019b0a:	3402      	adds	r4, #2
 8019b0c:	9305      	str	r3, [sp, #20]
 8019b0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019bf4 <_vfiprintf_r+0x25c>
 8019b12:	7821      	ldrb	r1, [r4, #0]
 8019b14:	2203      	movs	r2, #3
 8019b16:	4650      	mov	r0, sl
 8019b18:	f7e6 fb7a 	bl	8000210 <memchr>
 8019b1c:	b140      	cbz	r0, 8019b30 <_vfiprintf_r+0x198>
 8019b1e:	2340      	movs	r3, #64	; 0x40
 8019b20:	eba0 000a 	sub.w	r0, r0, sl
 8019b24:	fa03 f000 	lsl.w	r0, r3, r0
 8019b28:	9b04      	ldr	r3, [sp, #16]
 8019b2a:	4303      	orrs	r3, r0
 8019b2c:	3401      	adds	r4, #1
 8019b2e:	9304      	str	r3, [sp, #16]
 8019b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b34:	482c      	ldr	r0, [pc, #176]	; (8019be8 <_vfiprintf_r+0x250>)
 8019b36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019b3a:	2206      	movs	r2, #6
 8019b3c:	f7e6 fb68 	bl	8000210 <memchr>
 8019b40:	2800      	cmp	r0, #0
 8019b42:	d03f      	beq.n	8019bc4 <_vfiprintf_r+0x22c>
 8019b44:	4b29      	ldr	r3, [pc, #164]	; (8019bec <_vfiprintf_r+0x254>)
 8019b46:	bb1b      	cbnz	r3, 8019b90 <_vfiprintf_r+0x1f8>
 8019b48:	9b03      	ldr	r3, [sp, #12]
 8019b4a:	3307      	adds	r3, #7
 8019b4c:	f023 0307 	bic.w	r3, r3, #7
 8019b50:	3308      	adds	r3, #8
 8019b52:	9303      	str	r3, [sp, #12]
 8019b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b56:	443b      	add	r3, r7
 8019b58:	9309      	str	r3, [sp, #36]	; 0x24
 8019b5a:	e767      	b.n	8019a2c <_vfiprintf_r+0x94>
 8019b5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019b60:	460c      	mov	r4, r1
 8019b62:	2001      	movs	r0, #1
 8019b64:	e7a5      	b.n	8019ab2 <_vfiprintf_r+0x11a>
 8019b66:	2300      	movs	r3, #0
 8019b68:	3401      	adds	r4, #1
 8019b6a:	9305      	str	r3, [sp, #20]
 8019b6c:	4619      	mov	r1, r3
 8019b6e:	f04f 0c0a 	mov.w	ip, #10
 8019b72:	4620      	mov	r0, r4
 8019b74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019b78:	3a30      	subs	r2, #48	; 0x30
 8019b7a:	2a09      	cmp	r2, #9
 8019b7c:	d903      	bls.n	8019b86 <_vfiprintf_r+0x1ee>
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d0c5      	beq.n	8019b0e <_vfiprintf_r+0x176>
 8019b82:	9105      	str	r1, [sp, #20]
 8019b84:	e7c3      	b.n	8019b0e <_vfiprintf_r+0x176>
 8019b86:	fb0c 2101 	mla	r1, ip, r1, r2
 8019b8a:	4604      	mov	r4, r0
 8019b8c:	2301      	movs	r3, #1
 8019b8e:	e7f0      	b.n	8019b72 <_vfiprintf_r+0x1da>
 8019b90:	ab03      	add	r3, sp, #12
 8019b92:	9300      	str	r3, [sp, #0]
 8019b94:	462a      	mov	r2, r5
 8019b96:	4b16      	ldr	r3, [pc, #88]	; (8019bf0 <_vfiprintf_r+0x258>)
 8019b98:	a904      	add	r1, sp, #16
 8019b9a:	4630      	mov	r0, r6
 8019b9c:	f7fb fd86 	bl	80156ac <_printf_float>
 8019ba0:	4607      	mov	r7, r0
 8019ba2:	1c78      	adds	r0, r7, #1
 8019ba4:	d1d6      	bne.n	8019b54 <_vfiprintf_r+0x1bc>
 8019ba6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019ba8:	07d9      	lsls	r1, r3, #31
 8019baa:	d405      	bmi.n	8019bb8 <_vfiprintf_r+0x220>
 8019bac:	89ab      	ldrh	r3, [r5, #12]
 8019bae:	059a      	lsls	r2, r3, #22
 8019bb0:	d402      	bmi.n	8019bb8 <_vfiprintf_r+0x220>
 8019bb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019bb4:	f7fe fdf6 	bl	80187a4 <__retarget_lock_release_recursive>
 8019bb8:	89ab      	ldrh	r3, [r5, #12]
 8019bba:	065b      	lsls	r3, r3, #25
 8019bbc:	f53f af12 	bmi.w	80199e4 <_vfiprintf_r+0x4c>
 8019bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019bc2:	e711      	b.n	80199e8 <_vfiprintf_r+0x50>
 8019bc4:	ab03      	add	r3, sp, #12
 8019bc6:	9300      	str	r3, [sp, #0]
 8019bc8:	462a      	mov	r2, r5
 8019bca:	4b09      	ldr	r3, [pc, #36]	; (8019bf0 <_vfiprintf_r+0x258>)
 8019bcc:	a904      	add	r1, sp, #16
 8019bce:	4630      	mov	r0, r6
 8019bd0:	f7fc f810 	bl	8015bf4 <_printf_i>
 8019bd4:	e7e4      	b.n	8019ba0 <_vfiprintf_r+0x208>
 8019bd6:	bf00      	nop
 8019bd8:	0801b1d8 	.word	0x0801b1d8
 8019bdc:	0801b1f8 	.word	0x0801b1f8
 8019be0:	0801b1b8 	.word	0x0801b1b8
 8019be4:	0801b3f4 	.word	0x0801b3f4
 8019be8:	0801b3fe 	.word	0x0801b3fe
 8019bec:	080156ad 	.word	0x080156ad
 8019bf0:	08019973 	.word	0x08019973
 8019bf4:	0801b3fa 	.word	0x0801b3fa

08019bf8 <_scanf_chars>:
 8019bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019bfc:	4615      	mov	r5, r2
 8019bfe:	688a      	ldr	r2, [r1, #8]
 8019c00:	4680      	mov	r8, r0
 8019c02:	460c      	mov	r4, r1
 8019c04:	b932      	cbnz	r2, 8019c14 <_scanf_chars+0x1c>
 8019c06:	698a      	ldr	r2, [r1, #24]
 8019c08:	2a00      	cmp	r2, #0
 8019c0a:	bf0c      	ite	eq
 8019c0c:	2201      	moveq	r2, #1
 8019c0e:	f04f 32ff 	movne.w	r2, #4294967295
 8019c12:	608a      	str	r2, [r1, #8]
 8019c14:	6822      	ldr	r2, [r4, #0]
 8019c16:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8019ca4 <_scanf_chars+0xac>
 8019c1a:	06d1      	lsls	r1, r2, #27
 8019c1c:	bf5f      	itttt	pl
 8019c1e:	681a      	ldrpl	r2, [r3, #0]
 8019c20:	1d11      	addpl	r1, r2, #4
 8019c22:	6019      	strpl	r1, [r3, #0]
 8019c24:	6816      	ldrpl	r6, [r2, #0]
 8019c26:	2700      	movs	r7, #0
 8019c28:	69a0      	ldr	r0, [r4, #24]
 8019c2a:	b188      	cbz	r0, 8019c50 <_scanf_chars+0x58>
 8019c2c:	2801      	cmp	r0, #1
 8019c2e:	d107      	bne.n	8019c40 <_scanf_chars+0x48>
 8019c30:	682b      	ldr	r3, [r5, #0]
 8019c32:	781a      	ldrb	r2, [r3, #0]
 8019c34:	6963      	ldr	r3, [r4, #20]
 8019c36:	5c9b      	ldrb	r3, [r3, r2]
 8019c38:	b953      	cbnz	r3, 8019c50 <_scanf_chars+0x58>
 8019c3a:	bb27      	cbnz	r7, 8019c86 <_scanf_chars+0x8e>
 8019c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c40:	2802      	cmp	r0, #2
 8019c42:	d120      	bne.n	8019c86 <_scanf_chars+0x8e>
 8019c44:	682b      	ldr	r3, [r5, #0]
 8019c46:	781b      	ldrb	r3, [r3, #0]
 8019c48:	f813 3009 	ldrb.w	r3, [r3, r9]
 8019c4c:	071b      	lsls	r3, r3, #28
 8019c4e:	d41a      	bmi.n	8019c86 <_scanf_chars+0x8e>
 8019c50:	6823      	ldr	r3, [r4, #0]
 8019c52:	06da      	lsls	r2, r3, #27
 8019c54:	bf5e      	ittt	pl
 8019c56:	682b      	ldrpl	r3, [r5, #0]
 8019c58:	781b      	ldrbpl	r3, [r3, #0]
 8019c5a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8019c5e:	682a      	ldr	r2, [r5, #0]
 8019c60:	686b      	ldr	r3, [r5, #4]
 8019c62:	3201      	adds	r2, #1
 8019c64:	602a      	str	r2, [r5, #0]
 8019c66:	68a2      	ldr	r2, [r4, #8]
 8019c68:	3b01      	subs	r3, #1
 8019c6a:	3a01      	subs	r2, #1
 8019c6c:	606b      	str	r3, [r5, #4]
 8019c6e:	3701      	adds	r7, #1
 8019c70:	60a2      	str	r2, [r4, #8]
 8019c72:	b142      	cbz	r2, 8019c86 <_scanf_chars+0x8e>
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	dcd7      	bgt.n	8019c28 <_scanf_chars+0x30>
 8019c78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019c7c:	4629      	mov	r1, r5
 8019c7e:	4640      	mov	r0, r8
 8019c80:	4798      	blx	r3
 8019c82:	2800      	cmp	r0, #0
 8019c84:	d0d0      	beq.n	8019c28 <_scanf_chars+0x30>
 8019c86:	6823      	ldr	r3, [r4, #0]
 8019c88:	f013 0310 	ands.w	r3, r3, #16
 8019c8c:	d105      	bne.n	8019c9a <_scanf_chars+0xa2>
 8019c8e:	68e2      	ldr	r2, [r4, #12]
 8019c90:	3201      	adds	r2, #1
 8019c92:	60e2      	str	r2, [r4, #12]
 8019c94:	69a2      	ldr	r2, [r4, #24]
 8019c96:	b102      	cbz	r2, 8019c9a <_scanf_chars+0xa2>
 8019c98:	7033      	strb	r3, [r6, #0]
 8019c9a:	6923      	ldr	r3, [r4, #16]
 8019c9c:	441f      	add	r7, r3
 8019c9e:	6127      	str	r7, [r4, #16]
 8019ca0:	2000      	movs	r0, #0
 8019ca2:	e7cb      	b.n	8019c3c <_scanf_chars+0x44>
 8019ca4:	0801b021 	.word	0x0801b021

08019ca8 <_scanf_i>:
 8019ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cac:	4698      	mov	r8, r3
 8019cae:	4b74      	ldr	r3, [pc, #464]	; (8019e80 <_scanf_i+0x1d8>)
 8019cb0:	460c      	mov	r4, r1
 8019cb2:	4682      	mov	sl, r0
 8019cb4:	4616      	mov	r6, r2
 8019cb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019cba:	b087      	sub	sp, #28
 8019cbc:	ab03      	add	r3, sp, #12
 8019cbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019cc2:	4b70      	ldr	r3, [pc, #448]	; (8019e84 <_scanf_i+0x1dc>)
 8019cc4:	69a1      	ldr	r1, [r4, #24]
 8019cc6:	4a70      	ldr	r2, [pc, #448]	; (8019e88 <_scanf_i+0x1e0>)
 8019cc8:	2903      	cmp	r1, #3
 8019cca:	bf18      	it	ne
 8019ccc:	461a      	movne	r2, r3
 8019cce:	68a3      	ldr	r3, [r4, #8]
 8019cd0:	9201      	str	r2, [sp, #4]
 8019cd2:	1e5a      	subs	r2, r3, #1
 8019cd4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8019cd8:	bf88      	it	hi
 8019cda:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019cde:	4627      	mov	r7, r4
 8019ce0:	bf82      	ittt	hi
 8019ce2:	eb03 0905 	addhi.w	r9, r3, r5
 8019ce6:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019cea:	60a3      	strhi	r3, [r4, #8]
 8019cec:	f857 3b1c 	ldr.w	r3, [r7], #28
 8019cf0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019cf4:	bf98      	it	ls
 8019cf6:	f04f 0900 	movls.w	r9, #0
 8019cfa:	6023      	str	r3, [r4, #0]
 8019cfc:	463d      	mov	r5, r7
 8019cfe:	f04f 0b00 	mov.w	fp, #0
 8019d02:	6831      	ldr	r1, [r6, #0]
 8019d04:	ab03      	add	r3, sp, #12
 8019d06:	7809      	ldrb	r1, [r1, #0]
 8019d08:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8019d0c:	2202      	movs	r2, #2
 8019d0e:	f7e6 fa7f 	bl	8000210 <memchr>
 8019d12:	b328      	cbz	r0, 8019d60 <_scanf_i+0xb8>
 8019d14:	f1bb 0f01 	cmp.w	fp, #1
 8019d18:	d159      	bne.n	8019dce <_scanf_i+0x126>
 8019d1a:	6862      	ldr	r2, [r4, #4]
 8019d1c:	b92a      	cbnz	r2, 8019d2a <_scanf_i+0x82>
 8019d1e:	6822      	ldr	r2, [r4, #0]
 8019d20:	2308      	movs	r3, #8
 8019d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019d26:	6063      	str	r3, [r4, #4]
 8019d28:	6022      	str	r2, [r4, #0]
 8019d2a:	6822      	ldr	r2, [r4, #0]
 8019d2c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019d30:	6022      	str	r2, [r4, #0]
 8019d32:	68a2      	ldr	r2, [r4, #8]
 8019d34:	1e51      	subs	r1, r2, #1
 8019d36:	60a1      	str	r1, [r4, #8]
 8019d38:	b192      	cbz	r2, 8019d60 <_scanf_i+0xb8>
 8019d3a:	6832      	ldr	r2, [r6, #0]
 8019d3c:	1c51      	adds	r1, r2, #1
 8019d3e:	6031      	str	r1, [r6, #0]
 8019d40:	7812      	ldrb	r2, [r2, #0]
 8019d42:	f805 2b01 	strb.w	r2, [r5], #1
 8019d46:	6872      	ldr	r2, [r6, #4]
 8019d48:	3a01      	subs	r2, #1
 8019d4a:	2a00      	cmp	r2, #0
 8019d4c:	6072      	str	r2, [r6, #4]
 8019d4e:	dc07      	bgt.n	8019d60 <_scanf_i+0xb8>
 8019d50:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8019d54:	4631      	mov	r1, r6
 8019d56:	4650      	mov	r0, sl
 8019d58:	4790      	blx	r2
 8019d5a:	2800      	cmp	r0, #0
 8019d5c:	f040 8085 	bne.w	8019e6a <_scanf_i+0x1c2>
 8019d60:	f10b 0b01 	add.w	fp, fp, #1
 8019d64:	f1bb 0f03 	cmp.w	fp, #3
 8019d68:	d1cb      	bne.n	8019d02 <_scanf_i+0x5a>
 8019d6a:	6863      	ldr	r3, [r4, #4]
 8019d6c:	b90b      	cbnz	r3, 8019d72 <_scanf_i+0xca>
 8019d6e:	230a      	movs	r3, #10
 8019d70:	6063      	str	r3, [r4, #4]
 8019d72:	6863      	ldr	r3, [r4, #4]
 8019d74:	4945      	ldr	r1, [pc, #276]	; (8019e8c <_scanf_i+0x1e4>)
 8019d76:	6960      	ldr	r0, [r4, #20]
 8019d78:	1ac9      	subs	r1, r1, r3
 8019d7a:	f000 f8b5 	bl	8019ee8 <__sccl>
 8019d7e:	f04f 0b00 	mov.w	fp, #0
 8019d82:	68a3      	ldr	r3, [r4, #8]
 8019d84:	6822      	ldr	r2, [r4, #0]
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	d03d      	beq.n	8019e06 <_scanf_i+0x15e>
 8019d8a:	6831      	ldr	r1, [r6, #0]
 8019d8c:	6960      	ldr	r0, [r4, #20]
 8019d8e:	f891 c000 	ldrb.w	ip, [r1]
 8019d92:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019d96:	2800      	cmp	r0, #0
 8019d98:	d035      	beq.n	8019e06 <_scanf_i+0x15e>
 8019d9a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019d9e:	d124      	bne.n	8019dea <_scanf_i+0x142>
 8019da0:	0510      	lsls	r0, r2, #20
 8019da2:	d522      	bpl.n	8019dea <_scanf_i+0x142>
 8019da4:	f10b 0b01 	add.w	fp, fp, #1
 8019da8:	f1b9 0f00 	cmp.w	r9, #0
 8019dac:	d003      	beq.n	8019db6 <_scanf_i+0x10e>
 8019dae:	3301      	adds	r3, #1
 8019db0:	f109 39ff 	add.w	r9, r9, #4294967295
 8019db4:	60a3      	str	r3, [r4, #8]
 8019db6:	6873      	ldr	r3, [r6, #4]
 8019db8:	3b01      	subs	r3, #1
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	6073      	str	r3, [r6, #4]
 8019dbe:	dd1b      	ble.n	8019df8 <_scanf_i+0x150>
 8019dc0:	6833      	ldr	r3, [r6, #0]
 8019dc2:	3301      	adds	r3, #1
 8019dc4:	6033      	str	r3, [r6, #0]
 8019dc6:	68a3      	ldr	r3, [r4, #8]
 8019dc8:	3b01      	subs	r3, #1
 8019dca:	60a3      	str	r3, [r4, #8]
 8019dcc:	e7d9      	b.n	8019d82 <_scanf_i+0xda>
 8019dce:	f1bb 0f02 	cmp.w	fp, #2
 8019dd2:	d1ae      	bne.n	8019d32 <_scanf_i+0x8a>
 8019dd4:	6822      	ldr	r2, [r4, #0]
 8019dd6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019dda:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019dde:	d1bf      	bne.n	8019d60 <_scanf_i+0xb8>
 8019de0:	2310      	movs	r3, #16
 8019de2:	6063      	str	r3, [r4, #4]
 8019de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019de8:	e7a2      	b.n	8019d30 <_scanf_i+0x88>
 8019dea:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019dee:	6022      	str	r2, [r4, #0]
 8019df0:	780b      	ldrb	r3, [r1, #0]
 8019df2:	f805 3b01 	strb.w	r3, [r5], #1
 8019df6:	e7de      	b.n	8019db6 <_scanf_i+0x10e>
 8019df8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019dfc:	4631      	mov	r1, r6
 8019dfe:	4650      	mov	r0, sl
 8019e00:	4798      	blx	r3
 8019e02:	2800      	cmp	r0, #0
 8019e04:	d0df      	beq.n	8019dc6 <_scanf_i+0x11e>
 8019e06:	6823      	ldr	r3, [r4, #0]
 8019e08:	05d9      	lsls	r1, r3, #23
 8019e0a:	d50d      	bpl.n	8019e28 <_scanf_i+0x180>
 8019e0c:	42bd      	cmp	r5, r7
 8019e0e:	d909      	bls.n	8019e24 <_scanf_i+0x17c>
 8019e10:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019e14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019e18:	4632      	mov	r2, r6
 8019e1a:	4650      	mov	r0, sl
 8019e1c:	4798      	blx	r3
 8019e1e:	f105 39ff 	add.w	r9, r5, #4294967295
 8019e22:	464d      	mov	r5, r9
 8019e24:	42bd      	cmp	r5, r7
 8019e26:	d028      	beq.n	8019e7a <_scanf_i+0x1d2>
 8019e28:	6822      	ldr	r2, [r4, #0]
 8019e2a:	f012 0210 	ands.w	r2, r2, #16
 8019e2e:	d113      	bne.n	8019e58 <_scanf_i+0x1b0>
 8019e30:	702a      	strb	r2, [r5, #0]
 8019e32:	6863      	ldr	r3, [r4, #4]
 8019e34:	9e01      	ldr	r6, [sp, #4]
 8019e36:	4639      	mov	r1, r7
 8019e38:	4650      	mov	r0, sl
 8019e3a:	47b0      	blx	r6
 8019e3c:	f8d8 3000 	ldr.w	r3, [r8]
 8019e40:	6821      	ldr	r1, [r4, #0]
 8019e42:	1d1a      	adds	r2, r3, #4
 8019e44:	f8c8 2000 	str.w	r2, [r8]
 8019e48:	f011 0f20 	tst.w	r1, #32
 8019e4c:	681b      	ldr	r3, [r3, #0]
 8019e4e:	d00f      	beq.n	8019e70 <_scanf_i+0x1c8>
 8019e50:	6018      	str	r0, [r3, #0]
 8019e52:	68e3      	ldr	r3, [r4, #12]
 8019e54:	3301      	adds	r3, #1
 8019e56:	60e3      	str	r3, [r4, #12]
 8019e58:	1bed      	subs	r5, r5, r7
 8019e5a:	44ab      	add	fp, r5
 8019e5c:	6925      	ldr	r5, [r4, #16]
 8019e5e:	445d      	add	r5, fp
 8019e60:	6125      	str	r5, [r4, #16]
 8019e62:	2000      	movs	r0, #0
 8019e64:	b007      	add	sp, #28
 8019e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e6a:	f04f 0b00 	mov.w	fp, #0
 8019e6e:	e7ca      	b.n	8019e06 <_scanf_i+0x15e>
 8019e70:	07ca      	lsls	r2, r1, #31
 8019e72:	bf4c      	ite	mi
 8019e74:	8018      	strhmi	r0, [r3, #0]
 8019e76:	6018      	strpl	r0, [r3, #0]
 8019e78:	e7eb      	b.n	8019e52 <_scanf_i+0x1aa>
 8019e7a:	2001      	movs	r0, #1
 8019e7c:	e7f2      	b.n	8019e64 <_scanf_i+0x1bc>
 8019e7e:	bf00      	nop
 8019e80:	0801acf8 	.word	0x0801acf8
 8019e84:	0801a079 	.word	0x0801a079
 8019e88:	08017159 	.word	0x08017159
 8019e8c:	0801b41e 	.word	0x0801b41e

08019e90 <_read_r>:
 8019e90:	b538      	push	{r3, r4, r5, lr}
 8019e92:	4d07      	ldr	r5, [pc, #28]	; (8019eb0 <_read_r+0x20>)
 8019e94:	4604      	mov	r4, r0
 8019e96:	4608      	mov	r0, r1
 8019e98:	4611      	mov	r1, r2
 8019e9a:	2200      	movs	r2, #0
 8019e9c:	602a      	str	r2, [r5, #0]
 8019e9e:	461a      	mov	r2, r3
 8019ea0:	f7ed fb5e 	bl	8007560 <_read>
 8019ea4:	1c43      	adds	r3, r0, #1
 8019ea6:	d102      	bne.n	8019eae <_read_r+0x1e>
 8019ea8:	682b      	ldr	r3, [r5, #0]
 8019eaa:	b103      	cbz	r3, 8019eae <_read_r+0x1e>
 8019eac:	6023      	str	r3, [r4, #0]
 8019eae:	bd38      	pop	{r3, r4, r5, pc}
 8019eb0:	20041e60 	.word	0x20041e60
 8019eb4:	00000000 	.word	0x00000000

08019eb8 <nan>:
 8019eb8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019ec0 <nan+0x8>
 8019ebc:	4770      	bx	lr
 8019ebe:	bf00      	nop
 8019ec0:	00000000 	.word	0x00000000
 8019ec4:	7ff80000 	.word	0x7ff80000

08019ec8 <_sbrk_r>:
 8019ec8:	b538      	push	{r3, r4, r5, lr}
 8019eca:	4d06      	ldr	r5, [pc, #24]	; (8019ee4 <_sbrk_r+0x1c>)
 8019ecc:	2300      	movs	r3, #0
 8019ece:	4604      	mov	r4, r0
 8019ed0:	4608      	mov	r0, r1
 8019ed2:	602b      	str	r3, [r5, #0]
 8019ed4:	f7ed fb96 	bl	8007604 <_sbrk>
 8019ed8:	1c43      	adds	r3, r0, #1
 8019eda:	d102      	bne.n	8019ee2 <_sbrk_r+0x1a>
 8019edc:	682b      	ldr	r3, [r5, #0]
 8019ede:	b103      	cbz	r3, 8019ee2 <_sbrk_r+0x1a>
 8019ee0:	6023      	str	r3, [r4, #0]
 8019ee2:	bd38      	pop	{r3, r4, r5, pc}
 8019ee4:	20041e60 	.word	0x20041e60

08019ee8 <__sccl>:
 8019ee8:	b570      	push	{r4, r5, r6, lr}
 8019eea:	780b      	ldrb	r3, [r1, #0]
 8019eec:	4604      	mov	r4, r0
 8019eee:	2b5e      	cmp	r3, #94	; 0x5e
 8019ef0:	bf0b      	itete	eq
 8019ef2:	784b      	ldrbeq	r3, [r1, #1]
 8019ef4:	1c48      	addne	r0, r1, #1
 8019ef6:	1c88      	addeq	r0, r1, #2
 8019ef8:	2200      	movne	r2, #0
 8019efa:	bf08      	it	eq
 8019efc:	2201      	moveq	r2, #1
 8019efe:	1e61      	subs	r1, r4, #1
 8019f00:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8019f04:	f801 2f01 	strb.w	r2, [r1, #1]!
 8019f08:	42a9      	cmp	r1, r5
 8019f0a:	d1fb      	bne.n	8019f04 <__sccl+0x1c>
 8019f0c:	b90b      	cbnz	r3, 8019f12 <__sccl+0x2a>
 8019f0e:	3801      	subs	r0, #1
 8019f10:	bd70      	pop	{r4, r5, r6, pc}
 8019f12:	f082 0101 	eor.w	r1, r2, #1
 8019f16:	54e1      	strb	r1, [r4, r3]
 8019f18:	1c42      	adds	r2, r0, #1
 8019f1a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8019f1e:	2d2d      	cmp	r5, #45	; 0x2d
 8019f20:	f102 36ff 	add.w	r6, r2, #4294967295
 8019f24:	4610      	mov	r0, r2
 8019f26:	d006      	beq.n	8019f36 <__sccl+0x4e>
 8019f28:	2d5d      	cmp	r5, #93	; 0x5d
 8019f2a:	d0f1      	beq.n	8019f10 <__sccl+0x28>
 8019f2c:	b90d      	cbnz	r5, 8019f32 <__sccl+0x4a>
 8019f2e:	4630      	mov	r0, r6
 8019f30:	e7ee      	b.n	8019f10 <__sccl+0x28>
 8019f32:	462b      	mov	r3, r5
 8019f34:	e7ef      	b.n	8019f16 <__sccl+0x2e>
 8019f36:	7816      	ldrb	r6, [r2, #0]
 8019f38:	2e5d      	cmp	r6, #93	; 0x5d
 8019f3a:	d0fa      	beq.n	8019f32 <__sccl+0x4a>
 8019f3c:	42b3      	cmp	r3, r6
 8019f3e:	dcf8      	bgt.n	8019f32 <__sccl+0x4a>
 8019f40:	4618      	mov	r0, r3
 8019f42:	3001      	adds	r0, #1
 8019f44:	4286      	cmp	r6, r0
 8019f46:	5421      	strb	r1, [r4, r0]
 8019f48:	dcfb      	bgt.n	8019f42 <__sccl+0x5a>
 8019f4a:	43d8      	mvns	r0, r3
 8019f4c:	4430      	add	r0, r6
 8019f4e:	1c5d      	adds	r5, r3, #1
 8019f50:	42b3      	cmp	r3, r6
 8019f52:	bfa8      	it	ge
 8019f54:	2000      	movge	r0, #0
 8019f56:	182b      	adds	r3, r5, r0
 8019f58:	3202      	adds	r2, #2
 8019f5a:	e7de      	b.n	8019f1a <__sccl+0x32>

08019f5c <strncmp>:
 8019f5c:	b510      	push	{r4, lr}
 8019f5e:	b16a      	cbz	r2, 8019f7c <strncmp+0x20>
 8019f60:	3901      	subs	r1, #1
 8019f62:	1884      	adds	r4, r0, r2
 8019f64:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019f68:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019f6c:	4293      	cmp	r3, r2
 8019f6e:	d103      	bne.n	8019f78 <strncmp+0x1c>
 8019f70:	42a0      	cmp	r0, r4
 8019f72:	d001      	beq.n	8019f78 <strncmp+0x1c>
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	d1f5      	bne.n	8019f64 <strncmp+0x8>
 8019f78:	1a98      	subs	r0, r3, r2
 8019f7a:	bd10      	pop	{r4, pc}
 8019f7c:	4610      	mov	r0, r2
 8019f7e:	e7fc      	b.n	8019f7a <strncmp+0x1e>

08019f80 <_strtoul_l.isra.0>:
 8019f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019f84:	4e3b      	ldr	r6, [pc, #236]	; (801a074 <_strtoul_l.isra.0+0xf4>)
 8019f86:	4686      	mov	lr, r0
 8019f88:	468c      	mov	ip, r1
 8019f8a:	4660      	mov	r0, ip
 8019f8c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8019f90:	5da5      	ldrb	r5, [r4, r6]
 8019f92:	f015 0508 	ands.w	r5, r5, #8
 8019f96:	d1f8      	bne.n	8019f8a <_strtoul_l.isra.0+0xa>
 8019f98:	2c2d      	cmp	r4, #45	; 0x2d
 8019f9a:	d134      	bne.n	801a006 <_strtoul_l.isra.0+0x86>
 8019f9c:	f89c 4000 	ldrb.w	r4, [ip]
 8019fa0:	f04f 0801 	mov.w	r8, #1
 8019fa4:	f100 0c02 	add.w	ip, r0, #2
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d05e      	beq.n	801a06a <_strtoul_l.isra.0+0xea>
 8019fac:	2b10      	cmp	r3, #16
 8019fae:	d10c      	bne.n	8019fca <_strtoul_l.isra.0+0x4a>
 8019fb0:	2c30      	cmp	r4, #48	; 0x30
 8019fb2:	d10a      	bne.n	8019fca <_strtoul_l.isra.0+0x4a>
 8019fb4:	f89c 0000 	ldrb.w	r0, [ip]
 8019fb8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8019fbc:	2858      	cmp	r0, #88	; 0x58
 8019fbe:	d14f      	bne.n	801a060 <_strtoul_l.isra.0+0xe0>
 8019fc0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8019fc4:	2310      	movs	r3, #16
 8019fc6:	f10c 0c02 	add.w	ip, ip, #2
 8019fca:	f04f 37ff 	mov.w	r7, #4294967295
 8019fce:	2500      	movs	r5, #0
 8019fd0:	fbb7 f7f3 	udiv	r7, r7, r3
 8019fd4:	fb03 f907 	mul.w	r9, r3, r7
 8019fd8:	ea6f 0909 	mvn.w	r9, r9
 8019fdc:	4628      	mov	r0, r5
 8019fde:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8019fe2:	2e09      	cmp	r6, #9
 8019fe4:	d818      	bhi.n	801a018 <_strtoul_l.isra.0+0x98>
 8019fe6:	4634      	mov	r4, r6
 8019fe8:	42a3      	cmp	r3, r4
 8019fea:	dd24      	ble.n	801a036 <_strtoul_l.isra.0+0xb6>
 8019fec:	2d00      	cmp	r5, #0
 8019fee:	db1f      	blt.n	801a030 <_strtoul_l.isra.0+0xb0>
 8019ff0:	4287      	cmp	r7, r0
 8019ff2:	d31d      	bcc.n	801a030 <_strtoul_l.isra.0+0xb0>
 8019ff4:	d101      	bne.n	8019ffa <_strtoul_l.isra.0+0x7a>
 8019ff6:	45a1      	cmp	r9, r4
 8019ff8:	db1a      	blt.n	801a030 <_strtoul_l.isra.0+0xb0>
 8019ffa:	fb00 4003 	mla	r0, r0, r3, r4
 8019ffe:	2501      	movs	r5, #1
 801a000:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801a004:	e7eb      	b.n	8019fde <_strtoul_l.isra.0+0x5e>
 801a006:	2c2b      	cmp	r4, #43	; 0x2b
 801a008:	bf08      	it	eq
 801a00a:	f89c 4000 	ldrbeq.w	r4, [ip]
 801a00e:	46a8      	mov	r8, r5
 801a010:	bf08      	it	eq
 801a012:	f100 0c02 	addeq.w	ip, r0, #2
 801a016:	e7c7      	b.n	8019fa8 <_strtoul_l.isra.0+0x28>
 801a018:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801a01c:	2e19      	cmp	r6, #25
 801a01e:	d801      	bhi.n	801a024 <_strtoul_l.isra.0+0xa4>
 801a020:	3c37      	subs	r4, #55	; 0x37
 801a022:	e7e1      	b.n	8019fe8 <_strtoul_l.isra.0+0x68>
 801a024:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801a028:	2e19      	cmp	r6, #25
 801a02a:	d804      	bhi.n	801a036 <_strtoul_l.isra.0+0xb6>
 801a02c:	3c57      	subs	r4, #87	; 0x57
 801a02e:	e7db      	b.n	8019fe8 <_strtoul_l.isra.0+0x68>
 801a030:	f04f 35ff 	mov.w	r5, #4294967295
 801a034:	e7e4      	b.n	801a000 <_strtoul_l.isra.0+0x80>
 801a036:	2d00      	cmp	r5, #0
 801a038:	da07      	bge.n	801a04a <_strtoul_l.isra.0+0xca>
 801a03a:	2322      	movs	r3, #34	; 0x22
 801a03c:	f8ce 3000 	str.w	r3, [lr]
 801a040:	f04f 30ff 	mov.w	r0, #4294967295
 801a044:	b942      	cbnz	r2, 801a058 <_strtoul_l.isra.0+0xd8>
 801a046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a04a:	f1b8 0f00 	cmp.w	r8, #0
 801a04e:	d000      	beq.n	801a052 <_strtoul_l.isra.0+0xd2>
 801a050:	4240      	negs	r0, r0
 801a052:	2a00      	cmp	r2, #0
 801a054:	d0f7      	beq.n	801a046 <_strtoul_l.isra.0+0xc6>
 801a056:	b10d      	cbz	r5, 801a05c <_strtoul_l.isra.0+0xdc>
 801a058:	f10c 31ff 	add.w	r1, ip, #4294967295
 801a05c:	6011      	str	r1, [r2, #0]
 801a05e:	e7f2      	b.n	801a046 <_strtoul_l.isra.0+0xc6>
 801a060:	2430      	movs	r4, #48	; 0x30
 801a062:	2b00      	cmp	r3, #0
 801a064:	d1b1      	bne.n	8019fca <_strtoul_l.isra.0+0x4a>
 801a066:	2308      	movs	r3, #8
 801a068:	e7af      	b.n	8019fca <_strtoul_l.isra.0+0x4a>
 801a06a:	2c30      	cmp	r4, #48	; 0x30
 801a06c:	d0a2      	beq.n	8019fb4 <_strtoul_l.isra.0+0x34>
 801a06e:	230a      	movs	r3, #10
 801a070:	e7ab      	b.n	8019fca <_strtoul_l.isra.0+0x4a>
 801a072:	bf00      	nop
 801a074:	0801b021 	.word	0x0801b021

0801a078 <_strtoul_r>:
 801a078:	f7ff bf82 	b.w	8019f80 <_strtoul_l.isra.0>

0801a07c <__submore>:
 801a07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a080:	460c      	mov	r4, r1
 801a082:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801a084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a088:	4299      	cmp	r1, r3
 801a08a:	d11d      	bne.n	801a0c8 <__submore+0x4c>
 801a08c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a090:	f7ff f8d0 	bl	8019234 <_malloc_r>
 801a094:	b918      	cbnz	r0, 801a09e <__submore+0x22>
 801a096:	f04f 30ff 	mov.w	r0, #4294967295
 801a09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a09e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a0a2:	63a3      	str	r3, [r4, #56]	; 0x38
 801a0a4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801a0a8:	6360      	str	r0, [r4, #52]	; 0x34
 801a0aa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801a0ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801a0b2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801a0b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801a0ba:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801a0be:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801a0c2:	6020      	str	r0, [r4, #0]
 801a0c4:	2000      	movs	r0, #0
 801a0c6:	e7e8      	b.n	801a09a <__submore+0x1e>
 801a0c8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801a0ca:	0077      	lsls	r7, r6, #1
 801a0cc:	463a      	mov	r2, r7
 801a0ce:	f000 fa59 	bl	801a584 <_realloc_r>
 801a0d2:	4605      	mov	r5, r0
 801a0d4:	2800      	cmp	r0, #0
 801a0d6:	d0de      	beq.n	801a096 <__submore+0x1a>
 801a0d8:	eb00 0806 	add.w	r8, r0, r6
 801a0dc:	4601      	mov	r1, r0
 801a0de:	4632      	mov	r2, r6
 801a0e0:	4640      	mov	r0, r8
 801a0e2:	f7fb fa2d 	bl	8015540 <memcpy>
 801a0e6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801a0ea:	f8c4 8000 	str.w	r8, [r4]
 801a0ee:	e7e9      	b.n	801a0c4 <__submore+0x48>

0801a0f0 <__swbuf_r>:
 801a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0f2:	460e      	mov	r6, r1
 801a0f4:	4614      	mov	r4, r2
 801a0f6:	4605      	mov	r5, r0
 801a0f8:	b118      	cbz	r0, 801a102 <__swbuf_r+0x12>
 801a0fa:	6983      	ldr	r3, [r0, #24]
 801a0fc:	b90b      	cbnz	r3, 801a102 <__swbuf_r+0x12>
 801a0fe:	f7fd ff3f 	bl	8017f80 <__sinit>
 801a102:	4b21      	ldr	r3, [pc, #132]	; (801a188 <__swbuf_r+0x98>)
 801a104:	429c      	cmp	r4, r3
 801a106:	d12b      	bne.n	801a160 <__swbuf_r+0x70>
 801a108:	686c      	ldr	r4, [r5, #4]
 801a10a:	69a3      	ldr	r3, [r4, #24]
 801a10c:	60a3      	str	r3, [r4, #8]
 801a10e:	89a3      	ldrh	r3, [r4, #12]
 801a110:	071a      	lsls	r2, r3, #28
 801a112:	d52f      	bpl.n	801a174 <__swbuf_r+0x84>
 801a114:	6923      	ldr	r3, [r4, #16]
 801a116:	b36b      	cbz	r3, 801a174 <__swbuf_r+0x84>
 801a118:	6923      	ldr	r3, [r4, #16]
 801a11a:	6820      	ldr	r0, [r4, #0]
 801a11c:	1ac0      	subs	r0, r0, r3
 801a11e:	6963      	ldr	r3, [r4, #20]
 801a120:	b2f6      	uxtb	r6, r6
 801a122:	4283      	cmp	r3, r0
 801a124:	4637      	mov	r7, r6
 801a126:	dc04      	bgt.n	801a132 <__swbuf_r+0x42>
 801a128:	4621      	mov	r1, r4
 801a12a:	4628      	mov	r0, r5
 801a12c:	f000 f952 	bl	801a3d4 <_fflush_r>
 801a130:	bb30      	cbnz	r0, 801a180 <__swbuf_r+0x90>
 801a132:	68a3      	ldr	r3, [r4, #8]
 801a134:	3b01      	subs	r3, #1
 801a136:	60a3      	str	r3, [r4, #8]
 801a138:	6823      	ldr	r3, [r4, #0]
 801a13a:	1c5a      	adds	r2, r3, #1
 801a13c:	6022      	str	r2, [r4, #0]
 801a13e:	701e      	strb	r6, [r3, #0]
 801a140:	6963      	ldr	r3, [r4, #20]
 801a142:	3001      	adds	r0, #1
 801a144:	4283      	cmp	r3, r0
 801a146:	d004      	beq.n	801a152 <__swbuf_r+0x62>
 801a148:	89a3      	ldrh	r3, [r4, #12]
 801a14a:	07db      	lsls	r3, r3, #31
 801a14c:	d506      	bpl.n	801a15c <__swbuf_r+0x6c>
 801a14e:	2e0a      	cmp	r6, #10
 801a150:	d104      	bne.n	801a15c <__swbuf_r+0x6c>
 801a152:	4621      	mov	r1, r4
 801a154:	4628      	mov	r0, r5
 801a156:	f000 f93d 	bl	801a3d4 <_fflush_r>
 801a15a:	b988      	cbnz	r0, 801a180 <__swbuf_r+0x90>
 801a15c:	4638      	mov	r0, r7
 801a15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a160:	4b0a      	ldr	r3, [pc, #40]	; (801a18c <__swbuf_r+0x9c>)
 801a162:	429c      	cmp	r4, r3
 801a164:	d101      	bne.n	801a16a <__swbuf_r+0x7a>
 801a166:	68ac      	ldr	r4, [r5, #8]
 801a168:	e7cf      	b.n	801a10a <__swbuf_r+0x1a>
 801a16a:	4b09      	ldr	r3, [pc, #36]	; (801a190 <__swbuf_r+0xa0>)
 801a16c:	429c      	cmp	r4, r3
 801a16e:	bf08      	it	eq
 801a170:	68ec      	ldreq	r4, [r5, #12]
 801a172:	e7ca      	b.n	801a10a <__swbuf_r+0x1a>
 801a174:	4621      	mov	r1, r4
 801a176:	4628      	mov	r0, r5
 801a178:	f000 f81a 	bl	801a1b0 <__swsetup_r>
 801a17c:	2800      	cmp	r0, #0
 801a17e:	d0cb      	beq.n	801a118 <__swbuf_r+0x28>
 801a180:	f04f 37ff 	mov.w	r7, #4294967295
 801a184:	e7ea      	b.n	801a15c <__swbuf_r+0x6c>
 801a186:	bf00      	nop
 801a188:	0801b1d8 	.word	0x0801b1d8
 801a18c:	0801b1f8 	.word	0x0801b1f8
 801a190:	0801b1b8 	.word	0x0801b1b8

0801a194 <__ascii_wctomb>:
 801a194:	b149      	cbz	r1, 801a1aa <__ascii_wctomb+0x16>
 801a196:	2aff      	cmp	r2, #255	; 0xff
 801a198:	bf85      	ittet	hi
 801a19a:	238a      	movhi	r3, #138	; 0x8a
 801a19c:	6003      	strhi	r3, [r0, #0]
 801a19e:	700a      	strbls	r2, [r1, #0]
 801a1a0:	f04f 30ff 	movhi.w	r0, #4294967295
 801a1a4:	bf98      	it	ls
 801a1a6:	2001      	movls	r0, #1
 801a1a8:	4770      	bx	lr
 801a1aa:	4608      	mov	r0, r1
 801a1ac:	4770      	bx	lr
	...

0801a1b0 <__swsetup_r>:
 801a1b0:	4b32      	ldr	r3, [pc, #200]	; (801a27c <__swsetup_r+0xcc>)
 801a1b2:	b570      	push	{r4, r5, r6, lr}
 801a1b4:	681d      	ldr	r5, [r3, #0]
 801a1b6:	4606      	mov	r6, r0
 801a1b8:	460c      	mov	r4, r1
 801a1ba:	b125      	cbz	r5, 801a1c6 <__swsetup_r+0x16>
 801a1bc:	69ab      	ldr	r3, [r5, #24]
 801a1be:	b913      	cbnz	r3, 801a1c6 <__swsetup_r+0x16>
 801a1c0:	4628      	mov	r0, r5
 801a1c2:	f7fd fedd 	bl	8017f80 <__sinit>
 801a1c6:	4b2e      	ldr	r3, [pc, #184]	; (801a280 <__swsetup_r+0xd0>)
 801a1c8:	429c      	cmp	r4, r3
 801a1ca:	d10f      	bne.n	801a1ec <__swsetup_r+0x3c>
 801a1cc:	686c      	ldr	r4, [r5, #4]
 801a1ce:	89a3      	ldrh	r3, [r4, #12]
 801a1d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a1d4:	0719      	lsls	r1, r3, #28
 801a1d6:	d42c      	bmi.n	801a232 <__swsetup_r+0x82>
 801a1d8:	06dd      	lsls	r5, r3, #27
 801a1da:	d411      	bmi.n	801a200 <__swsetup_r+0x50>
 801a1dc:	2309      	movs	r3, #9
 801a1de:	6033      	str	r3, [r6, #0]
 801a1e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a1e4:	81a3      	strh	r3, [r4, #12]
 801a1e6:	f04f 30ff 	mov.w	r0, #4294967295
 801a1ea:	e03e      	b.n	801a26a <__swsetup_r+0xba>
 801a1ec:	4b25      	ldr	r3, [pc, #148]	; (801a284 <__swsetup_r+0xd4>)
 801a1ee:	429c      	cmp	r4, r3
 801a1f0:	d101      	bne.n	801a1f6 <__swsetup_r+0x46>
 801a1f2:	68ac      	ldr	r4, [r5, #8]
 801a1f4:	e7eb      	b.n	801a1ce <__swsetup_r+0x1e>
 801a1f6:	4b24      	ldr	r3, [pc, #144]	; (801a288 <__swsetup_r+0xd8>)
 801a1f8:	429c      	cmp	r4, r3
 801a1fa:	bf08      	it	eq
 801a1fc:	68ec      	ldreq	r4, [r5, #12]
 801a1fe:	e7e6      	b.n	801a1ce <__swsetup_r+0x1e>
 801a200:	0758      	lsls	r0, r3, #29
 801a202:	d512      	bpl.n	801a22a <__swsetup_r+0x7a>
 801a204:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a206:	b141      	cbz	r1, 801a21a <__swsetup_r+0x6a>
 801a208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a20c:	4299      	cmp	r1, r3
 801a20e:	d002      	beq.n	801a216 <__swsetup_r+0x66>
 801a210:	4630      	mov	r0, r6
 801a212:	f7fe ffbf 	bl	8019194 <_free_r>
 801a216:	2300      	movs	r3, #0
 801a218:	6363      	str	r3, [r4, #52]	; 0x34
 801a21a:	89a3      	ldrh	r3, [r4, #12]
 801a21c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a220:	81a3      	strh	r3, [r4, #12]
 801a222:	2300      	movs	r3, #0
 801a224:	6063      	str	r3, [r4, #4]
 801a226:	6923      	ldr	r3, [r4, #16]
 801a228:	6023      	str	r3, [r4, #0]
 801a22a:	89a3      	ldrh	r3, [r4, #12]
 801a22c:	f043 0308 	orr.w	r3, r3, #8
 801a230:	81a3      	strh	r3, [r4, #12]
 801a232:	6923      	ldr	r3, [r4, #16]
 801a234:	b94b      	cbnz	r3, 801a24a <__swsetup_r+0x9a>
 801a236:	89a3      	ldrh	r3, [r4, #12]
 801a238:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a23c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a240:	d003      	beq.n	801a24a <__swsetup_r+0x9a>
 801a242:	4621      	mov	r1, r4
 801a244:	4630      	mov	r0, r6
 801a246:	f000 f937 	bl	801a4b8 <__smakebuf_r>
 801a24a:	89a0      	ldrh	r0, [r4, #12]
 801a24c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a250:	f010 0301 	ands.w	r3, r0, #1
 801a254:	d00a      	beq.n	801a26c <__swsetup_r+0xbc>
 801a256:	2300      	movs	r3, #0
 801a258:	60a3      	str	r3, [r4, #8]
 801a25a:	6963      	ldr	r3, [r4, #20]
 801a25c:	425b      	negs	r3, r3
 801a25e:	61a3      	str	r3, [r4, #24]
 801a260:	6923      	ldr	r3, [r4, #16]
 801a262:	b943      	cbnz	r3, 801a276 <__swsetup_r+0xc6>
 801a264:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a268:	d1ba      	bne.n	801a1e0 <__swsetup_r+0x30>
 801a26a:	bd70      	pop	{r4, r5, r6, pc}
 801a26c:	0781      	lsls	r1, r0, #30
 801a26e:	bf58      	it	pl
 801a270:	6963      	ldrpl	r3, [r4, #20]
 801a272:	60a3      	str	r3, [r4, #8]
 801a274:	e7f4      	b.n	801a260 <__swsetup_r+0xb0>
 801a276:	2000      	movs	r0, #0
 801a278:	e7f7      	b.n	801a26a <__swsetup_r+0xba>
 801a27a:	bf00      	nop
 801a27c:	2000000c 	.word	0x2000000c
 801a280:	0801b1d8 	.word	0x0801b1d8
 801a284:	0801b1f8 	.word	0x0801b1f8
 801a288:	0801b1b8 	.word	0x0801b1b8

0801a28c <__assert_func>:
 801a28c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a28e:	4614      	mov	r4, r2
 801a290:	461a      	mov	r2, r3
 801a292:	4b09      	ldr	r3, [pc, #36]	; (801a2b8 <__assert_func+0x2c>)
 801a294:	681b      	ldr	r3, [r3, #0]
 801a296:	4605      	mov	r5, r0
 801a298:	68d8      	ldr	r0, [r3, #12]
 801a29a:	b14c      	cbz	r4, 801a2b0 <__assert_func+0x24>
 801a29c:	4b07      	ldr	r3, [pc, #28]	; (801a2bc <__assert_func+0x30>)
 801a29e:	9100      	str	r1, [sp, #0]
 801a2a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a2a4:	4906      	ldr	r1, [pc, #24]	; (801a2c0 <__assert_func+0x34>)
 801a2a6:	462b      	mov	r3, r5
 801a2a8:	f000 f8d0 	bl	801a44c <fiprintf>
 801a2ac:	f000 f990 	bl	801a5d0 <abort>
 801a2b0:	4b04      	ldr	r3, [pc, #16]	; (801a2c4 <__assert_func+0x38>)
 801a2b2:	461c      	mov	r4, r3
 801a2b4:	e7f3      	b.n	801a29e <__assert_func+0x12>
 801a2b6:	bf00      	nop
 801a2b8:	2000000c 	.word	0x2000000c
 801a2bc:	0801b420 	.word	0x0801b420
 801a2c0:	0801b42d 	.word	0x0801b42d
 801a2c4:	0801b45b 	.word	0x0801b45b

0801a2c8 <__sflush_r>:
 801a2c8:	898a      	ldrh	r2, [r1, #12]
 801a2ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2ce:	4605      	mov	r5, r0
 801a2d0:	0710      	lsls	r0, r2, #28
 801a2d2:	460c      	mov	r4, r1
 801a2d4:	d458      	bmi.n	801a388 <__sflush_r+0xc0>
 801a2d6:	684b      	ldr	r3, [r1, #4]
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	dc05      	bgt.n	801a2e8 <__sflush_r+0x20>
 801a2dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	dc02      	bgt.n	801a2e8 <__sflush_r+0x20>
 801a2e2:	2000      	movs	r0, #0
 801a2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a2ea:	2e00      	cmp	r6, #0
 801a2ec:	d0f9      	beq.n	801a2e2 <__sflush_r+0x1a>
 801a2ee:	2300      	movs	r3, #0
 801a2f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a2f4:	682f      	ldr	r7, [r5, #0]
 801a2f6:	602b      	str	r3, [r5, #0]
 801a2f8:	d032      	beq.n	801a360 <__sflush_r+0x98>
 801a2fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a2fc:	89a3      	ldrh	r3, [r4, #12]
 801a2fe:	075a      	lsls	r2, r3, #29
 801a300:	d505      	bpl.n	801a30e <__sflush_r+0x46>
 801a302:	6863      	ldr	r3, [r4, #4]
 801a304:	1ac0      	subs	r0, r0, r3
 801a306:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a308:	b10b      	cbz	r3, 801a30e <__sflush_r+0x46>
 801a30a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a30c:	1ac0      	subs	r0, r0, r3
 801a30e:	2300      	movs	r3, #0
 801a310:	4602      	mov	r2, r0
 801a312:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a314:	6a21      	ldr	r1, [r4, #32]
 801a316:	4628      	mov	r0, r5
 801a318:	47b0      	blx	r6
 801a31a:	1c43      	adds	r3, r0, #1
 801a31c:	89a3      	ldrh	r3, [r4, #12]
 801a31e:	d106      	bne.n	801a32e <__sflush_r+0x66>
 801a320:	6829      	ldr	r1, [r5, #0]
 801a322:	291d      	cmp	r1, #29
 801a324:	d82c      	bhi.n	801a380 <__sflush_r+0xb8>
 801a326:	4a2a      	ldr	r2, [pc, #168]	; (801a3d0 <__sflush_r+0x108>)
 801a328:	40ca      	lsrs	r2, r1
 801a32a:	07d6      	lsls	r6, r2, #31
 801a32c:	d528      	bpl.n	801a380 <__sflush_r+0xb8>
 801a32e:	2200      	movs	r2, #0
 801a330:	6062      	str	r2, [r4, #4]
 801a332:	04d9      	lsls	r1, r3, #19
 801a334:	6922      	ldr	r2, [r4, #16]
 801a336:	6022      	str	r2, [r4, #0]
 801a338:	d504      	bpl.n	801a344 <__sflush_r+0x7c>
 801a33a:	1c42      	adds	r2, r0, #1
 801a33c:	d101      	bne.n	801a342 <__sflush_r+0x7a>
 801a33e:	682b      	ldr	r3, [r5, #0]
 801a340:	b903      	cbnz	r3, 801a344 <__sflush_r+0x7c>
 801a342:	6560      	str	r0, [r4, #84]	; 0x54
 801a344:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a346:	602f      	str	r7, [r5, #0]
 801a348:	2900      	cmp	r1, #0
 801a34a:	d0ca      	beq.n	801a2e2 <__sflush_r+0x1a>
 801a34c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a350:	4299      	cmp	r1, r3
 801a352:	d002      	beq.n	801a35a <__sflush_r+0x92>
 801a354:	4628      	mov	r0, r5
 801a356:	f7fe ff1d 	bl	8019194 <_free_r>
 801a35a:	2000      	movs	r0, #0
 801a35c:	6360      	str	r0, [r4, #52]	; 0x34
 801a35e:	e7c1      	b.n	801a2e4 <__sflush_r+0x1c>
 801a360:	6a21      	ldr	r1, [r4, #32]
 801a362:	2301      	movs	r3, #1
 801a364:	4628      	mov	r0, r5
 801a366:	47b0      	blx	r6
 801a368:	1c41      	adds	r1, r0, #1
 801a36a:	d1c7      	bne.n	801a2fc <__sflush_r+0x34>
 801a36c:	682b      	ldr	r3, [r5, #0]
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d0c4      	beq.n	801a2fc <__sflush_r+0x34>
 801a372:	2b1d      	cmp	r3, #29
 801a374:	d001      	beq.n	801a37a <__sflush_r+0xb2>
 801a376:	2b16      	cmp	r3, #22
 801a378:	d101      	bne.n	801a37e <__sflush_r+0xb6>
 801a37a:	602f      	str	r7, [r5, #0]
 801a37c:	e7b1      	b.n	801a2e2 <__sflush_r+0x1a>
 801a37e:	89a3      	ldrh	r3, [r4, #12]
 801a380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a384:	81a3      	strh	r3, [r4, #12]
 801a386:	e7ad      	b.n	801a2e4 <__sflush_r+0x1c>
 801a388:	690f      	ldr	r7, [r1, #16]
 801a38a:	2f00      	cmp	r7, #0
 801a38c:	d0a9      	beq.n	801a2e2 <__sflush_r+0x1a>
 801a38e:	0793      	lsls	r3, r2, #30
 801a390:	680e      	ldr	r6, [r1, #0]
 801a392:	bf08      	it	eq
 801a394:	694b      	ldreq	r3, [r1, #20]
 801a396:	600f      	str	r7, [r1, #0]
 801a398:	bf18      	it	ne
 801a39a:	2300      	movne	r3, #0
 801a39c:	eba6 0807 	sub.w	r8, r6, r7
 801a3a0:	608b      	str	r3, [r1, #8]
 801a3a2:	f1b8 0f00 	cmp.w	r8, #0
 801a3a6:	dd9c      	ble.n	801a2e2 <__sflush_r+0x1a>
 801a3a8:	6a21      	ldr	r1, [r4, #32]
 801a3aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a3ac:	4643      	mov	r3, r8
 801a3ae:	463a      	mov	r2, r7
 801a3b0:	4628      	mov	r0, r5
 801a3b2:	47b0      	blx	r6
 801a3b4:	2800      	cmp	r0, #0
 801a3b6:	dc06      	bgt.n	801a3c6 <__sflush_r+0xfe>
 801a3b8:	89a3      	ldrh	r3, [r4, #12]
 801a3ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a3be:	81a3      	strh	r3, [r4, #12]
 801a3c0:	f04f 30ff 	mov.w	r0, #4294967295
 801a3c4:	e78e      	b.n	801a2e4 <__sflush_r+0x1c>
 801a3c6:	4407      	add	r7, r0
 801a3c8:	eba8 0800 	sub.w	r8, r8, r0
 801a3cc:	e7e9      	b.n	801a3a2 <__sflush_r+0xda>
 801a3ce:	bf00      	nop
 801a3d0:	20400001 	.word	0x20400001

0801a3d4 <_fflush_r>:
 801a3d4:	b538      	push	{r3, r4, r5, lr}
 801a3d6:	690b      	ldr	r3, [r1, #16]
 801a3d8:	4605      	mov	r5, r0
 801a3da:	460c      	mov	r4, r1
 801a3dc:	b913      	cbnz	r3, 801a3e4 <_fflush_r+0x10>
 801a3de:	2500      	movs	r5, #0
 801a3e0:	4628      	mov	r0, r5
 801a3e2:	bd38      	pop	{r3, r4, r5, pc}
 801a3e4:	b118      	cbz	r0, 801a3ee <_fflush_r+0x1a>
 801a3e6:	6983      	ldr	r3, [r0, #24]
 801a3e8:	b90b      	cbnz	r3, 801a3ee <_fflush_r+0x1a>
 801a3ea:	f7fd fdc9 	bl	8017f80 <__sinit>
 801a3ee:	4b14      	ldr	r3, [pc, #80]	; (801a440 <_fflush_r+0x6c>)
 801a3f0:	429c      	cmp	r4, r3
 801a3f2:	d11b      	bne.n	801a42c <_fflush_r+0x58>
 801a3f4:	686c      	ldr	r4, [r5, #4]
 801a3f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	d0ef      	beq.n	801a3de <_fflush_r+0xa>
 801a3fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a400:	07d0      	lsls	r0, r2, #31
 801a402:	d404      	bmi.n	801a40e <_fflush_r+0x3a>
 801a404:	0599      	lsls	r1, r3, #22
 801a406:	d402      	bmi.n	801a40e <_fflush_r+0x3a>
 801a408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a40a:	f7fe f9ca 	bl	80187a2 <__retarget_lock_acquire_recursive>
 801a40e:	4628      	mov	r0, r5
 801a410:	4621      	mov	r1, r4
 801a412:	f7ff ff59 	bl	801a2c8 <__sflush_r>
 801a416:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a418:	07da      	lsls	r2, r3, #31
 801a41a:	4605      	mov	r5, r0
 801a41c:	d4e0      	bmi.n	801a3e0 <_fflush_r+0xc>
 801a41e:	89a3      	ldrh	r3, [r4, #12]
 801a420:	059b      	lsls	r3, r3, #22
 801a422:	d4dd      	bmi.n	801a3e0 <_fflush_r+0xc>
 801a424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a426:	f7fe f9bd 	bl	80187a4 <__retarget_lock_release_recursive>
 801a42a:	e7d9      	b.n	801a3e0 <_fflush_r+0xc>
 801a42c:	4b05      	ldr	r3, [pc, #20]	; (801a444 <_fflush_r+0x70>)
 801a42e:	429c      	cmp	r4, r3
 801a430:	d101      	bne.n	801a436 <_fflush_r+0x62>
 801a432:	68ac      	ldr	r4, [r5, #8]
 801a434:	e7df      	b.n	801a3f6 <_fflush_r+0x22>
 801a436:	4b04      	ldr	r3, [pc, #16]	; (801a448 <_fflush_r+0x74>)
 801a438:	429c      	cmp	r4, r3
 801a43a:	bf08      	it	eq
 801a43c:	68ec      	ldreq	r4, [r5, #12]
 801a43e:	e7da      	b.n	801a3f6 <_fflush_r+0x22>
 801a440:	0801b1d8 	.word	0x0801b1d8
 801a444:	0801b1f8 	.word	0x0801b1f8
 801a448:	0801b1b8 	.word	0x0801b1b8

0801a44c <fiprintf>:
 801a44c:	b40e      	push	{r1, r2, r3}
 801a44e:	b503      	push	{r0, r1, lr}
 801a450:	4601      	mov	r1, r0
 801a452:	ab03      	add	r3, sp, #12
 801a454:	4805      	ldr	r0, [pc, #20]	; (801a46c <fiprintf+0x20>)
 801a456:	f853 2b04 	ldr.w	r2, [r3], #4
 801a45a:	6800      	ldr	r0, [r0, #0]
 801a45c:	9301      	str	r3, [sp, #4]
 801a45e:	f7ff fa9b 	bl	8019998 <_vfiprintf_r>
 801a462:	b002      	add	sp, #8
 801a464:	f85d eb04 	ldr.w	lr, [sp], #4
 801a468:	b003      	add	sp, #12
 801a46a:	4770      	bx	lr
 801a46c:	2000000c 	.word	0x2000000c

0801a470 <__swhatbuf_r>:
 801a470:	b570      	push	{r4, r5, r6, lr}
 801a472:	460e      	mov	r6, r1
 801a474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a478:	2900      	cmp	r1, #0
 801a47a:	b096      	sub	sp, #88	; 0x58
 801a47c:	4614      	mov	r4, r2
 801a47e:	461d      	mov	r5, r3
 801a480:	da07      	bge.n	801a492 <__swhatbuf_r+0x22>
 801a482:	2300      	movs	r3, #0
 801a484:	602b      	str	r3, [r5, #0]
 801a486:	89b3      	ldrh	r3, [r6, #12]
 801a488:	061a      	lsls	r2, r3, #24
 801a48a:	d410      	bmi.n	801a4ae <__swhatbuf_r+0x3e>
 801a48c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a490:	e00e      	b.n	801a4b0 <__swhatbuf_r+0x40>
 801a492:	466a      	mov	r2, sp
 801a494:	f000 f8a4 	bl	801a5e0 <_fstat_r>
 801a498:	2800      	cmp	r0, #0
 801a49a:	dbf2      	blt.n	801a482 <__swhatbuf_r+0x12>
 801a49c:	9a01      	ldr	r2, [sp, #4]
 801a49e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a4a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a4a6:	425a      	negs	r2, r3
 801a4a8:	415a      	adcs	r2, r3
 801a4aa:	602a      	str	r2, [r5, #0]
 801a4ac:	e7ee      	b.n	801a48c <__swhatbuf_r+0x1c>
 801a4ae:	2340      	movs	r3, #64	; 0x40
 801a4b0:	2000      	movs	r0, #0
 801a4b2:	6023      	str	r3, [r4, #0]
 801a4b4:	b016      	add	sp, #88	; 0x58
 801a4b6:	bd70      	pop	{r4, r5, r6, pc}

0801a4b8 <__smakebuf_r>:
 801a4b8:	898b      	ldrh	r3, [r1, #12]
 801a4ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a4bc:	079d      	lsls	r5, r3, #30
 801a4be:	4606      	mov	r6, r0
 801a4c0:	460c      	mov	r4, r1
 801a4c2:	d507      	bpl.n	801a4d4 <__smakebuf_r+0x1c>
 801a4c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a4c8:	6023      	str	r3, [r4, #0]
 801a4ca:	6123      	str	r3, [r4, #16]
 801a4cc:	2301      	movs	r3, #1
 801a4ce:	6163      	str	r3, [r4, #20]
 801a4d0:	b002      	add	sp, #8
 801a4d2:	bd70      	pop	{r4, r5, r6, pc}
 801a4d4:	ab01      	add	r3, sp, #4
 801a4d6:	466a      	mov	r2, sp
 801a4d8:	f7ff ffca 	bl	801a470 <__swhatbuf_r>
 801a4dc:	9900      	ldr	r1, [sp, #0]
 801a4de:	4605      	mov	r5, r0
 801a4e0:	4630      	mov	r0, r6
 801a4e2:	f7fe fea7 	bl	8019234 <_malloc_r>
 801a4e6:	b948      	cbnz	r0, 801a4fc <__smakebuf_r+0x44>
 801a4e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a4ec:	059a      	lsls	r2, r3, #22
 801a4ee:	d4ef      	bmi.n	801a4d0 <__smakebuf_r+0x18>
 801a4f0:	f023 0303 	bic.w	r3, r3, #3
 801a4f4:	f043 0302 	orr.w	r3, r3, #2
 801a4f8:	81a3      	strh	r3, [r4, #12]
 801a4fa:	e7e3      	b.n	801a4c4 <__smakebuf_r+0xc>
 801a4fc:	4b0d      	ldr	r3, [pc, #52]	; (801a534 <__smakebuf_r+0x7c>)
 801a4fe:	62b3      	str	r3, [r6, #40]	; 0x28
 801a500:	89a3      	ldrh	r3, [r4, #12]
 801a502:	6020      	str	r0, [r4, #0]
 801a504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a508:	81a3      	strh	r3, [r4, #12]
 801a50a:	9b00      	ldr	r3, [sp, #0]
 801a50c:	6163      	str	r3, [r4, #20]
 801a50e:	9b01      	ldr	r3, [sp, #4]
 801a510:	6120      	str	r0, [r4, #16]
 801a512:	b15b      	cbz	r3, 801a52c <__smakebuf_r+0x74>
 801a514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a518:	4630      	mov	r0, r6
 801a51a:	f000 f873 	bl	801a604 <_isatty_r>
 801a51e:	b128      	cbz	r0, 801a52c <__smakebuf_r+0x74>
 801a520:	89a3      	ldrh	r3, [r4, #12]
 801a522:	f023 0303 	bic.w	r3, r3, #3
 801a526:	f043 0301 	orr.w	r3, r3, #1
 801a52a:	81a3      	strh	r3, [r4, #12]
 801a52c:	89a0      	ldrh	r0, [r4, #12]
 801a52e:	4305      	orrs	r5, r0
 801a530:	81a5      	strh	r5, [r4, #12]
 801a532:	e7cd      	b.n	801a4d0 <__smakebuf_r+0x18>
 801a534:	08017f19 	.word	0x08017f19

0801a538 <memmove>:
 801a538:	4288      	cmp	r0, r1
 801a53a:	b510      	push	{r4, lr}
 801a53c:	eb01 0402 	add.w	r4, r1, r2
 801a540:	d902      	bls.n	801a548 <memmove+0x10>
 801a542:	4284      	cmp	r4, r0
 801a544:	4623      	mov	r3, r4
 801a546:	d807      	bhi.n	801a558 <memmove+0x20>
 801a548:	1e43      	subs	r3, r0, #1
 801a54a:	42a1      	cmp	r1, r4
 801a54c:	d008      	beq.n	801a560 <memmove+0x28>
 801a54e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a552:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a556:	e7f8      	b.n	801a54a <memmove+0x12>
 801a558:	4402      	add	r2, r0
 801a55a:	4601      	mov	r1, r0
 801a55c:	428a      	cmp	r2, r1
 801a55e:	d100      	bne.n	801a562 <memmove+0x2a>
 801a560:	bd10      	pop	{r4, pc}
 801a562:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a566:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a56a:	e7f7      	b.n	801a55c <memmove+0x24>

0801a56c <__malloc_lock>:
 801a56c:	4801      	ldr	r0, [pc, #4]	; (801a574 <__malloc_lock+0x8>)
 801a56e:	f7fe b918 	b.w	80187a2 <__retarget_lock_acquire_recursive>
 801a572:	bf00      	nop
 801a574:	20041e58 	.word	0x20041e58

0801a578 <__malloc_unlock>:
 801a578:	4801      	ldr	r0, [pc, #4]	; (801a580 <__malloc_unlock+0x8>)
 801a57a:	f7fe b913 	b.w	80187a4 <__retarget_lock_release_recursive>
 801a57e:	bf00      	nop
 801a580:	20041e58 	.word	0x20041e58

0801a584 <_realloc_r>:
 801a584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a586:	4607      	mov	r7, r0
 801a588:	4614      	mov	r4, r2
 801a58a:	460e      	mov	r6, r1
 801a58c:	b921      	cbnz	r1, 801a598 <_realloc_r+0x14>
 801a58e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a592:	4611      	mov	r1, r2
 801a594:	f7fe be4e 	b.w	8019234 <_malloc_r>
 801a598:	b922      	cbnz	r2, 801a5a4 <_realloc_r+0x20>
 801a59a:	f7fe fdfb 	bl	8019194 <_free_r>
 801a59e:	4625      	mov	r5, r4
 801a5a0:	4628      	mov	r0, r5
 801a5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5a4:	f000 f83e 	bl	801a624 <_malloc_usable_size_r>
 801a5a8:	42a0      	cmp	r0, r4
 801a5aa:	d20f      	bcs.n	801a5cc <_realloc_r+0x48>
 801a5ac:	4621      	mov	r1, r4
 801a5ae:	4638      	mov	r0, r7
 801a5b0:	f7fe fe40 	bl	8019234 <_malloc_r>
 801a5b4:	4605      	mov	r5, r0
 801a5b6:	2800      	cmp	r0, #0
 801a5b8:	d0f2      	beq.n	801a5a0 <_realloc_r+0x1c>
 801a5ba:	4631      	mov	r1, r6
 801a5bc:	4622      	mov	r2, r4
 801a5be:	f7fa ffbf 	bl	8015540 <memcpy>
 801a5c2:	4631      	mov	r1, r6
 801a5c4:	4638      	mov	r0, r7
 801a5c6:	f7fe fde5 	bl	8019194 <_free_r>
 801a5ca:	e7e9      	b.n	801a5a0 <_realloc_r+0x1c>
 801a5cc:	4635      	mov	r5, r6
 801a5ce:	e7e7      	b.n	801a5a0 <_realloc_r+0x1c>

0801a5d0 <abort>:
 801a5d0:	b508      	push	{r3, lr}
 801a5d2:	2006      	movs	r0, #6
 801a5d4:	f000 f856 	bl	801a684 <raise>
 801a5d8:	2001      	movs	r0, #1
 801a5da:	f7ec ffb7 	bl	800754c <_exit>
	...

0801a5e0 <_fstat_r>:
 801a5e0:	b538      	push	{r3, r4, r5, lr}
 801a5e2:	4d07      	ldr	r5, [pc, #28]	; (801a600 <_fstat_r+0x20>)
 801a5e4:	2300      	movs	r3, #0
 801a5e6:	4604      	mov	r4, r0
 801a5e8:	4608      	mov	r0, r1
 801a5ea:	4611      	mov	r1, r2
 801a5ec:	602b      	str	r3, [r5, #0]
 801a5ee:	f7ec ffe0 	bl	80075b2 <_fstat>
 801a5f2:	1c43      	adds	r3, r0, #1
 801a5f4:	d102      	bne.n	801a5fc <_fstat_r+0x1c>
 801a5f6:	682b      	ldr	r3, [r5, #0]
 801a5f8:	b103      	cbz	r3, 801a5fc <_fstat_r+0x1c>
 801a5fa:	6023      	str	r3, [r4, #0]
 801a5fc:	bd38      	pop	{r3, r4, r5, pc}
 801a5fe:	bf00      	nop
 801a600:	20041e60 	.word	0x20041e60

0801a604 <_isatty_r>:
 801a604:	b538      	push	{r3, r4, r5, lr}
 801a606:	4d06      	ldr	r5, [pc, #24]	; (801a620 <_isatty_r+0x1c>)
 801a608:	2300      	movs	r3, #0
 801a60a:	4604      	mov	r4, r0
 801a60c:	4608      	mov	r0, r1
 801a60e:	602b      	str	r3, [r5, #0]
 801a610:	f7ec ffdf 	bl	80075d2 <_isatty>
 801a614:	1c43      	adds	r3, r0, #1
 801a616:	d102      	bne.n	801a61e <_isatty_r+0x1a>
 801a618:	682b      	ldr	r3, [r5, #0]
 801a61a:	b103      	cbz	r3, 801a61e <_isatty_r+0x1a>
 801a61c:	6023      	str	r3, [r4, #0]
 801a61e:	bd38      	pop	{r3, r4, r5, pc}
 801a620:	20041e60 	.word	0x20041e60

0801a624 <_malloc_usable_size_r>:
 801a624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a628:	1f18      	subs	r0, r3, #4
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	bfbc      	itt	lt
 801a62e:	580b      	ldrlt	r3, [r1, r0]
 801a630:	18c0      	addlt	r0, r0, r3
 801a632:	4770      	bx	lr

0801a634 <_raise_r>:
 801a634:	291f      	cmp	r1, #31
 801a636:	b538      	push	{r3, r4, r5, lr}
 801a638:	4604      	mov	r4, r0
 801a63a:	460d      	mov	r5, r1
 801a63c:	d904      	bls.n	801a648 <_raise_r+0x14>
 801a63e:	2316      	movs	r3, #22
 801a640:	6003      	str	r3, [r0, #0]
 801a642:	f04f 30ff 	mov.w	r0, #4294967295
 801a646:	bd38      	pop	{r3, r4, r5, pc}
 801a648:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a64a:	b112      	cbz	r2, 801a652 <_raise_r+0x1e>
 801a64c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a650:	b94b      	cbnz	r3, 801a666 <_raise_r+0x32>
 801a652:	4620      	mov	r0, r4
 801a654:	f000 f830 	bl	801a6b8 <_getpid_r>
 801a658:	462a      	mov	r2, r5
 801a65a:	4601      	mov	r1, r0
 801a65c:	4620      	mov	r0, r4
 801a65e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a662:	f000 b817 	b.w	801a694 <_kill_r>
 801a666:	2b01      	cmp	r3, #1
 801a668:	d00a      	beq.n	801a680 <_raise_r+0x4c>
 801a66a:	1c59      	adds	r1, r3, #1
 801a66c:	d103      	bne.n	801a676 <_raise_r+0x42>
 801a66e:	2316      	movs	r3, #22
 801a670:	6003      	str	r3, [r0, #0]
 801a672:	2001      	movs	r0, #1
 801a674:	e7e7      	b.n	801a646 <_raise_r+0x12>
 801a676:	2400      	movs	r4, #0
 801a678:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a67c:	4628      	mov	r0, r5
 801a67e:	4798      	blx	r3
 801a680:	2000      	movs	r0, #0
 801a682:	e7e0      	b.n	801a646 <_raise_r+0x12>

0801a684 <raise>:
 801a684:	4b02      	ldr	r3, [pc, #8]	; (801a690 <raise+0xc>)
 801a686:	4601      	mov	r1, r0
 801a688:	6818      	ldr	r0, [r3, #0]
 801a68a:	f7ff bfd3 	b.w	801a634 <_raise_r>
 801a68e:	bf00      	nop
 801a690:	2000000c 	.word	0x2000000c

0801a694 <_kill_r>:
 801a694:	b538      	push	{r3, r4, r5, lr}
 801a696:	4d07      	ldr	r5, [pc, #28]	; (801a6b4 <_kill_r+0x20>)
 801a698:	2300      	movs	r3, #0
 801a69a:	4604      	mov	r4, r0
 801a69c:	4608      	mov	r0, r1
 801a69e:	4611      	mov	r1, r2
 801a6a0:	602b      	str	r3, [r5, #0]
 801a6a2:	f7ec ff43 	bl	800752c <_kill>
 801a6a6:	1c43      	adds	r3, r0, #1
 801a6a8:	d102      	bne.n	801a6b0 <_kill_r+0x1c>
 801a6aa:	682b      	ldr	r3, [r5, #0]
 801a6ac:	b103      	cbz	r3, 801a6b0 <_kill_r+0x1c>
 801a6ae:	6023      	str	r3, [r4, #0]
 801a6b0:	bd38      	pop	{r3, r4, r5, pc}
 801a6b2:	bf00      	nop
 801a6b4:	20041e60 	.word	0x20041e60

0801a6b8 <_getpid_r>:
 801a6b8:	f7ec bf30 	b.w	800751c <_getpid>

0801a6bc <_init>:
 801a6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6be:	bf00      	nop
 801a6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a6c2:	bc08      	pop	{r3}
 801a6c4:	469e      	mov	lr, r3
 801a6c6:	4770      	bx	lr

0801a6c8 <_fini>:
 801a6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6ca:	bf00      	nop
 801a6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a6ce:	bc08      	pop	{r3}
 801a6d0:	469e      	mov	lr, r3
 801a6d2:	4770      	bx	lr
