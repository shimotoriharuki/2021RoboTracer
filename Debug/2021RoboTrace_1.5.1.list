
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019a68  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c2c  08019c28  08019c28  00029c28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a854  0801a854  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a854  0801a854  0002a854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a85c  0801a85c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a85c  0801a85c  0002a85c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a864  0801a864  0002a864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a868  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00041cd8  200001e0  0801aa44  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20041eb8  0801aa44  00031eb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003e0c1  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000083e7  00000000  00000000  0006e2cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002300  00000000  00000000  000766b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002040  00000000  00000000  000789b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003720a  00000000  00000000  0007a9f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003009f  00000000  00000000  000b1c02  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00112303  00000000  00000000  000e1ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000ce  00000000  00000000  001f3fa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a6c4  00000000  00000000  001f4074  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019c10 	.word	0x08019c10

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019c10 	.word	0x08019c10

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a f894 	bl	800b104 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2003f9ac 	.word	0x2003f9ac

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a f87c 	bl	800b104 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2003f9ac 	.word	0x2003f9ac

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f009 ff11 	bl	800ae48 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 fc72 	bl	8009910 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 fc6c 	bl	8009910 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fc66 	bl	8009910 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fc60 	bl	8009910 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 fc5a 	bl	8009910 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fc54 	bl	8009910 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fc4e 	bl	8009910 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fc48 	bl	8009910 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fc42 	bl	8009910 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fc3c 	bl	8009910 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fc30 	bl	8009910 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 fc2a 	bl	8009910 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001116:	b40f      	push	{r0, r1, r2, r3}
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001122:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800112a:	4618      	mov	r0, r3
 800112c:	f016 f944 	bl	80173b8 <vsiprintf>
 8001130:	4603      	mov	r3, r0
 8001132:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001134:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001138:	2b00      	cmp	r3, #0
 800113a:	dd03      	ble.n	8001144 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ffd3 	bl	80010ea <lcd_print>
	}

	return ret;
 8001144:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001152:	b004      	add	sp, #16
 8001154:	4770      	bx	lr

08001156 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	615a      	str	r2, [r3, #20]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	619a      	str	r2, [r3, #24]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011b4:	213c      	movs	r1, #60	; 0x3c
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <_ZN7Encoder4initEv+0x30>)
 80011b8:	f00d fe44 	bl	800ee44 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011bc:	213c      	movs	r1, #60	; 0x3c
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <_ZN7Encoder4initEv+0x34>)
 80011c0:	f00d fe40 	bl	800ee44 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_ZN7Encoder4initEv+0x38>)
 80011c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <_ZN7Encoder4initEv+0x3c>)
 80011ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2003fc00 	.word	0x2003fc00
 80011e0:	2003f8e4 	.word	0x2003f8e4
 80011e4:	40010000 	.word	0x40010000
 80011e8:	40010400 	.word	0x40010400
 80011ec:	00000000 	.word	0x00000000

080011f0 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011f8:	4b69      	ldr	r3, [pc, #420]	; (80013a0 <_ZN7Encoder6updateEv+0x1b0>)
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001204:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001214:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001218:	4b64      	ldr	r3, [pc, #400]	; (80013ac <_ZN7Encoder6updateEv+0x1bc>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001224:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800122c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001234:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001238:	4a5d      	ldr	r2, [pc, #372]	; (80013b0 <_ZN7Encoder6updateEv+0x1c0>)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f7ff f99a 	bl	8000578 <__aeabi_f2d>
 8001244:	a350      	add	r3, pc, #320	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	f7ff f9ed 	bl	8000628 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4614      	mov	r4, r2
 8001254:	461d      	mov	r5, r3
 8001256:	4b57      	ldr	r3, [pc, #348]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f98c 	bl	8000578 <__aeabi_f2d>
 8001260:	a34b      	add	r3, pc, #300	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f9df 	bl	8000628 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4620      	mov	r0, r4
 8001270:	4629      	mov	r1, r5
 8001272:	f7ff f823 	bl	80002bc <__adddf3>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	f7ff fccb 	bl	8000c18 <__aeabi_d2f>
 8001282:	4602      	mov	r2, r0
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001288:	68b8      	ldr	r0, [r7, #8]
 800128a:	f7ff f975 	bl	8000578 <__aeabi_f2d>
 800128e:	a33e      	add	r3, pc, #248	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001294:	f7ff f9c8 	bl	8000628 <__aeabi_dmul>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4614      	mov	r4, r2
 800129e:	461d      	mov	r5, r3
 80012a0:	4b45      	ldr	r3, [pc, #276]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f967 	bl	8000578 <__aeabi_f2d>
 80012aa:	a339      	add	r3, pc, #228	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 80012ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b0:	f7ff f9ba 	bl	8000628 <__aeabi_dmul>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4620      	mov	r0, r4
 80012ba:	4629      	mov	r1, r5
 80012bc:	f7fe fffe 	bl	80002bc <__adddf3>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fca6 	bl	8000c18 <__aeabi_d2f>
 80012cc:	4602      	mov	r2, r0
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a39      	ldr	r2, [pc, #228]	; (80013bc <_ZN7Encoder6updateEv+0x1cc>)
 80012d8:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a35      	ldr	r2, [pc, #212]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 80012e0:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	4a34      	ldr	r2, [pc, #208]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012e8:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	ed93 7a00 	vldr	s14, [r3]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80012f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fa:	ee17 0a90 	vmov	r0, s15
 80012fe:	f7ff f93b 	bl	8000578 <__aeabi_f2d>
 8001302:	a325      	add	r3, pc, #148	; (adr r3, 8001398 <_ZN7Encoder6updateEv+0x1a8>)
 8001304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001308:	f7ff f98e 	bl	8000628 <__aeabi_dmul>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800131c:	f7ff faae 	bl	800087c <__aeabi_ddiv>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	f7ff fc76 	bl	8000c18 <__aeabi_d2f>
 800132c:	4602      	mov	r2, r0
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	ed93 7a05 	vldr	s14, [r3, #20]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	edd3 7a02 	vldr	s15, [r3, #8]
 800133e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	ed93 7a06 	vldr	s14, [r3, #24]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	edd3 7a02 	vldr	s15, [r3, #8]
 8001354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	ed93 7a07 	vldr	s14, [r3, #28]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	edd3 7a02 	vldr	s15, [r3, #8]
 800136a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	695b      	ldr	r3, [r3, #20]
 8001378:	4a11      	ldr	r2, [pc, #68]	; (80013c0 <_ZN7Encoder6updateEv+0x1d0>)
 800137a:	6013      	str	r3, [r2, #0]
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bdb0      	pop	{r4, r5, r7, pc}
 8001384:	f3af 8000 	nop.w
 8001388:	9999999a 	.word	0x9999999a
 800138c:	3fa99999 	.word	0x3fa99999
 8001390:	66666666 	.word	0x66666666
 8001394:	3fee6666 	.word	0x3fee6666
 8001398:	ce73a049 	.word	0xce73a049
 800139c:	3f77a3f6 	.word	0x3f77a3f6
 80013a0:	40010000 	.word	0x40010000
 80013a4:	47000000 	.word	0x47000000
 80013a8:	3f912547 	.word	0x3f912547
 80013ac:	40010400 	.word	0x40010400
 80013b0:	20000200 	.word	0x20000200
 80013b4:	20000208 	.word	0x20000208
 80013b8:	2000020c 	.word	0x2000020c
 80013bc:	20000204 	.word	0x20000204
 80013c0:	200001fc 	.word	0x200001fc

080013c4 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_ZN7Encoder5clearEv+0x3c>)
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_ZN7Encoder5clearEv+0x40>)
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40010000 	.word	0x40010000
 8001404:	40010400 	.word	0x40010400

08001408 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	return distance_;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	ee07 3a90 	vmov	s15, r3
}
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	ee07 3a90 	vmov	s15, r3
}
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	ee07 3a90 	vmov	s15, r3
}
 800147c:	eeb0 0a67 	vmov.f32	s0, s15
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	619a      	str	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	ee07 3a90 	vmov	s15, r3
}
 80014f0:	eeb0 0a67 	vmov.f32	s0, s15
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af02      	add	r7, sp, #8
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	4613      	mov	r3, r2
 800152a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f000 f900 	bl	8001738 <create_path>

	if(state == OVER_WRITE){
 8001538:	f897 3020 	ldrb.w	r3, [r7, #32]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d108      	bne.n	8001552 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001540:	4822      	ldr	r0, [pc, #136]	; (80015cc <sd_write_array_float+0xb0>)
 8001542:	f012 fa2d 	bl	80139a0 <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001546:	4822      	ldr	r0, [pc, #136]	; (80015d0 <sd_write_array_float+0xb4>)
 8001548:	f012 fc98 	bl	8013e7c <f_unlink>
		f_chdir("..");
 800154c:	4821      	ldr	r0, [pc, #132]	; (80015d4 <sd_write_array_float+0xb8>)
 800154e:	f012 fa27 	bl	80139a0 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001552:	f000 f90b 	bl	800176c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001556:	2300      	movs	r3, #0
 8001558:	82fb      	strh	r3, [r7, #22]
 800155a:	e028      	b.n	80015ae <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800155c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	4413      	add	r3, r2
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff f805 	bl	8000578 <__aeabi_f2d>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	e9cd 2300 	strd	r2, r3, [sp]
 8001576:	4a18      	ldr	r2, [pc, #96]	; (80015d8 <sd_write_array_float+0xbc>)
 8001578:	2180      	movs	r1, #128	; 0x80
 800157a:	4818      	ldr	r0, [pc, #96]	; (80015dc <sd_write_array_float+0xc0>)
 800157c:	f014 ffd8 	bl	8016530 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <sd_write_array_float+0xc4>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	4619      	mov	r1, r3
 8001586:	4816      	ldr	r0, [pc, #88]	; (80015e0 <sd_write_array_float+0xc4>)
 8001588:	f012 fa54 	bl	8013a34 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 800158c:	4813      	ldr	r0, [pc, #76]	; (80015dc <sd_write_array_float+0xc0>)
 800158e:	f7fe fe37 	bl	8000200 <strlen>
 8001592:	4602      	mov	r2, r0
 8001594:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <sd_write_array_float+0xc8>)
 8001596:	4911      	ldr	r1, [pc, #68]	; (80015dc <sd_write_array_float+0xc0>)
 8001598:	4811      	ldr	r0, [pc, #68]	; (80015e0 <sd_write_array_float+0xc4>)
 800159a:	f011 ffc2 	bl	8013522 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 800159e:	f000 f8ff 	bl	80017a0 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	3301      	adds	r3, #1
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	82fb      	strh	r3, [r7, #22]
 80015ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	dbd0      	blt.n	800155c <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80015ba:	4809      	ldr	r0, [pc, #36]	; (80015e0 <sd_write_array_float+0xc4>)
 80015bc:	f012 f9c6 	bl	801394c <f_close>

	return ret;
 80015c0:	7d7b      	ldrb	r3, [r7, #21]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2003e660 	.word	0x2003e660
 80015d0:	2003d520 	.word	0x2003d520
 80015d4:	08019c44 	.word	0x08019c44
 80015d8:	08019c28 	.word	0x08019c28
 80015dc:	2003e760 	.word	0x2003e760
 80015e0:	2003e7f0 	.word	0x2003e7f0
 80015e4:	2003e7e0 	.word	0x2003e7e0

080015e8 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	4613      	mov	r3, r2
 80015f6:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f000 f898 	bl	8001738 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001608:	f000 f8b0 	bl	800176c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800160c:	e019      	b.n	8001642 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800160e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	4413      	add	r3, r2
 8001618:	461a      	mov	r2, r3
 800161a:	4913      	ldr	r1, [pc, #76]	; (8001668 <sd_read_array_float+0x80>)
 800161c:	4813      	ldr	r0, [pc, #76]	; (800166c <sd_read_array_float+0x84>)
 800161e:	f014 ffdb 	bl	80165d8 <siscanf>
		i++;
 8001622:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001626:	b29b      	uxth	r3, r3
 8001628:	3301      	adds	r3, #1
 800162a:	b29b      	uxth	r3, r3
 800162c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800162e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001636:	429a      	cmp	r2, r3
 8001638:	db03      	blt.n	8001642 <sd_read_array_float+0x5a>
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	3b01      	subs	r3, #1
 800163e:	b29b      	uxth	r3, r3
 8001640:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001642:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <sd_read_array_float+0x88>)
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	4809      	ldr	r0, [pc, #36]	; (800166c <sd_read_array_float+0x84>)
 8001648:	f012 fdf6 	bl	8014238 <f_gets>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1dd      	bne.n	800160e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001652:	f000 f8a5 	bl	80017a0 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001656:	4806      	ldr	r0, [pc, #24]	; (8001670 <sd_read_array_float+0x88>)
 8001658:	f012 f978 	bl	801394c <f_close>

	return ret;
 800165c:	7d7b      	ldrb	r3, [r7, #21]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	08019c34 	.word	0x08019c34
 800166c:	2003e760 	.word	0x2003e760
 8001670:	2003e7f0 	.word	0x2003e7f0

08001674 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	4613      	mov	r3, r2
 8001682:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 f852 	bl	8001738 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001694:	f000 f86a 	bl	800176c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001698:	e019      	b.n	80016ce <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 800169a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	461a      	mov	r2, r3
 80016a6:	4913      	ldr	r1, [pc, #76]	; (80016f4 <sd_read_array_double+0x80>)
 80016a8:	4813      	ldr	r0, [pc, #76]	; (80016f8 <sd_read_array_double+0x84>)
 80016aa:	f014 ff95 	bl	80165d8 <siscanf>
		i++;
 80016ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	3301      	adds	r3, #1
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80016ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	db03      	blt.n	80016ce <sd_read_array_double+0x5a>
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <sd_read_array_double+0x88>)
 80016d0:	2180      	movs	r1, #128	; 0x80
 80016d2:	4809      	ldr	r0, [pc, #36]	; (80016f8 <sd_read_array_double+0x84>)
 80016d4:	f012 fdb0 	bl	8014238 <f_gets>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1dd      	bne.n	800169a <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80016de:	f000 f85f 	bl	80017a0 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80016e2:	4806      	ldr	r0, [pc, #24]	; (80016fc <sd_read_array_double+0x88>)
 80016e4:	f012 f932 	bl	801394c <f_close>

	return ret;
 80016e8:	7d7b      	ldrb	r3, [r7, #21]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	08019c40 	.word	0x08019c40
 80016f8:	2003e760 	.word	0x2003e760
 80016fc:	2003e7f0 	.word	0x2003e7f0

08001700 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 800170a:	2201      	movs	r2, #1
 800170c:	4908      	ldr	r1, [pc, #32]	; (8001730 <sd_mount+0x30>)
 800170e:	4809      	ldr	r0, [pc, #36]	; (8001734 <sd_mount+0x34>)
 8001710:	f011 fb94 	bl	8012e3c <f_mount>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d102      	bne.n	8001720 <sd_mount+0x20>
 800171a:	2301      	movs	r3, #1
 800171c:	71fb      	strb	r3, [r7, #7]
 800171e:	e001      	b.n	8001724 <sd_mount+0x24>
	else ret = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001724:	79fb      	ldrb	r3, [r7, #7]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	08019c50 	.word	0x08019c50
 8001734:	2003d620 	.word	0x2003d620

08001738 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	4906      	ldr	r1, [pc, #24]	; (8001760 <create_path+0x28>)
 8001746:	4807      	ldr	r0, [pc, #28]	; (8001764 <create_path+0x2c>)
 8001748:	f014 ff26 	bl	8016598 <siprintf>

	sprintf(filepath, "%s", p_file_name);
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	4904      	ldr	r1, [pc, #16]	; (8001760 <create_path+0x28>)
 8001750:	4805      	ldr	r0, [pc, #20]	; (8001768 <create_path+0x30>)
 8001752:	f014 ff21 	bl	8016598 <siprintf>

}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	08019c54 	.word	0x08019c54
 8001764:	2003e660 	.word	0x2003e660
 8001768:	2003d520 	.word	0x2003d520

0800176c <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001770:	4807      	ldr	r0, [pc, #28]	; (8001790 <fopen_folder_and_file+0x24>)
 8001772:	f012 fc45 	bl	8014000 <f_mkdir>

	f_chdir(dirpath);
 8001776:	4806      	ldr	r0, [pc, #24]	; (8001790 <fopen_folder_and_file+0x24>)
 8001778:	f012 f912 	bl	80139a0 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800177c:	2213      	movs	r2, #19
 800177e:	4905      	ldr	r1, [pc, #20]	; (8001794 <fopen_folder_and_file+0x28>)
 8001780:	4805      	ldr	r0, [pc, #20]	; (8001798 <fopen_folder_and_file+0x2c>)
 8001782:	f011 fba1 	bl	8012ec8 <f_open>

	f_chdir("..");
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <fopen_folder_and_file+0x30>)
 8001788:	f012 f90a 	bl	80139a0 <f_chdir>


}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	2003e660 	.word	0x2003e660
 8001794:	2003d520 	.word	0x2003d520
 8001798:	2003e7f0 	.word	0x2003e7f0
 800179c:	08019c44 	.word	0x08019c44

080017a0 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	e007      	b.n	80017bc <bufclear+0x1c>
		buffer[i] = '\0';
 80017ac:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <bufclear+0x30>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3301      	adds	r3, #1
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b7f      	cmp	r3, #127	; 0x7f
 80017c0:	ddf4      	ble.n	80017ac <bufclear+0xc>
	}
}
 80017c2:	bf00      	nop
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	2003e760 	.word	0x2003e760

080017d4 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80017e8:	2200      	movs	r2, #0
 80017ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ee:	480e      	ldr	r0, [pc, #56]	; (8001828 <read_byte+0x54>)
 80017f0:	f009 fb2a 	bl	800ae48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80017f4:	f107 010f 	add.w	r1, r7, #15
 80017f8:	2364      	movs	r3, #100	; 0x64
 80017fa:	2201      	movs	r2, #1
 80017fc:	480b      	ldr	r0, [pc, #44]	; (800182c <read_byte+0x58>)
 80017fe:	f00c fce7 	bl	800e1d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001802:	f107 010e 	add.w	r1, r7, #14
 8001806:	2364      	movs	r3, #100	; 0x64
 8001808:	2201      	movs	r2, #1
 800180a:	4808      	ldr	r0, [pc, #32]	; (800182c <read_byte+0x58>)
 800180c:	f00c fe14 	bl	800e438 <HAL_SPI_Receive>
	CS_SET;
 8001810:	2201      	movs	r2, #1
 8001812:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001816:	4804      	ldr	r0, [pc, #16]	; (8001828 <read_byte+0x54>)
 8001818:	f009 fb16 	bl	800ae48 <HAL_GPIO_WritePin>

	return val;
 800181c:	7bbb      	ldrb	r3, [r7, #14]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40020400 	.word	0x40020400
 800182c:	2003f88c 	.word	0x2003f88c

08001830 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	460a      	mov	r2, r1
 800183a:	71fb      	strb	r3, [r7, #7]
 800183c:	4613      	mov	r3, r2
 800183e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001846:	b2db      	uxtb	r3, r3
 8001848:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800184a:	2200      	movs	r2, #0
 800184c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001850:	480c      	ldr	r0, [pc, #48]	; (8001884 <write_byte+0x54>)
 8001852:	f009 faf9 	bl	800ae48 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001856:	f107 010f 	add.w	r1, r7, #15
 800185a:	2364      	movs	r3, #100	; 0x64
 800185c:	2201      	movs	r2, #1
 800185e:	480a      	ldr	r0, [pc, #40]	; (8001888 <write_byte+0x58>)
 8001860:	f00c fcb6 	bl	800e1d0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001864:	1db9      	adds	r1, r7, #6
 8001866:	2364      	movs	r3, #100	; 0x64
 8001868:	2201      	movs	r2, #1
 800186a:	4807      	ldr	r0, [pc, #28]	; (8001888 <write_byte+0x58>)
 800186c:	f00c fcb0 	bl	800e1d0 <HAL_SPI_Transmit>
	CS_SET;
 8001870:	2201      	movs	r2, #1
 8001872:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001876:	4803      	ldr	r0, [pc, #12]	; (8001884 <write_byte+0x54>)
 8001878:	f009 fae6 	bl	800ae48 <HAL_GPIO_WritePin>
}
 800187c:	bf00      	nop
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40020400 	.word	0x40020400
 8001888:	2003f88c 	.word	0x2003f88c

0800188c <IMU_init>:

uint16_t IMU_init() {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001896:	2000      	movs	r0, #0
 8001898:	f7ff ff9c 	bl	80017d4 <read_byte>
 800189c:	4603      	mov	r3, r0
 800189e:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 80018a0:	797b      	ldrb	r3, [r7, #5]
 80018a2:	2be0      	cmp	r3, #224	; 0xe0
 80018a4:	d119      	bne.n	80018da <IMU_init+0x4e>
		ret = 1;
 80018a6:	2301      	movs	r3, #1
 80018a8:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 80018aa:	2101      	movs	r1, #1
 80018ac:	2006      	movs	r0, #6
 80018ae:	f7ff ffbf 	bl	8001830 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 80018b2:	2110      	movs	r1, #16
 80018b4:	2003      	movs	r0, #3
 80018b6:	f7ff ffbb 	bl	8001830 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 80018ba:	2120      	movs	r1, #32
 80018bc:	207f      	movs	r0, #127	; 0x7f
 80018be:	f7ff ffb7 	bl	8001830 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 80018c2:	2106      	movs	r1, #6
 80018c4:	2001      	movs	r0, #1
 80018c6:	f7ff ffb3 	bl	8001830 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 80018ca:	2106      	movs	r1, #6
 80018cc:	2014      	movs	r0, #20
 80018ce:	f7ff ffaf 	bl	8001830 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80018d2:	2100      	movs	r1, #0
 80018d4:	207f      	movs	r0, #127	; 0x7f
 80018d6:	f7ff ffab 	bl	8001830 <write_byte>
	}
	return ret;
 80018da:	88fb      	ldrh	r3, [r7, #6]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <read_gyro_data>:

void read_gyro_data() {
 80018e4:	b598      	push	{r3, r4, r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80018e8:	2033      	movs	r0, #51	; 0x33
 80018ea:	f7ff ff73 	bl	80017d4 <read_byte>
 80018ee:	4603      	mov	r3, r0
 80018f0:	021b      	lsls	r3, r3, #8
 80018f2:	b21c      	sxth	r4, r3
 80018f4:	2034      	movs	r0, #52	; 0x34
 80018f6:	f7ff ff6d 	bl	80017d4 <read_byte>
 80018fa:	4603      	mov	r3, r0
 80018fc:	b21b      	sxth	r3, r3
 80018fe:	4323      	orrs	r3, r4
 8001900:	b21a      	sxth	r2, r3
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <read_gyro_data+0x64>)
 8001904:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001906:	2035      	movs	r0, #53	; 0x35
 8001908:	f7ff ff64 	bl	80017d4 <read_byte>
 800190c:	4603      	mov	r3, r0
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	b21c      	sxth	r4, r3
 8001912:	2036      	movs	r0, #54	; 0x36
 8001914:	f7ff ff5e 	bl	80017d4 <read_byte>
 8001918:	4603      	mov	r3, r0
 800191a:	b21b      	sxth	r3, r3
 800191c:	4323      	orrs	r3, r4
 800191e:	b21a      	sxth	r2, r3
 8001920:	4b0a      	ldr	r3, [pc, #40]	; (800194c <read_gyro_data+0x68>)
 8001922:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001924:	2037      	movs	r0, #55	; 0x37
 8001926:	f7ff ff55 	bl	80017d4 <read_byte>
 800192a:	4603      	mov	r3, r0
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	b21c      	sxth	r4, r3
 8001930:	2038      	movs	r0, #56	; 0x38
 8001932:	f7ff ff4f 	bl	80017d4 <read_byte>
 8001936:	4603      	mov	r3, r0
 8001938:	b21b      	sxth	r3, r3
 800193a:	4323      	orrs	r3, r4
 800193c:	b21a      	sxth	r2, r3
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <read_gyro_data+0x6c>)
 8001940:	801a      	strh	r2, [r3, #0]
}
 8001942:	bf00      	nop
 8001944:	bd98      	pop	{r3, r4, r7, pc}
 8001946:	bf00      	nop
 8001948:	2003f828 	.word	0x2003f828
 800194c:	2003f826 	.word	0x2003f826
 8001950:	2003f820 	.word	0x2003f820

08001954 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	801a      	strh	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	805a      	strh	r2, [r3, #2]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	809a      	strh	r2, [r3, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	80da      	strh	r2, [r3, #6]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	811a      	strh	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	815a      	strh	r2, [r3, #10]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	60da      	str	r2, [r3, #12]
{

}
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 80019a0:	f7ff ff74 	bl	800188c <IMU_init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 80019a8:	f7ff fb7a 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80019ac:	2100      	movs	r1, #0
 80019ae:	2000      	movs	r0, #0
 80019b0:	f7ff fb86 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 80019b4:	4809      	ldr	r0, [pc, #36]	; (80019dc <_ZN3IMU4initEv+0x44>)
 80019b6:	f7ff fbae 	bl	8001116 <lcd_printf>
	lcd_locate(0,1);
 80019ba:	2101      	movs	r1, #1
 80019bc:	2000      	movs	r0, #0
 80019be:	f7ff fb7f 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 80019c2:	89fb      	ldrh	r3, [r7, #14]
 80019c4:	4619      	mov	r1, r3
 80019c6:	4806      	ldr	r0, [pc, #24]	; (80019e0 <_ZN3IMU4initEv+0x48>)
 80019c8:	f7ff fba5 	bl	8001116 <lcd_printf>

	HAL_Delay(500);
 80019cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019d0:	f007 ff9e 	bl	8009910 <HAL_Delay>

}
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	08019c58 	.word	0x08019c58
 80019e0:	08019c64 	.word	0x08019c64
 80019e4:	00000000 	.word	0x00000000

080019e8 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 80019f0:	f7ff ff78 	bl	80018e4 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 80019f4:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <_ZN3IMU12updateValuesEv+0xa0>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	b21a      	sxth	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 80019fe:	4b23      	ldr	r3, [pc, #140]	; (8001a8c <_ZN3IMU12updateValuesEv+0xa4>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	b21a      	sxth	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001a08:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <_ZN3IMU12updateValuesEv+0xa8>)
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	b21a      	sxth	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fd9b 	bl	8000554 <__aeabi_i2d>
 8001a1e:	a316      	add	r3, pc, #88	; (adr r3, 8001a78 <_ZN3IMU12updateValuesEv+0x90>)
 8001a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a24:	f7fe fe00 	bl	8000628 <__aeabi_dmul>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4614      	mov	r4, r2
 8001a2e:	461d      	mov	r5, r3
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <_ZN3IMU12updateValuesEv+0xac>)
 8001a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7fe fd8c 	bl	8000554 <__aeabi_i2d>
 8001a3c:	a310      	add	r3, pc, #64	; (adr r3, 8001a80 <_ZN3IMU12updateValuesEv+0x98>)
 8001a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a42:	f7fe fdf1 	bl	8000628 <__aeabi_dmul>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	4629      	mov	r1, r5
 8001a4e:	f7fe fc35 	bl	80002bc <__adddf3>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4610      	mov	r0, r2
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f7ff f895 	bl	8000b88 <__aeabi_d2iz>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	b21a      	sxth	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <_ZN3IMU12updateValuesEv+0xac>)
 8001a6e:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bdb0      	pop	{r4, r5, r7, pc}
 8001a78:	eb851eb8 	.word	0xeb851eb8
 8001a7c:	3f9eb851 	.word	0x3f9eb851
 8001a80:	70a3d70a 	.word	0x70a3d70a
 8001a84:	3fef0a3d 	.word	0x3fef0a3d
 8001a88:	2003f828 	.word	0x2003f828
 8001a8c:	2003f826 	.word	0x2003f826
 8001a90:	2003f820 	.word	0x2003f820
 8001a94:	20000210 	.word	0x20000210

08001a98 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001a98:	b5b0      	push	{r4, r5, r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001aa6:	ee07 3a90 	vmov	s15, r3
 8001aaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab8:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f7fe fd5b 	bl	8000578 <__aeabi_f2d>
 8001ac2:	a316      	add	r3, pc, #88	; (adr r3, 8001b1c <_ZN3IMU8getOmegaEv+0x84>)
 8001ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac8:	f7fe fed8 	bl	800087c <__aeabi_ddiv>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4614      	mov	r4, r2
 8001ad2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001ad6:	a313      	add	r3, pc, #76	; (adr r3, 8001b24 <_ZN3IMU8getOmegaEv+0x8c>)
 8001ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001adc:	4620      	mov	r0, r4
 8001ade:	4629      	mov	r1, r5
 8001ae0:	f7fe fda2 	bl	8000628 <__aeabi_dmul>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <_ZN3IMU8getOmegaEv+0x80>)
 8001af2:	f7fe fec3 	bl	800087c <__aeabi_ddiv>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	f7ff f88b 	bl	8000c18 <__aeabi_d2f>
 8001b02:	4603      	mov	r3, r0
 8001b04:	ee07 3a90 	vmov	s15, r3
}
 8001b08:	eeb0 0a67 	vmov.f32	s0, s15
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bdb0      	pop	{r4, r5, r7, pc}
 8001b12:	bf00      	nop
 8001b14:	f3af 8000 	nop.w
 8001b18:	40668000 	.word	0x40668000
 8001b1c:	66666666 	.word	0x66666666
 8001b20:	40306666 	.word	0x40306666
 8001b24:	54411744 	.word	0x54411744
 8001b28:	400921fb 	.word	0x400921fb

08001b2c <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001b2c:	b5b0      	push	{r4, r5, r7, lr}
 8001b2e:	b08a      	sub	sp, #40	; 0x28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001b34:	466b      	mov	r3, sp
 8001b36:	461d      	mov	r5, r3
	HAL_Delay(1000);
 8001b38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b3c:	f007 fee8 	bl	8009910 <HAL_Delay>
	lcd_clear();
 8001b40:	f7ff faae 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001b44:	2100      	movs	r1, #0
 8001b46:	2000      	movs	r0, #0
 8001b48:	f7ff faba 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001b4c:	4840      	ldr	r0, [pc, #256]	; (8001c50 <_ZN3IMU11calibrationEv+0x124>)
 8001b4e:	f7ff fae2 	bl	8001116 <lcd_printf>
	lcd_locate(0,1);
 8001b52:	2101      	movs	r1, #1
 8001b54:	2000      	movs	r0, #0
 8001b56:	f7ff fab3 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001b5a:	483e      	ldr	r0, [pc, #248]	; (8001c54 <_ZN3IMU11calibrationEv+0x128>)
 8001b5c:	f7ff fadb 	bl	8001116 <lcd_printf>
	int16_t num = 2000;
 8001b60:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b64:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001b66:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b6a:	1e5c      	subs	r4, r3, #1
 8001b6c:	61bc      	str	r4, [r7, #24]
 8001b6e:	4623      	mov	r3, r4
 8001b70:	3301      	adds	r3, #1
 8001b72:	4618      	mov	r0, r3
 8001b74:	f04f 0100 	mov.w	r1, #0
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	014b      	lsls	r3, r1, #5
 8001b82:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b86:	0142      	lsls	r2, r0, #5
 8001b88:	4623      	mov	r3, r4
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f04f 0100 	mov.w	r1, #0
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	014b      	lsls	r3, r1, #5
 8001b9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ba0:	0142      	lsls	r2, r0, #5
 8001ba2:	4623      	mov	r3, r4
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	3307      	adds	r3, #7
 8001baa:	08db      	lsrs	r3, r3, #3
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	ebad 0d03 	sub.w	sp, sp, r3
 8001bb2:	466b      	mov	r3, sp
 8001bb4:	3303      	adds	r3, #3
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	83fb      	strh	r3, [r7, #30]
 8001bc0:	8bfa      	ldrh	r2, [r7, #30]
 8001bc2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	da13      	bge.n	8001bf2 <_ZN3IMU11calibrationEv+0xc6>
		zg_vals[i] = float(zg_);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001bd0:	8bfb      	ldrh	r3, [r7, #30]
 8001bd2:	ee07 2a90 	vmov	s15, r2
 8001bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001be4:	2002      	movs	r0, #2
 8001be6:	f007 fe93 	bl	8009910 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001bea:	8bfb      	ldrh	r3, [r7, #30]
 8001bec:	3301      	adds	r3, #1
 8001bee:	83fb      	strh	r3, [r7, #30]
 8001bf0:	e7e6      	b.n	8001bc0 <_ZN3IMU11calibrationEv+0x94>
	for(const auto &v : zg_vals){
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfa:	4623      	mov	r3, r4
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4413      	add	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d00e      	beq.n	8001c2c <_ZN3IMU11calibrationEv+0x100>
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	60bb      	str	r3, [r7, #8]
		sum += v;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	edd3 7a00 	vldr	s15, [r3]
 8001c18:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c20:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	3304      	adds	r3, #4
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
 8001c2a:	e7ec      	b.n	8001c06 <_ZN3IMU11calibrationEv+0xda>
	offset_ = sum / num;
 8001c2c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c38:	edd7 6a08 	vldr	s13, [r7, #32]
 8001c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	edc3 7a03 	vstr	s15, [r3, #12]
 8001c46:	46ad      	mov	sp, r5
}
 8001c48:	bf00      	nop
 8001c4a:	3728      	adds	r7, #40	; 0x28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c50:	08019c68 	.word	0x08019c68
 8001c54:	08019c74 	.word	0x08019c74

08001c58 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af02      	add	r7, sp, #8
 8001c5e:	4603      	mov	r3, r0
 8001c60:	460a      	mov	r2, r1
 8001c62:	71fb      	strb	r3, [r7, #7]
 8001c64:	4613      	mov	r3, r2
 8001c66:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001c68:	79bb      	ldrb	r3, [r7, #6]
 8001c6a:	b299      	uxth	r1, r3
 8001c6c:	1dfa      	adds	r2, r7, #7
 8001c6e:	2364      	movs	r3, #100	; 0x64
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	2301      	movs	r3, #1
 8001c74:	480c      	ldr	r0, [pc, #48]	; (8001ca8 <INA260_read+0x50>)
 8001c76:	f009 fa45 	bl	800b104 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001c7a:	79bb      	ldrb	r3, [r7, #6]
 8001c7c:	b299      	uxth	r1, r3
 8001c7e:	f107 020c 	add.w	r2, r7, #12
 8001c82:	2364      	movs	r3, #100	; 0x64
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	2302      	movs	r3, #2
 8001c88:	4807      	ldr	r0, [pc, #28]	; (8001ca8 <INA260_read+0x50>)
 8001c8a:	f009 fb39 	bl	800b300 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001c8e:	7b3b      	ldrb	r3, [r7, #12]
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	b21a      	sxth	r2, r3
 8001c94:	7b7b      	ldrb	r3, [r7, #13]
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001c9e:	89fb      	ldrh	r3, [r7, #14]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	2003fa40 	.word	0x2003fa40

08001cac <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af02      	add	r7, sp, #8
 8001cb2:	4604      	mov	r4, r0
 8001cb4:	4608      	mov	r0, r1
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4623      	mov	r3, r4
 8001cbc:	71fb      	strb	r3, [r7, #7]
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71bb      	strb	r3, [r7, #6]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	717b      	strb	r3, [r7, #5]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	733b      	strb	r3, [r7, #12]
 8001cce:	79bb      	ldrb	r3, [r7, #6]
 8001cd0:	737b      	strb	r3, [r7, #13]
 8001cd2:	797b      	ldrb	r3, [r7, #5]
 8001cd4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001cd6:	793b      	ldrb	r3, [r7, #4]
 8001cd8:	b299      	uxth	r1, r3
 8001cda:	f107 020c 	add.w	r2, r7, #12
 8001cde:	2364      	movs	r3, #100	; 0x64
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	4803      	ldr	r0, [pc, #12]	; (8001cf4 <INA260_write+0x48>)
 8001ce6:	f009 fa0d 	bl	800b104 <HAL_I2C_Master_Transmit>
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd90      	pop	{r4, r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	2003fa40 	.word	0x2003fa40

08001cf8 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
 8001d02:	460b      	mov	r3, r1
 8001d04:	71bb      	strb	r3, [r7, #6]
 8001d06:	4613      	mov	r3, r2
 8001d08:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001d0a:	797b      	ldrb	r3, [r7, #5]
 8001d0c:	79ba      	ldrb	r2, [r7, #6]
 8001d0e:	79f9      	ldrb	r1, [r7, #7]
 8001d10:	2000      	movs	r0, #0
 8001d12:	f7ff ffcb 	bl	8001cac <INA260_write>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	4603      	mov	r3, r0
 8001d26:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	21df      	movs	r1, #223	; 0xdf
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f7ff ffe2 	bl	8001cf8 <setConfig>
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
{

}
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001d60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d64:	482a      	ldr	r0, [pc, #168]	; (8001e10 <_ZN8JoyStick8getValueEv+0xbc>)
 8001d66:	f009 f857 	bl	800ae18 <HAL_GPIO_ReadPin>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	bf0c      	ite	eq
 8001d70:	2301      	moveq	r3, #1
 8001d72:	2300      	movne	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <_ZN8JoyStick8getValueEv+0x2e>
 8001d7a:	89fb      	ldrh	r3, [r7, #14]
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001d82:	2101      	movs	r1, #1
 8001d84:	4823      	ldr	r0, [pc, #140]	; (8001e14 <_ZN8JoyStick8getValueEv+0xc0>)
 8001d86:	f009 f847 	bl	800ae18 <HAL_GPIO_ReadPin>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	bf0c      	ite	eq
 8001d90:	2301      	moveq	r3, #1
 8001d92:	2300      	movne	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <_ZN8JoyStick8getValueEv+0x4e>
 8001d9a:	89fb      	ldrh	r3, [r7, #14]
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001da2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001da6:	481a      	ldr	r0, [pc, #104]	; (8001e10 <_ZN8JoyStick8getValueEv+0xbc>)
 8001da8:	f009 f836 	bl	800ae18 <HAL_GPIO_ReadPin>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	bf0c      	ite	eq
 8001db2:	2301      	moveq	r3, #1
 8001db4:	2300      	movne	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <_ZN8JoyStick8getValueEv+0x70>
 8001dbc:	89fb      	ldrh	r3, [r7, #14]
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001dc4:	2104      	movs	r1, #4
 8001dc6:	4814      	ldr	r0, [pc, #80]	; (8001e18 <_ZN8JoyStick8getValueEv+0xc4>)
 8001dc8:	f009 f826 	bl	800ae18 <HAL_GPIO_ReadPin>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	bf0c      	ite	eq
 8001dd2:	2301      	moveq	r3, #1
 8001dd4:	2300      	movne	r3, #0
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <_ZN8JoyStick8getValueEv+0x90>
 8001ddc:	89fb      	ldrh	r3, [r7, #14]
 8001dde:	f043 0308 	orr.w	r3, r3, #8
 8001de2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001de4:	2180      	movs	r1, #128	; 0x80
 8001de6:	480a      	ldr	r0, [pc, #40]	; (8001e10 <_ZN8JoyStick8getValueEv+0xbc>)
 8001de8:	f009 f816 	bl	800ae18 <HAL_GPIO_ReadPin>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	bf0c      	ite	eq
 8001df2:	2301      	moveq	r3, #1
 8001df4:	2300      	movne	r3, #0
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <_ZN8JoyStick8getValueEv+0xb0>
 8001dfc:	89fb      	ldrh	r3, [r7, #14]
 8001dfe:	f043 0310 	orr.w	r3, r3, #16
 8001e02:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001e04:	89fb      	ldrh	r3, [r7, #14]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40020c00 	.word	0x40020c00
 8001e18:	40020400 	.word	0x40020400

08001e1c <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	2b52      	cmp	r3, #82	; 0x52
 8001e2c:	d112      	bne.n	8001e54 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e34:	4856      	ldr	r0, [pc, #344]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001e36:	f009 f807 	bl	800ae48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e40:	4853      	ldr	r0, [pc, #332]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001e42:	f009 f801 	bl	800ae48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001e46:	2201      	movs	r2, #1
 8001e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e4c:	4850      	ldr	r0, [pc, #320]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001e4e:	f008 fffb 	bl	800ae48 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001e52:	e098      	b.n	8001f86 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	2b47      	cmp	r3, #71	; 0x47
 8001e58:	d112      	bne.n	8001e80 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e60:	484b      	ldr	r0, [pc, #300]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001e62:	f008 fff1 	bl	800ae48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001e66:	2200      	movs	r2, #0
 8001e68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e6c:	4848      	ldr	r0, [pc, #288]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001e6e:	f008 ffeb 	bl	800ae48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001e72:	2201      	movs	r2, #1
 8001e74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e78:	4845      	ldr	r0, [pc, #276]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001e7a:	f008 ffe5 	bl	800ae48 <HAL_GPIO_WritePin>
}
 8001e7e:	e082      	b.n	8001f86 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	2b42      	cmp	r3, #66	; 0x42
 8001e84:	d112      	bne.n	8001eac <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001e86:	2201      	movs	r2, #1
 8001e88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e8c:	4840      	ldr	r0, [pc, #256]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001e8e:	f008 ffdb 	bl	800ae48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001e92:	2201      	movs	r2, #1
 8001e94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e98:	483d      	ldr	r0, [pc, #244]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001e9a:	f008 ffd5 	bl	800ae48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ea4:	483a      	ldr	r0, [pc, #232]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001ea6:	f008 ffcf 	bl	800ae48 <HAL_GPIO_WritePin>
}
 8001eaa:	e06c      	b.n	8001f86 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	2b43      	cmp	r3, #67	; 0x43
 8001eb0:	d112      	bne.n	8001ed8 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eb8:	4835      	ldr	r0, [pc, #212]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001eba:	f008 ffc5 	bl	800ae48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ec4:	4832      	ldr	r0, [pc, #200]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001ec6:	f008 ffbf 	bl	800ae48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ed0:	482f      	ldr	r0, [pc, #188]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001ed2:	f008 ffb9 	bl	800ae48 <HAL_GPIO_WritePin>
}
 8001ed6:	e056      	b.n	8001f86 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	2b4d      	cmp	r3, #77	; 0x4d
 8001edc:	d112      	bne.n	8001f04 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee4:	482a      	ldr	r0, [pc, #168]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001ee6:	f008 ffaf 	bl	800ae48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ef0:	4827      	ldr	r0, [pc, #156]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001ef2:	f008 ffa9 	bl	800ae48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001efc:	4824      	ldr	r0, [pc, #144]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001efe:	f008 ffa3 	bl	800ae48 <HAL_GPIO_WritePin>
}
 8001f02:	e040      	b.n	8001f86 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	2b59      	cmp	r3, #89	; 0x59
 8001f08:	d112      	bne.n	8001f30 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f10:	481f      	ldr	r0, [pc, #124]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001f12:	f008 ff99 	bl	800ae48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f16:	2200      	movs	r2, #0
 8001f18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f1c:	481c      	ldr	r0, [pc, #112]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001f1e:	f008 ff93 	bl	800ae48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f22:	2201      	movs	r2, #1
 8001f24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f28:	4819      	ldr	r0, [pc, #100]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001f2a:	f008 ff8d 	bl	800ae48 <HAL_GPIO_WritePin>
}
 8001f2e:	e02a      	b.n	8001f86 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	2b57      	cmp	r3, #87	; 0x57
 8001f34:	d112      	bne.n	8001f5c <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f3c:	4814      	ldr	r0, [pc, #80]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001f3e:	f008 ff83 	bl	800ae48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f42:	2200      	movs	r2, #0
 8001f44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f48:	4811      	ldr	r0, [pc, #68]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001f4a:	f008 ff7d 	bl	800ae48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f54:	480e      	ldr	r0, [pc, #56]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001f56:	f008 ff77 	bl	800ae48 <HAL_GPIO_WritePin>
}
 8001f5a:	e014      	b.n	8001f86 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	2b7e      	cmp	r3, #126	; 0x7e
 8001f60:	d111      	bne.n	8001f86 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f62:	2201      	movs	r2, #1
 8001f64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f68:	4809      	ldr	r0, [pc, #36]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001f6a:	f008 ff6d 	bl	800ae48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f74:	4806      	ldr	r0, [pc, #24]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001f76:	f008 ff67 	bl	800ae48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f80:	4803      	ldr	r0, [pc, #12]	; (8001f90 <_ZN3LED9fullColorEc+0x174>)
 8001f82:	f008 ff61 	bl	800ae48 <HAL_GPIO_WritePin>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40020000 	.word	0x40020000

08001f94 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	70fb      	strb	r3, [r7, #3]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8001fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d106      	bne.n	8001fba <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001fac:	2201      	movs	r2, #1
 8001fae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fb2:	4813      	ldr	r0, [pc, #76]	; (8002000 <_ZN3LED2LREaa+0x6c>)
 8001fb4:	f008 ff48 	bl	800ae48 <HAL_GPIO_WritePin>
 8001fb8:	e009      	b.n	8001fce <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8001fba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d105      	bne.n	8001fce <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fc8:	480d      	ldr	r0, [pc, #52]	; (8002000 <_ZN3LED2LREaa+0x6c>)
 8001fca:	f008 ff3d 	bl	800ae48 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8001fce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d106      	bne.n	8001fe4 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fdc:	4808      	ldr	r0, [pc, #32]	; (8002000 <_ZN3LED2LREaa+0x6c>)
 8001fde:	f008 ff33 	bl	800ae48 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 8001fe2:	e009      	b.n	8001ff8 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8001fe4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d105      	bne.n	8001ff8 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001fec:	2200      	movs	r2, #0
 8001fee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ff2:	4803      	ldr	r0, [pc, #12]	; (8002000 <_ZN3LED2LREaa+0x6c>)
 8001ff4:	f008 ff28 	bl	800ae48 <HAL_GPIO_WritePin>
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40020000 	.word	0x40020000

08002004 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 8002004:	b580      	push	{r7, lr}
 8002006:	b092      	sub	sp, #72	; 0x48
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fe92 	bl	8001d3c <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	637b      	str	r3, [r7, #52]	; 0x34
 800201c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201e:	647b      	str	r3, [r7, #68]	; 0x44
 8002020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002022:	331c      	adds	r3, #28
 8002024:	633b      	str	r3, [r7, #48]	; 0x30
 8002026:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202a:	429a      	cmp	r2, r3
 800202c:	d008      	beq.n	8002040 <_ZN10LineSensorC1Ev+0x3c>
 800202e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8002032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002034:	2200      	movs	r2, #0
 8002036:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800203a:	3302      	adds	r3, #2
 800203c:	647b      	str	r3, [r7, #68]	; 0x44
 800203e:	e7f2      	b.n	8002026 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28
 8002048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204a:	643b      	str	r3, [r7, #64]	; 0x40
 800204c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204e:	3338      	adds	r3, #56	; 0x38
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
 8002052:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	429a      	cmp	r2, r3
 8002058:	d009      	beq.n	800206e <_ZN10LineSensorC1Ev+0x6a>
 800205a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800205c:	623b      	str	r3, [r7, #32]
		s = 0;
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002068:	3304      	adds	r3, #4
 800206a:	643b      	str	r3, [r7, #64]	; 0x40
 800206c:	e7f1      	b.n	8002052 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	63fb      	str	r3, [r7, #60]	; 0x3c
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3338      	adds	r3, #56	; 0x38
 800207e:	61bb      	str	r3, [r7, #24]
 8002080:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	429a      	cmp	r2, r3
 8002086:	d009      	beq.n	800209c <_ZN10LineSensorC1Ev+0x98>
 8002088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800208a:	617b      	str	r3, [r7, #20]
		m = 0;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002096:	3304      	adds	r3, #4
 8002098:	63fb      	str	r3, [r7, #60]	; 0x3c
 800209a:	e7f1      	b.n	8002080 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	3338      	adds	r3, #56	; 0x38
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d009      	beq.n	80020ca <_ZN10LineSensorC1Ev+0xc6>
 80020b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b8:	60bb      	str	r3, [r7, #8]
		s = 1;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020c0:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80020c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c4:	3304      	adds	r3, #4
 80020c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80020c8:	e7f1      	b.n	80020ae <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4618      	mov	r0, r3
 80020ce:	3748      	adds	r7, #72	; 0x48
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	220e      	movs	r2, #14
 80020e0:	4619      	mov	r1, r3
 80020e2:	4803      	ldr	r0, [pc, #12]	; (80020f0 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80020e4:	f007 fc7c 	bl	80099e0 <HAL_ADC_Start_DMA>
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	2003f964 	.word	0x2003f964

080020f4 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b0d      	cmp	r3, #13
 8002104:	dc2f      	bgt.n	8002166 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3392      	adds	r3, #146	; 0x92
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	3304      	adds	r3, #4
 8002112:	ed93 7a00 	vldr	s14, [r3]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800211e:	ee07 3a90 	vmov	s15, r3
 8002122:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	33a0      	adds	r3, #160	; 0xa0
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	3304      	adds	r3, #4
 8002132:	edd3 7a00 	vldr	s15, [r3]
 8002136:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800213a:	4b14      	ldr	r3, [pc, #80]	; (800218c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	4619      	mov	r1, r3
 8002140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	460b      	mov	r3, r1
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	1a5b      	subs	r3, r3, r1
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	68f9      	ldr	r1, [r7, #12]
 8002150:	440b      	add	r3, r1
 8002152:	3306      	adds	r3, #6
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	3304      	adds	r3, #4
 800215a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3301      	adds	r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	e7cc      	b.n	8002100 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	3301      	adds	r3, #1
 800216c:	b2da      	uxtb	r2, r3
 800216e:	4b07      	ldr	r3, [pc, #28]	; (800218c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002170:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b09      	cmp	r3, #9
 8002178:	d902      	bls.n	8002180 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800217a:	4b04      	ldr	r3, [pc, #16]	; (800218c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]


}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	2000021c 	.word	0x2000021c

08002190 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002190:	b5b0      	push	{r4, r5, r7, lr}
 8002192:	b08e      	sub	sp, #56	; 0x38
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002198:	2300      	movs	r3, #0
 800219a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800219e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80021a2:	2b0d      	cmp	r3, #13
 80021a4:	f200 80b6 	bhi.w	8002314 <_ZN10LineSensor18updateSensorValuesEv+0x184>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80021a8:	2300      	movs	r3, #0
 80021aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80021ae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80021b2:	2b09      	cmp	r3, #9
 80021b4:	d81c      	bhi.n	80021f0 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80021b6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80021ba:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80021be:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4423      	add	r3, r4
 80021ce:	3306      	adds	r3, #6
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4403      	add	r3, r0
 80021d4:	3304      	adds	r3, #4
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	008b      	lsls	r3, r1, #2
 80021da:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80021de:	440b      	add	r3, r1
 80021e0:	3b30      	subs	r3, #48	; 0x30
 80021e2:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80021e4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80021e8:	3301      	adds	r3, #1
 80021ea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80021ee:	e7de      	b.n	80021ae <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80021f0:	2300      	movs	r3, #0
 80021f2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80021f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021fa:	2b09      	cmp	r3, #9
 80021fc:	d84d      	bhi.n	800229a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80021fe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002202:	3301      	adds	r3, #1
 8002204:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002208:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800220c:	2b09      	cmp	r3, #9
 800220e:	d83e      	bhi.n	800228e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002210:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800221a:	4413      	add	r3, r2
 800221c:	3b30      	subs	r3, #48	; 0x30
 800221e:	ed93 7a00 	vldr	s14, [r3]
 8002222:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800222c:	4413      	add	r3, r2
 800222e:	3b30      	subs	r3, #48	; 0x30
 8002230:	edd3 7a00 	vldr	s15, [r3]
 8002234:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223c:	d521      	bpl.n	8002282 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800223e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002248:	4413      	add	r3, r2
 800224a:	3b30      	subs	r3, #48	; 0x30
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002250:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002254:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002258:	0092      	lsls	r2, r2, #2
 800225a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800225e:	440a      	add	r2, r1
 8002260:	3a30      	subs	r2, #48	; 0x30
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800226a:	440b      	add	r3, r1
 800226c:	3b30      	subs	r3, #48	; 0x30
 800226e:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002270:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800227a:	4413      	add	r3, r2
 800227c:	3b30      	subs	r3, #48	; 0x30
 800227e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002280:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002282:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002286:	3301      	adds	r3, #1
 8002288:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800228c:	e7bc      	b.n	8002208 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800228e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002292:	3301      	adds	r3, #1
 8002294:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002298:	e7ad      	b.n	80021f6 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe f96b 	bl	8000578 <__aeabi_f2d>
 80022a2:	a328      	add	r3, pc, #160	; (adr r3, 8002344 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 80022a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a8:	f7fe f9be 	bl	8000628 <__aeabi_dmul>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4614      	mov	r4, r2
 80022b2:	461d      	mov	r5, r3
 80022b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022b8:	4a1f      	ldr	r2, [pc, #124]	; (8002338 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe f959 	bl	8000578 <__aeabi_f2d>
 80022c6:	a31a      	add	r3, pc, #104	; (adr r3, 8002330 <_ZN10LineSensor18updateSensorValuesEv+0x1a0>)
 80022c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022cc:	f7fe f9ac 	bl	8000628 <__aeabi_dmul>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4620      	mov	r0, r4
 80022d6:	4629      	mov	r1, r5
 80022d8:	f7fd fff0 	bl	80002bc <__adddf3>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80022e4:	4610      	mov	r0, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	f7fe fc96 	bl	8000c18 <__aeabi_d2f>
 80022ec:	4601      	mov	r1, r0
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 80022fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	490d      	ldr	r1, [pc, #52]	; (8002338 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002308:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800230c:	3301      	adds	r3, #1
 800230e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002312:	e744      	b.n	800219e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800231a:	4a08      	ldr	r2, [pc, #32]	; (800233c <_ZN10LineSensor18updateSensorValuesEv+0x1ac>)
 800231c:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002324:	4a06      	ldr	r2, [pc, #24]	; (8002340 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 8002326:	6013      	str	r3, [r2, #0]
}
 8002328:	bf00      	nop
 800232a:	3738      	adds	r7, #56	; 0x38
 800232c:	46bd      	mov	sp, r7
 800232e:	bdb0      	pop	{r4, r5, r7, pc}
 8002330:	66666666 	.word	0x66666666
 8002334:	3fee6666 	.word	0x3fee6666
 8002338:	20000220 	.word	0x20000220
 800233c:	20000214 	.word	0x20000214
 8002340:	20000218 	.word	0x20000218
 8002344:	9999999a 	.word	0x9999999a
 8002348:	3fa99999 	.word	0x3fa99999

0800234c <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b0a0      	sub	sp, #128	; 0x80
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8002354:	2064      	movs	r0, #100	; 0x64
 8002356:	f007 fadb 	bl	8009910 <HAL_Delay>

	lcd_clear();
 800235a:	f7fe fea1 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800235e:	2100      	movs	r1, #0
 8002360:	2000      	movs	r0, #0
 8002362:	f7fe fead 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 8002366:	4886      	ldr	r0, [pc, #536]	; (8002580 <_ZN10LineSensor11calibrationEv+0x234>)
 8002368:	f7fe fed5 	bl	8001116 <lcd_printf>
	lcd_locate(0,1);
 800236c:	2101      	movs	r1, #1
 800236e:	2000      	movs	r0, #0
 8002370:	f7fe fea6 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8002374:	4883      	ldr	r0, [pc, #524]	; (8002584 <_ZN10LineSensor11calibrationEv+0x238>)
 8002376:	f7fe fece 	bl	8001116 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800237a:	2300      	movs	r3, #0
 800237c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002380:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002384:	2b0d      	cmp	r3, #13
 8002386:	d823      	bhi.n	80023d0 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002388:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800238c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	32b0      	adds	r2, #176	; 0xb0
 8002394:	0092      	lsls	r2, r2, #2
 8002396:	440a      	add	r2, r1
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80023a0:	440b      	add	r3, r1
 80023a2:	3b40      	subs	r3, #64	; 0x40
 80023a4:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 80023a6:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80023aa:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	32b0      	adds	r2, #176	; 0xb0
 80023b2:	0092      	lsls	r2, r2, #2
 80023b4:	440a      	add	r2, r1
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80023be:	440b      	add	r3, r1
 80023c0:	3b78      	subs	r3, #120	; 0x78
 80023c2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023c4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80023c8:	3301      	adds	r3, #1
 80023ca:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80023ce:	e7d7      	b.n	8002380 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fcbc 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b02      	cmp	r3, #2
 80023e0:	bf14      	ite	ne
 80023e2:	2301      	movne	r3, #1
 80023e4:	2300      	moveq	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d079      	beq.n	80024e0 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80023f2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80023f6:	2b0d      	cmp	r3, #13
 80023f8:	d850      	bhi.n	800249c <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80023fa:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002404:	4413      	add	r3, r2
 8002406:	3b40      	subs	r3, #64	; 0x40
 8002408:	ed93 7a00 	vldr	s14, [r3]
 800240c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	33b0      	adds	r3, #176	; 0xb0
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	edd3 7a00 	vldr	s15, [r3]
 800241c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002424:	d50f      	bpl.n	8002446 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 8002426:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800242a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	32b0      	adds	r2, #176	; 0xb0
 8002432:	0092      	lsls	r2, r2, #2
 8002434:	440a      	add	r2, r1
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800243e:	440b      	add	r3, r1
 8002440:	3b40      	subs	r3, #64	; 0x40
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	e024      	b.n	8002490 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 8002446:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002450:	4413      	add	r3, r2
 8002452:	3b78      	subs	r3, #120	; 0x78
 8002454:	ed93 7a00 	vldr	s14, [r3]
 8002458:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	33b0      	adds	r3, #176	; 0xb0
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	edd3 7a00 	vldr	s15, [r3]
 8002468:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800246c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002470:	dd0e      	ble.n	8002490 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 8002472:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002476:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	32b0      	adds	r2, #176	; 0xb0
 800247e:	0092      	lsls	r2, r2, #2
 8002480:	440a      	add	r2, r1
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800248a:	440b      	add	r3, r1
 800248c:	3b78      	subs	r3, #120	; 0x78
 800248e:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002490:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002494:	3301      	adds	r3, #1
 8002496:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800249a:	e7aa      	b.n	80023f2 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f203 23be 	addw	r3, r3, #702	; 0x2be
 80024a2:	4618      	mov	r0, r3
 80024a4:	f002 fed2 	bl	800524c <_ZN12RotarySwitch8getValueEv>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	bf0c      	ite	eq
 80024ae:	2301      	moveq	r3, #1
 80024b0:	2300      	movne	r3, #0
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d009      	beq.n	80024cc <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80024be:	2201      	movs	r2, #1
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fd65 	bl	8001f94 <_ZN3LED2LREaa>
 80024ca:	e781      	b.n	80023d0 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80024d2:	2200      	movs	r2, #0
 80024d4:	f04f 31ff 	mov.w	r1, #4294967295
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fd5b 	bl	8001f94 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80024de:	e777      	b.n	80023d0 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024e0:	2300      	movs	r3, #0
 80024e2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80024e6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80024ea:	2b0d      	cmp	r3, #13
 80024ec:	d826      	bhi.n	800253c <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80024ee:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024f8:	4413      	add	r3, r2
 80024fa:	3b40      	subs	r3, #64	; 0x40
 80024fc:	ed93 7a00 	vldr	s14, [r3]
 8002500:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800250a:	4413      	add	r3, r2
 800250c:	3b78      	subs	r3, #120	; 0x78
 800250e:	edd3 7a00 	vldr	s15, [r3]
 8002512:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002516:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800251a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002588 <_ZN10LineSensor11calibrationEv+0x23c>
 800251e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	3392      	adds	r3, #146	; 0x92
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	3304      	adds	r3, #4
 800252c:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002530:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002534:	3301      	adds	r3, #1
 8002536:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800253a:	e7d4      	b.n	80024e6 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800253c:	2300      	movs	r3, #0
 800253e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002542:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002546:	2b0d      	cmp	r3, #13
 8002548:	d815      	bhi.n	8002576 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 800254a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800254e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002552:	0092      	lsls	r2, r2, #2
 8002554:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002558:	440a      	add	r2, r1
 800255a:	3a78      	subs	r2, #120	; 0x78
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	33a0      	adds	r3, #160	; 0xa0
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	3304      	adds	r3, #4
 8002568:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800256a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800256e:	3301      	adds	r3, #1
 8002570:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002574:	e7e5      	b.n	8002542 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 8002576:	bf00      	nop
 8002578:	3780      	adds	r7, #128	; 0x80
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	08019c80 	.word	0x08019c80
 8002584:	08019c8c 	.word	0x08019c8c
 8002588:	447a0000 	.word	0x447a0000

0800258c <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	3338      	adds	r3, #56	; 0x38
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d012      	beq.n	80025d8 <_ZN10LineSensor13emergencyStopEv+0x4c>
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800262c <_ZN10LineSensor13emergencyStopEv+0xa0>
 80025c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c8:	db02      	blt.n	80025d0 <_ZN10LineSensor13emergencyStopEv+0x44>
 80025ca:	8bfb      	ldrh	r3, [r7, #30]
 80025cc:	3301      	adds	r3, #1
 80025ce:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	3304      	adds	r3, #4
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	e7e8      	b.n	80025aa <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 80025d8:	8bfb      	ldrh	r3, [r7, #30]
 80025da:	2b0d      	cmp	r3, #13
 80025dc:	d906      	bls.n	80025ec <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 80025de:	4b14      	ldr	r3, [pc, #80]	; (8002630 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	3301      	adds	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80025e8:	801a      	strh	r2, [r3, #0]
 80025ea:	e002      	b.n	80025f2 <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 80025ec:	4b10      	ldr	r3, [pc, #64]	; (8002630 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 80025f2:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	2b31      	cmp	r3, #49	; 0x31
 80025f8:	d903      	bls.n	8002602 <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	701a      	strb	r2, [r3, #0]
 8002600:	e002      	b.n	8002608 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002610:	4293      	cmp	r3, r2
 8002612:	d903      	bls.n	800261c <_ZN10LineSensor13emergencyStopEv+0x90>
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002616:	f242 7210 	movw	r2, #10000	; 0x2710
 800261a:	801a      	strh	r2, [r3, #0]

	return flag;
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 800261e:	781b      	ldrb	r3, [r3, #0]

}
 8002620:	4618      	mov	r0, r3
 8002622:	3724      	adds	r7, #36	; 0x24
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	442f0000 	.word	0x442f0000
 8002630:	20000258 	.word	0x20000258
 8002634:	2000025a 	.word	0x2000025a

08002638 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002642:	edd7 7a01 	vldr	s15, [r7, #4]
 8002646:	eef0 7ae7 	vabs.f32	s15, s15
 800264a:	eeb0 0a67 	vmov.f32	s0, s15
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>:
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;

//#define REVERSE

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu) :
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_fast_(0), kd_fast_(0), ki_fast_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0), all_sideline_flag_(false)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	625a      	str	r2, [r3, #36]	; 0x24
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	629a      	str	r2, [r3, #40]	; 0x28
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	62da      	str	r2, [r3, #44]	; 0x2c
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	631a      	str	r2, [r3, #48]	; 0x30
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	635a      	str	r2, [r3, #52]	; 0x34
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	639a      	str	r2, [r3, #56]	; 0x38
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	63da      	str	r2, [r3, #60]	; 0x3c
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	645a      	str	r2, [r3, #68]	; 0x44
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002706:	3310      	adds	r3, #16
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002714:	3354      	adds	r3, #84	; 0x54
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002720:	3356      	adds	r3, #86	; 0x56
 8002722:	2200      	movs	r2, #0
 8002724:	801a      	strh	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800272c:	3358      	adds	r3, #88	; 0x58
 800272e:	2200      	movs	r2, #0
 8002730:	801a      	strh	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002738:	332c      	adds	r3, #44	; 0x2c
 800273a:	2200      	movs	r2, #0
 800273c:	801a      	strh	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002744:	332e      	adds	r3, #46	; 0x2e
 8002746:	2200      	movs	r2, #0
 8002748:	801a      	strh	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002750:	3330      	adds	r3, #48	; 0x30
 8002752:	2200      	movs	r2, #0
 8002754:	801a      	strh	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800275c:	3332      	adds	r3, #50	; 0x32
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002768:	3333      	adds	r3, #51	; 0x33
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002774:	3334      	adds	r3, #52	; 0x34
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002780:	3338      	adds	r3, #56	; 0x38
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800278e:	333c      	adds	r3, #60	; 0x3c
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800279c:	3340      	adds	r3, #64	; 0x40
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80027aa:	3344      	adds	r3, #68	; 0x44
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80027b8:	3348      	adds	r3, #72	; 0x48
 80027ba:	2200      	movs	r2, #0
 80027bc:	801a      	strh	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80027c4:	334a      	adds	r3, #74	; 0x4a
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a3a      	ldr	r2, [r7, #32]
 80027e0:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e6:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027ec:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f2:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027f8:	621a      	str	r2, [r3, #32]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80027fa:	2300      	movs	r3, #0
 80027fc:	82fb      	strh	r3, [r7, #22]
 80027fe:	8afb      	ldrh	r3, [r7, #22]
 8002800:	f241 726f 	movw	r2, #5999	; 0x176f
 8002804:	4293      	cmp	r3, r2
 8002806:	d80e      	bhi.n	8002826 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1ce>
		velocity_table_[i] = 0;
 8002808:	8afb      	ldrh	r3, [r7, #22]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002810:	3304      	adds	r3, #4
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	3304      	adds	r3, #4
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800281e:	8afb      	ldrh	r3, [r7, #22]
 8002820:	3301      	adds	r3, #1
 8002822:	82fb      	strh	r3, [r7, #22]
 8002824:	e7eb      	b.n	80027fe <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1a6>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002826:	2300      	movs	r3, #0
 8002828:	82bb      	strh	r3, [r7, #20]
 800282a:	8abb      	ldrh	r3, [r7, #20]
 800282c:	2b63      	cmp	r3, #99	; 0x63
 800282e:	d80e      	bhi.n	800284e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1f6>
		crossline_distance_[i] = 0;
 8002830:	8abb      	ldrh	r3, [r7, #20]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002838:	3316      	adds	r3, #22
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	3304      	adds	r3, #4
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002846:	8abb      	ldrh	r3, [r7, #20]
 8002848:	3301      	adds	r3, #1
 800284a:	82bb      	strh	r3, [r7, #20]
 800284c:	e7ed      	b.n	800282a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1d2>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 800284e:	2300      	movs	r3, #0
 8002850:	827b      	strh	r3, [r7, #18]
 8002852:	8a7b      	ldrh	r3, [r7, #18]
 8002854:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002858:	d20e      	bcs.n	8002878 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x220>
		sideline_distance_[i] = 0;
 800285a:	8a7b      	ldrh	r3, [r7, #18]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002862:	333a      	adds	r3, #58	; 0x3a
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	3304      	adds	r3, #4
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002870:	8a7b      	ldrh	r3, [r7, #18]
 8002872:	3301      	adds	r3, #1
 8002874:	827b      	strh	r3, [r7, #18]
 8002876:	e7ec      	b.n	8002852 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x1fa>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002878:	2300      	movs	r3, #0
 800287a:	823b      	strh	r3, [r7, #16]
 800287c:	8a3b      	ldrh	r3, [r7, #16]
 800287e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002882:	d20e      	bcs.n	80028a2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x24a>
		all_sideline_distance_[i] = 0;
 8002884:	8a3b      	ldrh	r3, [r7, #16]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	f503 534d 	add.w	r3, r3, #13120	; 0x3340
 800288c:	3322      	adds	r3, #34	; 0x22
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	3304      	adds	r3, #4
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 800289a:	8a3b      	ldrh	r3, [r7, #16]
 800289c:	3301      	adds	r3, #1
 800289e:	823b      	strh	r3, [r7, #16]
 80028a0:	e7ec      	b.n	800287c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x224>
	}
}
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4618      	mov	r0, r3
 80028a6:	371c      	adds	r7, #28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <_ZN9LineTrace9calcAngleEv>:
	return diff;

}

float LineTrace::calcAngle()
{
 80028b0:	b5b0      	push	{r4, r5, r7, lr}
 80028b2:	b094      	sub	sp, #80	; 0x50
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	getSensorValues();
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f86d 	bl	8002998 <_ZN9LineTrace15getSensorValuesEv>

	float den = 0;
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	float num = 0;
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	64bb      	str	r3, [r7, #72]	; 0x48
	float angle_list[SENSOR_NUM] = {-1.02, -0.85, -0.68, -0.51, -0.34, -0.17, 0, 0.17, 0.34, 0.51, 0.68, 0.85, 1.02};
 80028ca:	4b31      	ldr	r3, [pc, #196]	; (8002990 <_ZN9LineTrace9calcAngleEv+0xe0>)
 80028cc:	f107 040c 	add.w	r4, r7, #12
 80028d0:	461d      	mov	r5, r3
 80028d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028de:	682b      	ldr	r3, [r5, #0]
 80028e0:	6023      	str	r3, [r4, #0]

	for(uint16_t i = 0; i < SENSOR_NUM; i++){
 80028e2:	2300      	movs	r3, #0
 80028e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80028e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80028ec:	2b0c      	cmp	r3, #12
 80028ee:	d82e      	bhi.n	800294e <_ZN9LineTrace9calcAngleEv+0x9e>
		num += angle_list[i] * sensor_digital_values_[i];
 80028f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80028fa:	4413      	add	r3, r2
 80028fc:	3b44      	subs	r3, #68	; 0x44
 80028fe:	ed93 7a00 	vldr	s14, [r3]
 8002902:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	3320      	adds	r3, #32
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	3304      	adds	r3, #4
 8002910:	edd3 7a00 	vldr	s15, [r3]
 8002914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002918:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800291c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002920:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		den += sensor_digital_values_[i];
 8002924:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	3320      	adds	r3, #32
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	3304      	adds	r3, #4
 8002932:	edd3 7a00 	vldr	s15, [r3]
 8002936:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800293a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800293e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	for(uint16_t i = 0; i < SENSOR_NUM; i++){
 8002942:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002946:	3301      	adds	r3, #1
 8002948:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800294c:	e7cc      	b.n	80028e8 <_ZN9LineTrace9calcAngleEv+0x38>
	}

	float angle = 0;
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	643b      	str	r3, [r7, #64]	; 0x40
	if(den != 0) angle = num / den;
 8002954:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002958:	eef5 7a40 	vcmp.f32	s15, #0.0
 800295c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002960:	d008      	beq.n	8002974 <_ZN9LineTrace9calcAngleEv+0xc4>
 8002962:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002966:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800296a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800296e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 8002972:	e002      	b.n	800297a <_ZN9LineTrace9calcAngleEv+0xca>
	else angle = 0;
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	643b      	str	r3, [r7, #64]	; 0x40

	mon_steer_angle = angle;
 800297a:	4a06      	ldr	r2, [pc, #24]	; (8002994 <_ZN9LineTrace9calcAngleEv+0xe4>)
 800297c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800297e:	6013      	str	r3, [r2, #0]

	return angle;
 8002980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002982:	ee07 3a90 	vmov	s15, r3
}
 8002986:	eeb0 0a67 	vmov.f32	s0, s15
 800298a:	3750      	adds	r7, #80	; 0x50
 800298c:	46bd      	mov	sp, r7
 800298e:	bdb0      	pop	{r4, r5, r7, pc}
 8002990:	08019cd0 	.word	0x08019cd0
 8002994:	2000025c 	.word	0x2000025c

08002998 <_ZN9LineTrace15getSensorValuesEv>:

void LineTrace::getSensorValues()
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	sensor_values_[0] = 1000 - line_sensor_->sensor[0];
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	edd3 7ab0 	vldr	s15, [r3, #704]	; 0x2c0
 80029a8:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 80029ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	sensor_values_[1] = 1000 - line_sensor_->sensor[1];
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80029be:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 80029c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	sensor_values_[2] = 1000 - line_sensor_->sensor[2];
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80029d4:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 80029d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	sensor_values_[3] = 1000 - line_sensor_->sensor[3];
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 80029ea:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 80029ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	sensor_values_[4] = 1000 - line_sensor_->sensor[4];
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002a00:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	sensor_values_[5] = 1000 - line_sensor_->sensor[5];
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002a16:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002a1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	sensor_values_[6] = 1000 - (line_sensor_->sensor[6] + line_sensor_->sensor[7]) / 2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	ed93 7ab6 	vldr	s14, [r3, #728]	; 0x2d8
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	edd3 7ab7 	vldr	s15, [r3, #732]	; 0x2dc
 8002a34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a38:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002a3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a40:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	sensor_values_[7] = 1000 - line_sensor_->sensor[8];
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002a56:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	sensor_values_[8] = 1000 - line_sensor_->sensor[9];
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002a6c:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002a70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	sensor_values_[9] = 1000 - line_sensor_->sensor[10];
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002a82:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	sensor_values_[10] = 1000 - line_sensor_->sensor[11];
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 8002a98:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002a9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	sensor_values_[11] = 1000 - line_sensor_->sensor[12];
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002aae:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	sensor_values_[12] = 1000 - line_sensor_->sensor[13];
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002ac4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002bb4 <_ZN9LineTrace15getSensorValuesEv+0x21c>
 8002ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

	for(uint16_t i = 0; i < 12; i++){
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	81fb      	strh	r3, [r7, #14]
 8002ad6:	89fb      	ldrh	r3, [r7, #14]
 8002ad8:	2b0b      	cmp	r3, #11
 8002ada:	d824      	bhi.n	8002b26 <_ZN9LineTrace15getSensorValuesEv+0x18e>
		if(sensor_values_[i] >= 500) sensor_digital_values_[i] = 1;
 8002adc:	89fb      	ldrh	r3, [r7, #14]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	3314      	adds	r3, #20
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	edd3 7a00 	vldr	s15, [r3]
 8002aea:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002bb8 <_ZN9LineTrace15getSensorValuesEv+0x220>
 8002aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af6:	db09      	blt.n	8002b0c <_ZN9LineTrace15getSensorValuesEv+0x174>
 8002af8:	89fb      	ldrh	r3, [r7, #14]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	3320      	adds	r3, #32
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	3304      	adds	r3, #4
 8002b04:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	e008      	b.n	8002b1e <_ZN9LineTrace15getSensorValuesEv+0x186>
		else sensor_digital_values_[i] = 0;
 8002b0c:	89fb      	ldrh	r3, [r7, #14]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	3320      	adds	r3, #32
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	3304      	adds	r3, #4
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < 12; i++){
 8002b1e:	89fb      	ldrh	r3, [r7, #14]
 8002b20:	3301      	adds	r3, #1
 8002b22:	81fb      	strh	r3, [r7, #14]
 8002b24:	e7d7      	b.n	8002ad6 <_ZN9LineTrace15getSensorValuesEv+0x13e>
	}

	mon_sens0 = sensor_digital_values_[0];
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b2c:	4a23      	ldr	r2, [pc, #140]	; (8002bbc <_ZN9LineTrace15getSensorValuesEv+0x224>)
 8002b2e:	6013      	str	r3, [r2, #0]
	mon_sens1 = sensor_digital_values_[1];
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b36:	4a22      	ldr	r2, [pc, #136]	; (8002bc0 <_ZN9LineTrace15getSensorValuesEv+0x228>)
 8002b38:	6013      	str	r3, [r2, #0]
	mon_sens2 = sensor_digital_values_[2];
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b40:	4a20      	ldr	r2, [pc, #128]	; (8002bc4 <_ZN9LineTrace15getSensorValuesEv+0x22c>)
 8002b42:	6013      	str	r3, [r2, #0]
	mon_sens3 = sensor_digital_values_[3];
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4a:	4a1f      	ldr	r2, [pc, #124]	; (8002bc8 <_ZN9LineTrace15getSensorValuesEv+0x230>)
 8002b4c:	6013      	str	r3, [r2, #0]
	mon_sens4 = sensor_digital_values_[4];
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b54:	4a1d      	ldr	r2, [pc, #116]	; (8002bcc <_ZN9LineTrace15getSensorValuesEv+0x234>)
 8002b56:	6013      	str	r3, [r2, #0]
	mon_sens5 = sensor_digital_values_[5];
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b5e:	4a1c      	ldr	r2, [pc, #112]	; (8002bd0 <_ZN9LineTrace15getSensorValuesEv+0x238>)
 8002b60:	6013      	str	r3, [r2, #0]
	mon_sens6 = sensor_digital_values_[6];
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b68:	4a1a      	ldr	r2, [pc, #104]	; (8002bd4 <_ZN9LineTrace15getSensorValuesEv+0x23c>)
 8002b6a:	6013      	str	r3, [r2, #0]
	mon_sens7 = sensor_digital_values_[7];
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002b72:	4a19      	ldr	r2, [pc, #100]	; (8002bd8 <_ZN9LineTrace15getSensorValuesEv+0x240>)
 8002b74:	6013      	str	r3, [r2, #0]
	mon_sens8 = sensor_digital_values_[8];
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b7c:	4a17      	ldr	r2, [pc, #92]	; (8002bdc <_ZN9LineTrace15getSensorValuesEv+0x244>)
 8002b7e:	6013      	str	r3, [r2, #0]
	mon_sens9 = sensor_digital_values_[9];
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b86:	4a16      	ldr	r2, [pc, #88]	; (8002be0 <_ZN9LineTrace15getSensorValuesEv+0x248>)
 8002b88:	6013      	str	r3, [r2, #0]
	mon_sens10 = sensor_digital_values_[10];
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b90:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <_ZN9LineTrace15getSensorValuesEv+0x24c>)
 8002b92:	6013      	str	r3, [r2, #0]
	mon_sens11 = sensor_digital_values_[11];
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b9a:	4a13      	ldr	r2, [pc, #76]	; (8002be8 <_ZN9LineTrace15getSensorValuesEv+0x250>)
 8002b9c:	6013      	str	r3, [r2, #0]
	mon_sens12 = sensor_digital_values_[12];
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ba4:	4a11      	ldr	r2, [pc, #68]	; (8002bec <_ZN9LineTrace15getSensorValuesEv+0x254>)
 8002ba6:	6013      	str	r3, [r2, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	447a0000 	.word	0x447a0000
 8002bb8:	43fa0000 	.word	0x43fa0000
 8002bbc:	20000260 	.word	0x20000260
 8002bc0:	20000264 	.word	0x20000264
 8002bc4:	20000268 	.word	0x20000268
 8002bc8:	2000026c 	.word	0x2000026c
 8002bcc:	20000270 	.word	0x20000270
 8002bd0:	20000274 	.word	0x20000274
 8002bd4:	20000278 	.word	0x20000278
 8002bd8:	2000027c 	.word	0x2000027c
 8002bdc:	20000280 	.word	0x20000280
 8002be0:	20000284 	.word	0x20000284
 8002be4:	20000288 	.word	0x20000288
 8002be8:	2000028c 	.word	0x2000028c
 8002bec:	20000290 	.word	0x20000290

08002bf0 <_ZN9LineTrace18steeringAngleTraceEv>:
	pre_diff = diff;

}

void LineTrace::steeringAngleTrace()
{
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b087      	sub	sp, #28
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
	float steering_angle = calcAngle();
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff fe59 	bl	80028b0 <_ZN9LineTrace9calcAngleEv>
 8002bfe:	ed87 0a03 	vstr	s0, [r7, #12]

	float r = 0;
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	float current_velocity = 0.1;
 8002c08:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <_ZN9LineTrace18steeringAngleTraceEv+0xb0>)
 8002c0a:	60bb      	str	r3, [r7, #8]
	float target_omega = 0;
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	613b      	str	r3, [r7, #16]

	if(steering_angle != 0){
 8002c12:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c16:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1e:	d022      	beq.n	8002c66 <_ZN9LineTrace18steeringAngleTraceEv+0x76>
		r = CENTER_OF_ROTATION_TO_CENTER_OF_SENSOR / tan(steering_angle);
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f7fd fca9 	bl	8000578 <__aeabi_f2d>
 8002c26:	4603      	mov	r3, r0
 8002c28:	460c      	mov	r4, r1
 8002c2a:	ec44 3b10 	vmov	d0, r3, r4
 8002c2e:	f011 fc33 	bl	8014498 <tan>
 8002c32:	ec54 3b10 	vmov	r3, r4, d0
 8002c36:	461a      	mov	r2, r3
 8002c38:	4623      	mov	r3, r4
 8002c3a:	a117      	add	r1, pc, #92	; (adr r1, 8002c98 <_ZN9LineTrace18steeringAngleTraceEv+0xa8>)
 8002c3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c40:	f7fd fe1c 	bl	800087c <__aeabi_ddiv>
 8002c44:	4603      	mov	r3, r0
 8002c46:	460c      	mov	r4, r1
 8002c48:	4618      	mov	r0, r3
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	f7fd ffe4 	bl	8000c18 <__aeabi_d2f>
 8002c50:	4603      	mov	r3, r0
 8002c52:	617b      	str	r3, [r7, #20]
		target_omega = current_velocity / r;
 8002c54:	edd7 6a02 	vldr	s13, [r7, #8]
 8002c58:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c60:	edc7 7a04 	vstr	s15, [r7, #16]
 8002c64:	e002      	b.n	8002c6c <_ZN9LineTrace18steeringAngleTraceEv+0x7c>
	}
	else target_omega = 0;
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	613b      	str	r3, [r7, #16]

	velocity_ctrl_->setVelocity(target_velocity_, target_omega);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8002c76:	edd7 0a04 	vldr	s1, [r7, #16]
 8002c7a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c7e:	4610      	mov	r0, r2
 8002c80:	f002 feca 	bl	8005a18 <_ZN12VelocityCtrl11setVelocityEff>

	monitor_target_omega = target_omega;
 8002c84:	4a07      	ldr	r2, [pc, #28]	; (8002ca4 <_ZN9LineTrace18steeringAngleTraceEv+0xb4>)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	6013      	str	r3, [r2, #0]
	monitor_r = r;
 8002c8a:	4a07      	ldr	r2, [pc, #28]	; (8002ca8 <_ZN9LineTrace18steeringAngleTraceEv+0xb8>)
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	6013      	str	r3, [r2, #0]
}
 8002c90:	bf00      	nop
 8002c92:	371c      	adds	r7, #28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd90      	pop	{r4, r7, pc}
 8002c98:	eb851eb8 	.word	0xeb851eb8
 8002c9c:	3f9eb851 	.word	0x3f9eb851
 8002ca0:	3dcccccd 	.word	0x3dcccccd
 8002ca4:	20000294 	.word	0x20000294
 8002ca8:	20000298 	.word	0x20000298

08002cac <_ZN9LineTrace11loggerStartEv>:

void LineTrace::loggerStart()
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fe fbf5 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f002 f97d 	bl	8004fc2 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f001 feae 	bl	8004a2e <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f001 ff13 	bl	8004b1a <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
 8002cfc:	bf00      	nop
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002d1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002d28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d2c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002d30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d34:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002d48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002d54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d58:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002d5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d60:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8002d64:	4a40      	ldr	r2, [pc, #256]	; (8002e68 <_ZN9LineTrace11isCrossLineEv+0x164>)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002d6a:	4a40      	ldr	r2, [pc, #256]	; (8002e6c <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8002d70:	4b3f      	ldr	r3, [pc, #252]	; (8002e70 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	f083 0301 	eor.w	r3, r3, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d044      	beq.n	8002e08 <_ZN9LineTrace11isCrossLineEv+0x104>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002d7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d82:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002e74 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002d86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8e:	d50f      	bpl.n	8002db0 <_ZN9LineTrace11isCrossLineEv+0xac>
 8002d90:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d94:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002e74 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002d98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da0:	d506      	bpl.n	8002db0 <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8002da2:	4b35      	ldr	r3, [pc, #212]	; (8002e78 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	3301      	adds	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	4b33      	ldr	r3, [pc, #204]	; (8002e78 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002dac:	801a      	strh	r2, [r3, #0]
 8002dae:	e002      	b.n	8002db6 <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8002db0:	4b31      	ldr	r3, [pc, #196]	; (8002e78 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8002db6:	4b30      	ldr	r3, [pc, #192]	; (8002e78 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d94d      	bls.n	8002e5a <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = true;
 8002dbe:	4b2f      	ldr	r3, [pc, #188]	; (8002e7c <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8002dc4:	4b2a      	ldr	r3, [pc, #168]	; (8002e70 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002dca:	4b2b      	ldr	r3, [pc, #172]	; (8002e78 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002dd6:	3334      	adds	r3, #52	; 0x34
 8002dd8:	2201      	movs	r2, #1
 8002dda:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002de2:	3358      	adds	r3, #88	; 0x58
 8002de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d103      	bne.n	8002df4 <_ZN9LineTrace11isCrossLineEv+0xf0>
				storeCrossLineDistance();
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f001 fadd 	bl	80043ac <_ZN9LineTrace22storeCrossLineDistanceEv>
 8002df2:	e032      	b.n	8002e5a <_ZN9LineTrace11isCrossLineEv+0x156>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f001 fb82 	bl	80044fe <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				correction_check_cnt_ = 0;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002e00:	3348      	adds	r3, #72	; 0x48
 8002e02:	2200      	movs	r2, #0
 8002e04:	801a      	strh	r2, [r3, #0]
 8002e06:	e028      	b.n	8002e5a <_ZN9LineTrace11isCrossLineEv+0x156>

			//led_.LR(-1, 1);
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8002e08:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e0c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002e80 <_ZN9LineTrace11isCrossLineEv+0x17c>
 8002e10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e18:	dd0f      	ble.n	8002e3a <_ZN9LineTrace11isCrossLineEv+0x136>
 8002e1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e1e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002e80 <_ZN9LineTrace11isCrossLineEv+0x17c>
 8002e22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2a:	dd06      	ble.n	8002e3a <_ZN9LineTrace11isCrossLineEv+0x136>
			cnt++;
 8002e2c:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	4b10      	ldr	r3, [pc, #64]	; (8002e78 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002e36:	801a      	strh	r2, [r3, #0]
 8002e38:	e002      	b.n	8002e40 <_ZN9LineTrace11isCrossLineEv+0x13c>
		}
		else{
			cnt = 0;
 8002e3a:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8002e40:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	2b09      	cmp	r3, #9
 8002e46:	d908      	bls.n	8002e5a <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = false;
 8002e48:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8002e4e:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002e54:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	801a      	strh	r2, [r3, #0]
			//led_.LR(-1, 0);
		}

	}

	return flag;
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <_ZN9LineTrace11isCrossLineEv+0x178>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200002a0 	.word	0x200002a0
 8002e6c:	200002a4 	.word	0x200002a4
 8002e70:	200002bb 	.word	0x200002bb
 8002e74:	44160000 	.word	0x44160000
 8002e78:	200002b8 	.word	0x200002b8
 8002e7c:	200002ba 	.word	0x200002ba
 8002e80:	43fa0000 	.word	0x43fa0000

08002e84 <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002e96:	3358      	adds	r3, #88	; 0x58
 8002e98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d143      	bne.n	8002f28 <_ZN9LineTrace15radius2VelocityEf+0xa4>
		if(radius < 300) velocity = min_velocity_;
 8002ea0:	edd7 7a00 	vldr	s15, [r7]
 8002ea4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002fc0 <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8002ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb0:	d504      	bpl.n	8002ebc <_ZN9LineTrace15radius2VelocityEf+0x38>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	e076      	b.n	8002faa <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 800) velocity = 1.7;
 8002ebc:	edd7 7a00 	vldr	s15, [r7]
 8002ec0:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002fc4 <_ZN9LineTrace15radius2VelocityEf+0x140>
 8002ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ecc:	d502      	bpl.n	8002ed4 <_ZN9LineTrace15radius2VelocityEf+0x50>
 8002ece:	4b3e      	ldr	r3, [pc, #248]	; (8002fc8 <_ZN9LineTrace15radius2VelocityEf+0x144>)
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	e06a      	b.n	8002faa <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1000) velocity = 2.0;
 8002ed4:	edd7 7a00 	vldr	s15, [r7]
 8002ed8:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002fcc <_ZN9LineTrace15radius2VelocityEf+0x148>
 8002edc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee4:	d503      	bpl.n	8002eee <_ZN9LineTrace15radius2VelocityEf+0x6a>
 8002ee6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	e05d      	b.n	8002faa <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.3;
 8002eee:	edd7 7a00 	vldr	s15, [r7]
 8002ef2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002fd0 <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8002ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002efe:	d502      	bpl.n	8002f06 <_ZN9LineTrace15radius2VelocityEf+0x82>
 8002f00:	4b34      	ldr	r3, [pc, #208]	; (8002fd4 <_ZN9LineTrace15radius2VelocityEf+0x150>)
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	e051      	b.n	8002faa <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8002f06:	edd7 7a00 	vldr	s15, [r7]
 8002f0a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002fd8 <_ZN9LineTrace15radius2VelocityEf+0x154>
 8002f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f16:	d502      	bpl.n	8002f1e <_ZN9LineTrace15radius2VelocityEf+0x9a>
 8002f18:	4b30      	ldr	r3, [pc, #192]	; (8002fdc <_ZN9LineTrace15radius2VelocityEf+0x158>)
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	e045      	b.n	8002faa <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity_;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	e040      	b.n	8002faa <_ZN9LineTrace15radius2VelocityEf+0x126>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002f2e:	3358      	adds	r3, #88	; 0x58
 8002f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d136      	bne.n	8002fa6 <_ZN9LineTrace15radius2VelocityEf+0x122>
		if(radius < 300) velocity = min_velocity2_;
 8002f38:	edd7 7a00 	vldr	s15, [r7]
 8002f3c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002fc0 <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8002f40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f48:	d504      	bpl.n	8002f54 <_ZN9LineTrace15radius2VelocityEf+0xd0>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	e02a      	b.n	8002faa <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.1;
 8002f54:	edd7 7a00 	vldr	s15, [r7]
 8002f58:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002fd0 <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8002f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f64:	d502      	bpl.n	8002f6c <_ZN9LineTrace15radius2VelocityEf+0xe8>
 8002f66:	4b1e      	ldr	r3, [pc, #120]	; (8002fe0 <_ZN9LineTrace15radius2VelocityEf+0x15c>)
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	e01e      	b.n	8002faa <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8002f6c:	edd7 7a00 	vldr	s15, [r7]
 8002f70:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002fd8 <_ZN9LineTrace15radius2VelocityEf+0x154>
 8002f74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7c:	d502      	bpl.n	8002f84 <_ZN9LineTrace15radius2VelocityEf+0x100>
 8002f7e:	4b17      	ldr	r3, [pc, #92]	; (8002fdc <_ZN9LineTrace15radius2VelocityEf+0x158>)
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	e012      	b.n	8002faa <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2500) velocity = 3.0;
 8002f84:	edd7 7a00 	vldr	s15, [r7]
 8002f88:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002fe4 <_ZN9LineTrace15radius2VelocityEf+0x160>
 8002f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f94:	d502      	bpl.n	8002f9c <_ZN9LineTrace15radius2VelocityEf+0x118>
 8002f96:	4b14      	ldr	r3, [pc, #80]	; (8002fe8 <_ZN9LineTrace15radius2VelocityEf+0x164>)
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	e006      	b.n	8002faa <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity2_;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	e001      	b.n	8002faa <_ZN9LineTrace15radius2VelocityEf+0x126>
	}
	else velocity = 1.3;
 8002fa6:	4b11      	ldr	r3, [pc, #68]	; (8002fec <_ZN9LineTrace15radius2VelocityEf+0x168>)
 8002fa8:	60fb      	str	r3, [r7, #12]

	return velocity;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	ee07 3a90 	vmov	s15, r3
}
 8002fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	43960000 	.word	0x43960000
 8002fc4:	44480000 	.word	0x44480000
 8002fc8:	3fd9999a 	.word	0x3fd9999a
 8002fcc:	447a0000 	.word	0x447a0000
 8002fd0:	44bb8000 	.word	0x44bb8000
 8002fd4:	40133333 	.word	0x40133333
 8002fd8:	44fa0000 	.word	0x44fa0000
 8002fdc:	40200000 	.word	0x40200000
 8002fe0:	40066666 	.word	0x40066666
 8002fe4:	451c4000 	.word	0x451c4000
 8002fe8:	40400000 	.word	0x40400000
 8002fec:	3fa66666 	.word	0x3fa66666

08002ff0 <_ZN9LineTrace20createVelocityTabeleEv>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::createVelocityTabele()
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b08b      	sub	sp, #44	; 0x2c
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f001 fc88 	bl	8004912 <_ZN6Logger23getDistanceArrayPointerEv>
 8003002:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	4618      	mov	r0, r3
 800300a:	f001 fc8e 	bl	800492a <_ZN6Logger20getThetaArrayPointerEv>
 800300e:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8003010:	2300      	movs	r3, #0
 8003012:	837b      	strh	r3, [r7, #26]
 8003014:	8b7b      	ldrh	r3, [r7, #26]
 8003016:	f241 726f 	movw	r2, #5999	; 0x176f
 800301a:	4293      	cmp	r3, r2
 800301c:	d84b      	bhi.n	80030b6 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 800301e:	8b7b      	ldrh	r3, [r7, #26]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4413      	add	r3, r2
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800302a:	8b7b      	ldrh	r3, [r7, #26]
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4413      	add	r3, r2
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8003036:	edd7 7a07 	vldr	s15, [r7, #28]
 800303a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800303e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003042:	d101      	bne.n	8003048 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8003044:	4b4c      	ldr	r3, [pc, #304]	; (8003178 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 8003046:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8003048:	ed97 7a02 	vldr	s14, [r7, #8]
 800304c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003050:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003054:	eeb0 0a66 	vmov.f32	s0, s13
 8003058:	f7ff faee 	bl	8002638 <_ZSt3absf>
 800305c:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8003060:	edd7 7a05 	vldr	s15, [r7, #20]
 8003064:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800317c <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8003068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800306c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003070:	db01      	blt.n	8003076 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8003072:	4b43      	ldr	r3, [pc, #268]	; (8003180 <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 8003074:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8003076:	8b7c      	ldrh	r4, [r7, #26]
 8003078:	ed97 0a05 	vldr	s0, [r7, #20]
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff ff01 	bl	8002e84 <_ZN9LineTrace15radius2VelocityEf>
 8003082:	eef0 7a40 	vmov.f32	s15, s0
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800308c:	3304      	adds	r3, #4
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	3304      	adds	r3, #4
 8003094:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8003098:	8b7b      	ldrh	r3, [r7, #26]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	441a      	add	r2, r3
 80030a0:	8b7b      	ldrh	r3, [r7, #26]
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	3334      	adds	r3, #52	; 0x34
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80030ae:	8b7b      	ldrh	r3, [r7, #26]
 80030b0:	3301      	adds	r3, #1
 80030b2:	837b      	strh	r3, [r7, #26]
 80030b4:	e7ae      	b.n	8003014 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80030bc:	3358      	adds	r3, #88	; 0x58
 80030be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d120      	bne.n	8003108 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80030d2:	3314      	adds	r3, #20
 80030d4:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80030dc:	333c      	adds	r3, #60	; 0x3c
 80030de:	edd3 7a00 	vldr	s15, [r3]
 80030e2:	6939      	ldr	r1, [r7, #16]
 80030e4:	eeb0 0a67 	vmov.f32	s0, s15
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f941 	bl	8003370 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80030f4:	3338      	adds	r3, #56	; 0x38
 80030f6:	edd3 7a00 	vldr	s15, [r3]
 80030fa:	6939      	ldr	r1, [r7, #16]
 80030fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f9dd 	bl	80034c0 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8003106:	e027      	b.n	8003158 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800310e:	3358      	adds	r3, #88	; 0x58
 8003110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003114:	2b02      	cmp	r3, #2
 8003116:	d11f      	bne.n	8003158 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003124:	3314      	adds	r3, #20
 8003126:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800312e:	3344      	adds	r3, #68	; 0x44
 8003130:	edd3 7a00 	vldr	s15, [r3]
 8003134:	6939      	ldr	r1, [r7, #16]
 8003136:	eeb0 0a67 	vmov.f32	s0, s15
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f918 	bl	8003370 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003146:	3340      	adds	r3, #64	; 0x40
 8003148:	edd3 7a00 	vldr	s15, [r3]
 800314c:	6939      	ldr	r1, [r7, #16]
 800314e:	eeb0 0a67 	vmov.f32	s0, s15
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f9b4 	bl	80034c0 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800315e:	3314      	adds	r3, #20
 8003160:	2200      	movs	r2, #0
 8003162:	9200      	str	r2, [sp, #0]
 8003164:	f241 7270 	movw	r2, #6000	; 0x1770
 8003168:	4906      	ldr	r1, [pc, #24]	; (8003184 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 800316a:	4807      	ldr	r0, [pc, #28]	; (8003188 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 800316c:	f7fe f9d6 	bl	800151c <sd_write_array_float>

}
 8003170:	bf00      	nop
 8003172:	3724      	adds	r7, #36	; 0x24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd90      	pop	{r4, r7, pc}
 8003178:	3727c5ac 	.word	0x3727c5ac
 800317c:	459c4000 	.word	0x459c4000
 8003180:	459c4000 	.word	0x459c4000
 8003184:	08019d04 	.word	0x08019d04
 8003188:	08019d14 	.word	0x08019d14

0800318c <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

//float mon_crossdis;
void LineTrace::createVelocityTabeleFromSD()
{
 800318c:	b590      	push	{r4, r7, lr}
 800318e:	b08b      	sub	sp, #44	; 0x2c
 8003190:	af02      	add	r7, sp, #8
 8003192:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69d8      	ldr	r0, [r3, #28]
 8003198:	4b6b      	ldr	r3, [pc, #428]	; (8003348 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 800319a:	4a6c      	ldr	r2, [pc, #432]	; (800334c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 800319c:	496c      	ldr	r1, [pc, #432]	; (8003350 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800319e:	f001 fc29 	bl	80049f4 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80031a8:	335c      	adds	r3, #92	; 0x5c
 80031aa:	2264      	movs	r2, #100	; 0x64
 80031ac:	4969      	ldr	r1, [pc, #420]	; (8003354 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 80031ae:	4868      	ldr	r0, [pc, #416]	; (8003350 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80031b0:	f7fe fa1a 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80031ba:	33ec      	adds	r3, #236	; 0xec
 80031bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031c0:	4965      	ldr	r1, [pc, #404]	; (8003358 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 80031c2:	4863      	ldr	r0, [pc, #396]	; (8003350 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80031c4:	f7fe fa10 	bl	80015e8 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f001 fba0 	bl	8004912 <_ZN6Logger23getDistanceArrayPointerEv>
 80031d2:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	4618      	mov	r0, r3
 80031da:	f001 fba6 	bl	800492a <_ZN6Logger20getThetaArrayPointerEv>
 80031de:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80031e0:	2300      	movs	r3, #0
 80031e2:	837b      	strh	r3, [r7, #26]
 80031e4:	8b7b      	ldrh	r3, [r7, #26]
 80031e6:	f241 726f 	movw	r2, #5999	; 0x176f
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d84b      	bhi.n	8003286 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 80031ee:	8b7b      	ldrh	r3, [r7, #26]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4413      	add	r3, r2
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80031fa:	8b7b      	ldrh	r3, [r7, #26]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4413      	add	r3, r2
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8003206:	edd7 7a07 	vldr	s15, [r7, #28]
 800320a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800320e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003212:	d101      	bne.n	8003218 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8003214:	4b51      	ldr	r3, [pc, #324]	; (800335c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 8003216:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 8003218:	ed97 7a02 	vldr	s14, [r7, #8]
 800321c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003220:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003224:	eeb0 0a66 	vmov.f32	s0, s13
 8003228:	f7ff fa06 	bl	8002638 <_ZSt3absf>
 800322c:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 8003230:	edd7 7a05 	vldr	s15, [r7, #20]
 8003234:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8003360 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 8003238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800323c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003240:	db01      	blt.n	8003246 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 8003242:	4b48      	ldr	r3, [pc, #288]	; (8003364 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 8003244:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 8003246:	8b7c      	ldrh	r4, [r7, #26]
 8003248:	ed97 0a05 	vldr	s0, [r7, #20]
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7ff fe19 	bl	8002e84 <_ZN9LineTrace15radius2VelocityEf>
 8003252:	eef0 7a40 	vmov.f32	s15, s0
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800325c:	3304      	adds	r3, #4
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	3304      	adds	r3, #4
 8003264:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8003268:	8b7b      	ldrh	r3, [r7, #26]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	441a      	add	r2, r3
 8003270:	8b7b      	ldrh	r3, [r7, #26]
 8003272:	6812      	ldr	r2, [r2, #0]
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	3334      	adds	r3, #52	; 0x34
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800327e:	8b7b      	ldrh	r3, [r7, #26]
 8003280:	3301      	adds	r3, #1
 8003282:	837b      	strh	r3, [r7, #26]
 8003284:	e7ae      	b.n	80031e4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800328c:	3358      	adds	r3, #88	; 0x58
 800328e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d120      	bne.n	80032d8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80032a2:	3314      	adds	r3, #20
 80032a4:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80032ac:	333c      	adds	r3, #60	; 0x3c
 80032ae:	edd3 7a00 	vldr	s15, [r3]
 80032b2:	6939      	ldr	r1, [r7, #16]
 80032b4:	eeb0 0a67 	vmov.f32	s0, s15
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f859 	bl	8003370 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80032c4:	3338      	adds	r3, #56	; 0x38
 80032c6:	edd3 7a00 	vldr	s15, [r3]
 80032ca:	6939      	ldr	r1, [r7, #16]
 80032cc:	eeb0 0a67 	vmov.f32	s0, s15
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f8f5 	bl	80034c0 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80032d6:	e027      	b.n	8003328 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80032de:	3358      	adds	r3, #88	; 0x58
 80032e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d11f      	bne.n	8003328 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80032f4:	3314      	adds	r3, #20
 80032f6:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80032fe:	3344      	adds	r3, #68	; 0x44
 8003300:	edd3 7a00 	vldr	s15, [r3]
 8003304:	6939      	ldr	r1, [r7, #16]
 8003306:	eeb0 0a67 	vmov.f32	s0, s15
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f830 	bl	8003370 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003316:	3340      	adds	r3, #64	; 0x40
 8003318:	edd3 7a00 	vldr	s15, [r3]
 800331c:	6939      	ldr	r1, [r7, #16]
 800331e:	eeb0 0a67 	vmov.f32	s0, s15
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f8cc 	bl	80034c0 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800332e:	3314      	adds	r3, #20
 8003330:	2200      	movs	r2, #0
 8003332:	9200      	str	r2, [sp, #0]
 8003334:	f241 7270 	movw	r2, #6000	; 0x1770
 8003338:	490b      	ldr	r1, [pc, #44]	; (8003368 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 800333a:	4805      	ldr	r0, [pc, #20]	; (8003350 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800333c:	f7fe f8ee 	bl	800151c <sd_write_array_float>

}
 8003340:	bf00      	nop
 8003342:	3724      	adds	r7, #36	; 0x24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd90      	pop	{r4, r7, pc}
 8003348:	08019d20 	.word	0x08019d20
 800334c:	08019d2c 	.word	0x08019d2c
 8003350:	08019d14 	.word	0x08019d14
 8003354:	08019d3c 	.word	0x08019d3c
 8003358:	08019d4c 	.word	0x08019d4c
 800335c:	3727c5ac 	.word	0x3727c5ac
 8003360:	459c4000 	.word	0x459c4000
 8003364:	459c4000 	.word	0x459c4000
 8003368:	08019d04 	.word	0x08019d04
 800336c:	00000000 	.word	0x00000000

08003370 <_ZN9LineTrace20decelerateProcessingEfPKf>:

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003370:	b5b0      	push	{r4, r5, r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	ed87 0a02 	vstr	s0, [r7, #8]
 800337c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800337e:	f241 736f 	movw	r3, #5999	; 0x176f
 8003382:	83fb      	strh	r3, [r7, #30]
 8003384:	8bfb      	ldrh	r3, [r7, #30]
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 8091 	beq.w	80034ae <_ZN9LineTrace20decelerateProcessingEfPKf+0x13e>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 800338c:	8bfb      	ldrh	r3, [r7, #30]
 800338e:	3b01      	subs	r3, #1
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003396:	3304      	adds	r3, #4
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	3304      	adds	r3, #4
 800339e:	ed93 7a00 	vldr	s14, [r3]
 80033a2:	8bfb      	ldrh	r3, [r7, #30]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80033aa:	3304      	adds	r3, #4
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	3304      	adds	r3, #4
 80033b2:	edd3 7a00 	vldr	s15, [r3]
 80033b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ba:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80033be:	edd7 7a06 	vldr	s15, [r7, #24]
 80033c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ca:	dd6c      	ble.n	80034a6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
			float t = p_distance[i]*1e-3 / v_diff;
 80033cc:	8bfb      	ldrh	r3, [r7, #30]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	4413      	add	r3, r2
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fd f8ce 	bl	8000578 <__aeabi_f2d>
 80033dc:	a336      	add	r3, pc, #216	; (adr r3, 80034b8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x148>)
 80033de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e2:	f7fd f921 	bl	8000628 <__aeabi_dmul>
 80033e6:	4603      	mov	r3, r0
 80033e8:	460c      	mov	r4, r1
 80033ea:	4625      	mov	r5, r4
 80033ec:	461c      	mov	r4, r3
 80033ee:	69b8      	ldr	r0, [r7, #24]
 80033f0:	f7fd f8c2 	bl	8000578 <__aeabi_f2d>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4620      	mov	r0, r4
 80033fa:	4629      	mov	r1, r5
 80033fc:	f7fd fa3e 	bl	800087c <__aeabi_ddiv>
 8003400:	4603      	mov	r3, r0
 8003402:	460c      	mov	r4, r1
 8003404:	4618      	mov	r0, r3
 8003406:	4621      	mov	r1, r4
 8003408:	f7fd fc06 	bl	8000c18 <__aeabi_d2f>
 800340c:	4603      	mov	r3, r0
 800340e:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003410:	edd7 6a06 	vldr	s13, [r7, #24]
 8003414:	ed97 7a05 	vldr	s14, [r7, #20]
 8003418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800341c:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003420:	ed97 7a04 	vldr	s14, [r7, #16]
 8003424:	edd7 7a02 	vldr	s15, [r7, #8]
 8003428:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800342c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003430:	dd39      	ble.n	80034a6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003432:	8bfb      	ldrh	r3, [r7, #30]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800343a:	3304      	adds	r3, #4
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	3304      	adds	r3, #4
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f7fd f897 	bl	8000578 <__aeabi_f2d>
 800344a:	4604      	mov	r4, r0
 800344c:	460d      	mov	r5, r1
 800344e:	8bfb      	ldrh	r3, [r7, #30]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	4413      	add	r3, r2
 8003456:	ed93 7a00 	vldr	s14, [r3]
 800345a:	edd7 7a02 	vldr	s15, [r7, #8]
 800345e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003462:	ee17 0a90 	vmov	r0, s15
 8003466:	f7fd f887 	bl	8000578 <__aeabi_f2d>
 800346a:	a313      	add	r3, pc, #76	; (adr r3, 80034b8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x148>)
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	f7fd f8da 	bl	8000628 <__aeabi_dmul>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4620      	mov	r0, r4
 800347a:	4629      	mov	r1, r5
 800347c:	f7fc ff1e 	bl	80002bc <__adddf3>
 8003480:	4603      	mov	r3, r0
 8003482:	460c      	mov	r4, r1
 8003484:	4619      	mov	r1, r3
 8003486:	4622      	mov	r2, r4
 8003488:	8bfb      	ldrh	r3, [r7, #30]
 800348a:	1e5c      	subs	r4, r3, #1
 800348c:	4608      	mov	r0, r1
 800348e:	4611      	mov	r1, r2
 8003490:	f7fd fbc2 	bl	8000c18 <__aeabi_d2f>
 8003494:	4601      	mov	r1, r0
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800349c:	3304      	adds	r3, #4
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	3304      	adds	r3, #4
 80034a4:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80034a6:	8bfb      	ldrh	r3, [r7, #30]
 80034a8:	3b01      	subs	r3, #1
 80034aa:	83fb      	strh	r3, [r7, #30]
 80034ac:	e76a      	b.n	8003384 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 80034ae:	bf00      	nop
 80034b0:	3720      	adds	r7, #32
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bdb0      	pop	{r4, r5, r7, pc}
 80034b6:	bf00      	nop
 80034b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80034bc:	3f50624d 	.word	0x3f50624d

080034c0 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 80034c0:	b5b0      	push	{r4, r5, r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80034cc:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80034ce:	2300      	movs	r3, #0
 80034d0:	83fb      	strh	r3, [r7, #30]
 80034d2:	8bfb      	ldrh	r3, [r7, #30]
 80034d4:	f241 726f 	movw	r2, #5999	; 0x176f
 80034d8:	4293      	cmp	r3, r2
 80034da:	f200 8091 	bhi.w	8003600 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 80034de:	8bfb      	ldrh	r3, [r7, #30]
 80034e0:	3301      	adds	r3, #1
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034e8:	3304      	adds	r3, #4
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	3304      	adds	r3, #4
 80034f0:	ed93 7a00 	vldr	s14, [r3]
 80034f4:	8bfb      	ldrh	r3, [r7, #30]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034fc:	3304      	adds	r3, #4
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	3304      	adds	r3, #4
 8003504:	edd3 7a00 	vldr	s15, [r3]
 8003508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800350c:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003510:	edd7 7a06 	vldr	s15, [r7, #24]
 8003514:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351c:	dd6c      	ble.n	80035f8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
			float t = p_distance[i]*1e-3 / v_diff;
 800351e:	8bfb      	ldrh	r3, [r7, #30]
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	4413      	add	r3, r2
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f7fd f825 	bl	8000578 <__aeabi_f2d>
 800352e:	a336      	add	r3, pc, #216	; (adr r3, 8003608 <_ZN9LineTrace20accelerateProcessingEfPKf+0x148>)
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	f7fd f878 	bl	8000628 <__aeabi_dmul>
 8003538:	4603      	mov	r3, r0
 800353a:	460c      	mov	r4, r1
 800353c:	4625      	mov	r5, r4
 800353e:	461c      	mov	r4, r3
 8003540:	69b8      	ldr	r0, [r7, #24]
 8003542:	f7fd f819 	bl	8000578 <__aeabi_f2d>
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	4620      	mov	r0, r4
 800354c:	4629      	mov	r1, r5
 800354e:	f7fd f995 	bl	800087c <__aeabi_ddiv>
 8003552:	4603      	mov	r3, r0
 8003554:	460c      	mov	r4, r1
 8003556:	4618      	mov	r0, r3
 8003558:	4621      	mov	r1, r4
 800355a:	f7fd fb5d 	bl	8000c18 <__aeabi_d2f>
 800355e:	4603      	mov	r3, r0
 8003560:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003562:	edd7 6a06 	vldr	s13, [r7, #24]
 8003566:	ed97 7a05 	vldr	s14, [r7, #20]
 800356a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800356e:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003572:	ed97 7a04 	vldr	s14, [r7, #16]
 8003576:	edd7 7a02 	vldr	s15, [r7, #8]
 800357a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800357e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003582:	dd39      	ble.n	80035f8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003584:	8bfb      	ldrh	r3, [r7, #30]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800358c:	3304      	adds	r3, #4
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	3304      	adds	r3, #4
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7fc ffee 	bl	8000578 <__aeabi_f2d>
 800359c:	4604      	mov	r4, r0
 800359e:	460d      	mov	r5, r1
 80035a0:	8bfb      	ldrh	r3, [r7, #30]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	4413      	add	r3, r2
 80035a8:	ed93 7a00 	vldr	s14, [r3]
 80035ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80035b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b4:	ee17 0a90 	vmov	r0, s15
 80035b8:	f7fc ffde 	bl	8000578 <__aeabi_f2d>
 80035bc:	a312      	add	r3, pc, #72	; (adr r3, 8003608 <_ZN9LineTrace20accelerateProcessingEfPKf+0x148>)
 80035be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c2:	f7fd f831 	bl	8000628 <__aeabi_dmul>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4620      	mov	r0, r4
 80035cc:	4629      	mov	r1, r5
 80035ce:	f7fc fe75 	bl	80002bc <__adddf3>
 80035d2:	4603      	mov	r3, r0
 80035d4:	460c      	mov	r4, r1
 80035d6:	4619      	mov	r1, r3
 80035d8:	4622      	mov	r2, r4
 80035da:	8bfb      	ldrh	r3, [r7, #30]
 80035dc:	1c5c      	adds	r4, r3, #1
 80035de:	4608      	mov	r0, r1
 80035e0:	4611      	mov	r1, r2
 80035e2:	f7fd fb19 	bl	8000c18 <__aeabi_d2f>
 80035e6:	4601      	mov	r1, r0
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80035ee:	3304      	adds	r3, #4
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	3304      	adds	r3, #4
 80035f6:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80035f8:	8bfb      	ldrh	r3, [r7, #30]
 80035fa:	3301      	adds	r3, #1
 80035fc:	83fb      	strh	r3, [r7, #30]
 80035fe:	e768      	b.n	80034d2 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003600:	bf00      	nop
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	bdb0      	pop	{r4, r5, r7, pc}
 8003608:	d2f1a9fc 	.word	0xd2f1a9fc
 800360c:	3f50624d 	.word	0x3f50624d

08003610 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800361e:	3354      	adds	r3, #84	; 0x54
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 8087 	beq.w	8003736 <_ZN9LineTrace20updateTargetVelocityEv+0x126>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	4618      	mov	r0, r3
 800362e:	f7fd ff1d 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003632:	eeb0 7a40 	vmov.f32	s14, s0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800363c:	3310      	adds	r3, #16
 800363e:	edd3 7a00 	vldr	s15, [r3]
 8003642:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364a:	bfac      	ite	ge
 800364c:	2301      	movge	r3, #1
 800364e:	2300      	movlt	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d025      	beq.n	80036a2 <_ZN9LineTrace20updateTargetVelocityEv+0x92>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800365c:	3310      	adds	r3, #16
 800365e:	ed93 7a00 	vldr	s14, [r3]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003668:	3356      	adds	r3, #86	; 0x56
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	3334      	adds	r3, #52	; 0x34
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	edd3 7a00 	vldr	s15, [r3]
 8003678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003682:	3310      	adds	r3, #16
 8003684:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800368e:	3356      	adds	r3, #86	; 0x56
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	3301      	adds	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800369c:	3356      	adds	r3, #86	; 0x56
 800369e:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 80036a0:	e7c2      	b.n	8003628 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036a8:	3356      	adds	r3, #86	; 0x56
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	f241 726f 	movw	r2, #5999	; 0x176f
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d906      	bls.n	80036c2 <_ZN9LineTrace20updateTargetVelocityEv+0xb2>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036ba:	3356      	adds	r3, #86	; 0x56
 80036bc:	f241 726f 	movw	r2, #5999	; 0x176f
 80036c0:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80036c8:	3310      	adds	r3, #16
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1c      	ldr	r2, [pc, #112]	; (8003740 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 80036ce:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fd fec9 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 80036da:	eef0 7a40 	vmov.f32	s15, s0
 80036de:	4b19      	ldr	r3, [pc, #100]	; (8003744 <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 80036e0:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036ea:	3356      	adds	r3, #86	; 0x56
 80036ec:	881a      	ldrh	r2, [r3, #0]
 80036ee:	4b16      	ldr	r3, [pc, #88]	; (8003748 <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 80036f0:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036f8:	3356      	adds	r3, #86	; 0x56
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003702:	3304      	adds	r3, #4
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	3304      	adds	r3, #4
 800370a:	edd3 7a00 	vldr	s15, [r3]
 800370e:	eeb0 0a67 	vmov.f32	s0, s15
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fa08 	bl	8003b28 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800371e:	3356      	adds	r3, #86	; 0x56
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003728:	3304      	adds	r3, #4
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	3304      	adds	r3, #4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a06      	ldr	r2, [pc, #24]	; (800374c <_ZN9LineTrace20updateTargetVelocityEv+0x13c>)
 8003734:	6013      	str	r3, [r2, #0]

	}
}
 8003736:	bf00      	nop
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	200002a8 	.word	0x200002a8
 8003744:	200002ac 	.word	0x200002ac
 8003748:	200002b0 	.word	0x200002b0
 800374c:	200002b4 	.word	0x200002b4

08003750 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003758:	2300      	movs	r3, #0
 800375a:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	4618      	mov	r0, r3
 8003762:	f7fd fe74 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003766:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	4618      	mov	r0, r3
 8003770:	f001 fc15 	bl	8004f9e <_ZN8Odometry8getThetaEv>
 8003774:	ec54 3b10 	vmov	r3, r4, d0
 8003778:	4618      	mov	r0, r3
 800377a:	4621      	mov	r1, r4
 800377c:	f7fd fa4c 	bl	8000c18 <__aeabi_d2f>
 8003780:	4603      	mov	r3, r0
 8003782:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003784:	edd7 7a04 	vldr	s15, [r7, #16]
 8003788:	eef5 7a40 	vcmp.f32	s15, #0.0
 800378c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003790:	d101      	bne.n	8003796 <_ZN9LineTrace8isStableEv+0x46>
 8003792:	4b23      	ldr	r3, [pc, #140]	; (8003820 <_ZN9LineTrace8isStableEv+0xd0>)
 8003794:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 8003796:	ed97 7a02 	vldr	s14, [r7, #8]
 800379a:	edd7 7a04 	vldr	s15, [r7, #16]
 800379e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80037a2:	eeb0 0a66 	vmov.f32	s0, s13
 80037a6:	f7fe ff47 	bl	8002638 <_ZSt3absf>
 80037aa:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 80037ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80037b2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003824 <_ZN9LineTrace8isStableEv+0xd4>
 80037b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037be:	db01      	blt.n	80037c4 <_ZN9LineTrace8isStableEv+0x74>
 80037c0:	4b19      	ldr	r3, [pc, #100]	; (8003828 <_ZN9LineTrace8isStableEv+0xd8>)
 80037c2:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80037ca:	3334      	adds	r3, #52	; 0x34
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d008      	beq.n	80037e4 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 80037d2:	4b16      	ldr	r3, [pc, #88]	; (800382c <_ZN9LineTrace8isStableEv+0xdc>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80037de:	3334      	adds	r3, #52	; 0x34
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){ //150
 80037e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80037e8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003830 <_ZN9LineTrace8isStableEv+0xe0>
 80037ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f4:	db06      	blt.n	8003804 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <_ZN9LineTrace8isStableEv+0xdc>)
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	3301      	adds	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	4b0b      	ldr	r3, [pc, #44]	; (800382c <_ZN9LineTrace8isStableEv+0xdc>)
 8003800:	801a      	strh	r2, [r3, #0]
 8003802:	e002      	b.n	800380a <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003804:	4b09      	ldr	r3, [pc, #36]	; (800382c <_ZN9LineTrace8isStableEv+0xdc>)
 8003806:	2200      	movs	r2, #0
 8003808:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 800380a:	4b08      	ldr	r3, [pc, #32]	; (800382c <_ZN9LineTrace8isStableEv+0xdc>)
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	2b16      	cmp	r3, #22
 8003810:	d901      	bls.n	8003816 <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003812:	2301      	movs	r3, #1
 8003814:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003816:	7dfb      	ldrb	r3, [r7, #23]
}
 8003818:	4618      	mov	r0, r3
 800381a:	371c      	adds	r7, #28
 800381c:	46bd      	mov	sp, r7
 800381e:	bd90      	pop	{r4, r7, pc}
 8003820:	3727c5ac 	.word	0x3727c5ac
 8003824:	459c4000 	.word	0x459c4000
 8003828:	459c4000 	.word	0x459c4000
 800382c:	200002bc 	.word	0x200002bc
 8003830:	44fa0000 	.word	0x44fa0000

08003834 <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b092      	sub	sp, #72	; 0x48
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 800383c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003840:	2201      	movs	r2, #1
 8003842:	4963      	ldr	r1, [pc, #396]	; (80039d0 <_ZN9LineTrace4initEv+0x19c>)
 8003844:	4863      	ldr	r0, [pc, #396]	; (80039d4 <_ZN9LineTrace4initEv+0x1a0>)
 8003846:	f7fd fecf 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 800384a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800384e:	2201      	movs	r2, #1
 8003850:	4961      	ldr	r1, [pc, #388]	; (80039d8 <_ZN9LineTrace4initEv+0x1a4>)
 8003852:	4860      	ldr	r0, [pc, #384]	; (80039d4 <_ZN9LineTrace4initEv+0x1a0>)
 8003854:	f7fd fec8 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003858:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800385c:	2201      	movs	r2, #1
 800385e:	495f      	ldr	r1, [pc, #380]	; (80039dc <_ZN9LineTrace4initEv+0x1a8>)
 8003860:	485c      	ldr	r0, [pc, #368]	; (80039d4 <_ZN9LineTrace4initEv+0x1a0>)
 8003862:	f7fd fec1 	bl	80015e8 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003866:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800386a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800386e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8003872:	eeb0 1a66 	vmov.f32	s2, s13
 8003876:	eef0 0a47 	vmov.f32	s1, s14
 800387a:	eeb0 0a67 	vmov.f32	s0, s15
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f8c6 	bl	8003a10 <_ZN9LineTrace7setGainEfff>

	float temp_kp_fast, temp_ki_fast, temp_kd_fast;
	sd_read_array_float("PARAMS", "KPFAST.TXT", 1, &temp_kp_fast);
 8003884:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003888:	2201      	movs	r2, #1
 800388a:	4955      	ldr	r1, [pc, #340]	; (80039e0 <_ZN9LineTrace4initEv+0x1ac>)
 800388c:	4851      	ldr	r0, [pc, #324]	; (80039d4 <_ZN9LineTrace4initEv+0x1a0>)
 800388e:	f7fd feab 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KIFAST.TXT", 1, &temp_ki_fast);
 8003892:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003896:	2201      	movs	r2, #1
 8003898:	4952      	ldr	r1, [pc, #328]	; (80039e4 <_ZN9LineTrace4initEv+0x1b0>)
 800389a:	484e      	ldr	r0, [pc, #312]	; (80039d4 <_ZN9LineTrace4initEv+0x1a0>)
 800389c:	f7fd fea4 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KDFAST.TXT", 1, &temp_kd_fast);
 80038a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038a4:	2201      	movs	r2, #1
 80038a6:	4950      	ldr	r1, [pc, #320]	; (80039e8 <_ZN9LineTrace4initEv+0x1b4>)
 80038a8:	484a      	ldr	r0, [pc, #296]	; (80039d4 <_ZN9LineTrace4initEv+0x1a0>)
 80038aa:	f7fd fe9d 	bl	80015e8 <sd_read_array_float>
	setGainFast(temp_kp_fast, temp_ki_fast, temp_kd_fast);
 80038ae:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80038b2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80038b6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80038ba:	eeb0 1a66 	vmov.f32	s2, s13
 80038be:	eef0 0a47 	vmov.f32	s1, s14
 80038c2:	eeb0 0a67 	vmov.f32	s0, s15
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f8bb 	bl	8003a42 <_ZN9LineTrace11setGainFastEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 80038cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038d0:	2201      	movs	r2, #1
 80038d2:	4946      	ldr	r1, [pc, #280]	; (80039ec <_ZN9LineTrace4initEv+0x1b8>)
 80038d4:	483f      	ldr	r0, [pc, #252]	; (80039d4 <_ZN9LineTrace4initEv+0x1a0>)
 80038d6:	f7fd fe87 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 80038da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038de:	2201      	movs	r2, #1
 80038e0:	4943      	ldr	r1, [pc, #268]	; (80039f0 <_ZN9LineTrace4initEv+0x1bc>)
 80038e2:	483c      	ldr	r0, [pc, #240]	; (80039d4 <_ZN9LineTrace4initEv+0x1a0>)
 80038e4:	f7fd fe80 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 80038e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ec:	2201      	movs	r2, #1
 80038ee:	4941      	ldr	r1, [pc, #260]	; (80039f4 <_ZN9LineTrace4initEv+0x1c0>)
 80038f0:	4838      	ldr	r0, [pc, #224]	; (80039d4 <_ZN9LineTrace4initEv+0x1a0>)
 80038f2:	f7fd fe79 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 80038f6:	f107 0320 	add.w	r3, r7, #32
 80038fa:	2201      	movs	r2, #1
 80038fc:	493e      	ldr	r1, [pc, #248]	; (80039f8 <_ZN9LineTrace4initEv+0x1c4>)
 80038fe:	4835      	ldr	r0, [pc, #212]	; (80039d4 <_ZN9LineTrace4initEv+0x1a0>)
 8003900:	f7fd fe72 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003904:	f107 031c 	add.w	r3, r7, #28
 8003908:	2201      	movs	r2, #1
 800390a:	493c      	ldr	r1, [pc, #240]	; (80039fc <_ZN9LineTrace4initEv+0x1c8>)
 800390c:	4831      	ldr	r0, [pc, #196]	; (80039d4 <_ZN9LineTrace4initEv+0x1a0>)
 800390e:	f7fd fe6b 	bl	80015e8 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003912:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003916:	eeb0 0a67 	vmov.f32	s0, s15
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f904 	bl	8003b28 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003920:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003924:	eeb0 0a67 	vmov.f32	s0, s15
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f90d 	bl	8003b48 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 800392e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003932:	eeb0 0a67 	vmov.f32	s0, s15
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f916 	bl	8003b68 <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 800393c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003940:	eeb0 0a67 	vmov.f32	s0, s15
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f91f 	bl	8003b88 <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 800394a:	edd7 7a07 	vldr	s15, [r7, #28]
 800394e:	eeb0 0a67 	vmov.f32	s0, s15
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f928 	bl	8003ba8 <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003958:	f107 0318 	add.w	r3, r7, #24
 800395c:	2201      	movs	r2, #1
 800395e:	4928      	ldr	r1, [pc, #160]	; (8003a00 <_ZN9LineTrace4initEv+0x1cc>)
 8003960:	481c      	ldr	r0, [pc, #112]	; (80039d4 <_ZN9LineTrace4initEv+0x1a0>)
 8003962:	f7fd fe41 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003966:	f107 0314 	add.w	r3, r7, #20
 800396a:	2201      	movs	r2, #1
 800396c:	4925      	ldr	r1, [pc, #148]	; (8003a04 <_ZN9LineTrace4initEv+0x1d0>)
 800396e:	4819      	ldr	r0, [pc, #100]	; (80039d4 <_ZN9LineTrace4initEv+0x1a0>)
 8003970:	f7fd fe3a 	bl	80015e8 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003974:	edd7 7a06 	vldr	s15, [r7, #24]
 8003978:	ed97 7a05 	vldr	s14, [r7, #20]
 800397c:	eef0 0a47 	vmov.f32	s1, s14
 8003980:	eeb0 0a67 	vmov.f32	s0, s15
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f96f 	bl	8003c68 <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003996:	f107 0310 	add.w	r3, r7, #16
 800399a:	2201      	movs	r2, #1
 800399c:	491a      	ldr	r1, [pc, #104]	; (8003a08 <_ZN9LineTrace4initEv+0x1d4>)
 800399e:	480d      	ldr	r0, [pc, #52]	; (80039d4 <_ZN9LineTrace4initEv+0x1a0>)
 80039a0:	f7fd fe22 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 80039a4:	f107 030c 	add.w	r3, r7, #12
 80039a8:	2201      	movs	r2, #1
 80039aa:	4918      	ldr	r1, [pc, #96]	; (8003a0c <_ZN9LineTrace4initEv+0x1d8>)
 80039ac:	4809      	ldr	r0, [pc, #36]	; (80039d4 <_ZN9LineTrace4initEv+0x1a0>)
 80039ae:	f7fd fe1b 	bl	80015e8 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 80039b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80039b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80039ba:	eef0 0a47 	vmov.f32	s1, s14
 80039be:	eeb0 0a67 	vmov.f32	s0, s15
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f96a 	bl	8003c9c <_ZN9LineTrace13setMaxAccDec2Eff>
}
 80039c8:	bf00      	nop
 80039ca:	3748      	adds	r7, #72	; 0x48
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	08019d58 	.word	0x08019d58
 80039d4:	08019d60 	.word	0x08019d60
 80039d8:	08019d68 	.word	0x08019d68
 80039dc:	08019d70 	.word	0x08019d70
 80039e0:	08019d78 	.word	0x08019d78
 80039e4:	08019d84 	.word	0x08019d84
 80039e8:	08019d90 	.word	0x08019d90
 80039ec:	08019d9c 	.word	0x08019d9c
 80039f0:	08019da8 	.word	0x08019da8
 80039f4:	08019db4 	.word	0x08019db4
 80039f8:	08019dc0 	.word	0x08019dc0
 80039fc:	08019dcc 	.word	0x08019dcc
 8003a00:	08019dd8 	.word	0x08019dd8
 8003a04:	08019de0 	.word	0x08019de0
 8003a08:	08019de8 	.word	0x08019de8
 8003a0c:	08019df4 	.word	0x08019df4

08003a10 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a1c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003a20:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	625a      	str	r2, [r3, #36]	; 0x24
	ki_ = ki;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	62da      	str	r2, [r3, #44]	; 0x2c
	kd_ = kd;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a36:	bf00      	nop
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <_ZN9LineTrace11setGainFastEfff>:

void LineTrace::setGainFast(float kp, float ki, float kd)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b085      	sub	sp, #20
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a4e:	edc7 0a01 	vstr	s1, [r7, #4]
 8003a52:	ed87 1a00 	vstr	s2, [r7]
	kp_fast_ = kp;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	631a      	str	r2, [r3, #48]	; 0x30
	ki_fast_ = ki;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	639a      	str	r2, [r3, #56]	; 0x38
	kd_fast_ = kd;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003a68:	bf00      	nop
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	return kp_;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	ee07 3a90 	vmov	s15, r3
}
 8003a84:	eeb0 0a67 	vmov.f32	s0, s15
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
	return ki_;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	ee07 3a90 	vmov	s15, r3
}
 8003aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
	return kd_;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abc:	ee07 3a90 	vmov	s15, r3
}
 8003ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <_ZN9LineTrace9getKpFastEv>:

float LineTrace::getKpFast()
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
	return kp_fast_;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	ee07 3a90 	vmov	s15, r3
}
 8003ade:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <_ZN9LineTrace9getKiFastEv>:

float LineTrace::getKiFast()
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
	return ki_fast_;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af8:	ee07 3a90 	vmov	s15, r3
}
 8003afc:	eeb0 0a67 	vmov.f32	s0, s15
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <_ZN9LineTrace9getKdFastEv>:

float LineTrace::getKdFast()
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
	return kd_fast_;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b16:	ee07 3a90 	vmov	s15, r3
}
 8003b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <_ZN9LineTrace17setTargetVelocityEf>:
{
	normal_ratio_ = ratio;
}

void LineTrace::setTargetVelocity(float velocity)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <_ZN9LineTrace17getTargetVelocityEv>:
float LineTrace::getTargetVelocity()
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003bd6:	ee07 3a90 	vmov	s15, r3
}
 8003bda:	eeb0 0a67 	vmov.f32	s0, s15
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003bf6:	ee07 3a90 	vmov	s15, r3
}
 8003bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003c16:	ee07 3a90 	vmov	s15, r3
}
 8003c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003c36:	ee07 3a90 	vmov	s15, r3
}
 8003c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003c56:	ee07 3a90 	vmov	s15, r3
}
 8003c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <_ZN9LineTrace12setMaxAccDecEff>:
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c74:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003c7e:	3338      	adds	r3, #56	; 0x38
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003c8a:	333c      	adds	r3, #60	; 0x3c
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	601a      	str	r2, [r3, #0]
}
 8003c90:	bf00      	nop
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <_ZN9LineTrace13setMaxAccDec2Eff>:
void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ca8:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003cb2:	3340      	adds	r3, #64	; 0x40
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003cbe:	3344      	adds	r3, #68	; 0x44
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	601a      	str	r2, [r3, #0]
}
 8003cc4:	bf00      	nop
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003cde:	3338      	adds	r3, #56	; 0x38
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	ee07 3a90 	vmov	s15, r3
}
 8003ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d02:	3344      	adds	r3, #68	; 0x44
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	ee07 3a90 	vmov	s15, r3
}
 8003d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <_ZN9LineTrace10getMaxAcc2Ev>:
float LineTrace::getMaxAcc2()
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d26:	3340      	adds	r3, #64	; 0x40
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	ee07 3a90 	vmov	s15, r3
}
 8003d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d4a:	333c      	adds	r3, #60	; 0x3c
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	ee07 3a90 	vmov	s15, r3
}
 8003d52:	eeb0 0a67 	vmov.f32	s0, s15
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <_ZN9LineTrace4flipEv>:
void LineTrace::flip()
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	//calcAngle();

	if(excution_flag_ == true){
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 8143 	beq.w	8003ffa <_ZN9LineTrace4flipEv+0x29a>
		// ---- line following processing -----//
		//pidTrace();
		//pidAngularVelocityTrace();
		steeringAngleTrace();
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7fe ff3b 	bl	8002bf0 <_ZN9LineTrace18steeringAngleTraceEv>


		if(isTargetDistance(10) == true){
 8003d7a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 faf2 	bl	8004368 <_ZN9LineTrace16isTargetDistanceEf>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d028      	beq.n	8003ddc <_ZN9LineTrace4flipEv+0x7c>
			// ---- Store Logs ------//
			storeLogs();
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fa50 	bl	8004230 <_ZN9LineTrace9storeLogsEv>

			// -------- Detect Robot stabilization ------//
#ifdef REVERSE
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x01) == 0x01){ // Stabilizing and side sensor is black
#else
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){ // Stabilizing and side sensor is black
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff fcdd 	bl	8003750 <_ZN9LineTrace8isStableEv>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00c      	beq.n	8003db6 <_ZN9LineTrace4flipEv+0x56>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f001 fb99 	bl	80054d8 <_ZN10SideSensor9getStatusEv>
 8003da6:	4603      	mov	r3, r0
 8003da8:	43db      	mvns	r3, r3
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d101      	bne.n	8003db6 <_ZN9LineTrace4flipEv+0x56>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <_ZN9LineTrace4flipEv+0x58>
 8003db6:	2300      	movs	r3, #0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d005      	beq.n	8003dc8 <_ZN9LineTrace4flipEv+0x68>
#endif
				stable_flag_ = true;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003dc2:	3333      	adds	r3, #51	; 0x33
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fd fb6b 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f001 f8f3 	bl	8004fc2 <_ZN8Odometry13clearPotitionEv>
		}

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7ff fc17 	bl	8003610 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fe ff8e 	bl	8002d04 <_ZN9LineTrace11isCrossLineEv>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <_ZN9LineTrace4flipEv+0xa2>
			side_sensor_->enableIgnore();
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f001 fb98 	bl	8005528 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fd fb7e 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f001 fba8 	bl	800555c <_ZN10SideSensor13getIgnoreFlagEv>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00f      	beq.n	8003e32 <_ZN9LineTrace4flipEv+0xd2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fd fb62 	bl	80014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003e1c:	eeb0 7a40 	vmov.f32	s14, s0
 8003e20:	eddf 7a78 	vldr	s15, [pc, #480]	; 8004004 <_ZN9LineTrace4flipEv+0x2a4>
 8003e24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e2c:	db01      	blt.n	8003e32 <_ZN9LineTrace4flipEv+0xd2>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <_ZN9LineTrace4flipEv+0xd4>
 8003e32:	2300      	movs	r3, #0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d004      	beq.n	8003e42 <_ZN9LineTrace4flipEv+0xe2>
			side_sensor_->disableIgnore();
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f001 fb80 	bl	8005542 <_ZN10SideSensor13disableIgnoreEv>

		// ------- Store side line distance ------//
#ifdef REVERSE
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x01) == 0x01){ //stabilizing and side sensor is white
#else
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x02) == 0x02){ //stabilizing and side sensor is white
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e48:	3333      	adds	r3, #51	; 0x33
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00b      	beq.n	8003e68 <_ZN9LineTrace4flipEv+0x108>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f001 fb3f 	bl	80054d8 <_ZN10SideSensor9getStatusEv>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d101      	bne.n	8003e68 <_ZN9LineTrace4flipEv+0x108>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <_ZN9LineTrace4flipEv+0x10a>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d020      	beq.n	8003eb0 <_ZN9LineTrace4flipEv+0x150>
#endif
			//storeSideLineDistance();
			if(mode_selector_ == FIRST_RUNNING){
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003e74:	3358      	adds	r3, #88	; 0x58
 8003e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d103      	bne.n	8003e86 <_ZN9LineTrace4flipEv+0x126>
				storeSideLineDistance();
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 facb 	bl	800441a <_ZN9LineTrace21storeSideLineDistanceEv>
 8003e84:	e008      	b.n	8003e98 <_ZN9LineTrace4flipEv+0x138>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fb70 	bl	800456c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				correction_check_cnt_ = 0;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e92:	3348      	adds	r3, #72	; 0x48
 8003e94:	2200      	movs	r2, #0
 8003e96:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e9e:	3333      	adds	r3, #51	; 0x33
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003eaa:	3334      	adds	r3, #52	; 0x34
 8003eac:	2201      	movs	r2, #1
 8003eae:	701a      	strb	r2, [r3, #0]
		}

		if(stable_flag_ == true) led_.LR(-1, 1);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003eb6:	3333      	adds	r3, #51	; 0x33
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d008      	beq.n	8003ed0 <_ZN9LineTrace4flipEv+0x170>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	330c      	adds	r3, #12
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fe f863 	bl	8001f94 <_ZN3LED2LREaa>
 8003ece:	e007      	b.n	8003ee0 <_ZN9LineTrace4flipEv+0x180>
		else led_.LR(-1, 0);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	330c      	adds	r3, #12
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f04f 31ff 	mov.w	r1, #4294967295
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe f85a 	bl	8001f94 <_ZN3LED2LREaa>

		// ------ All sideline storing -------//
#ifdef REVERSE
		if(all_sideline_flag_ == false && (side_sensor_->getStatus() & 0x01) == 0x01){
#else
		if(all_sideline_flag_ == false && (side_sensor_->getStatus() & 0x02) == 0x02){
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003ee6:	334a      	adds	r3, #74	; 0x4a
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	f083 0301 	eor.w	r3, r3, #1
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00b      	beq.n	8003f0c <_ZN9LineTrace4flipEv+0x1ac>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f001 faed 	bl	80054d8 <_ZN10SideSensor9getStatusEv>
 8003efe:	4603      	mov	r3, r0
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d101      	bne.n	8003f0c <_ZN9LineTrace4flipEv+0x1ac>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e000      	b.n	8003f0e <_ZN9LineTrace4flipEv+0x1ae>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d011      	beq.n	8003f36 <_ZN9LineTrace4flipEv+0x1d6>
#endif
			all_sideline_flag_ = true;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f18:	334a      	adds	r3, #74	; 0x4a
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	701a      	strb	r2, [r3, #0]

			if(mode_selector_ == FIRST_RUNNING){
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f24:	3358      	adds	r3, #88	; 0x58
 8003f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d120      	bne.n	8003f70 <_ZN9LineTrace4flipEv+0x210>
				storeAllSideLineDistance();
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 faac 	bl	800448c <_ZN9LineTrace24storeAllSideLineDistanceEv>
 8003f34:	e01c      	b.n	8003f70 <_ZN9LineTrace4flipEv+0x210>
			}
		}
#ifdef REVERSE
		else if(all_sideline_flag_ == true && (~(side_sensor_->getStatus()) & 0x01) == 0x01){
#else
		else if(all_sideline_flag_ == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f3c:	334a      	adds	r3, #74	; 0x4a
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00c      	beq.n	8003f5e <_ZN9LineTrace4flipEv+0x1fe>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f001 fac5 	bl	80054d8 <_ZN10SideSensor9getStatusEv>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	43db      	mvns	r3, r3
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d101      	bne.n	8003f5e <_ZN9LineTrace4flipEv+0x1fe>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <_ZN9LineTrace4flipEv+0x200>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <_ZN9LineTrace4flipEv+0x210>
#endif
			all_sideline_flag_ = false;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f6a:	334a      	adds	r3, #74	; 0x4a
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	701a      	strb	r2, [r3, #0]
		}


		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fe fb09 	bl	800258c <_ZN10LineSensor13emergencyStopEv>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <_ZN9LineTrace4flipEv+0x232>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	eddf 0a20 	vldr	s1, [pc, #128]	; 8004008 <_ZN9LineTrace4flipEv+0x2a8>
 8003f88:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8004008 <_ZN9LineTrace4flipEv+0x2a8>
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f001 fd57 	bl	8005a40 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}

		correction_check_cnt_++;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f98:	3348      	adds	r3, #72	; 0x48
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003fa6:	3348      	adds	r3, #72	; 0x48
 8003fa8:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003fb0:	3348      	adds	r3, #72	; 0x48
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	f242 720f 	movw	r2, #9999	; 0x270f
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d906      	bls.n	8003fca <_ZN9LineTrace4flipEv+0x26a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003fc2:	3348      	adds	r3, #72	; 0x48
 8003fc4:	f242 7210 	movw	r2, #10000	; 0x2710
 8003fc8:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 80) led_.LR(-1, 1);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003fd0:	3348      	adds	r3, #72	; 0x48
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	2b50      	cmp	r3, #80	; 0x50
 8003fd6:	d808      	bhi.n	8003fea <_ZN9LineTrace4flipEv+0x28a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	330c      	adds	r3, #12
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f04f 31ff 	mov.w	r1, #4294967295
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fd ffd6 	bl	8001f94 <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 8003fe8:	e007      	b.n	8003ffa <_ZN9LineTrace4flipEv+0x29a>
		else led_.LR(-1, 0);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	330c      	adds	r3, #12
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fd ffcd 	bl	8001f94 <_ZN3LED2LREaa>
}
 8003ffa:	bf00      	nop
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	43480000 	.word	0x43480000
 8004008:	00000000 	.word	0x00000000

0800400c <_ZN9LineTrace5startEv>:
		odometry_->clearPotition();
	}
}

void LineTrace::start()
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	i_reset_flag_ = true;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	//velocity_ctrl_->start();
	side_sensor_->resetWhiteLineCnt();
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	4618      	mov	r0, r3
 800402a:	f001 fa6d 	bl	8005508 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004034:	332c      	adds	r3, #44	; 0x2c
 8004036:	2200      	movs	r2, #0
 8004038:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004040:	332e      	adds	r3, #46	; 0x2e
 8004042:	2200      	movs	r2, #0
 8004044:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800404c:	3330      	adds	r3, #48	; 0x30
 800404e:	2200      	movs	r2, #0
 8004050:	801a      	strh	r2, [r3, #0]
}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af02      	add	r7, sp, #8
 8004062:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	velocity_ctrl_->stop();
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	4618      	mov	r0, r3
 8004072:	f001 fd51 	bl	8005b18 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	330c      	adds	r3, #12
 800407a:	2201      	movs	r2, #1
 800407c:	f04f 31ff 	mov.w	r1, #4294967295
 8004080:	4618      	mov	r0, r3
 8004082:	f7fd ff87 	bl	8001f94 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800408c:	3358      	adds	r3, #88	; 0x58
 800408e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d107      	bne.n	80040a6 <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69d8      	ldr	r0, [r3, #28]
 800409a:	4b23      	ldr	r3, [pc, #140]	; (8004128 <_ZN9LineTrace4stopEv+0xcc>)
 800409c:	4a23      	ldr	r2, [pc, #140]	; (800412c <_ZN9LineTrace4stopEv+0xd0>)
 800409e:	4924      	ldr	r1, [pc, #144]	; (8004130 <_ZN9LineTrace4stopEv+0xd4>)
 80040a0:	f000 fc63 	bl	800496a <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 80040a4:	e006      	b.n	80040b4 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69d8      	ldr	r0, [r3, #28]
 80040aa:	4b22      	ldr	r3, [pc, #136]	; (8004134 <_ZN9LineTrace4stopEv+0xd8>)
 80040ac:	4a22      	ldr	r2, [pc, #136]	; (8004138 <_ZN9LineTrace4stopEv+0xdc>)
 80040ae:	4920      	ldr	r1, [pc, #128]	; (8004130 <_ZN9LineTrace4stopEv+0xd4>)
 80040b0:	f000 fc7c 	bl	80049ac <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80040ba:	335c      	adds	r3, #92	; 0x5c
 80040bc:	2200      	movs	r2, #0
 80040be:	9200      	str	r2, [sp, #0]
 80040c0:	2264      	movs	r2, #100	; 0x64
 80040c2:	491e      	ldr	r1, [pc, #120]	; (800413c <_ZN9LineTrace4stopEv+0xe0>)
 80040c4:	481a      	ldr	r0, [pc, #104]	; (8004130 <_ZN9LineTrace4stopEv+0xd4>)
 80040c6:	f7fd fa29 	bl	800151c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80040d0:	33ec      	adds	r3, #236	; 0xec
 80040d2:	2200      	movs	r2, #0
 80040d4:	9200      	str	r2, [sp, #0]
 80040d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040da:	4919      	ldr	r1, [pc, #100]	; (8004140 <_ZN9LineTrace4stopEv+0xe4>)
 80040dc:	4814      	ldr	r0, [pc, #80]	; (8004130 <_ZN9LineTrace4stopEv+0xd4>)
 80040de:	f7fd fa1d 	bl	800151c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040e8:	338c      	adds	r3, #140	; 0x8c
 80040ea:	2200      	movs	r2, #0
 80040ec:	9200      	str	r2, [sp, #0]
 80040ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040f2:	4914      	ldr	r1, [pc, #80]	; (8004144 <_ZN9LineTrace4stopEv+0xe8>)
 80040f4:	480e      	ldr	r0, [pc, #56]	; (8004130 <_ZN9LineTrace4stopEv+0xd4>)
 80040f6:	f7fd fa11 	bl	800151c <sd_write_array_float>

	led_.LR(-1, 0);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	330c      	adds	r3, #12
 80040fe:	2200      	movs	r2, #0
 8004100:	f04f 31ff 	mov.w	r1, #4294967295
 8004104:	4618      	mov	r0, r3
 8004106:	f7fd ff45 	bl	8001f94 <_ZN3LED2LREaa>

	logger_->resetIdx();
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fcda 	bl	8004ac8 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fc88 	bl	8004a2e <_ZN6Logger10resetLogs2Ev>
}
 800411e:	bf00      	nop
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	08019d20 	.word	0x08019d20
 800412c:	08019d2c 	.word	0x08019d2c
 8004130:	08019d14 	.word	0x08019d14
 8004134:	08019e00 	.word	0x08019e00
 8004138:	08019e0c 	.word	0x08019e0c
 800413c:	08019d3c 	.word	0x08019d3c
 8004140:	08019d4c 	.word	0x08019d4c
 8004144:	08019e1c 	.word	0x08019e1c

08004148 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8004150:	2300      	movs	r3, #0
 8004152:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8004154:	2300      	movs	r3, #0
 8004156:	737b      	strb	r3, [r7, #13]
	start();
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff ff57 	bl	800400c <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 800415e:	7b7b      	ldrb	r3, [r7, #13]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d15b      	bne.n	800421c <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 8004164:	89fb      	ldrh	r3, [r7, #14]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <_ZN9LineTrace7runningEv+0x28>
 800416a:	2b0a      	cmp	r3, #10
 800416c:	d030      	beq.n	80041d0 <_ZN9LineTrace7runningEv+0x88>
 800416e:	e054      	b.n	800421a <_ZN9LineTrace7runningEv+0xd2>
		case 0:
#ifdef REVERSE
			if(side_sensor_->getWhiteLineCntL() == 1){
#else
			if(side_sensor_->getWhiteLineCntR() == 1){
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	4618      	mov	r0, r3
 8004176:	f001 f9bb 	bl	80054f0 <_ZN10SideSensor16getWhiteLineCntREv>
 800417a:	4603      	mov	r3, r0
 800417c:	2b01      	cmp	r3, #1
 800417e:	bf0c      	ite	eq
 8004180:	2301      	moveq	r3, #1
 8004182:	2300      	movne	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d044      	beq.n	8004214 <_ZN9LineTrace7runningEv+0xcc>
				}
				else{ // Other than first running
					startVelocityPlay();
				}
				*/
				loggerStart();
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fe fd8e 	bl	8002cac <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004196:	3358      	adds	r3, #88	; 0x58
 8004198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f89f 	bl	80042e4 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fd f9a7 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fd f985 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	330c      	adds	r3, #12
 80041be:	f04f 32ff 	mov.w	r2, #4294967295
 80041c2:	2100      	movs	r1, #0
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fd fee5 	bl	8001f94 <_ZN3LED2LREaa>
				stage = 10;
 80041ca:	230a      	movs	r3, #10
 80041cc:	81fb      	strh	r3, [r7, #14]
			}

			break;
 80041ce:	e021      	b.n	8004214 <_ZN9LineTrace7runningEv+0xcc>

		case 10:
#ifdef REVERSE
			if(side_sensor_->getWhiteLineCntL() == 2){
#else
			if(side_sensor_->getWhiteLineCntR() == 2){
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f001 f98b 	bl	80054f0 <_ZN10SideSensor16getWhiteLineCntREv>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b02      	cmp	r3, #2
 80041de:	bf0c      	ite	eq
 80041e0:	2301      	moveq	r3, #1
 80041e2:	2300      	movne	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d016      	beq.n	8004218 <_ZN9LineTrace7runningEv+0xd0>
#endif
				loggerStop();
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fe fd79 	bl	8002ce2 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f88a 	bl	800430a <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80041f6:	2064      	movs	r0, #100	; 0x64
 80041f8:	f005 fb8a 	bl	8009910 <HAL_Delay>

				setTargetVelocity(0);
 80041fc:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800422c <_ZN9LineTrace7runningEv+0xe4>
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff fc91 	bl	8003b28 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8004206:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800420a:	f005 fb81 	bl	8009910 <HAL_Delay>

				goal_flag = true;
 800420e:	2301      	movs	r3, #1
 8004210:	737b      	strb	r3, [r7, #13]

			}

			break;
 8004212:	e001      	b.n	8004218 <_ZN9LineTrace7runningEv+0xd0>
			break;
 8004214:	bf00      	nop
 8004216:	e7a2      	b.n	800415e <_ZN9LineTrace7runningEv+0x16>
			break;
 8004218:	bf00      	nop
	while(goal_flag == false){
 800421a:	e7a0      	b.n	800415e <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7ff ff1d 	bl	800405c <_ZN9LineTrace4stopEv>
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	00000000 	.word	0x00000000

08004230 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8004230:	b590      	push	{r4, r7, lr}
 8004232:	ed2d 8b02 	vpush	{d8}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8004242:	2b00      	cmp	r3, #0
 8004244:	d046      	beq.n	80042d4 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800424c:	3358      	adds	r3, #88	; 0x58
 800424e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d11c      	bne.n	8004290 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69dc      	ldr	r4, [r3, #28]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	4618      	mov	r0, r3
 8004260:	f7fd f8f5 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8004264:	eeb0 8a40 	vmov.f32	s16, s0
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fe96 	bl	8004f9e <_ZN8Odometry8getThetaEv>
 8004272:	ec53 2b10 	vmov	r2, r3, d0
 8004276:	4610      	mov	r0, r2
 8004278:	4619      	mov	r1, r3
 800427a:	f7fc fccd 	bl	8000c18 <__aeabi_d2f>
 800427e:	4603      	mov	r3, r0
 8004280:	ee00 3a90 	vmov	s1, r3
 8004284:	eeb0 0a48 	vmov.f32	s0, s16
 8004288:	4620      	mov	r0, r4
 800428a:	f000 fab2 	bl	80047f2 <_ZN6Logger21storeDistanceAndThetaEff>
 800428e:	e01b      	b.n	80042c8 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(velocity_ctrl_->getCurrentVelocity(), odometry_->getTheta());
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69dc      	ldr	r4, [r3, #28]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	4618      	mov	r0, r3
 800429a:	f001 fc59 	bl	8005b50 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 800429e:	eeb0 8a40 	vmov.f32	s16, s0
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fe79 	bl	8004f9e <_ZN8Odometry8getThetaEv>
 80042ac:	ec53 2b10 	vmov	r2, r3, d0
 80042b0:	4610      	mov	r0, r2
 80042b2:	4619      	mov	r1, r3
 80042b4:	f7fc fcb0 	bl	8000c18 <__aeabi_d2f>
 80042b8:	4603      	mov	r3, r0
 80042ba:	ee00 3a90 	vmov	s1, r3
 80042be:	eeb0 0a48 	vmov.f32	s0, s16
 80042c2:	4620      	mov	r0, r4
 80042c4:	f000 fadc 	bl	8004880 <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <_ZN9LineTrace9storeLogsEv+0xb0>)
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	3301      	adds	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	4b03      	ldr	r3, [pc, #12]	; (80042e0 <_ZN9LineTrace9storeLogsEv+0xb0>)
 80042d2:	801a      	strh	r2, [r3, #0]
	}
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	ecbd 8b02 	vpop	{d8}
 80042de:	bd90      	pop	{r4, r7, pc}
 80042e0:	2000029c 	.word	0x2000029c

080042e4 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fd f8e7 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80042fc:	3354      	adds	r3, #84	; 0x54
 80042fe:	2201      	movs	r2, #1
 8004300:	701a      	strb	r2, [r3, #0]
}
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004318:	3354      	adds	r3, #84	; 0x54
 800431a:	2200      	movs	r2, #0
 800431c:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004324:	3356      	adds	r3, #86	; 0x56
 8004326:	2200      	movs	r2, #0
 8004328:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004330:	3310      	adds	r3, #16
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004356:	3358      	adds	r3, #88	; 0x58
 8004358:	887a      	ldrh	r2, [r7, #2]
 800435a:	801a      	strh	r2, [r3, #0]
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8004374:	2300      	movs	r3, #0
 8004376:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	4618      	mov	r0, r3
 800437e:	f7fd f866 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8004382:	eeb0 7a40 	vmov.f32	s14, s0
 8004386:	edd7 7a00 	vldr	s15, [r7]
 800438a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800438e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004392:	bf94      	ite	ls
 8004394:	2301      	movls	r3, #1
 8004396:	2300      	movhi	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 80043ac:	b590      	push	{r4, r7, lr}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	695a      	ldr	r2, [r3, #20]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80043be:	332c      	adds	r3, #44	; 0x2c
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	461c      	mov	r4, r3
 80043c4:	4610      	mov	r0, r2
 80043c6:	f7fd f851 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 80043ca:	eef0 7a40 	vmov.f32	s15, s0
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 80043d4:	3316      	adds	r3, #22
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	3304      	adds	r3, #4
 80043dc:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80043e6:	332c      	adds	r3, #44	; 0x2c
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	3301      	adds	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80043f4:	332c      	adds	r3, #44	; 0x2c
 80043f6:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80043fe:	332c      	adds	r3, #44	; 0x2c
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	2b63      	cmp	r3, #99	; 0x63
 8004404:	d905      	bls.n	8004412 <_ZN9LineTrace22storeCrossLineDistanceEv+0x66>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800440c:	332c      	adds	r3, #44	; 0x2c
 800440e:	2263      	movs	r2, #99	; 0x63
 8004410:	801a      	strh	r2, [r3, #0]
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	bd90      	pop	{r4, r7, pc}

0800441a <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 800441a:	b590      	push	{r4, r7, lr}
 800441c:	b083      	sub	sp, #12
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800442c:	332e      	adds	r3, #46	; 0x2e
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	461c      	mov	r4, r3
 8004432:	4610      	mov	r0, r2
 8004434:	f7fd f81a 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8004438:	eef0 7a40 	vmov.f32	s15, s0
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8004442:	333a      	adds	r3, #58	; 0x3a
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	3304      	adds	r3, #4
 800444a:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004454:	332e      	adds	r3, #46	; 0x2e
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	3301      	adds	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004462:	332e      	adds	r3, #46	; 0x2e
 8004464:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800446c:	332e      	adds	r3, #46	; 0x2e
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004474:	d306      	bcc.n	8004484 <_ZN9LineTrace21storeSideLineDistanceEv+0x6a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800447c:	332e      	adds	r3, #46	; 0x2e
 800447e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004482:	801a      	strh	r2, [r3, #0]
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	bd90      	pop	{r4, r7, pc}

0800448c <_ZN9LineTrace24storeAllSideLineDistanceEv>:
void LineTrace::storeAllSideLineDistance()
{
 800448c:	b590      	push	{r4, r7, lr}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
	all_sideline_distance_[all_sideline_idx_] = encoder_->getTotalDistance();
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	695a      	ldr	r2, [r3, #20]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800449e:	3330      	adds	r3, #48	; 0x30
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	461c      	mov	r4, r3
 80044a4:	4610      	mov	r0, r2
 80044a6:	f7fc ffe1 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 80044aa:	eef0 7a40 	vmov.f32	s15, s0
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	f504 534d 	add.w	r3, r4, #13120	; 0x3340
 80044b4:	3322      	adds	r3, #34	; 0x22
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	3304      	adds	r3, #4
 80044bc:	edc3 7a00 	vstr	s15, [r3]
	all_sideline_idx_++;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80044c6:	3330      	adds	r3, #48	; 0x30
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	3301      	adds	r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80044d4:	3330      	adds	r3, #48	; 0x30
 80044d6:	801a      	strh	r2, [r3, #0]

	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80044de:	3330      	adds	r3, #48	; 0x30
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044e6:	d306      	bcc.n	80044f6 <_ZN9LineTrace24storeAllSideLineDistanceEv+0x6a>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80044ee:	3330      	adds	r3, #48	; 0x30
 80044f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80044f4:	801a      	strh	r2, [r3, #0]
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd90      	pop	{r4, r7, pc}

080044fe <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6959      	ldr	r1, [r3, #20]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004510:	332c      	adds	r3, #44	; 0x2c
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800451a:	3316      	adds	r3, #22
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	3304      	adds	r3, #4
 8004522:	edd3 7a00 	vldr	s15, [r3]
 8004526:	eeb0 0a67 	vmov.f32	s0, s15
 800452a:	4608      	mov	r0, r1
 800452c:	f7fc ffad 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004536:	332c      	adds	r3, #44	; 0x2c
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	3301      	adds	r3, #1
 800453c:	b29a      	uxth	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004544:	332c      	adds	r3, #44	; 0x2c
 8004546:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800454e:	332c      	adds	r3, #44	; 0x2c
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	2b63      	cmp	r3, #99	; 0x63
 8004554:	d905      	bls.n	8004562 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x64>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800455c:	332c      	adds	r3, #44	; 0x2c
 800455e:	2263      	movs	r2, #99	; 0x63
 8004560:	801a      	strh	r2, [r3, #0]

}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8004574:	2300      	movs	r3, #0
 8004576:	82fb      	strh	r3, [r7, #22]
 8004578:	8afb      	ldrh	r3, [r7, #22]
 800457a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800457e:	d239      	bcs.n	80045f4 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
		float temp_sideline_distance = sideline_distance_[i];
 8004580:	8afb      	ldrh	r3, [r7, #22]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8004588:	333a      	adds	r3, #58	; 0x3a
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	3304      	adds	r3, #4
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	4618      	mov	r0, r3
 800459a:	f7fc ff67 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 800459e:	eeb0 7a40 	vmov.f32	s14, s0
 80045a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80045a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045aa:	eeb0 0a67 	vmov.f32	s0, s15
 80045ae:	f7fe f843 	bl	8002638 <_ZSt3absf>
 80045b2:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 80045b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80045ba:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800461c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb0>
 80045be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c6:	d811      	bhi.n	80045ec <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x80>
			encoder_->setTotalDistance(sideline_distance_[i]);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6959      	ldr	r1, [r3, #20]
 80045cc:	8afb      	ldrh	r3, [r7, #22]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80045d4:	333a      	adds	r3, #58	; 0x3a
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	3304      	adds	r3, #4
 80045dc:	edd3 7a00 	vldr	s15, [r3]
 80045e0:	eeb0 0a67 	vmov.f32	s0, s15
 80045e4:	4608      	mov	r0, r1
 80045e6:	f7fc ff50 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
			break;
 80045ea:	e003      	b.n	80045f4 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80045ec:	8afb      	ldrh	r3, [r7, #22]
 80045ee:	3301      	adds	r3, #1
 80045f0:	82fb      	strh	r3, [r7, #22]
 80045f2:	e7c1      	b.n	8004578 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80045fa:	332e      	adds	r3, #46	; 0x2e
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004602:	d306      	bcc.n	8004612 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa6>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800460a:	332e      	adds	r3, #46	; 0x2e
 800460c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004610:	801a      	strh	r2, [r3, #0]

}
 8004612:	bf00      	nop
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	42a00000 	.word	0x42a00000

08004620 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800462e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004632:	2200      	movs	r2, #0
 8004634:	701a      	strb	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800463c:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004640:	2200      	movs	r2, #0
 8004642:	801a      	strh	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800464a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800464e:	2200      	movs	r2, #0
 8004650:	801a      	strh	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004658:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800465c:	2200      	movs	r2, #0
 800465e:	801a      	strh	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4618      	mov	r0, r3
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
	...

08004670 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004678:	2300      	movs	r3, #0
 800467a:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 800467c:	f7fd f840 	bl	8001700 <sd_mount>
 8004680:	4603      	mov	r3, r0
 8004682:	2b01      	cmp	r3, #1
 8004684:	bf0c      	ite	eq
 8004686:	2301      	moveq	r3, #1
 8004688:	2300      	movne	r3, #0
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d016      	beq.n	80046be <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8004690:	f7fc fd06 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004694:	2100      	movs	r1, #0
 8004696:	2000      	movs	r0, #0
 8004698:	f7fc fd12 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800469c:	4815      	ldr	r0, [pc, #84]	; (80046f4 <_ZN6Logger10sdCardInitEv+0x84>)
 800469e:	f7fc fd3a 	bl	8001116 <lcd_printf>
	  lcd_locate(0,1);
 80046a2:	2101      	movs	r1, #1
 80046a4:	2000      	movs	r0, #0
 80046a6:	f7fc fd0b 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 80046aa:	4813      	ldr	r0, [pc, #76]	; (80046f8 <_ZN6Logger10sdCardInitEv+0x88>)
 80046ac:	f7fc fd33 	bl	8001116 <lcd_printf>
	  HAL_Delay(500);
 80046b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80046b4:	f005 f92c 	bl	8009910 <HAL_Delay>

	  ret = true;
 80046b8:	2301      	movs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
 80046bc:	e015      	b.n	80046ea <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 80046be:	f7fc fcef 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80046c2:	2100      	movs	r1, #0
 80046c4:	2000      	movs	r0, #0
 80046c6:	f7fc fcfb 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80046ca:	480a      	ldr	r0, [pc, #40]	; (80046f4 <_ZN6Logger10sdCardInitEv+0x84>)
 80046cc:	f7fc fd23 	bl	8001116 <lcd_printf>
	  lcd_locate(0,1);
 80046d0:	2101      	movs	r1, #1
 80046d2:	2000      	movs	r0, #0
 80046d4:	f7fc fcf4 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 80046d8:	4808      	ldr	r0, [pc, #32]	; (80046fc <_ZN6Logger10sdCardInitEv+0x8c>)
 80046da:	f7fc fd1c 	bl	8001116 <lcd_printf>
	  HAL_Delay(1000);
 80046de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046e2:	f005 f915 	bl	8009910 <HAL_Delay>

	  ret = false;
 80046e6:	2300      	movs	r3, #0
 80046e8:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	08019e2c 	.word	0x08019e2c
 80046f8:	08019e38 	.word	0x08019e38
 80046fc:	08019e40 	.word	0x08019e40

08004700 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004712:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d127      	bne.n	800476c <_ZN6Logger8storeLogEf+0x6c>
		store_data_float_[log_index_tim_] = data;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004722:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004738:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	3301      	adds	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004748:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 800474c:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004754:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d006      	beq.n	800476c <_ZN6Logger8storeLogEf+0x6c>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004764:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004768:	2200      	movs	r2, #0
 800476a:	801a      	strh	r2, [r3, #0]
	}
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800478a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d128      	bne.n	80047e6 <_ZN6Logger9storeLog2Ef+0x6e>
		store_data_float2_[log_index_tim2_] = data;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800479a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	3304      	adds	r3, #4
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80047b2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	3301      	adds	r3, #1
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80047c2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80047c6:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80047ce:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d006      	beq.n	80047e6 <_ZN6Logger9storeLog2Ef+0x6e>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80047de:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80047e2:	2200      	movs	r2, #0
 80047e4:	801a      	strh	r2, [r3, #0]
	}
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b085      	sub	sp, #20
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	ed87 0a02 	vstr	s0, [r7, #8]
 80047fe:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004808:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	3302      	adds	r3, #2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004820:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800482c:	3312      	adds	r3, #18
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800483c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	3301      	adds	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800484c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004850:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004858:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	f241 726f 	movw	r2, #5999	; 0x176f
 8004862:	4293      	cmp	r3, r2
 8004864:	d906      	bls.n	8004874 <_ZN6Logger21storeDistanceAndThetaEff+0x82>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800486c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004870:	2200      	movs	r2, #0
 8004872:	801a      	strh	r2, [r3, #0]
	//}
}
 8004874:	bf00      	nop
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	ed87 0a02 	vstr	s0, [r7, #8]
 800488c:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004896:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80048a2:	3322      	adds	r3, #34	; 0x22
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80048b2:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 80048be:	3352      	adds	r3, #82	; 0x52
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80048ce:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	3301      	adds	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80048de:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80048e2:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80048ea:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	f241 726f 	movw	r2, #5999	; 0x176f
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d906      	bls.n	8004906 <_ZN6Logger22storeDistanceAndTheta2Eff+0x86>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80048fe:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004902:	2200      	movs	r2, #0
 8004904:	801a      	strh	r2, [r3, #0]
	//}
}
 8004906:	bf00      	nop
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
	return store_distance_;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	3308      	adds	r3, #8
}
 800491e:	4618      	mov	r0, r3
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004938:	3348      	adds	r3, #72	; 0x48
}
 800493a:	4618      	mov	r0, r3
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b086      	sub	sp, #24
 800494a:	af02      	add	r7, sp, #8
 800494c:	60f8      	str	r0, [r7, #12]
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	9200      	str	r2, [sp, #0]
 8004958:	2201      	movs	r2, #1
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	68b8      	ldr	r0, [r7, #8]
 800495e:	f7fc fddd 	bl	800151c <sd_write_array_float>
}
 8004962:	bf00      	nop
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
{
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
}

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b086      	sub	sp, #24
 800496e:	af02      	add	r7, sp, #8
 8004970:	60f8      	str	r0, [r7, #12]
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	607a      	str	r2, [r7, #4]
 8004976:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	3308      	adds	r3, #8
 800497c:	2200      	movs	r2, #0
 800497e:	9200      	str	r2, [sp, #0]
 8004980:	f241 7270 	movw	r2, #6000	; 0x1770
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	68b8      	ldr	r0, [r7, #8]
 8004988:	f7fc fdc8 	bl	800151c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004992:	3348      	adds	r3, #72	; 0x48
 8004994:	2200      	movs	r2, #0
 8004996:	9200      	str	r2, [sp, #0]
 8004998:	f241 7270 	movw	r2, #6000	; 0x1770
 800499c:	6839      	ldr	r1, [r7, #0]
 800499e:	68b8      	ldr	r0, [r7, #8]
 80049a0:	f7fc fdbc 	bl	800151c <sd_write_array_float>
}
 80049a4:	bf00      	nop
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af02      	add	r7, sp, #8
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
 80049b8:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 80049c0:	3388      	adds	r3, #136	; 0x88
 80049c2:	2200      	movs	r2, #0
 80049c4:	9200      	str	r2, [sp, #0]
 80049c6:	f241 7270 	movw	r2, #6000	; 0x1770
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	68b8      	ldr	r0, [r7, #8]
 80049ce:	f7fc fda5 	bl	800151c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80049d8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80049dc:	2200      	movs	r2, #0
 80049de:	9200      	str	r2, [sp, #0]
 80049e0:	f241 7270 	movw	r2, #6000	; 0x1770
 80049e4:	6839      	ldr	r1, [r7, #0]
 80049e6:	68b8      	ldr	r0, [r7, #8]
 80049e8:	f7fc fd98 	bl	800151c <sd_write_array_float>
}
 80049ec:	bf00      	nop
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	3308      	adds	r3, #8
 8004a06:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a0a:	6879      	ldr	r1, [r7, #4]
 8004a0c:	68b8      	ldr	r0, [r7, #8]
 8004a0e:	f7fc fdeb 	bl	80015e8 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004a18:	3348      	adds	r3, #72	; 0x48
 8004a1a:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a1e:	6839      	ldr	r1, [r7, #0]
 8004a20:	68b8      	ldr	r0, [r7, #8]
 8004a22:	f7fc fde1 	bl	80015e8 <sd_read_array_float>
}
 8004a26:	bf00      	nop
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b08b      	sub	sp, #44	; 0x2c
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004a3c:	3388      	adds	r3, #136	; 0x88
 8004a3e:	61fb      	str	r3, [r7, #28]
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004a4a:	3340      	adds	r3, #64	; 0x40
 8004a4c:	61bb      	str	r3, [r7, #24]
 8004a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d009      	beq.n	8004a6a <_ZN6Logger10resetLogs2Ev+0x3c>
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	617b      	str	r3, [r7, #20]
		log = 0;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	3304      	adds	r3, #4
 8004a66:	627b      	str	r3, [r7, #36]	; 0x24
 8004a68:	e7f1      	b.n	8004a4e <_ZN6Logger10resetLogs2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004a70:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8004a74:	613b      	str	r3, [r7, #16]
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	623b      	str	r3, [r7, #32]
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004a80:	3340      	adds	r3, #64	; 0x40
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	6a3a      	ldr	r2, [r7, #32]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d009      	beq.n	8004aa0 <_ZN6Logger10resetLogs2Ev+0x72>
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	623b      	str	r3, [r7, #32]
 8004a9e:	e7f1      	b.n	8004a84 <_ZN6Logger10resetLogs2Ev+0x56>
	}

	log_index_tim_ = 0;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004aa6:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004aaa:	2200      	movs	r2, #0
 8004aac:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004ab4:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004ab8:	2200      	movs	r2, #0
 8004aba:	801a      	strh	r2, [r3, #0]
}
 8004abc:	bf00      	nop
 8004abe:	372c      	adds	r7, #44	; 0x2c
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004ad6:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004ada:	2200      	movs	r2, #0
 8004adc:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004ae4:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004ae8:	2200      	movs	r2, #0
 8004aea:	801a      	strh	r2, [r3, #0]
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004b06:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	701a      	strb	r2, [r3, #0]
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004b28:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	701a      	strb	r2, [r3, #0]
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	801a      	strh	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	805a      	strh	r2, [r3, #2]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
	...

08004b60 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004b68:	2108      	movs	r1, #8
 8004b6a:	4805      	ldr	r0, [pc, #20]	; (8004b80 <_ZN5Motor4initEv+0x20>)
 8004b6c:	f00a f89a 	bl	800eca4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004b70:	210c      	movs	r1, #12
 8004b72:	4803      	ldr	r0, [pc, #12]	; (8004b80 <_ZN5Motor4initEv+0x20>)
 8004b74:	f00a f896 	bl	800eca4 <HAL_TIM_PWM_Start>

}
 8004b78:	bf00      	nop
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	2003f924 	.word	0x2003f924

08004b84 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	da0c      	bge.n	8004bb0 <_ZN5Motor9motorCtrlEv+0x2c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004b96:	2200      	movs	r2, #0
 8004b98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b9c:	481d      	ldr	r0, [pc, #116]	; (8004c14 <_ZN5Motor9motorCtrlEv+0x90>)
 8004b9e:	f006 f953 	bl	800ae48 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	425b      	negs	r3, r3
 8004bac:	81fb      	strh	r3, [r7, #14]
 8004bae:	e009      	b.n	8004bc4 <_ZN5Motor9motorCtrlEv+0x40>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bb6:	4817      	ldr	r0, [pc, #92]	; (8004c14 <_ZN5Motor9motorCtrlEv+0x90>)
 8004bb8:	f006 f946 	bl	800ae48 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bc2:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	da0c      	bge.n	8004be8 <_ZN5Motor9motorCtrlEv+0x64>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004bd4:	480f      	ldr	r0, [pc, #60]	; (8004c14 <_ZN5Motor9motorCtrlEv+0x90>)
 8004bd6:	f006 f937 	bl	800ae48 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	425b      	negs	r3, r3
 8004be4:	81bb      	strh	r3, [r7, #12]
 8004be6:	e009      	b.n	8004bfc <_ZN5Motor9motorCtrlEv+0x78>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004be8:	2200      	movs	r2, #0
 8004bea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004bee:	4809      	ldr	r0, [pc, #36]	; (8004c14 <_ZN5Motor9motorCtrlEv+0x90>)
 8004bf0:	f006 f92a 	bl	800ae48 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004bfa:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <_ZN5Motor9motorCtrlEv+0x94>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	89fa      	ldrh	r2, [r7, #14]
 8004c02:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004c04:	4b04      	ldr	r3, [pc, #16]	; (8004c18 <_ZN5Motor9motorCtrlEv+0x94>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	89ba      	ldrh	r2, [r7, #12]
 8004c0a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004c0c:	bf00      	nop
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40020c00 	.word	0x40020c00
 8004c18:	2003f924 	.word	0x2003f924

08004c1c <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6178      	str	r0, [r7, #20]
 8004c24:	ed87 0b02 	vstr	d0, [r7, #8]
 8004c28:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	4b30      	ldr	r3, [pc, #192]	; (8004cf4 <_ZN5Motor8setRatioEdd+0xd8>)
 8004c32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c36:	f7fb ff87 	bl	8000b48 <__aeabi_dcmpgt>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d005      	beq.n	8004c4c <_ZN5Motor8setRatioEdd+0x30>
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	4b2b      	ldr	r3, [pc, #172]	; (8004cf4 <_ZN5Motor8setRatioEdd+0xd8>)
 8004c46:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8004c4a:	e00e      	b.n	8004c6a <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	4b29      	ldr	r3, [pc, #164]	; (8004cf8 <_ZN5Motor8setRatioEdd+0xdc>)
 8004c52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c56:	f7fb ff59 	bl	8000b0c <__aeabi_dcmplt>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d004      	beq.n	8004c6a <_ZN5Motor8setRatioEdd+0x4e>
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	4b24      	ldr	r3, [pc, #144]	; (8004cf8 <_ZN5Motor8setRatioEdd+0xdc>)
 8004c66:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	4b21      	ldr	r3, [pc, #132]	; (8004cf4 <_ZN5Motor8setRatioEdd+0xd8>)
 8004c70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c74:	f7fb ff68 	bl	8000b48 <__aeabi_dcmpgt>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <_ZN5Motor8setRatioEdd+0x6e>
 8004c7e:	f04f 0200 	mov.w	r2, #0
 8004c82:	4b1c      	ldr	r3, [pc, #112]	; (8004cf4 <_ZN5Motor8setRatioEdd+0xd8>)
 8004c84:	e9c7 2300 	strd	r2, r3, [r7]
 8004c88:	e00e      	b.n	8004ca8 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	4b1a      	ldr	r3, [pc, #104]	; (8004cf8 <_ZN5Motor8setRatioEdd+0xdc>)
 8004c90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c94:	f7fb ff3a 	bl	8000b0c <__aeabi_dcmplt>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d004      	beq.n	8004ca8 <_ZN5Motor8setRatioEdd+0x8c>
 8004c9e:	f04f 0200 	mov.w	r2, #0
 8004ca2:	4b15      	ldr	r3, [pc, #84]	; (8004cf8 <_ZN5Motor8setRatioEdd+0xdc>)
 8004ca4:	e9c7 2300 	strd	r2, r3, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <_ZN5Motor8setRatioEdd+0xe0>)
 8004cae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cb2:	f7fb fcb9 	bl	8000628 <__aeabi_dmul>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	4610      	mov	r0, r2
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	f7fb ff63 	bl	8000b88 <__aeabi_d2iz>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	b21a      	sxth	r2, r3
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <_ZN5Motor8setRatioEdd+0xe0>)
 8004cd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cd4:	f7fb fca8 	bl	8000628 <__aeabi_dmul>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4610      	mov	r0, r2
 8004cde:	4619      	mov	r1, r3
 8004ce0:	f7fb ff52 	bl	8000b88 <__aeabi_d2iz>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	b21a      	sxth	r2, r3
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	805a      	strh	r2, [r3, #2]

}
 8004cec:	bf00      	nop
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	3ff00000 	.word	0x3ff00000
 8004cf8:	bff00000 	.word	0xbff00000
 8004cfc:	409c2000 	.word	0x409c2000

08004d00 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	603b      	str	r3, [r7, #0]
 8004d0e:	68f9      	ldr	r1, [r7, #12]
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004d1c:	68f9      	ldr	r1, [r7, #12]
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8004d2a:	68f9      	ldr	r1, [r7, #12]
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8004d38:	68f9      	ldr	r1, [r7, #12]
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
 8004d46:	68f9      	ldr	r1, [r7, #12]
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
{
	encoder_ = encoder;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	609a      	str	r2, [r3, #8]
}
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	0000      	movs	r0, r0
	...

08004d78 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d7c:	b086      	sub	sp, #24
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fc fe86 	bl	8001a98 <_ZN3IMU8getOmegaEv>
 8004d8c:	ee10 3a10 	vmov	r3, s0
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fb fbf1 	bl	8000578 <__aeabi_f2d>
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	float distance = encoder_->getDistance();
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fc fb44 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 8004da8:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004dac:	a374      	add	r3, pc, #464	; (adr r3, 8004f80 <_ZN8Odometry12calcPotitionEv+0x208>)
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004db6:	f7fb fc37 	bl	8000628 <__aeabi_dmul>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f7fb fbd4 	bl	8000578 <__aeabi_f2d>
 8004dd0:	4682      	mov	sl, r0
 8004dd2:	468b      	mov	fp, r1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004de8:	f7fb fd48 	bl	800087c <__aeabi_ddiv>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4640      	mov	r0, r8
 8004df2:	4649      	mov	r1, r9
 8004df4:	f7fb fa62 	bl	80002bc <__adddf3>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	ec43 2b17 	vmov	d7, r2, r3
 8004e00:	eeb0 0a47 	vmov.f32	s0, s14
 8004e04:	eef0 0a67 	vmov.f32	s1, s15
 8004e08:	f00f faba 	bl	8014380 <cos>
 8004e0c:	ec53 2b10 	vmov	r2, r3, d0
 8004e10:	4650      	mov	r0, sl
 8004e12:	4659      	mov	r1, fp
 8004e14:	f7fb fc08 	bl	8000628 <__aeabi_dmul>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	4629      	mov	r1, r5
 8004e20:	f7fb fa4c 	bl	80002bc <__adddf3>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f7fb fb9f 	bl	8000578 <__aeabi_f2d>
 8004e3a:	4682      	mov	sl, r0
 8004e3c:	468b      	mov	fp, r1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e52:	f7fb fd13 	bl	800087c <__aeabi_ddiv>
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4640      	mov	r0, r8
 8004e5c:	4649      	mov	r1, r9
 8004e5e:	f7fb fa2d 	bl	80002bc <__adddf3>
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	ec43 2b17 	vmov	d7, r2, r3
 8004e6a:	eeb0 0a47 	vmov.f32	s0, s14
 8004e6e:	eef0 0a67 	vmov.f32	s1, s15
 8004e72:	f00f fac9 	bl	8014408 <sin>
 8004e76:	ec53 2b10 	vmov	r2, r3, d0
 8004e7a:	4650      	mov	r0, sl
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	f7fb fbd3 	bl	8000628 <__aeabi_dmul>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4620      	mov	r0, r4
 8004e88:	4629      	mov	r1, r5
 8004e8a:	f7fb fa17 	bl	80002bc <__adddf3>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	e9c1 2306 	strd	r2, r3, [r1, #24]
	theta_= theta_ + delta_theta_;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004ea4:	f7fb fa0a 	bl	80002bc <__adddf3>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	e9c1 2308 	strd	r2, r3, [r1, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	ed93 7b08 	vldr	d7, [r3, #32]
 8004ebe:	eeb0 0a47 	vmov.f32	s0, s14
 8004ec2:	eef0 0a67 	vmov.f32	s1, s15
 8004ec6:	f00f fa5b 	bl	8014380 <cos>
 8004eca:	ec51 0b10 	vmov	r0, r1, d0
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	4b27      	ldr	r3, [pc, #156]	; (8004f70 <_ZN8Odometry12calcPotitionEv+0x1f8>)
 8004ed4:	f7fb fba8 	bl	8000628 <__aeabi_dmul>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4620      	mov	r0, r4
 8004ede:	4629      	mov	r1, r5
 8004ee0:	f7fb f9ec 	bl	80002bc <__adddf3>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	ed93 7b08 	vldr	d7, [r3, #32]
 8004efa:	eeb0 0a47 	vmov.f32	s0, s14
 8004efe:	eef0 0a67 	vmov.f32	s1, s15
 8004f02:	f00f fa81 	bl	8014408 <sin>
 8004f06:	ec51 0b10 	vmov	r0, r1, d0
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <_ZN8Odometry12calcPotitionEv+0x1f8>)
 8004f10:	f7fb fb8a 	bl	8000628 <__aeabi_dmul>
 8004f14:	4602      	mov	r2, r0
 8004f16:	460b      	mov	r3, r1
 8004f18:	4620      	mov	r0, r4
 8004f1a:	4629      	mov	r1, r5
 8004f1c:	f7fb f9ce 	bl	80002bc <__adddf3>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	6879      	ldr	r1, [r7, #4]
 8004f26:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	monitor_x = x_sens_;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004f30:	4610      	mov	r0, r2
 8004f32:	4619      	mov	r1, r3
 8004f34:	f7fb fe70 	bl	8000c18 <__aeabi_d2f>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	4a0e      	ldr	r2, [pc, #56]	; (8004f74 <_ZN8Odometry12calcPotitionEv+0x1fc>)
 8004f3c:	6013      	str	r3, [r2, #0]
	monitor_y = y_sens_;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004f44:	4610      	mov	r0, r2
 8004f46:	4619      	mov	r1, r3
 8004f48:	f7fb fe66 	bl	8000c18 <__aeabi_d2f>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	4a0a      	ldr	r2, [pc, #40]	; (8004f78 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004f50:	6013      	str	r3, [r2, #0]
	monitor_theta = theta_;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f58:	4610      	mov	r0, r2
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	f7fb fe5c 	bl	8000c18 <__aeabi_d2f>
 8004f60:	4603      	mov	r3, r0
 8004f62:	4a06      	ldr	r2, [pc, #24]	; (8004f7c <_ZN8Odometry12calcPotitionEv+0x204>)
 8004f64:	6013      	str	r3, [r2, #0]
}
 8004f66:	bf00      	nop
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f70:	405b8000 	.word	0x405b8000
 8004f74:	200002c0 	.word	0x200002c0
 8004f78:	200002c4 	.word	0x200002c4
 8004f7c:	200002c8 	.word	0x200002c8
 8004f80:	d2f1a9fc 	.word	0xd2f1a9fc
 8004f84:	3f50624d 	.word	0x3f50624d

08004f88 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
	calcPotition();
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7ff fef1 	bl	8004d78 <_ZN8Odometry12calcPotitionEv>
}
 8004f96:	bf00      	nop
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
	return theta_;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fac:	ec43 2b17 	vmov	d7, r2, r3
}
 8004fb0:	eeb0 0a47 	vmov.f32	s0, s14
 8004fb4:	eef0 0a67 	vmov.f32	s1, s15
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	y_sens_ = 0;
 8004fd8:	6879      	ldr	r1, [r7, #4]
 8004fda:	f04f 0200 	mov.w	r2, #0
 8004fde:	f04f 0300 	mov.w	r3, #0
 8004fe2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	theta_ = 0;
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	701a      	strb	r2, [r3, #0]
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	f04f 0200 	mov.w	r2, #0
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800502a:	6879      	ldr	r1, [r7, #4]
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800503e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005042:	2200      	movs	r2, #0
 8005044:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8005046:	492a      	ldr	r1, [pc, #168]	; (80050f0 <_ZN13PathFollowingC1Ev+0xf0>)
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	f04f 0300 	mov.w	r3, #0
 8005050:	e9c1 2300 	strd	r2, r3, [r1]
	rtParam.ky = 0;
 8005054:	4926      	ldr	r1, [pc, #152]	; (80050f0 <_ZN13PathFollowingC1Ev+0xf0>)
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	rtParam.kt = 0;
 8005062:	4923      	ldr	r1, [pc, #140]	; (80050f0 <_ZN13PathFollowingC1Ev+0xf0>)
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	rtU.target_x = 0;
 8005070:	4920      	ldr	r1, [pc, #128]	; (80050f4 <_ZN13PathFollowingC1Ev+0xf4>)
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	e9c1 2300 	strd	r2, r3, [r1]
	rtU.target_y = 0;
 800507e:	491d      	ldr	r1, [pc, #116]	; (80050f4 <_ZN13PathFollowingC1Ev+0xf4>)
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	f04f 0300 	mov.w	r3, #0
 8005088:	e9c1 2302 	strd	r2, r3, [r1, #8]
	rtU.th = 0;
 800508c:	4919      	ldr	r1, [pc, #100]	; (80050f4 <_ZN13PathFollowingC1Ev+0xf4>)
 800508e:	f04f 0200 	mov.w	r2, #0
 8005092:	f04f 0300 	mov.w	r3, #0
 8005096:	e9c1 2304 	strd	r2, r3, [r1, #16]
	rtU.x = 0;
 800509a:	4916      	ldr	r1, [pc, #88]	; (80050f4 <_ZN13PathFollowingC1Ev+0xf4>)
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	rtU.y = 0;
 80050a8:	4912      	ldr	r1, [pc, #72]	; (80050f4 <_ZN13PathFollowingC1Ev+0xf4>)
 80050aa:	f04f 0200 	mov.w	r2, #0
 80050ae:	f04f 0300 	mov.w	r3, #0
 80050b2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	rtU.th_cur = 0;
 80050b6:	490f      	ldr	r1, [pc, #60]	; (80050f4 <_ZN13PathFollowingC1Ev+0xf4>)
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	rtY.V_tar = 0;
 80050c4:	490c      	ldr	r1, [pc, #48]	; (80050f8 <_ZN13PathFollowingC1Ev+0xf8>)
 80050c6:	f04f 0200 	mov.w	r2, #0
 80050ca:	f04f 0300 	mov.w	r3, #0
 80050ce:	e9c1 2300 	strd	r2, r3, [r1]
	rtY.tar = 0;
 80050d2:	4909      	ldr	r1, [pc, #36]	; (80050f8 <_ZN13PathFollowingC1Ev+0xf8>)
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	e9c1 2302 	strd	r2, r3, [r1, #8]

}
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4618      	mov	r0, r3
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	2003fe28 	.word	0x2003fe28
 80050f4:	2003fdb8 	.word	0x2003fdb8
 80050f8:	2003fe18 	.word	0x2003fe18

080050fc <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8005104:	f001 fcaf 	bl	8006a66 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005108:	f107 0318 	add.w	r3, r7, #24
 800510c:	2201      	movs	r2, #1
 800510e:	4915      	ldr	r1, [pc, #84]	; (8005164 <_ZN13PathFollowing4initEv+0x68>)
 8005110:	4815      	ldr	r0, [pc, #84]	; (8005168 <_ZN13PathFollowing4initEv+0x6c>)
 8005112:	f7fc faaf 	bl	8001674 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8005116:	f107 0310 	add.w	r3, r7, #16
 800511a:	2201      	movs	r2, #1
 800511c:	4913      	ldr	r1, [pc, #76]	; (800516c <_ZN13PathFollowing4initEv+0x70>)
 800511e:	4812      	ldr	r0, [pc, #72]	; (8005168 <_ZN13PathFollowing4initEv+0x6c>)
 8005120:	f7fc faa8 	bl	8001674 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8005124:	f107 0308 	add.w	r3, r7, #8
 8005128:	2201      	movs	r2, #1
 800512a:	4911      	ldr	r1, [pc, #68]	; (8005170 <_ZN13PathFollowing4initEv+0x74>)
 800512c:	480e      	ldr	r0, [pc, #56]	; (8005168 <_ZN13PathFollowing4initEv+0x6c>)
 800512e:	f7fc faa1 	bl	8001674 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8005132:	ed97 7b06 	vldr	d7, [r7, #24]
 8005136:	ed97 6b04 	vldr	d6, [r7, #16]
 800513a:	ed97 5b02 	vldr	d5, [r7, #8]
 800513e:	eeb0 2a45 	vmov.f32	s4, s10
 8005142:	eef0 2a65 	vmov.f32	s5, s11
 8005146:	eeb0 1a46 	vmov.f32	s2, s12
 800514a:	eef0 1a66 	vmov.f32	s3, s13
 800514e:	eeb0 0a47 	vmov.f32	s0, s14
 8005152:	eef0 0a67 	vmov.f32	s1, s15
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f80c 	bl	8005174 <_ZN13PathFollowing7setGainEddd>
}
 800515c:	bf00      	nop
 800515e:	3720      	adds	r7, #32
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	08019e48 	.word	0x08019e48
 8005168:	08019e50 	.word	0x08019e50
 800516c:	08019e58 	.word	0x08019e58
 8005170:	08019e60 	.word	0x08019e60

08005174 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8005174:	b480      	push	{r7}
 8005176:	b089      	sub	sp, #36	; 0x24
 8005178:	af00      	add	r7, sp, #0
 800517a:	61f8      	str	r0, [r7, #28]
 800517c:	ed87 0b04 	vstr	d0, [r7, #16]
 8005180:	ed87 1b02 	vstr	d1, [r7, #8]
 8005184:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8005188:	490a      	ldr	r1, [pc, #40]	; (80051b4 <_ZN13PathFollowing7setGainEddd+0x40>)
 800518a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800518e:	e9c1 2300 	strd	r2, r3, [r1]
	rtParam.ky = ky;
 8005192:	4908      	ldr	r1, [pc, #32]	; (80051b4 <_ZN13PathFollowing7setGainEddd+0x40>)
 8005194:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005198:	e9c1 2302 	strd	r2, r3, [r1, #8]
	rtParam.kt = kt;
 800519c:	4905      	ldr	r1, [pc, #20]	; (80051b4 <_ZN13PathFollowing7setGainEddd+0x40>)
 800519e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051a2:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80051a6:	bf00      	nop
 80051a8:	3724      	adds	r7, #36	; 0x24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	2003fe28 	.word	0x2003fe28

080051b8 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80051c0:	2088      	movs	r0, #136	; 0x88
 80051c2:	f7fc fdac 	bl	8001d1e <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80051c6:	2080      	movs	r0, #128	; 0x80
 80051c8:	f7fc fda9 	bl	8001d1e <INA260_init>
}
 80051cc:	bf00      	nop
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	0000      	movs	r0, r0
	...

080051d8 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80051e0:	2188      	movs	r1, #136	; 0x88
 80051e2:	2002      	movs	r0, #2
 80051e4:	f7fc fd38 	bl	8001c58 <INA260_read>
 80051e8:	4603      	mov	r3, r0
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fb f9b2 	bl	8000554 <__aeabi_i2d>
 80051f0:	a30c      	add	r3, pc, #48	; (adr r3, 8005224 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f6:	f7fb fa17 	bl	8000628 <__aeabi_dmul>
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	4610      	mov	r0, r2
 8005200:	4619      	mov	r1, r3
 8005202:	f7fb fd09 	bl	8000c18 <__aeabi_d2f>
 8005206:	4602      	mov	r2, r0
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	4a03      	ldr	r2, [pc, #12]	; (8005220 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8005212:	6013      	str	r3, [r2, #0]
}
 8005214:	bf00      	nop
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	f3af 8000 	nop.w
 8005220:	200002cc 	.word	0x200002cc
 8005224:	47ae147b 	.word	0x47ae147b
 8005228:	3f547ae1 	.word	0x3f547ae1

0800522c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	ee07 3a90 	vmov	s15, r3

}
 800523c:	eeb0 0a67 	vmov.f32	s0, s15
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
	...

0800524c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8005254:	2300      	movs	r3, #0
 8005256:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005258:	2102      	movs	r1, #2
 800525a:	4822      	ldr	r0, [pc, #136]	; (80052e4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800525c:	f005 fddc 	bl	800ae18 <HAL_GPIO_ReadPin>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	bf0c      	ite	eq
 8005266:	2301      	moveq	r3, #1
 8005268:	2300      	movne	r3, #0
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005270:	89fb      	ldrh	r3, [r7, #14]
 8005272:	f043 0301 	orr.w	r3, r3, #1
 8005276:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005278:	2108      	movs	r1, #8
 800527a:	481a      	ldr	r0, [pc, #104]	; (80052e4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800527c:	f005 fdcc 	bl	800ae18 <HAL_GPIO_ReadPin>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	bf0c      	ite	eq
 8005286:	2301      	moveq	r3, #1
 8005288:	2300      	movne	r3, #0
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005290:	89fb      	ldrh	r3, [r7, #14]
 8005292:	f043 0302 	orr.w	r3, r3, #2
 8005296:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8005298:	2110      	movs	r1, #16
 800529a:	4812      	ldr	r0, [pc, #72]	; (80052e4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800529c:	f005 fdbc 	bl	800ae18 <HAL_GPIO_ReadPin>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	bf0c      	ite	eq
 80052a6:	2301      	moveq	r3, #1
 80052a8:	2300      	movne	r3, #0
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <_ZN12RotarySwitch8getValueEv+0x6c>
 80052b0:	89fb      	ldrh	r3, [r7, #14]
 80052b2:	f043 0304 	orr.w	r3, r3, #4
 80052b6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80052b8:	2180      	movs	r1, #128	; 0x80
 80052ba:	480a      	ldr	r0, [pc, #40]	; (80052e4 <_ZN12RotarySwitch8getValueEv+0x98>)
 80052bc:	f005 fdac 	bl	800ae18 <HAL_GPIO_ReadPin>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	bf0c      	ite	eq
 80052c6:	2301      	moveq	r3, #1
 80052c8:	2300      	movne	r3, #0
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <_ZN12RotarySwitch8getValueEv+0x8c>
 80052d0:	89fb      	ldrh	r3, [r7, #14]
 80052d2:	f043 0308 	orr.w	r3, r3, #8
 80052d6:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80052d8:	89fb      	ldrh	r3, [r7, #14]

}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40020c00 	.word	0x40020c00

080052e8 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	801a      	strh	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	805a      	strh	r2, [r3, #2]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	809a      	strh	r2, [r3, #4]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	719a      	strb	r2, [r3, #6]
{

}
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4618      	mov	r0, r3
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
	...

08005318 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	799b      	ldrb	r3, [r3, #6]
 8005324:	2b00      	cmp	r3, #0
 8005326:	f040 80c1 	bne.w	80054ac <_ZN10SideSensor12updateStatusEv+0x194>

		if(white_flag1 == false){
 800532a:	4b62      	ldr	r3, [pc, #392]	; (80054b4 <_ZN10SideSensor12updateStatusEv+0x19c>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d127      	bne.n	8005382 <_ZN10SideSensor12updateStatusEv+0x6a>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8005332:	2104      	movs	r1, #4
 8005334:	4860      	ldr	r0, [pc, #384]	; (80054b8 <_ZN10SideSensor12updateStatusEv+0x1a0>)
 8005336:	f005 fd6f 	bl	800ae18 <HAL_GPIO_ReadPin>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	bf0c      	ite	eq
 8005340:	2301      	moveq	r3, #1
 8005342:	2300      	movne	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d006      	beq.n	8005358 <_ZN10SideSensor12updateStatusEv+0x40>
				cnt_r++;
 800534a:	4b5c      	ldr	r3, [pc, #368]	; (80054bc <_ZN10SideSensor12updateStatusEv+0x1a4>)
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	3301      	adds	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	4b5a      	ldr	r3, [pc, #360]	; (80054bc <_ZN10SideSensor12updateStatusEv+0x1a4>)
 8005354:	801a      	strh	r2, [r3, #0]
 8005356:	e002      	b.n	800535e <_ZN10SideSensor12updateStatusEv+0x46>
			}
			else{
				cnt_r = 0;
 8005358:	4b58      	ldr	r3, [pc, #352]	; (80054bc <_ZN10SideSensor12updateStatusEv+0x1a4>)
 800535a:	2200      	movs	r2, #0
 800535c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 800535e:	4b57      	ldr	r3, [pc, #348]	; (80054bc <_ZN10SideSensor12updateStatusEv+0x1a4>)
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	2b04      	cmp	r3, #4
 8005364:	d93f      	bls.n	80053e6 <_ZN10SideSensor12updateStatusEv+0xce>
				status_ |= 0x01;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	f043 0301 	orr.w	r3, r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 8005374:	4b4f      	ldr	r3, [pc, #316]	; (80054b4 <_ZN10SideSensor12updateStatusEv+0x19c>)
 8005376:	2201      	movs	r2, #1
 8005378:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 800537a:	4b50      	ldr	r3, [pc, #320]	; (80054bc <_ZN10SideSensor12updateStatusEv+0x1a4>)
 800537c:	2200      	movs	r2, #0
 800537e:	801a      	strh	r2, [r3, #0]
 8005380:	e031      	b.n	80053e6 <_ZN10SideSensor12updateStatusEv+0xce>
			}

		}
		else if(white_flag1 == true){
 8005382:	4b4c      	ldr	r3, [pc, #304]	; (80054b4 <_ZN10SideSensor12updateStatusEv+0x19c>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d12d      	bne.n	80053e6 <_ZN10SideSensor12updateStatusEv+0xce>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 800538a:	2104      	movs	r1, #4
 800538c:	484a      	ldr	r0, [pc, #296]	; (80054b8 <_ZN10SideSensor12updateStatusEv+0x1a0>)
 800538e:	f005 fd43 	bl	800ae18 <HAL_GPIO_ReadPin>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	bf14      	ite	ne
 8005398:	2301      	movne	r3, #1
 800539a:	2300      	moveq	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d006      	beq.n	80053b0 <_ZN10SideSensor12updateStatusEv+0x98>
				cnt_r++;
 80053a2:	4b46      	ldr	r3, [pc, #280]	; (80054bc <_ZN10SideSensor12updateStatusEv+0x1a4>)
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	3301      	adds	r3, #1
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	4b44      	ldr	r3, [pc, #272]	; (80054bc <_ZN10SideSensor12updateStatusEv+0x1a4>)
 80053ac:	801a      	strh	r2, [r3, #0]
 80053ae:	e002      	b.n	80053b6 <_ZN10SideSensor12updateStatusEv+0x9e>
			}
			else{
				cnt_r = 0;
 80053b0:	4b42      	ldr	r3, [pc, #264]	; (80054bc <_ZN10SideSensor12updateStatusEv+0x1a4>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80053b6:	4b41      	ldr	r3, [pc, #260]	; (80054bc <_ZN10SideSensor12updateStatusEv+0x1a4>)
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d913      	bls.n	80053e6 <_ZN10SideSensor12updateStatusEv+0xce>
				status_ ^= 0x01;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	f083 0301 	eor.w	r3, r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 80053cc:	4b39      	ldr	r3, [pc, #228]	; (80054b4 <_ZN10SideSensor12updateStatusEv+0x19c>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	889b      	ldrh	r3, [r3, #4]
 80053d6:	3301      	adds	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	889a      	ldrh	r2, [r3, #4]
 80053e2:	4b37      	ldr	r3, [pc, #220]	; (80054c0 <_ZN10SideSensor12updateStatusEv+0x1a8>)
 80053e4:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 80053e6:	4b37      	ldr	r3, [pc, #220]	; (80054c4 <_ZN10SideSensor12updateStatusEv+0x1ac>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d127      	bne.n	800543e <_ZN10SideSensor12updateStatusEv+0x126>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 80053ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053f2:	4835      	ldr	r0, [pc, #212]	; (80054c8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 80053f4:	f005 fd10 	bl	800ae18 <HAL_GPIO_ReadPin>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	bf0c      	ite	eq
 80053fe:	2301      	moveq	r3, #1
 8005400:	2300      	movne	r3, #0
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d006      	beq.n	8005416 <_ZN10SideSensor12updateStatusEv+0xfe>
				cnt_l++;
 8005408:	4b30      	ldr	r3, [pc, #192]	; (80054cc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	3301      	adds	r3, #1
 800540e:	b29a      	uxth	r2, r3
 8005410:	4b2e      	ldr	r3, [pc, #184]	; (80054cc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8005412:	801a      	strh	r2, [r3, #0]
 8005414:	e002      	b.n	800541c <_ZN10SideSensor12updateStatusEv+0x104>
			}
			else{
				cnt_l = 0;
 8005416:	4b2d      	ldr	r3, [pc, #180]	; (80054cc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8005418:	2200      	movs	r2, #0
 800541a:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800541c:	4b2b      	ldr	r3, [pc, #172]	; (80054cc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	2b04      	cmp	r3, #4
 8005422:	d90c      	bls.n	800543e <_ZN10SideSensor12updateStatusEv+0x126>
				status_ |= 0x02;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	f043 0302 	orr.w	r3, r3, #2
 800542c:	b29a      	uxth	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 8005432:	4b24      	ldr	r3, [pc, #144]	; (80054c4 <_ZN10SideSensor12updateStatusEv+0x1ac>)
 8005434:	2201      	movs	r2, #1
 8005436:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 8005438:	4b24      	ldr	r3, [pc, #144]	; (80054cc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 800543a:	2200      	movs	r2, #0
 800543c:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 800543e:	4b21      	ldr	r3, [pc, #132]	; (80054c4 <_ZN10SideSensor12updateStatusEv+0x1ac>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d12e      	bne.n	80054a4 <_ZN10SideSensor12updateStatusEv+0x18c>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005446:	f44f 7180 	mov.w	r1, #256	; 0x100
 800544a:	481f      	ldr	r0, [pc, #124]	; (80054c8 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 800544c:	f005 fce4 	bl	800ae18 <HAL_GPIO_ReadPin>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	bf14      	ite	ne
 8005456:	2301      	movne	r3, #1
 8005458:	2300      	moveq	r3, #0
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d006      	beq.n	800546e <_ZN10SideSensor12updateStatusEv+0x156>
				cnt_l++;
 8005460:	4b1a      	ldr	r3, [pc, #104]	; (80054cc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	3301      	adds	r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	4b18      	ldr	r3, [pc, #96]	; (80054cc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 800546a:	801a      	strh	r2, [r3, #0]
 800546c:	e002      	b.n	8005474 <_ZN10SideSensor12updateStatusEv+0x15c>
			}
			else{
				cnt_l = 0;
 800546e:	4b17      	ldr	r3, [pc, #92]	; (80054cc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8005470:	2200      	movs	r2, #0
 8005472:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8005474:	4b15      	ldr	r3, [pc, #84]	; (80054cc <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	2b04      	cmp	r3, #4
 800547a:	d913      	bls.n	80054a4 <_ZN10SideSensor12updateStatusEv+0x18c>
				status_ ^= 0x02;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	f083 0302 	eor.w	r3, r3, #2
 8005484:	b29a      	uxth	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 800548a:	4b0e      	ldr	r3, [pc, #56]	; (80054c4 <_ZN10SideSensor12updateStatusEv+0x1ac>)
 800548c:	2200      	movs	r2, #0
 800548e:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	885b      	ldrh	r3, [r3, #2]
 8005494:	3301      	adds	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	885a      	ldrh	r2, [r3, #2]
 80054a0:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80054a2:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	881a      	ldrh	r2, [r3, #0]
 80054a8:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <_ZN10SideSensor12updateStatusEv+0x1bc>)
 80054aa:	801a      	strh	r2, [r3, #0]
	}

}
 80054ac:	bf00      	nop
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	200002d6 	.word	0x200002d6
 80054b8:	40021000 	.word	0x40021000
 80054bc:	200002da 	.word	0x200002da
 80054c0:	200002d4 	.word	0x200002d4
 80054c4:	200002d7 	.word	0x200002d7
 80054c8:	40020c00 	.word	0x40020c00
 80054cc:	200002d8 	.word	0x200002d8
 80054d0:	200002d2 	.word	0x200002d2
 80054d4:	200002d0 	.word	0x200002d0

080054d8 <_ZN10SideSensor9getStatusEv>:
uint16_t SideSensor::getStatus()
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
	return status_;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	881b      	ldrh	r3, [r3, #0]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	889b      	ldrh	r3, [r3, #4]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	809a      	strh	r2, [r3, #4]
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	719a      	strb	r2, [r3, #6]
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	719a      	strb	r2, [r3, #6]
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	799b      	ldrb	r3, [r3, #6]
}
 8005568:	4618      	mov	r0, r3
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4a10      	ldr	r2, [pc, #64]	; (80055c4 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8005584:	3308      	adds	r3, #8
 8005586:	4611      	mov	r1, r2
 8005588:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800558c:	4618      	mov	r0, r3
 800558e:	f010 f977 	bl	8015880 <memcpy>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	08019e84 	.word	0x08019e84

080055c8 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d110      	bne.n	8005600 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	ed97 0a00 	vldr	s0, [r7]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7ff f88a 	bl	8004700 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80055f6:	eeb0 0a67 	vmov.f32	s0, s15
 80055fa:	4610      	mov	r0, r2
 80055fc:	f7ff f8bc 	bl	8004778 <_ZN6Logger9storeLog2Ef>
	}

}
 8005600:	bf00      	nop
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <_ZN20SystemIdentification10updateMsigEv>:
	logger_->saveLogs("sysident", "MSIGRES.txt");
	logger_->saveLogs2("sysident", "INPUT.txt");
}

void SystemIdentification::updateMsig()
{
 8005608:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005618:	2b01      	cmp	r3, #1
 800561a:	d146      	bne.n	80056aa <_ZN20SystemIdentification10updateMsigEv+0xa2>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005628:	461a      	mov	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	3204      	adds	r2, #4
 800562e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005632:	ee07 3a90 	vmov	s15, r3
 8005636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800563a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800564a:	3301      	adds	r3, #1
 800564c:	b29a      	uxth	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800565a:	4a16      	ldr	r2, [pc, #88]	; (80056b4 <_ZN20SystemIdentification10updateMsigEv+0xac>)
 800565c:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005664:	2bf9      	cmp	r3, #249	; 0xf9
 8005666:	d903      	bls.n	8005670 <_ZN20SystemIdentification10updateMsigEv+0x68>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	22fa      	movs	r2, #250	; 0xfa
 800566c:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685c      	ldr	r4, [r3, #4]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800567a:	4618      	mov	r0, r3
 800567c:	f7fa ff7c 	bl	8000578 <__aeabi_f2d>
 8005680:	4680      	mov	r8, r0
 8005682:	4689      	mov	r9, r1
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 800568a:	eef1 7a67 	vneg.f32	s15, s15
 800568e:	ee17 3a90 	vmov	r3, s15
 8005692:	4618      	mov	r0, r3
 8005694:	f7fa ff70 	bl	8000578 <__aeabi_f2d>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	ec43 2b11 	vmov	d1, r2, r3
 80056a0:	ec49 8b10 	vmov	d0, r8, r9
 80056a4:	4620      	mov	r0, r4
 80056a6:	f7ff fab9 	bl	8004c1c <_ZN5Motor8setRatioEdd>

	}

}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 80056b4:	200002dc 	.word	0x200002dc

080056b8 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f04f 0200 	mov.w	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f04f 0200 	mov.w	r2, #0
 80056d4:	605a      	str	r2, [r3, #4]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	609a      	str	r2, [r3, #8]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f04f 0200 	mov.w	r2, #0
 80056e4:	60da      	str	r2, [r3, #12]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	611a      	str	r2, [r3, #16]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	615a      	str	r2, [r3, #20]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f04f 0200 	mov.w	r2, #0
 80056fc:	619a      	str	r2, [r3, #24]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	61da      	str	r2, [r3, #28]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	621a      	str	r2, [r3, #32]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	625a      	str	r2, [r3, #36]	; 0x24
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
	...

08005750 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005750:	b590      	push	{r4, r7, lr}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575c:	f107 020c 	add.w	r2, r7, #12
 8005760:	f107 0110 	add.w	r1, r7, #16
 8005764:	4618      	mov	r0, r3
 8005766:	f7fb fe4f 	bl	8001408 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 800576a:	ed97 7a04 	vldr	s14, [r7, #16]
 800576e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005772:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005776:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800577a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800577e:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005782:	6978      	ldr	r0, [r7, #20]
 8005784:	f7fa fef8 	bl	8000578 <__aeabi_f2d>
 8005788:	a30b      	add	r3, pc, #44	; (adr r3, 80057b8 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 800578a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578e:	f7fa ff4b 	bl	8000628 <__aeabi_dmul>
 8005792:	4603      	mov	r3, r0
 8005794:	460c      	mov	r4, r1
 8005796:	4618      	mov	r0, r3
 8005798:	4621      	mov	r1, r4
 800579a:	f7fb fa3d 	bl	8000c18 <__aeabi_d2f>
 800579e:	4602      	mov	r2, r0
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	ee07 3a90 	vmov	s15, r3
}
 80057ac:	eeb0 0a67 	vmov.f32	s0, s15
 80057b0:	371c      	adds	r7, #28
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd90      	pop	{r4, r7, pc}
 80057b6:	bf00      	nop
 80057b8:	1ab1d998 	.word	0x1ab1d998
 80057bc:	3f7830b5 	.word	0x3f7830b5

080057c0 <_ZN12VelocityCtrl3pidEv>:
	return current_omega_;
}
*/

void VelocityCtrl::pid()
{
 80057c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057c2:	ed2d 8b02 	vpush	{d8}
 80057c6:	b08d      	sub	sp, #52	; 0x34
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
	float static v_pre_diff, o_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	ed93 7a00 	vldr	s14, [r3]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80057d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057dc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float o_diff = target_omega_- imu_->getOmega();
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	ed93 8a01 	vldr	s16, [r3, #4]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fc f954 	bl	8001a98 <_ZN3IMU8getOmegaEv>
 80057f0:	eef0 7a40 	vmov.f32	s15, s0
 80057f4:	ee78 7a67 	vsub.f32	s15, s16, s15
 80057f8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	float v_p, v_d, o_p, o_d;
	static float v_i, o_i;

	if(i_reset_flag_ == true){
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00b      	beq.n	800581e <_ZN12VelocityCtrl3pidEv+0x5e>
		v_i = o_i = 0;
 8005806:	4b80      	ldr	r3, [pc, #512]	; (8005a08 <_ZN12VelocityCtrl3pidEv+0x248>)
 8005808:	f04f 0200 	mov.w	r2, #0
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	4b7e      	ldr	r3, [pc, #504]	; (8005a08 <_ZN12VelocityCtrl3pidEv+0x248>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a7e      	ldr	r2, [pc, #504]	; (8005a0c <_ZN12VelocityCtrl3pidEv+0x24c>)
 8005814:	6013      	str	r3, [r2, #0]
		i_reset_flag_ = false;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	edd3 7a04 	vldr	s15, [r3, #16]
 8005824:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800582c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_i += v_ki_ * v_diff * DELTA_T;
 8005830:	4b76      	ldr	r3, [pc, #472]	; (8005a0c <_ZN12VelocityCtrl3pidEv+0x24c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4618      	mov	r0, r3
 8005836:	f7fa fe9f 	bl	8000578 <__aeabi_f2d>
 800583a:	4604      	mov	r4, r0
 800583c:	460d      	mov	r5, r1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	ed93 7a06 	vldr	s14, [r3, #24]
 8005844:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800584c:	ee17 0a90 	vmov	r0, s15
 8005850:	f7fa fe92 	bl	8000578 <__aeabi_f2d>
 8005854:	a36a      	add	r3, pc, #424	; (adr r3, 8005a00 <_ZN12VelocityCtrl3pidEv+0x240>)
 8005856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585a:	f7fa fee5 	bl	8000628 <__aeabi_dmul>
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4620      	mov	r0, r4
 8005864:	4629      	mov	r1, r5
 8005866:	f7fa fd29 	bl	80002bc <__adddf3>
 800586a:	4603      	mov	r3, r0
 800586c:	460c      	mov	r4, r1
 800586e:	4618      	mov	r0, r3
 8005870:	4621      	mov	r1, r4
 8005872:	f7fb f9d1 	bl	8000c18 <__aeabi_d2f>
 8005876:	4602      	mov	r2, r0
 8005878:	4b64      	ldr	r3, [pc, #400]	; (8005a0c <_ZN12VelocityCtrl3pidEv+0x24c>)
 800587a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005882:	4b63      	ldr	r3, [pc, #396]	; (8005a10 <_ZN12VelocityCtrl3pidEv+0x250>)
 8005884:	edd3 7a00 	vldr	s15, [r3]
 8005888:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800588c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005894:	ee17 0a90 	vmov	r0, s15
 8005898:	f7fa fe6e 	bl	8000578 <__aeabi_f2d>
 800589c:	a358      	add	r3, pc, #352	; (adr r3, 8005a00 <_ZN12VelocityCtrl3pidEv+0x240>)
 800589e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a2:	f7fa ffeb 	bl	800087c <__aeabi_ddiv>
 80058a6:	4603      	mov	r3, r0
 80058a8:	460c      	mov	r4, r1
 80058aa:	4618      	mov	r0, r3
 80058ac:	4621      	mov	r1, r4
 80058ae:	f7fb f9b3 	bl	8000c18 <__aeabi_d2f>
 80058b2:	4603      	mov	r3, r0
 80058b4:	623b      	str	r3, [r7, #32]

	o_p = o_kp_ * o_diff;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	edd3 7a07 	vldr	s15, [r3, #28]
 80058bc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80058c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c4:	edc7 7a07 	vstr	s15, [r7, #28]
	o_i += o_ki_ * o_diff * DELTA_T;
 80058c8:	4b4f      	ldr	r3, [pc, #316]	; (8005a08 <_ZN12VelocityCtrl3pidEv+0x248>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fa fe53 	bl	8000578 <__aeabi_f2d>
 80058d2:	4604      	mov	r4, r0
 80058d4:	460d      	mov	r5, r1
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80058dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80058e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e4:	ee17 0a90 	vmov	r0, s15
 80058e8:	f7fa fe46 	bl	8000578 <__aeabi_f2d>
 80058ec:	a344      	add	r3, pc, #272	; (adr r3, 8005a00 <_ZN12VelocityCtrl3pidEv+0x240>)
 80058ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f2:	f7fa fe99 	bl	8000628 <__aeabi_dmul>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4620      	mov	r0, r4
 80058fc:	4629      	mov	r1, r5
 80058fe:	f7fa fcdd 	bl	80002bc <__adddf3>
 8005902:	4603      	mov	r3, r0
 8005904:	460c      	mov	r4, r1
 8005906:	4618      	mov	r0, r3
 8005908:	4621      	mov	r1, r4
 800590a:	f7fb f985 	bl	8000c18 <__aeabi_d2f>
 800590e:	4602      	mov	r2, r0
 8005910:	4b3d      	ldr	r3, [pc, #244]	; (8005a08 <_ZN12VelocityCtrl3pidEv+0x248>)
 8005912:	601a      	str	r2, [r3, #0]
	o_d = o_kd_ * (o_diff - o_pre_diff) / DELTA_T;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	ed93 7a08 	vldr	s14, [r3, #32]
 800591a:	4b3e      	ldr	r3, [pc, #248]	; (8005a14 <_ZN12VelocityCtrl3pidEv+0x254>)
 800591c:	edd3 7a00 	vldr	s15, [r3]
 8005920:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005924:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800592c:	ee17 0a90 	vmov	r0, s15
 8005930:	f7fa fe22 	bl	8000578 <__aeabi_f2d>
 8005934:	a332      	add	r3, pc, #200	; (adr r3, 8005a00 <_ZN12VelocityCtrl3pidEv+0x240>)
 8005936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593a:	f7fa ff9f 	bl	800087c <__aeabi_ddiv>
 800593e:	4603      	mov	r3, r0
 8005940:	460c      	mov	r4, r1
 8005942:	4618      	mov	r0, r3
 8005944:	4621      	mov	r1, r4
 8005946:	f7fb f967 	bl	8000c18 <__aeabi_d2f>
 800594a:	4603      	mov	r3, r0
 800594c:	61bb      	str	r3, [r7, #24]

	float v_left_ratio, v_right_ratio, o_left_ratio, o_right_ratio;

	v_left_ratio = v_right_ratio =  v_p + v_d + v_i;
 800594e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005952:	edd7 7a08 	vldr	s15, [r7, #32]
 8005956:	ee37 7a27 	vadd.f32	s14, s14, s15
 800595a:	4b2c      	ldr	r3, [pc, #176]	; (8005a0c <_ZN12VelocityCtrl3pidEv+0x24c>)
 800595c:	edd3 7a00 	vldr	s15, [r3]
 8005960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005964:	edc7 7a05 	vstr	s15, [r7, #20]
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	613b      	str	r3, [r7, #16]

	o_left_ratio = o_p + o_d + o_i;
 800596c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005970:	edd7 7a06 	vldr	s15, [r7, #24]
 8005974:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005978:	4b23      	ldr	r3, [pc, #140]	; (8005a08 <_ZN12VelocityCtrl3pidEv+0x248>)
 800597a:	edd3 7a00 	vldr	s15, [r3]
 800597e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005982:	edc7 7a03 	vstr	s15, [r7, #12]
	o_right_ratio = -(o_p + o_d + o_i);
 8005986:	ed97 7a07 	vldr	s14, [r7, #28]
 800598a:	edd7 7a06 	vldr	s15, [r7, #24]
 800598e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005992:	4b1d      	ldr	r3, [pc, #116]	; (8005a08 <_ZN12VelocityCtrl3pidEv+0x248>)
 8005994:	edd3 7a00 	vldr	s15, [r3]
 8005998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800599c:	eef1 7a67 	vneg.f32	s15, s15
 80059a0:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(v_left_ratio + o_left_ratio, v_right_ratio + o_right_ratio);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80059a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80059ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80059b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059b4:	ee17 0a90 	vmov	r0, s15
 80059b8:	f7fa fdde 	bl	8000578 <__aeabi_f2d>
 80059bc:	4605      	mov	r5, r0
 80059be:	460e      	mov	r6, r1
 80059c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80059c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80059c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059cc:	ee17 0a90 	vmov	r0, s15
 80059d0:	f7fa fdd2 	bl	8000578 <__aeabi_f2d>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	ec43 2b11 	vmov	d1, r2, r3
 80059dc:	ec46 5b10 	vmov	d0, r5, r6
 80059e0:	4620      	mov	r0, r4
 80059e2:	f7ff f91b 	bl	8004c1c <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 80059e6:	4a0a      	ldr	r2, [pc, #40]	; (8005a10 <_ZN12VelocityCtrl3pidEv+0x250>)
 80059e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ea:	6013      	str	r3, [r2, #0]
	o_pre_diff = o_diff;
 80059ec:	4a09      	ldr	r2, [pc, #36]	; (8005a14 <_ZN12VelocityCtrl3pidEv+0x254>)
 80059ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f0:	6013      	str	r3, [r2, #0]
}
 80059f2:	bf00      	nop
 80059f4:	3734      	adds	r7, #52	; 0x34
 80059f6:	46bd      	mov	sp, r7
 80059f8:	ecbd 8b02 	vpop	{d8}
 80059fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059fe:	bf00      	nop
 8005a00:	d2f1a9fc 	.word	0xd2f1a9fc
 8005a04:	3f50624d 	.word	0x3f50624d
 8005a08:	200002ec 	.word	0x200002ec
 8005a0c:	200002e8 	.word	0x200002e8
 8005a10:	200002e0 	.word	0x200002e0
 8005a14:	200002e4 	.word	0x200002e4

08005a18 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	ed87 0a02 	vstr	s0, [r7, #8]
 8005a24:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	605a      	str	r2, [r3, #4]
}
 8005a34:	bf00      	nop
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	ed87 0a02 	vstr	s0, [r7, #8]
 8005a4c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005a5c:	bf00      	nop
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	ed87 0a02 	vstr	s0, [r7, #8]
 8005a74:	edc7 0a01 	vstr	s1, [r7, #4]
 8005a78:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	615a      	str	r2, [r3, #20]
}
 8005a8e:	bf00      	nop
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b085      	sub	sp, #20
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	60f8      	str	r0, [r7, #12]
 8005aa2:	ed87 0a02 	vstr	s0, [r7, #8]
 8005aa6:	edc7 0a01 	vstr	s1, [r7, #4]
 8005aaa:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	621a      	str	r2, [r3, #32]
}
 8005ac0:	bf00      	nop
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff fe3b 	bl	8005750 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <_ZN12VelocityCtrl4flipEv+0x1e>
		pid();
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff fe6b 	bl	80057c0 <_ZN12VelocityCtrl3pidEv>
		//pidTranslationOnly();
	}


}
 8005aea:	bf00      	nop
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005b48 <_ZN12VelocityCtrl4stopEv+0x30>
 8005b30:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005b48 <_ZN12VelocityCtrl4stopEv+0x30>
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff f871 	bl	8004c1c <_ZN5Motor8setRatioEdd>

}
 8005b3a:	bf00      	nop
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	f3af 8000 	nop.w
	...

08005b50 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	ee07 3a90 	vmov	s15, r3
}
 8005b60:	eeb0 0a67 	vmov.f32	s0, s15
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
	...

08005b70 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a1e      	ldr	r2, [pc, #120]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d10e      	bne.n	8005ba0 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005b82:	f001 fe27 	bl	80077d4 <cppFlip100ns>

		tim7_timer++;
 8005b86:	4b1d      	ldr	r3, [pc, #116]	; (8005bfc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	4a1b      	ldr	r2, [pc, #108]	; (8005bfc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005b8e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005b90:	4b1a      	ldr	r3, [pc, #104]	; (8005bfc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a1a      	ldr	r2, [pc, #104]	; (8005c00 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d902      	bls.n	8005ba0 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005b9a:	4b18      	ldr	r3, [pc, #96]	; (8005bfc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a17      	ldr	r2, [pc, #92]	; (8005c04 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d10e      	bne.n	8005bc8 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005baa:	f001 fdc9 	bl	8007740 <cppFlip1ms>

		tim6_timer++;
 8005bae:	4b16      	ldr	r3, [pc, #88]	; (8005c08 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	4a14      	ldr	r2, [pc, #80]	; (8005c08 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005bb6:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005bb8:	4b13      	ldr	r3, [pc, #76]	; (8005c08 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a10      	ldr	r2, [pc, #64]	; (8005c00 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d902      	bls.n	8005bc8 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005bc2:	4b11      	ldr	r3, [pc, #68]	; (8005c08 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a0f      	ldr	r2, [pc, #60]	; (8005c0c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d10e      	bne.n	8005bf0 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005bd2:	f001 fe09 	bl	80077e8 <cppFlip10ms>

		tim13_timer++;
 8005bd6:	4b0e      	ldr	r3, [pc, #56]	; (8005c10 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	4a0c      	ldr	r2, [pc, #48]	; (8005c10 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005bde:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005be0:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a06      	ldr	r2, [pc, #24]	; (8005c00 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d902      	bls.n	8005bf0 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005bea:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	601a      	str	r2, [r3, #0]
	}

}
 8005bf0:	bf00      	nop
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	40001400 	.word	0x40001400
 8005bfc:	2003fad8 	.word	0x2003fad8
 8005c00:	0001869f 	.word	0x0001869f
 8005c04:	40001000 	.word	0x40001000
 8005c08:	2003fa94 	.word	0x2003fa94
 8005c0c:	40001c00 	.word	0x40001c00
 8005c10:	2003fadc 	.word	0x2003fadc

08005c14 <init>:

void init()
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c1e:	4808      	ldr	r0, [pc, #32]	; (8005c40 <init+0x2c>)
 8005c20:	f005 f912 	bl	800ae48 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005c24:	4807      	ldr	r0, [pc, #28]	; (8005c44 <init+0x30>)
 8005c26:	f008 ffee 	bl	800ec06 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005c2a:	4807      	ldr	r0, [pc, #28]	; (8005c48 <init+0x34>)
 8005c2c:	f008 ffeb 	bl	800ec06 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005c30:	4806      	ldr	r0, [pc, #24]	; (8005c4c <init+0x38>)
 8005c32:	f008 ffe8 	bl	800ec06 <HAL_TIM_Base_Start_IT>

	cppInit();
 8005c36:	f001 fce3 	bl	8007600 <cppInit>

	//path_following_initialize();

}
 8005c3a:	bf00      	nop
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	40021000 	.word	0x40021000
 8005c44:	2003fbc0 	.word	0x2003fbc0
 8005c48:	2003fd64 	.word	0x2003fd64
 8005c4c:	2003fae0 	.word	0x2003fae0

08005c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005c54:	f003 fdea 	bl	800982c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005c58:	f000 f82a 	bl	8005cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c5c:	f000 fdbc 	bl	80067d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005c60:	f000 fd8a 	bl	8006778 <MX_DMA_Init>
  MX_I2C2_Init();
 8005c64:	f000 f9e8 	bl	8006038 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005c68:	f000 fa14 	bl	8006094 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005c6c:	f000 fa32 	bl	80060d4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005c70:	f000 fa66 	bl	8006140 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005c74:	f000 fb70 	bl	8006358 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005c78:	f000 fc3c 	bl	80064f4 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005c7c:	f000 fd52 	bl	8006724 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005c80:	f00a ffb4 	bl	8010bec <MX_FATFS_Init>
  MX_TIM6_Init();
 8005c84:	f000 fbcc 	bl	8006420 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005c88:	f000 f9a8 	bl	8005fdc <MX_I2C1_Init>
  MX_TIM3_Init();
 8005c8c:	f000 fb00 	bl	8006290 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005c90:	f000 fc88 	bl	80065a4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005c94:	f000 fcd4 	bl	8006640 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005c98:	f000 f898 	bl	8005dcc <MX_ADC2_Init>
  MX_TIM7_Init();
 8005c9c:	f000 fbf6 	bl	800648c <MX_TIM7_Init>
  MX_TIM13_Init();
 8005ca0:	f000 fd1c 	bl	80066dc <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005ca4:	f7ff ffb6 	bl	8005c14 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005ca8:	f001 fdb6 	bl	8007818 <cppLoop>
 8005cac:	e7fc      	b.n	8005ca8 <main+0x58>
	...

08005cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b0a4      	sub	sp, #144	; 0x90
 8005cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005cb6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005cba:	2234      	movs	r2, #52	; 0x34
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f00f fde9 	bl	8015896 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005cc4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	605a      	str	r2, [r3, #4]
 8005cce:	609a      	str	r2, [r3, #8]
 8005cd0:	60da      	str	r2, [r3, #12]
 8005cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005cd4:	f107 030c 	add.w	r3, r7, #12
 8005cd8:	223c      	movs	r2, #60	; 0x3c
 8005cda:	2100      	movs	r1, #0
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f00f fdda 	bl	8015896 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60bb      	str	r3, [r7, #8]
 8005ce6:	4b37      	ldr	r3, [pc, #220]	; (8005dc4 <SystemClock_Config+0x114>)
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cea:	4a36      	ldr	r2, [pc, #216]	; (8005dc4 <SystemClock_Config+0x114>)
 8005cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8005cf2:	4b34      	ldr	r3, [pc, #208]	; (8005dc4 <SystemClock_Config+0x114>)
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cfa:	60bb      	str	r3, [r7, #8]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cfe:	2300      	movs	r3, #0
 8005d00:	607b      	str	r3, [r7, #4]
 8005d02:	4b31      	ldr	r3, [pc, #196]	; (8005dc8 <SystemClock_Config+0x118>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a30      	ldr	r2, [pc, #192]	; (8005dc8 <SystemClock_Config+0x118>)
 8005d08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	4b2e      	ldr	r3, [pc, #184]	; (8005dc8 <SystemClock_Config+0x118>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d16:	607b      	str	r3, [r7, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005d1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d22:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d24:	2302      	movs	r3, #2
 8005d26:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005d28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d2c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005d2e:	2308      	movs	r3, #8
 8005d30:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005d32:	23b4      	movs	r3, #180	; 0xb4
 8005d34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005d38:	2302      	movs	r3, #2
 8005d3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005d3e:	2308      	movs	r3, #8
 8005d40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005d44:	2302      	movs	r3, #2
 8005d46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d4a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f006 fcb2 	bl	800c6b8 <HAL_RCC_OscConfig>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005d5a:	f000 fe7f 	bl	8006a5c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005d5e:	f006 f823 	bl	800bda8 <HAL_PWREx_EnableOverDrive>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005d68:	f000 fe78 	bl	8006a5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d6c:	230f      	movs	r3, #15
 8005d6e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d70:	2302      	movs	r3, #2
 8005d72:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005d74:	2300      	movs	r3, #0
 8005d76:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005d78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005d7c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005d7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d82:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005d84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005d88:	2105      	movs	r1, #5
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f006 f85c 	bl	800be48 <HAL_RCC_ClockConfig>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005d96:	f000 fe61 	bl	8006a5c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8005d9a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005d9e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005da0:	2300      	movs	r3, #0
 8005da2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005da4:	2300      	movs	r3, #0
 8005da6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005da8:	f107 030c 	add.w	r3, r7, #12
 8005dac:	4618      	mov	r0, r3
 8005dae:	f006 fa45 	bl	800c23c <HAL_RCCEx_PeriphCLKConfig>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005db8:	f000 fe50 	bl	8006a5c <Error_Handler>
  }
}
 8005dbc:	bf00      	nop
 8005dbe:	3790      	adds	r7, #144	; 0x90
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	40023800 	.word	0x40023800
 8005dc8:	40007000 	.word	0x40007000

08005dcc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005dd2:	463b      	mov	r3, r7
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	605a      	str	r2, [r3, #4]
 8005dda:	609a      	str	r2, [r3, #8]
 8005ddc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005dde:	4b7c      	ldr	r3, [pc, #496]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005de0:	4a7c      	ldr	r2, [pc, #496]	; (8005fd4 <MX_ADC2_Init+0x208>)
 8005de2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005de4:	4b7a      	ldr	r3, [pc, #488]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005de6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005dea:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005dec:	4b78      	ldr	r3, [pc, #480]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005df2:	4b77      	ldr	r3, [pc, #476]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005df4:	2201      	movs	r2, #1
 8005df6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005df8:	4b75      	ldr	r3, [pc, #468]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005dfe:	4b74      	ldr	r3, [pc, #464]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005e06:	4b72      	ldr	r3, [pc, #456]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005e0c:	4b70      	ldr	r3, [pc, #448]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005e0e:	4a72      	ldr	r2, [pc, #456]	; (8005fd8 <MX_ADC2_Init+0x20c>)
 8005e10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005e12:	4b6f      	ldr	r3, [pc, #444]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005e18:	4b6d      	ldr	r3, [pc, #436]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005e1a:	220e      	movs	r2, #14
 8005e1c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005e1e:	4b6c      	ldr	r3, [pc, #432]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005e26:	4b6a      	ldr	r3, [pc, #424]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005e28:	2201      	movs	r2, #1
 8005e2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005e2c:	4868      	ldr	r0, [pc, #416]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005e2e:	f003 fd93 	bl	8009958 <HAL_ADC_Init>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d001      	beq.n	8005e3c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005e38:	f000 fe10 	bl	8006a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005e3c:	230a      	movs	r3, #10
 8005e3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005e40:	2301      	movs	r3, #1
 8005e42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005e44:	2306      	movs	r3, #6
 8005e46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e48:	463b      	mov	r3, r7
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4860      	ldr	r0, [pc, #384]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005e4e:	f003 fed7 	bl	8009c00 <HAL_ADC_ConfigChannel>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005e58:	f000 fe00 	bl	8006a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005e5c:	230b      	movs	r3, #11
 8005e5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005e60:	2302      	movs	r3, #2
 8005e62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e64:	463b      	mov	r3, r7
 8005e66:	4619      	mov	r1, r3
 8005e68:	4859      	ldr	r0, [pc, #356]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005e6a:	f003 fec9 	bl	8009c00 <HAL_ADC_ConfigChannel>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005e74:	f000 fdf2 	bl	8006a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005e78:	230c      	movs	r3, #12
 8005e7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e80:	463b      	mov	r3, r7
 8005e82:	4619      	mov	r1, r3
 8005e84:	4852      	ldr	r0, [pc, #328]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005e86:	f003 febb 	bl	8009c00 <HAL_ADC_ConfigChannel>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005e90:	f000 fde4 	bl	8006a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005e94:	230d      	movs	r3, #13
 8005e96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005e98:	2304      	movs	r3, #4
 8005e9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e9c:	463b      	mov	r3, r7
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	484b      	ldr	r0, [pc, #300]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005ea2:	f003 fead 	bl	8009c00 <HAL_ADC_ConfigChannel>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005eac:	f000 fdd6 	bl	8006a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005eb4:	2305      	movs	r3, #5
 8005eb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005eb8:	463b      	mov	r3, r7
 8005eba:	4619      	mov	r1, r3
 8005ebc:	4844      	ldr	r0, [pc, #272]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005ebe:	f003 fe9f 	bl	8009c00 <HAL_ADC_ConfigChannel>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005ec8:	f000 fdc8 	bl	8006a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005ed0:	2306      	movs	r3, #6
 8005ed2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ed4:	463b      	mov	r3, r7
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	483d      	ldr	r0, [pc, #244]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005eda:	f003 fe91 	bl	8009c00 <HAL_ADC_ConfigChannel>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005ee4:	f000 fdba 	bl	8006a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005ee8:	2302      	movs	r3, #2
 8005eea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005eec:	2307      	movs	r3, #7
 8005eee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ef0:	463b      	mov	r3, r7
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4836      	ldr	r0, [pc, #216]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005ef6:	f003 fe83 	bl	8009c00 <HAL_ADC_ConfigChannel>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005f00:	f000 fdac 	bl	8006a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005f04:	2303      	movs	r3, #3
 8005f06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005f08:	2308      	movs	r3, #8
 8005f0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f0c:	463b      	mov	r3, r7
 8005f0e:	4619      	mov	r1, r3
 8005f10:	482f      	ldr	r0, [pc, #188]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005f12:	f003 fe75 	bl	8009c00 <HAL_ADC_ConfigChannel>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8005f1c:	f000 fd9e 	bl	8006a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005f20:	2304      	movs	r3, #4
 8005f22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8005f24:	2309      	movs	r3, #9
 8005f26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f28:	463b      	mov	r3, r7
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	4828      	ldr	r0, [pc, #160]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005f2e:	f003 fe67 	bl	8009c00 <HAL_ADC_ConfigChannel>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8005f38:	f000 fd90 	bl	8006a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005f3c:	2305      	movs	r3, #5
 8005f3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005f40:	230a      	movs	r3, #10
 8005f42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f44:	463b      	mov	r3, r7
 8005f46:	4619      	mov	r1, r3
 8005f48:	4821      	ldr	r0, [pc, #132]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005f4a:	f003 fe59 	bl	8009c00 <HAL_ADC_ConfigChannel>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8005f54:	f000 fd82 	bl	8006a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005f58:	2306      	movs	r3, #6
 8005f5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005f5c:	230b      	movs	r3, #11
 8005f5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f60:	463b      	mov	r3, r7
 8005f62:	4619      	mov	r1, r3
 8005f64:	481a      	ldr	r0, [pc, #104]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005f66:	f003 fe4b 	bl	8009c00 <HAL_ADC_ConfigChannel>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8005f70:	f000 fd74 	bl	8006a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005f74:	2307      	movs	r3, #7
 8005f76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005f78:	230c      	movs	r3, #12
 8005f7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f7c:	463b      	mov	r3, r7
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4813      	ldr	r0, [pc, #76]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005f82:	f003 fe3d 	bl	8009c00 <HAL_ADC_ConfigChannel>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8005f8c:	f000 fd66 	bl	8006a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005f90:	2308      	movs	r3, #8
 8005f92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8005f94:	230d      	movs	r3, #13
 8005f96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f98:	463b      	mov	r3, r7
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	480c      	ldr	r0, [pc, #48]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005f9e:	f003 fe2f 	bl	8009c00 <HAL_ADC_ConfigChannel>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8005fa8:	f000 fd58 	bl	8006a5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005fac:	2309      	movs	r3, #9
 8005fae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8005fb0:	230e      	movs	r3, #14
 8005fb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fb4:	463b      	mov	r3, r7
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4805      	ldr	r0, [pc, #20]	; (8005fd0 <MX_ADC2_Init+0x204>)
 8005fba:	f003 fe21 	bl	8009c00 <HAL_ADC_ConfigChannel>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8005fc4:	f000 fd4a 	bl	8006a5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005fc8:	bf00      	nop
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	2003f964 	.word	0x2003f964
 8005fd4:	40012100 	.word	0x40012100
 8005fd8:	0f000001 	.word	0x0f000001

08005fdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005fe0:	4b12      	ldr	r3, [pc, #72]	; (800602c <MX_I2C1_Init+0x50>)
 8005fe2:	4a13      	ldr	r2, [pc, #76]	; (8006030 <MX_I2C1_Init+0x54>)
 8005fe4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005fe6:	4b11      	ldr	r3, [pc, #68]	; (800602c <MX_I2C1_Init+0x50>)
 8005fe8:	4a12      	ldr	r2, [pc, #72]	; (8006034 <MX_I2C1_Init+0x58>)
 8005fea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005fec:	4b0f      	ldr	r3, [pc, #60]	; (800602c <MX_I2C1_Init+0x50>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005ff2:	4b0e      	ldr	r3, [pc, #56]	; (800602c <MX_I2C1_Init+0x50>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005ff8:	4b0c      	ldr	r3, [pc, #48]	; (800602c <MX_I2C1_Init+0x50>)
 8005ffa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ffe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006000:	4b0a      	ldr	r3, [pc, #40]	; (800602c <MX_I2C1_Init+0x50>)
 8006002:	2200      	movs	r2, #0
 8006004:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006006:	4b09      	ldr	r3, [pc, #36]	; (800602c <MX_I2C1_Init+0x50>)
 8006008:	2200      	movs	r2, #0
 800600a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800600c:	4b07      	ldr	r3, [pc, #28]	; (800602c <MX_I2C1_Init+0x50>)
 800600e:	2200      	movs	r2, #0
 8006010:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006012:	4b06      	ldr	r3, [pc, #24]	; (800602c <MX_I2C1_Init+0x50>)
 8006014:	2280      	movs	r2, #128	; 0x80
 8006016:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006018:	4804      	ldr	r0, [pc, #16]	; (800602c <MX_I2C1_Init+0x50>)
 800601a:	f004 ff2f 	bl	800ae7c <HAL_I2C_Init>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006024:	f000 fd1a 	bl	8006a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006028:	bf00      	nop
 800602a:	bd80      	pop	{r7, pc}
 800602c:	2003f9ac 	.word	0x2003f9ac
 8006030:	40005400 	.word	0x40005400
 8006034:	000186a0 	.word	0x000186a0

08006038 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800603c:	4b12      	ldr	r3, [pc, #72]	; (8006088 <MX_I2C2_Init+0x50>)
 800603e:	4a13      	ldr	r2, [pc, #76]	; (800608c <MX_I2C2_Init+0x54>)
 8006040:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8006042:	4b11      	ldr	r3, [pc, #68]	; (8006088 <MX_I2C2_Init+0x50>)
 8006044:	4a12      	ldr	r2, [pc, #72]	; (8006090 <MX_I2C2_Init+0x58>)
 8006046:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006048:	4b0f      	ldr	r3, [pc, #60]	; (8006088 <MX_I2C2_Init+0x50>)
 800604a:	2200      	movs	r2, #0
 800604c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800604e:	4b0e      	ldr	r3, [pc, #56]	; (8006088 <MX_I2C2_Init+0x50>)
 8006050:	2200      	movs	r2, #0
 8006052:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006054:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <MX_I2C2_Init+0x50>)
 8006056:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800605a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800605c:	4b0a      	ldr	r3, [pc, #40]	; (8006088 <MX_I2C2_Init+0x50>)
 800605e:	2200      	movs	r2, #0
 8006060:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006062:	4b09      	ldr	r3, [pc, #36]	; (8006088 <MX_I2C2_Init+0x50>)
 8006064:	2200      	movs	r2, #0
 8006066:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006068:	4b07      	ldr	r3, [pc, #28]	; (8006088 <MX_I2C2_Init+0x50>)
 800606a:	2200      	movs	r2, #0
 800606c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800606e:	4b06      	ldr	r3, [pc, #24]	; (8006088 <MX_I2C2_Init+0x50>)
 8006070:	2280      	movs	r2, #128	; 0x80
 8006072:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006074:	4804      	ldr	r0, [pc, #16]	; (8006088 <MX_I2C2_Init+0x50>)
 8006076:	f004 ff01 	bl	800ae7c <HAL_I2C_Init>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006080:	f000 fcec 	bl	8006a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006084:	bf00      	nop
 8006086:	bd80      	pop	{r7, pc}
 8006088:	2003fa40 	.word	0x2003fa40
 800608c:	40005800 	.word	0x40005800
 8006090:	000186a0 	.word	0x000186a0

08006094 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8006098:	4b0c      	ldr	r3, [pc, #48]	; (80060cc <MX_SDIO_SD_Init+0x38>)
 800609a:	4a0d      	ldr	r2, [pc, #52]	; (80060d0 <MX_SDIO_SD_Init+0x3c>)
 800609c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800609e:	4b0b      	ldr	r3, [pc, #44]	; (80060cc <MX_SDIO_SD_Init+0x38>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80060a4:	4b09      	ldr	r3, [pc, #36]	; (80060cc <MX_SDIO_SD_Init+0x38>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80060aa:	4b08      	ldr	r3, [pc, #32]	; (80060cc <MX_SDIO_SD_Init+0x38>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80060b0:	4b06      	ldr	r3, [pc, #24]	; (80060cc <MX_SDIO_SD_Init+0x38>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80060b6:	4b05      	ldr	r3, [pc, #20]	; (80060cc <MX_SDIO_SD_Init+0x38>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80060bc:	4b03      	ldr	r3, [pc, #12]	; (80060cc <MX_SDIO_SD_Init+0x38>)
 80060be:	2202      	movs	r2, #2
 80060c0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80060c2:	bf00      	nop
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	2003fc40 	.word	0x2003fc40
 80060d0:	40012c00 	.word	0x40012c00

080060d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80060d8:	4b17      	ldr	r3, [pc, #92]	; (8006138 <MX_SPI2_Init+0x64>)
 80060da:	4a18      	ldr	r2, [pc, #96]	; (800613c <MX_SPI2_Init+0x68>)
 80060dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80060de:	4b16      	ldr	r3, [pc, #88]	; (8006138 <MX_SPI2_Init+0x64>)
 80060e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80060e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80060e6:	4b14      	ldr	r3, [pc, #80]	; (8006138 <MX_SPI2_Init+0x64>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80060ec:	4b12      	ldr	r3, [pc, #72]	; (8006138 <MX_SPI2_Init+0x64>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80060f2:	4b11      	ldr	r3, [pc, #68]	; (8006138 <MX_SPI2_Init+0x64>)
 80060f4:	2202      	movs	r2, #2
 80060f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80060f8:	4b0f      	ldr	r3, [pc, #60]	; (8006138 <MX_SPI2_Init+0x64>)
 80060fa:	2201      	movs	r2, #1
 80060fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80060fe:	4b0e      	ldr	r3, [pc, #56]	; (8006138 <MX_SPI2_Init+0x64>)
 8006100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006104:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006106:	4b0c      	ldr	r3, [pc, #48]	; (8006138 <MX_SPI2_Init+0x64>)
 8006108:	2228      	movs	r2, #40	; 0x28
 800610a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800610c:	4b0a      	ldr	r3, [pc, #40]	; (8006138 <MX_SPI2_Init+0x64>)
 800610e:	2200      	movs	r2, #0
 8006110:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006112:	4b09      	ldr	r3, [pc, #36]	; (8006138 <MX_SPI2_Init+0x64>)
 8006114:	2200      	movs	r2, #0
 8006116:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006118:	4b07      	ldr	r3, [pc, #28]	; (8006138 <MX_SPI2_Init+0x64>)
 800611a:	2200      	movs	r2, #0
 800611c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800611e:	4b06      	ldr	r3, [pc, #24]	; (8006138 <MX_SPI2_Init+0x64>)
 8006120:	220a      	movs	r2, #10
 8006122:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006124:	4804      	ldr	r0, [pc, #16]	; (8006138 <MX_SPI2_Init+0x64>)
 8006126:	f007 ffef 	bl	800e108 <HAL_SPI_Init>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006130:	f000 fc94 	bl	8006a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006134:	bf00      	nop
 8006136:	bd80      	pop	{r7, pc}
 8006138:	2003f88c 	.word	0x2003f88c
 800613c:	40003800 	.word	0x40003800

08006140 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b09a      	sub	sp, #104	; 0x68
 8006144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006146:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800614a:	2224      	movs	r2, #36	; 0x24
 800614c:	2100      	movs	r1, #0
 800614e:	4618      	mov	r0, r3
 8006150:	f00f fba1 	bl	8015896 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006154:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800615e:	f107 0320 	add.w	r3, r7, #32
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]
 8006166:	605a      	str	r2, [r3, #4]
 8006168:	609a      	str	r2, [r3, #8]
 800616a:	60da      	str	r2, [r3, #12]
 800616c:	611a      	str	r2, [r3, #16]
 800616e:	615a      	str	r2, [r3, #20]
 8006170:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006172:	463b      	mov	r3, r7
 8006174:	2220      	movs	r2, #32
 8006176:	2100      	movs	r1, #0
 8006178:	4618      	mov	r0, r3
 800617a:	f00f fb8c 	bl	8015896 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800617e:	4b42      	ldr	r3, [pc, #264]	; (8006288 <MX_TIM1_Init+0x148>)
 8006180:	4a42      	ldr	r2, [pc, #264]	; (800628c <MX_TIM1_Init+0x14c>)
 8006182:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006184:	4b40      	ldr	r3, [pc, #256]	; (8006288 <MX_TIM1_Init+0x148>)
 8006186:	2200      	movs	r2, #0
 8006188:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800618a:	4b3f      	ldr	r3, [pc, #252]	; (8006288 <MX_TIM1_Init+0x148>)
 800618c:	2200      	movs	r2, #0
 800618e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006190:	4b3d      	ldr	r3, [pc, #244]	; (8006288 <MX_TIM1_Init+0x148>)
 8006192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006196:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006198:	4b3b      	ldr	r3, [pc, #236]	; (8006288 <MX_TIM1_Init+0x148>)
 800619a:	2200      	movs	r2, #0
 800619c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800619e:	4b3a      	ldr	r3, [pc, #232]	; (8006288 <MX_TIM1_Init+0x148>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061a4:	4b38      	ldr	r3, [pc, #224]	; (8006288 <MX_TIM1_Init+0x148>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80061aa:	4837      	ldr	r0, [pc, #220]	; (8006288 <MX_TIM1_Init+0x148>)
 80061ac:	f008 fd4f 	bl	800ec4e <HAL_TIM_PWM_Init>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80061b6:	f000 fc51 	bl	8006a5c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80061ba:	2303      	movs	r3, #3
 80061bc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80061be:	2300      	movs	r3, #0
 80061c0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80061c2:	2301      	movs	r3, #1
 80061c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80061c6:	2300      	movs	r3, #0
 80061c8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80061ca:	2300      	movs	r3, #0
 80061cc:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80061ce:	2300      	movs	r3, #0
 80061d0:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80061d2:	2301      	movs	r3, #1
 80061d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80061d6:	2300      	movs	r3, #0
 80061d8:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80061da:	2300      	movs	r3, #0
 80061dc:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80061de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80061e2:	4619      	mov	r1, r3
 80061e4:	4828      	ldr	r0, [pc, #160]	; (8006288 <MX_TIM1_Init+0x148>)
 80061e6:	f008 fd9b 	bl	800ed20 <HAL_TIM_Encoder_Init>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80061f0:	f000 fc34 	bl	8006a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80061f4:	2300      	movs	r3, #0
 80061f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061f8:	2300      	movs	r3, #0
 80061fa:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80061fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006200:	4619      	mov	r1, r3
 8006202:	4821      	ldr	r0, [pc, #132]	; (8006288 <MX_TIM1_Init+0x148>)
 8006204:	f009 fac2 	bl	800f78c <HAL_TIMEx_MasterConfigSynchronization>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800620e:	f000 fc25 	bl	8006a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006212:	2360      	movs	r3, #96	; 0x60
 8006214:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8006216:	2300      	movs	r3, #0
 8006218:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800621a:	2300      	movs	r3, #0
 800621c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800621e:	2300      	movs	r3, #0
 8006220:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006222:	2300      	movs	r3, #0
 8006224:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006226:	2300      	movs	r3, #0
 8006228:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800622a:	2300      	movs	r3, #0
 800622c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800622e:	f107 0320 	add.w	r3, r7, #32
 8006232:	2208      	movs	r2, #8
 8006234:	4619      	mov	r1, r3
 8006236:	4814      	ldr	r0, [pc, #80]	; (8006288 <MX_TIM1_Init+0x148>)
 8006238:	f008 ff44 	bl	800f0c4 <HAL_TIM_PWM_ConfigChannel>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8006242:	f000 fc0b 	bl	8006a5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006246:	2300      	movs	r3, #0
 8006248:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800624a:	2300      	movs	r3, #0
 800624c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800624e:	2300      	movs	r3, #0
 8006250:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006252:	2300      	movs	r3, #0
 8006254:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006256:	2300      	movs	r3, #0
 8006258:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800625a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800625e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006260:	2300      	movs	r3, #0
 8006262:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006264:	463b      	mov	r3, r7
 8006266:	4619      	mov	r1, r3
 8006268:	4807      	ldr	r0, [pc, #28]	; (8006288 <MX_TIM1_Init+0x148>)
 800626a:	f009 fb0b 	bl	800f884 <HAL_TIMEx_ConfigBreakDeadTime>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8006274:	f000 fbf2 	bl	8006a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006278:	4803      	ldr	r0, [pc, #12]	; (8006288 <MX_TIM1_Init+0x148>)
 800627a:	f000 ffdf 	bl	800723c <HAL_TIM_MspPostInit>

}
 800627e:	bf00      	nop
 8006280:	3768      	adds	r7, #104	; 0x68
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	2003fc00 	.word	0x2003fc00
 800628c:	40010000 	.word	0x40010000

08006290 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08a      	sub	sp, #40	; 0x28
 8006294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006296:	f107 0320 	add.w	r3, r7, #32
 800629a:	2200      	movs	r2, #0
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80062a0:	1d3b      	adds	r3, r7, #4
 80062a2:	2200      	movs	r2, #0
 80062a4:	601a      	str	r2, [r3, #0]
 80062a6:	605a      	str	r2, [r3, #4]
 80062a8:	609a      	str	r2, [r3, #8]
 80062aa:	60da      	str	r2, [r3, #12]
 80062ac:	611a      	str	r2, [r3, #16]
 80062ae:	615a      	str	r2, [r3, #20]
 80062b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80062b2:	4b27      	ldr	r3, [pc, #156]	; (8006350 <MX_TIM3_Init+0xc0>)
 80062b4:	4a27      	ldr	r2, [pc, #156]	; (8006354 <MX_TIM3_Init+0xc4>)
 80062b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80062b8:	4b25      	ldr	r3, [pc, #148]	; (8006350 <MX_TIM3_Init+0xc0>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062be:	4b24      	ldr	r3, [pc, #144]	; (8006350 <MX_TIM3_Init+0xc0>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80062c4:	4b22      	ldr	r3, [pc, #136]	; (8006350 <MX_TIM3_Init+0xc0>)
 80062c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062cc:	4b20      	ldr	r3, [pc, #128]	; (8006350 <MX_TIM3_Init+0xc0>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062d2:	4b1f      	ldr	r3, [pc, #124]	; (8006350 <MX_TIM3_Init+0xc0>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80062d8:	481d      	ldr	r0, [pc, #116]	; (8006350 <MX_TIM3_Init+0xc0>)
 80062da:	f008 fcb8 	bl	800ec4e <HAL_TIM_PWM_Init>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80062e4:	f000 fbba 	bl	8006a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062e8:	2300      	movs	r3, #0
 80062ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062ec:	2300      	movs	r3, #0
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80062f0:	f107 0320 	add.w	r3, r7, #32
 80062f4:	4619      	mov	r1, r3
 80062f6:	4816      	ldr	r0, [pc, #88]	; (8006350 <MX_TIM3_Init+0xc0>)
 80062f8:	f009 fa48 	bl	800f78c <HAL_TIMEx_MasterConfigSynchronization>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006302:	f000 fbab 	bl	8006a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006306:	2360      	movs	r3, #96	; 0x60
 8006308:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800630a:	2300      	movs	r3, #0
 800630c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006312:	2300      	movs	r3, #0
 8006314:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006316:	1d3b      	adds	r3, r7, #4
 8006318:	2200      	movs	r2, #0
 800631a:	4619      	mov	r1, r3
 800631c:	480c      	ldr	r0, [pc, #48]	; (8006350 <MX_TIM3_Init+0xc0>)
 800631e:	f008 fed1 	bl	800f0c4 <HAL_TIM_PWM_ConfigChannel>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d001      	beq.n	800632c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006328:	f000 fb98 	bl	8006a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800632c:	1d3b      	adds	r3, r7, #4
 800632e:	2204      	movs	r2, #4
 8006330:	4619      	mov	r1, r3
 8006332:	4807      	ldr	r0, [pc, #28]	; (8006350 <MX_TIM3_Init+0xc0>)
 8006334:	f008 fec6 	bl	800f0c4 <HAL_TIM_PWM_ConfigChannel>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800633e:	f000 fb8d 	bl	8006a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006342:	4803      	ldr	r0, [pc, #12]	; (8006350 <MX_TIM3_Init+0xc0>)
 8006344:	f000 ff7a 	bl	800723c <HAL_TIM_MspPostInit>

}
 8006348:	bf00      	nop
 800634a:	3728      	adds	r7, #40	; 0x28
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	2003fa98 	.word	0x2003fa98
 8006354:	40000400 	.word	0x40000400

08006358 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08a      	sub	sp, #40	; 0x28
 800635c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800635e:	f107 0320 	add.w	r3, r7, #32
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]
 8006366:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006368:	1d3b      	adds	r3, r7, #4
 800636a:	2200      	movs	r2, #0
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	605a      	str	r2, [r3, #4]
 8006370:	609a      	str	r2, [r3, #8]
 8006372:	60da      	str	r2, [r3, #12]
 8006374:	611a      	str	r2, [r3, #16]
 8006376:	615a      	str	r2, [r3, #20]
 8006378:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800637a:	4b27      	ldr	r3, [pc, #156]	; (8006418 <MX_TIM4_Init+0xc0>)
 800637c:	4a27      	ldr	r2, [pc, #156]	; (800641c <MX_TIM4_Init+0xc4>)
 800637e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006380:	4b25      	ldr	r3, [pc, #148]	; (8006418 <MX_TIM4_Init+0xc0>)
 8006382:	2200      	movs	r2, #0
 8006384:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006386:	4b24      	ldr	r3, [pc, #144]	; (8006418 <MX_TIM4_Init+0xc0>)
 8006388:	2200      	movs	r2, #0
 800638a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 800638c:	4b22      	ldr	r3, [pc, #136]	; (8006418 <MX_TIM4_Init+0xc0>)
 800638e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8006392:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006394:	4b20      	ldr	r3, [pc, #128]	; (8006418 <MX_TIM4_Init+0xc0>)
 8006396:	2200      	movs	r2, #0
 8006398:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800639a:	4b1f      	ldr	r3, [pc, #124]	; (8006418 <MX_TIM4_Init+0xc0>)
 800639c:	2200      	movs	r2, #0
 800639e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80063a0:	481d      	ldr	r0, [pc, #116]	; (8006418 <MX_TIM4_Init+0xc0>)
 80063a2:	f008 fc54 	bl	800ec4e <HAL_TIM_PWM_Init>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80063ac:	f000 fb56 	bl	8006a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063b0:	2300      	movs	r3, #0
 80063b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063b4:	2300      	movs	r3, #0
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80063b8:	f107 0320 	add.w	r3, r7, #32
 80063bc:	4619      	mov	r1, r3
 80063be:	4816      	ldr	r0, [pc, #88]	; (8006418 <MX_TIM4_Init+0xc0>)
 80063c0:	f009 f9e4 	bl	800f78c <HAL_TIMEx_MasterConfigSynchronization>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80063ca:	f000 fb47 	bl	8006a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80063ce:	2360      	movs	r3, #96	; 0x60
 80063d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80063d2:	2300      	movs	r3, #0
 80063d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80063d6:	2300      	movs	r3, #0
 80063d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80063da:	2300      	movs	r3, #0
 80063dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80063de:	1d3b      	adds	r3, r7, #4
 80063e0:	2208      	movs	r2, #8
 80063e2:	4619      	mov	r1, r3
 80063e4:	480c      	ldr	r0, [pc, #48]	; (8006418 <MX_TIM4_Init+0xc0>)
 80063e6:	f008 fe6d 	bl	800f0c4 <HAL_TIM_PWM_ConfigChannel>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80063f0:	f000 fb34 	bl	8006a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80063f4:	1d3b      	adds	r3, r7, #4
 80063f6:	220c      	movs	r2, #12
 80063f8:	4619      	mov	r1, r3
 80063fa:	4807      	ldr	r0, [pc, #28]	; (8006418 <MX_TIM4_Init+0xc0>)
 80063fc:	f008 fe62 	bl	800f0c4 <HAL_TIM_PWM_ConfigChannel>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8006406:	f000 fb29 	bl	8006a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800640a:	4803      	ldr	r0, [pc, #12]	; (8006418 <MX_TIM4_Init+0xc0>)
 800640c:	f000 ff16 	bl	800723c <HAL_TIM_MspPostInit>

}
 8006410:	bf00      	nop
 8006412:	3728      	adds	r7, #40	; 0x28
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	2003f924 	.word	0x2003f924
 800641c:	40000800 	.word	0x40000800

08006420 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006426:	463b      	mov	r3, r7
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800642e:	4b15      	ldr	r3, [pc, #84]	; (8006484 <MX_TIM6_Init+0x64>)
 8006430:	4a15      	ldr	r2, [pc, #84]	; (8006488 <MX_TIM6_Init+0x68>)
 8006432:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8006434:	4b13      	ldr	r3, [pc, #76]	; (8006484 <MX_TIM6_Init+0x64>)
 8006436:	2259      	movs	r2, #89	; 0x59
 8006438:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800643a:	4b12      	ldr	r3, [pc, #72]	; (8006484 <MX_TIM6_Init+0x64>)
 800643c:	2200      	movs	r2, #0
 800643e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006440:	4b10      	ldr	r3, [pc, #64]	; (8006484 <MX_TIM6_Init+0x64>)
 8006442:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006446:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006448:	4b0e      	ldr	r3, [pc, #56]	; (8006484 <MX_TIM6_Init+0x64>)
 800644a:	2280      	movs	r2, #128	; 0x80
 800644c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800644e:	480d      	ldr	r0, [pc, #52]	; (8006484 <MX_TIM6_Init+0x64>)
 8006450:	f008 fbae 	bl	800ebb0 <HAL_TIM_Base_Init>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800645a:	f000 faff 	bl	8006a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800645e:	2300      	movs	r3, #0
 8006460:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006462:	2300      	movs	r3, #0
 8006464:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006466:	463b      	mov	r3, r7
 8006468:	4619      	mov	r1, r3
 800646a:	4806      	ldr	r0, [pc, #24]	; (8006484 <MX_TIM6_Init+0x64>)
 800646c:	f009 f98e 	bl	800f78c <HAL_TIMEx_MasterConfigSynchronization>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006476:	f000 faf1 	bl	8006a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800647a:	bf00      	nop
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	2003fbc0 	.word	0x2003fbc0
 8006488:	40001000 	.word	0x40001000

0800648c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006492:	463b      	mov	r3, r7
 8006494:	2200      	movs	r2, #0
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800649a:	4b14      	ldr	r3, [pc, #80]	; (80064ec <MX_TIM7_Init+0x60>)
 800649c:	4a14      	ldr	r2, [pc, #80]	; (80064f0 <MX_TIM7_Init+0x64>)
 800649e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80064a0:	4b12      	ldr	r3, [pc, #72]	; (80064ec <MX_TIM7_Init+0x60>)
 80064a2:	22b3      	movs	r2, #179	; 0xb3
 80064a4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064a6:	4b11      	ldr	r3, [pc, #68]	; (80064ec <MX_TIM7_Init+0x60>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80064ac:	4b0f      	ldr	r3, [pc, #60]	; (80064ec <MX_TIM7_Init+0x60>)
 80064ae:	2231      	movs	r2, #49	; 0x31
 80064b0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80064b2:	4b0e      	ldr	r3, [pc, #56]	; (80064ec <MX_TIM7_Init+0x60>)
 80064b4:	2280      	movs	r2, #128	; 0x80
 80064b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80064b8:	480c      	ldr	r0, [pc, #48]	; (80064ec <MX_TIM7_Init+0x60>)
 80064ba:	f008 fb79 	bl	800ebb0 <HAL_TIM_Base_Init>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80064c4:	f000 faca 	bl	8006a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80064c8:	2300      	movs	r3, #0
 80064ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80064cc:	2300      	movs	r3, #0
 80064ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80064d0:	463b      	mov	r3, r7
 80064d2:	4619      	mov	r1, r3
 80064d4:	4805      	ldr	r0, [pc, #20]	; (80064ec <MX_TIM7_Init+0x60>)
 80064d6:	f009 f959 	bl	800f78c <HAL_TIMEx_MasterConfigSynchronization>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80064e0:	f000 fabc 	bl	8006a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80064e4:	bf00      	nop
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	2003fd64 	.word	0x2003fd64
 80064f0:	40001400 	.word	0x40001400

080064f4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b08c      	sub	sp, #48	; 0x30
 80064f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80064fa:	f107 030c 	add.w	r3, r7, #12
 80064fe:	2224      	movs	r2, #36	; 0x24
 8006500:	2100      	movs	r1, #0
 8006502:	4618      	mov	r0, r3
 8006504:	f00f f9c7 	bl	8015896 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006508:	1d3b      	adds	r3, r7, #4
 800650a:	2200      	movs	r2, #0
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006510:	4b22      	ldr	r3, [pc, #136]	; (800659c <MX_TIM8_Init+0xa8>)
 8006512:	4a23      	ldr	r2, [pc, #140]	; (80065a0 <MX_TIM8_Init+0xac>)
 8006514:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006516:	4b21      	ldr	r3, [pc, #132]	; (800659c <MX_TIM8_Init+0xa8>)
 8006518:	2200      	movs	r2, #0
 800651a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800651c:	4b1f      	ldr	r3, [pc, #124]	; (800659c <MX_TIM8_Init+0xa8>)
 800651e:	2210      	movs	r2, #16
 8006520:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006522:	4b1e      	ldr	r3, [pc, #120]	; (800659c <MX_TIM8_Init+0xa8>)
 8006524:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006528:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800652a:	4b1c      	ldr	r3, [pc, #112]	; (800659c <MX_TIM8_Init+0xa8>)
 800652c:	2200      	movs	r2, #0
 800652e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006530:	4b1a      	ldr	r3, [pc, #104]	; (800659c <MX_TIM8_Init+0xa8>)
 8006532:	2200      	movs	r2, #0
 8006534:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006536:	4b19      	ldr	r3, [pc, #100]	; (800659c <MX_TIM8_Init+0xa8>)
 8006538:	2200      	movs	r2, #0
 800653a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800653c:	2303      	movs	r3, #3
 800653e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006540:	2300      	movs	r3, #0
 8006542:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006544:	2301      	movs	r3, #1
 8006546:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006548:	2300      	movs	r3, #0
 800654a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800654c:	2300      	movs	r3, #0
 800654e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006550:	2300      	movs	r3, #0
 8006552:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006554:	2301      	movs	r3, #1
 8006556:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006558:	2300      	movs	r3, #0
 800655a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800655c:	2300      	movs	r3, #0
 800655e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006560:	f107 030c 	add.w	r3, r7, #12
 8006564:	4619      	mov	r1, r3
 8006566:	480d      	ldr	r0, [pc, #52]	; (800659c <MX_TIM8_Init+0xa8>)
 8006568:	f008 fbda 	bl	800ed20 <HAL_TIM_Encoder_Init>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006572:	f000 fa73 	bl	8006a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006576:	2300      	movs	r3, #0
 8006578:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800657a:	2300      	movs	r3, #0
 800657c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800657e:	1d3b      	adds	r3, r7, #4
 8006580:	4619      	mov	r1, r3
 8006582:	4806      	ldr	r0, [pc, #24]	; (800659c <MX_TIM8_Init+0xa8>)
 8006584:	f009 f902 	bl	800f78c <HAL_TIMEx_MasterConfigSynchronization>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800658e:	f000 fa65 	bl	8006a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006592:	bf00      	nop
 8006594:	3730      	adds	r7, #48	; 0x30
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	2003f8e4 	.word	0x2003f8e4
 80065a0:	40010400 	.word	0x40010400

080065a4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b088      	sub	sp, #32
 80065a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80065aa:	1d3b      	adds	r3, r7, #4
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	605a      	str	r2, [r3, #4]
 80065b2:	609a      	str	r2, [r3, #8]
 80065b4:	60da      	str	r2, [r3, #12]
 80065b6:	611a      	str	r2, [r3, #16]
 80065b8:	615a      	str	r2, [r3, #20]
 80065ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80065bc:	4b1e      	ldr	r3, [pc, #120]	; (8006638 <MX_TIM10_Init+0x94>)
 80065be:	4a1f      	ldr	r2, [pc, #124]	; (800663c <MX_TIM10_Init+0x98>)
 80065c0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80065c2:	4b1d      	ldr	r3, [pc, #116]	; (8006638 <MX_TIM10_Init+0x94>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065c8:	4b1b      	ldr	r3, [pc, #108]	; (8006638 <MX_TIM10_Init+0x94>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80065ce:	4b1a      	ldr	r3, [pc, #104]	; (8006638 <MX_TIM10_Init+0x94>)
 80065d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065d4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065d6:	4b18      	ldr	r3, [pc, #96]	; (8006638 <MX_TIM10_Init+0x94>)
 80065d8:	2200      	movs	r2, #0
 80065da:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80065dc:	4b16      	ldr	r3, [pc, #88]	; (8006638 <MX_TIM10_Init+0x94>)
 80065de:	2200      	movs	r2, #0
 80065e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80065e2:	4815      	ldr	r0, [pc, #84]	; (8006638 <MX_TIM10_Init+0x94>)
 80065e4:	f008 fae4 	bl	800ebb0 <HAL_TIM_Base_Init>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80065ee:	f000 fa35 	bl	8006a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80065f2:	4811      	ldr	r0, [pc, #68]	; (8006638 <MX_TIM10_Init+0x94>)
 80065f4:	f008 fb2b 	bl	800ec4e <HAL_TIM_PWM_Init>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80065fe:	f000 fa2d 	bl	8006a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006602:	2360      	movs	r3, #96	; 0x60
 8006604:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006606:	2300      	movs	r3, #0
 8006608:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800660e:	2300      	movs	r3, #0
 8006610:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006612:	1d3b      	adds	r3, r7, #4
 8006614:	2200      	movs	r2, #0
 8006616:	4619      	mov	r1, r3
 8006618:	4807      	ldr	r0, [pc, #28]	; (8006638 <MX_TIM10_Init+0x94>)
 800661a:	f008 fd53 	bl	800f0c4 <HAL_TIM_PWM_ConfigChannel>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d001      	beq.n	8006628 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006624:	f000 fa1a 	bl	8006a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006628:	4803      	ldr	r0, [pc, #12]	; (8006638 <MX_TIM10_Init+0x94>)
 800662a:	f000 fe07 	bl	800723c <HAL_TIM_MspPostInit>

}
 800662e:	bf00      	nop
 8006630:	3720      	adds	r7, #32
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	2003fa00 	.word	0x2003fa00
 800663c:	40014400 	.word	0x40014400

08006640 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b088      	sub	sp, #32
 8006644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006646:	1d3b      	adds	r3, r7, #4
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	605a      	str	r2, [r3, #4]
 800664e:	609a      	str	r2, [r3, #8]
 8006650:	60da      	str	r2, [r3, #12]
 8006652:	611a      	str	r2, [r3, #16]
 8006654:	615a      	str	r2, [r3, #20]
 8006656:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006658:	4b1e      	ldr	r3, [pc, #120]	; (80066d4 <MX_TIM11_Init+0x94>)
 800665a:	4a1f      	ldr	r2, [pc, #124]	; (80066d8 <MX_TIM11_Init+0x98>)
 800665c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800665e:	4b1d      	ldr	r3, [pc, #116]	; (80066d4 <MX_TIM11_Init+0x94>)
 8006660:	2200      	movs	r2, #0
 8006662:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006664:	4b1b      	ldr	r3, [pc, #108]	; (80066d4 <MX_TIM11_Init+0x94>)
 8006666:	2200      	movs	r2, #0
 8006668:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800666a:	4b1a      	ldr	r3, [pc, #104]	; (80066d4 <MX_TIM11_Init+0x94>)
 800666c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006670:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006672:	4b18      	ldr	r3, [pc, #96]	; (80066d4 <MX_TIM11_Init+0x94>)
 8006674:	2200      	movs	r2, #0
 8006676:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006678:	4b16      	ldr	r3, [pc, #88]	; (80066d4 <MX_TIM11_Init+0x94>)
 800667a:	2200      	movs	r2, #0
 800667c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800667e:	4815      	ldr	r0, [pc, #84]	; (80066d4 <MX_TIM11_Init+0x94>)
 8006680:	f008 fa96 	bl	800ebb0 <HAL_TIM_Base_Init>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800668a:	f000 f9e7 	bl	8006a5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800668e:	4811      	ldr	r0, [pc, #68]	; (80066d4 <MX_TIM11_Init+0x94>)
 8006690:	f008 fadd 	bl	800ec4e <HAL_TIM_PWM_Init>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800669a:	f000 f9df 	bl	8006a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800669e:	2360      	movs	r3, #96	; 0x60
 80066a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80066a2:	2300      	movs	r3, #0
 80066a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80066a6:	2300      	movs	r3, #0
 80066a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80066aa:	2300      	movs	r3, #0
 80066ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80066ae:	1d3b      	adds	r3, r7, #4
 80066b0:	2200      	movs	r2, #0
 80066b2:	4619      	mov	r1, r3
 80066b4:	4807      	ldr	r0, [pc, #28]	; (80066d4 <MX_TIM11_Init+0x94>)
 80066b6:	f008 fd05 	bl	800f0c4 <HAL_TIM_PWM_ConfigChannel>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80066c0:	f000 f9cc 	bl	8006a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80066c4:	4803      	ldr	r0, [pc, #12]	; (80066d4 <MX_TIM11_Init+0x94>)
 80066c6:	f000 fdb9 	bl	800723c <HAL_TIM_MspPostInit>

}
 80066ca:	bf00      	nop
 80066cc:	3720      	adds	r7, #32
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	2003fb20 	.word	0x2003fb20
 80066d8:	40014800 	.word	0x40014800

080066dc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80066e0:	4b0e      	ldr	r3, [pc, #56]	; (800671c <MX_TIM13_Init+0x40>)
 80066e2:	4a0f      	ldr	r2, [pc, #60]	; (8006720 <MX_TIM13_Init+0x44>)
 80066e4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80066e6:	4b0d      	ldr	r3, [pc, #52]	; (800671c <MX_TIM13_Init+0x40>)
 80066e8:	2259      	movs	r2, #89	; 0x59
 80066ea:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066ec:	4b0b      	ldr	r3, [pc, #44]	; (800671c <MX_TIM13_Init+0x40>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80066f2:	4b0a      	ldr	r3, [pc, #40]	; (800671c <MX_TIM13_Init+0x40>)
 80066f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80066f8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066fa:	4b08      	ldr	r3, [pc, #32]	; (800671c <MX_TIM13_Init+0x40>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006700:	4b06      	ldr	r3, [pc, #24]	; (800671c <MX_TIM13_Init+0x40>)
 8006702:	2280      	movs	r2, #128	; 0x80
 8006704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006706:	4805      	ldr	r0, [pc, #20]	; (800671c <MX_TIM13_Init+0x40>)
 8006708:	f008 fa52 	bl	800ebb0 <HAL_TIM_Base_Init>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006712:	f000 f9a3 	bl	8006a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006716:	bf00      	nop
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	2003fae0 	.word	0x2003fae0
 8006720:	40001c00 	.word	0x40001c00

08006724 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006728:	4b11      	ldr	r3, [pc, #68]	; (8006770 <MX_USART2_UART_Init+0x4c>)
 800672a:	4a12      	ldr	r2, [pc, #72]	; (8006774 <MX_USART2_UART_Init+0x50>)
 800672c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800672e:	4b10      	ldr	r3, [pc, #64]	; (8006770 <MX_USART2_UART_Init+0x4c>)
 8006730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006736:	4b0e      	ldr	r3, [pc, #56]	; (8006770 <MX_USART2_UART_Init+0x4c>)
 8006738:	2200      	movs	r2, #0
 800673a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800673c:	4b0c      	ldr	r3, [pc, #48]	; (8006770 <MX_USART2_UART_Init+0x4c>)
 800673e:	2200      	movs	r2, #0
 8006740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006742:	4b0b      	ldr	r3, [pc, #44]	; (8006770 <MX_USART2_UART_Init+0x4c>)
 8006744:	2200      	movs	r2, #0
 8006746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006748:	4b09      	ldr	r3, [pc, #36]	; (8006770 <MX_USART2_UART_Init+0x4c>)
 800674a:	220c      	movs	r2, #12
 800674c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800674e:	4b08      	ldr	r3, [pc, #32]	; (8006770 <MX_USART2_UART_Init+0x4c>)
 8006750:	2200      	movs	r2, #0
 8006752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006754:	4b06      	ldr	r3, [pc, #24]	; (8006770 <MX_USART2_UART_Init+0x4c>)
 8006756:	2200      	movs	r2, #0
 8006758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800675a:	4805      	ldr	r0, [pc, #20]	; (8006770 <MX_USART2_UART_Init+0x4c>)
 800675c:	f009 f8f8 	bl	800f950 <HAL_UART_Init>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006766:	f000 f979 	bl	8006a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800676a:	bf00      	nop
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	2003fcc4 	.word	0x2003fcc4
 8006774:	40004400 	.word	0x40004400

08006778 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800677e:	2300      	movs	r3, #0
 8006780:	607b      	str	r3, [r7, #4]
 8006782:	4b14      	ldr	r3, [pc, #80]	; (80067d4 <MX_DMA_Init+0x5c>)
 8006784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006786:	4a13      	ldr	r2, [pc, #76]	; (80067d4 <MX_DMA_Init+0x5c>)
 8006788:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800678c:	6313      	str	r3, [r2, #48]	; 0x30
 800678e:	4b11      	ldr	r3, [pc, #68]	; (80067d4 <MX_DMA_Init+0x5c>)
 8006790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006796:	607b      	str	r3, [r7, #4]
 8006798:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800679a:	2200      	movs	r2, #0
 800679c:	2100      	movs	r1, #0
 800679e:	203a      	movs	r0, #58	; 0x3a
 80067a0:	f003 fdb9 	bl	800a316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80067a4:	203a      	movs	r0, #58	; 0x3a
 80067a6:	f003 fdd2 	bl	800a34e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80067aa:	2200      	movs	r2, #0
 80067ac:	2100      	movs	r1, #0
 80067ae:	203b      	movs	r0, #59	; 0x3b
 80067b0:	f003 fdb1 	bl	800a316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80067b4:	203b      	movs	r0, #59	; 0x3b
 80067b6:	f003 fdca 	bl	800a34e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80067ba:	2200      	movs	r2, #0
 80067bc:	2100      	movs	r1, #0
 80067be:	2045      	movs	r0, #69	; 0x45
 80067c0:	f003 fda9 	bl	800a316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80067c4:	2045      	movs	r0, #69	; 0x45
 80067c6:	f003 fdc2 	bl	800a34e <HAL_NVIC_EnableIRQ>

}
 80067ca:	bf00      	nop
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	40023800 	.word	0x40023800

080067d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08c      	sub	sp, #48	; 0x30
 80067dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067de:	f107 031c 	add.w	r3, r7, #28
 80067e2:	2200      	movs	r2, #0
 80067e4:	601a      	str	r2, [r3, #0]
 80067e6:	605a      	str	r2, [r3, #4]
 80067e8:	609a      	str	r2, [r3, #8]
 80067ea:	60da      	str	r2, [r3, #12]
 80067ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80067ee:	2300      	movs	r3, #0
 80067f0:	61bb      	str	r3, [r7, #24]
 80067f2:	4b94      	ldr	r3, [pc, #592]	; (8006a44 <MX_GPIO_Init+0x26c>)
 80067f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f6:	4a93      	ldr	r2, [pc, #588]	; (8006a44 <MX_GPIO_Init+0x26c>)
 80067f8:	f043 0310 	orr.w	r3, r3, #16
 80067fc:	6313      	str	r3, [r2, #48]	; 0x30
 80067fe:	4b91      	ldr	r3, [pc, #580]	; (8006a44 <MX_GPIO_Init+0x26c>)
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	f003 0310 	and.w	r3, r3, #16
 8006806:	61bb      	str	r3, [r7, #24]
 8006808:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800680a:	2300      	movs	r3, #0
 800680c:	617b      	str	r3, [r7, #20]
 800680e:	4b8d      	ldr	r3, [pc, #564]	; (8006a44 <MX_GPIO_Init+0x26c>)
 8006810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006812:	4a8c      	ldr	r2, [pc, #560]	; (8006a44 <MX_GPIO_Init+0x26c>)
 8006814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006818:	6313      	str	r3, [r2, #48]	; 0x30
 800681a:	4b8a      	ldr	r3, [pc, #552]	; (8006a44 <MX_GPIO_Init+0x26c>)
 800681c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006826:	2300      	movs	r3, #0
 8006828:	613b      	str	r3, [r7, #16]
 800682a:	4b86      	ldr	r3, [pc, #536]	; (8006a44 <MX_GPIO_Init+0x26c>)
 800682c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800682e:	4a85      	ldr	r2, [pc, #532]	; (8006a44 <MX_GPIO_Init+0x26c>)
 8006830:	f043 0304 	orr.w	r3, r3, #4
 8006834:	6313      	str	r3, [r2, #48]	; 0x30
 8006836:	4b83      	ldr	r3, [pc, #524]	; (8006a44 <MX_GPIO_Init+0x26c>)
 8006838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683a:	f003 0304 	and.w	r3, r3, #4
 800683e:	613b      	str	r3, [r7, #16]
 8006840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006842:	2300      	movs	r3, #0
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	4b7f      	ldr	r3, [pc, #508]	; (8006a44 <MX_GPIO_Init+0x26c>)
 8006848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684a:	4a7e      	ldr	r2, [pc, #504]	; (8006a44 <MX_GPIO_Init+0x26c>)
 800684c:	f043 0301 	orr.w	r3, r3, #1
 8006850:	6313      	str	r3, [r2, #48]	; 0x30
 8006852:	4b7c      	ldr	r3, [pc, #496]	; (8006a44 <MX_GPIO_Init+0x26c>)
 8006854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800685e:	2300      	movs	r3, #0
 8006860:	60bb      	str	r3, [r7, #8]
 8006862:	4b78      	ldr	r3, [pc, #480]	; (8006a44 <MX_GPIO_Init+0x26c>)
 8006864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006866:	4a77      	ldr	r2, [pc, #476]	; (8006a44 <MX_GPIO_Init+0x26c>)
 8006868:	f043 0302 	orr.w	r3, r3, #2
 800686c:	6313      	str	r3, [r2, #48]	; 0x30
 800686e:	4b75      	ldr	r3, [pc, #468]	; (8006a44 <MX_GPIO_Init+0x26c>)
 8006870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	60bb      	str	r3, [r7, #8]
 8006878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800687a:	2300      	movs	r3, #0
 800687c:	607b      	str	r3, [r7, #4]
 800687e:	4b71      	ldr	r3, [pc, #452]	; (8006a44 <MX_GPIO_Init+0x26c>)
 8006880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006882:	4a70      	ldr	r2, [pc, #448]	; (8006a44 <MX_GPIO_Init+0x26c>)
 8006884:	f043 0308 	orr.w	r3, r3, #8
 8006888:	6313      	str	r3, [r2, #48]	; 0x30
 800688a:	4b6e      	ldr	r3, [pc, #440]	; (8006a44 <MX_GPIO_Init+0x26c>)
 800688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688e:	f003 0308 	and.w	r3, r3, #8
 8006892:	607b      	str	r3, [r7, #4]
 8006894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006896:	2200      	movs	r2, #0
 8006898:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800689c:	486a      	ldr	r0, [pc, #424]	; (8006a48 <MX_GPIO_Init+0x270>)
 800689e:	f004 fad3 	bl	800ae48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80068a2:	2200      	movs	r2, #0
 80068a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80068a8:	4868      	ldr	r0, [pc, #416]	; (8006a4c <MX_GPIO_Init+0x274>)
 80068aa:	f004 facd 	bl	800ae48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80068ae:	2200      	movs	r2, #0
 80068b0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80068b4:	4866      	ldr	r0, [pc, #408]	; (8006a50 <MX_GPIO_Init+0x278>)
 80068b6:	f004 fac7 	bl	800ae48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80068ba:	2200      	movs	r2, #0
 80068bc:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80068c0:	4864      	ldr	r0, [pc, #400]	; (8006a54 <MX_GPIO_Init+0x27c>)
 80068c2:	f004 fac1 	bl	800ae48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80068c6:	2304      	movs	r3, #4
 80068c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068ca:	2300      	movs	r3, #0
 80068cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068ce:	2300      	movs	r3, #0
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80068d2:	f107 031c 	add.w	r3, r7, #28
 80068d6:	4619      	mov	r1, r3
 80068d8:	485b      	ldr	r0, [pc, #364]	; (8006a48 <MX_GPIO_Init+0x270>)
 80068da:	f004 f8f1 	bl	800aac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80068de:	230f      	movs	r3, #15
 80068e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068e2:	2303      	movs	r3, #3
 80068e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068e6:	2300      	movs	r3, #0
 80068e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068ea:	f107 031c 	add.w	r3, r7, #28
 80068ee:	4619      	mov	r1, r3
 80068f0:	4859      	ldr	r0, [pc, #356]	; (8006a58 <MX_GPIO_Init+0x280>)
 80068f2:	f004 f8e5 	bl	800aac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80068f6:	23e1      	movs	r3, #225	; 0xe1
 80068f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068fa:	2303      	movs	r3, #3
 80068fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068fe:	2300      	movs	r3, #0
 8006900:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006902:	f107 031c 	add.w	r3, r7, #28
 8006906:	4619      	mov	r1, r3
 8006908:	4852      	ldr	r0, [pc, #328]	; (8006a54 <MX_GPIO_Init+0x27c>)
 800690a:	f004 f8d9 	bl	800aac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800690e:	2303      	movs	r3, #3
 8006910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006912:	2303      	movs	r3, #3
 8006914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006916:	2300      	movs	r3, #0
 8006918:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800691a:	f107 031c 	add.w	r3, r7, #28
 800691e:	4619      	mov	r1, r3
 8006920:	484a      	ldr	r0, [pc, #296]	; (8006a4c <MX_GPIO_Init+0x274>)
 8006922:	f004 f8cd 	bl	800aac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006926:	2304      	movs	r3, #4
 8006928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800692a:	2300      	movs	r3, #0
 800692c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800692e:	2301      	movs	r3, #1
 8006930:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006932:	f107 031c 	add.w	r3, r7, #28
 8006936:	4619      	mov	r1, r3
 8006938:	4844      	ldr	r0, [pc, #272]	; (8006a4c <MX_GPIO_Init+0x274>)
 800693a:	f004 f8c1 	bl	800aac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 800693e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006944:	2300      	movs	r3, #0
 8006946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006948:	2301      	movs	r3, #1
 800694a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800694c:	f107 031c 	add.w	r3, r7, #28
 8006950:	4619      	mov	r1, r3
 8006952:	483d      	ldr	r0, [pc, #244]	; (8006a48 <MX_GPIO_Init+0x270>)
 8006954:	f004 f8b4 	bl	800aac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006958:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800695c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800695e:	2301      	movs	r3, #1
 8006960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006962:	2300      	movs	r3, #0
 8006964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006966:	2300      	movs	r3, #0
 8006968:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800696a:	f107 031c 	add.w	r3, r7, #28
 800696e:	4619      	mov	r1, r3
 8006970:	4835      	ldr	r0, [pc, #212]	; (8006a48 <MX_GPIO_Init+0x270>)
 8006972:	f004 f8a5 	bl	800aac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800697a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800697c:	2301      	movs	r3, #1
 800697e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006980:	2300      	movs	r3, #0
 8006982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006984:	2300      	movs	r3, #0
 8006986:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006988:	f107 031c 	add.w	r3, r7, #28
 800698c:	4619      	mov	r1, r3
 800698e:	482f      	ldr	r0, [pc, #188]	; (8006a4c <MX_GPIO_Init+0x274>)
 8006990:	f004 f896 	bl	800aac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006994:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800699a:	2300      	movs	r3, #0
 800699c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800699e:	2300      	movs	r3, #0
 80069a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069a2:	f107 031c 	add.w	r3, r7, #28
 80069a6:	4619      	mov	r1, r3
 80069a8:	4829      	ldr	r0, [pc, #164]	; (8006a50 <MX_GPIO_Init+0x278>)
 80069aa:	f004 f889 	bl	800aac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80069ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069b4:	2301      	movs	r3, #1
 80069b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069b8:	2300      	movs	r3, #0
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069bc:	2300      	movs	r3, #0
 80069be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069c0:	f107 031c 	add.w	r3, r7, #28
 80069c4:	4619      	mov	r1, r3
 80069c6:	4822      	ldr	r0, [pc, #136]	; (8006a50 <MX_GPIO_Init+0x278>)
 80069c8:	f004 f87a 	bl	800aac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80069cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069d2:	2301      	movs	r3, #1
 80069d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069d6:	2301      	movs	r3, #1
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069da:	2300      	movs	r3, #0
 80069dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069de:	f107 031c 	add.w	r3, r7, #28
 80069e2:	4619      	mov	r1, r3
 80069e4:	481a      	ldr	r0, [pc, #104]	; (8006a50 <MX_GPIO_Init+0x278>)
 80069e6:	f004 f86b 	bl	800aac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80069ea:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80069ee:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069f0:	2301      	movs	r3, #1
 80069f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069f4:	2300      	movs	r3, #0
 80069f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069f8:	2300      	movs	r3, #0
 80069fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069fc:	f107 031c 	add.w	r3, r7, #28
 8006a00:	4619      	mov	r1, r3
 8006a02:	4814      	ldr	r0, [pc, #80]	; (8006a54 <MX_GPIO_Init+0x27c>)
 8006a04:	f004 f85c 	bl	800aac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006a08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a12:	2300      	movs	r3, #0
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a16:	f107 031c 	add.w	r3, r7, #28
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	480d      	ldr	r0, [pc, #52]	; (8006a54 <MX_GPIO_Init+0x27c>)
 8006a1e:	f004 f84f 	bl	800aac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006a22:	239b      	movs	r3, #155	; 0x9b
 8006a24:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a26:	2300      	movs	r3, #0
 8006a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a2e:	f107 031c 	add.w	r3, r7, #28
 8006a32:	4619      	mov	r1, r3
 8006a34:	4806      	ldr	r0, [pc, #24]	; (8006a50 <MX_GPIO_Init+0x278>)
 8006a36:	f004 f843 	bl	800aac0 <HAL_GPIO_Init>

}
 8006a3a:	bf00      	nop
 8006a3c:	3730      	adds	r7, #48	; 0x30
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	40023800 	.word	0x40023800
 8006a48:	40021000 	.word	0x40021000
 8006a4c:	40020400 	.word	0x40020400
 8006a50:	40020c00 	.word	0x40020c00
 8006a54:	40020000 	.word	0x40020000
 8006a58:	40020800 	.word	0x40020800

08006a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006a60:	b672      	cpsid	i
}
 8006a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006a64:	e7fe      	b.n	8006a64 <Error_Handler+0x8>

08006a66 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006a66:	b480      	push	{r7}
 8006a68:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006a6a:	bf00      	nop
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	607b      	str	r3, [r7, #4]
 8006a7e:	4b10      	ldr	r3, [pc, #64]	; (8006ac0 <HAL_MspInit+0x4c>)
 8006a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a82:	4a0f      	ldr	r2, [pc, #60]	; (8006ac0 <HAL_MspInit+0x4c>)
 8006a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a88:	6453      	str	r3, [r2, #68]	; 0x44
 8006a8a:	4b0d      	ldr	r3, [pc, #52]	; (8006ac0 <HAL_MspInit+0x4c>)
 8006a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a92:	607b      	str	r3, [r7, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a96:	2300      	movs	r3, #0
 8006a98:	603b      	str	r3, [r7, #0]
 8006a9a:	4b09      	ldr	r3, [pc, #36]	; (8006ac0 <HAL_MspInit+0x4c>)
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9e:	4a08      	ldr	r2, [pc, #32]	; (8006ac0 <HAL_MspInit+0x4c>)
 8006aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8006aa6:	4b06      	ldr	r3, [pc, #24]	; (8006ac0 <HAL_MspInit+0x4c>)
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aae:	603b      	str	r3, [r7, #0]
 8006ab0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ab2:	bf00      	nop
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	40023800 	.word	0x40023800

08006ac4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08c      	sub	sp, #48	; 0x30
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006acc:	f107 031c 	add.w	r3, r7, #28
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	605a      	str	r2, [r3, #4]
 8006ad6:	609a      	str	r2, [r3, #8]
 8006ad8:	60da      	str	r2, [r3, #12]
 8006ada:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a4a      	ldr	r2, [pc, #296]	; (8006c0c <HAL_ADC_MspInit+0x148>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	f040 808e 	bne.w	8006c04 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006ae8:	2300      	movs	r3, #0
 8006aea:	61bb      	str	r3, [r7, #24]
 8006aec:	4b48      	ldr	r3, [pc, #288]	; (8006c10 <HAL_ADC_MspInit+0x14c>)
 8006aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af0:	4a47      	ldr	r2, [pc, #284]	; (8006c10 <HAL_ADC_MspInit+0x14c>)
 8006af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006af6:	6453      	str	r3, [r2, #68]	; 0x44
 8006af8:	4b45      	ldr	r3, [pc, #276]	; (8006c10 <HAL_ADC_MspInit+0x14c>)
 8006afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b00:	61bb      	str	r3, [r7, #24]
 8006b02:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b04:	2300      	movs	r3, #0
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	4b41      	ldr	r3, [pc, #260]	; (8006c10 <HAL_ADC_MspInit+0x14c>)
 8006b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0c:	4a40      	ldr	r2, [pc, #256]	; (8006c10 <HAL_ADC_MspInit+0x14c>)
 8006b0e:	f043 0304 	orr.w	r3, r3, #4
 8006b12:	6313      	str	r3, [r2, #48]	; 0x30
 8006b14:	4b3e      	ldr	r3, [pc, #248]	; (8006c10 <HAL_ADC_MspInit+0x14c>)
 8006b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	617b      	str	r3, [r7, #20]
 8006b1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b20:	2300      	movs	r3, #0
 8006b22:	613b      	str	r3, [r7, #16]
 8006b24:	4b3a      	ldr	r3, [pc, #232]	; (8006c10 <HAL_ADC_MspInit+0x14c>)
 8006b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b28:	4a39      	ldr	r2, [pc, #228]	; (8006c10 <HAL_ADC_MspInit+0x14c>)
 8006b2a:	f043 0301 	orr.w	r3, r3, #1
 8006b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8006b30:	4b37      	ldr	r3, [pc, #220]	; (8006c10 <HAL_ADC_MspInit+0x14c>)
 8006b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	4b33      	ldr	r3, [pc, #204]	; (8006c10 <HAL_ADC_MspInit+0x14c>)
 8006b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b44:	4a32      	ldr	r2, [pc, #200]	; (8006c10 <HAL_ADC_MspInit+0x14c>)
 8006b46:	f043 0302 	orr.w	r3, r3, #2
 8006b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8006b4c:	4b30      	ldr	r3, [pc, #192]	; (8006c10 <HAL_ADC_MspInit+0x14c>)
 8006b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b50:	f003 0302 	and.w	r3, r3, #2
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006b58:	230f      	movs	r3, #15
 8006b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b60:	2300      	movs	r3, #0
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b64:	f107 031c 	add.w	r3, r7, #28
 8006b68:	4619      	mov	r1, r3
 8006b6a:	482a      	ldr	r0, [pc, #168]	; (8006c14 <HAL_ADC_MspInit+0x150>)
 8006b6c:	f003 ffa8 	bl	800aac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006b70:	23ff      	movs	r3, #255	; 0xff
 8006b72:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b74:	2303      	movs	r3, #3
 8006b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b7c:	f107 031c 	add.w	r3, r7, #28
 8006b80:	4619      	mov	r1, r3
 8006b82:	4825      	ldr	r0, [pc, #148]	; (8006c18 <HAL_ADC_MspInit+0x154>)
 8006b84:	f003 ff9c 	bl	800aac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b90:	2300      	movs	r3, #0
 8006b92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b94:	f107 031c 	add.w	r3, r7, #28
 8006b98:	4619      	mov	r1, r3
 8006b9a:	4820      	ldr	r0, [pc, #128]	; (8006c1c <HAL_ADC_MspInit+0x158>)
 8006b9c:	f003 ff90 	bl	800aac0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006ba0:	4b1f      	ldr	r3, [pc, #124]	; (8006c20 <HAL_ADC_MspInit+0x15c>)
 8006ba2:	4a20      	ldr	r2, [pc, #128]	; (8006c24 <HAL_ADC_MspInit+0x160>)
 8006ba4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006ba6:	4b1e      	ldr	r3, [pc, #120]	; (8006c20 <HAL_ADC_MspInit+0x15c>)
 8006ba8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006bac:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006bae:	4b1c      	ldr	r3, [pc, #112]	; (8006c20 <HAL_ADC_MspInit+0x15c>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006bb4:	4b1a      	ldr	r3, [pc, #104]	; (8006c20 <HAL_ADC_MspInit+0x15c>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006bba:	4b19      	ldr	r3, [pc, #100]	; (8006c20 <HAL_ADC_MspInit+0x15c>)
 8006bbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006bc0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006bc2:	4b17      	ldr	r3, [pc, #92]	; (8006c20 <HAL_ADC_MspInit+0x15c>)
 8006bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bc8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006bca:	4b15      	ldr	r3, [pc, #84]	; (8006c20 <HAL_ADC_MspInit+0x15c>)
 8006bcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006bd0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006bd2:	4b13      	ldr	r3, [pc, #76]	; (8006c20 <HAL_ADC_MspInit+0x15c>)
 8006bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bd8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006bda:	4b11      	ldr	r3, [pc, #68]	; (8006c20 <HAL_ADC_MspInit+0x15c>)
 8006bdc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006be0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006be2:	4b0f      	ldr	r3, [pc, #60]	; (8006c20 <HAL_ADC_MspInit+0x15c>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006be8:	480d      	ldr	r0, [pc, #52]	; (8006c20 <HAL_ADC_MspInit+0x15c>)
 8006bea:	f003 fbcb 	bl	800a384 <HAL_DMA_Init>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006bf4:	f7ff ff32 	bl	8006a5c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a09      	ldr	r2, [pc, #36]	; (8006c20 <HAL_ADC_MspInit+0x15c>)
 8006bfc:	639a      	str	r2, [r3, #56]	; 0x38
 8006bfe:	4a08      	ldr	r2, [pc, #32]	; (8006c20 <HAL_ADC_MspInit+0x15c>)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006c04:	bf00      	nop
 8006c06:	3730      	adds	r7, #48	; 0x30
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	40012100 	.word	0x40012100
 8006c10:	40023800 	.word	0x40023800
 8006c14:	40020800 	.word	0x40020800
 8006c18:	40020000 	.word	0x40020000
 8006c1c:	40020400 	.word	0x40020400
 8006c20:	2003fd04 	.word	0x2003fd04
 8006c24:	40026440 	.word	0x40026440

08006c28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b08c      	sub	sp, #48	; 0x30
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c30:	f107 031c 	add.w	r3, r7, #28
 8006c34:	2200      	movs	r2, #0
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	605a      	str	r2, [r3, #4]
 8006c3a:	609a      	str	r2, [r3, #8]
 8006c3c:	60da      	str	r2, [r3, #12]
 8006c3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a32      	ldr	r2, [pc, #200]	; (8006d10 <HAL_I2C_MspInit+0xe8>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d12c      	bne.n	8006ca4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	61bb      	str	r3, [r7, #24]
 8006c4e:	4b31      	ldr	r3, [pc, #196]	; (8006d14 <HAL_I2C_MspInit+0xec>)
 8006c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c52:	4a30      	ldr	r2, [pc, #192]	; (8006d14 <HAL_I2C_MspInit+0xec>)
 8006c54:	f043 0302 	orr.w	r3, r3, #2
 8006c58:	6313      	str	r3, [r2, #48]	; 0x30
 8006c5a:	4b2e      	ldr	r3, [pc, #184]	; (8006d14 <HAL_I2C_MspInit+0xec>)
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	61bb      	str	r3, [r7, #24]
 8006c64:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006c66:	23c0      	movs	r3, #192	; 0xc0
 8006c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c6a:	2312      	movs	r3, #18
 8006c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c72:	2303      	movs	r3, #3
 8006c74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006c76:	2304      	movs	r3, #4
 8006c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c7a:	f107 031c 	add.w	r3, r7, #28
 8006c7e:	4619      	mov	r1, r3
 8006c80:	4825      	ldr	r0, [pc, #148]	; (8006d18 <HAL_I2C_MspInit+0xf0>)
 8006c82:	f003 ff1d 	bl	800aac0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006c86:	2300      	movs	r3, #0
 8006c88:	617b      	str	r3, [r7, #20]
 8006c8a:	4b22      	ldr	r3, [pc, #136]	; (8006d14 <HAL_I2C_MspInit+0xec>)
 8006c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8e:	4a21      	ldr	r2, [pc, #132]	; (8006d14 <HAL_I2C_MspInit+0xec>)
 8006c90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c94:	6413      	str	r3, [r2, #64]	; 0x40
 8006c96:	4b1f      	ldr	r3, [pc, #124]	; (8006d14 <HAL_I2C_MspInit+0xec>)
 8006c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c9e:	617b      	str	r3, [r7, #20]
 8006ca0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006ca2:	e031      	b.n	8006d08 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a1c      	ldr	r2, [pc, #112]	; (8006d1c <HAL_I2C_MspInit+0xf4>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d12c      	bne.n	8006d08 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cae:	2300      	movs	r3, #0
 8006cb0:	613b      	str	r3, [r7, #16]
 8006cb2:	4b18      	ldr	r3, [pc, #96]	; (8006d14 <HAL_I2C_MspInit+0xec>)
 8006cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb6:	4a17      	ldr	r2, [pc, #92]	; (8006d14 <HAL_I2C_MspInit+0xec>)
 8006cb8:	f043 0302 	orr.w	r3, r3, #2
 8006cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8006cbe:	4b15      	ldr	r3, [pc, #84]	; (8006d14 <HAL_I2C_MspInit+0xec>)
 8006cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006cca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006cd0:	2312      	movs	r3, #18
 8006cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006cdc:	2304      	movs	r3, #4
 8006cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ce0:	f107 031c 	add.w	r3, r7, #28
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	480c      	ldr	r0, [pc, #48]	; (8006d18 <HAL_I2C_MspInit+0xf0>)
 8006ce8:	f003 feea 	bl	800aac0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006cec:	2300      	movs	r3, #0
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	4b08      	ldr	r3, [pc, #32]	; (8006d14 <HAL_I2C_MspInit+0xec>)
 8006cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf4:	4a07      	ldr	r2, [pc, #28]	; (8006d14 <HAL_I2C_MspInit+0xec>)
 8006cf6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8006cfc:	4b05      	ldr	r3, [pc, #20]	; (8006d14 <HAL_I2C_MspInit+0xec>)
 8006cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	68fb      	ldr	r3, [r7, #12]
}
 8006d08:	bf00      	nop
 8006d0a:	3730      	adds	r7, #48	; 0x30
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	40005400 	.word	0x40005400
 8006d14:	40023800 	.word	0x40023800
 8006d18:	40020400 	.word	0x40020400
 8006d1c:	40005800 	.word	0x40005800

08006d20 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08a      	sub	sp, #40	; 0x28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d28:	f107 0314 	add.w	r3, r7, #20
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	601a      	str	r2, [r3, #0]
 8006d30:	605a      	str	r2, [r3, #4]
 8006d32:	609a      	str	r2, [r3, #8]
 8006d34:	60da      	str	r2, [r3, #12]
 8006d36:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a69      	ldr	r2, [pc, #420]	; (8006ee4 <HAL_SD_MspInit+0x1c4>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	f040 80cb 	bne.w	8006eda <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006d44:	2300      	movs	r3, #0
 8006d46:	613b      	str	r3, [r7, #16]
 8006d48:	4b67      	ldr	r3, [pc, #412]	; (8006ee8 <HAL_SD_MspInit+0x1c8>)
 8006d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d4c:	4a66      	ldr	r2, [pc, #408]	; (8006ee8 <HAL_SD_MspInit+0x1c8>)
 8006d4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d52:	6453      	str	r3, [r2, #68]	; 0x44
 8006d54:	4b64      	ldr	r3, [pc, #400]	; (8006ee8 <HAL_SD_MspInit+0x1c8>)
 8006d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d5c:	613b      	str	r3, [r7, #16]
 8006d5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d60:	2300      	movs	r3, #0
 8006d62:	60fb      	str	r3, [r7, #12]
 8006d64:	4b60      	ldr	r3, [pc, #384]	; (8006ee8 <HAL_SD_MspInit+0x1c8>)
 8006d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d68:	4a5f      	ldr	r2, [pc, #380]	; (8006ee8 <HAL_SD_MspInit+0x1c8>)
 8006d6a:	f043 0304 	orr.w	r3, r3, #4
 8006d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8006d70:	4b5d      	ldr	r3, [pc, #372]	; (8006ee8 <HAL_SD_MspInit+0x1c8>)
 8006d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	60fb      	str	r3, [r7, #12]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	60bb      	str	r3, [r7, #8]
 8006d80:	4b59      	ldr	r3, [pc, #356]	; (8006ee8 <HAL_SD_MspInit+0x1c8>)
 8006d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d84:	4a58      	ldr	r2, [pc, #352]	; (8006ee8 <HAL_SD_MspInit+0x1c8>)
 8006d86:	f043 0308 	orr.w	r3, r3, #8
 8006d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8006d8c:	4b56      	ldr	r3, [pc, #344]	; (8006ee8 <HAL_SD_MspInit+0x1c8>)
 8006d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d90:	f003 0308 	and.w	r3, r3, #8
 8006d94:	60bb      	str	r3, [r7, #8]
 8006d96:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006d98:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006d9c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d9e:	2302      	movs	r3, #2
 8006da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006da2:	2300      	movs	r3, #0
 8006da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006da6:	2303      	movs	r3, #3
 8006da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006daa:	230c      	movs	r3, #12
 8006dac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006dae:	f107 0314 	add.w	r3, r7, #20
 8006db2:	4619      	mov	r1, r3
 8006db4:	484d      	ldr	r0, [pc, #308]	; (8006eec <HAL_SD_MspInit+0x1cc>)
 8006db6:	f003 fe83 	bl	800aac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006dba:	2304      	movs	r3, #4
 8006dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006dca:	230c      	movs	r3, #12
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006dce:	f107 0314 	add.w	r3, r7, #20
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	4846      	ldr	r0, [pc, #280]	; (8006ef0 <HAL_SD_MspInit+0x1d0>)
 8006dd6:	f003 fe73 	bl	800aac0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006dda:	4b46      	ldr	r3, [pc, #280]	; (8006ef4 <HAL_SD_MspInit+0x1d4>)
 8006ddc:	4a46      	ldr	r2, [pc, #280]	; (8006ef8 <HAL_SD_MspInit+0x1d8>)
 8006dde:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006de0:	4b44      	ldr	r3, [pc, #272]	; (8006ef4 <HAL_SD_MspInit+0x1d4>)
 8006de2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006de6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006de8:	4b42      	ldr	r3, [pc, #264]	; (8006ef4 <HAL_SD_MspInit+0x1d4>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006dee:	4b41      	ldr	r3, [pc, #260]	; (8006ef4 <HAL_SD_MspInit+0x1d4>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006df4:	4b3f      	ldr	r3, [pc, #252]	; (8006ef4 <HAL_SD_MspInit+0x1d4>)
 8006df6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006dfa:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006dfc:	4b3d      	ldr	r3, [pc, #244]	; (8006ef4 <HAL_SD_MspInit+0x1d4>)
 8006dfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e02:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006e04:	4b3b      	ldr	r3, [pc, #236]	; (8006ef4 <HAL_SD_MspInit+0x1d4>)
 8006e06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e0a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006e0c:	4b39      	ldr	r3, [pc, #228]	; (8006ef4 <HAL_SD_MspInit+0x1d4>)
 8006e0e:	2220      	movs	r2, #32
 8006e10:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006e12:	4b38      	ldr	r3, [pc, #224]	; (8006ef4 <HAL_SD_MspInit+0x1d4>)
 8006e14:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006e18:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006e1a:	4b36      	ldr	r3, [pc, #216]	; (8006ef4 <HAL_SD_MspInit+0x1d4>)
 8006e1c:	2204      	movs	r2, #4
 8006e1e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006e20:	4b34      	ldr	r3, [pc, #208]	; (8006ef4 <HAL_SD_MspInit+0x1d4>)
 8006e22:	2203      	movs	r2, #3
 8006e24:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006e26:	4b33      	ldr	r3, [pc, #204]	; (8006ef4 <HAL_SD_MspInit+0x1d4>)
 8006e28:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006e2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006e2e:	4b31      	ldr	r3, [pc, #196]	; (8006ef4 <HAL_SD_MspInit+0x1d4>)
 8006e30:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006e34:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006e36:	482f      	ldr	r0, [pc, #188]	; (8006ef4 <HAL_SD_MspInit+0x1d4>)
 8006e38:	f003 faa4 	bl	800a384 <HAL_DMA_Init>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006e42:	f7ff fe0b 	bl	8006a5c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a2a      	ldr	r2, [pc, #168]	; (8006ef4 <HAL_SD_MspInit+0x1d4>)
 8006e4a:	641a      	str	r2, [r3, #64]	; 0x40
 8006e4c:	4a29      	ldr	r2, [pc, #164]	; (8006ef4 <HAL_SD_MspInit+0x1d4>)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006e52:	4b2a      	ldr	r3, [pc, #168]	; (8006efc <HAL_SD_MspInit+0x1dc>)
 8006e54:	4a2a      	ldr	r2, [pc, #168]	; (8006f00 <HAL_SD_MspInit+0x1e0>)
 8006e56:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006e58:	4b28      	ldr	r3, [pc, #160]	; (8006efc <HAL_SD_MspInit+0x1dc>)
 8006e5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006e5e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e60:	4b26      	ldr	r3, [pc, #152]	; (8006efc <HAL_SD_MspInit+0x1dc>)
 8006e62:	2240      	movs	r2, #64	; 0x40
 8006e64:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e66:	4b25      	ldr	r3, [pc, #148]	; (8006efc <HAL_SD_MspInit+0x1dc>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006e6c:	4b23      	ldr	r3, [pc, #140]	; (8006efc <HAL_SD_MspInit+0x1dc>)
 8006e6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e72:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006e74:	4b21      	ldr	r3, [pc, #132]	; (8006efc <HAL_SD_MspInit+0x1dc>)
 8006e76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e7a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006e7c:	4b1f      	ldr	r3, [pc, #124]	; (8006efc <HAL_SD_MspInit+0x1dc>)
 8006e7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e82:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006e84:	4b1d      	ldr	r3, [pc, #116]	; (8006efc <HAL_SD_MspInit+0x1dc>)
 8006e86:	2220      	movs	r2, #32
 8006e88:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006e8a:	4b1c      	ldr	r3, [pc, #112]	; (8006efc <HAL_SD_MspInit+0x1dc>)
 8006e8c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006e90:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006e92:	4b1a      	ldr	r3, [pc, #104]	; (8006efc <HAL_SD_MspInit+0x1dc>)
 8006e94:	2204      	movs	r2, #4
 8006e96:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006e98:	4b18      	ldr	r3, [pc, #96]	; (8006efc <HAL_SD_MspInit+0x1dc>)
 8006e9a:	2203      	movs	r2, #3
 8006e9c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006e9e:	4b17      	ldr	r3, [pc, #92]	; (8006efc <HAL_SD_MspInit+0x1dc>)
 8006ea0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006ea4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006ea6:	4b15      	ldr	r3, [pc, #84]	; (8006efc <HAL_SD_MspInit+0x1dc>)
 8006ea8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006eac:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006eae:	4813      	ldr	r0, [pc, #76]	; (8006efc <HAL_SD_MspInit+0x1dc>)
 8006eb0:	f003 fa68 	bl	800a384 <HAL_DMA_Init>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8006eba:	f7ff fdcf 	bl	8006a5c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a0e      	ldr	r2, [pc, #56]	; (8006efc <HAL_SD_MspInit+0x1dc>)
 8006ec2:	63da      	str	r2, [r3, #60]	; 0x3c
 8006ec4:	4a0d      	ldr	r2, [pc, #52]	; (8006efc <HAL_SD_MspInit+0x1dc>)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006eca:	2200      	movs	r2, #0
 8006ecc:	2100      	movs	r1, #0
 8006ece:	2031      	movs	r0, #49	; 0x31
 8006ed0:	f003 fa21 	bl	800a316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006ed4:	2031      	movs	r0, #49	; 0x31
 8006ed6:	f003 fa3a 	bl	800a34e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006eda:	bf00      	nop
 8006edc:	3728      	adds	r7, #40	; 0x28
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	40012c00 	.word	0x40012c00
 8006ee8:	40023800 	.word	0x40023800
 8006eec:	40020800 	.word	0x40020800
 8006ef0:	40020c00 	.word	0x40020c00
 8006ef4:	2003f82c 	.word	0x2003f82c
 8006ef8:	40026458 	.word	0x40026458
 8006efc:	2003fb60 	.word	0x2003fb60
 8006f00:	400264a0 	.word	0x400264a0

08006f04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08a      	sub	sp, #40	; 0x28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f0c:	f107 0314 	add.w	r3, r7, #20
 8006f10:	2200      	movs	r2, #0
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	605a      	str	r2, [r3, #4]
 8006f16:	609a      	str	r2, [r3, #8]
 8006f18:	60da      	str	r2, [r3, #12]
 8006f1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a19      	ldr	r2, [pc, #100]	; (8006f88 <HAL_SPI_MspInit+0x84>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d12c      	bne.n	8006f80 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006f26:	2300      	movs	r3, #0
 8006f28:	613b      	str	r3, [r7, #16]
 8006f2a:	4b18      	ldr	r3, [pc, #96]	; (8006f8c <HAL_SPI_MspInit+0x88>)
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	4a17      	ldr	r2, [pc, #92]	; (8006f8c <HAL_SPI_MspInit+0x88>)
 8006f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f34:	6413      	str	r3, [r2, #64]	; 0x40
 8006f36:	4b15      	ldr	r3, [pc, #84]	; (8006f8c <HAL_SPI_MspInit+0x88>)
 8006f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f3e:	613b      	str	r3, [r7, #16]
 8006f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f42:	2300      	movs	r3, #0
 8006f44:	60fb      	str	r3, [r7, #12]
 8006f46:	4b11      	ldr	r3, [pc, #68]	; (8006f8c <HAL_SPI_MspInit+0x88>)
 8006f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4a:	4a10      	ldr	r2, [pc, #64]	; (8006f8c <HAL_SPI_MspInit+0x88>)
 8006f4c:	f043 0302 	orr.w	r3, r3, #2
 8006f50:	6313      	str	r3, [r2, #48]	; 0x30
 8006f52:	4b0e      	ldr	r3, [pc, #56]	; (8006f8c <HAL_SPI_MspInit+0x88>)
 8006f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006f5e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f64:	2302      	movs	r3, #2
 8006f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006f70:	2305      	movs	r3, #5
 8006f72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f74:	f107 0314 	add.w	r3, r7, #20
 8006f78:	4619      	mov	r1, r3
 8006f7a:	4805      	ldr	r0, [pc, #20]	; (8006f90 <HAL_SPI_MspInit+0x8c>)
 8006f7c:	f003 fda0 	bl	800aac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006f80:	bf00      	nop
 8006f82:	3728      	adds	r7, #40	; 0x28
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	40003800 	.word	0x40003800
 8006f8c:	40023800 	.word	0x40023800
 8006f90:	40020400 	.word	0x40020400

08006f94 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b08c      	sub	sp, #48	; 0x30
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f9c:	f107 031c 	add.w	r3, r7, #28
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	605a      	str	r2, [r3, #4]
 8006fa6:	609a      	str	r2, [r3, #8]
 8006fa8:	60da      	str	r2, [r3, #12]
 8006faa:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a2d      	ldr	r2, [pc, #180]	; (8007068 <HAL_TIM_PWM_MspInit+0xd4>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d12d      	bne.n	8007012 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	61bb      	str	r3, [r7, #24]
 8006fba:	4b2c      	ldr	r3, [pc, #176]	; (800706c <HAL_TIM_PWM_MspInit+0xd8>)
 8006fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fbe:	4a2b      	ldr	r2, [pc, #172]	; (800706c <HAL_TIM_PWM_MspInit+0xd8>)
 8006fc0:	f043 0301 	orr.w	r3, r3, #1
 8006fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8006fc6:	4b29      	ldr	r3, [pc, #164]	; (800706c <HAL_TIM_PWM_MspInit+0xd8>)
 8006fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	61bb      	str	r3, [r7, #24]
 8006fd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	617b      	str	r3, [r7, #20]
 8006fd6:	4b25      	ldr	r3, [pc, #148]	; (800706c <HAL_TIM_PWM_MspInit+0xd8>)
 8006fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fda:	4a24      	ldr	r2, [pc, #144]	; (800706c <HAL_TIM_PWM_MspInit+0xd8>)
 8006fdc:	f043 0310 	orr.w	r3, r3, #16
 8006fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8006fe2:	4b22      	ldr	r3, [pc, #136]	; (800706c <HAL_TIM_PWM_MspInit+0xd8>)
 8006fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe6:	f003 0310 	and.w	r3, r3, #16
 8006fea:	617b      	str	r3, [r7, #20]
 8006fec:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006fee:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007000:	2301      	movs	r3, #1
 8007002:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007004:	f107 031c 	add.w	r3, r7, #28
 8007008:	4619      	mov	r1, r3
 800700a:	4819      	ldr	r0, [pc, #100]	; (8007070 <HAL_TIM_PWM_MspInit+0xdc>)
 800700c:	f003 fd58 	bl	800aac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007010:	e026      	b.n	8007060 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a17      	ldr	r2, [pc, #92]	; (8007074 <HAL_TIM_PWM_MspInit+0xe0>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d10e      	bne.n	800703a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800701c:	2300      	movs	r3, #0
 800701e:	613b      	str	r3, [r7, #16]
 8007020:	4b12      	ldr	r3, [pc, #72]	; (800706c <HAL_TIM_PWM_MspInit+0xd8>)
 8007022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007024:	4a11      	ldr	r2, [pc, #68]	; (800706c <HAL_TIM_PWM_MspInit+0xd8>)
 8007026:	f043 0302 	orr.w	r3, r3, #2
 800702a:	6413      	str	r3, [r2, #64]	; 0x40
 800702c:	4b0f      	ldr	r3, [pc, #60]	; (800706c <HAL_TIM_PWM_MspInit+0xd8>)
 800702e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	613b      	str	r3, [r7, #16]
 8007036:	693b      	ldr	r3, [r7, #16]
}
 8007038:	e012      	b.n	8007060 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a0e      	ldr	r2, [pc, #56]	; (8007078 <HAL_TIM_PWM_MspInit+0xe4>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d10d      	bne.n	8007060 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007044:	2300      	movs	r3, #0
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	4b08      	ldr	r3, [pc, #32]	; (800706c <HAL_TIM_PWM_MspInit+0xd8>)
 800704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704c:	4a07      	ldr	r2, [pc, #28]	; (800706c <HAL_TIM_PWM_MspInit+0xd8>)
 800704e:	f043 0304 	orr.w	r3, r3, #4
 8007052:	6413      	str	r3, [r2, #64]	; 0x40
 8007054:	4b05      	ldr	r3, [pc, #20]	; (800706c <HAL_TIM_PWM_MspInit+0xd8>)
 8007056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	60fb      	str	r3, [r7, #12]
 800705e:	68fb      	ldr	r3, [r7, #12]
}
 8007060:	bf00      	nop
 8007062:	3730      	adds	r7, #48	; 0x30
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	40010000 	.word	0x40010000
 800706c:	40023800 	.word	0x40023800
 8007070:	40021000 	.word	0x40021000
 8007074:	40000400 	.word	0x40000400
 8007078:	40000800 	.word	0x40000800

0800707c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b088      	sub	sp, #32
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a3e      	ldr	r2, [pc, #248]	; (8007184 <HAL_TIM_Base_MspInit+0x108>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d116      	bne.n	80070bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800708e:	2300      	movs	r3, #0
 8007090:	61fb      	str	r3, [r7, #28]
 8007092:	4b3d      	ldr	r3, [pc, #244]	; (8007188 <HAL_TIM_Base_MspInit+0x10c>)
 8007094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007096:	4a3c      	ldr	r2, [pc, #240]	; (8007188 <HAL_TIM_Base_MspInit+0x10c>)
 8007098:	f043 0310 	orr.w	r3, r3, #16
 800709c:	6413      	str	r3, [r2, #64]	; 0x40
 800709e:	4b3a      	ldr	r3, [pc, #232]	; (8007188 <HAL_TIM_Base_MspInit+0x10c>)
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	f003 0310 	and.w	r3, r3, #16
 80070a6:	61fb      	str	r3, [r7, #28]
 80070a8:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80070aa:	2200      	movs	r2, #0
 80070ac:	2101      	movs	r1, #1
 80070ae:	2036      	movs	r0, #54	; 0x36
 80070b0:	f003 f931 	bl	800a316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80070b4:	2036      	movs	r0, #54	; 0x36
 80070b6:	f003 f94a 	bl	800a34e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80070ba:	e05e      	b.n	800717a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a32      	ldr	r2, [pc, #200]	; (800718c <HAL_TIM_Base_MspInit+0x110>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d116      	bne.n	80070f4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80070c6:	2300      	movs	r3, #0
 80070c8:	61bb      	str	r3, [r7, #24]
 80070ca:	4b2f      	ldr	r3, [pc, #188]	; (8007188 <HAL_TIM_Base_MspInit+0x10c>)
 80070cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ce:	4a2e      	ldr	r2, [pc, #184]	; (8007188 <HAL_TIM_Base_MspInit+0x10c>)
 80070d0:	f043 0320 	orr.w	r3, r3, #32
 80070d4:	6413      	str	r3, [r2, #64]	; 0x40
 80070d6:	4b2c      	ldr	r3, [pc, #176]	; (8007188 <HAL_TIM_Base_MspInit+0x10c>)
 80070d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	61bb      	str	r3, [r7, #24]
 80070e0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80070e2:	2200      	movs	r2, #0
 80070e4:	2100      	movs	r1, #0
 80070e6:	2037      	movs	r0, #55	; 0x37
 80070e8:	f003 f915 	bl	800a316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80070ec:	2037      	movs	r0, #55	; 0x37
 80070ee:	f003 f92e 	bl	800a34e <HAL_NVIC_EnableIRQ>
}
 80070f2:	e042      	b.n	800717a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a25      	ldr	r2, [pc, #148]	; (8007190 <HAL_TIM_Base_MspInit+0x114>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d10e      	bne.n	800711c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80070fe:	2300      	movs	r3, #0
 8007100:	617b      	str	r3, [r7, #20]
 8007102:	4b21      	ldr	r3, [pc, #132]	; (8007188 <HAL_TIM_Base_MspInit+0x10c>)
 8007104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007106:	4a20      	ldr	r2, [pc, #128]	; (8007188 <HAL_TIM_Base_MspInit+0x10c>)
 8007108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800710c:	6453      	str	r3, [r2, #68]	; 0x44
 800710e:	4b1e      	ldr	r3, [pc, #120]	; (8007188 <HAL_TIM_Base_MspInit+0x10c>)
 8007110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007116:	617b      	str	r3, [r7, #20]
 8007118:	697b      	ldr	r3, [r7, #20]
}
 800711a:	e02e      	b.n	800717a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a1c      	ldr	r2, [pc, #112]	; (8007194 <HAL_TIM_Base_MspInit+0x118>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d10e      	bne.n	8007144 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007126:	2300      	movs	r3, #0
 8007128:	613b      	str	r3, [r7, #16]
 800712a:	4b17      	ldr	r3, [pc, #92]	; (8007188 <HAL_TIM_Base_MspInit+0x10c>)
 800712c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712e:	4a16      	ldr	r2, [pc, #88]	; (8007188 <HAL_TIM_Base_MspInit+0x10c>)
 8007130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007134:	6453      	str	r3, [r2, #68]	; 0x44
 8007136:	4b14      	ldr	r3, [pc, #80]	; (8007188 <HAL_TIM_Base_MspInit+0x10c>)
 8007138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800713e:	613b      	str	r3, [r7, #16]
 8007140:	693b      	ldr	r3, [r7, #16]
}
 8007142:	e01a      	b.n	800717a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a13      	ldr	r2, [pc, #76]	; (8007198 <HAL_TIM_Base_MspInit+0x11c>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d115      	bne.n	800717a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800714e:	2300      	movs	r3, #0
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	4b0d      	ldr	r3, [pc, #52]	; (8007188 <HAL_TIM_Base_MspInit+0x10c>)
 8007154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007156:	4a0c      	ldr	r2, [pc, #48]	; (8007188 <HAL_TIM_Base_MspInit+0x10c>)
 8007158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800715c:	6413      	str	r3, [r2, #64]	; 0x40
 800715e:	4b0a      	ldr	r3, [pc, #40]	; (8007188 <HAL_TIM_Base_MspInit+0x10c>)
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800716a:	2200      	movs	r2, #0
 800716c:	2100      	movs	r1, #0
 800716e:	202c      	movs	r0, #44	; 0x2c
 8007170:	f003 f8d1 	bl	800a316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007174:	202c      	movs	r0, #44	; 0x2c
 8007176:	f003 f8ea 	bl	800a34e <HAL_NVIC_EnableIRQ>
}
 800717a:	bf00      	nop
 800717c:	3720      	adds	r7, #32
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	40001000 	.word	0x40001000
 8007188:	40023800 	.word	0x40023800
 800718c:	40001400 	.word	0x40001400
 8007190:	40014400 	.word	0x40014400
 8007194:	40014800 	.word	0x40014800
 8007198:	40001c00 	.word	0x40001c00

0800719c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b08a      	sub	sp, #40	; 0x28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071a4:	f107 0314 	add.w	r3, r7, #20
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	605a      	str	r2, [r3, #4]
 80071ae:	609a      	str	r2, [r3, #8]
 80071b0:	60da      	str	r2, [r3, #12]
 80071b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a1d      	ldr	r2, [pc, #116]	; (8007230 <HAL_TIM_Encoder_MspInit+0x94>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d133      	bne.n	8007226 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80071be:	2300      	movs	r3, #0
 80071c0:	613b      	str	r3, [r7, #16]
 80071c2:	4b1c      	ldr	r3, [pc, #112]	; (8007234 <HAL_TIM_Encoder_MspInit+0x98>)
 80071c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c6:	4a1b      	ldr	r2, [pc, #108]	; (8007234 <HAL_TIM_Encoder_MspInit+0x98>)
 80071c8:	f043 0302 	orr.w	r3, r3, #2
 80071cc:	6453      	str	r3, [r2, #68]	; 0x44
 80071ce:	4b19      	ldr	r3, [pc, #100]	; (8007234 <HAL_TIM_Encoder_MspInit+0x98>)
 80071d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	613b      	str	r3, [r7, #16]
 80071d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]
 80071de:	4b15      	ldr	r3, [pc, #84]	; (8007234 <HAL_TIM_Encoder_MspInit+0x98>)
 80071e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e2:	4a14      	ldr	r2, [pc, #80]	; (8007234 <HAL_TIM_Encoder_MspInit+0x98>)
 80071e4:	f043 0304 	orr.w	r3, r3, #4
 80071e8:	6313      	str	r3, [r2, #48]	; 0x30
 80071ea:	4b12      	ldr	r3, [pc, #72]	; (8007234 <HAL_TIM_Encoder_MspInit+0x98>)
 80071ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ee:	f003 0304 	and.w	r3, r3, #4
 80071f2:	60fb      	str	r3, [r7, #12]
 80071f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80071f6:	23c0      	movs	r3, #192	; 0xc0
 80071f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071fa:	2302      	movs	r3, #2
 80071fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071fe:	2300      	movs	r3, #0
 8007200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007202:	2300      	movs	r3, #0
 8007204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007206:	2303      	movs	r3, #3
 8007208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800720a:	f107 0314 	add.w	r3, r7, #20
 800720e:	4619      	mov	r1, r3
 8007210:	4809      	ldr	r0, [pc, #36]	; (8007238 <HAL_TIM_Encoder_MspInit+0x9c>)
 8007212:	f003 fc55 	bl	800aac0 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007216:	2200      	movs	r2, #0
 8007218:	2100      	movs	r1, #0
 800721a:	202c      	movs	r0, #44	; 0x2c
 800721c:	f003 f87b 	bl	800a316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007220:	202c      	movs	r0, #44	; 0x2c
 8007222:	f003 f894 	bl	800a34e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007226:	bf00      	nop
 8007228:	3728      	adds	r7, #40	; 0x28
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	40010400 	.word	0x40010400
 8007234:	40023800 	.word	0x40023800
 8007238:	40020800 	.word	0x40020800

0800723c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b08c      	sub	sp, #48	; 0x30
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007244:	f107 031c 	add.w	r3, r7, #28
 8007248:	2200      	movs	r2, #0
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	605a      	str	r2, [r3, #4]
 800724e:	609a      	str	r2, [r3, #8]
 8007250:	60da      	str	r2, [r3, #12]
 8007252:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a5c      	ldr	r2, [pc, #368]	; (80073cc <HAL_TIM_MspPostInit+0x190>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d11f      	bne.n	800729e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800725e:	2300      	movs	r3, #0
 8007260:	61bb      	str	r3, [r7, #24]
 8007262:	4b5b      	ldr	r3, [pc, #364]	; (80073d0 <HAL_TIM_MspPostInit+0x194>)
 8007264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007266:	4a5a      	ldr	r2, [pc, #360]	; (80073d0 <HAL_TIM_MspPostInit+0x194>)
 8007268:	f043 0310 	orr.w	r3, r3, #16
 800726c:	6313      	str	r3, [r2, #48]	; 0x30
 800726e:	4b58      	ldr	r3, [pc, #352]	; (80073d0 <HAL_TIM_MspPostInit+0x194>)
 8007270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007272:	f003 0310 	and.w	r3, r3, #16
 8007276:	61bb      	str	r3, [r7, #24]
 8007278:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800727a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800727e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007280:	2302      	movs	r3, #2
 8007282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007284:	2300      	movs	r3, #0
 8007286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007288:	2300      	movs	r3, #0
 800728a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800728c:	2301      	movs	r3, #1
 800728e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007290:	f107 031c 	add.w	r3, r7, #28
 8007294:	4619      	mov	r1, r3
 8007296:	484f      	ldr	r0, [pc, #316]	; (80073d4 <HAL_TIM_MspPostInit+0x198>)
 8007298:	f003 fc12 	bl	800aac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800729c:	e091      	b.n	80073c2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a4d      	ldr	r2, [pc, #308]	; (80073d8 <HAL_TIM_MspPostInit+0x19c>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d11e      	bne.n	80072e6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072a8:	2300      	movs	r3, #0
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	4b48      	ldr	r3, [pc, #288]	; (80073d0 <HAL_TIM_MspPostInit+0x194>)
 80072ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b0:	4a47      	ldr	r2, [pc, #284]	; (80073d0 <HAL_TIM_MspPostInit+0x194>)
 80072b2:	f043 0302 	orr.w	r3, r3, #2
 80072b6:	6313      	str	r3, [r2, #48]	; 0x30
 80072b8:	4b45      	ldr	r3, [pc, #276]	; (80073d0 <HAL_TIM_MspPostInit+0x194>)
 80072ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	617b      	str	r3, [r7, #20]
 80072c2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80072c4:	2330      	movs	r3, #48	; 0x30
 80072c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072c8:	2302      	movs	r3, #2
 80072ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072cc:	2300      	movs	r3, #0
 80072ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072d0:	2300      	movs	r3, #0
 80072d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80072d4:	2302      	movs	r3, #2
 80072d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072d8:	f107 031c 	add.w	r3, r7, #28
 80072dc:	4619      	mov	r1, r3
 80072de:	483f      	ldr	r0, [pc, #252]	; (80073dc <HAL_TIM_MspPostInit+0x1a0>)
 80072e0:	f003 fbee 	bl	800aac0 <HAL_GPIO_Init>
}
 80072e4:	e06d      	b.n	80073c2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a3d      	ldr	r2, [pc, #244]	; (80073e0 <HAL_TIM_MspPostInit+0x1a4>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d11f      	bne.n	8007330 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80072f0:	2300      	movs	r3, #0
 80072f2:	613b      	str	r3, [r7, #16]
 80072f4:	4b36      	ldr	r3, [pc, #216]	; (80073d0 <HAL_TIM_MspPostInit+0x194>)
 80072f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f8:	4a35      	ldr	r2, [pc, #212]	; (80073d0 <HAL_TIM_MspPostInit+0x194>)
 80072fa:	f043 0308 	orr.w	r3, r3, #8
 80072fe:	6313      	str	r3, [r2, #48]	; 0x30
 8007300:	4b33      	ldr	r3, [pc, #204]	; (80073d0 <HAL_TIM_MspPostInit+0x194>)
 8007302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007304:	f003 0308 	and.w	r3, r3, #8
 8007308:	613b      	str	r3, [r7, #16]
 800730a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800730c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007312:	2302      	movs	r3, #2
 8007314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007316:	2300      	movs	r3, #0
 8007318:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800731a:	2300      	movs	r3, #0
 800731c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800731e:	2302      	movs	r3, #2
 8007320:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007322:	f107 031c 	add.w	r3, r7, #28
 8007326:	4619      	mov	r1, r3
 8007328:	482e      	ldr	r0, [pc, #184]	; (80073e4 <HAL_TIM_MspPostInit+0x1a8>)
 800732a:	f003 fbc9 	bl	800aac0 <HAL_GPIO_Init>
}
 800732e:	e048      	b.n	80073c2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a2c      	ldr	r2, [pc, #176]	; (80073e8 <HAL_TIM_MspPostInit+0x1ac>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d11f      	bne.n	800737a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800733a:	2300      	movs	r3, #0
 800733c:	60fb      	str	r3, [r7, #12]
 800733e:	4b24      	ldr	r3, [pc, #144]	; (80073d0 <HAL_TIM_MspPostInit+0x194>)
 8007340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007342:	4a23      	ldr	r2, [pc, #140]	; (80073d0 <HAL_TIM_MspPostInit+0x194>)
 8007344:	f043 0302 	orr.w	r3, r3, #2
 8007348:	6313      	str	r3, [r2, #48]	; 0x30
 800734a:	4b21      	ldr	r3, [pc, #132]	; (80073d0 <HAL_TIM_MspPostInit+0x194>)
 800734c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007356:	f44f 7380 	mov.w	r3, #256	; 0x100
 800735a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800735c:	2302      	movs	r3, #2
 800735e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007360:	2300      	movs	r3, #0
 8007362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007364:	2300      	movs	r3, #0
 8007366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007368:	2303      	movs	r3, #3
 800736a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800736c:	f107 031c 	add.w	r3, r7, #28
 8007370:	4619      	mov	r1, r3
 8007372:	481a      	ldr	r0, [pc, #104]	; (80073dc <HAL_TIM_MspPostInit+0x1a0>)
 8007374:	f003 fba4 	bl	800aac0 <HAL_GPIO_Init>
}
 8007378:	e023      	b.n	80073c2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a1b      	ldr	r2, [pc, #108]	; (80073ec <HAL_TIM_MspPostInit+0x1b0>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d11e      	bne.n	80073c2 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007384:	2300      	movs	r3, #0
 8007386:	60bb      	str	r3, [r7, #8]
 8007388:	4b11      	ldr	r3, [pc, #68]	; (80073d0 <HAL_TIM_MspPostInit+0x194>)
 800738a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738c:	4a10      	ldr	r2, [pc, #64]	; (80073d0 <HAL_TIM_MspPostInit+0x194>)
 800738e:	f043 0302 	orr.w	r3, r3, #2
 8007392:	6313      	str	r3, [r2, #48]	; 0x30
 8007394:	4b0e      	ldr	r3, [pc, #56]	; (80073d0 <HAL_TIM_MspPostInit+0x194>)
 8007396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007398:	f003 0302 	and.w	r3, r3, #2
 800739c:	60bb      	str	r3, [r7, #8]
 800739e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80073a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073a6:	2302      	movs	r3, #2
 80073a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073aa:	2300      	movs	r3, #0
 80073ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073ae:	2300      	movs	r3, #0
 80073b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80073b2:	2303      	movs	r3, #3
 80073b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073b6:	f107 031c 	add.w	r3, r7, #28
 80073ba:	4619      	mov	r1, r3
 80073bc:	4807      	ldr	r0, [pc, #28]	; (80073dc <HAL_TIM_MspPostInit+0x1a0>)
 80073be:	f003 fb7f 	bl	800aac0 <HAL_GPIO_Init>
}
 80073c2:	bf00      	nop
 80073c4:	3730      	adds	r7, #48	; 0x30
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	40010000 	.word	0x40010000
 80073d0:	40023800 	.word	0x40023800
 80073d4:	40021000 	.word	0x40021000
 80073d8:	40000400 	.word	0x40000400
 80073dc:	40020400 	.word	0x40020400
 80073e0:	40000800 	.word	0x40000800
 80073e4:	40020c00 	.word	0x40020c00
 80073e8:	40014400 	.word	0x40014400
 80073ec:	40014800 	.word	0x40014800

080073f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b08a      	sub	sp, #40	; 0x28
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073f8:	f107 0314 	add.w	r3, r7, #20
 80073fc:	2200      	movs	r2, #0
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	605a      	str	r2, [r3, #4]
 8007402:	609a      	str	r2, [r3, #8]
 8007404:	60da      	str	r2, [r3, #12]
 8007406:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a19      	ldr	r2, [pc, #100]	; (8007474 <HAL_UART_MspInit+0x84>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d12b      	bne.n	800746a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007412:	2300      	movs	r3, #0
 8007414:	613b      	str	r3, [r7, #16]
 8007416:	4b18      	ldr	r3, [pc, #96]	; (8007478 <HAL_UART_MspInit+0x88>)
 8007418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741a:	4a17      	ldr	r2, [pc, #92]	; (8007478 <HAL_UART_MspInit+0x88>)
 800741c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007420:	6413      	str	r3, [r2, #64]	; 0x40
 8007422:	4b15      	ldr	r3, [pc, #84]	; (8007478 <HAL_UART_MspInit+0x88>)
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800742a:	613b      	str	r3, [r7, #16]
 800742c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800742e:	2300      	movs	r3, #0
 8007430:	60fb      	str	r3, [r7, #12]
 8007432:	4b11      	ldr	r3, [pc, #68]	; (8007478 <HAL_UART_MspInit+0x88>)
 8007434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007436:	4a10      	ldr	r2, [pc, #64]	; (8007478 <HAL_UART_MspInit+0x88>)
 8007438:	f043 0308 	orr.w	r3, r3, #8
 800743c:	6313      	str	r3, [r2, #48]	; 0x30
 800743e:	4b0e      	ldr	r3, [pc, #56]	; (8007478 <HAL_UART_MspInit+0x88>)
 8007440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007442:	f003 0308 	and.w	r3, r3, #8
 8007446:	60fb      	str	r3, [r7, #12]
 8007448:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800744a:	2360      	movs	r3, #96	; 0x60
 800744c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800744e:	2302      	movs	r3, #2
 8007450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007452:	2300      	movs	r3, #0
 8007454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007456:	2303      	movs	r3, #3
 8007458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800745a:	2307      	movs	r3, #7
 800745c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800745e:	f107 0314 	add.w	r3, r7, #20
 8007462:	4619      	mov	r1, r3
 8007464:	4805      	ldr	r0, [pc, #20]	; (800747c <HAL_UART_MspInit+0x8c>)
 8007466:	f003 fb2b 	bl	800aac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800746a:	bf00      	nop
 800746c:	3728      	adds	r7, #40	; 0x28
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	40004400 	.word	0x40004400
 8007478:	40023800 	.word	0x40023800
 800747c:	40020c00 	.word	0x40020c00

08007480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007480:	b480      	push	{r7}
 8007482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007484:	e7fe      	b.n	8007484 <NMI_Handler+0x4>

08007486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007486:	b480      	push	{r7}
 8007488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800748a:	e7fe      	b.n	800748a <HardFault_Handler+0x4>

0800748c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800748c:	b480      	push	{r7}
 800748e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007490:	e7fe      	b.n	8007490 <MemManage_Handler+0x4>

08007492 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007492:	b480      	push	{r7}
 8007494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007496:	e7fe      	b.n	8007496 <BusFault_Handler+0x4>

08007498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007498:	b480      	push	{r7}
 800749a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800749c:	e7fe      	b.n	800749c <UsageFault_Handler+0x4>

0800749e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800749e:	b480      	push	{r7}
 80074a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80074a2:	bf00      	nop
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80074ac:	b480      	push	{r7}
 80074ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80074b0:	bf00      	nop
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80074ba:	b480      	push	{r7}
 80074bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80074be:	bf00      	nop
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80074cc:	f002 fa00 	bl	80098d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80074d0:	bf00      	nop
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80074d8:	4803      	ldr	r0, [pc, #12]	; (80074e8 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80074da:	f007 fceb 	bl	800eeb4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80074de:	4803      	ldr	r0, [pc, #12]	; (80074ec <TIM8_UP_TIM13_IRQHandler+0x18>)
 80074e0:	f007 fce8 	bl	800eeb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80074e4:	bf00      	nop
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	2003f8e4 	.word	0x2003f8e4
 80074ec:	2003fae0 	.word	0x2003fae0

080074f0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80074f4:	4802      	ldr	r0, [pc, #8]	; (8007500 <SDIO_IRQHandler+0x10>)
 80074f6:	f005 fd85 	bl	800d004 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80074fa:	bf00      	nop
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	2003fc40 	.word	0x2003fc40

08007504 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007508:	4802      	ldr	r0, [pc, #8]	; (8007514 <TIM6_DAC_IRQHandler+0x10>)
 800750a:	f007 fcd3 	bl	800eeb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800750e:	bf00      	nop
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	2003fbc0 	.word	0x2003fbc0

08007518 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800751c:	4802      	ldr	r0, [pc, #8]	; (8007528 <TIM7_IRQHandler+0x10>)
 800751e:	f007 fcc9 	bl	800eeb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007522:	bf00      	nop
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	2003fd64 	.word	0x2003fd64

0800752c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007530:	4802      	ldr	r0, [pc, #8]	; (800753c <DMA2_Stream2_IRQHandler+0x10>)
 8007532:	f003 f84f 	bl	800a5d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007536:	bf00      	nop
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	2003fd04 	.word	0x2003fd04

08007540 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007544:	4802      	ldr	r0, [pc, #8]	; (8007550 <DMA2_Stream3_IRQHandler+0x10>)
 8007546:	f003 f845 	bl	800a5d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800754a:	bf00      	nop
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	2003f82c 	.word	0x2003f82c

08007554 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007558:	4802      	ldr	r0, [pc, #8]	; (8007564 <DMA2_Stream6_IRQHandler+0x10>)
 800755a:	f003 f83b 	bl	800a5d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800755e:	bf00      	nop
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	2003fb60 	.word	0x2003fb60

08007568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007570:	4a14      	ldr	r2, [pc, #80]	; (80075c4 <_sbrk+0x5c>)
 8007572:	4b15      	ldr	r3, [pc, #84]	; (80075c8 <_sbrk+0x60>)
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800757c:	4b13      	ldr	r3, [pc, #76]	; (80075cc <_sbrk+0x64>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d102      	bne.n	800758a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007584:	4b11      	ldr	r3, [pc, #68]	; (80075cc <_sbrk+0x64>)
 8007586:	4a12      	ldr	r2, [pc, #72]	; (80075d0 <_sbrk+0x68>)
 8007588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800758a:	4b10      	ldr	r3, [pc, #64]	; (80075cc <_sbrk+0x64>)
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4413      	add	r3, r2
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	429a      	cmp	r2, r3
 8007596:	d207      	bcs.n	80075a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007598:	f00e f948 	bl	801582c <__errno>
 800759c:	4603      	mov	r3, r0
 800759e:	220c      	movs	r2, #12
 80075a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80075a2:	f04f 33ff 	mov.w	r3, #4294967295
 80075a6:	e009      	b.n	80075bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80075a8:	4b08      	ldr	r3, [pc, #32]	; (80075cc <_sbrk+0x64>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80075ae:	4b07      	ldr	r3, [pc, #28]	; (80075cc <_sbrk+0x64>)
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4413      	add	r3, r2
 80075b6:	4a05      	ldr	r2, [pc, #20]	; (80075cc <_sbrk+0x64>)
 80075b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80075ba:	68fb      	ldr	r3, [r7, #12]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3718      	adds	r7, #24
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	20050000 	.word	0x20050000
 80075c8:	00000800 	.word	0x00000800
 80075cc:	200002f0 	.word	0x200002f0
 80075d0:	20041eb8 	.word	0x20041eb8

080075d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80075d4:	b480      	push	{r7}
 80075d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80075d8:	4b08      	ldr	r3, [pc, #32]	; (80075fc <SystemInit+0x28>)
 80075da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075de:	4a07      	ldr	r2, [pc, #28]	; (80075fc <SystemInit+0x28>)
 80075e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80075e8:	4b04      	ldr	r3, [pc, #16]	; (80075fc <SystemInit+0x28>)
 80075ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80075ee:	609a      	str	r2, [r3, #8]
#endif
}
 80075f0:	bf00      	nop
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	e000ed00 	.word	0xe000ed00

08007600 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007600:	b598      	push	{r3, r4, r7, lr}
 8007602:	af00      	add	r7, sp, #0
	lcd_init();
 8007604:	f7f9 fd08 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007608:	483a      	ldr	r0, [pc, #232]	; (80076f4 <cppInit+0xf4>)
 800760a:	f7fd fdd5 	bl	80051b8 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800760e:	2064      	movs	r0, #100	; 0x64
 8007610:	f002 f97e 	bl	8009910 <HAL_Delay>
	power_sensor.updateValues();
 8007614:	4837      	ldr	r0, [pc, #220]	; (80076f4 <cppInit+0xf4>)
 8007616:	f7fd fddf 	bl	80051d8 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 800761a:	f7f9 fd41 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800761e:	2100      	movs	r1, #0
 8007620:	2000      	movs	r0, #0
 8007622:	f7f9 fd4d 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007626:	4834      	ldr	r0, [pc, #208]	; (80076f8 <cppInit+0xf8>)
 8007628:	f7f9 fd75 	bl	8001116 <lcd_printf>
	lcd_locate(0,1);
 800762c:	2101      	movs	r1, #1
 800762e:	2000      	movs	r0, #0
 8007630:	f7f9 fd46 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007634:	482f      	ldr	r0, [pc, #188]	; (80076f4 <cppInit+0xf4>)
 8007636:	f7fd fdf9 	bl	800522c <_ZN11PowerSensor17getButteryVoltageEv>
 800763a:	ee10 3a10 	vmov	r3, s0
 800763e:	4618      	mov	r0, r3
 8007640:	f7f8 ff9a 	bl	8000578 <__aeabi_f2d>
 8007644:	4603      	mov	r3, r0
 8007646:	460c      	mov	r4, r1
 8007648:	461a      	mov	r2, r3
 800764a:	4623      	mov	r3, r4
 800764c:	482b      	ldr	r0, [pc, #172]	; (80076fc <cppInit+0xfc>)
 800764e:	f7f9 fd62 	bl	8001116 <lcd_printf>
	HAL_Delay(1000);
 8007652:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007656:	f002 f95b 	bl	8009910 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 800765a:	4829      	ldr	r0, [pc, #164]	; (8007700 <cppInit+0x100>)
 800765c:	f7fd f808 	bl	8004670 <_ZN6Logger10sdCardInitEv>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d007      	beq.n	8007676 <cppInit+0x76>
		led.fullColor('G');
 8007666:	2147      	movs	r1, #71	; 0x47
 8007668:	4826      	ldr	r0, [pc, #152]	; (8007704 <cppInit+0x104>)
 800766a:	f7fa fbd7 	bl	8001e1c <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800766e:	2064      	movs	r0, #100	; 0x64
 8007670:	f002 f94e 	bl	8009910 <HAL_Delay>
 8007674:	e006      	b.n	8007684 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007676:	2152      	movs	r1, #82	; 0x52
 8007678:	4822      	ldr	r0, [pc, #136]	; (8007704 <cppInit+0x104>)
 800767a:	f7fa fbcf 	bl	8001e1c <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800767e:	2064      	movs	r0, #100	; 0x64
 8007680:	f002 f946 	bl	8009910 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007684:	4820      	ldr	r0, [pc, #128]	; (8007708 <cppInit+0x108>)
 8007686:	f7fa fd25 	bl	80020d4 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800768a:	4820      	ldr	r0, [pc, #128]	; (800770c <cppInit+0x10c>)
 800768c:	f7fd fa68 	bl	8004b60 <_ZN5Motor4initEv>
	encoder.init();
 8007690:	481f      	ldr	r0, [pc, #124]	; (8007710 <cppInit+0x110>)
 8007692:	f7f9 fd8b 	bl	80011ac <_ZN7Encoder4initEv>
	imu.init();
 8007696:	481f      	ldr	r0, [pc, #124]	; (8007714 <cppInit+0x114>)
 8007698:	f7fa f97e 	bl	8001998 <_ZN3IMU4initEv>
	line_trace.init();
 800769c:	481e      	ldr	r0, [pc, #120]	; (8007718 <cppInit+0x118>)
 800769e:	f7fc f8c9 	bl	8003834 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 80076a2:	4819      	ldr	r0, [pc, #100]	; (8007708 <cppInit+0x108>)
 80076a4:	f7fa fe52 	bl	800234c <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 80076a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80076ac:	f002 f930 	bl	8009910 <HAL_Delay>

	led.fullColor('M');
 80076b0:	214d      	movs	r1, #77	; 0x4d
 80076b2:	4814      	ldr	r0, [pc, #80]	; (8007704 <cppInit+0x104>)
 80076b4:	f7fa fbb2 	bl	8001e1c <_ZN3LED9fullColorEc>
	imu.calibration();
 80076b8:	4816      	ldr	r0, [pc, #88]	; (8007714 <cppInit+0x114>)
 80076ba:	f7fa fa37 	bl	8001b2c <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 80076be:	ed9f 1a17 	vldr	s2, [pc, #92]	; 800771c <cppInit+0x11c>
 80076c2:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007720 <cppInit+0x120>
 80076c6:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007724 <cppInit+0x124>
 80076ca:	4817      	ldr	r0, [pc, #92]	; (8007728 <cppInit+0x128>)
 80076cc:	f7fe f9cc 	bl	8005a68 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 80076d0:	ed9f 1a16 	vldr	s2, [pc, #88]	; 800772c <cppInit+0x12c>
 80076d4:	eddf 0a16 	vldr	s1, [pc, #88]	; 8007730 <cppInit+0x130>
 80076d8:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8007734 <cppInit+0x134>
 80076dc:	4812      	ldr	r0, [pc, #72]	; (8007728 <cppInit+0x128>)
 80076de:	f7fe f9dc 	bl	8005a9a <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 80076e2:	4815      	ldr	r0, [pc, #84]	; (8007738 <cppInit+0x138>)
 80076e4:	f7fd fc6d 	bl	8004fc2 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 80076e8:	4814      	ldr	r0, [pc, #80]	; (800773c <cppInit+0x13c>)
 80076ea:	f7fd fd07 	bl	80050fc <_ZN13PathFollowing4initEv>

}
 80076ee:	bf00      	nop
 80076f0:	bd98      	pop	{r3, r4, r7, pc}
 80076f2:	bf00      	nop
 80076f4:	20000604 	.word	0x20000604
 80076f8:	0801a0a8 	.word	0x0801a0a8
 80076fc:	0801a0b0 	.word	0x0801a0b0
 8007700:	20000624 	.word	0x20000624
 8007704:	20000600 	.word	0x20000600
 8007708:	200002f4 	.word	0x200002f4
 800770c:	200005fc 	.word	0x200005fc
 8007710:	20017d34 	.word	0x20017d34
 8007714:	20000610 	.word	0x20000610
 8007718:	20017dd0 	.word	0x20017dd0
 800771c:	3cceca68 	.word	0x3cceca68
 8007720:	4180f06f 	.word	0x4180f06f
 8007724:	3fea2d0e 	.word	0x3fea2d0e
 8007728:	20017d54 	.word	0x20017d54
 800772c:	3ab7dacd 	.word	0x3ab7dacd
 8007730:	3f5e3fbc 	.word	0x3f5e3fbc
 8007734:	3d8eefa2 	.word	0x3d8eefa2
 8007738:	20017d90 	.word	0x20017d90
 800773c:	20025d28 	.word	0x20025d28

08007740 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007744:	4819      	ldr	r0, [pc, #100]	; (80077ac <cppFlip1ms+0x6c>)
 8007746:	f7fa fd23 	bl	8002190 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 800774a:	4819      	ldr	r0, [pc, #100]	; (80077b0 <cppFlip1ms+0x70>)
 800774c:	f7fa f94c 	bl	80019e8 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007750:	4818      	ldr	r0, [pc, #96]	; (80077b4 <cppFlip1ms+0x74>)
 8007752:	f7f9 fd4d 	bl	80011f0 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007756:	4818      	ldr	r0, [pc, #96]	; (80077b8 <cppFlip1ms+0x78>)
 8007758:	f7fc fb02 	bl	8003d60 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 800775c:	4817      	ldr	r0, [pc, #92]	; (80077bc <cppFlip1ms+0x7c>)
 800775e:	f7fe f9b5 	bl	8005acc <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007762:	4817      	ldr	r0, [pc, #92]	; (80077c0 <cppFlip1ms+0x80>)
 8007764:	f7fd fc10 	bl	8004f88 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007768:	4816      	ldr	r0, [pc, #88]	; (80077c4 <cppFlip1ms+0x84>)
 800776a:	f7fd fdd5 	bl	8005318 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 800776e:	4816      	ldr	r0, [pc, #88]	; (80077c8 <cppFlip1ms+0x88>)
 8007770:	f7fd fa08 	bl	8004b84 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8007774:	4b15      	ldr	r3, [pc, #84]	; (80077cc <cppFlip1ms+0x8c>)
 8007776:	881b      	ldrh	r3, [r3, #0]
 8007778:	3301      	adds	r3, #1
 800777a:	b29a      	uxth	r2, r3
 800777c:	4b13      	ldr	r3, [pc, #76]	; (80077cc <cppFlip1ms+0x8c>)
 800777e:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8007780:	4b12      	ldr	r3, [pc, #72]	; (80077cc <cppFlip1ms+0x8c>)
 8007782:	881b      	ldrh	r3, [r3, #0]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d90c      	bls.n	80077a2 <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 8007788:	4809      	ldr	r0, [pc, #36]	; (80077b0 <cppFlip1ms+0x70>)
 800778a:	f7fa f985 	bl	8001a98 <_ZN3IMU8getOmegaEv>
 800778e:	eef0 7a40 	vmov.f32	s15, s0
 8007792:	eeb0 0a67 	vmov.f32	s0, s15
 8007796:	480e      	ldr	r0, [pc, #56]	; (80077d0 <cppFlip1ms+0x90>)
 8007798:	f7fd ff16 	bl	80055c8 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 800779c:	4b0b      	ldr	r3, [pc, #44]	; (80077cc <cppFlip1ms+0x8c>)
 800779e:	2200      	movs	r2, #0
 80077a0:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 80077a2:	4804      	ldr	r0, [pc, #16]	; (80077b4 <cppFlip1ms+0x74>)
 80077a4:	f7f9 fe0e 	bl	80013c4 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 80077a8:	bf00      	nop
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	200002f4 	.word	0x200002f4
 80077b0:	20000610 	.word	0x20000610
 80077b4:	20017d34 	.word	0x20017d34
 80077b8:	20017dd0 	.word	0x20017dd0
 80077bc:	20017d54 	.word	0x20017d54
 80077c0:	20017d90 	.word	0x20017d90
 80077c4:	200005ec 	.word	0x200005ec
 80077c8:	200005fc 	.word	0x200005fc
 80077cc:	2003d450 	.word	0x2003d450
 80077d0:	20025b1c 	.word	0x20025b1c

080077d4 <cppFlip100ns>:

void cppFlip100ns(void)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 80077d8:	4802      	ldr	r0, [pc, #8]	; (80077e4 <cppFlip100ns+0x10>)
 80077da:	f7fa fc8b 	bl	80020f4 <_ZN10LineSensor17storeSensorValuesEv>
	//line_trace.flip100ns();
}
 80077de:	bf00      	nop
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	200002f4 	.word	0x200002f4

080077e8 <cppFlip10ms>:

void cppFlip10ms(void)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 80077ec:	4b08      	ldr	r3, [pc, #32]	; (8007810 <cppFlip10ms+0x28>)
 80077ee:	881b      	ldrh	r3, [r3, #0]
 80077f0:	3301      	adds	r3, #1
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	4b06      	ldr	r3, [pc, #24]	; (8007810 <cppFlip10ms+0x28>)
 80077f6:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 80077f8:	4b05      	ldr	r3, [pc, #20]	; (8007810 <cppFlip10ms+0x28>)
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	2b06      	cmp	r3, #6
 80077fe:	d905      	bls.n	800780c <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007800:	4804      	ldr	r0, [pc, #16]	; (8007814 <cppFlip10ms+0x2c>)
 8007802:	f7fd ff01 	bl	8005608 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8007806:	4b02      	ldr	r3, [pc, #8]	; (8007810 <cppFlip10ms+0x28>)
 8007808:	2200      	movs	r2, #0
 800780a:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 800780c:	bf00      	nop
 800780e:	bd80      	pop	{r7, pc}
 8007810:	2003d452 	.word	0x2003d452
 8007814:	20025b1c 	.word	0x20025b1c

08007818 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800781a:	b083      	sub	sp, #12
 800781c:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;
	static int16_t selector_fast;

	static float adj_kp = line_trace.getKp();
 800781e:	4baf      	ldr	r3, [pc, #700]	; (8007adc <cppLoop+0x2c4>)
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	f3bf 8f5b 	dmb	ish
 8007826:	b2db      	uxtb	r3, r3
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	2b00      	cmp	r3, #0
 800782e:	bf0c      	ite	eq
 8007830:	2301      	moveq	r3, #1
 8007832:	2300      	movne	r3, #0
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d015      	beq.n	8007866 <cppLoop+0x4e>
 800783a:	48a8      	ldr	r0, [pc, #672]	; (8007adc <cppLoop+0x2c4>)
 800783c:	f00c fd91 	bl	8014362 <__cxa_guard_acquire>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	bf14      	ite	ne
 8007846:	2301      	movne	r3, #1
 8007848:	2300      	moveq	r3, #0
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00a      	beq.n	8007866 <cppLoop+0x4e>
 8007850:	48a3      	ldr	r0, [pc, #652]	; (8007ae0 <cppLoop+0x2c8>)
 8007852:	f7fc f90f 	bl	8003a74 <_ZN9LineTrace5getKpEv>
 8007856:	eef0 7a40 	vmov.f32	s15, s0
 800785a:	4ba2      	ldr	r3, [pc, #648]	; (8007ae4 <cppLoop+0x2cc>)
 800785c:	edc3 7a00 	vstr	s15, [r3]
 8007860:	489e      	ldr	r0, [pc, #632]	; (8007adc <cppLoop+0x2c4>)
 8007862:	f00c fd8a 	bl	801437a <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007866:	4ba0      	ldr	r3, [pc, #640]	; (8007ae8 <cppLoop+0x2d0>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	f3bf 8f5b 	dmb	ish
 800786e:	b2db      	uxtb	r3, r3
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	2b00      	cmp	r3, #0
 8007876:	bf0c      	ite	eq
 8007878:	2301      	moveq	r3, #1
 800787a:	2300      	movne	r3, #0
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b00      	cmp	r3, #0
 8007880:	d015      	beq.n	80078ae <cppLoop+0x96>
 8007882:	4899      	ldr	r0, [pc, #612]	; (8007ae8 <cppLoop+0x2d0>)
 8007884:	f00c fd6d 	bl	8014362 <__cxa_guard_acquire>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	bf14      	ite	ne
 800788e:	2301      	movne	r3, #1
 8007890:	2300      	moveq	r3, #0
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00a      	beq.n	80078ae <cppLoop+0x96>
 8007898:	4891      	ldr	r0, [pc, #580]	; (8007ae0 <cppLoop+0x2c8>)
 800789a:	f7fc f8fa 	bl	8003a92 <_ZN9LineTrace5getKiEv>
 800789e:	eef0 7a40 	vmov.f32	s15, s0
 80078a2:	4b92      	ldr	r3, [pc, #584]	; (8007aec <cppLoop+0x2d4>)
 80078a4:	edc3 7a00 	vstr	s15, [r3]
 80078a8:	488f      	ldr	r0, [pc, #572]	; (8007ae8 <cppLoop+0x2d0>)
 80078aa:	f00c fd66 	bl	801437a <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 80078ae:	4b90      	ldr	r3, [pc, #576]	; (8007af0 <cppLoop+0x2d8>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	f3bf 8f5b 	dmb	ish
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	2b00      	cmp	r3, #0
 80078be:	bf0c      	ite	eq
 80078c0:	2301      	moveq	r3, #1
 80078c2:	2300      	movne	r3, #0
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d015      	beq.n	80078f6 <cppLoop+0xde>
 80078ca:	4889      	ldr	r0, [pc, #548]	; (8007af0 <cppLoop+0x2d8>)
 80078cc:	f00c fd49 	bl	8014362 <__cxa_guard_acquire>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	bf14      	ite	ne
 80078d6:	2301      	movne	r3, #1
 80078d8:	2300      	moveq	r3, #0
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00a      	beq.n	80078f6 <cppLoop+0xde>
 80078e0:	487f      	ldr	r0, [pc, #508]	; (8007ae0 <cppLoop+0x2c8>)
 80078e2:	f7fc f8e5 	bl	8003ab0 <_ZN9LineTrace5getKdEv>
 80078e6:	eef0 7a40 	vmov.f32	s15, s0
 80078ea:	4b82      	ldr	r3, [pc, #520]	; (8007af4 <cppLoop+0x2dc>)
 80078ec:	edc3 7a00 	vstr	s15, [r3]
 80078f0:	487f      	ldr	r0, [pc, #508]	; (8007af0 <cppLoop+0x2d8>)
 80078f2:	f00c fd42 	bl	801437a <__cxa_guard_release>

	static float adj_kp_fast = line_trace.getKpFast();
 80078f6:	4b80      	ldr	r3, [pc, #512]	; (8007af8 <cppLoop+0x2e0>)
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	f3bf 8f5b 	dmb	ish
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b00      	cmp	r3, #0
 8007906:	bf0c      	ite	eq
 8007908:	2301      	moveq	r3, #1
 800790a:	2300      	movne	r3, #0
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d015      	beq.n	800793e <cppLoop+0x126>
 8007912:	4879      	ldr	r0, [pc, #484]	; (8007af8 <cppLoop+0x2e0>)
 8007914:	f00c fd25 	bl	8014362 <__cxa_guard_acquire>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	bf14      	ite	ne
 800791e:	2301      	movne	r3, #1
 8007920:	2300      	moveq	r3, #0
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00a      	beq.n	800793e <cppLoop+0x126>
 8007928:	486d      	ldr	r0, [pc, #436]	; (8007ae0 <cppLoop+0x2c8>)
 800792a:	f7fc f8d0 	bl	8003ace <_ZN9LineTrace9getKpFastEv>
 800792e:	eef0 7a40 	vmov.f32	s15, s0
 8007932:	4b72      	ldr	r3, [pc, #456]	; (8007afc <cppLoop+0x2e4>)
 8007934:	edc3 7a00 	vstr	s15, [r3]
 8007938:	486f      	ldr	r0, [pc, #444]	; (8007af8 <cppLoop+0x2e0>)
 800793a:	f00c fd1e 	bl	801437a <__cxa_guard_release>
	static float adj_ki_fast = line_trace.getKiFast();
 800793e:	4b70      	ldr	r3, [pc, #448]	; (8007b00 <cppLoop+0x2e8>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	f3bf 8f5b 	dmb	ish
 8007946:	b2db      	uxtb	r3, r3
 8007948:	f003 0301 	and.w	r3, r3, #1
 800794c:	2b00      	cmp	r3, #0
 800794e:	bf0c      	ite	eq
 8007950:	2301      	moveq	r3, #1
 8007952:	2300      	movne	r3, #0
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d015      	beq.n	8007986 <cppLoop+0x16e>
 800795a:	4869      	ldr	r0, [pc, #420]	; (8007b00 <cppLoop+0x2e8>)
 800795c:	f00c fd01 	bl	8014362 <__cxa_guard_acquire>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	bf14      	ite	ne
 8007966:	2301      	movne	r3, #1
 8007968:	2300      	moveq	r3, #0
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00a      	beq.n	8007986 <cppLoop+0x16e>
 8007970:	485b      	ldr	r0, [pc, #364]	; (8007ae0 <cppLoop+0x2c8>)
 8007972:	f7fc f8bb 	bl	8003aec <_ZN9LineTrace9getKiFastEv>
 8007976:	eef0 7a40 	vmov.f32	s15, s0
 800797a:	4b62      	ldr	r3, [pc, #392]	; (8007b04 <cppLoop+0x2ec>)
 800797c:	edc3 7a00 	vstr	s15, [r3]
 8007980:	485f      	ldr	r0, [pc, #380]	; (8007b00 <cppLoop+0x2e8>)
 8007982:	f00c fcfa 	bl	801437a <__cxa_guard_release>
	static float adj_kd_fast = line_trace.getKdFast();
 8007986:	4b60      	ldr	r3, [pc, #384]	; (8007b08 <cppLoop+0x2f0>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	f3bf 8f5b 	dmb	ish
 800798e:	b2db      	uxtb	r3, r3
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b00      	cmp	r3, #0
 8007996:	bf0c      	ite	eq
 8007998:	2301      	moveq	r3, #1
 800799a:	2300      	movne	r3, #0
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d015      	beq.n	80079ce <cppLoop+0x1b6>
 80079a2:	4859      	ldr	r0, [pc, #356]	; (8007b08 <cppLoop+0x2f0>)
 80079a4:	f00c fcdd 	bl	8014362 <__cxa_guard_acquire>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	bf14      	ite	ne
 80079ae:	2301      	movne	r3, #1
 80079b0:	2300      	moveq	r3, #0
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00a      	beq.n	80079ce <cppLoop+0x1b6>
 80079b8:	4849      	ldr	r0, [pc, #292]	; (8007ae0 <cppLoop+0x2c8>)
 80079ba:	f7fc f8a6 	bl	8003b0a <_ZN9LineTrace9getKdFastEv>
 80079be:	eef0 7a40 	vmov.f32	s15, s0
 80079c2:	4b52      	ldr	r3, [pc, #328]	; (8007b0c <cppLoop+0x2f4>)
 80079c4:	edc3 7a00 	vstr	s15, [r3]
 80079c8:	484f      	ldr	r0, [pc, #316]	; (8007b08 <cppLoop+0x2f0>)
 80079ca:	f00c fcd6 	bl	801437a <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 80079ce:	4b50      	ldr	r3, [pc, #320]	; (8007b10 <cppLoop+0x2f8>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	f3bf 8f5b 	dmb	ish
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b00      	cmp	r3, #0
 80079de:	bf0c      	ite	eq
 80079e0:	2301      	moveq	r3, #1
 80079e2:	2300      	movne	r3, #0
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d015      	beq.n	8007a16 <cppLoop+0x1fe>
 80079ea:	4849      	ldr	r0, [pc, #292]	; (8007b10 <cppLoop+0x2f8>)
 80079ec:	f00c fcb9 	bl	8014362 <__cxa_guard_acquire>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	bf14      	ite	ne
 80079f6:	2301      	movne	r3, #1
 80079f8:	2300      	moveq	r3, #0
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00a      	beq.n	8007a16 <cppLoop+0x1fe>
 8007a00:	4837      	ldr	r0, [pc, #220]	; (8007ae0 <cppLoop+0x2c8>)
 8007a02:	f7fc f8e1 	bl	8003bc8 <_ZN9LineTrace17getTargetVelocityEv>
 8007a06:	eef0 7a40 	vmov.f32	s15, s0
 8007a0a:	4b42      	ldr	r3, [pc, #264]	; (8007b14 <cppLoop+0x2fc>)
 8007a0c:	edc3 7a00 	vstr	s15, [r3]
 8007a10:	483f      	ldr	r0, [pc, #252]	; (8007b10 <cppLoop+0x2f8>)
 8007a12:	f00c fcb2 	bl	801437a <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007a16:	4b40      	ldr	r3, [pc, #256]	; (8007b18 <cppLoop+0x300>)
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	f3bf 8f5b 	dmb	ish
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	bf0c      	ite	eq
 8007a28:	2301      	moveq	r3, #1
 8007a2a:	2300      	movne	r3, #0
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d015      	beq.n	8007a5e <cppLoop+0x246>
 8007a32:	4839      	ldr	r0, [pc, #228]	; (8007b18 <cppLoop+0x300>)
 8007a34:	f00c fc95 	bl	8014362 <__cxa_guard_acquire>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	bf14      	ite	ne
 8007a3e:	2301      	movne	r3, #1
 8007a40:	2300      	moveq	r3, #0
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00a      	beq.n	8007a5e <cppLoop+0x246>
 8007a48:	4825      	ldr	r0, [pc, #148]	; (8007ae0 <cppLoop+0x2c8>)
 8007a4a:	f7fc f8cd 	bl	8003be8 <_ZN9LineTrace14getMaxVelocityEv>
 8007a4e:	eef0 7a40 	vmov.f32	s15, s0
 8007a52:	4b32      	ldr	r3, [pc, #200]	; (8007b1c <cppLoop+0x304>)
 8007a54:	edc3 7a00 	vstr	s15, [r3]
 8007a58:	482f      	ldr	r0, [pc, #188]	; (8007b18 <cppLoop+0x300>)
 8007a5a:	f00c fc8e 	bl	801437a <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007a5e:	4b30      	ldr	r3, [pc, #192]	; (8007b20 <cppLoop+0x308>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	f3bf 8f5b 	dmb	ish
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	bf0c      	ite	eq
 8007a70:	2301      	moveq	r3, #1
 8007a72:	2300      	movne	r3, #0
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d015      	beq.n	8007aa6 <cppLoop+0x28e>
 8007a7a:	4829      	ldr	r0, [pc, #164]	; (8007b20 <cppLoop+0x308>)
 8007a7c:	f00c fc71 	bl	8014362 <__cxa_guard_acquire>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	bf14      	ite	ne
 8007a86:	2301      	movne	r3, #1
 8007a88:	2300      	moveq	r3, #0
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00a      	beq.n	8007aa6 <cppLoop+0x28e>
 8007a90:	4813      	ldr	r0, [pc, #76]	; (8007ae0 <cppLoop+0x2c8>)
 8007a92:	f7fc f8b9 	bl	8003c08 <_ZN9LineTrace15getMaxVelocity2Ev>
 8007a96:	eef0 7a40 	vmov.f32	s15, s0
 8007a9a:	4b22      	ldr	r3, [pc, #136]	; (8007b24 <cppLoop+0x30c>)
 8007a9c:	edc3 7a00 	vstr	s15, [r3]
 8007aa0:	481f      	ldr	r0, [pc, #124]	; (8007b20 <cppLoop+0x308>)
 8007aa2:	f00c fc6a 	bl	801437a <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007aa6:	4b20      	ldr	r3, [pc, #128]	; (8007b28 <cppLoop+0x310>)
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	f3bf 8f5b 	dmb	ish
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	f003 0301 	and.w	r3, r3, #1
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	bf0c      	ite	eq
 8007ab8:	2301      	moveq	r3, #1
 8007aba:	2300      	movne	r3, #0
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d03f      	beq.n	8007b42 <cppLoop+0x32a>
 8007ac2:	4819      	ldr	r0, [pc, #100]	; (8007b28 <cppLoop+0x310>)
 8007ac4:	f00c fc4d 	bl	8014362 <__cxa_guard_acquire>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	bf14      	ite	ne
 8007ace:	2301      	movne	r3, #1
 8007ad0:	2300      	moveq	r3, #0
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d034      	beq.n	8007b42 <cppLoop+0x32a>
 8007ad8:	e028      	b.n	8007b2c <cppLoop+0x314>
 8007ada:	bf00      	nop
 8007adc:	2003d464 	.word	0x2003d464
 8007ae0:	20017dd0 	.word	0x20017dd0
 8007ae4:	2003d460 	.word	0x2003d460
 8007ae8:	2003d46c 	.word	0x2003d46c
 8007aec:	2003d468 	.word	0x2003d468
 8007af0:	2003d474 	.word	0x2003d474
 8007af4:	2003d470 	.word	0x2003d470
 8007af8:	2003d47c 	.word	0x2003d47c
 8007afc:	2003d478 	.word	0x2003d478
 8007b00:	2003d484 	.word	0x2003d484
 8007b04:	2003d480 	.word	0x2003d480
 8007b08:	2003d48c 	.word	0x2003d48c
 8007b0c:	2003d488 	.word	0x2003d488
 8007b10:	2003d494 	.word	0x2003d494
 8007b14:	2003d490 	.word	0x2003d490
 8007b18:	2003d49c 	.word	0x2003d49c
 8007b1c:	2003d498 	.word	0x2003d498
 8007b20:	2003d4a4 	.word	0x2003d4a4
 8007b24:	2003d4a0 	.word	0x2003d4a0
 8007b28:	2003d4ac 	.word	0x2003d4ac
 8007b2c:	48af      	ldr	r0, [pc, #700]	; (8007dec <cppLoop+0x5d4>)
 8007b2e:	f7fc f87b 	bl	8003c28 <_ZN9LineTrace14getMinVelocityEv>
 8007b32:	eef0 7a40 	vmov.f32	s15, s0
 8007b36:	4bae      	ldr	r3, [pc, #696]	; (8007df0 <cppLoop+0x5d8>)
 8007b38:	edc3 7a00 	vstr	s15, [r3]
 8007b3c:	48ad      	ldr	r0, [pc, #692]	; (8007df4 <cppLoop+0x5dc>)
 8007b3e:	f00c fc1c 	bl	801437a <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007b42:	4bad      	ldr	r3, [pc, #692]	; (8007df8 <cppLoop+0x5e0>)
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	f3bf 8f5b 	dmb	ish
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	bf0c      	ite	eq
 8007b54:	2301      	moveq	r3, #1
 8007b56:	2300      	movne	r3, #0
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d015      	beq.n	8007b8a <cppLoop+0x372>
 8007b5e:	48a6      	ldr	r0, [pc, #664]	; (8007df8 <cppLoop+0x5e0>)
 8007b60:	f00c fbff 	bl	8014362 <__cxa_guard_acquire>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	bf14      	ite	ne
 8007b6a:	2301      	movne	r3, #1
 8007b6c:	2300      	moveq	r3, #0
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00a      	beq.n	8007b8a <cppLoop+0x372>
 8007b74:	489d      	ldr	r0, [pc, #628]	; (8007dec <cppLoop+0x5d4>)
 8007b76:	f7fc f867 	bl	8003c48 <_ZN9LineTrace15getMinVelocity2Ev>
 8007b7a:	eef0 7a40 	vmov.f32	s15, s0
 8007b7e:	4b9f      	ldr	r3, [pc, #636]	; (8007dfc <cppLoop+0x5e4>)
 8007b80:	edc3 7a00 	vstr	s15, [r3]
 8007b84:	489c      	ldr	r0, [pc, #624]	; (8007df8 <cppLoop+0x5e0>)
 8007b86:	f00c fbf8 	bl	801437a <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007b8a:	4b9d      	ldr	r3, [pc, #628]	; (8007e00 <cppLoop+0x5e8>)
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	f3bf 8f5b 	dmb	ish
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	f003 0301 	and.w	r3, r3, #1
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	bf0c      	ite	eq
 8007b9c:	2301      	moveq	r3, #1
 8007b9e:	2300      	movne	r3, #0
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d015      	beq.n	8007bd2 <cppLoop+0x3ba>
 8007ba6:	4896      	ldr	r0, [pc, #600]	; (8007e00 <cppLoop+0x5e8>)
 8007ba8:	f00c fbdb 	bl	8014362 <__cxa_guard_acquire>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	bf14      	ite	ne
 8007bb2:	2301      	movne	r3, #1
 8007bb4:	2300      	moveq	r3, #0
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00a      	beq.n	8007bd2 <cppLoop+0x3ba>
 8007bbc:	488b      	ldr	r0, [pc, #556]	; (8007dec <cppLoop+0x5d4>)
 8007bbe:	f7fc f887 	bl	8003cd0 <_ZN9LineTrace9getMaxAccEv>
 8007bc2:	eef0 7a40 	vmov.f32	s15, s0
 8007bc6:	4b8f      	ldr	r3, [pc, #572]	; (8007e04 <cppLoop+0x5ec>)
 8007bc8:	edc3 7a00 	vstr	s15, [r3]
 8007bcc:	488c      	ldr	r0, [pc, #560]	; (8007e00 <cppLoop+0x5e8>)
 8007bce:	f00c fbd4 	bl	801437a <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007bd2:	4b8d      	ldr	r3, [pc, #564]	; (8007e08 <cppLoop+0x5f0>)
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	f3bf 8f5b 	dmb	ish
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	bf0c      	ite	eq
 8007be4:	2301      	moveq	r3, #1
 8007be6:	2300      	movne	r3, #0
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d015      	beq.n	8007c1a <cppLoop+0x402>
 8007bee:	4886      	ldr	r0, [pc, #536]	; (8007e08 <cppLoop+0x5f0>)
 8007bf0:	f00c fbb7 	bl	8014362 <__cxa_guard_acquire>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	bf14      	ite	ne
 8007bfa:	2301      	movne	r3, #1
 8007bfc:	2300      	moveq	r3, #0
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00a      	beq.n	8007c1a <cppLoop+0x402>
 8007c04:	4879      	ldr	r0, [pc, #484]	; (8007dec <cppLoop+0x5d4>)
 8007c06:	f7fc f899 	bl	8003d3c <_ZN9LineTrace9getMaxDecEv>
 8007c0a:	eef0 7a40 	vmov.f32	s15, s0
 8007c0e:	4b7f      	ldr	r3, [pc, #508]	; (8007e0c <cppLoop+0x5f4>)
 8007c10:	edc3 7a00 	vstr	s15, [r3]
 8007c14:	487c      	ldr	r0, [pc, #496]	; (8007e08 <cppLoop+0x5f0>)
 8007c16:	f00c fbb0 	bl	801437a <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007c1a:	4b7d      	ldr	r3, [pc, #500]	; (8007e10 <cppLoop+0x5f8>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	f3bf 8f5b 	dmb	ish
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	f003 0301 	and.w	r3, r3, #1
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	bf0c      	ite	eq
 8007c2c:	2301      	moveq	r3, #1
 8007c2e:	2300      	movne	r3, #0
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d015      	beq.n	8007c62 <cppLoop+0x44a>
 8007c36:	4876      	ldr	r0, [pc, #472]	; (8007e10 <cppLoop+0x5f8>)
 8007c38:	f00c fb93 	bl	8014362 <__cxa_guard_acquire>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	bf14      	ite	ne
 8007c42:	2301      	movne	r3, #1
 8007c44:	2300      	moveq	r3, #0
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00a      	beq.n	8007c62 <cppLoop+0x44a>
 8007c4c:	4867      	ldr	r0, [pc, #412]	; (8007dec <cppLoop+0x5d4>)
 8007c4e:	f7fc f863 	bl	8003d18 <_ZN9LineTrace10getMaxAcc2Ev>
 8007c52:	eef0 7a40 	vmov.f32	s15, s0
 8007c56:	4b6f      	ldr	r3, [pc, #444]	; (8007e14 <cppLoop+0x5fc>)
 8007c58:	edc3 7a00 	vstr	s15, [r3]
 8007c5c:	486c      	ldr	r0, [pc, #432]	; (8007e10 <cppLoop+0x5f8>)
 8007c5e:	f00c fb8c 	bl	801437a <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007c62:	4b6d      	ldr	r3, [pc, #436]	; (8007e18 <cppLoop+0x600>)
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	f3bf 8f5b 	dmb	ish
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	f003 0301 	and.w	r3, r3, #1
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	bf0c      	ite	eq
 8007c74:	2301      	moveq	r3, #1
 8007c76:	2300      	movne	r3, #0
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d015      	beq.n	8007caa <cppLoop+0x492>
 8007c7e:	4866      	ldr	r0, [pc, #408]	; (8007e18 <cppLoop+0x600>)
 8007c80:	f00c fb6f 	bl	8014362 <__cxa_guard_acquire>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	bf14      	ite	ne
 8007c8a:	2301      	movne	r3, #1
 8007c8c:	2300      	moveq	r3, #0
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00a      	beq.n	8007caa <cppLoop+0x492>
 8007c94:	4855      	ldr	r0, [pc, #340]	; (8007dec <cppLoop+0x5d4>)
 8007c96:	f7fc f82d 	bl	8003cf4 <_ZN9LineTrace10getMaxDec2Ev>
 8007c9a:	eef0 7a40 	vmov.f32	s15, s0
 8007c9e:	4b5f      	ldr	r3, [pc, #380]	; (8007e1c <cppLoop+0x604>)
 8007ca0:	edc3 7a00 	vstr	s15, [r3]
 8007ca4:	485c      	ldr	r0, [pc, #368]	; (8007e18 <cppLoop+0x600>)
 8007ca6:	f00c fb68 	bl	801437a <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007caa:	485d      	ldr	r0, [pc, #372]	; (8007e20 <cppLoop+0x608>)
 8007cac:	f7fd face 	bl	800524c <_ZN12RotarySwitch8getValueEv>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b0f      	cmp	r3, #15
 8007cb4:	f201 84e9 	bhi.w	800968a <cppLoop+0x1e72>
 8007cb8:	a201      	add	r2, pc, #4	; (adr r2, 8007cc0 <cppLoop+0x4a8>)
 8007cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cbe:	bf00      	nop
 8007cc0:	08007d01 	.word	0x08007d01
 8007cc4:	080080ed 	.word	0x080080ed
 8007cc8:	08008181 	.word	0x08008181
 8007ccc:	080082d3 	.word	0x080082d3
 8007cd0:	080083d9 	.word	0x080083d9
 8007cd4:	0800865d 	.word	0x0800865d
 8007cd8:	08008729 	.word	0x08008729
 8007cdc:	080089a9 	.word	0x080089a9
 8007ce0:	08008c3d 	.word	0x08008c3d
 8007ce4:	08008ebd 	.word	0x08008ebd
 8007ce8:	08009247 	.word	0x08009247
 8007cec:	080092e7 	.word	0x080092e7
 8007cf0:	08009383 	.word	0x08009383
 8007cf4:	0800941d 	.word	0x0800941d
 8007cf8:	0800951d 	.word	0x0800951d
 8007cfc:	080095d5 	.word	0x080095d5
	case 0:
		led.fullColor('W');
 8007d00:	2157      	movs	r1, #87	; 0x57
 8007d02:	4848      	ldr	r0, [pc, #288]	; (8007e24 <cppLoop+0x60c>)
 8007d04:	f7fa f88a 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 8007d08:	f7f9 f9ca 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	2000      	movs	r0, #0
 8007d10:	f7f9 f9d6 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8007d14:	4835      	ldr	r0, [pc, #212]	; (8007dec <cppLoop+0x5d4>)
 8007d16:	f7fb fead 	bl	8003a74 <_ZN9LineTrace5getKpEv>
 8007d1a:	eeb0 7a40 	vmov.f32	s14, s0
 8007d1e:	eddf 7a42 	vldr	s15, [pc, #264]	; 8007e28 <cppLoop+0x610>
 8007d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d26:	ee17 0a90 	vmov	r0, s15
 8007d2a:	f7f8 fc25 	bl	8000578 <__aeabi_f2d>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	460c      	mov	r4, r1
 8007d32:	461a      	mov	r2, r3
 8007d34:	4623      	mov	r3, r4
 8007d36:	483d      	ldr	r0, [pc, #244]	; (8007e2c <cppLoop+0x614>)
 8007d38:	f7f9 f9ed 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 8007d3c:	2101      	movs	r1, #1
 8007d3e:	2000      	movs	r0, #0
 8007d40:	f7f9 f9be 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8007d44:	4829      	ldr	r0, [pc, #164]	; (8007dec <cppLoop+0x5d4>)
 8007d46:	f7fb fea4 	bl	8003a92 <_ZN9LineTrace5getKiEv>
 8007d4a:	eeb0 7a40 	vmov.f32	s14, s0
 8007d4e:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007e30 <cppLoop+0x618>
 8007d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d56:	ee17 0a90 	vmov	r0, s15
 8007d5a:	f7f8 fc0d 	bl	8000578 <__aeabi_f2d>
 8007d5e:	4605      	mov	r5, r0
 8007d60:	460e      	mov	r6, r1
 8007d62:	4822      	ldr	r0, [pc, #136]	; (8007dec <cppLoop+0x5d4>)
 8007d64:	f7fb fea4 	bl	8003ab0 <_ZN9LineTrace5getKdEv>
 8007d68:	eeb0 7a40 	vmov.f32	s14, s0
 8007d6c:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007e34 <cppLoop+0x61c>
 8007d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d74:	ee17 0a90 	vmov	r0, s15
 8007d78:	f7f8 fbfe 	bl	8000578 <__aeabi_f2d>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	460c      	mov	r4, r1
 8007d80:	e9cd 3400 	strd	r3, r4, [sp]
 8007d84:	462a      	mov	r2, r5
 8007d86:	4633      	mov	r3, r6
 8007d88:	482b      	ldr	r0, [pc, #172]	; (8007e38 <cppLoop+0x620>)
 8007d8a:	f7f9 f9c4 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007d8e:	482b      	ldr	r0, [pc, #172]	; (8007e3c <cppLoop+0x624>)
 8007d90:	f7f9 ffe0 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b08      	cmp	r3, #8
 8007d98:	bf0c      	ite	eq
 8007d9a:	2301      	moveq	r3, #1
 8007d9c:	2300      	movne	r3, #0
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d04f      	beq.n	8007e44 <cppLoop+0x62c>
			led.LR(-1, 1);
 8007da4:	2201      	movs	r2, #1
 8007da6:	f04f 31ff 	mov.w	r1, #4294967295
 8007daa:	481e      	ldr	r0, [pc, #120]	; (8007e24 <cppLoop+0x60c>)
 8007dac:	f7fa f8f2 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007db0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007db4:	f001 fdac 	bl	8009910 <HAL_Delay>

			selector++;
 8007db8:	4b21      	ldr	r3, [pc, #132]	; (8007e40 <cppLoop+0x628>)
 8007dba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	b21a      	sxth	r2, r3
 8007dc6:	4b1e      	ldr	r3, [pc, #120]	; (8007e40 <cppLoop+0x628>)
 8007dc8:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007dca:	4b1d      	ldr	r3, [pc, #116]	; (8007e40 <cppLoop+0x628>)
 8007dcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	dd02      	ble.n	8007dda <cppLoop+0x5c2>
 8007dd4:	4b1a      	ldr	r3, [pc, #104]	; (8007e40 <cppLoop+0x628>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8007de0:	4810      	ldr	r0, [pc, #64]	; (8007e24 <cppLoop+0x60c>)
 8007de2:	f7fa f8d7 	bl	8001f94 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8007de6:	f001 bc52 	b.w	800968e <cppLoop+0x1e76>
 8007dea:	bf00      	nop
 8007dec:	20017dd0 	.word	0x20017dd0
 8007df0:	2003d4a8 	.word	0x2003d4a8
 8007df4:	2003d4ac 	.word	0x2003d4ac
 8007df8:	2003d4b4 	.word	0x2003d4b4
 8007dfc:	2003d4b0 	.word	0x2003d4b0
 8007e00:	2003d4bc 	.word	0x2003d4bc
 8007e04:	2003d4b8 	.word	0x2003d4b8
 8007e08:	2003d4c4 	.word	0x2003d4c4
 8007e0c:	2003d4c0 	.word	0x2003d4c0
 8007e10:	2003d4cc 	.word	0x2003d4cc
 8007e14:	2003d4c8 	.word	0x2003d4c8
 8007e18:	2003d4d4 	.word	0x2003d4d4
 8007e1c:	2003d4d0 	.word	0x2003d4d0
 8007e20:	200005f8 	.word	0x200005f8
 8007e24:	20000600 	.word	0x20000600
 8007e28:	447a0000 	.word	0x447a0000
 8007e2c:	0801a0b4 	.word	0x0801a0b4
 8007e30:	42c80000 	.word	0x42c80000
 8007e34:	461c4000 	.word	0x461c4000
 8007e38:	0801a0c0 	.word	0x0801a0c0
 8007e3c:	200005f4 	.word	0x200005f4
 8007e40:	2003d454 	.word	0x2003d454
		else if(joy_stick.getValue() == JOY_R){
 8007e44:	489e      	ldr	r0, [pc, #632]	; (80080c0 <cppLoop+0x8a8>)
 8007e46:	f7f9 ff85 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b10      	cmp	r3, #16
 8007e4e:	bf0c      	ite	eq
 8007e50:	2301      	moveq	r3, #1
 8007e52:	2300      	movne	r3, #0
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d059      	beq.n	8007f0e <cppLoop+0x6f6>
			led.LR(-1, 1);
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8007e60:	4898      	ldr	r0, [pc, #608]	; (80080c4 <cppLoop+0x8ac>)
 8007e62:	f7fa f897 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007e66:	2064      	movs	r0, #100	; 0x64
 8007e68:	f001 fd52 	bl	8009910 <HAL_Delay>
			if(selector == 0){
 8007e6c:	4b96      	ldr	r3, [pc, #600]	; (80080c8 <cppLoop+0x8b0>)
 8007e6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d113      	bne.n	8007e9e <cppLoop+0x686>
				adj_kp = adj_kp + 0.00001;
 8007e76:	4b95      	ldr	r3, [pc, #596]	; (80080cc <cppLoop+0x8b4>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7f8 fb7c 	bl	8000578 <__aeabi_f2d>
 8007e80:	a389      	add	r3, pc, #548	; (adr r3, 80080a8 <cppLoop+0x890>)
 8007e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e86:	f7f8 fa19 	bl	80002bc <__adddf3>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	460c      	mov	r4, r1
 8007e8e:	4618      	mov	r0, r3
 8007e90:	4621      	mov	r1, r4
 8007e92:	f7f8 fec1 	bl	8000c18 <__aeabi_d2f>
 8007e96:	4602      	mov	r2, r0
 8007e98:	4b8c      	ldr	r3, [pc, #560]	; (80080cc <cppLoop+0x8b4>)
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	e02b      	b.n	8007ef6 <cppLoop+0x6de>
			else if(selector == 1){
 8007e9e:	4b8a      	ldr	r3, [pc, #552]	; (80080c8 <cppLoop+0x8b0>)
 8007ea0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d113      	bne.n	8007ed0 <cppLoop+0x6b8>
				adj_ki = adj_ki + 0.0001;
 8007ea8:	4b89      	ldr	r3, [pc, #548]	; (80080d0 <cppLoop+0x8b8>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7f8 fb63 	bl	8000578 <__aeabi_f2d>
 8007eb2:	a37f      	add	r3, pc, #508	; (adr r3, 80080b0 <cppLoop+0x898>)
 8007eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb8:	f7f8 fa00 	bl	80002bc <__adddf3>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	460c      	mov	r4, r1
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	4621      	mov	r1, r4
 8007ec4:	f7f8 fea8 	bl	8000c18 <__aeabi_d2f>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	4b81      	ldr	r3, [pc, #516]	; (80080d0 <cppLoop+0x8b8>)
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	e012      	b.n	8007ef6 <cppLoop+0x6de>
				adj_kd = adj_kd + 0.000001;
 8007ed0:	4b80      	ldr	r3, [pc, #512]	; (80080d4 <cppLoop+0x8bc>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7f8 fb4f 	bl	8000578 <__aeabi_f2d>
 8007eda:	a377      	add	r3, pc, #476	; (adr r3, 80080b8 <cppLoop+0x8a0>)
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	f7f8 f9ec 	bl	80002bc <__adddf3>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	4618      	mov	r0, r3
 8007eea:	4621      	mov	r1, r4
 8007eec:	f7f8 fe94 	bl	8000c18 <__aeabi_d2f>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	4b78      	ldr	r3, [pc, #480]	; (80080d4 <cppLoop+0x8bc>)
 8007ef4:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007ef6:	2152      	movs	r1, #82	; 0x52
 8007ef8:	4872      	ldr	r0, [pc, #456]	; (80080c4 <cppLoop+0x8ac>)
 8007efa:	f7f9 ff8f 	bl	8001e1c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007efe:	2200      	movs	r2, #0
 8007f00:	f04f 31ff 	mov.w	r1, #4294967295
 8007f04:	486f      	ldr	r0, [pc, #444]	; (80080c4 <cppLoop+0x8ac>)
 8007f06:	f7fa f845 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8007f0a:	f001 bbc0 	b.w	800968e <cppLoop+0x1e76>
		else if(joy_stick.getValue() == JOY_L){
 8007f0e:	486c      	ldr	r0, [pc, #432]	; (80080c0 <cppLoop+0x8a8>)
 8007f10:	f7f9 ff20 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	bf0c      	ite	eq
 8007f1a:	2301      	moveq	r3, #1
 8007f1c:	2300      	movne	r3, #0
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d059      	beq.n	8007fd8 <cppLoop+0x7c0>
			led.LR(-1, 1);
 8007f24:	2201      	movs	r2, #1
 8007f26:	f04f 31ff 	mov.w	r1, #4294967295
 8007f2a:	4866      	ldr	r0, [pc, #408]	; (80080c4 <cppLoop+0x8ac>)
 8007f2c:	f7fa f832 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007f30:	2064      	movs	r0, #100	; 0x64
 8007f32:	f001 fced 	bl	8009910 <HAL_Delay>
			if(selector == 0){
 8007f36:	4b64      	ldr	r3, [pc, #400]	; (80080c8 <cppLoop+0x8b0>)
 8007f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d113      	bne.n	8007f68 <cppLoop+0x750>
				adj_kp = adj_kp - 0.00001;
 8007f40:	4b62      	ldr	r3, [pc, #392]	; (80080cc <cppLoop+0x8b4>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7f8 fb17 	bl	8000578 <__aeabi_f2d>
 8007f4a:	a357      	add	r3, pc, #348	; (adr r3, 80080a8 <cppLoop+0x890>)
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	f7f8 f9b2 	bl	80002b8 <__aeabi_dsub>
 8007f54:	4603      	mov	r3, r0
 8007f56:	460c      	mov	r4, r1
 8007f58:	4618      	mov	r0, r3
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	f7f8 fe5c 	bl	8000c18 <__aeabi_d2f>
 8007f60:	4602      	mov	r2, r0
 8007f62:	4b5a      	ldr	r3, [pc, #360]	; (80080cc <cppLoop+0x8b4>)
 8007f64:	601a      	str	r2, [r3, #0]
 8007f66:	e02b      	b.n	8007fc0 <cppLoop+0x7a8>
			else if(selector == 1){
 8007f68:	4b57      	ldr	r3, [pc, #348]	; (80080c8 <cppLoop+0x8b0>)
 8007f6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d113      	bne.n	8007f9a <cppLoop+0x782>
				adj_ki = adj_ki - 0.0001;
 8007f72:	4b57      	ldr	r3, [pc, #348]	; (80080d0 <cppLoop+0x8b8>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7f8 fafe 	bl	8000578 <__aeabi_f2d>
 8007f7c:	a34c      	add	r3, pc, #304	; (adr r3, 80080b0 <cppLoop+0x898>)
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	f7f8 f999 	bl	80002b8 <__aeabi_dsub>
 8007f86:	4603      	mov	r3, r0
 8007f88:	460c      	mov	r4, r1
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	f7f8 fe43 	bl	8000c18 <__aeabi_d2f>
 8007f92:	4602      	mov	r2, r0
 8007f94:	4b4e      	ldr	r3, [pc, #312]	; (80080d0 <cppLoop+0x8b8>)
 8007f96:	601a      	str	r2, [r3, #0]
 8007f98:	e012      	b.n	8007fc0 <cppLoop+0x7a8>
				adj_kd = adj_kd - 0.000001;
 8007f9a:	4b4e      	ldr	r3, [pc, #312]	; (80080d4 <cppLoop+0x8bc>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7f8 faea 	bl	8000578 <__aeabi_f2d>
 8007fa4:	a344      	add	r3, pc, #272	; (adr r3, 80080b8 <cppLoop+0x8a0>)
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	f7f8 f985 	bl	80002b8 <__aeabi_dsub>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	460c      	mov	r4, r1
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	f7f8 fe2f 	bl	8000c18 <__aeabi_d2f>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	4b45      	ldr	r3, [pc, #276]	; (80080d4 <cppLoop+0x8bc>)
 8007fbe:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007fc0:	2152      	movs	r1, #82	; 0x52
 8007fc2:	4840      	ldr	r0, [pc, #256]	; (80080c4 <cppLoop+0x8ac>)
 8007fc4:	f7f9 ff2a 	bl	8001e1c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f04f 31ff 	mov.w	r1, #4294967295
 8007fce:	483d      	ldr	r0, [pc, #244]	; (80080c4 <cppLoop+0x8ac>)
 8007fd0:	f7f9 ffe0 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8007fd4:	f001 bb5b 	b.w	800968e <cppLoop+0x1e76>
		else if(joy_stick.getValue() == JOY_D){
 8007fd8:	4839      	ldr	r0, [pc, #228]	; (80080c0 <cppLoop+0x8a8>)
 8007fda:	f7f9 febb 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b04      	cmp	r3, #4
 8007fe2:	bf0c      	ite	eq
 8007fe4:	2301      	moveq	r3, #1
 8007fe6:	2300      	movne	r3, #0
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d011      	beq.n	8008012 <cppLoop+0x7fa>
			led.LR(-1, 1);
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8007ff4:	4833      	ldr	r0, [pc, #204]	; (80080c4 <cppLoop+0x8ac>)
 8007ff6:	f7f9 ffcd 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007ffa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007ffe:	f001 fc87 	bl	8009910 <HAL_Delay>
			led.LR(-1, 0);
 8008002:	2200      	movs	r2, #0
 8008004:	f04f 31ff 	mov.w	r1, #4294967295
 8008008:	482e      	ldr	r0, [pc, #184]	; (80080c4 <cppLoop+0x8ac>)
 800800a:	f7f9 ffc3 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 800800e:	f001 bb3e 	b.w	800968e <cppLoop+0x1e76>
		else if(joy_stick.getValue() == JOY_C){
 8008012:	482b      	ldr	r0, [pc, #172]	; (80080c0 <cppLoop+0x8a8>)
 8008014:	f7f9 fe9e 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008018:	4603      	mov	r3, r0
 800801a:	2b02      	cmp	r3, #2
 800801c:	bf0c      	ite	eq
 800801e:	2301      	moveq	r3, #1
 8008020:	2300      	movne	r3, #0
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b00      	cmp	r3, #0
 8008026:	f001 8332 	beq.w	800968e <cppLoop+0x1e76>
			led.LR(-1, 1);
 800802a:	2201      	movs	r2, #1
 800802c:	f04f 31ff 	mov.w	r1, #4294967295
 8008030:	4824      	ldr	r0, [pc, #144]	; (80080c4 <cppLoop+0x8ac>)
 8008032:	f7f9 ffaf 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008036:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800803a:	f001 fc69 	bl	8009910 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 800803e:	2300      	movs	r3, #0
 8008040:	9300      	str	r3, [sp, #0]
 8008042:	4b22      	ldr	r3, [pc, #136]	; (80080cc <cppLoop+0x8b4>)
 8008044:	2201      	movs	r2, #1
 8008046:	4924      	ldr	r1, [pc, #144]	; (80080d8 <cppLoop+0x8c0>)
 8008048:	4824      	ldr	r0, [pc, #144]	; (80080dc <cppLoop+0x8c4>)
 800804a:	f7f9 fa67 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 800804e:	2300      	movs	r3, #0
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	4b1f      	ldr	r3, [pc, #124]	; (80080d0 <cppLoop+0x8b8>)
 8008054:	2201      	movs	r2, #1
 8008056:	4922      	ldr	r1, [pc, #136]	; (80080e0 <cppLoop+0x8c8>)
 8008058:	4820      	ldr	r0, [pc, #128]	; (80080dc <cppLoop+0x8c4>)
 800805a:	f7f9 fa5f 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 800805e:	2300      	movs	r3, #0
 8008060:	9300      	str	r3, [sp, #0]
 8008062:	4b1c      	ldr	r3, [pc, #112]	; (80080d4 <cppLoop+0x8bc>)
 8008064:	2201      	movs	r2, #1
 8008066:	491f      	ldr	r1, [pc, #124]	; (80080e4 <cppLoop+0x8cc>)
 8008068:	481c      	ldr	r0, [pc, #112]	; (80080dc <cppLoop+0x8c4>)
 800806a:	f7f9 fa57 	bl	800151c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 800806e:	4b17      	ldr	r3, [pc, #92]	; (80080cc <cppLoop+0x8b4>)
 8008070:	edd3 7a00 	vldr	s15, [r3]
 8008074:	4b16      	ldr	r3, [pc, #88]	; (80080d0 <cppLoop+0x8b8>)
 8008076:	ed93 7a00 	vldr	s14, [r3]
 800807a:	4b16      	ldr	r3, [pc, #88]	; (80080d4 <cppLoop+0x8bc>)
 800807c:	edd3 6a00 	vldr	s13, [r3]
 8008080:	eeb0 1a66 	vmov.f32	s2, s13
 8008084:	eef0 0a47 	vmov.f32	s1, s14
 8008088:	eeb0 0a67 	vmov.f32	s0, s15
 800808c:	4816      	ldr	r0, [pc, #88]	; (80080e8 <cppLoop+0x8d0>)
 800808e:	f7fb fcbf 	bl	8003a10 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8008092:	2200      	movs	r2, #0
 8008094:	f04f 31ff 	mov.w	r1, #4294967295
 8008098:	480a      	ldr	r0, [pc, #40]	; (80080c4 <cppLoop+0x8ac>)
 800809a:	f7f9 ff7b 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 800809e:	f001 baf6 	b.w	800968e <cppLoop+0x1e76>
 80080a2:	bf00      	nop
 80080a4:	f3af 8000 	nop.w
 80080a8:	88e368f1 	.word	0x88e368f1
 80080ac:	3ee4f8b5 	.word	0x3ee4f8b5
 80080b0:	eb1c432d 	.word	0xeb1c432d
 80080b4:	3f1a36e2 	.word	0x3f1a36e2
 80080b8:	a0b5ed8d 	.word	0xa0b5ed8d
 80080bc:	3eb0c6f7 	.word	0x3eb0c6f7
 80080c0:	200005f4 	.word	0x200005f4
 80080c4:	20000600 	.word	0x20000600
 80080c8:	2003d454 	.word	0x2003d454
 80080cc:	2003d460 	.word	0x2003d460
 80080d0:	2003d468 	.word	0x2003d468
 80080d4:	2003d470 	.word	0x2003d470
 80080d8:	0801a0d0 	.word	0x0801a0d0
 80080dc:	0801a0d8 	.word	0x0801a0d8
 80080e0:	0801a0e0 	.word	0x0801a0e0
 80080e4:	0801a0e8 	.word	0x0801a0e8
 80080e8:	20017dd0 	.word	0x20017dd0

	case 1:
		led.fullColor('C');
 80080ec:	2143      	movs	r1, #67	; 0x43
 80080ee:	48ae      	ldr	r0, [pc, #696]	; (80083a8 <cppLoop+0xb90>)
 80080f0:	f7f9 fe94 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 80080f4:	f7f8 ffd4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80080f8:	2100      	movs	r1, #0
 80080fa:	2000      	movs	r0, #0
 80080fc:	f7f8 ffe0 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8008100:	48aa      	ldr	r0, [pc, #680]	; (80083ac <cppLoop+0xb94>)
 8008102:	f7f9 f808 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 8008106:	2101      	movs	r1, #1
 8008108:	2000      	movs	r0, #0
 800810a:	f7f8 ffd9 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 800810e:	4ba8      	ldr	r3, [pc, #672]	; (80083b0 <cppLoop+0xb98>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4618      	mov	r0, r3
 8008114:	f7f8 fa30 	bl	8000578 <__aeabi_f2d>
 8008118:	4603      	mov	r3, r0
 800811a:	460c      	mov	r4, r1
 800811c:	461a      	mov	r2, r3
 800811e:	4623      	mov	r3, r4
 8008120:	48a4      	ldr	r0, [pc, #656]	; (80083b4 <cppLoop+0xb9c>)
 8008122:	f7f8 fff8 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008126:	48a4      	ldr	r0, [pc, #656]	; (80083b8 <cppLoop+0xba0>)
 8008128:	f7f9 fe14 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 800812c:	4603      	mov	r3, r0
 800812e:	2b02      	cmp	r3, #2
 8008130:	bf0c      	ite	eq
 8008132:	2301      	moveq	r3, #1
 8008134:	2300      	movne	r3, #0
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b00      	cmp	r3, #0
 800813a:	f001 82aa 	beq.w	8009692 <cppLoop+0x1e7a>
			HAL_Delay(500);
 800813e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008142:	f001 fbe5 	bl	8009910 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 8008146:	4b9a      	ldr	r3, [pc, #616]	; (80083b0 <cppLoop+0xb98>)
 8008148:	edd3 7a00 	vldr	s15, [r3]
 800814c:	eeb0 0a67 	vmov.f32	s0, s15
 8008150:	489a      	ldr	r0, [pc, #616]	; (80083bc <cppLoop+0xba4>)
 8008152:	f7fb fce9 	bl	8003b28 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8008156:	f04f 32ff 	mov.w	r2, #4294967295
 800815a:	2101      	movs	r1, #1
 800815c:	4892      	ldr	r0, [pc, #584]	; (80083a8 <cppLoop+0xb90>)
 800815e:	f7f9 ff19 	bl	8001f94 <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 8008162:	2100      	movs	r1, #0
 8008164:	4895      	ldr	r0, [pc, #596]	; (80083bc <cppLoop+0xba4>)
 8008166:	f7fc f8ed 	bl	8004344 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 800816a:	4894      	ldr	r0, [pc, #592]	; (80083bc <cppLoop+0xba4>)
 800816c:	f7fb ffec 	bl	8004148 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008170:	f04f 32ff 	mov.w	r2, #4294967295
 8008174:	2100      	movs	r1, #0
 8008176:	488c      	ldr	r0, [pc, #560]	; (80083a8 <cppLoop+0xb90>)
 8008178:	f7f9 ff0c 	bl	8001f94 <_ZN3LED2LREaa>
		}

		break;
 800817c:	f001 ba89 	b.w	8009692 <cppLoop+0x1e7a>

	case 2:
		led.fullColor('B');
 8008180:	2142      	movs	r1, #66	; 0x42
 8008182:	4889      	ldr	r0, [pc, #548]	; (80083a8 <cppLoop+0xb90>)
 8008184:	f7f9 fe4a 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008188:	f7f8 ff8a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800818c:	2100      	movs	r1, #0
 800818e:	2000      	movs	r0, #0
 8008190:	f7f8 ff96 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8008194:	4885      	ldr	r0, [pc, #532]	; (80083ac <cppLoop+0xb94>)
 8008196:	f7f8 ffbe 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 800819a:	2101      	movs	r1, #1
 800819c:	2000      	movs	r0, #0
 800819e:	f7f8 ff8f 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 80081a2:	4b83      	ldr	r3, [pc, #524]	; (80083b0 <cppLoop+0xb98>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7f8 f9e6 	bl	8000578 <__aeabi_f2d>
 80081ac:	4603      	mov	r3, r0
 80081ae:	460c      	mov	r4, r1
 80081b0:	461a      	mov	r2, r3
 80081b2:	4623      	mov	r3, r4
 80081b4:	4882      	ldr	r0, [pc, #520]	; (80083c0 <cppLoop+0xba8>)
 80081b6:	f7f8 ffae 	bl	8001116 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 80081ba:	487f      	ldr	r0, [pc, #508]	; (80083b8 <cppLoop+0xba0>)
 80081bc:	f7f9 fdca 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b10      	cmp	r3, #16
 80081c4:	bf0c      	ite	eq
 80081c6:	2301      	moveq	r3, #1
 80081c8:	2300      	movne	r3, #0
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d023      	beq.n	8008218 <cppLoop+0xa00>
			led.LR(-1, 1);
 80081d0:	2201      	movs	r2, #1
 80081d2:	f04f 31ff 	mov.w	r1, #4294967295
 80081d6:	4874      	ldr	r0, [pc, #464]	; (80083a8 <cppLoop+0xb90>)
 80081d8:	f7f9 fedc 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80081dc:	2064      	movs	r0, #100	; 0x64
 80081de:	f001 fb97 	bl	8009910 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 80081e2:	4b73      	ldr	r3, [pc, #460]	; (80083b0 <cppLoop+0xb98>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7f8 f9c6 	bl	8000578 <__aeabi_f2d>
 80081ec:	a36c      	add	r3, pc, #432	; (adr r3, 80083a0 <cppLoop+0xb88>)
 80081ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f2:	f7f8 f863 	bl	80002bc <__adddf3>
 80081f6:	4603      	mov	r3, r0
 80081f8:	460c      	mov	r4, r1
 80081fa:	4618      	mov	r0, r3
 80081fc:	4621      	mov	r1, r4
 80081fe:	f7f8 fd0b 	bl	8000c18 <__aeabi_d2f>
 8008202:	4602      	mov	r2, r0
 8008204:	4b6a      	ldr	r3, [pc, #424]	; (80083b0 <cppLoop+0xb98>)
 8008206:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8008208:	2200      	movs	r2, #0
 800820a:	f04f 31ff 	mov.w	r1, #4294967295
 800820e:	4866      	ldr	r0, [pc, #408]	; (80083a8 <cppLoop+0xb90>)
 8008210:	f7f9 fec0 	bl	8001f94 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 8008214:	f001 ba3f 	b.w	8009696 <cppLoop+0x1e7e>
		else if(joy_stick.getValue() == JOY_L){
 8008218:	4867      	ldr	r0, [pc, #412]	; (80083b8 <cppLoop+0xba0>)
 800821a:	f7f9 fd9b 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 800821e:	4603      	mov	r3, r0
 8008220:	2b01      	cmp	r3, #1
 8008222:	bf0c      	ite	eq
 8008224:	2301      	moveq	r3, #1
 8008226:	2300      	movne	r3, #0
 8008228:	b2db      	uxtb	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d023      	beq.n	8008276 <cppLoop+0xa5e>
			led.LR(-1, 1);
 800822e:	2201      	movs	r2, #1
 8008230:	f04f 31ff 	mov.w	r1, #4294967295
 8008234:	485c      	ldr	r0, [pc, #368]	; (80083a8 <cppLoop+0xb90>)
 8008236:	f7f9 fead 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800823a:	2064      	movs	r0, #100	; 0x64
 800823c:	f001 fb68 	bl	8009910 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8008240:	4b5b      	ldr	r3, [pc, #364]	; (80083b0 <cppLoop+0xb98>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4618      	mov	r0, r3
 8008246:	f7f8 f997 	bl	8000578 <__aeabi_f2d>
 800824a:	a355      	add	r3, pc, #340	; (adr r3, 80083a0 <cppLoop+0xb88>)
 800824c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008250:	f7f8 f832 	bl	80002b8 <__aeabi_dsub>
 8008254:	4603      	mov	r3, r0
 8008256:	460c      	mov	r4, r1
 8008258:	4618      	mov	r0, r3
 800825a:	4621      	mov	r1, r4
 800825c:	f7f8 fcdc 	bl	8000c18 <__aeabi_d2f>
 8008260:	4602      	mov	r2, r0
 8008262:	4b53      	ldr	r3, [pc, #332]	; (80083b0 <cppLoop+0xb98>)
 8008264:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008266:	2200      	movs	r2, #0
 8008268:	f04f 31ff 	mov.w	r1, #4294967295
 800826c:	484e      	ldr	r0, [pc, #312]	; (80083a8 <cppLoop+0xb90>)
 800826e:	f7f9 fe91 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8008272:	f001 ba10 	b.w	8009696 <cppLoop+0x1e7e>
		else if(joy_stick.getValue() == JOY_C){
 8008276:	4850      	ldr	r0, [pc, #320]	; (80083b8 <cppLoop+0xba0>)
 8008278:	f7f9 fd6c 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 800827c:	4603      	mov	r3, r0
 800827e:	2b02      	cmp	r3, #2
 8008280:	bf0c      	ite	eq
 8008282:	2301      	moveq	r3, #1
 8008284:	2300      	movne	r3, #0
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b00      	cmp	r3, #0
 800828a:	f001 8204 	beq.w	8009696 <cppLoop+0x1e7e>
			led.LR(-1, 1);
 800828e:	2201      	movs	r2, #1
 8008290:	f04f 31ff 	mov.w	r1, #4294967295
 8008294:	4844      	ldr	r0, [pc, #272]	; (80083a8 <cppLoop+0xb90>)
 8008296:	f7f9 fe7d 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800829a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800829e:	f001 fb37 	bl	8009910 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 80082a2:	2300      	movs	r3, #0
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	4b42      	ldr	r3, [pc, #264]	; (80083b0 <cppLoop+0xb98>)
 80082a8:	2201      	movs	r2, #1
 80082aa:	4946      	ldr	r1, [pc, #280]	; (80083c4 <cppLoop+0xbac>)
 80082ac:	4846      	ldr	r0, [pc, #280]	; (80083c8 <cppLoop+0xbb0>)
 80082ae:	f7f9 f935 	bl	800151c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 80082b2:	4b3f      	ldr	r3, [pc, #252]	; (80083b0 <cppLoop+0xb98>)
 80082b4:	edd3 7a00 	vldr	s15, [r3]
 80082b8:	eeb0 0a67 	vmov.f32	s0, s15
 80082bc:	483f      	ldr	r0, [pc, #252]	; (80083bc <cppLoop+0xba4>)
 80082be:	f7fb fc33 	bl	8003b28 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 80082c2:	2200      	movs	r2, #0
 80082c4:	f04f 31ff 	mov.w	r1, #4294967295
 80082c8:	4837      	ldr	r0, [pc, #220]	; (80083a8 <cppLoop+0xb90>)
 80082ca:	f7f9 fe63 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 80082ce:	f001 b9e2 	b.w	8009696 <cppLoop+0x1e7e>

	case 3:
		led.fullColor('Y');
 80082d2:	2159      	movs	r1, #89	; 0x59
 80082d4:	4834      	ldr	r0, [pc, #208]	; (80083a8 <cppLoop+0xb90>)
 80082d6:	f7f9 fda1 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 80082da:	f7f8 fee1 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80082de:	2100      	movs	r1, #0
 80082e0:	2000      	movs	r0, #0
 80082e2:	f7f8 feed 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 80082e6:	4b39      	ldr	r3, [pc, #228]	; (80083cc <cppLoop+0xbb4>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7f8 f944 	bl	8000578 <__aeabi_f2d>
 80082f0:	4603      	mov	r3, r0
 80082f2:	460c      	mov	r4, r1
 80082f4:	461a      	mov	r2, r3
 80082f6:	4623      	mov	r3, r4
 80082f8:	4835      	ldr	r0, [pc, #212]	; (80083d0 <cppLoop+0xbb8>)
 80082fa:	f7f8 ff0c 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 80082fe:	2101      	movs	r1, #1
 8008300:	2000      	movs	r0, #0
 8008302:	f7f8 fedd 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 8008306:	4b33      	ldr	r3, [pc, #204]	; (80083d4 <cppLoop+0xbbc>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4618      	mov	r0, r3
 800830c:	f7f8 f934 	bl	8000578 <__aeabi_f2d>
 8008310:	4603      	mov	r3, r0
 8008312:	460c      	mov	r4, r1
 8008314:	461a      	mov	r2, r3
 8008316:	4623      	mov	r3, r4
 8008318:	4826      	ldr	r0, [pc, #152]	; (80083b4 <cppLoop+0xb9c>)
 800831a:	f7f8 fefc 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800831e:	4826      	ldr	r0, [pc, #152]	; (80083b8 <cppLoop+0xba0>)
 8008320:	f7f9 fd18 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008324:	4603      	mov	r3, r0
 8008326:	2b02      	cmp	r3, #2
 8008328:	bf0c      	ite	eq
 800832a:	2301      	moveq	r3, #1
 800832c:	2300      	movne	r3, #0
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b00      	cmp	r3, #0
 8008332:	f001 81b2 	beq.w	800969a <cppLoop+0x1e82>
			HAL_Delay(500);
 8008336:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800833a:	f001 fae9 	bl	8009910 <HAL_Delay>

			led.LR(1, -1);
 800833e:	f04f 32ff 	mov.w	r2, #4294967295
 8008342:	2101      	movs	r1, #1
 8008344:	4818      	ldr	r0, [pc, #96]	; (80083a8 <cppLoop+0xb90>)
 8008346:	f7f9 fe25 	bl	8001f94 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800834a:	2101      	movs	r1, #1
 800834c:	481b      	ldr	r0, [pc, #108]	; (80083bc <cppLoop+0xba4>)
 800834e:	f7fb fff9 	bl	8004344 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8008352:	4b20      	ldr	r3, [pc, #128]	; (80083d4 <cppLoop+0xbbc>)
 8008354:	edd3 7a00 	vldr	s15, [r3]
 8008358:	eeb0 0a67 	vmov.f32	s0, s15
 800835c:	4817      	ldr	r0, [pc, #92]	; (80083bc <cppLoop+0xba4>)
 800835e:	f7fb fbe3 	bl	8003b28 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008362:	4b1a      	ldr	r3, [pc, #104]	; (80083cc <cppLoop+0xbb4>)
 8008364:	edd3 7a00 	vldr	s15, [r3]
 8008368:	eeb0 0a67 	vmov.f32	s0, s15
 800836c:	4813      	ldr	r0, [pc, #76]	; (80083bc <cppLoop+0xba4>)
 800836e:	f7fb fbeb 	bl	8003b48 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008372:	4b18      	ldr	r3, [pc, #96]	; (80083d4 <cppLoop+0xbbc>)
 8008374:	edd3 7a00 	vldr	s15, [r3]
 8008378:	eeb0 0a67 	vmov.f32	s0, s15
 800837c:	480f      	ldr	r0, [pc, #60]	; (80083bc <cppLoop+0xba4>)
 800837e:	f7fb fc03 	bl	8003b88 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 8008382:	480e      	ldr	r0, [pc, #56]	; (80083bc <cppLoop+0xba4>)
 8008384:	f7fa fe34 	bl	8002ff0 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008388:	480c      	ldr	r0, [pc, #48]	; (80083bc <cppLoop+0xba4>)
 800838a:	f7fb fedd 	bl	8004148 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 800838e:	f04f 32ff 	mov.w	r2, #4294967295
 8008392:	2100      	movs	r1, #0
 8008394:	4804      	ldr	r0, [pc, #16]	; (80083a8 <cppLoop+0xb90>)
 8008396:	f7f9 fdfd 	bl	8001f94 <_ZN3LED2LREaa>
		}

		break;
 800839a:	f001 b97e 	b.w	800969a <cppLoop+0x1e82>
 800839e:	bf00      	nop
 80083a0:	9999999a 	.word	0x9999999a
 80083a4:	3fb99999 	.word	0x3fb99999
 80083a8:	20000600 	.word	0x20000600
 80083ac:	0801a0f0 	.word	0x0801a0f0
 80083b0:	2003d490 	.word	0x2003d490
 80083b4:	0801a0fc 	.word	0x0801a0fc
 80083b8:	200005f4 	.word	0x200005f4
 80083bc:	20017dd0 	.word	0x20017dd0
 80083c0:	0801a108 	.word	0x0801a108
 80083c4:	0801a114 	.word	0x0801a114
 80083c8:	0801a0d8 	.word	0x0801a0d8
 80083cc:	2003d498 	.word	0x2003d498
 80083d0:	0801a120 	.word	0x0801a120
 80083d4:	2003d4a8 	.word	0x2003d4a8

	case 4:
		led.fullColor('G');
 80083d8:	2147      	movs	r1, #71	; 0x47
 80083da:	4895      	ldr	r0, [pc, #596]	; (8008630 <cppLoop+0xe18>)
 80083dc:	f7f9 fd1e 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 80083e0:	f7f8 fe5e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80083e4:	2100      	movs	r1, #0
 80083e6:	2000      	movs	r0, #0
 80083e8:	f7f8 fe6a 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 80083ec:	4891      	ldr	r0, [pc, #580]	; (8008634 <cppLoop+0xe1c>)
 80083ee:	f7fb fbfb 	bl	8003be8 <_ZN9LineTrace14getMaxVelocityEv>
 80083f2:	ee10 3a10 	vmov	r3, s0
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7f8 f8be 	bl	8000578 <__aeabi_f2d>
 80083fc:	4603      	mov	r3, r0
 80083fe:	460c      	mov	r4, r1
 8008400:	461a      	mov	r2, r3
 8008402:	4623      	mov	r3, r4
 8008404:	488c      	ldr	r0, [pc, #560]	; (8008638 <cppLoop+0xe20>)
 8008406:	f7f8 fe86 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 800840a:	2101      	movs	r1, #1
 800840c:	2000      	movs	r0, #0
 800840e:	f7f8 fe57 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8008412:	4888      	ldr	r0, [pc, #544]	; (8008634 <cppLoop+0xe1c>)
 8008414:	f7fb fc08 	bl	8003c28 <_ZN9LineTrace14getMinVelocityEv>
 8008418:	ee10 3a10 	vmov	r3, s0
 800841c:	4618      	mov	r0, r3
 800841e:	f7f8 f8ab 	bl	8000578 <__aeabi_f2d>
 8008422:	4603      	mov	r3, r0
 8008424:	460c      	mov	r4, r1
 8008426:	461a      	mov	r2, r3
 8008428:	4623      	mov	r3, r4
 800842a:	4884      	ldr	r0, [pc, #528]	; (800863c <cppLoop+0xe24>)
 800842c:	f7f8 fe73 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008430:	4883      	ldr	r0, [pc, #524]	; (8008640 <cppLoop+0xe28>)
 8008432:	f7f9 fc8f 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008436:	4603      	mov	r3, r0
 8008438:	2b08      	cmp	r3, #8
 800843a:	bf0c      	ite	eq
 800843c:	2301      	moveq	r3, #1
 800843e:	2300      	movne	r3, #0
 8008440:	b2db      	uxtb	r3, r3
 8008442:	2b00      	cmp	r3, #0
 8008444:	d022      	beq.n	800848c <cppLoop+0xc74>
			led.LR(-1, 1);
 8008446:	2201      	movs	r2, #1
 8008448:	f04f 31ff 	mov.w	r1, #4294967295
 800844c:	4878      	ldr	r0, [pc, #480]	; (8008630 <cppLoop+0xe18>)
 800844e:	f7f9 fda1 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008452:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008456:	f001 fa5b 	bl	8009910 <HAL_Delay>

			selector_vel++;
 800845a:	4b7a      	ldr	r3, [pc, #488]	; (8008644 <cppLoop+0xe2c>)
 800845c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008460:	b29b      	uxth	r3, r3
 8008462:	3301      	adds	r3, #1
 8008464:	b29b      	uxth	r3, r3
 8008466:	b21a      	sxth	r2, r3
 8008468:	4b76      	ldr	r3, [pc, #472]	; (8008644 <cppLoop+0xe2c>)
 800846a:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 800846c:	4b75      	ldr	r3, [pc, #468]	; (8008644 <cppLoop+0xe2c>)
 800846e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008472:	2b01      	cmp	r3, #1
 8008474:	dd02      	ble.n	800847c <cppLoop+0xc64>
 8008476:	4b73      	ldr	r3, [pc, #460]	; (8008644 <cppLoop+0xe2c>)
 8008478:	2200      	movs	r2, #0
 800847a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800847c:	2200      	movs	r2, #0
 800847e:	f04f 31ff 	mov.w	r1, #4294967295
 8008482:	486b      	ldr	r0, [pc, #428]	; (8008630 <cppLoop+0xe18>)
 8008484:	f7f9 fd86 	bl	8001f94 <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 8008488:	f001 b909 	b.w	800969e <cppLoop+0x1e86>
		else if(joy_stick.getValue() == JOY_R){
 800848c:	486c      	ldr	r0, [pc, #432]	; (8008640 <cppLoop+0xe28>)
 800848e:	f7f9 fc61 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008492:	4603      	mov	r3, r0
 8008494:	2b10      	cmp	r3, #16
 8008496:	bf0c      	ite	eq
 8008498:	2301      	moveq	r3, #1
 800849a:	2300      	movne	r3, #0
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d03c      	beq.n	800851c <cppLoop+0xd04>
			led.LR(-1, 1);
 80084a2:	2201      	movs	r2, #1
 80084a4:	f04f 31ff 	mov.w	r1, #4294967295
 80084a8:	4861      	ldr	r0, [pc, #388]	; (8008630 <cppLoop+0xe18>)
 80084aa:	f7f9 fd73 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80084ae:	2064      	movs	r0, #100	; 0x64
 80084b0:	f001 fa2e 	bl	8009910 <HAL_Delay>
			if(selector_vel == 0)
 80084b4:	4b63      	ldr	r3, [pc, #396]	; (8008644 <cppLoop+0xe2c>)
 80084b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d113      	bne.n	80084e6 <cppLoop+0xcce>
				adj_max_velocity = adj_max_velocity + 0.1;
 80084be:	4b62      	ldr	r3, [pc, #392]	; (8008648 <cppLoop+0xe30>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7f8 f858 	bl	8000578 <__aeabi_f2d>
 80084c8:	a357      	add	r3, pc, #348	; (adr r3, 8008628 <cppLoop+0xe10>)
 80084ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ce:	f7f7 fef5 	bl	80002bc <__adddf3>
 80084d2:	4603      	mov	r3, r0
 80084d4:	460c      	mov	r4, r1
 80084d6:	4618      	mov	r0, r3
 80084d8:	4621      	mov	r1, r4
 80084da:	f7f8 fb9d 	bl	8000c18 <__aeabi_d2f>
 80084de:	4602      	mov	r2, r0
 80084e0:	4b59      	ldr	r3, [pc, #356]	; (8008648 <cppLoop+0xe30>)
 80084e2:	601a      	str	r2, [r3, #0]
 80084e4:	e012      	b.n	800850c <cppLoop+0xcf4>
				adj_min_velocity = adj_min_velocity + 0.1;
 80084e6:	4b59      	ldr	r3, [pc, #356]	; (800864c <cppLoop+0xe34>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7f8 f844 	bl	8000578 <__aeabi_f2d>
 80084f0:	a34d      	add	r3, pc, #308	; (adr r3, 8008628 <cppLoop+0xe10>)
 80084f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f6:	f7f7 fee1 	bl	80002bc <__adddf3>
 80084fa:	4603      	mov	r3, r0
 80084fc:	460c      	mov	r4, r1
 80084fe:	4618      	mov	r0, r3
 8008500:	4621      	mov	r1, r4
 8008502:	f7f8 fb89 	bl	8000c18 <__aeabi_d2f>
 8008506:	4602      	mov	r2, r0
 8008508:	4b50      	ldr	r3, [pc, #320]	; (800864c <cppLoop+0xe34>)
 800850a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800850c:	2200      	movs	r2, #0
 800850e:	f04f 31ff 	mov.w	r1, #4294967295
 8008512:	4847      	ldr	r0, [pc, #284]	; (8008630 <cppLoop+0xe18>)
 8008514:	f7f9 fd3e 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8008518:	f001 b8c1 	b.w	800969e <cppLoop+0x1e86>
		else if(joy_stick.getValue() == JOY_L){
 800851c:	4848      	ldr	r0, [pc, #288]	; (8008640 <cppLoop+0xe28>)
 800851e:	f7f9 fc19 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008522:	4603      	mov	r3, r0
 8008524:	2b01      	cmp	r3, #1
 8008526:	bf0c      	ite	eq
 8008528:	2301      	moveq	r3, #1
 800852a:	2300      	movne	r3, #0
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d03c      	beq.n	80085ac <cppLoop+0xd94>
			led.LR(-1, 1);
 8008532:	2201      	movs	r2, #1
 8008534:	f04f 31ff 	mov.w	r1, #4294967295
 8008538:	483d      	ldr	r0, [pc, #244]	; (8008630 <cppLoop+0xe18>)
 800853a:	f7f9 fd2b 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800853e:	2064      	movs	r0, #100	; 0x64
 8008540:	f001 f9e6 	bl	8009910 <HAL_Delay>
			if(selector_vel == 0)
 8008544:	4b3f      	ldr	r3, [pc, #252]	; (8008644 <cppLoop+0xe2c>)
 8008546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d113      	bne.n	8008576 <cppLoop+0xd5e>
				adj_max_velocity = adj_max_velocity - 0.1;
 800854e:	4b3e      	ldr	r3, [pc, #248]	; (8008648 <cppLoop+0xe30>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4618      	mov	r0, r3
 8008554:	f7f8 f810 	bl	8000578 <__aeabi_f2d>
 8008558:	a333      	add	r3, pc, #204	; (adr r3, 8008628 <cppLoop+0xe10>)
 800855a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855e:	f7f7 feab 	bl	80002b8 <__aeabi_dsub>
 8008562:	4603      	mov	r3, r0
 8008564:	460c      	mov	r4, r1
 8008566:	4618      	mov	r0, r3
 8008568:	4621      	mov	r1, r4
 800856a:	f7f8 fb55 	bl	8000c18 <__aeabi_d2f>
 800856e:	4602      	mov	r2, r0
 8008570:	4b35      	ldr	r3, [pc, #212]	; (8008648 <cppLoop+0xe30>)
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	e012      	b.n	800859c <cppLoop+0xd84>
				adj_min_velocity = adj_min_velocity - 0.1;
 8008576:	4b35      	ldr	r3, [pc, #212]	; (800864c <cppLoop+0xe34>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4618      	mov	r0, r3
 800857c:	f7f7 fffc 	bl	8000578 <__aeabi_f2d>
 8008580:	a329      	add	r3, pc, #164	; (adr r3, 8008628 <cppLoop+0xe10>)
 8008582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008586:	f7f7 fe97 	bl	80002b8 <__aeabi_dsub>
 800858a:	4603      	mov	r3, r0
 800858c:	460c      	mov	r4, r1
 800858e:	4618      	mov	r0, r3
 8008590:	4621      	mov	r1, r4
 8008592:	f7f8 fb41 	bl	8000c18 <__aeabi_d2f>
 8008596:	4602      	mov	r2, r0
 8008598:	4b2c      	ldr	r3, [pc, #176]	; (800864c <cppLoop+0xe34>)
 800859a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800859c:	2200      	movs	r2, #0
 800859e:	f04f 31ff 	mov.w	r1, #4294967295
 80085a2:	4823      	ldr	r0, [pc, #140]	; (8008630 <cppLoop+0xe18>)
 80085a4:	f7f9 fcf6 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 80085a8:	f001 b879 	b.w	800969e <cppLoop+0x1e86>
		else if(joy_stick.getValue() == JOY_C){
 80085ac:	4824      	ldr	r0, [pc, #144]	; (8008640 <cppLoop+0xe28>)
 80085ae:	f7f9 fbd1 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	bf0c      	ite	eq
 80085b8:	2301      	moveq	r3, #1
 80085ba:	2300      	movne	r3, #0
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f001 806d 	beq.w	800969e <cppLoop+0x1e86>
			led.LR(-1, 1);
 80085c4:	2201      	movs	r2, #1
 80085c6:	f04f 31ff 	mov.w	r1, #4294967295
 80085ca:	4819      	ldr	r0, [pc, #100]	; (8008630 <cppLoop+0xe18>)
 80085cc:	f7f9 fce2 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80085d0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80085d4:	f001 f99c 	bl	8009910 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 80085d8:	2300      	movs	r3, #0
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	4b1a      	ldr	r3, [pc, #104]	; (8008648 <cppLoop+0xe30>)
 80085de:	2201      	movs	r2, #1
 80085e0:	491b      	ldr	r1, [pc, #108]	; (8008650 <cppLoop+0xe38>)
 80085e2:	481c      	ldr	r0, [pc, #112]	; (8008654 <cppLoop+0xe3c>)
 80085e4:	f7f8 ff9a 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 80085e8:	2300      	movs	r3, #0
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	4b17      	ldr	r3, [pc, #92]	; (800864c <cppLoop+0xe34>)
 80085ee:	2201      	movs	r2, #1
 80085f0:	4919      	ldr	r1, [pc, #100]	; (8008658 <cppLoop+0xe40>)
 80085f2:	4818      	ldr	r0, [pc, #96]	; (8008654 <cppLoop+0xe3c>)
 80085f4:	f7f8 ff92 	bl	800151c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 80085f8:	4b13      	ldr	r3, [pc, #76]	; (8008648 <cppLoop+0xe30>)
 80085fa:	edd3 7a00 	vldr	s15, [r3]
 80085fe:	eeb0 0a67 	vmov.f32	s0, s15
 8008602:	480c      	ldr	r0, [pc, #48]	; (8008634 <cppLoop+0xe1c>)
 8008604:	f7fb faa0 	bl	8003b48 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008608:	4b10      	ldr	r3, [pc, #64]	; (800864c <cppLoop+0xe34>)
 800860a:	edd3 7a00 	vldr	s15, [r3]
 800860e:	eeb0 0a67 	vmov.f32	s0, s15
 8008612:	4808      	ldr	r0, [pc, #32]	; (8008634 <cppLoop+0xe1c>)
 8008614:	f7fb fab8 	bl	8003b88 <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008618:	2200      	movs	r2, #0
 800861a:	f04f 31ff 	mov.w	r1, #4294967295
 800861e:	4804      	ldr	r0, [pc, #16]	; (8008630 <cppLoop+0xe18>)
 8008620:	f7f9 fcb8 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8008624:	f001 b83b 	b.w	800969e <cppLoop+0x1e86>
 8008628:	9999999a 	.word	0x9999999a
 800862c:	3fb99999 	.word	0x3fb99999
 8008630:	20000600 	.word	0x20000600
 8008634:	20017dd0 	.word	0x20017dd0
 8008638:	0801a120 	.word	0x0801a120
 800863c:	0801a108 	.word	0x0801a108
 8008640:	200005f4 	.word	0x200005f4
 8008644:	2003d45a 	.word	0x2003d45a
 8008648:	2003d498 	.word	0x2003d498
 800864c:	2003d4a8 	.word	0x2003d4a8
 8008650:	0801a12c 	.word	0x0801a12c
 8008654:	0801a0d8 	.word	0x0801a0d8
 8008658:	0801a138 	.word	0x0801a138

	case 5:
		led.fullColor('M');
 800865c:	214d      	movs	r1, #77	; 0x4d
 800865e:	48aa      	ldr	r0, [pc, #680]	; (8008908 <cppLoop+0x10f0>)
 8008660:	f7f9 fbdc 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008664:	f7f8 fd1c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008668:	2100      	movs	r1, #0
 800866a:	2000      	movs	r0, #0
 800866c:	f7f8 fd28 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 8008670:	4ba6      	ldr	r3, [pc, #664]	; (800890c <cppLoop+0x10f4>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4618      	mov	r0, r3
 8008676:	f7f7 ff7f 	bl	8000578 <__aeabi_f2d>
 800867a:	4603      	mov	r3, r0
 800867c:	460c      	mov	r4, r1
 800867e:	461a      	mov	r2, r3
 8008680:	4623      	mov	r3, r4
 8008682:	48a3      	ldr	r0, [pc, #652]	; (8008910 <cppLoop+0x10f8>)
 8008684:	f7f8 fd47 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 8008688:	2101      	movs	r1, #1
 800868a:	2000      	movs	r0, #0
 800868c:	f7f8 fd18 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 8008690:	4ba0      	ldr	r3, [pc, #640]	; (8008914 <cppLoop+0x10fc>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4618      	mov	r0, r3
 8008696:	f7f7 ff6f 	bl	8000578 <__aeabi_f2d>
 800869a:	4603      	mov	r3, r0
 800869c:	460c      	mov	r4, r1
 800869e:	461a      	mov	r2, r3
 80086a0:	4623      	mov	r3, r4
 80086a2:	489d      	ldr	r0, [pc, #628]	; (8008918 <cppLoop+0x1100>)
 80086a4:	f7f8 fd37 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80086a8:	489c      	ldr	r0, [pc, #624]	; (800891c <cppLoop+0x1104>)
 80086aa:	f7f9 fb53 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	bf0c      	ite	eq
 80086b4:	2301      	moveq	r3, #1
 80086b6:	2300      	movne	r3, #0
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f000 87f1 	beq.w	80096a2 <cppLoop+0x1e8a>
			HAL_Delay(500);
 80086c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80086c4:	f001 f924 	bl	8009910 <HAL_Delay>

			led.LR(1, -1);
 80086c8:	f04f 32ff 	mov.w	r2, #4294967295
 80086cc:	2101      	movs	r1, #1
 80086ce:	488e      	ldr	r0, [pc, #568]	; (8008908 <cppLoop+0x10f0>)
 80086d0:	f7f9 fc60 	bl	8001f94 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 80086d4:	2102      	movs	r1, #2
 80086d6:	4892      	ldr	r0, [pc, #584]	; (8008920 <cppLoop+0x1108>)
 80086d8:	f7fb fe34 	bl	8004344 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 80086dc:	4b8d      	ldr	r3, [pc, #564]	; (8008914 <cppLoop+0x10fc>)
 80086de:	edd3 7a00 	vldr	s15, [r3]
 80086e2:	eeb0 0a67 	vmov.f32	s0, s15
 80086e6:	488e      	ldr	r0, [pc, #568]	; (8008920 <cppLoop+0x1108>)
 80086e8:	f7fb fa1e 	bl	8003b28 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80086ec:	4b87      	ldr	r3, [pc, #540]	; (800890c <cppLoop+0x10f4>)
 80086ee:	edd3 7a00 	vldr	s15, [r3]
 80086f2:	eeb0 0a67 	vmov.f32	s0, s15
 80086f6:	488a      	ldr	r0, [pc, #552]	; (8008920 <cppLoop+0x1108>)
 80086f8:	f7fb fa36 	bl	8003b68 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 80086fc:	4b85      	ldr	r3, [pc, #532]	; (8008914 <cppLoop+0x10fc>)
 80086fe:	edd3 7a00 	vldr	s15, [r3]
 8008702:	eeb0 0a67 	vmov.f32	s0, s15
 8008706:	4886      	ldr	r0, [pc, #536]	; (8008920 <cppLoop+0x1108>)
 8008708:	f7fb fa4e 	bl	8003ba8 <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 800870c:	4884      	ldr	r0, [pc, #528]	; (8008920 <cppLoop+0x1108>)
 800870e:	f7fa fc6f 	bl	8002ff0 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008712:	4883      	ldr	r0, [pc, #524]	; (8008920 <cppLoop+0x1108>)
 8008714:	f7fb fd18 	bl	8004148 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008718:	f04f 32ff 	mov.w	r2, #4294967295
 800871c:	2100      	movs	r1, #0
 800871e:	487a      	ldr	r0, [pc, #488]	; (8008908 <cppLoop+0x10f0>)
 8008720:	f7f9 fc38 	bl	8001f94 <_ZN3LED2LREaa>
		}

		break;
 8008724:	f000 bfbd 	b.w	80096a2 <cppLoop+0x1e8a>

	case 6:
		led.fullColor('R');
 8008728:	2152      	movs	r1, #82	; 0x52
 800872a:	4877      	ldr	r0, [pc, #476]	; (8008908 <cppLoop+0x10f0>)
 800872c:	f7f9 fb76 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008730:	f7f8 fcb6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008734:	2100      	movs	r1, #0
 8008736:	2000      	movs	r0, #0
 8008738:	f7f8 fcc2 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 800873c:	4878      	ldr	r0, [pc, #480]	; (8008920 <cppLoop+0x1108>)
 800873e:	f7fb fa63 	bl	8003c08 <_ZN9LineTrace15getMaxVelocity2Ev>
 8008742:	ee10 3a10 	vmov	r3, s0
 8008746:	4618      	mov	r0, r3
 8008748:	f7f7 ff16 	bl	8000578 <__aeabi_f2d>
 800874c:	4603      	mov	r3, r0
 800874e:	460c      	mov	r4, r1
 8008750:	461a      	mov	r2, r3
 8008752:	4623      	mov	r3, r4
 8008754:	486e      	ldr	r0, [pc, #440]	; (8008910 <cppLoop+0x10f8>)
 8008756:	f7f8 fcde 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 800875a:	2101      	movs	r1, #1
 800875c:	2000      	movs	r0, #0
 800875e:	f7f8 fcaf 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8008762:	486f      	ldr	r0, [pc, #444]	; (8008920 <cppLoop+0x1108>)
 8008764:	f7fb fa70 	bl	8003c48 <_ZN9LineTrace15getMinVelocity2Ev>
 8008768:	ee10 3a10 	vmov	r3, s0
 800876c:	4618      	mov	r0, r3
 800876e:	f7f7 ff03 	bl	8000578 <__aeabi_f2d>
 8008772:	4603      	mov	r3, r0
 8008774:	460c      	mov	r4, r1
 8008776:	461a      	mov	r2, r3
 8008778:	4623      	mov	r3, r4
 800877a:	486a      	ldr	r0, [pc, #424]	; (8008924 <cppLoop+0x110c>)
 800877c:	f7f8 fccb 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008780:	4866      	ldr	r0, [pc, #408]	; (800891c <cppLoop+0x1104>)
 8008782:	f7f9 fae7 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008786:	4603      	mov	r3, r0
 8008788:	2b08      	cmp	r3, #8
 800878a:	bf0c      	ite	eq
 800878c:	2301      	moveq	r3, #1
 800878e:	2300      	movne	r3, #0
 8008790:	b2db      	uxtb	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	d022      	beq.n	80087dc <cppLoop+0xfc4>
			led.LR(-1, 1);
 8008796:	2201      	movs	r2, #1
 8008798:	f04f 31ff 	mov.w	r1, #4294967295
 800879c:	485a      	ldr	r0, [pc, #360]	; (8008908 <cppLoop+0x10f0>)
 800879e:	f7f9 fbf9 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80087a2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80087a6:	f001 f8b3 	bl	8009910 <HAL_Delay>

			selector_vel2++;
 80087aa:	4b5f      	ldr	r3, [pc, #380]	; (8008928 <cppLoop+0x1110>)
 80087ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	3301      	adds	r3, #1
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	b21a      	sxth	r2, r3
 80087b8:	4b5b      	ldr	r3, [pc, #364]	; (8008928 <cppLoop+0x1110>)
 80087ba:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 80087bc:	4b5a      	ldr	r3, [pc, #360]	; (8008928 <cppLoop+0x1110>)
 80087be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	dd02      	ble.n	80087cc <cppLoop+0xfb4>
 80087c6:	4b58      	ldr	r3, [pc, #352]	; (8008928 <cppLoop+0x1110>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80087cc:	2200      	movs	r2, #0
 80087ce:	f04f 31ff 	mov.w	r1, #4294967295
 80087d2:	484d      	ldr	r0, [pc, #308]	; (8008908 <cppLoop+0x10f0>)
 80087d4:	f7f9 fbde 	bl	8001f94 <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 80087d8:	f000 bf65 	b.w	80096a6 <cppLoop+0x1e8e>
		else if(joy_stick.getValue() == JOY_R){
 80087dc:	484f      	ldr	r0, [pc, #316]	; (800891c <cppLoop+0x1104>)
 80087de:	f7f9 fab9 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b10      	cmp	r3, #16
 80087e6:	bf0c      	ite	eq
 80087e8:	2301      	moveq	r3, #1
 80087ea:	2300      	movne	r3, #0
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d03c      	beq.n	800886c <cppLoop+0x1054>
			led.LR(-1, 1);
 80087f2:	2201      	movs	r2, #1
 80087f4:	f04f 31ff 	mov.w	r1, #4294967295
 80087f8:	4843      	ldr	r0, [pc, #268]	; (8008908 <cppLoop+0x10f0>)
 80087fa:	f7f9 fbcb 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80087fe:	2064      	movs	r0, #100	; 0x64
 8008800:	f001 f886 	bl	8009910 <HAL_Delay>
			if(selector_vel2 == 0)
 8008804:	4b48      	ldr	r3, [pc, #288]	; (8008928 <cppLoop+0x1110>)
 8008806:	f9b3 3000 	ldrsh.w	r3, [r3]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d113      	bne.n	8008836 <cppLoop+0x101e>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 800880e:	4b3f      	ldr	r3, [pc, #252]	; (800890c <cppLoop+0x10f4>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4618      	mov	r0, r3
 8008814:	f7f7 feb0 	bl	8000578 <__aeabi_f2d>
 8008818:	a339      	add	r3, pc, #228	; (adr r3, 8008900 <cppLoop+0x10e8>)
 800881a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881e:	f7f7 fd4d 	bl	80002bc <__adddf3>
 8008822:	4603      	mov	r3, r0
 8008824:	460c      	mov	r4, r1
 8008826:	4618      	mov	r0, r3
 8008828:	4621      	mov	r1, r4
 800882a:	f7f8 f9f5 	bl	8000c18 <__aeabi_d2f>
 800882e:	4602      	mov	r2, r0
 8008830:	4b36      	ldr	r3, [pc, #216]	; (800890c <cppLoop+0x10f4>)
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	e012      	b.n	800885c <cppLoop+0x1044>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008836:	4b37      	ldr	r3, [pc, #220]	; (8008914 <cppLoop+0x10fc>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4618      	mov	r0, r3
 800883c:	f7f7 fe9c 	bl	8000578 <__aeabi_f2d>
 8008840:	a32f      	add	r3, pc, #188	; (adr r3, 8008900 <cppLoop+0x10e8>)
 8008842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008846:	f7f7 fd39 	bl	80002bc <__adddf3>
 800884a:	4603      	mov	r3, r0
 800884c:	460c      	mov	r4, r1
 800884e:	4618      	mov	r0, r3
 8008850:	4621      	mov	r1, r4
 8008852:	f7f8 f9e1 	bl	8000c18 <__aeabi_d2f>
 8008856:	4602      	mov	r2, r0
 8008858:	4b2e      	ldr	r3, [pc, #184]	; (8008914 <cppLoop+0x10fc>)
 800885a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800885c:	2200      	movs	r2, #0
 800885e:	f04f 31ff 	mov.w	r1, #4294967295
 8008862:	4829      	ldr	r0, [pc, #164]	; (8008908 <cppLoop+0x10f0>)
 8008864:	f7f9 fb96 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8008868:	f000 bf1d 	b.w	80096a6 <cppLoop+0x1e8e>
		else if(joy_stick.getValue() == JOY_L){
 800886c:	482b      	ldr	r0, [pc, #172]	; (800891c <cppLoop+0x1104>)
 800886e:	f7f9 fa71 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008872:	4603      	mov	r3, r0
 8008874:	2b01      	cmp	r3, #1
 8008876:	bf0c      	ite	eq
 8008878:	2301      	moveq	r3, #1
 800887a:	2300      	movne	r3, #0
 800887c:	b2db      	uxtb	r3, r3
 800887e:	2b00      	cmp	r3, #0
 8008880:	d054      	beq.n	800892c <cppLoop+0x1114>
			led.LR(-1, 1);
 8008882:	2201      	movs	r2, #1
 8008884:	f04f 31ff 	mov.w	r1, #4294967295
 8008888:	481f      	ldr	r0, [pc, #124]	; (8008908 <cppLoop+0x10f0>)
 800888a:	f7f9 fb83 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800888e:	2064      	movs	r0, #100	; 0x64
 8008890:	f001 f83e 	bl	8009910 <HAL_Delay>
			if(selector_vel2 == 0)
 8008894:	4b24      	ldr	r3, [pc, #144]	; (8008928 <cppLoop+0x1110>)
 8008896:	f9b3 3000 	ldrsh.w	r3, [r3]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d113      	bne.n	80088c6 <cppLoop+0x10ae>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 800889e:	4b1b      	ldr	r3, [pc, #108]	; (800890c <cppLoop+0x10f4>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7f7 fe68 	bl	8000578 <__aeabi_f2d>
 80088a8:	a315      	add	r3, pc, #84	; (adr r3, 8008900 <cppLoop+0x10e8>)
 80088aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ae:	f7f7 fd03 	bl	80002b8 <__aeabi_dsub>
 80088b2:	4603      	mov	r3, r0
 80088b4:	460c      	mov	r4, r1
 80088b6:	4618      	mov	r0, r3
 80088b8:	4621      	mov	r1, r4
 80088ba:	f7f8 f9ad 	bl	8000c18 <__aeabi_d2f>
 80088be:	4602      	mov	r2, r0
 80088c0:	4b12      	ldr	r3, [pc, #72]	; (800890c <cppLoop+0x10f4>)
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	e012      	b.n	80088ec <cppLoop+0x10d4>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 80088c6:	4b13      	ldr	r3, [pc, #76]	; (8008914 <cppLoop+0x10fc>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7f7 fe54 	bl	8000578 <__aeabi_f2d>
 80088d0:	a30b      	add	r3, pc, #44	; (adr r3, 8008900 <cppLoop+0x10e8>)
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	f7f7 fcef 	bl	80002b8 <__aeabi_dsub>
 80088da:	4603      	mov	r3, r0
 80088dc:	460c      	mov	r4, r1
 80088de:	4618      	mov	r0, r3
 80088e0:	4621      	mov	r1, r4
 80088e2:	f7f8 f999 	bl	8000c18 <__aeabi_d2f>
 80088e6:	4602      	mov	r2, r0
 80088e8:	4b0a      	ldr	r3, [pc, #40]	; (8008914 <cppLoop+0x10fc>)
 80088ea:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80088ec:	2200      	movs	r2, #0
 80088ee:	f04f 31ff 	mov.w	r1, #4294967295
 80088f2:	4805      	ldr	r0, [pc, #20]	; (8008908 <cppLoop+0x10f0>)
 80088f4:	f7f9 fb4e 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 80088f8:	f000 bed5 	b.w	80096a6 <cppLoop+0x1e8e>
 80088fc:	f3af 8000 	nop.w
 8008900:	9999999a 	.word	0x9999999a
 8008904:	3fb99999 	.word	0x3fb99999
 8008908:	20000600 	.word	0x20000600
 800890c:	2003d4a0 	.word	0x2003d4a0
 8008910:	0801a144 	.word	0x0801a144
 8008914:	2003d4b0 	.word	0x2003d4b0
 8008918:	0801a0fc 	.word	0x0801a0fc
 800891c:	200005f4 	.word	0x200005f4
 8008920:	20017dd0 	.word	0x20017dd0
 8008924:	0801a108 	.word	0x0801a108
 8008928:	2003d45c 	.word	0x2003d45c
		else if(joy_stick.getValue() == JOY_C){
 800892c:	48b4      	ldr	r0, [pc, #720]	; (8008c00 <cppLoop+0x13e8>)
 800892e:	f7f9 fa11 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008932:	4603      	mov	r3, r0
 8008934:	2b02      	cmp	r3, #2
 8008936:	bf0c      	ite	eq
 8008938:	2301      	moveq	r3, #1
 800893a:	2300      	movne	r3, #0
 800893c:	b2db      	uxtb	r3, r3
 800893e:	2b00      	cmp	r3, #0
 8008940:	f000 86b1 	beq.w	80096a6 <cppLoop+0x1e8e>
			led.LR(-1, 1);
 8008944:	2201      	movs	r2, #1
 8008946:	f04f 31ff 	mov.w	r1, #4294967295
 800894a:	48ae      	ldr	r0, [pc, #696]	; (8008c04 <cppLoop+0x13ec>)
 800894c:	f7f9 fb22 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008950:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008954:	f000 ffdc 	bl	8009910 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008958:	2300      	movs	r3, #0
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	4baa      	ldr	r3, [pc, #680]	; (8008c08 <cppLoop+0x13f0>)
 800895e:	2201      	movs	r2, #1
 8008960:	49aa      	ldr	r1, [pc, #680]	; (8008c0c <cppLoop+0x13f4>)
 8008962:	48ab      	ldr	r0, [pc, #684]	; (8008c10 <cppLoop+0x13f8>)
 8008964:	f7f8 fdda 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008968:	2300      	movs	r3, #0
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	4ba9      	ldr	r3, [pc, #676]	; (8008c14 <cppLoop+0x13fc>)
 800896e:	2201      	movs	r2, #1
 8008970:	49a9      	ldr	r1, [pc, #676]	; (8008c18 <cppLoop+0x1400>)
 8008972:	48a7      	ldr	r0, [pc, #668]	; (8008c10 <cppLoop+0x13f8>)
 8008974:	f7f8 fdd2 	bl	800151c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008978:	4ba3      	ldr	r3, [pc, #652]	; (8008c08 <cppLoop+0x13f0>)
 800897a:	edd3 7a00 	vldr	s15, [r3]
 800897e:	eeb0 0a67 	vmov.f32	s0, s15
 8008982:	48a6      	ldr	r0, [pc, #664]	; (8008c1c <cppLoop+0x1404>)
 8008984:	f7fb f8f0 	bl	8003b68 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008988:	4ba2      	ldr	r3, [pc, #648]	; (8008c14 <cppLoop+0x13fc>)
 800898a:	edd3 7a00 	vldr	s15, [r3]
 800898e:	eeb0 0a67 	vmov.f32	s0, s15
 8008992:	48a2      	ldr	r0, [pc, #648]	; (8008c1c <cppLoop+0x1404>)
 8008994:	f7fb f908 	bl	8003ba8 <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008998:	2200      	movs	r2, #0
 800899a:	f04f 31ff 	mov.w	r1, #4294967295
 800899e:	4899      	ldr	r0, [pc, #612]	; (8008c04 <cppLoop+0x13ec>)
 80089a0:	f7f9 faf8 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 80089a4:	f000 be7f 	b.w	80096a6 <cppLoop+0x1e8e>

	case 7:
		led.fullColor('W');
 80089a8:	2157      	movs	r1, #87	; 0x57
 80089aa:	4896      	ldr	r0, [pc, #600]	; (8008c04 <cppLoop+0x13ec>)
 80089ac:	f7f9 fa36 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 80089b0:	f7f8 fb76 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80089b4:	2100      	movs	r1, #0
 80089b6:	2000      	movs	r0, #0
 80089b8:	f7f8 fb82 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 80089bc:	4897      	ldr	r0, [pc, #604]	; (8008c1c <cppLoop+0x1404>)
 80089be:	f7fb f987 	bl	8003cd0 <_ZN9LineTrace9getMaxAccEv>
 80089c2:	ee10 3a10 	vmov	r3, s0
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7f7 fdd6 	bl	8000578 <__aeabi_f2d>
 80089cc:	4603      	mov	r3, r0
 80089ce:	460c      	mov	r4, r1
 80089d0:	461a      	mov	r2, r3
 80089d2:	4623      	mov	r3, r4
 80089d4:	4892      	ldr	r0, [pc, #584]	; (8008c20 <cppLoop+0x1408>)
 80089d6:	f7f8 fb9e 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 80089da:	2101      	movs	r1, #1
 80089dc:	2000      	movs	r0, #0
 80089de:	f7f8 fb6f 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 80089e2:	488e      	ldr	r0, [pc, #568]	; (8008c1c <cppLoop+0x1404>)
 80089e4:	f7fb f9aa 	bl	8003d3c <_ZN9LineTrace9getMaxDecEv>
 80089e8:	ee10 3a10 	vmov	r3, s0
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7f7 fdc3 	bl	8000578 <__aeabi_f2d>
 80089f2:	4603      	mov	r3, r0
 80089f4:	460c      	mov	r4, r1
 80089f6:	461a      	mov	r2, r3
 80089f8:	4623      	mov	r3, r4
 80089fa:	488a      	ldr	r0, [pc, #552]	; (8008c24 <cppLoop+0x140c>)
 80089fc:	f7f8 fb8b 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008a00:	487f      	ldr	r0, [pc, #508]	; (8008c00 <cppLoop+0x13e8>)
 8008a02:	f7f9 f9a7 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b08      	cmp	r3, #8
 8008a0a:	bf0c      	ite	eq
 8008a0c:	2301      	moveq	r3, #1
 8008a0e:	2300      	movne	r3, #0
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d022      	beq.n	8008a5c <cppLoop+0x1244>
			led.LR(-1, 1);
 8008a16:	2201      	movs	r2, #1
 8008a18:	f04f 31ff 	mov.w	r1, #4294967295
 8008a1c:	4879      	ldr	r0, [pc, #484]	; (8008c04 <cppLoop+0x13ec>)
 8008a1e:	f7f9 fab9 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008a22:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008a26:	f000 ff73 	bl	8009910 <HAL_Delay>

			selector_acc++;
 8008a2a:	4b7f      	ldr	r3, [pc, #508]	; (8008c28 <cppLoop+0x1410>)
 8008a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	3301      	adds	r3, #1
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	b21a      	sxth	r2, r3
 8008a38:	4b7b      	ldr	r3, [pc, #492]	; (8008c28 <cppLoop+0x1410>)
 8008a3a:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008a3c:	4b7a      	ldr	r3, [pc, #488]	; (8008c28 <cppLoop+0x1410>)
 8008a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	dd02      	ble.n	8008a4c <cppLoop+0x1234>
 8008a46:	4b78      	ldr	r3, [pc, #480]	; (8008c28 <cppLoop+0x1410>)
 8008a48:	2200      	movs	r2, #0
 8008a4a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f04f 31ff 	mov.w	r1, #4294967295
 8008a52:	486c      	ldr	r0, [pc, #432]	; (8008c04 <cppLoop+0x13ec>)
 8008a54:	f7f9 fa9e 	bl	8001f94 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008a58:	f000 be27 	b.w	80096aa <cppLoop+0x1e92>
		else if(joy_stick.getValue() == JOY_R){
 8008a5c:	4868      	ldr	r0, [pc, #416]	; (8008c00 <cppLoop+0x13e8>)
 8008a5e:	f7f9 f979 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b10      	cmp	r3, #16
 8008a66:	bf0c      	ite	eq
 8008a68:	2301      	moveq	r3, #1
 8008a6a:	2300      	movne	r3, #0
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d03c      	beq.n	8008aec <cppLoop+0x12d4>
			led.LR(-1, 1);
 8008a72:	2201      	movs	r2, #1
 8008a74:	f04f 31ff 	mov.w	r1, #4294967295
 8008a78:	4862      	ldr	r0, [pc, #392]	; (8008c04 <cppLoop+0x13ec>)
 8008a7a:	f7f9 fa8b 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008a7e:	2064      	movs	r0, #100	; 0x64
 8008a80:	f000 ff46 	bl	8009910 <HAL_Delay>
			if(selector_acc == 0){
 8008a84:	4b68      	ldr	r3, [pc, #416]	; (8008c28 <cppLoop+0x1410>)
 8008a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d113      	bne.n	8008ab6 <cppLoop+0x129e>
				adj_acc = adj_acc + 0.1;
 8008a8e:	4b67      	ldr	r3, [pc, #412]	; (8008c2c <cppLoop+0x1414>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7f7 fd70 	bl	8000578 <__aeabi_f2d>
 8008a98:	a357      	add	r3, pc, #348	; (adr r3, 8008bf8 <cppLoop+0x13e0>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	f7f7 fc0d 	bl	80002bc <__adddf3>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	4621      	mov	r1, r4
 8008aaa:	f7f8 f8b5 	bl	8000c18 <__aeabi_d2f>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	4b5e      	ldr	r3, [pc, #376]	; (8008c2c <cppLoop+0x1414>)
 8008ab2:	601a      	str	r2, [r3, #0]
 8008ab4:	e012      	b.n	8008adc <cppLoop+0x12c4>
				adj_dec = adj_dec + 0.1;
 8008ab6:	4b5e      	ldr	r3, [pc, #376]	; (8008c30 <cppLoop+0x1418>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7f7 fd5c 	bl	8000578 <__aeabi_f2d>
 8008ac0:	a34d      	add	r3, pc, #308	; (adr r3, 8008bf8 <cppLoop+0x13e0>)
 8008ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac6:	f7f7 fbf9 	bl	80002bc <__adddf3>
 8008aca:	4603      	mov	r3, r0
 8008acc:	460c      	mov	r4, r1
 8008ace:	4618      	mov	r0, r3
 8008ad0:	4621      	mov	r1, r4
 8008ad2:	f7f8 f8a1 	bl	8000c18 <__aeabi_d2f>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	4b55      	ldr	r3, [pc, #340]	; (8008c30 <cppLoop+0x1418>)
 8008ada:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008adc:	2200      	movs	r2, #0
 8008ade:	f04f 31ff 	mov.w	r1, #4294967295
 8008ae2:	4848      	ldr	r0, [pc, #288]	; (8008c04 <cppLoop+0x13ec>)
 8008ae4:	f7f9 fa56 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8008ae8:	f000 bddf 	b.w	80096aa <cppLoop+0x1e92>
		else if(joy_stick.getValue() == JOY_L){
 8008aec:	4844      	ldr	r0, [pc, #272]	; (8008c00 <cppLoop+0x13e8>)
 8008aee:	f7f9 f931 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	bf0c      	ite	eq
 8008af8:	2301      	moveq	r3, #1
 8008afa:	2300      	movne	r3, #0
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d03c      	beq.n	8008b7c <cppLoop+0x1364>
			led.LR(-1, 1);
 8008b02:	2201      	movs	r2, #1
 8008b04:	f04f 31ff 	mov.w	r1, #4294967295
 8008b08:	483e      	ldr	r0, [pc, #248]	; (8008c04 <cppLoop+0x13ec>)
 8008b0a:	f7f9 fa43 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008b0e:	2064      	movs	r0, #100	; 0x64
 8008b10:	f000 fefe 	bl	8009910 <HAL_Delay>
			if(selector_acc == 0){
 8008b14:	4b44      	ldr	r3, [pc, #272]	; (8008c28 <cppLoop+0x1410>)
 8008b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d113      	bne.n	8008b46 <cppLoop+0x132e>
				adj_acc = adj_acc - 0.1;
 8008b1e:	4b43      	ldr	r3, [pc, #268]	; (8008c2c <cppLoop+0x1414>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7f7 fd28 	bl	8000578 <__aeabi_f2d>
 8008b28:	a333      	add	r3, pc, #204	; (adr r3, 8008bf8 <cppLoop+0x13e0>)
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	f7f7 fbc3 	bl	80002b8 <__aeabi_dsub>
 8008b32:	4603      	mov	r3, r0
 8008b34:	460c      	mov	r4, r1
 8008b36:	4618      	mov	r0, r3
 8008b38:	4621      	mov	r1, r4
 8008b3a:	f7f8 f86d 	bl	8000c18 <__aeabi_d2f>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	4b3a      	ldr	r3, [pc, #232]	; (8008c2c <cppLoop+0x1414>)
 8008b42:	601a      	str	r2, [r3, #0]
 8008b44:	e012      	b.n	8008b6c <cppLoop+0x1354>
				adj_dec = adj_dec - 0.1;
 8008b46:	4b3a      	ldr	r3, [pc, #232]	; (8008c30 <cppLoop+0x1418>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7f7 fd14 	bl	8000578 <__aeabi_f2d>
 8008b50:	a329      	add	r3, pc, #164	; (adr r3, 8008bf8 <cppLoop+0x13e0>)
 8008b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b56:	f7f7 fbaf 	bl	80002b8 <__aeabi_dsub>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	460c      	mov	r4, r1
 8008b5e:	4618      	mov	r0, r3
 8008b60:	4621      	mov	r1, r4
 8008b62:	f7f8 f859 	bl	8000c18 <__aeabi_d2f>
 8008b66:	4602      	mov	r2, r0
 8008b68:	4b31      	ldr	r3, [pc, #196]	; (8008c30 <cppLoop+0x1418>)
 8008b6a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f04f 31ff 	mov.w	r1, #4294967295
 8008b72:	4824      	ldr	r0, [pc, #144]	; (8008c04 <cppLoop+0x13ec>)
 8008b74:	f7f9 fa0e 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8008b78:	f000 bd97 	b.w	80096aa <cppLoop+0x1e92>
		else if(joy_stick.getValue() == JOY_C){
 8008b7c:	4820      	ldr	r0, [pc, #128]	; (8008c00 <cppLoop+0x13e8>)
 8008b7e:	f7f9 f8e9 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b02      	cmp	r3, #2
 8008b86:	bf0c      	ite	eq
 8008b88:	2301      	moveq	r3, #1
 8008b8a:	2300      	movne	r3, #0
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f000 858b 	beq.w	80096aa <cppLoop+0x1e92>
			led.LR(-1, 1);
 8008b94:	2201      	movs	r2, #1
 8008b96:	f04f 31ff 	mov.w	r1, #4294967295
 8008b9a:	481a      	ldr	r0, [pc, #104]	; (8008c04 <cppLoop+0x13ec>)
 8008b9c:	f7f9 f9fa 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008ba0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008ba4:	f000 feb4 	bl	8009910 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008ba8:	2300      	movs	r3, #0
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	4b1f      	ldr	r3, [pc, #124]	; (8008c2c <cppLoop+0x1414>)
 8008bae:	2201      	movs	r2, #1
 8008bb0:	4920      	ldr	r1, [pc, #128]	; (8008c34 <cppLoop+0x141c>)
 8008bb2:	4817      	ldr	r0, [pc, #92]	; (8008c10 <cppLoop+0x13f8>)
 8008bb4:	f7f8 fcb2 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008bb8:	2300      	movs	r3, #0
 8008bba:	9300      	str	r3, [sp, #0]
 8008bbc:	4b1c      	ldr	r3, [pc, #112]	; (8008c30 <cppLoop+0x1418>)
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	491d      	ldr	r1, [pc, #116]	; (8008c38 <cppLoop+0x1420>)
 8008bc2:	4813      	ldr	r0, [pc, #76]	; (8008c10 <cppLoop+0x13f8>)
 8008bc4:	f7f8 fcaa 	bl	800151c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008bc8:	4b18      	ldr	r3, [pc, #96]	; (8008c2c <cppLoop+0x1414>)
 8008bca:	edd3 7a00 	vldr	s15, [r3]
 8008bce:	4b18      	ldr	r3, [pc, #96]	; (8008c30 <cppLoop+0x1418>)
 8008bd0:	ed93 7a00 	vldr	s14, [r3]
 8008bd4:	eef0 0a47 	vmov.f32	s1, s14
 8008bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8008bdc:	480f      	ldr	r0, [pc, #60]	; (8008c1c <cppLoop+0x1404>)
 8008bde:	f7fb f843 	bl	8003c68 <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008be2:	2200      	movs	r2, #0
 8008be4:	f04f 31ff 	mov.w	r1, #4294967295
 8008be8:	4806      	ldr	r0, [pc, #24]	; (8008c04 <cppLoop+0x13ec>)
 8008bea:	f7f9 f9d3 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8008bee:	f000 bd5c 	b.w	80096aa <cppLoop+0x1e92>
 8008bf2:	bf00      	nop
 8008bf4:	f3af 8000 	nop.w
 8008bf8:	9999999a 	.word	0x9999999a
 8008bfc:	3fb99999 	.word	0x3fb99999
 8008c00:	200005f4 	.word	0x200005f4
 8008c04:	20000600 	.word	0x20000600
 8008c08:	2003d4a0 	.word	0x2003d4a0
 8008c0c:	0801a150 	.word	0x0801a150
 8008c10:	0801a0d8 	.word	0x0801a0d8
 8008c14:	2003d4b0 	.word	0x2003d4b0
 8008c18:	0801a15c 	.word	0x0801a15c
 8008c1c:	20017dd0 	.word	0x20017dd0
 8008c20:	0801a168 	.word	0x0801a168
 8008c24:	0801a174 	.word	0x0801a174
 8008c28:	2003d456 	.word	0x2003d456
 8008c2c:	2003d4b8 	.word	0x2003d4b8
 8008c30:	2003d4c0 	.word	0x2003d4c0
 8008c34:	0801a180 	.word	0x0801a180
 8008c38:	0801a188 	.word	0x0801a188

	case 8:
		led.fullColor('W');
 8008c3c:	2157      	movs	r1, #87	; 0x57
 8008c3e:	4894      	ldr	r0, [pc, #592]	; (8008e90 <cppLoop+0x1678>)
 8008c40:	f7f9 f8ec 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008c44:	f7f8 fa2c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008c48:	2100      	movs	r1, #0
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	f7f8 fa38 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8008c50:	4890      	ldr	r0, [pc, #576]	; (8008e94 <cppLoop+0x167c>)
 8008c52:	f7fb f861 	bl	8003d18 <_ZN9LineTrace10getMaxAcc2Ev>
 8008c56:	ee10 3a10 	vmov	r3, s0
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7f7 fc8c 	bl	8000578 <__aeabi_f2d>
 8008c60:	4603      	mov	r3, r0
 8008c62:	460c      	mov	r4, r1
 8008c64:	461a      	mov	r2, r3
 8008c66:	4623      	mov	r3, r4
 8008c68:	488b      	ldr	r0, [pc, #556]	; (8008e98 <cppLoop+0x1680>)
 8008c6a:	f7f8 fa54 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 8008c6e:	2101      	movs	r1, #1
 8008c70:	2000      	movs	r0, #0
 8008c72:	f7f8 fa25 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8008c76:	4887      	ldr	r0, [pc, #540]	; (8008e94 <cppLoop+0x167c>)
 8008c78:	f7fb f83c 	bl	8003cf4 <_ZN9LineTrace10getMaxDec2Ev>
 8008c7c:	ee10 3a10 	vmov	r3, s0
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7f7 fc79 	bl	8000578 <__aeabi_f2d>
 8008c86:	4603      	mov	r3, r0
 8008c88:	460c      	mov	r4, r1
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	4623      	mov	r3, r4
 8008c8e:	4883      	ldr	r0, [pc, #524]	; (8008e9c <cppLoop+0x1684>)
 8008c90:	f7f8 fa41 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008c94:	4882      	ldr	r0, [pc, #520]	; (8008ea0 <cppLoop+0x1688>)
 8008c96:	f7f9 f85d 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b08      	cmp	r3, #8
 8008c9e:	bf0c      	ite	eq
 8008ca0:	2301      	moveq	r3, #1
 8008ca2:	2300      	movne	r3, #0
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d022      	beq.n	8008cf0 <cppLoop+0x14d8>
			led.LR(-1, 1);
 8008caa:	2201      	movs	r2, #1
 8008cac:	f04f 31ff 	mov.w	r1, #4294967295
 8008cb0:	4877      	ldr	r0, [pc, #476]	; (8008e90 <cppLoop+0x1678>)
 8008cb2:	f7f9 f96f 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008cb6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008cba:	f000 fe29 	bl	8009910 <HAL_Delay>

			selector_acc2++;
 8008cbe:	4b79      	ldr	r3, [pc, #484]	; (8008ea4 <cppLoop+0x168c>)
 8008cc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	b21a      	sxth	r2, r3
 8008ccc:	4b75      	ldr	r3, [pc, #468]	; (8008ea4 <cppLoop+0x168c>)
 8008cce:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8008cd0:	4b74      	ldr	r3, [pc, #464]	; (8008ea4 <cppLoop+0x168c>)
 8008cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	dd02      	ble.n	8008ce0 <cppLoop+0x14c8>
 8008cda:	4b72      	ldr	r3, [pc, #456]	; (8008ea4 <cppLoop+0x168c>)
 8008cdc:	2200      	movs	r2, #0
 8008cde:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ce6:	486a      	ldr	r0, [pc, #424]	; (8008e90 <cppLoop+0x1678>)
 8008ce8:	f7f9 f954 	bl	8001f94 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8008cec:	f000 bcdf 	b.w	80096ae <cppLoop+0x1e96>
		else if(joy_stick.getValue() == JOY_R){
 8008cf0:	486b      	ldr	r0, [pc, #428]	; (8008ea0 <cppLoop+0x1688>)
 8008cf2:	f7f9 f82f 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b10      	cmp	r3, #16
 8008cfa:	bf0c      	ite	eq
 8008cfc:	2301      	moveq	r3, #1
 8008cfe:	2300      	movne	r3, #0
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d03c      	beq.n	8008d80 <cppLoop+0x1568>
			led.LR(-1, 1);
 8008d06:	2201      	movs	r2, #1
 8008d08:	f04f 31ff 	mov.w	r1, #4294967295
 8008d0c:	4860      	ldr	r0, [pc, #384]	; (8008e90 <cppLoop+0x1678>)
 8008d0e:	f7f9 f941 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008d12:	2064      	movs	r0, #100	; 0x64
 8008d14:	f000 fdfc 	bl	8009910 <HAL_Delay>
			if(selector_acc2 == 0){
 8008d18:	4b62      	ldr	r3, [pc, #392]	; (8008ea4 <cppLoop+0x168c>)
 8008d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d113      	bne.n	8008d4a <cppLoop+0x1532>
				adj_acc2 = adj_acc2 + 0.1;
 8008d22:	4b61      	ldr	r3, [pc, #388]	; (8008ea8 <cppLoop+0x1690>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7f7 fc26 	bl	8000578 <__aeabi_f2d>
 8008d2c:	a356      	add	r3, pc, #344	; (adr r3, 8008e88 <cppLoop+0x1670>)
 8008d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d32:	f7f7 fac3 	bl	80002bc <__adddf3>
 8008d36:	4603      	mov	r3, r0
 8008d38:	460c      	mov	r4, r1
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	4621      	mov	r1, r4
 8008d3e:	f7f7 ff6b 	bl	8000c18 <__aeabi_d2f>
 8008d42:	4602      	mov	r2, r0
 8008d44:	4b58      	ldr	r3, [pc, #352]	; (8008ea8 <cppLoop+0x1690>)
 8008d46:	601a      	str	r2, [r3, #0]
 8008d48:	e012      	b.n	8008d70 <cppLoop+0x1558>
				adj_dec2 = adj_dec2 + 0.1;
 8008d4a:	4b58      	ldr	r3, [pc, #352]	; (8008eac <cppLoop+0x1694>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7f7 fc12 	bl	8000578 <__aeabi_f2d>
 8008d54:	a34c      	add	r3, pc, #304	; (adr r3, 8008e88 <cppLoop+0x1670>)
 8008d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5a:	f7f7 faaf 	bl	80002bc <__adddf3>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	460c      	mov	r4, r1
 8008d62:	4618      	mov	r0, r3
 8008d64:	4621      	mov	r1, r4
 8008d66:	f7f7 ff57 	bl	8000c18 <__aeabi_d2f>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	4b4f      	ldr	r3, [pc, #316]	; (8008eac <cppLoop+0x1694>)
 8008d6e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008d70:	2200      	movs	r2, #0
 8008d72:	f04f 31ff 	mov.w	r1, #4294967295
 8008d76:	4846      	ldr	r0, [pc, #280]	; (8008e90 <cppLoop+0x1678>)
 8008d78:	f7f9 f90c 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8008d7c:	f000 bc97 	b.w	80096ae <cppLoop+0x1e96>
		else if(joy_stick.getValue() == JOY_L){
 8008d80:	4847      	ldr	r0, [pc, #284]	; (8008ea0 <cppLoop+0x1688>)
 8008d82:	f7f8 ffe7 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	bf0c      	ite	eq
 8008d8c:	2301      	moveq	r3, #1
 8008d8e:	2300      	movne	r3, #0
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d03c      	beq.n	8008e10 <cppLoop+0x15f8>
			led.LR(-1, 1);
 8008d96:	2201      	movs	r2, #1
 8008d98:	f04f 31ff 	mov.w	r1, #4294967295
 8008d9c:	483c      	ldr	r0, [pc, #240]	; (8008e90 <cppLoop+0x1678>)
 8008d9e:	f7f9 f8f9 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008da2:	2064      	movs	r0, #100	; 0x64
 8008da4:	f000 fdb4 	bl	8009910 <HAL_Delay>
			if(selector_acc2 == 0){
 8008da8:	4b3e      	ldr	r3, [pc, #248]	; (8008ea4 <cppLoop+0x168c>)
 8008daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d113      	bne.n	8008dda <cppLoop+0x15c2>
				adj_acc2 = adj_acc2 - 0.1;
 8008db2:	4b3d      	ldr	r3, [pc, #244]	; (8008ea8 <cppLoop+0x1690>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7f7 fbde 	bl	8000578 <__aeabi_f2d>
 8008dbc:	a332      	add	r3, pc, #200	; (adr r3, 8008e88 <cppLoop+0x1670>)
 8008dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc2:	f7f7 fa79 	bl	80002b8 <__aeabi_dsub>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	460c      	mov	r4, r1
 8008dca:	4618      	mov	r0, r3
 8008dcc:	4621      	mov	r1, r4
 8008dce:	f7f7 ff23 	bl	8000c18 <__aeabi_d2f>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	4b34      	ldr	r3, [pc, #208]	; (8008ea8 <cppLoop+0x1690>)
 8008dd6:	601a      	str	r2, [r3, #0]
 8008dd8:	e012      	b.n	8008e00 <cppLoop+0x15e8>
				adj_dec2 = adj_dec2 - 0.1;
 8008dda:	4b34      	ldr	r3, [pc, #208]	; (8008eac <cppLoop+0x1694>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7f7 fbca 	bl	8000578 <__aeabi_f2d>
 8008de4:	a328      	add	r3, pc, #160	; (adr r3, 8008e88 <cppLoop+0x1670>)
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	f7f7 fa65 	bl	80002b8 <__aeabi_dsub>
 8008dee:	4603      	mov	r3, r0
 8008df0:	460c      	mov	r4, r1
 8008df2:	4618      	mov	r0, r3
 8008df4:	4621      	mov	r1, r4
 8008df6:	f7f7 ff0f 	bl	8000c18 <__aeabi_d2f>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	4b2b      	ldr	r3, [pc, #172]	; (8008eac <cppLoop+0x1694>)
 8008dfe:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008e00:	2200      	movs	r2, #0
 8008e02:	f04f 31ff 	mov.w	r1, #4294967295
 8008e06:	4822      	ldr	r0, [pc, #136]	; (8008e90 <cppLoop+0x1678>)
 8008e08:	f7f9 f8c4 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8008e0c:	f000 bc4f 	b.w	80096ae <cppLoop+0x1e96>
		else if(joy_stick.getValue() == JOY_C){
 8008e10:	4823      	ldr	r0, [pc, #140]	; (8008ea0 <cppLoop+0x1688>)
 8008e12:	f7f8 ff9f 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	bf0c      	ite	eq
 8008e1c:	2301      	moveq	r3, #1
 8008e1e:	2300      	movne	r3, #0
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 8443 	beq.w	80096ae <cppLoop+0x1e96>
			led.LR(-1, 1);
 8008e28:	2201      	movs	r2, #1
 8008e2a:	f04f 31ff 	mov.w	r1, #4294967295
 8008e2e:	4818      	ldr	r0, [pc, #96]	; (8008e90 <cppLoop+0x1678>)
 8008e30:	f7f9 f8b0 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008e34:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008e38:	f000 fd6a 	bl	8009910 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	9300      	str	r3, [sp, #0]
 8008e40:	4b19      	ldr	r3, [pc, #100]	; (8008ea8 <cppLoop+0x1690>)
 8008e42:	2201      	movs	r2, #1
 8008e44:	491a      	ldr	r1, [pc, #104]	; (8008eb0 <cppLoop+0x1698>)
 8008e46:	481b      	ldr	r0, [pc, #108]	; (8008eb4 <cppLoop+0x169c>)
 8008e48:	f7f8 fb68 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	9300      	str	r3, [sp, #0]
 8008e50:	4b16      	ldr	r3, [pc, #88]	; (8008eac <cppLoop+0x1694>)
 8008e52:	2201      	movs	r2, #1
 8008e54:	4918      	ldr	r1, [pc, #96]	; (8008eb8 <cppLoop+0x16a0>)
 8008e56:	4817      	ldr	r0, [pc, #92]	; (8008eb4 <cppLoop+0x169c>)
 8008e58:	f7f8 fb60 	bl	800151c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 8008e5c:	4b12      	ldr	r3, [pc, #72]	; (8008ea8 <cppLoop+0x1690>)
 8008e5e:	edd3 7a00 	vldr	s15, [r3]
 8008e62:	4b12      	ldr	r3, [pc, #72]	; (8008eac <cppLoop+0x1694>)
 8008e64:	ed93 7a00 	vldr	s14, [r3]
 8008e68:	eef0 0a47 	vmov.f32	s1, s14
 8008e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8008e70:	4808      	ldr	r0, [pc, #32]	; (8008e94 <cppLoop+0x167c>)
 8008e72:	f7fa ff13 	bl	8003c9c <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 8008e76:	2200      	movs	r2, #0
 8008e78:	f04f 31ff 	mov.w	r1, #4294967295
 8008e7c:	4804      	ldr	r0, [pc, #16]	; (8008e90 <cppLoop+0x1678>)
 8008e7e:	f7f9 f889 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8008e82:	f000 bc14 	b.w	80096ae <cppLoop+0x1e96>
 8008e86:	bf00      	nop
 8008e88:	9999999a 	.word	0x9999999a
 8008e8c:	3fb99999 	.word	0x3fb99999
 8008e90:	20000600 	.word	0x20000600
 8008e94:	20017dd0 	.word	0x20017dd0
 8008e98:	0801a190 	.word	0x0801a190
 8008e9c:	0801a19c 	.word	0x0801a19c
 8008ea0:	200005f4 	.word	0x200005f4
 8008ea4:	2003d458 	.word	0x2003d458
 8008ea8:	2003d4c8 	.word	0x2003d4c8
 8008eac:	2003d4d0 	.word	0x2003d4d0
 8008eb0:	0801a1a8 	.word	0x0801a1a8
 8008eb4:	0801a0d8 	.word	0x0801a0d8
 8008eb8:	0801a1b4 	.word	0x0801a1b4

	case 9:
		led.fullColor('W');
 8008ebc:	2157      	movs	r1, #87	; 0x57
 8008ebe:	48b2      	ldr	r0, [pc, #712]	; (8009188 <cppLoop+0x1970>)
 8008ec0:	f7f8 ffac 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 8008ec4:	f7f8 f8ec 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008ec8:	2100      	movs	r1, #0
 8008eca:	2000      	movs	r0, #0
 8008ecc:	f7f8 f8f8 	bl	80010c0 <lcd_locate>
		lcd_printf("F%4.2lf   ", line_trace.getKpFast()*1000);
 8008ed0:	48ae      	ldr	r0, [pc, #696]	; (800918c <cppLoop+0x1974>)
 8008ed2:	f7fa fdfc 	bl	8003ace <_ZN9LineTrace9getKpFastEv>
 8008ed6:	eeb0 7a40 	vmov.f32	s14, s0
 8008eda:	eddf 7aad 	vldr	s15, [pc, #692]	; 8009190 <cppLoop+0x1978>
 8008ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ee2:	ee17 0a90 	vmov	r0, s15
 8008ee6:	f7f7 fb47 	bl	8000578 <__aeabi_f2d>
 8008eea:	4603      	mov	r3, r0
 8008eec:	460c      	mov	r4, r1
 8008eee:	461a      	mov	r2, r3
 8008ef0:	4623      	mov	r3, r4
 8008ef2:	48a8      	ldr	r0, [pc, #672]	; (8009194 <cppLoop+0x197c>)
 8008ef4:	f7f8 f90f 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 8008ef8:	2101      	movs	r1, #1
 8008efa:	2000      	movs	r0, #0
 8008efc:	f7f8 f8e0 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKiFast()*100, line_trace.getKdFast()*10000);
 8008f00:	48a2      	ldr	r0, [pc, #648]	; (800918c <cppLoop+0x1974>)
 8008f02:	f7fa fdf3 	bl	8003aec <_ZN9LineTrace9getKiFastEv>
 8008f06:	eeb0 7a40 	vmov.f32	s14, s0
 8008f0a:	eddf 7aa3 	vldr	s15, [pc, #652]	; 8009198 <cppLoop+0x1980>
 8008f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f12:	ee17 0a90 	vmov	r0, s15
 8008f16:	f7f7 fb2f 	bl	8000578 <__aeabi_f2d>
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	460e      	mov	r6, r1
 8008f1e:	489b      	ldr	r0, [pc, #620]	; (800918c <cppLoop+0x1974>)
 8008f20:	f7fa fdf3 	bl	8003b0a <_ZN9LineTrace9getKdFastEv>
 8008f24:	eeb0 7a40 	vmov.f32	s14, s0
 8008f28:	eddf 7a9c 	vldr	s15, [pc, #624]	; 800919c <cppLoop+0x1984>
 8008f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f30:	ee17 0a90 	vmov	r0, s15
 8008f34:	f7f7 fb20 	bl	8000578 <__aeabi_f2d>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	e9cd 3400 	strd	r3, r4, [sp]
 8008f40:	462a      	mov	r2, r5
 8008f42:	4633      	mov	r3, r6
 8008f44:	4896      	ldr	r0, [pc, #600]	; (80091a0 <cppLoop+0x1988>)
 8008f46:	f7f8 f8e6 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008f4a:	4896      	ldr	r0, [pc, #600]	; (80091a4 <cppLoop+0x198c>)
 8008f4c:	f7f8 ff02 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b08      	cmp	r3, #8
 8008f54:	bf0c      	ite	eq
 8008f56:	2301      	moveq	r3, #1
 8008f58:	2300      	movne	r3, #0
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d021      	beq.n	8008fa4 <cppLoop+0x178c>
			led.LR(-1, 1);
 8008f60:	2201      	movs	r2, #1
 8008f62:	f04f 31ff 	mov.w	r1, #4294967295
 8008f66:	4888      	ldr	r0, [pc, #544]	; (8009188 <cppLoop+0x1970>)
 8008f68:	f7f9 f814 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008f6c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008f70:	f000 fcce 	bl	8009910 <HAL_Delay>

			selector_fast++;
 8008f74:	4b8c      	ldr	r3, [pc, #560]	; (80091a8 <cppLoop+0x1990>)
 8008f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	b21a      	sxth	r2, r3
 8008f82:	4b89      	ldr	r3, [pc, #548]	; (80091a8 <cppLoop+0x1990>)
 8008f84:	801a      	strh	r2, [r3, #0]
			if(selector_fast >= 3) selector_fast = 0;
 8008f86:	4b88      	ldr	r3, [pc, #544]	; (80091a8 <cppLoop+0x1990>)
 8008f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	dd02      	ble.n	8008f96 <cppLoop+0x177e>
 8008f90:	4b85      	ldr	r3, [pc, #532]	; (80091a8 <cppLoop+0x1990>)
 8008f92:	2200      	movs	r2, #0
 8008f94:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008f96:	2200      	movs	r2, #0
 8008f98:	f04f 31ff 	mov.w	r1, #4294967295
 8008f9c:	487a      	ldr	r0, [pc, #488]	; (8009188 <cppLoop+0x1970>)
 8008f9e:	f7f8 fff9 	bl	8001f94 <_ZN3LED2LREaa>
			user_fclose();

			led.LR(-1, 0);
		}
		*/
		break;
 8008fa2:	e386      	b.n	80096b2 <cppLoop+0x1e9a>
		else if(joy_stick.getValue() == JOY_R){
 8008fa4:	487f      	ldr	r0, [pc, #508]	; (80091a4 <cppLoop+0x198c>)
 8008fa6:	f7f8 fed5 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b10      	cmp	r3, #16
 8008fae:	bf0c      	ite	eq
 8008fb0:	2301      	moveq	r3, #1
 8008fb2:	2300      	movne	r3, #0
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d058      	beq.n	800906c <cppLoop+0x1854>
			led.LR(-1, 1);
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8008fc0:	4871      	ldr	r0, [pc, #452]	; (8009188 <cppLoop+0x1970>)
 8008fc2:	f7f8 ffe7 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008fc6:	2064      	movs	r0, #100	; 0x64
 8008fc8:	f000 fca2 	bl	8009910 <HAL_Delay>
			if(selector_fast == 0){
 8008fcc:	4b76      	ldr	r3, [pc, #472]	; (80091a8 <cppLoop+0x1990>)
 8008fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d113      	bne.n	8008ffe <cppLoop+0x17e6>
				adj_kp_fast = adj_kp_fast + 0.00001;
 8008fd6:	4b75      	ldr	r3, [pc, #468]	; (80091ac <cppLoop+0x1994>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7f7 facc 	bl	8000578 <__aeabi_f2d>
 8008fe0:	a363      	add	r3, pc, #396	; (adr r3, 8009170 <cppLoop+0x1958>)
 8008fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe6:	f7f7 f969 	bl	80002bc <__adddf3>
 8008fea:	4603      	mov	r3, r0
 8008fec:	460c      	mov	r4, r1
 8008fee:	4618      	mov	r0, r3
 8008ff0:	4621      	mov	r1, r4
 8008ff2:	f7f7 fe11 	bl	8000c18 <__aeabi_d2f>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	4b6c      	ldr	r3, [pc, #432]	; (80091ac <cppLoop+0x1994>)
 8008ffa:	601a      	str	r2, [r3, #0]
 8008ffc:	e02b      	b.n	8009056 <cppLoop+0x183e>
			else if(selector_fast == 1){
 8008ffe:	4b6a      	ldr	r3, [pc, #424]	; (80091a8 <cppLoop+0x1990>)
 8009000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d113      	bne.n	8009030 <cppLoop+0x1818>
				adj_ki_fast = adj_ki_fast + 0.0001;
 8009008:	4b69      	ldr	r3, [pc, #420]	; (80091b0 <cppLoop+0x1998>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4618      	mov	r0, r3
 800900e:	f7f7 fab3 	bl	8000578 <__aeabi_f2d>
 8009012:	a359      	add	r3, pc, #356	; (adr r3, 8009178 <cppLoop+0x1960>)
 8009014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009018:	f7f7 f950 	bl	80002bc <__adddf3>
 800901c:	4603      	mov	r3, r0
 800901e:	460c      	mov	r4, r1
 8009020:	4618      	mov	r0, r3
 8009022:	4621      	mov	r1, r4
 8009024:	f7f7 fdf8 	bl	8000c18 <__aeabi_d2f>
 8009028:	4602      	mov	r2, r0
 800902a:	4b61      	ldr	r3, [pc, #388]	; (80091b0 <cppLoop+0x1998>)
 800902c:	601a      	str	r2, [r3, #0]
 800902e:	e012      	b.n	8009056 <cppLoop+0x183e>
				adj_kd_fast = adj_kd_fast + 0.000001;
 8009030:	4b60      	ldr	r3, [pc, #384]	; (80091b4 <cppLoop+0x199c>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4618      	mov	r0, r3
 8009036:	f7f7 fa9f 	bl	8000578 <__aeabi_f2d>
 800903a:	a351      	add	r3, pc, #324	; (adr r3, 8009180 <cppLoop+0x1968>)
 800903c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009040:	f7f7 f93c 	bl	80002bc <__adddf3>
 8009044:	4603      	mov	r3, r0
 8009046:	460c      	mov	r4, r1
 8009048:	4618      	mov	r0, r3
 800904a:	4621      	mov	r1, r4
 800904c:	f7f7 fde4 	bl	8000c18 <__aeabi_d2f>
 8009050:	4602      	mov	r2, r0
 8009052:	4b58      	ldr	r3, [pc, #352]	; (80091b4 <cppLoop+0x199c>)
 8009054:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009056:	2152      	movs	r1, #82	; 0x52
 8009058:	484b      	ldr	r0, [pc, #300]	; (8009188 <cppLoop+0x1970>)
 800905a:	f7f8 fedf 	bl	8001e1c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800905e:	2200      	movs	r2, #0
 8009060:	f04f 31ff 	mov.w	r1, #4294967295
 8009064:	4848      	ldr	r0, [pc, #288]	; (8009188 <cppLoop+0x1970>)
 8009066:	f7f8 ff95 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 800906a:	e322      	b.n	80096b2 <cppLoop+0x1e9a>
		else if(joy_stick.getValue() == JOY_L){
 800906c:	484d      	ldr	r0, [pc, #308]	; (80091a4 <cppLoop+0x198c>)
 800906e:	f7f8 fe71 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8009072:	4603      	mov	r3, r0
 8009074:	2b01      	cmp	r3, #1
 8009076:	bf0c      	ite	eq
 8009078:	2301      	moveq	r3, #1
 800907a:	2300      	movne	r3, #0
 800907c:	b2db      	uxtb	r3, r3
 800907e:	2b00      	cmp	r3, #0
 8009080:	d058      	beq.n	8009134 <cppLoop+0x191c>
			led.LR(-1, 1);
 8009082:	2201      	movs	r2, #1
 8009084:	f04f 31ff 	mov.w	r1, #4294967295
 8009088:	483f      	ldr	r0, [pc, #252]	; (8009188 <cppLoop+0x1970>)
 800908a:	f7f8 ff83 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800908e:	2064      	movs	r0, #100	; 0x64
 8009090:	f000 fc3e 	bl	8009910 <HAL_Delay>
			if(selector_fast == 0){
 8009094:	4b44      	ldr	r3, [pc, #272]	; (80091a8 <cppLoop+0x1990>)
 8009096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d113      	bne.n	80090c6 <cppLoop+0x18ae>
				adj_kp_fast = adj_kp_fast - 0.00001;
 800909e:	4b43      	ldr	r3, [pc, #268]	; (80091ac <cppLoop+0x1994>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7f7 fa68 	bl	8000578 <__aeabi_f2d>
 80090a8:	a331      	add	r3, pc, #196	; (adr r3, 8009170 <cppLoop+0x1958>)
 80090aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ae:	f7f7 f903 	bl	80002b8 <__aeabi_dsub>
 80090b2:	4603      	mov	r3, r0
 80090b4:	460c      	mov	r4, r1
 80090b6:	4618      	mov	r0, r3
 80090b8:	4621      	mov	r1, r4
 80090ba:	f7f7 fdad 	bl	8000c18 <__aeabi_d2f>
 80090be:	4602      	mov	r2, r0
 80090c0:	4b3a      	ldr	r3, [pc, #232]	; (80091ac <cppLoop+0x1994>)
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	e02b      	b.n	800911e <cppLoop+0x1906>
			else if(selector_fast == 1){
 80090c6:	4b38      	ldr	r3, [pc, #224]	; (80091a8 <cppLoop+0x1990>)
 80090c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d113      	bne.n	80090f8 <cppLoop+0x18e0>
				adj_ki_fast = adj_ki_fast - 0.0001;
 80090d0:	4b37      	ldr	r3, [pc, #220]	; (80091b0 <cppLoop+0x1998>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7f7 fa4f 	bl	8000578 <__aeabi_f2d>
 80090da:	a327      	add	r3, pc, #156	; (adr r3, 8009178 <cppLoop+0x1960>)
 80090dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e0:	f7f7 f8ea 	bl	80002b8 <__aeabi_dsub>
 80090e4:	4603      	mov	r3, r0
 80090e6:	460c      	mov	r4, r1
 80090e8:	4618      	mov	r0, r3
 80090ea:	4621      	mov	r1, r4
 80090ec:	f7f7 fd94 	bl	8000c18 <__aeabi_d2f>
 80090f0:	4602      	mov	r2, r0
 80090f2:	4b2f      	ldr	r3, [pc, #188]	; (80091b0 <cppLoop+0x1998>)
 80090f4:	601a      	str	r2, [r3, #0]
 80090f6:	e012      	b.n	800911e <cppLoop+0x1906>
				adj_kd_fast = adj_kd_fast - 0.000001;
 80090f8:	4b2e      	ldr	r3, [pc, #184]	; (80091b4 <cppLoop+0x199c>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7f7 fa3b 	bl	8000578 <__aeabi_f2d>
 8009102:	a31f      	add	r3, pc, #124	; (adr r3, 8009180 <cppLoop+0x1968>)
 8009104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009108:	f7f7 f8d6 	bl	80002b8 <__aeabi_dsub>
 800910c:	4603      	mov	r3, r0
 800910e:	460c      	mov	r4, r1
 8009110:	4618      	mov	r0, r3
 8009112:	4621      	mov	r1, r4
 8009114:	f7f7 fd80 	bl	8000c18 <__aeabi_d2f>
 8009118:	4602      	mov	r2, r0
 800911a:	4b26      	ldr	r3, [pc, #152]	; (80091b4 <cppLoop+0x199c>)
 800911c:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800911e:	2152      	movs	r1, #82	; 0x52
 8009120:	4819      	ldr	r0, [pc, #100]	; (8009188 <cppLoop+0x1970>)
 8009122:	f7f8 fe7b 	bl	8001e1c <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009126:	2200      	movs	r2, #0
 8009128:	f04f 31ff 	mov.w	r1, #4294967295
 800912c:	4816      	ldr	r0, [pc, #88]	; (8009188 <cppLoop+0x1970>)
 800912e:	f7f8 ff31 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8009132:	e2be      	b.n	80096b2 <cppLoop+0x1e9a>
		else if(joy_stick.getValue() == JOY_D){
 8009134:	481b      	ldr	r0, [pc, #108]	; (80091a4 <cppLoop+0x198c>)
 8009136:	f7f8 fe0d 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 800913a:	4603      	mov	r3, r0
 800913c:	2b04      	cmp	r3, #4
 800913e:	bf0c      	ite	eq
 8009140:	2301      	moveq	r3, #1
 8009142:	2300      	movne	r3, #0
 8009144:	b2db      	uxtb	r3, r3
 8009146:	2b00      	cmp	r3, #0
 8009148:	d036      	beq.n	80091b8 <cppLoop+0x19a0>
			led.LR(-1, 1);
 800914a:	2201      	movs	r2, #1
 800914c:	f04f 31ff 	mov.w	r1, #4294967295
 8009150:	480d      	ldr	r0, [pc, #52]	; (8009188 <cppLoop+0x1970>)
 8009152:	f7f8 ff1f 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009156:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800915a:	f000 fbd9 	bl	8009910 <HAL_Delay>
			led.LR(-1, 0);
 800915e:	2200      	movs	r2, #0
 8009160:	f04f 31ff 	mov.w	r1, #4294967295
 8009164:	4808      	ldr	r0, [pc, #32]	; (8009188 <cppLoop+0x1970>)
 8009166:	f7f8 ff15 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 800916a:	e2a2      	b.n	80096b2 <cppLoop+0x1e9a>
 800916c:	f3af 8000 	nop.w
 8009170:	88e368f1 	.word	0x88e368f1
 8009174:	3ee4f8b5 	.word	0x3ee4f8b5
 8009178:	eb1c432d 	.word	0xeb1c432d
 800917c:	3f1a36e2 	.word	0x3f1a36e2
 8009180:	a0b5ed8d 	.word	0xa0b5ed8d
 8009184:	3eb0c6f7 	.word	0x3eb0c6f7
 8009188:	20000600 	.word	0x20000600
 800918c:	20017dd0 	.word	0x20017dd0
 8009190:	447a0000 	.word	0x447a0000
 8009194:	0801a1c0 	.word	0x0801a1c0
 8009198:	42c80000 	.word	0x42c80000
 800919c:	461c4000 	.word	0x461c4000
 80091a0:	0801a0c0 	.word	0x0801a0c0
 80091a4:	200005f4 	.word	0x200005f4
 80091a8:	2003d45e 	.word	0x2003d45e
 80091ac:	2003d478 	.word	0x2003d478
 80091b0:	2003d480 	.word	0x2003d480
 80091b4:	2003d488 	.word	0x2003d488
		else if(joy_stick.getValue() == JOY_C){
 80091b8:	48bd      	ldr	r0, [pc, #756]	; (80094b0 <cppLoop+0x1c98>)
 80091ba:	f7f8 fdcb 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	bf0c      	ite	eq
 80091c4:	2301      	moveq	r3, #1
 80091c6:	2300      	movne	r3, #0
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f000 8271 	beq.w	80096b2 <cppLoop+0x1e9a>
			led.LR(-1, 1);
 80091d0:	2201      	movs	r2, #1
 80091d2:	f04f 31ff 	mov.w	r1, #4294967295
 80091d6:	48b7      	ldr	r0, [pc, #732]	; (80094b4 <cppLoop+0x1c9c>)
 80091d8:	f7f8 fedc 	bl	8001f94 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80091dc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80091e0:	f000 fb96 	bl	8009910 <HAL_Delay>
			sd_write_array_float("PARAMS", "KPFAST.TXT", 1, &adj_kp_fast, OVER_WRITE);
 80091e4:	2300      	movs	r3, #0
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	4bb3      	ldr	r3, [pc, #716]	; (80094b8 <cppLoop+0x1ca0>)
 80091ea:	2201      	movs	r2, #1
 80091ec:	49b3      	ldr	r1, [pc, #716]	; (80094bc <cppLoop+0x1ca4>)
 80091ee:	48b4      	ldr	r0, [pc, #720]	; (80094c0 <cppLoop+0x1ca8>)
 80091f0:	f7f8 f994 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KIFAST.TXT", 1, &adj_ki_fast, OVER_WRITE);
 80091f4:	2300      	movs	r3, #0
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	4bb2      	ldr	r3, [pc, #712]	; (80094c4 <cppLoop+0x1cac>)
 80091fa:	2201      	movs	r2, #1
 80091fc:	49b2      	ldr	r1, [pc, #712]	; (80094c8 <cppLoop+0x1cb0>)
 80091fe:	48b0      	ldr	r0, [pc, #704]	; (80094c0 <cppLoop+0x1ca8>)
 8009200:	f7f8 f98c 	bl	800151c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KDFAST.TXT", 1, &adj_kd_fast, OVER_WRITE);
 8009204:	2300      	movs	r3, #0
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	4bb0      	ldr	r3, [pc, #704]	; (80094cc <cppLoop+0x1cb4>)
 800920a:	2201      	movs	r2, #1
 800920c:	49b0      	ldr	r1, [pc, #704]	; (80094d0 <cppLoop+0x1cb8>)
 800920e:	48ac      	ldr	r0, [pc, #688]	; (80094c0 <cppLoop+0x1ca8>)
 8009210:	f7f8 f984 	bl	800151c <sd_write_array_float>
			line_trace.setGainFast(adj_kp_fast, adj_ki_fast, adj_kd_fast);
 8009214:	4ba8      	ldr	r3, [pc, #672]	; (80094b8 <cppLoop+0x1ca0>)
 8009216:	edd3 7a00 	vldr	s15, [r3]
 800921a:	4baa      	ldr	r3, [pc, #680]	; (80094c4 <cppLoop+0x1cac>)
 800921c:	ed93 7a00 	vldr	s14, [r3]
 8009220:	4baa      	ldr	r3, [pc, #680]	; (80094cc <cppLoop+0x1cb4>)
 8009222:	edd3 6a00 	vldr	s13, [r3]
 8009226:	eeb0 1a66 	vmov.f32	s2, s13
 800922a:	eef0 0a47 	vmov.f32	s1, s14
 800922e:	eeb0 0a67 	vmov.f32	s0, s15
 8009232:	48a8      	ldr	r0, [pc, #672]	; (80094d4 <cppLoop+0x1cbc>)
 8009234:	f7fa fc05 	bl	8003a42 <_ZN9LineTrace11setGainFastEfff>
			led.LR(-1, 0);
 8009238:	2200      	movs	r2, #0
 800923a:	f04f 31ff 	mov.w	r1, #4294967295
 800923e:	489d      	ldr	r0, [pc, #628]	; (80094b4 <cppLoop+0x1c9c>)
 8009240:	f7f8 fea8 	bl	8001f94 <_ZN3LED2LREaa>
		break;
 8009244:	e235      	b.n	80096b2 <cppLoop+0x1e9a>

	case 10:
		led.fullColor('~');
 8009246:	217e      	movs	r1, #126	; 0x7e
 8009248:	489a      	ldr	r0, [pc, #616]	; (80094b4 <cppLoop+0x1c9c>)
 800924a:	f7f8 fde7 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 800924e:	f7f7 ff27 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009252:	2100      	movs	r1, #0
 8009254:	2000      	movs	r0, #0
 8009256:	f7f7 ff33 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 800925a:	489f      	ldr	r0, [pc, #636]	; (80094d8 <cppLoop+0x1cc0>)
 800925c:	f7f7 ff5b 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 8009260:	2101      	movs	r1, #1
 8009262:	2000      	movs	r0, #0
 8009264:	f7f7 ff2c 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8009268:	489c      	ldr	r0, [pc, #624]	; (80094dc <cppLoop+0x1cc4>)
 800926a:	f7f7 ff54 	bl	8001116 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 800926e:	4890      	ldr	r0, [pc, #576]	; (80094b0 <cppLoop+0x1c98>)
 8009270:	f7f8 fd70 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8009274:	4603      	mov	r3, r0
 8009276:	2b02      	cmp	r3, #2
 8009278:	bf0c      	ite	eq
 800927a:	2301      	moveq	r3, #1
 800927c:	2300      	movne	r3, #0
 800927e:	b2db      	uxtb	r3, r3
 8009280:	2b00      	cmp	r3, #0
 8009282:	f000 8218 	beq.w	80096b6 <cppLoop+0x1e9e>
			HAL_Delay(500);
 8009286:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800928a:	f000 fb41 	bl	8009910 <HAL_Delay>
			led.LR(-1, 1);
 800928e:	2201      	movs	r2, #1
 8009290:	f04f 31ff 	mov.w	r1, #4294967295
 8009294:	4887      	ldr	r0, [pc, #540]	; (80094b4 <cppLoop+0x1c9c>)
 8009296:	f7f8 fe7d 	bl	8001f94 <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 800929a:	2102      	movs	r1, #2
 800929c:	488d      	ldr	r0, [pc, #564]	; (80094d4 <cppLoop+0x1cbc>)
 800929e:	f7fb f851 	bl	8004344 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 80092a2:	4b8f      	ldr	r3, [pc, #572]	; (80094e0 <cppLoop+0x1cc8>)
 80092a4:	edd3 7a00 	vldr	s15, [r3]
 80092a8:	eeb0 0a67 	vmov.f32	s0, s15
 80092ac:	4889      	ldr	r0, [pc, #548]	; (80094d4 <cppLoop+0x1cbc>)
 80092ae:	f7fa fc3b 	bl	8003b28 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 80092b2:	4b8b      	ldr	r3, [pc, #556]	; (80094e0 <cppLoop+0x1cc8>)
 80092b4:	edd3 7a00 	vldr	s15, [r3]
 80092b8:	eeb0 0a67 	vmov.f32	s0, s15
 80092bc:	4885      	ldr	r0, [pc, #532]	; (80094d4 <cppLoop+0x1cbc>)
 80092be:	f7fa fc43 	bl	8003b48 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 80092c2:	4b87      	ldr	r3, [pc, #540]	; (80094e0 <cppLoop+0x1cc8>)
 80092c4:	edd3 7a00 	vldr	s15, [r3]
 80092c8:	eeb0 0a67 	vmov.f32	s0, s15
 80092cc:	4881      	ldr	r0, [pc, #516]	; (80094d4 <cppLoop+0x1cbc>)
 80092ce:	f7fa fc5b 	bl	8003b88 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80092d2:	4880      	ldr	r0, [pc, #512]	; (80094d4 <cppLoop+0x1cbc>)
 80092d4:	f7f9 ff5a 	bl	800318c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 80092d8:	2200      	movs	r2, #0
 80092da:	f04f 31ff 	mov.w	r1, #4294967295
 80092de:	4875      	ldr	r0, [pc, #468]	; (80094b4 <cppLoop+0x1c9c>)
 80092e0:	f7f8 fe58 	bl	8001f94 <_ZN3LED2LREaa>
		}

		break;
 80092e4:	e1e7      	b.n	80096b6 <cppLoop+0x1e9e>

	case 11:
		led.fullColor('~');
 80092e6:	217e      	movs	r1, #126	; 0x7e
 80092e8:	4872      	ldr	r0, [pc, #456]	; (80094b4 <cppLoop+0x1c9c>)
 80092ea:	f7f8 fd97 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 80092ee:	f7f7 fed7 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80092f2:	2100      	movs	r1, #0
 80092f4:	2000      	movs	r0, #0
 80092f6:	f7f7 fee3 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 80092fa:	487a      	ldr	r0, [pc, #488]	; (80094e4 <cppLoop+0x1ccc>)
 80092fc:	f7f7 ff0b 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 8009300:	2101      	movs	r1, #1
 8009302:	2000      	movs	r0, #0
 8009304:	f7f7 fedc 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8009308:	4877      	ldr	r0, [pc, #476]	; (80094e8 <cppLoop+0x1cd0>)
 800930a:	f7f7 ff04 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800930e:	4868      	ldr	r0, [pc, #416]	; (80094b0 <cppLoop+0x1c98>)
 8009310:	f7f8 fd20 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8009314:	4603      	mov	r3, r0
 8009316:	2b02      	cmp	r3, #2
 8009318:	bf0c      	ite	eq
 800931a:	2301      	moveq	r3, #1
 800931c:	2300      	movne	r3, #0
 800931e:	b2db      	uxtb	r3, r3
 8009320:	2b00      	cmp	r3, #0
 8009322:	f000 81ca 	beq.w	80096ba <cppLoop+0x1ea2>
			HAL_Delay(1500);
 8009326:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800932a:	f000 faf1 	bl	8009910 <HAL_Delay>
			led.LR(-1, 1);
 800932e:	2201      	movs	r2, #1
 8009330:	f04f 31ff 	mov.w	r1, #4294967295
 8009334:	485f      	ldr	r0, [pc, #380]	; (80094b4 <cppLoop+0x1c9c>)
 8009336:	f7f8 fe2d 	bl	8001f94 <_ZN3LED2LREaa>

			logger.start();
 800933a:	486c      	ldr	r0, [pc, #432]	; (80094ec <cppLoop+0x1cd4>)
 800933c:	f7fb fbdc 	bl	8004af8 <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 8009340:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8009498 <cppLoop+0x1c80>
 8009344:	ed9f 0b56 	vldr	d0, [pc, #344]	; 80094a0 <cppLoop+0x1c88>
 8009348:	4869      	ldr	r0, [pc, #420]	; (80094f0 <cppLoop+0x1cd8>)
 800934a:	f7fb fc67 	bl	8004c1c <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 800934e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009352:	f000 fadd 	bl	8009910 <HAL_Delay>

			logger.stop();
 8009356:	4865      	ldr	r0, [pc, #404]	; (80094ec <cppLoop+0x1cd4>)
 8009358:	f7fb fbdf 	bl	8004b1a <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 800935c:	ed9f 1b52 	vldr	d1, [pc, #328]	; 80094a8 <cppLoop+0x1c90>
 8009360:	ed9f 0b51 	vldr	d0, [pc, #324]	; 80094a8 <cppLoop+0x1c90>
 8009364:	4862      	ldr	r0, [pc, #392]	; (80094f0 <cppLoop+0x1cd8>)
 8009366:	f7fb fc59 	bl	8004c1c <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 800936a:	4a62      	ldr	r2, [pc, #392]	; (80094f4 <cppLoop+0x1cdc>)
 800936c:	4962      	ldr	r1, [pc, #392]	; (80094f8 <cppLoop+0x1ce0>)
 800936e:	485f      	ldr	r0, [pc, #380]	; (80094ec <cppLoop+0x1cd4>)
 8009370:	f7fb fae9 	bl	8004946 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8009374:	2200      	movs	r2, #0
 8009376:	f04f 31ff 	mov.w	r1, #4294967295
 800937a:	484e      	ldr	r0, [pc, #312]	; (80094b4 <cppLoop+0x1c9c>)
 800937c:	f7f8 fe0a 	bl	8001f94 <_ZN3LED2LREaa>
		}
		break;
 8009380:	e19b      	b.n	80096ba <cppLoop+0x1ea2>

	case 12:
		led.fullColor('~');
 8009382:	217e      	movs	r1, #126	; 0x7e
 8009384:	484b      	ldr	r0, [pc, #300]	; (80094b4 <cppLoop+0x1c9c>)
 8009386:	f7f8 fd49 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 800938a:	f7f7 fe89 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800938e:	2100      	movs	r1, #0
 8009390:	2000      	movs	r0, #0
 8009392:	f7f7 fe95 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8009396:	4859      	ldr	r0, [pc, #356]	; (80094fc <cppLoop+0x1ce4>)
 8009398:	f7f7 febd 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 800939c:	2101      	movs	r1, #1
 800939e:	2000      	movs	r0, #0
 80093a0:	f7f7 fe8e 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 80093a4:	4856      	ldr	r0, [pc, #344]	; (8009500 <cppLoop+0x1ce8>)
 80093a6:	f7f7 feb6 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80093aa:	4841      	ldr	r0, [pc, #260]	; (80094b0 <cppLoop+0x1c98>)
 80093ac:	f7f8 fcd2 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	bf0c      	ite	eq
 80093b6:	2301      	moveq	r3, #1
 80093b8:	2300      	movne	r3, #0
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f000 817e 	beq.w	80096be <cppLoop+0x1ea6>
			HAL_Delay(1500);
 80093c2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80093c6:	f000 faa3 	bl	8009910 <HAL_Delay>
			led.LR(-1, 1);
 80093ca:	2201      	movs	r2, #1
 80093cc:	f04f 31ff 	mov.w	r1, #4294967295
 80093d0:	4838      	ldr	r0, [pc, #224]	; (80094b4 <cppLoop+0x1c9c>)
 80093d2:	f7f8 fddf 	bl	8001f94 <_ZN3LED2LREaa>

			logger.start();
 80093d6:	4845      	ldr	r0, [pc, #276]	; (80094ec <cppLoop+0x1cd4>)
 80093d8:	f7fb fb8e 	bl	8004af8 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80093dc:	4849      	ldr	r0, [pc, #292]	; (8009504 <cppLoop+0x1cec>)
 80093de:	f7fc fb88 	bl	8005af2 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80093e2:	eddf 0a49 	vldr	s1, [pc, #292]	; 8009508 <cppLoop+0x1cf0>
 80093e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80093ea:	4846      	ldr	r0, [pc, #280]	; (8009504 <cppLoop+0x1cec>)
 80093ec:	f7fc fb14 	bl	8005a18 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80093f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80093f4:	f000 fa8c 	bl	8009910 <HAL_Delay>

			logger.stop();
 80093f8:	483c      	ldr	r0, [pc, #240]	; (80094ec <cppLoop+0x1cd4>)
 80093fa:	f7fb fb8e 	bl	8004b1a <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 80093fe:	4841      	ldr	r0, [pc, #260]	; (8009504 <cppLoop+0x1cec>)
 8009400:	f7fc fb8a 	bl	8005b18 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8009404:	4a41      	ldr	r2, [pc, #260]	; (800950c <cppLoop+0x1cf4>)
 8009406:	493c      	ldr	r1, [pc, #240]	; (80094f8 <cppLoop+0x1ce0>)
 8009408:	4838      	ldr	r0, [pc, #224]	; (80094ec <cppLoop+0x1cd4>)
 800940a:	f7fb fa9c 	bl	8004946 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800940e:	2200      	movs	r2, #0
 8009410:	f04f 31ff 	mov.w	r1, #4294967295
 8009414:	4827      	ldr	r0, [pc, #156]	; (80094b4 <cppLoop+0x1c9c>)
 8009416:	f7f8 fdbd 	bl	8001f94 <_ZN3LED2LREaa>
		}
		break;
 800941a:	e150      	b.n	80096be <cppLoop+0x1ea6>

	case 13:

		led.fullColor('~');
 800941c:	217e      	movs	r1, #126	; 0x7e
 800941e:	4825      	ldr	r0, [pc, #148]	; (80094b4 <cppLoop+0x1c9c>)
 8009420:	f7f8 fcfc 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 8009424:	f7f7 fe3c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009428:	2100      	movs	r1, #0
 800942a:	2000      	movs	r0, #0
 800942c:	f7f7 fe48 	bl	80010c0 <lcd_locate>
		lcd_printf("Steer");
 8009430:	4837      	ldr	r0, [pc, #220]	; (8009510 <cppLoop+0x1cf8>)
 8009432:	f7f7 fe70 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 8009436:	2101      	movs	r1, #1
 8009438:	2000      	movs	r0, #0
 800943a:	f7f7 fe41 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 800943e:	4835      	ldr	r0, [pc, #212]	; (8009514 <cppLoop+0x1cfc>)
 8009440:	f7f7 fe69 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009444:	481a      	ldr	r0, [pc, #104]	; (80094b0 <cppLoop+0x1c98>)
 8009446:	f7f8 fc85 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 800944a:	4603      	mov	r3, r0
 800944c:	2b02      	cmp	r3, #2
 800944e:	bf0c      	ite	eq
 8009450:	2301      	moveq	r3, #1
 8009452:	2300      	movne	r3, #0
 8009454:	b2db      	uxtb	r3, r3
 8009456:	2b00      	cmp	r3, #0
 8009458:	f000 8133 	beq.w	80096c2 <cppLoop+0x1eaa>
			HAL_Delay(500);
 800945c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009460:	f000 fa56 	bl	8009910 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 8009464:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8009518 <cppLoop+0x1d00>
 8009468:	481a      	ldr	r0, [pc, #104]	; (80094d4 <cppLoop+0x1cbc>)
 800946a:	f7fa fb5d 	bl	8003b28 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 800946e:	f04f 32ff 	mov.w	r2, #4294967295
 8009472:	2101      	movs	r1, #1
 8009474:	480f      	ldr	r0, [pc, #60]	; (80094b4 <cppLoop+0x1c9c>)
 8009476:	f7f8 fd8d 	bl	8001f94 <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 800947a:	2100      	movs	r1, #0
 800947c:	4815      	ldr	r0, [pc, #84]	; (80094d4 <cppLoop+0x1cbc>)
 800947e:	f7fa ff61 	bl	8004344 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8009482:	4814      	ldr	r0, [pc, #80]	; (80094d4 <cppLoop+0x1cbc>)
 8009484:	f7fa fe60 	bl	8004148 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8009488:	f04f 32ff 	mov.w	r2, #4294967295
 800948c:	2100      	movs	r1, #0
 800948e:	4809      	ldr	r0, [pc, #36]	; (80094b4 <cppLoop+0x1c9c>)
 8009490:	f7f8 fd80 	bl	8001f94 <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 8009494:	e115      	b.n	80096c2 <cppLoop+0x1eaa>
 8009496:	bf00      	nop
 8009498:	33333333 	.word	0x33333333
 800949c:	bfd33333 	.word	0xbfd33333
 80094a0:	33333333 	.word	0x33333333
 80094a4:	3fd33333 	.word	0x3fd33333
	...
 80094b0:	200005f4 	.word	0x200005f4
 80094b4:	20000600 	.word	0x20000600
 80094b8:	2003d478 	.word	0x2003d478
 80094bc:	0801a1cc 	.word	0x0801a1cc
 80094c0:	0801a0d8 	.word	0x0801a0d8
 80094c4:	2003d480 	.word	0x2003d480
 80094c8:	0801a1d8 	.word	0x0801a1d8
 80094cc:	2003d488 	.word	0x2003d488
 80094d0:	0801a1e4 	.word	0x0801a1e4
 80094d4:	20017dd0 	.word	0x20017dd0
 80094d8:	0801a1f0 	.word	0x0801a1f0
 80094dc:	0801a1fc 	.word	0x0801a1fc
 80094e0:	2003d4a0 	.word	0x2003d4a0
 80094e4:	0801a208 	.word	0x0801a208
 80094e8:	0801a210 	.word	0x0801a210
 80094ec:	20000624 	.word	0x20000624
 80094f0:	200005fc 	.word	0x200005fc
 80094f4:	0801a218 	.word	0x0801a218
 80094f8:	0801a224 	.word	0x0801a224
 80094fc:	0801a230 	.word	0x0801a230
 8009500:	0801a234 	.word	0x0801a234
 8009504:	20017d54 	.word	0x20017d54
 8009508:	00000000 	.word	0x00000000
 800950c:	0801a240 	.word	0x0801a240
 8009510:	0801a24c 	.word	0x0801a24c
 8009514:	0801a254 	.word	0x0801a254
 8009518:	3dcccccd 	.word	0x3dcccccd

	case 14:
		led.fullColor('W');
 800951c:	2157      	movs	r1, #87	; 0x57
 800951e:	486f      	ldr	r0, [pc, #444]	; (80096dc <cppLoop+0x1ec4>)
 8009520:	f7f8 fc7c 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 8009524:	f7f7 fdbc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009528:	2100      	movs	r1, #0
 800952a:	2000      	movs	r0, #0
 800952c:	f7f7 fdc8 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8009530:	486b      	ldr	r0, [pc, #428]	; (80096e0 <cppLoop+0x1ec8>)
 8009532:	f7f7 fdf0 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 8009536:	2101      	movs	r1, #1
 8009538:	2000      	movs	r0, #0
 800953a:	f7f7 fdc1 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 800953e:	4b69      	ldr	r3, [pc, #420]	; (80096e4 <cppLoop+0x1ecc>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4618      	mov	r0, r3
 8009544:	f7f7 f818 	bl	8000578 <__aeabi_f2d>
 8009548:	4603      	mov	r3, r0
 800954a:	460c      	mov	r4, r1
 800954c:	461a      	mov	r2, r3
 800954e:	4623      	mov	r3, r4
 8009550:	4865      	ldr	r0, [pc, #404]	; (80096e8 <cppLoop+0x1ed0>)
 8009552:	f7f7 fde0 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009556:	4865      	ldr	r0, [pc, #404]	; (80096ec <cppLoop+0x1ed4>)
 8009558:	f7f8 fbfc 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 800955c:	4603      	mov	r3, r0
 800955e:	2b02      	cmp	r3, #2
 8009560:	bf0c      	ite	eq
 8009562:	2301      	moveq	r3, #1
 8009564:	2300      	movne	r3, #0
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b00      	cmp	r3, #0
 800956a:	f000 80ac 	beq.w	80096c6 <cppLoop+0x1eae>
			HAL_Delay(500);
 800956e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009572:	f000 f9cd 	bl	8009910 <HAL_Delay>

			led.LR(1, -1);
 8009576:	f04f 32ff 	mov.w	r2, #4294967295
 800957a:	2101      	movs	r1, #1
 800957c:	4857      	ldr	r0, [pc, #348]	; (80096dc <cppLoop+0x1ec4>)
 800957e:	f7f8 fd09 	bl	8001f94 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8009582:	2102      	movs	r1, #2
 8009584:	485a      	ldr	r0, [pc, #360]	; (80096f0 <cppLoop+0x1ed8>)
 8009586:	f7fa fedd 	bl	8004344 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 800958a:	4b5a      	ldr	r3, [pc, #360]	; (80096f4 <cppLoop+0x1edc>)
 800958c:	edd3 7a00 	vldr	s15, [r3]
 8009590:	eeb0 0a67 	vmov.f32	s0, s15
 8009594:	4856      	ldr	r0, [pc, #344]	; (80096f0 <cppLoop+0x1ed8>)
 8009596:	f7fa fac7 	bl	8003b28 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800959a:	4b52      	ldr	r3, [pc, #328]	; (80096e4 <cppLoop+0x1ecc>)
 800959c:	edd3 7a00 	vldr	s15, [r3]
 80095a0:	eeb0 0a67 	vmov.f32	s0, s15
 80095a4:	4852      	ldr	r0, [pc, #328]	; (80096f0 <cppLoop+0x1ed8>)
 80095a6:	f7fa facf 	bl	8003b48 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 80095aa:	4b4e      	ldr	r3, [pc, #312]	; (80096e4 <cppLoop+0x1ecc>)
 80095ac:	edd3 7a00 	vldr	s15, [r3]
 80095b0:	eeb0 0a67 	vmov.f32	s0, s15
 80095b4:	484e      	ldr	r0, [pc, #312]	; (80096f0 <cppLoop+0x1ed8>)
 80095b6:	f7fa fae7 	bl	8003b88 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80095ba:	484d      	ldr	r0, [pc, #308]	; (80096f0 <cppLoop+0x1ed8>)
 80095bc:	f7f9 fde6 	bl	800318c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 80095c0:	484b      	ldr	r0, [pc, #300]	; (80096f0 <cppLoop+0x1ed8>)
 80095c2:	f7fa fdc1 	bl	8004148 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80095c6:	f04f 32ff 	mov.w	r2, #4294967295
 80095ca:	2100      	movs	r1, #0
 80095cc:	4843      	ldr	r0, [pc, #268]	; (80096dc <cppLoop+0x1ec4>)
 80095ce:	f7f8 fce1 	bl	8001f94 <_ZN3LED2LREaa>
		}

		break;
 80095d2:	e078      	b.n	80096c6 <cppLoop+0x1eae>

	case 15:
		led.fullColor('W');
 80095d4:	2157      	movs	r1, #87	; 0x57
 80095d6:	4841      	ldr	r0, [pc, #260]	; (80096dc <cppLoop+0x1ec4>)
 80095d8:	f7f8 fc20 	bl	8001e1c <_ZN3LED9fullColorEc>

		lcd_clear();
 80095dc:	f7f7 fd60 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80095e0:	2100      	movs	r1, #0
 80095e2:	2000      	movs	r0, #0
 80095e4:	f7f7 fd6c 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 80095e8:	4843      	ldr	r0, [pc, #268]	; (80096f8 <cppLoop+0x1ee0>)
 80095ea:	f7f7 fd94 	bl	8001116 <lcd_printf>
		lcd_locate(0,1);
 80095ee:	2101      	movs	r1, #1
 80095f0:	2000      	movs	r0, #0
 80095f2:	f7f7 fd65 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 80095f6:	4b41      	ldr	r3, [pc, #260]	; (80096fc <cppLoop+0x1ee4>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7f6 ffbc 	bl	8000578 <__aeabi_f2d>
 8009600:	4603      	mov	r3, r0
 8009602:	460c      	mov	r4, r1
 8009604:	461a      	mov	r2, r3
 8009606:	4623      	mov	r3, r4
 8009608:	4837      	ldr	r0, [pc, #220]	; (80096e8 <cppLoop+0x1ed0>)
 800960a:	f7f7 fd84 	bl	8001116 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800960e:	4837      	ldr	r0, [pc, #220]	; (80096ec <cppLoop+0x1ed4>)
 8009610:	f7f8 fba0 	bl	8001d54 <_ZN8JoyStick8getValueEv>
 8009614:	4603      	mov	r3, r0
 8009616:	2b02      	cmp	r3, #2
 8009618:	bf0c      	ite	eq
 800961a:	2301      	moveq	r3, #1
 800961c:	2300      	movne	r3, #0
 800961e:	b2db      	uxtb	r3, r3
 8009620:	2b00      	cmp	r3, #0
 8009622:	d052      	beq.n	80096ca <cppLoop+0x1eb2>
			HAL_Delay(500);
 8009624:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009628:	f000 f972 	bl	8009910 <HAL_Delay>

			led.LR(1, -1);
 800962c:	f04f 32ff 	mov.w	r2, #4294967295
 8009630:	2101      	movs	r1, #1
 8009632:	482a      	ldr	r0, [pc, #168]	; (80096dc <cppLoop+0x1ec4>)
 8009634:	f7f8 fcae 	bl	8001f94 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8009638:	2101      	movs	r1, #1
 800963a:	482d      	ldr	r0, [pc, #180]	; (80096f0 <cppLoop+0x1ed8>)
 800963c:	f7fa fe82 	bl	8004344 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8009640:	4b2f      	ldr	r3, [pc, #188]	; (8009700 <cppLoop+0x1ee8>)
 8009642:	edd3 7a00 	vldr	s15, [r3]
 8009646:	eeb0 0a67 	vmov.f32	s0, s15
 800964a:	4829      	ldr	r0, [pc, #164]	; (80096f0 <cppLoop+0x1ed8>)
 800964c:	f7fa fa6c 	bl	8003b28 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009650:	4b2a      	ldr	r3, [pc, #168]	; (80096fc <cppLoop+0x1ee4>)
 8009652:	edd3 7a00 	vldr	s15, [r3]
 8009656:	eeb0 0a67 	vmov.f32	s0, s15
 800965a:	4825      	ldr	r0, [pc, #148]	; (80096f0 <cppLoop+0x1ed8>)
 800965c:	f7fa fa74 	bl	8003b48 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8009660:	4b27      	ldr	r3, [pc, #156]	; (8009700 <cppLoop+0x1ee8>)
 8009662:	edd3 7a00 	vldr	s15, [r3]
 8009666:	eeb0 0a67 	vmov.f32	s0, s15
 800966a:	4821      	ldr	r0, [pc, #132]	; (80096f0 <cppLoop+0x1ed8>)
 800966c:	f7fa fa8c 	bl	8003b88 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009670:	481f      	ldr	r0, [pc, #124]	; (80096f0 <cppLoop+0x1ed8>)
 8009672:	f7f9 fd8b 	bl	800318c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8009676:	481e      	ldr	r0, [pc, #120]	; (80096f0 <cppLoop+0x1ed8>)
 8009678:	f7fa fd66 	bl	8004148 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 800967c:	f04f 32ff 	mov.w	r2, #4294967295
 8009680:	2100      	movs	r1, #0
 8009682:	4816      	ldr	r0, [pc, #88]	; (80096dc <cppLoop+0x1ec4>)
 8009684:	f7f8 fc86 	bl	8001f94 <_ZN3LED2LREaa>
		}
		break;
 8009688:	e01f      	b.n	80096ca <cppLoop+0x1eb2>

	default:
		break;
 800968a:	bf00      	nop
 800968c:	e01e      	b.n	80096cc <cppLoop+0x1eb4>
		break;
 800968e:	bf00      	nop
 8009690:	e01c      	b.n	80096cc <cppLoop+0x1eb4>
		break;
 8009692:	bf00      	nop
 8009694:	e01a      	b.n	80096cc <cppLoop+0x1eb4>
		break;
 8009696:	bf00      	nop
 8009698:	e018      	b.n	80096cc <cppLoop+0x1eb4>
		break;
 800969a:	bf00      	nop
 800969c:	e016      	b.n	80096cc <cppLoop+0x1eb4>
		break;
 800969e:	bf00      	nop
 80096a0:	e014      	b.n	80096cc <cppLoop+0x1eb4>
		break;
 80096a2:	bf00      	nop
 80096a4:	e012      	b.n	80096cc <cppLoop+0x1eb4>
		break;
 80096a6:	bf00      	nop
 80096a8:	e010      	b.n	80096cc <cppLoop+0x1eb4>
		break;
 80096aa:	bf00      	nop
 80096ac:	e00e      	b.n	80096cc <cppLoop+0x1eb4>
		break;
 80096ae:	bf00      	nop
 80096b0:	e00c      	b.n	80096cc <cppLoop+0x1eb4>
		break;
 80096b2:	bf00      	nop
 80096b4:	e00a      	b.n	80096cc <cppLoop+0x1eb4>
		break;
 80096b6:	bf00      	nop
 80096b8:	e008      	b.n	80096cc <cppLoop+0x1eb4>
		break;
 80096ba:	bf00      	nop
 80096bc:	e006      	b.n	80096cc <cppLoop+0x1eb4>
		break;
 80096be:	bf00      	nop
 80096c0:	e004      	b.n	80096cc <cppLoop+0x1eb4>
		break;
 80096c2:	bf00      	nop
 80096c4:	e002      	b.n	80096cc <cppLoop+0x1eb4>
		break;
 80096c6:	bf00      	nop
 80096c8:	e000      	b.n	80096cc <cppLoop+0x1eb4>
		break;
 80096ca:	bf00      	nop

	}

	HAL_Delay(30);
 80096cc:	201e      	movs	r0, #30
 80096ce:	f000 f91f 	bl	8009910 <HAL_Delay>

}
 80096d2:	bf00      	nop
 80096d4:	3704      	adds	r7, #4
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096da:	bf00      	nop
 80096dc:	20000600 	.word	0x20000600
 80096e0:	0801a25c 	.word	0x0801a25c
 80096e4:	2003d4a0 	.word	0x2003d4a0
 80096e8:	0801a0fc 	.word	0x0801a0fc
 80096ec:	200005f4 	.word	0x200005f4
 80096f0:	20017dd0 	.word	0x20017dd0
 80096f4:	2003d4b0 	.word	0x2003d4b0
 80096f8:	0801a268 	.word	0x0801a268
 80096fc:	2003d498 	.word	0x2003d498
 8009700:	2003d4a8 	.word	0x2003d4a8

08009704 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009704:	b580      	push	{r7, lr}
 8009706:	b088      	sub	sp, #32
 8009708:	af06      	add	r7, sp, #24
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b01      	cmp	r3, #1
 8009712:	d13d      	bne.n	8009790 <_Z41__static_initialization_and_destruction_0ii+0x8c>
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800971a:	4293      	cmp	r3, r2
 800971c:	d138      	bne.n	8009790 <_Z41__static_initialization_and_destruction_0ii+0x8c>
LineSensor line_sensor;
 800971e:	481e      	ldr	r0, [pc, #120]	; (8009798 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8009720:	f7f8 fc70 	bl	8002004 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009724:	481d      	ldr	r0, [pc, #116]	; (800979c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8009726:	f7fb fddf 	bl	80052e8 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 800972a:	481d      	ldr	r0, [pc, #116]	; (80097a0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800972c:	f7f8 fb06 	bl	8001d3c <_ZN8JoyStickC1Ev>
Motor motor;
 8009730:	481c      	ldr	r0, [pc, #112]	; (80097a4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009732:	f7fb fa03 	bl	8004b3c <_ZN5MotorC1Ev>
IMU imu;
 8009736:	481c      	ldr	r0, [pc, #112]	; (80097a8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009738:	f7f8 f90c 	bl	8001954 <_ZN3IMUC1Ev>
Logger logger;
 800973c:	481b      	ldr	r0, [pc, #108]	; (80097ac <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800973e:	f7fa ff6f 	bl	8004620 <_ZN6LoggerC1Ev>
Encoder encoder;
 8009742:	481b      	ldr	r0, [pc, #108]	; (80097b0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009744:	f7f7 fd07 	bl	8001156 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009748:	4b17      	ldr	r3, [pc, #92]	; (80097a8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800974a:	4a19      	ldr	r2, [pc, #100]	; (80097b0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800974c:	4915      	ldr	r1, [pc, #84]	; (80097a4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800974e:	4819      	ldr	r0, [pc, #100]	; (80097b4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009750:	f7fb ffb2 	bl	80056b8 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009754:	4b17      	ldr	r3, [pc, #92]	; (80097b4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009756:	4a14      	ldr	r2, [pc, #80]	; (80097a8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009758:	4915      	ldr	r1, [pc, #84]	; (80097b0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800975a:	4817      	ldr	r0, [pc, #92]	; (80097b8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800975c:	f7fb fad0 	bl	8004d00 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu);
 8009760:	4b11      	ldr	r3, [pc, #68]	; (80097a8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009762:	9304      	str	r3, [sp, #16]
 8009764:	4b11      	ldr	r3, [pc, #68]	; (80097ac <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009766:	9303      	str	r3, [sp, #12]
 8009768:	4b13      	ldr	r3, [pc, #76]	; (80097b8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800976a:	9302      	str	r3, [sp, #8]
 800976c:	4b10      	ldr	r3, [pc, #64]	; (80097b0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800976e:	9301      	str	r3, [sp, #4]
 8009770:	4b0a      	ldr	r3, [pc, #40]	; (800979c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	4b0f      	ldr	r3, [pc, #60]	; (80097b4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009776:	4a08      	ldr	r2, [pc, #32]	; (8009798 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8009778:	490a      	ldr	r1, [pc, #40]	; (80097a4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800977a:	4810      	ldr	r0, [pc, #64]	; (80097bc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800977c:	f7f8 ff6c 	bl	8002658 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>
SystemIdentification sys_ident(&logger, &motor);
 8009780:	4a08      	ldr	r2, [pc, #32]	; (80097a4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009782:	490a      	ldr	r1, [pc, #40]	; (80097ac <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009784:	480e      	ldr	r0, [pc, #56]	; (80097c0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009786:	f7fb fef5 	bl	8005574 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 800978a:	480e      	ldr	r0, [pc, #56]	; (80097c4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800978c:	f7fb fc38 	bl	8005000 <_ZN13PathFollowingC1Ev>
}
 8009790:	bf00      	nop
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	200002f4 	.word	0x200002f4
 800979c:	200005ec 	.word	0x200005ec
 80097a0:	200005f4 	.word	0x200005f4
 80097a4:	200005fc 	.word	0x200005fc
 80097a8:	20000610 	.word	0x20000610
 80097ac:	20000624 	.word	0x20000624
 80097b0:	20017d34 	.word	0x20017d34
 80097b4:	20017d54 	.word	0x20017d54
 80097b8:	20017d90 	.word	0x20017d90
 80097bc:	20017dd0 	.word	0x20017dd0
 80097c0:	20025b1c 	.word	0x20025b1c
 80097c4:	20025d28 	.word	0x20025d28

080097c8 <_GLOBAL__sub_I_line_sensor>:
 80097c8:	b580      	push	{r7, lr}
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80097d0:	2001      	movs	r0, #1
 80097d2:	f7ff ff97 	bl	8009704 <_Z41__static_initialization_and_destruction_0ii>
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80097d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009810 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80097dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80097de:	e003      	b.n	80097e8 <LoopCopyDataInit>

080097e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80097e0:	4b0c      	ldr	r3, [pc, #48]	; (8009814 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80097e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80097e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80097e6:	3104      	adds	r1, #4

080097e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80097e8:	480b      	ldr	r0, [pc, #44]	; (8009818 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80097ea:	4b0c      	ldr	r3, [pc, #48]	; (800981c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80097ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80097ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80097f0:	d3f6      	bcc.n	80097e0 <CopyDataInit>
  ldr  r2, =_sbss
 80097f2:	4a0b      	ldr	r2, [pc, #44]	; (8009820 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80097f4:	e002      	b.n	80097fc <LoopFillZerobss>

080097f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80097f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80097f8:	f842 3b04 	str.w	r3, [r2], #4

080097fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80097fc:	4b09      	ldr	r3, [pc, #36]	; (8009824 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80097fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009800:	d3f9      	bcc.n	80097f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009802:	f7fd fee7 	bl	80075d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009806:	f00c f817 	bl	8015838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800980a:	f7fc fa21 	bl	8005c50 <main>
  bx  lr    
 800980e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009810:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009814:	0801a868 	.word	0x0801a868
  ldr  r0, =_sdata
 8009818:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800981c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009820:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009824:	20041eb8 	.word	0x20041eb8

08009828 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009828:	e7fe      	b.n	8009828 <ADC_IRQHandler>
	...

0800982c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009830:	4b0e      	ldr	r3, [pc, #56]	; (800986c <HAL_Init+0x40>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a0d      	ldr	r2, [pc, #52]	; (800986c <HAL_Init+0x40>)
 8009836:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800983a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800983c:	4b0b      	ldr	r3, [pc, #44]	; (800986c <HAL_Init+0x40>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a0a      	ldr	r2, [pc, #40]	; (800986c <HAL_Init+0x40>)
 8009842:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009846:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009848:	4b08      	ldr	r3, [pc, #32]	; (800986c <HAL_Init+0x40>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a07      	ldr	r2, [pc, #28]	; (800986c <HAL_Init+0x40>)
 800984e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009852:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009854:	2003      	movs	r0, #3
 8009856:	f000 fd53 	bl	800a300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800985a:	2000      	movs	r0, #0
 800985c:	f000 f808 	bl	8009870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009860:	f7fd f908 	bl	8006a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	40023c00 	.word	0x40023c00

08009870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009878:	4b12      	ldr	r3, [pc, #72]	; (80098c4 <HAL_InitTick+0x54>)
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	4b12      	ldr	r3, [pc, #72]	; (80098c8 <HAL_InitTick+0x58>)
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	4619      	mov	r1, r3
 8009882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009886:	fbb3 f3f1 	udiv	r3, r3, r1
 800988a:	fbb2 f3f3 	udiv	r3, r2, r3
 800988e:	4618      	mov	r0, r3
 8009890:	f000 fd6b 	bl	800a36a <HAL_SYSTICK_Config>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e00e      	b.n	80098bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2b0f      	cmp	r3, #15
 80098a2:	d80a      	bhi.n	80098ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80098a4:	2200      	movs	r2, #0
 80098a6:	6879      	ldr	r1, [r7, #4]
 80098a8:	f04f 30ff 	mov.w	r0, #4294967295
 80098ac:	f000 fd33 	bl	800a316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80098b0:	4a06      	ldr	r2, [pc, #24]	; (80098cc <HAL_InitTick+0x5c>)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80098b6:	2300      	movs	r3, #0
 80098b8:	e000      	b.n	80098bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3708      	adds	r7, #8
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	20000000 	.word	0x20000000
 80098c8:	20000008 	.word	0x20000008
 80098cc:	20000004 	.word	0x20000004

080098d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80098d0:	b480      	push	{r7}
 80098d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80098d4:	4b06      	ldr	r3, [pc, #24]	; (80098f0 <HAL_IncTick+0x20>)
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	461a      	mov	r2, r3
 80098da:	4b06      	ldr	r3, [pc, #24]	; (80098f4 <HAL_IncTick+0x24>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4413      	add	r3, r2
 80098e0:	4a04      	ldr	r2, [pc, #16]	; (80098f4 <HAL_IncTick+0x24>)
 80098e2:	6013      	str	r3, [r2, #0]
}
 80098e4:	bf00      	nop
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	20000008 	.word	0x20000008
 80098f4:	2003fe40 	.word	0x2003fe40

080098f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80098f8:	b480      	push	{r7}
 80098fa:	af00      	add	r7, sp, #0
  return uwTick;
 80098fc:	4b03      	ldr	r3, [pc, #12]	; (800990c <HAL_GetTick+0x14>)
 80098fe:	681b      	ldr	r3, [r3, #0]
}
 8009900:	4618      	mov	r0, r3
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	2003fe40 	.word	0x2003fe40

08009910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009918:	f7ff ffee 	bl	80098f8 <HAL_GetTick>
 800991c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009928:	d005      	beq.n	8009936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800992a:	4b0a      	ldr	r3, [pc, #40]	; (8009954 <HAL_Delay+0x44>)
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	461a      	mov	r2, r3
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	4413      	add	r3, r2
 8009934:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009936:	bf00      	nop
 8009938:	f7ff ffde 	bl	80098f8 <HAL_GetTick>
 800993c:	4602      	mov	r2, r0
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	429a      	cmp	r2, r3
 8009946:	d8f7      	bhi.n	8009938 <HAL_Delay+0x28>
  {
  }
}
 8009948:	bf00      	nop
 800994a:	bf00      	nop
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	20000008 	.word	0x20000008

08009958 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009960:	2300      	movs	r3, #0
 8009962:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d101      	bne.n	800996e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	e033      	b.n	80099d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009972:	2b00      	cmp	r3, #0
 8009974:	d109      	bne.n	800998a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f7fd f8a4 	bl	8006ac4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998e:	f003 0310 	and.w	r3, r3, #16
 8009992:	2b00      	cmp	r3, #0
 8009994:	d118      	bne.n	80099c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800999e:	f023 0302 	bic.w	r3, r3, #2
 80099a2:	f043 0202 	orr.w	r2, r3, #2
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fa5a 	bl	8009e64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ba:	f023 0303 	bic.w	r3, r3, #3
 80099be:	f043 0201 	orr.w	r2, r3, #1
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	641a      	str	r2, [r3, #64]	; 0x40
 80099c6:	e001      	b.n	80099cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
	...

080099e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80099ec:	2300      	movs	r3, #0
 80099ee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d101      	bne.n	80099fe <HAL_ADC_Start_DMA+0x1e>
 80099fa:	2302      	movs	r3, #2
 80099fc:	e0cc      	b.n	8009b98 <HAL_ADC_Start_DMA+0x1b8>
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	f003 0301 	and.w	r3, r3, #1
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d018      	beq.n	8009a46 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	689a      	ldr	r2, [r3, #8]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f042 0201 	orr.w	r2, r2, #1
 8009a22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009a24:	4b5e      	ldr	r3, [pc, #376]	; (8009ba0 <HAL_ADC_Start_DMA+0x1c0>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a5e      	ldr	r2, [pc, #376]	; (8009ba4 <HAL_ADC_Start_DMA+0x1c4>)
 8009a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a2e:	0c9a      	lsrs	r2, r3, #18
 8009a30:	4613      	mov	r3, r2
 8009a32:	005b      	lsls	r3, r3, #1
 8009a34:	4413      	add	r3, r2
 8009a36:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009a38:	e002      	b.n	8009a40 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1f9      	bne.n	8009a3a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	f003 0301 	and.w	r3, r3, #1
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	f040 80a0 	bne.w	8009b96 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009a5e:	f023 0301 	bic.w	r3, r3, #1
 8009a62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d007      	beq.n	8009a88 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009a80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a94:	d106      	bne.n	8009aa4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a9a:	f023 0206 	bic.w	r2, r3, #6
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	645a      	str	r2, [r3, #68]	; 0x44
 8009aa2:	e002      	b.n	8009aaa <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009ab2:	4b3d      	ldr	r3, [pc, #244]	; (8009ba8 <HAL_ADC_Start_DMA+0x1c8>)
 8009ab4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aba:	4a3c      	ldr	r2, [pc, #240]	; (8009bac <HAL_ADC_Start_DMA+0x1cc>)
 8009abc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac2:	4a3b      	ldr	r2, [pc, #236]	; (8009bb0 <HAL_ADC_Start_DMA+0x1d0>)
 8009ac4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aca:	4a3a      	ldr	r2, [pc, #232]	; (8009bb4 <HAL_ADC_Start_DMA+0x1d4>)
 8009acc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009ad6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	685a      	ldr	r2, [r3, #4]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009ae6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	689a      	ldr	r2, [r3, #8]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009af6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	334c      	adds	r3, #76	; 0x4c
 8009b02:	4619      	mov	r1, r3
 8009b04:	68ba      	ldr	r2, [r7, #8]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f000 fcea 	bl	800a4e0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	f003 031f 	and.w	r3, r3, #31
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d12a      	bne.n	8009b6e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a26      	ldr	r2, [pc, #152]	; (8009bb8 <HAL_ADC_Start_DMA+0x1d8>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d015      	beq.n	8009b4e <HAL_ADC_Start_DMA+0x16e>
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a25      	ldr	r2, [pc, #148]	; (8009bbc <HAL_ADC_Start_DMA+0x1dc>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d105      	bne.n	8009b38 <HAL_ADC_Start_DMA+0x158>
 8009b2c:	4b1e      	ldr	r3, [pc, #120]	; (8009ba8 <HAL_ADC_Start_DMA+0x1c8>)
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	f003 031f 	and.w	r3, r3, #31
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d00a      	beq.n	8009b4e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a20      	ldr	r2, [pc, #128]	; (8009bc0 <HAL_ADC_Start_DMA+0x1e0>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d129      	bne.n	8009b96 <HAL_ADC_Start_DMA+0x1b6>
 8009b42:	4b19      	ldr	r3, [pc, #100]	; (8009ba8 <HAL_ADC_Start_DMA+0x1c8>)
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	f003 0310 	and.w	r3, r3, #16
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d123      	bne.n	8009b96 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d11c      	bne.n	8009b96 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	689a      	ldr	r2, [r3, #8]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009b6a:	609a      	str	r2, [r3, #8]
 8009b6c:	e013      	b.n	8009b96 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a11      	ldr	r2, [pc, #68]	; (8009bb8 <HAL_ADC_Start_DMA+0x1d8>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d10e      	bne.n	8009b96 <HAL_ADC_Start_DMA+0x1b6>
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d107      	bne.n	8009b96 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	689a      	ldr	r2, [r3, #8]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009b94:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3718      	adds	r7, #24
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	20000000 	.word	0x20000000
 8009ba4:	431bde83 	.word	0x431bde83
 8009ba8:	40012300 	.word	0x40012300
 8009bac:	0800a05d 	.word	0x0800a05d
 8009bb0:	0800a117 	.word	0x0800a117
 8009bb4:	0800a133 	.word	0x0800a133
 8009bb8:	40012000 	.word	0x40012000
 8009bbc:	40012100 	.word	0x40012100
 8009bc0:	40012200 	.word	0x40012200

08009bc4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009bf4:	bf00      	nop
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d101      	bne.n	8009c1c <HAL_ADC_ConfigChannel+0x1c>
 8009c18:	2302      	movs	r3, #2
 8009c1a:	e113      	b.n	8009e44 <HAL_ADC_ConfigChannel+0x244>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2b09      	cmp	r3, #9
 8009c2a:	d925      	bls.n	8009c78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68d9      	ldr	r1, [r3, #12]
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	461a      	mov	r2, r3
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	005b      	lsls	r3, r3, #1
 8009c3e:	4413      	add	r3, r2
 8009c40:	3b1e      	subs	r3, #30
 8009c42:	2207      	movs	r2, #7
 8009c44:	fa02 f303 	lsl.w	r3, r2, r3
 8009c48:	43da      	mvns	r2, r3
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	400a      	ands	r2, r1
 8009c50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68d9      	ldr	r1, [r3, #12]
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	689a      	ldr	r2, [r3, #8]
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	4618      	mov	r0, r3
 8009c64:	4603      	mov	r3, r0
 8009c66:	005b      	lsls	r3, r3, #1
 8009c68:	4403      	add	r3, r0
 8009c6a:	3b1e      	subs	r3, #30
 8009c6c:	409a      	lsls	r2, r3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	430a      	orrs	r2, r1
 8009c74:	60da      	str	r2, [r3, #12]
 8009c76:	e022      	b.n	8009cbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6919      	ldr	r1, [r3, #16]
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	461a      	mov	r2, r3
 8009c86:	4613      	mov	r3, r2
 8009c88:	005b      	lsls	r3, r3, #1
 8009c8a:	4413      	add	r3, r2
 8009c8c:	2207      	movs	r2, #7
 8009c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c92:	43da      	mvns	r2, r3
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	400a      	ands	r2, r1
 8009c9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	6919      	ldr	r1, [r3, #16]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	689a      	ldr	r2, [r3, #8]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	4618      	mov	r0, r3
 8009cae:	4603      	mov	r3, r0
 8009cb0:	005b      	lsls	r3, r3, #1
 8009cb2:	4403      	add	r3, r0
 8009cb4:	409a      	lsls	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	430a      	orrs	r2, r1
 8009cbc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	2b06      	cmp	r3, #6
 8009cc4:	d824      	bhi.n	8009d10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	685a      	ldr	r2, [r3, #4]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	4413      	add	r3, r2
 8009cd6:	3b05      	subs	r3, #5
 8009cd8:	221f      	movs	r2, #31
 8009cda:	fa02 f303 	lsl.w	r3, r2, r3
 8009cde:	43da      	mvns	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	400a      	ands	r2, r1
 8009ce6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	685a      	ldr	r2, [r3, #4]
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4413      	add	r3, r2
 8009d00:	3b05      	subs	r3, #5
 8009d02:	fa00 f203 	lsl.w	r2, r0, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	430a      	orrs	r2, r1
 8009d0c:	635a      	str	r2, [r3, #52]	; 0x34
 8009d0e:	e04c      	b.n	8009daa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	2b0c      	cmp	r3, #12
 8009d16:	d824      	bhi.n	8009d62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	685a      	ldr	r2, [r3, #4]
 8009d22:	4613      	mov	r3, r2
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	4413      	add	r3, r2
 8009d28:	3b23      	subs	r3, #35	; 0x23
 8009d2a:	221f      	movs	r2, #31
 8009d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d30:	43da      	mvns	r2, r3
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	400a      	ands	r2, r1
 8009d38:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	4618      	mov	r0, r3
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	685a      	ldr	r2, [r3, #4]
 8009d4c:	4613      	mov	r3, r2
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	4413      	add	r3, r2
 8009d52:	3b23      	subs	r3, #35	; 0x23
 8009d54:	fa00 f203 	lsl.w	r2, r0, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	430a      	orrs	r2, r1
 8009d5e:	631a      	str	r2, [r3, #48]	; 0x30
 8009d60:	e023      	b.n	8009daa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	685a      	ldr	r2, [r3, #4]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	3b41      	subs	r3, #65	; 0x41
 8009d74:	221f      	movs	r2, #31
 8009d76:	fa02 f303 	lsl.w	r3, r2, r3
 8009d7a:	43da      	mvns	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	400a      	ands	r2, r1
 8009d82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	4618      	mov	r0, r3
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	685a      	ldr	r2, [r3, #4]
 8009d96:	4613      	mov	r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	4413      	add	r3, r2
 8009d9c:	3b41      	subs	r3, #65	; 0x41
 8009d9e:	fa00 f203 	lsl.w	r2, r0, r3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	430a      	orrs	r2, r1
 8009da8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009daa:	4b29      	ldr	r3, [pc, #164]	; (8009e50 <HAL_ADC_ConfigChannel+0x250>)
 8009dac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a28      	ldr	r2, [pc, #160]	; (8009e54 <HAL_ADC_ConfigChannel+0x254>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d10f      	bne.n	8009dd8 <HAL_ADC_ConfigChannel+0x1d8>
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b12      	cmp	r3, #18
 8009dbe:	d10b      	bne.n	8009dd8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a1d      	ldr	r2, [pc, #116]	; (8009e54 <HAL_ADC_ConfigChannel+0x254>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d12b      	bne.n	8009e3a <HAL_ADC_ConfigChannel+0x23a>
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a1c      	ldr	r2, [pc, #112]	; (8009e58 <HAL_ADC_ConfigChannel+0x258>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d003      	beq.n	8009df4 <HAL_ADC_ConfigChannel+0x1f4>
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2b11      	cmp	r3, #17
 8009df2:	d122      	bne.n	8009e3a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a11      	ldr	r2, [pc, #68]	; (8009e58 <HAL_ADC_ConfigChannel+0x258>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d111      	bne.n	8009e3a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009e16:	4b11      	ldr	r3, [pc, #68]	; (8009e5c <HAL_ADC_ConfigChannel+0x25c>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a11      	ldr	r2, [pc, #68]	; (8009e60 <HAL_ADC_ConfigChannel+0x260>)
 8009e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e20:	0c9a      	lsrs	r2, r3, #18
 8009e22:	4613      	mov	r3, r2
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	4413      	add	r3, r2
 8009e28:	005b      	lsls	r3, r3, #1
 8009e2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009e2c:	e002      	b.n	8009e34 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	3b01      	subs	r3, #1
 8009e32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1f9      	bne.n	8009e2e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr
 8009e50:	40012300 	.word	0x40012300
 8009e54:	40012000 	.word	0x40012000
 8009e58:	10000012 	.word	0x10000012
 8009e5c:	20000000 	.word	0x20000000
 8009e60:	431bde83 	.word	0x431bde83

08009e64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009e6c:	4b79      	ldr	r3, [pc, #484]	; (800a054 <ADC_Init+0x1f0>)
 8009e6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	685a      	ldr	r2, [r3, #4]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	431a      	orrs	r2, r3
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	685a      	ldr	r2, [r3, #4]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	6859      	ldr	r1, [r3, #4]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	021a      	lsls	r2, r3, #8
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	430a      	orrs	r2, r1
 8009eac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	685a      	ldr	r2, [r3, #4]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009ebc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	6859      	ldr	r1, [r3, #4]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	689a      	ldr	r2, [r3, #8]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	430a      	orrs	r2, r1
 8009ece:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	689a      	ldr	r2, [r3, #8]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ede:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	6899      	ldr	r1, [r3, #8]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	68da      	ldr	r2, [r3, #12]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	430a      	orrs	r2, r1
 8009ef0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef6:	4a58      	ldr	r2, [pc, #352]	; (800a058 <ADC_Init+0x1f4>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d022      	beq.n	8009f42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	689a      	ldr	r2, [r3, #8]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009f0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6899      	ldr	r1, [r3, #8]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	430a      	orrs	r2, r1
 8009f1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	689a      	ldr	r2, [r3, #8]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009f2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	6899      	ldr	r1, [r3, #8]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	430a      	orrs	r2, r1
 8009f3e:	609a      	str	r2, [r3, #8]
 8009f40:	e00f      	b.n	8009f62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	689a      	ldr	r2, [r3, #8]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009f50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	689a      	ldr	r2, [r3, #8]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009f60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	689a      	ldr	r2, [r3, #8]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f022 0202 	bic.w	r2, r2, #2
 8009f70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	6899      	ldr	r1, [r3, #8]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	7e1b      	ldrb	r3, [r3, #24]
 8009f7c:	005a      	lsls	r2, r3, #1
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	430a      	orrs	r2, r1
 8009f84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d01b      	beq.n	8009fc8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	685a      	ldr	r2, [r3, #4]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	685a      	ldr	r2, [r3, #4]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009fae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	6859      	ldr	r1, [r3, #4]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	035a      	lsls	r2, r3, #13
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	430a      	orrs	r2, r1
 8009fc4:	605a      	str	r2, [r3, #4]
 8009fc6:	e007      	b.n	8009fd8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	685a      	ldr	r2, [r3, #4]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009fd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	69db      	ldr	r3, [r3, #28]
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	051a      	lsls	r2, r3, #20
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	430a      	orrs	r2, r1
 8009ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	689a      	ldr	r2, [r3, #8]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a00c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	6899      	ldr	r1, [r3, #8]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a01a:	025a      	lsls	r2, r3, #9
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	430a      	orrs	r2, r1
 800a022:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	689a      	ldr	r2, [r3, #8]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a032:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	6899      	ldr	r1, [r3, #8]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	695b      	ldr	r3, [r3, #20]
 800a03e:	029a      	lsls	r2, r3, #10
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	430a      	orrs	r2, r1
 800a046:	609a      	str	r2, [r3, #8]
}
 800a048:	bf00      	nop
 800a04a:	3714      	adds	r7, #20
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr
 800a054:	40012300 	.word	0x40012300
 800a058:	0f000001 	.word	0x0f000001

0800a05c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a068:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a072:	2b00      	cmp	r3, #0
 800a074:	d13c      	bne.n	800a0f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d12b      	bne.n	800a0e8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a094:	2b00      	cmp	r3, #0
 800a096:	d127      	bne.n	800a0e8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d006      	beq.n	800a0b4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d119      	bne.n	800a0e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	685a      	ldr	r2, [r3, #4]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f022 0220 	bic.w	r2, r2, #32
 800a0c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d105      	bne.n	800a0e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e0:	f043 0201 	orr.w	r2, r3, #1
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f7ff fd6b 	bl	8009bc4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a0ee:	e00e      	b.n	800a10e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f4:	f003 0310 	and.w	r3, r3, #16
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d003      	beq.n	800a104 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f7ff fd75 	bl	8009bec <HAL_ADC_ErrorCallback>
}
 800a102:	e004      	b.n	800a10e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	4798      	blx	r3
}
 800a10e:	bf00      	nop
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b084      	sub	sp, #16
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a122:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f7ff fd57 	bl	8009bd8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a12a:	bf00      	nop
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b084      	sub	sp, #16
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a13e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2240      	movs	r2, #64	; 0x40
 800a144:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a14a:	f043 0204 	orr.w	r2, r3, #4
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f7ff fd4a 	bl	8009bec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a158:	bf00      	nop
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f003 0307 	and.w	r3, r3, #7
 800a16e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a170:	4b0c      	ldr	r3, [pc, #48]	; (800a1a4 <__NVIC_SetPriorityGrouping+0x44>)
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a176:	68ba      	ldr	r2, [r7, #8]
 800a178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a17c:	4013      	ands	r3, r2
 800a17e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a18c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a192:	4a04      	ldr	r2, [pc, #16]	; (800a1a4 <__NVIC_SetPriorityGrouping+0x44>)
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	60d3      	str	r3, [r2, #12]
}
 800a198:	bf00      	nop
 800a19a:	3714      	adds	r7, #20
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr
 800a1a4:	e000ed00 	.word	0xe000ed00

0800a1a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a1ac:	4b04      	ldr	r3, [pc, #16]	; (800a1c0 <__NVIC_GetPriorityGrouping+0x18>)
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	0a1b      	lsrs	r3, r3, #8
 800a1b2:	f003 0307 	and.w	r3, r3, #7
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr
 800a1c0:	e000ed00 	.word	0xe000ed00

0800a1c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	db0b      	blt.n	800a1ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a1d6:	79fb      	ldrb	r3, [r7, #7]
 800a1d8:	f003 021f 	and.w	r2, r3, #31
 800a1dc:	4907      	ldr	r1, [pc, #28]	; (800a1fc <__NVIC_EnableIRQ+0x38>)
 800a1de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1e2:	095b      	lsrs	r3, r3, #5
 800a1e4:	2001      	movs	r0, #1
 800a1e6:	fa00 f202 	lsl.w	r2, r0, r2
 800a1ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a1ee:	bf00      	nop
 800a1f0:	370c      	adds	r7, #12
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr
 800a1fa:	bf00      	nop
 800a1fc:	e000e100 	.word	0xe000e100

0800a200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	4603      	mov	r3, r0
 800a208:	6039      	str	r1, [r7, #0]
 800a20a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a20c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a210:	2b00      	cmp	r3, #0
 800a212:	db0a      	blt.n	800a22a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	b2da      	uxtb	r2, r3
 800a218:	490c      	ldr	r1, [pc, #48]	; (800a24c <__NVIC_SetPriority+0x4c>)
 800a21a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a21e:	0112      	lsls	r2, r2, #4
 800a220:	b2d2      	uxtb	r2, r2
 800a222:	440b      	add	r3, r1
 800a224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a228:	e00a      	b.n	800a240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	b2da      	uxtb	r2, r3
 800a22e:	4908      	ldr	r1, [pc, #32]	; (800a250 <__NVIC_SetPriority+0x50>)
 800a230:	79fb      	ldrb	r3, [r7, #7]
 800a232:	f003 030f 	and.w	r3, r3, #15
 800a236:	3b04      	subs	r3, #4
 800a238:	0112      	lsls	r2, r2, #4
 800a23a:	b2d2      	uxtb	r2, r2
 800a23c:	440b      	add	r3, r1
 800a23e:	761a      	strb	r2, [r3, #24]
}
 800a240:	bf00      	nop
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr
 800a24c:	e000e100 	.word	0xe000e100
 800a250:	e000ed00 	.word	0xe000ed00

0800a254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a254:	b480      	push	{r7}
 800a256:	b089      	sub	sp, #36	; 0x24
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f003 0307 	and.w	r3, r3, #7
 800a266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	f1c3 0307 	rsb	r3, r3, #7
 800a26e:	2b04      	cmp	r3, #4
 800a270:	bf28      	it	cs
 800a272:	2304      	movcs	r3, #4
 800a274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	3304      	adds	r3, #4
 800a27a:	2b06      	cmp	r3, #6
 800a27c:	d902      	bls.n	800a284 <NVIC_EncodePriority+0x30>
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	3b03      	subs	r3, #3
 800a282:	e000      	b.n	800a286 <NVIC_EncodePriority+0x32>
 800a284:	2300      	movs	r3, #0
 800a286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a288:	f04f 32ff 	mov.w	r2, #4294967295
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	fa02 f303 	lsl.w	r3, r2, r3
 800a292:	43da      	mvns	r2, r3
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	401a      	ands	r2, r3
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a29c:	f04f 31ff 	mov.w	r1, #4294967295
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	fa01 f303 	lsl.w	r3, r1, r3
 800a2a6:	43d9      	mvns	r1, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a2ac:	4313      	orrs	r3, r2
         );
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3724      	adds	r7, #36	; 0x24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr
	...

0800a2bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a2cc:	d301      	bcc.n	800a2d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e00f      	b.n	800a2f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a2d2:	4a0a      	ldr	r2, [pc, #40]	; (800a2fc <SysTick_Config+0x40>)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a2da:	210f      	movs	r1, #15
 800a2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e0:	f7ff ff8e 	bl	800a200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a2e4:	4b05      	ldr	r3, [pc, #20]	; (800a2fc <SysTick_Config+0x40>)
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a2ea:	4b04      	ldr	r3, [pc, #16]	; (800a2fc <SysTick_Config+0x40>)
 800a2ec:	2207      	movs	r2, #7
 800a2ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	e000e010 	.word	0xe000e010

0800a300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f7ff ff29 	bl	800a160 <__NVIC_SetPriorityGrouping>
}
 800a30e:	bf00      	nop
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a316:	b580      	push	{r7, lr}
 800a318:	b086      	sub	sp, #24
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	4603      	mov	r3, r0
 800a31e:	60b9      	str	r1, [r7, #8]
 800a320:	607a      	str	r2, [r7, #4]
 800a322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a324:	2300      	movs	r3, #0
 800a326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a328:	f7ff ff3e 	bl	800a1a8 <__NVIC_GetPriorityGrouping>
 800a32c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	68b9      	ldr	r1, [r7, #8]
 800a332:	6978      	ldr	r0, [r7, #20]
 800a334:	f7ff ff8e 	bl	800a254 <NVIC_EncodePriority>
 800a338:	4602      	mov	r2, r0
 800a33a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a33e:	4611      	mov	r1, r2
 800a340:	4618      	mov	r0, r3
 800a342:	f7ff ff5d 	bl	800a200 <__NVIC_SetPriority>
}
 800a346:	bf00      	nop
 800a348:	3718      	adds	r7, #24
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b082      	sub	sp, #8
 800a352:	af00      	add	r7, sp, #0
 800a354:	4603      	mov	r3, r0
 800a356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7ff ff31 	bl	800a1c4 <__NVIC_EnableIRQ>
}
 800a362:	bf00      	nop
 800a364:	3708      	adds	r7, #8
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b082      	sub	sp, #8
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f7ff ffa2 	bl	800a2bc <SysTick_Config>
 800a378:	4603      	mov	r3, r0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
	...

0800a384 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b086      	sub	sp, #24
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a38c:	2300      	movs	r3, #0
 800a38e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a390:	f7ff fab2 	bl	80098f8 <HAL_GetTick>
 800a394:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d101      	bne.n	800a3a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	e099      	b.n	800a4d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2202      	movs	r2, #2
 800a3ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f022 0201 	bic.w	r2, r2, #1
 800a3be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a3c0:	e00f      	b.n	800a3e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a3c2:	f7ff fa99 	bl	80098f8 <HAL_GetTick>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	1ad3      	subs	r3, r2, r3
 800a3cc:	2b05      	cmp	r3, #5
 800a3ce:	d908      	bls.n	800a3e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2220      	movs	r2, #32
 800a3d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2203      	movs	r2, #3
 800a3da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	e078      	b.n	800a4d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 0301 	and.w	r3, r3, #1
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d1e8      	bne.n	800a3c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a3f8:	697a      	ldr	r2, [r7, #20]
 800a3fa:	4b38      	ldr	r3, [pc, #224]	; (800a4dc <HAL_DMA_Init+0x158>)
 800a3fc:	4013      	ands	r3, r2
 800a3fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	685a      	ldr	r2, [r3, #4]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a40e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a41a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	699b      	ldr	r3, [r3, #24]
 800a420:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a426:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a1b      	ldr	r3, [r3, #32]
 800a42c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a42e:	697a      	ldr	r2, [r7, #20]
 800a430:	4313      	orrs	r3, r2
 800a432:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a438:	2b04      	cmp	r3, #4
 800a43a:	d107      	bne.n	800a44c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a444:	4313      	orrs	r3, r2
 800a446:	697a      	ldr	r2, [r7, #20]
 800a448:	4313      	orrs	r3, r2
 800a44a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	697a      	ldr	r2, [r7, #20]
 800a452:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	695b      	ldr	r3, [r3, #20]
 800a45a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	f023 0307 	bic.w	r3, r3, #7
 800a462:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a468:	697a      	ldr	r2, [r7, #20]
 800a46a:	4313      	orrs	r3, r2
 800a46c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a472:	2b04      	cmp	r3, #4
 800a474:	d117      	bne.n	800a4a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47a:	697a      	ldr	r2, [r7, #20]
 800a47c:	4313      	orrs	r3, r2
 800a47e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a484:	2b00      	cmp	r3, #0
 800a486:	d00e      	beq.n	800a4a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 fa9d 	bl	800a9c8 <DMA_CheckFifoParam>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d008      	beq.n	800a4a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2240      	movs	r2, #64	; 0x40
 800a498:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2201      	movs	r2, #1
 800a49e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	e016      	b.n	800a4d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	697a      	ldr	r2, [r7, #20]
 800a4ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 fa54 	bl	800a95c <DMA_CalcBaseAndBitshift>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4bc:	223f      	movs	r2, #63	; 0x3f
 800a4be:	409a      	lsls	r2, r3
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3718      	adds	r7, #24
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	f010803f 	.word	0xf010803f

0800a4e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
 800a4ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d101      	bne.n	800a506 <HAL_DMA_Start_IT+0x26>
 800a502:	2302      	movs	r3, #2
 800a504:	e040      	b.n	800a588 <HAL_DMA_Start_IT+0xa8>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2201      	movs	r2, #1
 800a50a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a514:	b2db      	uxtb	r3, r3
 800a516:	2b01      	cmp	r3, #1
 800a518:	d12f      	bne.n	800a57a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2202      	movs	r2, #2
 800a51e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2200      	movs	r2, #0
 800a526:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	68b9      	ldr	r1, [r7, #8]
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f000 f9e6 	bl	800a900 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a538:	223f      	movs	r2, #63	; 0x3f
 800a53a:	409a      	lsls	r2, r3
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f042 0216 	orr.w	r2, r2, #22
 800a54e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a554:	2b00      	cmp	r3, #0
 800a556:	d007      	beq.n	800a568 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f042 0208 	orr.w	r2, r2, #8
 800a566:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f042 0201 	orr.w	r2, r2, #1
 800a576:	601a      	str	r2, [r3, #0]
 800a578:	e005      	b.n	800a586 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a582:	2302      	movs	r3, #2
 800a584:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a586:	7dfb      	ldrb	r3, [r7, #23]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3718      	adds	r7, #24
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	d004      	beq.n	800a5ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2280      	movs	r2, #128	; 0x80
 800a5a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e00c      	b.n	800a5c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2205      	movs	r2, #5
 800a5b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f022 0201 	bic.w	r2, r2, #1
 800a5c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b086      	sub	sp, #24
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a5e0:	4b92      	ldr	r3, [pc, #584]	; (800a82c <HAL_DMA_IRQHandler+0x258>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a92      	ldr	r2, [pc, #584]	; (800a830 <HAL_DMA_IRQHandler+0x25c>)
 800a5e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ea:	0a9b      	lsrs	r3, r3, #10
 800a5ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5fe:	2208      	movs	r2, #8
 800a600:	409a      	lsls	r2, r3
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	4013      	ands	r3, r2
 800a606:	2b00      	cmp	r3, #0
 800a608:	d01a      	beq.n	800a640 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f003 0304 	and.w	r3, r3, #4
 800a614:	2b00      	cmp	r3, #0
 800a616:	d013      	beq.n	800a640 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f022 0204 	bic.w	r2, r2, #4
 800a626:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a62c:	2208      	movs	r2, #8
 800a62e:	409a      	lsls	r2, r3
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a638:	f043 0201 	orr.w	r2, r3, #1
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a644:	2201      	movs	r2, #1
 800a646:	409a      	lsls	r2, r3
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	4013      	ands	r3, r2
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d012      	beq.n	800a676 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	695b      	ldr	r3, [r3, #20]
 800a656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00b      	beq.n	800a676 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a662:	2201      	movs	r2, #1
 800a664:	409a      	lsls	r2, r3
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a66e:	f043 0202 	orr.w	r2, r3, #2
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a67a:	2204      	movs	r2, #4
 800a67c:	409a      	lsls	r2, r3
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	4013      	ands	r3, r2
 800a682:	2b00      	cmp	r3, #0
 800a684:	d012      	beq.n	800a6ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f003 0302 	and.w	r3, r3, #2
 800a690:	2b00      	cmp	r3, #0
 800a692:	d00b      	beq.n	800a6ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a698:	2204      	movs	r2, #4
 800a69a:	409a      	lsls	r2, r3
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6a4:	f043 0204 	orr.w	r2, r3, #4
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6b0:	2210      	movs	r2, #16
 800a6b2:	409a      	lsls	r2, r3
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	4013      	ands	r3, r2
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d043      	beq.n	800a744 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f003 0308 	and.w	r3, r3, #8
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d03c      	beq.n	800a744 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6ce:	2210      	movs	r2, #16
 800a6d0:	409a      	lsls	r2, r3
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d018      	beq.n	800a716 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d108      	bne.n	800a704 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d024      	beq.n	800a744 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	4798      	blx	r3
 800a702:	e01f      	b.n	800a744 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d01b      	beq.n	800a744 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	4798      	blx	r3
 800a714:	e016      	b.n	800a744 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a720:	2b00      	cmp	r3, #0
 800a722:	d107      	bne.n	800a734 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f022 0208 	bic.w	r2, r2, #8
 800a732:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d003      	beq.n	800a744 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a748:	2220      	movs	r2, #32
 800a74a:	409a      	lsls	r2, r3
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	4013      	ands	r3, r2
 800a750:	2b00      	cmp	r3, #0
 800a752:	f000 808e 	beq.w	800a872 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f003 0310 	and.w	r3, r3, #16
 800a760:	2b00      	cmp	r3, #0
 800a762:	f000 8086 	beq.w	800a872 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a76a:	2220      	movs	r2, #32
 800a76c:	409a      	lsls	r2, r3
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	2b05      	cmp	r3, #5
 800a77c:	d136      	bne.n	800a7ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f022 0216 	bic.w	r2, r2, #22
 800a78c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	695a      	ldr	r2, [r3, #20]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a79c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d103      	bne.n	800a7ae <HAL_DMA_IRQHandler+0x1da>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d007      	beq.n	800a7be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f022 0208 	bic.w	r2, r2, #8
 800a7bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7c2:	223f      	movs	r2, #63	; 0x3f
 800a7c4:	409a      	lsls	r2, r3
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d07d      	beq.n	800a8de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	4798      	blx	r3
        }
        return;
 800a7ea:	e078      	b.n	800a8de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d01c      	beq.n	800a834 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a804:	2b00      	cmp	r3, #0
 800a806:	d108      	bne.n	800a81a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d030      	beq.n	800a872 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	4798      	blx	r3
 800a818:	e02b      	b.n	800a872 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d027      	beq.n	800a872 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	4798      	blx	r3
 800a82a:	e022      	b.n	800a872 <HAL_DMA_IRQHandler+0x29e>
 800a82c:	20000000 	.word	0x20000000
 800a830:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d10f      	bne.n	800a862 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f022 0210 	bic.w	r2, r2, #16
 800a850:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a866:	2b00      	cmp	r3, #0
 800a868:	d003      	beq.n	800a872 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a876:	2b00      	cmp	r3, #0
 800a878:	d032      	beq.n	800a8e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a87e:	f003 0301 	and.w	r3, r3, #1
 800a882:	2b00      	cmp	r3, #0
 800a884:	d022      	beq.n	800a8cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2205      	movs	r2, #5
 800a88a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f022 0201 	bic.w	r2, r2, #1
 800a89c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	60bb      	str	r3, [r7, #8]
 800a8a4:	697a      	ldr	r2, [r7, #20]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d307      	bcc.n	800a8ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f003 0301 	and.w	r3, r3, #1
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d1f2      	bne.n	800a89e <HAL_DMA_IRQHandler+0x2ca>
 800a8b8:	e000      	b.n	800a8bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a8ba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d005      	beq.n	800a8e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	4798      	blx	r3
 800a8dc:	e000      	b.n	800a8e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a8de:	bf00      	nop
    }
  }
}
 800a8e0:	3718      	adds	r7, #24
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop

0800a8e8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]
 800a90c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a91c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	683a      	ldr	r2, [r7, #0]
 800a924:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	2b40      	cmp	r3, #64	; 0x40
 800a92c:	d108      	bne.n	800a940 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68ba      	ldr	r2, [r7, #8]
 800a93c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a93e:	e007      	b.n	800a950 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	60da      	str	r2, [r3, #12]
}
 800a950:	bf00      	nop
 800a952:	3714      	adds	r7, #20
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b085      	sub	sp, #20
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	3b10      	subs	r3, #16
 800a96c:	4a14      	ldr	r2, [pc, #80]	; (800a9c0 <DMA_CalcBaseAndBitshift+0x64>)
 800a96e:	fba2 2303 	umull	r2, r3, r2, r3
 800a972:	091b      	lsrs	r3, r3, #4
 800a974:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a976:	4a13      	ldr	r2, [pc, #76]	; (800a9c4 <DMA_CalcBaseAndBitshift+0x68>)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	4413      	add	r3, r2
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	461a      	mov	r2, r3
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2b03      	cmp	r3, #3
 800a988:	d909      	bls.n	800a99e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a992:	f023 0303 	bic.w	r3, r3, #3
 800a996:	1d1a      	adds	r2, r3, #4
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	659a      	str	r2, [r3, #88]	; 0x58
 800a99c:	e007      	b.n	800a9ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a9a6:	f023 0303 	bic.w	r3, r3, #3
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3714      	adds	r7, #20
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	aaaaaaab 	.word	0xaaaaaaab
 800a9c4:	0801a2a8 	.word	0x0801a2a8

0800a9c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	699b      	ldr	r3, [r3, #24]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d11f      	bne.n	800aa22 <DMA_CheckFifoParam+0x5a>
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	2b03      	cmp	r3, #3
 800a9e6:	d856      	bhi.n	800aa96 <DMA_CheckFifoParam+0xce>
 800a9e8:	a201      	add	r2, pc, #4	; (adr r2, 800a9f0 <DMA_CheckFifoParam+0x28>)
 800a9ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ee:	bf00      	nop
 800a9f0:	0800aa01 	.word	0x0800aa01
 800a9f4:	0800aa13 	.word	0x0800aa13
 800a9f8:	0800aa01 	.word	0x0800aa01
 800a9fc:	0800aa97 	.word	0x0800aa97
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d046      	beq.n	800aa9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa10:	e043      	b.n	800aa9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aa1a:	d140      	bne.n	800aa9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa20:	e03d      	b.n	800aa9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	699b      	ldr	r3, [r3, #24]
 800aa26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa2a:	d121      	bne.n	800aa70 <DMA_CheckFifoParam+0xa8>
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	2b03      	cmp	r3, #3
 800aa30:	d837      	bhi.n	800aaa2 <DMA_CheckFifoParam+0xda>
 800aa32:	a201      	add	r2, pc, #4	; (adr r2, 800aa38 <DMA_CheckFifoParam+0x70>)
 800aa34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa38:	0800aa49 	.word	0x0800aa49
 800aa3c:	0800aa4f 	.word	0x0800aa4f
 800aa40:	0800aa49 	.word	0x0800aa49
 800aa44:	0800aa61 	.word	0x0800aa61
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	73fb      	strb	r3, [r7, #15]
      break;
 800aa4c:	e030      	b.n	800aab0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d025      	beq.n	800aaa6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa5e:	e022      	b.n	800aaa6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aa68:	d11f      	bne.n	800aaaa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aa6e:	e01c      	b.n	800aaaa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	d903      	bls.n	800aa7e <DMA_CheckFifoParam+0xb6>
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	2b03      	cmp	r3, #3
 800aa7a:	d003      	beq.n	800aa84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aa7c:	e018      	b.n	800aab0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	73fb      	strb	r3, [r7, #15]
      break;
 800aa82:	e015      	b.n	800aab0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d00e      	beq.n	800aaae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800aa90:	2301      	movs	r3, #1
 800aa92:	73fb      	strb	r3, [r7, #15]
      break;
 800aa94:	e00b      	b.n	800aaae <DMA_CheckFifoParam+0xe6>
      break;
 800aa96:	bf00      	nop
 800aa98:	e00a      	b.n	800aab0 <DMA_CheckFifoParam+0xe8>
      break;
 800aa9a:	bf00      	nop
 800aa9c:	e008      	b.n	800aab0 <DMA_CheckFifoParam+0xe8>
      break;
 800aa9e:	bf00      	nop
 800aaa0:	e006      	b.n	800aab0 <DMA_CheckFifoParam+0xe8>
      break;
 800aaa2:	bf00      	nop
 800aaa4:	e004      	b.n	800aab0 <DMA_CheckFifoParam+0xe8>
      break;
 800aaa6:	bf00      	nop
 800aaa8:	e002      	b.n	800aab0 <DMA_CheckFifoParam+0xe8>
      break;   
 800aaaa:	bf00      	nop
 800aaac:	e000      	b.n	800aab0 <DMA_CheckFifoParam+0xe8>
      break;
 800aaae:	bf00      	nop
    }
  } 
  
  return status; 
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3714      	adds	r7, #20
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop

0800aac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b089      	sub	sp, #36	; 0x24
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800aaca:	2300      	movs	r3, #0
 800aacc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800aace:	2300      	movs	r3, #0
 800aad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800aad2:	2300      	movs	r3, #0
 800aad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aad6:	2300      	movs	r3, #0
 800aad8:	61fb      	str	r3, [r7, #28]
 800aada:	e177      	b.n	800adcc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800aadc:	2201      	movs	r2, #1
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	fa02 f303 	lsl.w	r3, r2, r3
 800aae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	697a      	ldr	r2, [r7, #20]
 800aaec:	4013      	ands	r3, r2
 800aaee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800aaf0:	693a      	ldr	r2, [r7, #16]
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	f040 8166 	bne.w	800adc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d00b      	beq.n	800ab1a <HAL_GPIO_Init+0x5a>
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	2b02      	cmp	r3, #2
 800ab08:	d007      	beq.n	800ab1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ab0e:	2b11      	cmp	r3, #17
 800ab10:	d003      	beq.n	800ab1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	2b12      	cmp	r3, #18
 800ab18:	d130      	bne.n	800ab7c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	005b      	lsls	r3, r3, #1
 800ab24:	2203      	movs	r2, #3
 800ab26:	fa02 f303 	lsl.w	r3, r2, r3
 800ab2a:	43db      	mvns	r3, r3
 800ab2c:	69ba      	ldr	r2, [r7, #24]
 800ab2e:	4013      	ands	r3, r2
 800ab30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	68da      	ldr	r2, [r3, #12]
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	005b      	lsls	r3, r3, #1
 800ab3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab3e:	69ba      	ldr	r2, [r7, #24]
 800ab40:	4313      	orrs	r3, r2
 800ab42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	69ba      	ldr	r2, [r7, #24]
 800ab48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ab50:	2201      	movs	r2, #1
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	fa02 f303 	lsl.w	r3, r2, r3
 800ab58:	43db      	mvns	r3, r3
 800ab5a:	69ba      	ldr	r2, [r7, #24]
 800ab5c:	4013      	ands	r3, r2
 800ab5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	091b      	lsrs	r3, r3, #4
 800ab66:	f003 0201 	and.w	r2, r3, #1
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab70:	69ba      	ldr	r2, [r7, #24]
 800ab72:	4313      	orrs	r3, r2
 800ab74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	69ba      	ldr	r2, [r7, #24]
 800ab7a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	005b      	lsls	r3, r3, #1
 800ab86:	2203      	movs	r2, #3
 800ab88:	fa02 f303 	lsl.w	r3, r2, r3
 800ab8c:	43db      	mvns	r3, r3
 800ab8e:	69ba      	ldr	r2, [r7, #24]
 800ab90:	4013      	ands	r3, r2
 800ab92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	689a      	ldr	r2, [r3, #8]
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	005b      	lsls	r3, r3, #1
 800ab9c:	fa02 f303 	lsl.w	r3, r2, r3
 800aba0:	69ba      	ldr	r2, [r7, #24]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	69ba      	ldr	r2, [r7, #24]
 800abaa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	2b02      	cmp	r3, #2
 800abb2:	d003      	beq.n	800abbc <HAL_GPIO_Init+0xfc>
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	2b12      	cmp	r3, #18
 800abba:	d123      	bne.n	800ac04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	08da      	lsrs	r2, r3, #3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	3208      	adds	r2, #8
 800abc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	f003 0307 	and.w	r3, r3, #7
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	220f      	movs	r2, #15
 800abd4:	fa02 f303 	lsl.w	r3, r2, r3
 800abd8:	43db      	mvns	r3, r3
 800abda:	69ba      	ldr	r2, [r7, #24]
 800abdc:	4013      	ands	r3, r2
 800abde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	691a      	ldr	r2, [r3, #16]
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	f003 0307 	and.w	r3, r3, #7
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	fa02 f303 	lsl.w	r3, r2, r3
 800abf0:	69ba      	ldr	r2, [r7, #24]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	08da      	lsrs	r2, r3, #3
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	3208      	adds	r2, #8
 800abfe:	69b9      	ldr	r1, [r7, #24]
 800ac00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	005b      	lsls	r3, r3, #1
 800ac0e:	2203      	movs	r2, #3
 800ac10:	fa02 f303 	lsl.w	r3, r2, r3
 800ac14:	43db      	mvns	r3, r3
 800ac16:	69ba      	ldr	r2, [r7, #24]
 800ac18:	4013      	ands	r3, r2
 800ac1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	f003 0203 	and.w	r2, r3, #3
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	005b      	lsls	r3, r3, #1
 800ac28:	fa02 f303 	lsl.w	r3, r2, r3
 800ac2c:	69ba      	ldr	r2, [r7, #24]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	69ba      	ldr	r2, [r7, #24]
 800ac36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f000 80c0 	beq.w	800adc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac46:	2300      	movs	r3, #0
 800ac48:	60fb      	str	r3, [r7, #12]
 800ac4a:	4b66      	ldr	r3, [pc, #408]	; (800ade4 <HAL_GPIO_Init+0x324>)
 800ac4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac4e:	4a65      	ldr	r2, [pc, #404]	; (800ade4 <HAL_GPIO_Init+0x324>)
 800ac50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac54:	6453      	str	r3, [r2, #68]	; 0x44
 800ac56:	4b63      	ldr	r3, [pc, #396]	; (800ade4 <HAL_GPIO_Init+0x324>)
 800ac58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac5e:	60fb      	str	r3, [r7, #12]
 800ac60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ac62:	4a61      	ldr	r2, [pc, #388]	; (800ade8 <HAL_GPIO_Init+0x328>)
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	089b      	lsrs	r3, r3, #2
 800ac68:	3302      	adds	r3, #2
 800ac6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	f003 0303 	and.w	r3, r3, #3
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	220f      	movs	r2, #15
 800ac7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac7e:	43db      	mvns	r3, r3
 800ac80:	69ba      	ldr	r2, [r7, #24]
 800ac82:	4013      	ands	r3, r2
 800ac84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	4a58      	ldr	r2, [pc, #352]	; (800adec <HAL_GPIO_Init+0x32c>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d037      	beq.n	800acfe <HAL_GPIO_Init+0x23e>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	4a57      	ldr	r2, [pc, #348]	; (800adf0 <HAL_GPIO_Init+0x330>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d031      	beq.n	800acfa <HAL_GPIO_Init+0x23a>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	4a56      	ldr	r2, [pc, #344]	; (800adf4 <HAL_GPIO_Init+0x334>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d02b      	beq.n	800acf6 <HAL_GPIO_Init+0x236>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	4a55      	ldr	r2, [pc, #340]	; (800adf8 <HAL_GPIO_Init+0x338>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d025      	beq.n	800acf2 <HAL_GPIO_Init+0x232>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4a54      	ldr	r2, [pc, #336]	; (800adfc <HAL_GPIO_Init+0x33c>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d01f      	beq.n	800acee <HAL_GPIO_Init+0x22e>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	4a53      	ldr	r2, [pc, #332]	; (800ae00 <HAL_GPIO_Init+0x340>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d019      	beq.n	800acea <HAL_GPIO_Init+0x22a>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4a52      	ldr	r2, [pc, #328]	; (800ae04 <HAL_GPIO_Init+0x344>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d013      	beq.n	800ace6 <HAL_GPIO_Init+0x226>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4a51      	ldr	r2, [pc, #324]	; (800ae08 <HAL_GPIO_Init+0x348>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d00d      	beq.n	800ace2 <HAL_GPIO_Init+0x222>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4a50      	ldr	r2, [pc, #320]	; (800ae0c <HAL_GPIO_Init+0x34c>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d007      	beq.n	800acde <HAL_GPIO_Init+0x21e>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4a4f      	ldr	r2, [pc, #316]	; (800ae10 <HAL_GPIO_Init+0x350>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d101      	bne.n	800acda <HAL_GPIO_Init+0x21a>
 800acd6:	2309      	movs	r3, #9
 800acd8:	e012      	b.n	800ad00 <HAL_GPIO_Init+0x240>
 800acda:	230a      	movs	r3, #10
 800acdc:	e010      	b.n	800ad00 <HAL_GPIO_Init+0x240>
 800acde:	2308      	movs	r3, #8
 800ace0:	e00e      	b.n	800ad00 <HAL_GPIO_Init+0x240>
 800ace2:	2307      	movs	r3, #7
 800ace4:	e00c      	b.n	800ad00 <HAL_GPIO_Init+0x240>
 800ace6:	2306      	movs	r3, #6
 800ace8:	e00a      	b.n	800ad00 <HAL_GPIO_Init+0x240>
 800acea:	2305      	movs	r3, #5
 800acec:	e008      	b.n	800ad00 <HAL_GPIO_Init+0x240>
 800acee:	2304      	movs	r3, #4
 800acf0:	e006      	b.n	800ad00 <HAL_GPIO_Init+0x240>
 800acf2:	2303      	movs	r3, #3
 800acf4:	e004      	b.n	800ad00 <HAL_GPIO_Init+0x240>
 800acf6:	2302      	movs	r3, #2
 800acf8:	e002      	b.n	800ad00 <HAL_GPIO_Init+0x240>
 800acfa:	2301      	movs	r3, #1
 800acfc:	e000      	b.n	800ad00 <HAL_GPIO_Init+0x240>
 800acfe:	2300      	movs	r3, #0
 800ad00:	69fa      	ldr	r2, [r7, #28]
 800ad02:	f002 0203 	and.w	r2, r2, #3
 800ad06:	0092      	lsls	r2, r2, #2
 800ad08:	4093      	lsls	r3, r2
 800ad0a:	69ba      	ldr	r2, [r7, #24]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ad10:	4935      	ldr	r1, [pc, #212]	; (800ade8 <HAL_GPIO_Init+0x328>)
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	089b      	lsrs	r3, r3, #2
 800ad16:	3302      	adds	r3, #2
 800ad18:	69ba      	ldr	r2, [r7, #24]
 800ad1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ad1e:	4b3d      	ldr	r3, [pc, #244]	; (800ae14 <HAL_GPIO_Init+0x354>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	43db      	mvns	r3, r3
 800ad28:	69ba      	ldr	r2, [r7, #24]
 800ad2a:	4013      	ands	r3, r2
 800ad2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d003      	beq.n	800ad42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800ad3a:	69ba      	ldr	r2, [r7, #24]
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ad42:	4a34      	ldr	r2, [pc, #208]	; (800ae14 <HAL_GPIO_Init+0x354>)
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ad48:	4b32      	ldr	r3, [pc, #200]	; (800ae14 <HAL_GPIO_Init+0x354>)
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	43db      	mvns	r3, r3
 800ad52:	69ba      	ldr	r2, [r7, #24]
 800ad54:	4013      	ands	r3, r2
 800ad56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d003      	beq.n	800ad6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800ad64:	69ba      	ldr	r2, [r7, #24]
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ad6c:	4a29      	ldr	r2, [pc, #164]	; (800ae14 <HAL_GPIO_Init+0x354>)
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ad72:	4b28      	ldr	r3, [pc, #160]	; (800ae14 <HAL_GPIO_Init+0x354>)
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	43db      	mvns	r3, r3
 800ad7c:	69ba      	ldr	r2, [r7, #24]
 800ad7e:	4013      	ands	r3, r2
 800ad80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d003      	beq.n	800ad96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800ad8e:	69ba      	ldr	r2, [r7, #24]
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ad96:	4a1f      	ldr	r2, [pc, #124]	; (800ae14 <HAL_GPIO_Init+0x354>)
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ad9c:	4b1d      	ldr	r3, [pc, #116]	; (800ae14 <HAL_GPIO_Init+0x354>)
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	43db      	mvns	r3, r3
 800ada6:	69ba      	ldr	r2, [r7, #24]
 800ada8:	4013      	ands	r3, r2
 800adaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d003      	beq.n	800adc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800adb8:	69ba      	ldr	r2, [r7, #24]
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	4313      	orrs	r3, r2
 800adbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800adc0:	4a14      	ldr	r2, [pc, #80]	; (800ae14 <HAL_GPIO_Init+0x354>)
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800adc6:	69fb      	ldr	r3, [r7, #28]
 800adc8:	3301      	adds	r3, #1
 800adca:	61fb      	str	r3, [r7, #28]
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	2b0f      	cmp	r3, #15
 800add0:	f67f ae84 	bls.w	800aadc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800add4:	bf00      	nop
 800add6:	bf00      	nop
 800add8:	3724      	adds	r7, #36	; 0x24
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr
 800ade2:	bf00      	nop
 800ade4:	40023800 	.word	0x40023800
 800ade8:	40013800 	.word	0x40013800
 800adec:	40020000 	.word	0x40020000
 800adf0:	40020400 	.word	0x40020400
 800adf4:	40020800 	.word	0x40020800
 800adf8:	40020c00 	.word	0x40020c00
 800adfc:	40021000 	.word	0x40021000
 800ae00:	40021400 	.word	0x40021400
 800ae04:	40021800 	.word	0x40021800
 800ae08:	40021c00 	.word	0x40021c00
 800ae0c:	40022000 	.word	0x40022000
 800ae10:	40022400 	.word	0x40022400
 800ae14:	40013c00 	.word	0x40013c00

0800ae18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	460b      	mov	r3, r1
 800ae22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	691a      	ldr	r2, [r3, #16]
 800ae28:	887b      	ldrh	r3, [r7, #2]
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d002      	beq.n	800ae36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ae30:	2301      	movs	r3, #1
 800ae32:	73fb      	strb	r3, [r7, #15]
 800ae34:	e001      	b.n	800ae3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ae36:	2300      	movs	r3, #0
 800ae38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ae3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3714      	adds	r7, #20
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	460b      	mov	r3, r1
 800ae52:	807b      	strh	r3, [r7, #2]
 800ae54:	4613      	mov	r3, r2
 800ae56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ae58:	787b      	ldrb	r3, [r7, #1]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d003      	beq.n	800ae66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ae5e:	887a      	ldrh	r2, [r7, #2]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ae64:	e003      	b.n	800ae6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ae66:	887b      	ldrh	r3, [r7, #2]
 800ae68:	041a      	lsls	r2, r3, #16
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	619a      	str	r2, [r3, #24]
}
 800ae6e:	bf00      	nop
 800ae70:	370c      	adds	r7, #12
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr
	...

0800ae7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d101      	bne.n	800ae8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e12b      	b.n	800b0e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d106      	bne.n	800aea8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f7fb fec0 	bl	8006c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2224      	movs	r2, #36	; 0x24
 800aeac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	681a      	ldr	r2, [r3, #0]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f022 0201 	bic.w	r2, r2, #1
 800aebe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aece:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aede:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800aee0:	f001 f984 	bl	800c1ec <HAL_RCC_GetPCLK1Freq>
 800aee4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	4a81      	ldr	r2, [pc, #516]	; (800b0f0 <HAL_I2C_Init+0x274>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d807      	bhi.n	800af00 <HAL_I2C_Init+0x84>
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	4a80      	ldr	r2, [pc, #512]	; (800b0f4 <HAL_I2C_Init+0x278>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	bf94      	ite	ls
 800aef8:	2301      	movls	r3, #1
 800aefa:	2300      	movhi	r3, #0
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	e006      	b.n	800af0e <HAL_I2C_Init+0x92>
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	4a7d      	ldr	r2, [pc, #500]	; (800b0f8 <HAL_I2C_Init+0x27c>)
 800af04:	4293      	cmp	r3, r2
 800af06:	bf94      	ite	ls
 800af08:	2301      	movls	r3, #1
 800af0a:	2300      	movhi	r3, #0
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d001      	beq.n	800af16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800af12:	2301      	movs	r3, #1
 800af14:	e0e7      	b.n	800b0e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	4a78      	ldr	r2, [pc, #480]	; (800b0fc <HAL_I2C_Init+0x280>)
 800af1a:	fba2 2303 	umull	r2, r3, r2, r3
 800af1e:	0c9b      	lsrs	r3, r3, #18
 800af20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	430a      	orrs	r2, r1
 800af34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	6a1b      	ldr	r3, [r3, #32]
 800af3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	4a6a      	ldr	r2, [pc, #424]	; (800b0f0 <HAL_I2C_Init+0x274>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d802      	bhi.n	800af50 <HAL_I2C_Init+0xd4>
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	3301      	adds	r3, #1
 800af4e:	e009      	b.n	800af64 <HAL_I2C_Init+0xe8>
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800af56:	fb02 f303 	mul.w	r3, r2, r3
 800af5a:	4a69      	ldr	r2, [pc, #420]	; (800b100 <HAL_I2C_Init+0x284>)
 800af5c:	fba2 2303 	umull	r2, r3, r2, r3
 800af60:	099b      	lsrs	r3, r3, #6
 800af62:	3301      	adds	r3, #1
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	6812      	ldr	r2, [r2, #0]
 800af68:	430b      	orrs	r3, r1
 800af6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	69db      	ldr	r3, [r3, #28]
 800af72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800af76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	495c      	ldr	r1, [pc, #368]	; (800b0f0 <HAL_I2C_Init+0x274>)
 800af80:	428b      	cmp	r3, r1
 800af82:	d819      	bhi.n	800afb8 <HAL_I2C_Init+0x13c>
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	1e59      	subs	r1, r3, #1
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	005b      	lsls	r3, r3, #1
 800af8e:	fbb1 f3f3 	udiv	r3, r1, r3
 800af92:	1c59      	adds	r1, r3, #1
 800af94:	f640 73fc 	movw	r3, #4092	; 0xffc
 800af98:	400b      	ands	r3, r1
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d00a      	beq.n	800afb4 <HAL_I2C_Init+0x138>
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	1e59      	subs	r1, r3, #1
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	005b      	lsls	r3, r3, #1
 800afa8:	fbb1 f3f3 	udiv	r3, r1, r3
 800afac:	3301      	adds	r3, #1
 800afae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800afb2:	e051      	b.n	800b058 <HAL_I2C_Init+0x1dc>
 800afb4:	2304      	movs	r3, #4
 800afb6:	e04f      	b.n	800b058 <HAL_I2C_Init+0x1dc>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d111      	bne.n	800afe4 <HAL_I2C_Init+0x168>
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	1e58      	subs	r0, r3, #1
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6859      	ldr	r1, [r3, #4]
 800afc8:	460b      	mov	r3, r1
 800afca:	005b      	lsls	r3, r3, #1
 800afcc:	440b      	add	r3, r1
 800afce:	fbb0 f3f3 	udiv	r3, r0, r3
 800afd2:	3301      	adds	r3, #1
 800afd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800afd8:	2b00      	cmp	r3, #0
 800afda:	bf0c      	ite	eq
 800afdc:	2301      	moveq	r3, #1
 800afde:	2300      	movne	r3, #0
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	e012      	b.n	800b00a <HAL_I2C_Init+0x18e>
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	1e58      	subs	r0, r3, #1
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6859      	ldr	r1, [r3, #4]
 800afec:	460b      	mov	r3, r1
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	440b      	add	r3, r1
 800aff2:	0099      	lsls	r1, r3, #2
 800aff4:	440b      	add	r3, r1
 800aff6:	fbb0 f3f3 	udiv	r3, r0, r3
 800affa:	3301      	adds	r3, #1
 800affc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b000:	2b00      	cmp	r3, #0
 800b002:	bf0c      	ite	eq
 800b004:	2301      	moveq	r3, #1
 800b006:	2300      	movne	r3, #0
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d001      	beq.n	800b012 <HAL_I2C_Init+0x196>
 800b00e:	2301      	movs	r3, #1
 800b010:	e022      	b.n	800b058 <HAL_I2C_Init+0x1dc>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	689b      	ldr	r3, [r3, #8]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d10e      	bne.n	800b038 <HAL_I2C_Init+0x1bc>
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	1e58      	subs	r0, r3, #1
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6859      	ldr	r1, [r3, #4]
 800b022:	460b      	mov	r3, r1
 800b024:	005b      	lsls	r3, r3, #1
 800b026:	440b      	add	r3, r1
 800b028:	fbb0 f3f3 	udiv	r3, r0, r3
 800b02c:	3301      	adds	r3, #1
 800b02e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b036:	e00f      	b.n	800b058 <HAL_I2C_Init+0x1dc>
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	1e58      	subs	r0, r3, #1
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6859      	ldr	r1, [r3, #4]
 800b040:	460b      	mov	r3, r1
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	440b      	add	r3, r1
 800b046:	0099      	lsls	r1, r3, #2
 800b048:	440b      	add	r3, r1
 800b04a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b04e:	3301      	adds	r3, #1
 800b050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b054:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b058:	6879      	ldr	r1, [r7, #4]
 800b05a:	6809      	ldr	r1, [r1, #0]
 800b05c:	4313      	orrs	r3, r2
 800b05e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	69da      	ldr	r2, [r3, #28]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6a1b      	ldr	r3, [r3, #32]
 800b072:	431a      	orrs	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	430a      	orrs	r2, r1
 800b07a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	689b      	ldr	r3, [r3, #8]
 800b082:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b086:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	6911      	ldr	r1, [r2, #16]
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	68d2      	ldr	r2, [r2, #12]
 800b092:	4311      	orrs	r1, r2
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	6812      	ldr	r2, [r2, #0]
 800b098:	430b      	orrs	r3, r1
 800b09a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	68db      	ldr	r3, [r3, #12]
 800b0a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	695a      	ldr	r2, [r3, #20]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	699b      	ldr	r3, [r3, #24]
 800b0ae:	431a      	orrs	r2, r3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	430a      	orrs	r2, r1
 800b0b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f042 0201 	orr.w	r2, r2, #1
 800b0c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2220      	movs	r2, #32
 800b0d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b0e4:	2300      	movs	r3, #0
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	000186a0 	.word	0x000186a0
 800b0f4:	001e847f 	.word	0x001e847f
 800b0f8:	003d08ff 	.word	0x003d08ff
 800b0fc:	431bde83 	.word	0x431bde83
 800b100:	10624dd3 	.word	0x10624dd3

0800b104 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b088      	sub	sp, #32
 800b108:	af02      	add	r7, sp, #8
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	607a      	str	r2, [r7, #4]
 800b10e:	461a      	mov	r2, r3
 800b110:	460b      	mov	r3, r1
 800b112:	817b      	strh	r3, [r7, #10]
 800b114:	4613      	mov	r3, r2
 800b116:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b118:	f7fe fbee 	bl	80098f8 <HAL_GetTick>
 800b11c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b124:	b2db      	uxtb	r3, r3
 800b126:	2b20      	cmp	r3, #32
 800b128:	f040 80e0 	bne.w	800b2ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	9300      	str	r3, [sp, #0]
 800b130:	2319      	movs	r3, #25
 800b132:	2201      	movs	r2, #1
 800b134:	4970      	ldr	r1, [pc, #448]	; (800b2f8 <HAL_I2C_Master_Transmit+0x1f4>)
 800b136:	68f8      	ldr	r0, [r7, #12]
 800b138:	f000 fc58 	bl	800b9ec <I2C_WaitOnFlagUntilTimeout>
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d001      	beq.n	800b146 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b142:	2302      	movs	r3, #2
 800b144:	e0d3      	b.n	800b2ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d101      	bne.n	800b154 <HAL_I2C_Master_Transmit+0x50>
 800b150:	2302      	movs	r3, #2
 800b152:	e0cc      	b.n	800b2ee <HAL_I2C_Master_Transmit+0x1ea>
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2201      	movs	r2, #1
 800b158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f003 0301 	and.w	r3, r3, #1
 800b166:	2b01      	cmp	r3, #1
 800b168:	d007      	beq.n	800b17a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f042 0201 	orr.w	r2, r2, #1
 800b178:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b188:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2221      	movs	r2, #33	; 0x21
 800b18e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2210      	movs	r2, #16
 800b196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2200      	movs	r2, #0
 800b19e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	893a      	ldrh	r2, [r7, #8]
 800b1aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1b0:	b29a      	uxth	r2, r3
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	4a50      	ldr	r2, [pc, #320]	; (800b2fc <HAL_I2C_Master_Transmit+0x1f8>)
 800b1ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b1bc:	8979      	ldrh	r1, [r7, #10]
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	6a3a      	ldr	r2, [r7, #32]
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	f000 fac2 	bl	800b74c <I2C_MasterRequestWrite>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d001      	beq.n	800b1d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e08d      	b.n	800b2ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	613b      	str	r3, [r7, #16]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	695b      	ldr	r3, [r3, #20]
 800b1dc:	613b      	str	r3, [r7, #16]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	699b      	ldr	r3, [r3, #24]
 800b1e4:	613b      	str	r3, [r7, #16]
 800b1e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b1e8:	e066      	b.n	800b2b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b1ea:	697a      	ldr	r2, [r7, #20]
 800b1ec:	6a39      	ldr	r1, [r7, #32]
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f000 fcd2 	bl	800bb98 <I2C_WaitOnTXEFlagUntilTimeout>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d00d      	beq.n	800b216 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1fe:	2b04      	cmp	r3, #4
 800b200:	d107      	bne.n	800b212 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b210:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b212:	2301      	movs	r3, #1
 800b214:	e06b      	b.n	800b2ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21a:	781a      	ldrb	r2, [r3, #0]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b226:	1c5a      	adds	r2, r3, #1
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b230:	b29b      	uxth	r3, r3
 800b232:	3b01      	subs	r3, #1
 800b234:	b29a      	uxth	r2, r3
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b23e:	3b01      	subs	r3, #1
 800b240:	b29a      	uxth	r2, r3
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	695b      	ldr	r3, [r3, #20]
 800b24c:	f003 0304 	and.w	r3, r3, #4
 800b250:	2b04      	cmp	r3, #4
 800b252:	d11b      	bne.n	800b28c <HAL_I2C_Master_Transmit+0x188>
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d017      	beq.n	800b28c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b260:	781a      	ldrb	r2, [r3, #0]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b26c:	1c5a      	adds	r2, r3, #1
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b276:	b29b      	uxth	r3, r3
 800b278:	3b01      	subs	r3, #1
 800b27a:	b29a      	uxth	r2, r3
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b284:	3b01      	subs	r3, #1
 800b286:	b29a      	uxth	r2, r3
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b28c:	697a      	ldr	r2, [r7, #20]
 800b28e:	6a39      	ldr	r1, [r7, #32]
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f000 fcc2 	bl	800bc1a <I2C_WaitOnBTFFlagUntilTimeout>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d00d      	beq.n	800b2b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a0:	2b04      	cmp	r3, #4
 800b2a2:	d107      	bne.n	800b2b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e01a      	b.n	800b2ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d194      	bne.n	800b1ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2220      	movs	r2, #32
 800b2d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	e000      	b.n	800b2ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b2ec:	2302      	movs	r3, #2
  }
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3718      	adds	r7, #24
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	00100002 	.word	0x00100002
 800b2fc:	ffff0000 	.word	0xffff0000

0800b300 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b08c      	sub	sp, #48	; 0x30
 800b304:	af02      	add	r7, sp, #8
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	607a      	str	r2, [r7, #4]
 800b30a:	461a      	mov	r2, r3
 800b30c:	460b      	mov	r3, r1
 800b30e:	817b      	strh	r3, [r7, #10]
 800b310:	4613      	mov	r3, r2
 800b312:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b314:	f7fe faf0 	bl	80098f8 <HAL_GetTick>
 800b318:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b320:	b2db      	uxtb	r3, r3
 800b322:	2b20      	cmp	r3, #32
 800b324:	f040 820b 	bne.w	800b73e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32a:	9300      	str	r3, [sp, #0]
 800b32c:	2319      	movs	r3, #25
 800b32e:	2201      	movs	r2, #1
 800b330:	497c      	ldr	r1, [pc, #496]	; (800b524 <HAL_I2C_Master_Receive+0x224>)
 800b332:	68f8      	ldr	r0, [r7, #12]
 800b334:	f000 fb5a 	bl	800b9ec <I2C_WaitOnFlagUntilTimeout>
 800b338:	4603      	mov	r3, r0
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d001      	beq.n	800b342 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b33e:	2302      	movs	r3, #2
 800b340:	e1fe      	b.n	800b740 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d101      	bne.n	800b350 <HAL_I2C_Master_Receive+0x50>
 800b34c:	2302      	movs	r3, #2
 800b34e:	e1f7      	b.n	800b740 <HAL_I2C_Master_Receive+0x440>
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2201      	movs	r2, #1
 800b354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f003 0301 	and.w	r3, r3, #1
 800b362:	2b01      	cmp	r3, #1
 800b364:	d007      	beq.n	800b376 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f042 0201 	orr.w	r2, r2, #1
 800b374:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b384:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2222      	movs	r2, #34	; 0x22
 800b38a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2210      	movs	r2, #16
 800b392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	893a      	ldrh	r2, [r7, #8]
 800b3a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3ac:	b29a      	uxth	r2, r3
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	4a5c      	ldr	r2, [pc, #368]	; (800b528 <HAL_I2C_Master_Receive+0x228>)
 800b3b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b3b8:	8979      	ldrh	r1, [r7, #10]
 800b3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	f000 fa46 	bl	800b850 <I2C_MasterRequestRead>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d001      	beq.n	800b3ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e1b8      	b.n	800b740 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d113      	bne.n	800b3fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	623b      	str	r3, [r7, #32]
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	695b      	ldr	r3, [r3, #20]
 800b3e0:	623b      	str	r3, [r7, #32]
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	699b      	ldr	r3, [r3, #24]
 800b3e8:	623b      	str	r3, [r7, #32]
 800b3ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3fa:	601a      	str	r2, [r3, #0]
 800b3fc:	e18c      	b.n	800b718 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b402:	2b01      	cmp	r3, #1
 800b404:	d11b      	bne.n	800b43e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b414:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b416:	2300      	movs	r3, #0
 800b418:	61fb      	str	r3, [r7, #28]
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	695b      	ldr	r3, [r3, #20]
 800b420:	61fb      	str	r3, [r7, #28]
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	699b      	ldr	r3, [r3, #24]
 800b428:	61fb      	str	r3, [r7, #28]
 800b42a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b43a:	601a      	str	r2, [r3, #0]
 800b43c:	e16c      	b.n	800b718 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b442:	2b02      	cmp	r3, #2
 800b444:	d11b      	bne.n	800b47e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b454:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b464:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b466:	2300      	movs	r3, #0
 800b468:	61bb      	str	r3, [r7, #24]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	695b      	ldr	r3, [r3, #20]
 800b470:	61bb      	str	r3, [r7, #24]
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	699b      	ldr	r3, [r3, #24]
 800b478:	61bb      	str	r3, [r7, #24]
 800b47a:	69bb      	ldr	r3, [r7, #24]
 800b47c:	e14c      	b.n	800b718 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b48c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b48e:	2300      	movs	r3, #0
 800b490:	617b      	str	r3, [r7, #20]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	695b      	ldr	r3, [r3, #20]
 800b498:	617b      	str	r3, [r7, #20]
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	699b      	ldr	r3, [r3, #24]
 800b4a0:	617b      	str	r3, [r7, #20]
 800b4a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b4a4:	e138      	b.n	800b718 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4aa:	2b03      	cmp	r3, #3
 800b4ac:	f200 80f1 	bhi.w	800b692 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d123      	bne.n	800b500 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b4bc:	68f8      	ldr	r0, [r7, #12]
 800b4be:	f000 fbed 	bl	800bc9c <I2C_WaitOnRXNEFlagUntilTimeout>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d001      	beq.n	800b4cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	e139      	b.n	800b740 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	691a      	ldr	r2, [r3, #16]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d6:	b2d2      	uxtb	r2, r2
 800b4d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4de:	1c5a      	adds	r2, r3, #1
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4e8:	3b01      	subs	r3, #1
 800b4ea:	b29a      	uxth	r2, r3
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	3b01      	subs	r3, #1
 800b4f8:	b29a      	uxth	r2, r3
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b4fe:	e10b      	b.n	800b718 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b504:	2b02      	cmp	r3, #2
 800b506:	d14e      	bne.n	800b5a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50a:	9300      	str	r3, [sp, #0]
 800b50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50e:	2200      	movs	r2, #0
 800b510:	4906      	ldr	r1, [pc, #24]	; (800b52c <HAL_I2C_Master_Receive+0x22c>)
 800b512:	68f8      	ldr	r0, [r7, #12]
 800b514:	f000 fa6a 	bl	800b9ec <I2C_WaitOnFlagUntilTimeout>
 800b518:	4603      	mov	r3, r0
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d008      	beq.n	800b530 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b51e:	2301      	movs	r3, #1
 800b520:	e10e      	b.n	800b740 <HAL_I2C_Master_Receive+0x440>
 800b522:	bf00      	nop
 800b524:	00100002 	.word	0x00100002
 800b528:	ffff0000 	.word	0xffff0000
 800b52c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b53e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	691a      	ldr	r2, [r3, #16]
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54a:	b2d2      	uxtb	r2, r2
 800b54c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b552:	1c5a      	adds	r2, r3, #1
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b55c:	3b01      	subs	r3, #1
 800b55e:	b29a      	uxth	r2, r3
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b568:	b29b      	uxth	r3, r3
 800b56a:	3b01      	subs	r3, #1
 800b56c:	b29a      	uxth	r2, r3
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	691a      	ldr	r2, [r3, #16]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57c:	b2d2      	uxtb	r2, r2
 800b57e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b584:	1c5a      	adds	r2, r3, #1
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b58e:	3b01      	subs	r3, #1
 800b590:	b29a      	uxth	r2, r3
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b59a:	b29b      	uxth	r3, r3
 800b59c:	3b01      	subs	r3, #1
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b5a4:	e0b8      	b.n	800b718 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a8:	9300      	str	r3, [sp, #0]
 800b5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	4966      	ldr	r1, [pc, #408]	; (800b748 <HAL_I2C_Master_Receive+0x448>)
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	f000 fa1b 	bl	800b9ec <I2C_WaitOnFlagUntilTimeout>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d001      	beq.n	800b5c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	e0bf      	b.n	800b740 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	691a      	ldr	r2, [r3, #16]
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5da:	b2d2      	uxtb	r2, r2
 800b5dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e2:	1c5a      	adds	r2, r3, #1
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	b29a      	uxth	r2, r3
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	3b01      	subs	r3, #1
 800b5fc:	b29a      	uxth	r2, r3
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b604:	9300      	str	r3, [sp, #0]
 800b606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b608:	2200      	movs	r2, #0
 800b60a:	494f      	ldr	r1, [pc, #316]	; (800b748 <HAL_I2C_Master_Receive+0x448>)
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f000 f9ed 	bl	800b9ec <I2C_WaitOnFlagUntilTimeout>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d001      	beq.n	800b61c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b618:	2301      	movs	r3, #1
 800b61a:	e091      	b.n	800b740 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b62a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	691a      	ldr	r2, [r3, #16]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b636:	b2d2      	uxtb	r2, r2
 800b638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b63e:	1c5a      	adds	r2, r3, #1
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b648:	3b01      	subs	r3, #1
 800b64a:	b29a      	uxth	r2, r3
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b654:	b29b      	uxth	r3, r3
 800b656:	3b01      	subs	r3, #1
 800b658:	b29a      	uxth	r2, r3
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	691a      	ldr	r2, [r3, #16]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b668:	b2d2      	uxtb	r2, r2
 800b66a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b670:	1c5a      	adds	r2, r3, #1
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b67a:	3b01      	subs	r3, #1
 800b67c:	b29a      	uxth	r2, r3
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b686:	b29b      	uxth	r3, r3
 800b688:	3b01      	subs	r3, #1
 800b68a:	b29a      	uxth	r2, r3
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b690:	e042      	b.n	800b718 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b694:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f000 fb00 	bl	800bc9c <I2C_WaitOnRXNEFlagUntilTimeout>
 800b69c:	4603      	mov	r3, r0
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d001      	beq.n	800b6a6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e04c      	b.n	800b740 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	691a      	ldr	r2, [r3, #16]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b0:	b2d2      	uxtb	r2, r2
 800b6b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b8:	1c5a      	adds	r2, r3, #1
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6c2:	3b01      	subs	r3, #1
 800b6c4:	b29a      	uxth	r2, r3
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	3b01      	subs	r3, #1
 800b6d2:	b29a      	uxth	r2, r3
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	695b      	ldr	r3, [r3, #20]
 800b6de:	f003 0304 	and.w	r3, r3, #4
 800b6e2:	2b04      	cmp	r3, #4
 800b6e4:	d118      	bne.n	800b718 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	691a      	ldr	r2, [r3, #16]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f0:	b2d2      	uxtb	r2, r2
 800b6f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f8:	1c5a      	adds	r2, r3, #1
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b702:	3b01      	subs	r3, #1
 800b704:	b29a      	uxth	r2, r3
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b70e:	b29b      	uxth	r3, r3
 800b710:	3b01      	subs	r3, #1
 800b712:	b29a      	uxth	r2, r3
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	f47f aec2 	bne.w	800b4a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2220      	movs	r2, #32
 800b726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2200      	movs	r2, #0
 800b736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b73a:	2300      	movs	r3, #0
 800b73c:	e000      	b.n	800b740 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b73e:	2302      	movs	r3, #2
  }
}
 800b740:	4618      	mov	r0, r3
 800b742:	3728      	adds	r7, #40	; 0x28
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	00010004 	.word	0x00010004

0800b74c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b088      	sub	sp, #32
 800b750:	af02      	add	r7, sp, #8
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	607a      	str	r2, [r7, #4]
 800b756:	603b      	str	r3, [r7, #0]
 800b758:	460b      	mov	r3, r1
 800b75a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b760:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	2b08      	cmp	r3, #8
 800b766:	d006      	beq.n	800b776 <I2C_MasterRequestWrite+0x2a>
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d003      	beq.n	800b776 <I2C_MasterRequestWrite+0x2a>
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b774:	d108      	bne.n	800b788 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b784:	601a      	str	r2, [r3, #0]
 800b786:	e00b      	b.n	800b7a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b78c:	2b12      	cmp	r3, #18
 800b78e:	d107      	bne.n	800b7a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b79e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	9300      	str	r3, [sp, #0]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f000 f91d 	bl	800b9ec <I2C_WaitOnFlagUntilTimeout>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d00d      	beq.n	800b7d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7c6:	d103      	bne.n	800b7d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b7d0:	2303      	movs	r3, #3
 800b7d2:	e035      	b.n	800b840 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	691b      	ldr	r3, [r3, #16]
 800b7d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7dc:	d108      	bne.n	800b7f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b7de:	897b      	ldrh	r3, [r7, #10]
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b7ec:	611a      	str	r2, [r3, #16]
 800b7ee:	e01b      	b.n	800b828 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b7f0:	897b      	ldrh	r3, [r7, #10]
 800b7f2:	11db      	asrs	r3, r3, #7
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	f003 0306 	and.w	r3, r3, #6
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	f063 030f 	orn	r3, r3, #15
 800b800:	b2da      	uxtb	r2, r3
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	490e      	ldr	r1, [pc, #56]	; (800b848 <I2C_MasterRequestWrite+0xfc>)
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f000 f943 	bl	800ba9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d001      	beq.n	800b81e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b81a:	2301      	movs	r3, #1
 800b81c:	e010      	b.n	800b840 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b81e:	897b      	ldrh	r3, [r7, #10]
 800b820:	b2da      	uxtb	r2, r3
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	4907      	ldr	r1, [pc, #28]	; (800b84c <I2C_MasterRequestWrite+0x100>)
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f000 f933 	bl	800ba9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b834:	4603      	mov	r3, r0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d001      	beq.n	800b83e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b83a:	2301      	movs	r3, #1
 800b83c:	e000      	b.n	800b840 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	00010008 	.word	0x00010008
 800b84c:	00010002 	.word	0x00010002

0800b850 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b088      	sub	sp, #32
 800b854:	af02      	add	r7, sp, #8
 800b856:	60f8      	str	r0, [r7, #12]
 800b858:	607a      	str	r2, [r7, #4]
 800b85a:	603b      	str	r3, [r7, #0]
 800b85c:	460b      	mov	r3, r1
 800b85e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b864:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	681a      	ldr	r2, [r3, #0]
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b874:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	2b08      	cmp	r3, #8
 800b87a:	d006      	beq.n	800b88a <I2C_MasterRequestRead+0x3a>
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d003      	beq.n	800b88a <I2C_MasterRequestRead+0x3a>
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b888:	d108      	bne.n	800b89c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b898:	601a      	str	r2, [r3, #0]
 800b89a:	e00b      	b.n	800b8b4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8a0:	2b11      	cmp	r3, #17
 800b8a2:	d107      	bne.n	800b8b4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	9300      	str	r3, [sp, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f000 f893 	bl	800b9ec <I2C_WaitOnFlagUntilTimeout>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d00d      	beq.n	800b8e8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8da:	d103      	bne.n	800b8e4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b8e4:	2303      	movs	r3, #3
 800b8e6:	e079      	b.n	800b9dc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	691b      	ldr	r3, [r3, #16]
 800b8ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8f0:	d108      	bne.n	800b904 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b8f2:	897b      	ldrh	r3, [r7, #10]
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	f043 0301 	orr.w	r3, r3, #1
 800b8fa:	b2da      	uxtb	r2, r3
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	611a      	str	r2, [r3, #16]
 800b902:	e05f      	b.n	800b9c4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b904:	897b      	ldrh	r3, [r7, #10]
 800b906:	11db      	asrs	r3, r3, #7
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	f003 0306 	and.w	r3, r3, #6
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	f063 030f 	orn	r3, r3, #15
 800b914:	b2da      	uxtb	r2, r3
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	4930      	ldr	r1, [pc, #192]	; (800b9e4 <I2C_MasterRequestRead+0x194>)
 800b922:	68f8      	ldr	r0, [r7, #12]
 800b924:	f000 f8b9 	bl	800ba9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d001      	beq.n	800b932 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	e054      	b.n	800b9dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b932:	897b      	ldrh	r3, [r7, #10]
 800b934:	b2da      	uxtb	r2, r3
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	4929      	ldr	r1, [pc, #164]	; (800b9e8 <I2C_MasterRequestRead+0x198>)
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	f000 f8a9 	bl	800ba9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b948:	4603      	mov	r3, r0
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d001      	beq.n	800b952 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	e044      	b.n	800b9dc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b952:	2300      	movs	r3, #0
 800b954:	613b      	str	r3, [r7, #16]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	695b      	ldr	r3, [r3, #20]
 800b95c:	613b      	str	r3, [r7, #16]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	699b      	ldr	r3, [r3, #24]
 800b964:	613b      	str	r3, [r7, #16]
 800b966:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	681a      	ldr	r2, [r3, #0]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b976:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	9300      	str	r3, [sp, #0]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f000 f831 	bl	800b9ec <I2C_WaitOnFlagUntilTimeout>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d00d      	beq.n	800b9ac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b99a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b99e:	d103      	bne.n	800b9a8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9a6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800b9a8:	2303      	movs	r3, #3
 800b9aa:	e017      	b.n	800b9dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800b9ac:	897b      	ldrh	r3, [r7, #10]
 800b9ae:	11db      	asrs	r3, r3, #7
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	f003 0306 	and.w	r3, r3, #6
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	f063 030e 	orn	r3, r3, #14
 800b9bc:	b2da      	uxtb	r2, r3
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	4907      	ldr	r1, [pc, #28]	; (800b9e8 <I2C_MasterRequestRead+0x198>)
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f000 f865 	bl	800ba9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d001      	beq.n	800b9da <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e000      	b.n	800b9dc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3718      	adds	r7, #24
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	00010008 	.word	0x00010008
 800b9e8:	00010002 	.word	0x00010002

0800b9ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	603b      	str	r3, [r7, #0]
 800b9f8:	4613      	mov	r3, r2
 800b9fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b9fc:	e025      	b.n	800ba4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba04:	d021      	beq.n	800ba4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba06:	f7fd ff77 	bl	80098f8 <HAL_GetTick>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	1ad3      	subs	r3, r2, r3
 800ba10:	683a      	ldr	r2, [r7, #0]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d302      	bcc.n	800ba1c <I2C_WaitOnFlagUntilTimeout+0x30>
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d116      	bne.n	800ba4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2220      	movs	r2, #32
 800ba26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba36:	f043 0220 	orr.w	r2, r3, #32
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2200      	movs	r2, #0
 800ba42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ba46:	2301      	movs	r3, #1
 800ba48:	e023      	b.n	800ba92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	0c1b      	lsrs	r3, r3, #16
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d10d      	bne.n	800ba70 <I2C_WaitOnFlagUntilTimeout+0x84>
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	695b      	ldr	r3, [r3, #20]
 800ba5a:	43da      	mvns	r2, r3
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	4013      	ands	r3, r2
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	bf0c      	ite	eq
 800ba66:	2301      	moveq	r3, #1
 800ba68:	2300      	movne	r3, #0
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	e00c      	b.n	800ba8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	699b      	ldr	r3, [r3, #24]
 800ba76:	43da      	mvns	r2, r3
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	4013      	ands	r3, r2
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	bf0c      	ite	eq
 800ba82:	2301      	moveq	r3, #1
 800ba84:	2300      	movne	r3, #0
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	461a      	mov	r2, r3
 800ba8a:	79fb      	ldrb	r3, [r7, #7]
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d0b6      	beq.n	800b9fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ba90:	2300      	movs	r3, #0
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b084      	sub	sp, #16
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	60f8      	str	r0, [r7, #12]
 800baa2:	60b9      	str	r1, [r7, #8]
 800baa4:	607a      	str	r2, [r7, #4]
 800baa6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800baa8:	e051      	b.n	800bb4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	695b      	ldr	r3, [r3, #20]
 800bab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bab8:	d123      	bne.n	800bb02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bac8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bad2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2200      	movs	r2, #0
 800bad8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2220      	movs	r2, #32
 800bade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2200      	movs	r2, #0
 800bae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baee:	f043 0204 	orr.w	r2, r3, #4
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2200      	movs	r2, #0
 800bafa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bafe:	2301      	movs	r3, #1
 800bb00:	e046      	b.n	800bb90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb08:	d021      	beq.n	800bb4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb0a:	f7fd fef5 	bl	80098f8 <HAL_GetTick>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	1ad3      	subs	r3, r2, r3
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d302      	bcc.n	800bb20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d116      	bne.n	800bb4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2200      	movs	r2, #0
 800bb24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2220      	movs	r2, #32
 800bb2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2200      	movs	r2, #0
 800bb32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb3a:	f043 0220 	orr.w	r2, r3, #32
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2200      	movs	r2, #0
 800bb46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e020      	b.n	800bb90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	0c1b      	lsrs	r3, r3, #16
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d10c      	bne.n	800bb72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	695b      	ldr	r3, [r3, #20]
 800bb5e:	43da      	mvns	r2, r3
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	4013      	ands	r3, r2
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	bf14      	ite	ne
 800bb6a:	2301      	movne	r3, #1
 800bb6c:	2300      	moveq	r3, #0
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	e00b      	b.n	800bb8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	699b      	ldr	r3, [r3, #24]
 800bb78:	43da      	mvns	r2, r3
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	4013      	ands	r3, r2
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	bf14      	ite	ne
 800bb84:	2301      	movne	r3, #1
 800bb86:	2300      	moveq	r3, #0
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d18d      	bne.n	800baaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800bb8e:	2300      	movs	r3, #0
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3710      	adds	r7, #16
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bba4:	e02d      	b.n	800bc02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f000 f8ce 	bl	800bd48 <I2C_IsAcknowledgeFailed>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d001      	beq.n	800bbb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e02d      	b.n	800bc12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbbc:	d021      	beq.n	800bc02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbbe:	f7fd fe9b 	bl	80098f8 <HAL_GetTick>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	1ad3      	subs	r3, r2, r3
 800bbc8:	68ba      	ldr	r2, [r7, #8]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d302      	bcc.n	800bbd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d116      	bne.n	800bc02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2220      	movs	r2, #32
 800bbde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbee:	f043 0220 	orr.w	r2, r3, #32
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	e007      	b.n	800bc12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	695b      	ldr	r3, [r3, #20]
 800bc08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc0c:	2b80      	cmp	r3, #128	; 0x80
 800bc0e:	d1ca      	bne.n	800bba6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3710      	adds	r7, #16
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b084      	sub	sp, #16
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	60f8      	str	r0, [r7, #12]
 800bc22:	60b9      	str	r1, [r7, #8]
 800bc24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bc26:	e02d      	b.n	800bc84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bc28:	68f8      	ldr	r0, [r7, #12]
 800bc2a:	f000 f88d 	bl	800bd48 <I2C_IsAcknowledgeFailed>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d001      	beq.n	800bc38 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bc34:	2301      	movs	r3, #1
 800bc36:	e02d      	b.n	800bc94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc3e:	d021      	beq.n	800bc84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc40:	f7fd fe5a 	bl	80098f8 <HAL_GetTick>
 800bc44:	4602      	mov	r2, r0
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	1ad3      	subs	r3, r2, r3
 800bc4a:	68ba      	ldr	r2, [r7, #8]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d302      	bcc.n	800bc56 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d116      	bne.n	800bc84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2220      	movs	r2, #32
 800bc60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc70:	f043 0220 	orr.w	r2, r3, #32
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bc80:	2301      	movs	r3, #1
 800bc82:	e007      	b.n	800bc94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	695b      	ldr	r3, [r3, #20]
 800bc8a:	f003 0304 	and.w	r3, r3, #4
 800bc8e:	2b04      	cmp	r3, #4
 800bc90:	d1ca      	bne.n	800bc28 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bc92:	2300      	movs	r3, #0
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3710      	adds	r7, #16
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bca8:	e042      	b.n	800bd30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	695b      	ldr	r3, [r3, #20]
 800bcb0:	f003 0310 	and.w	r3, r3, #16
 800bcb4:	2b10      	cmp	r3, #16
 800bcb6:	d119      	bne.n	800bcec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f06f 0210 	mvn.w	r2, #16
 800bcc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2220      	movs	r2, #32
 800bccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2200      	movs	r2, #0
 800bce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bce8:	2301      	movs	r3, #1
 800bcea:	e029      	b.n	800bd40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcec:	f7fd fe04 	bl	80098f8 <HAL_GetTick>
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	1ad3      	subs	r3, r2, r3
 800bcf6:	68ba      	ldr	r2, [r7, #8]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d302      	bcc.n	800bd02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d116      	bne.n	800bd30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2200      	movs	r2, #0
 800bd06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2220      	movs	r2, #32
 800bd0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2200      	movs	r2, #0
 800bd14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd1c:	f043 0220 	orr.w	r2, r3, #32
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2200      	movs	r2, #0
 800bd28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e007      	b.n	800bd40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	695b      	ldr	r3, [r3, #20]
 800bd36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd3a:	2b40      	cmp	r3, #64	; 0x40
 800bd3c:	d1b5      	bne.n	800bcaa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bd3e:	2300      	movs	r3, #0
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3710      	adds	r7, #16
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	695b      	ldr	r3, [r3, #20]
 800bd56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd5e:	d11b      	bne.n	800bd98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bd68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2220      	movs	r2, #32
 800bd74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd84:	f043 0204 	orr.w	r2, r3, #4
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bd94:	2301      	movs	r3, #1
 800bd96:	e000      	b.n	800bd9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bd98:	2300      	movs	r3, #0
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	370c      	adds	r7, #12
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda4:	4770      	bx	lr
	...

0800bda8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	603b      	str	r3, [r7, #0]
 800bdb6:	4b20      	ldr	r3, [pc, #128]	; (800be38 <HAL_PWREx_EnableOverDrive+0x90>)
 800bdb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdba:	4a1f      	ldr	r2, [pc, #124]	; (800be38 <HAL_PWREx_EnableOverDrive+0x90>)
 800bdbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdc0:	6413      	str	r3, [r2, #64]	; 0x40
 800bdc2:	4b1d      	ldr	r3, [pc, #116]	; (800be38 <HAL_PWREx_EnableOverDrive+0x90>)
 800bdc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdca:	603b      	str	r3, [r7, #0]
 800bdcc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800bdce:	4b1b      	ldr	r3, [pc, #108]	; (800be3c <HAL_PWREx_EnableOverDrive+0x94>)
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bdd4:	f7fd fd90 	bl	80098f8 <HAL_GetTick>
 800bdd8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bdda:	e009      	b.n	800bdf0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bddc:	f7fd fd8c 	bl	80098f8 <HAL_GetTick>
 800bde0:	4602      	mov	r2, r0
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	1ad3      	subs	r3, r2, r3
 800bde6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bdea:	d901      	bls.n	800bdf0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800bdec:	2303      	movs	r3, #3
 800bdee:	e01f      	b.n	800be30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bdf0:	4b13      	ldr	r3, [pc, #76]	; (800be40 <HAL_PWREx_EnableOverDrive+0x98>)
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bdf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdfc:	d1ee      	bne.n	800bddc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800bdfe:	4b11      	ldr	r3, [pc, #68]	; (800be44 <HAL_PWREx_EnableOverDrive+0x9c>)
 800be00:	2201      	movs	r2, #1
 800be02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800be04:	f7fd fd78 	bl	80098f8 <HAL_GetTick>
 800be08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800be0a:	e009      	b.n	800be20 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800be0c:	f7fd fd74 	bl	80098f8 <HAL_GetTick>
 800be10:	4602      	mov	r2, r0
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	1ad3      	subs	r3, r2, r3
 800be16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be1a:	d901      	bls.n	800be20 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800be1c:	2303      	movs	r3, #3
 800be1e:	e007      	b.n	800be30 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800be20:	4b07      	ldr	r3, [pc, #28]	; (800be40 <HAL_PWREx_EnableOverDrive+0x98>)
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be2c:	d1ee      	bne.n	800be0c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800be2e:	2300      	movs	r3, #0
}
 800be30:	4618      	mov	r0, r3
 800be32:	3708      	adds	r7, #8
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}
 800be38:	40023800 	.word	0x40023800
 800be3c:	420e0040 	.word	0x420e0040
 800be40:	40007000 	.word	0x40007000
 800be44:	420e0044 	.word	0x420e0044

0800be48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d101      	bne.n	800be5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800be58:	2301      	movs	r3, #1
 800be5a:	e0cc      	b.n	800bff6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800be5c:	4b68      	ldr	r3, [pc, #416]	; (800c000 <HAL_RCC_ClockConfig+0x1b8>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f003 030f 	and.w	r3, r3, #15
 800be64:	683a      	ldr	r2, [r7, #0]
 800be66:	429a      	cmp	r2, r3
 800be68:	d90c      	bls.n	800be84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800be6a:	4b65      	ldr	r3, [pc, #404]	; (800c000 <HAL_RCC_ClockConfig+0x1b8>)
 800be6c:	683a      	ldr	r2, [r7, #0]
 800be6e:	b2d2      	uxtb	r2, r2
 800be70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800be72:	4b63      	ldr	r3, [pc, #396]	; (800c000 <HAL_RCC_ClockConfig+0x1b8>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f003 030f 	and.w	r3, r3, #15
 800be7a:	683a      	ldr	r2, [r7, #0]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d001      	beq.n	800be84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800be80:	2301      	movs	r3, #1
 800be82:	e0b8      	b.n	800bff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f003 0302 	and.w	r3, r3, #2
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d020      	beq.n	800bed2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f003 0304 	and.w	r3, r3, #4
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d005      	beq.n	800bea8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800be9c:	4b59      	ldr	r3, [pc, #356]	; (800c004 <HAL_RCC_ClockConfig+0x1bc>)
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	4a58      	ldr	r2, [pc, #352]	; (800c004 <HAL_RCC_ClockConfig+0x1bc>)
 800bea2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bea6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f003 0308 	and.w	r3, r3, #8
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d005      	beq.n	800bec0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800beb4:	4b53      	ldr	r3, [pc, #332]	; (800c004 <HAL_RCC_ClockConfig+0x1bc>)
 800beb6:	689b      	ldr	r3, [r3, #8]
 800beb8:	4a52      	ldr	r2, [pc, #328]	; (800c004 <HAL_RCC_ClockConfig+0x1bc>)
 800beba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bebe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bec0:	4b50      	ldr	r3, [pc, #320]	; (800c004 <HAL_RCC_ClockConfig+0x1bc>)
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	494d      	ldr	r1, [pc, #308]	; (800c004 <HAL_RCC_ClockConfig+0x1bc>)
 800bece:	4313      	orrs	r3, r2
 800bed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f003 0301 	and.w	r3, r3, #1
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d044      	beq.n	800bf68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d107      	bne.n	800bef6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bee6:	4b47      	ldr	r3, [pc, #284]	; (800c004 <HAL_RCC_ClockConfig+0x1bc>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d119      	bne.n	800bf26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	e07f      	b.n	800bff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	2b02      	cmp	r3, #2
 800befc:	d003      	beq.n	800bf06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bf02:	2b03      	cmp	r3, #3
 800bf04:	d107      	bne.n	800bf16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf06:	4b3f      	ldr	r3, [pc, #252]	; (800c004 <HAL_RCC_ClockConfig+0x1bc>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d109      	bne.n	800bf26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bf12:	2301      	movs	r3, #1
 800bf14:	e06f      	b.n	800bff6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf16:	4b3b      	ldr	r3, [pc, #236]	; (800c004 <HAL_RCC_ClockConfig+0x1bc>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f003 0302 	and.w	r3, r3, #2
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d101      	bne.n	800bf26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bf22:	2301      	movs	r3, #1
 800bf24:	e067      	b.n	800bff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bf26:	4b37      	ldr	r3, [pc, #220]	; (800c004 <HAL_RCC_ClockConfig+0x1bc>)
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	f023 0203 	bic.w	r2, r3, #3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	4934      	ldr	r1, [pc, #208]	; (800c004 <HAL_RCC_ClockConfig+0x1bc>)
 800bf34:	4313      	orrs	r3, r2
 800bf36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bf38:	f7fd fcde 	bl	80098f8 <HAL_GetTick>
 800bf3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf3e:	e00a      	b.n	800bf56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf40:	f7fd fcda 	bl	80098f8 <HAL_GetTick>
 800bf44:	4602      	mov	r2, r0
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	1ad3      	subs	r3, r2, r3
 800bf4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d901      	bls.n	800bf56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bf52:	2303      	movs	r3, #3
 800bf54:	e04f      	b.n	800bff6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf56:	4b2b      	ldr	r3, [pc, #172]	; (800c004 <HAL_RCC_ClockConfig+0x1bc>)
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	f003 020c 	and.w	r2, r3, #12
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d1eb      	bne.n	800bf40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bf68:	4b25      	ldr	r3, [pc, #148]	; (800c000 <HAL_RCC_ClockConfig+0x1b8>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f003 030f 	and.w	r3, r3, #15
 800bf70:	683a      	ldr	r2, [r7, #0]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d20c      	bcs.n	800bf90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf76:	4b22      	ldr	r3, [pc, #136]	; (800c000 <HAL_RCC_ClockConfig+0x1b8>)
 800bf78:	683a      	ldr	r2, [r7, #0]
 800bf7a:	b2d2      	uxtb	r2, r2
 800bf7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf7e:	4b20      	ldr	r3, [pc, #128]	; (800c000 <HAL_RCC_ClockConfig+0x1b8>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f003 030f 	and.w	r3, r3, #15
 800bf86:	683a      	ldr	r2, [r7, #0]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d001      	beq.n	800bf90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	e032      	b.n	800bff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f003 0304 	and.w	r3, r3, #4
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d008      	beq.n	800bfae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bf9c:	4b19      	ldr	r3, [pc, #100]	; (800c004 <HAL_RCC_ClockConfig+0x1bc>)
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	4916      	ldr	r1, [pc, #88]	; (800c004 <HAL_RCC_ClockConfig+0x1bc>)
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f003 0308 	and.w	r3, r3, #8
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d009      	beq.n	800bfce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bfba:	4b12      	ldr	r3, [pc, #72]	; (800c004 <HAL_RCC_ClockConfig+0x1bc>)
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	691b      	ldr	r3, [r3, #16]
 800bfc6:	00db      	lsls	r3, r3, #3
 800bfc8:	490e      	ldr	r1, [pc, #56]	; (800c004 <HAL_RCC_ClockConfig+0x1bc>)
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800bfce:	f000 f821 	bl	800c014 <HAL_RCC_GetSysClockFreq>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	4b0b      	ldr	r3, [pc, #44]	; (800c004 <HAL_RCC_ClockConfig+0x1bc>)
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	091b      	lsrs	r3, r3, #4
 800bfda:	f003 030f 	and.w	r3, r3, #15
 800bfde:	490a      	ldr	r1, [pc, #40]	; (800c008 <HAL_RCC_ClockConfig+0x1c0>)
 800bfe0:	5ccb      	ldrb	r3, [r1, r3]
 800bfe2:	fa22 f303 	lsr.w	r3, r2, r3
 800bfe6:	4a09      	ldr	r2, [pc, #36]	; (800c00c <HAL_RCC_ClockConfig+0x1c4>)
 800bfe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800bfea:	4b09      	ldr	r3, [pc, #36]	; (800c010 <HAL_RCC_ClockConfig+0x1c8>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7fd fc3e 	bl	8009870 <HAL_InitTick>

  return HAL_OK;
 800bff4:	2300      	movs	r3, #0
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3710      	adds	r7, #16
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	40023c00 	.word	0x40023c00
 800c004:	40023800 	.word	0x40023800
 800c008:	0801a290 	.word	0x0801a290
 800c00c:	20000000 	.word	0x20000000
 800c010:	20000004 	.word	0x20000004

0800c014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c014:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c018:	b084      	sub	sp, #16
 800c01a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c01c:	2300      	movs	r3, #0
 800c01e:	607b      	str	r3, [r7, #4]
 800c020:	2300      	movs	r3, #0
 800c022:	60fb      	str	r3, [r7, #12]
 800c024:	2300      	movs	r3, #0
 800c026:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c028:	2300      	movs	r3, #0
 800c02a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c02c:	4b67      	ldr	r3, [pc, #412]	; (800c1cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c02e:	689b      	ldr	r3, [r3, #8]
 800c030:	f003 030c 	and.w	r3, r3, #12
 800c034:	2b08      	cmp	r3, #8
 800c036:	d00d      	beq.n	800c054 <HAL_RCC_GetSysClockFreq+0x40>
 800c038:	2b08      	cmp	r3, #8
 800c03a:	f200 80bd 	bhi.w	800c1b8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d002      	beq.n	800c048 <HAL_RCC_GetSysClockFreq+0x34>
 800c042:	2b04      	cmp	r3, #4
 800c044:	d003      	beq.n	800c04e <HAL_RCC_GetSysClockFreq+0x3a>
 800c046:	e0b7      	b.n	800c1b8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c048:	4b61      	ldr	r3, [pc, #388]	; (800c1d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c04a:	60bb      	str	r3, [r7, #8]
       break;
 800c04c:	e0b7      	b.n	800c1be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c04e:	4b60      	ldr	r3, [pc, #384]	; (800c1d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c050:	60bb      	str	r3, [r7, #8]
      break;
 800c052:	e0b4      	b.n	800c1be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c054:	4b5d      	ldr	r3, [pc, #372]	; (800c1cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c05c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c05e:	4b5b      	ldr	r3, [pc, #364]	; (800c1cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c066:	2b00      	cmp	r3, #0
 800c068:	d04d      	beq.n	800c106 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c06a:	4b58      	ldr	r3, [pc, #352]	; (800c1cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	099b      	lsrs	r3, r3, #6
 800c070:	461a      	mov	r2, r3
 800c072:	f04f 0300 	mov.w	r3, #0
 800c076:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c07a:	f04f 0100 	mov.w	r1, #0
 800c07e:	ea02 0800 	and.w	r8, r2, r0
 800c082:	ea03 0901 	and.w	r9, r3, r1
 800c086:	4640      	mov	r0, r8
 800c088:	4649      	mov	r1, r9
 800c08a:	f04f 0200 	mov.w	r2, #0
 800c08e:	f04f 0300 	mov.w	r3, #0
 800c092:	014b      	lsls	r3, r1, #5
 800c094:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c098:	0142      	lsls	r2, r0, #5
 800c09a:	4610      	mov	r0, r2
 800c09c:	4619      	mov	r1, r3
 800c09e:	ebb0 0008 	subs.w	r0, r0, r8
 800c0a2:	eb61 0109 	sbc.w	r1, r1, r9
 800c0a6:	f04f 0200 	mov.w	r2, #0
 800c0aa:	f04f 0300 	mov.w	r3, #0
 800c0ae:	018b      	lsls	r3, r1, #6
 800c0b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c0b4:	0182      	lsls	r2, r0, #6
 800c0b6:	1a12      	subs	r2, r2, r0
 800c0b8:	eb63 0301 	sbc.w	r3, r3, r1
 800c0bc:	f04f 0000 	mov.w	r0, #0
 800c0c0:	f04f 0100 	mov.w	r1, #0
 800c0c4:	00d9      	lsls	r1, r3, #3
 800c0c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c0ca:	00d0      	lsls	r0, r2, #3
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	eb12 0208 	adds.w	r2, r2, r8
 800c0d4:	eb43 0309 	adc.w	r3, r3, r9
 800c0d8:	f04f 0000 	mov.w	r0, #0
 800c0dc:	f04f 0100 	mov.w	r1, #0
 800c0e0:	0299      	lsls	r1, r3, #10
 800c0e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c0e6:	0290      	lsls	r0, r2, #10
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	4610      	mov	r0, r2
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	f04f 0300 	mov.w	r3, #0
 800c0f8:	f7f4 fdde 	bl	8000cb8 <__aeabi_uldivmod>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	460b      	mov	r3, r1
 800c100:	4613      	mov	r3, r2
 800c102:	60fb      	str	r3, [r7, #12]
 800c104:	e04a      	b.n	800c19c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c106:	4b31      	ldr	r3, [pc, #196]	; (800c1cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	099b      	lsrs	r3, r3, #6
 800c10c:	461a      	mov	r2, r3
 800c10e:	f04f 0300 	mov.w	r3, #0
 800c112:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c116:	f04f 0100 	mov.w	r1, #0
 800c11a:	ea02 0400 	and.w	r4, r2, r0
 800c11e:	ea03 0501 	and.w	r5, r3, r1
 800c122:	4620      	mov	r0, r4
 800c124:	4629      	mov	r1, r5
 800c126:	f04f 0200 	mov.w	r2, #0
 800c12a:	f04f 0300 	mov.w	r3, #0
 800c12e:	014b      	lsls	r3, r1, #5
 800c130:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c134:	0142      	lsls	r2, r0, #5
 800c136:	4610      	mov	r0, r2
 800c138:	4619      	mov	r1, r3
 800c13a:	1b00      	subs	r0, r0, r4
 800c13c:	eb61 0105 	sbc.w	r1, r1, r5
 800c140:	f04f 0200 	mov.w	r2, #0
 800c144:	f04f 0300 	mov.w	r3, #0
 800c148:	018b      	lsls	r3, r1, #6
 800c14a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c14e:	0182      	lsls	r2, r0, #6
 800c150:	1a12      	subs	r2, r2, r0
 800c152:	eb63 0301 	sbc.w	r3, r3, r1
 800c156:	f04f 0000 	mov.w	r0, #0
 800c15a:	f04f 0100 	mov.w	r1, #0
 800c15e:	00d9      	lsls	r1, r3, #3
 800c160:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c164:	00d0      	lsls	r0, r2, #3
 800c166:	4602      	mov	r2, r0
 800c168:	460b      	mov	r3, r1
 800c16a:	1912      	adds	r2, r2, r4
 800c16c:	eb45 0303 	adc.w	r3, r5, r3
 800c170:	f04f 0000 	mov.w	r0, #0
 800c174:	f04f 0100 	mov.w	r1, #0
 800c178:	0299      	lsls	r1, r3, #10
 800c17a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c17e:	0290      	lsls	r0, r2, #10
 800c180:	4602      	mov	r2, r0
 800c182:	460b      	mov	r3, r1
 800c184:	4610      	mov	r0, r2
 800c186:	4619      	mov	r1, r3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	461a      	mov	r2, r3
 800c18c:	f04f 0300 	mov.w	r3, #0
 800c190:	f7f4 fd92 	bl	8000cb8 <__aeabi_uldivmod>
 800c194:	4602      	mov	r2, r0
 800c196:	460b      	mov	r3, r1
 800c198:	4613      	mov	r3, r2
 800c19a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c19c:	4b0b      	ldr	r3, [pc, #44]	; (800c1cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	0c1b      	lsrs	r3, r3, #16
 800c1a2:	f003 0303 	and.w	r3, r3, #3
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	005b      	lsls	r3, r3, #1
 800c1aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c1ac:	68fa      	ldr	r2, [r7, #12]
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1b4:	60bb      	str	r3, [r7, #8]
      break;
 800c1b6:	e002      	b.n	800c1be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c1b8:	4b05      	ldr	r3, [pc, #20]	; (800c1d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c1ba:	60bb      	str	r3, [r7, #8]
      break;
 800c1bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c1be:	68bb      	ldr	r3, [r7, #8]
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3710      	adds	r7, #16
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c1ca:	bf00      	nop
 800c1cc:	40023800 	.word	0x40023800
 800c1d0:	00f42400 	.word	0x00f42400

0800c1d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c1d8:	4b03      	ldr	r3, [pc, #12]	; (800c1e8 <HAL_RCC_GetHCLKFreq+0x14>)
 800c1da:	681b      	ldr	r3, [r3, #0]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr
 800c1e6:	bf00      	nop
 800c1e8:	20000000 	.word	0x20000000

0800c1ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c1f0:	f7ff fff0 	bl	800c1d4 <HAL_RCC_GetHCLKFreq>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	4b05      	ldr	r3, [pc, #20]	; (800c20c <HAL_RCC_GetPCLK1Freq+0x20>)
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	0a9b      	lsrs	r3, r3, #10
 800c1fc:	f003 0307 	and.w	r3, r3, #7
 800c200:	4903      	ldr	r1, [pc, #12]	; (800c210 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c202:	5ccb      	ldrb	r3, [r1, r3]
 800c204:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c208:	4618      	mov	r0, r3
 800c20a:	bd80      	pop	{r7, pc}
 800c20c:	40023800 	.word	0x40023800
 800c210:	0801a2a0 	.word	0x0801a2a0

0800c214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c218:	f7ff ffdc 	bl	800c1d4 <HAL_RCC_GetHCLKFreq>
 800c21c:	4602      	mov	r2, r0
 800c21e:	4b05      	ldr	r3, [pc, #20]	; (800c234 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	0b5b      	lsrs	r3, r3, #13
 800c224:	f003 0307 	and.w	r3, r3, #7
 800c228:	4903      	ldr	r1, [pc, #12]	; (800c238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c22a:	5ccb      	ldrb	r3, [r1, r3]
 800c22c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c230:	4618      	mov	r0, r3
 800c232:	bd80      	pop	{r7, pc}
 800c234:	40023800 	.word	0x40023800
 800c238:	0801a2a0 	.word	0x0801a2a0

0800c23c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b088      	sub	sp, #32
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c244:	2300      	movs	r3, #0
 800c246:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c248:	2300      	movs	r3, #0
 800c24a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c24c:	2300      	movs	r3, #0
 800c24e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c250:	2300      	movs	r3, #0
 800c252:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c254:	2300      	movs	r3, #0
 800c256:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c260:	2b00      	cmp	r3, #0
 800c262:	d00a      	beq.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c264:	4b66      	ldr	r3, [pc, #408]	; (800c400 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c26a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c272:	4963      	ldr	r1, [pc, #396]	; (800c400 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c274:	4313      	orrs	r3, r2
 800c276:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c282:	2b00      	cmp	r3, #0
 800c284:	d00a      	beq.n	800c29c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c286:	4b5e      	ldr	r3, [pc, #376]	; (800c400 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c28c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c294:	495a      	ldr	r1, [pc, #360]	; (800c400 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c296:	4313      	orrs	r3, r2
 800c298:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f003 0301 	and.w	r3, r3, #1
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d10b      	bne.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d105      	bne.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d075      	beq.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c2c0:	4b50      	ldr	r3, [pc, #320]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c2c6:	f7fd fb17 	bl	80098f8 <HAL_GetTick>
 800c2ca:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c2cc:	e008      	b.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c2ce:	f7fd fb13 	bl	80098f8 <HAL_GetTick>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	69fb      	ldr	r3, [r7, #28]
 800c2d6:	1ad3      	subs	r3, r2, r3
 800c2d8:	2b02      	cmp	r3, #2
 800c2da:	d901      	bls.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c2dc:	2303      	movs	r3, #3
 800c2de:	e1dc      	b.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c2e0:	4b47      	ldr	r3, [pc, #284]	; (800c400 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d1f0      	bne.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f003 0301 	and.w	r3, r3, #1
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d009      	beq.n	800c30c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	019a      	lsls	r2, r3, #6
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	689b      	ldr	r3, [r3, #8]
 800c302:	071b      	lsls	r3, r3, #28
 800c304:	493e      	ldr	r1, [pc, #248]	; (800c400 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c306:	4313      	orrs	r3, r2
 800c308:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f003 0302 	and.w	r3, r3, #2
 800c314:	2b00      	cmp	r3, #0
 800c316:	d01f      	beq.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c318:	4b39      	ldr	r3, [pc, #228]	; (800c400 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c31a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c31e:	0f1b      	lsrs	r3, r3, #28
 800c320:	f003 0307 	and.w	r3, r3, #7
 800c324:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	019a      	lsls	r2, r3, #6
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	68db      	ldr	r3, [r3, #12]
 800c330:	061b      	lsls	r3, r3, #24
 800c332:	431a      	orrs	r2, r3
 800c334:	69bb      	ldr	r3, [r7, #24]
 800c336:	071b      	lsls	r3, r3, #28
 800c338:	4931      	ldr	r1, [pc, #196]	; (800c400 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c33a:	4313      	orrs	r3, r2
 800c33c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c340:	4b2f      	ldr	r3, [pc, #188]	; (800c400 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c346:	f023 021f 	bic.w	r2, r3, #31
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6a1b      	ldr	r3, [r3, #32]
 800c34e:	3b01      	subs	r3, #1
 800c350:	492b      	ldr	r1, [pc, #172]	; (800c400 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c352:	4313      	orrs	r3, r2
 800c354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c360:	2b00      	cmp	r3, #0
 800c362:	d00d      	beq.n	800c380 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	019a      	lsls	r2, r3, #6
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	68db      	ldr	r3, [r3, #12]
 800c36e:	061b      	lsls	r3, r3, #24
 800c370:	431a      	orrs	r2, r3
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	689b      	ldr	r3, [r3, #8]
 800c376:	071b      	lsls	r3, r3, #28
 800c378:	4921      	ldr	r1, [pc, #132]	; (800c400 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c37a:	4313      	orrs	r3, r2
 800c37c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c380:	4b20      	ldr	r3, [pc, #128]	; (800c404 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c382:	2201      	movs	r2, #1
 800c384:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c386:	f7fd fab7 	bl	80098f8 <HAL_GetTick>
 800c38a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c38c:	e008      	b.n	800c3a0 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c38e:	f7fd fab3 	bl	80098f8 <HAL_GetTick>
 800c392:	4602      	mov	r2, r0
 800c394:	69fb      	ldr	r3, [r7, #28]
 800c396:	1ad3      	subs	r3, r2, r3
 800c398:	2b02      	cmp	r3, #2
 800c39a:	d901      	bls.n	800c3a0 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c39c:	2303      	movs	r3, #3
 800c39e:	e17c      	b.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c3a0:	4b17      	ldr	r3, [pc, #92]	; (800c400 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d0f0      	beq.n	800c38e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f003 0304 	and.w	r3, r3, #4
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d112      	bne.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d10c      	bne.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	f000 80ce 	beq.w	800c56e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c3d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3da:	f040 80c8 	bne.w	800c56e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c3de:	4b0a      	ldr	r3, [pc, #40]	; (800c408 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c3e4:	f7fd fa88 	bl	80098f8 <HAL_GetTick>
 800c3e8:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c3ea:	e00f      	b.n	800c40c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c3ec:	f7fd fa84 	bl	80098f8 <HAL_GetTick>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	69fb      	ldr	r3, [r7, #28]
 800c3f4:	1ad3      	subs	r3, r2, r3
 800c3f6:	2b02      	cmp	r3, #2
 800c3f8:	d908      	bls.n	800c40c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c3fa:	2303      	movs	r3, #3
 800c3fc:	e14d      	b.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c3fe:	bf00      	nop
 800c400:	40023800 	.word	0x40023800
 800c404:	42470068 	.word	0x42470068
 800c408:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c40c:	4ba5      	ldr	r3, [pc, #660]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c418:	d0e8      	beq.n	800c3ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f003 0304 	and.w	r3, r3, #4
 800c422:	2b00      	cmp	r3, #0
 800c424:	d02e      	beq.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c426:	4b9f      	ldr	r3, [pc, #636]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c42c:	0c1b      	lsrs	r3, r3, #16
 800c42e:	f003 0303 	and.w	r3, r3, #3
 800c432:	3301      	adds	r3, #1
 800c434:	005b      	lsls	r3, r3, #1
 800c436:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c438:	4b9a      	ldr	r3, [pc, #616]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c43a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c43e:	0f1b      	lsrs	r3, r3, #28
 800c440:	f003 0307 	and.w	r3, r3, #7
 800c444:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	691b      	ldr	r3, [r3, #16]
 800c44a:	019a      	lsls	r2, r3, #6
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	085b      	lsrs	r3, r3, #1
 800c450:	3b01      	subs	r3, #1
 800c452:	041b      	lsls	r3, r3, #16
 800c454:	431a      	orrs	r2, r3
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	699b      	ldr	r3, [r3, #24]
 800c45a:	061b      	lsls	r3, r3, #24
 800c45c:	431a      	orrs	r2, r3
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	071b      	lsls	r3, r3, #28
 800c462:	4990      	ldr	r1, [pc, #576]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c464:	4313      	orrs	r3, r2
 800c466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c46a:	4b8e      	ldr	r3, [pc, #568]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c46c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c470:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c478:	3b01      	subs	r3, #1
 800c47a:	021b      	lsls	r3, r3, #8
 800c47c:	4989      	ldr	r1, [pc, #548]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c47e:	4313      	orrs	r3, r2
 800c480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f003 0308 	and.w	r3, r3, #8
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d02c      	beq.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c490:	4b84      	ldr	r3, [pc, #528]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c496:	0c1b      	lsrs	r3, r3, #16
 800c498:	f003 0303 	and.w	r3, r3, #3
 800c49c:	3301      	adds	r3, #1
 800c49e:	005b      	lsls	r3, r3, #1
 800c4a0:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c4a2:	4b80      	ldr	r3, [pc, #512]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4a8:	0e1b      	lsrs	r3, r3, #24
 800c4aa:	f003 030f 	and.w	r3, r3, #15
 800c4ae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	691b      	ldr	r3, [r3, #16]
 800c4b4:	019a      	lsls	r2, r3, #6
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	085b      	lsrs	r3, r3, #1
 800c4ba:	3b01      	subs	r3, #1
 800c4bc:	041b      	lsls	r3, r3, #16
 800c4be:	431a      	orrs	r2, r3
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	061b      	lsls	r3, r3, #24
 800c4c4:	431a      	orrs	r2, r3
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	69db      	ldr	r3, [r3, #28]
 800c4ca:	071b      	lsls	r3, r3, #28
 800c4cc:	4975      	ldr	r1, [pc, #468]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c4d4:	4b73      	ldr	r3, [pc, #460]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4e2:	4970      	ldr	r1, [pc, #448]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4e4:	4313      	orrs	r3, r2
 800c4e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d024      	beq.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c4fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4fe:	d11f      	bne.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c500:	4b68      	ldr	r3, [pc, #416]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c506:	0e1b      	lsrs	r3, r3, #24
 800c508:	f003 030f 	and.w	r3, r3, #15
 800c50c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c50e:	4b65      	ldr	r3, [pc, #404]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c514:	0f1b      	lsrs	r3, r3, #28
 800c516:	f003 0307 	and.w	r3, r3, #7
 800c51a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	691b      	ldr	r3, [r3, #16]
 800c520:	019a      	lsls	r2, r3, #6
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	695b      	ldr	r3, [r3, #20]
 800c526:	085b      	lsrs	r3, r3, #1
 800c528:	3b01      	subs	r3, #1
 800c52a:	041b      	lsls	r3, r3, #16
 800c52c:	431a      	orrs	r2, r3
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	061b      	lsls	r3, r3, #24
 800c532:	431a      	orrs	r2, r3
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	071b      	lsls	r3, r3, #28
 800c538:	495a      	ldr	r1, [pc, #360]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c53a:	4313      	orrs	r3, r2
 800c53c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c540:	4b59      	ldr	r3, [pc, #356]	; (800c6a8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c542:	2201      	movs	r2, #1
 800c544:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c546:	f7fd f9d7 	bl	80098f8 <HAL_GetTick>
 800c54a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c54c:	e008      	b.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c54e:	f7fd f9d3 	bl	80098f8 <HAL_GetTick>
 800c552:	4602      	mov	r2, r0
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	1ad3      	subs	r3, r2, r3
 800c558:	2b02      	cmp	r3, #2
 800c55a:	d901      	bls.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c55c:	2303      	movs	r3, #3
 800c55e:	e09c      	b.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c560:	4b50      	ldr	r3, [pc, #320]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c56c:	d1ef      	bne.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f003 0320 	and.w	r3, r3, #32
 800c576:	2b00      	cmp	r3, #0
 800c578:	f000 8083 	beq.w	800c682 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c57c:	2300      	movs	r3, #0
 800c57e:	60bb      	str	r3, [r7, #8]
 800c580:	4b48      	ldr	r3, [pc, #288]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c584:	4a47      	ldr	r2, [pc, #284]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c58a:	6413      	str	r3, [r2, #64]	; 0x40
 800c58c:	4b45      	ldr	r3, [pc, #276]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c58e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c594:	60bb      	str	r3, [r7, #8]
 800c596:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c598:	4b44      	ldr	r3, [pc, #272]	; (800c6ac <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a43      	ldr	r2, [pc, #268]	; (800c6ac <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c59e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5a2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c5a4:	f7fd f9a8 	bl	80098f8 <HAL_GetTick>
 800c5a8:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c5aa:	e008      	b.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c5ac:	f7fd f9a4 	bl	80098f8 <HAL_GetTick>
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	1ad3      	subs	r3, r2, r3
 800c5b6:	2b02      	cmp	r3, #2
 800c5b8:	d901      	bls.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c5ba:	2303      	movs	r3, #3
 800c5bc:	e06d      	b.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c5be:	4b3b      	ldr	r3, [pc, #236]	; (800c6ac <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d0f0      	beq.n	800c5ac <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c5ca:	4b36      	ldr	r3, [pc, #216]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c5cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c5d2:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c5d4:	69bb      	ldr	r3, [r7, #24]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d02f      	beq.n	800c63a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c5e2:	69ba      	ldr	r2, [r7, #24]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d028      	beq.n	800c63a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c5e8:	4b2e      	ldr	r3, [pc, #184]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c5ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5f0:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c5f2:	4b2f      	ldr	r3, [pc, #188]	; (800c6b0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c5f8:	4b2d      	ldr	r3, [pc, #180]	; (800c6b0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c5fe:	4a29      	ldr	r2, [pc, #164]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c600:	69bb      	ldr	r3, [r7, #24]
 800c602:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c604:	4b27      	ldr	r3, [pc, #156]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c608:	f003 0301 	and.w	r3, r3, #1
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d114      	bne.n	800c63a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c610:	f7fd f972 	bl	80098f8 <HAL_GetTick>
 800c614:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c616:	e00a      	b.n	800c62e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c618:	f7fd f96e 	bl	80098f8 <HAL_GetTick>
 800c61c:	4602      	mov	r2, r0
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	1ad3      	subs	r3, r2, r3
 800c622:	f241 3288 	movw	r2, #5000	; 0x1388
 800c626:	4293      	cmp	r3, r2
 800c628:	d901      	bls.n	800c62e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800c62a:	2303      	movs	r3, #3
 800c62c:	e035      	b.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c62e:	4b1d      	ldr	r3, [pc, #116]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c632:	f003 0302 	and.w	r3, r3, #2
 800c636:	2b00      	cmp	r3, #0
 800c638:	d0ee      	beq.n	800c618 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c63e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c646:	d10d      	bne.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800c648:	4b16      	ldr	r3, [pc, #88]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c64a:	689b      	ldr	r3, [r3, #8]
 800c64c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c654:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c65c:	4911      	ldr	r1, [pc, #68]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c65e:	4313      	orrs	r3, r2
 800c660:	608b      	str	r3, [r1, #8]
 800c662:	e005      	b.n	800c670 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800c664:	4b0f      	ldr	r3, [pc, #60]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c666:	689b      	ldr	r3, [r3, #8]
 800c668:	4a0e      	ldr	r2, [pc, #56]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c66a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c66e:	6093      	str	r3, [r2, #8]
 800c670:	4b0c      	ldr	r3, [pc, #48]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c672:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c67c:	4909      	ldr	r1, [pc, #36]	; (800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c67e:	4313      	orrs	r3, r2
 800c680:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f003 0310 	and.w	r3, r3, #16
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d004      	beq.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c694:	4b07      	ldr	r3, [pc, #28]	; (800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800c696:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c698:	2300      	movs	r3, #0
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3720      	adds	r7, #32
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	40023800 	.word	0x40023800
 800c6a8:	42470070 	.word	0x42470070
 800c6ac:	40007000 	.word	0x40007000
 800c6b0:	42470e40 	.word	0x42470e40
 800c6b4:	424711e0 	.word	0x424711e0

0800c6b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b086      	sub	sp, #24
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f003 0301 	and.w	r3, r3, #1
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d075      	beq.n	800c7bc <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c6d0:	4ba2      	ldr	r3, [pc, #648]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c6d2:	689b      	ldr	r3, [r3, #8]
 800c6d4:	f003 030c 	and.w	r3, r3, #12
 800c6d8:	2b04      	cmp	r3, #4
 800c6da:	d00c      	beq.n	800c6f6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c6dc:	4b9f      	ldr	r3, [pc, #636]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c6de:	689b      	ldr	r3, [r3, #8]
 800c6e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c6e4:	2b08      	cmp	r3, #8
 800c6e6:	d112      	bne.n	800c70e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c6e8:	4b9c      	ldr	r3, [pc, #624]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6f4:	d10b      	bne.n	800c70e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c6f6:	4b99      	ldr	r3, [pc, #612]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d05b      	beq.n	800c7ba <HAL_RCC_OscConfig+0x102>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d157      	bne.n	800c7ba <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800c70a:	2301      	movs	r3, #1
 800c70c:	e20b      	b.n	800cb26 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c716:	d106      	bne.n	800c726 <HAL_RCC_OscConfig+0x6e>
 800c718:	4b90      	ldr	r3, [pc, #576]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a8f      	ldr	r2, [pc, #572]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c71e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c722:	6013      	str	r3, [r2, #0]
 800c724:	e01d      	b.n	800c762 <HAL_RCC_OscConfig+0xaa>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c72e:	d10c      	bne.n	800c74a <HAL_RCC_OscConfig+0x92>
 800c730:	4b8a      	ldr	r3, [pc, #552]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a89      	ldr	r2, [pc, #548]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c736:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c73a:	6013      	str	r3, [r2, #0]
 800c73c:	4b87      	ldr	r3, [pc, #540]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a86      	ldr	r2, [pc, #536]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c746:	6013      	str	r3, [r2, #0]
 800c748:	e00b      	b.n	800c762 <HAL_RCC_OscConfig+0xaa>
 800c74a:	4b84      	ldr	r3, [pc, #528]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4a83      	ldr	r2, [pc, #524]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c754:	6013      	str	r3, [r2, #0]
 800c756:	4b81      	ldr	r3, [pc, #516]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4a80      	ldr	r2, [pc, #512]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c75c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c760:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d013      	beq.n	800c792 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c76a:	f7fd f8c5 	bl	80098f8 <HAL_GetTick>
 800c76e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c770:	e008      	b.n	800c784 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c772:	f7fd f8c1 	bl	80098f8 <HAL_GetTick>
 800c776:	4602      	mov	r2, r0
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	1ad3      	subs	r3, r2, r3
 800c77c:	2b64      	cmp	r3, #100	; 0x64
 800c77e:	d901      	bls.n	800c784 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800c780:	2303      	movs	r3, #3
 800c782:	e1d0      	b.n	800cb26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c784:	4b75      	ldr	r3, [pc, #468]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d0f0      	beq.n	800c772 <HAL_RCC_OscConfig+0xba>
 800c790:	e014      	b.n	800c7bc <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c792:	f7fd f8b1 	bl	80098f8 <HAL_GetTick>
 800c796:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c798:	e008      	b.n	800c7ac <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c79a:	f7fd f8ad 	bl	80098f8 <HAL_GetTick>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	1ad3      	subs	r3, r2, r3
 800c7a4:	2b64      	cmp	r3, #100	; 0x64
 800c7a6:	d901      	bls.n	800c7ac <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800c7a8:	2303      	movs	r3, #3
 800c7aa:	e1bc      	b.n	800cb26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c7ac:	4b6b      	ldr	r3, [pc, #428]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d1f0      	bne.n	800c79a <HAL_RCC_OscConfig+0xe2>
 800c7b8:	e000      	b.n	800c7bc <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c7ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f003 0302 	and.w	r3, r3, #2
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d063      	beq.n	800c890 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c7c8:	4b64      	ldr	r3, [pc, #400]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	f003 030c 	and.w	r3, r3, #12
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d00b      	beq.n	800c7ec <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c7d4:	4b61      	ldr	r3, [pc, #388]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c7dc:	2b08      	cmp	r3, #8
 800c7de:	d11c      	bne.n	800c81a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c7e0:	4b5e      	ldr	r3, [pc, #376]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d116      	bne.n	800c81a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c7ec:	4b5b      	ldr	r3, [pc, #364]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f003 0302 	and.w	r3, r3, #2
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d005      	beq.n	800c804 <HAL_RCC_OscConfig+0x14c>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	68db      	ldr	r3, [r3, #12]
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d001      	beq.n	800c804 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800c800:	2301      	movs	r3, #1
 800c802:	e190      	b.n	800cb26 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c804:	4b55      	ldr	r3, [pc, #340]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	691b      	ldr	r3, [r3, #16]
 800c810:	00db      	lsls	r3, r3, #3
 800c812:	4952      	ldr	r1, [pc, #328]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c814:	4313      	orrs	r3, r2
 800c816:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c818:	e03a      	b.n	800c890 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d020      	beq.n	800c864 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c822:	4b4f      	ldr	r3, [pc, #316]	; (800c960 <HAL_RCC_OscConfig+0x2a8>)
 800c824:	2201      	movs	r2, #1
 800c826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c828:	f7fd f866 	bl	80098f8 <HAL_GetTick>
 800c82c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c82e:	e008      	b.n	800c842 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c830:	f7fd f862 	bl	80098f8 <HAL_GetTick>
 800c834:	4602      	mov	r2, r0
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	1ad3      	subs	r3, r2, r3
 800c83a:	2b02      	cmp	r3, #2
 800c83c:	d901      	bls.n	800c842 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800c83e:	2303      	movs	r3, #3
 800c840:	e171      	b.n	800cb26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c842:	4b46      	ldr	r3, [pc, #280]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f003 0302 	and.w	r3, r3, #2
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d0f0      	beq.n	800c830 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c84e:	4b43      	ldr	r3, [pc, #268]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	691b      	ldr	r3, [r3, #16]
 800c85a:	00db      	lsls	r3, r3, #3
 800c85c:	493f      	ldr	r1, [pc, #252]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c85e:	4313      	orrs	r3, r2
 800c860:	600b      	str	r3, [r1, #0]
 800c862:	e015      	b.n	800c890 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c864:	4b3e      	ldr	r3, [pc, #248]	; (800c960 <HAL_RCC_OscConfig+0x2a8>)
 800c866:	2200      	movs	r2, #0
 800c868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c86a:	f7fd f845 	bl	80098f8 <HAL_GetTick>
 800c86e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c870:	e008      	b.n	800c884 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c872:	f7fd f841 	bl	80098f8 <HAL_GetTick>
 800c876:	4602      	mov	r2, r0
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	1ad3      	subs	r3, r2, r3
 800c87c:	2b02      	cmp	r3, #2
 800c87e:	d901      	bls.n	800c884 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c880:	2303      	movs	r3, #3
 800c882:	e150      	b.n	800cb26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c884:	4b35      	ldr	r3, [pc, #212]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f003 0302 	and.w	r3, r3, #2
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d1f0      	bne.n	800c872 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f003 0308 	and.w	r3, r3, #8
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d030      	beq.n	800c8fe <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	695b      	ldr	r3, [r3, #20]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d016      	beq.n	800c8d2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c8a4:	4b2f      	ldr	r3, [pc, #188]	; (800c964 <HAL_RCC_OscConfig+0x2ac>)
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8aa:	f7fd f825 	bl	80098f8 <HAL_GetTick>
 800c8ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c8b0:	e008      	b.n	800c8c4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c8b2:	f7fd f821 	bl	80098f8 <HAL_GetTick>
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	1ad3      	subs	r3, r2, r3
 800c8bc:	2b02      	cmp	r3, #2
 800c8be:	d901      	bls.n	800c8c4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800c8c0:	2303      	movs	r3, #3
 800c8c2:	e130      	b.n	800cb26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c8c4:	4b25      	ldr	r3, [pc, #148]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c8c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8c8:	f003 0302 	and.w	r3, r3, #2
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d0f0      	beq.n	800c8b2 <HAL_RCC_OscConfig+0x1fa>
 800c8d0:	e015      	b.n	800c8fe <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c8d2:	4b24      	ldr	r3, [pc, #144]	; (800c964 <HAL_RCC_OscConfig+0x2ac>)
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8d8:	f7fd f80e 	bl	80098f8 <HAL_GetTick>
 800c8dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c8de:	e008      	b.n	800c8f2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c8e0:	f7fd f80a 	bl	80098f8 <HAL_GetTick>
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	1ad3      	subs	r3, r2, r3
 800c8ea:	2b02      	cmp	r3, #2
 800c8ec:	d901      	bls.n	800c8f2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800c8ee:	2303      	movs	r3, #3
 800c8f0:	e119      	b.n	800cb26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c8f2:	4b1a      	ldr	r3, [pc, #104]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c8f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8f6:	f003 0302 	and.w	r3, r3, #2
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d1f0      	bne.n	800c8e0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f003 0304 	and.w	r3, r3, #4
 800c906:	2b00      	cmp	r3, #0
 800c908:	f000 809f 	beq.w	800ca4a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c90c:	2300      	movs	r3, #0
 800c90e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c910:	4b12      	ldr	r3, [pc, #72]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d10f      	bne.n	800c93c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c91c:	2300      	movs	r3, #0
 800c91e:	60fb      	str	r3, [r7, #12]
 800c920:	4b0e      	ldr	r3, [pc, #56]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c924:	4a0d      	ldr	r2, [pc, #52]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c92a:	6413      	str	r3, [r2, #64]	; 0x40
 800c92c:	4b0b      	ldr	r3, [pc, #44]	; (800c95c <HAL_RCC_OscConfig+0x2a4>)
 800c92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c934:	60fb      	str	r3, [r7, #12]
 800c936:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c938:	2301      	movs	r3, #1
 800c93a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c93c:	4b0a      	ldr	r3, [pc, #40]	; (800c968 <HAL_RCC_OscConfig+0x2b0>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c944:	2b00      	cmp	r3, #0
 800c946:	d120      	bne.n	800c98a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c948:	4b07      	ldr	r3, [pc, #28]	; (800c968 <HAL_RCC_OscConfig+0x2b0>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4a06      	ldr	r2, [pc, #24]	; (800c968 <HAL_RCC_OscConfig+0x2b0>)
 800c94e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c952:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c954:	f7fc ffd0 	bl	80098f8 <HAL_GetTick>
 800c958:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c95a:	e010      	b.n	800c97e <HAL_RCC_OscConfig+0x2c6>
 800c95c:	40023800 	.word	0x40023800
 800c960:	42470000 	.word	0x42470000
 800c964:	42470e80 	.word	0x42470e80
 800c968:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c96c:	f7fc ffc4 	bl	80098f8 <HAL_GetTick>
 800c970:	4602      	mov	r2, r0
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	1ad3      	subs	r3, r2, r3
 800c976:	2b02      	cmp	r3, #2
 800c978:	d901      	bls.n	800c97e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800c97a:	2303      	movs	r3, #3
 800c97c:	e0d3      	b.n	800cb26 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c97e:	4b6c      	ldr	r3, [pc, #432]	; (800cb30 <HAL_RCC_OscConfig+0x478>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c986:	2b00      	cmp	r3, #0
 800c988:	d0f0      	beq.n	800c96c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	689b      	ldr	r3, [r3, #8]
 800c98e:	2b01      	cmp	r3, #1
 800c990:	d106      	bne.n	800c9a0 <HAL_RCC_OscConfig+0x2e8>
 800c992:	4b68      	ldr	r3, [pc, #416]	; (800cb34 <HAL_RCC_OscConfig+0x47c>)
 800c994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c996:	4a67      	ldr	r2, [pc, #412]	; (800cb34 <HAL_RCC_OscConfig+0x47c>)
 800c998:	f043 0301 	orr.w	r3, r3, #1
 800c99c:	6713      	str	r3, [r2, #112]	; 0x70
 800c99e:	e01c      	b.n	800c9da <HAL_RCC_OscConfig+0x322>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	2b05      	cmp	r3, #5
 800c9a6:	d10c      	bne.n	800c9c2 <HAL_RCC_OscConfig+0x30a>
 800c9a8:	4b62      	ldr	r3, [pc, #392]	; (800cb34 <HAL_RCC_OscConfig+0x47c>)
 800c9aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9ac:	4a61      	ldr	r2, [pc, #388]	; (800cb34 <HAL_RCC_OscConfig+0x47c>)
 800c9ae:	f043 0304 	orr.w	r3, r3, #4
 800c9b2:	6713      	str	r3, [r2, #112]	; 0x70
 800c9b4:	4b5f      	ldr	r3, [pc, #380]	; (800cb34 <HAL_RCC_OscConfig+0x47c>)
 800c9b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9b8:	4a5e      	ldr	r2, [pc, #376]	; (800cb34 <HAL_RCC_OscConfig+0x47c>)
 800c9ba:	f043 0301 	orr.w	r3, r3, #1
 800c9be:	6713      	str	r3, [r2, #112]	; 0x70
 800c9c0:	e00b      	b.n	800c9da <HAL_RCC_OscConfig+0x322>
 800c9c2:	4b5c      	ldr	r3, [pc, #368]	; (800cb34 <HAL_RCC_OscConfig+0x47c>)
 800c9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9c6:	4a5b      	ldr	r2, [pc, #364]	; (800cb34 <HAL_RCC_OscConfig+0x47c>)
 800c9c8:	f023 0301 	bic.w	r3, r3, #1
 800c9cc:	6713      	str	r3, [r2, #112]	; 0x70
 800c9ce:	4b59      	ldr	r3, [pc, #356]	; (800cb34 <HAL_RCC_OscConfig+0x47c>)
 800c9d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9d2:	4a58      	ldr	r2, [pc, #352]	; (800cb34 <HAL_RCC_OscConfig+0x47c>)
 800c9d4:	f023 0304 	bic.w	r3, r3, #4
 800c9d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	689b      	ldr	r3, [r3, #8]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d015      	beq.n	800ca0e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9e2:	f7fc ff89 	bl	80098f8 <HAL_GetTick>
 800c9e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9e8:	e00a      	b.n	800ca00 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c9ea:	f7fc ff85 	bl	80098f8 <HAL_GetTick>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	1ad3      	subs	r3, r2, r3
 800c9f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d901      	bls.n	800ca00 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800c9fc:	2303      	movs	r3, #3
 800c9fe:	e092      	b.n	800cb26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca00:	4b4c      	ldr	r3, [pc, #304]	; (800cb34 <HAL_RCC_OscConfig+0x47c>)
 800ca02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca04:	f003 0302 	and.w	r3, r3, #2
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d0ee      	beq.n	800c9ea <HAL_RCC_OscConfig+0x332>
 800ca0c:	e014      	b.n	800ca38 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca0e:	f7fc ff73 	bl	80098f8 <HAL_GetTick>
 800ca12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ca14:	e00a      	b.n	800ca2c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ca16:	f7fc ff6f 	bl	80098f8 <HAL_GetTick>
 800ca1a:	4602      	mov	r2, r0
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	1ad3      	subs	r3, r2, r3
 800ca20:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d901      	bls.n	800ca2c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800ca28:	2303      	movs	r3, #3
 800ca2a:	e07c      	b.n	800cb26 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ca2c:	4b41      	ldr	r3, [pc, #260]	; (800cb34 <HAL_RCC_OscConfig+0x47c>)
 800ca2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca30:	f003 0302 	and.w	r3, r3, #2
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d1ee      	bne.n	800ca16 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ca38:	7dfb      	ldrb	r3, [r7, #23]
 800ca3a:	2b01      	cmp	r3, #1
 800ca3c:	d105      	bne.n	800ca4a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ca3e:	4b3d      	ldr	r3, [pc, #244]	; (800cb34 <HAL_RCC_OscConfig+0x47c>)
 800ca40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca42:	4a3c      	ldr	r2, [pc, #240]	; (800cb34 <HAL_RCC_OscConfig+0x47c>)
 800ca44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	699b      	ldr	r3, [r3, #24]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d068      	beq.n	800cb24 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ca52:	4b38      	ldr	r3, [pc, #224]	; (800cb34 <HAL_RCC_OscConfig+0x47c>)
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	f003 030c 	and.w	r3, r3, #12
 800ca5a:	2b08      	cmp	r3, #8
 800ca5c:	d060      	beq.n	800cb20 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	699b      	ldr	r3, [r3, #24]
 800ca62:	2b02      	cmp	r3, #2
 800ca64:	d145      	bne.n	800caf2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ca66:	4b34      	ldr	r3, [pc, #208]	; (800cb38 <HAL_RCC_OscConfig+0x480>)
 800ca68:	2200      	movs	r2, #0
 800ca6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca6c:	f7fc ff44 	bl	80098f8 <HAL_GetTick>
 800ca70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca72:	e008      	b.n	800ca86 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ca74:	f7fc ff40 	bl	80098f8 <HAL_GetTick>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	1ad3      	subs	r3, r2, r3
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	d901      	bls.n	800ca86 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800ca82:	2303      	movs	r3, #3
 800ca84:	e04f      	b.n	800cb26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca86:	4b2b      	ldr	r3, [pc, #172]	; (800cb34 <HAL_RCC_OscConfig+0x47c>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d1f0      	bne.n	800ca74 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	69da      	ldr	r2, [r3, #28]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6a1b      	ldr	r3, [r3, #32]
 800ca9a:	431a      	orrs	r2, r3
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa0:	019b      	lsls	r3, r3, #6
 800caa2:	431a      	orrs	r2, r3
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caa8:	085b      	lsrs	r3, r3, #1
 800caaa:	3b01      	subs	r3, #1
 800caac:	041b      	lsls	r3, r3, #16
 800caae:	431a      	orrs	r2, r3
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab4:	061b      	lsls	r3, r3, #24
 800cab6:	431a      	orrs	r2, r3
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cabc:	071b      	lsls	r3, r3, #28
 800cabe:	491d      	ldr	r1, [pc, #116]	; (800cb34 <HAL_RCC_OscConfig+0x47c>)
 800cac0:	4313      	orrs	r3, r2
 800cac2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cac4:	4b1c      	ldr	r3, [pc, #112]	; (800cb38 <HAL_RCC_OscConfig+0x480>)
 800cac6:	2201      	movs	r2, #1
 800cac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800caca:	f7fc ff15 	bl	80098f8 <HAL_GetTick>
 800cace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cad0:	e008      	b.n	800cae4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cad2:	f7fc ff11 	bl	80098f8 <HAL_GetTick>
 800cad6:	4602      	mov	r2, r0
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	1ad3      	subs	r3, r2, r3
 800cadc:	2b02      	cmp	r3, #2
 800cade:	d901      	bls.n	800cae4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800cae0:	2303      	movs	r3, #3
 800cae2:	e020      	b.n	800cb26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cae4:	4b13      	ldr	r3, [pc, #76]	; (800cb34 <HAL_RCC_OscConfig+0x47c>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800caec:	2b00      	cmp	r3, #0
 800caee:	d0f0      	beq.n	800cad2 <HAL_RCC_OscConfig+0x41a>
 800caf0:	e018      	b.n	800cb24 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800caf2:	4b11      	ldr	r3, [pc, #68]	; (800cb38 <HAL_RCC_OscConfig+0x480>)
 800caf4:	2200      	movs	r2, #0
 800caf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800caf8:	f7fc fefe 	bl	80098f8 <HAL_GetTick>
 800cafc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cafe:	e008      	b.n	800cb12 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb00:	f7fc fefa 	bl	80098f8 <HAL_GetTick>
 800cb04:	4602      	mov	r2, r0
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	1ad3      	subs	r3, r2, r3
 800cb0a:	2b02      	cmp	r3, #2
 800cb0c:	d901      	bls.n	800cb12 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800cb0e:	2303      	movs	r3, #3
 800cb10:	e009      	b.n	800cb26 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb12:	4b08      	ldr	r3, [pc, #32]	; (800cb34 <HAL_RCC_OscConfig+0x47c>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d1f0      	bne.n	800cb00 <HAL_RCC_OscConfig+0x448>
 800cb1e:	e001      	b.n	800cb24 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800cb20:	2301      	movs	r3, #1
 800cb22:	e000      	b.n	800cb26 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800cb24:	2300      	movs	r3, #0
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3718      	adds	r7, #24
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	40007000 	.word	0x40007000
 800cb34:	40023800 	.word	0x40023800
 800cb38:	42470060 	.word	0x42470060

0800cb3c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d101      	bne.n	800cb4e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	e022      	b.n	800cb94 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d105      	bne.n	800cb66 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f7fa f8dd 	bl	8006d20 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2203      	movs	r2, #3
 800cb6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 f814 	bl	800cb9c <HAL_SD_InitCard>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d001      	beq.n	800cb7e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	e00a      	b.n	800cb94 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2200      	movs	r2, #0
 800cb82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cb92:	2300      	movs	r3, #0
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3708      	adds	r7, #8
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cb9c:	b5b0      	push	{r4, r5, r7, lr}
 800cb9e:	b08e      	sub	sp, #56	; 0x38
 800cba0:	af04      	add	r7, sp, #16
 800cba2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800cba4:	2300      	movs	r3, #0
 800cba6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cbac:	2300      	movs	r3, #0
 800cbae:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800cbb8:	2376      	movs	r3, #118	; 0x76
 800cbba:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681d      	ldr	r5, [r3, #0]
 800cbc0:	466c      	mov	r4, sp
 800cbc2:	f107 0314 	add.w	r3, r7, #20
 800cbc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cbca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cbce:	f107 0308 	add.w	r3, r7, #8
 800cbd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cbd4:	4628      	mov	r0, r5
 800cbd6:	f003 faa5 	bl	8010124 <SDIO_Init>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800cbe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d001      	beq.n	800cbec <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800cbe8:	2301      	movs	r3, #1
 800cbea:	e031      	b.n	800cc50 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800cbec:	4b1a      	ldr	r3, [pc, #104]	; (800cc58 <HAL_SD_InitCard+0xbc>)
 800cbee:	2200      	movs	r2, #0
 800cbf0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f003 fadd 	bl	80101b6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800cbfc:	4b16      	ldr	r3, [pc, #88]	; (800cc58 <HAL_SD_InitCard+0xbc>)
 800cbfe:	2201      	movs	r2, #1
 800cc00:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f000 ffc4 	bl	800db90 <SD_PowerON>
 800cc08:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc0a:	6a3b      	ldr	r3, [r7, #32]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d00b      	beq.n	800cc28 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2201      	movs	r2, #1
 800cc14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc1c:	6a3b      	ldr	r3, [r7, #32]
 800cc1e:	431a      	orrs	r2, r3
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc24:	2301      	movs	r3, #1
 800cc26:	e013      	b.n	800cc50 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f000 fee5 	bl	800d9f8 <SD_InitCard>
 800cc2e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc30:	6a3b      	ldr	r3, [r7, #32]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d00b      	beq.n	800cc4e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2201      	movs	r2, #1
 800cc3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc42:	6a3b      	ldr	r3, [r7, #32]
 800cc44:	431a      	orrs	r2, r3
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e000      	b.n	800cc50 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800cc4e:	2300      	movs	r3, #0
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3728      	adds	r7, #40	; 0x28
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bdb0      	pop	{r4, r5, r7, pc}
 800cc58:	422580a0 	.word	0x422580a0

0800cc5c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b08c      	sub	sp, #48	; 0x30
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	60b9      	str	r1, [r7, #8]
 800cc66:	607a      	str	r2, [r7, #4]
 800cc68:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d107      	bne.n	800cc84 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc78:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc80:	2301      	movs	r3, #1
 800cc82:	e0c7      	b.n	800ce14 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	f040 80c0 	bne.w	800ce12 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2200      	movs	r2, #0
 800cc96:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cc98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	441a      	add	r2, r3
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d907      	bls.n	800ccb6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccaa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e0ae      	b.n	800ce14 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2203      	movs	r2, #3
 800ccba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800ccd4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccda:	4a50      	ldr	r2, [pc, #320]	; (800ce1c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800ccdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cce2:	4a4f      	ldr	r2, [pc, #316]	; (800ce20 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800cce4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccea:	2200      	movs	r2, #0
 800ccec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	3380      	adds	r3, #128	; 0x80
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	68ba      	ldr	r2, [r7, #8]
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	025b      	lsls	r3, r3, #9
 800cd00:	089b      	lsrs	r3, r3, #2
 800cd02:	f7fd fbed 	bl	800a4e0 <HAL_DMA_Start_IT>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d017      	beq.n	800cd3c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800cd1a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4a40      	ldr	r2, [pc, #256]	; (800ce24 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cd22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	2201      	movs	r2, #1
 800cd34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	e06b      	b.n	800ce14 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800cd3c:	4b3a      	ldr	r3, [pc, #232]	; (800ce28 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800cd3e:	2201      	movs	r2, #1
 800cd40:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd46:	2b01      	cmp	r3, #1
 800cd48:	d002      	beq.n	800cd50 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800cd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd4c:	025b      	lsls	r3, r3, #9
 800cd4e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f003 fabf 	bl	80102dc <SDMMC_CmdBlockLength>
 800cd5e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800cd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d00f      	beq.n	800cd86 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a2e      	ldr	r2, [pc, #184]	; (800ce24 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cd6c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd74:	431a      	orrs	r2, r3
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800cd82:	2301      	movs	r3, #1
 800cd84:	e046      	b.n	800ce14 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cd86:	f04f 33ff 	mov.w	r3, #4294967295
 800cd8a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	025b      	lsls	r3, r3, #9
 800cd90:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cd92:	2390      	movs	r3, #144	; 0x90
 800cd94:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800cd96:	2302      	movs	r3, #2
 800cd98:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	f107 0210 	add.w	r2, r7, #16
 800cdaa:	4611      	mov	r1, r2
 800cdac:	4618      	mov	r0, r3
 800cdae:	f003 fa69 	bl	8010284 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d90a      	bls.n	800cdce <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2282      	movs	r2, #130	; 0x82
 800cdbc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f003 facd 	bl	8010364 <SDMMC_CmdReadMultiBlock>
 800cdca:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cdcc:	e009      	b.n	800cde2 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2281      	movs	r2, #129	; 0x81
 800cdd2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cdda:	4618      	mov	r0, r3
 800cddc:	f003 faa0 	bl	8010320 <SDMMC_CmdReadSingleBlock>
 800cde0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800cde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d012      	beq.n	800ce0e <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a0d      	ldr	r2, [pc, #52]	; (800ce24 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cdee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf6:	431a      	orrs	r2, r3
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2200      	movs	r2, #0
 800ce08:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	e002      	b.n	800ce14 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	e000      	b.n	800ce14 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800ce12:	2302      	movs	r3, #2
  }
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3730      	adds	r7, #48	; 0x30
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	0800d807 	.word	0x0800d807
 800ce20:	0800d879 	.word	0x0800d879
 800ce24:	004005ff 	.word	0x004005ff
 800ce28:	4225858c 	.word	0x4225858c

0800ce2c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b08c      	sub	sp, #48	; 0x30
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	607a      	str	r2, [r7, #4]
 800ce38:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d107      	bne.n	800ce54 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ce50:	2301      	movs	r3, #1
 800ce52:	e0ca      	b.n	800cfea <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	f040 80c3 	bne.w	800cfe8 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2200      	movs	r2, #0
 800ce66:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ce68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	441a      	add	r2, r3
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d907      	bls.n	800ce86 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce7a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ce82:	2301      	movs	r3, #1
 800ce84:	e0b1      	b.n	800cfea <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2203      	movs	r2, #3
 800ce8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	2200      	movs	r2, #0
 800ce94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f042 021a 	orr.w	r2, r2, #26
 800cea4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceaa:	4a52      	ldr	r2, [pc, #328]	; (800cff4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800ceac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceb2:	4a51      	ldr	r2, [pc, #324]	; (800cff8 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800ceb4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceba:	2200      	movs	r2, #0
 800cebc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	d002      	beq.n	800cecc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800cec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec8:	025b      	lsls	r3, r3, #9
 800ceca:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ced4:	4618      	mov	r0, r3
 800ced6:	f003 fa01 	bl	80102dc <SDMMC_CmdBlockLength>
 800ceda:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00f      	beq.n	800cf02 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4a45      	ldr	r2, [pc, #276]	; (800cffc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cee8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ceee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef0:	431a      	orrs	r2, r3
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2201      	movs	r2, #1
 800cefa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cefe:	2301      	movs	r3, #1
 800cf00:	e073      	b.n	800cfea <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d90a      	bls.n	800cf1e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	22a0      	movs	r2, #160	; 0xa0
 800cf0c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf14:	4618      	mov	r0, r3
 800cf16:	f003 fa69 	bl	80103ec <SDMMC_CmdWriteMultiBlock>
 800cf1a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cf1c:	e009      	b.n	800cf32 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2290      	movs	r2, #144	; 0x90
 800cf22:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f003 fa3c 	bl	80103a8 <SDMMC_CmdWriteSingleBlock>
 800cf30:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d012      	beq.n	800cf5e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a2f      	ldr	r2, [pc, #188]	; (800cffc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cf3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf46:	431a      	orrs	r2, r3
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2201      	movs	r2, #1
 800cf50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2200      	movs	r2, #0
 800cf58:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	e045      	b.n	800cfea <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800cf5e:	4b28      	ldr	r3, [pc, #160]	; (800d000 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800cf60:	2201      	movs	r2, #1
 800cf62:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800cf68:	68b9      	ldr	r1, [r7, #8]
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	3380      	adds	r3, #128	; 0x80
 800cf70:	461a      	mov	r2, r3
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	025b      	lsls	r3, r3, #9
 800cf76:	089b      	lsrs	r3, r3, #2
 800cf78:	f7fd fab2 	bl	800a4e0 <HAL_DMA_Start_IT>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d01a      	beq.n	800cfb8 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f022 021a 	bic.w	r2, r2, #26
 800cf90:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4a19      	ldr	r2, [pc, #100]	; (800cffc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cf98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	e018      	b.n	800cfea <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cfb8:	f04f 33ff 	mov.w	r3, #4294967295
 800cfbc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	025b      	lsls	r3, r3, #9
 800cfc2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cfc4:	2390      	movs	r3, #144	; 0x90
 800cfc6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f107 0210 	add.w	r2, r7, #16
 800cfdc:	4611      	mov	r1, r2
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f003 f950 	bl	8010284 <SDIO_ConfigData>

      return HAL_OK;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	e000      	b.n	800cfea <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800cfe8:	2302      	movs	r3, #2
  }
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3730      	adds	r7, #48	; 0x30
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop
 800cff4:	0800d7dd 	.word	0x0800d7dd
 800cff8:	0800d879 	.word	0x0800d879
 800cffc:	004005ff 	.word	0x004005ff
 800d000:	4225858c 	.word	0x4225858c

0800d004 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b084      	sub	sp, #16
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d010:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d018:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d008      	beq.n	800d032 <HAL_SD_IRQHandler+0x2e>
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f003 0308 	and.w	r3, r3, #8
 800d026:	2b00      	cmp	r3, #0
 800d028:	d003      	beq.n	800d032 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 ffc6 	bl	800dfbc <SD_Read_IT>
 800d030:	e155      	b.n	800d2de <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f000 808f 	beq.w	800d160 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d04a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d052:	687a      	ldr	r2, [r7, #4]
 800d054:	6812      	ldr	r2, [r2, #0]
 800d056:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d05a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d05e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f022 0201 	bic.w	r2, r2, #1
 800d06e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f003 0308 	and.w	r3, r3, #8
 800d076:	2b00      	cmp	r3, #0
 800d078:	d039      	beq.n	800d0ee <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f003 0302 	and.w	r3, r3, #2
 800d080:	2b00      	cmp	r3, #0
 800d082:	d104      	bne.n	800d08e <HAL_SD_IRQHandler+0x8a>
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	f003 0320 	and.w	r3, r3, #32
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d011      	beq.n	800d0b2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	4618      	mov	r0, r3
 800d094:	f003 f9cc 	bl	8010430 <SDMMC_CmdStopTransfer>
 800d098:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d008      	beq.n	800d0b2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	431a      	orrs	r2, r3
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f000 f91f 	bl	800d2f0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f240 523a 	movw	r2, #1338	; 0x53a
 800d0ba:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2201      	movs	r2, #1
 800d0c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f003 0301 	and.w	r3, r3, #1
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d104      	bne.n	800d0de <HAL_SD_IRQHandler+0xda>
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f003 0302 	and.w	r3, r3, #2
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d003      	beq.n	800d0e6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f003 fe22 	bl	8010d28 <HAL_SD_RxCpltCallback>
 800d0e4:	e0fb      	b.n	800d2de <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f003 fe14 	bl	8010d14 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d0ec:	e0f7      	b.n	800d2de <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f000 80f2 	beq.w	800d2de <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f003 0320 	and.w	r3, r3, #32
 800d100:	2b00      	cmp	r3, #0
 800d102:	d011      	beq.n	800d128 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4618      	mov	r0, r3
 800d10a:	f003 f991 	bl	8010430 <SDMMC_CmdStopTransfer>
 800d10e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d008      	beq.n	800d128 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	431a      	orrs	r2, r3
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f000 f8e4 	bl	800d2f0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f003 0301 	and.w	r3, r3, #1
 800d12e:	2b00      	cmp	r3, #0
 800d130:	f040 80d5 	bne.w	800d2de <HAL_SD_IRQHandler+0x2da>
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f003 0302 	and.w	r3, r3, #2
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	f040 80cf 	bne.w	800d2de <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f022 0208 	bic.w	r2, r2, #8
 800d14e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2201      	movs	r2, #1
 800d154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f003 fddb 	bl	8010d14 <HAL_SD_TxCpltCallback>
}
 800d15e:	e0be      	b.n	800d2de <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d008      	beq.n	800d180 <HAL_SD_IRQHandler+0x17c>
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f003 0308 	and.w	r3, r3, #8
 800d174:	2b00      	cmp	r3, #0
 800d176:	d003      	beq.n	800d180 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f000 ff70 	bl	800e05e <SD_Write_IT>
 800d17e:	e0ae      	b.n	800d2de <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d186:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	f000 80a7 	beq.w	800d2de <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d196:	f003 0302 	and.w	r3, r3, #2
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d005      	beq.n	800d1aa <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1a2:	f043 0202 	orr.w	r2, r3, #2
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1b0:	f003 0308 	and.w	r3, r3, #8
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d005      	beq.n	800d1c4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1bc:	f043 0208 	orr.w	r2, r3, #8
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ca:	f003 0320 	and.w	r3, r3, #32
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d005      	beq.n	800d1de <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d6:	f043 0220 	orr.w	r2, r3, #32
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1e4:	f003 0310 	and.w	r3, r3, #16
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d005      	beq.n	800d1f8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1f0:	f043 0210 	orr.w	r2, r3, #16
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f240 523a 	movw	r2, #1338	; 0x53a
 800d200:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d210:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4618      	mov	r0, r3
 800d218:	f003 f90a 	bl	8010430 <SDMMC_CmdStopTransfer>
 800d21c:	4602      	mov	r2, r0
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d222:	431a      	orrs	r2, r3
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f003 0308 	and.w	r3, r3, #8
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d00a      	beq.n	800d248 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2201      	movs	r2, #1
 800d236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2200      	movs	r2, #0
 800d23e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 f855 	bl	800d2f0 <HAL_SD_ErrorCallback>
}
 800d246:	e04a      	b.n	800d2de <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d045      	beq.n	800d2de <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	f003 0310 	and.w	r3, r3, #16
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d104      	bne.n	800d266 <HAL_SD_IRQHandler+0x262>
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f003 0320 	and.w	r3, r3, #32
 800d262:	2b00      	cmp	r3, #0
 800d264:	d011      	beq.n	800d28a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d26a:	4a1f      	ldr	r2, [pc, #124]	; (800d2e8 <HAL_SD_IRQHandler+0x2e4>)
 800d26c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d272:	4618      	mov	r0, r3
 800d274:	f7fd f98c 	bl	800a590 <HAL_DMA_Abort_IT>
 800d278:	4603      	mov	r3, r0
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d02f      	beq.n	800d2de <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d282:	4618      	mov	r0, r3
 800d284:	f000 fb4a 	bl	800d91c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d288:	e029      	b.n	800d2de <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	f003 0301 	and.w	r3, r3, #1
 800d290:	2b00      	cmp	r3, #0
 800d292:	d104      	bne.n	800d29e <HAL_SD_IRQHandler+0x29a>
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f003 0302 	and.w	r3, r3, #2
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d011      	beq.n	800d2c2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a2:	4a12      	ldr	r2, [pc, #72]	; (800d2ec <HAL_SD_IRQHandler+0x2e8>)
 800d2a4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7fd f970 	bl	800a590 <HAL_DMA_Abort_IT>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d013      	beq.n	800d2de <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f000 fb65 	bl	800d98a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d2c0:	e00d      	b.n	800d2de <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f003 fd12 	bl	8010d00 <HAL_SD_AbortCallback>
}
 800d2dc:	e7ff      	b.n	800d2de <HAL_SD_IRQHandler+0x2da>
 800d2de:	bf00      	nop
 800d2e0:	3710      	adds	r7, #16
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	0800d91d 	.word	0x0800d91d
 800d2ec:	0800d98b 	.word	0x0800d98b

0800d2f0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b083      	sub	sp, #12
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d2f8:	bf00      	nop
 800d2fa:	370c      	adds	r7, #12
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d312:	0f9b      	lsrs	r3, r3, #30
 800d314:	b2da      	uxtb	r2, r3
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d31e:	0e9b      	lsrs	r3, r3, #26
 800d320:	b2db      	uxtb	r3, r3
 800d322:	f003 030f 	and.w	r3, r3, #15
 800d326:	b2da      	uxtb	r2, r3
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d330:	0e1b      	lsrs	r3, r3, #24
 800d332:	b2db      	uxtb	r3, r3
 800d334:	f003 0303 	and.w	r3, r3, #3
 800d338:	b2da      	uxtb	r2, r3
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d342:	0c1b      	lsrs	r3, r3, #16
 800d344:	b2da      	uxtb	r2, r3
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d34e:	0a1b      	lsrs	r3, r3, #8
 800d350:	b2da      	uxtb	r2, r3
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d35a:	b2da      	uxtb	r2, r3
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d364:	0d1b      	lsrs	r3, r3, #20
 800d366:	b29a      	uxth	r2, r3
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d370:	0c1b      	lsrs	r3, r3, #16
 800d372:	b2db      	uxtb	r3, r3
 800d374:	f003 030f 	and.w	r3, r3, #15
 800d378:	b2da      	uxtb	r2, r3
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d382:	0bdb      	lsrs	r3, r3, #15
 800d384:	b2db      	uxtb	r3, r3
 800d386:	f003 0301 	and.w	r3, r3, #1
 800d38a:	b2da      	uxtb	r2, r3
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d394:	0b9b      	lsrs	r3, r3, #14
 800d396:	b2db      	uxtb	r3, r3
 800d398:	f003 0301 	and.w	r3, r3, #1
 800d39c:	b2da      	uxtb	r2, r3
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3a6:	0b5b      	lsrs	r3, r3, #13
 800d3a8:	b2db      	uxtb	r3, r3
 800d3aa:	f003 0301 	and.w	r3, r3, #1
 800d3ae:	b2da      	uxtb	r2, r3
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3b8:	0b1b      	lsrs	r3, r3, #12
 800d3ba:	b2db      	uxtb	r3, r3
 800d3bc:	f003 0301 	and.w	r3, r3, #1
 800d3c0:	b2da      	uxtb	r2, r3
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d163      	bne.n	800d49c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3d8:	009a      	lsls	r2, r3, #2
 800d3da:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d3de:	4013      	ands	r3, r2
 800d3e0:	687a      	ldr	r2, [r7, #4]
 800d3e2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d3e4:	0f92      	lsrs	r2, r2, #30
 800d3e6:	431a      	orrs	r2, r3
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3f0:	0edb      	lsrs	r3, r3, #27
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	f003 0307 	and.w	r3, r3, #7
 800d3f8:	b2da      	uxtb	r2, r3
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d402:	0e1b      	lsrs	r3, r3, #24
 800d404:	b2db      	uxtb	r3, r3
 800d406:	f003 0307 	and.w	r3, r3, #7
 800d40a:	b2da      	uxtb	r2, r3
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d414:	0d5b      	lsrs	r3, r3, #21
 800d416:	b2db      	uxtb	r3, r3
 800d418:	f003 0307 	and.w	r3, r3, #7
 800d41c:	b2da      	uxtb	r2, r3
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d426:	0c9b      	lsrs	r3, r3, #18
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	f003 0307 	and.w	r3, r3, #7
 800d42e:	b2da      	uxtb	r2, r3
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d438:	0bdb      	lsrs	r3, r3, #15
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	f003 0307 	and.w	r3, r3, #7
 800d440:	b2da      	uxtb	r2, r3
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	691b      	ldr	r3, [r3, #16]
 800d44a:	1c5a      	adds	r2, r3, #1
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	7e1b      	ldrb	r3, [r3, #24]
 800d454:	b2db      	uxtb	r3, r3
 800d456:	f003 0307 	and.w	r3, r3, #7
 800d45a:	3302      	adds	r3, #2
 800d45c:	2201      	movs	r2, #1
 800d45e:	fa02 f303 	lsl.w	r3, r2, r3
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d466:	fb02 f203 	mul.w	r2, r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	7a1b      	ldrb	r3, [r3, #8]
 800d472:	b2db      	uxtb	r3, r3
 800d474:	f003 030f 	and.w	r3, r3, #15
 800d478:	2201      	movs	r2, #1
 800d47a:	409a      	lsls	r2, r3
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d484:	687a      	ldr	r2, [r7, #4]
 800d486:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d488:	0a52      	lsrs	r2, r2, #9
 800d48a:	fb02 f203 	mul.w	r2, r2, r3
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d498:	661a      	str	r2, [r3, #96]	; 0x60
 800d49a:	e031      	b.n	800d500 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d11d      	bne.n	800d4e0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4a8:	041b      	lsls	r3, r3, #16
 800d4aa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4b2:	0c1b      	lsrs	r3, r3, #16
 800d4b4:	431a      	orrs	r2, r3
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	691b      	ldr	r3, [r3, #16]
 800d4be:	3301      	adds	r3, #1
 800d4c0:	029a      	lsls	r2, r3, #10
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d4d4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	661a      	str	r2, [r3, #96]	; 0x60
 800d4de:	e00f      	b.n	800d500 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4a58      	ldr	r2, [pc, #352]	; (800d648 <HAL_SD_GetCardCSD+0x344>)
 800d4e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	e09d      	b.n	800d63c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d504:	0b9b      	lsrs	r3, r3, #14
 800d506:	b2db      	uxtb	r3, r3
 800d508:	f003 0301 	and.w	r3, r3, #1
 800d50c:	b2da      	uxtb	r2, r3
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d516:	09db      	lsrs	r3, r3, #7
 800d518:	b2db      	uxtb	r3, r3
 800d51a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d51e:	b2da      	uxtb	r2, r3
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d52e:	b2da      	uxtb	r2, r3
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d538:	0fdb      	lsrs	r3, r3, #31
 800d53a:	b2da      	uxtb	r2, r3
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d544:	0f5b      	lsrs	r3, r3, #29
 800d546:	b2db      	uxtb	r3, r3
 800d548:	f003 0303 	and.w	r3, r3, #3
 800d54c:	b2da      	uxtb	r2, r3
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d556:	0e9b      	lsrs	r3, r3, #26
 800d558:	b2db      	uxtb	r3, r3
 800d55a:	f003 0307 	and.w	r3, r3, #7
 800d55e:	b2da      	uxtb	r2, r3
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d568:	0d9b      	lsrs	r3, r3, #22
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	f003 030f 	and.w	r3, r3, #15
 800d570:	b2da      	uxtb	r2, r3
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d57a:	0d5b      	lsrs	r3, r3, #21
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	f003 0301 	and.w	r3, r3, #1
 800d582:	b2da      	uxtb	r2, r3
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	2200      	movs	r2, #0
 800d58e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d596:	0c1b      	lsrs	r3, r3, #16
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	f003 0301 	and.w	r3, r3, #1
 800d59e:	b2da      	uxtb	r2, r3
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5aa:	0bdb      	lsrs	r3, r3, #15
 800d5ac:	b2db      	uxtb	r3, r3
 800d5ae:	f003 0301 	and.w	r3, r3, #1
 800d5b2:	b2da      	uxtb	r2, r3
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5be:	0b9b      	lsrs	r3, r3, #14
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	f003 0301 	and.w	r3, r3, #1
 800d5c6:	b2da      	uxtb	r2, r3
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5d2:	0b5b      	lsrs	r3, r3, #13
 800d5d4:	b2db      	uxtb	r3, r3
 800d5d6:	f003 0301 	and.w	r3, r3, #1
 800d5da:	b2da      	uxtb	r2, r3
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5e6:	0b1b      	lsrs	r3, r3, #12
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	f003 0301 	and.w	r3, r3, #1
 800d5ee:	b2da      	uxtb	r2, r3
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5fa:	0a9b      	lsrs	r3, r3, #10
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	f003 0303 	and.w	r3, r3, #3
 800d602:	b2da      	uxtb	r2, r3
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d60e:	0a1b      	lsrs	r3, r3, #8
 800d610:	b2db      	uxtb	r3, r3
 800d612:	f003 0303 	and.w	r3, r3, #3
 800d616:	b2da      	uxtb	r2, r3
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d622:	085b      	lsrs	r3, r3, #1
 800d624:	b2db      	uxtb	r3, r3
 800d626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d62a:	b2da      	uxtb	r2, r3
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	2201      	movs	r2, #1
 800d636:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d63a:	2300      	movs	r3, #0
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	370c      	adds	r7, #12
 800d640:	46bd      	mov	sp, r7
 800d642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d646:	4770      	bx	lr
 800d648:	004005ff 	.word	0x004005ff

0800d64c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d64c:	b480      	push	{r7}
 800d64e:	b083      	sub	sp, #12
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d696:	2300      	movs	r3, #0
}
 800d698:	4618      	mov	r0, r3
 800d69a:	370c      	adds	r7, #12
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr

0800d6a4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d6a4:	b5b0      	push	{r4, r5, r7, lr}
 800d6a6:	b08e      	sub	sp, #56	; 0x38
 800d6a8:	af04      	add	r7, sp, #16
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2203      	movs	r2, #3
 800d6b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6ba:	2b03      	cmp	r3, #3
 800d6bc:	d02e      	beq.n	800d71c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6c4:	d106      	bne.n	800d6d4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6ca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	639a      	str	r2, [r3, #56]	; 0x38
 800d6d2:	e029      	b.n	800d728 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d6da:	d10a      	bne.n	800d6f2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f000 fb0d 	bl	800dcfc <SD_WideBus_Enable>
 800d6e2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ea:	431a      	orrs	r2, r3
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	639a      	str	r2, [r3, #56]	; 0x38
 800d6f0:	e01a      	b.n	800d728 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d10a      	bne.n	800d70e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f000 fb4a 	bl	800dd92 <SD_WideBus_Disable>
 800d6fe:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d706:	431a      	orrs	r2, r3
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	639a      	str	r2, [r3, #56]	; 0x38
 800d70c:	e00c      	b.n	800d728 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d712:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	639a      	str	r2, [r3, #56]	; 0x38
 800d71a:	e005      	b.n	800d728 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d720:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d009      	beq.n	800d744 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	4a18      	ldr	r2, [pc, #96]	; (800d798 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800d736:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2201      	movs	r2, #1
 800d73c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d740:	2301      	movs	r3, #1
 800d742:	e024      	b.n	800d78e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	689b      	ldr	r3, [r3, #8]
 800d74e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	68db      	ldr	r3, [r3, #12]
 800d754:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	695b      	ldr	r3, [r3, #20]
 800d75e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	699b      	ldr	r3, [r3, #24]
 800d764:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681d      	ldr	r5, [r3, #0]
 800d76a:	466c      	mov	r4, sp
 800d76c:	f107 0318 	add.w	r3, r7, #24
 800d770:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d774:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d778:	f107 030c 	add.w	r3, r7, #12
 800d77c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d77e:	4628      	mov	r0, r5
 800d780:	f002 fcd0 	bl	8010124 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2201      	movs	r2, #1
 800d788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d78c:	2300      	movs	r3, #0
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3728      	adds	r7, #40	; 0x28
 800d792:	46bd      	mov	sp, r7
 800d794:	bdb0      	pop	{r4, r5, r7, pc}
 800d796:	bf00      	nop
 800d798:	004005ff 	.word	0x004005ff

0800d79c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b086      	sub	sp, #24
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d7a8:	f107 030c 	add.w	r3, r7, #12
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f000 fa7c 	bl	800dcac <SD_SendStatus>
 800d7b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d005      	beq.n	800d7c8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	431a      	orrs	r2, r3
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	0a5b      	lsrs	r3, r3, #9
 800d7cc:	f003 030f 	and.w	r3, r3, #15
 800d7d0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d7d2:	693b      	ldr	r3, [r7, #16]
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3718      	adds	r7, #24
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b085      	sub	sp, #20
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d7f8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d7fa:	bf00      	nop
 800d7fc:	3714      	adds	r7, #20
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr

0800d806 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d806:	b580      	push	{r7, lr}
 800d808:	b084      	sub	sp, #16
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d812:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d818:	2b82      	cmp	r3, #130	; 0x82
 800d81a:	d111      	bne.n	800d840 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4618      	mov	r0, r3
 800d822:	f002 fe05 	bl	8010430 <SDMMC_CmdStopTransfer>
 800d826:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d008      	beq.n	800d840 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	431a      	orrs	r2, r3
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d83a:	68f8      	ldr	r0, [r7, #12]
 800d83c:	f7ff fd58 	bl	800d2f0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f022 0208 	bic.w	r2, r2, #8
 800d84e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	f240 523a 	movw	r2, #1338	; 0x53a
 800d858:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	2201      	movs	r2, #1
 800d85e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2200      	movs	r2, #0
 800d866:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d868:	68f8      	ldr	r0, [r7, #12]
 800d86a:	f003 fa5d 	bl	8010d28 <HAL_SD_RxCpltCallback>
#endif
}
 800d86e:	bf00      	nop
 800d870:	3710      	adds	r7, #16
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
	...

0800d878 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b086      	sub	sp, #24
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d884:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f7fd f82e 	bl	800a8e8 <HAL_DMA_GetError>
 800d88c:	4603      	mov	r3, r0
 800d88e:	2b02      	cmp	r3, #2
 800d890:	d03e      	beq.n	800d910 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d898:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d89e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8a0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	2b01      	cmp	r3, #1
 800d8a6:	d002      	beq.n	800d8ae <SD_DMAError+0x36>
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	d12d      	bne.n	800d90a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d8ae:	697b      	ldr	r3, [r7, #20]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	4a19      	ldr	r2, [pc, #100]	; (800d918 <SD_DMAError+0xa0>)
 800d8b4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d8c4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d8d2:	6978      	ldr	r0, [r7, #20]
 800d8d4:	f7ff ff62 	bl	800d79c <HAL_SD_GetCardState>
 800d8d8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	2b06      	cmp	r3, #6
 800d8de:	d002      	beq.n	800d8e6 <SD_DMAError+0x6e>
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	2b05      	cmp	r3, #5
 800d8e4:	d10a      	bne.n	800d8fc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f002 fda0 	bl	8010430 <SDMMC_CmdStopTransfer>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8f6:	431a      	orrs	r2, r3
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	2201      	movs	r2, #1
 800d900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	2200      	movs	r2, #0
 800d908:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d90a:	6978      	ldr	r0, [r7, #20]
 800d90c:	f7ff fcf0 	bl	800d2f0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800d910:	bf00      	nop
 800d912:	3718      	adds	r7, #24
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}
 800d918:	004005ff 	.word	0x004005ff

0800d91c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b084      	sub	sp, #16
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d928:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f240 523a 	movw	r2, #1338	; 0x53a
 800d932:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d934:	68f8      	ldr	r0, [r7, #12]
 800d936:	f7ff ff31 	bl	800d79c <HAL_SD_GetCardState>
 800d93a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	2201      	movs	r2, #1
 800d940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2200      	movs	r2, #0
 800d948:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	2b06      	cmp	r3, #6
 800d94e:	d002      	beq.n	800d956 <SD_DMATxAbort+0x3a>
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	2b05      	cmp	r3, #5
 800d954:	d10a      	bne.n	800d96c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	4618      	mov	r0, r3
 800d95c:	f002 fd68 	bl	8010430 <SDMMC_CmdStopTransfer>
 800d960:	4602      	mov	r2, r0
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d966:	431a      	orrs	r2, r3
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d970:	2b00      	cmp	r3, #0
 800d972:	d103      	bne.n	800d97c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d974:	68f8      	ldr	r0, [r7, #12]
 800d976:	f003 f9c3 	bl	8010d00 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d97a:	e002      	b.n	800d982 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	f7ff fcb7 	bl	800d2f0 <HAL_SD_ErrorCallback>
}
 800d982:	bf00      	nop
 800d984:	3710      	adds	r7, #16
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}

0800d98a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d98a:	b580      	push	{r7, lr}
 800d98c:	b084      	sub	sp, #16
 800d98e:	af00      	add	r7, sp, #0
 800d990:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d996:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f240 523a 	movw	r2, #1338	; 0x53a
 800d9a0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d9a2:	68f8      	ldr	r0, [r7, #12]
 800d9a4:	f7ff fefa 	bl	800d79c <HAL_SD_GetCardState>
 800d9a8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	2b06      	cmp	r3, #6
 800d9bc:	d002      	beq.n	800d9c4 <SD_DMARxAbort+0x3a>
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	2b05      	cmp	r3, #5
 800d9c2:	d10a      	bne.n	800d9da <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f002 fd31 	bl	8010430 <SDMMC_CmdStopTransfer>
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9d4:	431a      	orrs	r2, r3
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d103      	bne.n	800d9ea <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d9e2:	68f8      	ldr	r0, [r7, #12]
 800d9e4:	f003 f98c 	bl	8010d00 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d9e8:	e002      	b.n	800d9f0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d9ea:	68f8      	ldr	r0, [r7, #12]
 800d9ec:	f7ff fc80 	bl	800d2f0 <HAL_SD_ErrorCallback>
}
 800d9f0:	bf00      	nop
 800d9f2:	3710      	adds	r7, #16
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d9f8:	b5b0      	push	{r4, r5, r7, lr}
 800d9fa:	b094      	sub	sp, #80	; 0x50
 800d9fc:	af04      	add	r7, sp, #16
 800d9fe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800da00:	2301      	movs	r3, #1
 800da02:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	4618      	mov	r0, r3
 800da0a:	f002 fbe3 	bl	80101d4 <SDIO_GetPowerState>
 800da0e:	4603      	mov	r3, r0
 800da10:	2b00      	cmp	r3, #0
 800da12:	d102      	bne.n	800da1a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800da14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800da18:	e0b6      	b.n	800db88 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da1e:	2b03      	cmp	r3, #3
 800da20:	d02f      	beq.n	800da82 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	4618      	mov	r0, r3
 800da28:	f002 fe0c 	bl	8010644 <SDMMC_CmdSendCID>
 800da2c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800da2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da30:	2b00      	cmp	r3, #0
 800da32:	d001      	beq.n	800da38 <SD_InitCard+0x40>
    {
      return errorstate;
 800da34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da36:	e0a7      	b.n	800db88 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	2100      	movs	r1, #0
 800da3e:	4618      	mov	r0, r3
 800da40:	f002 fc0d 	bl	801025e <SDIO_GetResponse>
 800da44:	4602      	mov	r2, r0
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	2104      	movs	r1, #4
 800da50:	4618      	mov	r0, r3
 800da52:	f002 fc04 	bl	801025e <SDIO_GetResponse>
 800da56:	4602      	mov	r2, r0
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	2108      	movs	r1, #8
 800da62:	4618      	mov	r0, r3
 800da64:	f002 fbfb 	bl	801025e <SDIO_GetResponse>
 800da68:	4602      	mov	r2, r0
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	210c      	movs	r1, #12
 800da74:	4618      	mov	r0, r3
 800da76:	f002 fbf2 	bl	801025e <SDIO_GetResponse>
 800da7a:	4602      	mov	r2, r0
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da86:	2b03      	cmp	r3, #3
 800da88:	d00d      	beq.n	800daa6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f107 020e 	add.w	r2, r7, #14
 800da92:	4611      	mov	r1, r2
 800da94:	4618      	mov	r0, r3
 800da96:	f002 fe12 	bl	80106be <SDMMC_CmdSetRelAdd>
 800da9a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800da9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d001      	beq.n	800daa6 <SD_InitCard+0xae>
    {
      return errorstate;
 800daa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daa4:	e070      	b.n	800db88 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daaa:	2b03      	cmp	r3, #3
 800daac:	d036      	beq.n	800db1c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800daae:	89fb      	ldrh	r3, [r7, #14]
 800dab0:	461a      	mov	r2, r3
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dabe:	041b      	lsls	r3, r3, #16
 800dac0:	4619      	mov	r1, r3
 800dac2:	4610      	mov	r0, r2
 800dac4:	f002 fddc 	bl	8010680 <SDMMC_CmdSendCSD>
 800dac8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800daca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d001      	beq.n	800dad4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800dad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dad2:	e059      	b.n	800db88 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	2100      	movs	r1, #0
 800dada:	4618      	mov	r0, r3
 800dadc:	f002 fbbf 	bl	801025e <SDIO_GetResponse>
 800dae0:	4602      	mov	r2, r0
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	2104      	movs	r1, #4
 800daec:	4618      	mov	r0, r3
 800daee:	f002 fbb6 	bl	801025e <SDIO_GetResponse>
 800daf2:	4602      	mov	r2, r0
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	2108      	movs	r1, #8
 800dafe:	4618      	mov	r0, r3
 800db00:	f002 fbad 	bl	801025e <SDIO_GetResponse>
 800db04:	4602      	mov	r2, r0
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	210c      	movs	r1, #12
 800db10:	4618      	mov	r0, r3
 800db12:	f002 fba4 	bl	801025e <SDIO_GetResponse>
 800db16:	4602      	mov	r2, r0
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	2104      	movs	r1, #4
 800db22:	4618      	mov	r0, r3
 800db24:	f002 fb9b 	bl	801025e <SDIO_GetResponse>
 800db28:	4603      	mov	r3, r0
 800db2a:	0d1a      	lsrs	r2, r3, #20
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800db30:	f107 0310 	add.w	r3, r7, #16
 800db34:	4619      	mov	r1, r3
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f7ff fbe4 	bl	800d304 <HAL_SD_GetCardCSD>
 800db3c:	4603      	mov	r3, r0
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d002      	beq.n	800db48 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800db46:	e01f      	b.n	800db88 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6819      	ldr	r1, [r3, #0]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db50:	041b      	lsls	r3, r3, #16
 800db52:	461a      	mov	r2, r3
 800db54:	f04f 0300 	mov.w	r3, #0
 800db58:	4608      	mov	r0, r1
 800db5a:	f002 fc8b 	bl	8010474 <SDMMC_CmdSelDesel>
 800db5e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800db60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db62:	2b00      	cmp	r3, #0
 800db64:	d001      	beq.n	800db6a <SD_InitCard+0x172>
  {
    return errorstate;
 800db66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db68:	e00e      	b.n	800db88 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681d      	ldr	r5, [r3, #0]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	466c      	mov	r4, sp
 800db72:	f103 0210 	add.w	r2, r3, #16
 800db76:	ca07      	ldmia	r2, {r0, r1, r2}
 800db78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800db7c:	3304      	adds	r3, #4
 800db7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800db80:	4628      	mov	r0, r5
 800db82:	f002 facf 	bl	8010124 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800db86:	2300      	movs	r3, #0
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3740      	adds	r7, #64	; 0x40
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bdb0      	pop	{r4, r5, r7, pc}

0800db90 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b086      	sub	sp, #24
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800db98:	2300      	movs	r3, #0
 800db9a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800db9c:	2300      	movs	r3, #0
 800db9e:	617b      	str	r3, [r7, #20]
 800dba0:	2300      	movs	r3, #0
 800dba2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f002 fc86 	bl	80104ba <SDMMC_CmdGoIdleState>
 800dbae:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d001      	beq.n	800dbba <SD_PowerON+0x2a>
  {
    return errorstate;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	e072      	b.n	800dca0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f002 fc99 	bl	80104f6 <SDMMC_CmdOperCond>
 800dbc4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d00d      	beq.n	800dbe8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f002 fc6f 	bl	80104ba <SDMMC_CmdGoIdleState>
 800dbdc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d004      	beq.n	800dbee <SD_PowerON+0x5e>
    {
      return errorstate;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	e05b      	b.n	800dca0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2201      	movs	r2, #1
 800dbec:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbf2:	2b01      	cmp	r3, #1
 800dbf4:	d137      	bne.n	800dc66 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	2100      	movs	r1, #0
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f002 fc99 	bl	8010534 <SDMMC_CmdAppCommand>
 800dc02:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d02d      	beq.n	800dc66 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dc0e:	e047      	b.n	800dca0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	2100      	movs	r1, #0
 800dc16:	4618      	mov	r0, r3
 800dc18:	f002 fc8c 	bl	8010534 <SDMMC_CmdAppCommand>
 800dc1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d001      	beq.n	800dc28 <SD_PowerON+0x98>
    {
      return errorstate;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	e03b      	b.n	800dca0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	491e      	ldr	r1, [pc, #120]	; (800dca8 <SD_PowerON+0x118>)
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f002 fca2 	bl	8010578 <SDMMC_CmdAppOperCommand>
 800dc34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d002      	beq.n	800dc42 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dc40:	e02e      	b.n	800dca0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	2100      	movs	r1, #0
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f002 fb08 	bl	801025e <SDIO_GetResponse>
 800dc4e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	0fdb      	lsrs	r3, r3, #31
 800dc54:	2b01      	cmp	r3, #1
 800dc56:	d101      	bne.n	800dc5c <SD_PowerON+0xcc>
 800dc58:	2301      	movs	r3, #1
 800dc5a:	e000      	b.n	800dc5e <SD_PowerON+0xce>
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	613b      	str	r3, [r7, #16]

    count++;
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	3301      	adds	r3, #1
 800dc64:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dc6c:	4293      	cmp	r3, r2
 800dc6e:	d802      	bhi.n	800dc76 <SD_PowerON+0xe6>
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d0cc      	beq.n	800dc10 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d902      	bls.n	800dc86 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dc80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dc84:	e00c      	b.n	800dca0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d003      	beq.n	800dc98 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2201      	movs	r2, #1
 800dc94:	645a      	str	r2, [r3, #68]	; 0x44
 800dc96:	e002      	b.n	800dc9e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800dc9e:	2300      	movs	r3, #0
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3718      	adds	r7, #24
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}
 800dca8:	c1100000 	.word	0xc1100000

0800dcac <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b084      	sub	sp, #16
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d102      	bne.n	800dcc2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800dcbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dcc0:	e018      	b.n	800dcf4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681a      	ldr	r2, [r3, #0]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcca:	041b      	lsls	r3, r3, #16
 800dccc:	4619      	mov	r1, r3
 800dcce:	4610      	mov	r0, r2
 800dcd0:	f002 fd16 	bl	8010700 <SDMMC_CmdSendStatus>
 800dcd4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d001      	beq.n	800dce0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	e009      	b.n	800dcf4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	2100      	movs	r1, #0
 800dce6:	4618      	mov	r0, r3
 800dce8:	f002 fab9 	bl	801025e <SDIO_GetResponse>
 800dcec:	4602      	mov	r2, r0
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800dcf2:	2300      	movs	r3, #0
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3710      	adds	r7, #16
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}

0800dcfc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b086      	sub	sp, #24
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dd04:	2300      	movs	r3, #0
 800dd06:	60fb      	str	r3, [r7, #12]
 800dd08:	2300      	movs	r3, #0
 800dd0a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	2100      	movs	r1, #0
 800dd12:	4618      	mov	r0, r3
 800dd14:	f002 faa3 	bl	801025e <SDIO_GetResponse>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dd22:	d102      	bne.n	800dd2a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dd24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dd28:	e02f      	b.n	800dd8a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dd2a:	f107 030c 	add.w	r3, r7, #12
 800dd2e:	4619      	mov	r1, r3
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f000 f879 	bl	800de28 <SD_FindSCR>
 800dd36:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d001      	beq.n	800dd42 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	e023      	b.n	800dd8a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d01c      	beq.n	800dd86 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681a      	ldr	r2, [r3, #0]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd54:	041b      	lsls	r3, r3, #16
 800dd56:	4619      	mov	r1, r3
 800dd58:	4610      	mov	r0, r2
 800dd5a:	f002 fbeb 	bl	8010534 <SDMMC_CmdAppCommand>
 800dd5e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d001      	beq.n	800dd6a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	e00f      	b.n	800dd8a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	2102      	movs	r1, #2
 800dd70:	4618      	mov	r0, r3
 800dd72:	f002 fc24 	bl	80105be <SDMMC_CmdBusWidth>
 800dd76:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d001      	beq.n	800dd82 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	e003      	b.n	800dd8a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dd82:	2300      	movs	r3, #0
 800dd84:	e001      	b.n	800dd8a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dd86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3718      	adds	r7, #24
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}

0800dd92 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800dd92:	b580      	push	{r7, lr}
 800dd94:	b086      	sub	sp, #24
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	60fb      	str	r3, [r7, #12]
 800dd9e:	2300      	movs	r3, #0
 800dda0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	2100      	movs	r1, #0
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f002 fa58 	bl	801025e <SDIO_GetResponse>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ddb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ddb8:	d102      	bne.n	800ddc0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ddba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ddbe:	e02f      	b.n	800de20 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ddc0:	f107 030c 	add.w	r3, r7, #12
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f000 f82e 	bl	800de28 <SD_FindSCR>
 800ddcc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d001      	beq.n	800ddd8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	e023      	b.n	800de20 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d01c      	beq.n	800de1c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681a      	ldr	r2, [r3, #0]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddea:	041b      	lsls	r3, r3, #16
 800ddec:	4619      	mov	r1, r3
 800ddee:	4610      	mov	r0, r2
 800ddf0:	f002 fba0 	bl	8010534 <SDMMC_CmdAppCommand>
 800ddf4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d001      	beq.n	800de00 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	e00f      	b.n	800de20 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	2100      	movs	r1, #0
 800de06:	4618      	mov	r0, r3
 800de08:	f002 fbd9 	bl	80105be <SDMMC_CmdBusWidth>
 800de0c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d001      	beq.n	800de18 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	e003      	b.n	800de20 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800de18:	2300      	movs	r3, #0
 800de1a:	e001      	b.n	800de20 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800de1c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800de20:	4618      	mov	r0, r3
 800de22:	3718      	adds	r7, #24
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800de28:	b590      	push	{r4, r7, lr}
 800de2a:	b08f      	sub	sp, #60	; 0x3c
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800de32:	f7fb fd61 	bl	80098f8 <HAL_GetTick>
 800de36:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800de38:	2300      	movs	r3, #0
 800de3a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800de3c:	2300      	movs	r3, #0
 800de3e:	60bb      	str	r3, [r7, #8]
 800de40:	2300      	movs	r3, #0
 800de42:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2108      	movs	r1, #8
 800de4e:	4618      	mov	r0, r3
 800de50:	f002 fa44 	bl	80102dc <SDMMC_CmdBlockLength>
 800de54:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800de56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d001      	beq.n	800de60 <SD_FindSCR+0x38>
  {
    return errorstate;
 800de5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5e:	e0a9      	b.n	800dfb4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681a      	ldr	r2, [r3, #0]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de68:	041b      	lsls	r3, r3, #16
 800de6a:	4619      	mov	r1, r3
 800de6c:	4610      	mov	r0, r2
 800de6e:	f002 fb61 	bl	8010534 <SDMMC_CmdAppCommand>
 800de72:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800de74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de76:	2b00      	cmp	r3, #0
 800de78:	d001      	beq.n	800de7e <SD_FindSCR+0x56>
  {
    return errorstate;
 800de7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7c:	e09a      	b.n	800dfb4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800de7e:	f04f 33ff 	mov.w	r3, #4294967295
 800de82:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800de84:	2308      	movs	r3, #8
 800de86:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800de88:	2330      	movs	r3, #48	; 0x30
 800de8a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800de8c:	2302      	movs	r3, #2
 800de8e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800de90:	2300      	movs	r3, #0
 800de92:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800de94:	2301      	movs	r3, #1
 800de96:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f107 0210 	add.w	r2, r7, #16
 800dea0:	4611      	mov	r1, r2
 800dea2:	4618      	mov	r0, r3
 800dea4:	f002 f9ee 	bl	8010284 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4618      	mov	r0, r3
 800deae:	f002 fba8 	bl	8010602 <SDMMC_CmdSendSCR>
 800deb2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800deb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d022      	beq.n	800df00 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800deba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800debc:	e07a      	b.n	800dfb4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d00e      	beq.n	800deea <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6819      	ldr	r1, [r3, #0]
 800ded0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ded2:	009b      	lsls	r3, r3, #2
 800ded4:	f107 0208 	add.w	r2, r7, #8
 800ded8:	18d4      	adds	r4, r2, r3
 800deda:	4608      	mov	r0, r1
 800dedc:	f002 f94d 	bl	801017a <SDIO_ReadFIFO>
 800dee0:	4603      	mov	r3, r0
 800dee2:	6023      	str	r3, [r4, #0]
      index++;
 800dee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dee6:	3301      	adds	r3, #1
 800dee8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800deea:	f7fb fd05 	bl	80098f8 <HAL_GetTick>
 800deee:	4602      	mov	r2, r0
 800def0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def2:	1ad3      	subs	r3, r2, r3
 800def4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800def8:	d102      	bne.n	800df00 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800defa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800defe:	e059      	b.n	800dfb4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df06:	f240 432a 	movw	r3, #1066	; 0x42a
 800df0a:	4013      	ands	r3, r2
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d0d6      	beq.n	800debe <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df16:	f003 0308 	and.w	r3, r3, #8
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d005      	beq.n	800df2a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	2208      	movs	r2, #8
 800df24:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800df26:	2308      	movs	r3, #8
 800df28:	e044      	b.n	800dfb4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df30:	f003 0302 	and.w	r3, r3, #2
 800df34:	2b00      	cmp	r3, #0
 800df36:	d005      	beq.n	800df44 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	2202      	movs	r2, #2
 800df3e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800df40:	2302      	movs	r3, #2
 800df42:	e037      	b.n	800dfb4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df4a:	f003 0320 	and.w	r3, r3, #32
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d005      	beq.n	800df5e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	2220      	movs	r2, #32
 800df58:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800df5a:	2320      	movs	r3, #32
 800df5c:	e02a      	b.n	800dfb4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f240 523a 	movw	r2, #1338	; 0x53a
 800df66:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	061a      	lsls	r2, r3, #24
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	021b      	lsls	r3, r3, #8
 800df70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800df74:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	0a1b      	lsrs	r3, r3, #8
 800df7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800df7e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	0e1b      	lsrs	r3, r3, #24
 800df84:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800df86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df88:	601a      	str	r2, [r3, #0]
    scr++;
 800df8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8c:	3304      	adds	r3, #4
 800df8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	061a      	lsls	r2, r3, #24
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	021b      	lsls	r3, r3, #8
 800df98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800df9c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	0a1b      	lsrs	r3, r3, #8
 800dfa2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dfa6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	0e1b      	lsrs	r3, r3, #24
 800dfac:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dfae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800dfb2:	2300      	movs	r3, #0
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	373c      	adds	r7, #60	; 0x3c
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd90      	pop	{r4, r7, pc}

0800dfbc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b086      	sub	sp, #24
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfc8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfce:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d03f      	beq.n	800e056 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	617b      	str	r3, [r7, #20]
 800dfda:	e033      	b.n	800e044 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f002 f8ca 	bl	801017a <SDIO_ReadFIFO>
 800dfe6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	b2da      	uxtb	r2, r3
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	3301      	adds	r3, #1
 800dff4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	3b01      	subs	r3, #1
 800dffa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	0a1b      	lsrs	r3, r3, #8
 800e000:	b2da      	uxtb	r2, r3
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	3301      	adds	r3, #1
 800e00a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	3b01      	subs	r3, #1
 800e010:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	0c1b      	lsrs	r3, r3, #16
 800e016:	b2da      	uxtb	r2, r3
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	3301      	adds	r3, #1
 800e020:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	3b01      	subs	r3, #1
 800e026:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	0e1b      	lsrs	r3, r3, #24
 800e02c:	b2da      	uxtb	r2, r3
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	3301      	adds	r3, #1
 800e036:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	3b01      	subs	r3, #1
 800e03c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	3301      	adds	r3, #1
 800e042:	617b      	str	r3, [r7, #20]
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	2b07      	cmp	r3, #7
 800e048:	d9c8      	bls.n	800dfdc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	68fa      	ldr	r2, [r7, #12]
 800e04e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	693a      	ldr	r2, [r7, #16]
 800e054:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e056:	bf00      	nop
 800e058:	3718      	adds	r7, #24
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}

0800e05e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e05e:	b580      	push	{r7, lr}
 800e060:	b086      	sub	sp, #24
 800e062:	af00      	add	r7, sp, #0
 800e064:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6a1b      	ldr	r3, [r3, #32]
 800e06a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e070:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d043      	beq.n	800e100 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e078:	2300      	movs	r3, #0
 800e07a:	617b      	str	r3, [r7, #20]
 800e07c:	e037      	b.n	800e0ee <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	3301      	adds	r3, #1
 800e088:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	3b01      	subs	r3, #1
 800e08e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	021a      	lsls	r2, r3, #8
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	4313      	orrs	r3, r2
 800e09a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	3301      	adds	r3, #1
 800e0a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	3b01      	subs	r3, #1
 800e0a6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	041a      	lsls	r2, r3, #16
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	4313      	orrs	r3, r2
 800e0b2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	3301      	adds	r3, #1
 800e0b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	3b01      	subs	r3, #1
 800e0be:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	781b      	ldrb	r3, [r3, #0]
 800e0c4:	061a      	lsls	r2, r3, #24
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	4313      	orrs	r3, r2
 800e0ca:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e0d2:	693b      	ldr	r3, [r7, #16]
 800e0d4:	3b01      	subs	r3, #1
 800e0d6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	f107 0208 	add.w	r2, r7, #8
 800e0e0:	4611      	mov	r1, r2
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f002 f856 	bl	8010194 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	3301      	adds	r3, #1
 800e0ec:	617b      	str	r3, [r7, #20]
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	2b07      	cmp	r3, #7
 800e0f2:	d9c4      	bls.n	800e07e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	68fa      	ldr	r2, [r7, #12]
 800e0f8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	693a      	ldr	r2, [r7, #16]
 800e0fe:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e100:	bf00      	nop
 800e102:	3718      	adds	r7, #24
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d101      	bne.n	800e11a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e116:	2301      	movs	r3, #1
 800e118:	e056      	b.n	800e1c8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2200      	movs	r2, #0
 800e11e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e126:	b2db      	uxtb	r3, r3
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d106      	bne.n	800e13a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2200      	movs	r2, #0
 800e130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f7f8 fee5 	bl	8006f04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2202      	movs	r2, #2
 800e13e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e150:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	685a      	ldr	r2, [r3, #4]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	689b      	ldr	r3, [r3, #8]
 800e15a:	431a      	orrs	r2, r3
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	68db      	ldr	r3, [r3, #12]
 800e160:	431a      	orrs	r2, r3
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	691b      	ldr	r3, [r3, #16]
 800e166:	431a      	orrs	r2, r3
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	695b      	ldr	r3, [r3, #20]
 800e16c:	431a      	orrs	r2, r3
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	699b      	ldr	r3, [r3, #24]
 800e172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e176:	431a      	orrs	r2, r3
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	69db      	ldr	r3, [r3, #28]
 800e17c:	431a      	orrs	r2, r3
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6a1b      	ldr	r3, [r3, #32]
 800e182:	ea42 0103 	orr.w	r1, r2, r3
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	430a      	orrs	r2, r1
 800e190:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	699b      	ldr	r3, [r3, #24]
 800e196:	0c1b      	lsrs	r3, r3, #16
 800e198:	f003 0104 	and.w	r1, r3, #4
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	430a      	orrs	r2, r1
 800e1a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	69da      	ldr	r2, [r3, #28]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e1b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e1c6:	2300      	movs	r3, #0
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3708      	adds	r7, #8
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b088      	sub	sp, #32
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	60b9      	str	r1, [r7, #8]
 800e1da:	603b      	str	r3, [r7, #0]
 800e1dc:	4613      	mov	r3, r2
 800e1de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e1ea:	2b01      	cmp	r3, #1
 800e1ec:	d101      	bne.n	800e1f2 <HAL_SPI_Transmit+0x22>
 800e1ee:	2302      	movs	r3, #2
 800e1f0:	e11e      	b.n	800e430 <HAL_SPI_Transmit+0x260>
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e1fa:	f7fb fb7d 	bl	80098f8 <HAL_GetTick>
 800e1fe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e200:	88fb      	ldrh	r3, [r7, #6]
 800e202:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e20a:	b2db      	uxtb	r3, r3
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	d002      	beq.n	800e216 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e210:	2302      	movs	r3, #2
 800e212:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e214:	e103      	b.n	800e41e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d002      	beq.n	800e222 <HAL_SPI_Transmit+0x52>
 800e21c:	88fb      	ldrh	r3, [r7, #6]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d102      	bne.n	800e228 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e222:	2301      	movs	r3, #1
 800e224:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e226:	e0fa      	b.n	800e41e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2203      	movs	r2, #3
 800e22c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2200      	movs	r2, #0
 800e234:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	68ba      	ldr	r2, [r7, #8]
 800e23a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	88fa      	ldrh	r2, [r7, #6]
 800e240:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	88fa      	ldrh	r2, [r7, #6]
 800e246:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2200      	movs	r2, #0
 800e24c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	2200      	movs	r2, #0
 800e252:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	2200      	movs	r2, #0
 800e258:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	2200      	movs	r2, #0
 800e25e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2200      	movs	r2, #0
 800e264:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	689b      	ldr	r3, [r3, #8]
 800e26a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e26e:	d107      	bne.n	800e280 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	681a      	ldr	r2, [r3, #0]
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e27e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e28a:	2b40      	cmp	r3, #64	; 0x40
 800e28c:	d007      	beq.n	800e29e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	681a      	ldr	r2, [r3, #0]
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e29c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	68db      	ldr	r3, [r3, #12]
 800e2a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e2a6:	d14b      	bne.n	800e340 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d002      	beq.n	800e2b6 <HAL_SPI_Transmit+0xe6>
 800e2b0:	8afb      	ldrh	r3, [r7, #22]
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	d13e      	bne.n	800e334 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ba:	881a      	ldrh	r2, [r3, #0]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2c6:	1c9a      	adds	r2, r3, #2
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e2d0:	b29b      	uxth	r3, r3
 800e2d2:	3b01      	subs	r3, #1
 800e2d4:	b29a      	uxth	r2, r3
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e2da:	e02b      	b.n	800e334 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	689b      	ldr	r3, [r3, #8]
 800e2e2:	f003 0302 	and.w	r3, r3, #2
 800e2e6:	2b02      	cmp	r3, #2
 800e2e8:	d112      	bne.n	800e310 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ee:	881a      	ldrh	r2, [r3, #0]
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2fa:	1c9a      	adds	r2, r3, #2
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e304:	b29b      	uxth	r3, r3
 800e306:	3b01      	subs	r3, #1
 800e308:	b29a      	uxth	r2, r3
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	86da      	strh	r2, [r3, #54]	; 0x36
 800e30e:	e011      	b.n	800e334 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e310:	f7fb faf2 	bl	80098f8 <HAL_GetTick>
 800e314:	4602      	mov	r2, r0
 800e316:	69bb      	ldr	r3, [r7, #24]
 800e318:	1ad3      	subs	r3, r2, r3
 800e31a:	683a      	ldr	r2, [r7, #0]
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d803      	bhi.n	800e328 <HAL_SPI_Transmit+0x158>
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e326:	d102      	bne.n	800e32e <HAL_SPI_Transmit+0x15e>
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d102      	bne.n	800e334 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e32e:	2303      	movs	r3, #3
 800e330:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e332:	e074      	b.n	800e41e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e338:	b29b      	uxth	r3, r3
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d1ce      	bne.n	800e2dc <HAL_SPI_Transmit+0x10c>
 800e33e:	e04c      	b.n	800e3da <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	685b      	ldr	r3, [r3, #4]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d002      	beq.n	800e34e <HAL_SPI_Transmit+0x17e>
 800e348:	8afb      	ldrh	r3, [r7, #22]
 800e34a:	2b01      	cmp	r3, #1
 800e34c:	d140      	bne.n	800e3d0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	330c      	adds	r3, #12
 800e358:	7812      	ldrb	r2, [r2, #0]
 800e35a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e360:	1c5a      	adds	r2, r3, #1
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	3b01      	subs	r3, #1
 800e36e:	b29a      	uxth	r2, r3
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e374:	e02c      	b.n	800e3d0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	689b      	ldr	r3, [r3, #8]
 800e37c:	f003 0302 	and.w	r3, r3, #2
 800e380:	2b02      	cmp	r3, #2
 800e382:	d113      	bne.n	800e3ac <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	330c      	adds	r3, #12
 800e38e:	7812      	ldrb	r2, [r2, #0]
 800e390:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e396:	1c5a      	adds	r2, r3, #1
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e3a0:	b29b      	uxth	r3, r3
 800e3a2:	3b01      	subs	r3, #1
 800e3a4:	b29a      	uxth	r2, r3
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	86da      	strh	r2, [r3, #54]	; 0x36
 800e3aa:	e011      	b.n	800e3d0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3ac:	f7fb faa4 	bl	80098f8 <HAL_GetTick>
 800e3b0:	4602      	mov	r2, r0
 800e3b2:	69bb      	ldr	r3, [r7, #24]
 800e3b4:	1ad3      	subs	r3, r2, r3
 800e3b6:	683a      	ldr	r2, [r7, #0]
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d803      	bhi.n	800e3c4 <HAL_SPI_Transmit+0x1f4>
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3c2:	d102      	bne.n	800e3ca <HAL_SPI_Transmit+0x1fa>
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d102      	bne.n	800e3d0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e3ca:	2303      	movs	r3, #3
 800e3cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e3ce:	e026      	b.n	800e41e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d1cd      	bne.n	800e376 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e3da:	69ba      	ldr	r2, [r7, #24]
 800e3dc:	6839      	ldr	r1, [r7, #0]
 800e3de:	68f8      	ldr	r0, [r7, #12]
 800e3e0:	f000 fba4 	bl	800eb2c <SPI_EndRxTxTransaction>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d002      	beq.n	800e3f0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2220      	movs	r2, #32
 800e3ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	689b      	ldr	r3, [r3, #8]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d10a      	bne.n	800e40e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	613b      	str	r3, [r7, #16]
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	68db      	ldr	r3, [r3, #12]
 800e402:	613b      	str	r3, [r7, #16]
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	689b      	ldr	r3, [r3, #8]
 800e40a:	613b      	str	r3, [r7, #16]
 800e40c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e412:	2b00      	cmp	r3, #0
 800e414:	d002      	beq.n	800e41c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e416:	2301      	movs	r3, #1
 800e418:	77fb      	strb	r3, [r7, #31]
 800e41a:	e000      	b.n	800e41e <HAL_SPI_Transmit+0x24e>
  }

error:
 800e41c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	2201      	movs	r2, #1
 800e422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2200      	movs	r2, #0
 800e42a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e42e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e430:	4618      	mov	r0, r3
 800e432:	3720      	adds	r7, #32
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}

0800e438 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b088      	sub	sp, #32
 800e43c:	af02      	add	r7, sp, #8
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	603b      	str	r3, [r7, #0]
 800e444:	4613      	mov	r3, r2
 800e446:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e448:	2300      	movs	r3, #0
 800e44a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	685b      	ldr	r3, [r3, #4]
 800e450:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e454:	d112      	bne.n	800e47c <HAL_SPI_Receive+0x44>
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	689b      	ldr	r3, [r3, #8]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d10e      	bne.n	800e47c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	2204      	movs	r2, #4
 800e462:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e466:	88fa      	ldrh	r2, [r7, #6]
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	9300      	str	r3, [sp, #0]
 800e46c:	4613      	mov	r3, r2
 800e46e:	68ba      	ldr	r2, [r7, #8]
 800e470:	68b9      	ldr	r1, [r7, #8]
 800e472:	68f8      	ldr	r0, [r7, #12]
 800e474:	f000 f8e9 	bl	800e64a <HAL_SPI_TransmitReceive>
 800e478:	4603      	mov	r3, r0
 800e47a:	e0e2      	b.n	800e642 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e482:	2b01      	cmp	r3, #1
 800e484:	d101      	bne.n	800e48a <HAL_SPI_Receive+0x52>
 800e486:	2302      	movs	r3, #2
 800e488:	e0db      	b.n	800e642 <HAL_SPI_Receive+0x20a>
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	2201      	movs	r2, #1
 800e48e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e492:	f7fb fa31 	bl	80098f8 <HAL_GetTick>
 800e496:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e49e:	b2db      	uxtb	r3, r3
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	d002      	beq.n	800e4aa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e4a4:	2302      	movs	r3, #2
 800e4a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e4a8:	e0c2      	b.n	800e630 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d002      	beq.n	800e4b6 <HAL_SPI_Receive+0x7e>
 800e4b0:	88fb      	ldrh	r3, [r7, #6]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d102      	bne.n	800e4bc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e4ba:	e0b9      	b.n	800e630 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2204      	movs	r2, #4
 800e4c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	68ba      	ldr	r2, [r7, #8]
 800e4ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	88fa      	ldrh	r2, [r7, #6]
 800e4d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	88fa      	ldrh	r2, [r7, #6]
 800e4da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	689b      	ldr	r3, [r3, #8]
 800e4fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e502:	d107      	bne.n	800e514 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e512:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e51e:	2b40      	cmp	r3, #64	; 0x40
 800e520:	d007      	beq.n	800e532 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	681a      	ldr	r2, [r3, #0]
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e530:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	68db      	ldr	r3, [r3, #12]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d162      	bne.n	800e600 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e53a:	e02e      	b.n	800e59a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	689b      	ldr	r3, [r3, #8]
 800e542:	f003 0301 	and.w	r3, r3, #1
 800e546:	2b01      	cmp	r3, #1
 800e548:	d115      	bne.n	800e576 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	f103 020c 	add.w	r2, r3, #12
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e556:	7812      	ldrb	r2, [r2, #0]
 800e558:	b2d2      	uxtb	r2, r2
 800e55a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e560:	1c5a      	adds	r2, r3, #1
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	3b01      	subs	r3, #1
 800e56e:	b29a      	uxth	r2, r3
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e574:	e011      	b.n	800e59a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e576:	f7fb f9bf 	bl	80098f8 <HAL_GetTick>
 800e57a:	4602      	mov	r2, r0
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	1ad3      	subs	r3, r2, r3
 800e580:	683a      	ldr	r2, [r7, #0]
 800e582:	429a      	cmp	r2, r3
 800e584:	d803      	bhi.n	800e58e <HAL_SPI_Receive+0x156>
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e58c:	d102      	bne.n	800e594 <HAL_SPI_Receive+0x15c>
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d102      	bne.n	800e59a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e594:	2303      	movs	r3, #3
 800e596:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e598:	e04a      	b.n	800e630 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d1cb      	bne.n	800e53c <HAL_SPI_Receive+0x104>
 800e5a4:	e031      	b.n	800e60a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	689b      	ldr	r3, [r3, #8]
 800e5ac:	f003 0301 	and.w	r3, r3, #1
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	d113      	bne.n	800e5dc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	68da      	ldr	r2, [r3, #12]
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5be:	b292      	uxth	r2, r2
 800e5c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5c6:	1c9a      	adds	r2, r3, #2
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5d0:	b29b      	uxth	r3, r3
 800e5d2:	3b01      	subs	r3, #1
 800e5d4:	b29a      	uxth	r2, r3
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e5da:	e011      	b.n	800e600 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e5dc:	f7fb f98c 	bl	80098f8 <HAL_GetTick>
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	693b      	ldr	r3, [r7, #16]
 800e5e4:	1ad3      	subs	r3, r2, r3
 800e5e6:	683a      	ldr	r2, [r7, #0]
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d803      	bhi.n	800e5f4 <HAL_SPI_Receive+0x1bc>
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5f2:	d102      	bne.n	800e5fa <HAL_SPI_Receive+0x1c2>
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d102      	bne.n	800e600 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800e5fa:	2303      	movs	r3, #3
 800e5fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e5fe:	e017      	b.n	800e630 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e604:	b29b      	uxth	r3, r3
 800e606:	2b00      	cmp	r3, #0
 800e608:	d1cd      	bne.n	800e5a6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e60a:	693a      	ldr	r2, [r7, #16]
 800e60c:	6839      	ldr	r1, [r7, #0]
 800e60e:	68f8      	ldr	r0, [r7, #12]
 800e610:	f000 fa27 	bl	800ea62 <SPI_EndRxTransaction>
 800e614:	4603      	mov	r3, r0
 800e616:	2b00      	cmp	r3, #0
 800e618:	d002      	beq.n	800e620 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2220      	movs	r2, #32
 800e61e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e624:	2b00      	cmp	r3, #0
 800e626:	d002      	beq.n	800e62e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800e628:	2301      	movs	r3, #1
 800e62a:	75fb      	strb	r3, [r7, #23]
 800e62c:	e000      	b.n	800e630 <HAL_SPI_Receive+0x1f8>
  }

error :
 800e62e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	2201      	movs	r2, #1
 800e634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2200      	movs	r2, #0
 800e63c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e640:	7dfb      	ldrb	r3, [r7, #23]
}
 800e642:	4618      	mov	r0, r3
 800e644:	3718      	adds	r7, #24
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}

0800e64a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e64a:	b580      	push	{r7, lr}
 800e64c:	b08c      	sub	sp, #48	; 0x30
 800e64e:	af00      	add	r7, sp, #0
 800e650:	60f8      	str	r0, [r7, #12]
 800e652:	60b9      	str	r1, [r7, #8]
 800e654:	607a      	str	r2, [r7, #4]
 800e656:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e658:	2301      	movs	r3, #1
 800e65a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e65c:	2300      	movs	r3, #0
 800e65e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e668:	2b01      	cmp	r3, #1
 800e66a:	d101      	bne.n	800e670 <HAL_SPI_TransmitReceive+0x26>
 800e66c:	2302      	movs	r3, #2
 800e66e:	e18a      	b.n	800e986 <HAL_SPI_TransmitReceive+0x33c>
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	2201      	movs	r2, #1
 800e674:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e678:	f7fb f93e 	bl	80098f8 <HAL_GetTick>
 800e67c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	685b      	ldr	r3, [r3, #4]
 800e68c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e68e:	887b      	ldrh	r3, [r7, #2]
 800e690:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e692:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e696:	2b01      	cmp	r3, #1
 800e698:	d00f      	beq.n	800e6ba <HAL_SPI_TransmitReceive+0x70>
 800e69a:	69fb      	ldr	r3, [r7, #28]
 800e69c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e6a0:	d107      	bne.n	800e6b2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	689b      	ldr	r3, [r3, #8]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d103      	bne.n	800e6b2 <HAL_SPI_TransmitReceive+0x68>
 800e6aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e6ae:	2b04      	cmp	r3, #4
 800e6b0:	d003      	beq.n	800e6ba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e6b2:	2302      	movs	r3, #2
 800e6b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e6b8:	e15b      	b.n	800e972 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d005      	beq.n	800e6cc <HAL_SPI_TransmitReceive+0x82>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d002      	beq.n	800e6cc <HAL_SPI_TransmitReceive+0x82>
 800e6c6:	887b      	ldrh	r3, [r7, #2]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d103      	bne.n	800e6d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e6d2:	e14e      	b.n	800e972 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e6da:	b2db      	uxtb	r3, r3
 800e6dc:	2b04      	cmp	r3, #4
 800e6de:	d003      	beq.n	800e6e8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	2205      	movs	r2, #5
 800e6e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	687a      	ldr	r2, [r7, #4]
 800e6f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	887a      	ldrh	r2, [r7, #2]
 800e6f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	887a      	ldrh	r2, [r7, #2]
 800e6fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	68ba      	ldr	r2, [r7, #8]
 800e704:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	887a      	ldrh	r2, [r7, #2]
 800e70a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	887a      	ldrh	r2, [r7, #2]
 800e710:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	2200      	movs	r2, #0
 800e716:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	2200      	movs	r2, #0
 800e71c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e728:	2b40      	cmp	r3, #64	; 0x40
 800e72a:	d007      	beq.n	800e73c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	681a      	ldr	r2, [r3, #0]
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e73a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	68db      	ldr	r3, [r3, #12]
 800e740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e744:	d178      	bne.n	800e838 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d002      	beq.n	800e754 <HAL_SPI_TransmitReceive+0x10a>
 800e74e:	8b7b      	ldrh	r3, [r7, #26]
 800e750:	2b01      	cmp	r3, #1
 800e752:	d166      	bne.n	800e822 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e758:	881a      	ldrh	r2, [r3, #0]
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e764:	1c9a      	adds	r2, r3, #2
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e76e:	b29b      	uxth	r3, r3
 800e770:	3b01      	subs	r3, #1
 800e772:	b29a      	uxth	r2, r3
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e778:	e053      	b.n	800e822 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	689b      	ldr	r3, [r3, #8]
 800e780:	f003 0302 	and.w	r3, r3, #2
 800e784:	2b02      	cmp	r3, #2
 800e786:	d11b      	bne.n	800e7c0 <HAL_SPI_TransmitReceive+0x176>
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d016      	beq.n	800e7c0 <HAL_SPI_TransmitReceive+0x176>
 800e792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e794:	2b01      	cmp	r3, #1
 800e796:	d113      	bne.n	800e7c0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e79c:	881a      	ldrh	r2, [r3, #0]
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7a8:	1c9a      	adds	r2, r3, #2
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	3b01      	subs	r3, #1
 800e7b6:	b29a      	uxth	r2, r3
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	689b      	ldr	r3, [r3, #8]
 800e7c6:	f003 0301 	and.w	r3, r3, #1
 800e7ca:	2b01      	cmp	r3, #1
 800e7cc:	d119      	bne.n	800e802 <HAL_SPI_TransmitReceive+0x1b8>
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e7d2:	b29b      	uxth	r3, r3
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d014      	beq.n	800e802 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	68da      	ldr	r2, [r3, #12]
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7e2:	b292      	uxth	r2, r2
 800e7e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7ea:	1c9a      	adds	r2, r3, #2
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e7f4:	b29b      	uxth	r3, r3
 800e7f6:	3b01      	subs	r3, #1
 800e7f8:	b29a      	uxth	r2, r3
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e7fe:	2301      	movs	r3, #1
 800e800:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e802:	f7fb f879 	bl	80098f8 <HAL_GetTick>
 800e806:	4602      	mov	r2, r0
 800e808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e80a:	1ad3      	subs	r3, r2, r3
 800e80c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e80e:	429a      	cmp	r2, r3
 800e810:	d807      	bhi.n	800e822 <HAL_SPI_TransmitReceive+0x1d8>
 800e812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e814:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e818:	d003      	beq.n	800e822 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e81a:	2303      	movs	r3, #3
 800e81c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e820:	e0a7      	b.n	800e972 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e826:	b29b      	uxth	r3, r3
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d1a6      	bne.n	800e77a <HAL_SPI_TransmitReceive+0x130>
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e830:	b29b      	uxth	r3, r3
 800e832:	2b00      	cmp	r3, #0
 800e834:	d1a1      	bne.n	800e77a <HAL_SPI_TransmitReceive+0x130>
 800e836:	e07c      	b.n	800e932 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d002      	beq.n	800e846 <HAL_SPI_TransmitReceive+0x1fc>
 800e840:	8b7b      	ldrh	r3, [r7, #26]
 800e842:	2b01      	cmp	r3, #1
 800e844:	d16b      	bne.n	800e91e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	330c      	adds	r3, #12
 800e850:	7812      	ldrb	r2, [r2, #0]
 800e852:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e858:	1c5a      	adds	r2, r3, #1
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e862:	b29b      	uxth	r3, r3
 800e864:	3b01      	subs	r3, #1
 800e866:	b29a      	uxth	r2, r3
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e86c:	e057      	b.n	800e91e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	689b      	ldr	r3, [r3, #8]
 800e874:	f003 0302 	and.w	r3, r3, #2
 800e878:	2b02      	cmp	r3, #2
 800e87a:	d11c      	bne.n	800e8b6 <HAL_SPI_TransmitReceive+0x26c>
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e880:	b29b      	uxth	r3, r3
 800e882:	2b00      	cmp	r3, #0
 800e884:	d017      	beq.n	800e8b6 <HAL_SPI_TransmitReceive+0x26c>
 800e886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e888:	2b01      	cmp	r3, #1
 800e88a:	d114      	bne.n	800e8b6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	330c      	adds	r3, #12
 800e896:	7812      	ldrb	r2, [r2, #0]
 800e898:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e89e:	1c5a      	adds	r2, r3, #1
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e8a8:	b29b      	uxth	r3, r3
 800e8aa:	3b01      	subs	r3, #1
 800e8ac:	b29a      	uxth	r2, r3
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	689b      	ldr	r3, [r3, #8]
 800e8bc:	f003 0301 	and.w	r3, r3, #1
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d119      	bne.n	800e8f8 <HAL_SPI_TransmitReceive+0x2ae>
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e8c8:	b29b      	uxth	r3, r3
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d014      	beq.n	800e8f8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	68da      	ldr	r2, [r3, #12]
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8d8:	b2d2      	uxtb	r2, r2
 800e8da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8e0:	1c5a      	adds	r2, r3, #1
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e8ea:	b29b      	uxth	r3, r3
 800e8ec:	3b01      	subs	r3, #1
 800e8ee:	b29a      	uxth	r2, r3
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e8f8:	f7fa fffe 	bl	80098f8 <HAL_GetTick>
 800e8fc:	4602      	mov	r2, r0
 800e8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e900:	1ad3      	subs	r3, r2, r3
 800e902:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e904:	429a      	cmp	r2, r3
 800e906:	d803      	bhi.n	800e910 <HAL_SPI_TransmitReceive+0x2c6>
 800e908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e90a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e90e:	d102      	bne.n	800e916 <HAL_SPI_TransmitReceive+0x2cc>
 800e910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e912:	2b00      	cmp	r3, #0
 800e914:	d103      	bne.n	800e91e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e916:	2303      	movs	r3, #3
 800e918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e91c:	e029      	b.n	800e972 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e922:	b29b      	uxth	r3, r3
 800e924:	2b00      	cmp	r3, #0
 800e926:	d1a2      	bne.n	800e86e <HAL_SPI_TransmitReceive+0x224>
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e92c:	b29b      	uxth	r3, r3
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d19d      	bne.n	800e86e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e934:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e936:	68f8      	ldr	r0, [r7, #12]
 800e938:	f000 f8f8 	bl	800eb2c <SPI_EndRxTxTransaction>
 800e93c:	4603      	mov	r3, r0
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d006      	beq.n	800e950 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e942:	2301      	movs	r3, #1
 800e944:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	2220      	movs	r2, #32
 800e94c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e94e:	e010      	b.n	800e972 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	689b      	ldr	r3, [r3, #8]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d10b      	bne.n	800e970 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e958:	2300      	movs	r3, #0
 800e95a:	617b      	str	r3, [r7, #20]
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	68db      	ldr	r3, [r3, #12]
 800e962:	617b      	str	r3, [r7, #20]
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	689b      	ldr	r3, [r3, #8]
 800e96a:	617b      	str	r3, [r7, #20]
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	e000      	b.n	800e972 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e970:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2201      	movs	r2, #1
 800e976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2200      	movs	r2, #0
 800e97e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e982:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e986:	4618      	mov	r0, r3
 800e988:	3730      	adds	r7, #48	; 0x30
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}

0800e98e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e98e:	b580      	push	{r7, lr}
 800e990:	b084      	sub	sp, #16
 800e992:	af00      	add	r7, sp, #0
 800e994:	60f8      	str	r0, [r7, #12]
 800e996:	60b9      	str	r1, [r7, #8]
 800e998:	603b      	str	r3, [r7, #0]
 800e99a:	4613      	mov	r3, r2
 800e99c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e99e:	e04c      	b.n	800ea3a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9a6:	d048      	beq.n	800ea3a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e9a8:	f7fa ffa6 	bl	80098f8 <HAL_GetTick>
 800e9ac:	4602      	mov	r2, r0
 800e9ae:	69bb      	ldr	r3, [r7, #24]
 800e9b0:	1ad3      	subs	r3, r2, r3
 800e9b2:	683a      	ldr	r2, [r7, #0]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d902      	bls.n	800e9be <SPI_WaitFlagStateUntilTimeout+0x30>
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d13d      	bne.n	800ea3a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	685a      	ldr	r2, [r3, #4]
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e9cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e9d6:	d111      	bne.n	800e9fc <SPI_WaitFlagStateUntilTimeout+0x6e>
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	689b      	ldr	r3, [r3, #8]
 800e9dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9e0:	d004      	beq.n	800e9ec <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	689b      	ldr	r3, [r3, #8]
 800e9e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9ea:	d107      	bne.n	800e9fc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	681a      	ldr	r2, [r3, #0]
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e9fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea04:	d10f      	bne.n	800ea26 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	681a      	ldr	r2, [r3, #0]
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ea14:	601a      	str	r2, [r3, #0]
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ea24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	2201      	movs	r2, #1
 800ea2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	2200      	movs	r2, #0
 800ea32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ea36:	2303      	movs	r3, #3
 800ea38:	e00f      	b.n	800ea5a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	689a      	ldr	r2, [r3, #8]
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	4013      	ands	r3, r2
 800ea44:	68ba      	ldr	r2, [r7, #8]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	bf0c      	ite	eq
 800ea4a:	2301      	moveq	r3, #1
 800ea4c:	2300      	movne	r3, #0
 800ea4e:	b2db      	uxtb	r3, r3
 800ea50:	461a      	mov	r2, r3
 800ea52:	79fb      	ldrb	r3, [r7, #7]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d1a3      	bne.n	800e9a0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ea58:	2300      	movs	r3, #0
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3710      	adds	r7, #16
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}

0800ea62 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ea62:	b580      	push	{r7, lr}
 800ea64:	b086      	sub	sp, #24
 800ea66:	af02      	add	r7, sp, #8
 800ea68:	60f8      	str	r0, [r7, #12]
 800ea6a:	60b9      	str	r1, [r7, #8]
 800ea6c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	685b      	ldr	r3, [r3, #4]
 800ea72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea76:	d111      	bne.n	800ea9c <SPI_EndRxTransaction+0x3a>
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	689b      	ldr	r3, [r3, #8]
 800ea7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea80:	d004      	beq.n	800ea8c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	689b      	ldr	r3, [r3, #8]
 800ea86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea8a:	d107      	bne.n	800ea9c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	681a      	ldr	r2, [r3, #0]
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea9a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	685b      	ldr	r3, [r3, #4]
 800eaa0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eaa4:	d12a      	bne.n	800eafc <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	689b      	ldr	r3, [r3, #8]
 800eaaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eaae:	d012      	beq.n	800ead6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	9300      	str	r3, [sp, #0]
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	2200      	movs	r2, #0
 800eab8:	2180      	movs	r1, #128	; 0x80
 800eaba:	68f8      	ldr	r0, [r7, #12]
 800eabc:	f7ff ff67 	bl	800e98e <SPI_WaitFlagStateUntilTimeout>
 800eac0:	4603      	mov	r3, r0
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d02d      	beq.n	800eb22 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaca:	f043 0220 	orr.w	r2, r3, #32
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ead2:	2303      	movs	r3, #3
 800ead4:	e026      	b.n	800eb24 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	9300      	str	r3, [sp, #0]
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	2200      	movs	r2, #0
 800eade:	2101      	movs	r1, #1
 800eae0:	68f8      	ldr	r0, [r7, #12]
 800eae2:	f7ff ff54 	bl	800e98e <SPI_WaitFlagStateUntilTimeout>
 800eae6:	4603      	mov	r3, r0
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d01a      	beq.n	800eb22 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaf0:	f043 0220 	orr.w	r2, r3, #32
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800eaf8:	2303      	movs	r3, #3
 800eafa:	e013      	b.n	800eb24 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	9300      	str	r3, [sp, #0]
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	2200      	movs	r2, #0
 800eb04:	2101      	movs	r1, #1
 800eb06:	68f8      	ldr	r0, [r7, #12]
 800eb08:	f7ff ff41 	bl	800e98e <SPI_WaitFlagStateUntilTimeout>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d007      	beq.n	800eb22 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb16:	f043 0220 	orr.w	r2, r3, #32
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800eb1e:	2303      	movs	r3, #3
 800eb20:	e000      	b.n	800eb24 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800eb22:	2300      	movs	r3, #0
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3710      	adds	r7, #16
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b088      	sub	sp, #32
 800eb30:	af02      	add	r7, sp, #8
 800eb32:	60f8      	str	r0, [r7, #12]
 800eb34:	60b9      	str	r1, [r7, #8]
 800eb36:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800eb38:	4b1b      	ldr	r3, [pc, #108]	; (800eba8 <SPI_EndRxTxTransaction+0x7c>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	4a1b      	ldr	r2, [pc, #108]	; (800ebac <SPI_EndRxTxTransaction+0x80>)
 800eb3e:	fba2 2303 	umull	r2, r3, r2, r3
 800eb42:	0d5b      	lsrs	r3, r3, #21
 800eb44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eb48:	fb02 f303 	mul.w	r3, r2, r3
 800eb4c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	685b      	ldr	r3, [r3, #4]
 800eb52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eb56:	d112      	bne.n	800eb7e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	9300      	str	r3, [sp, #0]
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	2180      	movs	r1, #128	; 0x80
 800eb62:	68f8      	ldr	r0, [r7, #12]
 800eb64:	f7ff ff13 	bl	800e98e <SPI_WaitFlagStateUntilTimeout>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d016      	beq.n	800eb9c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb72:	f043 0220 	orr.w	r2, r3, #32
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800eb7a:	2303      	movs	r3, #3
 800eb7c:	e00f      	b.n	800eb9e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d00a      	beq.n	800eb9a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	3b01      	subs	r3, #1
 800eb88:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	689b      	ldr	r3, [r3, #8]
 800eb90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb94:	2b80      	cmp	r3, #128	; 0x80
 800eb96:	d0f2      	beq.n	800eb7e <SPI_EndRxTxTransaction+0x52>
 800eb98:	e000      	b.n	800eb9c <SPI_EndRxTxTransaction+0x70>
        break;
 800eb9a:	bf00      	nop
  }

  return HAL_OK;
 800eb9c:	2300      	movs	r3, #0
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3718      	adds	r7, #24
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	20000000 	.word	0x20000000
 800ebac:	165e9f81 	.word	0x165e9f81

0800ebb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d101      	bne.n	800ebc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	e01d      	b.n	800ebfe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ebc8:	b2db      	uxtb	r3, r3
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d106      	bne.n	800ebdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f7f8 fa50 	bl	800707c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2202      	movs	r2, #2
 800ebe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681a      	ldr	r2, [r3, #0]
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	3304      	adds	r3, #4
 800ebec:	4619      	mov	r1, r3
 800ebee:	4610      	mov	r0, r2
 800ebf0:	f000 fb56 	bl	800f2a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2201      	movs	r2, #1
 800ebf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ebfc:	2300      	movs	r3, #0
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3708      	adds	r7, #8
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}

0800ec06 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ec06:	b480      	push	{r7}
 800ec08:	b085      	sub	sp, #20
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	68da      	ldr	r2, [r3, #12]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	f042 0201 	orr.w	r2, r2, #1
 800ec1c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	689b      	ldr	r3, [r3, #8]
 800ec24:	f003 0307 	and.w	r3, r3, #7
 800ec28:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	2b06      	cmp	r3, #6
 800ec2e:	d007      	beq.n	800ec40 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	681a      	ldr	r2, [r3, #0]
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	f042 0201 	orr.w	r2, r2, #1
 800ec3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ec40:	2300      	movs	r3, #0
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3714      	adds	r7, #20
 800ec46:	46bd      	mov	sp, r7
 800ec48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4c:	4770      	bx	lr

0800ec4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ec4e:	b580      	push	{r7, lr}
 800ec50:	b082      	sub	sp, #8
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d101      	bne.n	800ec60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	e01d      	b.n	800ec9c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec66:	b2db      	uxtb	r3, r3
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d106      	bne.n	800ec7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2200      	movs	r2, #0
 800ec70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f7f8 f98d 	bl	8006f94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2202      	movs	r2, #2
 800ec7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681a      	ldr	r2, [r3, #0]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	3304      	adds	r3, #4
 800ec8a:	4619      	mov	r1, r3
 800ec8c:	4610      	mov	r0, r2
 800ec8e:	f000 fb07 	bl	800f2a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2201      	movs	r2, #1
 800ec96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec9a:	2300      	movs	r3, #0
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3708      	adds	r7, #8
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}

0800eca4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	2201      	movs	r2, #1
 800ecb4:	6839      	ldr	r1, [r7, #0]
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f000 fd42 	bl	800f740 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4a15      	ldr	r2, [pc, #84]	; (800ed18 <HAL_TIM_PWM_Start+0x74>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d004      	beq.n	800ecd0 <HAL_TIM_PWM_Start+0x2c>
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	4a14      	ldr	r2, [pc, #80]	; (800ed1c <HAL_TIM_PWM_Start+0x78>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d101      	bne.n	800ecd4 <HAL_TIM_PWM_Start+0x30>
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	e000      	b.n	800ecd6 <HAL_TIM_PWM_Start+0x32>
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d007      	beq.n	800ecea <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ece8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	689b      	ldr	r3, [r3, #8]
 800ecf0:	f003 0307 	and.w	r3, r3, #7
 800ecf4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	2b06      	cmp	r3, #6
 800ecfa:	d007      	beq.n	800ed0c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	681a      	ldr	r2, [r3, #0]
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	f042 0201 	orr.w	r2, r2, #1
 800ed0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ed0c:	2300      	movs	r3, #0
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3710      	adds	r7, #16
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}
 800ed16:	bf00      	nop
 800ed18:	40010000 	.word	0x40010000
 800ed1c:	40010400 	.word	0x40010400

0800ed20 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b086      	sub	sp, #24
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d101      	bne.n	800ed34 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ed30:	2301      	movs	r3, #1
 800ed32:	e083      	b.n	800ee3c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d106      	bne.n	800ed4e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2200      	movs	r2, #0
 800ed44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f7f8 fa27 	bl	800719c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2202      	movs	r2, #2
 800ed52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	689b      	ldr	r3, [r3, #8]
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	6812      	ldr	r2, [r2, #0]
 800ed60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ed64:	f023 0307 	bic.w	r3, r3, #7
 800ed68:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681a      	ldr	r2, [r3, #0]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	3304      	adds	r3, #4
 800ed72:	4619      	mov	r1, r3
 800ed74:	4610      	mov	r0, r2
 800ed76:	f000 fa93 	bl	800f2a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	689b      	ldr	r3, [r3, #8]
 800ed80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	699b      	ldr	r3, [r3, #24]
 800ed88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	6a1b      	ldr	r3, [r3, #32]
 800ed90:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	697a      	ldr	r2, [r7, #20]
 800ed98:	4313      	orrs	r3, r2
 800ed9a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eda2:	f023 0303 	bic.w	r3, r3, #3
 800eda6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	689a      	ldr	r2, [r3, #8]
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	699b      	ldr	r3, [r3, #24]
 800edb0:	021b      	lsls	r3, r3, #8
 800edb2:	4313      	orrs	r3, r2
 800edb4:	693a      	ldr	r2, [r7, #16]
 800edb6:	4313      	orrs	r3, r2
 800edb8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800edc0:	f023 030c 	bic.w	r3, r3, #12
 800edc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800edcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800edd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	68da      	ldr	r2, [r3, #12]
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	69db      	ldr	r3, [r3, #28]
 800edda:	021b      	lsls	r3, r3, #8
 800eddc:	4313      	orrs	r3, r2
 800edde:	693a      	ldr	r2, [r7, #16]
 800ede0:	4313      	orrs	r3, r2
 800ede2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	691b      	ldr	r3, [r3, #16]
 800ede8:	011a      	lsls	r2, r3, #4
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	6a1b      	ldr	r3, [r3, #32]
 800edee:	031b      	lsls	r3, r3, #12
 800edf0:	4313      	orrs	r3, r2
 800edf2:	693a      	ldr	r2, [r7, #16]
 800edf4:	4313      	orrs	r3, r2
 800edf6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800edfe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ee06:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	685a      	ldr	r2, [r3, #4]
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	695b      	ldr	r3, [r3, #20]
 800ee10:	011b      	lsls	r3, r3, #4
 800ee12:	4313      	orrs	r3, r2
 800ee14:	68fa      	ldr	r2, [r7, #12]
 800ee16:	4313      	orrs	r3, r2
 800ee18:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	697a      	ldr	r2, [r7, #20]
 800ee20:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	693a      	ldr	r2, [r7, #16]
 800ee28:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	68fa      	ldr	r2, [r7, #12]
 800ee30:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2201      	movs	r2, #1
 800ee36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ee3a:	2300      	movs	r3, #0
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3718      	adds	r7, #24
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}

0800ee44 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d003      	beq.n	800ee5c <HAL_TIM_Encoder_Start+0x18>
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	2b04      	cmp	r3, #4
 800ee58:	d008      	beq.n	800ee6c <HAL_TIM_Encoder_Start+0x28>
 800ee5a:	e00f      	b.n	800ee7c <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	2201      	movs	r2, #1
 800ee62:	2100      	movs	r1, #0
 800ee64:	4618      	mov	r0, r3
 800ee66:	f000 fc6b 	bl	800f740 <TIM_CCxChannelCmd>
      break;
 800ee6a:	e016      	b.n	800ee9a <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	2201      	movs	r2, #1
 800ee72:	2104      	movs	r1, #4
 800ee74:	4618      	mov	r0, r3
 800ee76:	f000 fc63 	bl	800f740 <TIM_CCxChannelCmd>
      break;
 800ee7a:	e00e      	b.n	800ee9a <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	2201      	movs	r2, #1
 800ee82:	2100      	movs	r1, #0
 800ee84:	4618      	mov	r0, r3
 800ee86:	f000 fc5b 	bl	800f740 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	2201      	movs	r2, #1
 800ee90:	2104      	movs	r1, #4
 800ee92:	4618      	mov	r0, r3
 800ee94:	f000 fc54 	bl	800f740 <TIM_CCxChannelCmd>
      break;
 800ee98:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	681a      	ldr	r2, [r3, #0]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f042 0201 	orr.w	r2, r2, #1
 800eea8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800eeaa:	2300      	movs	r3, #0
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3708      	adds	r7, #8
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b082      	sub	sp, #8
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	691b      	ldr	r3, [r3, #16]
 800eec2:	f003 0302 	and.w	r3, r3, #2
 800eec6:	2b02      	cmp	r3, #2
 800eec8:	d122      	bne.n	800ef10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	68db      	ldr	r3, [r3, #12]
 800eed0:	f003 0302 	and.w	r3, r3, #2
 800eed4:	2b02      	cmp	r3, #2
 800eed6:	d11b      	bne.n	800ef10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	f06f 0202 	mvn.w	r2, #2
 800eee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	2201      	movs	r2, #1
 800eee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	699b      	ldr	r3, [r3, #24]
 800eeee:	f003 0303 	and.w	r3, r3, #3
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d003      	beq.n	800eefe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f000 f9b4 	bl	800f264 <HAL_TIM_IC_CaptureCallback>
 800eefc:	e005      	b.n	800ef0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	f000 f9a6 	bl	800f250 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f000 f9b7 	bl	800f278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	691b      	ldr	r3, [r3, #16]
 800ef16:	f003 0304 	and.w	r3, r3, #4
 800ef1a:	2b04      	cmp	r3, #4
 800ef1c:	d122      	bne.n	800ef64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	68db      	ldr	r3, [r3, #12]
 800ef24:	f003 0304 	and.w	r3, r3, #4
 800ef28:	2b04      	cmp	r3, #4
 800ef2a:	d11b      	bne.n	800ef64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f06f 0204 	mvn.w	r2, #4
 800ef34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2202      	movs	r2, #2
 800ef3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	699b      	ldr	r3, [r3, #24]
 800ef42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d003      	beq.n	800ef52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f000 f98a 	bl	800f264 <HAL_TIM_IC_CaptureCallback>
 800ef50:	e005      	b.n	800ef5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f000 f97c 	bl	800f250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f000 f98d 	bl	800f278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2200      	movs	r2, #0
 800ef62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	691b      	ldr	r3, [r3, #16]
 800ef6a:	f003 0308 	and.w	r3, r3, #8
 800ef6e:	2b08      	cmp	r3, #8
 800ef70:	d122      	bne.n	800efb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	68db      	ldr	r3, [r3, #12]
 800ef78:	f003 0308 	and.w	r3, r3, #8
 800ef7c:	2b08      	cmp	r3, #8
 800ef7e:	d11b      	bne.n	800efb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f06f 0208 	mvn.w	r2, #8
 800ef88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2204      	movs	r2, #4
 800ef8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	69db      	ldr	r3, [r3, #28]
 800ef96:	f003 0303 	and.w	r3, r3, #3
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d003      	beq.n	800efa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef9e:	6878      	ldr	r0, [r7, #4]
 800efa0:	f000 f960 	bl	800f264 <HAL_TIM_IC_CaptureCallback>
 800efa4:	e005      	b.n	800efb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f000 f952 	bl	800f250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f000 f963 	bl	800f278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2200      	movs	r2, #0
 800efb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	691b      	ldr	r3, [r3, #16]
 800efbe:	f003 0310 	and.w	r3, r3, #16
 800efc2:	2b10      	cmp	r3, #16
 800efc4:	d122      	bne.n	800f00c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	68db      	ldr	r3, [r3, #12]
 800efcc:	f003 0310 	and.w	r3, r3, #16
 800efd0:	2b10      	cmp	r3, #16
 800efd2:	d11b      	bne.n	800f00c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	f06f 0210 	mvn.w	r2, #16
 800efdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2208      	movs	r2, #8
 800efe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	69db      	ldr	r3, [r3, #28]
 800efea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d003      	beq.n	800effa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f000 f936 	bl	800f264 <HAL_TIM_IC_CaptureCallback>
 800eff8:	e005      	b.n	800f006 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f000 f928 	bl	800f250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f000 f939 	bl	800f278 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2200      	movs	r2, #0
 800f00a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	691b      	ldr	r3, [r3, #16]
 800f012:	f003 0301 	and.w	r3, r3, #1
 800f016:	2b01      	cmp	r3, #1
 800f018:	d10e      	bne.n	800f038 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	68db      	ldr	r3, [r3, #12]
 800f020:	f003 0301 	and.w	r3, r3, #1
 800f024:	2b01      	cmp	r3, #1
 800f026:	d107      	bne.n	800f038 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	f06f 0201 	mvn.w	r2, #1
 800f030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f7f6 fd9c 	bl	8005b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	691b      	ldr	r3, [r3, #16]
 800f03e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f042:	2b80      	cmp	r3, #128	; 0x80
 800f044:	d10e      	bne.n	800f064 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	68db      	ldr	r3, [r3, #12]
 800f04c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f050:	2b80      	cmp	r3, #128	; 0x80
 800f052:	d107      	bne.n	800f064 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f05c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f000 fc6c 	bl	800f93c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	691b      	ldr	r3, [r3, #16]
 800f06a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f06e:	2b40      	cmp	r3, #64	; 0x40
 800f070:	d10e      	bne.n	800f090 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	68db      	ldr	r3, [r3, #12]
 800f078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f07c:	2b40      	cmp	r3, #64	; 0x40
 800f07e:	d107      	bne.n	800f090 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f000 f8fe 	bl	800f28c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	691b      	ldr	r3, [r3, #16]
 800f096:	f003 0320 	and.w	r3, r3, #32
 800f09a:	2b20      	cmp	r3, #32
 800f09c:	d10e      	bne.n	800f0bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	68db      	ldr	r3, [r3, #12]
 800f0a4:	f003 0320 	and.w	r3, r3, #32
 800f0a8:	2b20      	cmp	r3, #32
 800f0aa:	d107      	bne.n	800f0bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	f06f 0220 	mvn.w	r2, #32
 800f0b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f000 fc36 	bl	800f928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f0bc:	bf00      	nop
 800f0be:	3708      	adds	r7, #8
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b084      	sub	sp, #16
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	60f8      	str	r0, [r7, #12]
 800f0cc:	60b9      	str	r1, [r7, #8]
 800f0ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0d6:	2b01      	cmp	r3, #1
 800f0d8:	d101      	bne.n	800f0de <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f0da:	2302      	movs	r3, #2
 800f0dc:	e0b4      	b.n	800f248 <HAL_TIM_PWM_ConfigChannel+0x184>
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	2201      	movs	r2, #1
 800f0e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2202      	movs	r2, #2
 800f0ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2b0c      	cmp	r3, #12
 800f0f2:	f200 809f 	bhi.w	800f234 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f0f6:	a201      	add	r2, pc, #4	; (adr r2, 800f0fc <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0fc:	0800f131 	.word	0x0800f131
 800f100:	0800f235 	.word	0x0800f235
 800f104:	0800f235 	.word	0x0800f235
 800f108:	0800f235 	.word	0x0800f235
 800f10c:	0800f171 	.word	0x0800f171
 800f110:	0800f235 	.word	0x0800f235
 800f114:	0800f235 	.word	0x0800f235
 800f118:	0800f235 	.word	0x0800f235
 800f11c:	0800f1b3 	.word	0x0800f1b3
 800f120:	0800f235 	.word	0x0800f235
 800f124:	0800f235 	.word	0x0800f235
 800f128:	0800f235 	.word	0x0800f235
 800f12c:	0800f1f3 	.word	0x0800f1f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	68b9      	ldr	r1, [r7, #8]
 800f136:	4618      	mov	r0, r3
 800f138:	f000 f952 	bl	800f3e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	699a      	ldr	r2, [r3, #24]
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f042 0208 	orr.w	r2, r2, #8
 800f14a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	699a      	ldr	r2, [r3, #24]
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f022 0204 	bic.w	r2, r2, #4
 800f15a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	6999      	ldr	r1, [r3, #24]
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	691a      	ldr	r2, [r3, #16]
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	430a      	orrs	r2, r1
 800f16c:	619a      	str	r2, [r3, #24]
      break;
 800f16e:	e062      	b.n	800f236 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	68b9      	ldr	r1, [r7, #8]
 800f176:	4618      	mov	r0, r3
 800f178:	f000 f9a2 	bl	800f4c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	699a      	ldr	r2, [r3, #24]
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f18a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	699a      	ldr	r2, [r3, #24]
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f19a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	6999      	ldr	r1, [r3, #24]
 800f1a2:	68bb      	ldr	r3, [r7, #8]
 800f1a4:	691b      	ldr	r3, [r3, #16]
 800f1a6:	021a      	lsls	r2, r3, #8
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	430a      	orrs	r2, r1
 800f1ae:	619a      	str	r2, [r3, #24]
      break;
 800f1b0:	e041      	b.n	800f236 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	68b9      	ldr	r1, [r7, #8]
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f000 f9f7 	bl	800f5ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	69da      	ldr	r2, [r3, #28]
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	f042 0208 	orr.w	r2, r2, #8
 800f1cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	69da      	ldr	r2, [r3, #28]
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	f022 0204 	bic.w	r2, r2, #4
 800f1dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	69d9      	ldr	r1, [r3, #28]
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	691a      	ldr	r2, [r3, #16]
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	430a      	orrs	r2, r1
 800f1ee:	61da      	str	r2, [r3, #28]
      break;
 800f1f0:	e021      	b.n	800f236 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	68b9      	ldr	r1, [r7, #8]
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f000 fa4b 	bl	800f694 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	69da      	ldr	r2, [r3, #28]
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f20c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	69da      	ldr	r2, [r3, #28]
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f21c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	69d9      	ldr	r1, [r3, #28]
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	691b      	ldr	r3, [r3, #16]
 800f228:	021a      	lsls	r2, r3, #8
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	430a      	orrs	r2, r1
 800f230:	61da      	str	r2, [r3, #28]
      break;
 800f232:	e000      	b.n	800f236 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f234:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	2201      	movs	r2, #1
 800f23a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	2200      	movs	r2, #0
 800f242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f246:	2300      	movs	r3, #0
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3710      	adds	r7, #16
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f250:	b480      	push	{r7}
 800f252:	b083      	sub	sp, #12
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f258:	bf00      	nop
 800f25a:	370c      	adds	r7, #12
 800f25c:	46bd      	mov	sp, r7
 800f25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f262:	4770      	bx	lr

0800f264 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f264:	b480      	push	{r7}
 800f266:	b083      	sub	sp, #12
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f26c:	bf00      	nop
 800f26e:	370c      	adds	r7, #12
 800f270:	46bd      	mov	sp, r7
 800f272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f276:	4770      	bx	lr

0800f278 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f278:	b480      	push	{r7}
 800f27a:	b083      	sub	sp, #12
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f280:	bf00      	nop
 800f282:	370c      	adds	r7, #12
 800f284:	46bd      	mov	sp, r7
 800f286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28a:	4770      	bx	lr

0800f28c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f28c:	b480      	push	{r7}
 800f28e:	b083      	sub	sp, #12
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f294:	bf00      	nop
 800f296:	370c      	adds	r7, #12
 800f298:	46bd      	mov	sp, r7
 800f29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29e:	4770      	bx	lr

0800f2a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b085      	sub	sp, #20
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	4a40      	ldr	r2, [pc, #256]	; (800f3b4 <TIM_Base_SetConfig+0x114>)
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	d013      	beq.n	800f2e0 <TIM_Base_SetConfig+0x40>
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f2be:	d00f      	beq.n	800f2e0 <TIM_Base_SetConfig+0x40>
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	4a3d      	ldr	r2, [pc, #244]	; (800f3b8 <TIM_Base_SetConfig+0x118>)
 800f2c4:	4293      	cmp	r3, r2
 800f2c6:	d00b      	beq.n	800f2e0 <TIM_Base_SetConfig+0x40>
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	4a3c      	ldr	r2, [pc, #240]	; (800f3bc <TIM_Base_SetConfig+0x11c>)
 800f2cc:	4293      	cmp	r3, r2
 800f2ce:	d007      	beq.n	800f2e0 <TIM_Base_SetConfig+0x40>
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	4a3b      	ldr	r2, [pc, #236]	; (800f3c0 <TIM_Base_SetConfig+0x120>)
 800f2d4:	4293      	cmp	r3, r2
 800f2d6:	d003      	beq.n	800f2e0 <TIM_Base_SetConfig+0x40>
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	4a3a      	ldr	r2, [pc, #232]	; (800f3c4 <TIM_Base_SetConfig+0x124>)
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d108      	bne.n	800f2f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	685b      	ldr	r3, [r3, #4]
 800f2ec:	68fa      	ldr	r2, [r7, #12]
 800f2ee:	4313      	orrs	r3, r2
 800f2f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	4a2f      	ldr	r2, [pc, #188]	; (800f3b4 <TIM_Base_SetConfig+0x114>)
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	d02b      	beq.n	800f352 <TIM_Base_SetConfig+0xb2>
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f300:	d027      	beq.n	800f352 <TIM_Base_SetConfig+0xb2>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	4a2c      	ldr	r2, [pc, #176]	; (800f3b8 <TIM_Base_SetConfig+0x118>)
 800f306:	4293      	cmp	r3, r2
 800f308:	d023      	beq.n	800f352 <TIM_Base_SetConfig+0xb2>
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	4a2b      	ldr	r2, [pc, #172]	; (800f3bc <TIM_Base_SetConfig+0x11c>)
 800f30e:	4293      	cmp	r3, r2
 800f310:	d01f      	beq.n	800f352 <TIM_Base_SetConfig+0xb2>
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	4a2a      	ldr	r2, [pc, #168]	; (800f3c0 <TIM_Base_SetConfig+0x120>)
 800f316:	4293      	cmp	r3, r2
 800f318:	d01b      	beq.n	800f352 <TIM_Base_SetConfig+0xb2>
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	4a29      	ldr	r2, [pc, #164]	; (800f3c4 <TIM_Base_SetConfig+0x124>)
 800f31e:	4293      	cmp	r3, r2
 800f320:	d017      	beq.n	800f352 <TIM_Base_SetConfig+0xb2>
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	4a28      	ldr	r2, [pc, #160]	; (800f3c8 <TIM_Base_SetConfig+0x128>)
 800f326:	4293      	cmp	r3, r2
 800f328:	d013      	beq.n	800f352 <TIM_Base_SetConfig+0xb2>
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	4a27      	ldr	r2, [pc, #156]	; (800f3cc <TIM_Base_SetConfig+0x12c>)
 800f32e:	4293      	cmp	r3, r2
 800f330:	d00f      	beq.n	800f352 <TIM_Base_SetConfig+0xb2>
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	4a26      	ldr	r2, [pc, #152]	; (800f3d0 <TIM_Base_SetConfig+0x130>)
 800f336:	4293      	cmp	r3, r2
 800f338:	d00b      	beq.n	800f352 <TIM_Base_SetConfig+0xb2>
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	4a25      	ldr	r2, [pc, #148]	; (800f3d4 <TIM_Base_SetConfig+0x134>)
 800f33e:	4293      	cmp	r3, r2
 800f340:	d007      	beq.n	800f352 <TIM_Base_SetConfig+0xb2>
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	4a24      	ldr	r2, [pc, #144]	; (800f3d8 <TIM_Base_SetConfig+0x138>)
 800f346:	4293      	cmp	r3, r2
 800f348:	d003      	beq.n	800f352 <TIM_Base_SetConfig+0xb2>
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	4a23      	ldr	r2, [pc, #140]	; (800f3dc <TIM_Base_SetConfig+0x13c>)
 800f34e:	4293      	cmp	r3, r2
 800f350:	d108      	bne.n	800f364 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	68db      	ldr	r3, [r3, #12]
 800f35e:	68fa      	ldr	r2, [r7, #12]
 800f360:	4313      	orrs	r3, r2
 800f362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	695b      	ldr	r3, [r3, #20]
 800f36e:	4313      	orrs	r3, r2
 800f370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	68fa      	ldr	r2, [r7, #12]
 800f376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	689a      	ldr	r2, [r3, #8]
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	681a      	ldr	r2, [r3, #0]
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	4a0a      	ldr	r2, [pc, #40]	; (800f3b4 <TIM_Base_SetConfig+0x114>)
 800f38c:	4293      	cmp	r3, r2
 800f38e:	d003      	beq.n	800f398 <TIM_Base_SetConfig+0xf8>
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	4a0c      	ldr	r2, [pc, #48]	; (800f3c4 <TIM_Base_SetConfig+0x124>)
 800f394:	4293      	cmp	r3, r2
 800f396:	d103      	bne.n	800f3a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	691a      	ldr	r2, [r3, #16]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2201      	movs	r2, #1
 800f3a4:	615a      	str	r2, [r3, #20]
}
 800f3a6:	bf00      	nop
 800f3a8:	3714      	adds	r7, #20
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b0:	4770      	bx	lr
 800f3b2:	bf00      	nop
 800f3b4:	40010000 	.word	0x40010000
 800f3b8:	40000400 	.word	0x40000400
 800f3bc:	40000800 	.word	0x40000800
 800f3c0:	40000c00 	.word	0x40000c00
 800f3c4:	40010400 	.word	0x40010400
 800f3c8:	40014000 	.word	0x40014000
 800f3cc:	40014400 	.word	0x40014400
 800f3d0:	40014800 	.word	0x40014800
 800f3d4:	40001800 	.word	0x40001800
 800f3d8:	40001c00 	.word	0x40001c00
 800f3dc:	40002000 	.word	0x40002000

0800f3e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f3e0:	b480      	push	{r7}
 800f3e2:	b087      	sub	sp, #28
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6a1b      	ldr	r3, [r3, #32]
 800f3ee:	f023 0201 	bic.w	r2, r3, #1
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6a1b      	ldr	r3, [r3, #32]
 800f3fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	685b      	ldr	r3, [r3, #4]
 800f400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	699b      	ldr	r3, [r3, #24]
 800f406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f40e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	f023 0303 	bic.w	r3, r3, #3
 800f416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	68fa      	ldr	r2, [r7, #12]
 800f41e:	4313      	orrs	r3, r2
 800f420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	f023 0302 	bic.w	r3, r3, #2
 800f428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	689b      	ldr	r3, [r3, #8]
 800f42e:	697a      	ldr	r2, [r7, #20]
 800f430:	4313      	orrs	r3, r2
 800f432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	4a20      	ldr	r2, [pc, #128]	; (800f4b8 <TIM_OC1_SetConfig+0xd8>)
 800f438:	4293      	cmp	r3, r2
 800f43a:	d003      	beq.n	800f444 <TIM_OC1_SetConfig+0x64>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	4a1f      	ldr	r2, [pc, #124]	; (800f4bc <TIM_OC1_SetConfig+0xdc>)
 800f440:	4293      	cmp	r3, r2
 800f442:	d10c      	bne.n	800f45e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	f023 0308 	bic.w	r3, r3, #8
 800f44a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	68db      	ldr	r3, [r3, #12]
 800f450:	697a      	ldr	r2, [r7, #20]
 800f452:	4313      	orrs	r3, r2
 800f454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	f023 0304 	bic.w	r3, r3, #4
 800f45c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	4a15      	ldr	r2, [pc, #84]	; (800f4b8 <TIM_OC1_SetConfig+0xd8>)
 800f462:	4293      	cmp	r3, r2
 800f464:	d003      	beq.n	800f46e <TIM_OC1_SetConfig+0x8e>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	4a14      	ldr	r2, [pc, #80]	; (800f4bc <TIM_OC1_SetConfig+0xdc>)
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d111      	bne.n	800f492 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f46e:	693b      	ldr	r3, [r7, #16]
 800f470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f476:	693b      	ldr	r3, [r7, #16]
 800f478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f47c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	695b      	ldr	r3, [r3, #20]
 800f482:	693a      	ldr	r2, [r7, #16]
 800f484:	4313      	orrs	r3, r2
 800f486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	699b      	ldr	r3, [r3, #24]
 800f48c:	693a      	ldr	r2, [r7, #16]
 800f48e:	4313      	orrs	r3, r2
 800f490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	693a      	ldr	r2, [r7, #16]
 800f496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	68fa      	ldr	r2, [r7, #12]
 800f49c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	685a      	ldr	r2, [r3, #4]
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	697a      	ldr	r2, [r7, #20]
 800f4aa:	621a      	str	r2, [r3, #32]
}
 800f4ac:	bf00      	nop
 800f4ae:	371c      	adds	r7, #28
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr
 800f4b8:	40010000 	.word	0x40010000
 800f4bc:	40010400 	.word	0x40010400

0800f4c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b087      	sub	sp, #28
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
 800f4c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6a1b      	ldr	r3, [r3, #32]
 800f4ce:	f023 0210 	bic.w	r2, r3, #16
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	6a1b      	ldr	r3, [r3, #32]
 800f4da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	685b      	ldr	r3, [r3, #4]
 800f4e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	699b      	ldr	r3, [r3, #24]
 800f4e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f4ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f4f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	021b      	lsls	r3, r3, #8
 800f4fe:	68fa      	ldr	r2, [r7, #12]
 800f500:	4313      	orrs	r3, r2
 800f502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	f023 0320 	bic.w	r3, r3, #32
 800f50a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	689b      	ldr	r3, [r3, #8]
 800f510:	011b      	lsls	r3, r3, #4
 800f512:	697a      	ldr	r2, [r7, #20]
 800f514:	4313      	orrs	r3, r2
 800f516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	4a22      	ldr	r2, [pc, #136]	; (800f5a4 <TIM_OC2_SetConfig+0xe4>)
 800f51c:	4293      	cmp	r3, r2
 800f51e:	d003      	beq.n	800f528 <TIM_OC2_SetConfig+0x68>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	4a21      	ldr	r2, [pc, #132]	; (800f5a8 <TIM_OC2_SetConfig+0xe8>)
 800f524:	4293      	cmp	r3, r2
 800f526:	d10d      	bne.n	800f544 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f52e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	68db      	ldr	r3, [r3, #12]
 800f534:	011b      	lsls	r3, r3, #4
 800f536:	697a      	ldr	r2, [r7, #20]
 800f538:	4313      	orrs	r3, r2
 800f53a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f542:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	4a17      	ldr	r2, [pc, #92]	; (800f5a4 <TIM_OC2_SetConfig+0xe4>)
 800f548:	4293      	cmp	r3, r2
 800f54a:	d003      	beq.n	800f554 <TIM_OC2_SetConfig+0x94>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	4a16      	ldr	r2, [pc, #88]	; (800f5a8 <TIM_OC2_SetConfig+0xe8>)
 800f550:	4293      	cmp	r3, r2
 800f552:	d113      	bne.n	800f57c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f554:	693b      	ldr	r3, [r7, #16]
 800f556:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f55a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f562:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	695b      	ldr	r3, [r3, #20]
 800f568:	009b      	lsls	r3, r3, #2
 800f56a:	693a      	ldr	r2, [r7, #16]
 800f56c:	4313      	orrs	r3, r2
 800f56e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	699b      	ldr	r3, [r3, #24]
 800f574:	009b      	lsls	r3, r3, #2
 800f576:	693a      	ldr	r2, [r7, #16]
 800f578:	4313      	orrs	r3, r2
 800f57a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	693a      	ldr	r2, [r7, #16]
 800f580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	68fa      	ldr	r2, [r7, #12]
 800f586:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	685a      	ldr	r2, [r3, #4]
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	697a      	ldr	r2, [r7, #20]
 800f594:	621a      	str	r2, [r3, #32]
}
 800f596:	bf00      	nop
 800f598:	371c      	adds	r7, #28
 800f59a:	46bd      	mov	sp, r7
 800f59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a0:	4770      	bx	lr
 800f5a2:	bf00      	nop
 800f5a4:	40010000 	.word	0x40010000
 800f5a8:	40010400 	.word	0x40010400

0800f5ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b087      	sub	sp, #28
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
 800f5b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	6a1b      	ldr	r3, [r3, #32]
 800f5ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6a1b      	ldr	r3, [r3, #32]
 800f5c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	685b      	ldr	r3, [r3, #4]
 800f5cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	69db      	ldr	r3, [r3, #28]
 800f5d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	f023 0303 	bic.w	r3, r3, #3
 800f5e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	68fa      	ldr	r2, [r7, #12]
 800f5ea:	4313      	orrs	r3, r2
 800f5ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f5f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	689b      	ldr	r3, [r3, #8]
 800f5fa:	021b      	lsls	r3, r3, #8
 800f5fc:	697a      	ldr	r2, [r7, #20]
 800f5fe:	4313      	orrs	r3, r2
 800f600:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	4a21      	ldr	r2, [pc, #132]	; (800f68c <TIM_OC3_SetConfig+0xe0>)
 800f606:	4293      	cmp	r3, r2
 800f608:	d003      	beq.n	800f612 <TIM_OC3_SetConfig+0x66>
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	4a20      	ldr	r2, [pc, #128]	; (800f690 <TIM_OC3_SetConfig+0xe4>)
 800f60e:	4293      	cmp	r3, r2
 800f610:	d10d      	bne.n	800f62e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f618:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	68db      	ldr	r3, [r3, #12]
 800f61e:	021b      	lsls	r3, r3, #8
 800f620:	697a      	ldr	r2, [r7, #20]
 800f622:	4313      	orrs	r3, r2
 800f624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f62c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4a16      	ldr	r2, [pc, #88]	; (800f68c <TIM_OC3_SetConfig+0xe0>)
 800f632:	4293      	cmp	r3, r2
 800f634:	d003      	beq.n	800f63e <TIM_OC3_SetConfig+0x92>
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	4a15      	ldr	r2, [pc, #84]	; (800f690 <TIM_OC3_SetConfig+0xe4>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d113      	bne.n	800f666 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f63e:	693b      	ldr	r3, [r7, #16]
 800f640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f64c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	695b      	ldr	r3, [r3, #20]
 800f652:	011b      	lsls	r3, r3, #4
 800f654:	693a      	ldr	r2, [r7, #16]
 800f656:	4313      	orrs	r3, r2
 800f658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	699b      	ldr	r3, [r3, #24]
 800f65e:	011b      	lsls	r3, r3, #4
 800f660:	693a      	ldr	r2, [r7, #16]
 800f662:	4313      	orrs	r3, r2
 800f664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	693a      	ldr	r2, [r7, #16]
 800f66a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	68fa      	ldr	r2, [r7, #12]
 800f670:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	685a      	ldr	r2, [r3, #4]
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	697a      	ldr	r2, [r7, #20]
 800f67e:	621a      	str	r2, [r3, #32]
}
 800f680:	bf00      	nop
 800f682:	371c      	adds	r7, #28
 800f684:	46bd      	mov	sp, r7
 800f686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68a:	4770      	bx	lr
 800f68c:	40010000 	.word	0x40010000
 800f690:	40010400 	.word	0x40010400

0800f694 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f694:	b480      	push	{r7}
 800f696:	b087      	sub	sp, #28
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
 800f69c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	6a1b      	ldr	r3, [r3, #32]
 800f6a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6a1b      	ldr	r3, [r3, #32]
 800f6ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	685b      	ldr	r3, [r3, #4]
 800f6b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	69db      	ldr	r3, [r3, #28]
 800f6ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f6c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f6ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	021b      	lsls	r3, r3, #8
 800f6d2:	68fa      	ldr	r2, [r7, #12]
 800f6d4:	4313      	orrs	r3, r2
 800f6d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f6d8:	693b      	ldr	r3, [r7, #16]
 800f6da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f6de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	689b      	ldr	r3, [r3, #8]
 800f6e4:	031b      	lsls	r3, r3, #12
 800f6e6:	693a      	ldr	r2, [r7, #16]
 800f6e8:	4313      	orrs	r3, r2
 800f6ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	4a12      	ldr	r2, [pc, #72]	; (800f738 <TIM_OC4_SetConfig+0xa4>)
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d003      	beq.n	800f6fc <TIM_OC4_SetConfig+0x68>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	4a11      	ldr	r2, [pc, #68]	; (800f73c <TIM_OC4_SetConfig+0xa8>)
 800f6f8:	4293      	cmp	r3, r2
 800f6fa:	d109      	bne.n	800f710 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f6fc:	697b      	ldr	r3, [r7, #20]
 800f6fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f702:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	695b      	ldr	r3, [r3, #20]
 800f708:	019b      	lsls	r3, r3, #6
 800f70a:	697a      	ldr	r2, [r7, #20]
 800f70c:	4313      	orrs	r3, r2
 800f70e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	697a      	ldr	r2, [r7, #20]
 800f714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	68fa      	ldr	r2, [r7, #12]
 800f71a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	685a      	ldr	r2, [r3, #4]
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	693a      	ldr	r2, [r7, #16]
 800f728:	621a      	str	r2, [r3, #32]
}
 800f72a:	bf00      	nop
 800f72c:	371c      	adds	r7, #28
 800f72e:	46bd      	mov	sp, r7
 800f730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f734:	4770      	bx	lr
 800f736:	bf00      	nop
 800f738:	40010000 	.word	0x40010000
 800f73c:	40010400 	.word	0x40010400

0800f740 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f740:	b480      	push	{r7}
 800f742:	b087      	sub	sp, #28
 800f744:	af00      	add	r7, sp, #0
 800f746:	60f8      	str	r0, [r7, #12]
 800f748:	60b9      	str	r1, [r7, #8]
 800f74a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f74c:	68bb      	ldr	r3, [r7, #8]
 800f74e:	f003 031f 	and.w	r3, r3, #31
 800f752:	2201      	movs	r2, #1
 800f754:	fa02 f303 	lsl.w	r3, r2, r3
 800f758:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	6a1a      	ldr	r2, [r3, #32]
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	43db      	mvns	r3, r3
 800f762:	401a      	ands	r2, r3
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	6a1a      	ldr	r2, [r3, #32]
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	f003 031f 	and.w	r3, r3, #31
 800f772:	6879      	ldr	r1, [r7, #4]
 800f774:	fa01 f303 	lsl.w	r3, r1, r3
 800f778:	431a      	orrs	r2, r3
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	621a      	str	r2, [r3, #32]
}
 800f77e:	bf00      	nop
 800f780:	371c      	adds	r7, #28
 800f782:	46bd      	mov	sp, r7
 800f784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f788:	4770      	bx	lr
	...

0800f78c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f78c:	b480      	push	{r7}
 800f78e:	b085      	sub	sp, #20
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	d101      	bne.n	800f7a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f7a0:	2302      	movs	r3, #2
 800f7a2:	e05a      	b.n	800f85a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2201      	movs	r2, #1
 800f7a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2202      	movs	r2, #2
 800f7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	685b      	ldr	r3, [r3, #4]
 800f7ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	689b      	ldr	r3, [r3, #8]
 800f7c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	68fa      	ldr	r2, [r7, #12]
 800f7d2:	4313      	orrs	r3, r2
 800f7d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	68fa      	ldr	r2, [r7, #12]
 800f7dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	4a21      	ldr	r2, [pc, #132]	; (800f868 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	d022      	beq.n	800f82e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7f0:	d01d      	beq.n	800f82e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	4a1d      	ldr	r2, [pc, #116]	; (800f86c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f7f8:	4293      	cmp	r3, r2
 800f7fa:	d018      	beq.n	800f82e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	4a1b      	ldr	r2, [pc, #108]	; (800f870 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f802:	4293      	cmp	r3, r2
 800f804:	d013      	beq.n	800f82e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	4a1a      	ldr	r2, [pc, #104]	; (800f874 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f80c:	4293      	cmp	r3, r2
 800f80e:	d00e      	beq.n	800f82e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	4a18      	ldr	r2, [pc, #96]	; (800f878 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f816:	4293      	cmp	r3, r2
 800f818:	d009      	beq.n	800f82e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	4a17      	ldr	r2, [pc, #92]	; (800f87c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f820:	4293      	cmp	r3, r2
 800f822:	d004      	beq.n	800f82e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	4a15      	ldr	r2, [pc, #84]	; (800f880 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d10c      	bne.n	800f848 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f834:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	685b      	ldr	r3, [r3, #4]
 800f83a:	68ba      	ldr	r2, [r7, #8]
 800f83c:	4313      	orrs	r3, r2
 800f83e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	68ba      	ldr	r2, [r7, #8]
 800f846:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2201      	movs	r2, #1
 800f84c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2200      	movs	r2, #0
 800f854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f858:	2300      	movs	r3, #0
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3714      	adds	r7, #20
 800f85e:	46bd      	mov	sp, r7
 800f860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f864:	4770      	bx	lr
 800f866:	bf00      	nop
 800f868:	40010000 	.word	0x40010000
 800f86c:	40000400 	.word	0x40000400
 800f870:	40000800 	.word	0x40000800
 800f874:	40000c00 	.word	0x40000c00
 800f878:	40010400 	.word	0x40010400
 800f87c:	40014000 	.word	0x40014000
 800f880:	40001800 	.word	0x40001800

0800f884 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f884:	b480      	push	{r7}
 800f886:	b085      	sub	sp, #20
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f88e:	2300      	movs	r3, #0
 800f890:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f898:	2b01      	cmp	r3, #1
 800f89a:	d101      	bne.n	800f8a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f89c:	2302      	movs	r3, #2
 800f89e:	e03d      	b.n	800f91c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2201      	movs	r2, #1
 800f8a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	68db      	ldr	r3, [r3, #12]
 800f8b2:	4313      	orrs	r3, r2
 800f8b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	689b      	ldr	r3, [r3, #8]
 800f8c0:	4313      	orrs	r3, r2
 800f8c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	685b      	ldr	r3, [r3, #4]
 800f8ce:	4313      	orrs	r3, r2
 800f8d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	4313      	orrs	r3, r2
 800f8de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	691b      	ldr	r3, [r3, #16]
 800f8ea:	4313      	orrs	r3, r2
 800f8ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	695b      	ldr	r3, [r3, #20]
 800f8f8:	4313      	orrs	r3, r2
 800f8fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	69db      	ldr	r3, [r3, #28]
 800f906:	4313      	orrs	r3, r2
 800f908:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	68fa      	ldr	r2, [r7, #12]
 800f910:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2200      	movs	r2, #0
 800f916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f91a:	2300      	movs	r3, #0
}
 800f91c:	4618      	mov	r0, r3
 800f91e:	3714      	adds	r7, #20
 800f920:	46bd      	mov	sp, r7
 800f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f926:	4770      	bx	lr

0800f928 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f928:	b480      	push	{r7}
 800f92a:	b083      	sub	sp, #12
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f930:	bf00      	nop
 800f932:	370c      	adds	r7, #12
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr

0800f93c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b083      	sub	sp, #12
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f944:	bf00      	nop
 800f946:	370c      	adds	r7, #12
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr

0800f950 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b082      	sub	sp, #8
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d101      	bne.n	800f962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f95e:	2301      	movs	r3, #1
 800f960:	e03f      	b.n	800f9e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f968:	b2db      	uxtb	r3, r3
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d106      	bne.n	800f97c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	2200      	movs	r2, #0
 800f972:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f7f7 fd3a 	bl	80073f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2224      	movs	r2, #36	; 0x24
 800f980:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	68da      	ldr	r2, [r3, #12]
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f992:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f000 f829 	bl	800f9ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	691a      	ldr	r2, [r3, #16]
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f9a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	695a      	ldr	r2, [r3, #20]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f9b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	68da      	ldr	r2, [r3, #12]
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f9c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2220      	movs	r2, #32
 800f9d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2220      	movs	r2, #32
 800f9dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800f9e0:	2300      	movs	r3, #0
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3708      	adds	r7, #8
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}
	...

0800f9ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9f0:	b0bd      	sub	sp, #244	; 0xf4
 800f9f2:	af00      	add	r7, sp, #0
 800f9f4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f9f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	691b      	ldr	r3, [r3, #16]
 800fa00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800fa04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa08:	68d9      	ldr	r1, [r3, #12]
 800fa0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa0e:	681a      	ldr	r2, [r3, #0]
 800fa10:	ea40 0301 	orr.w	r3, r0, r1
 800fa14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fa16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa1a:	689a      	ldr	r2, [r3, #8]
 800fa1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa20:	691b      	ldr	r3, [r3, #16]
 800fa22:	431a      	orrs	r2, r3
 800fa24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa28:	695b      	ldr	r3, [r3, #20]
 800fa2a:	431a      	orrs	r2, r3
 800fa2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa30:	69db      	ldr	r3, [r3, #28]
 800fa32:	4313      	orrs	r3, r2
 800fa34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800fa38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	68db      	ldr	r3, [r3, #12]
 800fa40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800fa44:	f021 010c 	bic.w	r1, r1, #12
 800fa48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa4c:	681a      	ldr	r2, [r3, #0]
 800fa4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fa52:	430b      	orrs	r3, r1
 800fa54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fa56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	695b      	ldr	r3, [r3, #20]
 800fa5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800fa62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa66:	6999      	ldr	r1, [r3, #24]
 800fa68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa6c:	681a      	ldr	r2, [r3, #0]
 800fa6e:	ea40 0301 	orr.w	r3, r0, r1
 800fa72:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fa74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa78:	69db      	ldr	r3, [r3, #28]
 800fa7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fa7e:	f040 81a5 	bne.w	800fdcc <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fa82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa86:	681a      	ldr	r2, [r3, #0]
 800fa88:	4bcd      	ldr	r3, [pc, #820]	; (800fdc0 <UART_SetConfig+0x3d4>)
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d006      	beq.n	800fa9c <UART_SetConfig+0xb0>
 800fa8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa92:	681a      	ldr	r2, [r3, #0]
 800fa94:	4bcb      	ldr	r3, [pc, #812]	; (800fdc4 <UART_SetConfig+0x3d8>)
 800fa96:	429a      	cmp	r2, r3
 800fa98:	f040 80cb 	bne.w	800fc32 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fa9c:	f7fc fbba 	bl	800c214 <HAL_RCC_GetPCLK2Freq>
 800faa0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800faa4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800faa8:	461c      	mov	r4, r3
 800faaa:	f04f 0500 	mov.w	r5, #0
 800faae:	4622      	mov	r2, r4
 800fab0:	462b      	mov	r3, r5
 800fab2:	1891      	adds	r1, r2, r2
 800fab4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800fab8:	415b      	adcs	r3, r3
 800faba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fabe:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800fac2:	1912      	adds	r2, r2, r4
 800fac4:	eb45 0303 	adc.w	r3, r5, r3
 800fac8:	f04f 0000 	mov.w	r0, #0
 800facc:	f04f 0100 	mov.w	r1, #0
 800fad0:	00d9      	lsls	r1, r3, #3
 800fad2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fad6:	00d0      	lsls	r0, r2, #3
 800fad8:	4602      	mov	r2, r0
 800fada:	460b      	mov	r3, r1
 800fadc:	1911      	adds	r1, r2, r4
 800fade:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800fae2:	416b      	adcs	r3, r5
 800fae4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800fae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800faec:	685b      	ldr	r3, [r3, #4]
 800faee:	461a      	mov	r2, r3
 800faf0:	f04f 0300 	mov.w	r3, #0
 800faf4:	1891      	adds	r1, r2, r2
 800faf6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800fafa:	415b      	adcs	r3, r3
 800fafc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fb00:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800fb04:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800fb08:	f7f1 f8d6 	bl	8000cb8 <__aeabi_uldivmod>
 800fb0c:	4602      	mov	r2, r0
 800fb0e:	460b      	mov	r3, r1
 800fb10:	4bad      	ldr	r3, [pc, #692]	; (800fdc8 <UART_SetConfig+0x3dc>)
 800fb12:	fba3 2302 	umull	r2, r3, r3, r2
 800fb16:	095b      	lsrs	r3, r3, #5
 800fb18:	011e      	lsls	r6, r3, #4
 800fb1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fb1e:	461c      	mov	r4, r3
 800fb20:	f04f 0500 	mov.w	r5, #0
 800fb24:	4622      	mov	r2, r4
 800fb26:	462b      	mov	r3, r5
 800fb28:	1891      	adds	r1, r2, r2
 800fb2a:	67b9      	str	r1, [r7, #120]	; 0x78
 800fb2c:	415b      	adcs	r3, r3
 800fb2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fb30:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800fb34:	1912      	adds	r2, r2, r4
 800fb36:	eb45 0303 	adc.w	r3, r5, r3
 800fb3a:	f04f 0000 	mov.w	r0, #0
 800fb3e:	f04f 0100 	mov.w	r1, #0
 800fb42:	00d9      	lsls	r1, r3, #3
 800fb44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fb48:	00d0      	lsls	r0, r2, #3
 800fb4a:	4602      	mov	r2, r0
 800fb4c:	460b      	mov	r3, r1
 800fb4e:	1911      	adds	r1, r2, r4
 800fb50:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800fb54:	416b      	adcs	r3, r5
 800fb56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800fb5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb5e:	685b      	ldr	r3, [r3, #4]
 800fb60:	461a      	mov	r2, r3
 800fb62:	f04f 0300 	mov.w	r3, #0
 800fb66:	1891      	adds	r1, r2, r2
 800fb68:	6739      	str	r1, [r7, #112]	; 0x70
 800fb6a:	415b      	adcs	r3, r3
 800fb6c:	677b      	str	r3, [r7, #116]	; 0x74
 800fb6e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800fb72:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800fb76:	f7f1 f89f 	bl	8000cb8 <__aeabi_uldivmod>
 800fb7a:	4602      	mov	r2, r0
 800fb7c:	460b      	mov	r3, r1
 800fb7e:	4b92      	ldr	r3, [pc, #584]	; (800fdc8 <UART_SetConfig+0x3dc>)
 800fb80:	fba3 1302 	umull	r1, r3, r3, r2
 800fb84:	095b      	lsrs	r3, r3, #5
 800fb86:	2164      	movs	r1, #100	; 0x64
 800fb88:	fb01 f303 	mul.w	r3, r1, r3
 800fb8c:	1ad3      	subs	r3, r2, r3
 800fb8e:	00db      	lsls	r3, r3, #3
 800fb90:	3332      	adds	r3, #50	; 0x32
 800fb92:	4a8d      	ldr	r2, [pc, #564]	; (800fdc8 <UART_SetConfig+0x3dc>)
 800fb94:	fba2 2303 	umull	r2, r3, r2, r3
 800fb98:	095b      	lsrs	r3, r3, #5
 800fb9a:	005b      	lsls	r3, r3, #1
 800fb9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fba0:	441e      	add	r6, r3
 800fba2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fba6:	4618      	mov	r0, r3
 800fba8:	f04f 0100 	mov.w	r1, #0
 800fbac:	4602      	mov	r2, r0
 800fbae:	460b      	mov	r3, r1
 800fbb0:	1894      	adds	r4, r2, r2
 800fbb2:	66bc      	str	r4, [r7, #104]	; 0x68
 800fbb4:	415b      	adcs	r3, r3
 800fbb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fbb8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800fbbc:	1812      	adds	r2, r2, r0
 800fbbe:	eb41 0303 	adc.w	r3, r1, r3
 800fbc2:	f04f 0400 	mov.w	r4, #0
 800fbc6:	f04f 0500 	mov.w	r5, #0
 800fbca:	00dd      	lsls	r5, r3, #3
 800fbcc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fbd0:	00d4      	lsls	r4, r2, #3
 800fbd2:	4622      	mov	r2, r4
 800fbd4:	462b      	mov	r3, r5
 800fbd6:	1814      	adds	r4, r2, r0
 800fbd8:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800fbdc:	414b      	adcs	r3, r1
 800fbde:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800fbe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fbe6:	685b      	ldr	r3, [r3, #4]
 800fbe8:	461a      	mov	r2, r3
 800fbea:	f04f 0300 	mov.w	r3, #0
 800fbee:	1891      	adds	r1, r2, r2
 800fbf0:	6639      	str	r1, [r7, #96]	; 0x60
 800fbf2:	415b      	adcs	r3, r3
 800fbf4:	667b      	str	r3, [r7, #100]	; 0x64
 800fbf6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800fbfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800fbfe:	f7f1 f85b 	bl	8000cb8 <__aeabi_uldivmod>
 800fc02:	4602      	mov	r2, r0
 800fc04:	460b      	mov	r3, r1
 800fc06:	4b70      	ldr	r3, [pc, #448]	; (800fdc8 <UART_SetConfig+0x3dc>)
 800fc08:	fba3 1302 	umull	r1, r3, r3, r2
 800fc0c:	095b      	lsrs	r3, r3, #5
 800fc0e:	2164      	movs	r1, #100	; 0x64
 800fc10:	fb01 f303 	mul.w	r3, r1, r3
 800fc14:	1ad3      	subs	r3, r2, r3
 800fc16:	00db      	lsls	r3, r3, #3
 800fc18:	3332      	adds	r3, #50	; 0x32
 800fc1a:	4a6b      	ldr	r2, [pc, #428]	; (800fdc8 <UART_SetConfig+0x3dc>)
 800fc1c:	fba2 2303 	umull	r2, r3, r2, r3
 800fc20:	095b      	lsrs	r3, r3, #5
 800fc22:	f003 0207 	and.w	r2, r3, #7
 800fc26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	4432      	add	r2, r6
 800fc2e:	609a      	str	r2, [r3, #8]
 800fc30:	e26d      	b.n	801010e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fc32:	f7fc fadb 	bl	800c1ec <HAL_RCC_GetPCLK1Freq>
 800fc36:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fc3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fc3e:	461c      	mov	r4, r3
 800fc40:	f04f 0500 	mov.w	r5, #0
 800fc44:	4622      	mov	r2, r4
 800fc46:	462b      	mov	r3, r5
 800fc48:	1891      	adds	r1, r2, r2
 800fc4a:	65b9      	str	r1, [r7, #88]	; 0x58
 800fc4c:	415b      	adcs	r3, r3
 800fc4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800fc54:	1912      	adds	r2, r2, r4
 800fc56:	eb45 0303 	adc.w	r3, r5, r3
 800fc5a:	f04f 0000 	mov.w	r0, #0
 800fc5e:	f04f 0100 	mov.w	r1, #0
 800fc62:	00d9      	lsls	r1, r3, #3
 800fc64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fc68:	00d0      	lsls	r0, r2, #3
 800fc6a:	4602      	mov	r2, r0
 800fc6c:	460b      	mov	r3, r1
 800fc6e:	1911      	adds	r1, r2, r4
 800fc70:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800fc74:	416b      	adcs	r3, r5
 800fc76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fc7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fc7e:	685b      	ldr	r3, [r3, #4]
 800fc80:	461a      	mov	r2, r3
 800fc82:	f04f 0300 	mov.w	r3, #0
 800fc86:	1891      	adds	r1, r2, r2
 800fc88:	6539      	str	r1, [r7, #80]	; 0x50
 800fc8a:	415b      	adcs	r3, r3
 800fc8c:	657b      	str	r3, [r7, #84]	; 0x54
 800fc8e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800fc92:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800fc96:	f7f1 f80f 	bl	8000cb8 <__aeabi_uldivmod>
 800fc9a:	4602      	mov	r2, r0
 800fc9c:	460b      	mov	r3, r1
 800fc9e:	4b4a      	ldr	r3, [pc, #296]	; (800fdc8 <UART_SetConfig+0x3dc>)
 800fca0:	fba3 2302 	umull	r2, r3, r3, r2
 800fca4:	095b      	lsrs	r3, r3, #5
 800fca6:	011e      	lsls	r6, r3, #4
 800fca8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fcac:	461c      	mov	r4, r3
 800fcae:	f04f 0500 	mov.w	r5, #0
 800fcb2:	4622      	mov	r2, r4
 800fcb4:	462b      	mov	r3, r5
 800fcb6:	1891      	adds	r1, r2, r2
 800fcb8:	64b9      	str	r1, [r7, #72]	; 0x48
 800fcba:	415b      	adcs	r3, r3
 800fcbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fcbe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800fcc2:	1912      	adds	r2, r2, r4
 800fcc4:	eb45 0303 	adc.w	r3, r5, r3
 800fcc8:	f04f 0000 	mov.w	r0, #0
 800fccc:	f04f 0100 	mov.w	r1, #0
 800fcd0:	00d9      	lsls	r1, r3, #3
 800fcd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fcd6:	00d0      	lsls	r0, r2, #3
 800fcd8:	4602      	mov	r2, r0
 800fcda:	460b      	mov	r3, r1
 800fcdc:	1911      	adds	r1, r2, r4
 800fcde:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800fce2:	416b      	adcs	r3, r5
 800fce4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fcec:	685b      	ldr	r3, [r3, #4]
 800fcee:	461a      	mov	r2, r3
 800fcf0:	f04f 0300 	mov.w	r3, #0
 800fcf4:	1891      	adds	r1, r2, r2
 800fcf6:	6439      	str	r1, [r7, #64]	; 0x40
 800fcf8:	415b      	adcs	r3, r3
 800fcfa:	647b      	str	r3, [r7, #68]	; 0x44
 800fcfc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800fd00:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800fd04:	f7f0 ffd8 	bl	8000cb8 <__aeabi_uldivmod>
 800fd08:	4602      	mov	r2, r0
 800fd0a:	460b      	mov	r3, r1
 800fd0c:	4b2e      	ldr	r3, [pc, #184]	; (800fdc8 <UART_SetConfig+0x3dc>)
 800fd0e:	fba3 1302 	umull	r1, r3, r3, r2
 800fd12:	095b      	lsrs	r3, r3, #5
 800fd14:	2164      	movs	r1, #100	; 0x64
 800fd16:	fb01 f303 	mul.w	r3, r1, r3
 800fd1a:	1ad3      	subs	r3, r2, r3
 800fd1c:	00db      	lsls	r3, r3, #3
 800fd1e:	3332      	adds	r3, #50	; 0x32
 800fd20:	4a29      	ldr	r2, [pc, #164]	; (800fdc8 <UART_SetConfig+0x3dc>)
 800fd22:	fba2 2303 	umull	r2, r3, r2, r3
 800fd26:	095b      	lsrs	r3, r3, #5
 800fd28:	005b      	lsls	r3, r3, #1
 800fd2a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fd2e:	441e      	add	r6, r3
 800fd30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fd34:	4618      	mov	r0, r3
 800fd36:	f04f 0100 	mov.w	r1, #0
 800fd3a:	4602      	mov	r2, r0
 800fd3c:	460b      	mov	r3, r1
 800fd3e:	1894      	adds	r4, r2, r2
 800fd40:	63bc      	str	r4, [r7, #56]	; 0x38
 800fd42:	415b      	adcs	r3, r3
 800fd44:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd46:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800fd4a:	1812      	adds	r2, r2, r0
 800fd4c:	eb41 0303 	adc.w	r3, r1, r3
 800fd50:	f04f 0400 	mov.w	r4, #0
 800fd54:	f04f 0500 	mov.w	r5, #0
 800fd58:	00dd      	lsls	r5, r3, #3
 800fd5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fd5e:	00d4      	lsls	r4, r2, #3
 800fd60:	4622      	mov	r2, r4
 800fd62:	462b      	mov	r3, r5
 800fd64:	1814      	adds	r4, r2, r0
 800fd66:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800fd6a:	414b      	adcs	r3, r1
 800fd6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fd70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fd74:	685b      	ldr	r3, [r3, #4]
 800fd76:	461a      	mov	r2, r3
 800fd78:	f04f 0300 	mov.w	r3, #0
 800fd7c:	1891      	adds	r1, r2, r2
 800fd7e:	6339      	str	r1, [r7, #48]	; 0x30
 800fd80:	415b      	adcs	r3, r3
 800fd82:	637b      	str	r3, [r7, #52]	; 0x34
 800fd84:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800fd88:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800fd8c:	f7f0 ff94 	bl	8000cb8 <__aeabi_uldivmod>
 800fd90:	4602      	mov	r2, r0
 800fd92:	460b      	mov	r3, r1
 800fd94:	4b0c      	ldr	r3, [pc, #48]	; (800fdc8 <UART_SetConfig+0x3dc>)
 800fd96:	fba3 1302 	umull	r1, r3, r3, r2
 800fd9a:	095b      	lsrs	r3, r3, #5
 800fd9c:	2164      	movs	r1, #100	; 0x64
 800fd9e:	fb01 f303 	mul.w	r3, r1, r3
 800fda2:	1ad3      	subs	r3, r2, r3
 800fda4:	00db      	lsls	r3, r3, #3
 800fda6:	3332      	adds	r3, #50	; 0x32
 800fda8:	4a07      	ldr	r2, [pc, #28]	; (800fdc8 <UART_SetConfig+0x3dc>)
 800fdaa:	fba2 2303 	umull	r2, r3, r2, r3
 800fdae:	095b      	lsrs	r3, r3, #5
 800fdb0:	f003 0207 	and.w	r2, r3, #7
 800fdb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	4432      	add	r2, r6
 800fdbc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800fdbe:	e1a6      	b.n	801010e <UART_SetConfig+0x722>
 800fdc0:	40011000 	.word	0x40011000
 800fdc4:	40011400 	.word	0x40011400
 800fdc8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fdcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fdd0:	681a      	ldr	r2, [r3, #0]
 800fdd2:	4bd1      	ldr	r3, [pc, #836]	; (8010118 <UART_SetConfig+0x72c>)
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d006      	beq.n	800fde6 <UART_SetConfig+0x3fa>
 800fdd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fddc:	681a      	ldr	r2, [r3, #0]
 800fdde:	4bcf      	ldr	r3, [pc, #828]	; (801011c <UART_SetConfig+0x730>)
 800fde0:	429a      	cmp	r2, r3
 800fde2:	f040 80ca 	bne.w	800ff7a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800fde6:	f7fc fa15 	bl	800c214 <HAL_RCC_GetPCLK2Freq>
 800fdea:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fdee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fdf2:	461c      	mov	r4, r3
 800fdf4:	f04f 0500 	mov.w	r5, #0
 800fdf8:	4622      	mov	r2, r4
 800fdfa:	462b      	mov	r3, r5
 800fdfc:	1891      	adds	r1, r2, r2
 800fdfe:	62b9      	str	r1, [r7, #40]	; 0x28
 800fe00:	415b      	adcs	r3, r3
 800fe02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800fe08:	1912      	adds	r2, r2, r4
 800fe0a:	eb45 0303 	adc.w	r3, r5, r3
 800fe0e:	f04f 0000 	mov.w	r0, #0
 800fe12:	f04f 0100 	mov.w	r1, #0
 800fe16:	00d9      	lsls	r1, r3, #3
 800fe18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800fe1c:	00d0      	lsls	r0, r2, #3
 800fe1e:	4602      	mov	r2, r0
 800fe20:	460b      	mov	r3, r1
 800fe22:	eb12 0a04 	adds.w	sl, r2, r4
 800fe26:	eb43 0b05 	adc.w	fp, r3, r5
 800fe2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe2e:	685b      	ldr	r3, [r3, #4]
 800fe30:	4618      	mov	r0, r3
 800fe32:	f04f 0100 	mov.w	r1, #0
 800fe36:	f04f 0200 	mov.w	r2, #0
 800fe3a:	f04f 0300 	mov.w	r3, #0
 800fe3e:	008b      	lsls	r3, r1, #2
 800fe40:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800fe44:	0082      	lsls	r2, r0, #2
 800fe46:	4650      	mov	r0, sl
 800fe48:	4659      	mov	r1, fp
 800fe4a:	f7f0 ff35 	bl	8000cb8 <__aeabi_uldivmod>
 800fe4e:	4602      	mov	r2, r0
 800fe50:	460b      	mov	r3, r1
 800fe52:	4bb3      	ldr	r3, [pc, #716]	; (8010120 <UART_SetConfig+0x734>)
 800fe54:	fba3 2302 	umull	r2, r3, r3, r2
 800fe58:	095b      	lsrs	r3, r3, #5
 800fe5a:	011e      	lsls	r6, r3, #4
 800fe5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fe60:	4618      	mov	r0, r3
 800fe62:	f04f 0100 	mov.w	r1, #0
 800fe66:	4602      	mov	r2, r0
 800fe68:	460b      	mov	r3, r1
 800fe6a:	1894      	adds	r4, r2, r2
 800fe6c:	623c      	str	r4, [r7, #32]
 800fe6e:	415b      	adcs	r3, r3
 800fe70:	627b      	str	r3, [r7, #36]	; 0x24
 800fe72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fe76:	1812      	adds	r2, r2, r0
 800fe78:	eb41 0303 	adc.w	r3, r1, r3
 800fe7c:	f04f 0400 	mov.w	r4, #0
 800fe80:	f04f 0500 	mov.w	r5, #0
 800fe84:	00dd      	lsls	r5, r3, #3
 800fe86:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fe8a:	00d4      	lsls	r4, r2, #3
 800fe8c:	4622      	mov	r2, r4
 800fe8e:	462b      	mov	r3, r5
 800fe90:	1814      	adds	r4, r2, r0
 800fe92:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800fe96:	414b      	adcs	r3, r1
 800fe98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fe9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fea0:	685b      	ldr	r3, [r3, #4]
 800fea2:	4618      	mov	r0, r3
 800fea4:	f04f 0100 	mov.w	r1, #0
 800fea8:	f04f 0200 	mov.w	r2, #0
 800feac:	f04f 0300 	mov.w	r3, #0
 800feb0:	008b      	lsls	r3, r1, #2
 800feb2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800feb6:	0082      	lsls	r2, r0, #2
 800feb8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800febc:	f7f0 fefc 	bl	8000cb8 <__aeabi_uldivmod>
 800fec0:	4602      	mov	r2, r0
 800fec2:	460b      	mov	r3, r1
 800fec4:	4b96      	ldr	r3, [pc, #600]	; (8010120 <UART_SetConfig+0x734>)
 800fec6:	fba3 1302 	umull	r1, r3, r3, r2
 800feca:	095b      	lsrs	r3, r3, #5
 800fecc:	2164      	movs	r1, #100	; 0x64
 800fece:	fb01 f303 	mul.w	r3, r1, r3
 800fed2:	1ad3      	subs	r3, r2, r3
 800fed4:	011b      	lsls	r3, r3, #4
 800fed6:	3332      	adds	r3, #50	; 0x32
 800fed8:	4a91      	ldr	r2, [pc, #580]	; (8010120 <UART_SetConfig+0x734>)
 800feda:	fba2 2303 	umull	r2, r3, r2, r3
 800fede:	095b      	lsrs	r3, r3, #5
 800fee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fee4:	441e      	add	r6, r3
 800fee6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800feea:	4618      	mov	r0, r3
 800feec:	f04f 0100 	mov.w	r1, #0
 800fef0:	4602      	mov	r2, r0
 800fef2:	460b      	mov	r3, r1
 800fef4:	1894      	adds	r4, r2, r2
 800fef6:	61bc      	str	r4, [r7, #24]
 800fef8:	415b      	adcs	r3, r3
 800fefa:	61fb      	str	r3, [r7, #28]
 800fefc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ff00:	1812      	adds	r2, r2, r0
 800ff02:	eb41 0303 	adc.w	r3, r1, r3
 800ff06:	f04f 0400 	mov.w	r4, #0
 800ff0a:	f04f 0500 	mov.w	r5, #0
 800ff0e:	00dd      	lsls	r5, r3, #3
 800ff10:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ff14:	00d4      	lsls	r4, r2, #3
 800ff16:	4622      	mov	r2, r4
 800ff18:	462b      	mov	r3, r5
 800ff1a:	1814      	adds	r4, r2, r0
 800ff1c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800ff20:	414b      	adcs	r3, r1
 800ff22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ff26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff2a:	685b      	ldr	r3, [r3, #4]
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f04f 0100 	mov.w	r1, #0
 800ff32:	f04f 0200 	mov.w	r2, #0
 800ff36:	f04f 0300 	mov.w	r3, #0
 800ff3a:	008b      	lsls	r3, r1, #2
 800ff3c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ff40:	0082      	lsls	r2, r0, #2
 800ff42:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800ff46:	f7f0 feb7 	bl	8000cb8 <__aeabi_uldivmod>
 800ff4a:	4602      	mov	r2, r0
 800ff4c:	460b      	mov	r3, r1
 800ff4e:	4b74      	ldr	r3, [pc, #464]	; (8010120 <UART_SetConfig+0x734>)
 800ff50:	fba3 1302 	umull	r1, r3, r3, r2
 800ff54:	095b      	lsrs	r3, r3, #5
 800ff56:	2164      	movs	r1, #100	; 0x64
 800ff58:	fb01 f303 	mul.w	r3, r1, r3
 800ff5c:	1ad3      	subs	r3, r2, r3
 800ff5e:	011b      	lsls	r3, r3, #4
 800ff60:	3332      	adds	r3, #50	; 0x32
 800ff62:	4a6f      	ldr	r2, [pc, #444]	; (8010120 <UART_SetConfig+0x734>)
 800ff64:	fba2 2303 	umull	r2, r3, r2, r3
 800ff68:	095b      	lsrs	r3, r3, #5
 800ff6a:	f003 020f 	and.w	r2, r3, #15
 800ff6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	4432      	add	r2, r6
 800ff76:	609a      	str	r2, [r3, #8]
 800ff78:	e0c9      	b.n	801010e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ff7a:	f7fc f937 	bl	800c1ec <HAL_RCC_GetPCLK1Freq>
 800ff7e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ff82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ff86:	461c      	mov	r4, r3
 800ff88:	f04f 0500 	mov.w	r5, #0
 800ff8c:	4622      	mov	r2, r4
 800ff8e:	462b      	mov	r3, r5
 800ff90:	1891      	adds	r1, r2, r2
 800ff92:	6139      	str	r1, [r7, #16]
 800ff94:	415b      	adcs	r3, r3
 800ff96:	617b      	str	r3, [r7, #20]
 800ff98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ff9c:	1912      	adds	r2, r2, r4
 800ff9e:	eb45 0303 	adc.w	r3, r5, r3
 800ffa2:	f04f 0000 	mov.w	r0, #0
 800ffa6:	f04f 0100 	mov.w	r1, #0
 800ffaa:	00d9      	lsls	r1, r3, #3
 800ffac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ffb0:	00d0      	lsls	r0, r2, #3
 800ffb2:	4602      	mov	r2, r0
 800ffb4:	460b      	mov	r3, r1
 800ffb6:	eb12 0804 	adds.w	r8, r2, r4
 800ffba:	eb43 0905 	adc.w	r9, r3, r5
 800ffbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ffc2:	685b      	ldr	r3, [r3, #4]
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f04f 0100 	mov.w	r1, #0
 800ffca:	f04f 0200 	mov.w	r2, #0
 800ffce:	f04f 0300 	mov.w	r3, #0
 800ffd2:	008b      	lsls	r3, r1, #2
 800ffd4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ffd8:	0082      	lsls	r2, r0, #2
 800ffda:	4640      	mov	r0, r8
 800ffdc:	4649      	mov	r1, r9
 800ffde:	f7f0 fe6b 	bl	8000cb8 <__aeabi_uldivmod>
 800ffe2:	4602      	mov	r2, r0
 800ffe4:	460b      	mov	r3, r1
 800ffe6:	4b4e      	ldr	r3, [pc, #312]	; (8010120 <UART_SetConfig+0x734>)
 800ffe8:	fba3 2302 	umull	r2, r3, r3, r2
 800ffec:	095b      	lsrs	r3, r3, #5
 800ffee:	011e      	lsls	r6, r3, #4
 800fff0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fff4:	4618      	mov	r0, r3
 800fff6:	f04f 0100 	mov.w	r1, #0
 800fffa:	4602      	mov	r2, r0
 800fffc:	460b      	mov	r3, r1
 800fffe:	1894      	adds	r4, r2, r2
 8010000:	60bc      	str	r4, [r7, #8]
 8010002:	415b      	adcs	r3, r3
 8010004:	60fb      	str	r3, [r7, #12]
 8010006:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801000a:	1812      	adds	r2, r2, r0
 801000c:	eb41 0303 	adc.w	r3, r1, r3
 8010010:	f04f 0400 	mov.w	r4, #0
 8010014:	f04f 0500 	mov.w	r5, #0
 8010018:	00dd      	lsls	r5, r3, #3
 801001a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801001e:	00d4      	lsls	r4, r2, #3
 8010020:	4622      	mov	r2, r4
 8010022:	462b      	mov	r3, r5
 8010024:	1814      	adds	r4, r2, r0
 8010026:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 801002a:	414b      	adcs	r3, r1
 801002c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010034:	685b      	ldr	r3, [r3, #4]
 8010036:	4618      	mov	r0, r3
 8010038:	f04f 0100 	mov.w	r1, #0
 801003c:	f04f 0200 	mov.w	r2, #0
 8010040:	f04f 0300 	mov.w	r3, #0
 8010044:	008b      	lsls	r3, r1, #2
 8010046:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801004a:	0082      	lsls	r2, r0, #2
 801004c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8010050:	f7f0 fe32 	bl	8000cb8 <__aeabi_uldivmod>
 8010054:	4602      	mov	r2, r0
 8010056:	460b      	mov	r3, r1
 8010058:	4b31      	ldr	r3, [pc, #196]	; (8010120 <UART_SetConfig+0x734>)
 801005a:	fba3 1302 	umull	r1, r3, r3, r2
 801005e:	095b      	lsrs	r3, r3, #5
 8010060:	2164      	movs	r1, #100	; 0x64
 8010062:	fb01 f303 	mul.w	r3, r1, r3
 8010066:	1ad3      	subs	r3, r2, r3
 8010068:	011b      	lsls	r3, r3, #4
 801006a:	3332      	adds	r3, #50	; 0x32
 801006c:	4a2c      	ldr	r2, [pc, #176]	; (8010120 <UART_SetConfig+0x734>)
 801006e:	fba2 2303 	umull	r2, r3, r2, r3
 8010072:	095b      	lsrs	r3, r3, #5
 8010074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010078:	441e      	add	r6, r3
 801007a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801007e:	4618      	mov	r0, r3
 8010080:	f04f 0100 	mov.w	r1, #0
 8010084:	4602      	mov	r2, r0
 8010086:	460b      	mov	r3, r1
 8010088:	1894      	adds	r4, r2, r2
 801008a:	603c      	str	r4, [r7, #0]
 801008c:	415b      	adcs	r3, r3
 801008e:	607b      	str	r3, [r7, #4]
 8010090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010094:	1812      	adds	r2, r2, r0
 8010096:	eb41 0303 	adc.w	r3, r1, r3
 801009a:	f04f 0400 	mov.w	r4, #0
 801009e:	f04f 0500 	mov.w	r5, #0
 80100a2:	00dd      	lsls	r5, r3, #3
 80100a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80100a8:	00d4      	lsls	r4, r2, #3
 80100aa:	4622      	mov	r2, r4
 80100ac:	462b      	mov	r3, r5
 80100ae:	1814      	adds	r4, r2, r0
 80100b0:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80100b4:	414b      	adcs	r3, r1
 80100b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80100ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	4618      	mov	r0, r3
 80100c2:	f04f 0100 	mov.w	r1, #0
 80100c6:	f04f 0200 	mov.w	r2, #0
 80100ca:	f04f 0300 	mov.w	r3, #0
 80100ce:	008b      	lsls	r3, r1, #2
 80100d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80100d4:	0082      	lsls	r2, r0, #2
 80100d6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80100da:	f7f0 fded 	bl	8000cb8 <__aeabi_uldivmod>
 80100de:	4602      	mov	r2, r0
 80100e0:	460b      	mov	r3, r1
 80100e2:	4b0f      	ldr	r3, [pc, #60]	; (8010120 <UART_SetConfig+0x734>)
 80100e4:	fba3 1302 	umull	r1, r3, r3, r2
 80100e8:	095b      	lsrs	r3, r3, #5
 80100ea:	2164      	movs	r1, #100	; 0x64
 80100ec:	fb01 f303 	mul.w	r3, r1, r3
 80100f0:	1ad3      	subs	r3, r2, r3
 80100f2:	011b      	lsls	r3, r3, #4
 80100f4:	3332      	adds	r3, #50	; 0x32
 80100f6:	4a0a      	ldr	r2, [pc, #40]	; (8010120 <UART_SetConfig+0x734>)
 80100f8:	fba2 2303 	umull	r2, r3, r2, r3
 80100fc:	095b      	lsrs	r3, r3, #5
 80100fe:	f003 020f 	and.w	r2, r3, #15
 8010102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	4432      	add	r2, r6
 801010a:	609a      	str	r2, [r3, #8]
}
 801010c:	e7ff      	b.n	801010e <UART_SetConfig+0x722>
 801010e:	bf00      	nop
 8010110:	37f4      	adds	r7, #244	; 0xf4
 8010112:	46bd      	mov	sp, r7
 8010114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010118:	40011000 	.word	0x40011000
 801011c:	40011400 	.word	0x40011400
 8010120:	51eb851f 	.word	0x51eb851f

08010124 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8010124:	b084      	sub	sp, #16
 8010126:	b480      	push	{r7}
 8010128:	b085      	sub	sp, #20
 801012a:	af00      	add	r7, sp, #0
 801012c:	6078      	str	r0, [r7, #4]
 801012e:	f107 001c 	add.w	r0, r7, #28
 8010132:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010136:	2300      	movs	r3, #0
 8010138:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801013a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 801013c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801013e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8010140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8010142:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010144:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8010146:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 801014a:	431a      	orrs	r2, r3
             Init.ClockDiv
 801014c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 801014e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010150:	68fa      	ldr	r2, [r7, #12]
 8010152:	4313      	orrs	r3, r2
 8010154:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	685b      	ldr	r3, [r3, #4]
 801015a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 801015e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010162:	68fa      	ldr	r2, [r7, #12]
 8010164:	431a      	orrs	r2, r3
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801016a:	2300      	movs	r3, #0
}
 801016c:	4618      	mov	r0, r3
 801016e:	3714      	adds	r7, #20
 8010170:	46bd      	mov	sp, r7
 8010172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010176:	b004      	add	sp, #16
 8010178:	4770      	bx	lr

0801017a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 801017a:	b480      	push	{r7}
 801017c:	b083      	sub	sp, #12
 801017e:	af00      	add	r7, sp, #0
 8010180:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010188:	4618      	mov	r0, r3
 801018a:	370c      	adds	r7, #12
 801018c:	46bd      	mov	sp, r7
 801018e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010192:	4770      	bx	lr

08010194 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8010194:	b480      	push	{r7}
 8010196:	b083      	sub	sp, #12
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	681a      	ldr	r2, [r3, #0]
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80101a8:	2300      	movs	r3, #0
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	370c      	adds	r7, #12
 80101ae:	46bd      	mov	sp, r7
 80101b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b4:	4770      	bx	lr

080101b6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80101b6:	b580      	push	{r7, lr}
 80101b8:	b082      	sub	sp, #8
 80101ba:	af00      	add	r7, sp, #0
 80101bc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	2203      	movs	r2, #3
 80101c2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80101c4:	2002      	movs	r0, #2
 80101c6:	f7f9 fba3 	bl	8009910 <HAL_Delay>
  
  return HAL_OK;
 80101ca:	2300      	movs	r3, #0
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	3708      	adds	r7, #8
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}

080101d4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80101d4:	b480      	push	{r7}
 80101d6:	b083      	sub	sp, #12
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	f003 0303 	and.w	r3, r3, #3
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	370c      	adds	r7, #12
 80101e8:	46bd      	mov	sp, r7
 80101ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ee:	4770      	bx	lr

080101f0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80101f0:	b480      	push	{r7}
 80101f2:	b085      	sub	sp, #20
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
 80101f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80101fa:	2300      	movs	r3, #0
 80101fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	681a      	ldr	r2, [r3, #0]
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801020e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010214:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801021a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801021c:	68fa      	ldr	r2, [r7, #12]
 801021e:	4313      	orrs	r3, r2
 8010220:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	68db      	ldr	r3, [r3, #12]
 8010226:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801022a:	f023 030f 	bic.w	r3, r3, #15
 801022e:	68fa      	ldr	r2, [r7, #12]
 8010230:	431a      	orrs	r2, r3
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010236:	2300      	movs	r3, #0
}
 8010238:	4618      	mov	r0, r3
 801023a:	3714      	adds	r7, #20
 801023c:	46bd      	mov	sp, r7
 801023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010242:	4770      	bx	lr

08010244 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8010244:	b480      	push	{r7}
 8010246:	b083      	sub	sp, #12
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	691b      	ldr	r3, [r3, #16]
 8010250:	b2db      	uxtb	r3, r3
}
 8010252:	4618      	mov	r0, r3
 8010254:	370c      	adds	r7, #12
 8010256:	46bd      	mov	sp, r7
 8010258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025c:	4770      	bx	lr

0801025e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 801025e:	b480      	push	{r7}
 8010260:	b085      	sub	sp, #20
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
 8010266:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	3314      	adds	r3, #20
 801026c:	461a      	mov	r2, r3
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	4413      	add	r3, r2
 8010272:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	681b      	ldr	r3, [r3, #0]
}  
 8010278:	4618      	mov	r0, r3
 801027a:	3714      	adds	r7, #20
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr

08010284 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010284:	b480      	push	{r7}
 8010286:	b085      	sub	sp, #20
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801028e:	2300      	movs	r3, #0
 8010290:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	681a      	ldr	r2, [r3, #0]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	685a      	ldr	r2, [r3, #4]
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80102aa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80102b0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80102b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80102b8:	68fa      	ldr	r2, [r7, #12]
 80102ba:	4313      	orrs	r3, r2
 80102bc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102c2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	431a      	orrs	r2, r3
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80102ce:	2300      	movs	r3, #0

}
 80102d0:	4618      	mov	r0, r3
 80102d2:	3714      	adds	r7, #20
 80102d4:	46bd      	mov	sp, r7
 80102d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102da:	4770      	bx	lr

080102dc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b088      	sub	sp, #32
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80102ea:	2310      	movs	r3, #16
 80102ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80102ee:	2340      	movs	r3, #64	; 0x40
 80102f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80102f2:	2300      	movs	r3, #0
 80102f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80102f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80102fc:	f107 0308 	add.w	r3, r7, #8
 8010300:	4619      	mov	r1, r3
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f7ff ff74 	bl	80101f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8010308:	f241 3288 	movw	r2, #5000	; 0x1388
 801030c:	2110      	movs	r1, #16
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f000 fa40 	bl	8010794 <SDMMC_GetCmdResp1>
 8010314:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010316:	69fb      	ldr	r3, [r7, #28]
}
 8010318:	4618      	mov	r0, r3
 801031a:	3720      	adds	r7, #32
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}

08010320 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b088      	sub	sp, #32
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
 8010328:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801032e:	2311      	movs	r3, #17
 8010330:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010332:	2340      	movs	r3, #64	; 0x40
 8010334:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010336:	2300      	movs	r3, #0
 8010338:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801033a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801033e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010340:	f107 0308 	add.w	r3, r7, #8
 8010344:	4619      	mov	r1, r3
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f7ff ff52 	bl	80101f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 801034c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010350:	2111      	movs	r1, #17
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f000 fa1e 	bl	8010794 <SDMMC_GetCmdResp1>
 8010358:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801035a:	69fb      	ldr	r3, [r7, #28]
}
 801035c:	4618      	mov	r0, r3
 801035e:	3720      	adds	r7, #32
 8010360:	46bd      	mov	sp, r7
 8010362:	bd80      	pop	{r7, pc}

08010364 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b088      	sub	sp, #32
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801036e:	683b      	ldr	r3, [r7, #0]
 8010370:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010372:	2312      	movs	r3, #18
 8010374:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010376:	2340      	movs	r3, #64	; 0x40
 8010378:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801037a:	2300      	movs	r3, #0
 801037c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801037e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010382:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010384:	f107 0308 	add.w	r3, r7, #8
 8010388:	4619      	mov	r1, r3
 801038a:	6878      	ldr	r0, [r7, #4]
 801038c:	f7ff ff30 	bl	80101f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010390:	f241 3288 	movw	r2, #5000	; 0x1388
 8010394:	2112      	movs	r1, #18
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f000 f9fc 	bl	8010794 <SDMMC_GetCmdResp1>
 801039c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801039e:	69fb      	ldr	r3, [r7, #28]
}
 80103a0:	4618      	mov	r0, r3
 80103a2:	3720      	adds	r7, #32
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}

080103a8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b088      	sub	sp, #32
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80103b6:	2318      	movs	r3, #24
 80103b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80103ba:	2340      	movs	r3, #64	; 0x40
 80103bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80103be:	2300      	movs	r3, #0
 80103c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80103c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80103c8:	f107 0308 	add.w	r3, r7, #8
 80103cc:	4619      	mov	r1, r3
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	f7ff ff0e 	bl	80101f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80103d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80103d8:	2118      	movs	r1, #24
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f000 f9da 	bl	8010794 <SDMMC_GetCmdResp1>
 80103e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103e2:	69fb      	ldr	r3, [r7, #28]
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3720      	adds	r7, #32
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}

080103ec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b088      	sub	sp, #32
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80103fa:	2319      	movs	r3, #25
 80103fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80103fe:	2340      	movs	r3, #64	; 0x40
 8010400:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010402:	2300      	movs	r3, #0
 8010404:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801040a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801040c:	f107 0308 	add.w	r3, r7, #8
 8010410:	4619      	mov	r1, r3
 8010412:	6878      	ldr	r0, [r7, #4]
 8010414:	f7ff feec 	bl	80101f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010418:	f241 3288 	movw	r2, #5000	; 0x1388
 801041c:	2119      	movs	r1, #25
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f000 f9b8 	bl	8010794 <SDMMC_GetCmdResp1>
 8010424:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010426:	69fb      	ldr	r3, [r7, #28]
}
 8010428:	4618      	mov	r0, r3
 801042a:	3720      	adds	r7, #32
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}

08010430 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b088      	sub	sp, #32
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010438:	2300      	movs	r3, #0
 801043a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801043c:	230c      	movs	r3, #12
 801043e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010440:	2340      	movs	r3, #64	; 0x40
 8010442:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010444:	2300      	movs	r3, #0
 8010446:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801044c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801044e:	f107 0308 	add.w	r3, r7, #8
 8010452:	4619      	mov	r1, r3
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f7ff fecb 	bl	80101f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 801045a:	4a05      	ldr	r2, [pc, #20]	; (8010470 <SDMMC_CmdStopTransfer+0x40>)
 801045c:	210c      	movs	r1, #12
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f000 f998 	bl	8010794 <SDMMC_GetCmdResp1>
 8010464:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010466:	69fb      	ldr	r3, [r7, #28]
}
 8010468:	4618      	mov	r0, r3
 801046a:	3720      	adds	r7, #32
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}
 8010470:	05f5e100 	.word	0x05f5e100

08010474 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b08a      	sub	sp, #40	; 0x28
 8010478:	af00      	add	r7, sp, #0
 801047a:	60f8      	str	r0, [r7, #12]
 801047c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010484:	2307      	movs	r3, #7
 8010486:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010488:	2340      	movs	r3, #64	; 0x40
 801048a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801048c:	2300      	movs	r3, #0
 801048e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010494:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010496:	f107 0310 	add.w	r3, r7, #16
 801049a:	4619      	mov	r1, r3
 801049c:	68f8      	ldr	r0, [r7, #12]
 801049e:	f7ff fea7 	bl	80101f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80104a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80104a6:	2107      	movs	r1, #7
 80104a8:	68f8      	ldr	r0, [r7, #12]
 80104aa:	f000 f973 	bl	8010794 <SDMMC_GetCmdResp1>
 80104ae:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80104b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3728      	adds	r7, #40	; 0x28
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}

080104ba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80104ba:	b580      	push	{r7, lr}
 80104bc:	b088      	sub	sp, #32
 80104be:	af00      	add	r7, sp, #0
 80104c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80104c2:	2300      	movs	r3, #0
 80104c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80104c6:	2300      	movs	r3, #0
 80104c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80104ca:	2300      	movs	r3, #0
 80104cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80104ce:	2300      	movs	r3, #0
 80104d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80104d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80104d8:	f107 0308 	add.w	r3, r7, #8
 80104dc:	4619      	mov	r1, r3
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f7ff fe86 	bl	80101f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80104e4:	6878      	ldr	r0, [r7, #4]
 80104e6:	f000 f92d 	bl	8010744 <SDMMC_GetCmdError>
 80104ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104ec:	69fb      	ldr	r3, [r7, #28]
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3720      	adds	r7, #32
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}

080104f6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80104f6:	b580      	push	{r7, lr}
 80104f8:	b088      	sub	sp, #32
 80104fa:	af00      	add	r7, sp, #0
 80104fc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80104fe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010502:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010504:	2308      	movs	r3, #8
 8010506:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010508:	2340      	movs	r3, #64	; 0x40
 801050a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801050c:	2300      	movs	r3, #0
 801050e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010514:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010516:	f107 0308 	add.w	r3, r7, #8
 801051a:	4619      	mov	r1, r3
 801051c:	6878      	ldr	r0, [r7, #4]
 801051e:	f7ff fe67 	bl	80101f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	f000 fb16 	bl	8010b54 <SDMMC_GetCmdResp7>
 8010528:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801052a:	69fb      	ldr	r3, [r7, #28]
}
 801052c:	4618      	mov	r0, r3
 801052e:	3720      	adds	r7, #32
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}

08010534 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b088      	sub	sp, #32
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
 801053c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010542:	2337      	movs	r3, #55	; 0x37
 8010544:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010546:	2340      	movs	r3, #64	; 0x40
 8010548:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801054a:	2300      	movs	r3, #0
 801054c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801054e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010552:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010554:	f107 0308 	add.w	r3, r7, #8
 8010558:	4619      	mov	r1, r3
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	f7ff fe48 	bl	80101f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010560:	f241 3288 	movw	r2, #5000	; 0x1388
 8010564:	2137      	movs	r1, #55	; 0x37
 8010566:	6878      	ldr	r0, [r7, #4]
 8010568:	f000 f914 	bl	8010794 <SDMMC_GetCmdResp1>
 801056c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801056e:	69fb      	ldr	r3, [r7, #28]
}
 8010570:	4618      	mov	r0, r3
 8010572:	3720      	adds	r7, #32
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}

08010578 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b088      	sub	sp, #32
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801058c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801058e:	2329      	movs	r3, #41	; 0x29
 8010590:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010592:	2340      	movs	r3, #64	; 0x40
 8010594:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010596:	2300      	movs	r3, #0
 8010598:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801059a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801059e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80105a0:	f107 0308 	add.w	r3, r7, #8
 80105a4:	4619      	mov	r1, r3
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f7ff fe22 	bl	80101f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f000 fa23 	bl	80109f8 <SDMMC_GetCmdResp3>
 80105b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105b4:	69fb      	ldr	r3, [r7, #28]
}
 80105b6:	4618      	mov	r0, r3
 80105b8:	3720      	adds	r7, #32
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}

080105be <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80105be:	b580      	push	{r7, lr}
 80105c0:	b088      	sub	sp, #32
 80105c2:	af00      	add	r7, sp, #0
 80105c4:	6078      	str	r0, [r7, #4]
 80105c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80105cc:	2306      	movs	r3, #6
 80105ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80105d0:	2340      	movs	r3, #64	; 0x40
 80105d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80105d4:	2300      	movs	r3, #0
 80105d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80105d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80105de:	f107 0308 	add.w	r3, r7, #8
 80105e2:	4619      	mov	r1, r3
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	f7ff fe03 	bl	80101f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80105ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80105ee:	2106      	movs	r1, #6
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	f000 f8cf 	bl	8010794 <SDMMC_GetCmdResp1>
 80105f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105f8:	69fb      	ldr	r3, [r7, #28]
}
 80105fa:	4618      	mov	r0, r3
 80105fc:	3720      	adds	r7, #32
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd80      	pop	{r7, pc}

08010602 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8010602:	b580      	push	{r7, lr}
 8010604:	b088      	sub	sp, #32
 8010606:	af00      	add	r7, sp, #0
 8010608:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801060a:	2300      	movs	r3, #0
 801060c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801060e:	2333      	movs	r3, #51	; 0x33
 8010610:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010612:	2340      	movs	r3, #64	; 0x40
 8010614:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010616:	2300      	movs	r3, #0
 8010618:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801061a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801061e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010620:	f107 0308 	add.w	r3, r7, #8
 8010624:	4619      	mov	r1, r3
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f7ff fde2 	bl	80101f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 801062c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010630:	2133      	movs	r1, #51	; 0x33
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f000 f8ae 	bl	8010794 <SDMMC_GetCmdResp1>
 8010638:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801063a:	69fb      	ldr	r3, [r7, #28]
}
 801063c:	4618      	mov	r0, r3
 801063e:	3720      	adds	r7, #32
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}

08010644 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b088      	sub	sp, #32
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801064c:	2300      	movs	r3, #0
 801064e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010650:	2302      	movs	r3, #2
 8010652:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010654:	23c0      	movs	r3, #192	; 0xc0
 8010656:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010658:	2300      	movs	r3, #0
 801065a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801065c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010660:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010662:	f107 0308 	add.w	r3, r7, #8
 8010666:	4619      	mov	r1, r3
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f7ff fdc1 	bl	80101f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 801066e:	6878      	ldr	r0, [r7, #4]
 8010670:	f000 f97c 	bl	801096c <SDMMC_GetCmdResp2>
 8010674:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010676:	69fb      	ldr	r3, [r7, #28]
}
 8010678:	4618      	mov	r0, r3
 801067a:	3720      	adds	r7, #32
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}

08010680 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b088      	sub	sp, #32
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801068e:	2309      	movs	r3, #9
 8010690:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010692:	23c0      	movs	r3, #192	; 0xc0
 8010694:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010696:	2300      	movs	r3, #0
 8010698:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801069a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801069e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80106a0:	f107 0308 	add.w	r3, r7, #8
 80106a4:	4619      	mov	r1, r3
 80106a6:	6878      	ldr	r0, [r7, #4]
 80106a8:	f7ff fda2 	bl	80101f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f000 f95d 	bl	801096c <SDMMC_GetCmdResp2>
 80106b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106b4:	69fb      	ldr	r3, [r7, #28]
}
 80106b6:	4618      	mov	r0, r3
 80106b8:	3720      	adds	r7, #32
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd80      	pop	{r7, pc}

080106be <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80106be:	b580      	push	{r7, lr}
 80106c0:	b088      	sub	sp, #32
 80106c2:	af00      	add	r7, sp, #0
 80106c4:	6078      	str	r0, [r7, #4]
 80106c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80106c8:	2300      	movs	r3, #0
 80106ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80106cc:	2303      	movs	r3, #3
 80106ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80106d0:	2340      	movs	r3, #64	; 0x40
 80106d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106d4:	2300      	movs	r3, #0
 80106d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80106de:	f107 0308 	add.w	r3, r7, #8
 80106e2:	4619      	mov	r1, r3
 80106e4:	6878      	ldr	r0, [r7, #4]
 80106e6:	f7ff fd83 	bl	80101f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80106ea:	683a      	ldr	r2, [r7, #0]
 80106ec:	2103      	movs	r1, #3
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f000 f9bc 	bl	8010a6c <SDMMC_GetCmdResp6>
 80106f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106f6:	69fb      	ldr	r3, [r7, #28]
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3720      	adds	r7, #32
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}

08010700 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b088      	sub	sp, #32
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
 8010708:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801070e:	230d      	movs	r3, #13
 8010710:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010712:	2340      	movs	r3, #64	; 0x40
 8010714:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010716:	2300      	movs	r3, #0
 8010718:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801071a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801071e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010720:	f107 0308 	add.w	r3, r7, #8
 8010724:	4619      	mov	r1, r3
 8010726:	6878      	ldr	r0, [r7, #4]
 8010728:	f7ff fd62 	bl	80101f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 801072c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010730:	210d      	movs	r1, #13
 8010732:	6878      	ldr	r0, [r7, #4]
 8010734:	f000 f82e 	bl	8010794 <SDMMC_GetCmdResp1>
 8010738:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801073a:	69fb      	ldr	r3, [r7, #28]
}
 801073c:	4618      	mov	r0, r3
 801073e:	3720      	adds	r7, #32
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}

08010744 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010744:	b490      	push	{r4, r7}
 8010746:	b082      	sub	sp, #8
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801074c:	4b0f      	ldr	r3, [pc, #60]	; (801078c <SDMMC_GetCmdError+0x48>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	4a0f      	ldr	r2, [pc, #60]	; (8010790 <SDMMC_GetCmdError+0x4c>)
 8010752:	fba2 2303 	umull	r2, r3, r2, r3
 8010756:	0a5b      	lsrs	r3, r3, #9
 8010758:	f241 3288 	movw	r2, #5000	; 0x1388
 801075c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010760:	4623      	mov	r3, r4
 8010762:	1e5c      	subs	r4, r3, #1
 8010764:	2b00      	cmp	r3, #0
 8010766:	d102      	bne.n	801076e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010768:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801076c:	e009      	b.n	8010782 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010776:	2b00      	cmp	r3, #0
 8010778:	d0f2      	beq.n	8010760 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	22c5      	movs	r2, #197	; 0xc5
 801077e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010780:	2300      	movs	r3, #0
}
 8010782:	4618      	mov	r0, r3
 8010784:	3708      	adds	r7, #8
 8010786:	46bd      	mov	sp, r7
 8010788:	bc90      	pop	{r4, r7}
 801078a:	4770      	bx	lr
 801078c:	20000000 	.word	0x20000000
 8010790:	10624dd3 	.word	0x10624dd3

08010794 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010794:	b590      	push	{r4, r7, lr}
 8010796:	b087      	sub	sp, #28
 8010798:	af00      	add	r7, sp, #0
 801079a:	60f8      	str	r0, [r7, #12]
 801079c:	460b      	mov	r3, r1
 801079e:	607a      	str	r2, [r7, #4]
 80107a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80107a2:	4b6f      	ldr	r3, [pc, #444]	; (8010960 <SDMMC_GetCmdResp1+0x1cc>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	4a6f      	ldr	r2, [pc, #444]	; (8010964 <SDMMC_GetCmdResp1+0x1d0>)
 80107a8:	fba2 2303 	umull	r2, r3, r2, r3
 80107ac:	0a5b      	lsrs	r3, r3, #9
 80107ae:	687a      	ldr	r2, [r7, #4]
 80107b0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80107b4:	4623      	mov	r3, r4
 80107b6:	1e5c      	subs	r4, r3, #1
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d102      	bne.n	80107c2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80107bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80107c0:	e0c9      	b.n	8010956 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107c6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80107c8:	697b      	ldr	r3, [r7, #20]
 80107ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d0f0      	beq.n	80107b4 <SDMMC_GetCmdResp1+0x20>
 80107d2:	697b      	ldr	r3, [r7, #20]
 80107d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d1eb      	bne.n	80107b4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107e0:	f003 0304 	and.w	r3, r3, #4
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d004      	beq.n	80107f2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	2204      	movs	r2, #4
 80107ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80107ee:	2304      	movs	r3, #4
 80107f0:	e0b1      	b.n	8010956 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107f6:	f003 0301 	and.w	r3, r3, #1
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d004      	beq.n	8010808 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	2201      	movs	r2, #1
 8010802:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010804:	2301      	movs	r3, #1
 8010806:	e0a6      	b.n	8010956 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	22c5      	movs	r2, #197	; 0xc5
 801080c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801080e:	68f8      	ldr	r0, [r7, #12]
 8010810:	f7ff fd18 	bl	8010244 <SDIO_GetCommandResponse>
 8010814:	4603      	mov	r3, r0
 8010816:	461a      	mov	r2, r3
 8010818:	7afb      	ldrb	r3, [r7, #11]
 801081a:	4293      	cmp	r3, r2
 801081c:	d001      	beq.n	8010822 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801081e:	2301      	movs	r3, #1
 8010820:	e099      	b.n	8010956 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010822:	2100      	movs	r1, #0
 8010824:	68f8      	ldr	r0, [r7, #12]
 8010826:	f7ff fd1a 	bl	801025e <SDIO_GetResponse>
 801082a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801082c:	693a      	ldr	r2, [r7, #16]
 801082e:	4b4e      	ldr	r3, [pc, #312]	; (8010968 <SDMMC_GetCmdResp1+0x1d4>)
 8010830:	4013      	ands	r3, r2
 8010832:	2b00      	cmp	r3, #0
 8010834:	d101      	bne.n	801083a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010836:	2300      	movs	r3, #0
 8010838:	e08d      	b.n	8010956 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801083a:	693b      	ldr	r3, [r7, #16]
 801083c:	2b00      	cmp	r3, #0
 801083e:	da02      	bge.n	8010846 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010840:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010844:	e087      	b.n	8010956 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010846:	693b      	ldr	r3, [r7, #16]
 8010848:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801084c:	2b00      	cmp	r3, #0
 801084e:	d001      	beq.n	8010854 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010850:	2340      	movs	r3, #64	; 0x40
 8010852:	e080      	b.n	8010956 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010854:	693b      	ldr	r3, [r7, #16]
 8010856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801085a:	2b00      	cmp	r3, #0
 801085c:	d001      	beq.n	8010862 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801085e:	2380      	movs	r3, #128	; 0x80
 8010860:	e079      	b.n	8010956 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010862:	693b      	ldr	r3, [r7, #16]
 8010864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010868:	2b00      	cmp	r3, #0
 801086a:	d002      	beq.n	8010872 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801086c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010870:	e071      	b.n	8010956 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010872:	693b      	ldr	r3, [r7, #16]
 8010874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010878:	2b00      	cmp	r3, #0
 801087a:	d002      	beq.n	8010882 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801087c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010880:	e069      	b.n	8010956 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010888:	2b00      	cmp	r3, #0
 801088a:	d002      	beq.n	8010892 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801088c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010890:	e061      	b.n	8010956 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010898:	2b00      	cmp	r3, #0
 801089a:	d002      	beq.n	80108a2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801089c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80108a0:	e059      	b.n	8010956 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80108a2:	693b      	ldr	r3, [r7, #16]
 80108a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d002      	beq.n	80108b2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80108ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80108b0:	e051      	b.n	8010956 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80108b2:	693b      	ldr	r3, [r7, #16]
 80108b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d002      	beq.n	80108c2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80108bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80108c0:	e049      	b.n	8010956 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80108c2:	693b      	ldr	r3, [r7, #16]
 80108c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d002      	beq.n	80108d2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80108cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80108d0:	e041      	b.n	8010956 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d002      	beq.n	80108e2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80108dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80108e0:	e039      	b.n	8010956 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80108e2:	693b      	ldr	r3, [r7, #16]
 80108e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d002      	beq.n	80108f2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80108ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80108f0:	e031      	b.n	8010956 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d002      	beq.n	8010902 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80108fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010900:	e029      	b.n	8010956 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010902:	693b      	ldr	r3, [r7, #16]
 8010904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010908:	2b00      	cmp	r3, #0
 801090a:	d002      	beq.n	8010912 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801090c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010910:	e021      	b.n	8010956 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010912:	693b      	ldr	r3, [r7, #16]
 8010914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010918:	2b00      	cmp	r3, #0
 801091a:	d002      	beq.n	8010922 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801091c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010920:	e019      	b.n	8010956 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010922:	693b      	ldr	r3, [r7, #16]
 8010924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010928:	2b00      	cmp	r3, #0
 801092a:	d002      	beq.n	8010932 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801092c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010930:	e011      	b.n	8010956 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010932:	693b      	ldr	r3, [r7, #16]
 8010934:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010938:	2b00      	cmp	r3, #0
 801093a:	d002      	beq.n	8010942 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801093c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010940:	e009      	b.n	8010956 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010942:	693b      	ldr	r3, [r7, #16]
 8010944:	f003 0308 	and.w	r3, r3, #8
 8010948:	2b00      	cmp	r3, #0
 801094a:	d002      	beq.n	8010952 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801094c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010950:	e001      	b.n	8010956 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010952:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010956:	4618      	mov	r0, r3
 8010958:	371c      	adds	r7, #28
 801095a:	46bd      	mov	sp, r7
 801095c:	bd90      	pop	{r4, r7, pc}
 801095e:	bf00      	nop
 8010960:	20000000 	.word	0x20000000
 8010964:	10624dd3 	.word	0x10624dd3
 8010968:	fdffe008 	.word	0xfdffe008

0801096c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 801096c:	b490      	push	{r4, r7}
 801096e:	b084      	sub	sp, #16
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010974:	4b1e      	ldr	r3, [pc, #120]	; (80109f0 <SDMMC_GetCmdResp2+0x84>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	4a1e      	ldr	r2, [pc, #120]	; (80109f4 <SDMMC_GetCmdResp2+0x88>)
 801097a:	fba2 2303 	umull	r2, r3, r2, r3
 801097e:	0a5b      	lsrs	r3, r3, #9
 8010980:	f241 3288 	movw	r2, #5000	; 0x1388
 8010984:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010988:	4623      	mov	r3, r4
 801098a:	1e5c      	subs	r4, r3, #1
 801098c:	2b00      	cmp	r3, #0
 801098e:	d102      	bne.n	8010996 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010990:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010994:	e026      	b.n	80109e4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801099a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d0f0      	beq.n	8010988 <SDMMC_GetCmdResp2+0x1c>
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d1eb      	bne.n	8010988 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109b4:	f003 0304 	and.w	r3, r3, #4
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d004      	beq.n	80109c6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2204      	movs	r2, #4
 80109c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80109c2:	2304      	movs	r3, #4
 80109c4:	e00e      	b.n	80109e4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109ca:	f003 0301 	and.w	r3, r3, #1
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d004      	beq.n	80109dc <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2201      	movs	r2, #1
 80109d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80109d8:	2301      	movs	r3, #1
 80109da:	e003      	b.n	80109e4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	22c5      	movs	r2, #197	; 0xc5
 80109e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80109e2:	2300      	movs	r3, #0
}
 80109e4:	4618      	mov	r0, r3
 80109e6:	3710      	adds	r7, #16
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bc90      	pop	{r4, r7}
 80109ec:	4770      	bx	lr
 80109ee:	bf00      	nop
 80109f0:	20000000 	.word	0x20000000
 80109f4:	10624dd3 	.word	0x10624dd3

080109f8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80109f8:	b490      	push	{r4, r7}
 80109fa:	b084      	sub	sp, #16
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010a00:	4b18      	ldr	r3, [pc, #96]	; (8010a64 <SDMMC_GetCmdResp3+0x6c>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	4a18      	ldr	r2, [pc, #96]	; (8010a68 <SDMMC_GetCmdResp3+0x70>)
 8010a06:	fba2 2303 	umull	r2, r3, r2, r3
 8010a0a:	0a5b      	lsrs	r3, r3, #9
 8010a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a10:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010a14:	4623      	mov	r3, r4
 8010a16:	1e5c      	subs	r4, r3, #1
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d102      	bne.n	8010a22 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a20:	e01b      	b.n	8010a5a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a26:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d0f0      	beq.n	8010a14 <SDMMC_GetCmdResp3+0x1c>
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d1eb      	bne.n	8010a14 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a40:	f003 0304 	and.w	r3, r3, #4
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d004      	beq.n	8010a52 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2204      	movs	r2, #4
 8010a4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a4e:	2304      	movs	r3, #4
 8010a50:	e003      	b.n	8010a5a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	22c5      	movs	r2, #197	; 0xc5
 8010a56:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010a58:	2300      	movs	r3, #0
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	3710      	adds	r7, #16
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	bc90      	pop	{r4, r7}
 8010a62:	4770      	bx	lr
 8010a64:	20000000 	.word	0x20000000
 8010a68:	10624dd3 	.word	0x10624dd3

08010a6c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010a6c:	b590      	push	{r4, r7, lr}
 8010a6e:	b087      	sub	sp, #28
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	60f8      	str	r0, [r7, #12]
 8010a74:	460b      	mov	r3, r1
 8010a76:	607a      	str	r2, [r7, #4]
 8010a78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010a7a:	4b34      	ldr	r3, [pc, #208]	; (8010b4c <SDMMC_GetCmdResp6+0xe0>)
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	4a34      	ldr	r2, [pc, #208]	; (8010b50 <SDMMC_GetCmdResp6+0xe4>)
 8010a80:	fba2 2303 	umull	r2, r3, r2, r3
 8010a84:	0a5b      	lsrs	r3, r3, #9
 8010a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a8a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010a8e:	4623      	mov	r3, r4
 8010a90:	1e5c      	subs	r4, r3, #1
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d102      	bne.n	8010a9c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a9a:	e052      	b.n	8010b42 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aa0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010aa2:	697b      	ldr	r3, [r7, #20]
 8010aa4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d0f0      	beq.n	8010a8e <SDMMC_GetCmdResp6+0x22>
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d1eb      	bne.n	8010a8e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aba:	f003 0304 	and.w	r3, r3, #4
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d004      	beq.n	8010acc <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	2204      	movs	r2, #4
 8010ac6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010ac8:	2304      	movs	r3, #4
 8010aca:	e03a      	b.n	8010b42 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ad0:	f003 0301 	and.w	r3, r3, #1
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d004      	beq.n	8010ae2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	2201      	movs	r2, #1
 8010adc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ade:	2301      	movs	r3, #1
 8010ae0:	e02f      	b.n	8010b42 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010ae2:	68f8      	ldr	r0, [r7, #12]
 8010ae4:	f7ff fbae 	bl	8010244 <SDIO_GetCommandResponse>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	461a      	mov	r2, r3
 8010aec:	7afb      	ldrb	r3, [r7, #11]
 8010aee:	4293      	cmp	r3, r2
 8010af0:	d001      	beq.n	8010af6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010af2:	2301      	movs	r3, #1
 8010af4:	e025      	b.n	8010b42 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	22c5      	movs	r2, #197	; 0xc5
 8010afa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010afc:	2100      	movs	r1, #0
 8010afe:	68f8      	ldr	r0, [r7, #12]
 8010b00:	f7ff fbad 	bl	801025e <SDIO_GetResponse>
 8010b04:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010b06:	693b      	ldr	r3, [r7, #16]
 8010b08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d106      	bne.n	8010b1e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010b10:	693b      	ldr	r3, [r7, #16]
 8010b12:	0c1b      	lsrs	r3, r3, #16
 8010b14:	b29a      	uxth	r2, r3
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	e011      	b.n	8010b42 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d002      	beq.n	8010b2e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010b2c:	e009      	b.n	8010b42 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d002      	beq.n	8010b3e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b3c:	e001      	b.n	8010b42 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010b3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	371c      	adds	r7, #28
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd90      	pop	{r4, r7, pc}
 8010b4a:	bf00      	nop
 8010b4c:	20000000 	.word	0x20000000
 8010b50:	10624dd3 	.word	0x10624dd3

08010b54 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010b54:	b490      	push	{r4, r7}
 8010b56:	b084      	sub	sp, #16
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010b5c:	4b21      	ldr	r3, [pc, #132]	; (8010be4 <SDMMC_GetCmdResp7+0x90>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	4a21      	ldr	r2, [pc, #132]	; (8010be8 <SDMMC_GetCmdResp7+0x94>)
 8010b62:	fba2 2303 	umull	r2, r3, r2, r3
 8010b66:	0a5b      	lsrs	r3, r3, #9
 8010b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b6c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010b70:	4623      	mov	r3, r4
 8010b72:	1e5c      	subs	r4, r3, #1
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d102      	bne.n	8010b7e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b7c:	e02c      	b.n	8010bd8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b82:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d0f0      	beq.n	8010b70 <SDMMC_GetCmdResp7+0x1c>
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d1eb      	bne.n	8010b70 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b9c:	f003 0304 	and.w	r3, r3, #4
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d004      	beq.n	8010bae <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	2204      	movs	r2, #4
 8010ba8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010baa:	2304      	movs	r3, #4
 8010bac:	e014      	b.n	8010bd8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bb2:	f003 0301 	and.w	r3, r3, #1
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d004      	beq.n	8010bc4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2201      	movs	r2, #1
 8010bbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	e009      	b.n	8010bd8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d002      	beq.n	8010bd6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2240      	movs	r2, #64	; 0x40
 8010bd4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010bd6:	2300      	movs	r3, #0
  
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3710      	adds	r7, #16
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bc90      	pop	{r4, r7}
 8010be0:	4770      	bx	lr
 8010be2:	bf00      	nop
 8010be4:	20000000 	.word	0x20000000
 8010be8:	10624dd3 	.word	0x10624dd3

08010bec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010bf0:	4904      	ldr	r1, [pc, #16]	; (8010c04 <MX_FATFS_Init+0x18>)
 8010bf2:	4805      	ldr	r0, [pc, #20]	; (8010c08 <MX_FATFS_Init+0x1c>)
 8010bf4:	f003 fba6 	bl	8014344 <FATFS_LinkDriver>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	4b03      	ldr	r3, [pc, #12]	; (8010c0c <MX_FATFS_Init+0x20>)
 8010bfe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010c00:	bf00      	nop
 8010c02:	bd80      	pop	{r7, pc}
 8010c04:	2003fe48 	.word	0x2003fe48
 8010c08:	0801a2b0 	.word	0x0801a2b0
 8010c0c:	2003fe44 	.word	0x2003fe44

08010c10 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b082      	sub	sp, #8
 8010c14:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010c16:	2300      	movs	r3, #0
 8010c18:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010c1a:	f000 f896 	bl	8010d4a <BSP_SD_IsDetected>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	2b01      	cmp	r3, #1
 8010c22:	d001      	beq.n	8010c28 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010c24:	2301      	movs	r3, #1
 8010c26:	e012      	b.n	8010c4e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010c28:	480b      	ldr	r0, [pc, #44]	; (8010c58 <BSP_SD_Init+0x48>)
 8010c2a:	f7fb ff87 	bl	800cb3c <HAL_SD_Init>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010c32:	79fb      	ldrb	r3, [r7, #7]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d109      	bne.n	8010c4c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010c38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010c3c:	4806      	ldr	r0, [pc, #24]	; (8010c58 <BSP_SD_Init+0x48>)
 8010c3e:	f7fc fd31 	bl	800d6a4 <HAL_SD_ConfigWideBusOperation>
 8010c42:	4603      	mov	r3, r0
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d001      	beq.n	8010c4c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010c48:	2301      	movs	r3, #1
 8010c4a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010c4c:	79fb      	ldrb	r3, [r7, #7]
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3708      	adds	r7, #8
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}
 8010c56:	bf00      	nop
 8010c58:	2003fc40 	.word	0x2003fc40

08010c5c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b086      	sub	sp, #24
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	60f8      	str	r0, [r7, #12]
 8010c64:	60b9      	str	r1, [r7, #8]
 8010c66:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010c68:	2300      	movs	r3, #0
 8010c6a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	68ba      	ldr	r2, [r7, #8]
 8010c70:	68f9      	ldr	r1, [r7, #12]
 8010c72:	4806      	ldr	r0, [pc, #24]	; (8010c8c <BSP_SD_ReadBlocks_DMA+0x30>)
 8010c74:	f7fb fff2 	bl	800cc5c <HAL_SD_ReadBlocks_DMA>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d001      	beq.n	8010c82 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010c7e:	2301      	movs	r3, #1
 8010c80:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	3718      	adds	r7, #24
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}
 8010c8c:	2003fc40 	.word	0x2003fc40

08010c90 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b086      	sub	sp, #24
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	60f8      	str	r0, [r7, #12]
 8010c98:	60b9      	str	r1, [r7, #8]
 8010c9a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	68ba      	ldr	r2, [r7, #8]
 8010ca4:	68f9      	ldr	r1, [r7, #12]
 8010ca6:	4806      	ldr	r0, [pc, #24]	; (8010cc0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010ca8:	f7fc f8c0 	bl	800ce2c <HAL_SD_WriteBlocks_DMA>
 8010cac:	4603      	mov	r3, r0
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d001      	beq.n	8010cb6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010cb2:	2301      	movs	r3, #1
 8010cb4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cb8:	4618      	mov	r0, r3
 8010cba:	3718      	adds	r7, #24
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}
 8010cc0:	2003fc40 	.word	0x2003fc40

08010cc4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010cc8:	4805      	ldr	r0, [pc, #20]	; (8010ce0 <BSP_SD_GetCardState+0x1c>)
 8010cca:	f7fc fd67 	bl	800d79c <HAL_SD_GetCardState>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	2b04      	cmp	r3, #4
 8010cd2:	bf14      	ite	ne
 8010cd4:	2301      	movne	r3, #1
 8010cd6:	2300      	moveq	r3, #0
 8010cd8:	b2db      	uxtb	r3, r3
}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	bd80      	pop	{r7, pc}
 8010cde:	bf00      	nop
 8010ce0:	2003fc40 	.word	0x2003fc40

08010ce4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010cec:	6879      	ldr	r1, [r7, #4]
 8010cee:	4803      	ldr	r0, [pc, #12]	; (8010cfc <BSP_SD_GetCardInfo+0x18>)
 8010cf0:	f7fc fcac 	bl	800d64c <HAL_SD_GetCardInfo>
}
 8010cf4:	bf00      	nop
 8010cf6:	3708      	adds	r7, #8
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}
 8010cfc:	2003fc40 	.word	0x2003fc40

08010d00 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b082      	sub	sp, #8
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8010d08:	f000 f818 	bl	8010d3c <BSP_SD_AbortCallback>
}
 8010d0c:	bf00      	nop
 8010d0e:	3708      	adds	r7, #8
 8010d10:	46bd      	mov	sp, r7
 8010d12:	bd80      	pop	{r7, pc}

08010d14 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b082      	sub	sp, #8
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010d1c:	f000 f9a8 	bl	8011070 <BSP_SD_WriteCpltCallback>
}
 8010d20:	bf00      	nop
 8010d22:	3708      	adds	r7, #8
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}

08010d28 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b082      	sub	sp, #8
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010d30:	f000 f9aa 	bl	8011088 <BSP_SD_ReadCpltCallback>
}
 8010d34:	bf00      	nop
 8010d36:	3708      	adds	r7, #8
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}

08010d3c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010d3c:	b480      	push	{r7}
 8010d3e:	af00      	add	r7, sp, #0

}
 8010d40:	bf00      	nop
 8010d42:	46bd      	mov	sp, r7
 8010d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d48:	4770      	bx	lr

08010d4a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010d4a:	b580      	push	{r7, lr}
 8010d4c:	b082      	sub	sp, #8
 8010d4e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010d50:	2301      	movs	r3, #1
 8010d52:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010d54:	f000 f80c 	bl	8010d70 <BSP_PlatformIsDetected>
 8010d58:	4603      	mov	r3, r0
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d101      	bne.n	8010d62 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010d5e:	2300      	movs	r3, #0
 8010d60:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010d62:	79fb      	ldrb	r3, [r7, #7]
 8010d64:	b2db      	uxtb	r3, r3
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	3708      	adds	r7, #8
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}
	...

08010d70 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b082      	sub	sp, #8
 8010d74:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010d76:	2301      	movs	r3, #1
 8010d78:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010d7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010d7e:	4806      	ldr	r0, [pc, #24]	; (8010d98 <BSP_PlatformIsDetected+0x28>)
 8010d80:	f7fa f84a 	bl	800ae18 <HAL_GPIO_ReadPin>
 8010d84:	4603      	mov	r3, r0
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d001      	beq.n	8010d8e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010d8e:	79fb      	ldrb	r3, [r7, #7]
}
 8010d90:	4618      	mov	r0, r3
 8010d92:	3708      	adds	r7, #8
 8010d94:	46bd      	mov	sp, r7
 8010d96:	bd80      	pop	{r7, pc}
 8010d98:	40020000 	.word	0x40020000

08010d9c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b084      	sub	sp, #16
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010da4:	f7f8 fda8 	bl	80098f8 <HAL_GetTick>
 8010da8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010daa:	e006      	b.n	8010dba <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010dac:	f7ff ff8a 	bl	8010cc4 <BSP_SD_GetCardState>
 8010db0:	4603      	mov	r3, r0
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d101      	bne.n	8010dba <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010db6:	2300      	movs	r3, #0
 8010db8:	e009      	b.n	8010dce <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010dba:	f7f8 fd9d 	bl	80098f8 <HAL_GetTick>
 8010dbe:	4602      	mov	r2, r0
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	1ad3      	subs	r3, r2, r3
 8010dc4:	687a      	ldr	r2, [r7, #4]
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	d8f0      	bhi.n	8010dac <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010dca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010dce:	4618      	mov	r0, r3
 8010dd0:	3710      	adds	r7, #16
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	bd80      	pop	{r7, pc}
	...

08010dd8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b082      	sub	sp, #8
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	4603      	mov	r3, r0
 8010de0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010de2:	4b0b      	ldr	r3, [pc, #44]	; (8010e10 <SD_CheckStatus+0x38>)
 8010de4:	2201      	movs	r2, #1
 8010de6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010de8:	f7ff ff6c 	bl	8010cc4 <BSP_SD_GetCardState>
 8010dec:	4603      	mov	r3, r0
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d107      	bne.n	8010e02 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010df2:	4b07      	ldr	r3, [pc, #28]	; (8010e10 <SD_CheckStatus+0x38>)
 8010df4:	781b      	ldrb	r3, [r3, #0]
 8010df6:	b2db      	uxtb	r3, r3
 8010df8:	f023 0301 	bic.w	r3, r3, #1
 8010dfc:	b2da      	uxtb	r2, r3
 8010dfe:	4b04      	ldr	r3, [pc, #16]	; (8010e10 <SD_CheckStatus+0x38>)
 8010e00:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010e02:	4b03      	ldr	r3, [pc, #12]	; (8010e10 <SD_CheckStatus+0x38>)
 8010e04:	781b      	ldrb	r3, [r3, #0]
 8010e06:	b2db      	uxtb	r3, r3
}
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3708      	adds	r7, #8
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}
 8010e10:	20000009 	.word	0x20000009

08010e14 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b082      	sub	sp, #8
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010e1e:	f7ff fef7 	bl	8010c10 <BSP_SD_Init>
 8010e22:	4603      	mov	r3, r0
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d107      	bne.n	8010e38 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010e28:	79fb      	ldrb	r3, [r7, #7]
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f7ff ffd4 	bl	8010dd8 <SD_CheckStatus>
 8010e30:	4603      	mov	r3, r0
 8010e32:	461a      	mov	r2, r3
 8010e34:	4b04      	ldr	r3, [pc, #16]	; (8010e48 <SD_initialize+0x34>)
 8010e36:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010e38:	4b03      	ldr	r3, [pc, #12]	; (8010e48 <SD_initialize+0x34>)
 8010e3a:	781b      	ldrb	r3, [r3, #0]
 8010e3c:	b2db      	uxtb	r3, r3
}
 8010e3e:	4618      	mov	r0, r3
 8010e40:	3708      	adds	r7, #8
 8010e42:	46bd      	mov	sp, r7
 8010e44:	bd80      	pop	{r7, pc}
 8010e46:	bf00      	nop
 8010e48:	20000009 	.word	0x20000009

08010e4c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b082      	sub	sp, #8
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	4603      	mov	r3, r0
 8010e54:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010e56:	79fb      	ldrb	r3, [r7, #7]
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f7ff ffbd 	bl	8010dd8 <SD_CheckStatus>
 8010e5e:	4603      	mov	r3, r0
}
 8010e60:	4618      	mov	r0, r3
 8010e62:	3708      	adds	r7, #8
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}

08010e68 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b086      	sub	sp, #24
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	60b9      	str	r1, [r7, #8]
 8010e70:	607a      	str	r2, [r7, #4]
 8010e72:	603b      	str	r3, [r7, #0]
 8010e74:	4603      	mov	r3, r0
 8010e76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010e78:	2301      	movs	r3, #1
 8010e7a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010e7c:	f247 5030 	movw	r0, #30000	; 0x7530
 8010e80:	f7ff ff8c 	bl	8010d9c <SD_CheckStatusWithTimeout>
 8010e84:	4603      	mov	r3, r0
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	da01      	bge.n	8010e8e <SD_read+0x26>
  {
    return res;
 8010e8a:	7dfb      	ldrb	r3, [r7, #23]
 8010e8c:	e03b      	b.n	8010f06 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010e8e:	683a      	ldr	r2, [r7, #0]
 8010e90:	6879      	ldr	r1, [r7, #4]
 8010e92:	68b8      	ldr	r0, [r7, #8]
 8010e94:	f7ff fee2 	bl	8010c5c <BSP_SD_ReadBlocks_DMA>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d132      	bne.n	8010f04 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010e9e:	4b1c      	ldr	r3, [pc, #112]	; (8010f10 <SD_read+0xa8>)
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010ea4:	f7f8 fd28 	bl	80098f8 <HAL_GetTick>
 8010ea8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010eaa:	bf00      	nop
 8010eac:	4b18      	ldr	r3, [pc, #96]	; (8010f10 <SD_read+0xa8>)
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d108      	bne.n	8010ec6 <SD_read+0x5e>
 8010eb4:	f7f8 fd20 	bl	80098f8 <HAL_GetTick>
 8010eb8:	4602      	mov	r2, r0
 8010eba:	693b      	ldr	r3, [r7, #16]
 8010ebc:	1ad3      	subs	r3, r2, r3
 8010ebe:	f247 522f 	movw	r2, #29999	; 0x752f
 8010ec2:	4293      	cmp	r3, r2
 8010ec4:	d9f2      	bls.n	8010eac <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8010ec6:	4b12      	ldr	r3, [pc, #72]	; (8010f10 <SD_read+0xa8>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d102      	bne.n	8010ed4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010ece:	2301      	movs	r3, #1
 8010ed0:	75fb      	strb	r3, [r7, #23]
 8010ed2:	e017      	b.n	8010f04 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010ed4:	4b0e      	ldr	r3, [pc, #56]	; (8010f10 <SD_read+0xa8>)
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010eda:	f7f8 fd0d 	bl	80098f8 <HAL_GetTick>
 8010ede:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010ee0:	e007      	b.n	8010ef2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010ee2:	f7ff feef 	bl	8010cc4 <BSP_SD_GetCardState>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d102      	bne.n	8010ef2 <SD_read+0x8a>
          {
            res = RES_OK;
 8010eec:	2300      	movs	r3, #0
 8010eee:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010ef0:	e008      	b.n	8010f04 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010ef2:	f7f8 fd01 	bl	80098f8 <HAL_GetTick>
 8010ef6:	4602      	mov	r2, r0
 8010ef8:	693b      	ldr	r3, [r7, #16]
 8010efa:	1ad3      	subs	r3, r2, r3
 8010efc:	f247 522f 	movw	r2, #29999	; 0x752f
 8010f00:	4293      	cmp	r3, r2
 8010f02:	d9ee      	bls.n	8010ee2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	3718      	adds	r7, #24
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}
 8010f0e:	bf00      	nop
 8010f10:	2003d4dc 	.word	0x2003d4dc

08010f14 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b086      	sub	sp, #24
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	60b9      	str	r1, [r7, #8]
 8010f1c:	607a      	str	r2, [r7, #4]
 8010f1e:	603b      	str	r3, [r7, #0]
 8010f20:	4603      	mov	r3, r0
 8010f22:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010f24:	2301      	movs	r3, #1
 8010f26:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010f28:	4b24      	ldr	r3, [pc, #144]	; (8010fbc <SD_write+0xa8>)
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010f2e:	f247 5030 	movw	r0, #30000	; 0x7530
 8010f32:	f7ff ff33 	bl	8010d9c <SD_CheckStatusWithTimeout>
 8010f36:	4603      	mov	r3, r0
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	da01      	bge.n	8010f40 <SD_write+0x2c>
  {
    return res;
 8010f3c:	7dfb      	ldrb	r3, [r7, #23]
 8010f3e:	e038      	b.n	8010fb2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010f40:	683a      	ldr	r2, [r7, #0]
 8010f42:	6879      	ldr	r1, [r7, #4]
 8010f44:	68b8      	ldr	r0, [r7, #8]
 8010f46:	f7ff fea3 	bl	8010c90 <BSP_SD_WriteBlocks_DMA>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d12f      	bne.n	8010fb0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010f50:	f7f8 fcd2 	bl	80098f8 <HAL_GetTick>
 8010f54:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010f56:	bf00      	nop
 8010f58:	4b18      	ldr	r3, [pc, #96]	; (8010fbc <SD_write+0xa8>)
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d108      	bne.n	8010f72 <SD_write+0x5e>
 8010f60:	f7f8 fcca 	bl	80098f8 <HAL_GetTick>
 8010f64:	4602      	mov	r2, r0
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	1ad3      	subs	r3, r2, r3
 8010f6a:	f247 522f 	movw	r2, #29999	; 0x752f
 8010f6e:	4293      	cmp	r3, r2
 8010f70:	d9f2      	bls.n	8010f58 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8010f72:	4b12      	ldr	r3, [pc, #72]	; (8010fbc <SD_write+0xa8>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d102      	bne.n	8010f80 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010f7a:	2301      	movs	r3, #1
 8010f7c:	75fb      	strb	r3, [r7, #23]
 8010f7e:	e017      	b.n	8010fb0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010f80:	4b0e      	ldr	r3, [pc, #56]	; (8010fbc <SD_write+0xa8>)
 8010f82:	2200      	movs	r2, #0
 8010f84:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010f86:	f7f8 fcb7 	bl	80098f8 <HAL_GetTick>
 8010f8a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010f8c:	e007      	b.n	8010f9e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010f8e:	f7ff fe99 	bl	8010cc4 <BSP_SD_GetCardState>
 8010f92:	4603      	mov	r3, r0
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d102      	bne.n	8010f9e <SD_write+0x8a>
          {
            res = RES_OK;
 8010f98:	2300      	movs	r3, #0
 8010f9a:	75fb      	strb	r3, [r7, #23]
            break;
 8010f9c:	e008      	b.n	8010fb0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010f9e:	f7f8 fcab 	bl	80098f8 <HAL_GetTick>
 8010fa2:	4602      	mov	r2, r0
 8010fa4:	693b      	ldr	r3, [r7, #16]
 8010fa6:	1ad3      	subs	r3, r2, r3
 8010fa8:	f247 522f 	movw	r2, #29999	; 0x752f
 8010fac:	4293      	cmp	r3, r2
 8010fae:	d9ee      	bls.n	8010f8e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	3718      	adds	r7, #24
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}
 8010fba:	bf00      	nop
 8010fbc:	2003d4d8 	.word	0x2003d4d8

08010fc0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b08c      	sub	sp, #48	; 0x30
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	603a      	str	r2, [r7, #0]
 8010fca:	71fb      	strb	r3, [r7, #7]
 8010fcc:	460b      	mov	r3, r1
 8010fce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010fd0:	2301      	movs	r3, #1
 8010fd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010fd6:	4b25      	ldr	r3, [pc, #148]	; (801106c <SD_ioctl+0xac>)
 8010fd8:	781b      	ldrb	r3, [r3, #0]
 8010fda:	b2db      	uxtb	r3, r3
 8010fdc:	f003 0301 	and.w	r3, r3, #1
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d001      	beq.n	8010fe8 <SD_ioctl+0x28>
 8010fe4:	2303      	movs	r3, #3
 8010fe6:	e03c      	b.n	8011062 <SD_ioctl+0xa2>

  switch (cmd)
 8010fe8:	79bb      	ldrb	r3, [r7, #6]
 8010fea:	2b03      	cmp	r3, #3
 8010fec:	d834      	bhi.n	8011058 <SD_ioctl+0x98>
 8010fee:	a201      	add	r2, pc, #4	; (adr r2, 8010ff4 <SD_ioctl+0x34>)
 8010ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ff4:	08011005 	.word	0x08011005
 8010ff8:	0801100d 	.word	0x0801100d
 8010ffc:	08011025 	.word	0x08011025
 8011000:	0801103f 	.word	0x0801103f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011004:	2300      	movs	r3, #0
 8011006:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801100a:	e028      	b.n	801105e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801100c:	f107 030c 	add.w	r3, r7, #12
 8011010:	4618      	mov	r0, r3
 8011012:	f7ff fe67 	bl	8010ce4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011018:	683b      	ldr	r3, [r7, #0]
 801101a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801101c:	2300      	movs	r3, #0
 801101e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011022:	e01c      	b.n	801105e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011024:	f107 030c 	add.w	r3, r7, #12
 8011028:	4618      	mov	r0, r3
 801102a:	f7ff fe5b 	bl	8010ce4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801102e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011030:	b29a      	uxth	r2, r3
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011036:	2300      	movs	r3, #0
 8011038:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801103c:	e00f      	b.n	801105e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801103e:	f107 030c 	add.w	r3, r7, #12
 8011042:	4618      	mov	r0, r3
 8011044:	f7ff fe4e 	bl	8010ce4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801104a:	0a5a      	lsrs	r2, r3, #9
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011050:	2300      	movs	r3, #0
 8011052:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011056:	e002      	b.n	801105e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011058:	2304      	movs	r3, #4
 801105a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801105e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011062:	4618      	mov	r0, r3
 8011064:	3730      	adds	r7, #48	; 0x30
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}
 801106a:	bf00      	nop
 801106c:	20000009 	.word	0x20000009

08011070 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011070:	b480      	push	{r7}
 8011072:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011074:	4b03      	ldr	r3, [pc, #12]	; (8011084 <BSP_SD_WriteCpltCallback+0x14>)
 8011076:	2201      	movs	r2, #1
 8011078:	601a      	str	r2, [r3, #0]
}
 801107a:	bf00      	nop
 801107c:	46bd      	mov	sp, r7
 801107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011082:	4770      	bx	lr
 8011084:	2003d4d8 	.word	0x2003d4d8

08011088 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011088:	b480      	push	{r7}
 801108a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801108c:	4b03      	ldr	r3, [pc, #12]	; (801109c <BSP_SD_ReadCpltCallback+0x14>)
 801108e:	2201      	movs	r2, #1
 8011090:	601a      	str	r2, [r3, #0]
}
 8011092:	bf00      	nop
 8011094:	46bd      	mov	sp, r7
 8011096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109a:	4770      	bx	lr
 801109c:	2003d4dc 	.word	0x2003d4dc

080110a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b084      	sub	sp, #16
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	4603      	mov	r3, r0
 80110a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80110aa:	79fb      	ldrb	r3, [r7, #7]
 80110ac:	4a08      	ldr	r2, [pc, #32]	; (80110d0 <disk_status+0x30>)
 80110ae:	009b      	lsls	r3, r3, #2
 80110b0:	4413      	add	r3, r2
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	685b      	ldr	r3, [r3, #4]
 80110b6:	79fa      	ldrb	r2, [r7, #7]
 80110b8:	4905      	ldr	r1, [pc, #20]	; (80110d0 <disk_status+0x30>)
 80110ba:	440a      	add	r2, r1
 80110bc:	7a12      	ldrb	r2, [r2, #8]
 80110be:	4610      	mov	r0, r2
 80110c0:	4798      	blx	r3
 80110c2:	4603      	mov	r3, r0
 80110c4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80110c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80110c8:	4618      	mov	r0, r3
 80110ca:	3710      	adds	r7, #16
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bd80      	pop	{r7, pc}
 80110d0:	2003d508 	.word	0x2003d508

080110d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b084      	sub	sp, #16
 80110d8:	af00      	add	r7, sp, #0
 80110da:	4603      	mov	r3, r0
 80110dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80110de:	2300      	movs	r3, #0
 80110e0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80110e2:	79fb      	ldrb	r3, [r7, #7]
 80110e4:	4a0d      	ldr	r2, [pc, #52]	; (801111c <disk_initialize+0x48>)
 80110e6:	5cd3      	ldrb	r3, [r2, r3]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d111      	bne.n	8011110 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80110ec:	79fb      	ldrb	r3, [r7, #7]
 80110ee:	4a0b      	ldr	r2, [pc, #44]	; (801111c <disk_initialize+0x48>)
 80110f0:	2101      	movs	r1, #1
 80110f2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80110f4:	79fb      	ldrb	r3, [r7, #7]
 80110f6:	4a09      	ldr	r2, [pc, #36]	; (801111c <disk_initialize+0x48>)
 80110f8:	009b      	lsls	r3, r3, #2
 80110fa:	4413      	add	r3, r2
 80110fc:	685b      	ldr	r3, [r3, #4]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	79fa      	ldrb	r2, [r7, #7]
 8011102:	4906      	ldr	r1, [pc, #24]	; (801111c <disk_initialize+0x48>)
 8011104:	440a      	add	r2, r1
 8011106:	7a12      	ldrb	r2, [r2, #8]
 8011108:	4610      	mov	r0, r2
 801110a:	4798      	blx	r3
 801110c:	4603      	mov	r3, r0
 801110e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011110:	7bfb      	ldrb	r3, [r7, #15]
}
 8011112:	4618      	mov	r0, r3
 8011114:	3710      	adds	r7, #16
 8011116:	46bd      	mov	sp, r7
 8011118:	bd80      	pop	{r7, pc}
 801111a:	bf00      	nop
 801111c:	2003d508 	.word	0x2003d508

08011120 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011120:	b590      	push	{r4, r7, lr}
 8011122:	b087      	sub	sp, #28
 8011124:	af00      	add	r7, sp, #0
 8011126:	60b9      	str	r1, [r7, #8]
 8011128:	607a      	str	r2, [r7, #4]
 801112a:	603b      	str	r3, [r7, #0]
 801112c:	4603      	mov	r3, r0
 801112e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011130:	7bfb      	ldrb	r3, [r7, #15]
 8011132:	4a0a      	ldr	r2, [pc, #40]	; (801115c <disk_read+0x3c>)
 8011134:	009b      	lsls	r3, r3, #2
 8011136:	4413      	add	r3, r2
 8011138:	685b      	ldr	r3, [r3, #4]
 801113a:	689c      	ldr	r4, [r3, #8]
 801113c:	7bfb      	ldrb	r3, [r7, #15]
 801113e:	4a07      	ldr	r2, [pc, #28]	; (801115c <disk_read+0x3c>)
 8011140:	4413      	add	r3, r2
 8011142:	7a18      	ldrb	r0, [r3, #8]
 8011144:	683b      	ldr	r3, [r7, #0]
 8011146:	687a      	ldr	r2, [r7, #4]
 8011148:	68b9      	ldr	r1, [r7, #8]
 801114a:	47a0      	blx	r4
 801114c:	4603      	mov	r3, r0
 801114e:	75fb      	strb	r3, [r7, #23]
  return res;
 8011150:	7dfb      	ldrb	r3, [r7, #23]
}
 8011152:	4618      	mov	r0, r3
 8011154:	371c      	adds	r7, #28
 8011156:	46bd      	mov	sp, r7
 8011158:	bd90      	pop	{r4, r7, pc}
 801115a:	bf00      	nop
 801115c:	2003d508 	.word	0x2003d508

08011160 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011160:	b590      	push	{r4, r7, lr}
 8011162:	b087      	sub	sp, #28
 8011164:	af00      	add	r7, sp, #0
 8011166:	60b9      	str	r1, [r7, #8]
 8011168:	607a      	str	r2, [r7, #4]
 801116a:	603b      	str	r3, [r7, #0]
 801116c:	4603      	mov	r3, r0
 801116e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011170:	7bfb      	ldrb	r3, [r7, #15]
 8011172:	4a0a      	ldr	r2, [pc, #40]	; (801119c <disk_write+0x3c>)
 8011174:	009b      	lsls	r3, r3, #2
 8011176:	4413      	add	r3, r2
 8011178:	685b      	ldr	r3, [r3, #4]
 801117a:	68dc      	ldr	r4, [r3, #12]
 801117c:	7bfb      	ldrb	r3, [r7, #15]
 801117e:	4a07      	ldr	r2, [pc, #28]	; (801119c <disk_write+0x3c>)
 8011180:	4413      	add	r3, r2
 8011182:	7a18      	ldrb	r0, [r3, #8]
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	687a      	ldr	r2, [r7, #4]
 8011188:	68b9      	ldr	r1, [r7, #8]
 801118a:	47a0      	blx	r4
 801118c:	4603      	mov	r3, r0
 801118e:	75fb      	strb	r3, [r7, #23]
  return res;
 8011190:	7dfb      	ldrb	r3, [r7, #23]
}
 8011192:	4618      	mov	r0, r3
 8011194:	371c      	adds	r7, #28
 8011196:	46bd      	mov	sp, r7
 8011198:	bd90      	pop	{r4, r7, pc}
 801119a:	bf00      	nop
 801119c:	2003d508 	.word	0x2003d508

080111a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b084      	sub	sp, #16
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	4603      	mov	r3, r0
 80111a8:	603a      	str	r2, [r7, #0]
 80111aa:	71fb      	strb	r3, [r7, #7]
 80111ac:	460b      	mov	r3, r1
 80111ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80111b0:	79fb      	ldrb	r3, [r7, #7]
 80111b2:	4a09      	ldr	r2, [pc, #36]	; (80111d8 <disk_ioctl+0x38>)
 80111b4:	009b      	lsls	r3, r3, #2
 80111b6:	4413      	add	r3, r2
 80111b8:	685b      	ldr	r3, [r3, #4]
 80111ba:	691b      	ldr	r3, [r3, #16]
 80111bc:	79fa      	ldrb	r2, [r7, #7]
 80111be:	4906      	ldr	r1, [pc, #24]	; (80111d8 <disk_ioctl+0x38>)
 80111c0:	440a      	add	r2, r1
 80111c2:	7a10      	ldrb	r0, [r2, #8]
 80111c4:	79b9      	ldrb	r1, [r7, #6]
 80111c6:	683a      	ldr	r2, [r7, #0]
 80111c8:	4798      	blx	r3
 80111ca:	4603      	mov	r3, r0
 80111cc:	73fb      	strb	r3, [r7, #15]
  return res;
 80111ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80111d0:	4618      	mov	r0, r3
 80111d2:	3710      	adds	r7, #16
 80111d4:	46bd      	mov	sp, r7
 80111d6:	bd80      	pop	{r7, pc}
 80111d8:	2003d508 	.word	0x2003d508

080111dc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80111dc:	b480      	push	{r7}
 80111de:	b085      	sub	sp, #20
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	3301      	adds	r3, #1
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80111ec:	89fb      	ldrh	r3, [r7, #14]
 80111ee:	021b      	lsls	r3, r3, #8
 80111f0:	b21a      	sxth	r2, r3
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	781b      	ldrb	r3, [r3, #0]
 80111f6:	b21b      	sxth	r3, r3
 80111f8:	4313      	orrs	r3, r2
 80111fa:	b21b      	sxth	r3, r3
 80111fc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80111fe:	89fb      	ldrh	r3, [r7, #14]
}
 8011200:	4618      	mov	r0, r3
 8011202:	3714      	adds	r7, #20
 8011204:	46bd      	mov	sp, r7
 8011206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120a:	4770      	bx	lr

0801120c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801120c:	b480      	push	{r7}
 801120e:	b085      	sub	sp, #20
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	3303      	adds	r3, #3
 8011218:	781b      	ldrb	r3, [r3, #0]
 801121a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	021b      	lsls	r3, r3, #8
 8011220:	687a      	ldr	r2, [r7, #4]
 8011222:	3202      	adds	r2, #2
 8011224:	7812      	ldrb	r2, [r2, #0]
 8011226:	4313      	orrs	r3, r2
 8011228:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	021b      	lsls	r3, r3, #8
 801122e:	687a      	ldr	r2, [r7, #4]
 8011230:	3201      	adds	r2, #1
 8011232:	7812      	ldrb	r2, [r2, #0]
 8011234:	4313      	orrs	r3, r2
 8011236:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	021b      	lsls	r3, r3, #8
 801123c:	687a      	ldr	r2, [r7, #4]
 801123e:	7812      	ldrb	r2, [r2, #0]
 8011240:	4313      	orrs	r3, r2
 8011242:	60fb      	str	r3, [r7, #12]
	return rv;
 8011244:	68fb      	ldr	r3, [r7, #12]
}
 8011246:	4618      	mov	r0, r3
 8011248:	3714      	adds	r7, #20
 801124a:	46bd      	mov	sp, r7
 801124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011250:	4770      	bx	lr

08011252 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011252:	b480      	push	{r7}
 8011254:	b083      	sub	sp, #12
 8011256:	af00      	add	r7, sp, #0
 8011258:	6078      	str	r0, [r7, #4]
 801125a:	460b      	mov	r3, r1
 801125c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	1c5a      	adds	r2, r3, #1
 8011262:	607a      	str	r2, [r7, #4]
 8011264:	887a      	ldrh	r2, [r7, #2]
 8011266:	b2d2      	uxtb	r2, r2
 8011268:	701a      	strb	r2, [r3, #0]
 801126a:	887b      	ldrh	r3, [r7, #2]
 801126c:	0a1b      	lsrs	r3, r3, #8
 801126e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	1c5a      	adds	r2, r3, #1
 8011274:	607a      	str	r2, [r7, #4]
 8011276:	887a      	ldrh	r2, [r7, #2]
 8011278:	b2d2      	uxtb	r2, r2
 801127a:	701a      	strb	r2, [r3, #0]
}
 801127c:	bf00      	nop
 801127e:	370c      	adds	r7, #12
 8011280:	46bd      	mov	sp, r7
 8011282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011286:	4770      	bx	lr

08011288 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011288:	b480      	push	{r7}
 801128a:	b083      	sub	sp, #12
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
 8011290:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	1c5a      	adds	r2, r3, #1
 8011296:	607a      	str	r2, [r7, #4]
 8011298:	683a      	ldr	r2, [r7, #0]
 801129a:	b2d2      	uxtb	r2, r2
 801129c:	701a      	strb	r2, [r3, #0]
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	0a1b      	lsrs	r3, r3, #8
 80112a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	1c5a      	adds	r2, r3, #1
 80112a8:	607a      	str	r2, [r7, #4]
 80112aa:	683a      	ldr	r2, [r7, #0]
 80112ac:	b2d2      	uxtb	r2, r2
 80112ae:	701a      	strb	r2, [r3, #0]
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	0a1b      	lsrs	r3, r3, #8
 80112b4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	1c5a      	adds	r2, r3, #1
 80112ba:	607a      	str	r2, [r7, #4]
 80112bc:	683a      	ldr	r2, [r7, #0]
 80112be:	b2d2      	uxtb	r2, r2
 80112c0:	701a      	strb	r2, [r3, #0]
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	0a1b      	lsrs	r3, r3, #8
 80112c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	1c5a      	adds	r2, r3, #1
 80112cc:	607a      	str	r2, [r7, #4]
 80112ce:	683a      	ldr	r2, [r7, #0]
 80112d0:	b2d2      	uxtb	r2, r2
 80112d2:	701a      	strb	r2, [r3, #0]
}
 80112d4:	bf00      	nop
 80112d6:	370c      	adds	r7, #12
 80112d8:	46bd      	mov	sp, r7
 80112da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112de:	4770      	bx	lr

080112e0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80112e0:	b480      	push	{r7}
 80112e2:	b087      	sub	sp, #28
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	60f8      	str	r0, [r7, #12]
 80112e8:	60b9      	str	r1, [r7, #8]
 80112ea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d00d      	beq.n	8011316 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80112fa:	693a      	ldr	r2, [r7, #16]
 80112fc:	1c53      	adds	r3, r2, #1
 80112fe:	613b      	str	r3, [r7, #16]
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	1c59      	adds	r1, r3, #1
 8011304:	6179      	str	r1, [r7, #20]
 8011306:	7812      	ldrb	r2, [r2, #0]
 8011308:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	3b01      	subs	r3, #1
 801130e:	607b      	str	r3, [r7, #4]
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d1f1      	bne.n	80112fa <mem_cpy+0x1a>
	}
}
 8011316:	bf00      	nop
 8011318:	371c      	adds	r7, #28
 801131a:	46bd      	mov	sp, r7
 801131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011320:	4770      	bx	lr

08011322 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011322:	b480      	push	{r7}
 8011324:	b087      	sub	sp, #28
 8011326:	af00      	add	r7, sp, #0
 8011328:	60f8      	str	r0, [r7, #12]
 801132a:	60b9      	str	r1, [r7, #8]
 801132c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011332:	697b      	ldr	r3, [r7, #20]
 8011334:	1c5a      	adds	r2, r3, #1
 8011336:	617a      	str	r2, [r7, #20]
 8011338:	68ba      	ldr	r2, [r7, #8]
 801133a:	b2d2      	uxtb	r2, r2
 801133c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	3b01      	subs	r3, #1
 8011342:	607b      	str	r3, [r7, #4]
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d1f3      	bne.n	8011332 <mem_set+0x10>
}
 801134a:	bf00      	nop
 801134c:	bf00      	nop
 801134e:	371c      	adds	r7, #28
 8011350:	46bd      	mov	sp, r7
 8011352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011356:	4770      	bx	lr

08011358 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011358:	b480      	push	{r7}
 801135a:	b089      	sub	sp, #36	; 0x24
 801135c:	af00      	add	r7, sp, #0
 801135e:	60f8      	str	r0, [r7, #12]
 8011360:	60b9      	str	r1, [r7, #8]
 8011362:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	61fb      	str	r3, [r7, #28]
 8011368:	68bb      	ldr	r3, [r7, #8]
 801136a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801136c:	2300      	movs	r3, #0
 801136e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011370:	69fb      	ldr	r3, [r7, #28]
 8011372:	1c5a      	adds	r2, r3, #1
 8011374:	61fa      	str	r2, [r7, #28]
 8011376:	781b      	ldrb	r3, [r3, #0]
 8011378:	4619      	mov	r1, r3
 801137a:	69bb      	ldr	r3, [r7, #24]
 801137c:	1c5a      	adds	r2, r3, #1
 801137e:	61ba      	str	r2, [r7, #24]
 8011380:	781b      	ldrb	r3, [r3, #0]
 8011382:	1acb      	subs	r3, r1, r3
 8011384:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	3b01      	subs	r3, #1
 801138a:	607b      	str	r3, [r7, #4]
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d002      	beq.n	8011398 <mem_cmp+0x40>
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d0eb      	beq.n	8011370 <mem_cmp+0x18>

	return r;
 8011398:	697b      	ldr	r3, [r7, #20]
}
 801139a:	4618      	mov	r0, r3
 801139c:	3724      	adds	r7, #36	; 0x24
 801139e:	46bd      	mov	sp, r7
 80113a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a4:	4770      	bx	lr

080113a6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80113a6:	b480      	push	{r7}
 80113a8:	b083      	sub	sp, #12
 80113aa:	af00      	add	r7, sp, #0
 80113ac:	6078      	str	r0, [r7, #4]
 80113ae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80113b0:	e002      	b.n	80113b8 <chk_chr+0x12>
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	3301      	adds	r3, #1
 80113b6:	607b      	str	r3, [r7, #4]
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	781b      	ldrb	r3, [r3, #0]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d005      	beq.n	80113cc <chk_chr+0x26>
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	781b      	ldrb	r3, [r3, #0]
 80113c4:	461a      	mov	r2, r3
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	4293      	cmp	r3, r2
 80113ca:	d1f2      	bne.n	80113b2 <chk_chr+0xc>
	return *str;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	781b      	ldrb	r3, [r3, #0]
}
 80113d0:	4618      	mov	r0, r3
 80113d2:	370c      	adds	r7, #12
 80113d4:	46bd      	mov	sp, r7
 80113d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113da:	4770      	bx	lr

080113dc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80113dc:	b480      	push	{r7}
 80113de:	b085      	sub	sp, #20
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80113e6:	2300      	movs	r3, #0
 80113e8:	60bb      	str	r3, [r7, #8]
 80113ea:	68bb      	ldr	r3, [r7, #8]
 80113ec:	60fb      	str	r3, [r7, #12]
 80113ee:	e029      	b.n	8011444 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80113f0:	4a27      	ldr	r2, [pc, #156]	; (8011490 <chk_lock+0xb4>)
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	011b      	lsls	r3, r3, #4
 80113f6:	4413      	add	r3, r2
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d01d      	beq.n	801143a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80113fe:	4a24      	ldr	r2, [pc, #144]	; (8011490 <chk_lock+0xb4>)
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	011b      	lsls	r3, r3, #4
 8011404:	4413      	add	r3, r2
 8011406:	681a      	ldr	r2, [r3, #0]
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	429a      	cmp	r2, r3
 801140e:	d116      	bne.n	801143e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011410:	4a1f      	ldr	r2, [pc, #124]	; (8011490 <chk_lock+0xb4>)
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	011b      	lsls	r3, r3, #4
 8011416:	4413      	add	r3, r2
 8011418:	3304      	adds	r3, #4
 801141a:	681a      	ldr	r2, [r3, #0]
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011420:	429a      	cmp	r2, r3
 8011422:	d10c      	bne.n	801143e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011424:	4a1a      	ldr	r2, [pc, #104]	; (8011490 <chk_lock+0xb4>)
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	011b      	lsls	r3, r3, #4
 801142a:	4413      	add	r3, r2
 801142c:	3308      	adds	r3, #8
 801142e:	681a      	ldr	r2, [r3, #0]
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011434:	429a      	cmp	r2, r3
 8011436:	d102      	bne.n	801143e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011438:	e007      	b.n	801144a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801143a:	2301      	movs	r3, #1
 801143c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	3301      	adds	r3, #1
 8011442:	60fb      	str	r3, [r7, #12]
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	2b01      	cmp	r3, #1
 8011448:	d9d2      	bls.n	80113f0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	2b02      	cmp	r3, #2
 801144e:	d109      	bne.n	8011464 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011450:	68bb      	ldr	r3, [r7, #8]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d102      	bne.n	801145c <chk_lock+0x80>
 8011456:	683b      	ldr	r3, [r7, #0]
 8011458:	2b02      	cmp	r3, #2
 801145a:	d101      	bne.n	8011460 <chk_lock+0x84>
 801145c:	2300      	movs	r3, #0
 801145e:	e010      	b.n	8011482 <chk_lock+0xa6>
 8011460:	2312      	movs	r3, #18
 8011462:	e00e      	b.n	8011482 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d108      	bne.n	801147c <chk_lock+0xa0>
 801146a:	4a09      	ldr	r2, [pc, #36]	; (8011490 <chk_lock+0xb4>)
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	011b      	lsls	r3, r3, #4
 8011470:	4413      	add	r3, r2
 8011472:	330c      	adds	r3, #12
 8011474:	881b      	ldrh	r3, [r3, #0]
 8011476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801147a:	d101      	bne.n	8011480 <chk_lock+0xa4>
 801147c:	2310      	movs	r3, #16
 801147e:	e000      	b.n	8011482 <chk_lock+0xa6>
 8011480:	2300      	movs	r3, #0
}
 8011482:	4618      	mov	r0, r3
 8011484:	3714      	adds	r7, #20
 8011486:	46bd      	mov	sp, r7
 8011488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148c:	4770      	bx	lr
 801148e:	bf00      	nop
 8011490:	2003d4e8 	.word	0x2003d4e8

08011494 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011494:	b480      	push	{r7}
 8011496:	b083      	sub	sp, #12
 8011498:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801149a:	2300      	movs	r3, #0
 801149c:	607b      	str	r3, [r7, #4]
 801149e:	e002      	b.n	80114a6 <enq_lock+0x12>
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	3301      	adds	r3, #1
 80114a4:	607b      	str	r3, [r7, #4]
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	2b01      	cmp	r3, #1
 80114aa:	d806      	bhi.n	80114ba <enq_lock+0x26>
 80114ac:	4a09      	ldr	r2, [pc, #36]	; (80114d4 <enq_lock+0x40>)
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	011b      	lsls	r3, r3, #4
 80114b2:	4413      	add	r3, r2
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d1f2      	bne.n	80114a0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2b02      	cmp	r3, #2
 80114be:	bf14      	ite	ne
 80114c0:	2301      	movne	r3, #1
 80114c2:	2300      	moveq	r3, #0
 80114c4:	b2db      	uxtb	r3, r3
}
 80114c6:	4618      	mov	r0, r3
 80114c8:	370c      	adds	r7, #12
 80114ca:	46bd      	mov	sp, r7
 80114cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d0:	4770      	bx	lr
 80114d2:	bf00      	nop
 80114d4:	2003d4e8 	.word	0x2003d4e8

080114d8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80114d8:	b480      	push	{r7}
 80114da:	b085      	sub	sp, #20
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
 80114e0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80114e2:	2300      	movs	r3, #0
 80114e4:	60fb      	str	r3, [r7, #12]
 80114e6:	e01f      	b.n	8011528 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80114e8:	4a41      	ldr	r2, [pc, #260]	; (80115f0 <inc_lock+0x118>)
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	011b      	lsls	r3, r3, #4
 80114ee:	4413      	add	r3, r2
 80114f0:	681a      	ldr	r2, [r3, #0]
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	429a      	cmp	r2, r3
 80114f8:	d113      	bne.n	8011522 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80114fa:	4a3d      	ldr	r2, [pc, #244]	; (80115f0 <inc_lock+0x118>)
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	011b      	lsls	r3, r3, #4
 8011500:	4413      	add	r3, r2
 8011502:	3304      	adds	r3, #4
 8011504:	681a      	ldr	r2, [r3, #0]
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801150a:	429a      	cmp	r2, r3
 801150c:	d109      	bne.n	8011522 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801150e:	4a38      	ldr	r2, [pc, #224]	; (80115f0 <inc_lock+0x118>)
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	011b      	lsls	r3, r3, #4
 8011514:	4413      	add	r3, r2
 8011516:	3308      	adds	r3, #8
 8011518:	681a      	ldr	r2, [r3, #0]
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801151e:	429a      	cmp	r2, r3
 8011520:	d006      	beq.n	8011530 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	3301      	adds	r3, #1
 8011526:	60fb      	str	r3, [r7, #12]
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	2b01      	cmp	r3, #1
 801152c:	d9dc      	bls.n	80114e8 <inc_lock+0x10>
 801152e:	e000      	b.n	8011532 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011530:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	2b02      	cmp	r3, #2
 8011536:	d132      	bne.n	801159e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011538:	2300      	movs	r3, #0
 801153a:	60fb      	str	r3, [r7, #12]
 801153c:	e002      	b.n	8011544 <inc_lock+0x6c>
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	3301      	adds	r3, #1
 8011542:	60fb      	str	r3, [r7, #12]
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	2b01      	cmp	r3, #1
 8011548:	d806      	bhi.n	8011558 <inc_lock+0x80>
 801154a:	4a29      	ldr	r2, [pc, #164]	; (80115f0 <inc_lock+0x118>)
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	011b      	lsls	r3, r3, #4
 8011550:	4413      	add	r3, r2
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d1f2      	bne.n	801153e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	2b02      	cmp	r3, #2
 801155c:	d101      	bne.n	8011562 <inc_lock+0x8a>
 801155e:	2300      	movs	r3, #0
 8011560:	e040      	b.n	80115e4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681a      	ldr	r2, [r3, #0]
 8011566:	4922      	ldr	r1, [pc, #136]	; (80115f0 <inc_lock+0x118>)
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	011b      	lsls	r3, r3, #4
 801156c:	440b      	add	r3, r1
 801156e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	689a      	ldr	r2, [r3, #8]
 8011574:	491e      	ldr	r1, [pc, #120]	; (80115f0 <inc_lock+0x118>)
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	011b      	lsls	r3, r3, #4
 801157a:	440b      	add	r3, r1
 801157c:	3304      	adds	r3, #4
 801157e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	695a      	ldr	r2, [r3, #20]
 8011584:	491a      	ldr	r1, [pc, #104]	; (80115f0 <inc_lock+0x118>)
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	011b      	lsls	r3, r3, #4
 801158a:	440b      	add	r3, r1
 801158c:	3308      	adds	r3, #8
 801158e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011590:	4a17      	ldr	r2, [pc, #92]	; (80115f0 <inc_lock+0x118>)
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	011b      	lsls	r3, r3, #4
 8011596:	4413      	add	r3, r2
 8011598:	330c      	adds	r3, #12
 801159a:	2200      	movs	r2, #0
 801159c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d009      	beq.n	80115b8 <inc_lock+0xe0>
 80115a4:	4a12      	ldr	r2, [pc, #72]	; (80115f0 <inc_lock+0x118>)
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	011b      	lsls	r3, r3, #4
 80115aa:	4413      	add	r3, r2
 80115ac:	330c      	adds	r3, #12
 80115ae:	881b      	ldrh	r3, [r3, #0]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d001      	beq.n	80115b8 <inc_lock+0xe0>
 80115b4:	2300      	movs	r3, #0
 80115b6:	e015      	b.n	80115e4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d108      	bne.n	80115d0 <inc_lock+0xf8>
 80115be:	4a0c      	ldr	r2, [pc, #48]	; (80115f0 <inc_lock+0x118>)
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	011b      	lsls	r3, r3, #4
 80115c4:	4413      	add	r3, r2
 80115c6:	330c      	adds	r3, #12
 80115c8:	881b      	ldrh	r3, [r3, #0]
 80115ca:	3301      	adds	r3, #1
 80115cc:	b29a      	uxth	r2, r3
 80115ce:	e001      	b.n	80115d4 <inc_lock+0xfc>
 80115d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80115d4:	4906      	ldr	r1, [pc, #24]	; (80115f0 <inc_lock+0x118>)
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	011b      	lsls	r3, r3, #4
 80115da:	440b      	add	r3, r1
 80115dc:	330c      	adds	r3, #12
 80115de:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	3301      	adds	r3, #1
}
 80115e4:	4618      	mov	r0, r3
 80115e6:	3714      	adds	r7, #20
 80115e8:	46bd      	mov	sp, r7
 80115ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ee:	4770      	bx	lr
 80115f0:	2003d4e8 	.word	0x2003d4e8

080115f4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80115f4:	b480      	push	{r7}
 80115f6:	b085      	sub	sp, #20
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	3b01      	subs	r3, #1
 8011600:	607b      	str	r3, [r7, #4]
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2b01      	cmp	r3, #1
 8011606:	d825      	bhi.n	8011654 <dec_lock+0x60>
		n = Files[i].ctr;
 8011608:	4a17      	ldr	r2, [pc, #92]	; (8011668 <dec_lock+0x74>)
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	011b      	lsls	r3, r3, #4
 801160e:	4413      	add	r3, r2
 8011610:	330c      	adds	r3, #12
 8011612:	881b      	ldrh	r3, [r3, #0]
 8011614:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011616:	89fb      	ldrh	r3, [r7, #14]
 8011618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801161c:	d101      	bne.n	8011622 <dec_lock+0x2e>
 801161e:	2300      	movs	r3, #0
 8011620:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011622:	89fb      	ldrh	r3, [r7, #14]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d002      	beq.n	801162e <dec_lock+0x3a>
 8011628:	89fb      	ldrh	r3, [r7, #14]
 801162a:	3b01      	subs	r3, #1
 801162c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801162e:	4a0e      	ldr	r2, [pc, #56]	; (8011668 <dec_lock+0x74>)
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	011b      	lsls	r3, r3, #4
 8011634:	4413      	add	r3, r2
 8011636:	330c      	adds	r3, #12
 8011638:	89fa      	ldrh	r2, [r7, #14]
 801163a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801163c:	89fb      	ldrh	r3, [r7, #14]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d105      	bne.n	801164e <dec_lock+0x5a>
 8011642:	4a09      	ldr	r2, [pc, #36]	; (8011668 <dec_lock+0x74>)
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	011b      	lsls	r3, r3, #4
 8011648:	4413      	add	r3, r2
 801164a:	2200      	movs	r2, #0
 801164c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801164e:	2300      	movs	r3, #0
 8011650:	737b      	strb	r3, [r7, #13]
 8011652:	e001      	b.n	8011658 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011654:	2302      	movs	r3, #2
 8011656:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011658:	7b7b      	ldrb	r3, [r7, #13]
}
 801165a:	4618      	mov	r0, r3
 801165c:	3714      	adds	r7, #20
 801165e:	46bd      	mov	sp, r7
 8011660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011664:	4770      	bx	lr
 8011666:	bf00      	nop
 8011668:	2003d4e8 	.word	0x2003d4e8

0801166c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801166c:	b480      	push	{r7}
 801166e:	b085      	sub	sp, #20
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011674:	2300      	movs	r3, #0
 8011676:	60fb      	str	r3, [r7, #12]
 8011678:	e010      	b.n	801169c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801167a:	4a0d      	ldr	r2, [pc, #52]	; (80116b0 <clear_lock+0x44>)
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	011b      	lsls	r3, r3, #4
 8011680:	4413      	add	r3, r2
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	687a      	ldr	r2, [r7, #4]
 8011686:	429a      	cmp	r2, r3
 8011688:	d105      	bne.n	8011696 <clear_lock+0x2a>
 801168a:	4a09      	ldr	r2, [pc, #36]	; (80116b0 <clear_lock+0x44>)
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	011b      	lsls	r3, r3, #4
 8011690:	4413      	add	r3, r2
 8011692:	2200      	movs	r2, #0
 8011694:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	3301      	adds	r3, #1
 801169a:	60fb      	str	r3, [r7, #12]
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	2b01      	cmp	r3, #1
 80116a0:	d9eb      	bls.n	801167a <clear_lock+0xe>
	}
}
 80116a2:	bf00      	nop
 80116a4:	bf00      	nop
 80116a6:	3714      	adds	r7, #20
 80116a8:	46bd      	mov	sp, r7
 80116aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ae:	4770      	bx	lr
 80116b0:	2003d4e8 	.word	0x2003d4e8

080116b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b086      	sub	sp, #24
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80116bc:	2300      	movs	r3, #0
 80116be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	78db      	ldrb	r3, [r3, #3]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d034      	beq.n	8011732 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116cc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	7858      	ldrb	r0, [r3, #1]
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80116d8:	2301      	movs	r3, #1
 80116da:	697a      	ldr	r2, [r7, #20]
 80116dc:	f7ff fd40 	bl	8011160 <disk_write>
 80116e0:	4603      	mov	r3, r0
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d002      	beq.n	80116ec <sync_window+0x38>
			res = FR_DISK_ERR;
 80116e6:	2301      	movs	r3, #1
 80116e8:	73fb      	strb	r3, [r7, #15]
 80116ea:	e022      	b.n	8011732 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	2200      	movs	r2, #0
 80116f0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116f6:	697a      	ldr	r2, [r7, #20]
 80116f8:	1ad2      	subs	r2, r2, r3
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	6a1b      	ldr	r3, [r3, #32]
 80116fe:	429a      	cmp	r2, r3
 8011700:	d217      	bcs.n	8011732 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	789b      	ldrb	r3, [r3, #2]
 8011706:	613b      	str	r3, [r7, #16]
 8011708:	e010      	b.n	801172c <sync_window+0x78>
					wsect += fs->fsize;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	6a1b      	ldr	r3, [r3, #32]
 801170e:	697a      	ldr	r2, [r7, #20]
 8011710:	4413      	add	r3, r2
 8011712:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	7858      	ldrb	r0, [r3, #1]
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801171e:	2301      	movs	r3, #1
 8011720:	697a      	ldr	r2, [r7, #20]
 8011722:	f7ff fd1d 	bl	8011160 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011726:	693b      	ldr	r3, [r7, #16]
 8011728:	3b01      	subs	r3, #1
 801172a:	613b      	str	r3, [r7, #16]
 801172c:	693b      	ldr	r3, [r7, #16]
 801172e:	2b01      	cmp	r3, #1
 8011730:	d8eb      	bhi.n	801170a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011732:	7bfb      	ldrb	r3, [r7, #15]
}
 8011734:	4618      	mov	r0, r3
 8011736:	3718      	adds	r7, #24
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}

0801173c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b084      	sub	sp, #16
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011746:	2300      	movs	r3, #0
 8011748:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801174e:	683a      	ldr	r2, [r7, #0]
 8011750:	429a      	cmp	r2, r3
 8011752:	d01b      	beq.n	801178c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f7ff ffad 	bl	80116b4 <sync_window>
 801175a:	4603      	mov	r3, r0
 801175c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801175e:	7bfb      	ldrb	r3, [r7, #15]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d113      	bne.n	801178c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	7858      	ldrb	r0, [r3, #1]
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801176e:	2301      	movs	r3, #1
 8011770:	683a      	ldr	r2, [r7, #0]
 8011772:	f7ff fcd5 	bl	8011120 <disk_read>
 8011776:	4603      	mov	r3, r0
 8011778:	2b00      	cmp	r3, #0
 801177a:	d004      	beq.n	8011786 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801177c:	f04f 33ff 	mov.w	r3, #4294967295
 8011780:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011782:	2301      	movs	r3, #1
 8011784:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	683a      	ldr	r2, [r7, #0]
 801178a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 801178c:	7bfb      	ldrb	r3, [r7, #15]
}
 801178e:	4618      	mov	r0, r3
 8011790:	3710      	adds	r7, #16
 8011792:	46bd      	mov	sp, r7
 8011794:	bd80      	pop	{r7, pc}
	...

08011798 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b084      	sub	sp, #16
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80117a0:	6878      	ldr	r0, [r7, #4]
 80117a2:	f7ff ff87 	bl	80116b4 <sync_window>
 80117a6:	4603      	mov	r3, r0
 80117a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80117aa:	7bfb      	ldrb	r3, [r7, #15]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d159      	bne.n	8011864 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	781b      	ldrb	r3, [r3, #0]
 80117b4:	2b03      	cmp	r3, #3
 80117b6:	d149      	bne.n	801184c <sync_fs+0xb4>
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	791b      	ldrb	r3, [r3, #4]
 80117bc:	2b01      	cmp	r3, #1
 80117be:	d145      	bne.n	801184c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	899b      	ldrh	r3, [r3, #12]
 80117ca:	461a      	mov	r2, r3
 80117cc:	2100      	movs	r1, #0
 80117ce:	f7ff fda8 	bl	8011322 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	3338      	adds	r3, #56	; 0x38
 80117d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80117da:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80117de:	4618      	mov	r0, r3
 80117e0:	f7ff fd37 	bl	8011252 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	3338      	adds	r3, #56	; 0x38
 80117e8:	4921      	ldr	r1, [pc, #132]	; (8011870 <sync_fs+0xd8>)
 80117ea:	4618      	mov	r0, r3
 80117ec:	f7ff fd4c 	bl	8011288 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	3338      	adds	r3, #56	; 0x38
 80117f4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80117f8:	491e      	ldr	r1, [pc, #120]	; (8011874 <sync_fs+0xdc>)
 80117fa:	4618      	mov	r0, r3
 80117fc:	f7ff fd44 	bl	8011288 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	3338      	adds	r3, #56	; 0x38
 8011804:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	695b      	ldr	r3, [r3, #20]
 801180c:	4619      	mov	r1, r3
 801180e:	4610      	mov	r0, r2
 8011810:	f7ff fd3a 	bl	8011288 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	3338      	adds	r3, #56	; 0x38
 8011818:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	691b      	ldr	r3, [r3, #16]
 8011820:	4619      	mov	r1, r3
 8011822:	4610      	mov	r0, r2
 8011824:	f7ff fd30 	bl	8011288 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801182c:	1c5a      	adds	r2, r3, #1
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	7858      	ldrb	r0, [r3, #1]
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011840:	2301      	movs	r3, #1
 8011842:	f7ff fc8d 	bl	8011160 <disk_write>
			fs->fsi_flag = 0;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	2200      	movs	r2, #0
 801184a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	785b      	ldrb	r3, [r3, #1]
 8011850:	2200      	movs	r2, #0
 8011852:	2100      	movs	r1, #0
 8011854:	4618      	mov	r0, r3
 8011856:	f7ff fca3 	bl	80111a0 <disk_ioctl>
 801185a:	4603      	mov	r3, r0
 801185c:	2b00      	cmp	r3, #0
 801185e:	d001      	beq.n	8011864 <sync_fs+0xcc>
 8011860:	2301      	movs	r3, #1
 8011862:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011864:	7bfb      	ldrb	r3, [r7, #15]
}
 8011866:	4618      	mov	r0, r3
 8011868:	3710      	adds	r7, #16
 801186a:	46bd      	mov	sp, r7
 801186c:	bd80      	pop	{r7, pc}
 801186e:	bf00      	nop
 8011870:	41615252 	.word	0x41615252
 8011874:	61417272 	.word	0x61417272

08011878 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011878:	b480      	push	{r7}
 801187a:	b083      	sub	sp, #12
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
 8011880:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	3b02      	subs	r3, #2
 8011886:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	69db      	ldr	r3, [r3, #28]
 801188c:	3b02      	subs	r3, #2
 801188e:	683a      	ldr	r2, [r7, #0]
 8011890:	429a      	cmp	r2, r3
 8011892:	d301      	bcc.n	8011898 <clust2sect+0x20>
 8011894:	2300      	movs	r3, #0
 8011896:	e008      	b.n	80118aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	895b      	ldrh	r3, [r3, #10]
 801189c:	461a      	mov	r2, r3
 801189e:	683b      	ldr	r3, [r7, #0]
 80118a0:	fb03 f202 	mul.w	r2, r3, r2
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118a8:	4413      	add	r3, r2
}
 80118aa:	4618      	mov	r0, r3
 80118ac:	370c      	adds	r7, #12
 80118ae:	46bd      	mov	sp, r7
 80118b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b4:	4770      	bx	lr

080118b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80118b6:	b580      	push	{r7, lr}
 80118b8:	b086      	sub	sp, #24
 80118ba:	af00      	add	r7, sp, #0
 80118bc:	6078      	str	r0, [r7, #4]
 80118be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	2b01      	cmp	r3, #1
 80118ca:	d904      	bls.n	80118d6 <get_fat+0x20>
 80118cc:	693b      	ldr	r3, [r7, #16]
 80118ce:	69db      	ldr	r3, [r3, #28]
 80118d0:	683a      	ldr	r2, [r7, #0]
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d302      	bcc.n	80118dc <get_fat+0x26>
		val = 1;	/* Internal error */
 80118d6:	2301      	movs	r3, #1
 80118d8:	617b      	str	r3, [r7, #20]
 80118da:	e0bb      	b.n	8011a54 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80118dc:	f04f 33ff 	mov.w	r3, #4294967295
 80118e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80118e2:	693b      	ldr	r3, [r7, #16]
 80118e4:	781b      	ldrb	r3, [r3, #0]
 80118e6:	2b03      	cmp	r3, #3
 80118e8:	f000 8083 	beq.w	80119f2 <get_fat+0x13c>
 80118ec:	2b03      	cmp	r3, #3
 80118ee:	f300 80a7 	bgt.w	8011a40 <get_fat+0x18a>
 80118f2:	2b01      	cmp	r3, #1
 80118f4:	d002      	beq.n	80118fc <get_fat+0x46>
 80118f6:	2b02      	cmp	r3, #2
 80118f8:	d056      	beq.n	80119a8 <get_fat+0xf2>
 80118fa:	e0a1      	b.n	8011a40 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	60fb      	str	r3, [r7, #12]
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	085b      	lsrs	r3, r3, #1
 8011904:	68fa      	ldr	r2, [r7, #12]
 8011906:	4413      	add	r3, r2
 8011908:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801190a:	693b      	ldr	r3, [r7, #16]
 801190c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801190e:	693b      	ldr	r3, [r7, #16]
 8011910:	899b      	ldrh	r3, [r3, #12]
 8011912:	4619      	mov	r1, r3
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	fbb3 f3f1 	udiv	r3, r3, r1
 801191a:	4413      	add	r3, r2
 801191c:	4619      	mov	r1, r3
 801191e:	6938      	ldr	r0, [r7, #16]
 8011920:	f7ff ff0c 	bl	801173c <move_window>
 8011924:	4603      	mov	r3, r0
 8011926:	2b00      	cmp	r3, #0
 8011928:	f040 808d 	bne.w	8011a46 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	1c5a      	adds	r2, r3, #1
 8011930:	60fa      	str	r2, [r7, #12]
 8011932:	693a      	ldr	r2, [r7, #16]
 8011934:	8992      	ldrh	r2, [r2, #12]
 8011936:	fbb3 f1f2 	udiv	r1, r3, r2
 801193a:	fb02 f201 	mul.w	r2, r2, r1
 801193e:	1a9b      	subs	r3, r3, r2
 8011940:	693a      	ldr	r2, [r7, #16]
 8011942:	4413      	add	r3, r2
 8011944:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011948:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801194a:	693b      	ldr	r3, [r7, #16]
 801194c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801194e:	693b      	ldr	r3, [r7, #16]
 8011950:	899b      	ldrh	r3, [r3, #12]
 8011952:	4619      	mov	r1, r3
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	fbb3 f3f1 	udiv	r3, r3, r1
 801195a:	4413      	add	r3, r2
 801195c:	4619      	mov	r1, r3
 801195e:	6938      	ldr	r0, [r7, #16]
 8011960:	f7ff feec 	bl	801173c <move_window>
 8011964:	4603      	mov	r3, r0
 8011966:	2b00      	cmp	r3, #0
 8011968:	d16f      	bne.n	8011a4a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	899b      	ldrh	r3, [r3, #12]
 801196e:	461a      	mov	r2, r3
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	fbb3 f1f2 	udiv	r1, r3, r2
 8011976:	fb02 f201 	mul.w	r2, r2, r1
 801197a:	1a9b      	subs	r3, r3, r2
 801197c:	693a      	ldr	r2, [r7, #16]
 801197e:	4413      	add	r3, r2
 8011980:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011984:	021b      	lsls	r3, r3, #8
 8011986:	461a      	mov	r2, r3
 8011988:	68bb      	ldr	r3, [r7, #8]
 801198a:	4313      	orrs	r3, r2
 801198c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	f003 0301 	and.w	r3, r3, #1
 8011994:	2b00      	cmp	r3, #0
 8011996:	d002      	beq.n	801199e <get_fat+0xe8>
 8011998:	68bb      	ldr	r3, [r7, #8]
 801199a:	091b      	lsrs	r3, r3, #4
 801199c:	e002      	b.n	80119a4 <get_fat+0xee>
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80119a4:	617b      	str	r3, [r7, #20]
			break;
 80119a6:	e055      	b.n	8011a54 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80119ac:	693b      	ldr	r3, [r7, #16]
 80119ae:	899b      	ldrh	r3, [r3, #12]
 80119b0:	085b      	lsrs	r3, r3, #1
 80119b2:	b29b      	uxth	r3, r3
 80119b4:	4619      	mov	r1, r3
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80119bc:	4413      	add	r3, r2
 80119be:	4619      	mov	r1, r3
 80119c0:	6938      	ldr	r0, [r7, #16]
 80119c2:	f7ff febb 	bl	801173c <move_window>
 80119c6:	4603      	mov	r3, r0
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d140      	bne.n	8011a4e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80119cc:	693b      	ldr	r3, [r7, #16]
 80119ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	005b      	lsls	r3, r3, #1
 80119d6:	693a      	ldr	r2, [r7, #16]
 80119d8:	8992      	ldrh	r2, [r2, #12]
 80119da:	fbb3 f0f2 	udiv	r0, r3, r2
 80119de:	fb02 f200 	mul.w	r2, r2, r0
 80119e2:	1a9b      	subs	r3, r3, r2
 80119e4:	440b      	add	r3, r1
 80119e6:	4618      	mov	r0, r3
 80119e8:	f7ff fbf8 	bl	80111dc <ld_word>
 80119ec:	4603      	mov	r3, r0
 80119ee:	617b      	str	r3, [r7, #20]
			break;
 80119f0:	e030      	b.n	8011a54 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80119f2:	693b      	ldr	r3, [r7, #16]
 80119f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80119f6:	693b      	ldr	r3, [r7, #16]
 80119f8:	899b      	ldrh	r3, [r3, #12]
 80119fa:	089b      	lsrs	r3, r3, #2
 80119fc:	b29b      	uxth	r3, r3
 80119fe:	4619      	mov	r1, r3
 8011a00:	683b      	ldr	r3, [r7, #0]
 8011a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8011a06:	4413      	add	r3, r2
 8011a08:	4619      	mov	r1, r3
 8011a0a:	6938      	ldr	r0, [r7, #16]
 8011a0c:	f7ff fe96 	bl	801173c <move_window>
 8011a10:	4603      	mov	r3, r0
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d11d      	bne.n	8011a52 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011a16:	693b      	ldr	r3, [r7, #16]
 8011a18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	009b      	lsls	r3, r3, #2
 8011a20:	693a      	ldr	r2, [r7, #16]
 8011a22:	8992      	ldrh	r2, [r2, #12]
 8011a24:	fbb3 f0f2 	udiv	r0, r3, r2
 8011a28:	fb02 f200 	mul.w	r2, r2, r0
 8011a2c:	1a9b      	subs	r3, r3, r2
 8011a2e:	440b      	add	r3, r1
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7ff fbeb 	bl	801120c <ld_dword>
 8011a36:	4603      	mov	r3, r0
 8011a38:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011a3c:	617b      	str	r3, [r7, #20]
			break;
 8011a3e:	e009      	b.n	8011a54 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011a40:	2301      	movs	r3, #1
 8011a42:	617b      	str	r3, [r7, #20]
 8011a44:	e006      	b.n	8011a54 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011a46:	bf00      	nop
 8011a48:	e004      	b.n	8011a54 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011a4a:	bf00      	nop
 8011a4c:	e002      	b.n	8011a54 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011a4e:	bf00      	nop
 8011a50:	e000      	b.n	8011a54 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011a52:	bf00      	nop
		}
	}

	return val;
 8011a54:	697b      	ldr	r3, [r7, #20]
}
 8011a56:	4618      	mov	r0, r3
 8011a58:	3718      	adds	r7, #24
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	bd80      	pop	{r7, pc}

08011a5e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011a5e:	b590      	push	{r4, r7, lr}
 8011a60:	b089      	sub	sp, #36	; 0x24
 8011a62:	af00      	add	r7, sp, #0
 8011a64:	60f8      	str	r0, [r7, #12]
 8011a66:	60b9      	str	r1, [r7, #8]
 8011a68:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011a6a:	2302      	movs	r3, #2
 8011a6c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011a6e:	68bb      	ldr	r3, [r7, #8]
 8011a70:	2b01      	cmp	r3, #1
 8011a72:	f240 8102 	bls.w	8011c7a <put_fat+0x21c>
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	69db      	ldr	r3, [r3, #28]
 8011a7a:	68ba      	ldr	r2, [r7, #8]
 8011a7c:	429a      	cmp	r2, r3
 8011a7e:	f080 80fc 	bcs.w	8011c7a <put_fat+0x21c>
		switch (fs->fs_type) {
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	781b      	ldrb	r3, [r3, #0]
 8011a86:	2b03      	cmp	r3, #3
 8011a88:	f000 80b6 	beq.w	8011bf8 <put_fat+0x19a>
 8011a8c:	2b03      	cmp	r3, #3
 8011a8e:	f300 80fd 	bgt.w	8011c8c <put_fat+0x22e>
 8011a92:	2b01      	cmp	r3, #1
 8011a94:	d003      	beq.n	8011a9e <put_fat+0x40>
 8011a96:	2b02      	cmp	r3, #2
 8011a98:	f000 8083 	beq.w	8011ba2 <put_fat+0x144>
 8011a9c:	e0f6      	b.n	8011c8c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	61bb      	str	r3, [r7, #24]
 8011aa2:	69bb      	ldr	r3, [r7, #24]
 8011aa4:	085b      	lsrs	r3, r3, #1
 8011aa6:	69ba      	ldr	r2, [r7, #24]
 8011aa8:	4413      	add	r3, r2
 8011aaa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	899b      	ldrh	r3, [r3, #12]
 8011ab4:	4619      	mov	r1, r3
 8011ab6:	69bb      	ldr	r3, [r7, #24]
 8011ab8:	fbb3 f3f1 	udiv	r3, r3, r1
 8011abc:	4413      	add	r3, r2
 8011abe:	4619      	mov	r1, r3
 8011ac0:	68f8      	ldr	r0, [r7, #12]
 8011ac2:	f7ff fe3b 	bl	801173c <move_window>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011aca:	7ffb      	ldrb	r3, [r7, #31]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	f040 80d6 	bne.w	8011c7e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011ad8:	69bb      	ldr	r3, [r7, #24]
 8011ada:	1c5a      	adds	r2, r3, #1
 8011adc:	61ba      	str	r2, [r7, #24]
 8011ade:	68fa      	ldr	r2, [r7, #12]
 8011ae0:	8992      	ldrh	r2, [r2, #12]
 8011ae2:	fbb3 f0f2 	udiv	r0, r3, r2
 8011ae6:	fb02 f200 	mul.w	r2, r2, r0
 8011aea:	1a9b      	subs	r3, r3, r2
 8011aec:	440b      	add	r3, r1
 8011aee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011af0:	68bb      	ldr	r3, [r7, #8]
 8011af2:	f003 0301 	and.w	r3, r3, #1
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d00d      	beq.n	8011b16 <put_fat+0xb8>
 8011afa:	697b      	ldr	r3, [r7, #20]
 8011afc:	781b      	ldrb	r3, [r3, #0]
 8011afe:	b25b      	sxtb	r3, r3
 8011b00:	f003 030f 	and.w	r3, r3, #15
 8011b04:	b25a      	sxtb	r2, r3
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	b2db      	uxtb	r3, r3
 8011b0a:	011b      	lsls	r3, r3, #4
 8011b0c:	b25b      	sxtb	r3, r3
 8011b0e:	4313      	orrs	r3, r2
 8011b10:	b25b      	sxtb	r3, r3
 8011b12:	b2db      	uxtb	r3, r3
 8011b14:	e001      	b.n	8011b1a <put_fat+0xbc>
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	b2db      	uxtb	r3, r3
 8011b1a:	697a      	ldr	r2, [r7, #20]
 8011b1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	2201      	movs	r2, #1
 8011b22:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	899b      	ldrh	r3, [r3, #12]
 8011b2c:	4619      	mov	r1, r3
 8011b2e:	69bb      	ldr	r3, [r7, #24]
 8011b30:	fbb3 f3f1 	udiv	r3, r3, r1
 8011b34:	4413      	add	r3, r2
 8011b36:	4619      	mov	r1, r3
 8011b38:	68f8      	ldr	r0, [r7, #12]
 8011b3a:	f7ff fdff 	bl	801173c <move_window>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011b42:	7ffb      	ldrb	r3, [r7, #31]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	f040 809c 	bne.w	8011c82 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	899b      	ldrh	r3, [r3, #12]
 8011b54:	461a      	mov	r2, r3
 8011b56:	69bb      	ldr	r3, [r7, #24]
 8011b58:	fbb3 f0f2 	udiv	r0, r3, r2
 8011b5c:	fb02 f200 	mul.w	r2, r2, r0
 8011b60:	1a9b      	subs	r3, r3, r2
 8011b62:	440b      	add	r3, r1
 8011b64:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011b66:	68bb      	ldr	r3, [r7, #8]
 8011b68:	f003 0301 	and.w	r3, r3, #1
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d003      	beq.n	8011b78 <put_fat+0x11a>
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	091b      	lsrs	r3, r3, #4
 8011b74:	b2db      	uxtb	r3, r3
 8011b76:	e00e      	b.n	8011b96 <put_fat+0x138>
 8011b78:	697b      	ldr	r3, [r7, #20]
 8011b7a:	781b      	ldrb	r3, [r3, #0]
 8011b7c:	b25b      	sxtb	r3, r3
 8011b7e:	f023 030f 	bic.w	r3, r3, #15
 8011b82:	b25a      	sxtb	r2, r3
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	0a1b      	lsrs	r3, r3, #8
 8011b88:	b25b      	sxtb	r3, r3
 8011b8a:	f003 030f 	and.w	r3, r3, #15
 8011b8e:	b25b      	sxtb	r3, r3
 8011b90:	4313      	orrs	r3, r2
 8011b92:	b25b      	sxtb	r3, r3
 8011b94:	b2db      	uxtb	r3, r3
 8011b96:	697a      	ldr	r2, [r7, #20]
 8011b98:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	2201      	movs	r2, #1
 8011b9e:	70da      	strb	r2, [r3, #3]
			break;
 8011ba0:	e074      	b.n	8011c8c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	899b      	ldrh	r3, [r3, #12]
 8011baa:	085b      	lsrs	r3, r3, #1
 8011bac:	b29b      	uxth	r3, r3
 8011bae:	4619      	mov	r1, r3
 8011bb0:	68bb      	ldr	r3, [r7, #8]
 8011bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8011bb6:	4413      	add	r3, r2
 8011bb8:	4619      	mov	r1, r3
 8011bba:	68f8      	ldr	r0, [r7, #12]
 8011bbc:	f7ff fdbe 	bl	801173c <move_window>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011bc4:	7ffb      	ldrb	r3, [r7, #31]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d15d      	bne.n	8011c86 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011bd0:	68bb      	ldr	r3, [r7, #8]
 8011bd2:	005b      	lsls	r3, r3, #1
 8011bd4:	68fa      	ldr	r2, [r7, #12]
 8011bd6:	8992      	ldrh	r2, [r2, #12]
 8011bd8:	fbb3 f0f2 	udiv	r0, r3, r2
 8011bdc:	fb02 f200 	mul.w	r2, r2, r0
 8011be0:	1a9b      	subs	r3, r3, r2
 8011be2:	440b      	add	r3, r1
 8011be4:	687a      	ldr	r2, [r7, #4]
 8011be6:	b292      	uxth	r2, r2
 8011be8:	4611      	mov	r1, r2
 8011bea:	4618      	mov	r0, r3
 8011bec:	f7ff fb31 	bl	8011252 <st_word>
			fs->wflag = 1;
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	2201      	movs	r2, #1
 8011bf4:	70da      	strb	r2, [r3, #3]
			break;
 8011bf6:	e049      	b.n	8011c8c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	899b      	ldrh	r3, [r3, #12]
 8011c00:	089b      	lsrs	r3, r3, #2
 8011c02:	b29b      	uxth	r3, r3
 8011c04:	4619      	mov	r1, r3
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c0c:	4413      	add	r3, r2
 8011c0e:	4619      	mov	r1, r3
 8011c10:	68f8      	ldr	r0, [r7, #12]
 8011c12:	f7ff fd93 	bl	801173c <move_window>
 8011c16:	4603      	mov	r3, r0
 8011c18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011c1a:	7ffb      	ldrb	r3, [r7, #31]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d134      	bne.n	8011c8a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c2c:	68bb      	ldr	r3, [r7, #8]
 8011c2e:	009b      	lsls	r3, r3, #2
 8011c30:	68fa      	ldr	r2, [r7, #12]
 8011c32:	8992      	ldrh	r2, [r2, #12]
 8011c34:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c38:	fb02 f200 	mul.w	r2, r2, r0
 8011c3c:	1a9b      	subs	r3, r3, r2
 8011c3e:	440b      	add	r3, r1
 8011c40:	4618      	mov	r0, r3
 8011c42:	f7ff fae3 	bl	801120c <ld_dword>
 8011c46:	4603      	mov	r3, r0
 8011c48:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011c4c:	4323      	orrs	r3, r4
 8011c4e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c56:	68bb      	ldr	r3, [r7, #8]
 8011c58:	009b      	lsls	r3, r3, #2
 8011c5a:	68fa      	ldr	r2, [r7, #12]
 8011c5c:	8992      	ldrh	r2, [r2, #12]
 8011c5e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c62:	fb02 f200 	mul.w	r2, r2, r0
 8011c66:	1a9b      	subs	r3, r3, r2
 8011c68:	440b      	add	r3, r1
 8011c6a:	6879      	ldr	r1, [r7, #4]
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	f7ff fb0b 	bl	8011288 <st_dword>
			fs->wflag = 1;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	2201      	movs	r2, #1
 8011c76:	70da      	strb	r2, [r3, #3]
			break;
 8011c78:	e008      	b.n	8011c8c <put_fat+0x22e>
		}
	}
 8011c7a:	bf00      	nop
 8011c7c:	e006      	b.n	8011c8c <put_fat+0x22e>
			if (res != FR_OK) break;
 8011c7e:	bf00      	nop
 8011c80:	e004      	b.n	8011c8c <put_fat+0x22e>
			if (res != FR_OK) break;
 8011c82:	bf00      	nop
 8011c84:	e002      	b.n	8011c8c <put_fat+0x22e>
			if (res != FR_OK) break;
 8011c86:	bf00      	nop
 8011c88:	e000      	b.n	8011c8c <put_fat+0x22e>
			if (res != FR_OK) break;
 8011c8a:	bf00      	nop
	return res;
 8011c8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8011c8e:	4618      	mov	r0, r3
 8011c90:	3724      	adds	r7, #36	; 0x24
 8011c92:	46bd      	mov	sp, r7
 8011c94:	bd90      	pop	{r4, r7, pc}

08011c96 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011c96:	b580      	push	{r7, lr}
 8011c98:	b088      	sub	sp, #32
 8011c9a:	af00      	add	r7, sp, #0
 8011c9c:	60f8      	str	r0, [r7, #12]
 8011c9e:	60b9      	str	r1, [r7, #8]
 8011ca0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	2b01      	cmp	r3, #1
 8011cb0:	d904      	bls.n	8011cbc <remove_chain+0x26>
 8011cb2:	69bb      	ldr	r3, [r7, #24]
 8011cb4:	69db      	ldr	r3, [r3, #28]
 8011cb6:	68ba      	ldr	r2, [r7, #8]
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	d301      	bcc.n	8011cc0 <remove_chain+0x2a>
 8011cbc:	2302      	movs	r3, #2
 8011cbe:	e04b      	b.n	8011d58 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d00c      	beq.n	8011ce0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8011cca:	6879      	ldr	r1, [r7, #4]
 8011ccc:	69b8      	ldr	r0, [r7, #24]
 8011cce:	f7ff fec6 	bl	8011a5e <put_fat>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011cd6:	7ffb      	ldrb	r3, [r7, #31]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d001      	beq.n	8011ce0 <remove_chain+0x4a>
 8011cdc:	7ffb      	ldrb	r3, [r7, #31]
 8011cde:	e03b      	b.n	8011d58 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011ce0:	68b9      	ldr	r1, [r7, #8]
 8011ce2:	68f8      	ldr	r0, [r7, #12]
 8011ce4:	f7ff fde7 	bl	80118b6 <get_fat>
 8011ce8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d031      	beq.n	8011d54 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	2b01      	cmp	r3, #1
 8011cf4:	d101      	bne.n	8011cfa <remove_chain+0x64>
 8011cf6:	2302      	movs	r3, #2
 8011cf8:	e02e      	b.n	8011d58 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011cfa:	697b      	ldr	r3, [r7, #20]
 8011cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d00:	d101      	bne.n	8011d06 <remove_chain+0x70>
 8011d02:	2301      	movs	r3, #1
 8011d04:	e028      	b.n	8011d58 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011d06:	2200      	movs	r2, #0
 8011d08:	68b9      	ldr	r1, [r7, #8]
 8011d0a:	69b8      	ldr	r0, [r7, #24]
 8011d0c:	f7ff fea7 	bl	8011a5e <put_fat>
 8011d10:	4603      	mov	r3, r0
 8011d12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011d14:	7ffb      	ldrb	r3, [r7, #31]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d001      	beq.n	8011d1e <remove_chain+0x88>
 8011d1a:	7ffb      	ldrb	r3, [r7, #31]
 8011d1c:	e01c      	b.n	8011d58 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011d1e:	69bb      	ldr	r3, [r7, #24]
 8011d20:	695a      	ldr	r2, [r3, #20]
 8011d22:	69bb      	ldr	r3, [r7, #24]
 8011d24:	69db      	ldr	r3, [r3, #28]
 8011d26:	3b02      	subs	r3, #2
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d20b      	bcs.n	8011d44 <remove_chain+0xae>
			fs->free_clst++;
 8011d2c:	69bb      	ldr	r3, [r7, #24]
 8011d2e:	695b      	ldr	r3, [r3, #20]
 8011d30:	1c5a      	adds	r2, r3, #1
 8011d32:	69bb      	ldr	r3, [r7, #24]
 8011d34:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011d36:	69bb      	ldr	r3, [r7, #24]
 8011d38:	791b      	ldrb	r3, [r3, #4]
 8011d3a:	f043 0301 	orr.w	r3, r3, #1
 8011d3e:	b2da      	uxtb	r2, r3
 8011d40:	69bb      	ldr	r3, [r7, #24]
 8011d42:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011d48:	69bb      	ldr	r3, [r7, #24]
 8011d4a:	69db      	ldr	r3, [r3, #28]
 8011d4c:	68ba      	ldr	r2, [r7, #8]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d3c6      	bcc.n	8011ce0 <remove_chain+0x4a>
 8011d52:	e000      	b.n	8011d56 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011d54:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011d56:	2300      	movs	r3, #0
}
 8011d58:	4618      	mov	r0, r3
 8011d5a:	3720      	adds	r7, #32
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	bd80      	pop	{r7, pc}

08011d60 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b088      	sub	sp, #32
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
 8011d68:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d10d      	bne.n	8011d92 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011d76:	693b      	ldr	r3, [r7, #16]
 8011d78:	691b      	ldr	r3, [r3, #16]
 8011d7a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011d7c:	69bb      	ldr	r3, [r7, #24]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d004      	beq.n	8011d8c <create_chain+0x2c>
 8011d82:	693b      	ldr	r3, [r7, #16]
 8011d84:	69db      	ldr	r3, [r3, #28]
 8011d86:	69ba      	ldr	r2, [r7, #24]
 8011d88:	429a      	cmp	r2, r3
 8011d8a:	d31b      	bcc.n	8011dc4 <create_chain+0x64>
 8011d8c:	2301      	movs	r3, #1
 8011d8e:	61bb      	str	r3, [r7, #24]
 8011d90:	e018      	b.n	8011dc4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011d92:	6839      	ldr	r1, [r7, #0]
 8011d94:	6878      	ldr	r0, [r7, #4]
 8011d96:	f7ff fd8e 	bl	80118b6 <get_fat>
 8011d9a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	2b01      	cmp	r3, #1
 8011da0:	d801      	bhi.n	8011da6 <create_chain+0x46>
 8011da2:	2301      	movs	r3, #1
 8011da4:	e070      	b.n	8011e88 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dac:	d101      	bne.n	8011db2 <create_chain+0x52>
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	e06a      	b.n	8011e88 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011db2:	693b      	ldr	r3, [r7, #16]
 8011db4:	69db      	ldr	r3, [r3, #28]
 8011db6:	68fa      	ldr	r2, [r7, #12]
 8011db8:	429a      	cmp	r2, r3
 8011dba:	d201      	bcs.n	8011dc0 <create_chain+0x60>
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	e063      	b.n	8011e88 <create_chain+0x128>
		scl = clst;
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011dc4:	69bb      	ldr	r3, [r7, #24]
 8011dc6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011dc8:	69fb      	ldr	r3, [r7, #28]
 8011dca:	3301      	adds	r3, #1
 8011dcc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011dce:	693b      	ldr	r3, [r7, #16]
 8011dd0:	69db      	ldr	r3, [r3, #28]
 8011dd2:	69fa      	ldr	r2, [r7, #28]
 8011dd4:	429a      	cmp	r2, r3
 8011dd6:	d307      	bcc.n	8011de8 <create_chain+0x88>
				ncl = 2;
 8011dd8:	2302      	movs	r3, #2
 8011dda:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011ddc:	69fa      	ldr	r2, [r7, #28]
 8011dde:	69bb      	ldr	r3, [r7, #24]
 8011de0:	429a      	cmp	r2, r3
 8011de2:	d901      	bls.n	8011de8 <create_chain+0x88>
 8011de4:	2300      	movs	r3, #0
 8011de6:	e04f      	b.n	8011e88 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011de8:	69f9      	ldr	r1, [r7, #28]
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f7ff fd63 	bl	80118b6 <get_fat>
 8011df0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d00e      	beq.n	8011e16 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	2b01      	cmp	r3, #1
 8011dfc:	d003      	beq.n	8011e06 <create_chain+0xa6>
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e04:	d101      	bne.n	8011e0a <create_chain+0xaa>
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	e03e      	b.n	8011e88 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011e0a:	69fa      	ldr	r2, [r7, #28]
 8011e0c:	69bb      	ldr	r3, [r7, #24]
 8011e0e:	429a      	cmp	r2, r3
 8011e10:	d1da      	bne.n	8011dc8 <create_chain+0x68>
 8011e12:	2300      	movs	r3, #0
 8011e14:	e038      	b.n	8011e88 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011e16:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011e18:	f04f 32ff 	mov.w	r2, #4294967295
 8011e1c:	69f9      	ldr	r1, [r7, #28]
 8011e1e:	6938      	ldr	r0, [r7, #16]
 8011e20:	f7ff fe1d 	bl	8011a5e <put_fat>
 8011e24:	4603      	mov	r3, r0
 8011e26:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011e28:	7dfb      	ldrb	r3, [r7, #23]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d109      	bne.n	8011e42 <create_chain+0xe2>
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d006      	beq.n	8011e42 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011e34:	69fa      	ldr	r2, [r7, #28]
 8011e36:	6839      	ldr	r1, [r7, #0]
 8011e38:	6938      	ldr	r0, [r7, #16]
 8011e3a:	f7ff fe10 	bl	8011a5e <put_fat>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011e42:	7dfb      	ldrb	r3, [r7, #23]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d116      	bne.n	8011e76 <create_chain+0x116>
		fs->last_clst = ncl;
 8011e48:	693b      	ldr	r3, [r7, #16]
 8011e4a:	69fa      	ldr	r2, [r7, #28]
 8011e4c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011e4e:	693b      	ldr	r3, [r7, #16]
 8011e50:	695a      	ldr	r2, [r3, #20]
 8011e52:	693b      	ldr	r3, [r7, #16]
 8011e54:	69db      	ldr	r3, [r3, #28]
 8011e56:	3b02      	subs	r3, #2
 8011e58:	429a      	cmp	r2, r3
 8011e5a:	d804      	bhi.n	8011e66 <create_chain+0x106>
 8011e5c:	693b      	ldr	r3, [r7, #16]
 8011e5e:	695b      	ldr	r3, [r3, #20]
 8011e60:	1e5a      	subs	r2, r3, #1
 8011e62:	693b      	ldr	r3, [r7, #16]
 8011e64:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011e66:	693b      	ldr	r3, [r7, #16]
 8011e68:	791b      	ldrb	r3, [r3, #4]
 8011e6a:	f043 0301 	orr.w	r3, r3, #1
 8011e6e:	b2da      	uxtb	r2, r3
 8011e70:	693b      	ldr	r3, [r7, #16]
 8011e72:	711a      	strb	r2, [r3, #4]
 8011e74:	e007      	b.n	8011e86 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011e76:	7dfb      	ldrb	r3, [r7, #23]
 8011e78:	2b01      	cmp	r3, #1
 8011e7a:	d102      	bne.n	8011e82 <create_chain+0x122>
 8011e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8011e80:	e000      	b.n	8011e84 <create_chain+0x124>
 8011e82:	2301      	movs	r3, #1
 8011e84:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011e86:	69fb      	ldr	r3, [r7, #28]
}
 8011e88:	4618      	mov	r0, r3
 8011e8a:	3720      	adds	r7, #32
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	bd80      	pop	{r7, pc}

08011e90 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011e90:	b480      	push	{r7}
 8011e92:	b087      	sub	sp, #28
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
 8011e98:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ea4:	3304      	adds	r3, #4
 8011ea6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	899b      	ldrh	r3, [r3, #12]
 8011eac:	461a      	mov	r2, r3
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8011eb4:	68fa      	ldr	r2, [r7, #12]
 8011eb6:	8952      	ldrh	r2, [r2, #10]
 8011eb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ebc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011ebe:	693b      	ldr	r3, [r7, #16]
 8011ec0:	1d1a      	adds	r2, r3, #4
 8011ec2:	613a      	str	r2, [r7, #16]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011ec8:	68bb      	ldr	r3, [r7, #8]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d101      	bne.n	8011ed2 <clmt_clust+0x42>
 8011ece:	2300      	movs	r3, #0
 8011ed0:	e010      	b.n	8011ef4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011ed2:	697a      	ldr	r2, [r7, #20]
 8011ed4:	68bb      	ldr	r3, [r7, #8]
 8011ed6:	429a      	cmp	r2, r3
 8011ed8:	d307      	bcc.n	8011eea <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011eda:	697a      	ldr	r2, [r7, #20]
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	1ad3      	subs	r3, r2, r3
 8011ee0:	617b      	str	r3, [r7, #20]
 8011ee2:	693b      	ldr	r3, [r7, #16]
 8011ee4:	3304      	adds	r3, #4
 8011ee6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011ee8:	e7e9      	b.n	8011ebe <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011eea:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011eec:	693b      	ldr	r3, [r7, #16]
 8011eee:	681a      	ldr	r2, [r3, #0]
 8011ef0:	697b      	ldr	r3, [r7, #20]
 8011ef2:	4413      	add	r3, r2
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	371c      	adds	r7, #28
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efe:	4770      	bx	lr

08011f00 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b086      	sub	sp, #24
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
 8011f08:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011f16:	d204      	bcs.n	8011f22 <dir_sdi+0x22>
 8011f18:	683b      	ldr	r3, [r7, #0]
 8011f1a:	f003 031f 	and.w	r3, r3, #31
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d001      	beq.n	8011f26 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011f22:	2302      	movs	r3, #2
 8011f24:	e071      	b.n	801200a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	683a      	ldr	r2, [r7, #0]
 8011f2a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	689b      	ldr	r3, [r3, #8]
 8011f30:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011f32:	697b      	ldr	r3, [r7, #20]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d106      	bne.n	8011f46 <dir_sdi+0x46>
 8011f38:	693b      	ldr	r3, [r7, #16]
 8011f3a:	781b      	ldrb	r3, [r3, #0]
 8011f3c:	2b02      	cmp	r3, #2
 8011f3e:	d902      	bls.n	8011f46 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011f40:	693b      	ldr	r3, [r7, #16]
 8011f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f44:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011f46:	697b      	ldr	r3, [r7, #20]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d10c      	bne.n	8011f66 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	095b      	lsrs	r3, r3, #5
 8011f50:	693a      	ldr	r2, [r7, #16]
 8011f52:	8912      	ldrh	r2, [r2, #8]
 8011f54:	4293      	cmp	r3, r2
 8011f56:	d301      	bcc.n	8011f5c <dir_sdi+0x5c>
 8011f58:	2302      	movs	r3, #2
 8011f5a:	e056      	b.n	801200a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8011f5c:	693b      	ldr	r3, [r7, #16]
 8011f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	61da      	str	r2, [r3, #28]
 8011f64:	e02d      	b.n	8011fc2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011f66:	693b      	ldr	r3, [r7, #16]
 8011f68:	895b      	ldrh	r3, [r3, #10]
 8011f6a:	461a      	mov	r2, r3
 8011f6c:	693b      	ldr	r3, [r7, #16]
 8011f6e:	899b      	ldrh	r3, [r3, #12]
 8011f70:	fb03 f302 	mul.w	r3, r3, r2
 8011f74:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011f76:	e019      	b.n	8011fac <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	6979      	ldr	r1, [r7, #20]
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f7ff fc9a 	bl	80118b6 <get_fat>
 8011f82:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011f84:	697b      	ldr	r3, [r7, #20]
 8011f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f8a:	d101      	bne.n	8011f90 <dir_sdi+0x90>
 8011f8c:	2301      	movs	r3, #1
 8011f8e:	e03c      	b.n	801200a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011f90:	697b      	ldr	r3, [r7, #20]
 8011f92:	2b01      	cmp	r3, #1
 8011f94:	d904      	bls.n	8011fa0 <dir_sdi+0xa0>
 8011f96:	693b      	ldr	r3, [r7, #16]
 8011f98:	69db      	ldr	r3, [r3, #28]
 8011f9a:	697a      	ldr	r2, [r7, #20]
 8011f9c:	429a      	cmp	r2, r3
 8011f9e:	d301      	bcc.n	8011fa4 <dir_sdi+0xa4>
 8011fa0:	2302      	movs	r3, #2
 8011fa2:	e032      	b.n	801200a <dir_sdi+0x10a>
			ofs -= csz;
 8011fa4:	683a      	ldr	r2, [r7, #0]
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	1ad3      	subs	r3, r2, r3
 8011faa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011fac:	683a      	ldr	r2, [r7, #0]
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d2e1      	bcs.n	8011f78 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011fb4:	6979      	ldr	r1, [r7, #20]
 8011fb6:	6938      	ldr	r0, [r7, #16]
 8011fb8:	f7ff fc5e 	bl	8011878 <clust2sect>
 8011fbc:	4602      	mov	r2, r0
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	697a      	ldr	r2, [r7, #20]
 8011fc6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	69db      	ldr	r3, [r3, #28]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d101      	bne.n	8011fd4 <dir_sdi+0xd4>
 8011fd0:	2302      	movs	r3, #2
 8011fd2:	e01a      	b.n	801200a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	69da      	ldr	r2, [r3, #28]
 8011fd8:	693b      	ldr	r3, [r7, #16]
 8011fda:	899b      	ldrh	r3, [r3, #12]
 8011fdc:	4619      	mov	r1, r3
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	fbb3 f3f1 	udiv	r3, r3, r1
 8011fe4:	441a      	add	r2, r3
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011fea:	693b      	ldr	r3, [r7, #16]
 8011fec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011ff0:	693b      	ldr	r3, [r7, #16]
 8011ff2:	899b      	ldrh	r3, [r3, #12]
 8011ff4:	461a      	mov	r2, r3
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	fbb3 f0f2 	udiv	r0, r3, r2
 8011ffc:	fb02 f200 	mul.w	r2, r2, r0
 8012000:	1a9b      	subs	r3, r3, r2
 8012002:	18ca      	adds	r2, r1, r3
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012008:	2300      	movs	r3, #0
}
 801200a:	4618      	mov	r0, r3
 801200c:	3718      	adds	r7, #24
 801200e:	46bd      	mov	sp, r7
 8012010:	bd80      	pop	{r7, pc}

08012012 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012012:	b580      	push	{r7, lr}
 8012014:	b086      	sub	sp, #24
 8012016:	af00      	add	r7, sp, #0
 8012018:	6078      	str	r0, [r7, #4]
 801201a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	695b      	ldr	r3, [r3, #20]
 8012026:	3320      	adds	r3, #32
 8012028:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	69db      	ldr	r3, [r3, #28]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d003      	beq.n	801203a <dir_next+0x28>
 8012032:	68bb      	ldr	r3, [r7, #8]
 8012034:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012038:	d301      	bcc.n	801203e <dir_next+0x2c>
 801203a:	2304      	movs	r3, #4
 801203c:	e0bb      	b.n	80121b6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	899b      	ldrh	r3, [r3, #12]
 8012042:	461a      	mov	r2, r3
 8012044:	68bb      	ldr	r3, [r7, #8]
 8012046:	fbb3 f1f2 	udiv	r1, r3, r2
 801204a:	fb02 f201 	mul.w	r2, r2, r1
 801204e:	1a9b      	subs	r3, r3, r2
 8012050:	2b00      	cmp	r3, #0
 8012052:	f040 809d 	bne.w	8012190 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	69db      	ldr	r3, [r3, #28]
 801205a:	1c5a      	adds	r2, r3, #1
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	699b      	ldr	r3, [r3, #24]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d10b      	bne.n	8012080 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012068:	68bb      	ldr	r3, [r7, #8]
 801206a:	095b      	lsrs	r3, r3, #5
 801206c:	68fa      	ldr	r2, [r7, #12]
 801206e:	8912      	ldrh	r2, [r2, #8]
 8012070:	4293      	cmp	r3, r2
 8012072:	f0c0 808d 	bcc.w	8012190 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	2200      	movs	r2, #0
 801207a:	61da      	str	r2, [r3, #28]
 801207c:	2304      	movs	r3, #4
 801207e:	e09a      	b.n	80121b6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	899b      	ldrh	r3, [r3, #12]
 8012084:	461a      	mov	r2, r3
 8012086:	68bb      	ldr	r3, [r7, #8]
 8012088:	fbb3 f3f2 	udiv	r3, r3, r2
 801208c:	68fa      	ldr	r2, [r7, #12]
 801208e:	8952      	ldrh	r2, [r2, #10]
 8012090:	3a01      	subs	r2, #1
 8012092:	4013      	ands	r3, r2
 8012094:	2b00      	cmp	r3, #0
 8012096:	d17b      	bne.n	8012190 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012098:	687a      	ldr	r2, [r7, #4]
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	699b      	ldr	r3, [r3, #24]
 801209e:	4619      	mov	r1, r3
 80120a0:	4610      	mov	r0, r2
 80120a2:	f7ff fc08 	bl	80118b6 <get_fat>
 80120a6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80120a8:	697b      	ldr	r3, [r7, #20]
 80120aa:	2b01      	cmp	r3, #1
 80120ac:	d801      	bhi.n	80120b2 <dir_next+0xa0>
 80120ae:	2302      	movs	r3, #2
 80120b0:	e081      	b.n	80121b6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80120b2:	697b      	ldr	r3, [r7, #20]
 80120b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120b8:	d101      	bne.n	80120be <dir_next+0xac>
 80120ba:	2301      	movs	r3, #1
 80120bc:	e07b      	b.n	80121b6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	69db      	ldr	r3, [r3, #28]
 80120c2:	697a      	ldr	r2, [r7, #20]
 80120c4:	429a      	cmp	r2, r3
 80120c6:	d359      	bcc.n	801217c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80120c8:	683b      	ldr	r3, [r7, #0]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d104      	bne.n	80120d8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	2200      	movs	r2, #0
 80120d2:	61da      	str	r2, [r3, #28]
 80120d4:	2304      	movs	r3, #4
 80120d6:	e06e      	b.n	80121b6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80120d8:	687a      	ldr	r2, [r7, #4]
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	699b      	ldr	r3, [r3, #24]
 80120de:	4619      	mov	r1, r3
 80120e0:	4610      	mov	r0, r2
 80120e2:	f7ff fe3d 	bl	8011d60 <create_chain>
 80120e6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80120e8:	697b      	ldr	r3, [r7, #20]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d101      	bne.n	80120f2 <dir_next+0xe0>
 80120ee:	2307      	movs	r3, #7
 80120f0:	e061      	b.n	80121b6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	2b01      	cmp	r3, #1
 80120f6:	d101      	bne.n	80120fc <dir_next+0xea>
 80120f8:	2302      	movs	r3, #2
 80120fa:	e05c      	b.n	80121b6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80120fc:	697b      	ldr	r3, [r7, #20]
 80120fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012102:	d101      	bne.n	8012108 <dir_next+0xf6>
 8012104:	2301      	movs	r3, #1
 8012106:	e056      	b.n	80121b6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012108:	68f8      	ldr	r0, [r7, #12]
 801210a:	f7ff fad3 	bl	80116b4 <sync_window>
 801210e:	4603      	mov	r3, r0
 8012110:	2b00      	cmp	r3, #0
 8012112:	d001      	beq.n	8012118 <dir_next+0x106>
 8012114:	2301      	movs	r3, #1
 8012116:	e04e      	b.n	80121b6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	899b      	ldrh	r3, [r3, #12]
 8012122:	461a      	mov	r2, r3
 8012124:	2100      	movs	r1, #0
 8012126:	f7ff f8fc 	bl	8011322 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801212a:	2300      	movs	r3, #0
 801212c:	613b      	str	r3, [r7, #16]
 801212e:	6979      	ldr	r1, [r7, #20]
 8012130:	68f8      	ldr	r0, [r7, #12]
 8012132:	f7ff fba1 	bl	8011878 <clust2sect>
 8012136:	4602      	mov	r2, r0
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	635a      	str	r2, [r3, #52]	; 0x34
 801213c:	e012      	b.n	8012164 <dir_next+0x152>
						fs->wflag = 1;
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	2201      	movs	r2, #1
 8012142:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012144:	68f8      	ldr	r0, [r7, #12]
 8012146:	f7ff fab5 	bl	80116b4 <sync_window>
 801214a:	4603      	mov	r3, r0
 801214c:	2b00      	cmp	r3, #0
 801214e:	d001      	beq.n	8012154 <dir_next+0x142>
 8012150:	2301      	movs	r3, #1
 8012152:	e030      	b.n	80121b6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012154:	693b      	ldr	r3, [r7, #16]
 8012156:	3301      	adds	r3, #1
 8012158:	613b      	str	r3, [r7, #16]
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801215e:	1c5a      	adds	r2, r3, #1
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	635a      	str	r2, [r3, #52]	; 0x34
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	895b      	ldrh	r3, [r3, #10]
 8012168:	461a      	mov	r2, r3
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	4293      	cmp	r3, r2
 801216e:	d3e6      	bcc.n	801213e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012174:	693b      	ldr	r3, [r7, #16]
 8012176:	1ad2      	subs	r2, r2, r3
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	697a      	ldr	r2, [r7, #20]
 8012180:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012182:	6979      	ldr	r1, [r7, #20]
 8012184:	68f8      	ldr	r0, [r7, #12]
 8012186:	f7ff fb77 	bl	8011878 <clust2sect>
 801218a:	4602      	mov	r2, r0
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	68ba      	ldr	r2, [r7, #8]
 8012194:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	899b      	ldrh	r3, [r3, #12]
 80121a0:	461a      	mov	r2, r3
 80121a2:	68bb      	ldr	r3, [r7, #8]
 80121a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80121a8:	fb02 f200 	mul.w	r2, r2, r0
 80121ac:	1a9b      	subs	r3, r3, r2
 80121ae:	18ca      	adds	r2, r1, r3
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80121b4:	2300      	movs	r3, #0
}
 80121b6:	4618      	mov	r0, r3
 80121b8:	3718      	adds	r7, #24
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}

080121be <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80121be:	b580      	push	{r7, lr}
 80121c0:	b086      	sub	sp, #24
 80121c2:	af00      	add	r7, sp, #0
 80121c4:	6078      	str	r0, [r7, #4]
 80121c6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80121ce:	2100      	movs	r1, #0
 80121d0:	6878      	ldr	r0, [r7, #4]
 80121d2:	f7ff fe95 	bl	8011f00 <dir_sdi>
 80121d6:	4603      	mov	r3, r0
 80121d8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80121da:	7dfb      	ldrb	r3, [r7, #23]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d12b      	bne.n	8012238 <dir_alloc+0x7a>
		n = 0;
 80121e0:	2300      	movs	r3, #0
 80121e2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	69db      	ldr	r3, [r3, #28]
 80121e8:	4619      	mov	r1, r3
 80121ea:	68f8      	ldr	r0, [r7, #12]
 80121ec:	f7ff faa6 	bl	801173c <move_window>
 80121f0:	4603      	mov	r3, r0
 80121f2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80121f4:	7dfb      	ldrb	r3, [r7, #23]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d11d      	bne.n	8012236 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	6a1b      	ldr	r3, [r3, #32]
 80121fe:	781b      	ldrb	r3, [r3, #0]
 8012200:	2be5      	cmp	r3, #229	; 0xe5
 8012202:	d004      	beq.n	801220e <dir_alloc+0x50>
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	6a1b      	ldr	r3, [r3, #32]
 8012208:	781b      	ldrb	r3, [r3, #0]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d107      	bne.n	801221e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801220e:	693b      	ldr	r3, [r7, #16]
 8012210:	3301      	adds	r3, #1
 8012212:	613b      	str	r3, [r7, #16]
 8012214:	693a      	ldr	r2, [r7, #16]
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	429a      	cmp	r2, r3
 801221a:	d102      	bne.n	8012222 <dir_alloc+0x64>
 801221c:	e00c      	b.n	8012238 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801221e:	2300      	movs	r3, #0
 8012220:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012222:	2101      	movs	r1, #1
 8012224:	6878      	ldr	r0, [r7, #4]
 8012226:	f7ff fef4 	bl	8012012 <dir_next>
 801222a:	4603      	mov	r3, r0
 801222c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801222e:	7dfb      	ldrb	r3, [r7, #23]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d0d7      	beq.n	80121e4 <dir_alloc+0x26>
 8012234:	e000      	b.n	8012238 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012236:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012238:	7dfb      	ldrb	r3, [r7, #23]
 801223a:	2b04      	cmp	r3, #4
 801223c:	d101      	bne.n	8012242 <dir_alloc+0x84>
 801223e:	2307      	movs	r3, #7
 8012240:	75fb      	strb	r3, [r7, #23]
	return res;
 8012242:	7dfb      	ldrb	r3, [r7, #23]
}
 8012244:	4618      	mov	r0, r3
 8012246:	3718      	adds	r7, #24
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}

0801224c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b084      	sub	sp, #16
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
 8012254:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012256:	683b      	ldr	r3, [r7, #0]
 8012258:	331a      	adds	r3, #26
 801225a:	4618      	mov	r0, r3
 801225c:	f7fe ffbe 	bl	80111dc <ld_word>
 8012260:	4603      	mov	r3, r0
 8012262:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	781b      	ldrb	r3, [r3, #0]
 8012268:	2b03      	cmp	r3, #3
 801226a:	d109      	bne.n	8012280 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	3314      	adds	r3, #20
 8012270:	4618      	mov	r0, r3
 8012272:	f7fe ffb3 	bl	80111dc <ld_word>
 8012276:	4603      	mov	r3, r0
 8012278:	041b      	lsls	r3, r3, #16
 801227a:	68fa      	ldr	r2, [r7, #12]
 801227c:	4313      	orrs	r3, r2
 801227e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012280:	68fb      	ldr	r3, [r7, #12]
}
 8012282:	4618      	mov	r0, r3
 8012284:	3710      	adds	r7, #16
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}

0801228a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801228a:	b580      	push	{r7, lr}
 801228c:	b084      	sub	sp, #16
 801228e:	af00      	add	r7, sp, #0
 8012290:	60f8      	str	r0, [r7, #12]
 8012292:	60b9      	str	r1, [r7, #8]
 8012294:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012296:	68bb      	ldr	r3, [r7, #8]
 8012298:	331a      	adds	r3, #26
 801229a:	687a      	ldr	r2, [r7, #4]
 801229c:	b292      	uxth	r2, r2
 801229e:	4611      	mov	r1, r2
 80122a0:	4618      	mov	r0, r3
 80122a2:	f7fe ffd6 	bl	8011252 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	781b      	ldrb	r3, [r3, #0]
 80122aa:	2b03      	cmp	r3, #3
 80122ac:	d109      	bne.n	80122c2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80122ae:	68bb      	ldr	r3, [r7, #8]
 80122b0:	f103 0214 	add.w	r2, r3, #20
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	0c1b      	lsrs	r3, r3, #16
 80122b8:	b29b      	uxth	r3, r3
 80122ba:	4619      	mov	r1, r3
 80122bc:	4610      	mov	r0, r2
 80122be:	f7fe ffc8 	bl	8011252 <st_word>
	}
}
 80122c2:	bf00      	nop
 80122c4:	3710      	adds	r7, #16
 80122c6:	46bd      	mov	sp, r7
 80122c8:	bd80      	pop	{r7, pc}

080122ca <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80122ca:	b580      	push	{r7, lr}
 80122cc:	b086      	sub	sp, #24
 80122ce:	af00      	add	r7, sp, #0
 80122d0:	6078      	str	r0, [r7, #4]
 80122d2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80122d4:	2304      	movs	r3, #4
 80122d6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80122de:	e03c      	b.n	801235a <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	69db      	ldr	r3, [r3, #28]
 80122e4:	4619      	mov	r1, r3
 80122e6:	6938      	ldr	r0, [r7, #16]
 80122e8:	f7ff fa28 	bl	801173c <move_window>
 80122ec:	4603      	mov	r3, r0
 80122ee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80122f0:	7dfb      	ldrb	r3, [r7, #23]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d136      	bne.n	8012364 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	6a1b      	ldr	r3, [r3, #32]
 80122fa:	781b      	ldrb	r3, [r3, #0]
 80122fc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80122fe:	7bfb      	ldrb	r3, [r7, #15]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d102      	bne.n	801230a <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012304:	2304      	movs	r3, #4
 8012306:	75fb      	strb	r3, [r7, #23]
 8012308:	e031      	b.n	801236e <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	6a1b      	ldr	r3, [r3, #32]
 801230e:	330b      	adds	r3, #11
 8012310:	781b      	ldrb	r3, [r3, #0]
 8012312:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012316:	73bb      	strb	r3, [r7, #14]
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	7bba      	ldrb	r2, [r7, #14]
 801231c:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 801231e:	7bfb      	ldrb	r3, [r7, #15]
 8012320:	2be5      	cmp	r3, #229	; 0xe5
 8012322:	d011      	beq.n	8012348 <dir_read+0x7e>
 8012324:	7bfb      	ldrb	r3, [r7, #15]
 8012326:	2b2e      	cmp	r3, #46	; 0x2e
 8012328:	d00e      	beq.n	8012348 <dir_read+0x7e>
 801232a:	7bbb      	ldrb	r3, [r7, #14]
 801232c:	2b0f      	cmp	r3, #15
 801232e:	d00b      	beq.n	8012348 <dir_read+0x7e>
 8012330:	7bbb      	ldrb	r3, [r7, #14]
 8012332:	f023 0320 	bic.w	r3, r3, #32
 8012336:	2b08      	cmp	r3, #8
 8012338:	bf0c      	ite	eq
 801233a:	2301      	moveq	r3, #1
 801233c:	2300      	movne	r3, #0
 801233e:	b2db      	uxtb	r3, r3
 8012340:	461a      	mov	r2, r3
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	4293      	cmp	r3, r2
 8012346:	d00f      	beq.n	8012368 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012348:	2100      	movs	r1, #0
 801234a:	6878      	ldr	r0, [r7, #4]
 801234c:	f7ff fe61 	bl	8012012 <dir_next>
 8012350:	4603      	mov	r3, r0
 8012352:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012354:	7dfb      	ldrb	r3, [r7, #23]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d108      	bne.n	801236c <dir_read+0xa2>
	while (dp->sect) {
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	69db      	ldr	r3, [r3, #28]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d1be      	bne.n	80122e0 <dir_read+0x16>
 8012362:	e004      	b.n	801236e <dir_read+0xa4>
		if (res != FR_OK) break;
 8012364:	bf00      	nop
 8012366:	e002      	b.n	801236e <dir_read+0xa4>
				break;
 8012368:	bf00      	nop
 801236a:	e000      	b.n	801236e <dir_read+0xa4>
		if (res != FR_OK) break;
 801236c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801236e:	7dfb      	ldrb	r3, [r7, #23]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d002      	beq.n	801237a <dir_read+0xb0>
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	2200      	movs	r2, #0
 8012378:	61da      	str	r2, [r3, #28]
	return res;
 801237a:	7dfb      	ldrb	r3, [r7, #23]
}
 801237c:	4618      	mov	r0, r3
 801237e:	3718      	adds	r7, #24
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}

08012384 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b086      	sub	sp, #24
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012392:	2100      	movs	r1, #0
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f7ff fdb3 	bl	8011f00 <dir_sdi>
 801239a:	4603      	mov	r3, r0
 801239c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801239e:	7dfb      	ldrb	r3, [r7, #23]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d001      	beq.n	80123a8 <dir_find+0x24>
 80123a4:	7dfb      	ldrb	r3, [r7, #23]
 80123a6:	e03e      	b.n	8012426 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	69db      	ldr	r3, [r3, #28]
 80123ac:	4619      	mov	r1, r3
 80123ae:	6938      	ldr	r0, [r7, #16]
 80123b0:	f7ff f9c4 	bl	801173c <move_window>
 80123b4:	4603      	mov	r3, r0
 80123b6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80123b8:	7dfb      	ldrb	r3, [r7, #23]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d12f      	bne.n	801241e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	6a1b      	ldr	r3, [r3, #32]
 80123c2:	781b      	ldrb	r3, [r3, #0]
 80123c4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80123c6:	7bfb      	ldrb	r3, [r7, #15]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d102      	bne.n	80123d2 <dir_find+0x4e>
 80123cc:	2304      	movs	r3, #4
 80123ce:	75fb      	strb	r3, [r7, #23]
 80123d0:	e028      	b.n	8012424 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	6a1b      	ldr	r3, [r3, #32]
 80123d6:	330b      	adds	r3, #11
 80123d8:	781b      	ldrb	r3, [r3, #0]
 80123da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80123de:	b2da      	uxtb	r2, r3
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	6a1b      	ldr	r3, [r3, #32]
 80123e8:	330b      	adds	r3, #11
 80123ea:	781b      	ldrb	r3, [r3, #0]
 80123ec:	f003 0308 	and.w	r3, r3, #8
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d10a      	bne.n	801240a <dir_find+0x86>
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	6a18      	ldr	r0, [r3, #32]
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	3324      	adds	r3, #36	; 0x24
 80123fc:	220b      	movs	r2, #11
 80123fe:	4619      	mov	r1, r3
 8012400:	f7fe ffaa 	bl	8011358 <mem_cmp>
 8012404:	4603      	mov	r3, r0
 8012406:	2b00      	cmp	r3, #0
 8012408:	d00b      	beq.n	8012422 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801240a:	2100      	movs	r1, #0
 801240c:	6878      	ldr	r0, [r7, #4]
 801240e:	f7ff fe00 	bl	8012012 <dir_next>
 8012412:	4603      	mov	r3, r0
 8012414:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012416:	7dfb      	ldrb	r3, [r7, #23]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d0c5      	beq.n	80123a8 <dir_find+0x24>
 801241c:	e002      	b.n	8012424 <dir_find+0xa0>
		if (res != FR_OK) break;
 801241e:	bf00      	nop
 8012420:	e000      	b.n	8012424 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012422:	bf00      	nop

	return res;
 8012424:	7dfb      	ldrb	r3, [r7, #23]
}
 8012426:	4618      	mov	r0, r3
 8012428:	3718      	adds	r7, #24
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}

0801242e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801242e:	b580      	push	{r7, lr}
 8012430:	b084      	sub	sp, #16
 8012432:	af00      	add	r7, sp, #0
 8012434:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801243c:	2101      	movs	r1, #1
 801243e:	6878      	ldr	r0, [r7, #4]
 8012440:	f7ff febd 	bl	80121be <dir_alloc>
 8012444:	4603      	mov	r3, r0
 8012446:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012448:	7bfb      	ldrb	r3, [r7, #15]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d11c      	bne.n	8012488 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	69db      	ldr	r3, [r3, #28]
 8012452:	4619      	mov	r1, r3
 8012454:	68b8      	ldr	r0, [r7, #8]
 8012456:	f7ff f971 	bl	801173c <move_window>
 801245a:	4603      	mov	r3, r0
 801245c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801245e:	7bfb      	ldrb	r3, [r7, #15]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d111      	bne.n	8012488 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	6a1b      	ldr	r3, [r3, #32]
 8012468:	2220      	movs	r2, #32
 801246a:	2100      	movs	r1, #0
 801246c:	4618      	mov	r0, r3
 801246e:	f7fe ff58 	bl	8011322 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	6a18      	ldr	r0, [r3, #32]
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	3324      	adds	r3, #36	; 0x24
 801247a:	220b      	movs	r2, #11
 801247c:	4619      	mov	r1, r3
 801247e:	f7fe ff2f 	bl	80112e0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012482:	68bb      	ldr	r3, [r7, #8]
 8012484:	2201      	movs	r2, #1
 8012486:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012488:	7bfb      	ldrb	r3, [r7, #15]
}
 801248a:	4618      	mov	r0, r3
 801248c:	3710      	adds	r7, #16
 801248e:	46bd      	mov	sp, r7
 8012490:	bd80      	pop	{r7, pc}

08012492 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012492:	b580      	push	{r7, lr}
 8012494:	b084      	sub	sp, #16
 8012496:	af00      	add	r7, sp, #0
 8012498:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	69db      	ldr	r3, [r3, #28]
 80124a4:	4619      	mov	r1, r3
 80124a6:	68f8      	ldr	r0, [r7, #12]
 80124a8:	f7ff f948 	bl	801173c <move_window>
 80124ac:	4603      	mov	r3, r0
 80124ae:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80124b0:	7afb      	ldrb	r3, [r7, #11]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d106      	bne.n	80124c4 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	6a1b      	ldr	r3, [r3, #32]
 80124ba:	22e5      	movs	r2, #229	; 0xe5
 80124bc:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	2201      	movs	r2, #1
 80124c2:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80124c4:	7afb      	ldrb	r3, [r7, #11]
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	3710      	adds	r7, #16
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd80      	pop	{r7, pc}
	...

080124d0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b088      	sub	sp, #32
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
 80124d8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80124da:	683b      	ldr	r3, [r7, #0]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	60fb      	str	r3, [r7, #12]
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	3324      	adds	r3, #36	; 0x24
 80124e4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80124e6:	220b      	movs	r2, #11
 80124e8:	2120      	movs	r1, #32
 80124ea:	68b8      	ldr	r0, [r7, #8]
 80124ec:	f7fe ff19 	bl	8011322 <mem_set>
	si = i = 0; ni = 8;
 80124f0:	2300      	movs	r3, #0
 80124f2:	613b      	str	r3, [r7, #16]
 80124f4:	693b      	ldr	r3, [r7, #16]
 80124f6:	61fb      	str	r3, [r7, #28]
 80124f8:	2308      	movs	r3, #8
 80124fa:	617b      	str	r3, [r7, #20]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 80124fc:	68fa      	ldr	r2, [r7, #12]
 80124fe:	69fb      	ldr	r3, [r7, #28]
 8012500:	4413      	add	r3, r2
 8012502:	781b      	ldrb	r3, [r3, #0]
 8012504:	2b2e      	cmp	r3, #46	; 0x2e
 8012506:	d12f      	bne.n	8012568 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8012508:	69fb      	ldr	r3, [r7, #28]
 801250a:	1c5a      	adds	r2, r3, #1
 801250c:	61fa      	str	r2, [r7, #28]
 801250e:	68fa      	ldr	r2, [r7, #12]
 8012510:	4413      	add	r3, r2
 8012512:	781b      	ldrb	r3, [r3, #0]
 8012514:	76fb      	strb	r3, [r7, #27]
			if (c != '.' || si >= 3) break;
 8012516:	7efb      	ldrb	r3, [r7, #27]
 8012518:	2b2e      	cmp	r3, #46	; 0x2e
 801251a:	d10a      	bne.n	8012532 <create_name+0x62>
 801251c:	69fb      	ldr	r3, [r7, #28]
 801251e:	2b02      	cmp	r3, #2
 8012520:	d807      	bhi.n	8012532 <create_name+0x62>
			sfn[i++] = c;
 8012522:	693b      	ldr	r3, [r7, #16]
 8012524:	1c5a      	adds	r2, r3, #1
 8012526:	613a      	str	r2, [r7, #16]
 8012528:	68ba      	ldr	r2, [r7, #8]
 801252a:	4413      	add	r3, r2
 801252c:	7efa      	ldrb	r2, [r7, #27]
 801252e:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8012530:	e7ea      	b.n	8012508 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8012532:	7efb      	ldrb	r3, [r7, #27]
 8012534:	2b2f      	cmp	r3, #47	; 0x2f
 8012536:	d007      	beq.n	8012548 <create_name+0x78>
 8012538:	7efb      	ldrb	r3, [r7, #27]
 801253a:	2b5c      	cmp	r3, #92	; 0x5c
 801253c:	d004      	beq.n	8012548 <create_name+0x78>
 801253e:	7efb      	ldrb	r3, [r7, #27]
 8012540:	2b20      	cmp	r3, #32
 8012542:	d901      	bls.n	8012548 <create_name+0x78>
 8012544:	2306      	movs	r3, #6
 8012546:	e084      	b.n	8012652 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8012548:	68fa      	ldr	r2, [r7, #12]
 801254a:	69fb      	ldr	r3, [r7, #28]
 801254c:	441a      	add	r2, r3
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8012552:	7efb      	ldrb	r3, [r7, #27]
 8012554:	2b20      	cmp	r3, #32
 8012556:	d801      	bhi.n	801255c <create_name+0x8c>
 8012558:	2224      	movs	r2, #36	; 0x24
 801255a:	e000      	b.n	801255e <create_name+0x8e>
 801255c:	2220      	movs	r2, #32
 801255e:	68bb      	ldr	r3, [r7, #8]
 8012560:	330b      	adds	r3, #11
 8012562:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012564:	2300      	movs	r3, #0
 8012566:	e074      	b.n	8012652 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012568:	69fb      	ldr	r3, [r7, #28]
 801256a:	1c5a      	adds	r2, r3, #1
 801256c:	61fa      	str	r2, [r7, #28]
 801256e:	68fa      	ldr	r2, [r7, #12]
 8012570:	4413      	add	r3, r2
 8012572:	781b      	ldrb	r3, [r3, #0]
 8012574:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012576:	7efb      	ldrb	r3, [r7, #27]
 8012578:	2b20      	cmp	r3, #32
 801257a:	d94e      	bls.n	801261a <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801257c:	7efb      	ldrb	r3, [r7, #27]
 801257e:	2b2f      	cmp	r3, #47	; 0x2f
 8012580:	d006      	beq.n	8012590 <create_name+0xc0>
 8012582:	7efb      	ldrb	r3, [r7, #27]
 8012584:	2b5c      	cmp	r3, #92	; 0x5c
 8012586:	d110      	bne.n	80125aa <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012588:	e002      	b.n	8012590 <create_name+0xc0>
 801258a:	69fb      	ldr	r3, [r7, #28]
 801258c:	3301      	adds	r3, #1
 801258e:	61fb      	str	r3, [r7, #28]
 8012590:	68fa      	ldr	r2, [r7, #12]
 8012592:	69fb      	ldr	r3, [r7, #28]
 8012594:	4413      	add	r3, r2
 8012596:	781b      	ldrb	r3, [r3, #0]
 8012598:	2b2f      	cmp	r3, #47	; 0x2f
 801259a:	d0f6      	beq.n	801258a <create_name+0xba>
 801259c:	68fa      	ldr	r2, [r7, #12]
 801259e:	69fb      	ldr	r3, [r7, #28]
 80125a0:	4413      	add	r3, r2
 80125a2:	781b      	ldrb	r3, [r3, #0]
 80125a4:	2b5c      	cmp	r3, #92	; 0x5c
 80125a6:	d0f0      	beq.n	801258a <create_name+0xba>
			break;
 80125a8:	e038      	b.n	801261c <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80125aa:	7efb      	ldrb	r3, [r7, #27]
 80125ac:	2b2e      	cmp	r3, #46	; 0x2e
 80125ae:	d003      	beq.n	80125b8 <create_name+0xe8>
 80125b0:	693a      	ldr	r2, [r7, #16]
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	429a      	cmp	r2, r3
 80125b6:	d30c      	bcc.n	80125d2 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	2b0b      	cmp	r3, #11
 80125bc:	d002      	beq.n	80125c4 <create_name+0xf4>
 80125be:	7efb      	ldrb	r3, [r7, #27]
 80125c0:	2b2e      	cmp	r3, #46	; 0x2e
 80125c2:	d001      	beq.n	80125c8 <create_name+0xf8>
 80125c4:	2306      	movs	r3, #6
 80125c6:	e044      	b.n	8012652 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 80125c8:	2308      	movs	r3, #8
 80125ca:	613b      	str	r3, [r7, #16]
 80125cc:	230b      	movs	r3, #11
 80125ce:	617b      	str	r3, [r7, #20]
			continue;
 80125d0:	e022      	b.n	8012618 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 80125d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	da04      	bge.n	80125e4 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80125da:	7efb      	ldrb	r3, [r7, #27]
 80125dc:	3b80      	subs	r3, #128	; 0x80
 80125de:	4a1f      	ldr	r2, [pc, #124]	; (801265c <create_name+0x18c>)
 80125e0:	5cd3      	ldrb	r3, [r2, r3]
 80125e2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80125e4:	7efb      	ldrb	r3, [r7, #27]
 80125e6:	4619      	mov	r1, r3
 80125e8:	481d      	ldr	r0, [pc, #116]	; (8012660 <create_name+0x190>)
 80125ea:	f7fe fedc 	bl	80113a6 <chk_chr>
 80125ee:	4603      	mov	r3, r0
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d001      	beq.n	80125f8 <create_name+0x128>
 80125f4:	2306      	movs	r3, #6
 80125f6:	e02c      	b.n	8012652 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80125f8:	7efb      	ldrb	r3, [r7, #27]
 80125fa:	2b60      	cmp	r3, #96	; 0x60
 80125fc:	d905      	bls.n	801260a <create_name+0x13a>
 80125fe:	7efb      	ldrb	r3, [r7, #27]
 8012600:	2b7a      	cmp	r3, #122	; 0x7a
 8012602:	d802      	bhi.n	801260a <create_name+0x13a>
 8012604:	7efb      	ldrb	r3, [r7, #27]
 8012606:	3b20      	subs	r3, #32
 8012608:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801260a:	693b      	ldr	r3, [r7, #16]
 801260c:	1c5a      	adds	r2, r3, #1
 801260e:	613a      	str	r2, [r7, #16]
 8012610:	68ba      	ldr	r2, [r7, #8]
 8012612:	4413      	add	r3, r2
 8012614:	7efa      	ldrb	r2, [r7, #27]
 8012616:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012618:	e7a6      	b.n	8012568 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801261a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801261c:	68fa      	ldr	r2, [r7, #12]
 801261e:	69fb      	ldr	r3, [r7, #28]
 8012620:	441a      	add	r2, r3
 8012622:	683b      	ldr	r3, [r7, #0]
 8012624:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012626:	693b      	ldr	r3, [r7, #16]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d101      	bne.n	8012630 <create_name+0x160>
 801262c:	2306      	movs	r3, #6
 801262e:	e010      	b.n	8012652 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012630:	68bb      	ldr	r3, [r7, #8]
 8012632:	781b      	ldrb	r3, [r3, #0]
 8012634:	2be5      	cmp	r3, #229	; 0xe5
 8012636:	d102      	bne.n	801263e <create_name+0x16e>
 8012638:	68bb      	ldr	r3, [r7, #8]
 801263a:	2205      	movs	r2, #5
 801263c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801263e:	7efb      	ldrb	r3, [r7, #27]
 8012640:	2b20      	cmp	r3, #32
 8012642:	d801      	bhi.n	8012648 <create_name+0x178>
 8012644:	2204      	movs	r2, #4
 8012646:	e000      	b.n	801264a <create_name+0x17a>
 8012648:	2200      	movs	r2, #0
 801264a:	68bb      	ldr	r3, [r7, #8]
 801264c:	330b      	adds	r3, #11
 801264e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012650:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012652:	4618      	mov	r0, r3
 8012654:	3720      	adds	r7, #32
 8012656:	46bd      	mov	sp, r7
 8012658:	bd80      	pop	{r7, pc}
 801265a:	bf00      	nop
 801265c:	0801a2c4 	.word	0x0801a2c4
 8012660:	0801a274 	.word	0x0801a274

08012664 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b086      	sub	sp, #24
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
 801266c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012672:	693b      	ldr	r3, [r7, #16]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	781b      	ldrb	r3, [r3, #0]
 801267c:	2b2f      	cmp	r3, #47	; 0x2f
 801267e:	d00b      	beq.n	8012698 <follow_path+0x34>
 8012680:	683b      	ldr	r3, [r7, #0]
 8012682:	781b      	ldrb	r3, [r3, #0]
 8012684:	2b5c      	cmp	r3, #92	; 0x5c
 8012686:	d007      	beq.n	8012698 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	699a      	ldr	r2, [r3, #24]
 801268c:	693b      	ldr	r3, [r7, #16]
 801268e:	609a      	str	r2, [r3, #8]
 8012690:	e00d      	b.n	80126ae <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	3301      	adds	r3, #1
 8012696:	603b      	str	r3, [r7, #0]
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	781b      	ldrb	r3, [r3, #0]
 801269c:	2b2f      	cmp	r3, #47	; 0x2f
 801269e:	d0f8      	beq.n	8012692 <follow_path+0x2e>
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	781b      	ldrb	r3, [r3, #0]
 80126a4:	2b5c      	cmp	r3, #92	; 0x5c
 80126a6:	d0f4      	beq.n	8012692 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80126a8:	693b      	ldr	r3, [r7, #16]
 80126aa:	2200      	movs	r2, #0
 80126ac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	781b      	ldrb	r3, [r3, #0]
 80126b2:	2b1f      	cmp	r3, #31
 80126b4:	d80a      	bhi.n	80126cc <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	2280      	movs	r2, #128	; 0x80
 80126ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80126be:	2100      	movs	r1, #0
 80126c0:	6878      	ldr	r0, [r7, #4]
 80126c2:	f7ff fc1d 	bl	8011f00 <dir_sdi>
 80126c6:	4603      	mov	r3, r0
 80126c8:	75fb      	strb	r3, [r7, #23]
 80126ca:	e05b      	b.n	8012784 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80126cc:	463b      	mov	r3, r7
 80126ce:	4619      	mov	r1, r3
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f7ff fefd 	bl	80124d0 <create_name>
 80126d6:	4603      	mov	r3, r0
 80126d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80126da:	7dfb      	ldrb	r3, [r7, #23]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d14c      	bne.n	801277a <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 80126e0:	6878      	ldr	r0, [r7, #4]
 80126e2:	f7ff fe4f 	bl	8012384 <dir_find>
 80126e6:	4603      	mov	r3, r0
 80126e8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80126f0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80126f2:	7dfb      	ldrb	r3, [r7, #23]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d01b      	beq.n	8012730 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80126f8:	7dfb      	ldrb	r3, [r7, #23]
 80126fa:	2b04      	cmp	r3, #4
 80126fc:	d13f      	bne.n	801277e <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80126fe:	7afb      	ldrb	r3, [r7, #11]
 8012700:	f003 0320 	and.w	r3, r3, #32
 8012704:	2b00      	cmp	r3, #0
 8012706:	d00b      	beq.n	8012720 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012708:	7afb      	ldrb	r3, [r7, #11]
 801270a:	f003 0304 	and.w	r3, r3, #4
 801270e:	2b00      	cmp	r3, #0
 8012710:	d031      	beq.n	8012776 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	2280      	movs	r2, #128	; 0x80
 8012716:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 801271a:	2300      	movs	r3, #0
 801271c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 801271e:	e02e      	b.n	801277e <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012720:	7afb      	ldrb	r3, [r7, #11]
 8012722:	f003 0304 	and.w	r3, r3, #4
 8012726:	2b00      	cmp	r3, #0
 8012728:	d129      	bne.n	801277e <follow_path+0x11a>
 801272a:	2305      	movs	r3, #5
 801272c:	75fb      	strb	r3, [r7, #23]
				break;
 801272e:	e026      	b.n	801277e <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012730:	7afb      	ldrb	r3, [r7, #11]
 8012732:	f003 0304 	and.w	r3, r3, #4
 8012736:	2b00      	cmp	r3, #0
 8012738:	d123      	bne.n	8012782 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801273a:	693b      	ldr	r3, [r7, #16]
 801273c:	799b      	ldrb	r3, [r3, #6]
 801273e:	f003 0310 	and.w	r3, r3, #16
 8012742:	2b00      	cmp	r3, #0
 8012744:	d102      	bne.n	801274c <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012746:	2305      	movs	r3, #5
 8012748:	75fb      	strb	r3, [r7, #23]
 801274a:	e01b      	b.n	8012784 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	695b      	ldr	r3, [r3, #20]
 8012756:	68fa      	ldr	r2, [r7, #12]
 8012758:	8992      	ldrh	r2, [r2, #12]
 801275a:	fbb3 f0f2 	udiv	r0, r3, r2
 801275e:	fb02 f200 	mul.w	r2, r2, r0
 8012762:	1a9b      	subs	r3, r3, r2
 8012764:	440b      	add	r3, r1
 8012766:	4619      	mov	r1, r3
 8012768:	68f8      	ldr	r0, [r7, #12]
 801276a:	f7ff fd6f 	bl	801224c <ld_clust>
 801276e:	4602      	mov	r2, r0
 8012770:	693b      	ldr	r3, [r7, #16]
 8012772:	609a      	str	r2, [r3, #8]
 8012774:	e7aa      	b.n	80126cc <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012776:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012778:	e7a8      	b.n	80126cc <follow_path+0x68>
			if (res != FR_OK) break;
 801277a:	bf00      	nop
 801277c:	e002      	b.n	8012784 <follow_path+0x120>
				break;
 801277e:	bf00      	nop
 8012780:	e000      	b.n	8012784 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012782:	bf00      	nop
			}
		}
	}

	return res;
 8012784:	7dfb      	ldrb	r3, [r7, #23]
}
 8012786:	4618      	mov	r0, r3
 8012788:	3718      	adds	r7, #24
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}

0801278e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801278e:	b480      	push	{r7}
 8012790:	b087      	sub	sp, #28
 8012792:	af00      	add	r7, sp, #0
 8012794:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012796:	f04f 33ff 	mov.w	r3, #4294967295
 801279a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d031      	beq.n	8012808 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	617b      	str	r3, [r7, #20]
 80127aa:	e002      	b.n	80127b2 <get_ldnumber+0x24>
 80127ac:	697b      	ldr	r3, [r7, #20]
 80127ae:	3301      	adds	r3, #1
 80127b0:	617b      	str	r3, [r7, #20]
 80127b2:	697b      	ldr	r3, [r7, #20]
 80127b4:	781b      	ldrb	r3, [r3, #0]
 80127b6:	2b20      	cmp	r3, #32
 80127b8:	d903      	bls.n	80127c2 <get_ldnumber+0x34>
 80127ba:	697b      	ldr	r3, [r7, #20]
 80127bc:	781b      	ldrb	r3, [r3, #0]
 80127be:	2b3a      	cmp	r3, #58	; 0x3a
 80127c0:	d1f4      	bne.n	80127ac <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80127c2:	697b      	ldr	r3, [r7, #20]
 80127c4:	781b      	ldrb	r3, [r3, #0]
 80127c6:	2b3a      	cmp	r3, #58	; 0x3a
 80127c8:	d11c      	bne.n	8012804 <get_ldnumber+0x76>
			tp = *path;
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	1c5a      	adds	r2, r3, #1
 80127d4:	60fa      	str	r2, [r7, #12]
 80127d6:	781b      	ldrb	r3, [r3, #0]
 80127d8:	3b30      	subs	r3, #48	; 0x30
 80127da:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80127dc:	68bb      	ldr	r3, [r7, #8]
 80127de:	2b09      	cmp	r3, #9
 80127e0:	d80e      	bhi.n	8012800 <get_ldnumber+0x72>
 80127e2:	68fa      	ldr	r2, [r7, #12]
 80127e4:	697b      	ldr	r3, [r7, #20]
 80127e6:	429a      	cmp	r2, r3
 80127e8:	d10a      	bne.n	8012800 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80127ea:	68bb      	ldr	r3, [r7, #8]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d107      	bne.n	8012800 <get_ldnumber+0x72>
					vol = (int)i;
 80127f0:	68bb      	ldr	r3, [r7, #8]
 80127f2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80127f4:	697b      	ldr	r3, [r7, #20]
 80127f6:	3301      	adds	r3, #1
 80127f8:	617b      	str	r3, [r7, #20]
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	697a      	ldr	r2, [r7, #20]
 80127fe:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012800:	693b      	ldr	r3, [r7, #16]
 8012802:	e002      	b.n	801280a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012804:	2300      	movs	r3, #0
 8012806:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012808:	693b      	ldr	r3, [r7, #16]
}
 801280a:	4618      	mov	r0, r3
 801280c:	371c      	adds	r7, #28
 801280e:	46bd      	mov	sp, r7
 8012810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012814:	4770      	bx	lr
	...

08012818 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b082      	sub	sp, #8
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
 8012820:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	2200      	movs	r2, #0
 8012826:	70da      	strb	r2, [r3, #3]
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f04f 32ff 	mov.w	r2, #4294967295
 801282e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012830:	6839      	ldr	r1, [r7, #0]
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	f7fe ff82 	bl	801173c <move_window>
 8012838:	4603      	mov	r3, r0
 801283a:	2b00      	cmp	r3, #0
 801283c:	d001      	beq.n	8012842 <check_fs+0x2a>
 801283e:	2304      	movs	r3, #4
 8012840:	e038      	b.n	80128b4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	3338      	adds	r3, #56	; 0x38
 8012846:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801284a:	4618      	mov	r0, r3
 801284c:	f7fe fcc6 	bl	80111dc <ld_word>
 8012850:	4603      	mov	r3, r0
 8012852:	461a      	mov	r2, r3
 8012854:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012858:	429a      	cmp	r2, r3
 801285a:	d001      	beq.n	8012860 <check_fs+0x48>
 801285c:	2303      	movs	r3, #3
 801285e:	e029      	b.n	80128b4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012866:	2be9      	cmp	r3, #233	; 0xe9
 8012868:	d009      	beq.n	801287e <check_fs+0x66>
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012870:	2beb      	cmp	r3, #235	; 0xeb
 8012872:	d11e      	bne.n	80128b2 <check_fs+0x9a>
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801287a:	2b90      	cmp	r3, #144	; 0x90
 801287c:	d119      	bne.n	80128b2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	3338      	adds	r3, #56	; 0x38
 8012882:	3336      	adds	r3, #54	; 0x36
 8012884:	4618      	mov	r0, r3
 8012886:	f7fe fcc1 	bl	801120c <ld_dword>
 801288a:	4603      	mov	r3, r0
 801288c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012890:	4a0a      	ldr	r2, [pc, #40]	; (80128bc <check_fs+0xa4>)
 8012892:	4293      	cmp	r3, r2
 8012894:	d101      	bne.n	801289a <check_fs+0x82>
 8012896:	2300      	movs	r3, #0
 8012898:	e00c      	b.n	80128b4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	3338      	adds	r3, #56	; 0x38
 801289e:	3352      	adds	r3, #82	; 0x52
 80128a0:	4618      	mov	r0, r3
 80128a2:	f7fe fcb3 	bl	801120c <ld_dword>
 80128a6:	4603      	mov	r3, r0
 80128a8:	4a05      	ldr	r2, [pc, #20]	; (80128c0 <check_fs+0xa8>)
 80128aa:	4293      	cmp	r3, r2
 80128ac:	d101      	bne.n	80128b2 <check_fs+0x9a>
 80128ae:	2300      	movs	r3, #0
 80128b0:	e000      	b.n	80128b4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80128b2:	2302      	movs	r3, #2
}
 80128b4:	4618      	mov	r0, r3
 80128b6:	3708      	adds	r7, #8
 80128b8:	46bd      	mov	sp, r7
 80128ba:	bd80      	pop	{r7, pc}
 80128bc:	00544146 	.word	0x00544146
 80128c0:	33544146 	.word	0x33544146

080128c4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b096      	sub	sp, #88	; 0x58
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	60f8      	str	r0, [r7, #12]
 80128cc:	60b9      	str	r1, [r7, #8]
 80128ce:	4613      	mov	r3, r2
 80128d0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80128d2:	68bb      	ldr	r3, [r7, #8]
 80128d4:	2200      	movs	r2, #0
 80128d6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80128d8:	68f8      	ldr	r0, [r7, #12]
 80128da:	f7ff ff58 	bl	801278e <get_ldnumber>
 80128de:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80128e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	da01      	bge.n	80128ea <find_volume+0x26>
 80128e6:	230b      	movs	r3, #11
 80128e8:	e268      	b.n	8012dbc <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80128ea:	4ab0      	ldr	r2, [pc, #704]	; (8012bac <find_volume+0x2e8>)
 80128ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80128f2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80128f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d101      	bne.n	80128fe <find_volume+0x3a>
 80128fa:	230c      	movs	r3, #12
 80128fc:	e25e      	b.n	8012dbc <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012902:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012904:	79fb      	ldrb	r3, [r7, #7]
 8012906:	f023 0301 	bic.w	r3, r3, #1
 801290a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801290c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d01a      	beq.n	801294a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012916:	785b      	ldrb	r3, [r3, #1]
 8012918:	4618      	mov	r0, r3
 801291a:	f7fe fbc1 	bl	80110a0 <disk_status>
 801291e:	4603      	mov	r3, r0
 8012920:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012924:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012928:	f003 0301 	and.w	r3, r3, #1
 801292c:	2b00      	cmp	r3, #0
 801292e:	d10c      	bne.n	801294a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012930:	79fb      	ldrb	r3, [r7, #7]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d007      	beq.n	8012946 <find_volume+0x82>
 8012936:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801293a:	f003 0304 	and.w	r3, r3, #4
 801293e:	2b00      	cmp	r3, #0
 8012940:	d001      	beq.n	8012946 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012942:	230a      	movs	r3, #10
 8012944:	e23a      	b.n	8012dbc <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012946:	2300      	movs	r3, #0
 8012948:	e238      	b.n	8012dbc <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801294a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801294c:	2200      	movs	r2, #0
 801294e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012952:	b2da      	uxtb	r2, r3
 8012954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012956:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801295a:	785b      	ldrb	r3, [r3, #1]
 801295c:	4618      	mov	r0, r3
 801295e:	f7fe fbb9 	bl	80110d4 <disk_initialize>
 8012962:	4603      	mov	r3, r0
 8012964:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012968:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801296c:	f003 0301 	and.w	r3, r3, #1
 8012970:	2b00      	cmp	r3, #0
 8012972:	d001      	beq.n	8012978 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012974:	2303      	movs	r3, #3
 8012976:	e221      	b.n	8012dbc <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012978:	79fb      	ldrb	r3, [r7, #7]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d007      	beq.n	801298e <find_volume+0xca>
 801297e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012982:	f003 0304 	and.w	r3, r3, #4
 8012986:	2b00      	cmp	r3, #0
 8012988:	d001      	beq.n	801298e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801298a:	230a      	movs	r3, #10
 801298c:	e216      	b.n	8012dbc <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801298e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012990:	7858      	ldrb	r0, [r3, #1]
 8012992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012994:	330c      	adds	r3, #12
 8012996:	461a      	mov	r2, r3
 8012998:	2102      	movs	r1, #2
 801299a:	f7fe fc01 	bl	80111a0 <disk_ioctl>
 801299e:	4603      	mov	r3, r0
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d001      	beq.n	80129a8 <find_volume+0xe4>
 80129a4:	2301      	movs	r3, #1
 80129a6:	e209      	b.n	8012dbc <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80129a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129aa:	899b      	ldrh	r3, [r3, #12]
 80129ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80129b0:	d80d      	bhi.n	80129ce <find_volume+0x10a>
 80129b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b4:	899b      	ldrh	r3, [r3, #12]
 80129b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80129ba:	d308      	bcc.n	80129ce <find_volume+0x10a>
 80129bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129be:	899b      	ldrh	r3, [r3, #12]
 80129c0:	461a      	mov	r2, r3
 80129c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129c4:	899b      	ldrh	r3, [r3, #12]
 80129c6:	3b01      	subs	r3, #1
 80129c8:	4013      	ands	r3, r2
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d001      	beq.n	80129d2 <find_volume+0x10e>
 80129ce:	2301      	movs	r3, #1
 80129d0:	e1f4      	b.n	8012dbc <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80129d2:	2300      	movs	r3, #0
 80129d4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80129d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80129d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80129da:	f7ff ff1d 	bl	8012818 <check_fs>
 80129de:	4603      	mov	r3, r0
 80129e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80129e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80129e8:	2b02      	cmp	r3, #2
 80129ea:	d14b      	bne.n	8012a84 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80129ec:	2300      	movs	r3, #0
 80129ee:	643b      	str	r3, [r7, #64]	; 0x40
 80129f0:	e01f      	b.n	8012a32 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80129f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129f4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80129f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80129fa:	011b      	lsls	r3, r3, #4
 80129fc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012a00:	4413      	add	r3, r2
 8012a02:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a06:	3304      	adds	r3, #4
 8012a08:	781b      	ldrb	r3, [r3, #0]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d006      	beq.n	8012a1c <find_volume+0x158>
 8012a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a10:	3308      	adds	r3, #8
 8012a12:	4618      	mov	r0, r3
 8012a14:	f7fe fbfa 	bl	801120c <ld_dword>
 8012a18:	4602      	mov	r2, r0
 8012a1a:	e000      	b.n	8012a1e <find_volume+0x15a>
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a20:	009b      	lsls	r3, r3, #2
 8012a22:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012a26:	440b      	add	r3, r1
 8012a28:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a2e:	3301      	adds	r3, #1
 8012a30:	643b      	str	r3, [r7, #64]	; 0x40
 8012a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a34:	2b03      	cmp	r3, #3
 8012a36:	d9dc      	bls.n	80129f2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012a38:	2300      	movs	r3, #0
 8012a3a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d002      	beq.n	8012a48 <find_volume+0x184>
 8012a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a44:	3b01      	subs	r3, #1
 8012a46:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a4a:	009b      	lsls	r3, r3, #2
 8012a4c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012a50:	4413      	add	r3, r2
 8012a52:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012a56:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012a58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d005      	beq.n	8012a6a <find_volume+0x1a6>
 8012a5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012a60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012a62:	f7ff fed9 	bl	8012818 <check_fs>
 8012a66:	4603      	mov	r3, r0
 8012a68:	e000      	b.n	8012a6c <find_volume+0x1a8>
 8012a6a:	2303      	movs	r3, #3
 8012a6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012a70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a74:	2b01      	cmp	r3, #1
 8012a76:	d905      	bls.n	8012a84 <find_volume+0x1c0>
 8012a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a7a:	3301      	adds	r3, #1
 8012a7c:	643b      	str	r3, [r7, #64]	; 0x40
 8012a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a80:	2b03      	cmp	r3, #3
 8012a82:	d9e1      	bls.n	8012a48 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012a84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a88:	2b04      	cmp	r3, #4
 8012a8a:	d101      	bne.n	8012a90 <find_volume+0x1cc>
 8012a8c:	2301      	movs	r3, #1
 8012a8e:	e195      	b.n	8012dbc <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012a90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a94:	2b01      	cmp	r3, #1
 8012a96:	d901      	bls.n	8012a9c <find_volume+0x1d8>
 8012a98:	230d      	movs	r3, #13
 8012a9a:	e18f      	b.n	8012dbc <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a9e:	3338      	adds	r3, #56	; 0x38
 8012aa0:	330b      	adds	r3, #11
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	f7fe fb9a 	bl	80111dc <ld_word>
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	461a      	mov	r2, r3
 8012aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aae:	899b      	ldrh	r3, [r3, #12]
 8012ab0:	429a      	cmp	r2, r3
 8012ab2:	d001      	beq.n	8012ab8 <find_volume+0x1f4>
 8012ab4:	230d      	movs	r3, #13
 8012ab6:	e181      	b.n	8012dbc <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aba:	3338      	adds	r3, #56	; 0x38
 8012abc:	3316      	adds	r3, #22
 8012abe:	4618      	mov	r0, r3
 8012ac0:	f7fe fb8c 	bl	80111dc <ld_word>
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d106      	bne.n	8012adc <find_volume+0x218>
 8012ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ad0:	3338      	adds	r3, #56	; 0x38
 8012ad2:	3324      	adds	r3, #36	; 0x24
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	f7fe fb99 	bl	801120c <ld_dword>
 8012ada:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ade:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012ae0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aee:	789b      	ldrb	r3, [r3, #2]
 8012af0:	2b01      	cmp	r3, #1
 8012af2:	d005      	beq.n	8012b00 <find_volume+0x23c>
 8012af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012af6:	789b      	ldrb	r3, [r3, #2]
 8012af8:	2b02      	cmp	r3, #2
 8012afa:	d001      	beq.n	8012b00 <find_volume+0x23c>
 8012afc:	230d      	movs	r3, #13
 8012afe:	e15d      	b.n	8012dbc <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b02:	789b      	ldrb	r3, [r3, #2]
 8012b04:	461a      	mov	r2, r3
 8012b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b08:	fb02 f303 	mul.w	r3, r2, r3
 8012b0c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b14:	b29a      	uxth	r2, r3
 8012b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b18:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b1c:	895b      	ldrh	r3, [r3, #10]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d008      	beq.n	8012b34 <find_volume+0x270>
 8012b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b24:	895b      	ldrh	r3, [r3, #10]
 8012b26:	461a      	mov	r2, r3
 8012b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b2a:	895b      	ldrh	r3, [r3, #10]
 8012b2c:	3b01      	subs	r3, #1
 8012b2e:	4013      	ands	r3, r2
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d001      	beq.n	8012b38 <find_volume+0x274>
 8012b34:	230d      	movs	r3, #13
 8012b36:	e141      	b.n	8012dbc <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b3a:	3338      	adds	r3, #56	; 0x38
 8012b3c:	3311      	adds	r3, #17
 8012b3e:	4618      	mov	r0, r3
 8012b40:	f7fe fb4c 	bl	80111dc <ld_word>
 8012b44:	4603      	mov	r3, r0
 8012b46:	461a      	mov	r2, r3
 8012b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b4a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b4e:	891b      	ldrh	r3, [r3, #8]
 8012b50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b52:	8992      	ldrh	r2, [r2, #12]
 8012b54:	0952      	lsrs	r2, r2, #5
 8012b56:	b292      	uxth	r2, r2
 8012b58:	fbb3 f1f2 	udiv	r1, r3, r2
 8012b5c:	fb02 f201 	mul.w	r2, r2, r1
 8012b60:	1a9b      	subs	r3, r3, r2
 8012b62:	b29b      	uxth	r3, r3
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d001      	beq.n	8012b6c <find_volume+0x2a8>
 8012b68:	230d      	movs	r3, #13
 8012b6a:	e127      	b.n	8012dbc <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b6e:	3338      	adds	r3, #56	; 0x38
 8012b70:	3313      	adds	r3, #19
 8012b72:	4618      	mov	r0, r3
 8012b74:	f7fe fb32 	bl	80111dc <ld_word>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d106      	bne.n	8012b90 <find_volume+0x2cc>
 8012b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b84:	3338      	adds	r3, #56	; 0x38
 8012b86:	3320      	adds	r3, #32
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7fe fb3f 	bl	801120c <ld_dword>
 8012b8e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b92:	3338      	adds	r3, #56	; 0x38
 8012b94:	330e      	adds	r3, #14
 8012b96:	4618      	mov	r0, r3
 8012b98:	f7fe fb20 	bl	80111dc <ld_word>
 8012b9c:	4603      	mov	r3, r0
 8012b9e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012ba0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d104      	bne.n	8012bb0 <find_volume+0x2ec>
 8012ba6:	230d      	movs	r3, #13
 8012ba8:	e108      	b.n	8012dbc <find_volume+0x4f8>
 8012baa:	bf00      	nop
 8012bac:	2003d4e0 	.word	0x2003d4e0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012bb0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012bb4:	4413      	add	r3, r2
 8012bb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012bb8:	8911      	ldrh	r1, [r2, #8]
 8012bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012bbc:	8992      	ldrh	r2, [r2, #12]
 8012bbe:	0952      	lsrs	r2, r2, #5
 8012bc0:	b292      	uxth	r2, r2
 8012bc2:	fbb1 f2f2 	udiv	r2, r1, r2
 8012bc6:	b292      	uxth	r2, r2
 8012bc8:	4413      	add	r3, r2
 8012bca:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012bcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	d201      	bcs.n	8012bd8 <find_volume+0x314>
 8012bd4:	230d      	movs	r3, #13
 8012bd6:	e0f1      	b.n	8012dbc <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012bd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bdc:	1ad3      	subs	r3, r2, r3
 8012bde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012be0:	8952      	ldrh	r2, [r2, #10]
 8012be2:	fbb3 f3f2 	udiv	r3, r3, r2
 8012be6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d101      	bne.n	8012bf2 <find_volume+0x32e>
 8012bee:	230d      	movs	r3, #13
 8012bf0:	e0e4      	b.n	8012dbc <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012bf2:	2303      	movs	r3, #3
 8012bf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bfa:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012bfe:	4293      	cmp	r3, r2
 8012c00:	d802      	bhi.n	8012c08 <find_volume+0x344>
 8012c02:	2302      	movs	r3, #2
 8012c04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c0a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012c0e:	4293      	cmp	r3, r2
 8012c10:	d802      	bhi.n	8012c18 <find_volume+0x354>
 8012c12:	2301      	movs	r3, #1
 8012c14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1a:	1c9a      	adds	r2, r3, #2
 8012c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c1e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012c24:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012c26:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c2a:	441a      	add	r2, r3
 8012c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c2e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8012c30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c34:	441a      	add	r2, r3
 8012c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c38:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8012c3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c3e:	2b03      	cmp	r3, #3
 8012c40:	d11e      	bne.n	8012c80 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c44:	3338      	adds	r3, #56	; 0x38
 8012c46:	332a      	adds	r3, #42	; 0x2a
 8012c48:	4618      	mov	r0, r3
 8012c4a:	f7fe fac7 	bl	80111dc <ld_word>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d001      	beq.n	8012c58 <find_volume+0x394>
 8012c54:	230d      	movs	r3, #13
 8012c56:	e0b1      	b.n	8012dbc <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c5a:	891b      	ldrh	r3, [r3, #8]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d001      	beq.n	8012c64 <find_volume+0x3a0>
 8012c60:	230d      	movs	r3, #13
 8012c62:	e0ab      	b.n	8012dbc <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c66:	3338      	adds	r3, #56	; 0x38
 8012c68:	332c      	adds	r3, #44	; 0x2c
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	f7fe face 	bl	801120c <ld_dword>
 8012c70:	4602      	mov	r2, r0
 8012c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c74:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c78:	69db      	ldr	r3, [r3, #28]
 8012c7a:	009b      	lsls	r3, r3, #2
 8012c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8012c7e:	e01f      	b.n	8012cc0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c82:	891b      	ldrh	r3, [r3, #8]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d101      	bne.n	8012c8c <find_volume+0x3c8>
 8012c88:	230d      	movs	r3, #13
 8012c8a:	e097      	b.n	8012dbc <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c92:	441a      	add	r2, r3
 8012c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c96:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012c98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012c9c:	2b02      	cmp	r3, #2
 8012c9e:	d103      	bne.n	8012ca8 <find_volume+0x3e4>
 8012ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ca2:	69db      	ldr	r3, [r3, #28]
 8012ca4:	005b      	lsls	r3, r3, #1
 8012ca6:	e00a      	b.n	8012cbe <find_volume+0x3fa>
 8012ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012caa:	69da      	ldr	r2, [r3, #28]
 8012cac:	4613      	mov	r3, r2
 8012cae:	005b      	lsls	r3, r3, #1
 8012cb0:	4413      	add	r3, r2
 8012cb2:	085a      	lsrs	r2, r3, #1
 8012cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cb6:	69db      	ldr	r3, [r3, #28]
 8012cb8:	f003 0301 	and.w	r3, r3, #1
 8012cbc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012cbe:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cc2:	6a1a      	ldr	r2, [r3, #32]
 8012cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cc6:	899b      	ldrh	r3, [r3, #12]
 8012cc8:	4619      	mov	r1, r3
 8012cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ccc:	440b      	add	r3, r1
 8012cce:	3b01      	subs	r3, #1
 8012cd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012cd2:	8989      	ldrh	r1, [r1, #12]
 8012cd4:	fbb3 f3f1 	udiv	r3, r3, r1
 8012cd8:	429a      	cmp	r2, r3
 8012cda:	d201      	bcs.n	8012ce0 <find_volume+0x41c>
 8012cdc:	230d      	movs	r3, #13
 8012cde:	e06d      	b.n	8012dbc <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8012ce6:	615a      	str	r2, [r3, #20]
 8012ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cea:	695a      	ldr	r2, [r3, #20]
 8012cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cee:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf2:	2280      	movs	r2, #128	; 0x80
 8012cf4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012cf6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012cfa:	2b03      	cmp	r3, #3
 8012cfc:	d149      	bne.n	8012d92 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d00:	3338      	adds	r3, #56	; 0x38
 8012d02:	3330      	adds	r3, #48	; 0x30
 8012d04:	4618      	mov	r0, r3
 8012d06:	f7fe fa69 	bl	80111dc <ld_word>
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	2b01      	cmp	r3, #1
 8012d0e:	d140      	bne.n	8012d92 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012d10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d12:	3301      	adds	r3, #1
 8012d14:	4619      	mov	r1, r3
 8012d16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012d18:	f7fe fd10 	bl	801173c <move_window>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d137      	bne.n	8012d92 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d24:	2200      	movs	r2, #0
 8012d26:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d2a:	3338      	adds	r3, #56	; 0x38
 8012d2c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012d30:	4618      	mov	r0, r3
 8012d32:	f7fe fa53 	bl	80111dc <ld_word>
 8012d36:	4603      	mov	r3, r0
 8012d38:	461a      	mov	r2, r3
 8012d3a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012d3e:	429a      	cmp	r2, r3
 8012d40:	d127      	bne.n	8012d92 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d44:	3338      	adds	r3, #56	; 0x38
 8012d46:	4618      	mov	r0, r3
 8012d48:	f7fe fa60 	bl	801120c <ld_dword>
 8012d4c:	4603      	mov	r3, r0
 8012d4e:	4a1d      	ldr	r2, [pc, #116]	; (8012dc4 <find_volume+0x500>)
 8012d50:	4293      	cmp	r3, r2
 8012d52:	d11e      	bne.n	8012d92 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d56:	3338      	adds	r3, #56	; 0x38
 8012d58:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f7fe fa55 	bl	801120c <ld_dword>
 8012d62:	4603      	mov	r3, r0
 8012d64:	4a18      	ldr	r2, [pc, #96]	; (8012dc8 <find_volume+0x504>)
 8012d66:	4293      	cmp	r3, r2
 8012d68:	d113      	bne.n	8012d92 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d6c:	3338      	adds	r3, #56	; 0x38
 8012d6e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012d72:	4618      	mov	r0, r3
 8012d74:	f7fe fa4a 	bl	801120c <ld_dword>
 8012d78:	4602      	mov	r2, r0
 8012d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d7c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d80:	3338      	adds	r3, #56	; 0x38
 8012d82:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012d86:	4618      	mov	r0, r3
 8012d88:	f7fe fa40 	bl	801120c <ld_dword>
 8012d8c:	4602      	mov	r2, r0
 8012d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d90:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d94:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012d98:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012d9a:	4b0c      	ldr	r3, [pc, #48]	; (8012dcc <find_volume+0x508>)
 8012d9c:	881b      	ldrh	r3, [r3, #0]
 8012d9e:	3301      	adds	r3, #1
 8012da0:	b29a      	uxth	r2, r3
 8012da2:	4b0a      	ldr	r3, [pc, #40]	; (8012dcc <find_volume+0x508>)
 8012da4:	801a      	strh	r2, [r3, #0]
 8012da6:	4b09      	ldr	r3, [pc, #36]	; (8012dcc <find_volume+0x508>)
 8012da8:	881a      	ldrh	r2, [r3, #0]
 8012daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dac:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8012dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db0:	2200      	movs	r2, #0
 8012db2:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012db4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012db6:	f7fe fc59 	bl	801166c <clear_lock>
#endif
	return FR_OK;
 8012dba:	2300      	movs	r3, #0
}
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3758      	adds	r7, #88	; 0x58
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}
 8012dc4:	41615252 	.word	0x41615252
 8012dc8:	61417272 	.word	0x61417272
 8012dcc:	2003d4e4 	.word	0x2003d4e4

08012dd0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b084      	sub	sp, #16
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
 8012dd8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012dda:	2309      	movs	r3, #9
 8012ddc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d01c      	beq.n	8012e1e <validate+0x4e>
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d018      	beq.n	8012e1e <validate+0x4e>
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	781b      	ldrb	r3, [r3, #0]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d013      	beq.n	8012e1e <validate+0x4e>
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	889a      	ldrh	r2, [r3, #4]
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	88db      	ldrh	r3, [r3, #6]
 8012e00:	429a      	cmp	r2, r3
 8012e02:	d10c      	bne.n	8012e1e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	785b      	ldrb	r3, [r3, #1]
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	f7fe f948 	bl	80110a0 <disk_status>
 8012e10:	4603      	mov	r3, r0
 8012e12:	f003 0301 	and.w	r3, r3, #1
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d101      	bne.n	8012e1e <validate+0x4e>
			res = FR_OK;
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012e1e:	7bfb      	ldrb	r3, [r7, #15]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d102      	bne.n	8012e2a <validate+0x5a>
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	e000      	b.n	8012e2c <validate+0x5c>
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	683a      	ldr	r2, [r7, #0]
 8012e2e:	6013      	str	r3, [r2, #0]
	return res;
 8012e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e32:	4618      	mov	r0, r3
 8012e34:	3710      	adds	r7, #16
 8012e36:	46bd      	mov	sp, r7
 8012e38:	bd80      	pop	{r7, pc}
	...

08012e3c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b088      	sub	sp, #32
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	60f8      	str	r0, [r7, #12]
 8012e44:	60b9      	str	r1, [r7, #8]
 8012e46:	4613      	mov	r3, r2
 8012e48:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012e4a:	68bb      	ldr	r3, [r7, #8]
 8012e4c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012e4e:	f107 0310 	add.w	r3, r7, #16
 8012e52:	4618      	mov	r0, r3
 8012e54:	f7ff fc9b 	bl	801278e <get_ldnumber>
 8012e58:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012e5a:	69fb      	ldr	r3, [r7, #28]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	da01      	bge.n	8012e64 <f_mount+0x28>
 8012e60:	230b      	movs	r3, #11
 8012e62:	e02b      	b.n	8012ebc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012e64:	4a17      	ldr	r2, [pc, #92]	; (8012ec4 <f_mount+0x88>)
 8012e66:	69fb      	ldr	r3, [r7, #28]
 8012e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e6c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012e6e:	69bb      	ldr	r3, [r7, #24]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d005      	beq.n	8012e80 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012e74:	69b8      	ldr	r0, [r7, #24]
 8012e76:	f7fe fbf9 	bl	801166c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012e7a:	69bb      	ldr	r3, [r7, #24]
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d002      	beq.n	8012e8c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	2200      	movs	r2, #0
 8012e8a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012e8c:	68fa      	ldr	r2, [r7, #12]
 8012e8e:	490d      	ldr	r1, [pc, #52]	; (8012ec4 <f_mount+0x88>)
 8012e90:	69fb      	ldr	r3, [r7, #28]
 8012e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d002      	beq.n	8012ea2 <f_mount+0x66>
 8012e9c:	79fb      	ldrb	r3, [r7, #7]
 8012e9e:	2b01      	cmp	r3, #1
 8012ea0:	d001      	beq.n	8012ea6 <f_mount+0x6a>
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	e00a      	b.n	8012ebc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012ea6:	f107 010c 	add.w	r1, r7, #12
 8012eaa:	f107 0308 	add.w	r3, r7, #8
 8012eae:	2200      	movs	r2, #0
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f7ff fd07 	bl	80128c4 <find_volume>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	3720      	adds	r7, #32
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	bd80      	pop	{r7, pc}
 8012ec4:	2003d4e0 	.word	0x2003d4e0

08012ec8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b098      	sub	sp, #96	; 0x60
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	60f8      	str	r0, [r7, #12]
 8012ed0:	60b9      	str	r1, [r7, #8]
 8012ed2:	4613      	mov	r3, r2
 8012ed4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d101      	bne.n	8012ee0 <f_open+0x18>
 8012edc:	2309      	movs	r3, #9
 8012ede:	e1ba      	b.n	8013256 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012ee0:	79fb      	ldrb	r3, [r7, #7]
 8012ee2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ee6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012ee8:	79fa      	ldrb	r2, [r7, #7]
 8012eea:	f107 0110 	add.w	r1, r7, #16
 8012eee:	f107 0308 	add.w	r3, r7, #8
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	f7ff fce6 	bl	80128c4 <find_volume>
 8012ef8:	4603      	mov	r3, r0
 8012efa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012efe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	f040 819e 	bne.w	8013244 <f_open+0x37c>
		dj.obj.fs = fs;
 8012f08:	693b      	ldr	r3, [r7, #16]
 8012f0a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012f0c:	68ba      	ldr	r2, [r7, #8]
 8012f0e:	f107 0314 	add.w	r3, r7, #20
 8012f12:	4611      	mov	r1, r2
 8012f14:	4618      	mov	r0, r3
 8012f16:	f7ff fba5 	bl	8012664 <follow_path>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012f20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d11a      	bne.n	8012f5e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012f28:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012f2c:	b25b      	sxtb	r3, r3
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	da03      	bge.n	8012f3a <f_open+0x72>
				res = FR_INVALID_NAME;
 8012f32:	2306      	movs	r3, #6
 8012f34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012f38:	e011      	b.n	8012f5e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012f3a:	79fb      	ldrb	r3, [r7, #7]
 8012f3c:	f023 0301 	bic.w	r3, r3, #1
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	bf14      	ite	ne
 8012f44:	2301      	movne	r3, #1
 8012f46:	2300      	moveq	r3, #0
 8012f48:	b2db      	uxtb	r3, r3
 8012f4a:	461a      	mov	r2, r3
 8012f4c:	f107 0314 	add.w	r3, r7, #20
 8012f50:	4611      	mov	r1, r2
 8012f52:	4618      	mov	r0, r3
 8012f54:	f7fe fa42 	bl	80113dc <chk_lock>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012f5e:	79fb      	ldrb	r3, [r7, #7]
 8012f60:	f003 031c 	and.w	r3, r3, #28
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d07e      	beq.n	8013066 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8012f68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d017      	beq.n	8012fa0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012f70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f74:	2b04      	cmp	r3, #4
 8012f76:	d10e      	bne.n	8012f96 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012f78:	f7fe fa8c 	bl	8011494 <enq_lock>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d006      	beq.n	8012f90 <f_open+0xc8>
 8012f82:	f107 0314 	add.w	r3, r7, #20
 8012f86:	4618      	mov	r0, r3
 8012f88:	f7ff fa51 	bl	801242e <dir_register>
 8012f8c:	4603      	mov	r3, r0
 8012f8e:	e000      	b.n	8012f92 <f_open+0xca>
 8012f90:	2312      	movs	r3, #18
 8012f92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012f96:	79fb      	ldrb	r3, [r7, #7]
 8012f98:	f043 0308 	orr.w	r3, r3, #8
 8012f9c:	71fb      	strb	r3, [r7, #7]
 8012f9e:	e010      	b.n	8012fc2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012fa0:	7ebb      	ldrb	r3, [r7, #26]
 8012fa2:	f003 0311 	and.w	r3, r3, #17
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d003      	beq.n	8012fb2 <f_open+0xea>
					res = FR_DENIED;
 8012faa:	2307      	movs	r3, #7
 8012fac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012fb0:	e007      	b.n	8012fc2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012fb2:	79fb      	ldrb	r3, [r7, #7]
 8012fb4:	f003 0304 	and.w	r3, r3, #4
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d002      	beq.n	8012fc2 <f_open+0xfa>
 8012fbc:	2308      	movs	r3, #8
 8012fbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012fc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d167      	bne.n	801309a <f_open+0x1d2>
 8012fca:	79fb      	ldrb	r3, [r7, #7]
 8012fcc:	f003 0308 	and.w	r3, r3, #8
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d062      	beq.n	801309a <f_open+0x1d2>
				dw = GET_FATTIME();
 8012fd4:	4ba2      	ldr	r3, [pc, #648]	; (8013260 <f_open+0x398>)
 8012fd6:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fda:	330e      	adds	r3, #14
 8012fdc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012fde:	4618      	mov	r0, r3
 8012fe0:	f7fe f952 	bl	8011288 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fe6:	3316      	adds	r3, #22
 8012fe8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012fea:	4618      	mov	r0, r3
 8012fec:	f7fe f94c 	bl	8011288 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ff2:	330b      	adds	r3, #11
 8012ff4:	2220      	movs	r2, #32
 8012ff6:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012ff8:	693b      	ldr	r3, [r7, #16]
 8012ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ffc:	4611      	mov	r1, r2
 8012ffe:	4618      	mov	r0, r3
 8013000:	f7ff f924 	bl	801224c <ld_clust>
 8013004:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013006:	693b      	ldr	r3, [r7, #16]
 8013008:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801300a:	2200      	movs	r2, #0
 801300c:	4618      	mov	r0, r3
 801300e:	f7ff f93c 	bl	801228a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013014:	331c      	adds	r3, #28
 8013016:	2100      	movs	r1, #0
 8013018:	4618      	mov	r0, r3
 801301a:	f7fe f935 	bl	8011288 <st_dword>
					fs->wflag = 1;
 801301e:	693b      	ldr	r3, [r7, #16]
 8013020:	2201      	movs	r2, #1
 8013022:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013026:	2b00      	cmp	r3, #0
 8013028:	d037      	beq.n	801309a <f_open+0x1d2>
						dw = fs->winsect;
 801302a:	693b      	ldr	r3, [r7, #16]
 801302c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801302e:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013030:	f107 0314 	add.w	r3, r7, #20
 8013034:	2200      	movs	r2, #0
 8013036:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013038:	4618      	mov	r0, r3
 801303a:	f7fe fe2c 	bl	8011c96 <remove_chain>
 801303e:	4603      	mov	r3, r0
 8013040:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8013044:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013048:	2b00      	cmp	r3, #0
 801304a:	d126      	bne.n	801309a <f_open+0x1d2>
							res = move_window(fs, dw);
 801304c:	693b      	ldr	r3, [r7, #16]
 801304e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013050:	4618      	mov	r0, r3
 8013052:	f7fe fb73 	bl	801173c <move_window>
 8013056:	4603      	mov	r3, r0
 8013058:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801305c:	693b      	ldr	r3, [r7, #16]
 801305e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013060:	3a01      	subs	r2, #1
 8013062:	611a      	str	r2, [r3, #16]
 8013064:	e019      	b.n	801309a <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013066:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801306a:	2b00      	cmp	r3, #0
 801306c:	d115      	bne.n	801309a <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801306e:	7ebb      	ldrb	r3, [r7, #26]
 8013070:	f003 0310 	and.w	r3, r3, #16
 8013074:	2b00      	cmp	r3, #0
 8013076:	d003      	beq.n	8013080 <f_open+0x1b8>
					res = FR_NO_FILE;
 8013078:	2304      	movs	r3, #4
 801307a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801307e:	e00c      	b.n	801309a <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013080:	79fb      	ldrb	r3, [r7, #7]
 8013082:	f003 0302 	and.w	r3, r3, #2
 8013086:	2b00      	cmp	r3, #0
 8013088:	d007      	beq.n	801309a <f_open+0x1d2>
 801308a:	7ebb      	ldrb	r3, [r7, #26]
 801308c:	f003 0301 	and.w	r3, r3, #1
 8013090:	2b00      	cmp	r3, #0
 8013092:	d002      	beq.n	801309a <f_open+0x1d2>
						res = FR_DENIED;
 8013094:	2307      	movs	r3, #7
 8013096:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801309a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d128      	bne.n	80130f4 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80130a2:	79fb      	ldrb	r3, [r7, #7]
 80130a4:	f003 0308 	and.w	r3, r3, #8
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d003      	beq.n	80130b4 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 80130ac:	79fb      	ldrb	r3, [r7, #7]
 80130ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130b2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80130b4:	693b      	ldr	r3, [r7, #16]
 80130b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80130bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80130c2:	79fb      	ldrb	r3, [r7, #7]
 80130c4:	f023 0301 	bic.w	r3, r3, #1
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	bf14      	ite	ne
 80130cc:	2301      	movne	r3, #1
 80130ce:	2300      	moveq	r3, #0
 80130d0:	b2db      	uxtb	r3, r3
 80130d2:	461a      	mov	r2, r3
 80130d4:	f107 0314 	add.w	r3, r7, #20
 80130d8:	4611      	mov	r1, r2
 80130da:	4618      	mov	r0, r3
 80130dc:	f7fe f9fc 	bl	80114d8 <inc_lock>
 80130e0:	4602      	mov	r2, r0
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	691b      	ldr	r3, [r3, #16]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d102      	bne.n	80130f4 <f_open+0x22c>
 80130ee:	2302      	movs	r3, #2
 80130f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80130f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	f040 80a3 	bne.w	8013244 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80130fe:	693b      	ldr	r3, [r7, #16]
 8013100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013102:	4611      	mov	r1, r2
 8013104:	4618      	mov	r0, r3
 8013106:	f7ff f8a1 	bl	801224c <ld_clust>
 801310a:	4602      	mov	r2, r0
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013112:	331c      	adds	r3, #28
 8013114:	4618      	mov	r0, r3
 8013116:	f7fe f879 	bl	801120c <ld_dword>
 801311a:	4602      	mov	r2, r0
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	2200      	movs	r2, #0
 8013124:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013126:	693a      	ldr	r2, [r7, #16]
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801312c:	693b      	ldr	r3, [r7, #16]
 801312e:	88da      	ldrh	r2, [r3, #6]
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	79fa      	ldrb	r2, [r7, #7]
 8013138:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	2200      	movs	r2, #0
 801313e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	2200      	movs	r2, #0
 8013144:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	2200      	movs	r2, #0
 801314a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	3330      	adds	r3, #48	; 0x30
 8013150:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013154:	2100      	movs	r1, #0
 8013156:	4618      	mov	r0, r3
 8013158:	f7fe f8e3 	bl	8011322 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801315c:	79fb      	ldrb	r3, [r7, #7]
 801315e:	f003 0320 	and.w	r3, r3, #32
 8013162:	2b00      	cmp	r3, #0
 8013164:	d06e      	beq.n	8013244 <f_open+0x37c>
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	68db      	ldr	r3, [r3, #12]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d06a      	beq.n	8013244 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	68da      	ldr	r2, [r3, #12]
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013176:	693b      	ldr	r3, [r7, #16]
 8013178:	895b      	ldrh	r3, [r3, #10]
 801317a:	461a      	mov	r2, r3
 801317c:	693b      	ldr	r3, [r7, #16]
 801317e:	899b      	ldrh	r3, [r3, #12]
 8013180:	fb03 f302 	mul.w	r3, r3, r2
 8013184:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	689b      	ldr	r3, [r3, #8]
 801318a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	68db      	ldr	r3, [r3, #12]
 8013190:	657b      	str	r3, [r7, #84]	; 0x54
 8013192:	e016      	b.n	80131c2 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013198:	4618      	mov	r0, r3
 801319a:	f7fe fb8c 	bl	80118b6 <get_fat>
 801319e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80131a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80131a2:	2b01      	cmp	r3, #1
 80131a4:	d802      	bhi.n	80131ac <f_open+0x2e4>
 80131a6:	2302      	movs	r3, #2
 80131a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80131ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80131ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131b2:	d102      	bne.n	80131ba <f_open+0x2f2>
 80131b4:	2301      	movs	r3, #1
 80131b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80131ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80131bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80131be:	1ad3      	subs	r3, r2, r3
 80131c0:	657b      	str	r3, [r7, #84]	; 0x54
 80131c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d103      	bne.n	80131d2 <f_open+0x30a>
 80131ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80131cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80131ce:	429a      	cmp	r2, r3
 80131d0:	d8e0      	bhi.n	8013194 <f_open+0x2cc>
				}
				fp->clust = clst;
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80131d6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80131d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d131      	bne.n	8013244 <f_open+0x37c>
 80131e0:	693b      	ldr	r3, [r7, #16]
 80131e2:	899b      	ldrh	r3, [r3, #12]
 80131e4:	461a      	mov	r2, r3
 80131e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80131ec:	fb02 f201 	mul.w	r2, r2, r1
 80131f0:	1a9b      	subs	r3, r3, r2
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d026      	beq.n	8013244 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80131f6:	693b      	ldr	r3, [r7, #16]
 80131f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80131fa:	4618      	mov	r0, r3
 80131fc:	f7fe fb3c 	bl	8011878 <clust2sect>
 8013200:	6478      	str	r0, [r7, #68]	; 0x44
 8013202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013204:	2b00      	cmp	r3, #0
 8013206:	d103      	bne.n	8013210 <f_open+0x348>
						res = FR_INT_ERR;
 8013208:	2302      	movs	r3, #2
 801320a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801320e:	e019      	b.n	8013244 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013210:	693b      	ldr	r3, [r7, #16]
 8013212:	899b      	ldrh	r3, [r3, #12]
 8013214:	461a      	mov	r2, r3
 8013216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013218:	fbb3 f2f2 	udiv	r2, r3, r2
 801321c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801321e:	441a      	add	r2, r3
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013224:	693b      	ldr	r3, [r7, #16]
 8013226:	7858      	ldrb	r0, [r3, #1]
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	6a1a      	ldr	r2, [r3, #32]
 8013232:	2301      	movs	r3, #1
 8013234:	f7fd ff74 	bl	8011120 <disk_read>
 8013238:	4603      	mov	r3, r0
 801323a:	2b00      	cmp	r3, #0
 801323c:	d002      	beq.n	8013244 <f_open+0x37c>
 801323e:	2301      	movs	r3, #1
 8013240:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013244:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013248:	2b00      	cmp	r3, #0
 801324a:	d002      	beq.n	8013252 <f_open+0x38a>
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	2200      	movs	r2, #0
 8013250:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013252:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8013256:	4618      	mov	r0, r3
 8013258:	3760      	adds	r7, #96	; 0x60
 801325a:	46bd      	mov	sp, r7
 801325c:	bd80      	pop	{r7, pc}
 801325e:	bf00      	nop
 8013260:	274a0000 	.word	0x274a0000

08013264 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b08e      	sub	sp, #56	; 0x38
 8013268:	af00      	add	r7, sp, #0
 801326a:	60f8      	str	r0, [r7, #12]
 801326c:	60b9      	str	r1, [r7, #8]
 801326e:	607a      	str	r2, [r7, #4]
 8013270:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8013272:	68bb      	ldr	r3, [r7, #8]
 8013274:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8013276:	683b      	ldr	r3, [r7, #0]
 8013278:	2200      	movs	r2, #0
 801327a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	f107 0214 	add.w	r2, r7, #20
 8013282:	4611      	mov	r1, r2
 8013284:	4618      	mov	r0, r3
 8013286:	f7ff fda3 	bl	8012dd0 <validate>
 801328a:	4603      	mov	r3, r0
 801328c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013290:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013294:	2b00      	cmp	r3, #0
 8013296:	d107      	bne.n	80132a8 <f_read+0x44>
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	7d5b      	ldrb	r3, [r3, #21]
 801329c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80132a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d002      	beq.n	80132ae <f_read+0x4a>
 80132a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80132ac:	e135      	b.n	801351a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	7d1b      	ldrb	r3, [r3, #20]
 80132b2:	f003 0301 	and.w	r3, r3, #1
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d101      	bne.n	80132be <f_read+0x5a>
 80132ba:	2307      	movs	r3, #7
 80132bc:	e12d      	b.n	801351a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	68da      	ldr	r2, [r3, #12]
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	699b      	ldr	r3, [r3, #24]
 80132c6:	1ad3      	subs	r3, r2, r3
 80132c8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80132ca:	687a      	ldr	r2, [r7, #4]
 80132cc:	6a3b      	ldr	r3, [r7, #32]
 80132ce:	429a      	cmp	r2, r3
 80132d0:	f240 811e 	bls.w	8013510 <f_read+0x2ac>
 80132d4:	6a3b      	ldr	r3, [r7, #32]
 80132d6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80132d8:	e11a      	b.n	8013510 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	699b      	ldr	r3, [r3, #24]
 80132de:	697a      	ldr	r2, [r7, #20]
 80132e0:	8992      	ldrh	r2, [r2, #12]
 80132e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80132e6:	fb02 f201 	mul.w	r2, r2, r1
 80132ea:	1a9b      	subs	r3, r3, r2
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	f040 80d5 	bne.w	801349c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	699b      	ldr	r3, [r3, #24]
 80132f6:	697a      	ldr	r2, [r7, #20]
 80132f8:	8992      	ldrh	r2, [r2, #12]
 80132fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80132fe:	697a      	ldr	r2, [r7, #20]
 8013300:	8952      	ldrh	r2, [r2, #10]
 8013302:	3a01      	subs	r2, #1
 8013304:	4013      	ands	r3, r2
 8013306:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013308:	69fb      	ldr	r3, [r7, #28]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d12f      	bne.n	801336e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	699b      	ldr	r3, [r3, #24]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d103      	bne.n	801331e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	689b      	ldr	r3, [r3, #8]
 801331a:	633b      	str	r3, [r7, #48]	; 0x30
 801331c:	e013      	b.n	8013346 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013322:	2b00      	cmp	r3, #0
 8013324:	d007      	beq.n	8013336 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	699b      	ldr	r3, [r3, #24]
 801332a:	4619      	mov	r1, r3
 801332c:	68f8      	ldr	r0, [r7, #12]
 801332e:	f7fe fdaf 	bl	8011e90 <clmt_clust>
 8013332:	6338      	str	r0, [r7, #48]	; 0x30
 8013334:	e007      	b.n	8013346 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8013336:	68fa      	ldr	r2, [r7, #12]
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	69db      	ldr	r3, [r3, #28]
 801333c:	4619      	mov	r1, r3
 801333e:	4610      	mov	r0, r2
 8013340:	f7fe fab9 	bl	80118b6 <get_fat>
 8013344:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013348:	2b01      	cmp	r3, #1
 801334a:	d804      	bhi.n	8013356 <f_read+0xf2>
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	2202      	movs	r2, #2
 8013350:	755a      	strb	r2, [r3, #21]
 8013352:	2302      	movs	r3, #2
 8013354:	e0e1      	b.n	801351a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013358:	f1b3 3fff 	cmp.w	r3, #4294967295
 801335c:	d104      	bne.n	8013368 <f_read+0x104>
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	2201      	movs	r2, #1
 8013362:	755a      	strb	r2, [r3, #21]
 8013364:	2301      	movs	r3, #1
 8013366:	e0d8      	b.n	801351a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801336c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801336e:	697a      	ldr	r2, [r7, #20]
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	69db      	ldr	r3, [r3, #28]
 8013374:	4619      	mov	r1, r3
 8013376:	4610      	mov	r0, r2
 8013378:	f7fe fa7e 	bl	8011878 <clust2sect>
 801337c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801337e:	69bb      	ldr	r3, [r7, #24]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d104      	bne.n	801338e <f_read+0x12a>
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	2202      	movs	r2, #2
 8013388:	755a      	strb	r2, [r3, #21]
 801338a:	2302      	movs	r3, #2
 801338c:	e0c5      	b.n	801351a <f_read+0x2b6>
			sect += csect;
 801338e:	69ba      	ldr	r2, [r7, #24]
 8013390:	69fb      	ldr	r3, [r7, #28]
 8013392:	4413      	add	r3, r2
 8013394:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013396:	697b      	ldr	r3, [r7, #20]
 8013398:	899b      	ldrh	r3, [r3, #12]
 801339a:	461a      	mov	r2, r3
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	fbb3 f3f2 	udiv	r3, r3, r2
 80133a2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80133a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d041      	beq.n	801342e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80133aa:	69fa      	ldr	r2, [r7, #28]
 80133ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ae:	4413      	add	r3, r2
 80133b0:	697a      	ldr	r2, [r7, #20]
 80133b2:	8952      	ldrh	r2, [r2, #10]
 80133b4:	4293      	cmp	r3, r2
 80133b6:	d905      	bls.n	80133c4 <f_read+0x160>
					cc = fs->csize - csect;
 80133b8:	697b      	ldr	r3, [r7, #20]
 80133ba:	895b      	ldrh	r3, [r3, #10]
 80133bc:	461a      	mov	r2, r3
 80133be:	69fb      	ldr	r3, [r7, #28]
 80133c0:	1ad3      	subs	r3, r2, r3
 80133c2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80133c4:	697b      	ldr	r3, [r7, #20]
 80133c6:	7858      	ldrb	r0, [r3, #1]
 80133c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ca:	69ba      	ldr	r2, [r7, #24]
 80133cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80133ce:	f7fd fea7 	bl	8011120 <disk_read>
 80133d2:	4603      	mov	r3, r0
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d004      	beq.n	80133e2 <f_read+0x17e>
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	2201      	movs	r2, #1
 80133dc:	755a      	strb	r2, [r3, #21]
 80133de:	2301      	movs	r3, #1
 80133e0:	e09b      	b.n	801351a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	7d1b      	ldrb	r3, [r3, #20]
 80133e6:	b25b      	sxtb	r3, r3
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	da18      	bge.n	801341e <f_read+0x1ba>
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	6a1a      	ldr	r2, [r3, #32]
 80133f0:	69bb      	ldr	r3, [r7, #24]
 80133f2:	1ad3      	subs	r3, r2, r3
 80133f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80133f6:	429a      	cmp	r2, r3
 80133f8:	d911      	bls.n	801341e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	6a1a      	ldr	r2, [r3, #32]
 80133fe:	69bb      	ldr	r3, [r7, #24]
 8013400:	1ad3      	subs	r3, r2, r3
 8013402:	697a      	ldr	r2, [r7, #20]
 8013404:	8992      	ldrh	r2, [r2, #12]
 8013406:	fb02 f303 	mul.w	r3, r2, r3
 801340a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801340c:	18d0      	adds	r0, r2, r3
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013414:	697b      	ldr	r3, [r7, #20]
 8013416:	899b      	ldrh	r3, [r3, #12]
 8013418:	461a      	mov	r2, r3
 801341a:	f7fd ff61 	bl	80112e0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801341e:	697b      	ldr	r3, [r7, #20]
 8013420:	899b      	ldrh	r3, [r3, #12]
 8013422:	461a      	mov	r2, r3
 8013424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013426:	fb02 f303 	mul.w	r3, r2, r3
 801342a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801342c:	e05c      	b.n	80134e8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	6a1b      	ldr	r3, [r3, #32]
 8013432:	69ba      	ldr	r2, [r7, #24]
 8013434:	429a      	cmp	r2, r3
 8013436:	d02e      	beq.n	8013496 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	7d1b      	ldrb	r3, [r3, #20]
 801343c:	b25b      	sxtb	r3, r3
 801343e:	2b00      	cmp	r3, #0
 8013440:	da18      	bge.n	8013474 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013442:	697b      	ldr	r3, [r7, #20]
 8013444:	7858      	ldrb	r0, [r3, #1]
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	6a1a      	ldr	r2, [r3, #32]
 8013450:	2301      	movs	r3, #1
 8013452:	f7fd fe85 	bl	8011160 <disk_write>
 8013456:	4603      	mov	r3, r0
 8013458:	2b00      	cmp	r3, #0
 801345a:	d004      	beq.n	8013466 <f_read+0x202>
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	2201      	movs	r2, #1
 8013460:	755a      	strb	r2, [r3, #21]
 8013462:	2301      	movs	r3, #1
 8013464:	e059      	b.n	801351a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	7d1b      	ldrb	r3, [r3, #20]
 801346a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801346e:	b2da      	uxtb	r2, r3
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013474:	697b      	ldr	r3, [r7, #20]
 8013476:	7858      	ldrb	r0, [r3, #1]
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801347e:	2301      	movs	r3, #1
 8013480:	69ba      	ldr	r2, [r7, #24]
 8013482:	f7fd fe4d 	bl	8011120 <disk_read>
 8013486:	4603      	mov	r3, r0
 8013488:	2b00      	cmp	r3, #0
 801348a:	d004      	beq.n	8013496 <f_read+0x232>
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	2201      	movs	r2, #1
 8013490:	755a      	strb	r2, [r3, #21]
 8013492:	2301      	movs	r3, #1
 8013494:	e041      	b.n	801351a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	69ba      	ldr	r2, [r7, #24]
 801349a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801349c:	697b      	ldr	r3, [r7, #20]
 801349e:	899b      	ldrh	r3, [r3, #12]
 80134a0:	4618      	mov	r0, r3
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	699b      	ldr	r3, [r3, #24]
 80134a6:	697a      	ldr	r2, [r7, #20]
 80134a8:	8992      	ldrh	r2, [r2, #12]
 80134aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80134ae:	fb02 f201 	mul.w	r2, r2, r1
 80134b2:	1a9b      	subs	r3, r3, r2
 80134b4:	1ac3      	subs	r3, r0, r3
 80134b6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80134b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	429a      	cmp	r2, r3
 80134be:	d901      	bls.n	80134c4 <f_read+0x260>
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	699b      	ldr	r3, [r3, #24]
 80134ce:	697a      	ldr	r2, [r7, #20]
 80134d0:	8992      	ldrh	r2, [r2, #12]
 80134d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80134d6:	fb02 f200 	mul.w	r2, r2, r0
 80134da:	1a9b      	subs	r3, r3, r2
 80134dc:	440b      	add	r3, r1
 80134de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134e0:	4619      	mov	r1, r3
 80134e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80134e4:	f7fd fefc 	bl	80112e0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80134e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ec:	4413      	add	r3, r2
 80134ee:	627b      	str	r3, [r7, #36]	; 0x24
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	699a      	ldr	r2, [r3, #24]
 80134f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134f6:	441a      	add	r2, r3
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	619a      	str	r2, [r3, #24]
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	681a      	ldr	r2, [r3, #0]
 8013500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013502:	441a      	add	r2, r3
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	601a      	str	r2, [r3, #0]
 8013508:	687a      	ldr	r2, [r7, #4]
 801350a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801350c:	1ad3      	subs	r3, r2, r3
 801350e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	2b00      	cmp	r3, #0
 8013514:	f47f aee1 	bne.w	80132da <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013518:	2300      	movs	r3, #0
}
 801351a:	4618      	mov	r0, r3
 801351c:	3738      	adds	r7, #56	; 0x38
 801351e:	46bd      	mov	sp, r7
 8013520:	bd80      	pop	{r7, pc}

08013522 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013522:	b580      	push	{r7, lr}
 8013524:	b08c      	sub	sp, #48	; 0x30
 8013526:	af00      	add	r7, sp, #0
 8013528:	60f8      	str	r0, [r7, #12]
 801352a:	60b9      	str	r1, [r7, #8]
 801352c:	607a      	str	r2, [r7, #4]
 801352e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013534:	683b      	ldr	r3, [r7, #0]
 8013536:	2200      	movs	r2, #0
 8013538:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	f107 0210 	add.w	r2, r7, #16
 8013540:	4611      	mov	r1, r2
 8013542:	4618      	mov	r0, r3
 8013544:	f7ff fc44 	bl	8012dd0 <validate>
 8013548:	4603      	mov	r3, r0
 801354a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801354e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013552:	2b00      	cmp	r3, #0
 8013554:	d107      	bne.n	8013566 <f_write+0x44>
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	7d5b      	ldrb	r3, [r3, #21]
 801355a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801355e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013562:	2b00      	cmp	r3, #0
 8013564:	d002      	beq.n	801356c <f_write+0x4a>
 8013566:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801356a:	e16a      	b.n	8013842 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	7d1b      	ldrb	r3, [r3, #20]
 8013570:	f003 0302 	and.w	r3, r3, #2
 8013574:	2b00      	cmp	r3, #0
 8013576:	d101      	bne.n	801357c <f_write+0x5a>
 8013578:	2307      	movs	r3, #7
 801357a:	e162      	b.n	8013842 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	699a      	ldr	r2, [r3, #24]
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	441a      	add	r2, r3
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	699b      	ldr	r3, [r3, #24]
 8013588:	429a      	cmp	r2, r3
 801358a:	f080 814c 	bcs.w	8013826 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	699b      	ldr	r3, [r3, #24]
 8013592:	43db      	mvns	r3, r3
 8013594:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013596:	e146      	b.n	8013826 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	699b      	ldr	r3, [r3, #24]
 801359c:	693a      	ldr	r2, [r7, #16]
 801359e:	8992      	ldrh	r2, [r2, #12]
 80135a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80135a4:	fb02 f201 	mul.w	r2, r2, r1
 80135a8:	1a9b      	subs	r3, r3, r2
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	f040 80f1 	bne.w	8013792 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	699b      	ldr	r3, [r3, #24]
 80135b4:	693a      	ldr	r2, [r7, #16]
 80135b6:	8992      	ldrh	r2, [r2, #12]
 80135b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80135bc:	693a      	ldr	r2, [r7, #16]
 80135be:	8952      	ldrh	r2, [r2, #10]
 80135c0:	3a01      	subs	r2, #1
 80135c2:	4013      	ands	r3, r2
 80135c4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80135c6:	69bb      	ldr	r3, [r7, #24]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d143      	bne.n	8013654 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	699b      	ldr	r3, [r3, #24]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d10c      	bne.n	80135ee <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	689b      	ldr	r3, [r3, #8]
 80135d8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80135da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d11a      	bne.n	8013616 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	2100      	movs	r1, #0
 80135e4:	4618      	mov	r0, r3
 80135e6:	f7fe fbbb 	bl	8011d60 <create_chain>
 80135ea:	62b8      	str	r0, [r7, #40]	; 0x28
 80135ec:	e013      	b.n	8013616 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d007      	beq.n	8013606 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	699b      	ldr	r3, [r3, #24]
 80135fa:	4619      	mov	r1, r3
 80135fc:	68f8      	ldr	r0, [r7, #12]
 80135fe:	f7fe fc47 	bl	8011e90 <clmt_clust>
 8013602:	62b8      	str	r0, [r7, #40]	; 0x28
 8013604:	e007      	b.n	8013616 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013606:	68fa      	ldr	r2, [r7, #12]
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	69db      	ldr	r3, [r3, #28]
 801360c:	4619      	mov	r1, r3
 801360e:	4610      	mov	r0, r2
 8013610:	f7fe fba6 	bl	8011d60 <create_chain>
 8013614:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013618:	2b00      	cmp	r3, #0
 801361a:	f000 8109 	beq.w	8013830 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801361e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013620:	2b01      	cmp	r3, #1
 8013622:	d104      	bne.n	801362e <f_write+0x10c>
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	2202      	movs	r2, #2
 8013628:	755a      	strb	r2, [r3, #21]
 801362a:	2302      	movs	r3, #2
 801362c:	e109      	b.n	8013842 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013634:	d104      	bne.n	8013640 <f_write+0x11e>
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	2201      	movs	r2, #1
 801363a:	755a      	strb	r2, [r3, #21]
 801363c:	2301      	movs	r3, #1
 801363e:	e100      	b.n	8013842 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013644:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	689b      	ldr	r3, [r3, #8]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d102      	bne.n	8013654 <f_write+0x132>
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013652:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	7d1b      	ldrb	r3, [r3, #20]
 8013658:	b25b      	sxtb	r3, r3
 801365a:	2b00      	cmp	r3, #0
 801365c:	da18      	bge.n	8013690 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801365e:	693b      	ldr	r3, [r7, #16]
 8013660:	7858      	ldrb	r0, [r3, #1]
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	6a1a      	ldr	r2, [r3, #32]
 801366c:	2301      	movs	r3, #1
 801366e:	f7fd fd77 	bl	8011160 <disk_write>
 8013672:	4603      	mov	r3, r0
 8013674:	2b00      	cmp	r3, #0
 8013676:	d004      	beq.n	8013682 <f_write+0x160>
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	2201      	movs	r2, #1
 801367c:	755a      	strb	r2, [r3, #21]
 801367e:	2301      	movs	r3, #1
 8013680:	e0df      	b.n	8013842 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	7d1b      	ldrb	r3, [r3, #20]
 8013686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801368a:	b2da      	uxtb	r2, r3
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013690:	693a      	ldr	r2, [r7, #16]
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	69db      	ldr	r3, [r3, #28]
 8013696:	4619      	mov	r1, r3
 8013698:	4610      	mov	r0, r2
 801369a:	f7fe f8ed 	bl	8011878 <clust2sect>
 801369e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80136a0:	697b      	ldr	r3, [r7, #20]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d104      	bne.n	80136b0 <f_write+0x18e>
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	2202      	movs	r2, #2
 80136aa:	755a      	strb	r2, [r3, #21]
 80136ac:	2302      	movs	r3, #2
 80136ae:	e0c8      	b.n	8013842 <f_write+0x320>
			sect += csect;
 80136b0:	697a      	ldr	r2, [r7, #20]
 80136b2:	69bb      	ldr	r3, [r7, #24]
 80136b4:	4413      	add	r3, r2
 80136b6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80136b8:	693b      	ldr	r3, [r7, #16]
 80136ba:	899b      	ldrh	r3, [r3, #12]
 80136bc:	461a      	mov	r2, r3
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80136c4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80136c6:	6a3b      	ldr	r3, [r7, #32]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d043      	beq.n	8013754 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80136cc:	69ba      	ldr	r2, [r7, #24]
 80136ce:	6a3b      	ldr	r3, [r7, #32]
 80136d0:	4413      	add	r3, r2
 80136d2:	693a      	ldr	r2, [r7, #16]
 80136d4:	8952      	ldrh	r2, [r2, #10]
 80136d6:	4293      	cmp	r3, r2
 80136d8:	d905      	bls.n	80136e6 <f_write+0x1c4>
					cc = fs->csize - csect;
 80136da:	693b      	ldr	r3, [r7, #16]
 80136dc:	895b      	ldrh	r3, [r3, #10]
 80136de:	461a      	mov	r2, r3
 80136e0:	69bb      	ldr	r3, [r7, #24]
 80136e2:	1ad3      	subs	r3, r2, r3
 80136e4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80136e6:	693b      	ldr	r3, [r7, #16]
 80136e8:	7858      	ldrb	r0, [r3, #1]
 80136ea:	6a3b      	ldr	r3, [r7, #32]
 80136ec:	697a      	ldr	r2, [r7, #20]
 80136ee:	69f9      	ldr	r1, [r7, #28]
 80136f0:	f7fd fd36 	bl	8011160 <disk_write>
 80136f4:	4603      	mov	r3, r0
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d004      	beq.n	8013704 <f_write+0x1e2>
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	2201      	movs	r2, #1
 80136fe:	755a      	strb	r2, [r3, #21]
 8013700:	2301      	movs	r3, #1
 8013702:	e09e      	b.n	8013842 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	6a1a      	ldr	r2, [r3, #32]
 8013708:	697b      	ldr	r3, [r7, #20]
 801370a:	1ad3      	subs	r3, r2, r3
 801370c:	6a3a      	ldr	r2, [r7, #32]
 801370e:	429a      	cmp	r2, r3
 8013710:	d918      	bls.n	8013744 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	6a1a      	ldr	r2, [r3, #32]
 801371c:	697b      	ldr	r3, [r7, #20]
 801371e:	1ad3      	subs	r3, r2, r3
 8013720:	693a      	ldr	r2, [r7, #16]
 8013722:	8992      	ldrh	r2, [r2, #12]
 8013724:	fb02 f303 	mul.w	r3, r2, r3
 8013728:	69fa      	ldr	r2, [r7, #28]
 801372a:	18d1      	adds	r1, r2, r3
 801372c:	693b      	ldr	r3, [r7, #16]
 801372e:	899b      	ldrh	r3, [r3, #12]
 8013730:	461a      	mov	r2, r3
 8013732:	f7fd fdd5 	bl	80112e0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	7d1b      	ldrb	r3, [r3, #20]
 801373a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801373e:	b2da      	uxtb	r2, r3
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013744:	693b      	ldr	r3, [r7, #16]
 8013746:	899b      	ldrh	r3, [r3, #12]
 8013748:	461a      	mov	r2, r3
 801374a:	6a3b      	ldr	r3, [r7, #32]
 801374c:	fb02 f303 	mul.w	r3, r2, r3
 8013750:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013752:	e04b      	b.n	80137ec <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	6a1b      	ldr	r3, [r3, #32]
 8013758:	697a      	ldr	r2, [r7, #20]
 801375a:	429a      	cmp	r2, r3
 801375c:	d016      	beq.n	801378c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	699a      	ldr	r2, [r3, #24]
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013766:	429a      	cmp	r2, r3
 8013768:	d210      	bcs.n	801378c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	7858      	ldrb	r0, [r3, #1]
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013774:	2301      	movs	r3, #1
 8013776:	697a      	ldr	r2, [r7, #20]
 8013778:	f7fd fcd2 	bl	8011120 <disk_read>
 801377c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801377e:	2b00      	cmp	r3, #0
 8013780:	d004      	beq.n	801378c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	2201      	movs	r2, #1
 8013786:	755a      	strb	r2, [r3, #21]
 8013788:	2301      	movs	r3, #1
 801378a:	e05a      	b.n	8013842 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	697a      	ldr	r2, [r7, #20]
 8013790:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013792:	693b      	ldr	r3, [r7, #16]
 8013794:	899b      	ldrh	r3, [r3, #12]
 8013796:	4618      	mov	r0, r3
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	699b      	ldr	r3, [r3, #24]
 801379c:	693a      	ldr	r2, [r7, #16]
 801379e:	8992      	ldrh	r2, [r2, #12]
 80137a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80137a4:	fb02 f201 	mul.w	r2, r2, r1
 80137a8:	1a9b      	subs	r3, r3, r2
 80137aa:	1ac3      	subs	r3, r0, r3
 80137ac:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80137ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	429a      	cmp	r2, r3
 80137b4:	d901      	bls.n	80137ba <f_write+0x298>
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	699b      	ldr	r3, [r3, #24]
 80137c4:	693a      	ldr	r2, [r7, #16]
 80137c6:	8992      	ldrh	r2, [r2, #12]
 80137c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80137cc:	fb02 f200 	mul.w	r2, r2, r0
 80137d0:	1a9b      	subs	r3, r3, r2
 80137d2:	440b      	add	r3, r1
 80137d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137d6:	69f9      	ldr	r1, [r7, #28]
 80137d8:	4618      	mov	r0, r3
 80137da:	f7fd fd81 	bl	80112e0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	7d1b      	ldrb	r3, [r3, #20]
 80137e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80137e6:	b2da      	uxtb	r2, r3
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80137ec:	69fa      	ldr	r2, [r7, #28]
 80137ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137f0:	4413      	add	r3, r2
 80137f2:	61fb      	str	r3, [r7, #28]
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	699a      	ldr	r2, [r3, #24]
 80137f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137fa:	441a      	add	r2, r3
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	619a      	str	r2, [r3, #24]
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	68da      	ldr	r2, [r3, #12]
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	699b      	ldr	r3, [r3, #24]
 8013808:	429a      	cmp	r2, r3
 801380a:	bf38      	it	cc
 801380c:	461a      	movcc	r2, r3
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	60da      	str	r2, [r3, #12]
 8013812:	683b      	ldr	r3, [r7, #0]
 8013814:	681a      	ldr	r2, [r3, #0]
 8013816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013818:	441a      	add	r2, r3
 801381a:	683b      	ldr	r3, [r7, #0]
 801381c:	601a      	str	r2, [r3, #0]
 801381e:	687a      	ldr	r2, [r7, #4]
 8013820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013822:	1ad3      	subs	r3, r2, r3
 8013824:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	2b00      	cmp	r3, #0
 801382a:	f47f aeb5 	bne.w	8013598 <f_write+0x76>
 801382e:	e000      	b.n	8013832 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013830:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	7d1b      	ldrb	r3, [r3, #20]
 8013836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801383a:	b2da      	uxtb	r2, r3
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013840:	2300      	movs	r3, #0
}
 8013842:	4618      	mov	r0, r3
 8013844:	3730      	adds	r7, #48	; 0x30
 8013846:	46bd      	mov	sp, r7
 8013848:	bd80      	pop	{r7, pc}
	...

0801384c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b086      	sub	sp, #24
 8013850:	af00      	add	r7, sp, #0
 8013852:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	f107 0208 	add.w	r2, r7, #8
 801385a:	4611      	mov	r1, r2
 801385c:	4618      	mov	r0, r3
 801385e:	f7ff fab7 	bl	8012dd0 <validate>
 8013862:	4603      	mov	r3, r0
 8013864:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013866:	7dfb      	ldrb	r3, [r7, #23]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d167      	bne.n	801393c <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	7d1b      	ldrb	r3, [r3, #20]
 8013870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013874:	2b00      	cmp	r3, #0
 8013876:	d061      	beq.n	801393c <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	7d1b      	ldrb	r3, [r3, #20]
 801387c:	b25b      	sxtb	r3, r3
 801387e:	2b00      	cmp	r3, #0
 8013880:	da15      	bge.n	80138ae <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013882:	68bb      	ldr	r3, [r7, #8]
 8013884:	7858      	ldrb	r0, [r3, #1]
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	6a1a      	ldr	r2, [r3, #32]
 8013890:	2301      	movs	r3, #1
 8013892:	f7fd fc65 	bl	8011160 <disk_write>
 8013896:	4603      	mov	r3, r0
 8013898:	2b00      	cmp	r3, #0
 801389a:	d001      	beq.n	80138a0 <f_sync+0x54>
 801389c:	2301      	movs	r3, #1
 801389e:	e04e      	b.n	801393e <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	7d1b      	ldrb	r3, [r3, #20]
 80138a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80138a8:	b2da      	uxtb	r2, r3
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80138ae:	4b26      	ldr	r3, [pc, #152]	; (8013948 <f_sync+0xfc>)
 80138b0:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80138b2:	68ba      	ldr	r2, [r7, #8]
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138b8:	4619      	mov	r1, r3
 80138ba:	4610      	mov	r0, r2
 80138bc:	f7fd ff3e 	bl	801173c <move_window>
 80138c0:	4603      	mov	r3, r0
 80138c2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80138c4:	7dfb      	ldrb	r3, [r7, #23]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d138      	bne.n	801393c <f_sync+0xf0>
					dir = fp->dir_ptr;
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138ce:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	330b      	adds	r3, #11
 80138d4:	781a      	ldrb	r2, [r3, #0]
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	330b      	adds	r3, #11
 80138da:	f042 0220 	orr.w	r2, r2, #32
 80138de:	b2d2      	uxtb	r2, r2
 80138e0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	6818      	ldr	r0, [r3, #0]
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	689b      	ldr	r3, [r3, #8]
 80138ea:	461a      	mov	r2, r3
 80138ec:	68f9      	ldr	r1, [r7, #12]
 80138ee:	f7fe fccc 	bl	801228a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	f103 021c 	add.w	r2, r3, #28
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	68db      	ldr	r3, [r3, #12]
 80138fc:	4619      	mov	r1, r3
 80138fe:	4610      	mov	r0, r2
 8013900:	f7fd fcc2 	bl	8011288 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	3316      	adds	r3, #22
 8013908:	6939      	ldr	r1, [r7, #16]
 801390a:	4618      	mov	r0, r3
 801390c:	f7fd fcbc 	bl	8011288 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	3312      	adds	r3, #18
 8013914:	2100      	movs	r1, #0
 8013916:	4618      	mov	r0, r3
 8013918:	f7fd fc9b 	bl	8011252 <st_word>
					fs->wflag = 1;
 801391c:	68bb      	ldr	r3, [r7, #8]
 801391e:	2201      	movs	r2, #1
 8013920:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013922:	68bb      	ldr	r3, [r7, #8]
 8013924:	4618      	mov	r0, r3
 8013926:	f7fd ff37 	bl	8011798 <sync_fs>
 801392a:	4603      	mov	r3, r0
 801392c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	7d1b      	ldrb	r3, [r3, #20]
 8013932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013936:	b2da      	uxtb	r2, r3
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801393c:	7dfb      	ldrb	r3, [r7, #23]
}
 801393e:	4618      	mov	r0, r3
 8013940:	3718      	adds	r7, #24
 8013942:	46bd      	mov	sp, r7
 8013944:	bd80      	pop	{r7, pc}
 8013946:	bf00      	nop
 8013948:	274a0000 	.word	0x274a0000

0801394c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b084      	sub	sp, #16
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013954:	6878      	ldr	r0, [r7, #4]
 8013956:	f7ff ff79 	bl	801384c <f_sync>
 801395a:	4603      	mov	r3, r0
 801395c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801395e:	7bfb      	ldrb	r3, [r7, #15]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d118      	bne.n	8013996 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	f107 0208 	add.w	r2, r7, #8
 801396a:	4611      	mov	r1, r2
 801396c:	4618      	mov	r0, r3
 801396e:	f7ff fa2f 	bl	8012dd0 <validate>
 8013972:	4603      	mov	r3, r0
 8013974:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013976:	7bfb      	ldrb	r3, [r7, #15]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d10c      	bne.n	8013996 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	691b      	ldr	r3, [r3, #16]
 8013980:	4618      	mov	r0, r3
 8013982:	f7fd fe37 	bl	80115f4 <dec_lock>
 8013986:	4603      	mov	r3, r0
 8013988:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801398a:	7bfb      	ldrb	r3, [r7, #15]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d102      	bne.n	8013996 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	2200      	movs	r2, #0
 8013994:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013996:	7bfb      	ldrb	r3, [r7, #15]
}
 8013998:	4618      	mov	r0, r3
 801399a:	3710      	adds	r7, #16
 801399c:	46bd      	mov	sp, r7
 801399e:	bd80      	pop	{r7, pc}

080139a0 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80139a0:	b590      	push	{r4, r7, lr}
 80139a2:	b091      	sub	sp, #68	; 0x44
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80139a8:	f107 0108 	add.w	r1, r7, #8
 80139ac:	1d3b      	adds	r3, r7, #4
 80139ae:	2200      	movs	r2, #0
 80139b0:	4618      	mov	r0, r3
 80139b2:	f7fe ff87 	bl	80128c4 <find_volume>
 80139b6:	4603      	mov	r3, r0
 80139b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80139bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d131      	bne.n	8013a28 <f_chdir+0x88>
		dj.obj.fs = fs;
 80139c4:	68bb      	ldr	r3, [r7, #8]
 80139c6:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 80139c8:	687a      	ldr	r2, [r7, #4]
 80139ca:	f107 030c 	add.w	r3, r7, #12
 80139ce:	4611      	mov	r1, r2
 80139d0:	4618      	mov	r0, r3
 80139d2:	f7fe fe47 	bl	8012664 <follow_path>
 80139d6:	4603      	mov	r3, r0
 80139d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 80139dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d11a      	bne.n	8013a1a <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80139e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80139e8:	b25b      	sxtb	r3, r3
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	da03      	bge.n	80139f6 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80139ee:	68bb      	ldr	r3, [r7, #8]
 80139f0:	697a      	ldr	r2, [r7, #20]
 80139f2:	619a      	str	r2, [r3, #24]
 80139f4:	e011      	b.n	8013a1a <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80139f6:	7cbb      	ldrb	r3, [r7, #18]
 80139f8:	f003 0310 	and.w	r3, r3, #16
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d009      	beq.n	8013a14 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013a00:	68bb      	ldr	r3, [r7, #8]
 8013a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a04:	68bc      	ldr	r4, [r7, #8]
 8013a06:	4611      	mov	r1, r2
 8013a08:	4618      	mov	r0, r3
 8013a0a:	f7fe fc1f 	bl	801224c <ld_clust>
 8013a0e:	4603      	mov	r3, r0
 8013a10:	61a3      	str	r3, [r4, #24]
 8013a12:	e002      	b.n	8013a1a <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013a14:	2305      	movs	r3, #5
 8013a16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013a1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013a1e:	2b04      	cmp	r3, #4
 8013a20:	d102      	bne.n	8013a28 <f_chdir+0x88>
 8013a22:	2305      	movs	r3, #5
 8013a24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013a28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	3744      	adds	r7, #68	; 0x44
 8013a30:	46bd      	mov	sp, r7
 8013a32:	bd90      	pop	{r4, r7, pc}

08013a34 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b090      	sub	sp, #64	; 0x40
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
 8013a3c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	f107 0208 	add.w	r2, r7, #8
 8013a44:	4611      	mov	r1, r2
 8013a46:	4618      	mov	r0, r3
 8013a48:	f7ff f9c2 	bl	8012dd0 <validate>
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013a52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d103      	bne.n	8013a62 <f_lseek+0x2e>
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	7d5b      	ldrb	r3, [r3, #21]
 8013a5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013a62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d002      	beq.n	8013a70 <f_lseek+0x3c>
 8013a6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013a6e:	e201      	b.n	8013e74 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	f000 80d9 	beq.w	8013c2c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013a7a:	683b      	ldr	r3, [r7, #0]
 8013a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a80:	d15a      	bne.n	8013b38 <f_lseek+0x104>
			tbl = fp->cltbl;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a86:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a8a:	1d1a      	adds	r2, r3, #4
 8013a8c:	627a      	str	r2, [r7, #36]	; 0x24
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	617b      	str	r3, [r7, #20]
 8013a92:	2302      	movs	r3, #2
 8013a94:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	689b      	ldr	r3, [r3, #8]
 8013a9a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d03a      	beq.n	8013b18 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aa4:	613b      	str	r3, [r7, #16]
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aac:	3302      	adds	r3, #2
 8013aae:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab2:	60fb      	str	r3, [r7, #12]
 8013ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ab6:	3301      	adds	r3, #1
 8013ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f7fd fef9 	bl	80118b6 <get_fat>
 8013ac4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ac8:	2b01      	cmp	r3, #1
 8013aca:	d804      	bhi.n	8013ad6 <f_lseek+0xa2>
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	2202      	movs	r2, #2
 8013ad0:	755a      	strb	r2, [r3, #21]
 8013ad2:	2302      	movs	r3, #2
 8013ad4:	e1ce      	b.n	8013e74 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013adc:	d104      	bne.n	8013ae8 <f_lseek+0xb4>
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	2201      	movs	r2, #1
 8013ae2:	755a      	strb	r2, [r3, #21]
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	e1c5      	b.n	8013e74 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	3301      	adds	r3, #1
 8013aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013aee:	429a      	cmp	r2, r3
 8013af0:	d0de      	beq.n	8013ab0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013af4:	697b      	ldr	r3, [r7, #20]
 8013af6:	429a      	cmp	r2, r3
 8013af8:	d809      	bhi.n	8013b0e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013afc:	1d1a      	adds	r2, r3, #4
 8013afe:	627a      	str	r2, [r7, #36]	; 0x24
 8013b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b02:	601a      	str	r2, [r3, #0]
 8013b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b06:	1d1a      	adds	r2, r3, #4
 8013b08:	627a      	str	r2, [r7, #36]	; 0x24
 8013b0a:	693a      	ldr	r2, [r7, #16]
 8013b0c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013b0e:	68bb      	ldr	r3, [r7, #8]
 8013b10:	69db      	ldr	r3, [r3, #28]
 8013b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b14:	429a      	cmp	r2, r3
 8013b16:	d3c4      	bcc.n	8013aa2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b1e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013b20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b22:	697b      	ldr	r3, [r7, #20]
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d803      	bhi.n	8013b30 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	601a      	str	r2, [r3, #0]
 8013b2e:	e19f      	b.n	8013e70 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013b30:	2311      	movs	r3, #17
 8013b32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013b36:	e19b      	b.n	8013e70 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	68db      	ldr	r3, [r3, #12]
 8013b3c:	683a      	ldr	r2, [r7, #0]
 8013b3e:	429a      	cmp	r2, r3
 8013b40:	d902      	bls.n	8013b48 <f_lseek+0x114>
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	68db      	ldr	r3, [r3, #12]
 8013b46:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	683a      	ldr	r2, [r7, #0]
 8013b4c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013b4e:	683b      	ldr	r3, [r7, #0]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	f000 818d 	beq.w	8013e70 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013b56:	683b      	ldr	r3, [r7, #0]
 8013b58:	3b01      	subs	r3, #1
 8013b5a:	4619      	mov	r1, r3
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f7fe f997 	bl	8011e90 <clmt_clust>
 8013b62:	4602      	mov	r2, r0
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013b68:	68ba      	ldr	r2, [r7, #8]
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	69db      	ldr	r3, [r3, #28]
 8013b6e:	4619      	mov	r1, r3
 8013b70:	4610      	mov	r0, r2
 8013b72:	f7fd fe81 	bl	8011878 <clust2sect>
 8013b76:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013b78:	69bb      	ldr	r3, [r7, #24]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d104      	bne.n	8013b88 <f_lseek+0x154>
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	2202      	movs	r2, #2
 8013b82:	755a      	strb	r2, [r3, #21]
 8013b84:	2302      	movs	r3, #2
 8013b86:	e175      	b.n	8013e74 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	3b01      	subs	r3, #1
 8013b8c:	68ba      	ldr	r2, [r7, #8]
 8013b8e:	8992      	ldrh	r2, [r2, #12]
 8013b90:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b94:	68ba      	ldr	r2, [r7, #8]
 8013b96:	8952      	ldrh	r2, [r2, #10]
 8013b98:	3a01      	subs	r2, #1
 8013b9a:	4013      	ands	r3, r2
 8013b9c:	69ba      	ldr	r2, [r7, #24]
 8013b9e:	4413      	add	r3, r2
 8013ba0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	699b      	ldr	r3, [r3, #24]
 8013ba6:	68ba      	ldr	r2, [r7, #8]
 8013ba8:	8992      	ldrh	r2, [r2, #12]
 8013baa:	fbb3 f1f2 	udiv	r1, r3, r2
 8013bae:	fb02 f201 	mul.w	r2, r2, r1
 8013bb2:	1a9b      	subs	r3, r3, r2
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	f000 815b 	beq.w	8013e70 <f_lseek+0x43c>
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	6a1b      	ldr	r3, [r3, #32]
 8013bbe:	69ba      	ldr	r2, [r7, #24]
 8013bc0:	429a      	cmp	r2, r3
 8013bc2:	f000 8155 	beq.w	8013e70 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	7d1b      	ldrb	r3, [r3, #20]
 8013bca:	b25b      	sxtb	r3, r3
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	da18      	bge.n	8013c02 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013bd0:	68bb      	ldr	r3, [r7, #8]
 8013bd2:	7858      	ldrb	r0, [r3, #1]
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	6a1a      	ldr	r2, [r3, #32]
 8013bde:	2301      	movs	r3, #1
 8013be0:	f7fd fabe 	bl	8011160 <disk_write>
 8013be4:	4603      	mov	r3, r0
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d004      	beq.n	8013bf4 <f_lseek+0x1c0>
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	2201      	movs	r2, #1
 8013bee:	755a      	strb	r2, [r3, #21]
 8013bf0:	2301      	movs	r3, #1
 8013bf2:	e13f      	b.n	8013e74 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	7d1b      	ldrb	r3, [r3, #20]
 8013bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013bfc:	b2da      	uxtb	r2, r3
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013c02:	68bb      	ldr	r3, [r7, #8]
 8013c04:	7858      	ldrb	r0, [r3, #1]
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c0c:	2301      	movs	r3, #1
 8013c0e:	69ba      	ldr	r2, [r7, #24]
 8013c10:	f7fd fa86 	bl	8011120 <disk_read>
 8013c14:	4603      	mov	r3, r0
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d004      	beq.n	8013c24 <f_lseek+0x1f0>
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	2201      	movs	r2, #1
 8013c1e:	755a      	strb	r2, [r3, #21]
 8013c20:	2301      	movs	r3, #1
 8013c22:	e127      	b.n	8013e74 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	69ba      	ldr	r2, [r7, #24]
 8013c28:	621a      	str	r2, [r3, #32]
 8013c2a:	e121      	b.n	8013e70 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	68db      	ldr	r3, [r3, #12]
 8013c30:	683a      	ldr	r2, [r7, #0]
 8013c32:	429a      	cmp	r2, r3
 8013c34:	d908      	bls.n	8013c48 <f_lseek+0x214>
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	7d1b      	ldrb	r3, [r3, #20]
 8013c3a:	f003 0302 	and.w	r3, r3, #2
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d102      	bne.n	8013c48 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	68db      	ldr	r3, [r3, #12]
 8013c46:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	699b      	ldr	r3, [r3, #24]
 8013c4c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013c4e:	2300      	movs	r3, #0
 8013c50:	637b      	str	r3, [r7, #52]	; 0x34
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c56:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013c58:	683b      	ldr	r3, [r7, #0]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	f000 80b5 	beq.w	8013dca <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013c60:	68bb      	ldr	r3, [r7, #8]
 8013c62:	895b      	ldrh	r3, [r3, #10]
 8013c64:	461a      	mov	r2, r3
 8013c66:	68bb      	ldr	r3, [r7, #8]
 8013c68:	899b      	ldrh	r3, [r3, #12]
 8013c6a:	fb03 f302 	mul.w	r3, r3, r2
 8013c6e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013c70:	6a3b      	ldr	r3, [r7, #32]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d01b      	beq.n	8013cae <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013c76:	683b      	ldr	r3, [r7, #0]
 8013c78:	1e5a      	subs	r2, r3, #1
 8013c7a:	69fb      	ldr	r3, [r7, #28]
 8013c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8013c80:	6a3b      	ldr	r3, [r7, #32]
 8013c82:	1e59      	subs	r1, r3, #1
 8013c84:	69fb      	ldr	r3, [r7, #28]
 8013c86:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013c8a:	429a      	cmp	r2, r3
 8013c8c:	d30f      	bcc.n	8013cae <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013c8e:	6a3b      	ldr	r3, [r7, #32]
 8013c90:	1e5a      	subs	r2, r3, #1
 8013c92:	69fb      	ldr	r3, [r7, #28]
 8013c94:	425b      	negs	r3, r3
 8013c96:	401a      	ands	r2, r3
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	699b      	ldr	r3, [r3, #24]
 8013ca0:	683a      	ldr	r2, [r7, #0]
 8013ca2:	1ad3      	subs	r3, r2, r3
 8013ca4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	69db      	ldr	r3, [r3, #28]
 8013caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8013cac:	e022      	b.n	8013cf4 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	689b      	ldr	r3, [r3, #8]
 8013cb2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d119      	bne.n	8013cee <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	2100      	movs	r1, #0
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	f7fe f84e 	bl	8011d60 <create_chain>
 8013cc4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cc8:	2b01      	cmp	r3, #1
 8013cca:	d104      	bne.n	8013cd6 <f_lseek+0x2a2>
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	2202      	movs	r2, #2
 8013cd0:	755a      	strb	r2, [r3, #21]
 8013cd2:	2302      	movs	r3, #2
 8013cd4:	e0ce      	b.n	8013e74 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cdc:	d104      	bne.n	8013ce8 <f_lseek+0x2b4>
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	2201      	movs	r2, #1
 8013ce2:	755a      	strb	r2, [r3, #21]
 8013ce4:	2301      	movs	r3, #1
 8013ce6:	e0c5      	b.n	8013e74 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013cec:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013cf2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d067      	beq.n	8013dca <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8013cfa:	e03a      	b.n	8013d72 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8013cfc:	683a      	ldr	r2, [r7, #0]
 8013cfe:	69fb      	ldr	r3, [r7, #28]
 8013d00:	1ad3      	subs	r3, r2, r3
 8013d02:	603b      	str	r3, [r7, #0]
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	699a      	ldr	r2, [r3, #24]
 8013d08:	69fb      	ldr	r3, [r7, #28]
 8013d0a:	441a      	add	r2, r3
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	7d1b      	ldrb	r3, [r3, #20]
 8013d14:	f003 0302 	and.w	r3, r3, #2
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d00b      	beq.n	8013d34 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7fe f81d 	bl	8011d60 <create_chain>
 8013d26:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d108      	bne.n	8013d40 <f_lseek+0x30c>
							ofs = 0; break;
 8013d2e:	2300      	movs	r3, #0
 8013d30:	603b      	str	r3, [r7, #0]
 8013d32:	e022      	b.n	8013d7a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f7fd fdbc 	bl	80118b6 <get_fat>
 8013d3e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d46:	d104      	bne.n	8013d52 <f_lseek+0x31e>
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	2201      	movs	r2, #1
 8013d4c:	755a      	strb	r2, [r3, #21]
 8013d4e:	2301      	movs	r3, #1
 8013d50:	e090      	b.n	8013e74 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d54:	2b01      	cmp	r3, #1
 8013d56:	d904      	bls.n	8013d62 <f_lseek+0x32e>
 8013d58:	68bb      	ldr	r3, [r7, #8]
 8013d5a:	69db      	ldr	r3, [r3, #28]
 8013d5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d5e:	429a      	cmp	r2, r3
 8013d60:	d304      	bcc.n	8013d6c <f_lseek+0x338>
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	2202      	movs	r2, #2
 8013d66:	755a      	strb	r2, [r3, #21]
 8013d68:	2302      	movs	r3, #2
 8013d6a:	e083      	b.n	8013e74 <f_lseek+0x440>
					fp->clust = clst;
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d70:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013d72:	683a      	ldr	r2, [r7, #0]
 8013d74:	69fb      	ldr	r3, [r7, #28]
 8013d76:	429a      	cmp	r2, r3
 8013d78:	d8c0      	bhi.n	8013cfc <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	699a      	ldr	r2, [r3, #24]
 8013d7e:	683b      	ldr	r3, [r7, #0]
 8013d80:	441a      	add	r2, r3
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013d86:	68bb      	ldr	r3, [r7, #8]
 8013d88:	899b      	ldrh	r3, [r3, #12]
 8013d8a:	461a      	mov	r2, r3
 8013d8c:	683b      	ldr	r3, [r7, #0]
 8013d8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d92:	fb02 f201 	mul.w	r2, r2, r1
 8013d96:	1a9b      	subs	r3, r3, r2
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d016      	beq.n	8013dca <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013d9c:	68bb      	ldr	r3, [r7, #8]
 8013d9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013da0:	4618      	mov	r0, r3
 8013da2:	f7fd fd69 	bl	8011878 <clust2sect>
 8013da6:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d104      	bne.n	8013db8 <f_lseek+0x384>
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	2202      	movs	r2, #2
 8013db2:	755a      	strb	r2, [r3, #21]
 8013db4:	2302      	movs	r3, #2
 8013db6:	e05d      	b.n	8013e74 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	899b      	ldrh	r3, [r3, #12]
 8013dbc:	461a      	mov	r2, r3
 8013dbe:	683b      	ldr	r3, [r7, #0]
 8013dc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8013dc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013dc6:	4413      	add	r3, r2
 8013dc8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	699a      	ldr	r2, [r3, #24]
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	68db      	ldr	r3, [r3, #12]
 8013dd2:	429a      	cmp	r2, r3
 8013dd4:	d90a      	bls.n	8013dec <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	699a      	ldr	r2, [r3, #24]
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	7d1b      	ldrb	r3, [r3, #20]
 8013de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013de6:	b2da      	uxtb	r2, r3
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	699b      	ldr	r3, [r3, #24]
 8013df0:	68ba      	ldr	r2, [r7, #8]
 8013df2:	8992      	ldrh	r2, [r2, #12]
 8013df4:	fbb3 f1f2 	udiv	r1, r3, r2
 8013df8:	fb02 f201 	mul.w	r2, r2, r1
 8013dfc:	1a9b      	subs	r3, r3, r2
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d036      	beq.n	8013e70 <f_lseek+0x43c>
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	6a1b      	ldr	r3, [r3, #32]
 8013e06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e08:	429a      	cmp	r2, r3
 8013e0a:	d031      	beq.n	8013e70 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	7d1b      	ldrb	r3, [r3, #20]
 8013e10:	b25b      	sxtb	r3, r3
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	da18      	bge.n	8013e48 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013e16:	68bb      	ldr	r3, [r7, #8]
 8013e18:	7858      	ldrb	r0, [r3, #1]
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	6a1a      	ldr	r2, [r3, #32]
 8013e24:	2301      	movs	r3, #1
 8013e26:	f7fd f99b 	bl	8011160 <disk_write>
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d004      	beq.n	8013e3a <f_lseek+0x406>
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	2201      	movs	r2, #1
 8013e34:	755a      	strb	r2, [r3, #21]
 8013e36:	2301      	movs	r3, #1
 8013e38:	e01c      	b.n	8013e74 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	7d1b      	ldrb	r3, [r3, #20]
 8013e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e42:	b2da      	uxtb	r2, r3
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	7858      	ldrb	r0, [r3, #1]
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013e52:	2301      	movs	r3, #1
 8013e54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e56:	f7fd f963 	bl	8011120 <disk_read>
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d004      	beq.n	8013e6a <f_lseek+0x436>
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	2201      	movs	r2, #1
 8013e64:	755a      	strb	r2, [r3, #21]
 8013e66:	2301      	movs	r3, #1
 8013e68:	e004      	b.n	8013e74 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e6e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013e70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013e74:	4618      	mov	r0, r3
 8013e76:	3740      	adds	r7, #64	; 0x40
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	bd80      	pop	{r7, pc}

08013e7c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b09e      	sub	sp, #120	; 0x78
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8013e84:	2300      	movs	r3, #0
 8013e86:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013e88:	f107 010c 	add.w	r1, r7, #12
 8013e8c:	1d3b      	adds	r3, r7, #4
 8013e8e:	2202      	movs	r2, #2
 8013e90:	4618      	mov	r0, r3
 8013e92:	f7fe fd17 	bl	80128c4 <find_volume>
 8013e96:	4603      	mov	r3, r0
 8013e98:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8013ea0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	f040 80a4 	bne.w	8013ff2 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8013eaa:	687a      	ldr	r2, [r7, #4]
 8013eac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013eb0:	4611      	mov	r1, r2
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f7fe fbd6 	bl	8012664 <follow_path>
 8013eb8:	4603      	mov	r3, r0
 8013eba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8013ebe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d108      	bne.n	8013ed8 <f_unlink+0x5c>
 8013ec6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013eca:	f003 0320 	and.w	r3, r3, #32
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d002      	beq.n	8013ed8 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8013ed2:	2306      	movs	r3, #6
 8013ed4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013ed8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d108      	bne.n	8013ef2 <f_unlink+0x76>
 8013ee0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013ee4:	2102      	movs	r1, #2
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f7fd fa78 	bl	80113dc <chk_lock>
 8013eec:	4603      	mov	r3, r0
 8013eee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013ef2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d17b      	bne.n	8013ff2 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013efa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013efe:	b25b      	sxtb	r3, r3
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	da03      	bge.n	8013f0c <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013f04:	2306      	movs	r3, #6
 8013f06:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013f0a:	e008      	b.n	8013f1e <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8013f0c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013f10:	f003 0301 	and.w	r3, r3, #1
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d002      	beq.n	8013f1e <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013f18:	2307      	movs	r3, #7
 8013f1a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8013f1e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d13d      	bne.n	8013fa2 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013f2a:	4611      	mov	r1, r2
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f7fe f98d 	bl	801224c <ld_clust>
 8013f32:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013f34:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013f38:	f003 0310 	and.w	r3, r3, #16
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d030      	beq.n	8013fa2 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	699b      	ldr	r3, [r3, #24]
 8013f44:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013f46:	429a      	cmp	r2, r3
 8013f48:	d103      	bne.n	8013f52 <f_unlink+0xd6>
						res = FR_DENIED;
 8013f4a:	2307      	movs	r3, #7
 8013f4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013f50:	e027      	b.n	8013fa2 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013f56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013f58:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013f5a:	f107 0310 	add.w	r3, r7, #16
 8013f5e:	2100      	movs	r1, #0
 8013f60:	4618      	mov	r0, r3
 8013f62:	f7fd ffcd 	bl	8011f00 <dir_sdi>
 8013f66:	4603      	mov	r3, r0
 8013f68:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8013f6c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d116      	bne.n	8013fa2 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013f74:	f107 0310 	add.w	r3, r7, #16
 8013f78:	2100      	movs	r1, #0
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f7fe f9a5 	bl	80122ca <dir_read>
 8013f80:	4603      	mov	r3, r0
 8013f82:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8013f86:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d102      	bne.n	8013f94 <f_unlink+0x118>
 8013f8e:	2307      	movs	r3, #7
 8013f90:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013f94:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f98:	2b04      	cmp	r3, #4
 8013f9a:	d102      	bne.n	8013fa2 <f_unlink+0x126>
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8013fa2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d123      	bne.n	8013ff2 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8013faa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013fae:	4618      	mov	r0, r3
 8013fb0:	f7fe fa6f 	bl	8012492 <dir_remove>
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8013fba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d10c      	bne.n	8013fdc <f_unlink+0x160>
 8013fc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d009      	beq.n	8013fdc <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013fc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013fcc:	2200      	movs	r2, #0
 8013fce:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	f7fd fe60 	bl	8011c96 <remove_chain>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8013fdc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d106      	bne.n	8013ff2 <f_unlink+0x176>
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f7fd fbd6 	bl	8011798 <sync_fs>
 8013fec:	4603      	mov	r3, r0
 8013fee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013ff2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	3778      	adds	r7, #120	; 0x78
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	bd80      	pop	{r7, pc}
	...

08014000 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b096      	sub	sp, #88	; 0x58
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014008:	f107 0108 	add.w	r1, r7, #8
 801400c:	1d3b      	adds	r3, r7, #4
 801400e:	2202      	movs	r2, #2
 8014010:	4618      	mov	r0, r3
 8014012:	f7fe fc57 	bl	80128c4 <find_volume>
 8014016:	4603      	mov	r3, r0
 8014018:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 801401c:	68bb      	ldr	r3, [r7, #8]
 801401e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8014020:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014024:	2b00      	cmp	r3, #0
 8014026:	f040 80fe 	bne.w	8014226 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801402a:	687a      	ldr	r2, [r7, #4]
 801402c:	f107 030c 	add.w	r3, r7, #12
 8014030:	4611      	mov	r1, r2
 8014032:	4618      	mov	r0, r3
 8014034:	f7fe fb16 	bl	8012664 <follow_path>
 8014038:	4603      	mov	r3, r0
 801403a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801403e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014042:	2b00      	cmp	r3, #0
 8014044:	d102      	bne.n	801404c <f_mkdir+0x4c>
 8014046:	2308      	movs	r3, #8
 8014048:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 801404c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014050:	2b04      	cmp	r3, #4
 8014052:	d108      	bne.n	8014066 <f_mkdir+0x66>
 8014054:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014058:	f003 0320 	and.w	r3, r3, #32
 801405c:	2b00      	cmp	r3, #0
 801405e:	d002      	beq.n	8014066 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8014060:	2306      	movs	r3, #6
 8014062:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8014066:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801406a:	2b04      	cmp	r3, #4
 801406c:	f040 80db 	bne.w	8014226 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8014070:	f107 030c 	add.w	r3, r7, #12
 8014074:	2100      	movs	r1, #0
 8014076:	4618      	mov	r0, r3
 8014078:	f7fd fe72 	bl	8011d60 <create_chain>
 801407c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801407e:	68bb      	ldr	r3, [r7, #8]
 8014080:	895b      	ldrh	r3, [r3, #10]
 8014082:	461a      	mov	r2, r3
 8014084:	68bb      	ldr	r3, [r7, #8]
 8014086:	899b      	ldrh	r3, [r3, #12]
 8014088:	fb03 f302 	mul.w	r3, r3, r2
 801408c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801408e:	2300      	movs	r3, #0
 8014090:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8014094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014096:	2b00      	cmp	r3, #0
 8014098:	d102      	bne.n	80140a0 <f_mkdir+0xa0>
 801409a:	2307      	movs	r3, #7
 801409c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80140a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140a2:	2b01      	cmp	r3, #1
 80140a4:	d102      	bne.n	80140ac <f_mkdir+0xac>
 80140a6:	2302      	movs	r3, #2
 80140a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80140ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140b2:	d102      	bne.n	80140ba <f_mkdir+0xba>
 80140b4:	2301      	movs	r3, #1
 80140b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80140ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d106      	bne.n	80140d0 <f_mkdir+0xd0>
 80140c2:	68bb      	ldr	r3, [r7, #8]
 80140c4:	4618      	mov	r0, r3
 80140c6:	f7fd faf5 	bl	80116b4 <sync_window>
 80140ca:	4603      	mov	r3, r0
 80140cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80140d0:	4b58      	ldr	r3, [pc, #352]	; (8014234 <f_mkdir+0x234>)
 80140d2:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80140d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d16c      	bne.n	80141b6 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 80140dc:	68bb      	ldr	r3, [r7, #8]
 80140de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80140e0:	4618      	mov	r0, r3
 80140e2:	f7fd fbc9 	bl	8011878 <clust2sect>
 80140e6:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80140e8:	68bb      	ldr	r3, [r7, #8]
 80140ea:	3338      	adds	r3, #56	; 0x38
 80140ec:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80140ee:	68bb      	ldr	r3, [r7, #8]
 80140f0:	899b      	ldrh	r3, [r3, #12]
 80140f2:	461a      	mov	r2, r3
 80140f4:	2100      	movs	r1, #0
 80140f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80140f8:	f7fd f913 	bl	8011322 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80140fc:	220b      	movs	r2, #11
 80140fe:	2120      	movs	r1, #32
 8014100:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014102:	f7fd f90e 	bl	8011322 <mem_set>
					dir[DIR_Name] = '.';
 8014106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014108:	222e      	movs	r2, #46	; 0x2e
 801410a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801410c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801410e:	330b      	adds	r3, #11
 8014110:	2210      	movs	r2, #16
 8014112:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8014114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014116:	3316      	adds	r3, #22
 8014118:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801411a:	4618      	mov	r0, r3
 801411c:	f7fd f8b4 	bl	8011288 <st_dword>
					st_clust(fs, dir, dcl);
 8014120:	68bb      	ldr	r3, [r7, #8]
 8014122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014124:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014126:	4618      	mov	r0, r3
 8014128:	f7fe f8af 	bl	801228a <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801412c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801412e:	3320      	adds	r3, #32
 8014130:	2220      	movs	r2, #32
 8014132:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014134:	4618      	mov	r0, r3
 8014136:	f7fd f8d3 	bl	80112e0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801413a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801413c:	3321      	adds	r3, #33	; 0x21
 801413e:	222e      	movs	r2, #46	; 0x2e
 8014140:	701a      	strb	r2, [r3, #0]
 8014142:	697b      	ldr	r3, [r7, #20]
 8014144:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8014146:	68bb      	ldr	r3, [r7, #8]
 8014148:	781b      	ldrb	r3, [r3, #0]
 801414a:	2b03      	cmp	r3, #3
 801414c:	d106      	bne.n	801415c <f_mkdir+0x15c>
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014152:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014154:	429a      	cmp	r2, r3
 8014156:	d101      	bne.n	801415c <f_mkdir+0x15c>
 8014158:	2300      	movs	r3, #0
 801415a:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 801415c:	68b8      	ldr	r0, [r7, #8]
 801415e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014160:	3320      	adds	r3, #32
 8014162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014164:	4619      	mov	r1, r3
 8014166:	f7fe f890 	bl	801228a <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801416a:	68bb      	ldr	r3, [r7, #8]
 801416c:	895b      	ldrh	r3, [r3, #10]
 801416e:	653b      	str	r3, [r7, #80]	; 0x50
 8014170:	e01c      	b.n	80141ac <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8014172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014174:	1c5a      	adds	r2, r3, #1
 8014176:	64fa      	str	r2, [r7, #76]	; 0x4c
 8014178:	68ba      	ldr	r2, [r7, #8]
 801417a:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 801417c:	68bb      	ldr	r3, [r7, #8]
 801417e:	2201      	movs	r2, #1
 8014180:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8014182:	68bb      	ldr	r3, [r7, #8]
 8014184:	4618      	mov	r0, r3
 8014186:	f7fd fa95 	bl	80116b4 <sync_window>
 801418a:	4603      	mov	r3, r0
 801418c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8014190:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014194:	2b00      	cmp	r3, #0
 8014196:	d10d      	bne.n	80141b4 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8014198:	68bb      	ldr	r3, [r7, #8]
 801419a:	899b      	ldrh	r3, [r3, #12]
 801419c:	461a      	mov	r2, r3
 801419e:	2100      	movs	r1, #0
 80141a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80141a2:	f7fd f8be 	bl	8011322 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80141a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141a8:	3b01      	subs	r3, #1
 80141aa:	653b      	str	r3, [r7, #80]	; 0x50
 80141ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d1df      	bne.n	8014172 <f_mkdir+0x172>
 80141b2:	e000      	b.n	80141b6 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 80141b4:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80141b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d107      	bne.n	80141ce <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80141be:	f107 030c 	add.w	r3, r7, #12
 80141c2:	4618      	mov	r0, r3
 80141c4:	f7fe f933 	bl	801242e <dir_register>
 80141c8:	4603      	mov	r3, r0
 80141ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80141ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d120      	bne.n	8014218 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80141d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141d8:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80141da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141dc:	3316      	adds	r3, #22
 80141de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80141e0:	4618      	mov	r0, r3
 80141e2:	f7fd f851 	bl	8011288 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80141e6:	68bb      	ldr	r3, [r7, #8]
 80141e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80141ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80141ec:	4618      	mov	r0, r3
 80141ee:	f7fe f84c 	bl	801228a <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80141f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141f4:	330b      	adds	r3, #11
 80141f6:	2210      	movs	r2, #16
 80141f8:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80141fa:	68bb      	ldr	r3, [r7, #8]
 80141fc:	2201      	movs	r2, #1
 80141fe:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014200:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014204:	2b00      	cmp	r3, #0
 8014206:	d10e      	bne.n	8014226 <f_mkdir+0x226>
					res = sync_fs(fs);
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	4618      	mov	r0, r3
 801420c:	f7fd fac4 	bl	8011798 <sync_fs>
 8014210:	4603      	mov	r3, r0
 8014212:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8014216:	e006      	b.n	8014226 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014218:	f107 030c 	add.w	r3, r7, #12
 801421c:	2200      	movs	r2, #0
 801421e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014220:	4618      	mov	r0, r3
 8014222:	f7fd fd38 	bl	8011c96 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014226:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801422a:	4618      	mov	r0, r3
 801422c:	3758      	adds	r7, #88	; 0x58
 801422e:	46bd      	mov	sp, r7
 8014230:	bd80      	pop	{r7, pc}
 8014232:	bf00      	nop
 8014234:	274a0000 	.word	0x274a0000

08014238 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b088      	sub	sp, #32
 801423c:	af00      	add	r7, sp, #0
 801423e:	60f8      	str	r0, [r7, #12]
 8014240:	60b9      	str	r1, [r7, #8]
 8014242:	607a      	str	r2, [r7, #4]
	int n = 0;
 8014244:	2300      	movs	r3, #0
 8014246:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801424c:	e017      	b.n	801427e <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801424e:	f107 0310 	add.w	r3, r7, #16
 8014252:	f107 0114 	add.w	r1, r7, #20
 8014256:	2201      	movs	r2, #1
 8014258:	6878      	ldr	r0, [r7, #4]
 801425a:	f7ff f803 	bl	8013264 <f_read>
		if (rc != 1) break;
 801425e:	693b      	ldr	r3, [r7, #16]
 8014260:	2b01      	cmp	r3, #1
 8014262:	d112      	bne.n	801428a <f_gets+0x52>
		c = s[0];
 8014264:	7d3b      	ldrb	r3, [r7, #20]
 8014266:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8014268:	69bb      	ldr	r3, [r7, #24]
 801426a:	1c5a      	adds	r2, r3, #1
 801426c:	61ba      	str	r2, [r7, #24]
 801426e:	7dfa      	ldrb	r2, [r7, #23]
 8014270:	701a      	strb	r2, [r3, #0]
		n++;
 8014272:	69fb      	ldr	r3, [r7, #28]
 8014274:	3301      	adds	r3, #1
 8014276:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8014278:	7dfb      	ldrb	r3, [r7, #23]
 801427a:	2b0a      	cmp	r3, #10
 801427c:	d007      	beq.n	801428e <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801427e:	68bb      	ldr	r3, [r7, #8]
 8014280:	3b01      	subs	r3, #1
 8014282:	69fa      	ldr	r2, [r7, #28]
 8014284:	429a      	cmp	r2, r3
 8014286:	dbe2      	blt.n	801424e <f_gets+0x16>
 8014288:	e002      	b.n	8014290 <f_gets+0x58>
		if (rc != 1) break;
 801428a:	bf00      	nop
 801428c:	e000      	b.n	8014290 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 801428e:	bf00      	nop
	}
	*p = 0;
 8014290:	69bb      	ldr	r3, [r7, #24]
 8014292:	2200      	movs	r2, #0
 8014294:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8014296:	69fb      	ldr	r3, [r7, #28]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d001      	beq.n	80142a0 <f_gets+0x68>
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	e000      	b.n	80142a2 <f_gets+0x6a>
 80142a0:	2300      	movs	r3, #0
}
 80142a2:	4618      	mov	r0, r3
 80142a4:	3720      	adds	r7, #32
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}
	...

080142ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80142ac:	b480      	push	{r7}
 80142ae:	b087      	sub	sp, #28
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	60f8      	str	r0, [r7, #12]
 80142b4:	60b9      	str	r1, [r7, #8]
 80142b6:	4613      	mov	r3, r2
 80142b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80142ba:	2301      	movs	r3, #1
 80142bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80142be:	2300      	movs	r3, #0
 80142c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80142c2:	4b1f      	ldr	r3, [pc, #124]	; (8014340 <FATFS_LinkDriverEx+0x94>)
 80142c4:	7a5b      	ldrb	r3, [r3, #9]
 80142c6:	b2db      	uxtb	r3, r3
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d131      	bne.n	8014330 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80142cc:	4b1c      	ldr	r3, [pc, #112]	; (8014340 <FATFS_LinkDriverEx+0x94>)
 80142ce:	7a5b      	ldrb	r3, [r3, #9]
 80142d0:	b2db      	uxtb	r3, r3
 80142d2:	461a      	mov	r2, r3
 80142d4:	4b1a      	ldr	r3, [pc, #104]	; (8014340 <FATFS_LinkDriverEx+0x94>)
 80142d6:	2100      	movs	r1, #0
 80142d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80142da:	4b19      	ldr	r3, [pc, #100]	; (8014340 <FATFS_LinkDriverEx+0x94>)
 80142dc:	7a5b      	ldrb	r3, [r3, #9]
 80142de:	b2db      	uxtb	r3, r3
 80142e0:	4a17      	ldr	r2, [pc, #92]	; (8014340 <FATFS_LinkDriverEx+0x94>)
 80142e2:	009b      	lsls	r3, r3, #2
 80142e4:	4413      	add	r3, r2
 80142e6:	68fa      	ldr	r2, [r7, #12]
 80142e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80142ea:	4b15      	ldr	r3, [pc, #84]	; (8014340 <FATFS_LinkDriverEx+0x94>)
 80142ec:	7a5b      	ldrb	r3, [r3, #9]
 80142ee:	b2db      	uxtb	r3, r3
 80142f0:	461a      	mov	r2, r3
 80142f2:	4b13      	ldr	r3, [pc, #76]	; (8014340 <FATFS_LinkDriverEx+0x94>)
 80142f4:	4413      	add	r3, r2
 80142f6:	79fa      	ldrb	r2, [r7, #7]
 80142f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80142fa:	4b11      	ldr	r3, [pc, #68]	; (8014340 <FATFS_LinkDriverEx+0x94>)
 80142fc:	7a5b      	ldrb	r3, [r3, #9]
 80142fe:	b2db      	uxtb	r3, r3
 8014300:	1c5a      	adds	r2, r3, #1
 8014302:	b2d1      	uxtb	r1, r2
 8014304:	4a0e      	ldr	r2, [pc, #56]	; (8014340 <FATFS_LinkDriverEx+0x94>)
 8014306:	7251      	strb	r1, [r2, #9]
 8014308:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801430a:	7dbb      	ldrb	r3, [r7, #22]
 801430c:	3330      	adds	r3, #48	; 0x30
 801430e:	b2da      	uxtb	r2, r3
 8014310:	68bb      	ldr	r3, [r7, #8]
 8014312:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014314:	68bb      	ldr	r3, [r7, #8]
 8014316:	3301      	adds	r3, #1
 8014318:	223a      	movs	r2, #58	; 0x3a
 801431a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801431c:	68bb      	ldr	r3, [r7, #8]
 801431e:	3302      	adds	r3, #2
 8014320:	222f      	movs	r2, #47	; 0x2f
 8014322:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	3303      	adds	r3, #3
 8014328:	2200      	movs	r2, #0
 801432a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801432c:	2300      	movs	r3, #0
 801432e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014330:	7dfb      	ldrb	r3, [r7, #23]
}
 8014332:	4618      	mov	r0, r3
 8014334:	371c      	adds	r7, #28
 8014336:	46bd      	mov	sp, r7
 8014338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433c:	4770      	bx	lr
 801433e:	bf00      	nop
 8014340:	2003d508 	.word	0x2003d508

08014344 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b082      	sub	sp, #8
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
 801434c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801434e:	2200      	movs	r2, #0
 8014350:	6839      	ldr	r1, [r7, #0]
 8014352:	6878      	ldr	r0, [r7, #4]
 8014354:	f7ff ffaa 	bl	80142ac <FATFS_LinkDriverEx>
 8014358:	4603      	mov	r3, r0
}
 801435a:	4618      	mov	r0, r3
 801435c:	3708      	adds	r7, #8
 801435e:	46bd      	mov	sp, r7
 8014360:	bd80      	pop	{r7, pc}

08014362 <__cxa_guard_acquire>:
 8014362:	6803      	ldr	r3, [r0, #0]
 8014364:	07db      	lsls	r3, r3, #31
 8014366:	d406      	bmi.n	8014376 <__cxa_guard_acquire+0x14>
 8014368:	7843      	ldrb	r3, [r0, #1]
 801436a:	b103      	cbz	r3, 801436e <__cxa_guard_acquire+0xc>
 801436c:	deff      	udf	#255	; 0xff
 801436e:	2301      	movs	r3, #1
 8014370:	7043      	strb	r3, [r0, #1]
 8014372:	4618      	mov	r0, r3
 8014374:	4770      	bx	lr
 8014376:	2000      	movs	r0, #0
 8014378:	4770      	bx	lr

0801437a <__cxa_guard_release>:
 801437a:	2301      	movs	r3, #1
 801437c:	6003      	str	r3, [r0, #0]
 801437e:	4770      	bx	lr

08014380 <cos>:
 8014380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014382:	ec51 0b10 	vmov	r0, r1, d0
 8014386:	4a1e      	ldr	r2, [pc, #120]	; (8014400 <cos+0x80>)
 8014388:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801438c:	4293      	cmp	r3, r2
 801438e:	dc06      	bgt.n	801439e <cos+0x1e>
 8014390:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80143f8 <cos+0x78>
 8014394:	f000 faa4 	bl	80148e0 <__kernel_cos>
 8014398:	ec51 0b10 	vmov	r0, r1, d0
 801439c:	e007      	b.n	80143ae <cos+0x2e>
 801439e:	4a19      	ldr	r2, [pc, #100]	; (8014404 <cos+0x84>)
 80143a0:	4293      	cmp	r3, r2
 80143a2:	dd09      	ble.n	80143b8 <cos+0x38>
 80143a4:	ee10 2a10 	vmov	r2, s0
 80143a8:	460b      	mov	r3, r1
 80143aa:	f7eb ff85 	bl	80002b8 <__aeabi_dsub>
 80143ae:	ec41 0b10 	vmov	d0, r0, r1
 80143b2:	b005      	add	sp, #20
 80143b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80143b8:	4668      	mov	r0, sp
 80143ba:	f000 f89d 	bl	80144f8 <__ieee754_rem_pio2>
 80143be:	f000 0003 	and.w	r0, r0, #3
 80143c2:	2801      	cmp	r0, #1
 80143c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80143c8:	ed9d 0b00 	vldr	d0, [sp]
 80143cc:	d007      	beq.n	80143de <cos+0x5e>
 80143ce:	2802      	cmp	r0, #2
 80143d0:	d00e      	beq.n	80143f0 <cos+0x70>
 80143d2:	2800      	cmp	r0, #0
 80143d4:	d0de      	beq.n	8014394 <cos+0x14>
 80143d6:	2001      	movs	r0, #1
 80143d8:	f000 fe8a 	bl	80150f0 <__kernel_sin>
 80143dc:	e7dc      	b.n	8014398 <cos+0x18>
 80143de:	f000 fe87 	bl	80150f0 <__kernel_sin>
 80143e2:	ec53 2b10 	vmov	r2, r3, d0
 80143e6:	ee10 0a10 	vmov	r0, s0
 80143ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80143ee:	e7de      	b.n	80143ae <cos+0x2e>
 80143f0:	f000 fa76 	bl	80148e0 <__kernel_cos>
 80143f4:	e7f5      	b.n	80143e2 <cos+0x62>
 80143f6:	bf00      	nop
	...
 8014400:	3fe921fb 	.word	0x3fe921fb
 8014404:	7fefffff 	.word	0x7fefffff

08014408 <sin>:
 8014408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801440a:	ec51 0b10 	vmov	r0, r1, d0
 801440e:	4a20      	ldr	r2, [pc, #128]	; (8014490 <sin+0x88>)
 8014410:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014414:	4293      	cmp	r3, r2
 8014416:	dc07      	bgt.n	8014428 <sin+0x20>
 8014418:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8014488 <sin+0x80>
 801441c:	2000      	movs	r0, #0
 801441e:	f000 fe67 	bl	80150f0 <__kernel_sin>
 8014422:	ec51 0b10 	vmov	r0, r1, d0
 8014426:	e007      	b.n	8014438 <sin+0x30>
 8014428:	4a1a      	ldr	r2, [pc, #104]	; (8014494 <sin+0x8c>)
 801442a:	4293      	cmp	r3, r2
 801442c:	dd09      	ble.n	8014442 <sin+0x3a>
 801442e:	ee10 2a10 	vmov	r2, s0
 8014432:	460b      	mov	r3, r1
 8014434:	f7eb ff40 	bl	80002b8 <__aeabi_dsub>
 8014438:	ec41 0b10 	vmov	d0, r0, r1
 801443c:	b005      	add	sp, #20
 801443e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014442:	4668      	mov	r0, sp
 8014444:	f000 f858 	bl	80144f8 <__ieee754_rem_pio2>
 8014448:	f000 0003 	and.w	r0, r0, #3
 801444c:	2801      	cmp	r0, #1
 801444e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014452:	ed9d 0b00 	vldr	d0, [sp]
 8014456:	d004      	beq.n	8014462 <sin+0x5a>
 8014458:	2802      	cmp	r0, #2
 801445a:	d005      	beq.n	8014468 <sin+0x60>
 801445c:	b970      	cbnz	r0, 801447c <sin+0x74>
 801445e:	2001      	movs	r0, #1
 8014460:	e7dd      	b.n	801441e <sin+0x16>
 8014462:	f000 fa3d 	bl	80148e0 <__kernel_cos>
 8014466:	e7dc      	b.n	8014422 <sin+0x1a>
 8014468:	2001      	movs	r0, #1
 801446a:	f000 fe41 	bl	80150f0 <__kernel_sin>
 801446e:	ec53 2b10 	vmov	r2, r3, d0
 8014472:	ee10 0a10 	vmov	r0, s0
 8014476:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801447a:	e7dd      	b.n	8014438 <sin+0x30>
 801447c:	f000 fa30 	bl	80148e0 <__kernel_cos>
 8014480:	e7f5      	b.n	801446e <sin+0x66>
 8014482:	bf00      	nop
 8014484:	f3af 8000 	nop.w
	...
 8014490:	3fe921fb 	.word	0x3fe921fb
 8014494:	7fefffff 	.word	0x7fefffff

08014498 <tan>:
 8014498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801449a:	ec51 0b10 	vmov	r0, r1, d0
 801449e:	4a14      	ldr	r2, [pc, #80]	; (80144f0 <tan+0x58>)
 80144a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80144a4:	4293      	cmp	r3, r2
 80144a6:	dc05      	bgt.n	80144b4 <tan+0x1c>
 80144a8:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 80144e8 <tan+0x50>
 80144ac:	2001      	movs	r0, #1
 80144ae:	f000 fedb 	bl	8015268 <__kernel_tan>
 80144b2:	e009      	b.n	80144c8 <tan+0x30>
 80144b4:	4a0f      	ldr	r2, [pc, #60]	; (80144f4 <tan+0x5c>)
 80144b6:	4293      	cmp	r3, r2
 80144b8:	dd09      	ble.n	80144ce <tan+0x36>
 80144ba:	ee10 2a10 	vmov	r2, s0
 80144be:	460b      	mov	r3, r1
 80144c0:	f7eb fefa 	bl	80002b8 <__aeabi_dsub>
 80144c4:	ec41 0b10 	vmov	d0, r0, r1
 80144c8:	b005      	add	sp, #20
 80144ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80144ce:	4668      	mov	r0, sp
 80144d0:	f000 f812 	bl	80144f8 <__ieee754_rem_pio2>
 80144d4:	0040      	lsls	r0, r0, #1
 80144d6:	f000 0002 	and.w	r0, r0, #2
 80144da:	f1c0 0001 	rsb	r0, r0, #1
 80144de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80144e2:	ed9d 0b00 	vldr	d0, [sp]
 80144e6:	e7e2      	b.n	80144ae <tan+0x16>
	...
 80144f0:	3fe921fb 	.word	0x3fe921fb
 80144f4:	7fefffff 	.word	0x7fefffff

080144f8 <__ieee754_rem_pio2>:
 80144f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144fc:	ec57 6b10 	vmov	r6, r7, d0
 8014500:	4bc3      	ldr	r3, [pc, #780]	; (8014810 <__ieee754_rem_pio2+0x318>)
 8014502:	b08d      	sub	sp, #52	; 0x34
 8014504:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014508:	4598      	cmp	r8, r3
 801450a:	4604      	mov	r4, r0
 801450c:	9704      	str	r7, [sp, #16]
 801450e:	dc07      	bgt.n	8014520 <__ieee754_rem_pio2+0x28>
 8014510:	2200      	movs	r2, #0
 8014512:	2300      	movs	r3, #0
 8014514:	ed84 0b00 	vstr	d0, [r4]
 8014518:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801451c:	2500      	movs	r5, #0
 801451e:	e027      	b.n	8014570 <__ieee754_rem_pio2+0x78>
 8014520:	4bbc      	ldr	r3, [pc, #752]	; (8014814 <__ieee754_rem_pio2+0x31c>)
 8014522:	4598      	cmp	r8, r3
 8014524:	dc75      	bgt.n	8014612 <__ieee754_rem_pio2+0x11a>
 8014526:	9b04      	ldr	r3, [sp, #16]
 8014528:	4dbb      	ldr	r5, [pc, #748]	; (8014818 <__ieee754_rem_pio2+0x320>)
 801452a:	2b00      	cmp	r3, #0
 801452c:	ee10 0a10 	vmov	r0, s0
 8014530:	a3a9      	add	r3, pc, #676	; (adr r3, 80147d8 <__ieee754_rem_pio2+0x2e0>)
 8014532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014536:	4639      	mov	r1, r7
 8014538:	dd36      	ble.n	80145a8 <__ieee754_rem_pio2+0xb0>
 801453a:	f7eb febd 	bl	80002b8 <__aeabi_dsub>
 801453e:	45a8      	cmp	r8, r5
 8014540:	4606      	mov	r6, r0
 8014542:	460f      	mov	r7, r1
 8014544:	d018      	beq.n	8014578 <__ieee754_rem_pio2+0x80>
 8014546:	a3a6      	add	r3, pc, #664	; (adr r3, 80147e0 <__ieee754_rem_pio2+0x2e8>)
 8014548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801454c:	f7eb feb4 	bl	80002b8 <__aeabi_dsub>
 8014550:	4602      	mov	r2, r0
 8014552:	460b      	mov	r3, r1
 8014554:	e9c4 2300 	strd	r2, r3, [r4]
 8014558:	4630      	mov	r0, r6
 801455a:	4639      	mov	r1, r7
 801455c:	f7eb feac 	bl	80002b8 <__aeabi_dsub>
 8014560:	a39f      	add	r3, pc, #636	; (adr r3, 80147e0 <__ieee754_rem_pio2+0x2e8>)
 8014562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014566:	f7eb fea7 	bl	80002b8 <__aeabi_dsub>
 801456a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801456e:	2501      	movs	r5, #1
 8014570:	4628      	mov	r0, r5
 8014572:	b00d      	add	sp, #52	; 0x34
 8014574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014578:	a39b      	add	r3, pc, #620	; (adr r3, 80147e8 <__ieee754_rem_pio2+0x2f0>)
 801457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801457e:	f7eb fe9b 	bl	80002b8 <__aeabi_dsub>
 8014582:	a39b      	add	r3, pc, #620	; (adr r3, 80147f0 <__ieee754_rem_pio2+0x2f8>)
 8014584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014588:	4606      	mov	r6, r0
 801458a:	460f      	mov	r7, r1
 801458c:	f7eb fe94 	bl	80002b8 <__aeabi_dsub>
 8014590:	4602      	mov	r2, r0
 8014592:	460b      	mov	r3, r1
 8014594:	e9c4 2300 	strd	r2, r3, [r4]
 8014598:	4630      	mov	r0, r6
 801459a:	4639      	mov	r1, r7
 801459c:	f7eb fe8c 	bl	80002b8 <__aeabi_dsub>
 80145a0:	a393      	add	r3, pc, #588	; (adr r3, 80147f0 <__ieee754_rem_pio2+0x2f8>)
 80145a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145a6:	e7de      	b.n	8014566 <__ieee754_rem_pio2+0x6e>
 80145a8:	f7eb fe88 	bl	80002bc <__adddf3>
 80145ac:	45a8      	cmp	r8, r5
 80145ae:	4606      	mov	r6, r0
 80145b0:	460f      	mov	r7, r1
 80145b2:	d016      	beq.n	80145e2 <__ieee754_rem_pio2+0xea>
 80145b4:	a38a      	add	r3, pc, #552	; (adr r3, 80147e0 <__ieee754_rem_pio2+0x2e8>)
 80145b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ba:	f7eb fe7f 	bl	80002bc <__adddf3>
 80145be:	4602      	mov	r2, r0
 80145c0:	460b      	mov	r3, r1
 80145c2:	e9c4 2300 	strd	r2, r3, [r4]
 80145c6:	4630      	mov	r0, r6
 80145c8:	4639      	mov	r1, r7
 80145ca:	f7eb fe75 	bl	80002b8 <__aeabi_dsub>
 80145ce:	a384      	add	r3, pc, #528	; (adr r3, 80147e0 <__ieee754_rem_pio2+0x2e8>)
 80145d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145d4:	f7eb fe72 	bl	80002bc <__adddf3>
 80145d8:	f04f 35ff 	mov.w	r5, #4294967295
 80145dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80145e0:	e7c6      	b.n	8014570 <__ieee754_rem_pio2+0x78>
 80145e2:	a381      	add	r3, pc, #516	; (adr r3, 80147e8 <__ieee754_rem_pio2+0x2f0>)
 80145e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145e8:	f7eb fe68 	bl	80002bc <__adddf3>
 80145ec:	a380      	add	r3, pc, #512	; (adr r3, 80147f0 <__ieee754_rem_pio2+0x2f8>)
 80145ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145f2:	4606      	mov	r6, r0
 80145f4:	460f      	mov	r7, r1
 80145f6:	f7eb fe61 	bl	80002bc <__adddf3>
 80145fa:	4602      	mov	r2, r0
 80145fc:	460b      	mov	r3, r1
 80145fe:	e9c4 2300 	strd	r2, r3, [r4]
 8014602:	4630      	mov	r0, r6
 8014604:	4639      	mov	r1, r7
 8014606:	f7eb fe57 	bl	80002b8 <__aeabi_dsub>
 801460a:	a379      	add	r3, pc, #484	; (adr r3, 80147f0 <__ieee754_rem_pio2+0x2f8>)
 801460c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014610:	e7e0      	b.n	80145d4 <__ieee754_rem_pio2+0xdc>
 8014612:	4b82      	ldr	r3, [pc, #520]	; (801481c <__ieee754_rem_pio2+0x324>)
 8014614:	4598      	cmp	r8, r3
 8014616:	f300 80d0 	bgt.w	80147ba <__ieee754_rem_pio2+0x2c2>
 801461a:	f000 fff1 	bl	8015600 <fabs>
 801461e:	ec57 6b10 	vmov	r6, r7, d0
 8014622:	ee10 0a10 	vmov	r0, s0
 8014626:	a374      	add	r3, pc, #464	; (adr r3, 80147f8 <__ieee754_rem_pio2+0x300>)
 8014628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801462c:	4639      	mov	r1, r7
 801462e:	f7eb fffb 	bl	8000628 <__aeabi_dmul>
 8014632:	2200      	movs	r2, #0
 8014634:	4b7a      	ldr	r3, [pc, #488]	; (8014820 <__ieee754_rem_pio2+0x328>)
 8014636:	f7eb fe41 	bl	80002bc <__adddf3>
 801463a:	f7ec faa5 	bl	8000b88 <__aeabi_d2iz>
 801463e:	4605      	mov	r5, r0
 8014640:	f7eb ff88 	bl	8000554 <__aeabi_i2d>
 8014644:	a364      	add	r3, pc, #400	; (adr r3, 80147d8 <__ieee754_rem_pio2+0x2e0>)
 8014646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801464a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801464e:	f7eb ffeb 	bl	8000628 <__aeabi_dmul>
 8014652:	4602      	mov	r2, r0
 8014654:	460b      	mov	r3, r1
 8014656:	4630      	mov	r0, r6
 8014658:	4639      	mov	r1, r7
 801465a:	f7eb fe2d 	bl	80002b8 <__aeabi_dsub>
 801465e:	a360      	add	r3, pc, #384	; (adr r3, 80147e0 <__ieee754_rem_pio2+0x2e8>)
 8014660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014664:	4682      	mov	sl, r0
 8014666:	468b      	mov	fp, r1
 8014668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801466c:	f7eb ffdc 	bl	8000628 <__aeabi_dmul>
 8014670:	2d1f      	cmp	r5, #31
 8014672:	4606      	mov	r6, r0
 8014674:	460f      	mov	r7, r1
 8014676:	dc0c      	bgt.n	8014692 <__ieee754_rem_pio2+0x19a>
 8014678:	1e6a      	subs	r2, r5, #1
 801467a:	4b6a      	ldr	r3, [pc, #424]	; (8014824 <__ieee754_rem_pio2+0x32c>)
 801467c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014680:	4543      	cmp	r3, r8
 8014682:	d006      	beq.n	8014692 <__ieee754_rem_pio2+0x19a>
 8014684:	4632      	mov	r2, r6
 8014686:	463b      	mov	r3, r7
 8014688:	4650      	mov	r0, sl
 801468a:	4659      	mov	r1, fp
 801468c:	f7eb fe14 	bl	80002b8 <__aeabi_dsub>
 8014690:	e00e      	b.n	80146b0 <__ieee754_rem_pio2+0x1b8>
 8014692:	4632      	mov	r2, r6
 8014694:	463b      	mov	r3, r7
 8014696:	4650      	mov	r0, sl
 8014698:	4659      	mov	r1, fp
 801469a:	f7eb fe0d 	bl	80002b8 <__aeabi_dsub>
 801469e:	ea4f 5328 	mov.w	r3, r8, asr #20
 80146a2:	9305      	str	r3, [sp, #20]
 80146a4:	9a05      	ldr	r2, [sp, #20]
 80146a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80146aa:	1ad3      	subs	r3, r2, r3
 80146ac:	2b10      	cmp	r3, #16
 80146ae:	dc02      	bgt.n	80146b6 <__ieee754_rem_pio2+0x1be>
 80146b0:	e9c4 0100 	strd	r0, r1, [r4]
 80146b4:	e039      	b.n	801472a <__ieee754_rem_pio2+0x232>
 80146b6:	a34c      	add	r3, pc, #304	; (adr r3, 80147e8 <__ieee754_rem_pio2+0x2f0>)
 80146b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80146c0:	f7eb ffb2 	bl	8000628 <__aeabi_dmul>
 80146c4:	4606      	mov	r6, r0
 80146c6:	460f      	mov	r7, r1
 80146c8:	4602      	mov	r2, r0
 80146ca:	460b      	mov	r3, r1
 80146cc:	4650      	mov	r0, sl
 80146ce:	4659      	mov	r1, fp
 80146d0:	f7eb fdf2 	bl	80002b8 <__aeabi_dsub>
 80146d4:	4602      	mov	r2, r0
 80146d6:	460b      	mov	r3, r1
 80146d8:	4680      	mov	r8, r0
 80146da:	4689      	mov	r9, r1
 80146dc:	4650      	mov	r0, sl
 80146de:	4659      	mov	r1, fp
 80146e0:	f7eb fdea 	bl	80002b8 <__aeabi_dsub>
 80146e4:	4632      	mov	r2, r6
 80146e6:	463b      	mov	r3, r7
 80146e8:	f7eb fde6 	bl	80002b8 <__aeabi_dsub>
 80146ec:	a340      	add	r3, pc, #256	; (adr r3, 80147f0 <__ieee754_rem_pio2+0x2f8>)
 80146ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146f2:	4606      	mov	r6, r0
 80146f4:	460f      	mov	r7, r1
 80146f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80146fa:	f7eb ff95 	bl	8000628 <__aeabi_dmul>
 80146fe:	4632      	mov	r2, r6
 8014700:	463b      	mov	r3, r7
 8014702:	f7eb fdd9 	bl	80002b8 <__aeabi_dsub>
 8014706:	4602      	mov	r2, r0
 8014708:	460b      	mov	r3, r1
 801470a:	4606      	mov	r6, r0
 801470c:	460f      	mov	r7, r1
 801470e:	4640      	mov	r0, r8
 8014710:	4649      	mov	r1, r9
 8014712:	f7eb fdd1 	bl	80002b8 <__aeabi_dsub>
 8014716:	9a05      	ldr	r2, [sp, #20]
 8014718:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801471c:	1ad3      	subs	r3, r2, r3
 801471e:	2b31      	cmp	r3, #49	; 0x31
 8014720:	dc20      	bgt.n	8014764 <__ieee754_rem_pio2+0x26c>
 8014722:	e9c4 0100 	strd	r0, r1, [r4]
 8014726:	46c2      	mov	sl, r8
 8014728:	46cb      	mov	fp, r9
 801472a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801472e:	4650      	mov	r0, sl
 8014730:	4642      	mov	r2, r8
 8014732:	464b      	mov	r3, r9
 8014734:	4659      	mov	r1, fp
 8014736:	f7eb fdbf 	bl	80002b8 <__aeabi_dsub>
 801473a:	463b      	mov	r3, r7
 801473c:	4632      	mov	r2, r6
 801473e:	f7eb fdbb 	bl	80002b8 <__aeabi_dsub>
 8014742:	9b04      	ldr	r3, [sp, #16]
 8014744:	2b00      	cmp	r3, #0
 8014746:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801474a:	f6bf af11 	bge.w	8014570 <__ieee754_rem_pio2+0x78>
 801474e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014752:	6063      	str	r3, [r4, #4]
 8014754:	f8c4 8000 	str.w	r8, [r4]
 8014758:	60a0      	str	r0, [r4, #8]
 801475a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801475e:	60e3      	str	r3, [r4, #12]
 8014760:	426d      	negs	r5, r5
 8014762:	e705      	b.n	8014570 <__ieee754_rem_pio2+0x78>
 8014764:	a326      	add	r3, pc, #152	; (adr r3, 8014800 <__ieee754_rem_pio2+0x308>)
 8014766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801476a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801476e:	f7eb ff5b 	bl	8000628 <__aeabi_dmul>
 8014772:	4606      	mov	r6, r0
 8014774:	460f      	mov	r7, r1
 8014776:	4602      	mov	r2, r0
 8014778:	460b      	mov	r3, r1
 801477a:	4640      	mov	r0, r8
 801477c:	4649      	mov	r1, r9
 801477e:	f7eb fd9b 	bl	80002b8 <__aeabi_dsub>
 8014782:	4602      	mov	r2, r0
 8014784:	460b      	mov	r3, r1
 8014786:	4682      	mov	sl, r0
 8014788:	468b      	mov	fp, r1
 801478a:	4640      	mov	r0, r8
 801478c:	4649      	mov	r1, r9
 801478e:	f7eb fd93 	bl	80002b8 <__aeabi_dsub>
 8014792:	4632      	mov	r2, r6
 8014794:	463b      	mov	r3, r7
 8014796:	f7eb fd8f 	bl	80002b8 <__aeabi_dsub>
 801479a:	a31b      	add	r3, pc, #108	; (adr r3, 8014808 <__ieee754_rem_pio2+0x310>)
 801479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147a0:	4606      	mov	r6, r0
 80147a2:	460f      	mov	r7, r1
 80147a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80147a8:	f7eb ff3e 	bl	8000628 <__aeabi_dmul>
 80147ac:	4632      	mov	r2, r6
 80147ae:	463b      	mov	r3, r7
 80147b0:	f7eb fd82 	bl	80002b8 <__aeabi_dsub>
 80147b4:	4606      	mov	r6, r0
 80147b6:	460f      	mov	r7, r1
 80147b8:	e764      	b.n	8014684 <__ieee754_rem_pio2+0x18c>
 80147ba:	4b1b      	ldr	r3, [pc, #108]	; (8014828 <__ieee754_rem_pio2+0x330>)
 80147bc:	4598      	cmp	r8, r3
 80147be:	dd35      	ble.n	801482c <__ieee754_rem_pio2+0x334>
 80147c0:	ee10 2a10 	vmov	r2, s0
 80147c4:	463b      	mov	r3, r7
 80147c6:	4630      	mov	r0, r6
 80147c8:	4639      	mov	r1, r7
 80147ca:	f7eb fd75 	bl	80002b8 <__aeabi_dsub>
 80147ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80147d2:	e9c4 0100 	strd	r0, r1, [r4]
 80147d6:	e6a1      	b.n	801451c <__ieee754_rem_pio2+0x24>
 80147d8:	54400000 	.word	0x54400000
 80147dc:	3ff921fb 	.word	0x3ff921fb
 80147e0:	1a626331 	.word	0x1a626331
 80147e4:	3dd0b461 	.word	0x3dd0b461
 80147e8:	1a600000 	.word	0x1a600000
 80147ec:	3dd0b461 	.word	0x3dd0b461
 80147f0:	2e037073 	.word	0x2e037073
 80147f4:	3ba3198a 	.word	0x3ba3198a
 80147f8:	6dc9c883 	.word	0x6dc9c883
 80147fc:	3fe45f30 	.word	0x3fe45f30
 8014800:	2e000000 	.word	0x2e000000
 8014804:	3ba3198a 	.word	0x3ba3198a
 8014808:	252049c1 	.word	0x252049c1
 801480c:	397b839a 	.word	0x397b839a
 8014810:	3fe921fb 	.word	0x3fe921fb
 8014814:	4002d97b 	.word	0x4002d97b
 8014818:	3ff921fb 	.word	0x3ff921fb
 801481c:	413921fb 	.word	0x413921fb
 8014820:	3fe00000 	.word	0x3fe00000
 8014824:	0801a344 	.word	0x0801a344
 8014828:	7fefffff 	.word	0x7fefffff
 801482c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014830:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8014834:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014838:	4630      	mov	r0, r6
 801483a:	460f      	mov	r7, r1
 801483c:	f7ec f9a4 	bl	8000b88 <__aeabi_d2iz>
 8014840:	f7eb fe88 	bl	8000554 <__aeabi_i2d>
 8014844:	4602      	mov	r2, r0
 8014846:	460b      	mov	r3, r1
 8014848:	4630      	mov	r0, r6
 801484a:	4639      	mov	r1, r7
 801484c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014850:	f7eb fd32 	bl	80002b8 <__aeabi_dsub>
 8014854:	2200      	movs	r2, #0
 8014856:	4b1f      	ldr	r3, [pc, #124]	; (80148d4 <__ieee754_rem_pio2+0x3dc>)
 8014858:	f7eb fee6 	bl	8000628 <__aeabi_dmul>
 801485c:	460f      	mov	r7, r1
 801485e:	4606      	mov	r6, r0
 8014860:	f7ec f992 	bl	8000b88 <__aeabi_d2iz>
 8014864:	f7eb fe76 	bl	8000554 <__aeabi_i2d>
 8014868:	4602      	mov	r2, r0
 801486a:	460b      	mov	r3, r1
 801486c:	4630      	mov	r0, r6
 801486e:	4639      	mov	r1, r7
 8014870:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014874:	f7eb fd20 	bl	80002b8 <__aeabi_dsub>
 8014878:	2200      	movs	r2, #0
 801487a:	4b16      	ldr	r3, [pc, #88]	; (80148d4 <__ieee754_rem_pio2+0x3dc>)
 801487c:	f7eb fed4 	bl	8000628 <__aeabi_dmul>
 8014880:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014884:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014888:	f04f 0803 	mov.w	r8, #3
 801488c:	2600      	movs	r6, #0
 801488e:	2700      	movs	r7, #0
 8014890:	4632      	mov	r2, r6
 8014892:	463b      	mov	r3, r7
 8014894:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014898:	f108 3aff 	add.w	sl, r8, #4294967295
 801489c:	f7ec f92c 	bl	8000af8 <__aeabi_dcmpeq>
 80148a0:	b9b0      	cbnz	r0, 80148d0 <__ieee754_rem_pio2+0x3d8>
 80148a2:	4b0d      	ldr	r3, [pc, #52]	; (80148d8 <__ieee754_rem_pio2+0x3e0>)
 80148a4:	9301      	str	r3, [sp, #4]
 80148a6:	2302      	movs	r3, #2
 80148a8:	9300      	str	r3, [sp, #0]
 80148aa:	462a      	mov	r2, r5
 80148ac:	4643      	mov	r3, r8
 80148ae:	4621      	mov	r1, r4
 80148b0:	a806      	add	r0, sp, #24
 80148b2:	f000 f8dd 	bl	8014a70 <__kernel_rem_pio2>
 80148b6:	9b04      	ldr	r3, [sp, #16]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	4605      	mov	r5, r0
 80148bc:	f6bf ae58 	bge.w	8014570 <__ieee754_rem_pio2+0x78>
 80148c0:	6863      	ldr	r3, [r4, #4]
 80148c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80148c6:	6063      	str	r3, [r4, #4]
 80148c8:	68e3      	ldr	r3, [r4, #12]
 80148ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80148ce:	e746      	b.n	801475e <__ieee754_rem_pio2+0x266>
 80148d0:	46d0      	mov	r8, sl
 80148d2:	e7dd      	b.n	8014890 <__ieee754_rem_pio2+0x398>
 80148d4:	41700000 	.word	0x41700000
 80148d8:	0801a3c4 	.word	0x0801a3c4
 80148dc:	00000000 	.word	0x00000000

080148e0 <__kernel_cos>:
 80148e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148e4:	ec59 8b10 	vmov	r8, r9, d0
 80148e8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80148ec:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80148f0:	ed2d 8b02 	vpush	{d8}
 80148f4:	eeb0 8a41 	vmov.f32	s16, s2
 80148f8:	eef0 8a61 	vmov.f32	s17, s3
 80148fc:	da07      	bge.n	801490e <__kernel_cos+0x2e>
 80148fe:	ee10 0a10 	vmov	r0, s0
 8014902:	4649      	mov	r1, r9
 8014904:	f7ec f940 	bl	8000b88 <__aeabi_d2iz>
 8014908:	2800      	cmp	r0, #0
 801490a:	f000 8089 	beq.w	8014a20 <__kernel_cos+0x140>
 801490e:	4642      	mov	r2, r8
 8014910:	464b      	mov	r3, r9
 8014912:	4640      	mov	r0, r8
 8014914:	4649      	mov	r1, r9
 8014916:	f7eb fe87 	bl	8000628 <__aeabi_dmul>
 801491a:	2200      	movs	r2, #0
 801491c:	4b4e      	ldr	r3, [pc, #312]	; (8014a58 <__kernel_cos+0x178>)
 801491e:	4604      	mov	r4, r0
 8014920:	460d      	mov	r5, r1
 8014922:	f7eb fe81 	bl	8000628 <__aeabi_dmul>
 8014926:	a340      	add	r3, pc, #256	; (adr r3, 8014a28 <__kernel_cos+0x148>)
 8014928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801492c:	4682      	mov	sl, r0
 801492e:	468b      	mov	fp, r1
 8014930:	4620      	mov	r0, r4
 8014932:	4629      	mov	r1, r5
 8014934:	f7eb fe78 	bl	8000628 <__aeabi_dmul>
 8014938:	a33d      	add	r3, pc, #244	; (adr r3, 8014a30 <__kernel_cos+0x150>)
 801493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801493e:	f7eb fcbd 	bl	80002bc <__adddf3>
 8014942:	4622      	mov	r2, r4
 8014944:	462b      	mov	r3, r5
 8014946:	f7eb fe6f 	bl	8000628 <__aeabi_dmul>
 801494a:	a33b      	add	r3, pc, #236	; (adr r3, 8014a38 <__kernel_cos+0x158>)
 801494c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014950:	f7eb fcb2 	bl	80002b8 <__aeabi_dsub>
 8014954:	4622      	mov	r2, r4
 8014956:	462b      	mov	r3, r5
 8014958:	f7eb fe66 	bl	8000628 <__aeabi_dmul>
 801495c:	a338      	add	r3, pc, #224	; (adr r3, 8014a40 <__kernel_cos+0x160>)
 801495e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014962:	f7eb fcab 	bl	80002bc <__adddf3>
 8014966:	4622      	mov	r2, r4
 8014968:	462b      	mov	r3, r5
 801496a:	f7eb fe5d 	bl	8000628 <__aeabi_dmul>
 801496e:	a336      	add	r3, pc, #216	; (adr r3, 8014a48 <__kernel_cos+0x168>)
 8014970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014974:	f7eb fca0 	bl	80002b8 <__aeabi_dsub>
 8014978:	4622      	mov	r2, r4
 801497a:	462b      	mov	r3, r5
 801497c:	f7eb fe54 	bl	8000628 <__aeabi_dmul>
 8014980:	a333      	add	r3, pc, #204	; (adr r3, 8014a50 <__kernel_cos+0x170>)
 8014982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014986:	f7eb fc99 	bl	80002bc <__adddf3>
 801498a:	4622      	mov	r2, r4
 801498c:	462b      	mov	r3, r5
 801498e:	f7eb fe4b 	bl	8000628 <__aeabi_dmul>
 8014992:	4622      	mov	r2, r4
 8014994:	462b      	mov	r3, r5
 8014996:	f7eb fe47 	bl	8000628 <__aeabi_dmul>
 801499a:	ec53 2b18 	vmov	r2, r3, d8
 801499e:	4604      	mov	r4, r0
 80149a0:	460d      	mov	r5, r1
 80149a2:	4640      	mov	r0, r8
 80149a4:	4649      	mov	r1, r9
 80149a6:	f7eb fe3f 	bl	8000628 <__aeabi_dmul>
 80149aa:	460b      	mov	r3, r1
 80149ac:	4602      	mov	r2, r0
 80149ae:	4629      	mov	r1, r5
 80149b0:	4620      	mov	r0, r4
 80149b2:	f7eb fc81 	bl	80002b8 <__aeabi_dsub>
 80149b6:	4b29      	ldr	r3, [pc, #164]	; (8014a5c <__kernel_cos+0x17c>)
 80149b8:	429e      	cmp	r6, r3
 80149ba:	4680      	mov	r8, r0
 80149bc:	4689      	mov	r9, r1
 80149be:	dc11      	bgt.n	80149e4 <__kernel_cos+0x104>
 80149c0:	4602      	mov	r2, r0
 80149c2:	460b      	mov	r3, r1
 80149c4:	4650      	mov	r0, sl
 80149c6:	4659      	mov	r1, fp
 80149c8:	f7eb fc76 	bl	80002b8 <__aeabi_dsub>
 80149cc:	460b      	mov	r3, r1
 80149ce:	4924      	ldr	r1, [pc, #144]	; (8014a60 <__kernel_cos+0x180>)
 80149d0:	4602      	mov	r2, r0
 80149d2:	2000      	movs	r0, #0
 80149d4:	f7eb fc70 	bl	80002b8 <__aeabi_dsub>
 80149d8:	ecbd 8b02 	vpop	{d8}
 80149dc:	ec41 0b10 	vmov	d0, r0, r1
 80149e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149e4:	4b1f      	ldr	r3, [pc, #124]	; (8014a64 <__kernel_cos+0x184>)
 80149e6:	491e      	ldr	r1, [pc, #120]	; (8014a60 <__kernel_cos+0x180>)
 80149e8:	429e      	cmp	r6, r3
 80149ea:	bfcc      	ite	gt
 80149ec:	4d1e      	ldrgt	r5, [pc, #120]	; (8014a68 <__kernel_cos+0x188>)
 80149ee:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80149f2:	2400      	movs	r4, #0
 80149f4:	4622      	mov	r2, r4
 80149f6:	462b      	mov	r3, r5
 80149f8:	2000      	movs	r0, #0
 80149fa:	f7eb fc5d 	bl	80002b8 <__aeabi_dsub>
 80149fe:	4622      	mov	r2, r4
 8014a00:	4606      	mov	r6, r0
 8014a02:	460f      	mov	r7, r1
 8014a04:	462b      	mov	r3, r5
 8014a06:	4650      	mov	r0, sl
 8014a08:	4659      	mov	r1, fp
 8014a0a:	f7eb fc55 	bl	80002b8 <__aeabi_dsub>
 8014a0e:	4642      	mov	r2, r8
 8014a10:	464b      	mov	r3, r9
 8014a12:	f7eb fc51 	bl	80002b8 <__aeabi_dsub>
 8014a16:	4602      	mov	r2, r0
 8014a18:	460b      	mov	r3, r1
 8014a1a:	4630      	mov	r0, r6
 8014a1c:	4639      	mov	r1, r7
 8014a1e:	e7d9      	b.n	80149d4 <__kernel_cos+0xf4>
 8014a20:	2000      	movs	r0, #0
 8014a22:	490f      	ldr	r1, [pc, #60]	; (8014a60 <__kernel_cos+0x180>)
 8014a24:	e7d8      	b.n	80149d8 <__kernel_cos+0xf8>
 8014a26:	bf00      	nop
 8014a28:	be8838d4 	.word	0xbe8838d4
 8014a2c:	bda8fae9 	.word	0xbda8fae9
 8014a30:	bdb4b1c4 	.word	0xbdb4b1c4
 8014a34:	3e21ee9e 	.word	0x3e21ee9e
 8014a38:	809c52ad 	.word	0x809c52ad
 8014a3c:	3e927e4f 	.word	0x3e927e4f
 8014a40:	19cb1590 	.word	0x19cb1590
 8014a44:	3efa01a0 	.word	0x3efa01a0
 8014a48:	16c15177 	.word	0x16c15177
 8014a4c:	3f56c16c 	.word	0x3f56c16c
 8014a50:	5555554c 	.word	0x5555554c
 8014a54:	3fa55555 	.word	0x3fa55555
 8014a58:	3fe00000 	.word	0x3fe00000
 8014a5c:	3fd33332 	.word	0x3fd33332
 8014a60:	3ff00000 	.word	0x3ff00000
 8014a64:	3fe90000 	.word	0x3fe90000
 8014a68:	3fd20000 	.word	0x3fd20000
 8014a6c:	00000000 	.word	0x00000000

08014a70 <__kernel_rem_pio2>:
 8014a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a74:	ed2d 8b02 	vpush	{d8}
 8014a78:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8014a7c:	1ed4      	subs	r4, r2, #3
 8014a7e:	9308      	str	r3, [sp, #32]
 8014a80:	9101      	str	r1, [sp, #4]
 8014a82:	4bc5      	ldr	r3, [pc, #788]	; (8014d98 <__kernel_rem_pio2+0x328>)
 8014a84:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014a86:	9009      	str	r0, [sp, #36]	; 0x24
 8014a88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014a8c:	9304      	str	r3, [sp, #16]
 8014a8e:	9b08      	ldr	r3, [sp, #32]
 8014a90:	3b01      	subs	r3, #1
 8014a92:	9307      	str	r3, [sp, #28]
 8014a94:	2318      	movs	r3, #24
 8014a96:	fb94 f4f3 	sdiv	r4, r4, r3
 8014a9a:	f06f 0317 	mvn.w	r3, #23
 8014a9e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014aa2:	fb04 3303 	mla	r3, r4, r3, r3
 8014aa6:	eb03 0a02 	add.w	sl, r3, r2
 8014aaa:	9b04      	ldr	r3, [sp, #16]
 8014aac:	9a07      	ldr	r2, [sp, #28]
 8014aae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8014d88 <__kernel_rem_pio2+0x318>
 8014ab2:	eb03 0802 	add.w	r8, r3, r2
 8014ab6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014ab8:	1aa7      	subs	r7, r4, r2
 8014aba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014abe:	ae22      	add	r6, sp, #136	; 0x88
 8014ac0:	2500      	movs	r5, #0
 8014ac2:	4545      	cmp	r5, r8
 8014ac4:	dd13      	ble.n	8014aee <__kernel_rem_pio2+0x7e>
 8014ac6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8014d88 <__kernel_rem_pio2+0x318>
 8014aca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8014ace:	2600      	movs	r6, #0
 8014ad0:	9b04      	ldr	r3, [sp, #16]
 8014ad2:	429e      	cmp	r6, r3
 8014ad4:	dc32      	bgt.n	8014b3c <__kernel_rem_pio2+0xcc>
 8014ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ad8:	9302      	str	r3, [sp, #8]
 8014ada:	9b08      	ldr	r3, [sp, #32]
 8014adc:	199d      	adds	r5, r3, r6
 8014ade:	ab22      	add	r3, sp, #136	; 0x88
 8014ae0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014ae4:	9306      	str	r3, [sp, #24]
 8014ae6:	ec59 8b18 	vmov	r8, r9, d8
 8014aea:	2700      	movs	r7, #0
 8014aec:	e01f      	b.n	8014b2e <__kernel_rem_pio2+0xbe>
 8014aee:	42ef      	cmn	r7, r5
 8014af0:	d407      	bmi.n	8014b02 <__kernel_rem_pio2+0x92>
 8014af2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014af6:	f7eb fd2d 	bl	8000554 <__aeabi_i2d>
 8014afa:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014afe:	3501      	adds	r5, #1
 8014b00:	e7df      	b.n	8014ac2 <__kernel_rem_pio2+0x52>
 8014b02:	ec51 0b18 	vmov	r0, r1, d8
 8014b06:	e7f8      	b.n	8014afa <__kernel_rem_pio2+0x8a>
 8014b08:	9906      	ldr	r1, [sp, #24]
 8014b0a:	9d02      	ldr	r5, [sp, #8]
 8014b0c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8014b10:	9106      	str	r1, [sp, #24]
 8014b12:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8014b16:	9502      	str	r5, [sp, #8]
 8014b18:	f7eb fd86 	bl	8000628 <__aeabi_dmul>
 8014b1c:	4602      	mov	r2, r0
 8014b1e:	460b      	mov	r3, r1
 8014b20:	4640      	mov	r0, r8
 8014b22:	4649      	mov	r1, r9
 8014b24:	f7eb fbca 	bl	80002bc <__adddf3>
 8014b28:	3701      	adds	r7, #1
 8014b2a:	4680      	mov	r8, r0
 8014b2c:	4689      	mov	r9, r1
 8014b2e:	9b07      	ldr	r3, [sp, #28]
 8014b30:	429f      	cmp	r7, r3
 8014b32:	dde9      	ble.n	8014b08 <__kernel_rem_pio2+0x98>
 8014b34:	e8eb 8902 	strd	r8, r9, [fp], #8
 8014b38:	3601      	adds	r6, #1
 8014b3a:	e7c9      	b.n	8014ad0 <__kernel_rem_pio2+0x60>
 8014b3c:	9b04      	ldr	r3, [sp, #16]
 8014b3e:	aa0e      	add	r2, sp, #56	; 0x38
 8014b40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014b44:	930c      	str	r3, [sp, #48]	; 0x30
 8014b46:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014b48:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014b4c:	9c04      	ldr	r4, [sp, #16]
 8014b4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b50:	ab9a      	add	r3, sp, #616	; 0x268
 8014b52:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8014b56:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014b5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014b5e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8014b62:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8014b66:	ab9a      	add	r3, sp, #616	; 0x268
 8014b68:	445b      	add	r3, fp
 8014b6a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8014b6e:	2500      	movs	r5, #0
 8014b70:	1b63      	subs	r3, r4, r5
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	dc78      	bgt.n	8014c68 <__kernel_rem_pio2+0x1f8>
 8014b76:	4650      	mov	r0, sl
 8014b78:	ec49 8b10 	vmov	d0, r8, r9
 8014b7c:	f000 fdd0 	bl	8015720 <scalbn>
 8014b80:	ec57 6b10 	vmov	r6, r7, d0
 8014b84:	2200      	movs	r2, #0
 8014b86:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014b8a:	ee10 0a10 	vmov	r0, s0
 8014b8e:	4639      	mov	r1, r7
 8014b90:	f7eb fd4a 	bl	8000628 <__aeabi_dmul>
 8014b94:	ec41 0b10 	vmov	d0, r0, r1
 8014b98:	f000 fd3e 	bl	8015618 <floor>
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	ec51 0b10 	vmov	r0, r1, d0
 8014ba2:	4b7e      	ldr	r3, [pc, #504]	; (8014d9c <__kernel_rem_pio2+0x32c>)
 8014ba4:	f7eb fd40 	bl	8000628 <__aeabi_dmul>
 8014ba8:	4602      	mov	r2, r0
 8014baa:	460b      	mov	r3, r1
 8014bac:	4630      	mov	r0, r6
 8014bae:	4639      	mov	r1, r7
 8014bb0:	f7eb fb82 	bl	80002b8 <__aeabi_dsub>
 8014bb4:	460f      	mov	r7, r1
 8014bb6:	4606      	mov	r6, r0
 8014bb8:	f7eb ffe6 	bl	8000b88 <__aeabi_d2iz>
 8014bbc:	9006      	str	r0, [sp, #24]
 8014bbe:	f7eb fcc9 	bl	8000554 <__aeabi_i2d>
 8014bc2:	4602      	mov	r2, r0
 8014bc4:	460b      	mov	r3, r1
 8014bc6:	4630      	mov	r0, r6
 8014bc8:	4639      	mov	r1, r7
 8014bca:	f7eb fb75 	bl	80002b8 <__aeabi_dsub>
 8014bce:	f1ba 0f00 	cmp.w	sl, #0
 8014bd2:	4606      	mov	r6, r0
 8014bd4:	460f      	mov	r7, r1
 8014bd6:	dd6c      	ble.n	8014cb2 <__kernel_rem_pio2+0x242>
 8014bd8:	1e62      	subs	r2, r4, #1
 8014bda:	ab0e      	add	r3, sp, #56	; 0x38
 8014bdc:	f1ca 0118 	rsb	r1, sl, #24
 8014be0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014be4:	9d06      	ldr	r5, [sp, #24]
 8014be6:	fa40 f301 	asr.w	r3, r0, r1
 8014bea:	441d      	add	r5, r3
 8014bec:	408b      	lsls	r3, r1
 8014bee:	1ac0      	subs	r0, r0, r3
 8014bf0:	ab0e      	add	r3, sp, #56	; 0x38
 8014bf2:	9506      	str	r5, [sp, #24]
 8014bf4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014bf8:	f1ca 0317 	rsb	r3, sl, #23
 8014bfc:	fa40 f303 	asr.w	r3, r0, r3
 8014c00:	9302      	str	r3, [sp, #8]
 8014c02:	9b02      	ldr	r3, [sp, #8]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	dd62      	ble.n	8014cce <__kernel_rem_pio2+0x25e>
 8014c08:	9b06      	ldr	r3, [sp, #24]
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	3301      	adds	r3, #1
 8014c0e:	9306      	str	r3, [sp, #24]
 8014c10:	4615      	mov	r5, r2
 8014c12:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014c16:	4294      	cmp	r4, r2
 8014c18:	f300 8095 	bgt.w	8014d46 <__kernel_rem_pio2+0x2d6>
 8014c1c:	f1ba 0f00 	cmp.w	sl, #0
 8014c20:	dd07      	ble.n	8014c32 <__kernel_rem_pio2+0x1c2>
 8014c22:	f1ba 0f01 	cmp.w	sl, #1
 8014c26:	f000 80a2 	beq.w	8014d6e <__kernel_rem_pio2+0x2fe>
 8014c2a:	f1ba 0f02 	cmp.w	sl, #2
 8014c2e:	f000 80c1 	beq.w	8014db4 <__kernel_rem_pio2+0x344>
 8014c32:	9b02      	ldr	r3, [sp, #8]
 8014c34:	2b02      	cmp	r3, #2
 8014c36:	d14a      	bne.n	8014cce <__kernel_rem_pio2+0x25e>
 8014c38:	4632      	mov	r2, r6
 8014c3a:	463b      	mov	r3, r7
 8014c3c:	2000      	movs	r0, #0
 8014c3e:	4958      	ldr	r1, [pc, #352]	; (8014da0 <__kernel_rem_pio2+0x330>)
 8014c40:	f7eb fb3a 	bl	80002b8 <__aeabi_dsub>
 8014c44:	4606      	mov	r6, r0
 8014c46:	460f      	mov	r7, r1
 8014c48:	2d00      	cmp	r5, #0
 8014c4a:	d040      	beq.n	8014cce <__kernel_rem_pio2+0x25e>
 8014c4c:	4650      	mov	r0, sl
 8014c4e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8014d90 <__kernel_rem_pio2+0x320>
 8014c52:	f000 fd65 	bl	8015720 <scalbn>
 8014c56:	4630      	mov	r0, r6
 8014c58:	4639      	mov	r1, r7
 8014c5a:	ec53 2b10 	vmov	r2, r3, d0
 8014c5e:	f7eb fb2b 	bl	80002b8 <__aeabi_dsub>
 8014c62:	4606      	mov	r6, r0
 8014c64:	460f      	mov	r7, r1
 8014c66:	e032      	b.n	8014cce <__kernel_rem_pio2+0x25e>
 8014c68:	2200      	movs	r2, #0
 8014c6a:	4b4e      	ldr	r3, [pc, #312]	; (8014da4 <__kernel_rem_pio2+0x334>)
 8014c6c:	4640      	mov	r0, r8
 8014c6e:	4649      	mov	r1, r9
 8014c70:	f7eb fcda 	bl	8000628 <__aeabi_dmul>
 8014c74:	f7eb ff88 	bl	8000b88 <__aeabi_d2iz>
 8014c78:	f7eb fc6c 	bl	8000554 <__aeabi_i2d>
 8014c7c:	2200      	movs	r2, #0
 8014c7e:	4b4a      	ldr	r3, [pc, #296]	; (8014da8 <__kernel_rem_pio2+0x338>)
 8014c80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c84:	f7eb fcd0 	bl	8000628 <__aeabi_dmul>
 8014c88:	4602      	mov	r2, r0
 8014c8a:	460b      	mov	r3, r1
 8014c8c:	4640      	mov	r0, r8
 8014c8e:	4649      	mov	r1, r9
 8014c90:	f7eb fb12 	bl	80002b8 <__aeabi_dsub>
 8014c94:	f7eb ff78 	bl	8000b88 <__aeabi_d2iz>
 8014c98:	ab0e      	add	r3, sp, #56	; 0x38
 8014c9a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8014c9e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8014ca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ca6:	f7eb fb09 	bl	80002bc <__adddf3>
 8014caa:	3501      	adds	r5, #1
 8014cac:	4680      	mov	r8, r0
 8014cae:	4689      	mov	r9, r1
 8014cb0:	e75e      	b.n	8014b70 <__kernel_rem_pio2+0x100>
 8014cb2:	d105      	bne.n	8014cc0 <__kernel_rem_pio2+0x250>
 8014cb4:	1e63      	subs	r3, r4, #1
 8014cb6:	aa0e      	add	r2, sp, #56	; 0x38
 8014cb8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014cbc:	15c3      	asrs	r3, r0, #23
 8014cbe:	e79f      	b.n	8014c00 <__kernel_rem_pio2+0x190>
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	4b3a      	ldr	r3, [pc, #232]	; (8014dac <__kernel_rem_pio2+0x33c>)
 8014cc4:	f7eb ff36 	bl	8000b34 <__aeabi_dcmpge>
 8014cc8:	2800      	cmp	r0, #0
 8014cca:	d139      	bne.n	8014d40 <__kernel_rem_pio2+0x2d0>
 8014ccc:	9002      	str	r0, [sp, #8]
 8014cce:	2200      	movs	r2, #0
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	4630      	mov	r0, r6
 8014cd4:	4639      	mov	r1, r7
 8014cd6:	f7eb ff0f 	bl	8000af8 <__aeabi_dcmpeq>
 8014cda:	2800      	cmp	r0, #0
 8014cdc:	f000 80c7 	beq.w	8014e6e <__kernel_rem_pio2+0x3fe>
 8014ce0:	1e65      	subs	r5, r4, #1
 8014ce2:	462b      	mov	r3, r5
 8014ce4:	2200      	movs	r2, #0
 8014ce6:	9904      	ldr	r1, [sp, #16]
 8014ce8:	428b      	cmp	r3, r1
 8014cea:	da6a      	bge.n	8014dc2 <__kernel_rem_pio2+0x352>
 8014cec:	2a00      	cmp	r2, #0
 8014cee:	f000 8088 	beq.w	8014e02 <__kernel_rem_pio2+0x392>
 8014cf2:	ab0e      	add	r3, sp, #56	; 0x38
 8014cf4:	f1aa 0a18 	sub.w	sl, sl, #24
 8014cf8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	f000 80b4 	beq.w	8014e6a <__kernel_rem_pio2+0x3fa>
 8014d02:	4650      	mov	r0, sl
 8014d04:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8014d90 <__kernel_rem_pio2+0x320>
 8014d08:	f000 fd0a 	bl	8015720 <scalbn>
 8014d0c:	00ec      	lsls	r4, r5, #3
 8014d0e:	ab72      	add	r3, sp, #456	; 0x1c8
 8014d10:	191e      	adds	r6, r3, r4
 8014d12:	ec59 8b10 	vmov	r8, r9, d0
 8014d16:	f106 0a08 	add.w	sl, r6, #8
 8014d1a:	462f      	mov	r7, r5
 8014d1c:	2f00      	cmp	r7, #0
 8014d1e:	f280 80df 	bge.w	8014ee0 <__kernel_rem_pio2+0x470>
 8014d22:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8014d88 <__kernel_rem_pio2+0x318>
 8014d26:	f04f 0a00 	mov.w	sl, #0
 8014d2a:	eba5 030a 	sub.w	r3, r5, sl
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	f2c0 810a 	blt.w	8014f48 <__kernel_rem_pio2+0x4d8>
 8014d34:	f8df b078 	ldr.w	fp, [pc, #120]	; 8014db0 <__kernel_rem_pio2+0x340>
 8014d38:	ec59 8b18 	vmov	r8, r9, d8
 8014d3c:	2700      	movs	r7, #0
 8014d3e:	e0f5      	b.n	8014f2c <__kernel_rem_pio2+0x4bc>
 8014d40:	2302      	movs	r3, #2
 8014d42:	9302      	str	r3, [sp, #8]
 8014d44:	e760      	b.n	8014c08 <__kernel_rem_pio2+0x198>
 8014d46:	ab0e      	add	r3, sp, #56	; 0x38
 8014d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d4c:	b94d      	cbnz	r5, 8014d62 <__kernel_rem_pio2+0x2f2>
 8014d4e:	b12b      	cbz	r3, 8014d5c <__kernel_rem_pio2+0x2ec>
 8014d50:	a80e      	add	r0, sp, #56	; 0x38
 8014d52:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8014d56:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014d5a:	2301      	movs	r3, #1
 8014d5c:	3201      	adds	r2, #1
 8014d5e:	461d      	mov	r5, r3
 8014d60:	e759      	b.n	8014c16 <__kernel_rem_pio2+0x1a6>
 8014d62:	a80e      	add	r0, sp, #56	; 0x38
 8014d64:	1acb      	subs	r3, r1, r3
 8014d66:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014d6a:	462b      	mov	r3, r5
 8014d6c:	e7f6      	b.n	8014d5c <__kernel_rem_pio2+0x2ec>
 8014d6e:	1e62      	subs	r2, r4, #1
 8014d70:	ab0e      	add	r3, sp, #56	; 0x38
 8014d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d76:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014d7a:	a90e      	add	r1, sp, #56	; 0x38
 8014d7c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014d80:	e757      	b.n	8014c32 <__kernel_rem_pio2+0x1c2>
 8014d82:	bf00      	nop
 8014d84:	f3af 8000 	nop.w
	...
 8014d94:	3ff00000 	.word	0x3ff00000
 8014d98:	0801a510 	.word	0x0801a510
 8014d9c:	40200000 	.word	0x40200000
 8014da0:	3ff00000 	.word	0x3ff00000
 8014da4:	3e700000 	.word	0x3e700000
 8014da8:	41700000 	.word	0x41700000
 8014dac:	3fe00000 	.word	0x3fe00000
 8014db0:	0801a4d0 	.word	0x0801a4d0
 8014db4:	1e62      	subs	r2, r4, #1
 8014db6:	ab0e      	add	r3, sp, #56	; 0x38
 8014db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dbc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014dc0:	e7db      	b.n	8014d7a <__kernel_rem_pio2+0x30a>
 8014dc2:	a90e      	add	r1, sp, #56	; 0x38
 8014dc4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014dc8:	3b01      	subs	r3, #1
 8014dca:	430a      	orrs	r2, r1
 8014dcc:	e78b      	b.n	8014ce6 <__kernel_rem_pio2+0x276>
 8014dce:	3301      	adds	r3, #1
 8014dd0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014dd4:	2900      	cmp	r1, #0
 8014dd6:	d0fa      	beq.n	8014dce <__kernel_rem_pio2+0x35e>
 8014dd8:	9a08      	ldr	r2, [sp, #32]
 8014dda:	4422      	add	r2, r4
 8014ddc:	00d2      	lsls	r2, r2, #3
 8014dde:	a922      	add	r1, sp, #136	; 0x88
 8014de0:	18e3      	adds	r3, r4, r3
 8014de2:	9206      	str	r2, [sp, #24]
 8014de4:	440a      	add	r2, r1
 8014de6:	9302      	str	r3, [sp, #8]
 8014de8:	f10b 0108 	add.w	r1, fp, #8
 8014dec:	f102 0308 	add.w	r3, r2, #8
 8014df0:	1c66      	adds	r6, r4, #1
 8014df2:	910a      	str	r1, [sp, #40]	; 0x28
 8014df4:	2500      	movs	r5, #0
 8014df6:	930d      	str	r3, [sp, #52]	; 0x34
 8014df8:	9b02      	ldr	r3, [sp, #8]
 8014dfa:	42b3      	cmp	r3, r6
 8014dfc:	da04      	bge.n	8014e08 <__kernel_rem_pio2+0x398>
 8014dfe:	461c      	mov	r4, r3
 8014e00:	e6a6      	b.n	8014b50 <__kernel_rem_pio2+0xe0>
 8014e02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014e04:	2301      	movs	r3, #1
 8014e06:	e7e3      	b.n	8014dd0 <__kernel_rem_pio2+0x360>
 8014e08:	9b06      	ldr	r3, [sp, #24]
 8014e0a:	18ef      	adds	r7, r5, r3
 8014e0c:	ab22      	add	r3, sp, #136	; 0x88
 8014e0e:	441f      	add	r7, r3
 8014e10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e12:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014e16:	f7eb fb9d 	bl	8000554 <__aeabi_i2d>
 8014e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e1c:	461c      	mov	r4, r3
 8014e1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014e20:	e9c7 0100 	strd	r0, r1, [r7]
 8014e24:	eb03 0b05 	add.w	fp, r3, r5
 8014e28:	2700      	movs	r7, #0
 8014e2a:	f04f 0800 	mov.w	r8, #0
 8014e2e:	f04f 0900 	mov.w	r9, #0
 8014e32:	9b07      	ldr	r3, [sp, #28]
 8014e34:	429f      	cmp	r7, r3
 8014e36:	dd08      	ble.n	8014e4a <__kernel_rem_pio2+0x3da>
 8014e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e3a:	aa72      	add	r2, sp, #456	; 0x1c8
 8014e3c:	18eb      	adds	r3, r5, r3
 8014e3e:	4413      	add	r3, r2
 8014e40:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8014e44:	3601      	adds	r6, #1
 8014e46:	3508      	adds	r5, #8
 8014e48:	e7d6      	b.n	8014df8 <__kernel_rem_pio2+0x388>
 8014e4a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8014e4e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8014e52:	f7eb fbe9 	bl	8000628 <__aeabi_dmul>
 8014e56:	4602      	mov	r2, r0
 8014e58:	460b      	mov	r3, r1
 8014e5a:	4640      	mov	r0, r8
 8014e5c:	4649      	mov	r1, r9
 8014e5e:	f7eb fa2d 	bl	80002bc <__adddf3>
 8014e62:	3701      	adds	r7, #1
 8014e64:	4680      	mov	r8, r0
 8014e66:	4689      	mov	r9, r1
 8014e68:	e7e3      	b.n	8014e32 <__kernel_rem_pio2+0x3c2>
 8014e6a:	3d01      	subs	r5, #1
 8014e6c:	e741      	b.n	8014cf2 <__kernel_rem_pio2+0x282>
 8014e6e:	f1ca 0000 	rsb	r0, sl, #0
 8014e72:	ec47 6b10 	vmov	d0, r6, r7
 8014e76:	f000 fc53 	bl	8015720 <scalbn>
 8014e7a:	ec57 6b10 	vmov	r6, r7, d0
 8014e7e:	2200      	movs	r2, #0
 8014e80:	4b99      	ldr	r3, [pc, #612]	; (80150e8 <__kernel_rem_pio2+0x678>)
 8014e82:	ee10 0a10 	vmov	r0, s0
 8014e86:	4639      	mov	r1, r7
 8014e88:	f7eb fe54 	bl	8000b34 <__aeabi_dcmpge>
 8014e8c:	b1f8      	cbz	r0, 8014ece <__kernel_rem_pio2+0x45e>
 8014e8e:	2200      	movs	r2, #0
 8014e90:	4b96      	ldr	r3, [pc, #600]	; (80150ec <__kernel_rem_pio2+0x67c>)
 8014e92:	4630      	mov	r0, r6
 8014e94:	4639      	mov	r1, r7
 8014e96:	f7eb fbc7 	bl	8000628 <__aeabi_dmul>
 8014e9a:	f7eb fe75 	bl	8000b88 <__aeabi_d2iz>
 8014e9e:	4680      	mov	r8, r0
 8014ea0:	f7eb fb58 	bl	8000554 <__aeabi_i2d>
 8014ea4:	2200      	movs	r2, #0
 8014ea6:	4b90      	ldr	r3, [pc, #576]	; (80150e8 <__kernel_rem_pio2+0x678>)
 8014ea8:	f7eb fbbe 	bl	8000628 <__aeabi_dmul>
 8014eac:	460b      	mov	r3, r1
 8014eae:	4602      	mov	r2, r0
 8014eb0:	4639      	mov	r1, r7
 8014eb2:	4630      	mov	r0, r6
 8014eb4:	f7eb fa00 	bl	80002b8 <__aeabi_dsub>
 8014eb8:	f7eb fe66 	bl	8000b88 <__aeabi_d2iz>
 8014ebc:	1c65      	adds	r5, r4, #1
 8014ebe:	ab0e      	add	r3, sp, #56	; 0x38
 8014ec0:	f10a 0a18 	add.w	sl, sl, #24
 8014ec4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014ec8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8014ecc:	e719      	b.n	8014d02 <__kernel_rem_pio2+0x292>
 8014ece:	4630      	mov	r0, r6
 8014ed0:	4639      	mov	r1, r7
 8014ed2:	f7eb fe59 	bl	8000b88 <__aeabi_d2iz>
 8014ed6:	ab0e      	add	r3, sp, #56	; 0x38
 8014ed8:	4625      	mov	r5, r4
 8014eda:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014ede:	e710      	b.n	8014d02 <__kernel_rem_pio2+0x292>
 8014ee0:	ab0e      	add	r3, sp, #56	; 0x38
 8014ee2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014ee6:	f7eb fb35 	bl	8000554 <__aeabi_i2d>
 8014eea:	4642      	mov	r2, r8
 8014eec:	464b      	mov	r3, r9
 8014eee:	f7eb fb9b 	bl	8000628 <__aeabi_dmul>
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8014ef8:	4b7c      	ldr	r3, [pc, #496]	; (80150ec <__kernel_rem_pio2+0x67c>)
 8014efa:	4640      	mov	r0, r8
 8014efc:	4649      	mov	r1, r9
 8014efe:	f7eb fb93 	bl	8000628 <__aeabi_dmul>
 8014f02:	3f01      	subs	r7, #1
 8014f04:	4680      	mov	r8, r0
 8014f06:	4689      	mov	r9, r1
 8014f08:	e708      	b.n	8014d1c <__kernel_rem_pio2+0x2ac>
 8014f0a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8014f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f12:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8014f16:	f7eb fb87 	bl	8000628 <__aeabi_dmul>
 8014f1a:	4602      	mov	r2, r0
 8014f1c:	460b      	mov	r3, r1
 8014f1e:	4640      	mov	r0, r8
 8014f20:	4649      	mov	r1, r9
 8014f22:	f7eb f9cb 	bl	80002bc <__adddf3>
 8014f26:	3701      	adds	r7, #1
 8014f28:	4680      	mov	r8, r0
 8014f2a:	4689      	mov	r9, r1
 8014f2c:	9b04      	ldr	r3, [sp, #16]
 8014f2e:	429f      	cmp	r7, r3
 8014f30:	dc01      	bgt.n	8014f36 <__kernel_rem_pio2+0x4c6>
 8014f32:	45ba      	cmp	sl, r7
 8014f34:	dae9      	bge.n	8014f0a <__kernel_rem_pio2+0x49a>
 8014f36:	ab4a      	add	r3, sp, #296	; 0x128
 8014f38:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014f3c:	e9c3 8900 	strd	r8, r9, [r3]
 8014f40:	f10a 0a01 	add.w	sl, sl, #1
 8014f44:	3e08      	subs	r6, #8
 8014f46:	e6f0      	b.n	8014d2a <__kernel_rem_pio2+0x2ba>
 8014f48:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8014f4a:	2b03      	cmp	r3, #3
 8014f4c:	d85b      	bhi.n	8015006 <__kernel_rem_pio2+0x596>
 8014f4e:	e8df f003 	tbb	[pc, r3]
 8014f52:	264a      	.short	0x264a
 8014f54:	0226      	.short	0x0226
 8014f56:	ab9a      	add	r3, sp, #616	; 0x268
 8014f58:	441c      	add	r4, r3
 8014f5a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014f5e:	46a2      	mov	sl, r4
 8014f60:	46ab      	mov	fp, r5
 8014f62:	f1bb 0f00 	cmp.w	fp, #0
 8014f66:	dc6c      	bgt.n	8015042 <__kernel_rem_pio2+0x5d2>
 8014f68:	46a2      	mov	sl, r4
 8014f6a:	46ab      	mov	fp, r5
 8014f6c:	f1bb 0f01 	cmp.w	fp, #1
 8014f70:	f300 8086 	bgt.w	8015080 <__kernel_rem_pio2+0x610>
 8014f74:	2000      	movs	r0, #0
 8014f76:	2100      	movs	r1, #0
 8014f78:	2d01      	cmp	r5, #1
 8014f7a:	f300 80a0 	bgt.w	80150be <__kernel_rem_pio2+0x64e>
 8014f7e:	9b02      	ldr	r3, [sp, #8]
 8014f80:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8014f84:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	f040 809e 	bne.w	80150ca <__kernel_rem_pio2+0x65a>
 8014f8e:	9b01      	ldr	r3, [sp, #4]
 8014f90:	e9c3 7800 	strd	r7, r8, [r3]
 8014f94:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014f98:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014f9c:	e033      	b.n	8015006 <__kernel_rem_pio2+0x596>
 8014f9e:	3408      	adds	r4, #8
 8014fa0:	ab4a      	add	r3, sp, #296	; 0x128
 8014fa2:	441c      	add	r4, r3
 8014fa4:	462e      	mov	r6, r5
 8014fa6:	2000      	movs	r0, #0
 8014fa8:	2100      	movs	r1, #0
 8014faa:	2e00      	cmp	r6, #0
 8014fac:	da3a      	bge.n	8015024 <__kernel_rem_pio2+0x5b4>
 8014fae:	9b02      	ldr	r3, [sp, #8]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d03d      	beq.n	8015030 <__kernel_rem_pio2+0x5c0>
 8014fb4:	4602      	mov	r2, r0
 8014fb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014fba:	9c01      	ldr	r4, [sp, #4]
 8014fbc:	e9c4 2300 	strd	r2, r3, [r4]
 8014fc0:	4602      	mov	r2, r0
 8014fc2:	460b      	mov	r3, r1
 8014fc4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8014fc8:	f7eb f976 	bl	80002b8 <__aeabi_dsub>
 8014fcc:	ae4c      	add	r6, sp, #304	; 0x130
 8014fce:	2401      	movs	r4, #1
 8014fd0:	42a5      	cmp	r5, r4
 8014fd2:	da30      	bge.n	8015036 <__kernel_rem_pio2+0x5c6>
 8014fd4:	9b02      	ldr	r3, [sp, #8]
 8014fd6:	b113      	cbz	r3, 8014fde <__kernel_rem_pio2+0x56e>
 8014fd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014fdc:	4619      	mov	r1, r3
 8014fde:	9b01      	ldr	r3, [sp, #4]
 8014fe0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014fe4:	e00f      	b.n	8015006 <__kernel_rem_pio2+0x596>
 8014fe6:	ab9a      	add	r3, sp, #616	; 0x268
 8014fe8:	441c      	add	r4, r3
 8014fea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014fee:	2000      	movs	r0, #0
 8014ff0:	2100      	movs	r1, #0
 8014ff2:	2d00      	cmp	r5, #0
 8014ff4:	da10      	bge.n	8015018 <__kernel_rem_pio2+0x5a8>
 8014ff6:	9b02      	ldr	r3, [sp, #8]
 8014ff8:	b113      	cbz	r3, 8015000 <__kernel_rem_pio2+0x590>
 8014ffa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014ffe:	4619      	mov	r1, r3
 8015000:	9b01      	ldr	r3, [sp, #4]
 8015002:	e9c3 0100 	strd	r0, r1, [r3]
 8015006:	9b06      	ldr	r3, [sp, #24]
 8015008:	f003 0007 	and.w	r0, r3, #7
 801500c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8015010:	ecbd 8b02 	vpop	{d8}
 8015014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015018:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801501c:	f7eb f94e 	bl	80002bc <__adddf3>
 8015020:	3d01      	subs	r5, #1
 8015022:	e7e6      	b.n	8014ff2 <__kernel_rem_pio2+0x582>
 8015024:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015028:	f7eb f948 	bl	80002bc <__adddf3>
 801502c:	3e01      	subs	r6, #1
 801502e:	e7bc      	b.n	8014faa <__kernel_rem_pio2+0x53a>
 8015030:	4602      	mov	r2, r0
 8015032:	460b      	mov	r3, r1
 8015034:	e7c1      	b.n	8014fba <__kernel_rem_pio2+0x54a>
 8015036:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801503a:	f7eb f93f 	bl	80002bc <__adddf3>
 801503e:	3401      	adds	r4, #1
 8015040:	e7c6      	b.n	8014fd0 <__kernel_rem_pio2+0x560>
 8015042:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8015046:	ed3a 7b02 	vldmdb	sl!, {d7}
 801504a:	4640      	mov	r0, r8
 801504c:	ec53 2b17 	vmov	r2, r3, d7
 8015050:	4649      	mov	r1, r9
 8015052:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015056:	f7eb f931 	bl	80002bc <__adddf3>
 801505a:	4602      	mov	r2, r0
 801505c:	460b      	mov	r3, r1
 801505e:	4606      	mov	r6, r0
 8015060:	460f      	mov	r7, r1
 8015062:	4640      	mov	r0, r8
 8015064:	4649      	mov	r1, r9
 8015066:	f7eb f927 	bl	80002b8 <__aeabi_dsub>
 801506a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801506e:	f7eb f925 	bl	80002bc <__adddf3>
 8015072:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015076:	e9ca 0100 	strd	r0, r1, [sl]
 801507a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801507e:	e770      	b.n	8014f62 <__kernel_rem_pio2+0x4f2>
 8015080:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8015084:	ed3a 7b02 	vldmdb	sl!, {d7}
 8015088:	4630      	mov	r0, r6
 801508a:	ec53 2b17 	vmov	r2, r3, d7
 801508e:	4639      	mov	r1, r7
 8015090:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015094:	f7eb f912 	bl	80002bc <__adddf3>
 8015098:	4602      	mov	r2, r0
 801509a:	460b      	mov	r3, r1
 801509c:	4680      	mov	r8, r0
 801509e:	4689      	mov	r9, r1
 80150a0:	4630      	mov	r0, r6
 80150a2:	4639      	mov	r1, r7
 80150a4:	f7eb f908 	bl	80002b8 <__aeabi_dsub>
 80150a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80150ac:	f7eb f906 	bl	80002bc <__adddf3>
 80150b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80150b4:	e9ca 0100 	strd	r0, r1, [sl]
 80150b8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80150bc:	e756      	b.n	8014f6c <__kernel_rem_pio2+0x4fc>
 80150be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80150c2:	f7eb f8fb 	bl	80002bc <__adddf3>
 80150c6:	3d01      	subs	r5, #1
 80150c8:	e756      	b.n	8014f78 <__kernel_rem_pio2+0x508>
 80150ca:	9b01      	ldr	r3, [sp, #4]
 80150cc:	9a01      	ldr	r2, [sp, #4]
 80150ce:	601f      	str	r7, [r3, #0]
 80150d0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80150d4:	605c      	str	r4, [r3, #4]
 80150d6:	609d      	str	r5, [r3, #8]
 80150d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80150dc:	60d3      	str	r3, [r2, #12]
 80150de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80150e2:	6110      	str	r0, [r2, #16]
 80150e4:	6153      	str	r3, [r2, #20]
 80150e6:	e78e      	b.n	8015006 <__kernel_rem_pio2+0x596>
 80150e8:	41700000 	.word	0x41700000
 80150ec:	3e700000 	.word	0x3e700000

080150f0 <__kernel_sin>:
 80150f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150f4:	ec55 4b10 	vmov	r4, r5, d0
 80150f8:	b085      	sub	sp, #20
 80150fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80150fe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8015102:	ed8d 1b00 	vstr	d1, [sp]
 8015106:	9002      	str	r0, [sp, #8]
 8015108:	da06      	bge.n	8015118 <__kernel_sin+0x28>
 801510a:	ee10 0a10 	vmov	r0, s0
 801510e:	4629      	mov	r1, r5
 8015110:	f7eb fd3a 	bl	8000b88 <__aeabi_d2iz>
 8015114:	2800      	cmp	r0, #0
 8015116:	d051      	beq.n	80151bc <__kernel_sin+0xcc>
 8015118:	4622      	mov	r2, r4
 801511a:	462b      	mov	r3, r5
 801511c:	4620      	mov	r0, r4
 801511e:	4629      	mov	r1, r5
 8015120:	f7eb fa82 	bl	8000628 <__aeabi_dmul>
 8015124:	4682      	mov	sl, r0
 8015126:	468b      	mov	fp, r1
 8015128:	4602      	mov	r2, r0
 801512a:	460b      	mov	r3, r1
 801512c:	4620      	mov	r0, r4
 801512e:	4629      	mov	r1, r5
 8015130:	f7eb fa7a 	bl	8000628 <__aeabi_dmul>
 8015134:	a341      	add	r3, pc, #260	; (adr r3, 801523c <__kernel_sin+0x14c>)
 8015136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801513a:	4680      	mov	r8, r0
 801513c:	4689      	mov	r9, r1
 801513e:	4650      	mov	r0, sl
 8015140:	4659      	mov	r1, fp
 8015142:	f7eb fa71 	bl	8000628 <__aeabi_dmul>
 8015146:	a33f      	add	r3, pc, #252	; (adr r3, 8015244 <__kernel_sin+0x154>)
 8015148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801514c:	f7eb f8b4 	bl	80002b8 <__aeabi_dsub>
 8015150:	4652      	mov	r2, sl
 8015152:	465b      	mov	r3, fp
 8015154:	f7eb fa68 	bl	8000628 <__aeabi_dmul>
 8015158:	a33c      	add	r3, pc, #240	; (adr r3, 801524c <__kernel_sin+0x15c>)
 801515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801515e:	f7eb f8ad 	bl	80002bc <__adddf3>
 8015162:	4652      	mov	r2, sl
 8015164:	465b      	mov	r3, fp
 8015166:	f7eb fa5f 	bl	8000628 <__aeabi_dmul>
 801516a:	a33a      	add	r3, pc, #232	; (adr r3, 8015254 <__kernel_sin+0x164>)
 801516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015170:	f7eb f8a2 	bl	80002b8 <__aeabi_dsub>
 8015174:	4652      	mov	r2, sl
 8015176:	465b      	mov	r3, fp
 8015178:	f7eb fa56 	bl	8000628 <__aeabi_dmul>
 801517c:	a337      	add	r3, pc, #220	; (adr r3, 801525c <__kernel_sin+0x16c>)
 801517e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015182:	f7eb f89b 	bl	80002bc <__adddf3>
 8015186:	9b02      	ldr	r3, [sp, #8]
 8015188:	4606      	mov	r6, r0
 801518a:	460f      	mov	r7, r1
 801518c:	b9db      	cbnz	r3, 80151c6 <__kernel_sin+0xd6>
 801518e:	4602      	mov	r2, r0
 8015190:	460b      	mov	r3, r1
 8015192:	4650      	mov	r0, sl
 8015194:	4659      	mov	r1, fp
 8015196:	f7eb fa47 	bl	8000628 <__aeabi_dmul>
 801519a:	a325      	add	r3, pc, #148	; (adr r3, 8015230 <__kernel_sin+0x140>)
 801519c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151a0:	f7eb f88a 	bl	80002b8 <__aeabi_dsub>
 80151a4:	4642      	mov	r2, r8
 80151a6:	464b      	mov	r3, r9
 80151a8:	f7eb fa3e 	bl	8000628 <__aeabi_dmul>
 80151ac:	4602      	mov	r2, r0
 80151ae:	460b      	mov	r3, r1
 80151b0:	4620      	mov	r0, r4
 80151b2:	4629      	mov	r1, r5
 80151b4:	f7eb f882 	bl	80002bc <__adddf3>
 80151b8:	4604      	mov	r4, r0
 80151ba:	460d      	mov	r5, r1
 80151bc:	ec45 4b10 	vmov	d0, r4, r5
 80151c0:	b005      	add	sp, #20
 80151c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151c6:	2200      	movs	r2, #0
 80151c8:	4b1b      	ldr	r3, [pc, #108]	; (8015238 <__kernel_sin+0x148>)
 80151ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151ce:	f7eb fa2b 	bl	8000628 <__aeabi_dmul>
 80151d2:	4632      	mov	r2, r6
 80151d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80151d8:	463b      	mov	r3, r7
 80151da:	4640      	mov	r0, r8
 80151dc:	4649      	mov	r1, r9
 80151de:	f7eb fa23 	bl	8000628 <__aeabi_dmul>
 80151e2:	4602      	mov	r2, r0
 80151e4:	460b      	mov	r3, r1
 80151e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151ea:	f7eb f865 	bl	80002b8 <__aeabi_dsub>
 80151ee:	4652      	mov	r2, sl
 80151f0:	465b      	mov	r3, fp
 80151f2:	f7eb fa19 	bl	8000628 <__aeabi_dmul>
 80151f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151fa:	f7eb f85d 	bl	80002b8 <__aeabi_dsub>
 80151fe:	a30c      	add	r3, pc, #48	; (adr r3, 8015230 <__kernel_sin+0x140>)
 8015200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015204:	4606      	mov	r6, r0
 8015206:	460f      	mov	r7, r1
 8015208:	4640      	mov	r0, r8
 801520a:	4649      	mov	r1, r9
 801520c:	f7eb fa0c 	bl	8000628 <__aeabi_dmul>
 8015210:	4602      	mov	r2, r0
 8015212:	460b      	mov	r3, r1
 8015214:	4630      	mov	r0, r6
 8015216:	4639      	mov	r1, r7
 8015218:	f7eb f850 	bl	80002bc <__adddf3>
 801521c:	4602      	mov	r2, r0
 801521e:	460b      	mov	r3, r1
 8015220:	4620      	mov	r0, r4
 8015222:	4629      	mov	r1, r5
 8015224:	f7eb f848 	bl	80002b8 <__aeabi_dsub>
 8015228:	e7c6      	b.n	80151b8 <__kernel_sin+0xc8>
 801522a:	bf00      	nop
 801522c:	f3af 8000 	nop.w
 8015230:	55555549 	.word	0x55555549
 8015234:	3fc55555 	.word	0x3fc55555
 8015238:	3fe00000 	.word	0x3fe00000
 801523c:	5acfd57c 	.word	0x5acfd57c
 8015240:	3de5d93a 	.word	0x3de5d93a
 8015244:	8a2b9ceb 	.word	0x8a2b9ceb
 8015248:	3e5ae5e6 	.word	0x3e5ae5e6
 801524c:	57b1fe7d 	.word	0x57b1fe7d
 8015250:	3ec71de3 	.word	0x3ec71de3
 8015254:	19c161d5 	.word	0x19c161d5
 8015258:	3f2a01a0 	.word	0x3f2a01a0
 801525c:	1110f8a6 	.word	0x1110f8a6
 8015260:	3f811111 	.word	0x3f811111
 8015264:	00000000 	.word	0x00000000

08015268 <__kernel_tan>:
 8015268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801526c:	ec5b ab10 	vmov	sl, fp, d0
 8015270:	4bbf      	ldr	r3, [pc, #764]	; (8015570 <__kernel_tan+0x308>)
 8015272:	b089      	sub	sp, #36	; 0x24
 8015274:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8015278:	429f      	cmp	r7, r3
 801527a:	ec59 8b11 	vmov	r8, r9, d1
 801527e:	4606      	mov	r6, r0
 8015280:	f8cd b008 	str.w	fp, [sp, #8]
 8015284:	dc22      	bgt.n	80152cc <__kernel_tan+0x64>
 8015286:	ee10 0a10 	vmov	r0, s0
 801528a:	4659      	mov	r1, fp
 801528c:	f7eb fc7c 	bl	8000b88 <__aeabi_d2iz>
 8015290:	2800      	cmp	r0, #0
 8015292:	d145      	bne.n	8015320 <__kernel_tan+0xb8>
 8015294:	1c73      	adds	r3, r6, #1
 8015296:	4652      	mov	r2, sl
 8015298:	4313      	orrs	r3, r2
 801529a:	433b      	orrs	r3, r7
 801529c:	d110      	bne.n	80152c0 <__kernel_tan+0x58>
 801529e:	ec4b ab10 	vmov	d0, sl, fp
 80152a2:	f000 f9ad 	bl	8015600 <fabs>
 80152a6:	49b3      	ldr	r1, [pc, #716]	; (8015574 <__kernel_tan+0x30c>)
 80152a8:	ec53 2b10 	vmov	r2, r3, d0
 80152ac:	2000      	movs	r0, #0
 80152ae:	f7eb fae5 	bl	800087c <__aeabi_ddiv>
 80152b2:	4682      	mov	sl, r0
 80152b4:	468b      	mov	fp, r1
 80152b6:	ec4b ab10 	vmov	d0, sl, fp
 80152ba:	b009      	add	sp, #36	; 0x24
 80152bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152c0:	2e01      	cmp	r6, #1
 80152c2:	d0f8      	beq.n	80152b6 <__kernel_tan+0x4e>
 80152c4:	465b      	mov	r3, fp
 80152c6:	2000      	movs	r0, #0
 80152c8:	49ab      	ldr	r1, [pc, #684]	; (8015578 <__kernel_tan+0x310>)
 80152ca:	e7f0      	b.n	80152ae <__kernel_tan+0x46>
 80152cc:	4bab      	ldr	r3, [pc, #684]	; (801557c <__kernel_tan+0x314>)
 80152ce:	429f      	cmp	r7, r3
 80152d0:	dd26      	ble.n	8015320 <__kernel_tan+0xb8>
 80152d2:	9b02      	ldr	r3, [sp, #8]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	da09      	bge.n	80152ec <__kernel_tan+0x84>
 80152d8:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80152dc:	469b      	mov	fp, r3
 80152de:	ee10 aa10 	vmov	sl, s0
 80152e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80152e6:	ee11 8a10 	vmov	r8, s2
 80152ea:	4699      	mov	r9, r3
 80152ec:	4652      	mov	r2, sl
 80152ee:	465b      	mov	r3, fp
 80152f0:	a181      	add	r1, pc, #516	; (adr r1, 80154f8 <__kernel_tan+0x290>)
 80152f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80152f6:	f7ea ffdf 	bl	80002b8 <__aeabi_dsub>
 80152fa:	4642      	mov	r2, r8
 80152fc:	464b      	mov	r3, r9
 80152fe:	4604      	mov	r4, r0
 8015300:	460d      	mov	r5, r1
 8015302:	a17f      	add	r1, pc, #508	; (adr r1, 8015500 <__kernel_tan+0x298>)
 8015304:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015308:	f7ea ffd6 	bl	80002b8 <__aeabi_dsub>
 801530c:	4622      	mov	r2, r4
 801530e:	462b      	mov	r3, r5
 8015310:	f7ea ffd4 	bl	80002bc <__adddf3>
 8015314:	f04f 0800 	mov.w	r8, #0
 8015318:	4682      	mov	sl, r0
 801531a:	468b      	mov	fp, r1
 801531c:	f04f 0900 	mov.w	r9, #0
 8015320:	4652      	mov	r2, sl
 8015322:	465b      	mov	r3, fp
 8015324:	4650      	mov	r0, sl
 8015326:	4659      	mov	r1, fp
 8015328:	f7eb f97e 	bl	8000628 <__aeabi_dmul>
 801532c:	4602      	mov	r2, r0
 801532e:	460b      	mov	r3, r1
 8015330:	e9cd 0100 	strd	r0, r1, [sp]
 8015334:	f7eb f978 	bl	8000628 <__aeabi_dmul>
 8015338:	e9dd 2300 	ldrd	r2, r3, [sp]
 801533c:	4604      	mov	r4, r0
 801533e:	460d      	mov	r5, r1
 8015340:	4650      	mov	r0, sl
 8015342:	4659      	mov	r1, fp
 8015344:	f7eb f970 	bl	8000628 <__aeabi_dmul>
 8015348:	a36f      	add	r3, pc, #444	; (adr r3, 8015508 <__kernel_tan+0x2a0>)
 801534a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801534e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015352:	4620      	mov	r0, r4
 8015354:	4629      	mov	r1, r5
 8015356:	f7eb f967 	bl	8000628 <__aeabi_dmul>
 801535a:	a36d      	add	r3, pc, #436	; (adr r3, 8015510 <__kernel_tan+0x2a8>)
 801535c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015360:	f7ea ffac 	bl	80002bc <__adddf3>
 8015364:	4622      	mov	r2, r4
 8015366:	462b      	mov	r3, r5
 8015368:	f7eb f95e 	bl	8000628 <__aeabi_dmul>
 801536c:	a36a      	add	r3, pc, #424	; (adr r3, 8015518 <__kernel_tan+0x2b0>)
 801536e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015372:	f7ea ffa3 	bl	80002bc <__adddf3>
 8015376:	4622      	mov	r2, r4
 8015378:	462b      	mov	r3, r5
 801537a:	f7eb f955 	bl	8000628 <__aeabi_dmul>
 801537e:	a368      	add	r3, pc, #416	; (adr r3, 8015520 <__kernel_tan+0x2b8>)
 8015380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015384:	f7ea ff9a 	bl	80002bc <__adddf3>
 8015388:	4622      	mov	r2, r4
 801538a:	462b      	mov	r3, r5
 801538c:	f7eb f94c 	bl	8000628 <__aeabi_dmul>
 8015390:	a365      	add	r3, pc, #404	; (adr r3, 8015528 <__kernel_tan+0x2c0>)
 8015392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015396:	f7ea ff91 	bl	80002bc <__adddf3>
 801539a:	4622      	mov	r2, r4
 801539c:	462b      	mov	r3, r5
 801539e:	f7eb f943 	bl	8000628 <__aeabi_dmul>
 80153a2:	a363      	add	r3, pc, #396	; (adr r3, 8015530 <__kernel_tan+0x2c8>)
 80153a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153a8:	f7ea ff88 	bl	80002bc <__adddf3>
 80153ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80153b0:	f7eb f93a 	bl	8000628 <__aeabi_dmul>
 80153b4:	a360      	add	r3, pc, #384	; (adr r3, 8015538 <__kernel_tan+0x2d0>)
 80153b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80153be:	4620      	mov	r0, r4
 80153c0:	4629      	mov	r1, r5
 80153c2:	f7eb f931 	bl	8000628 <__aeabi_dmul>
 80153c6:	a35e      	add	r3, pc, #376	; (adr r3, 8015540 <__kernel_tan+0x2d8>)
 80153c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153cc:	f7ea ff76 	bl	80002bc <__adddf3>
 80153d0:	4622      	mov	r2, r4
 80153d2:	462b      	mov	r3, r5
 80153d4:	f7eb f928 	bl	8000628 <__aeabi_dmul>
 80153d8:	a35b      	add	r3, pc, #364	; (adr r3, 8015548 <__kernel_tan+0x2e0>)
 80153da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153de:	f7ea ff6d 	bl	80002bc <__adddf3>
 80153e2:	4622      	mov	r2, r4
 80153e4:	462b      	mov	r3, r5
 80153e6:	f7eb f91f 	bl	8000628 <__aeabi_dmul>
 80153ea:	a359      	add	r3, pc, #356	; (adr r3, 8015550 <__kernel_tan+0x2e8>)
 80153ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153f0:	f7ea ff64 	bl	80002bc <__adddf3>
 80153f4:	4622      	mov	r2, r4
 80153f6:	462b      	mov	r3, r5
 80153f8:	f7eb f916 	bl	8000628 <__aeabi_dmul>
 80153fc:	a356      	add	r3, pc, #344	; (adr r3, 8015558 <__kernel_tan+0x2f0>)
 80153fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015402:	f7ea ff5b 	bl	80002bc <__adddf3>
 8015406:	4622      	mov	r2, r4
 8015408:	462b      	mov	r3, r5
 801540a:	f7eb f90d 	bl	8000628 <__aeabi_dmul>
 801540e:	a354      	add	r3, pc, #336	; (adr r3, 8015560 <__kernel_tan+0x2f8>)
 8015410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015414:	f7ea ff52 	bl	80002bc <__adddf3>
 8015418:	4602      	mov	r2, r0
 801541a:	460b      	mov	r3, r1
 801541c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015420:	f7ea ff4c 	bl	80002bc <__adddf3>
 8015424:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015428:	f7eb f8fe 	bl	8000628 <__aeabi_dmul>
 801542c:	4642      	mov	r2, r8
 801542e:	464b      	mov	r3, r9
 8015430:	f7ea ff44 	bl	80002bc <__adddf3>
 8015434:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015438:	f7eb f8f6 	bl	8000628 <__aeabi_dmul>
 801543c:	4642      	mov	r2, r8
 801543e:	464b      	mov	r3, r9
 8015440:	f7ea ff3c 	bl	80002bc <__adddf3>
 8015444:	a348      	add	r3, pc, #288	; (adr r3, 8015568 <__kernel_tan+0x300>)
 8015446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801544a:	4604      	mov	r4, r0
 801544c:	460d      	mov	r5, r1
 801544e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015452:	f7eb f8e9 	bl	8000628 <__aeabi_dmul>
 8015456:	4622      	mov	r2, r4
 8015458:	462b      	mov	r3, r5
 801545a:	f7ea ff2f 	bl	80002bc <__adddf3>
 801545e:	e9cd 0100 	strd	r0, r1, [sp]
 8015462:	460b      	mov	r3, r1
 8015464:	4602      	mov	r2, r0
 8015466:	4659      	mov	r1, fp
 8015468:	4650      	mov	r0, sl
 801546a:	f7ea ff27 	bl	80002bc <__adddf3>
 801546e:	4b43      	ldr	r3, [pc, #268]	; (801557c <__kernel_tan+0x314>)
 8015470:	429f      	cmp	r7, r3
 8015472:	4604      	mov	r4, r0
 8015474:	460d      	mov	r5, r1
 8015476:	f340 8083 	ble.w	8015580 <__kernel_tan+0x318>
 801547a:	4630      	mov	r0, r6
 801547c:	f7eb f86a 	bl	8000554 <__aeabi_i2d>
 8015480:	4622      	mov	r2, r4
 8015482:	4680      	mov	r8, r0
 8015484:	4689      	mov	r9, r1
 8015486:	462b      	mov	r3, r5
 8015488:	4620      	mov	r0, r4
 801548a:	4629      	mov	r1, r5
 801548c:	f7eb f8cc 	bl	8000628 <__aeabi_dmul>
 8015490:	4642      	mov	r2, r8
 8015492:	4606      	mov	r6, r0
 8015494:	460f      	mov	r7, r1
 8015496:	464b      	mov	r3, r9
 8015498:	4620      	mov	r0, r4
 801549a:	4629      	mov	r1, r5
 801549c:	f7ea ff0e 	bl	80002bc <__adddf3>
 80154a0:	4602      	mov	r2, r0
 80154a2:	460b      	mov	r3, r1
 80154a4:	4630      	mov	r0, r6
 80154a6:	4639      	mov	r1, r7
 80154a8:	f7eb f9e8 	bl	800087c <__aeabi_ddiv>
 80154ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80154b0:	f7ea ff02 	bl	80002b8 <__aeabi_dsub>
 80154b4:	4602      	mov	r2, r0
 80154b6:	460b      	mov	r3, r1
 80154b8:	4650      	mov	r0, sl
 80154ba:	4659      	mov	r1, fp
 80154bc:	f7ea fefc 	bl	80002b8 <__aeabi_dsub>
 80154c0:	4602      	mov	r2, r0
 80154c2:	460b      	mov	r3, r1
 80154c4:	f7ea fefa 	bl	80002bc <__adddf3>
 80154c8:	4602      	mov	r2, r0
 80154ca:	460b      	mov	r3, r1
 80154cc:	4640      	mov	r0, r8
 80154ce:	4649      	mov	r1, r9
 80154d0:	f7ea fef2 	bl	80002b8 <__aeabi_dsub>
 80154d4:	9b02      	ldr	r3, [sp, #8]
 80154d6:	4604      	mov	r4, r0
 80154d8:	1798      	asrs	r0, r3, #30
 80154da:	f000 0002 	and.w	r0, r0, #2
 80154de:	f1c0 0001 	rsb	r0, r0, #1
 80154e2:	460d      	mov	r5, r1
 80154e4:	f7eb f836 	bl	8000554 <__aeabi_i2d>
 80154e8:	4602      	mov	r2, r0
 80154ea:	460b      	mov	r3, r1
 80154ec:	4620      	mov	r0, r4
 80154ee:	4629      	mov	r1, r5
 80154f0:	f7eb f89a 	bl	8000628 <__aeabi_dmul>
 80154f4:	e6dd      	b.n	80152b2 <__kernel_tan+0x4a>
 80154f6:	bf00      	nop
 80154f8:	54442d18 	.word	0x54442d18
 80154fc:	3fe921fb 	.word	0x3fe921fb
 8015500:	33145c07 	.word	0x33145c07
 8015504:	3c81a626 	.word	0x3c81a626
 8015508:	74bf7ad4 	.word	0x74bf7ad4
 801550c:	3efb2a70 	.word	0x3efb2a70
 8015510:	32f0a7e9 	.word	0x32f0a7e9
 8015514:	3f12b80f 	.word	0x3f12b80f
 8015518:	1a8d1068 	.word	0x1a8d1068
 801551c:	3f3026f7 	.word	0x3f3026f7
 8015520:	fee08315 	.word	0xfee08315
 8015524:	3f57dbc8 	.word	0x3f57dbc8
 8015528:	e96e8493 	.word	0xe96e8493
 801552c:	3f8226e3 	.word	0x3f8226e3
 8015530:	1bb341fe 	.word	0x1bb341fe
 8015534:	3faba1ba 	.word	0x3faba1ba
 8015538:	db605373 	.word	0xdb605373
 801553c:	bef375cb 	.word	0xbef375cb
 8015540:	a03792a6 	.word	0xa03792a6
 8015544:	3f147e88 	.word	0x3f147e88
 8015548:	f2f26501 	.word	0xf2f26501
 801554c:	3f4344d8 	.word	0x3f4344d8
 8015550:	c9560328 	.word	0xc9560328
 8015554:	3f6d6d22 	.word	0x3f6d6d22
 8015558:	8406d637 	.word	0x8406d637
 801555c:	3f9664f4 	.word	0x3f9664f4
 8015560:	1110fe7a 	.word	0x1110fe7a
 8015564:	3fc11111 	.word	0x3fc11111
 8015568:	55555563 	.word	0x55555563
 801556c:	3fd55555 	.word	0x3fd55555
 8015570:	3e2fffff 	.word	0x3e2fffff
 8015574:	3ff00000 	.word	0x3ff00000
 8015578:	bff00000 	.word	0xbff00000
 801557c:	3fe59427 	.word	0x3fe59427
 8015580:	2e01      	cmp	r6, #1
 8015582:	d036      	beq.n	80155f2 <__kernel_tan+0x38a>
 8015584:	460f      	mov	r7, r1
 8015586:	4602      	mov	r2, r0
 8015588:	460b      	mov	r3, r1
 801558a:	2000      	movs	r0, #0
 801558c:	491a      	ldr	r1, [pc, #104]	; (80155f8 <__kernel_tan+0x390>)
 801558e:	f7eb f975 	bl	800087c <__aeabi_ddiv>
 8015592:	2600      	movs	r6, #0
 8015594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015598:	4652      	mov	r2, sl
 801559a:	465b      	mov	r3, fp
 801559c:	4630      	mov	r0, r6
 801559e:	4639      	mov	r1, r7
 80155a0:	f7ea fe8a 	bl	80002b8 <__aeabi_dsub>
 80155a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80155a8:	4602      	mov	r2, r0
 80155aa:	460b      	mov	r3, r1
 80155ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155b0:	f7ea fe82 	bl	80002b8 <__aeabi_dsub>
 80155b4:	4632      	mov	r2, r6
 80155b6:	462b      	mov	r3, r5
 80155b8:	f7eb f836 	bl	8000628 <__aeabi_dmul>
 80155bc:	4632      	mov	r2, r6
 80155be:	4682      	mov	sl, r0
 80155c0:	468b      	mov	fp, r1
 80155c2:	462b      	mov	r3, r5
 80155c4:	4630      	mov	r0, r6
 80155c6:	4639      	mov	r1, r7
 80155c8:	f7eb f82e 	bl	8000628 <__aeabi_dmul>
 80155cc:	2200      	movs	r2, #0
 80155ce:	4b0b      	ldr	r3, [pc, #44]	; (80155fc <__kernel_tan+0x394>)
 80155d0:	f7ea fe74 	bl	80002bc <__adddf3>
 80155d4:	4602      	mov	r2, r0
 80155d6:	460b      	mov	r3, r1
 80155d8:	4650      	mov	r0, sl
 80155da:	4659      	mov	r1, fp
 80155dc:	f7ea fe6e 	bl	80002bc <__adddf3>
 80155e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80155e4:	f7eb f820 	bl	8000628 <__aeabi_dmul>
 80155e8:	4632      	mov	r2, r6
 80155ea:	462b      	mov	r3, r5
 80155ec:	f7ea fe66 	bl	80002bc <__adddf3>
 80155f0:	e65f      	b.n	80152b2 <__kernel_tan+0x4a>
 80155f2:	4682      	mov	sl, r0
 80155f4:	468b      	mov	fp, r1
 80155f6:	e65e      	b.n	80152b6 <__kernel_tan+0x4e>
 80155f8:	bff00000 	.word	0xbff00000
 80155fc:	3ff00000 	.word	0x3ff00000

08015600 <fabs>:
 8015600:	ec51 0b10 	vmov	r0, r1, d0
 8015604:	ee10 2a10 	vmov	r2, s0
 8015608:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801560c:	ec43 2b10 	vmov	d0, r2, r3
 8015610:	4770      	bx	lr
 8015612:	0000      	movs	r0, r0
 8015614:	0000      	movs	r0, r0
	...

08015618 <floor>:
 8015618:	ec51 0b10 	vmov	r0, r1, d0
 801561c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015620:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8015624:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015628:	2e13      	cmp	r6, #19
 801562a:	460c      	mov	r4, r1
 801562c:	ee10 5a10 	vmov	r5, s0
 8015630:	4680      	mov	r8, r0
 8015632:	dc34      	bgt.n	801569e <floor+0x86>
 8015634:	2e00      	cmp	r6, #0
 8015636:	da16      	bge.n	8015666 <floor+0x4e>
 8015638:	a335      	add	r3, pc, #212	; (adr r3, 8015710 <floor+0xf8>)
 801563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801563e:	f7ea fe3d 	bl	80002bc <__adddf3>
 8015642:	2200      	movs	r2, #0
 8015644:	2300      	movs	r3, #0
 8015646:	f7eb fa7f 	bl	8000b48 <__aeabi_dcmpgt>
 801564a:	b148      	cbz	r0, 8015660 <floor+0x48>
 801564c:	2c00      	cmp	r4, #0
 801564e:	da59      	bge.n	8015704 <floor+0xec>
 8015650:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015654:	4a30      	ldr	r2, [pc, #192]	; (8015718 <floor+0x100>)
 8015656:	432b      	orrs	r3, r5
 8015658:	2500      	movs	r5, #0
 801565a:	42ab      	cmp	r3, r5
 801565c:	bf18      	it	ne
 801565e:	4614      	movne	r4, r2
 8015660:	4621      	mov	r1, r4
 8015662:	4628      	mov	r0, r5
 8015664:	e025      	b.n	80156b2 <floor+0x9a>
 8015666:	4f2d      	ldr	r7, [pc, #180]	; (801571c <floor+0x104>)
 8015668:	4137      	asrs	r7, r6
 801566a:	ea01 0307 	and.w	r3, r1, r7
 801566e:	4303      	orrs	r3, r0
 8015670:	d01f      	beq.n	80156b2 <floor+0x9a>
 8015672:	a327      	add	r3, pc, #156	; (adr r3, 8015710 <floor+0xf8>)
 8015674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015678:	f7ea fe20 	bl	80002bc <__adddf3>
 801567c:	2200      	movs	r2, #0
 801567e:	2300      	movs	r3, #0
 8015680:	f7eb fa62 	bl	8000b48 <__aeabi_dcmpgt>
 8015684:	2800      	cmp	r0, #0
 8015686:	d0eb      	beq.n	8015660 <floor+0x48>
 8015688:	2c00      	cmp	r4, #0
 801568a:	bfbe      	ittt	lt
 801568c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015690:	fa43 f606 	asrlt.w	r6, r3, r6
 8015694:	19a4      	addlt	r4, r4, r6
 8015696:	ea24 0407 	bic.w	r4, r4, r7
 801569a:	2500      	movs	r5, #0
 801569c:	e7e0      	b.n	8015660 <floor+0x48>
 801569e:	2e33      	cmp	r6, #51	; 0x33
 80156a0:	dd0b      	ble.n	80156ba <floor+0xa2>
 80156a2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80156a6:	d104      	bne.n	80156b2 <floor+0x9a>
 80156a8:	ee10 2a10 	vmov	r2, s0
 80156ac:	460b      	mov	r3, r1
 80156ae:	f7ea fe05 	bl	80002bc <__adddf3>
 80156b2:	ec41 0b10 	vmov	d0, r0, r1
 80156b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156ba:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80156be:	f04f 33ff 	mov.w	r3, #4294967295
 80156c2:	fa23 f707 	lsr.w	r7, r3, r7
 80156c6:	4207      	tst	r7, r0
 80156c8:	d0f3      	beq.n	80156b2 <floor+0x9a>
 80156ca:	a311      	add	r3, pc, #68	; (adr r3, 8015710 <floor+0xf8>)
 80156cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156d0:	f7ea fdf4 	bl	80002bc <__adddf3>
 80156d4:	2200      	movs	r2, #0
 80156d6:	2300      	movs	r3, #0
 80156d8:	f7eb fa36 	bl	8000b48 <__aeabi_dcmpgt>
 80156dc:	2800      	cmp	r0, #0
 80156de:	d0bf      	beq.n	8015660 <floor+0x48>
 80156e0:	2c00      	cmp	r4, #0
 80156e2:	da02      	bge.n	80156ea <floor+0xd2>
 80156e4:	2e14      	cmp	r6, #20
 80156e6:	d103      	bne.n	80156f0 <floor+0xd8>
 80156e8:	3401      	adds	r4, #1
 80156ea:	ea25 0507 	bic.w	r5, r5, r7
 80156ee:	e7b7      	b.n	8015660 <floor+0x48>
 80156f0:	2301      	movs	r3, #1
 80156f2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80156f6:	fa03 f606 	lsl.w	r6, r3, r6
 80156fa:	4435      	add	r5, r6
 80156fc:	4545      	cmp	r5, r8
 80156fe:	bf38      	it	cc
 8015700:	18e4      	addcc	r4, r4, r3
 8015702:	e7f2      	b.n	80156ea <floor+0xd2>
 8015704:	2500      	movs	r5, #0
 8015706:	462c      	mov	r4, r5
 8015708:	e7aa      	b.n	8015660 <floor+0x48>
 801570a:	bf00      	nop
 801570c:	f3af 8000 	nop.w
 8015710:	8800759c 	.word	0x8800759c
 8015714:	7e37e43c 	.word	0x7e37e43c
 8015718:	bff00000 	.word	0xbff00000
 801571c:	000fffff 	.word	0x000fffff

08015720 <scalbn>:
 8015720:	b570      	push	{r4, r5, r6, lr}
 8015722:	ec55 4b10 	vmov	r4, r5, d0
 8015726:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801572a:	4606      	mov	r6, r0
 801572c:	462b      	mov	r3, r5
 801572e:	b9aa      	cbnz	r2, 801575c <scalbn+0x3c>
 8015730:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015734:	4323      	orrs	r3, r4
 8015736:	d03b      	beq.n	80157b0 <scalbn+0x90>
 8015738:	4b31      	ldr	r3, [pc, #196]	; (8015800 <scalbn+0xe0>)
 801573a:	4629      	mov	r1, r5
 801573c:	2200      	movs	r2, #0
 801573e:	ee10 0a10 	vmov	r0, s0
 8015742:	f7ea ff71 	bl	8000628 <__aeabi_dmul>
 8015746:	4b2f      	ldr	r3, [pc, #188]	; (8015804 <scalbn+0xe4>)
 8015748:	429e      	cmp	r6, r3
 801574a:	4604      	mov	r4, r0
 801574c:	460d      	mov	r5, r1
 801574e:	da12      	bge.n	8015776 <scalbn+0x56>
 8015750:	a327      	add	r3, pc, #156	; (adr r3, 80157f0 <scalbn+0xd0>)
 8015752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015756:	f7ea ff67 	bl	8000628 <__aeabi_dmul>
 801575a:	e009      	b.n	8015770 <scalbn+0x50>
 801575c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015760:	428a      	cmp	r2, r1
 8015762:	d10c      	bne.n	801577e <scalbn+0x5e>
 8015764:	ee10 2a10 	vmov	r2, s0
 8015768:	4620      	mov	r0, r4
 801576a:	4629      	mov	r1, r5
 801576c:	f7ea fda6 	bl	80002bc <__adddf3>
 8015770:	4604      	mov	r4, r0
 8015772:	460d      	mov	r5, r1
 8015774:	e01c      	b.n	80157b0 <scalbn+0x90>
 8015776:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801577a:	460b      	mov	r3, r1
 801577c:	3a36      	subs	r2, #54	; 0x36
 801577e:	4432      	add	r2, r6
 8015780:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015784:	428a      	cmp	r2, r1
 8015786:	dd0b      	ble.n	80157a0 <scalbn+0x80>
 8015788:	ec45 4b11 	vmov	d1, r4, r5
 801578c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80157f8 <scalbn+0xd8>
 8015790:	f000 f83c 	bl	801580c <copysign>
 8015794:	a318      	add	r3, pc, #96	; (adr r3, 80157f8 <scalbn+0xd8>)
 8015796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801579a:	ec51 0b10 	vmov	r0, r1, d0
 801579e:	e7da      	b.n	8015756 <scalbn+0x36>
 80157a0:	2a00      	cmp	r2, #0
 80157a2:	dd08      	ble.n	80157b6 <scalbn+0x96>
 80157a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80157a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80157ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80157b0:	ec45 4b10 	vmov	d0, r4, r5
 80157b4:	bd70      	pop	{r4, r5, r6, pc}
 80157b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80157ba:	da0d      	bge.n	80157d8 <scalbn+0xb8>
 80157bc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80157c0:	429e      	cmp	r6, r3
 80157c2:	ec45 4b11 	vmov	d1, r4, r5
 80157c6:	dce1      	bgt.n	801578c <scalbn+0x6c>
 80157c8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80157f0 <scalbn+0xd0>
 80157cc:	f000 f81e 	bl	801580c <copysign>
 80157d0:	a307      	add	r3, pc, #28	; (adr r3, 80157f0 <scalbn+0xd0>)
 80157d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157d6:	e7e0      	b.n	801579a <scalbn+0x7a>
 80157d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80157dc:	3236      	adds	r2, #54	; 0x36
 80157de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80157e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80157e6:	4620      	mov	r0, r4
 80157e8:	4629      	mov	r1, r5
 80157ea:	2200      	movs	r2, #0
 80157ec:	4b06      	ldr	r3, [pc, #24]	; (8015808 <scalbn+0xe8>)
 80157ee:	e7b2      	b.n	8015756 <scalbn+0x36>
 80157f0:	c2f8f359 	.word	0xc2f8f359
 80157f4:	01a56e1f 	.word	0x01a56e1f
 80157f8:	8800759c 	.word	0x8800759c
 80157fc:	7e37e43c 	.word	0x7e37e43c
 8015800:	43500000 	.word	0x43500000
 8015804:	ffff3cb0 	.word	0xffff3cb0
 8015808:	3c900000 	.word	0x3c900000

0801580c <copysign>:
 801580c:	ec51 0b10 	vmov	r0, r1, d0
 8015810:	ee11 0a90 	vmov	r0, s3
 8015814:	ee10 2a10 	vmov	r2, s0
 8015818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801581c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015820:	ea41 0300 	orr.w	r3, r1, r0
 8015824:	ec43 2b10 	vmov	d0, r2, r3
 8015828:	4770      	bx	lr
	...

0801582c <__errno>:
 801582c:	4b01      	ldr	r3, [pc, #4]	; (8015834 <__errno+0x8>)
 801582e:	6818      	ldr	r0, [r3, #0]
 8015830:	4770      	bx	lr
 8015832:	bf00      	nop
 8015834:	2000000c 	.word	0x2000000c

08015838 <__libc_init_array>:
 8015838:	b570      	push	{r4, r5, r6, lr}
 801583a:	4e0d      	ldr	r6, [pc, #52]	; (8015870 <__libc_init_array+0x38>)
 801583c:	4c0d      	ldr	r4, [pc, #52]	; (8015874 <__libc_init_array+0x3c>)
 801583e:	1ba4      	subs	r4, r4, r6
 8015840:	10a4      	asrs	r4, r4, #2
 8015842:	2500      	movs	r5, #0
 8015844:	42a5      	cmp	r5, r4
 8015846:	d109      	bne.n	801585c <__libc_init_array+0x24>
 8015848:	4e0b      	ldr	r6, [pc, #44]	; (8015878 <__libc_init_array+0x40>)
 801584a:	4c0c      	ldr	r4, [pc, #48]	; (801587c <__libc_init_array+0x44>)
 801584c:	f004 f9e0 	bl	8019c10 <_init>
 8015850:	1ba4      	subs	r4, r4, r6
 8015852:	10a4      	asrs	r4, r4, #2
 8015854:	2500      	movs	r5, #0
 8015856:	42a5      	cmp	r5, r4
 8015858:	d105      	bne.n	8015866 <__libc_init_array+0x2e>
 801585a:	bd70      	pop	{r4, r5, r6, pc}
 801585c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015860:	4798      	blx	r3
 8015862:	3501      	adds	r5, #1
 8015864:	e7ee      	b.n	8015844 <__libc_init_array+0xc>
 8015866:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801586a:	4798      	blx	r3
 801586c:	3501      	adds	r5, #1
 801586e:	e7f2      	b.n	8015856 <__libc_init_array+0x1e>
 8015870:	0801a85c 	.word	0x0801a85c
 8015874:	0801a85c 	.word	0x0801a85c
 8015878:	0801a85c 	.word	0x0801a85c
 801587c:	0801a864 	.word	0x0801a864

08015880 <memcpy>:
 8015880:	b510      	push	{r4, lr}
 8015882:	1e43      	subs	r3, r0, #1
 8015884:	440a      	add	r2, r1
 8015886:	4291      	cmp	r1, r2
 8015888:	d100      	bne.n	801588c <memcpy+0xc>
 801588a:	bd10      	pop	{r4, pc}
 801588c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015890:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015894:	e7f7      	b.n	8015886 <memcpy+0x6>

08015896 <memset>:
 8015896:	4402      	add	r2, r0
 8015898:	4603      	mov	r3, r0
 801589a:	4293      	cmp	r3, r2
 801589c:	d100      	bne.n	80158a0 <memset+0xa>
 801589e:	4770      	bx	lr
 80158a0:	f803 1b01 	strb.w	r1, [r3], #1
 80158a4:	e7f9      	b.n	801589a <memset+0x4>

080158a6 <__cvt>:
 80158a6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80158aa:	ec55 4b10 	vmov	r4, r5, d0
 80158ae:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80158b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80158b4:	2d00      	cmp	r5, #0
 80158b6:	460e      	mov	r6, r1
 80158b8:	4691      	mov	r9, r2
 80158ba:	4619      	mov	r1, r3
 80158bc:	bfb8      	it	lt
 80158be:	4622      	movlt	r2, r4
 80158c0:	462b      	mov	r3, r5
 80158c2:	f027 0720 	bic.w	r7, r7, #32
 80158c6:	bfbb      	ittet	lt
 80158c8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80158cc:	461d      	movlt	r5, r3
 80158ce:	2300      	movge	r3, #0
 80158d0:	232d      	movlt	r3, #45	; 0x2d
 80158d2:	bfb8      	it	lt
 80158d4:	4614      	movlt	r4, r2
 80158d6:	2f46      	cmp	r7, #70	; 0x46
 80158d8:	700b      	strb	r3, [r1, #0]
 80158da:	d004      	beq.n	80158e6 <__cvt+0x40>
 80158dc:	2f45      	cmp	r7, #69	; 0x45
 80158de:	d100      	bne.n	80158e2 <__cvt+0x3c>
 80158e0:	3601      	adds	r6, #1
 80158e2:	2102      	movs	r1, #2
 80158e4:	e000      	b.n	80158e8 <__cvt+0x42>
 80158e6:	2103      	movs	r1, #3
 80158e8:	ab03      	add	r3, sp, #12
 80158ea:	9301      	str	r3, [sp, #4]
 80158ec:	ab02      	add	r3, sp, #8
 80158ee:	9300      	str	r3, [sp, #0]
 80158f0:	4632      	mov	r2, r6
 80158f2:	4653      	mov	r3, sl
 80158f4:	ec45 4b10 	vmov	d0, r4, r5
 80158f8:	f001 fdf6 	bl	80174e8 <_dtoa_r>
 80158fc:	2f47      	cmp	r7, #71	; 0x47
 80158fe:	4680      	mov	r8, r0
 8015900:	d102      	bne.n	8015908 <__cvt+0x62>
 8015902:	f019 0f01 	tst.w	r9, #1
 8015906:	d026      	beq.n	8015956 <__cvt+0xb0>
 8015908:	2f46      	cmp	r7, #70	; 0x46
 801590a:	eb08 0906 	add.w	r9, r8, r6
 801590e:	d111      	bne.n	8015934 <__cvt+0x8e>
 8015910:	f898 3000 	ldrb.w	r3, [r8]
 8015914:	2b30      	cmp	r3, #48	; 0x30
 8015916:	d10a      	bne.n	801592e <__cvt+0x88>
 8015918:	2200      	movs	r2, #0
 801591a:	2300      	movs	r3, #0
 801591c:	4620      	mov	r0, r4
 801591e:	4629      	mov	r1, r5
 8015920:	f7eb f8ea 	bl	8000af8 <__aeabi_dcmpeq>
 8015924:	b918      	cbnz	r0, 801592e <__cvt+0x88>
 8015926:	f1c6 0601 	rsb	r6, r6, #1
 801592a:	f8ca 6000 	str.w	r6, [sl]
 801592e:	f8da 3000 	ldr.w	r3, [sl]
 8015932:	4499      	add	r9, r3
 8015934:	2200      	movs	r2, #0
 8015936:	2300      	movs	r3, #0
 8015938:	4620      	mov	r0, r4
 801593a:	4629      	mov	r1, r5
 801593c:	f7eb f8dc 	bl	8000af8 <__aeabi_dcmpeq>
 8015940:	b938      	cbnz	r0, 8015952 <__cvt+0xac>
 8015942:	2230      	movs	r2, #48	; 0x30
 8015944:	9b03      	ldr	r3, [sp, #12]
 8015946:	454b      	cmp	r3, r9
 8015948:	d205      	bcs.n	8015956 <__cvt+0xb0>
 801594a:	1c59      	adds	r1, r3, #1
 801594c:	9103      	str	r1, [sp, #12]
 801594e:	701a      	strb	r2, [r3, #0]
 8015950:	e7f8      	b.n	8015944 <__cvt+0x9e>
 8015952:	f8cd 900c 	str.w	r9, [sp, #12]
 8015956:	9b03      	ldr	r3, [sp, #12]
 8015958:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801595a:	eba3 0308 	sub.w	r3, r3, r8
 801595e:	4640      	mov	r0, r8
 8015960:	6013      	str	r3, [r2, #0]
 8015962:	b004      	add	sp, #16
 8015964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015968 <__exponent>:
 8015968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801596a:	2900      	cmp	r1, #0
 801596c:	4604      	mov	r4, r0
 801596e:	bfba      	itte	lt
 8015970:	4249      	neglt	r1, r1
 8015972:	232d      	movlt	r3, #45	; 0x2d
 8015974:	232b      	movge	r3, #43	; 0x2b
 8015976:	2909      	cmp	r1, #9
 8015978:	f804 2b02 	strb.w	r2, [r4], #2
 801597c:	7043      	strb	r3, [r0, #1]
 801597e:	dd20      	ble.n	80159c2 <__exponent+0x5a>
 8015980:	f10d 0307 	add.w	r3, sp, #7
 8015984:	461f      	mov	r7, r3
 8015986:	260a      	movs	r6, #10
 8015988:	fb91 f5f6 	sdiv	r5, r1, r6
 801598c:	fb06 1115 	mls	r1, r6, r5, r1
 8015990:	3130      	adds	r1, #48	; 0x30
 8015992:	2d09      	cmp	r5, #9
 8015994:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015998:	f103 32ff 	add.w	r2, r3, #4294967295
 801599c:	4629      	mov	r1, r5
 801599e:	dc09      	bgt.n	80159b4 <__exponent+0x4c>
 80159a0:	3130      	adds	r1, #48	; 0x30
 80159a2:	3b02      	subs	r3, #2
 80159a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80159a8:	42bb      	cmp	r3, r7
 80159aa:	4622      	mov	r2, r4
 80159ac:	d304      	bcc.n	80159b8 <__exponent+0x50>
 80159ae:	1a10      	subs	r0, r2, r0
 80159b0:	b003      	add	sp, #12
 80159b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159b4:	4613      	mov	r3, r2
 80159b6:	e7e7      	b.n	8015988 <__exponent+0x20>
 80159b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80159bc:	f804 2b01 	strb.w	r2, [r4], #1
 80159c0:	e7f2      	b.n	80159a8 <__exponent+0x40>
 80159c2:	2330      	movs	r3, #48	; 0x30
 80159c4:	4419      	add	r1, r3
 80159c6:	7083      	strb	r3, [r0, #2]
 80159c8:	1d02      	adds	r2, r0, #4
 80159ca:	70c1      	strb	r1, [r0, #3]
 80159cc:	e7ef      	b.n	80159ae <__exponent+0x46>
	...

080159d0 <_printf_float>:
 80159d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159d4:	b08d      	sub	sp, #52	; 0x34
 80159d6:	460c      	mov	r4, r1
 80159d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80159dc:	4616      	mov	r6, r2
 80159de:	461f      	mov	r7, r3
 80159e0:	4605      	mov	r5, r0
 80159e2:	f002 fe73 	bl	80186cc <_localeconv_r>
 80159e6:	6803      	ldr	r3, [r0, #0]
 80159e8:	9304      	str	r3, [sp, #16]
 80159ea:	4618      	mov	r0, r3
 80159ec:	f7ea fc08 	bl	8000200 <strlen>
 80159f0:	2300      	movs	r3, #0
 80159f2:	930a      	str	r3, [sp, #40]	; 0x28
 80159f4:	f8d8 3000 	ldr.w	r3, [r8]
 80159f8:	9005      	str	r0, [sp, #20]
 80159fa:	3307      	adds	r3, #7
 80159fc:	f023 0307 	bic.w	r3, r3, #7
 8015a00:	f103 0208 	add.w	r2, r3, #8
 8015a04:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015a08:	f8d4 b000 	ldr.w	fp, [r4]
 8015a0c:	f8c8 2000 	str.w	r2, [r8]
 8015a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a14:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015a18:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015a1c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015a20:	9307      	str	r3, [sp, #28]
 8015a22:	f8cd 8018 	str.w	r8, [sp, #24]
 8015a26:	f04f 32ff 	mov.w	r2, #4294967295
 8015a2a:	4ba7      	ldr	r3, [pc, #668]	; (8015cc8 <_printf_float+0x2f8>)
 8015a2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015a30:	f7eb f894 	bl	8000b5c <__aeabi_dcmpun>
 8015a34:	bb70      	cbnz	r0, 8015a94 <_printf_float+0xc4>
 8015a36:	f04f 32ff 	mov.w	r2, #4294967295
 8015a3a:	4ba3      	ldr	r3, [pc, #652]	; (8015cc8 <_printf_float+0x2f8>)
 8015a3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015a40:	f7eb f86e 	bl	8000b20 <__aeabi_dcmple>
 8015a44:	bb30      	cbnz	r0, 8015a94 <_printf_float+0xc4>
 8015a46:	2200      	movs	r2, #0
 8015a48:	2300      	movs	r3, #0
 8015a4a:	4640      	mov	r0, r8
 8015a4c:	4649      	mov	r1, r9
 8015a4e:	f7eb f85d 	bl	8000b0c <__aeabi_dcmplt>
 8015a52:	b110      	cbz	r0, 8015a5a <_printf_float+0x8a>
 8015a54:	232d      	movs	r3, #45	; 0x2d
 8015a56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a5a:	4a9c      	ldr	r2, [pc, #624]	; (8015ccc <_printf_float+0x2fc>)
 8015a5c:	4b9c      	ldr	r3, [pc, #624]	; (8015cd0 <_printf_float+0x300>)
 8015a5e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015a62:	bf8c      	ite	hi
 8015a64:	4690      	movhi	r8, r2
 8015a66:	4698      	movls	r8, r3
 8015a68:	2303      	movs	r3, #3
 8015a6a:	f02b 0204 	bic.w	r2, fp, #4
 8015a6e:	6123      	str	r3, [r4, #16]
 8015a70:	6022      	str	r2, [r4, #0]
 8015a72:	f04f 0900 	mov.w	r9, #0
 8015a76:	9700      	str	r7, [sp, #0]
 8015a78:	4633      	mov	r3, r6
 8015a7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8015a7c:	4621      	mov	r1, r4
 8015a7e:	4628      	mov	r0, r5
 8015a80:	f000 f9e6 	bl	8015e50 <_printf_common>
 8015a84:	3001      	adds	r0, #1
 8015a86:	f040 808d 	bne.w	8015ba4 <_printf_float+0x1d4>
 8015a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8015a8e:	b00d      	add	sp, #52	; 0x34
 8015a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a94:	4642      	mov	r2, r8
 8015a96:	464b      	mov	r3, r9
 8015a98:	4640      	mov	r0, r8
 8015a9a:	4649      	mov	r1, r9
 8015a9c:	f7eb f85e 	bl	8000b5c <__aeabi_dcmpun>
 8015aa0:	b110      	cbz	r0, 8015aa8 <_printf_float+0xd8>
 8015aa2:	4a8c      	ldr	r2, [pc, #560]	; (8015cd4 <_printf_float+0x304>)
 8015aa4:	4b8c      	ldr	r3, [pc, #560]	; (8015cd8 <_printf_float+0x308>)
 8015aa6:	e7da      	b.n	8015a5e <_printf_float+0x8e>
 8015aa8:	6861      	ldr	r1, [r4, #4]
 8015aaa:	1c4b      	adds	r3, r1, #1
 8015aac:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015ab0:	a80a      	add	r0, sp, #40	; 0x28
 8015ab2:	d13e      	bne.n	8015b32 <_printf_float+0x162>
 8015ab4:	2306      	movs	r3, #6
 8015ab6:	6063      	str	r3, [r4, #4]
 8015ab8:	2300      	movs	r3, #0
 8015aba:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015abe:	ab09      	add	r3, sp, #36	; 0x24
 8015ac0:	9300      	str	r3, [sp, #0]
 8015ac2:	ec49 8b10 	vmov	d0, r8, r9
 8015ac6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015aca:	6022      	str	r2, [r4, #0]
 8015acc:	f8cd a004 	str.w	sl, [sp, #4]
 8015ad0:	6861      	ldr	r1, [r4, #4]
 8015ad2:	4628      	mov	r0, r5
 8015ad4:	f7ff fee7 	bl	80158a6 <__cvt>
 8015ad8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015adc:	2b47      	cmp	r3, #71	; 0x47
 8015ade:	4680      	mov	r8, r0
 8015ae0:	d109      	bne.n	8015af6 <_printf_float+0x126>
 8015ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ae4:	1cd8      	adds	r0, r3, #3
 8015ae6:	db02      	blt.n	8015aee <_printf_float+0x11e>
 8015ae8:	6862      	ldr	r2, [r4, #4]
 8015aea:	4293      	cmp	r3, r2
 8015aec:	dd47      	ble.n	8015b7e <_printf_float+0x1ae>
 8015aee:	f1aa 0a02 	sub.w	sl, sl, #2
 8015af2:	fa5f fa8a 	uxtb.w	sl, sl
 8015af6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015afa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015afc:	d824      	bhi.n	8015b48 <_printf_float+0x178>
 8015afe:	3901      	subs	r1, #1
 8015b00:	4652      	mov	r2, sl
 8015b02:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015b06:	9109      	str	r1, [sp, #36]	; 0x24
 8015b08:	f7ff ff2e 	bl	8015968 <__exponent>
 8015b0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015b0e:	1813      	adds	r3, r2, r0
 8015b10:	2a01      	cmp	r2, #1
 8015b12:	4681      	mov	r9, r0
 8015b14:	6123      	str	r3, [r4, #16]
 8015b16:	dc02      	bgt.n	8015b1e <_printf_float+0x14e>
 8015b18:	6822      	ldr	r2, [r4, #0]
 8015b1a:	07d1      	lsls	r1, r2, #31
 8015b1c:	d501      	bpl.n	8015b22 <_printf_float+0x152>
 8015b1e:	3301      	adds	r3, #1
 8015b20:	6123      	str	r3, [r4, #16]
 8015b22:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d0a5      	beq.n	8015a76 <_printf_float+0xa6>
 8015b2a:	232d      	movs	r3, #45	; 0x2d
 8015b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015b30:	e7a1      	b.n	8015a76 <_printf_float+0xa6>
 8015b32:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015b36:	f000 8177 	beq.w	8015e28 <_printf_float+0x458>
 8015b3a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015b3e:	d1bb      	bne.n	8015ab8 <_printf_float+0xe8>
 8015b40:	2900      	cmp	r1, #0
 8015b42:	d1b9      	bne.n	8015ab8 <_printf_float+0xe8>
 8015b44:	2301      	movs	r3, #1
 8015b46:	e7b6      	b.n	8015ab6 <_printf_float+0xe6>
 8015b48:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015b4c:	d119      	bne.n	8015b82 <_printf_float+0x1b2>
 8015b4e:	2900      	cmp	r1, #0
 8015b50:	6863      	ldr	r3, [r4, #4]
 8015b52:	dd0c      	ble.n	8015b6e <_printf_float+0x19e>
 8015b54:	6121      	str	r1, [r4, #16]
 8015b56:	b913      	cbnz	r3, 8015b5e <_printf_float+0x18e>
 8015b58:	6822      	ldr	r2, [r4, #0]
 8015b5a:	07d2      	lsls	r2, r2, #31
 8015b5c:	d502      	bpl.n	8015b64 <_printf_float+0x194>
 8015b5e:	3301      	adds	r3, #1
 8015b60:	440b      	add	r3, r1
 8015b62:	6123      	str	r3, [r4, #16]
 8015b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b66:	65a3      	str	r3, [r4, #88]	; 0x58
 8015b68:	f04f 0900 	mov.w	r9, #0
 8015b6c:	e7d9      	b.n	8015b22 <_printf_float+0x152>
 8015b6e:	b913      	cbnz	r3, 8015b76 <_printf_float+0x1a6>
 8015b70:	6822      	ldr	r2, [r4, #0]
 8015b72:	07d0      	lsls	r0, r2, #31
 8015b74:	d501      	bpl.n	8015b7a <_printf_float+0x1aa>
 8015b76:	3302      	adds	r3, #2
 8015b78:	e7f3      	b.n	8015b62 <_printf_float+0x192>
 8015b7a:	2301      	movs	r3, #1
 8015b7c:	e7f1      	b.n	8015b62 <_printf_float+0x192>
 8015b7e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015b82:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015b86:	4293      	cmp	r3, r2
 8015b88:	db05      	blt.n	8015b96 <_printf_float+0x1c6>
 8015b8a:	6822      	ldr	r2, [r4, #0]
 8015b8c:	6123      	str	r3, [r4, #16]
 8015b8e:	07d1      	lsls	r1, r2, #31
 8015b90:	d5e8      	bpl.n	8015b64 <_printf_float+0x194>
 8015b92:	3301      	adds	r3, #1
 8015b94:	e7e5      	b.n	8015b62 <_printf_float+0x192>
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	bfd4      	ite	le
 8015b9a:	f1c3 0302 	rsble	r3, r3, #2
 8015b9e:	2301      	movgt	r3, #1
 8015ba0:	4413      	add	r3, r2
 8015ba2:	e7de      	b.n	8015b62 <_printf_float+0x192>
 8015ba4:	6823      	ldr	r3, [r4, #0]
 8015ba6:	055a      	lsls	r2, r3, #21
 8015ba8:	d407      	bmi.n	8015bba <_printf_float+0x1ea>
 8015baa:	6923      	ldr	r3, [r4, #16]
 8015bac:	4642      	mov	r2, r8
 8015bae:	4631      	mov	r1, r6
 8015bb0:	4628      	mov	r0, r5
 8015bb2:	47b8      	blx	r7
 8015bb4:	3001      	adds	r0, #1
 8015bb6:	d12b      	bne.n	8015c10 <_printf_float+0x240>
 8015bb8:	e767      	b.n	8015a8a <_printf_float+0xba>
 8015bba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015bbe:	f240 80dc 	bls.w	8015d7a <_printf_float+0x3aa>
 8015bc2:	2200      	movs	r2, #0
 8015bc4:	2300      	movs	r3, #0
 8015bc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015bca:	f7ea ff95 	bl	8000af8 <__aeabi_dcmpeq>
 8015bce:	2800      	cmp	r0, #0
 8015bd0:	d033      	beq.n	8015c3a <_printf_float+0x26a>
 8015bd2:	2301      	movs	r3, #1
 8015bd4:	4a41      	ldr	r2, [pc, #260]	; (8015cdc <_printf_float+0x30c>)
 8015bd6:	4631      	mov	r1, r6
 8015bd8:	4628      	mov	r0, r5
 8015bda:	47b8      	blx	r7
 8015bdc:	3001      	adds	r0, #1
 8015bde:	f43f af54 	beq.w	8015a8a <_printf_float+0xba>
 8015be2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015be6:	429a      	cmp	r2, r3
 8015be8:	db02      	blt.n	8015bf0 <_printf_float+0x220>
 8015bea:	6823      	ldr	r3, [r4, #0]
 8015bec:	07d8      	lsls	r0, r3, #31
 8015bee:	d50f      	bpl.n	8015c10 <_printf_float+0x240>
 8015bf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015bf4:	4631      	mov	r1, r6
 8015bf6:	4628      	mov	r0, r5
 8015bf8:	47b8      	blx	r7
 8015bfa:	3001      	adds	r0, #1
 8015bfc:	f43f af45 	beq.w	8015a8a <_printf_float+0xba>
 8015c00:	f04f 0800 	mov.w	r8, #0
 8015c04:	f104 091a 	add.w	r9, r4, #26
 8015c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c0a:	3b01      	subs	r3, #1
 8015c0c:	4543      	cmp	r3, r8
 8015c0e:	dc09      	bgt.n	8015c24 <_printf_float+0x254>
 8015c10:	6823      	ldr	r3, [r4, #0]
 8015c12:	079b      	lsls	r3, r3, #30
 8015c14:	f100 8103 	bmi.w	8015e1e <_printf_float+0x44e>
 8015c18:	68e0      	ldr	r0, [r4, #12]
 8015c1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c1c:	4298      	cmp	r0, r3
 8015c1e:	bfb8      	it	lt
 8015c20:	4618      	movlt	r0, r3
 8015c22:	e734      	b.n	8015a8e <_printf_float+0xbe>
 8015c24:	2301      	movs	r3, #1
 8015c26:	464a      	mov	r2, r9
 8015c28:	4631      	mov	r1, r6
 8015c2a:	4628      	mov	r0, r5
 8015c2c:	47b8      	blx	r7
 8015c2e:	3001      	adds	r0, #1
 8015c30:	f43f af2b 	beq.w	8015a8a <_printf_float+0xba>
 8015c34:	f108 0801 	add.w	r8, r8, #1
 8015c38:	e7e6      	b.n	8015c08 <_printf_float+0x238>
 8015c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	dc2b      	bgt.n	8015c98 <_printf_float+0x2c8>
 8015c40:	2301      	movs	r3, #1
 8015c42:	4a26      	ldr	r2, [pc, #152]	; (8015cdc <_printf_float+0x30c>)
 8015c44:	4631      	mov	r1, r6
 8015c46:	4628      	mov	r0, r5
 8015c48:	47b8      	blx	r7
 8015c4a:	3001      	adds	r0, #1
 8015c4c:	f43f af1d 	beq.w	8015a8a <_printf_float+0xba>
 8015c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c52:	b923      	cbnz	r3, 8015c5e <_printf_float+0x28e>
 8015c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c56:	b913      	cbnz	r3, 8015c5e <_printf_float+0x28e>
 8015c58:	6823      	ldr	r3, [r4, #0]
 8015c5a:	07d9      	lsls	r1, r3, #31
 8015c5c:	d5d8      	bpl.n	8015c10 <_printf_float+0x240>
 8015c5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015c62:	4631      	mov	r1, r6
 8015c64:	4628      	mov	r0, r5
 8015c66:	47b8      	blx	r7
 8015c68:	3001      	adds	r0, #1
 8015c6a:	f43f af0e 	beq.w	8015a8a <_printf_float+0xba>
 8015c6e:	f04f 0900 	mov.w	r9, #0
 8015c72:	f104 0a1a 	add.w	sl, r4, #26
 8015c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c78:	425b      	negs	r3, r3
 8015c7a:	454b      	cmp	r3, r9
 8015c7c:	dc01      	bgt.n	8015c82 <_printf_float+0x2b2>
 8015c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c80:	e794      	b.n	8015bac <_printf_float+0x1dc>
 8015c82:	2301      	movs	r3, #1
 8015c84:	4652      	mov	r2, sl
 8015c86:	4631      	mov	r1, r6
 8015c88:	4628      	mov	r0, r5
 8015c8a:	47b8      	blx	r7
 8015c8c:	3001      	adds	r0, #1
 8015c8e:	f43f aefc 	beq.w	8015a8a <_printf_float+0xba>
 8015c92:	f109 0901 	add.w	r9, r9, #1
 8015c96:	e7ee      	b.n	8015c76 <_printf_float+0x2a6>
 8015c98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015c9c:	429a      	cmp	r2, r3
 8015c9e:	bfa8      	it	ge
 8015ca0:	461a      	movge	r2, r3
 8015ca2:	2a00      	cmp	r2, #0
 8015ca4:	4691      	mov	r9, r2
 8015ca6:	dd07      	ble.n	8015cb8 <_printf_float+0x2e8>
 8015ca8:	4613      	mov	r3, r2
 8015caa:	4631      	mov	r1, r6
 8015cac:	4642      	mov	r2, r8
 8015cae:	4628      	mov	r0, r5
 8015cb0:	47b8      	blx	r7
 8015cb2:	3001      	adds	r0, #1
 8015cb4:	f43f aee9 	beq.w	8015a8a <_printf_float+0xba>
 8015cb8:	f104 031a 	add.w	r3, r4, #26
 8015cbc:	f04f 0b00 	mov.w	fp, #0
 8015cc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015cc4:	9306      	str	r3, [sp, #24]
 8015cc6:	e015      	b.n	8015cf4 <_printf_float+0x324>
 8015cc8:	7fefffff 	.word	0x7fefffff
 8015ccc:	0801a524 	.word	0x0801a524
 8015cd0:	0801a520 	.word	0x0801a520
 8015cd4:	0801a52c 	.word	0x0801a52c
 8015cd8:	0801a528 	.word	0x0801a528
 8015cdc:	0801a74b 	.word	0x0801a74b
 8015ce0:	2301      	movs	r3, #1
 8015ce2:	9a06      	ldr	r2, [sp, #24]
 8015ce4:	4631      	mov	r1, r6
 8015ce6:	4628      	mov	r0, r5
 8015ce8:	47b8      	blx	r7
 8015cea:	3001      	adds	r0, #1
 8015cec:	f43f aecd 	beq.w	8015a8a <_printf_float+0xba>
 8015cf0:	f10b 0b01 	add.w	fp, fp, #1
 8015cf4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015cf8:	ebaa 0309 	sub.w	r3, sl, r9
 8015cfc:	455b      	cmp	r3, fp
 8015cfe:	dcef      	bgt.n	8015ce0 <_printf_float+0x310>
 8015d00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015d04:	429a      	cmp	r2, r3
 8015d06:	44d0      	add	r8, sl
 8015d08:	db15      	blt.n	8015d36 <_printf_float+0x366>
 8015d0a:	6823      	ldr	r3, [r4, #0]
 8015d0c:	07da      	lsls	r2, r3, #31
 8015d0e:	d412      	bmi.n	8015d36 <_printf_float+0x366>
 8015d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015d14:	eba3 020a 	sub.w	r2, r3, sl
 8015d18:	eba3 0a01 	sub.w	sl, r3, r1
 8015d1c:	4592      	cmp	sl, r2
 8015d1e:	bfa8      	it	ge
 8015d20:	4692      	movge	sl, r2
 8015d22:	f1ba 0f00 	cmp.w	sl, #0
 8015d26:	dc0e      	bgt.n	8015d46 <_printf_float+0x376>
 8015d28:	f04f 0800 	mov.w	r8, #0
 8015d2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015d30:	f104 091a 	add.w	r9, r4, #26
 8015d34:	e019      	b.n	8015d6a <_printf_float+0x39a>
 8015d36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d3a:	4631      	mov	r1, r6
 8015d3c:	4628      	mov	r0, r5
 8015d3e:	47b8      	blx	r7
 8015d40:	3001      	adds	r0, #1
 8015d42:	d1e5      	bne.n	8015d10 <_printf_float+0x340>
 8015d44:	e6a1      	b.n	8015a8a <_printf_float+0xba>
 8015d46:	4653      	mov	r3, sl
 8015d48:	4642      	mov	r2, r8
 8015d4a:	4631      	mov	r1, r6
 8015d4c:	4628      	mov	r0, r5
 8015d4e:	47b8      	blx	r7
 8015d50:	3001      	adds	r0, #1
 8015d52:	d1e9      	bne.n	8015d28 <_printf_float+0x358>
 8015d54:	e699      	b.n	8015a8a <_printf_float+0xba>
 8015d56:	2301      	movs	r3, #1
 8015d58:	464a      	mov	r2, r9
 8015d5a:	4631      	mov	r1, r6
 8015d5c:	4628      	mov	r0, r5
 8015d5e:	47b8      	blx	r7
 8015d60:	3001      	adds	r0, #1
 8015d62:	f43f ae92 	beq.w	8015a8a <_printf_float+0xba>
 8015d66:	f108 0801 	add.w	r8, r8, #1
 8015d6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015d6e:	1a9b      	subs	r3, r3, r2
 8015d70:	eba3 030a 	sub.w	r3, r3, sl
 8015d74:	4543      	cmp	r3, r8
 8015d76:	dcee      	bgt.n	8015d56 <_printf_float+0x386>
 8015d78:	e74a      	b.n	8015c10 <_printf_float+0x240>
 8015d7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d7c:	2a01      	cmp	r2, #1
 8015d7e:	dc01      	bgt.n	8015d84 <_printf_float+0x3b4>
 8015d80:	07db      	lsls	r3, r3, #31
 8015d82:	d53a      	bpl.n	8015dfa <_printf_float+0x42a>
 8015d84:	2301      	movs	r3, #1
 8015d86:	4642      	mov	r2, r8
 8015d88:	4631      	mov	r1, r6
 8015d8a:	4628      	mov	r0, r5
 8015d8c:	47b8      	blx	r7
 8015d8e:	3001      	adds	r0, #1
 8015d90:	f43f ae7b 	beq.w	8015a8a <_printf_float+0xba>
 8015d94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d98:	4631      	mov	r1, r6
 8015d9a:	4628      	mov	r0, r5
 8015d9c:	47b8      	blx	r7
 8015d9e:	3001      	adds	r0, #1
 8015da0:	f108 0801 	add.w	r8, r8, #1
 8015da4:	f43f ae71 	beq.w	8015a8a <_printf_float+0xba>
 8015da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015daa:	2200      	movs	r2, #0
 8015dac:	f103 3aff 	add.w	sl, r3, #4294967295
 8015db0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015db4:	2300      	movs	r3, #0
 8015db6:	f7ea fe9f 	bl	8000af8 <__aeabi_dcmpeq>
 8015dba:	b9c8      	cbnz	r0, 8015df0 <_printf_float+0x420>
 8015dbc:	4653      	mov	r3, sl
 8015dbe:	4642      	mov	r2, r8
 8015dc0:	4631      	mov	r1, r6
 8015dc2:	4628      	mov	r0, r5
 8015dc4:	47b8      	blx	r7
 8015dc6:	3001      	adds	r0, #1
 8015dc8:	d10e      	bne.n	8015de8 <_printf_float+0x418>
 8015dca:	e65e      	b.n	8015a8a <_printf_float+0xba>
 8015dcc:	2301      	movs	r3, #1
 8015dce:	4652      	mov	r2, sl
 8015dd0:	4631      	mov	r1, r6
 8015dd2:	4628      	mov	r0, r5
 8015dd4:	47b8      	blx	r7
 8015dd6:	3001      	adds	r0, #1
 8015dd8:	f43f ae57 	beq.w	8015a8a <_printf_float+0xba>
 8015ddc:	f108 0801 	add.w	r8, r8, #1
 8015de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015de2:	3b01      	subs	r3, #1
 8015de4:	4543      	cmp	r3, r8
 8015de6:	dcf1      	bgt.n	8015dcc <_printf_float+0x3fc>
 8015de8:	464b      	mov	r3, r9
 8015dea:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015dee:	e6de      	b.n	8015bae <_printf_float+0x1de>
 8015df0:	f04f 0800 	mov.w	r8, #0
 8015df4:	f104 0a1a 	add.w	sl, r4, #26
 8015df8:	e7f2      	b.n	8015de0 <_printf_float+0x410>
 8015dfa:	2301      	movs	r3, #1
 8015dfc:	e7df      	b.n	8015dbe <_printf_float+0x3ee>
 8015dfe:	2301      	movs	r3, #1
 8015e00:	464a      	mov	r2, r9
 8015e02:	4631      	mov	r1, r6
 8015e04:	4628      	mov	r0, r5
 8015e06:	47b8      	blx	r7
 8015e08:	3001      	adds	r0, #1
 8015e0a:	f43f ae3e 	beq.w	8015a8a <_printf_float+0xba>
 8015e0e:	f108 0801 	add.w	r8, r8, #1
 8015e12:	68e3      	ldr	r3, [r4, #12]
 8015e14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015e16:	1a9b      	subs	r3, r3, r2
 8015e18:	4543      	cmp	r3, r8
 8015e1a:	dcf0      	bgt.n	8015dfe <_printf_float+0x42e>
 8015e1c:	e6fc      	b.n	8015c18 <_printf_float+0x248>
 8015e1e:	f04f 0800 	mov.w	r8, #0
 8015e22:	f104 0919 	add.w	r9, r4, #25
 8015e26:	e7f4      	b.n	8015e12 <_printf_float+0x442>
 8015e28:	2900      	cmp	r1, #0
 8015e2a:	f43f ae8b 	beq.w	8015b44 <_printf_float+0x174>
 8015e2e:	2300      	movs	r3, #0
 8015e30:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015e34:	ab09      	add	r3, sp, #36	; 0x24
 8015e36:	9300      	str	r3, [sp, #0]
 8015e38:	ec49 8b10 	vmov	d0, r8, r9
 8015e3c:	6022      	str	r2, [r4, #0]
 8015e3e:	f8cd a004 	str.w	sl, [sp, #4]
 8015e42:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015e46:	4628      	mov	r0, r5
 8015e48:	f7ff fd2d 	bl	80158a6 <__cvt>
 8015e4c:	4680      	mov	r8, r0
 8015e4e:	e648      	b.n	8015ae2 <_printf_float+0x112>

08015e50 <_printf_common>:
 8015e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e54:	4691      	mov	r9, r2
 8015e56:	461f      	mov	r7, r3
 8015e58:	688a      	ldr	r2, [r1, #8]
 8015e5a:	690b      	ldr	r3, [r1, #16]
 8015e5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015e60:	4293      	cmp	r3, r2
 8015e62:	bfb8      	it	lt
 8015e64:	4613      	movlt	r3, r2
 8015e66:	f8c9 3000 	str.w	r3, [r9]
 8015e6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015e6e:	4606      	mov	r6, r0
 8015e70:	460c      	mov	r4, r1
 8015e72:	b112      	cbz	r2, 8015e7a <_printf_common+0x2a>
 8015e74:	3301      	adds	r3, #1
 8015e76:	f8c9 3000 	str.w	r3, [r9]
 8015e7a:	6823      	ldr	r3, [r4, #0]
 8015e7c:	0699      	lsls	r1, r3, #26
 8015e7e:	bf42      	ittt	mi
 8015e80:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015e84:	3302      	addmi	r3, #2
 8015e86:	f8c9 3000 	strmi.w	r3, [r9]
 8015e8a:	6825      	ldr	r5, [r4, #0]
 8015e8c:	f015 0506 	ands.w	r5, r5, #6
 8015e90:	d107      	bne.n	8015ea2 <_printf_common+0x52>
 8015e92:	f104 0a19 	add.w	sl, r4, #25
 8015e96:	68e3      	ldr	r3, [r4, #12]
 8015e98:	f8d9 2000 	ldr.w	r2, [r9]
 8015e9c:	1a9b      	subs	r3, r3, r2
 8015e9e:	42ab      	cmp	r3, r5
 8015ea0:	dc28      	bgt.n	8015ef4 <_printf_common+0xa4>
 8015ea2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015ea6:	6822      	ldr	r2, [r4, #0]
 8015ea8:	3300      	adds	r3, #0
 8015eaa:	bf18      	it	ne
 8015eac:	2301      	movne	r3, #1
 8015eae:	0692      	lsls	r2, r2, #26
 8015eb0:	d42d      	bmi.n	8015f0e <_printf_common+0xbe>
 8015eb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015eb6:	4639      	mov	r1, r7
 8015eb8:	4630      	mov	r0, r6
 8015eba:	47c0      	blx	r8
 8015ebc:	3001      	adds	r0, #1
 8015ebe:	d020      	beq.n	8015f02 <_printf_common+0xb2>
 8015ec0:	6823      	ldr	r3, [r4, #0]
 8015ec2:	68e5      	ldr	r5, [r4, #12]
 8015ec4:	f8d9 2000 	ldr.w	r2, [r9]
 8015ec8:	f003 0306 	and.w	r3, r3, #6
 8015ecc:	2b04      	cmp	r3, #4
 8015ece:	bf08      	it	eq
 8015ed0:	1aad      	subeq	r5, r5, r2
 8015ed2:	68a3      	ldr	r3, [r4, #8]
 8015ed4:	6922      	ldr	r2, [r4, #16]
 8015ed6:	bf0c      	ite	eq
 8015ed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015edc:	2500      	movne	r5, #0
 8015ede:	4293      	cmp	r3, r2
 8015ee0:	bfc4      	itt	gt
 8015ee2:	1a9b      	subgt	r3, r3, r2
 8015ee4:	18ed      	addgt	r5, r5, r3
 8015ee6:	f04f 0900 	mov.w	r9, #0
 8015eea:	341a      	adds	r4, #26
 8015eec:	454d      	cmp	r5, r9
 8015eee:	d11a      	bne.n	8015f26 <_printf_common+0xd6>
 8015ef0:	2000      	movs	r0, #0
 8015ef2:	e008      	b.n	8015f06 <_printf_common+0xb6>
 8015ef4:	2301      	movs	r3, #1
 8015ef6:	4652      	mov	r2, sl
 8015ef8:	4639      	mov	r1, r7
 8015efa:	4630      	mov	r0, r6
 8015efc:	47c0      	blx	r8
 8015efe:	3001      	adds	r0, #1
 8015f00:	d103      	bne.n	8015f0a <_printf_common+0xba>
 8015f02:	f04f 30ff 	mov.w	r0, #4294967295
 8015f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f0a:	3501      	adds	r5, #1
 8015f0c:	e7c3      	b.n	8015e96 <_printf_common+0x46>
 8015f0e:	18e1      	adds	r1, r4, r3
 8015f10:	1c5a      	adds	r2, r3, #1
 8015f12:	2030      	movs	r0, #48	; 0x30
 8015f14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015f18:	4422      	add	r2, r4
 8015f1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015f1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015f22:	3302      	adds	r3, #2
 8015f24:	e7c5      	b.n	8015eb2 <_printf_common+0x62>
 8015f26:	2301      	movs	r3, #1
 8015f28:	4622      	mov	r2, r4
 8015f2a:	4639      	mov	r1, r7
 8015f2c:	4630      	mov	r0, r6
 8015f2e:	47c0      	blx	r8
 8015f30:	3001      	adds	r0, #1
 8015f32:	d0e6      	beq.n	8015f02 <_printf_common+0xb2>
 8015f34:	f109 0901 	add.w	r9, r9, #1
 8015f38:	e7d8      	b.n	8015eec <_printf_common+0x9c>
	...

08015f3c <_printf_i>:
 8015f3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f40:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015f44:	460c      	mov	r4, r1
 8015f46:	7e09      	ldrb	r1, [r1, #24]
 8015f48:	b085      	sub	sp, #20
 8015f4a:	296e      	cmp	r1, #110	; 0x6e
 8015f4c:	4617      	mov	r7, r2
 8015f4e:	4606      	mov	r6, r0
 8015f50:	4698      	mov	r8, r3
 8015f52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015f54:	f000 80b3 	beq.w	80160be <_printf_i+0x182>
 8015f58:	d822      	bhi.n	8015fa0 <_printf_i+0x64>
 8015f5a:	2963      	cmp	r1, #99	; 0x63
 8015f5c:	d036      	beq.n	8015fcc <_printf_i+0x90>
 8015f5e:	d80a      	bhi.n	8015f76 <_printf_i+0x3a>
 8015f60:	2900      	cmp	r1, #0
 8015f62:	f000 80b9 	beq.w	80160d8 <_printf_i+0x19c>
 8015f66:	2958      	cmp	r1, #88	; 0x58
 8015f68:	f000 8083 	beq.w	8016072 <_printf_i+0x136>
 8015f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015f70:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015f74:	e032      	b.n	8015fdc <_printf_i+0xa0>
 8015f76:	2964      	cmp	r1, #100	; 0x64
 8015f78:	d001      	beq.n	8015f7e <_printf_i+0x42>
 8015f7a:	2969      	cmp	r1, #105	; 0x69
 8015f7c:	d1f6      	bne.n	8015f6c <_printf_i+0x30>
 8015f7e:	6820      	ldr	r0, [r4, #0]
 8015f80:	6813      	ldr	r3, [r2, #0]
 8015f82:	0605      	lsls	r5, r0, #24
 8015f84:	f103 0104 	add.w	r1, r3, #4
 8015f88:	d52a      	bpl.n	8015fe0 <_printf_i+0xa4>
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	6011      	str	r1, [r2, #0]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	da03      	bge.n	8015f9a <_printf_i+0x5e>
 8015f92:	222d      	movs	r2, #45	; 0x2d
 8015f94:	425b      	negs	r3, r3
 8015f96:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015f9a:	486f      	ldr	r0, [pc, #444]	; (8016158 <_printf_i+0x21c>)
 8015f9c:	220a      	movs	r2, #10
 8015f9e:	e039      	b.n	8016014 <_printf_i+0xd8>
 8015fa0:	2973      	cmp	r1, #115	; 0x73
 8015fa2:	f000 809d 	beq.w	80160e0 <_printf_i+0x1a4>
 8015fa6:	d808      	bhi.n	8015fba <_printf_i+0x7e>
 8015fa8:	296f      	cmp	r1, #111	; 0x6f
 8015faa:	d020      	beq.n	8015fee <_printf_i+0xb2>
 8015fac:	2970      	cmp	r1, #112	; 0x70
 8015fae:	d1dd      	bne.n	8015f6c <_printf_i+0x30>
 8015fb0:	6823      	ldr	r3, [r4, #0]
 8015fb2:	f043 0320 	orr.w	r3, r3, #32
 8015fb6:	6023      	str	r3, [r4, #0]
 8015fb8:	e003      	b.n	8015fc2 <_printf_i+0x86>
 8015fba:	2975      	cmp	r1, #117	; 0x75
 8015fbc:	d017      	beq.n	8015fee <_printf_i+0xb2>
 8015fbe:	2978      	cmp	r1, #120	; 0x78
 8015fc0:	d1d4      	bne.n	8015f6c <_printf_i+0x30>
 8015fc2:	2378      	movs	r3, #120	; 0x78
 8015fc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015fc8:	4864      	ldr	r0, [pc, #400]	; (801615c <_printf_i+0x220>)
 8015fca:	e055      	b.n	8016078 <_printf_i+0x13c>
 8015fcc:	6813      	ldr	r3, [r2, #0]
 8015fce:	1d19      	adds	r1, r3, #4
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	6011      	str	r1, [r2, #0]
 8015fd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015fd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015fdc:	2301      	movs	r3, #1
 8015fde:	e08c      	b.n	80160fa <_printf_i+0x1be>
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	6011      	str	r1, [r2, #0]
 8015fe4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015fe8:	bf18      	it	ne
 8015fea:	b21b      	sxthne	r3, r3
 8015fec:	e7cf      	b.n	8015f8e <_printf_i+0x52>
 8015fee:	6813      	ldr	r3, [r2, #0]
 8015ff0:	6825      	ldr	r5, [r4, #0]
 8015ff2:	1d18      	adds	r0, r3, #4
 8015ff4:	6010      	str	r0, [r2, #0]
 8015ff6:	0628      	lsls	r0, r5, #24
 8015ff8:	d501      	bpl.n	8015ffe <_printf_i+0xc2>
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	e002      	b.n	8016004 <_printf_i+0xc8>
 8015ffe:	0668      	lsls	r0, r5, #25
 8016000:	d5fb      	bpl.n	8015ffa <_printf_i+0xbe>
 8016002:	881b      	ldrh	r3, [r3, #0]
 8016004:	4854      	ldr	r0, [pc, #336]	; (8016158 <_printf_i+0x21c>)
 8016006:	296f      	cmp	r1, #111	; 0x6f
 8016008:	bf14      	ite	ne
 801600a:	220a      	movne	r2, #10
 801600c:	2208      	moveq	r2, #8
 801600e:	2100      	movs	r1, #0
 8016010:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016014:	6865      	ldr	r5, [r4, #4]
 8016016:	60a5      	str	r5, [r4, #8]
 8016018:	2d00      	cmp	r5, #0
 801601a:	f2c0 8095 	blt.w	8016148 <_printf_i+0x20c>
 801601e:	6821      	ldr	r1, [r4, #0]
 8016020:	f021 0104 	bic.w	r1, r1, #4
 8016024:	6021      	str	r1, [r4, #0]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d13d      	bne.n	80160a6 <_printf_i+0x16a>
 801602a:	2d00      	cmp	r5, #0
 801602c:	f040 808e 	bne.w	801614c <_printf_i+0x210>
 8016030:	4665      	mov	r5, ip
 8016032:	2a08      	cmp	r2, #8
 8016034:	d10b      	bne.n	801604e <_printf_i+0x112>
 8016036:	6823      	ldr	r3, [r4, #0]
 8016038:	07db      	lsls	r3, r3, #31
 801603a:	d508      	bpl.n	801604e <_printf_i+0x112>
 801603c:	6923      	ldr	r3, [r4, #16]
 801603e:	6862      	ldr	r2, [r4, #4]
 8016040:	429a      	cmp	r2, r3
 8016042:	bfde      	ittt	le
 8016044:	2330      	movle	r3, #48	; 0x30
 8016046:	f805 3c01 	strble.w	r3, [r5, #-1]
 801604a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801604e:	ebac 0305 	sub.w	r3, ip, r5
 8016052:	6123      	str	r3, [r4, #16]
 8016054:	f8cd 8000 	str.w	r8, [sp]
 8016058:	463b      	mov	r3, r7
 801605a:	aa03      	add	r2, sp, #12
 801605c:	4621      	mov	r1, r4
 801605e:	4630      	mov	r0, r6
 8016060:	f7ff fef6 	bl	8015e50 <_printf_common>
 8016064:	3001      	adds	r0, #1
 8016066:	d14d      	bne.n	8016104 <_printf_i+0x1c8>
 8016068:	f04f 30ff 	mov.w	r0, #4294967295
 801606c:	b005      	add	sp, #20
 801606e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016072:	4839      	ldr	r0, [pc, #228]	; (8016158 <_printf_i+0x21c>)
 8016074:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016078:	6813      	ldr	r3, [r2, #0]
 801607a:	6821      	ldr	r1, [r4, #0]
 801607c:	1d1d      	adds	r5, r3, #4
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	6015      	str	r5, [r2, #0]
 8016082:	060a      	lsls	r2, r1, #24
 8016084:	d50b      	bpl.n	801609e <_printf_i+0x162>
 8016086:	07ca      	lsls	r2, r1, #31
 8016088:	bf44      	itt	mi
 801608a:	f041 0120 	orrmi.w	r1, r1, #32
 801608e:	6021      	strmi	r1, [r4, #0]
 8016090:	b91b      	cbnz	r3, 801609a <_printf_i+0x15e>
 8016092:	6822      	ldr	r2, [r4, #0]
 8016094:	f022 0220 	bic.w	r2, r2, #32
 8016098:	6022      	str	r2, [r4, #0]
 801609a:	2210      	movs	r2, #16
 801609c:	e7b7      	b.n	801600e <_printf_i+0xd2>
 801609e:	064d      	lsls	r5, r1, #25
 80160a0:	bf48      	it	mi
 80160a2:	b29b      	uxthmi	r3, r3
 80160a4:	e7ef      	b.n	8016086 <_printf_i+0x14a>
 80160a6:	4665      	mov	r5, ip
 80160a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80160ac:	fb02 3311 	mls	r3, r2, r1, r3
 80160b0:	5cc3      	ldrb	r3, [r0, r3]
 80160b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80160b6:	460b      	mov	r3, r1
 80160b8:	2900      	cmp	r1, #0
 80160ba:	d1f5      	bne.n	80160a8 <_printf_i+0x16c>
 80160bc:	e7b9      	b.n	8016032 <_printf_i+0xf6>
 80160be:	6813      	ldr	r3, [r2, #0]
 80160c0:	6825      	ldr	r5, [r4, #0]
 80160c2:	6961      	ldr	r1, [r4, #20]
 80160c4:	1d18      	adds	r0, r3, #4
 80160c6:	6010      	str	r0, [r2, #0]
 80160c8:	0628      	lsls	r0, r5, #24
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	d501      	bpl.n	80160d2 <_printf_i+0x196>
 80160ce:	6019      	str	r1, [r3, #0]
 80160d0:	e002      	b.n	80160d8 <_printf_i+0x19c>
 80160d2:	066a      	lsls	r2, r5, #25
 80160d4:	d5fb      	bpl.n	80160ce <_printf_i+0x192>
 80160d6:	8019      	strh	r1, [r3, #0]
 80160d8:	2300      	movs	r3, #0
 80160da:	6123      	str	r3, [r4, #16]
 80160dc:	4665      	mov	r5, ip
 80160de:	e7b9      	b.n	8016054 <_printf_i+0x118>
 80160e0:	6813      	ldr	r3, [r2, #0]
 80160e2:	1d19      	adds	r1, r3, #4
 80160e4:	6011      	str	r1, [r2, #0]
 80160e6:	681d      	ldr	r5, [r3, #0]
 80160e8:	6862      	ldr	r2, [r4, #4]
 80160ea:	2100      	movs	r1, #0
 80160ec:	4628      	mov	r0, r5
 80160ee:	f7ea f88f 	bl	8000210 <memchr>
 80160f2:	b108      	cbz	r0, 80160f8 <_printf_i+0x1bc>
 80160f4:	1b40      	subs	r0, r0, r5
 80160f6:	6060      	str	r0, [r4, #4]
 80160f8:	6863      	ldr	r3, [r4, #4]
 80160fa:	6123      	str	r3, [r4, #16]
 80160fc:	2300      	movs	r3, #0
 80160fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016102:	e7a7      	b.n	8016054 <_printf_i+0x118>
 8016104:	6923      	ldr	r3, [r4, #16]
 8016106:	462a      	mov	r2, r5
 8016108:	4639      	mov	r1, r7
 801610a:	4630      	mov	r0, r6
 801610c:	47c0      	blx	r8
 801610e:	3001      	adds	r0, #1
 8016110:	d0aa      	beq.n	8016068 <_printf_i+0x12c>
 8016112:	6823      	ldr	r3, [r4, #0]
 8016114:	079b      	lsls	r3, r3, #30
 8016116:	d413      	bmi.n	8016140 <_printf_i+0x204>
 8016118:	68e0      	ldr	r0, [r4, #12]
 801611a:	9b03      	ldr	r3, [sp, #12]
 801611c:	4298      	cmp	r0, r3
 801611e:	bfb8      	it	lt
 8016120:	4618      	movlt	r0, r3
 8016122:	e7a3      	b.n	801606c <_printf_i+0x130>
 8016124:	2301      	movs	r3, #1
 8016126:	464a      	mov	r2, r9
 8016128:	4639      	mov	r1, r7
 801612a:	4630      	mov	r0, r6
 801612c:	47c0      	blx	r8
 801612e:	3001      	adds	r0, #1
 8016130:	d09a      	beq.n	8016068 <_printf_i+0x12c>
 8016132:	3501      	adds	r5, #1
 8016134:	68e3      	ldr	r3, [r4, #12]
 8016136:	9a03      	ldr	r2, [sp, #12]
 8016138:	1a9b      	subs	r3, r3, r2
 801613a:	42ab      	cmp	r3, r5
 801613c:	dcf2      	bgt.n	8016124 <_printf_i+0x1e8>
 801613e:	e7eb      	b.n	8016118 <_printf_i+0x1dc>
 8016140:	2500      	movs	r5, #0
 8016142:	f104 0919 	add.w	r9, r4, #25
 8016146:	e7f5      	b.n	8016134 <_printf_i+0x1f8>
 8016148:	2b00      	cmp	r3, #0
 801614a:	d1ac      	bne.n	80160a6 <_printf_i+0x16a>
 801614c:	7803      	ldrb	r3, [r0, #0]
 801614e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016152:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016156:	e76c      	b.n	8016032 <_printf_i+0xf6>
 8016158:	0801a530 	.word	0x0801a530
 801615c:	0801a541 	.word	0x0801a541

08016160 <_scanf_float>:
 8016160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016164:	469a      	mov	sl, r3
 8016166:	688b      	ldr	r3, [r1, #8]
 8016168:	4616      	mov	r6, r2
 801616a:	1e5a      	subs	r2, r3, #1
 801616c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016170:	b087      	sub	sp, #28
 8016172:	bf83      	ittte	hi
 8016174:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8016178:	189b      	addhi	r3, r3, r2
 801617a:	9301      	strhi	r3, [sp, #4]
 801617c:	2300      	movls	r3, #0
 801617e:	bf86      	itte	hi
 8016180:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016184:	608b      	strhi	r3, [r1, #8]
 8016186:	9301      	strls	r3, [sp, #4]
 8016188:	680b      	ldr	r3, [r1, #0]
 801618a:	4688      	mov	r8, r1
 801618c:	f04f 0b00 	mov.w	fp, #0
 8016190:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016194:	f848 3b1c 	str.w	r3, [r8], #28
 8016198:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801619c:	4607      	mov	r7, r0
 801619e:	460c      	mov	r4, r1
 80161a0:	4645      	mov	r5, r8
 80161a2:	465a      	mov	r2, fp
 80161a4:	46d9      	mov	r9, fp
 80161a6:	f8cd b008 	str.w	fp, [sp, #8]
 80161aa:	68a1      	ldr	r1, [r4, #8]
 80161ac:	b181      	cbz	r1, 80161d0 <_scanf_float+0x70>
 80161ae:	6833      	ldr	r3, [r6, #0]
 80161b0:	781b      	ldrb	r3, [r3, #0]
 80161b2:	2b49      	cmp	r3, #73	; 0x49
 80161b4:	d071      	beq.n	801629a <_scanf_float+0x13a>
 80161b6:	d84d      	bhi.n	8016254 <_scanf_float+0xf4>
 80161b8:	2b39      	cmp	r3, #57	; 0x39
 80161ba:	d840      	bhi.n	801623e <_scanf_float+0xde>
 80161bc:	2b31      	cmp	r3, #49	; 0x31
 80161be:	f080 8088 	bcs.w	80162d2 <_scanf_float+0x172>
 80161c2:	2b2d      	cmp	r3, #45	; 0x2d
 80161c4:	f000 8090 	beq.w	80162e8 <_scanf_float+0x188>
 80161c8:	d815      	bhi.n	80161f6 <_scanf_float+0x96>
 80161ca:	2b2b      	cmp	r3, #43	; 0x2b
 80161cc:	f000 808c 	beq.w	80162e8 <_scanf_float+0x188>
 80161d0:	f1b9 0f00 	cmp.w	r9, #0
 80161d4:	d003      	beq.n	80161de <_scanf_float+0x7e>
 80161d6:	6823      	ldr	r3, [r4, #0]
 80161d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80161dc:	6023      	str	r3, [r4, #0]
 80161de:	3a01      	subs	r2, #1
 80161e0:	2a01      	cmp	r2, #1
 80161e2:	f200 80ea 	bhi.w	80163ba <_scanf_float+0x25a>
 80161e6:	4545      	cmp	r5, r8
 80161e8:	f200 80dc 	bhi.w	80163a4 <_scanf_float+0x244>
 80161ec:	2601      	movs	r6, #1
 80161ee:	4630      	mov	r0, r6
 80161f0:	b007      	add	sp, #28
 80161f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161f6:	2b2e      	cmp	r3, #46	; 0x2e
 80161f8:	f000 809f 	beq.w	801633a <_scanf_float+0x1da>
 80161fc:	2b30      	cmp	r3, #48	; 0x30
 80161fe:	d1e7      	bne.n	80161d0 <_scanf_float+0x70>
 8016200:	6820      	ldr	r0, [r4, #0]
 8016202:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016206:	d064      	beq.n	80162d2 <_scanf_float+0x172>
 8016208:	9b01      	ldr	r3, [sp, #4]
 801620a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801620e:	6020      	str	r0, [r4, #0]
 8016210:	f109 0901 	add.w	r9, r9, #1
 8016214:	b11b      	cbz	r3, 801621e <_scanf_float+0xbe>
 8016216:	3b01      	subs	r3, #1
 8016218:	3101      	adds	r1, #1
 801621a:	9301      	str	r3, [sp, #4]
 801621c:	60a1      	str	r1, [r4, #8]
 801621e:	68a3      	ldr	r3, [r4, #8]
 8016220:	3b01      	subs	r3, #1
 8016222:	60a3      	str	r3, [r4, #8]
 8016224:	6923      	ldr	r3, [r4, #16]
 8016226:	3301      	adds	r3, #1
 8016228:	6123      	str	r3, [r4, #16]
 801622a:	6873      	ldr	r3, [r6, #4]
 801622c:	3b01      	subs	r3, #1
 801622e:	2b00      	cmp	r3, #0
 8016230:	6073      	str	r3, [r6, #4]
 8016232:	f340 80ac 	ble.w	801638e <_scanf_float+0x22e>
 8016236:	6833      	ldr	r3, [r6, #0]
 8016238:	3301      	adds	r3, #1
 801623a:	6033      	str	r3, [r6, #0]
 801623c:	e7b5      	b.n	80161aa <_scanf_float+0x4a>
 801623e:	2b45      	cmp	r3, #69	; 0x45
 8016240:	f000 8085 	beq.w	801634e <_scanf_float+0x1ee>
 8016244:	2b46      	cmp	r3, #70	; 0x46
 8016246:	d06a      	beq.n	801631e <_scanf_float+0x1be>
 8016248:	2b41      	cmp	r3, #65	; 0x41
 801624a:	d1c1      	bne.n	80161d0 <_scanf_float+0x70>
 801624c:	2a01      	cmp	r2, #1
 801624e:	d1bf      	bne.n	80161d0 <_scanf_float+0x70>
 8016250:	2202      	movs	r2, #2
 8016252:	e046      	b.n	80162e2 <_scanf_float+0x182>
 8016254:	2b65      	cmp	r3, #101	; 0x65
 8016256:	d07a      	beq.n	801634e <_scanf_float+0x1ee>
 8016258:	d818      	bhi.n	801628c <_scanf_float+0x12c>
 801625a:	2b54      	cmp	r3, #84	; 0x54
 801625c:	d066      	beq.n	801632c <_scanf_float+0x1cc>
 801625e:	d811      	bhi.n	8016284 <_scanf_float+0x124>
 8016260:	2b4e      	cmp	r3, #78	; 0x4e
 8016262:	d1b5      	bne.n	80161d0 <_scanf_float+0x70>
 8016264:	2a00      	cmp	r2, #0
 8016266:	d146      	bne.n	80162f6 <_scanf_float+0x196>
 8016268:	f1b9 0f00 	cmp.w	r9, #0
 801626c:	d145      	bne.n	80162fa <_scanf_float+0x19a>
 801626e:	6821      	ldr	r1, [r4, #0]
 8016270:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016274:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016278:	d13f      	bne.n	80162fa <_scanf_float+0x19a>
 801627a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801627e:	6021      	str	r1, [r4, #0]
 8016280:	2201      	movs	r2, #1
 8016282:	e02e      	b.n	80162e2 <_scanf_float+0x182>
 8016284:	2b59      	cmp	r3, #89	; 0x59
 8016286:	d01e      	beq.n	80162c6 <_scanf_float+0x166>
 8016288:	2b61      	cmp	r3, #97	; 0x61
 801628a:	e7de      	b.n	801624a <_scanf_float+0xea>
 801628c:	2b6e      	cmp	r3, #110	; 0x6e
 801628e:	d0e9      	beq.n	8016264 <_scanf_float+0x104>
 8016290:	d815      	bhi.n	80162be <_scanf_float+0x15e>
 8016292:	2b66      	cmp	r3, #102	; 0x66
 8016294:	d043      	beq.n	801631e <_scanf_float+0x1be>
 8016296:	2b69      	cmp	r3, #105	; 0x69
 8016298:	d19a      	bne.n	80161d0 <_scanf_float+0x70>
 801629a:	f1bb 0f00 	cmp.w	fp, #0
 801629e:	d138      	bne.n	8016312 <_scanf_float+0x1b2>
 80162a0:	f1b9 0f00 	cmp.w	r9, #0
 80162a4:	d197      	bne.n	80161d6 <_scanf_float+0x76>
 80162a6:	6821      	ldr	r1, [r4, #0]
 80162a8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80162ac:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80162b0:	d195      	bne.n	80161de <_scanf_float+0x7e>
 80162b2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80162b6:	6021      	str	r1, [r4, #0]
 80162b8:	f04f 0b01 	mov.w	fp, #1
 80162bc:	e011      	b.n	80162e2 <_scanf_float+0x182>
 80162be:	2b74      	cmp	r3, #116	; 0x74
 80162c0:	d034      	beq.n	801632c <_scanf_float+0x1cc>
 80162c2:	2b79      	cmp	r3, #121	; 0x79
 80162c4:	d184      	bne.n	80161d0 <_scanf_float+0x70>
 80162c6:	f1bb 0f07 	cmp.w	fp, #7
 80162ca:	d181      	bne.n	80161d0 <_scanf_float+0x70>
 80162cc:	f04f 0b08 	mov.w	fp, #8
 80162d0:	e007      	b.n	80162e2 <_scanf_float+0x182>
 80162d2:	eb12 0f0b 	cmn.w	r2, fp
 80162d6:	f47f af7b 	bne.w	80161d0 <_scanf_float+0x70>
 80162da:	6821      	ldr	r1, [r4, #0]
 80162dc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80162e0:	6021      	str	r1, [r4, #0]
 80162e2:	702b      	strb	r3, [r5, #0]
 80162e4:	3501      	adds	r5, #1
 80162e6:	e79a      	b.n	801621e <_scanf_float+0xbe>
 80162e8:	6821      	ldr	r1, [r4, #0]
 80162ea:	0608      	lsls	r0, r1, #24
 80162ec:	f57f af70 	bpl.w	80161d0 <_scanf_float+0x70>
 80162f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80162f4:	e7f4      	b.n	80162e0 <_scanf_float+0x180>
 80162f6:	2a02      	cmp	r2, #2
 80162f8:	d047      	beq.n	801638a <_scanf_float+0x22a>
 80162fa:	f1bb 0f01 	cmp.w	fp, #1
 80162fe:	d003      	beq.n	8016308 <_scanf_float+0x1a8>
 8016300:	f1bb 0f04 	cmp.w	fp, #4
 8016304:	f47f af64 	bne.w	80161d0 <_scanf_float+0x70>
 8016308:	f10b 0b01 	add.w	fp, fp, #1
 801630c:	fa5f fb8b 	uxtb.w	fp, fp
 8016310:	e7e7      	b.n	80162e2 <_scanf_float+0x182>
 8016312:	f1bb 0f03 	cmp.w	fp, #3
 8016316:	d0f7      	beq.n	8016308 <_scanf_float+0x1a8>
 8016318:	f1bb 0f05 	cmp.w	fp, #5
 801631c:	e7f2      	b.n	8016304 <_scanf_float+0x1a4>
 801631e:	f1bb 0f02 	cmp.w	fp, #2
 8016322:	f47f af55 	bne.w	80161d0 <_scanf_float+0x70>
 8016326:	f04f 0b03 	mov.w	fp, #3
 801632a:	e7da      	b.n	80162e2 <_scanf_float+0x182>
 801632c:	f1bb 0f06 	cmp.w	fp, #6
 8016330:	f47f af4e 	bne.w	80161d0 <_scanf_float+0x70>
 8016334:	f04f 0b07 	mov.w	fp, #7
 8016338:	e7d3      	b.n	80162e2 <_scanf_float+0x182>
 801633a:	6821      	ldr	r1, [r4, #0]
 801633c:	0588      	lsls	r0, r1, #22
 801633e:	f57f af47 	bpl.w	80161d0 <_scanf_float+0x70>
 8016342:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8016346:	6021      	str	r1, [r4, #0]
 8016348:	f8cd 9008 	str.w	r9, [sp, #8]
 801634c:	e7c9      	b.n	80162e2 <_scanf_float+0x182>
 801634e:	6821      	ldr	r1, [r4, #0]
 8016350:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8016354:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016358:	d006      	beq.n	8016368 <_scanf_float+0x208>
 801635a:	0548      	lsls	r0, r1, #21
 801635c:	f57f af38 	bpl.w	80161d0 <_scanf_float+0x70>
 8016360:	f1b9 0f00 	cmp.w	r9, #0
 8016364:	f43f af3b 	beq.w	80161de <_scanf_float+0x7e>
 8016368:	0588      	lsls	r0, r1, #22
 801636a:	bf58      	it	pl
 801636c:	9802      	ldrpl	r0, [sp, #8]
 801636e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016372:	bf58      	it	pl
 8016374:	eba9 0000 	subpl.w	r0, r9, r0
 8016378:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801637c:	bf58      	it	pl
 801637e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8016382:	6021      	str	r1, [r4, #0]
 8016384:	f04f 0900 	mov.w	r9, #0
 8016388:	e7ab      	b.n	80162e2 <_scanf_float+0x182>
 801638a:	2203      	movs	r2, #3
 801638c:	e7a9      	b.n	80162e2 <_scanf_float+0x182>
 801638e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016392:	9205      	str	r2, [sp, #20]
 8016394:	4631      	mov	r1, r6
 8016396:	4638      	mov	r0, r7
 8016398:	4798      	blx	r3
 801639a:	9a05      	ldr	r2, [sp, #20]
 801639c:	2800      	cmp	r0, #0
 801639e:	f43f af04 	beq.w	80161aa <_scanf_float+0x4a>
 80163a2:	e715      	b.n	80161d0 <_scanf_float+0x70>
 80163a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80163a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80163ac:	4632      	mov	r2, r6
 80163ae:	4638      	mov	r0, r7
 80163b0:	4798      	blx	r3
 80163b2:	6923      	ldr	r3, [r4, #16]
 80163b4:	3b01      	subs	r3, #1
 80163b6:	6123      	str	r3, [r4, #16]
 80163b8:	e715      	b.n	80161e6 <_scanf_float+0x86>
 80163ba:	f10b 33ff 	add.w	r3, fp, #4294967295
 80163be:	2b06      	cmp	r3, #6
 80163c0:	d80a      	bhi.n	80163d8 <_scanf_float+0x278>
 80163c2:	f1bb 0f02 	cmp.w	fp, #2
 80163c6:	d968      	bls.n	801649a <_scanf_float+0x33a>
 80163c8:	f1ab 0b03 	sub.w	fp, fp, #3
 80163cc:	fa5f fb8b 	uxtb.w	fp, fp
 80163d0:	eba5 0b0b 	sub.w	fp, r5, fp
 80163d4:	455d      	cmp	r5, fp
 80163d6:	d14b      	bne.n	8016470 <_scanf_float+0x310>
 80163d8:	6823      	ldr	r3, [r4, #0]
 80163da:	05da      	lsls	r2, r3, #23
 80163dc:	d51f      	bpl.n	801641e <_scanf_float+0x2be>
 80163de:	055b      	lsls	r3, r3, #21
 80163e0:	d468      	bmi.n	80164b4 <_scanf_float+0x354>
 80163e2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80163e6:	6923      	ldr	r3, [r4, #16]
 80163e8:	2965      	cmp	r1, #101	; 0x65
 80163ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80163ee:	f105 3bff 	add.w	fp, r5, #4294967295
 80163f2:	6123      	str	r3, [r4, #16]
 80163f4:	d00d      	beq.n	8016412 <_scanf_float+0x2b2>
 80163f6:	2945      	cmp	r1, #69	; 0x45
 80163f8:	d00b      	beq.n	8016412 <_scanf_float+0x2b2>
 80163fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80163fe:	4632      	mov	r2, r6
 8016400:	4638      	mov	r0, r7
 8016402:	4798      	blx	r3
 8016404:	6923      	ldr	r3, [r4, #16]
 8016406:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801640a:	3b01      	subs	r3, #1
 801640c:	f1a5 0b02 	sub.w	fp, r5, #2
 8016410:	6123      	str	r3, [r4, #16]
 8016412:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016416:	4632      	mov	r2, r6
 8016418:	4638      	mov	r0, r7
 801641a:	4798      	blx	r3
 801641c:	465d      	mov	r5, fp
 801641e:	6826      	ldr	r6, [r4, #0]
 8016420:	f016 0610 	ands.w	r6, r6, #16
 8016424:	d17a      	bne.n	801651c <_scanf_float+0x3bc>
 8016426:	702e      	strb	r6, [r5, #0]
 8016428:	6823      	ldr	r3, [r4, #0]
 801642a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801642e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016432:	d142      	bne.n	80164ba <_scanf_float+0x35a>
 8016434:	9b02      	ldr	r3, [sp, #8]
 8016436:	eba9 0303 	sub.w	r3, r9, r3
 801643a:	425a      	negs	r2, r3
 801643c:	2b00      	cmp	r3, #0
 801643e:	d149      	bne.n	80164d4 <_scanf_float+0x374>
 8016440:	2200      	movs	r2, #0
 8016442:	4641      	mov	r1, r8
 8016444:	4638      	mov	r0, r7
 8016446:	f000 ff03 	bl	8017250 <_strtod_r>
 801644a:	6825      	ldr	r5, [r4, #0]
 801644c:	f8da 3000 	ldr.w	r3, [sl]
 8016450:	f015 0f02 	tst.w	r5, #2
 8016454:	f103 0204 	add.w	r2, r3, #4
 8016458:	ec59 8b10 	vmov	r8, r9, d0
 801645c:	f8ca 2000 	str.w	r2, [sl]
 8016460:	d043      	beq.n	80164ea <_scanf_float+0x38a>
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	e9c3 8900 	strd	r8, r9, [r3]
 8016468:	68e3      	ldr	r3, [r4, #12]
 801646a:	3301      	adds	r3, #1
 801646c:	60e3      	str	r3, [r4, #12]
 801646e:	e6be      	b.n	80161ee <_scanf_float+0x8e>
 8016470:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016474:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016478:	4632      	mov	r2, r6
 801647a:	4638      	mov	r0, r7
 801647c:	4798      	blx	r3
 801647e:	6923      	ldr	r3, [r4, #16]
 8016480:	3b01      	subs	r3, #1
 8016482:	6123      	str	r3, [r4, #16]
 8016484:	e7a6      	b.n	80163d4 <_scanf_float+0x274>
 8016486:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801648a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801648e:	4632      	mov	r2, r6
 8016490:	4638      	mov	r0, r7
 8016492:	4798      	blx	r3
 8016494:	6923      	ldr	r3, [r4, #16]
 8016496:	3b01      	subs	r3, #1
 8016498:	6123      	str	r3, [r4, #16]
 801649a:	4545      	cmp	r5, r8
 801649c:	d8f3      	bhi.n	8016486 <_scanf_float+0x326>
 801649e:	e6a5      	b.n	80161ec <_scanf_float+0x8c>
 80164a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80164a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80164a8:	4632      	mov	r2, r6
 80164aa:	4638      	mov	r0, r7
 80164ac:	4798      	blx	r3
 80164ae:	6923      	ldr	r3, [r4, #16]
 80164b0:	3b01      	subs	r3, #1
 80164b2:	6123      	str	r3, [r4, #16]
 80164b4:	4545      	cmp	r5, r8
 80164b6:	d8f3      	bhi.n	80164a0 <_scanf_float+0x340>
 80164b8:	e698      	b.n	80161ec <_scanf_float+0x8c>
 80164ba:	9b03      	ldr	r3, [sp, #12]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d0bf      	beq.n	8016440 <_scanf_float+0x2e0>
 80164c0:	9904      	ldr	r1, [sp, #16]
 80164c2:	230a      	movs	r3, #10
 80164c4:	4632      	mov	r2, r6
 80164c6:	3101      	adds	r1, #1
 80164c8:	4638      	mov	r0, r7
 80164ca:	f000 ff4d 	bl	8017368 <_strtol_r>
 80164ce:	9b03      	ldr	r3, [sp, #12]
 80164d0:	9d04      	ldr	r5, [sp, #16]
 80164d2:	1ac2      	subs	r2, r0, r3
 80164d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80164d8:	429d      	cmp	r5, r3
 80164da:	bf28      	it	cs
 80164dc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80164e0:	490f      	ldr	r1, [pc, #60]	; (8016520 <_scanf_float+0x3c0>)
 80164e2:	4628      	mov	r0, r5
 80164e4:	f000 f858 	bl	8016598 <siprintf>
 80164e8:	e7aa      	b.n	8016440 <_scanf_float+0x2e0>
 80164ea:	f015 0504 	ands.w	r5, r5, #4
 80164ee:	d1b8      	bne.n	8016462 <_scanf_float+0x302>
 80164f0:	681f      	ldr	r7, [r3, #0]
 80164f2:	ee10 2a10 	vmov	r2, s0
 80164f6:	464b      	mov	r3, r9
 80164f8:	ee10 0a10 	vmov	r0, s0
 80164fc:	4649      	mov	r1, r9
 80164fe:	f7ea fb2d 	bl	8000b5c <__aeabi_dcmpun>
 8016502:	b128      	cbz	r0, 8016510 <_scanf_float+0x3b0>
 8016504:	4628      	mov	r0, r5
 8016506:	f000 f80d 	bl	8016524 <nanf>
 801650a:	ed87 0a00 	vstr	s0, [r7]
 801650e:	e7ab      	b.n	8016468 <_scanf_float+0x308>
 8016510:	4640      	mov	r0, r8
 8016512:	4649      	mov	r1, r9
 8016514:	f7ea fb80 	bl	8000c18 <__aeabi_d2f>
 8016518:	6038      	str	r0, [r7, #0]
 801651a:	e7a5      	b.n	8016468 <_scanf_float+0x308>
 801651c:	2600      	movs	r6, #0
 801651e:	e666      	b.n	80161ee <_scanf_float+0x8e>
 8016520:	0801a552 	.word	0x0801a552

08016524 <nanf>:
 8016524:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801652c <nanf+0x8>
 8016528:	4770      	bx	lr
 801652a:	bf00      	nop
 801652c:	7fc00000 	.word	0x7fc00000

08016530 <sniprintf>:
 8016530:	b40c      	push	{r2, r3}
 8016532:	b530      	push	{r4, r5, lr}
 8016534:	4b17      	ldr	r3, [pc, #92]	; (8016594 <sniprintf+0x64>)
 8016536:	1e0c      	subs	r4, r1, #0
 8016538:	b09d      	sub	sp, #116	; 0x74
 801653a:	681d      	ldr	r5, [r3, #0]
 801653c:	da08      	bge.n	8016550 <sniprintf+0x20>
 801653e:	238b      	movs	r3, #139	; 0x8b
 8016540:	602b      	str	r3, [r5, #0]
 8016542:	f04f 30ff 	mov.w	r0, #4294967295
 8016546:	b01d      	add	sp, #116	; 0x74
 8016548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801654c:	b002      	add	sp, #8
 801654e:	4770      	bx	lr
 8016550:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016554:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016558:	bf14      	ite	ne
 801655a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801655e:	4623      	moveq	r3, r4
 8016560:	9304      	str	r3, [sp, #16]
 8016562:	9307      	str	r3, [sp, #28]
 8016564:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016568:	9002      	str	r0, [sp, #8]
 801656a:	9006      	str	r0, [sp, #24]
 801656c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016570:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016572:	ab21      	add	r3, sp, #132	; 0x84
 8016574:	a902      	add	r1, sp, #8
 8016576:	4628      	mov	r0, r5
 8016578:	9301      	str	r3, [sp, #4]
 801657a:	f002 fddf 	bl	801913c <_svfiprintf_r>
 801657e:	1c43      	adds	r3, r0, #1
 8016580:	bfbc      	itt	lt
 8016582:	238b      	movlt	r3, #139	; 0x8b
 8016584:	602b      	strlt	r3, [r5, #0]
 8016586:	2c00      	cmp	r4, #0
 8016588:	d0dd      	beq.n	8016546 <sniprintf+0x16>
 801658a:	9b02      	ldr	r3, [sp, #8]
 801658c:	2200      	movs	r2, #0
 801658e:	701a      	strb	r2, [r3, #0]
 8016590:	e7d9      	b.n	8016546 <sniprintf+0x16>
 8016592:	bf00      	nop
 8016594:	2000000c 	.word	0x2000000c

08016598 <siprintf>:
 8016598:	b40e      	push	{r1, r2, r3}
 801659a:	b500      	push	{lr}
 801659c:	b09c      	sub	sp, #112	; 0x70
 801659e:	ab1d      	add	r3, sp, #116	; 0x74
 80165a0:	9002      	str	r0, [sp, #8]
 80165a2:	9006      	str	r0, [sp, #24]
 80165a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80165a8:	4809      	ldr	r0, [pc, #36]	; (80165d0 <siprintf+0x38>)
 80165aa:	9107      	str	r1, [sp, #28]
 80165ac:	9104      	str	r1, [sp, #16]
 80165ae:	4909      	ldr	r1, [pc, #36]	; (80165d4 <siprintf+0x3c>)
 80165b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80165b4:	9105      	str	r1, [sp, #20]
 80165b6:	6800      	ldr	r0, [r0, #0]
 80165b8:	9301      	str	r3, [sp, #4]
 80165ba:	a902      	add	r1, sp, #8
 80165bc:	f002 fdbe 	bl	801913c <_svfiprintf_r>
 80165c0:	9b02      	ldr	r3, [sp, #8]
 80165c2:	2200      	movs	r2, #0
 80165c4:	701a      	strb	r2, [r3, #0]
 80165c6:	b01c      	add	sp, #112	; 0x70
 80165c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80165cc:	b003      	add	sp, #12
 80165ce:	4770      	bx	lr
 80165d0:	2000000c 	.word	0x2000000c
 80165d4:	ffff0208 	.word	0xffff0208

080165d8 <siscanf>:
 80165d8:	b40e      	push	{r1, r2, r3}
 80165da:	b530      	push	{r4, r5, lr}
 80165dc:	b09c      	sub	sp, #112	; 0x70
 80165de:	ac1f      	add	r4, sp, #124	; 0x7c
 80165e0:	f44f 7201 	mov.w	r2, #516	; 0x204
 80165e4:	f854 5b04 	ldr.w	r5, [r4], #4
 80165e8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80165ec:	9002      	str	r0, [sp, #8]
 80165ee:	9006      	str	r0, [sp, #24]
 80165f0:	f7e9 fe06 	bl	8000200 <strlen>
 80165f4:	4b0b      	ldr	r3, [pc, #44]	; (8016624 <siscanf+0x4c>)
 80165f6:	9003      	str	r0, [sp, #12]
 80165f8:	9007      	str	r0, [sp, #28]
 80165fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80165fc:	480a      	ldr	r0, [pc, #40]	; (8016628 <siscanf+0x50>)
 80165fe:	9401      	str	r4, [sp, #4]
 8016600:	2300      	movs	r3, #0
 8016602:	930f      	str	r3, [sp, #60]	; 0x3c
 8016604:	9314      	str	r3, [sp, #80]	; 0x50
 8016606:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801660a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801660e:	462a      	mov	r2, r5
 8016610:	4623      	mov	r3, r4
 8016612:	a902      	add	r1, sp, #8
 8016614:	6800      	ldr	r0, [r0, #0]
 8016616:	f002 fee3 	bl	80193e0 <__ssvfiscanf_r>
 801661a:	b01c      	add	sp, #112	; 0x70
 801661c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016620:	b003      	add	sp, #12
 8016622:	4770      	bx	lr
 8016624:	0801662d 	.word	0x0801662d
 8016628:	2000000c 	.word	0x2000000c

0801662c <__seofread>:
 801662c:	2000      	movs	r0, #0
 801662e:	4770      	bx	lr

08016630 <sulp>:
 8016630:	b570      	push	{r4, r5, r6, lr}
 8016632:	4604      	mov	r4, r0
 8016634:	460d      	mov	r5, r1
 8016636:	ec45 4b10 	vmov	d0, r4, r5
 801663a:	4616      	mov	r6, r2
 801663c:	f002 fb3a 	bl	8018cb4 <__ulp>
 8016640:	ec51 0b10 	vmov	r0, r1, d0
 8016644:	b17e      	cbz	r6, 8016666 <sulp+0x36>
 8016646:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801664a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801664e:	2b00      	cmp	r3, #0
 8016650:	dd09      	ble.n	8016666 <sulp+0x36>
 8016652:	051b      	lsls	r3, r3, #20
 8016654:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016658:	2400      	movs	r4, #0
 801665a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801665e:	4622      	mov	r2, r4
 8016660:	462b      	mov	r3, r5
 8016662:	f7e9 ffe1 	bl	8000628 <__aeabi_dmul>
 8016666:	bd70      	pop	{r4, r5, r6, pc}

08016668 <_strtod_l>:
 8016668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801666c:	461f      	mov	r7, r3
 801666e:	b0a1      	sub	sp, #132	; 0x84
 8016670:	2300      	movs	r3, #0
 8016672:	4681      	mov	r9, r0
 8016674:	4638      	mov	r0, r7
 8016676:	460e      	mov	r6, r1
 8016678:	9217      	str	r2, [sp, #92]	; 0x5c
 801667a:	931c      	str	r3, [sp, #112]	; 0x70
 801667c:	f002 f824 	bl	80186c8 <__localeconv_l>
 8016680:	4680      	mov	r8, r0
 8016682:	6800      	ldr	r0, [r0, #0]
 8016684:	f7e9 fdbc 	bl	8000200 <strlen>
 8016688:	f04f 0a00 	mov.w	sl, #0
 801668c:	4604      	mov	r4, r0
 801668e:	f04f 0b00 	mov.w	fp, #0
 8016692:	961b      	str	r6, [sp, #108]	; 0x6c
 8016694:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016696:	781a      	ldrb	r2, [r3, #0]
 8016698:	2a0d      	cmp	r2, #13
 801669a:	d832      	bhi.n	8016702 <_strtod_l+0x9a>
 801669c:	2a09      	cmp	r2, #9
 801669e:	d236      	bcs.n	801670e <_strtod_l+0xa6>
 80166a0:	2a00      	cmp	r2, #0
 80166a2:	d03e      	beq.n	8016722 <_strtod_l+0xba>
 80166a4:	2300      	movs	r3, #0
 80166a6:	930d      	str	r3, [sp, #52]	; 0x34
 80166a8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80166aa:	782b      	ldrb	r3, [r5, #0]
 80166ac:	2b30      	cmp	r3, #48	; 0x30
 80166ae:	f040 80ac 	bne.w	801680a <_strtod_l+0x1a2>
 80166b2:	786b      	ldrb	r3, [r5, #1]
 80166b4:	2b58      	cmp	r3, #88	; 0x58
 80166b6:	d001      	beq.n	80166bc <_strtod_l+0x54>
 80166b8:	2b78      	cmp	r3, #120	; 0x78
 80166ba:	d167      	bne.n	801678c <_strtod_l+0x124>
 80166bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80166be:	9301      	str	r3, [sp, #4]
 80166c0:	ab1c      	add	r3, sp, #112	; 0x70
 80166c2:	9300      	str	r3, [sp, #0]
 80166c4:	9702      	str	r7, [sp, #8]
 80166c6:	ab1d      	add	r3, sp, #116	; 0x74
 80166c8:	4a88      	ldr	r2, [pc, #544]	; (80168ec <_strtod_l+0x284>)
 80166ca:	a91b      	add	r1, sp, #108	; 0x6c
 80166cc:	4648      	mov	r0, r9
 80166ce:	f001 fd12 	bl	80180f6 <__gethex>
 80166d2:	f010 0407 	ands.w	r4, r0, #7
 80166d6:	4606      	mov	r6, r0
 80166d8:	d005      	beq.n	80166e6 <_strtod_l+0x7e>
 80166da:	2c06      	cmp	r4, #6
 80166dc:	d12b      	bne.n	8016736 <_strtod_l+0xce>
 80166de:	3501      	adds	r5, #1
 80166e0:	2300      	movs	r3, #0
 80166e2:	951b      	str	r5, [sp, #108]	; 0x6c
 80166e4:	930d      	str	r3, [sp, #52]	; 0x34
 80166e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	f040 859a 	bne.w	8017222 <_strtod_l+0xbba>
 80166ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80166f0:	b1e3      	cbz	r3, 801672c <_strtod_l+0xc4>
 80166f2:	4652      	mov	r2, sl
 80166f4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80166f8:	ec43 2b10 	vmov	d0, r2, r3
 80166fc:	b021      	add	sp, #132	; 0x84
 80166fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016702:	2a2b      	cmp	r2, #43	; 0x2b
 8016704:	d015      	beq.n	8016732 <_strtod_l+0xca>
 8016706:	2a2d      	cmp	r2, #45	; 0x2d
 8016708:	d004      	beq.n	8016714 <_strtod_l+0xac>
 801670a:	2a20      	cmp	r2, #32
 801670c:	d1ca      	bne.n	80166a4 <_strtod_l+0x3c>
 801670e:	3301      	adds	r3, #1
 8016710:	931b      	str	r3, [sp, #108]	; 0x6c
 8016712:	e7bf      	b.n	8016694 <_strtod_l+0x2c>
 8016714:	2201      	movs	r2, #1
 8016716:	920d      	str	r2, [sp, #52]	; 0x34
 8016718:	1c5a      	adds	r2, r3, #1
 801671a:	921b      	str	r2, [sp, #108]	; 0x6c
 801671c:	785b      	ldrb	r3, [r3, #1]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d1c2      	bne.n	80166a8 <_strtod_l+0x40>
 8016722:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016724:	961b      	str	r6, [sp, #108]	; 0x6c
 8016726:	2b00      	cmp	r3, #0
 8016728:	f040 8579 	bne.w	801721e <_strtod_l+0xbb6>
 801672c:	4652      	mov	r2, sl
 801672e:	465b      	mov	r3, fp
 8016730:	e7e2      	b.n	80166f8 <_strtod_l+0x90>
 8016732:	2200      	movs	r2, #0
 8016734:	e7ef      	b.n	8016716 <_strtod_l+0xae>
 8016736:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016738:	b13a      	cbz	r2, 801674a <_strtod_l+0xe2>
 801673a:	2135      	movs	r1, #53	; 0x35
 801673c:	a81e      	add	r0, sp, #120	; 0x78
 801673e:	f002 fbb1 	bl	8018ea4 <__copybits>
 8016742:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016744:	4648      	mov	r0, r9
 8016746:	f002 f81d 	bl	8018784 <_Bfree>
 801674a:	3c01      	subs	r4, #1
 801674c:	2c04      	cmp	r4, #4
 801674e:	d806      	bhi.n	801675e <_strtod_l+0xf6>
 8016750:	e8df f004 	tbb	[pc, r4]
 8016754:	1714030a 	.word	0x1714030a
 8016758:	0a          	.byte	0x0a
 8016759:	00          	.byte	0x00
 801675a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801675e:	0730      	lsls	r0, r6, #28
 8016760:	d5c1      	bpl.n	80166e6 <_strtod_l+0x7e>
 8016762:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016766:	e7be      	b.n	80166e6 <_strtod_l+0x7e>
 8016768:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801676c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801676e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016772:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016776:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801677a:	e7f0      	b.n	801675e <_strtod_l+0xf6>
 801677c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80168f0 <_strtod_l+0x288>
 8016780:	e7ed      	b.n	801675e <_strtod_l+0xf6>
 8016782:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016786:	f04f 3aff 	mov.w	sl, #4294967295
 801678a:	e7e8      	b.n	801675e <_strtod_l+0xf6>
 801678c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801678e:	1c5a      	adds	r2, r3, #1
 8016790:	921b      	str	r2, [sp, #108]	; 0x6c
 8016792:	785b      	ldrb	r3, [r3, #1]
 8016794:	2b30      	cmp	r3, #48	; 0x30
 8016796:	d0f9      	beq.n	801678c <_strtod_l+0x124>
 8016798:	2b00      	cmp	r3, #0
 801679a:	d0a4      	beq.n	80166e6 <_strtod_l+0x7e>
 801679c:	2301      	movs	r3, #1
 801679e:	2500      	movs	r5, #0
 80167a0:	9306      	str	r3, [sp, #24]
 80167a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80167a4:	9308      	str	r3, [sp, #32]
 80167a6:	9507      	str	r5, [sp, #28]
 80167a8:	9505      	str	r5, [sp, #20]
 80167aa:	220a      	movs	r2, #10
 80167ac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80167ae:	7807      	ldrb	r7, [r0, #0]
 80167b0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80167b4:	b2d9      	uxtb	r1, r3
 80167b6:	2909      	cmp	r1, #9
 80167b8:	d929      	bls.n	801680e <_strtod_l+0x1a6>
 80167ba:	4622      	mov	r2, r4
 80167bc:	f8d8 1000 	ldr.w	r1, [r8]
 80167c0:	f003 f8f8 	bl	80199b4 <strncmp>
 80167c4:	2800      	cmp	r0, #0
 80167c6:	d031      	beq.n	801682c <_strtod_l+0x1c4>
 80167c8:	2000      	movs	r0, #0
 80167ca:	9c05      	ldr	r4, [sp, #20]
 80167cc:	9004      	str	r0, [sp, #16]
 80167ce:	463b      	mov	r3, r7
 80167d0:	4602      	mov	r2, r0
 80167d2:	2b65      	cmp	r3, #101	; 0x65
 80167d4:	d001      	beq.n	80167da <_strtod_l+0x172>
 80167d6:	2b45      	cmp	r3, #69	; 0x45
 80167d8:	d114      	bne.n	8016804 <_strtod_l+0x19c>
 80167da:	b924      	cbnz	r4, 80167e6 <_strtod_l+0x17e>
 80167dc:	b910      	cbnz	r0, 80167e4 <_strtod_l+0x17c>
 80167de:	9b06      	ldr	r3, [sp, #24]
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d09e      	beq.n	8016722 <_strtod_l+0xba>
 80167e4:	2400      	movs	r4, #0
 80167e6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80167e8:	1c73      	adds	r3, r6, #1
 80167ea:	931b      	str	r3, [sp, #108]	; 0x6c
 80167ec:	7873      	ldrb	r3, [r6, #1]
 80167ee:	2b2b      	cmp	r3, #43	; 0x2b
 80167f0:	d078      	beq.n	80168e4 <_strtod_l+0x27c>
 80167f2:	2b2d      	cmp	r3, #45	; 0x2d
 80167f4:	d070      	beq.n	80168d8 <_strtod_l+0x270>
 80167f6:	f04f 0c00 	mov.w	ip, #0
 80167fa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80167fe:	2f09      	cmp	r7, #9
 8016800:	d97c      	bls.n	80168fc <_strtod_l+0x294>
 8016802:	961b      	str	r6, [sp, #108]	; 0x6c
 8016804:	f04f 0e00 	mov.w	lr, #0
 8016808:	e09a      	b.n	8016940 <_strtod_l+0x2d8>
 801680a:	2300      	movs	r3, #0
 801680c:	e7c7      	b.n	801679e <_strtod_l+0x136>
 801680e:	9905      	ldr	r1, [sp, #20]
 8016810:	2908      	cmp	r1, #8
 8016812:	bfdd      	ittte	le
 8016814:	9907      	ldrle	r1, [sp, #28]
 8016816:	fb02 3301 	mlale	r3, r2, r1, r3
 801681a:	9307      	strle	r3, [sp, #28]
 801681c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016820:	9b05      	ldr	r3, [sp, #20]
 8016822:	3001      	adds	r0, #1
 8016824:	3301      	adds	r3, #1
 8016826:	9305      	str	r3, [sp, #20]
 8016828:	901b      	str	r0, [sp, #108]	; 0x6c
 801682a:	e7bf      	b.n	80167ac <_strtod_l+0x144>
 801682c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801682e:	191a      	adds	r2, r3, r4
 8016830:	921b      	str	r2, [sp, #108]	; 0x6c
 8016832:	9a05      	ldr	r2, [sp, #20]
 8016834:	5d1b      	ldrb	r3, [r3, r4]
 8016836:	2a00      	cmp	r2, #0
 8016838:	d037      	beq.n	80168aa <_strtod_l+0x242>
 801683a:	9c05      	ldr	r4, [sp, #20]
 801683c:	4602      	mov	r2, r0
 801683e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016842:	2909      	cmp	r1, #9
 8016844:	d913      	bls.n	801686e <_strtod_l+0x206>
 8016846:	2101      	movs	r1, #1
 8016848:	9104      	str	r1, [sp, #16]
 801684a:	e7c2      	b.n	80167d2 <_strtod_l+0x16a>
 801684c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801684e:	1c5a      	adds	r2, r3, #1
 8016850:	921b      	str	r2, [sp, #108]	; 0x6c
 8016852:	785b      	ldrb	r3, [r3, #1]
 8016854:	3001      	adds	r0, #1
 8016856:	2b30      	cmp	r3, #48	; 0x30
 8016858:	d0f8      	beq.n	801684c <_strtod_l+0x1e4>
 801685a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801685e:	2a08      	cmp	r2, #8
 8016860:	f200 84e4 	bhi.w	801722c <_strtod_l+0xbc4>
 8016864:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016866:	9208      	str	r2, [sp, #32]
 8016868:	4602      	mov	r2, r0
 801686a:	2000      	movs	r0, #0
 801686c:	4604      	mov	r4, r0
 801686e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016872:	f100 0101 	add.w	r1, r0, #1
 8016876:	d012      	beq.n	801689e <_strtod_l+0x236>
 8016878:	440a      	add	r2, r1
 801687a:	eb00 0c04 	add.w	ip, r0, r4
 801687e:	4621      	mov	r1, r4
 8016880:	270a      	movs	r7, #10
 8016882:	458c      	cmp	ip, r1
 8016884:	d113      	bne.n	80168ae <_strtod_l+0x246>
 8016886:	1821      	adds	r1, r4, r0
 8016888:	2908      	cmp	r1, #8
 801688a:	f104 0401 	add.w	r4, r4, #1
 801688e:	4404      	add	r4, r0
 8016890:	dc19      	bgt.n	80168c6 <_strtod_l+0x25e>
 8016892:	9b07      	ldr	r3, [sp, #28]
 8016894:	210a      	movs	r1, #10
 8016896:	fb01 e303 	mla	r3, r1, r3, lr
 801689a:	9307      	str	r3, [sp, #28]
 801689c:	2100      	movs	r1, #0
 801689e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168a0:	1c58      	adds	r0, r3, #1
 80168a2:	901b      	str	r0, [sp, #108]	; 0x6c
 80168a4:	785b      	ldrb	r3, [r3, #1]
 80168a6:	4608      	mov	r0, r1
 80168a8:	e7c9      	b.n	801683e <_strtod_l+0x1d6>
 80168aa:	9805      	ldr	r0, [sp, #20]
 80168ac:	e7d3      	b.n	8016856 <_strtod_l+0x1ee>
 80168ae:	2908      	cmp	r1, #8
 80168b0:	f101 0101 	add.w	r1, r1, #1
 80168b4:	dc03      	bgt.n	80168be <_strtod_l+0x256>
 80168b6:	9b07      	ldr	r3, [sp, #28]
 80168b8:	437b      	muls	r3, r7
 80168ba:	9307      	str	r3, [sp, #28]
 80168bc:	e7e1      	b.n	8016882 <_strtod_l+0x21a>
 80168be:	2910      	cmp	r1, #16
 80168c0:	bfd8      	it	le
 80168c2:	437d      	mulle	r5, r7
 80168c4:	e7dd      	b.n	8016882 <_strtod_l+0x21a>
 80168c6:	2c10      	cmp	r4, #16
 80168c8:	bfdc      	itt	le
 80168ca:	210a      	movle	r1, #10
 80168cc:	fb01 e505 	mlale	r5, r1, r5, lr
 80168d0:	e7e4      	b.n	801689c <_strtod_l+0x234>
 80168d2:	2301      	movs	r3, #1
 80168d4:	9304      	str	r3, [sp, #16]
 80168d6:	e781      	b.n	80167dc <_strtod_l+0x174>
 80168d8:	f04f 0c01 	mov.w	ip, #1
 80168dc:	1cb3      	adds	r3, r6, #2
 80168de:	931b      	str	r3, [sp, #108]	; 0x6c
 80168e0:	78b3      	ldrb	r3, [r6, #2]
 80168e2:	e78a      	b.n	80167fa <_strtod_l+0x192>
 80168e4:	f04f 0c00 	mov.w	ip, #0
 80168e8:	e7f8      	b.n	80168dc <_strtod_l+0x274>
 80168ea:	bf00      	nop
 80168ec:	0801a558 	.word	0x0801a558
 80168f0:	7ff00000 	.word	0x7ff00000
 80168f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168f6:	1c5f      	adds	r7, r3, #1
 80168f8:	971b      	str	r7, [sp, #108]	; 0x6c
 80168fa:	785b      	ldrb	r3, [r3, #1]
 80168fc:	2b30      	cmp	r3, #48	; 0x30
 80168fe:	d0f9      	beq.n	80168f4 <_strtod_l+0x28c>
 8016900:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016904:	2f08      	cmp	r7, #8
 8016906:	f63f af7d 	bhi.w	8016804 <_strtod_l+0x19c>
 801690a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801690e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016910:	930a      	str	r3, [sp, #40]	; 0x28
 8016912:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016914:	1c5f      	adds	r7, r3, #1
 8016916:	971b      	str	r7, [sp, #108]	; 0x6c
 8016918:	785b      	ldrb	r3, [r3, #1]
 801691a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801691e:	f1b8 0f09 	cmp.w	r8, #9
 8016922:	d937      	bls.n	8016994 <_strtod_l+0x32c>
 8016924:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016926:	1a7f      	subs	r7, r7, r1
 8016928:	2f08      	cmp	r7, #8
 801692a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801692e:	dc37      	bgt.n	80169a0 <_strtod_l+0x338>
 8016930:	45be      	cmp	lr, r7
 8016932:	bfa8      	it	ge
 8016934:	46be      	movge	lr, r7
 8016936:	f1bc 0f00 	cmp.w	ip, #0
 801693a:	d001      	beq.n	8016940 <_strtod_l+0x2d8>
 801693c:	f1ce 0e00 	rsb	lr, lr, #0
 8016940:	2c00      	cmp	r4, #0
 8016942:	d151      	bne.n	80169e8 <_strtod_l+0x380>
 8016944:	2800      	cmp	r0, #0
 8016946:	f47f aece 	bne.w	80166e6 <_strtod_l+0x7e>
 801694a:	9a06      	ldr	r2, [sp, #24]
 801694c:	2a00      	cmp	r2, #0
 801694e:	f47f aeca 	bne.w	80166e6 <_strtod_l+0x7e>
 8016952:	9a04      	ldr	r2, [sp, #16]
 8016954:	2a00      	cmp	r2, #0
 8016956:	f47f aee4 	bne.w	8016722 <_strtod_l+0xba>
 801695a:	2b4e      	cmp	r3, #78	; 0x4e
 801695c:	d027      	beq.n	80169ae <_strtod_l+0x346>
 801695e:	dc21      	bgt.n	80169a4 <_strtod_l+0x33c>
 8016960:	2b49      	cmp	r3, #73	; 0x49
 8016962:	f47f aede 	bne.w	8016722 <_strtod_l+0xba>
 8016966:	49a0      	ldr	r1, [pc, #640]	; (8016be8 <_strtod_l+0x580>)
 8016968:	a81b      	add	r0, sp, #108	; 0x6c
 801696a:	f001 fdf7 	bl	801855c <__match>
 801696e:	2800      	cmp	r0, #0
 8016970:	f43f aed7 	beq.w	8016722 <_strtod_l+0xba>
 8016974:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016976:	499d      	ldr	r1, [pc, #628]	; (8016bec <_strtod_l+0x584>)
 8016978:	3b01      	subs	r3, #1
 801697a:	a81b      	add	r0, sp, #108	; 0x6c
 801697c:	931b      	str	r3, [sp, #108]	; 0x6c
 801697e:	f001 fded 	bl	801855c <__match>
 8016982:	b910      	cbnz	r0, 801698a <_strtod_l+0x322>
 8016984:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016986:	3301      	adds	r3, #1
 8016988:	931b      	str	r3, [sp, #108]	; 0x6c
 801698a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016c00 <_strtod_l+0x598>
 801698e:	f04f 0a00 	mov.w	sl, #0
 8016992:	e6a8      	b.n	80166e6 <_strtod_l+0x7e>
 8016994:	210a      	movs	r1, #10
 8016996:	fb01 3e0e 	mla	lr, r1, lr, r3
 801699a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801699e:	e7b8      	b.n	8016912 <_strtod_l+0x2aa>
 80169a0:	46be      	mov	lr, r7
 80169a2:	e7c8      	b.n	8016936 <_strtod_l+0x2ce>
 80169a4:	2b69      	cmp	r3, #105	; 0x69
 80169a6:	d0de      	beq.n	8016966 <_strtod_l+0x2fe>
 80169a8:	2b6e      	cmp	r3, #110	; 0x6e
 80169aa:	f47f aeba 	bne.w	8016722 <_strtod_l+0xba>
 80169ae:	4990      	ldr	r1, [pc, #576]	; (8016bf0 <_strtod_l+0x588>)
 80169b0:	a81b      	add	r0, sp, #108	; 0x6c
 80169b2:	f001 fdd3 	bl	801855c <__match>
 80169b6:	2800      	cmp	r0, #0
 80169b8:	f43f aeb3 	beq.w	8016722 <_strtod_l+0xba>
 80169bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169be:	781b      	ldrb	r3, [r3, #0]
 80169c0:	2b28      	cmp	r3, #40	; 0x28
 80169c2:	d10e      	bne.n	80169e2 <_strtod_l+0x37a>
 80169c4:	aa1e      	add	r2, sp, #120	; 0x78
 80169c6:	498b      	ldr	r1, [pc, #556]	; (8016bf4 <_strtod_l+0x58c>)
 80169c8:	a81b      	add	r0, sp, #108	; 0x6c
 80169ca:	f001 fddb 	bl	8018584 <__hexnan>
 80169ce:	2805      	cmp	r0, #5
 80169d0:	d107      	bne.n	80169e2 <_strtod_l+0x37a>
 80169d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80169d4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80169d8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80169dc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80169e0:	e681      	b.n	80166e6 <_strtod_l+0x7e>
 80169e2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016c08 <_strtod_l+0x5a0>
 80169e6:	e7d2      	b.n	801698e <_strtod_l+0x326>
 80169e8:	ebae 0302 	sub.w	r3, lr, r2
 80169ec:	9306      	str	r3, [sp, #24]
 80169ee:	9b05      	ldr	r3, [sp, #20]
 80169f0:	9807      	ldr	r0, [sp, #28]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	bf08      	it	eq
 80169f6:	4623      	moveq	r3, r4
 80169f8:	2c10      	cmp	r4, #16
 80169fa:	9305      	str	r3, [sp, #20]
 80169fc:	46a0      	mov	r8, r4
 80169fe:	bfa8      	it	ge
 8016a00:	f04f 0810 	movge.w	r8, #16
 8016a04:	f7e9 fd96 	bl	8000534 <__aeabi_ui2d>
 8016a08:	2c09      	cmp	r4, #9
 8016a0a:	4682      	mov	sl, r0
 8016a0c:	468b      	mov	fp, r1
 8016a0e:	dc13      	bgt.n	8016a38 <_strtod_l+0x3d0>
 8016a10:	9b06      	ldr	r3, [sp, #24]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	f43f ae67 	beq.w	80166e6 <_strtod_l+0x7e>
 8016a18:	9b06      	ldr	r3, [sp, #24]
 8016a1a:	dd7a      	ble.n	8016b12 <_strtod_l+0x4aa>
 8016a1c:	2b16      	cmp	r3, #22
 8016a1e:	dc61      	bgt.n	8016ae4 <_strtod_l+0x47c>
 8016a20:	4a75      	ldr	r2, [pc, #468]	; (8016bf8 <_strtod_l+0x590>)
 8016a22:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016a26:	e9de 0100 	ldrd	r0, r1, [lr]
 8016a2a:	4652      	mov	r2, sl
 8016a2c:	465b      	mov	r3, fp
 8016a2e:	f7e9 fdfb 	bl	8000628 <__aeabi_dmul>
 8016a32:	4682      	mov	sl, r0
 8016a34:	468b      	mov	fp, r1
 8016a36:	e656      	b.n	80166e6 <_strtod_l+0x7e>
 8016a38:	4b6f      	ldr	r3, [pc, #444]	; (8016bf8 <_strtod_l+0x590>)
 8016a3a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016a3e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016a42:	f7e9 fdf1 	bl	8000628 <__aeabi_dmul>
 8016a46:	4606      	mov	r6, r0
 8016a48:	4628      	mov	r0, r5
 8016a4a:	460f      	mov	r7, r1
 8016a4c:	f7e9 fd72 	bl	8000534 <__aeabi_ui2d>
 8016a50:	4602      	mov	r2, r0
 8016a52:	460b      	mov	r3, r1
 8016a54:	4630      	mov	r0, r6
 8016a56:	4639      	mov	r1, r7
 8016a58:	f7e9 fc30 	bl	80002bc <__adddf3>
 8016a5c:	2c0f      	cmp	r4, #15
 8016a5e:	4682      	mov	sl, r0
 8016a60:	468b      	mov	fp, r1
 8016a62:	ddd5      	ble.n	8016a10 <_strtod_l+0x3a8>
 8016a64:	9b06      	ldr	r3, [sp, #24]
 8016a66:	eba4 0808 	sub.w	r8, r4, r8
 8016a6a:	4498      	add	r8, r3
 8016a6c:	f1b8 0f00 	cmp.w	r8, #0
 8016a70:	f340 8096 	ble.w	8016ba0 <_strtod_l+0x538>
 8016a74:	f018 030f 	ands.w	r3, r8, #15
 8016a78:	d00a      	beq.n	8016a90 <_strtod_l+0x428>
 8016a7a:	495f      	ldr	r1, [pc, #380]	; (8016bf8 <_strtod_l+0x590>)
 8016a7c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016a80:	4652      	mov	r2, sl
 8016a82:	465b      	mov	r3, fp
 8016a84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a88:	f7e9 fdce 	bl	8000628 <__aeabi_dmul>
 8016a8c:	4682      	mov	sl, r0
 8016a8e:	468b      	mov	fp, r1
 8016a90:	f038 080f 	bics.w	r8, r8, #15
 8016a94:	d073      	beq.n	8016b7e <_strtod_l+0x516>
 8016a96:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016a9a:	dd47      	ble.n	8016b2c <_strtod_l+0x4c4>
 8016a9c:	2400      	movs	r4, #0
 8016a9e:	46a0      	mov	r8, r4
 8016aa0:	9407      	str	r4, [sp, #28]
 8016aa2:	9405      	str	r4, [sp, #20]
 8016aa4:	2322      	movs	r3, #34	; 0x22
 8016aa6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016c00 <_strtod_l+0x598>
 8016aaa:	f8c9 3000 	str.w	r3, [r9]
 8016aae:	f04f 0a00 	mov.w	sl, #0
 8016ab2:	9b07      	ldr	r3, [sp, #28]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	f43f ae16 	beq.w	80166e6 <_strtod_l+0x7e>
 8016aba:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016abc:	4648      	mov	r0, r9
 8016abe:	f001 fe61 	bl	8018784 <_Bfree>
 8016ac2:	9905      	ldr	r1, [sp, #20]
 8016ac4:	4648      	mov	r0, r9
 8016ac6:	f001 fe5d 	bl	8018784 <_Bfree>
 8016aca:	4641      	mov	r1, r8
 8016acc:	4648      	mov	r0, r9
 8016ace:	f001 fe59 	bl	8018784 <_Bfree>
 8016ad2:	9907      	ldr	r1, [sp, #28]
 8016ad4:	4648      	mov	r0, r9
 8016ad6:	f001 fe55 	bl	8018784 <_Bfree>
 8016ada:	4621      	mov	r1, r4
 8016adc:	4648      	mov	r0, r9
 8016ade:	f001 fe51 	bl	8018784 <_Bfree>
 8016ae2:	e600      	b.n	80166e6 <_strtod_l+0x7e>
 8016ae4:	9a06      	ldr	r2, [sp, #24]
 8016ae6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016aea:	4293      	cmp	r3, r2
 8016aec:	dbba      	blt.n	8016a64 <_strtod_l+0x3fc>
 8016aee:	4d42      	ldr	r5, [pc, #264]	; (8016bf8 <_strtod_l+0x590>)
 8016af0:	f1c4 040f 	rsb	r4, r4, #15
 8016af4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016af8:	4652      	mov	r2, sl
 8016afa:	465b      	mov	r3, fp
 8016afc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b00:	f7e9 fd92 	bl	8000628 <__aeabi_dmul>
 8016b04:	9b06      	ldr	r3, [sp, #24]
 8016b06:	1b1c      	subs	r4, r3, r4
 8016b08:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016b0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016b10:	e78d      	b.n	8016a2e <_strtod_l+0x3c6>
 8016b12:	f113 0f16 	cmn.w	r3, #22
 8016b16:	dba5      	blt.n	8016a64 <_strtod_l+0x3fc>
 8016b18:	4a37      	ldr	r2, [pc, #220]	; (8016bf8 <_strtod_l+0x590>)
 8016b1a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016b1e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016b22:	4650      	mov	r0, sl
 8016b24:	4659      	mov	r1, fp
 8016b26:	f7e9 fea9 	bl	800087c <__aeabi_ddiv>
 8016b2a:	e782      	b.n	8016a32 <_strtod_l+0x3ca>
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	4e33      	ldr	r6, [pc, #204]	; (8016bfc <_strtod_l+0x594>)
 8016b30:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016b34:	4650      	mov	r0, sl
 8016b36:	4659      	mov	r1, fp
 8016b38:	461d      	mov	r5, r3
 8016b3a:	f1b8 0f01 	cmp.w	r8, #1
 8016b3e:	dc21      	bgt.n	8016b84 <_strtod_l+0x51c>
 8016b40:	b10b      	cbz	r3, 8016b46 <_strtod_l+0x4de>
 8016b42:	4682      	mov	sl, r0
 8016b44:	468b      	mov	fp, r1
 8016b46:	4b2d      	ldr	r3, [pc, #180]	; (8016bfc <_strtod_l+0x594>)
 8016b48:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016b4c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016b50:	4652      	mov	r2, sl
 8016b52:	465b      	mov	r3, fp
 8016b54:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016b58:	f7e9 fd66 	bl	8000628 <__aeabi_dmul>
 8016b5c:	4b28      	ldr	r3, [pc, #160]	; (8016c00 <_strtod_l+0x598>)
 8016b5e:	460a      	mov	r2, r1
 8016b60:	400b      	ands	r3, r1
 8016b62:	4928      	ldr	r1, [pc, #160]	; (8016c04 <_strtod_l+0x59c>)
 8016b64:	428b      	cmp	r3, r1
 8016b66:	4682      	mov	sl, r0
 8016b68:	d898      	bhi.n	8016a9c <_strtod_l+0x434>
 8016b6a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016b6e:	428b      	cmp	r3, r1
 8016b70:	bf86      	itte	hi
 8016b72:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016c0c <_strtod_l+0x5a4>
 8016b76:	f04f 3aff 	movhi.w	sl, #4294967295
 8016b7a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016b7e:	2300      	movs	r3, #0
 8016b80:	9304      	str	r3, [sp, #16]
 8016b82:	e077      	b.n	8016c74 <_strtod_l+0x60c>
 8016b84:	f018 0f01 	tst.w	r8, #1
 8016b88:	d006      	beq.n	8016b98 <_strtod_l+0x530>
 8016b8a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b92:	f7e9 fd49 	bl	8000628 <__aeabi_dmul>
 8016b96:	2301      	movs	r3, #1
 8016b98:	3501      	adds	r5, #1
 8016b9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016b9e:	e7cc      	b.n	8016b3a <_strtod_l+0x4d2>
 8016ba0:	d0ed      	beq.n	8016b7e <_strtod_l+0x516>
 8016ba2:	f1c8 0800 	rsb	r8, r8, #0
 8016ba6:	f018 020f 	ands.w	r2, r8, #15
 8016baa:	d00a      	beq.n	8016bc2 <_strtod_l+0x55a>
 8016bac:	4b12      	ldr	r3, [pc, #72]	; (8016bf8 <_strtod_l+0x590>)
 8016bae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016bb2:	4650      	mov	r0, sl
 8016bb4:	4659      	mov	r1, fp
 8016bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bba:	f7e9 fe5f 	bl	800087c <__aeabi_ddiv>
 8016bbe:	4682      	mov	sl, r0
 8016bc0:	468b      	mov	fp, r1
 8016bc2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016bc6:	d0da      	beq.n	8016b7e <_strtod_l+0x516>
 8016bc8:	f1b8 0f1f 	cmp.w	r8, #31
 8016bcc:	dd20      	ble.n	8016c10 <_strtod_l+0x5a8>
 8016bce:	2400      	movs	r4, #0
 8016bd0:	46a0      	mov	r8, r4
 8016bd2:	9407      	str	r4, [sp, #28]
 8016bd4:	9405      	str	r4, [sp, #20]
 8016bd6:	2322      	movs	r3, #34	; 0x22
 8016bd8:	f04f 0a00 	mov.w	sl, #0
 8016bdc:	f04f 0b00 	mov.w	fp, #0
 8016be0:	f8c9 3000 	str.w	r3, [r9]
 8016be4:	e765      	b.n	8016ab2 <_strtod_l+0x44a>
 8016be6:	bf00      	nop
 8016be8:	0801a525 	.word	0x0801a525
 8016bec:	0801a5ab 	.word	0x0801a5ab
 8016bf0:	0801a52d 	.word	0x0801a52d
 8016bf4:	0801a56c 	.word	0x0801a56c
 8016bf8:	0801a650 	.word	0x0801a650
 8016bfc:	0801a628 	.word	0x0801a628
 8016c00:	7ff00000 	.word	0x7ff00000
 8016c04:	7ca00000 	.word	0x7ca00000
 8016c08:	fff80000 	.word	0xfff80000
 8016c0c:	7fefffff 	.word	0x7fefffff
 8016c10:	f018 0310 	ands.w	r3, r8, #16
 8016c14:	bf18      	it	ne
 8016c16:	236a      	movne	r3, #106	; 0x6a
 8016c18:	4da0      	ldr	r5, [pc, #640]	; (8016e9c <_strtod_l+0x834>)
 8016c1a:	9304      	str	r3, [sp, #16]
 8016c1c:	4650      	mov	r0, sl
 8016c1e:	4659      	mov	r1, fp
 8016c20:	2300      	movs	r3, #0
 8016c22:	f1b8 0f00 	cmp.w	r8, #0
 8016c26:	f300 810a 	bgt.w	8016e3e <_strtod_l+0x7d6>
 8016c2a:	b10b      	cbz	r3, 8016c30 <_strtod_l+0x5c8>
 8016c2c:	4682      	mov	sl, r0
 8016c2e:	468b      	mov	fp, r1
 8016c30:	9b04      	ldr	r3, [sp, #16]
 8016c32:	b1bb      	cbz	r3, 8016c64 <_strtod_l+0x5fc>
 8016c34:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016c38:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	4659      	mov	r1, fp
 8016c40:	dd10      	ble.n	8016c64 <_strtod_l+0x5fc>
 8016c42:	2b1f      	cmp	r3, #31
 8016c44:	f340 8107 	ble.w	8016e56 <_strtod_l+0x7ee>
 8016c48:	2b34      	cmp	r3, #52	; 0x34
 8016c4a:	bfde      	ittt	le
 8016c4c:	3b20      	suble	r3, #32
 8016c4e:	f04f 32ff 	movle.w	r2, #4294967295
 8016c52:	fa02 f303 	lslle.w	r3, r2, r3
 8016c56:	f04f 0a00 	mov.w	sl, #0
 8016c5a:	bfcc      	ite	gt
 8016c5c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016c60:	ea03 0b01 	andle.w	fp, r3, r1
 8016c64:	2200      	movs	r2, #0
 8016c66:	2300      	movs	r3, #0
 8016c68:	4650      	mov	r0, sl
 8016c6a:	4659      	mov	r1, fp
 8016c6c:	f7e9 ff44 	bl	8000af8 <__aeabi_dcmpeq>
 8016c70:	2800      	cmp	r0, #0
 8016c72:	d1ac      	bne.n	8016bce <_strtod_l+0x566>
 8016c74:	9b07      	ldr	r3, [sp, #28]
 8016c76:	9300      	str	r3, [sp, #0]
 8016c78:	9a05      	ldr	r2, [sp, #20]
 8016c7a:	9908      	ldr	r1, [sp, #32]
 8016c7c:	4623      	mov	r3, r4
 8016c7e:	4648      	mov	r0, r9
 8016c80:	f001 fdd2 	bl	8018828 <__s2b>
 8016c84:	9007      	str	r0, [sp, #28]
 8016c86:	2800      	cmp	r0, #0
 8016c88:	f43f af08 	beq.w	8016a9c <_strtod_l+0x434>
 8016c8c:	9a06      	ldr	r2, [sp, #24]
 8016c8e:	9b06      	ldr	r3, [sp, #24]
 8016c90:	2a00      	cmp	r2, #0
 8016c92:	f1c3 0300 	rsb	r3, r3, #0
 8016c96:	bfa8      	it	ge
 8016c98:	2300      	movge	r3, #0
 8016c9a:	930e      	str	r3, [sp, #56]	; 0x38
 8016c9c:	2400      	movs	r4, #0
 8016c9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016ca2:	9316      	str	r3, [sp, #88]	; 0x58
 8016ca4:	46a0      	mov	r8, r4
 8016ca6:	9b07      	ldr	r3, [sp, #28]
 8016ca8:	4648      	mov	r0, r9
 8016caa:	6859      	ldr	r1, [r3, #4]
 8016cac:	f001 fd36 	bl	801871c <_Balloc>
 8016cb0:	9005      	str	r0, [sp, #20]
 8016cb2:	2800      	cmp	r0, #0
 8016cb4:	f43f aef6 	beq.w	8016aa4 <_strtod_l+0x43c>
 8016cb8:	9b07      	ldr	r3, [sp, #28]
 8016cba:	691a      	ldr	r2, [r3, #16]
 8016cbc:	3202      	adds	r2, #2
 8016cbe:	f103 010c 	add.w	r1, r3, #12
 8016cc2:	0092      	lsls	r2, r2, #2
 8016cc4:	300c      	adds	r0, #12
 8016cc6:	f7fe fddb 	bl	8015880 <memcpy>
 8016cca:	aa1e      	add	r2, sp, #120	; 0x78
 8016ccc:	a91d      	add	r1, sp, #116	; 0x74
 8016cce:	ec4b ab10 	vmov	d0, sl, fp
 8016cd2:	4648      	mov	r0, r9
 8016cd4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016cd8:	f002 f862 	bl	8018da0 <__d2b>
 8016cdc:	901c      	str	r0, [sp, #112]	; 0x70
 8016cde:	2800      	cmp	r0, #0
 8016ce0:	f43f aee0 	beq.w	8016aa4 <_strtod_l+0x43c>
 8016ce4:	2101      	movs	r1, #1
 8016ce6:	4648      	mov	r0, r9
 8016ce8:	f001 fe2a 	bl	8018940 <__i2b>
 8016cec:	4680      	mov	r8, r0
 8016cee:	2800      	cmp	r0, #0
 8016cf0:	f43f aed8 	beq.w	8016aa4 <_strtod_l+0x43c>
 8016cf4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016cf6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016cf8:	2e00      	cmp	r6, #0
 8016cfa:	bfab      	itete	ge
 8016cfc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016cfe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016d00:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016d02:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016d04:	bfac      	ite	ge
 8016d06:	18f7      	addge	r7, r6, r3
 8016d08:	1b9d      	sublt	r5, r3, r6
 8016d0a:	9b04      	ldr	r3, [sp, #16]
 8016d0c:	1af6      	subs	r6, r6, r3
 8016d0e:	4416      	add	r6, r2
 8016d10:	4b63      	ldr	r3, [pc, #396]	; (8016ea0 <_strtod_l+0x838>)
 8016d12:	3e01      	subs	r6, #1
 8016d14:	429e      	cmp	r6, r3
 8016d16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016d1a:	f280 80af 	bge.w	8016e7c <_strtod_l+0x814>
 8016d1e:	1b9b      	subs	r3, r3, r6
 8016d20:	2b1f      	cmp	r3, #31
 8016d22:	eba2 0203 	sub.w	r2, r2, r3
 8016d26:	f04f 0101 	mov.w	r1, #1
 8016d2a:	f300 809b 	bgt.w	8016e64 <_strtod_l+0x7fc>
 8016d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8016d32:	930f      	str	r3, [sp, #60]	; 0x3c
 8016d34:	2300      	movs	r3, #0
 8016d36:	930a      	str	r3, [sp, #40]	; 0x28
 8016d38:	18be      	adds	r6, r7, r2
 8016d3a:	9b04      	ldr	r3, [sp, #16]
 8016d3c:	42b7      	cmp	r7, r6
 8016d3e:	4415      	add	r5, r2
 8016d40:	441d      	add	r5, r3
 8016d42:	463b      	mov	r3, r7
 8016d44:	bfa8      	it	ge
 8016d46:	4633      	movge	r3, r6
 8016d48:	42ab      	cmp	r3, r5
 8016d4a:	bfa8      	it	ge
 8016d4c:	462b      	movge	r3, r5
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	bfc2      	ittt	gt
 8016d52:	1af6      	subgt	r6, r6, r3
 8016d54:	1aed      	subgt	r5, r5, r3
 8016d56:	1aff      	subgt	r7, r7, r3
 8016d58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d5a:	b1bb      	cbz	r3, 8016d8c <_strtod_l+0x724>
 8016d5c:	4641      	mov	r1, r8
 8016d5e:	461a      	mov	r2, r3
 8016d60:	4648      	mov	r0, r9
 8016d62:	f001 fe8d 	bl	8018a80 <__pow5mult>
 8016d66:	4680      	mov	r8, r0
 8016d68:	2800      	cmp	r0, #0
 8016d6a:	f43f ae9b 	beq.w	8016aa4 <_strtod_l+0x43c>
 8016d6e:	4601      	mov	r1, r0
 8016d70:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016d72:	4648      	mov	r0, r9
 8016d74:	f001 fded 	bl	8018952 <__multiply>
 8016d78:	900c      	str	r0, [sp, #48]	; 0x30
 8016d7a:	2800      	cmp	r0, #0
 8016d7c:	f43f ae92 	beq.w	8016aa4 <_strtod_l+0x43c>
 8016d80:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016d82:	4648      	mov	r0, r9
 8016d84:	f001 fcfe 	bl	8018784 <_Bfree>
 8016d88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d8a:	931c      	str	r3, [sp, #112]	; 0x70
 8016d8c:	2e00      	cmp	r6, #0
 8016d8e:	dc7a      	bgt.n	8016e86 <_strtod_l+0x81e>
 8016d90:	9b06      	ldr	r3, [sp, #24]
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	dd08      	ble.n	8016da8 <_strtod_l+0x740>
 8016d96:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016d98:	9905      	ldr	r1, [sp, #20]
 8016d9a:	4648      	mov	r0, r9
 8016d9c:	f001 fe70 	bl	8018a80 <__pow5mult>
 8016da0:	9005      	str	r0, [sp, #20]
 8016da2:	2800      	cmp	r0, #0
 8016da4:	f43f ae7e 	beq.w	8016aa4 <_strtod_l+0x43c>
 8016da8:	2d00      	cmp	r5, #0
 8016daa:	dd08      	ble.n	8016dbe <_strtod_l+0x756>
 8016dac:	462a      	mov	r2, r5
 8016dae:	9905      	ldr	r1, [sp, #20]
 8016db0:	4648      	mov	r0, r9
 8016db2:	f001 feb3 	bl	8018b1c <__lshift>
 8016db6:	9005      	str	r0, [sp, #20]
 8016db8:	2800      	cmp	r0, #0
 8016dba:	f43f ae73 	beq.w	8016aa4 <_strtod_l+0x43c>
 8016dbe:	2f00      	cmp	r7, #0
 8016dc0:	dd08      	ble.n	8016dd4 <_strtod_l+0x76c>
 8016dc2:	4641      	mov	r1, r8
 8016dc4:	463a      	mov	r2, r7
 8016dc6:	4648      	mov	r0, r9
 8016dc8:	f001 fea8 	bl	8018b1c <__lshift>
 8016dcc:	4680      	mov	r8, r0
 8016dce:	2800      	cmp	r0, #0
 8016dd0:	f43f ae68 	beq.w	8016aa4 <_strtod_l+0x43c>
 8016dd4:	9a05      	ldr	r2, [sp, #20]
 8016dd6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016dd8:	4648      	mov	r0, r9
 8016dda:	f001 ff0d 	bl	8018bf8 <__mdiff>
 8016dde:	4604      	mov	r4, r0
 8016de0:	2800      	cmp	r0, #0
 8016de2:	f43f ae5f 	beq.w	8016aa4 <_strtod_l+0x43c>
 8016de6:	68c3      	ldr	r3, [r0, #12]
 8016de8:	930c      	str	r3, [sp, #48]	; 0x30
 8016dea:	2300      	movs	r3, #0
 8016dec:	60c3      	str	r3, [r0, #12]
 8016dee:	4641      	mov	r1, r8
 8016df0:	f001 fee8 	bl	8018bc4 <__mcmp>
 8016df4:	2800      	cmp	r0, #0
 8016df6:	da55      	bge.n	8016ea4 <_strtod_l+0x83c>
 8016df8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016dfa:	b9e3      	cbnz	r3, 8016e36 <_strtod_l+0x7ce>
 8016dfc:	f1ba 0f00 	cmp.w	sl, #0
 8016e00:	d119      	bne.n	8016e36 <_strtod_l+0x7ce>
 8016e02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016e06:	b9b3      	cbnz	r3, 8016e36 <_strtod_l+0x7ce>
 8016e08:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016e0c:	0d1b      	lsrs	r3, r3, #20
 8016e0e:	051b      	lsls	r3, r3, #20
 8016e10:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016e14:	d90f      	bls.n	8016e36 <_strtod_l+0x7ce>
 8016e16:	6963      	ldr	r3, [r4, #20]
 8016e18:	b913      	cbnz	r3, 8016e20 <_strtod_l+0x7b8>
 8016e1a:	6923      	ldr	r3, [r4, #16]
 8016e1c:	2b01      	cmp	r3, #1
 8016e1e:	dd0a      	ble.n	8016e36 <_strtod_l+0x7ce>
 8016e20:	4621      	mov	r1, r4
 8016e22:	2201      	movs	r2, #1
 8016e24:	4648      	mov	r0, r9
 8016e26:	f001 fe79 	bl	8018b1c <__lshift>
 8016e2a:	4641      	mov	r1, r8
 8016e2c:	4604      	mov	r4, r0
 8016e2e:	f001 fec9 	bl	8018bc4 <__mcmp>
 8016e32:	2800      	cmp	r0, #0
 8016e34:	dc67      	bgt.n	8016f06 <_strtod_l+0x89e>
 8016e36:	9b04      	ldr	r3, [sp, #16]
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d171      	bne.n	8016f20 <_strtod_l+0x8b8>
 8016e3c:	e63d      	b.n	8016aba <_strtod_l+0x452>
 8016e3e:	f018 0f01 	tst.w	r8, #1
 8016e42:	d004      	beq.n	8016e4e <_strtod_l+0x7e6>
 8016e44:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016e48:	f7e9 fbee 	bl	8000628 <__aeabi_dmul>
 8016e4c:	2301      	movs	r3, #1
 8016e4e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016e52:	3508      	adds	r5, #8
 8016e54:	e6e5      	b.n	8016c22 <_strtod_l+0x5ba>
 8016e56:	f04f 32ff 	mov.w	r2, #4294967295
 8016e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8016e5e:	ea03 0a0a 	and.w	sl, r3, sl
 8016e62:	e6ff      	b.n	8016c64 <_strtod_l+0x5fc>
 8016e64:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016e68:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016e6c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016e70:	36e2      	adds	r6, #226	; 0xe2
 8016e72:	fa01 f306 	lsl.w	r3, r1, r6
 8016e76:	930a      	str	r3, [sp, #40]	; 0x28
 8016e78:	910f      	str	r1, [sp, #60]	; 0x3c
 8016e7a:	e75d      	b.n	8016d38 <_strtod_l+0x6d0>
 8016e7c:	2300      	movs	r3, #0
 8016e7e:	930a      	str	r3, [sp, #40]	; 0x28
 8016e80:	2301      	movs	r3, #1
 8016e82:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e84:	e758      	b.n	8016d38 <_strtod_l+0x6d0>
 8016e86:	4632      	mov	r2, r6
 8016e88:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016e8a:	4648      	mov	r0, r9
 8016e8c:	f001 fe46 	bl	8018b1c <__lshift>
 8016e90:	901c      	str	r0, [sp, #112]	; 0x70
 8016e92:	2800      	cmp	r0, #0
 8016e94:	f47f af7c 	bne.w	8016d90 <_strtod_l+0x728>
 8016e98:	e604      	b.n	8016aa4 <_strtod_l+0x43c>
 8016e9a:	bf00      	nop
 8016e9c:	0801a580 	.word	0x0801a580
 8016ea0:	fffffc02 	.word	0xfffffc02
 8016ea4:	465d      	mov	r5, fp
 8016ea6:	f040 8086 	bne.w	8016fb6 <_strtod_l+0x94e>
 8016eaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016eac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016eb0:	b32a      	cbz	r2, 8016efe <_strtod_l+0x896>
 8016eb2:	4aaf      	ldr	r2, [pc, #700]	; (8017170 <_strtod_l+0xb08>)
 8016eb4:	4293      	cmp	r3, r2
 8016eb6:	d153      	bne.n	8016f60 <_strtod_l+0x8f8>
 8016eb8:	9b04      	ldr	r3, [sp, #16]
 8016eba:	4650      	mov	r0, sl
 8016ebc:	b1d3      	cbz	r3, 8016ef4 <_strtod_l+0x88c>
 8016ebe:	4aad      	ldr	r2, [pc, #692]	; (8017174 <_strtod_l+0xb0c>)
 8016ec0:	402a      	ands	r2, r5
 8016ec2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016ec6:	f04f 31ff 	mov.w	r1, #4294967295
 8016eca:	d816      	bhi.n	8016efa <_strtod_l+0x892>
 8016ecc:	0d12      	lsrs	r2, r2, #20
 8016ece:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8016ed6:	4298      	cmp	r0, r3
 8016ed8:	d142      	bne.n	8016f60 <_strtod_l+0x8f8>
 8016eda:	4ba7      	ldr	r3, [pc, #668]	; (8017178 <_strtod_l+0xb10>)
 8016edc:	429d      	cmp	r5, r3
 8016ede:	d102      	bne.n	8016ee6 <_strtod_l+0x87e>
 8016ee0:	3001      	adds	r0, #1
 8016ee2:	f43f addf 	beq.w	8016aa4 <_strtod_l+0x43c>
 8016ee6:	4ba3      	ldr	r3, [pc, #652]	; (8017174 <_strtod_l+0xb0c>)
 8016ee8:	402b      	ands	r3, r5
 8016eea:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016eee:	f04f 0a00 	mov.w	sl, #0
 8016ef2:	e7a0      	b.n	8016e36 <_strtod_l+0x7ce>
 8016ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8016ef8:	e7ed      	b.n	8016ed6 <_strtod_l+0x86e>
 8016efa:	460b      	mov	r3, r1
 8016efc:	e7eb      	b.n	8016ed6 <_strtod_l+0x86e>
 8016efe:	bb7b      	cbnz	r3, 8016f60 <_strtod_l+0x8f8>
 8016f00:	f1ba 0f00 	cmp.w	sl, #0
 8016f04:	d12c      	bne.n	8016f60 <_strtod_l+0x8f8>
 8016f06:	9904      	ldr	r1, [sp, #16]
 8016f08:	4a9a      	ldr	r2, [pc, #616]	; (8017174 <_strtod_l+0xb0c>)
 8016f0a:	465b      	mov	r3, fp
 8016f0c:	b1f1      	cbz	r1, 8016f4c <_strtod_l+0x8e4>
 8016f0e:	ea02 010b 	and.w	r1, r2, fp
 8016f12:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016f16:	dc19      	bgt.n	8016f4c <_strtod_l+0x8e4>
 8016f18:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016f1c:	f77f ae5b 	ble.w	8016bd6 <_strtod_l+0x56e>
 8016f20:	4a96      	ldr	r2, [pc, #600]	; (801717c <_strtod_l+0xb14>)
 8016f22:	2300      	movs	r3, #0
 8016f24:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016f28:	4650      	mov	r0, sl
 8016f2a:	4659      	mov	r1, fp
 8016f2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016f30:	f7e9 fb7a 	bl	8000628 <__aeabi_dmul>
 8016f34:	4682      	mov	sl, r0
 8016f36:	468b      	mov	fp, r1
 8016f38:	2900      	cmp	r1, #0
 8016f3a:	f47f adbe 	bne.w	8016aba <_strtod_l+0x452>
 8016f3e:	2800      	cmp	r0, #0
 8016f40:	f47f adbb 	bne.w	8016aba <_strtod_l+0x452>
 8016f44:	2322      	movs	r3, #34	; 0x22
 8016f46:	f8c9 3000 	str.w	r3, [r9]
 8016f4a:	e5b6      	b.n	8016aba <_strtod_l+0x452>
 8016f4c:	4013      	ands	r3, r2
 8016f4e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016f52:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016f56:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016f5a:	f04f 3aff 	mov.w	sl, #4294967295
 8016f5e:	e76a      	b.n	8016e36 <_strtod_l+0x7ce>
 8016f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f62:	b193      	cbz	r3, 8016f8a <_strtod_l+0x922>
 8016f64:	422b      	tst	r3, r5
 8016f66:	f43f af66 	beq.w	8016e36 <_strtod_l+0x7ce>
 8016f6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f6c:	9a04      	ldr	r2, [sp, #16]
 8016f6e:	4650      	mov	r0, sl
 8016f70:	4659      	mov	r1, fp
 8016f72:	b173      	cbz	r3, 8016f92 <_strtod_l+0x92a>
 8016f74:	f7ff fb5c 	bl	8016630 <sulp>
 8016f78:	4602      	mov	r2, r0
 8016f7a:	460b      	mov	r3, r1
 8016f7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016f80:	f7e9 f99c 	bl	80002bc <__adddf3>
 8016f84:	4682      	mov	sl, r0
 8016f86:	468b      	mov	fp, r1
 8016f88:	e755      	b.n	8016e36 <_strtod_l+0x7ce>
 8016f8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f8c:	ea13 0f0a 	tst.w	r3, sl
 8016f90:	e7e9      	b.n	8016f66 <_strtod_l+0x8fe>
 8016f92:	f7ff fb4d 	bl	8016630 <sulp>
 8016f96:	4602      	mov	r2, r0
 8016f98:	460b      	mov	r3, r1
 8016f9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016f9e:	f7e9 f98b 	bl	80002b8 <__aeabi_dsub>
 8016fa2:	2200      	movs	r2, #0
 8016fa4:	2300      	movs	r3, #0
 8016fa6:	4682      	mov	sl, r0
 8016fa8:	468b      	mov	fp, r1
 8016faa:	f7e9 fda5 	bl	8000af8 <__aeabi_dcmpeq>
 8016fae:	2800      	cmp	r0, #0
 8016fb0:	f47f ae11 	bne.w	8016bd6 <_strtod_l+0x56e>
 8016fb4:	e73f      	b.n	8016e36 <_strtod_l+0x7ce>
 8016fb6:	4641      	mov	r1, r8
 8016fb8:	4620      	mov	r0, r4
 8016fba:	f001 ff40 	bl	8018e3e <__ratio>
 8016fbe:	ec57 6b10 	vmov	r6, r7, d0
 8016fc2:	2200      	movs	r2, #0
 8016fc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016fc8:	ee10 0a10 	vmov	r0, s0
 8016fcc:	4639      	mov	r1, r7
 8016fce:	f7e9 fda7 	bl	8000b20 <__aeabi_dcmple>
 8016fd2:	2800      	cmp	r0, #0
 8016fd4:	d077      	beq.n	80170c6 <_strtod_l+0xa5e>
 8016fd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d04a      	beq.n	8017072 <_strtod_l+0xa0a>
 8016fdc:	4b68      	ldr	r3, [pc, #416]	; (8017180 <_strtod_l+0xb18>)
 8016fde:	2200      	movs	r2, #0
 8016fe0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016fe4:	4f66      	ldr	r7, [pc, #408]	; (8017180 <_strtod_l+0xb18>)
 8016fe6:	2600      	movs	r6, #0
 8016fe8:	4b62      	ldr	r3, [pc, #392]	; (8017174 <_strtod_l+0xb0c>)
 8016fea:	402b      	ands	r3, r5
 8016fec:	930f      	str	r3, [sp, #60]	; 0x3c
 8016fee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016ff0:	4b64      	ldr	r3, [pc, #400]	; (8017184 <_strtod_l+0xb1c>)
 8016ff2:	429a      	cmp	r2, r3
 8016ff4:	f040 80ce 	bne.w	8017194 <_strtod_l+0xb2c>
 8016ff8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016ffc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017000:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8017004:	ec4b ab10 	vmov	d0, sl, fp
 8017008:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801700c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017010:	f001 fe50 	bl	8018cb4 <__ulp>
 8017014:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017018:	ec53 2b10 	vmov	r2, r3, d0
 801701c:	f7e9 fb04 	bl	8000628 <__aeabi_dmul>
 8017020:	4652      	mov	r2, sl
 8017022:	465b      	mov	r3, fp
 8017024:	f7e9 f94a 	bl	80002bc <__adddf3>
 8017028:	460b      	mov	r3, r1
 801702a:	4952      	ldr	r1, [pc, #328]	; (8017174 <_strtod_l+0xb0c>)
 801702c:	4a56      	ldr	r2, [pc, #344]	; (8017188 <_strtod_l+0xb20>)
 801702e:	4019      	ands	r1, r3
 8017030:	4291      	cmp	r1, r2
 8017032:	4682      	mov	sl, r0
 8017034:	d95b      	bls.n	80170ee <_strtod_l+0xa86>
 8017036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017038:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801703c:	4293      	cmp	r3, r2
 801703e:	d103      	bne.n	8017048 <_strtod_l+0x9e0>
 8017040:	9b08      	ldr	r3, [sp, #32]
 8017042:	3301      	adds	r3, #1
 8017044:	f43f ad2e 	beq.w	8016aa4 <_strtod_l+0x43c>
 8017048:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8017178 <_strtod_l+0xb10>
 801704c:	f04f 3aff 	mov.w	sl, #4294967295
 8017050:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017052:	4648      	mov	r0, r9
 8017054:	f001 fb96 	bl	8018784 <_Bfree>
 8017058:	9905      	ldr	r1, [sp, #20]
 801705a:	4648      	mov	r0, r9
 801705c:	f001 fb92 	bl	8018784 <_Bfree>
 8017060:	4641      	mov	r1, r8
 8017062:	4648      	mov	r0, r9
 8017064:	f001 fb8e 	bl	8018784 <_Bfree>
 8017068:	4621      	mov	r1, r4
 801706a:	4648      	mov	r0, r9
 801706c:	f001 fb8a 	bl	8018784 <_Bfree>
 8017070:	e619      	b.n	8016ca6 <_strtod_l+0x63e>
 8017072:	f1ba 0f00 	cmp.w	sl, #0
 8017076:	d11a      	bne.n	80170ae <_strtod_l+0xa46>
 8017078:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801707c:	b9eb      	cbnz	r3, 80170ba <_strtod_l+0xa52>
 801707e:	2200      	movs	r2, #0
 8017080:	4b3f      	ldr	r3, [pc, #252]	; (8017180 <_strtod_l+0xb18>)
 8017082:	4630      	mov	r0, r6
 8017084:	4639      	mov	r1, r7
 8017086:	f7e9 fd41 	bl	8000b0c <__aeabi_dcmplt>
 801708a:	b9c8      	cbnz	r0, 80170c0 <_strtod_l+0xa58>
 801708c:	4630      	mov	r0, r6
 801708e:	4639      	mov	r1, r7
 8017090:	2200      	movs	r2, #0
 8017092:	4b3e      	ldr	r3, [pc, #248]	; (801718c <_strtod_l+0xb24>)
 8017094:	f7e9 fac8 	bl	8000628 <__aeabi_dmul>
 8017098:	4606      	mov	r6, r0
 801709a:	460f      	mov	r7, r1
 801709c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80170a0:	9618      	str	r6, [sp, #96]	; 0x60
 80170a2:	9319      	str	r3, [sp, #100]	; 0x64
 80170a4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80170a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80170ac:	e79c      	b.n	8016fe8 <_strtod_l+0x980>
 80170ae:	f1ba 0f01 	cmp.w	sl, #1
 80170b2:	d102      	bne.n	80170ba <_strtod_l+0xa52>
 80170b4:	2d00      	cmp	r5, #0
 80170b6:	f43f ad8e 	beq.w	8016bd6 <_strtod_l+0x56e>
 80170ba:	2200      	movs	r2, #0
 80170bc:	4b34      	ldr	r3, [pc, #208]	; (8017190 <_strtod_l+0xb28>)
 80170be:	e78f      	b.n	8016fe0 <_strtod_l+0x978>
 80170c0:	2600      	movs	r6, #0
 80170c2:	4f32      	ldr	r7, [pc, #200]	; (801718c <_strtod_l+0xb24>)
 80170c4:	e7ea      	b.n	801709c <_strtod_l+0xa34>
 80170c6:	4b31      	ldr	r3, [pc, #196]	; (801718c <_strtod_l+0xb24>)
 80170c8:	4630      	mov	r0, r6
 80170ca:	4639      	mov	r1, r7
 80170cc:	2200      	movs	r2, #0
 80170ce:	f7e9 faab 	bl	8000628 <__aeabi_dmul>
 80170d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170d4:	4606      	mov	r6, r0
 80170d6:	460f      	mov	r7, r1
 80170d8:	b933      	cbnz	r3, 80170e8 <_strtod_l+0xa80>
 80170da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80170de:	9010      	str	r0, [sp, #64]	; 0x40
 80170e0:	9311      	str	r3, [sp, #68]	; 0x44
 80170e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80170e6:	e7df      	b.n	80170a8 <_strtod_l+0xa40>
 80170e8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80170ec:	e7f9      	b.n	80170e2 <_strtod_l+0xa7a>
 80170ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80170f2:	9b04      	ldr	r3, [sp, #16]
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d1ab      	bne.n	8017050 <_strtod_l+0x9e8>
 80170f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80170fc:	0d1b      	lsrs	r3, r3, #20
 80170fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017100:	051b      	lsls	r3, r3, #20
 8017102:	429a      	cmp	r2, r3
 8017104:	465d      	mov	r5, fp
 8017106:	d1a3      	bne.n	8017050 <_strtod_l+0x9e8>
 8017108:	4639      	mov	r1, r7
 801710a:	4630      	mov	r0, r6
 801710c:	f7e9 fd3c 	bl	8000b88 <__aeabi_d2iz>
 8017110:	f7e9 fa20 	bl	8000554 <__aeabi_i2d>
 8017114:	460b      	mov	r3, r1
 8017116:	4602      	mov	r2, r0
 8017118:	4639      	mov	r1, r7
 801711a:	4630      	mov	r0, r6
 801711c:	f7e9 f8cc 	bl	80002b8 <__aeabi_dsub>
 8017120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017122:	4606      	mov	r6, r0
 8017124:	460f      	mov	r7, r1
 8017126:	b933      	cbnz	r3, 8017136 <_strtod_l+0xace>
 8017128:	f1ba 0f00 	cmp.w	sl, #0
 801712c:	d103      	bne.n	8017136 <_strtod_l+0xace>
 801712e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8017132:	2d00      	cmp	r5, #0
 8017134:	d06d      	beq.n	8017212 <_strtod_l+0xbaa>
 8017136:	a30a      	add	r3, pc, #40	; (adr r3, 8017160 <_strtod_l+0xaf8>)
 8017138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801713c:	4630      	mov	r0, r6
 801713e:	4639      	mov	r1, r7
 8017140:	f7e9 fce4 	bl	8000b0c <__aeabi_dcmplt>
 8017144:	2800      	cmp	r0, #0
 8017146:	f47f acb8 	bne.w	8016aba <_strtod_l+0x452>
 801714a:	a307      	add	r3, pc, #28	; (adr r3, 8017168 <_strtod_l+0xb00>)
 801714c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017150:	4630      	mov	r0, r6
 8017152:	4639      	mov	r1, r7
 8017154:	f7e9 fcf8 	bl	8000b48 <__aeabi_dcmpgt>
 8017158:	2800      	cmp	r0, #0
 801715a:	f43f af79 	beq.w	8017050 <_strtod_l+0x9e8>
 801715e:	e4ac      	b.n	8016aba <_strtod_l+0x452>
 8017160:	94a03595 	.word	0x94a03595
 8017164:	3fdfffff 	.word	0x3fdfffff
 8017168:	35afe535 	.word	0x35afe535
 801716c:	3fe00000 	.word	0x3fe00000
 8017170:	000fffff 	.word	0x000fffff
 8017174:	7ff00000 	.word	0x7ff00000
 8017178:	7fefffff 	.word	0x7fefffff
 801717c:	39500000 	.word	0x39500000
 8017180:	3ff00000 	.word	0x3ff00000
 8017184:	7fe00000 	.word	0x7fe00000
 8017188:	7c9fffff 	.word	0x7c9fffff
 801718c:	3fe00000 	.word	0x3fe00000
 8017190:	bff00000 	.word	0xbff00000
 8017194:	9b04      	ldr	r3, [sp, #16]
 8017196:	b333      	cbz	r3, 80171e6 <_strtod_l+0xb7e>
 8017198:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801719a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801719e:	d822      	bhi.n	80171e6 <_strtod_l+0xb7e>
 80171a0:	a327      	add	r3, pc, #156	; (adr r3, 8017240 <_strtod_l+0xbd8>)
 80171a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171a6:	4630      	mov	r0, r6
 80171a8:	4639      	mov	r1, r7
 80171aa:	f7e9 fcb9 	bl	8000b20 <__aeabi_dcmple>
 80171ae:	b1a0      	cbz	r0, 80171da <_strtod_l+0xb72>
 80171b0:	4639      	mov	r1, r7
 80171b2:	4630      	mov	r0, r6
 80171b4:	f7e9 fd10 	bl	8000bd8 <__aeabi_d2uiz>
 80171b8:	2800      	cmp	r0, #0
 80171ba:	bf08      	it	eq
 80171bc:	2001      	moveq	r0, #1
 80171be:	f7e9 f9b9 	bl	8000534 <__aeabi_ui2d>
 80171c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80171c4:	4606      	mov	r6, r0
 80171c6:	460f      	mov	r7, r1
 80171c8:	bb03      	cbnz	r3, 801720c <_strtod_l+0xba4>
 80171ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80171ce:	9012      	str	r0, [sp, #72]	; 0x48
 80171d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80171d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80171d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80171da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80171dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80171de:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80171e2:	1a9b      	subs	r3, r3, r2
 80171e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80171e6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80171ea:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80171ee:	f001 fd61 	bl	8018cb4 <__ulp>
 80171f2:	4650      	mov	r0, sl
 80171f4:	ec53 2b10 	vmov	r2, r3, d0
 80171f8:	4659      	mov	r1, fp
 80171fa:	f7e9 fa15 	bl	8000628 <__aeabi_dmul>
 80171fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017202:	f7e9 f85b 	bl	80002bc <__adddf3>
 8017206:	4682      	mov	sl, r0
 8017208:	468b      	mov	fp, r1
 801720a:	e772      	b.n	80170f2 <_strtod_l+0xa8a>
 801720c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017210:	e7df      	b.n	80171d2 <_strtod_l+0xb6a>
 8017212:	a30d      	add	r3, pc, #52	; (adr r3, 8017248 <_strtod_l+0xbe0>)
 8017214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017218:	f7e9 fc78 	bl	8000b0c <__aeabi_dcmplt>
 801721c:	e79c      	b.n	8017158 <_strtod_l+0xaf0>
 801721e:	2300      	movs	r3, #0
 8017220:	930d      	str	r3, [sp, #52]	; 0x34
 8017222:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017224:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017226:	6013      	str	r3, [r2, #0]
 8017228:	f7ff ba61 	b.w	80166ee <_strtod_l+0x86>
 801722c:	2b65      	cmp	r3, #101	; 0x65
 801722e:	f04f 0200 	mov.w	r2, #0
 8017232:	f43f ab4e 	beq.w	80168d2 <_strtod_l+0x26a>
 8017236:	2101      	movs	r1, #1
 8017238:	4614      	mov	r4, r2
 801723a:	9104      	str	r1, [sp, #16]
 801723c:	f7ff bacb 	b.w	80167d6 <_strtod_l+0x16e>
 8017240:	ffc00000 	.word	0xffc00000
 8017244:	41dfffff 	.word	0x41dfffff
 8017248:	94a03595 	.word	0x94a03595
 801724c:	3fcfffff 	.word	0x3fcfffff

08017250 <_strtod_r>:
 8017250:	4b05      	ldr	r3, [pc, #20]	; (8017268 <_strtod_r+0x18>)
 8017252:	681b      	ldr	r3, [r3, #0]
 8017254:	b410      	push	{r4}
 8017256:	6a1b      	ldr	r3, [r3, #32]
 8017258:	4c04      	ldr	r4, [pc, #16]	; (801726c <_strtod_r+0x1c>)
 801725a:	2b00      	cmp	r3, #0
 801725c:	bf08      	it	eq
 801725e:	4623      	moveq	r3, r4
 8017260:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017264:	f7ff ba00 	b.w	8016668 <_strtod_l>
 8017268:	2000000c 	.word	0x2000000c
 801726c:	20000070 	.word	0x20000070

08017270 <_strtol_l.isra.0>:
 8017270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017274:	4680      	mov	r8, r0
 8017276:	4689      	mov	r9, r1
 8017278:	4692      	mov	sl, r2
 801727a:	461e      	mov	r6, r3
 801727c:	460f      	mov	r7, r1
 801727e:	463d      	mov	r5, r7
 8017280:	9808      	ldr	r0, [sp, #32]
 8017282:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017286:	f001 fa0d 	bl	80186a4 <__locale_ctype_ptr_l>
 801728a:	4420      	add	r0, r4
 801728c:	7843      	ldrb	r3, [r0, #1]
 801728e:	f013 0308 	ands.w	r3, r3, #8
 8017292:	d132      	bne.n	80172fa <_strtol_l.isra.0+0x8a>
 8017294:	2c2d      	cmp	r4, #45	; 0x2d
 8017296:	d132      	bne.n	80172fe <_strtol_l.isra.0+0x8e>
 8017298:	787c      	ldrb	r4, [r7, #1]
 801729a:	1cbd      	adds	r5, r7, #2
 801729c:	2201      	movs	r2, #1
 801729e:	2e00      	cmp	r6, #0
 80172a0:	d05d      	beq.n	801735e <_strtol_l.isra.0+0xee>
 80172a2:	2e10      	cmp	r6, #16
 80172a4:	d109      	bne.n	80172ba <_strtol_l.isra.0+0x4a>
 80172a6:	2c30      	cmp	r4, #48	; 0x30
 80172a8:	d107      	bne.n	80172ba <_strtol_l.isra.0+0x4a>
 80172aa:	782b      	ldrb	r3, [r5, #0]
 80172ac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80172b0:	2b58      	cmp	r3, #88	; 0x58
 80172b2:	d14f      	bne.n	8017354 <_strtol_l.isra.0+0xe4>
 80172b4:	786c      	ldrb	r4, [r5, #1]
 80172b6:	2610      	movs	r6, #16
 80172b8:	3502      	adds	r5, #2
 80172ba:	2a00      	cmp	r2, #0
 80172bc:	bf14      	ite	ne
 80172be:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80172c2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80172c6:	2700      	movs	r7, #0
 80172c8:	fbb1 fcf6 	udiv	ip, r1, r6
 80172cc:	4638      	mov	r0, r7
 80172ce:	fb06 1e1c 	mls	lr, r6, ip, r1
 80172d2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80172d6:	2b09      	cmp	r3, #9
 80172d8:	d817      	bhi.n	801730a <_strtol_l.isra.0+0x9a>
 80172da:	461c      	mov	r4, r3
 80172dc:	42a6      	cmp	r6, r4
 80172de:	dd23      	ble.n	8017328 <_strtol_l.isra.0+0xb8>
 80172e0:	1c7b      	adds	r3, r7, #1
 80172e2:	d007      	beq.n	80172f4 <_strtol_l.isra.0+0x84>
 80172e4:	4584      	cmp	ip, r0
 80172e6:	d31c      	bcc.n	8017322 <_strtol_l.isra.0+0xb2>
 80172e8:	d101      	bne.n	80172ee <_strtol_l.isra.0+0x7e>
 80172ea:	45a6      	cmp	lr, r4
 80172ec:	db19      	blt.n	8017322 <_strtol_l.isra.0+0xb2>
 80172ee:	fb00 4006 	mla	r0, r0, r6, r4
 80172f2:	2701      	movs	r7, #1
 80172f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80172f8:	e7eb      	b.n	80172d2 <_strtol_l.isra.0+0x62>
 80172fa:	462f      	mov	r7, r5
 80172fc:	e7bf      	b.n	801727e <_strtol_l.isra.0+0xe>
 80172fe:	2c2b      	cmp	r4, #43	; 0x2b
 8017300:	bf04      	itt	eq
 8017302:	1cbd      	addeq	r5, r7, #2
 8017304:	787c      	ldrbeq	r4, [r7, #1]
 8017306:	461a      	mov	r2, r3
 8017308:	e7c9      	b.n	801729e <_strtol_l.isra.0+0x2e>
 801730a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801730e:	2b19      	cmp	r3, #25
 8017310:	d801      	bhi.n	8017316 <_strtol_l.isra.0+0xa6>
 8017312:	3c37      	subs	r4, #55	; 0x37
 8017314:	e7e2      	b.n	80172dc <_strtol_l.isra.0+0x6c>
 8017316:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801731a:	2b19      	cmp	r3, #25
 801731c:	d804      	bhi.n	8017328 <_strtol_l.isra.0+0xb8>
 801731e:	3c57      	subs	r4, #87	; 0x57
 8017320:	e7dc      	b.n	80172dc <_strtol_l.isra.0+0x6c>
 8017322:	f04f 37ff 	mov.w	r7, #4294967295
 8017326:	e7e5      	b.n	80172f4 <_strtol_l.isra.0+0x84>
 8017328:	1c7b      	adds	r3, r7, #1
 801732a:	d108      	bne.n	801733e <_strtol_l.isra.0+0xce>
 801732c:	2322      	movs	r3, #34	; 0x22
 801732e:	f8c8 3000 	str.w	r3, [r8]
 8017332:	4608      	mov	r0, r1
 8017334:	f1ba 0f00 	cmp.w	sl, #0
 8017338:	d107      	bne.n	801734a <_strtol_l.isra.0+0xda>
 801733a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801733e:	b102      	cbz	r2, 8017342 <_strtol_l.isra.0+0xd2>
 8017340:	4240      	negs	r0, r0
 8017342:	f1ba 0f00 	cmp.w	sl, #0
 8017346:	d0f8      	beq.n	801733a <_strtol_l.isra.0+0xca>
 8017348:	b10f      	cbz	r7, 801734e <_strtol_l.isra.0+0xde>
 801734a:	f105 39ff 	add.w	r9, r5, #4294967295
 801734e:	f8ca 9000 	str.w	r9, [sl]
 8017352:	e7f2      	b.n	801733a <_strtol_l.isra.0+0xca>
 8017354:	2430      	movs	r4, #48	; 0x30
 8017356:	2e00      	cmp	r6, #0
 8017358:	d1af      	bne.n	80172ba <_strtol_l.isra.0+0x4a>
 801735a:	2608      	movs	r6, #8
 801735c:	e7ad      	b.n	80172ba <_strtol_l.isra.0+0x4a>
 801735e:	2c30      	cmp	r4, #48	; 0x30
 8017360:	d0a3      	beq.n	80172aa <_strtol_l.isra.0+0x3a>
 8017362:	260a      	movs	r6, #10
 8017364:	e7a9      	b.n	80172ba <_strtol_l.isra.0+0x4a>
	...

08017368 <_strtol_r>:
 8017368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801736a:	4c06      	ldr	r4, [pc, #24]	; (8017384 <_strtol_r+0x1c>)
 801736c:	4d06      	ldr	r5, [pc, #24]	; (8017388 <_strtol_r+0x20>)
 801736e:	6824      	ldr	r4, [r4, #0]
 8017370:	6a24      	ldr	r4, [r4, #32]
 8017372:	2c00      	cmp	r4, #0
 8017374:	bf08      	it	eq
 8017376:	462c      	moveq	r4, r5
 8017378:	9400      	str	r4, [sp, #0]
 801737a:	f7ff ff79 	bl	8017270 <_strtol_l.isra.0>
 801737e:	b003      	add	sp, #12
 8017380:	bd30      	pop	{r4, r5, pc}
 8017382:	bf00      	nop
 8017384:	2000000c 	.word	0x2000000c
 8017388:	20000070 	.word	0x20000070

0801738c <_vsiprintf_r>:
 801738c:	b500      	push	{lr}
 801738e:	b09b      	sub	sp, #108	; 0x6c
 8017390:	9100      	str	r1, [sp, #0]
 8017392:	9104      	str	r1, [sp, #16]
 8017394:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017398:	9105      	str	r1, [sp, #20]
 801739a:	9102      	str	r1, [sp, #8]
 801739c:	4905      	ldr	r1, [pc, #20]	; (80173b4 <_vsiprintf_r+0x28>)
 801739e:	9103      	str	r1, [sp, #12]
 80173a0:	4669      	mov	r1, sp
 80173a2:	f001 fecb 	bl	801913c <_svfiprintf_r>
 80173a6:	9b00      	ldr	r3, [sp, #0]
 80173a8:	2200      	movs	r2, #0
 80173aa:	701a      	strb	r2, [r3, #0]
 80173ac:	b01b      	add	sp, #108	; 0x6c
 80173ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80173b2:	bf00      	nop
 80173b4:	ffff0208 	.word	0xffff0208

080173b8 <vsiprintf>:
 80173b8:	4613      	mov	r3, r2
 80173ba:	460a      	mov	r2, r1
 80173bc:	4601      	mov	r1, r0
 80173be:	4802      	ldr	r0, [pc, #8]	; (80173c8 <vsiprintf+0x10>)
 80173c0:	6800      	ldr	r0, [r0, #0]
 80173c2:	f7ff bfe3 	b.w	801738c <_vsiprintf_r>
 80173c6:	bf00      	nop
 80173c8:	2000000c 	.word	0x2000000c

080173cc <quorem>:
 80173cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173d0:	6903      	ldr	r3, [r0, #16]
 80173d2:	690c      	ldr	r4, [r1, #16]
 80173d4:	42a3      	cmp	r3, r4
 80173d6:	4680      	mov	r8, r0
 80173d8:	f2c0 8082 	blt.w	80174e0 <quorem+0x114>
 80173dc:	3c01      	subs	r4, #1
 80173de:	f101 0714 	add.w	r7, r1, #20
 80173e2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80173e6:	f100 0614 	add.w	r6, r0, #20
 80173ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80173ee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80173f2:	eb06 030c 	add.w	r3, r6, ip
 80173f6:	3501      	adds	r5, #1
 80173f8:	eb07 090c 	add.w	r9, r7, ip
 80173fc:	9301      	str	r3, [sp, #4]
 80173fe:	fbb0 f5f5 	udiv	r5, r0, r5
 8017402:	b395      	cbz	r5, 801746a <quorem+0x9e>
 8017404:	f04f 0a00 	mov.w	sl, #0
 8017408:	4638      	mov	r0, r7
 801740a:	46b6      	mov	lr, r6
 801740c:	46d3      	mov	fp, sl
 801740e:	f850 2b04 	ldr.w	r2, [r0], #4
 8017412:	b293      	uxth	r3, r2
 8017414:	fb05 a303 	mla	r3, r5, r3, sl
 8017418:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801741c:	b29b      	uxth	r3, r3
 801741e:	ebab 0303 	sub.w	r3, fp, r3
 8017422:	0c12      	lsrs	r2, r2, #16
 8017424:	f8de b000 	ldr.w	fp, [lr]
 8017428:	fb05 a202 	mla	r2, r5, r2, sl
 801742c:	fa13 f38b 	uxtah	r3, r3, fp
 8017430:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017434:	fa1f fb82 	uxth.w	fp, r2
 8017438:	f8de 2000 	ldr.w	r2, [lr]
 801743c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017440:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017444:	b29b      	uxth	r3, r3
 8017446:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801744a:	4581      	cmp	r9, r0
 801744c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017450:	f84e 3b04 	str.w	r3, [lr], #4
 8017454:	d2db      	bcs.n	801740e <quorem+0x42>
 8017456:	f856 300c 	ldr.w	r3, [r6, ip]
 801745a:	b933      	cbnz	r3, 801746a <quorem+0x9e>
 801745c:	9b01      	ldr	r3, [sp, #4]
 801745e:	3b04      	subs	r3, #4
 8017460:	429e      	cmp	r6, r3
 8017462:	461a      	mov	r2, r3
 8017464:	d330      	bcc.n	80174c8 <quorem+0xfc>
 8017466:	f8c8 4010 	str.w	r4, [r8, #16]
 801746a:	4640      	mov	r0, r8
 801746c:	f001 fbaa 	bl	8018bc4 <__mcmp>
 8017470:	2800      	cmp	r0, #0
 8017472:	db25      	blt.n	80174c0 <quorem+0xf4>
 8017474:	3501      	adds	r5, #1
 8017476:	4630      	mov	r0, r6
 8017478:	f04f 0c00 	mov.w	ip, #0
 801747c:	f857 2b04 	ldr.w	r2, [r7], #4
 8017480:	f8d0 e000 	ldr.w	lr, [r0]
 8017484:	b293      	uxth	r3, r2
 8017486:	ebac 0303 	sub.w	r3, ip, r3
 801748a:	0c12      	lsrs	r2, r2, #16
 801748c:	fa13 f38e 	uxtah	r3, r3, lr
 8017490:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017494:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017498:	b29b      	uxth	r3, r3
 801749a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801749e:	45b9      	cmp	r9, r7
 80174a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80174a4:	f840 3b04 	str.w	r3, [r0], #4
 80174a8:	d2e8      	bcs.n	801747c <quorem+0xb0>
 80174aa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80174ae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80174b2:	b92a      	cbnz	r2, 80174c0 <quorem+0xf4>
 80174b4:	3b04      	subs	r3, #4
 80174b6:	429e      	cmp	r6, r3
 80174b8:	461a      	mov	r2, r3
 80174ba:	d30b      	bcc.n	80174d4 <quorem+0x108>
 80174bc:	f8c8 4010 	str.w	r4, [r8, #16]
 80174c0:	4628      	mov	r0, r5
 80174c2:	b003      	add	sp, #12
 80174c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174c8:	6812      	ldr	r2, [r2, #0]
 80174ca:	3b04      	subs	r3, #4
 80174cc:	2a00      	cmp	r2, #0
 80174ce:	d1ca      	bne.n	8017466 <quorem+0x9a>
 80174d0:	3c01      	subs	r4, #1
 80174d2:	e7c5      	b.n	8017460 <quorem+0x94>
 80174d4:	6812      	ldr	r2, [r2, #0]
 80174d6:	3b04      	subs	r3, #4
 80174d8:	2a00      	cmp	r2, #0
 80174da:	d1ef      	bne.n	80174bc <quorem+0xf0>
 80174dc:	3c01      	subs	r4, #1
 80174de:	e7ea      	b.n	80174b6 <quorem+0xea>
 80174e0:	2000      	movs	r0, #0
 80174e2:	e7ee      	b.n	80174c2 <quorem+0xf6>
 80174e4:	0000      	movs	r0, r0
	...

080174e8 <_dtoa_r>:
 80174e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174ec:	ec57 6b10 	vmov	r6, r7, d0
 80174f0:	b097      	sub	sp, #92	; 0x5c
 80174f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80174f4:	9106      	str	r1, [sp, #24]
 80174f6:	4604      	mov	r4, r0
 80174f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80174fa:	9312      	str	r3, [sp, #72]	; 0x48
 80174fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017500:	e9cd 6700 	strd	r6, r7, [sp]
 8017504:	b93d      	cbnz	r5, 8017516 <_dtoa_r+0x2e>
 8017506:	2010      	movs	r0, #16
 8017508:	f001 f8ee 	bl	80186e8 <malloc>
 801750c:	6260      	str	r0, [r4, #36]	; 0x24
 801750e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017512:	6005      	str	r5, [r0, #0]
 8017514:	60c5      	str	r5, [r0, #12]
 8017516:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017518:	6819      	ldr	r1, [r3, #0]
 801751a:	b151      	cbz	r1, 8017532 <_dtoa_r+0x4a>
 801751c:	685a      	ldr	r2, [r3, #4]
 801751e:	604a      	str	r2, [r1, #4]
 8017520:	2301      	movs	r3, #1
 8017522:	4093      	lsls	r3, r2
 8017524:	608b      	str	r3, [r1, #8]
 8017526:	4620      	mov	r0, r4
 8017528:	f001 f92c 	bl	8018784 <_Bfree>
 801752c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801752e:	2200      	movs	r2, #0
 8017530:	601a      	str	r2, [r3, #0]
 8017532:	1e3b      	subs	r3, r7, #0
 8017534:	bfbb      	ittet	lt
 8017536:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801753a:	9301      	strlt	r3, [sp, #4]
 801753c:	2300      	movge	r3, #0
 801753e:	2201      	movlt	r2, #1
 8017540:	bfac      	ite	ge
 8017542:	f8c8 3000 	strge.w	r3, [r8]
 8017546:	f8c8 2000 	strlt.w	r2, [r8]
 801754a:	4baf      	ldr	r3, [pc, #700]	; (8017808 <_dtoa_r+0x320>)
 801754c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017550:	ea33 0308 	bics.w	r3, r3, r8
 8017554:	d114      	bne.n	8017580 <_dtoa_r+0x98>
 8017556:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017558:	f242 730f 	movw	r3, #9999	; 0x270f
 801755c:	6013      	str	r3, [r2, #0]
 801755e:	9b00      	ldr	r3, [sp, #0]
 8017560:	b923      	cbnz	r3, 801756c <_dtoa_r+0x84>
 8017562:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8017566:	2800      	cmp	r0, #0
 8017568:	f000 8542 	beq.w	8017ff0 <_dtoa_r+0xb08>
 801756c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801756e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801781c <_dtoa_r+0x334>
 8017572:	2b00      	cmp	r3, #0
 8017574:	f000 8544 	beq.w	8018000 <_dtoa_r+0xb18>
 8017578:	f10b 0303 	add.w	r3, fp, #3
 801757c:	f000 bd3e 	b.w	8017ffc <_dtoa_r+0xb14>
 8017580:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017584:	2200      	movs	r2, #0
 8017586:	2300      	movs	r3, #0
 8017588:	4630      	mov	r0, r6
 801758a:	4639      	mov	r1, r7
 801758c:	f7e9 fab4 	bl	8000af8 <__aeabi_dcmpeq>
 8017590:	4681      	mov	r9, r0
 8017592:	b168      	cbz	r0, 80175b0 <_dtoa_r+0xc8>
 8017594:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017596:	2301      	movs	r3, #1
 8017598:	6013      	str	r3, [r2, #0]
 801759a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801759c:	2b00      	cmp	r3, #0
 801759e:	f000 8524 	beq.w	8017fea <_dtoa_r+0xb02>
 80175a2:	4b9a      	ldr	r3, [pc, #616]	; (801780c <_dtoa_r+0x324>)
 80175a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80175a6:	f103 3bff 	add.w	fp, r3, #4294967295
 80175aa:	6013      	str	r3, [r2, #0]
 80175ac:	f000 bd28 	b.w	8018000 <_dtoa_r+0xb18>
 80175b0:	aa14      	add	r2, sp, #80	; 0x50
 80175b2:	a915      	add	r1, sp, #84	; 0x54
 80175b4:	ec47 6b10 	vmov	d0, r6, r7
 80175b8:	4620      	mov	r0, r4
 80175ba:	f001 fbf1 	bl	8018da0 <__d2b>
 80175be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80175c2:	9004      	str	r0, [sp, #16]
 80175c4:	2d00      	cmp	r5, #0
 80175c6:	d07c      	beq.n	80176c2 <_dtoa_r+0x1da>
 80175c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80175cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80175d0:	46b2      	mov	sl, r6
 80175d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80175d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80175da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80175de:	2200      	movs	r2, #0
 80175e0:	4b8b      	ldr	r3, [pc, #556]	; (8017810 <_dtoa_r+0x328>)
 80175e2:	4650      	mov	r0, sl
 80175e4:	4659      	mov	r1, fp
 80175e6:	f7e8 fe67 	bl	80002b8 <__aeabi_dsub>
 80175ea:	a381      	add	r3, pc, #516	; (adr r3, 80177f0 <_dtoa_r+0x308>)
 80175ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175f0:	f7e9 f81a 	bl	8000628 <__aeabi_dmul>
 80175f4:	a380      	add	r3, pc, #512	; (adr r3, 80177f8 <_dtoa_r+0x310>)
 80175f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175fa:	f7e8 fe5f 	bl	80002bc <__adddf3>
 80175fe:	4606      	mov	r6, r0
 8017600:	4628      	mov	r0, r5
 8017602:	460f      	mov	r7, r1
 8017604:	f7e8 ffa6 	bl	8000554 <__aeabi_i2d>
 8017608:	a37d      	add	r3, pc, #500	; (adr r3, 8017800 <_dtoa_r+0x318>)
 801760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801760e:	f7e9 f80b 	bl	8000628 <__aeabi_dmul>
 8017612:	4602      	mov	r2, r0
 8017614:	460b      	mov	r3, r1
 8017616:	4630      	mov	r0, r6
 8017618:	4639      	mov	r1, r7
 801761a:	f7e8 fe4f 	bl	80002bc <__adddf3>
 801761e:	4606      	mov	r6, r0
 8017620:	460f      	mov	r7, r1
 8017622:	f7e9 fab1 	bl	8000b88 <__aeabi_d2iz>
 8017626:	2200      	movs	r2, #0
 8017628:	4682      	mov	sl, r0
 801762a:	2300      	movs	r3, #0
 801762c:	4630      	mov	r0, r6
 801762e:	4639      	mov	r1, r7
 8017630:	f7e9 fa6c 	bl	8000b0c <__aeabi_dcmplt>
 8017634:	b148      	cbz	r0, 801764a <_dtoa_r+0x162>
 8017636:	4650      	mov	r0, sl
 8017638:	f7e8 ff8c 	bl	8000554 <__aeabi_i2d>
 801763c:	4632      	mov	r2, r6
 801763e:	463b      	mov	r3, r7
 8017640:	f7e9 fa5a 	bl	8000af8 <__aeabi_dcmpeq>
 8017644:	b908      	cbnz	r0, 801764a <_dtoa_r+0x162>
 8017646:	f10a 3aff 	add.w	sl, sl, #4294967295
 801764a:	f1ba 0f16 	cmp.w	sl, #22
 801764e:	d859      	bhi.n	8017704 <_dtoa_r+0x21c>
 8017650:	4970      	ldr	r1, [pc, #448]	; (8017814 <_dtoa_r+0x32c>)
 8017652:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017656:	e9dd 2300 	ldrd	r2, r3, [sp]
 801765a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801765e:	f7e9 fa73 	bl	8000b48 <__aeabi_dcmpgt>
 8017662:	2800      	cmp	r0, #0
 8017664:	d050      	beq.n	8017708 <_dtoa_r+0x220>
 8017666:	f10a 3aff 	add.w	sl, sl, #4294967295
 801766a:	2300      	movs	r3, #0
 801766c:	930f      	str	r3, [sp, #60]	; 0x3c
 801766e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017670:	1b5d      	subs	r5, r3, r5
 8017672:	f1b5 0801 	subs.w	r8, r5, #1
 8017676:	bf49      	itett	mi
 8017678:	f1c5 0301 	rsbmi	r3, r5, #1
 801767c:	2300      	movpl	r3, #0
 801767e:	9305      	strmi	r3, [sp, #20]
 8017680:	f04f 0800 	movmi.w	r8, #0
 8017684:	bf58      	it	pl
 8017686:	9305      	strpl	r3, [sp, #20]
 8017688:	f1ba 0f00 	cmp.w	sl, #0
 801768c:	db3e      	blt.n	801770c <_dtoa_r+0x224>
 801768e:	2300      	movs	r3, #0
 8017690:	44d0      	add	r8, sl
 8017692:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017696:	9307      	str	r3, [sp, #28]
 8017698:	9b06      	ldr	r3, [sp, #24]
 801769a:	2b09      	cmp	r3, #9
 801769c:	f200 8090 	bhi.w	80177c0 <_dtoa_r+0x2d8>
 80176a0:	2b05      	cmp	r3, #5
 80176a2:	bfc4      	itt	gt
 80176a4:	3b04      	subgt	r3, #4
 80176a6:	9306      	strgt	r3, [sp, #24]
 80176a8:	9b06      	ldr	r3, [sp, #24]
 80176aa:	f1a3 0302 	sub.w	r3, r3, #2
 80176ae:	bfcc      	ite	gt
 80176b0:	2500      	movgt	r5, #0
 80176b2:	2501      	movle	r5, #1
 80176b4:	2b03      	cmp	r3, #3
 80176b6:	f200 808f 	bhi.w	80177d8 <_dtoa_r+0x2f0>
 80176ba:	e8df f003 	tbb	[pc, r3]
 80176be:	7f7d      	.short	0x7f7d
 80176c0:	7131      	.short	0x7131
 80176c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80176c6:	441d      	add	r5, r3
 80176c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80176cc:	2820      	cmp	r0, #32
 80176ce:	dd13      	ble.n	80176f8 <_dtoa_r+0x210>
 80176d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80176d4:	9b00      	ldr	r3, [sp, #0]
 80176d6:	fa08 f800 	lsl.w	r8, r8, r0
 80176da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80176de:	fa23 f000 	lsr.w	r0, r3, r0
 80176e2:	ea48 0000 	orr.w	r0, r8, r0
 80176e6:	f7e8 ff25 	bl	8000534 <__aeabi_ui2d>
 80176ea:	2301      	movs	r3, #1
 80176ec:	4682      	mov	sl, r0
 80176ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80176f2:	3d01      	subs	r5, #1
 80176f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80176f6:	e772      	b.n	80175de <_dtoa_r+0xf6>
 80176f8:	9b00      	ldr	r3, [sp, #0]
 80176fa:	f1c0 0020 	rsb	r0, r0, #32
 80176fe:	fa03 f000 	lsl.w	r0, r3, r0
 8017702:	e7f0      	b.n	80176e6 <_dtoa_r+0x1fe>
 8017704:	2301      	movs	r3, #1
 8017706:	e7b1      	b.n	801766c <_dtoa_r+0x184>
 8017708:	900f      	str	r0, [sp, #60]	; 0x3c
 801770a:	e7b0      	b.n	801766e <_dtoa_r+0x186>
 801770c:	9b05      	ldr	r3, [sp, #20]
 801770e:	eba3 030a 	sub.w	r3, r3, sl
 8017712:	9305      	str	r3, [sp, #20]
 8017714:	f1ca 0300 	rsb	r3, sl, #0
 8017718:	9307      	str	r3, [sp, #28]
 801771a:	2300      	movs	r3, #0
 801771c:	930e      	str	r3, [sp, #56]	; 0x38
 801771e:	e7bb      	b.n	8017698 <_dtoa_r+0x1b0>
 8017720:	2301      	movs	r3, #1
 8017722:	930a      	str	r3, [sp, #40]	; 0x28
 8017724:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017726:	2b00      	cmp	r3, #0
 8017728:	dd59      	ble.n	80177de <_dtoa_r+0x2f6>
 801772a:	9302      	str	r3, [sp, #8]
 801772c:	4699      	mov	r9, r3
 801772e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017730:	2200      	movs	r2, #0
 8017732:	6072      	str	r2, [r6, #4]
 8017734:	2204      	movs	r2, #4
 8017736:	f102 0014 	add.w	r0, r2, #20
 801773a:	4298      	cmp	r0, r3
 801773c:	6871      	ldr	r1, [r6, #4]
 801773e:	d953      	bls.n	80177e8 <_dtoa_r+0x300>
 8017740:	4620      	mov	r0, r4
 8017742:	f000 ffeb 	bl	801871c <_Balloc>
 8017746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017748:	6030      	str	r0, [r6, #0]
 801774a:	f1b9 0f0e 	cmp.w	r9, #14
 801774e:	f8d3 b000 	ldr.w	fp, [r3]
 8017752:	f200 80e6 	bhi.w	8017922 <_dtoa_r+0x43a>
 8017756:	2d00      	cmp	r5, #0
 8017758:	f000 80e3 	beq.w	8017922 <_dtoa_r+0x43a>
 801775c:	ed9d 7b00 	vldr	d7, [sp]
 8017760:	f1ba 0f00 	cmp.w	sl, #0
 8017764:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017768:	dd74      	ble.n	8017854 <_dtoa_r+0x36c>
 801776a:	4a2a      	ldr	r2, [pc, #168]	; (8017814 <_dtoa_r+0x32c>)
 801776c:	f00a 030f 	and.w	r3, sl, #15
 8017770:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017774:	ed93 7b00 	vldr	d7, [r3]
 8017778:	ea4f 162a 	mov.w	r6, sl, asr #4
 801777c:	06f0      	lsls	r0, r6, #27
 801777e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017782:	d565      	bpl.n	8017850 <_dtoa_r+0x368>
 8017784:	4b24      	ldr	r3, [pc, #144]	; (8017818 <_dtoa_r+0x330>)
 8017786:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801778a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801778e:	f7e9 f875 	bl	800087c <__aeabi_ddiv>
 8017792:	e9cd 0100 	strd	r0, r1, [sp]
 8017796:	f006 060f 	and.w	r6, r6, #15
 801779a:	2503      	movs	r5, #3
 801779c:	4f1e      	ldr	r7, [pc, #120]	; (8017818 <_dtoa_r+0x330>)
 801779e:	e04c      	b.n	801783a <_dtoa_r+0x352>
 80177a0:	2301      	movs	r3, #1
 80177a2:	930a      	str	r3, [sp, #40]	; 0x28
 80177a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80177a6:	4453      	add	r3, sl
 80177a8:	f103 0901 	add.w	r9, r3, #1
 80177ac:	9302      	str	r3, [sp, #8]
 80177ae:	464b      	mov	r3, r9
 80177b0:	2b01      	cmp	r3, #1
 80177b2:	bfb8      	it	lt
 80177b4:	2301      	movlt	r3, #1
 80177b6:	e7ba      	b.n	801772e <_dtoa_r+0x246>
 80177b8:	2300      	movs	r3, #0
 80177ba:	e7b2      	b.n	8017722 <_dtoa_r+0x23a>
 80177bc:	2300      	movs	r3, #0
 80177be:	e7f0      	b.n	80177a2 <_dtoa_r+0x2ba>
 80177c0:	2501      	movs	r5, #1
 80177c2:	2300      	movs	r3, #0
 80177c4:	9306      	str	r3, [sp, #24]
 80177c6:	950a      	str	r5, [sp, #40]	; 0x28
 80177c8:	f04f 33ff 	mov.w	r3, #4294967295
 80177cc:	9302      	str	r3, [sp, #8]
 80177ce:	4699      	mov	r9, r3
 80177d0:	2200      	movs	r2, #0
 80177d2:	2312      	movs	r3, #18
 80177d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80177d6:	e7aa      	b.n	801772e <_dtoa_r+0x246>
 80177d8:	2301      	movs	r3, #1
 80177da:	930a      	str	r3, [sp, #40]	; 0x28
 80177dc:	e7f4      	b.n	80177c8 <_dtoa_r+0x2e0>
 80177de:	2301      	movs	r3, #1
 80177e0:	9302      	str	r3, [sp, #8]
 80177e2:	4699      	mov	r9, r3
 80177e4:	461a      	mov	r2, r3
 80177e6:	e7f5      	b.n	80177d4 <_dtoa_r+0x2ec>
 80177e8:	3101      	adds	r1, #1
 80177ea:	6071      	str	r1, [r6, #4]
 80177ec:	0052      	lsls	r2, r2, #1
 80177ee:	e7a2      	b.n	8017736 <_dtoa_r+0x24e>
 80177f0:	636f4361 	.word	0x636f4361
 80177f4:	3fd287a7 	.word	0x3fd287a7
 80177f8:	8b60c8b3 	.word	0x8b60c8b3
 80177fc:	3fc68a28 	.word	0x3fc68a28
 8017800:	509f79fb 	.word	0x509f79fb
 8017804:	3fd34413 	.word	0x3fd34413
 8017808:	7ff00000 	.word	0x7ff00000
 801780c:	0801a74c 	.word	0x0801a74c
 8017810:	3ff80000 	.word	0x3ff80000
 8017814:	0801a650 	.word	0x0801a650
 8017818:	0801a628 	.word	0x0801a628
 801781c:	0801a5b1 	.word	0x0801a5b1
 8017820:	07f1      	lsls	r1, r6, #31
 8017822:	d508      	bpl.n	8017836 <_dtoa_r+0x34e>
 8017824:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017828:	e9d7 2300 	ldrd	r2, r3, [r7]
 801782c:	f7e8 fefc 	bl	8000628 <__aeabi_dmul>
 8017830:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017834:	3501      	adds	r5, #1
 8017836:	1076      	asrs	r6, r6, #1
 8017838:	3708      	adds	r7, #8
 801783a:	2e00      	cmp	r6, #0
 801783c:	d1f0      	bne.n	8017820 <_dtoa_r+0x338>
 801783e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017842:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017846:	f7e9 f819 	bl	800087c <__aeabi_ddiv>
 801784a:	e9cd 0100 	strd	r0, r1, [sp]
 801784e:	e01a      	b.n	8017886 <_dtoa_r+0x39e>
 8017850:	2502      	movs	r5, #2
 8017852:	e7a3      	b.n	801779c <_dtoa_r+0x2b4>
 8017854:	f000 80a0 	beq.w	8017998 <_dtoa_r+0x4b0>
 8017858:	f1ca 0600 	rsb	r6, sl, #0
 801785c:	4b9f      	ldr	r3, [pc, #636]	; (8017adc <_dtoa_r+0x5f4>)
 801785e:	4fa0      	ldr	r7, [pc, #640]	; (8017ae0 <_dtoa_r+0x5f8>)
 8017860:	f006 020f 	and.w	r2, r6, #15
 8017864:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801786c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017870:	f7e8 feda 	bl	8000628 <__aeabi_dmul>
 8017874:	e9cd 0100 	strd	r0, r1, [sp]
 8017878:	1136      	asrs	r6, r6, #4
 801787a:	2300      	movs	r3, #0
 801787c:	2502      	movs	r5, #2
 801787e:	2e00      	cmp	r6, #0
 8017880:	d17f      	bne.n	8017982 <_dtoa_r+0x49a>
 8017882:	2b00      	cmp	r3, #0
 8017884:	d1e1      	bne.n	801784a <_dtoa_r+0x362>
 8017886:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017888:	2b00      	cmp	r3, #0
 801788a:	f000 8087 	beq.w	801799c <_dtoa_r+0x4b4>
 801788e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017892:	2200      	movs	r2, #0
 8017894:	4b93      	ldr	r3, [pc, #588]	; (8017ae4 <_dtoa_r+0x5fc>)
 8017896:	4630      	mov	r0, r6
 8017898:	4639      	mov	r1, r7
 801789a:	f7e9 f937 	bl	8000b0c <__aeabi_dcmplt>
 801789e:	2800      	cmp	r0, #0
 80178a0:	d07c      	beq.n	801799c <_dtoa_r+0x4b4>
 80178a2:	f1b9 0f00 	cmp.w	r9, #0
 80178a6:	d079      	beq.n	801799c <_dtoa_r+0x4b4>
 80178a8:	9b02      	ldr	r3, [sp, #8]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	dd35      	ble.n	801791a <_dtoa_r+0x432>
 80178ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 80178b2:	9308      	str	r3, [sp, #32]
 80178b4:	4639      	mov	r1, r7
 80178b6:	2200      	movs	r2, #0
 80178b8:	4b8b      	ldr	r3, [pc, #556]	; (8017ae8 <_dtoa_r+0x600>)
 80178ba:	4630      	mov	r0, r6
 80178bc:	f7e8 feb4 	bl	8000628 <__aeabi_dmul>
 80178c0:	e9cd 0100 	strd	r0, r1, [sp]
 80178c4:	9f02      	ldr	r7, [sp, #8]
 80178c6:	3501      	adds	r5, #1
 80178c8:	4628      	mov	r0, r5
 80178ca:	f7e8 fe43 	bl	8000554 <__aeabi_i2d>
 80178ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80178d2:	f7e8 fea9 	bl	8000628 <__aeabi_dmul>
 80178d6:	2200      	movs	r2, #0
 80178d8:	4b84      	ldr	r3, [pc, #528]	; (8017aec <_dtoa_r+0x604>)
 80178da:	f7e8 fcef 	bl	80002bc <__adddf3>
 80178de:	4605      	mov	r5, r0
 80178e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80178e4:	2f00      	cmp	r7, #0
 80178e6:	d15d      	bne.n	80179a4 <_dtoa_r+0x4bc>
 80178e8:	2200      	movs	r2, #0
 80178ea:	4b81      	ldr	r3, [pc, #516]	; (8017af0 <_dtoa_r+0x608>)
 80178ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80178f0:	f7e8 fce2 	bl	80002b8 <__aeabi_dsub>
 80178f4:	462a      	mov	r2, r5
 80178f6:	4633      	mov	r3, r6
 80178f8:	e9cd 0100 	strd	r0, r1, [sp]
 80178fc:	f7e9 f924 	bl	8000b48 <__aeabi_dcmpgt>
 8017900:	2800      	cmp	r0, #0
 8017902:	f040 8288 	bne.w	8017e16 <_dtoa_r+0x92e>
 8017906:	462a      	mov	r2, r5
 8017908:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801790c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017910:	f7e9 f8fc 	bl	8000b0c <__aeabi_dcmplt>
 8017914:	2800      	cmp	r0, #0
 8017916:	f040 827c 	bne.w	8017e12 <_dtoa_r+0x92a>
 801791a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801791e:	e9cd 2300 	strd	r2, r3, [sp]
 8017922:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017924:	2b00      	cmp	r3, #0
 8017926:	f2c0 8150 	blt.w	8017bca <_dtoa_r+0x6e2>
 801792a:	f1ba 0f0e 	cmp.w	sl, #14
 801792e:	f300 814c 	bgt.w	8017bca <_dtoa_r+0x6e2>
 8017932:	4b6a      	ldr	r3, [pc, #424]	; (8017adc <_dtoa_r+0x5f4>)
 8017934:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017938:	ed93 7b00 	vldr	d7, [r3]
 801793c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801793e:	2b00      	cmp	r3, #0
 8017940:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017944:	f280 80d8 	bge.w	8017af8 <_dtoa_r+0x610>
 8017948:	f1b9 0f00 	cmp.w	r9, #0
 801794c:	f300 80d4 	bgt.w	8017af8 <_dtoa_r+0x610>
 8017950:	f040 825e 	bne.w	8017e10 <_dtoa_r+0x928>
 8017954:	2200      	movs	r2, #0
 8017956:	4b66      	ldr	r3, [pc, #408]	; (8017af0 <_dtoa_r+0x608>)
 8017958:	ec51 0b17 	vmov	r0, r1, d7
 801795c:	f7e8 fe64 	bl	8000628 <__aeabi_dmul>
 8017960:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017964:	f7e9 f8e6 	bl	8000b34 <__aeabi_dcmpge>
 8017968:	464f      	mov	r7, r9
 801796a:	464e      	mov	r6, r9
 801796c:	2800      	cmp	r0, #0
 801796e:	f040 8234 	bne.w	8017dda <_dtoa_r+0x8f2>
 8017972:	2331      	movs	r3, #49	; 0x31
 8017974:	f10b 0501 	add.w	r5, fp, #1
 8017978:	f88b 3000 	strb.w	r3, [fp]
 801797c:	f10a 0a01 	add.w	sl, sl, #1
 8017980:	e22f      	b.n	8017de2 <_dtoa_r+0x8fa>
 8017982:	07f2      	lsls	r2, r6, #31
 8017984:	d505      	bpl.n	8017992 <_dtoa_r+0x4aa>
 8017986:	e9d7 2300 	ldrd	r2, r3, [r7]
 801798a:	f7e8 fe4d 	bl	8000628 <__aeabi_dmul>
 801798e:	3501      	adds	r5, #1
 8017990:	2301      	movs	r3, #1
 8017992:	1076      	asrs	r6, r6, #1
 8017994:	3708      	adds	r7, #8
 8017996:	e772      	b.n	801787e <_dtoa_r+0x396>
 8017998:	2502      	movs	r5, #2
 801799a:	e774      	b.n	8017886 <_dtoa_r+0x39e>
 801799c:	f8cd a020 	str.w	sl, [sp, #32]
 80179a0:	464f      	mov	r7, r9
 80179a2:	e791      	b.n	80178c8 <_dtoa_r+0x3e0>
 80179a4:	4b4d      	ldr	r3, [pc, #308]	; (8017adc <_dtoa_r+0x5f4>)
 80179a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80179aa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80179ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d047      	beq.n	8017a44 <_dtoa_r+0x55c>
 80179b4:	4602      	mov	r2, r0
 80179b6:	460b      	mov	r3, r1
 80179b8:	2000      	movs	r0, #0
 80179ba:	494e      	ldr	r1, [pc, #312]	; (8017af4 <_dtoa_r+0x60c>)
 80179bc:	f7e8 ff5e 	bl	800087c <__aeabi_ddiv>
 80179c0:	462a      	mov	r2, r5
 80179c2:	4633      	mov	r3, r6
 80179c4:	f7e8 fc78 	bl	80002b8 <__aeabi_dsub>
 80179c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80179cc:	465d      	mov	r5, fp
 80179ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179d2:	f7e9 f8d9 	bl	8000b88 <__aeabi_d2iz>
 80179d6:	4606      	mov	r6, r0
 80179d8:	f7e8 fdbc 	bl	8000554 <__aeabi_i2d>
 80179dc:	4602      	mov	r2, r0
 80179de:	460b      	mov	r3, r1
 80179e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179e4:	f7e8 fc68 	bl	80002b8 <__aeabi_dsub>
 80179e8:	3630      	adds	r6, #48	; 0x30
 80179ea:	f805 6b01 	strb.w	r6, [r5], #1
 80179ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80179f2:	e9cd 0100 	strd	r0, r1, [sp]
 80179f6:	f7e9 f889 	bl	8000b0c <__aeabi_dcmplt>
 80179fa:	2800      	cmp	r0, #0
 80179fc:	d163      	bne.n	8017ac6 <_dtoa_r+0x5de>
 80179fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017a02:	2000      	movs	r0, #0
 8017a04:	4937      	ldr	r1, [pc, #220]	; (8017ae4 <_dtoa_r+0x5fc>)
 8017a06:	f7e8 fc57 	bl	80002b8 <__aeabi_dsub>
 8017a0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017a0e:	f7e9 f87d 	bl	8000b0c <__aeabi_dcmplt>
 8017a12:	2800      	cmp	r0, #0
 8017a14:	f040 80b7 	bne.w	8017b86 <_dtoa_r+0x69e>
 8017a18:	eba5 030b 	sub.w	r3, r5, fp
 8017a1c:	429f      	cmp	r7, r3
 8017a1e:	f77f af7c 	ble.w	801791a <_dtoa_r+0x432>
 8017a22:	2200      	movs	r2, #0
 8017a24:	4b30      	ldr	r3, [pc, #192]	; (8017ae8 <_dtoa_r+0x600>)
 8017a26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017a2a:	f7e8 fdfd 	bl	8000628 <__aeabi_dmul>
 8017a2e:	2200      	movs	r2, #0
 8017a30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017a34:	4b2c      	ldr	r3, [pc, #176]	; (8017ae8 <_dtoa_r+0x600>)
 8017a36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a3a:	f7e8 fdf5 	bl	8000628 <__aeabi_dmul>
 8017a3e:	e9cd 0100 	strd	r0, r1, [sp]
 8017a42:	e7c4      	b.n	80179ce <_dtoa_r+0x4e6>
 8017a44:	462a      	mov	r2, r5
 8017a46:	4633      	mov	r3, r6
 8017a48:	f7e8 fdee 	bl	8000628 <__aeabi_dmul>
 8017a4c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017a50:	eb0b 0507 	add.w	r5, fp, r7
 8017a54:	465e      	mov	r6, fp
 8017a56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a5a:	f7e9 f895 	bl	8000b88 <__aeabi_d2iz>
 8017a5e:	4607      	mov	r7, r0
 8017a60:	f7e8 fd78 	bl	8000554 <__aeabi_i2d>
 8017a64:	3730      	adds	r7, #48	; 0x30
 8017a66:	4602      	mov	r2, r0
 8017a68:	460b      	mov	r3, r1
 8017a6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a6e:	f7e8 fc23 	bl	80002b8 <__aeabi_dsub>
 8017a72:	f806 7b01 	strb.w	r7, [r6], #1
 8017a76:	42ae      	cmp	r6, r5
 8017a78:	e9cd 0100 	strd	r0, r1, [sp]
 8017a7c:	f04f 0200 	mov.w	r2, #0
 8017a80:	d126      	bne.n	8017ad0 <_dtoa_r+0x5e8>
 8017a82:	4b1c      	ldr	r3, [pc, #112]	; (8017af4 <_dtoa_r+0x60c>)
 8017a84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017a88:	f7e8 fc18 	bl	80002bc <__adddf3>
 8017a8c:	4602      	mov	r2, r0
 8017a8e:	460b      	mov	r3, r1
 8017a90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a94:	f7e9 f858 	bl	8000b48 <__aeabi_dcmpgt>
 8017a98:	2800      	cmp	r0, #0
 8017a9a:	d174      	bne.n	8017b86 <_dtoa_r+0x69e>
 8017a9c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017aa0:	2000      	movs	r0, #0
 8017aa2:	4914      	ldr	r1, [pc, #80]	; (8017af4 <_dtoa_r+0x60c>)
 8017aa4:	f7e8 fc08 	bl	80002b8 <__aeabi_dsub>
 8017aa8:	4602      	mov	r2, r0
 8017aaa:	460b      	mov	r3, r1
 8017aac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ab0:	f7e9 f82c 	bl	8000b0c <__aeabi_dcmplt>
 8017ab4:	2800      	cmp	r0, #0
 8017ab6:	f43f af30 	beq.w	801791a <_dtoa_r+0x432>
 8017aba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017abe:	2b30      	cmp	r3, #48	; 0x30
 8017ac0:	f105 32ff 	add.w	r2, r5, #4294967295
 8017ac4:	d002      	beq.n	8017acc <_dtoa_r+0x5e4>
 8017ac6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017aca:	e04a      	b.n	8017b62 <_dtoa_r+0x67a>
 8017acc:	4615      	mov	r5, r2
 8017ace:	e7f4      	b.n	8017aba <_dtoa_r+0x5d2>
 8017ad0:	4b05      	ldr	r3, [pc, #20]	; (8017ae8 <_dtoa_r+0x600>)
 8017ad2:	f7e8 fda9 	bl	8000628 <__aeabi_dmul>
 8017ad6:	e9cd 0100 	strd	r0, r1, [sp]
 8017ada:	e7bc      	b.n	8017a56 <_dtoa_r+0x56e>
 8017adc:	0801a650 	.word	0x0801a650
 8017ae0:	0801a628 	.word	0x0801a628
 8017ae4:	3ff00000 	.word	0x3ff00000
 8017ae8:	40240000 	.word	0x40240000
 8017aec:	401c0000 	.word	0x401c0000
 8017af0:	40140000 	.word	0x40140000
 8017af4:	3fe00000 	.word	0x3fe00000
 8017af8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017afc:	465d      	mov	r5, fp
 8017afe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b02:	4630      	mov	r0, r6
 8017b04:	4639      	mov	r1, r7
 8017b06:	f7e8 feb9 	bl	800087c <__aeabi_ddiv>
 8017b0a:	f7e9 f83d 	bl	8000b88 <__aeabi_d2iz>
 8017b0e:	4680      	mov	r8, r0
 8017b10:	f7e8 fd20 	bl	8000554 <__aeabi_i2d>
 8017b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b18:	f7e8 fd86 	bl	8000628 <__aeabi_dmul>
 8017b1c:	4602      	mov	r2, r0
 8017b1e:	460b      	mov	r3, r1
 8017b20:	4630      	mov	r0, r6
 8017b22:	4639      	mov	r1, r7
 8017b24:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017b28:	f7e8 fbc6 	bl	80002b8 <__aeabi_dsub>
 8017b2c:	f805 6b01 	strb.w	r6, [r5], #1
 8017b30:	eba5 060b 	sub.w	r6, r5, fp
 8017b34:	45b1      	cmp	r9, r6
 8017b36:	4602      	mov	r2, r0
 8017b38:	460b      	mov	r3, r1
 8017b3a:	d139      	bne.n	8017bb0 <_dtoa_r+0x6c8>
 8017b3c:	f7e8 fbbe 	bl	80002bc <__adddf3>
 8017b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b44:	4606      	mov	r6, r0
 8017b46:	460f      	mov	r7, r1
 8017b48:	f7e8 fffe 	bl	8000b48 <__aeabi_dcmpgt>
 8017b4c:	b9c8      	cbnz	r0, 8017b82 <_dtoa_r+0x69a>
 8017b4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b52:	4630      	mov	r0, r6
 8017b54:	4639      	mov	r1, r7
 8017b56:	f7e8 ffcf 	bl	8000af8 <__aeabi_dcmpeq>
 8017b5a:	b110      	cbz	r0, 8017b62 <_dtoa_r+0x67a>
 8017b5c:	f018 0f01 	tst.w	r8, #1
 8017b60:	d10f      	bne.n	8017b82 <_dtoa_r+0x69a>
 8017b62:	9904      	ldr	r1, [sp, #16]
 8017b64:	4620      	mov	r0, r4
 8017b66:	f000 fe0d 	bl	8018784 <_Bfree>
 8017b6a:	2300      	movs	r3, #0
 8017b6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017b6e:	702b      	strb	r3, [r5, #0]
 8017b70:	f10a 0301 	add.w	r3, sl, #1
 8017b74:	6013      	str	r3, [r2, #0]
 8017b76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	f000 8241 	beq.w	8018000 <_dtoa_r+0xb18>
 8017b7e:	601d      	str	r5, [r3, #0]
 8017b80:	e23e      	b.n	8018000 <_dtoa_r+0xb18>
 8017b82:	f8cd a020 	str.w	sl, [sp, #32]
 8017b86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017b8a:	2a39      	cmp	r2, #57	; 0x39
 8017b8c:	f105 33ff 	add.w	r3, r5, #4294967295
 8017b90:	d108      	bne.n	8017ba4 <_dtoa_r+0x6bc>
 8017b92:	459b      	cmp	fp, r3
 8017b94:	d10a      	bne.n	8017bac <_dtoa_r+0x6c4>
 8017b96:	9b08      	ldr	r3, [sp, #32]
 8017b98:	3301      	adds	r3, #1
 8017b9a:	9308      	str	r3, [sp, #32]
 8017b9c:	2330      	movs	r3, #48	; 0x30
 8017b9e:	f88b 3000 	strb.w	r3, [fp]
 8017ba2:	465b      	mov	r3, fp
 8017ba4:	781a      	ldrb	r2, [r3, #0]
 8017ba6:	3201      	adds	r2, #1
 8017ba8:	701a      	strb	r2, [r3, #0]
 8017baa:	e78c      	b.n	8017ac6 <_dtoa_r+0x5de>
 8017bac:	461d      	mov	r5, r3
 8017bae:	e7ea      	b.n	8017b86 <_dtoa_r+0x69e>
 8017bb0:	2200      	movs	r2, #0
 8017bb2:	4b9b      	ldr	r3, [pc, #620]	; (8017e20 <_dtoa_r+0x938>)
 8017bb4:	f7e8 fd38 	bl	8000628 <__aeabi_dmul>
 8017bb8:	2200      	movs	r2, #0
 8017bba:	2300      	movs	r3, #0
 8017bbc:	4606      	mov	r6, r0
 8017bbe:	460f      	mov	r7, r1
 8017bc0:	f7e8 ff9a 	bl	8000af8 <__aeabi_dcmpeq>
 8017bc4:	2800      	cmp	r0, #0
 8017bc6:	d09a      	beq.n	8017afe <_dtoa_r+0x616>
 8017bc8:	e7cb      	b.n	8017b62 <_dtoa_r+0x67a>
 8017bca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017bcc:	2a00      	cmp	r2, #0
 8017bce:	f000 808b 	beq.w	8017ce8 <_dtoa_r+0x800>
 8017bd2:	9a06      	ldr	r2, [sp, #24]
 8017bd4:	2a01      	cmp	r2, #1
 8017bd6:	dc6e      	bgt.n	8017cb6 <_dtoa_r+0x7ce>
 8017bd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017bda:	2a00      	cmp	r2, #0
 8017bdc:	d067      	beq.n	8017cae <_dtoa_r+0x7c6>
 8017bde:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017be2:	9f07      	ldr	r7, [sp, #28]
 8017be4:	9d05      	ldr	r5, [sp, #20]
 8017be6:	9a05      	ldr	r2, [sp, #20]
 8017be8:	2101      	movs	r1, #1
 8017bea:	441a      	add	r2, r3
 8017bec:	4620      	mov	r0, r4
 8017bee:	9205      	str	r2, [sp, #20]
 8017bf0:	4498      	add	r8, r3
 8017bf2:	f000 fea5 	bl	8018940 <__i2b>
 8017bf6:	4606      	mov	r6, r0
 8017bf8:	2d00      	cmp	r5, #0
 8017bfa:	dd0c      	ble.n	8017c16 <_dtoa_r+0x72e>
 8017bfc:	f1b8 0f00 	cmp.w	r8, #0
 8017c00:	dd09      	ble.n	8017c16 <_dtoa_r+0x72e>
 8017c02:	4545      	cmp	r5, r8
 8017c04:	9a05      	ldr	r2, [sp, #20]
 8017c06:	462b      	mov	r3, r5
 8017c08:	bfa8      	it	ge
 8017c0a:	4643      	movge	r3, r8
 8017c0c:	1ad2      	subs	r2, r2, r3
 8017c0e:	9205      	str	r2, [sp, #20]
 8017c10:	1aed      	subs	r5, r5, r3
 8017c12:	eba8 0803 	sub.w	r8, r8, r3
 8017c16:	9b07      	ldr	r3, [sp, #28]
 8017c18:	b1eb      	cbz	r3, 8017c56 <_dtoa_r+0x76e>
 8017c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d067      	beq.n	8017cf0 <_dtoa_r+0x808>
 8017c20:	b18f      	cbz	r7, 8017c46 <_dtoa_r+0x75e>
 8017c22:	4631      	mov	r1, r6
 8017c24:	463a      	mov	r2, r7
 8017c26:	4620      	mov	r0, r4
 8017c28:	f000 ff2a 	bl	8018a80 <__pow5mult>
 8017c2c:	9a04      	ldr	r2, [sp, #16]
 8017c2e:	4601      	mov	r1, r0
 8017c30:	4606      	mov	r6, r0
 8017c32:	4620      	mov	r0, r4
 8017c34:	f000 fe8d 	bl	8018952 <__multiply>
 8017c38:	9904      	ldr	r1, [sp, #16]
 8017c3a:	9008      	str	r0, [sp, #32]
 8017c3c:	4620      	mov	r0, r4
 8017c3e:	f000 fda1 	bl	8018784 <_Bfree>
 8017c42:	9b08      	ldr	r3, [sp, #32]
 8017c44:	9304      	str	r3, [sp, #16]
 8017c46:	9b07      	ldr	r3, [sp, #28]
 8017c48:	1bda      	subs	r2, r3, r7
 8017c4a:	d004      	beq.n	8017c56 <_dtoa_r+0x76e>
 8017c4c:	9904      	ldr	r1, [sp, #16]
 8017c4e:	4620      	mov	r0, r4
 8017c50:	f000 ff16 	bl	8018a80 <__pow5mult>
 8017c54:	9004      	str	r0, [sp, #16]
 8017c56:	2101      	movs	r1, #1
 8017c58:	4620      	mov	r0, r4
 8017c5a:	f000 fe71 	bl	8018940 <__i2b>
 8017c5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c60:	4607      	mov	r7, r0
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	f000 81d0 	beq.w	8018008 <_dtoa_r+0xb20>
 8017c68:	461a      	mov	r2, r3
 8017c6a:	4601      	mov	r1, r0
 8017c6c:	4620      	mov	r0, r4
 8017c6e:	f000 ff07 	bl	8018a80 <__pow5mult>
 8017c72:	9b06      	ldr	r3, [sp, #24]
 8017c74:	2b01      	cmp	r3, #1
 8017c76:	4607      	mov	r7, r0
 8017c78:	dc40      	bgt.n	8017cfc <_dtoa_r+0x814>
 8017c7a:	9b00      	ldr	r3, [sp, #0]
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d139      	bne.n	8017cf4 <_dtoa_r+0x80c>
 8017c80:	9b01      	ldr	r3, [sp, #4]
 8017c82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d136      	bne.n	8017cf8 <_dtoa_r+0x810>
 8017c8a:	9b01      	ldr	r3, [sp, #4]
 8017c8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017c90:	0d1b      	lsrs	r3, r3, #20
 8017c92:	051b      	lsls	r3, r3, #20
 8017c94:	b12b      	cbz	r3, 8017ca2 <_dtoa_r+0x7ba>
 8017c96:	9b05      	ldr	r3, [sp, #20]
 8017c98:	3301      	adds	r3, #1
 8017c9a:	9305      	str	r3, [sp, #20]
 8017c9c:	f108 0801 	add.w	r8, r8, #1
 8017ca0:	2301      	movs	r3, #1
 8017ca2:	9307      	str	r3, [sp, #28]
 8017ca4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d12a      	bne.n	8017d00 <_dtoa_r+0x818>
 8017caa:	2001      	movs	r0, #1
 8017cac:	e030      	b.n	8017d10 <_dtoa_r+0x828>
 8017cae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017cb0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017cb4:	e795      	b.n	8017be2 <_dtoa_r+0x6fa>
 8017cb6:	9b07      	ldr	r3, [sp, #28]
 8017cb8:	f109 37ff 	add.w	r7, r9, #4294967295
 8017cbc:	42bb      	cmp	r3, r7
 8017cbe:	bfbf      	itttt	lt
 8017cc0:	9b07      	ldrlt	r3, [sp, #28]
 8017cc2:	9707      	strlt	r7, [sp, #28]
 8017cc4:	1afa      	sublt	r2, r7, r3
 8017cc6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017cc8:	bfbb      	ittet	lt
 8017cca:	189b      	addlt	r3, r3, r2
 8017ccc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017cce:	1bdf      	subge	r7, r3, r7
 8017cd0:	2700      	movlt	r7, #0
 8017cd2:	f1b9 0f00 	cmp.w	r9, #0
 8017cd6:	bfb5      	itete	lt
 8017cd8:	9b05      	ldrlt	r3, [sp, #20]
 8017cda:	9d05      	ldrge	r5, [sp, #20]
 8017cdc:	eba3 0509 	sublt.w	r5, r3, r9
 8017ce0:	464b      	movge	r3, r9
 8017ce2:	bfb8      	it	lt
 8017ce4:	2300      	movlt	r3, #0
 8017ce6:	e77e      	b.n	8017be6 <_dtoa_r+0x6fe>
 8017ce8:	9f07      	ldr	r7, [sp, #28]
 8017cea:	9d05      	ldr	r5, [sp, #20]
 8017cec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017cee:	e783      	b.n	8017bf8 <_dtoa_r+0x710>
 8017cf0:	9a07      	ldr	r2, [sp, #28]
 8017cf2:	e7ab      	b.n	8017c4c <_dtoa_r+0x764>
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	e7d4      	b.n	8017ca2 <_dtoa_r+0x7ba>
 8017cf8:	9b00      	ldr	r3, [sp, #0]
 8017cfa:	e7d2      	b.n	8017ca2 <_dtoa_r+0x7ba>
 8017cfc:	2300      	movs	r3, #0
 8017cfe:	9307      	str	r3, [sp, #28]
 8017d00:	693b      	ldr	r3, [r7, #16]
 8017d02:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017d06:	6918      	ldr	r0, [r3, #16]
 8017d08:	f000 fdcc 	bl	80188a4 <__hi0bits>
 8017d0c:	f1c0 0020 	rsb	r0, r0, #32
 8017d10:	4440      	add	r0, r8
 8017d12:	f010 001f 	ands.w	r0, r0, #31
 8017d16:	d047      	beq.n	8017da8 <_dtoa_r+0x8c0>
 8017d18:	f1c0 0320 	rsb	r3, r0, #32
 8017d1c:	2b04      	cmp	r3, #4
 8017d1e:	dd3b      	ble.n	8017d98 <_dtoa_r+0x8b0>
 8017d20:	9b05      	ldr	r3, [sp, #20]
 8017d22:	f1c0 001c 	rsb	r0, r0, #28
 8017d26:	4403      	add	r3, r0
 8017d28:	9305      	str	r3, [sp, #20]
 8017d2a:	4405      	add	r5, r0
 8017d2c:	4480      	add	r8, r0
 8017d2e:	9b05      	ldr	r3, [sp, #20]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	dd05      	ble.n	8017d40 <_dtoa_r+0x858>
 8017d34:	461a      	mov	r2, r3
 8017d36:	9904      	ldr	r1, [sp, #16]
 8017d38:	4620      	mov	r0, r4
 8017d3a:	f000 feef 	bl	8018b1c <__lshift>
 8017d3e:	9004      	str	r0, [sp, #16]
 8017d40:	f1b8 0f00 	cmp.w	r8, #0
 8017d44:	dd05      	ble.n	8017d52 <_dtoa_r+0x86a>
 8017d46:	4639      	mov	r1, r7
 8017d48:	4642      	mov	r2, r8
 8017d4a:	4620      	mov	r0, r4
 8017d4c:	f000 fee6 	bl	8018b1c <__lshift>
 8017d50:	4607      	mov	r7, r0
 8017d52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017d54:	b353      	cbz	r3, 8017dac <_dtoa_r+0x8c4>
 8017d56:	4639      	mov	r1, r7
 8017d58:	9804      	ldr	r0, [sp, #16]
 8017d5a:	f000 ff33 	bl	8018bc4 <__mcmp>
 8017d5e:	2800      	cmp	r0, #0
 8017d60:	da24      	bge.n	8017dac <_dtoa_r+0x8c4>
 8017d62:	2300      	movs	r3, #0
 8017d64:	220a      	movs	r2, #10
 8017d66:	9904      	ldr	r1, [sp, #16]
 8017d68:	4620      	mov	r0, r4
 8017d6a:	f000 fd22 	bl	80187b2 <__multadd>
 8017d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d70:	9004      	str	r0, [sp, #16]
 8017d72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	f000 814d 	beq.w	8018016 <_dtoa_r+0xb2e>
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	4631      	mov	r1, r6
 8017d80:	220a      	movs	r2, #10
 8017d82:	4620      	mov	r0, r4
 8017d84:	f000 fd15 	bl	80187b2 <__multadd>
 8017d88:	9b02      	ldr	r3, [sp, #8]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	4606      	mov	r6, r0
 8017d8e:	dc4f      	bgt.n	8017e30 <_dtoa_r+0x948>
 8017d90:	9b06      	ldr	r3, [sp, #24]
 8017d92:	2b02      	cmp	r3, #2
 8017d94:	dd4c      	ble.n	8017e30 <_dtoa_r+0x948>
 8017d96:	e011      	b.n	8017dbc <_dtoa_r+0x8d4>
 8017d98:	d0c9      	beq.n	8017d2e <_dtoa_r+0x846>
 8017d9a:	9a05      	ldr	r2, [sp, #20]
 8017d9c:	331c      	adds	r3, #28
 8017d9e:	441a      	add	r2, r3
 8017da0:	9205      	str	r2, [sp, #20]
 8017da2:	441d      	add	r5, r3
 8017da4:	4498      	add	r8, r3
 8017da6:	e7c2      	b.n	8017d2e <_dtoa_r+0x846>
 8017da8:	4603      	mov	r3, r0
 8017daa:	e7f6      	b.n	8017d9a <_dtoa_r+0x8b2>
 8017dac:	f1b9 0f00 	cmp.w	r9, #0
 8017db0:	dc38      	bgt.n	8017e24 <_dtoa_r+0x93c>
 8017db2:	9b06      	ldr	r3, [sp, #24]
 8017db4:	2b02      	cmp	r3, #2
 8017db6:	dd35      	ble.n	8017e24 <_dtoa_r+0x93c>
 8017db8:	f8cd 9008 	str.w	r9, [sp, #8]
 8017dbc:	9b02      	ldr	r3, [sp, #8]
 8017dbe:	b963      	cbnz	r3, 8017dda <_dtoa_r+0x8f2>
 8017dc0:	4639      	mov	r1, r7
 8017dc2:	2205      	movs	r2, #5
 8017dc4:	4620      	mov	r0, r4
 8017dc6:	f000 fcf4 	bl	80187b2 <__multadd>
 8017dca:	4601      	mov	r1, r0
 8017dcc:	4607      	mov	r7, r0
 8017dce:	9804      	ldr	r0, [sp, #16]
 8017dd0:	f000 fef8 	bl	8018bc4 <__mcmp>
 8017dd4:	2800      	cmp	r0, #0
 8017dd6:	f73f adcc 	bgt.w	8017972 <_dtoa_r+0x48a>
 8017dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017ddc:	465d      	mov	r5, fp
 8017dde:	ea6f 0a03 	mvn.w	sl, r3
 8017de2:	f04f 0900 	mov.w	r9, #0
 8017de6:	4639      	mov	r1, r7
 8017de8:	4620      	mov	r0, r4
 8017dea:	f000 fccb 	bl	8018784 <_Bfree>
 8017dee:	2e00      	cmp	r6, #0
 8017df0:	f43f aeb7 	beq.w	8017b62 <_dtoa_r+0x67a>
 8017df4:	f1b9 0f00 	cmp.w	r9, #0
 8017df8:	d005      	beq.n	8017e06 <_dtoa_r+0x91e>
 8017dfa:	45b1      	cmp	r9, r6
 8017dfc:	d003      	beq.n	8017e06 <_dtoa_r+0x91e>
 8017dfe:	4649      	mov	r1, r9
 8017e00:	4620      	mov	r0, r4
 8017e02:	f000 fcbf 	bl	8018784 <_Bfree>
 8017e06:	4631      	mov	r1, r6
 8017e08:	4620      	mov	r0, r4
 8017e0a:	f000 fcbb 	bl	8018784 <_Bfree>
 8017e0e:	e6a8      	b.n	8017b62 <_dtoa_r+0x67a>
 8017e10:	2700      	movs	r7, #0
 8017e12:	463e      	mov	r6, r7
 8017e14:	e7e1      	b.n	8017dda <_dtoa_r+0x8f2>
 8017e16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017e1a:	463e      	mov	r6, r7
 8017e1c:	e5a9      	b.n	8017972 <_dtoa_r+0x48a>
 8017e1e:	bf00      	nop
 8017e20:	40240000 	.word	0x40240000
 8017e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e26:	f8cd 9008 	str.w	r9, [sp, #8]
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	f000 80fa 	beq.w	8018024 <_dtoa_r+0xb3c>
 8017e30:	2d00      	cmp	r5, #0
 8017e32:	dd05      	ble.n	8017e40 <_dtoa_r+0x958>
 8017e34:	4631      	mov	r1, r6
 8017e36:	462a      	mov	r2, r5
 8017e38:	4620      	mov	r0, r4
 8017e3a:	f000 fe6f 	bl	8018b1c <__lshift>
 8017e3e:	4606      	mov	r6, r0
 8017e40:	9b07      	ldr	r3, [sp, #28]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d04c      	beq.n	8017ee0 <_dtoa_r+0x9f8>
 8017e46:	6871      	ldr	r1, [r6, #4]
 8017e48:	4620      	mov	r0, r4
 8017e4a:	f000 fc67 	bl	801871c <_Balloc>
 8017e4e:	6932      	ldr	r2, [r6, #16]
 8017e50:	3202      	adds	r2, #2
 8017e52:	4605      	mov	r5, r0
 8017e54:	0092      	lsls	r2, r2, #2
 8017e56:	f106 010c 	add.w	r1, r6, #12
 8017e5a:	300c      	adds	r0, #12
 8017e5c:	f7fd fd10 	bl	8015880 <memcpy>
 8017e60:	2201      	movs	r2, #1
 8017e62:	4629      	mov	r1, r5
 8017e64:	4620      	mov	r0, r4
 8017e66:	f000 fe59 	bl	8018b1c <__lshift>
 8017e6a:	9b00      	ldr	r3, [sp, #0]
 8017e6c:	f8cd b014 	str.w	fp, [sp, #20]
 8017e70:	f003 0301 	and.w	r3, r3, #1
 8017e74:	46b1      	mov	r9, r6
 8017e76:	9307      	str	r3, [sp, #28]
 8017e78:	4606      	mov	r6, r0
 8017e7a:	4639      	mov	r1, r7
 8017e7c:	9804      	ldr	r0, [sp, #16]
 8017e7e:	f7ff faa5 	bl	80173cc <quorem>
 8017e82:	4649      	mov	r1, r9
 8017e84:	4605      	mov	r5, r0
 8017e86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017e8a:	9804      	ldr	r0, [sp, #16]
 8017e8c:	f000 fe9a 	bl	8018bc4 <__mcmp>
 8017e90:	4632      	mov	r2, r6
 8017e92:	9000      	str	r0, [sp, #0]
 8017e94:	4639      	mov	r1, r7
 8017e96:	4620      	mov	r0, r4
 8017e98:	f000 feae 	bl	8018bf8 <__mdiff>
 8017e9c:	68c3      	ldr	r3, [r0, #12]
 8017e9e:	4602      	mov	r2, r0
 8017ea0:	bb03      	cbnz	r3, 8017ee4 <_dtoa_r+0x9fc>
 8017ea2:	4601      	mov	r1, r0
 8017ea4:	9008      	str	r0, [sp, #32]
 8017ea6:	9804      	ldr	r0, [sp, #16]
 8017ea8:	f000 fe8c 	bl	8018bc4 <__mcmp>
 8017eac:	9a08      	ldr	r2, [sp, #32]
 8017eae:	4603      	mov	r3, r0
 8017eb0:	4611      	mov	r1, r2
 8017eb2:	4620      	mov	r0, r4
 8017eb4:	9308      	str	r3, [sp, #32]
 8017eb6:	f000 fc65 	bl	8018784 <_Bfree>
 8017eba:	9b08      	ldr	r3, [sp, #32]
 8017ebc:	b9a3      	cbnz	r3, 8017ee8 <_dtoa_r+0xa00>
 8017ebe:	9a06      	ldr	r2, [sp, #24]
 8017ec0:	b992      	cbnz	r2, 8017ee8 <_dtoa_r+0xa00>
 8017ec2:	9a07      	ldr	r2, [sp, #28]
 8017ec4:	b982      	cbnz	r2, 8017ee8 <_dtoa_r+0xa00>
 8017ec6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017eca:	d029      	beq.n	8017f20 <_dtoa_r+0xa38>
 8017ecc:	9b00      	ldr	r3, [sp, #0]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	dd01      	ble.n	8017ed6 <_dtoa_r+0x9ee>
 8017ed2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017ed6:	9b05      	ldr	r3, [sp, #20]
 8017ed8:	1c5d      	adds	r5, r3, #1
 8017eda:	f883 8000 	strb.w	r8, [r3]
 8017ede:	e782      	b.n	8017de6 <_dtoa_r+0x8fe>
 8017ee0:	4630      	mov	r0, r6
 8017ee2:	e7c2      	b.n	8017e6a <_dtoa_r+0x982>
 8017ee4:	2301      	movs	r3, #1
 8017ee6:	e7e3      	b.n	8017eb0 <_dtoa_r+0x9c8>
 8017ee8:	9a00      	ldr	r2, [sp, #0]
 8017eea:	2a00      	cmp	r2, #0
 8017eec:	db04      	blt.n	8017ef8 <_dtoa_r+0xa10>
 8017eee:	d125      	bne.n	8017f3c <_dtoa_r+0xa54>
 8017ef0:	9a06      	ldr	r2, [sp, #24]
 8017ef2:	bb1a      	cbnz	r2, 8017f3c <_dtoa_r+0xa54>
 8017ef4:	9a07      	ldr	r2, [sp, #28]
 8017ef6:	bb0a      	cbnz	r2, 8017f3c <_dtoa_r+0xa54>
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	ddec      	ble.n	8017ed6 <_dtoa_r+0x9ee>
 8017efc:	2201      	movs	r2, #1
 8017efe:	9904      	ldr	r1, [sp, #16]
 8017f00:	4620      	mov	r0, r4
 8017f02:	f000 fe0b 	bl	8018b1c <__lshift>
 8017f06:	4639      	mov	r1, r7
 8017f08:	9004      	str	r0, [sp, #16]
 8017f0a:	f000 fe5b 	bl	8018bc4 <__mcmp>
 8017f0e:	2800      	cmp	r0, #0
 8017f10:	dc03      	bgt.n	8017f1a <_dtoa_r+0xa32>
 8017f12:	d1e0      	bne.n	8017ed6 <_dtoa_r+0x9ee>
 8017f14:	f018 0f01 	tst.w	r8, #1
 8017f18:	d0dd      	beq.n	8017ed6 <_dtoa_r+0x9ee>
 8017f1a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017f1e:	d1d8      	bne.n	8017ed2 <_dtoa_r+0x9ea>
 8017f20:	9b05      	ldr	r3, [sp, #20]
 8017f22:	9a05      	ldr	r2, [sp, #20]
 8017f24:	1c5d      	adds	r5, r3, #1
 8017f26:	2339      	movs	r3, #57	; 0x39
 8017f28:	7013      	strb	r3, [r2, #0]
 8017f2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017f2e:	2b39      	cmp	r3, #57	; 0x39
 8017f30:	f105 32ff 	add.w	r2, r5, #4294967295
 8017f34:	d04f      	beq.n	8017fd6 <_dtoa_r+0xaee>
 8017f36:	3301      	adds	r3, #1
 8017f38:	7013      	strb	r3, [r2, #0]
 8017f3a:	e754      	b.n	8017de6 <_dtoa_r+0x8fe>
 8017f3c:	9a05      	ldr	r2, [sp, #20]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	f102 0501 	add.w	r5, r2, #1
 8017f44:	dd06      	ble.n	8017f54 <_dtoa_r+0xa6c>
 8017f46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017f4a:	d0e9      	beq.n	8017f20 <_dtoa_r+0xa38>
 8017f4c:	f108 0801 	add.w	r8, r8, #1
 8017f50:	9b05      	ldr	r3, [sp, #20]
 8017f52:	e7c2      	b.n	8017eda <_dtoa_r+0x9f2>
 8017f54:	9a02      	ldr	r2, [sp, #8]
 8017f56:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017f5a:	eba5 030b 	sub.w	r3, r5, fp
 8017f5e:	4293      	cmp	r3, r2
 8017f60:	d021      	beq.n	8017fa6 <_dtoa_r+0xabe>
 8017f62:	2300      	movs	r3, #0
 8017f64:	220a      	movs	r2, #10
 8017f66:	9904      	ldr	r1, [sp, #16]
 8017f68:	4620      	mov	r0, r4
 8017f6a:	f000 fc22 	bl	80187b2 <__multadd>
 8017f6e:	45b1      	cmp	r9, r6
 8017f70:	9004      	str	r0, [sp, #16]
 8017f72:	f04f 0300 	mov.w	r3, #0
 8017f76:	f04f 020a 	mov.w	r2, #10
 8017f7a:	4649      	mov	r1, r9
 8017f7c:	4620      	mov	r0, r4
 8017f7e:	d105      	bne.n	8017f8c <_dtoa_r+0xaa4>
 8017f80:	f000 fc17 	bl	80187b2 <__multadd>
 8017f84:	4681      	mov	r9, r0
 8017f86:	4606      	mov	r6, r0
 8017f88:	9505      	str	r5, [sp, #20]
 8017f8a:	e776      	b.n	8017e7a <_dtoa_r+0x992>
 8017f8c:	f000 fc11 	bl	80187b2 <__multadd>
 8017f90:	4631      	mov	r1, r6
 8017f92:	4681      	mov	r9, r0
 8017f94:	2300      	movs	r3, #0
 8017f96:	220a      	movs	r2, #10
 8017f98:	4620      	mov	r0, r4
 8017f9a:	f000 fc0a 	bl	80187b2 <__multadd>
 8017f9e:	4606      	mov	r6, r0
 8017fa0:	e7f2      	b.n	8017f88 <_dtoa_r+0xaa0>
 8017fa2:	f04f 0900 	mov.w	r9, #0
 8017fa6:	2201      	movs	r2, #1
 8017fa8:	9904      	ldr	r1, [sp, #16]
 8017faa:	4620      	mov	r0, r4
 8017fac:	f000 fdb6 	bl	8018b1c <__lshift>
 8017fb0:	4639      	mov	r1, r7
 8017fb2:	9004      	str	r0, [sp, #16]
 8017fb4:	f000 fe06 	bl	8018bc4 <__mcmp>
 8017fb8:	2800      	cmp	r0, #0
 8017fba:	dcb6      	bgt.n	8017f2a <_dtoa_r+0xa42>
 8017fbc:	d102      	bne.n	8017fc4 <_dtoa_r+0xadc>
 8017fbe:	f018 0f01 	tst.w	r8, #1
 8017fc2:	d1b2      	bne.n	8017f2a <_dtoa_r+0xa42>
 8017fc4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017fc8:	2b30      	cmp	r3, #48	; 0x30
 8017fca:	f105 32ff 	add.w	r2, r5, #4294967295
 8017fce:	f47f af0a 	bne.w	8017de6 <_dtoa_r+0x8fe>
 8017fd2:	4615      	mov	r5, r2
 8017fd4:	e7f6      	b.n	8017fc4 <_dtoa_r+0xadc>
 8017fd6:	4593      	cmp	fp, r2
 8017fd8:	d105      	bne.n	8017fe6 <_dtoa_r+0xafe>
 8017fda:	2331      	movs	r3, #49	; 0x31
 8017fdc:	f10a 0a01 	add.w	sl, sl, #1
 8017fe0:	f88b 3000 	strb.w	r3, [fp]
 8017fe4:	e6ff      	b.n	8017de6 <_dtoa_r+0x8fe>
 8017fe6:	4615      	mov	r5, r2
 8017fe8:	e79f      	b.n	8017f2a <_dtoa_r+0xa42>
 8017fea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018050 <_dtoa_r+0xb68>
 8017fee:	e007      	b.n	8018000 <_dtoa_r+0xb18>
 8017ff0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017ff2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8018054 <_dtoa_r+0xb6c>
 8017ff6:	b11b      	cbz	r3, 8018000 <_dtoa_r+0xb18>
 8017ff8:	f10b 0308 	add.w	r3, fp, #8
 8017ffc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017ffe:	6013      	str	r3, [r2, #0]
 8018000:	4658      	mov	r0, fp
 8018002:	b017      	add	sp, #92	; 0x5c
 8018004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018008:	9b06      	ldr	r3, [sp, #24]
 801800a:	2b01      	cmp	r3, #1
 801800c:	f77f ae35 	ble.w	8017c7a <_dtoa_r+0x792>
 8018010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018012:	9307      	str	r3, [sp, #28]
 8018014:	e649      	b.n	8017caa <_dtoa_r+0x7c2>
 8018016:	9b02      	ldr	r3, [sp, #8]
 8018018:	2b00      	cmp	r3, #0
 801801a:	dc03      	bgt.n	8018024 <_dtoa_r+0xb3c>
 801801c:	9b06      	ldr	r3, [sp, #24]
 801801e:	2b02      	cmp	r3, #2
 8018020:	f73f aecc 	bgt.w	8017dbc <_dtoa_r+0x8d4>
 8018024:	465d      	mov	r5, fp
 8018026:	4639      	mov	r1, r7
 8018028:	9804      	ldr	r0, [sp, #16]
 801802a:	f7ff f9cf 	bl	80173cc <quorem>
 801802e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018032:	f805 8b01 	strb.w	r8, [r5], #1
 8018036:	9a02      	ldr	r2, [sp, #8]
 8018038:	eba5 030b 	sub.w	r3, r5, fp
 801803c:	429a      	cmp	r2, r3
 801803e:	ddb0      	ble.n	8017fa2 <_dtoa_r+0xaba>
 8018040:	2300      	movs	r3, #0
 8018042:	220a      	movs	r2, #10
 8018044:	9904      	ldr	r1, [sp, #16]
 8018046:	4620      	mov	r0, r4
 8018048:	f000 fbb3 	bl	80187b2 <__multadd>
 801804c:	9004      	str	r0, [sp, #16]
 801804e:	e7ea      	b.n	8018026 <_dtoa_r+0xb3e>
 8018050:	0801a74b 	.word	0x0801a74b
 8018054:	0801a5a8 	.word	0x0801a5a8

08018058 <rshift>:
 8018058:	b5f0      	push	{r4, r5, r6, r7, lr}
 801805a:	6906      	ldr	r6, [r0, #16]
 801805c:	114b      	asrs	r3, r1, #5
 801805e:	429e      	cmp	r6, r3
 8018060:	f100 0414 	add.w	r4, r0, #20
 8018064:	dd30      	ble.n	80180c8 <rshift+0x70>
 8018066:	f011 011f 	ands.w	r1, r1, #31
 801806a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801806e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8018072:	d108      	bne.n	8018086 <rshift+0x2e>
 8018074:	4621      	mov	r1, r4
 8018076:	42b2      	cmp	r2, r6
 8018078:	460b      	mov	r3, r1
 801807a:	d211      	bcs.n	80180a0 <rshift+0x48>
 801807c:	f852 3b04 	ldr.w	r3, [r2], #4
 8018080:	f841 3b04 	str.w	r3, [r1], #4
 8018084:	e7f7      	b.n	8018076 <rshift+0x1e>
 8018086:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801808a:	f1c1 0c20 	rsb	ip, r1, #32
 801808e:	40cd      	lsrs	r5, r1
 8018090:	3204      	adds	r2, #4
 8018092:	4623      	mov	r3, r4
 8018094:	42b2      	cmp	r2, r6
 8018096:	4617      	mov	r7, r2
 8018098:	d30c      	bcc.n	80180b4 <rshift+0x5c>
 801809a:	601d      	str	r5, [r3, #0]
 801809c:	b105      	cbz	r5, 80180a0 <rshift+0x48>
 801809e:	3304      	adds	r3, #4
 80180a0:	1b1a      	subs	r2, r3, r4
 80180a2:	42a3      	cmp	r3, r4
 80180a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80180a8:	bf08      	it	eq
 80180aa:	2300      	moveq	r3, #0
 80180ac:	6102      	str	r2, [r0, #16]
 80180ae:	bf08      	it	eq
 80180b0:	6143      	streq	r3, [r0, #20]
 80180b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180b4:	683f      	ldr	r7, [r7, #0]
 80180b6:	fa07 f70c 	lsl.w	r7, r7, ip
 80180ba:	433d      	orrs	r5, r7
 80180bc:	f843 5b04 	str.w	r5, [r3], #4
 80180c0:	f852 5b04 	ldr.w	r5, [r2], #4
 80180c4:	40cd      	lsrs	r5, r1
 80180c6:	e7e5      	b.n	8018094 <rshift+0x3c>
 80180c8:	4623      	mov	r3, r4
 80180ca:	e7e9      	b.n	80180a0 <rshift+0x48>

080180cc <__hexdig_fun>:
 80180cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80180d0:	2b09      	cmp	r3, #9
 80180d2:	d802      	bhi.n	80180da <__hexdig_fun+0xe>
 80180d4:	3820      	subs	r0, #32
 80180d6:	b2c0      	uxtb	r0, r0
 80180d8:	4770      	bx	lr
 80180da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80180de:	2b05      	cmp	r3, #5
 80180e0:	d801      	bhi.n	80180e6 <__hexdig_fun+0x1a>
 80180e2:	3847      	subs	r0, #71	; 0x47
 80180e4:	e7f7      	b.n	80180d6 <__hexdig_fun+0xa>
 80180e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80180ea:	2b05      	cmp	r3, #5
 80180ec:	d801      	bhi.n	80180f2 <__hexdig_fun+0x26>
 80180ee:	3827      	subs	r0, #39	; 0x27
 80180f0:	e7f1      	b.n	80180d6 <__hexdig_fun+0xa>
 80180f2:	2000      	movs	r0, #0
 80180f4:	4770      	bx	lr

080180f6 <__gethex>:
 80180f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180fa:	b08b      	sub	sp, #44	; 0x2c
 80180fc:	468a      	mov	sl, r1
 80180fe:	9002      	str	r0, [sp, #8]
 8018100:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018102:	9306      	str	r3, [sp, #24]
 8018104:	4690      	mov	r8, r2
 8018106:	f000 fadf 	bl	80186c8 <__localeconv_l>
 801810a:	6803      	ldr	r3, [r0, #0]
 801810c:	9303      	str	r3, [sp, #12]
 801810e:	4618      	mov	r0, r3
 8018110:	f7e8 f876 	bl	8000200 <strlen>
 8018114:	9b03      	ldr	r3, [sp, #12]
 8018116:	9001      	str	r0, [sp, #4]
 8018118:	4403      	add	r3, r0
 801811a:	f04f 0b00 	mov.w	fp, #0
 801811e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018122:	9307      	str	r3, [sp, #28]
 8018124:	f8da 3000 	ldr.w	r3, [sl]
 8018128:	3302      	adds	r3, #2
 801812a:	461f      	mov	r7, r3
 801812c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018130:	2830      	cmp	r0, #48	; 0x30
 8018132:	d06c      	beq.n	801820e <__gethex+0x118>
 8018134:	f7ff ffca 	bl	80180cc <__hexdig_fun>
 8018138:	4604      	mov	r4, r0
 801813a:	2800      	cmp	r0, #0
 801813c:	d16a      	bne.n	8018214 <__gethex+0x11e>
 801813e:	9a01      	ldr	r2, [sp, #4]
 8018140:	9903      	ldr	r1, [sp, #12]
 8018142:	4638      	mov	r0, r7
 8018144:	f001 fc36 	bl	80199b4 <strncmp>
 8018148:	2800      	cmp	r0, #0
 801814a:	d166      	bne.n	801821a <__gethex+0x124>
 801814c:	9b01      	ldr	r3, [sp, #4]
 801814e:	5cf8      	ldrb	r0, [r7, r3]
 8018150:	18fe      	adds	r6, r7, r3
 8018152:	f7ff ffbb 	bl	80180cc <__hexdig_fun>
 8018156:	2800      	cmp	r0, #0
 8018158:	d062      	beq.n	8018220 <__gethex+0x12a>
 801815a:	4633      	mov	r3, r6
 801815c:	7818      	ldrb	r0, [r3, #0]
 801815e:	2830      	cmp	r0, #48	; 0x30
 8018160:	461f      	mov	r7, r3
 8018162:	f103 0301 	add.w	r3, r3, #1
 8018166:	d0f9      	beq.n	801815c <__gethex+0x66>
 8018168:	f7ff ffb0 	bl	80180cc <__hexdig_fun>
 801816c:	fab0 f580 	clz	r5, r0
 8018170:	096d      	lsrs	r5, r5, #5
 8018172:	4634      	mov	r4, r6
 8018174:	f04f 0b01 	mov.w	fp, #1
 8018178:	463a      	mov	r2, r7
 801817a:	4616      	mov	r6, r2
 801817c:	3201      	adds	r2, #1
 801817e:	7830      	ldrb	r0, [r6, #0]
 8018180:	f7ff ffa4 	bl	80180cc <__hexdig_fun>
 8018184:	2800      	cmp	r0, #0
 8018186:	d1f8      	bne.n	801817a <__gethex+0x84>
 8018188:	9a01      	ldr	r2, [sp, #4]
 801818a:	9903      	ldr	r1, [sp, #12]
 801818c:	4630      	mov	r0, r6
 801818e:	f001 fc11 	bl	80199b4 <strncmp>
 8018192:	b950      	cbnz	r0, 80181aa <__gethex+0xb4>
 8018194:	b954      	cbnz	r4, 80181ac <__gethex+0xb6>
 8018196:	9b01      	ldr	r3, [sp, #4]
 8018198:	18f4      	adds	r4, r6, r3
 801819a:	4622      	mov	r2, r4
 801819c:	4616      	mov	r6, r2
 801819e:	3201      	adds	r2, #1
 80181a0:	7830      	ldrb	r0, [r6, #0]
 80181a2:	f7ff ff93 	bl	80180cc <__hexdig_fun>
 80181a6:	2800      	cmp	r0, #0
 80181a8:	d1f8      	bne.n	801819c <__gethex+0xa6>
 80181aa:	b10c      	cbz	r4, 80181b0 <__gethex+0xba>
 80181ac:	1ba4      	subs	r4, r4, r6
 80181ae:	00a4      	lsls	r4, r4, #2
 80181b0:	7833      	ldrb	r3, [r6, #0]
 80181b2:	2b50      	cmp	r3, #80	; 0x50
 80181b4:	d001      	beq.n	80181ba <__gethex+0xc4>
 80181b6:	2b70      	cmp	r3, #112	; 0x70
 80181b8:	d140      	bne.n	801823c <__gethex+0x146>
 80181ba:	7873      	ldrb	r3, [r6, #1]
 80181bc:	2b2b      	cmp	r3, #43	; 0x2b
 80181be:	d031      	beq.n	8018224 <__gethex+0x12e>
 80181c0:	2b2d      	cmp	r3, #45	; 0x2d
 80181c2:	d033      	beq.n	801822c <__gethex+0x136>
 80181c4:	1c71      	adds	r1, r6, #1
 80181c6:	f04f 0900 	mov.w	r9, #0
 80181ca:	7808      	ldrb	r0, [r1, #0]
 80181cc:	f7ff ff7e 	bl	80180cc <__hexdig_fun>
 80181d0:	1e43      	subs	r3, r0, #1
 80181d2:	b2db      	uxtb	r3, r3
 80181d4:	2b18      	cmp	r3, #24
 80181d6:	d831      	bhi.n	801823c <__gethex+0x146>
 80181d8:	f1a0 0210 	sub.w	r2, r0, #16
 80181dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80181e0:	f7ff ff74 	bl	80180cc <__hexdig_fun>
 80181e4:	1e43      	subs	r3, r0, #1
 80181e6:	b2db      	uxtb	r3, r3
 80181e8:	2b18      	cmp	r3, #24
 80181ea:	d922      	bls.n	8018232 <__gethex+0x13c>
 80181ec:	f1b9 0f00 	cmp.w	r9, #0
 80181f0:	d000      	beq.n	80181f4 <__gethex+0xfe>
 80181f2:	4252      	negs	r2, r2
 80181f4:	4414      	add	r4, r2
 80181f6:	f8ca 1000 	str.w	r1, [sl]
 80181fa:	b30d      	cbz	r5, 8018240 <__gethex+0x14a>
 80181fc:	f1bb 0f00 	cmp.w	fp, #0
 8018200:	bf0c      	ite	eq
 8018202:	2706      	moveq	r7, #6
 8018204:	2700      	movne	r7, #0
 8018206:	4638      	mov	r0, r7
 8018208:	b00b      	add	sp, #44	; 0x2c
 801820a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801820e:	f10b 0b01 	add.w	fp, fp, #1
 8018212:	e78a      	b.n	801812a <__gethex+0x34>
 8018214:	2500      	movs	r5, #0
 8018216:	462c      	mov	r4, r5
 8018218:	e7ae      	b.n	8018178 <__gethex+0x82>
 801821a:	463e      	mov	r6, r7
 801821c:	2501      	movs	r5, #1
 801821e:	e7c7      	b.n	80181b0 <__gethex+0xba>
 8018220:	4604      	mov	r4, r0
 8018222:	e7fb      	b.n	801821c <__gethex+0x126>
 8018224:	f04f 0900 	mov.w	r9, #0
 8018228:	1cb1      	adds	r1, r6, #2
 801822a:	e7ce      	b.n	80181ca <__gethex+0xd4>
 801822c:	f04f 0901 	mov.w	r9, #1
 8018230:	e7fa      	b.n	8018228 <__gethex+0x132>
 8018232:	230a      	movs	r3, #10
 8018234:	fb03 0202 	mla	r2, r3, r2, r0
 8018238:	3a10      	subs	r2, #16
 801823a:	e7cf      	b.n	80181dc <__gethex+0xe6>
 801823c:	4631      	mov	r1, r6
 801823e:	e7da      	b.n	80181f6 <__gethex+0x100>
 8018240:	1bf3      	subs	r3, r6, r7
 8018242:	3b01      	subs	r3, #1
 8018244:	4629      	mov	r1, r5
 8018246:	2b07      	cmp	r3, #7
 8018248:	dc49      	bgt.n	80182de <__gethex+0x1e8>
 801824a:	9802      	ldr	r0, [sp, #8]
 801824c:	f000 fa66 	bl	801871c <_Balloc>
 8018250:	9b01      	ldr	r3, [sp, #4]
 8018252:	f100 0914 	add.w	r9, r0, #20
 8018256:	f04f 0b00 	mov.w	fp, #0
 801825a:	f1c3 0301 	rsb	r3, r3, #1
 801825e:	4605      	mov	r5, r0
 8018260:	f8cd 9010 	str.w	r9, [sp, #16]
 8018264:	46da      	mov	sl, fp
 8018266:	9308      	str	r3, [sp, #32]
 8018268:	42b7      	cmp	r7, r6
 801826a:	d33b      	bcc.n	80182e4 <__gethex+0x1ee>
 801826c:	9804      	ldr	r0, [sp, #16]
 801826e:	f840 ab04 	str.w	sl, [r0], #4
 8018272:	eba0 0009 	sub.w	r0, r0, r9
 8018276:	1080      	asrs	r0, r0, #2
 8018278:	6128      	str	r0, [r5, #16]
 801827a:	0147      	lsls	r7, r0, #5
 801827c:	4650      	mov	r0, sl
 801827e:	f000 fb11 	bl	80188a4 <__hi0bits>
 8018282:	f8d8 6000 	ldr.w	r6, [r8]
 8018286:	1a3f      	subs	r7, r7, r0
 8018288:	42b7      	cmp	r7, r6
 801828a:	dd64      	ble.n	8018356 <__gethex+0x260>
 801828c:	1bbf      	subs	r7, r7, r6
 801828e:	4639      	mov	r1, r7
 8018290:	4628      	mov	r0, r5
 8018292:	f000 fe21 	bl	8018ed8 <__any_on>
 8018296:	4682      	mov	sl, r0
 8018298:	b178      	cbz	r0, 80182ba <__gethex+0x1c4>
 801829a:	1e7b      	subs	r3, r7, #1
 801829c:	1159      	asrs	r1, r3, #5
 801829e:	f003 021f 	and.w	r2, r3, #31
 80182a2:	f04f 0a01 	mov.w	sl, #1
 80182a6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80182aa:	fa0a f202 	lsl.w	r2, sl, r2
 80182ae:	420a      	tst	r2, r1
 80182b0:	d003      	beq.n	80182ba <__gethex+0x1c4>
 80182b2:	4553      	cmp	r3, sl
 80182b4:	dc46      	bgt.n	8018344 <__gethex+0x24e>
 80182b6:	f04f 0a02 	mov.w	sl, #2
 80182ba:	4639      	mov	r1, r7
 80182bc:	4628      	mov	r0, r5
 80182be:	f7ff fecb 	bl	8018058 <rshift>
 80182c2:	443c      	add	r4, r7
 80182c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80182c8:	42a3      	cmp	r3, r4
 80182ca:	da52      	bge.n	8018372 <__gethex+0x27c>
 80182cc:	4629      	mov	r1, r5
 80182ce:	9802      	ldr	r0, [sp, #8]
 80182d0:	f000 fa58 	bl	8018784 <_Bfree>
 80182d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80182d6:	2300      	movs	r3, #0
 80182d8:	6013      	str	r3, [r2, #0]
 80182da:	27a3      	movs	r7, #163	; 0xa3
 80182dc:	e793      	b.n	8018206 <__gethex+0x110>
 80182de:	3101      	adds	r1, #1
 80182e0:	105b      	asrs	r3, r3, #1
 80182e2:	e7b0      	b.n	8018246 <__gethex+0x150>
 80182e4:	1e73      	subs	r3, r6, #1
 80182e6:	9305      	str	r3, [sp, #20]
 80182e8:	9a07      	ldr	r2, [sp, #28]
 80182ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80182ee:	4293      	cmp	r3, r2
 80182f0:	d018      	beq.n	8018324 <__gethex+0x22e>
 80182f2:	f1bb 0f20 	cmp.w	fp, #32
 80182f6:	d107      	bne.n	8018308 <__gethex+0x212>
 80182f8:	9b04      	ldr	r3, [sp, #16]
 80182fa:	f8c3 a000 	str.w	sl, [r3]
 80182fe:	3304      	adds	r3, #4
 8018300:	f04f 0a00 	mov.w	sl, #0
 8018304:	9304      	str	r3, [sp, #16]
 8018306:	46d3      	mov	fp, sl
 8018308:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801830c:	f7ff fede 	bl	80180cc <__hexdig_fun>
 8018310:	f000 000f 	and.w	r0, r0, #15
 8018314:	fa00 f00b 	lsl.w	r0, r0, fp
 8018318:	ea4a 0a00 	orr.w	sl, sl, r0
 801831c:	f10b 0b04 	add.w	fp, fp, #4
 8018320:	9b05      	ldr	r3, [sp, #20]
 8018322:	e00d      	b.n	8018340 <__gethex+0x24a>
 8018324:	9b05      	ldr	r3, [sp, #20]
 8018326:	9a08      	ldr	r2, [sp, #32]
 8018328:	4413      	add	r3, r2
 801832a:	42bb      	cmp	r3, r7
 801832c:	d3e1      	bcc.n	80182f2 <__gethex+0x1fc>
 801832e:	4618      	mov	r0, r3
 8018330:	9a01      	ldr	r2, [sp, #4]
 8018332:	9903      	ldr	r1, [sp, #12]
 8018334:	9309      	str	r3, [sp, #36]	; 0x24
 8018336:	f001 fb3d 	bl	80199b4 <strncmp>
 801833a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801833c:	2800      	cmp	r0, #0
 801833e:	d1d8      	bne.n	80182f2 <__gethex+0x1fc>
 8018340:	461e      	mov	r6, r3
 8018342:	e791      	b.n	8018268 <__gethex+0x172>
 8018344:	1eb9      	subs	r1, r7, #2
 8018346:	4628      	mov	r0, r5
 8018348:	f000 fdc6 	bl	8018ed8 <__any_on>
 801834c:	2800      	cmp	r0, #0
 801834e:	d0b2      	beq.n	80182b6 <__gethex+0x1c0>
 8018350:	f04f 0a03 	mov.w	sl, #3
 8018354:	e7b1      	b.n	80182ba <__gethex+0x1c4>
 8018356:	da09      	bge.n	801836c <__gethex+0x276>
 8018358:	1bf7      	subs	r7, r6, r7
 801835a:	4629      	mov	r1, r5
 801835c:	463a      	mov	r2, r7
 801835e:	9802      	ldr	r0, [sp, #8]
 8018360:	f000 fbdc 	bl	8018b1c <__lshift>
 8018364:	1be4      	subs	r4, r4, r7
 8018366:	4605      	mov	r5, r0
 8018368:	f100 0914 	add.w	r9, r0, #20
 801836c:	f04f 0a00 	mov.w	sl, #0
 8018370:	e7a8      	b.n	80182c4 <__gethex+0x1ce>
 8018372:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018376:	42a0      	cmp	r0, r4
 8018378:	dd6a      	ble.n	8018450 <__gethex+0x35a>
 801837a:	1b04      	subs	r4, r0, r4
 801837c:	42a6      	cmp	r6, r4
 801837e:	dc2e      	bgt.n	80183de <__gethex+0x2e8>
 8018380:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018384:	2b02      	cmp	r3, #2
 8018386:	d022      	beq.n	80183ce <__gethex+0x2d8>
 8018388:	2b03      	cmp	r3, #3
 801838a:	d024      	beq.n	80183d6 <__gethex+0x2e0>
 801838c:	2b01      	cmp	r3, #1
 801838e:	d115      	bne.n	80183bc <__gethex+0x2c6>
 8018390:	42a6      	cmp	r6, r4
 8018392:	d113      	bne.n	80183bc <__gethex+0x2c6>
 8018394:	2e01      	cmp	r6, #1
 8018396:	dc0b      	bgt.n	80183b0 <__gethex+0x2ba>
 8018398:	9a06      	ldr	r2, [sp, #24]
 801839a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801839e:	6013      	str	r3, [r2, #0]
 80183a0:	2301      	movs	r3, #1
 80183a2:	612b      	str	r3, [r5, #16]
 80183a4:	f8c9 3000 	str.w	r3, [r9]
 80183a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80183aa:	2762      	movs	r7, #98	; 0x62
 80183ac:	601d      	str	r5, [r3, #0]
 80183ae:	e72a      	b.n	8018206 <__gethex+0x110>
 80183b0:	1e71      	subs	r1, r6, #1
 80183b2:	4628      	mov	r0, r5
 80183b4:	f000 fd90 	bl	8018ed8 <__any_on>
 80183b8:	2800      	cmp	r0, #0
 80183ba:	d1ed      	bne.n	8018398 <__gethex+0x2a2>
 80183bc:	4629      	mov	r1, r5
 80183be:	9802      	ldr	r0, [sp, #8]
 80183c0:	f000 f9e0 	bl	8018784 <_Bfree>
 80183c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80183c6:	2300      	movs	r3, #0
 80183c8:	6013      	str	r3, [r2, #0]
 80183ca:	2750      	movs	r7, #80	; 0x50
 80183cc:	e71b      	b.n	8018206 <__gethex+0x110>
 80183ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d0e1      	beq.n	8018398 <__gethex+0x2a2>
 80183d4:	e7f2      	b.n	80183bc <__gethex+0x2c6>
 80183d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d1dd      	bne.n	8018398 <__gethex+0x2a2>
 80183dc:	e7ee      	b.n	80183bc <__gethex+0x2c6>
 80183de:	1e67      	subs	r7, r4, #1
 80183e0:	f1ba 0f00 	cmp.w	sl, #0
 80183e4:	d131      	bne.n	801844a <__gethex+0x354>
 80183e6:	b127      	cbz	r7, 80183f2 <__gethex+0x2fc>
 80183e8:	4639      	mov	r1, r7
 80183ea:	4628      	mov	r0, r5
 80183ec:	f000 fd74 	bl	8018ed8 <__any_on>
 80183f0:	4682      	mov	sl, r0
 80183f2:	117a      	asrs	r2, r7, #5
 80183f4:	2301      	movs	r3, #1
 80183f6:	f007 071f 	and.w	r7, r7, #31
 80183fa:	fa03 f707 	lsl.w	r7, r3, r7
 80183fe:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018402:	4621      	mov	r1, r4
 8018404:	421f      	tst	r7, r3
 8018406:	4628      	mov	r0, r5
 8018408:	bf18      	it	ne
 801840a:	f04a 0a02 	orrne.w	sl, sl, #2
 801840e:	1b36      	subs	r6, r6, r4
 8018410:	f7ff fe22 	bl	8018058 <rshift>
 8018414:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018418:	2702      	movs	r7, #2
 801841a:	f1ba 0f00 	cmp.w	sl, #0
 801841e:	d048      	beq.n	80184b2 <__gethex+0x3bc>
 8018420:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018424:	2b02      	cmp	r3, #2
 8018426:	d015      	beq.n	8018454 <__gethex+0x35e>
 8018428:	2b03      	cmp	r3, #3
 801842a:	d017      	beq.n	801845c <__gethex+0x366>
 801842c:	2b01      	cmp	r3, #1
 801842e:	d109      	bne.n	8018444 <__gethex+0x34e>
 8018430:	f01a 0f02 	tst.w	sl, #2
 8018434:	d006      	beq.n	8018444 <__gethex+0x34e>
 8018436:	f8d9 3000 	ldr.w	r3, [r9]
 801843a:	ea4a 0a03 	orr.w	sl, sl, r3
 801843e:	f01a 0f01 	tst.w	sl, #1
 8018442:	d10e      	bne.n	8018462 <__gethex+0x36c>
 8018444:	f047 0710 	orr.w	r7, r7, #16
 8018448:	e033      	b.n	80184b2 <__gethex+0x3bc>
 801844a:	f04f 0a01 	mov.w	sl, #1
 801844e:	e7d0      	b.n	80183f2 <__gethex+0x2fc>
 8018450:	2701      	movs	r7, #1
 8018452:	e7e2      	b.n	801841a <__gethex+0x324>
 8018454:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018456:	f1c3 0301 	rsb	r3, r3, #1
 801845a:	9315      	str	r3, [sp, #84]	; 0x54
 801845c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801845e:	2b00      	cmp	r3, #0
 8018460:	d0f0      	beq.n	8018444 <__gethex+0x34e>
 8018462:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8018466:	f105 0314 	add.w	r3, r5, #20
 801846a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801846e:	eb03 010a 	add.w	r1, r3, sl
 8018472:	f04f 0c00 	mov.w	ip, #0
 8018476:	4618      	mov	r0, r3
 8018478:	f853 2b04 	ldr.w	r2, [r3], #4
 801847c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018480:	d01c      	beq.n	80184bc <__gethex+0x3c6>
 8018482:	3201      	adds	r2, #1
 8018484:	6002      	str	r2, [r0, #0]
 8018486:	2f02      	cmp	r7, #2
 8018488:	f105 0314 	add.w	r3, r5, #20
 801848c:	d138      	bne.n	8018500 <__gethex+0x40a>
 801848e:	f8d8 2000 	ldr.w	r2, [r8]
 8018492:	3a01      	subs	r2, #1
 8018494:	42b2      	cmp	r2, r6
 8018496:	d10a      	bne.n	80184ae <__gethex+0x3b8>
 8018498:	1171      	asrs	r1, r6, #5
 801849a:	2201      	movs	r2, #1
 801849c:	f006 061f 	and.w	r6, r6, #31
 80184a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80184a4:	fa02 f606 	lsl.w	r6, r2, r6
 80184a8:	421e      	tst	r6, r3
 80184aa:	bf18      	it	ne
 80184ac:	4617      	movne	r7, r2
 80184ae:	f047 0720 	orr.w	r7, r7, #32
 80184b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80184b4:	601d      	str	r5, [r3, #0]
 80184b6:	9b06      	ldr	r3, [sp, #24]
 80184b8:	601c      	str	r4, [r3, #0]
 80184ba:	e6a4      	b.n	8018206 <__gethex+0x110>
 80184bc:	4299      	cmp	r1, r3
 80184be:	f843 cc04 	str.w	ip, [r3, #-4]
 80184c2:	d8d8      	bhi.n	8018476 <__gethex+0x380>
 80184c4:	68ab      	ldr	r3, [r5, #8]
 80184c6:	4599      	cmp	r9, r3
 80184c8:	db12      	blt.n	80184f0 <__gethex+0x3fa>
 80184ca:	6869      	ldr	r1, [r5, #4]
 80184cc:	9802      	ldr	r0, [sp, #8]
 80184ce:	3101      	adds	r1, #1
 80184d0:	f000 f924 	bl	801871c <_Balloc>
 80184d4:	692a      	ldr	r2, [r5, #16]
 80184d6:	3202      	adds	r2, #2
 80184d8:	f105 010c 	add.w	r1, r5, #12
 80184dc:	4683      	mov	fp, r0
 80184de:	0092      	lsls	r2, r2, #2
 80184e0:	300c      	adds	r0, #12
 80184e2:	f7fd f9cd 	bl	8015880 <memcpy>
 80184e6:	4629      	mov	r1, r5
 80184e8:	9802      	ldr	r0, [sp, #8]
 80184ea:	f000 f94b 	bl	8018784 <_Bfree>
 80184ee:	465d      	mov	r5, fp
 80184f0:	692b      	ldr	r3, [r5, #16]
 80184f2:	1c5a      	adds	r2, r3, #1
 80184f4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80184f8:	612a      	str	r2, [r5, #16]
 80184fa:	2201      	movs	r2, #1
 80184fc:	615a      	str	r2, [r3, #20]
 80184fe:	e7c2      	b.n	8018486 <__gethex+0x390>
 8018500:	692a      	ldr	r2, [r5, #16]
 8018502:	454a      	cmp	r2, r9
 8018504:	dd0b      	ble.n	801851e <__gethex+0x428>
 8018506:	2101      	movs	r1, #1
 8018508:	4628      	mov	r0, r5
 801850a:	f7ff fda5 	bl	8018058 <rshift>
 801850e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018512:	3401      	adds	r4, #1
 8018514:	42a3      	cmp	r3, r4
 8018516:	f6ff aed9 	blt.w	80182cc <__gethex+0x1d6>
 801851a:	2701      	movs	r7, #1
 801851c:	e7c7      	b.n	80184ae <__gethex+0x3b8>
 801851e:	f016 061f 	ands.w	r6, r6, #31
 8018522:	d0fa      	beq.n	801851a <__gethex+0x424>
 8018524:	449a      	add	sl, r3
 8018526:	f1c6 0620 	rsb	r6, r6, #32
 801852a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801852e:	f000 f9b9 	bl	80188a4 <__hi0bits>
 8018532:	42b0      	cmp	r0, r6
 8018534:	dbe7      	blt.n	8018506 <__gethex+0x410>
 8018536:	e7f0      	b.n	801851a <__gethex+0x424>

08018538 <L_shift>:
 8018538:	f1c2 0208 	rsb	r2, r2, #8
 801853c:	0092      	lsls	r2, r2, #2
 801853e:	b570      	push	{r4, r5, r6, lr}
 8018540:	f1c2 0620 	rsb	r6, r2, #32
 8018544:	6843      	ldr	r3, [r0, #4]
 8018546:	6804      	ldr	r4, [r0, #0]
 8018548:	fa03 f506 	lsl.w	r5, r3, r6
 801854c:	432c      	orrs	r4, r5
 801854e:	40d3      	lsrs	r3, r2
 8018550:	6004      	str	r4, [r0, #0]
 8018552:	f840 3f04 	str.w	r3, [r0, #4]!
 8018556:	4288      	cmp	r0, r1
 8018558:	d3f4      	bcc.n	8018544 <L_shift+0xc>
 801855a:	bd70      	pop	{r4, r5, r6, pc}

0801855c <__match>:
 801855c:	b530      	push	{r4, r5, lr}
 801855e:	6803      	ldr	r3, [r0, #0]
 8018560:	3301      	adds	r3, #1
 8018562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018566:	b914      	cbnz	r4, 801856e <__match+0x12>
 8018568:	6003      	str	r3, [r0, #0]
 801856a:	2001      	movs	r0, #1
 801856c:	bd30      	pop	{r4, r5, pc}
 801856e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018572:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018576:	2d19      	cmp	r5, #25
 8018578:	bf98      	it	ls
 801857a:	3220      	addls	r2, #32
 801857c:	42a2      	cmp	r2, r4
 801857e:	d0f0      	beq.n	8018562 <__match+0x6>
 8018580:	2000      	movs	r0, #0
 8018582:	e7f3      	b.n	801856c <__match+0x10>

08018584 <__hexnan>:
 8018584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018588:	680b      	ldr	r3, [r1, #0]
 801858a:	6801      	ldr	r1, [r0, #0]
 801858c:	115f      	asrs	r7, r3, #5
 801858e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8018592:	f013 031f 	ands.w	r3, r3, #31
 8018596:	b087      	sub	sp, #28
 8018598:	bf18      	it	ne
 801859a:	3704      	addne	r7, #4
 801859c:	2500      	movs	r5, #0
 801859e:	1f3e      	subs	r6, r7, #4
 80185a0:	4682      	mov	sl, r0
 80185a2:	4690      	mov	r8, r2
 80185a4:	9301      	str	r3, [sp, #4]
 80185a6:	f847 5c04 	str.w	r5, [r7, #-4]
 80185aa:	46b1      	mov	r9, r6
 80185ac:	4634      	mov	r4, r6
 80185ae:	9502      	str	r5, [sp, #8]
 80185b0:	46ab      	mov	fp, r5
 80185b2:	784a      	ldrb	r2, [r1, #1]
 80185b4:	1c4b      	adds	r3, r1, #1
 80185b6:	9303      	str	r3, [sp, #12]
 80185b8:	b342      	cbz	r2, 801860c <__hexnan+0x88>
 80185ba:	4610      	mov	r0, r2
 80185bc:	9105      	str	r1, [sp, #20]
 80185be:	9204      	str	r2, [sp, #16]
 80185c0:	f7ff fd84 	bl	80180cc <__hexdig_fun>
 80185c4:	2800      	cmp	r0, #0
 80185c6:	d143      	bne.n	8018650 <__hexnan+0xcc>
 80185c8:	9a04      	ldr	r2, [sp, #16]
 80185ca:	9905      	ldr	r1, [sp, #20]
 80185cc:	2a20      	cmp	r2, #32
 80185ce:	d818      	bhi.n	8018602 <__hexnan+0x7e>
 80185d0:	9b02      	ldr	r3, [sp, #8]
 80185d2:	459b      	cmp	fp, r3
 80185d4:	dd13      	ble.n	80185fe <__hexnan+0x7a>
 80185d6:	454c      	cmp	r4, r9
 80185d8:	d206      	bcs.n	80185e8 <__hexnan+0x64>
 80185da:	2d07      	cmp	r5, #7
 80185dc:	dc04      	bgt.n	80185e8 <__hexnan+0x64>
 80185de:	462a      	mov	r2, r5
 80185e0:	4649      	mov	r1, r9
 80185e2:	4620      	mov	r0, r4
 80185e4:	f7ff ffa8 	bl	8018538 <L_shift>
 80185e8:	4544      	cmp	r4, r8
 80185ea:	d944      	bls.n	8018676 <__hexnan+0xf2>
 80185ec:	2300      	movs	r3, #0
 80185ee:	f1a4 0904 	sub.w	r9, r4, #4
 80185f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80185f6:	f8cd b008 	str.w	fp, [sp, #8]
 80185fa:	464c      	mov	r4, r9
 80185fc:	461d      	mov	r5, r3
 80185fe:	9903      	ldr	r1, [sp, #12]
 8018600:	e7d7      	b.n	80185b2 <__hexnan+0x2e>
 8018602:	2a29      	cmp	r2, #41	; 0x29
 8018604:	d14a      	bne.n	801869c <__hexnan+0x118>
 8018606:	3102      	adds	r1, #2
 8018608:	f8ca 1000 	str.w	r1, [sl]
 801860c:	f1bb 0f00 	cmp.w	fp, #0
 8018610:	d044      	beq.n	801869c <__hexnan+0x118>
 8018612:	454c      	cmp	r4, r9
 8018614:	d206      	bcs.n	8018624 <__hexnan+0xa0>
 8018616:	2d07      	cmp	r5, #7
 8018618:	dc04      	bgt.n	8018624 <__hexnan+0xa0>
 801861a:	462a      	mov	r2, r5
 801861c:	4649      	mov	r1, r9
 801861e:	4620      	mov	r0, r4
 8018620:	f7ff ff8a 	bl	8018538 <L_shift>
 8018624:	4544      	cmp	r4, r8
 8018626:	d928      	bls.n	801867a <__hexnan+0xf6>
 8018628:	4643      	mov	r3, r8
 801862a:	f854 2b04 	ldr.w	r2, [r4], #4
 801862e:	f843 2b04 	str.w	r2, [r3], #4
 8018632:	42a6      	cmp	r6, r4
 8018634:	d2f9      	bcs.n	801862a <__hexnan+0xa6>
 8018636:	2200      	movs	r2, #0
 8018638:	f843 2b04 	str.w	r2, [r3], #4
 801863c:	429e      	cmp	r6, r3
 801863e:	d2fb      	bcs.n	8018638 <__hexnan+0xb4>
 8018640:	6833      	ldr	r3, [r6, #0]
 8018642:	b91b      	cbnz	r3, 801864c <__hexnan+0xc8>
 8018644:	4546      	cmp	r6, r8
 8018646:	d127      	bne.n	8018698 <__hexnan+0x114>
 8018648:	2301      	movs	r3, #1
 801864a:	6033      	str	r3, [r6, #0]
 801864c:	2005      	movs	r0, #5
 801864e:	e026      	b.n	801869e <__hexnan+0x11a>
 8018650:	3501      	adds	r5, #1
 8018652:	2d08      	cmp	r5, #8
 8018654:	f10b 0b01 	add.w	fp, fp, #1
 8018658:	dd06      	ble.n	8018668 <__hexnan+0xe4>
 801865a:	4544      	cmp	r4, r8
 801865c:	d9cf      	bls.n	80185fe <__hexnan+0x7a>
 801865e:	2300      	movs	r3, #0
 8018660:	f844 3c04 	str.w	r3, [r4, #-4]
 8018664:	2501      	movs	r5, #1
 8018666:	3c04      	subs	r4, #4
 8018668:	6822      	ldr	r2, [r4, #0]
 801866a:	f000 000f 	and.w	r0, r0, #15
 801866e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018672:	6020      	str	r0, [r4, #0]
 8018674:	e7c3      	b.n	80185fe <__hexnan+0x7a>
 8018676:	2508      	movs	r5, #8
 8018678:	e7c1      	b.n	80185fe <__hexnan+0x7a>
 801867a:	9b01      	ldr	r3, [sp, #4]
 801867c:	2b00      	cmp	r3, #0
 801867e:	d0df      	beq.n	8018640 <__hexnan+0xbc>
 8018680:	f04f 32ff 	mov.w	r2, #4294967295
 8018684:	f1c3 0320 	rsb	r3, r3, #32
 8018688:	fa22 f303 	lsr.w	r3, r2, r3
 801868c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018690:	401a      	ands	r2, r3
 8018692:	f847 2c04 	str.w	r2, [r7, #-4]
 8018696:	e7d3      	b.n	8018640 <__hexnan+0xbc>
 8018698:	3e04      	subs	r6, #4
 801869a:	e7d1      	b.n	8018640 <__hexnan+0xbc>
 801869c:	2004      	movs	r0, #4
 801869e:	b007      	add	sp, #28
 80186a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080186a4 <__locale_ctype_ptr_l>:
 80186a4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80186a8:	4770      	bx	lr
	...

080186ac <__locale_ctype_ptr>:
 80186ac:	4b04      	ldr	r3, [pc, #16]	; (80186c0 <__locale_ctype_ptr+0x14>)
 80186ae:	4a05      	ldr	r2, [pc, #20]	; (80186c4 <__locale_ctype_ptr+0x18>)
 80186b0:	681b      	ldr	r3, [r3, #0]
 80186b2:	6a1b      	ldr	r3, [r3, #32]
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	bf08      	it	eq
 80186b8:	4613      	moveq	r3, r2
 80186ba:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80186be:	4770      	bx	lr
 80186c0:	2000000c 	.word	0x2000000c
 80186c4:	20000070 	.word	0x20000070

080186c8 <__localeconv_l>:
 80186c8:	30f0      	adds	r0, #240	; 0xf0
 80186ca:	4770      	bx	lr

080186cc <_localeconv_r>:
 80186cc:	4b04      	ldr	r3, [pc, #16]	; (80186e0 <_localeconv_r+0x14>)
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	6a18      	ldr	r0, [r3, #32]
 80186d2:	4b04      	ldr	r3, [pc, #16]	; (80186e4 <_localeconv_r+0x18>)
 80186d4:	2800      	cmp	r0, #0
 80186d6:	bf08      	it	eq
 80186d8:	4618      	moveq	r0, r3
 80186da:	30f0      	adds	r0, #240	; 0xf0
 80186dc:	4770      	bx	lr
 80186de:	bf00      	nop
 80186e0:	2000000c 	.word	0x2000000c
 80186e4:	20000070 	.word	0x20000070

080186e8 <malloc>:
 80186e8:	4b02      	ldr	r3, [pc, #8]	; (80186f4 <malloc+0xc>)
 80186ea:	4601      	mov	r1, r0
 80186ec:	6818      	ldr	r0, [r3, #0]
 80186ee:	f000 bc71 	b.w	8018fd4 <_malloc_r>
 80186f2:	bf00      	nop
 80186f4:	2000000c 	.word	0x2000000c

080186f8 <__ascii_mbtowc>:
 80186f8:	b082      	sub	sp, #8
 80186fa:	b901      	cbnz	r1, 80186fe <__ascii_mbtowc+0x6>
 80186fc:	a901      	add	r1, sp, #4
 80186fe:	b142      	cbz	r2, 8018712 <__ascii_mbtowc+0x1a>
 8018700:	b14b      	cbz	r3, 8018716 <__ascii_mbtowc+0x1e>
 8018702:	7813      	ldrb	r3, [r2, #0]
 8018704:	600b      	str	r3, [r1, #0]
 8018706:	7812      	ldrb	r2, [r2, #0]
 8018708:	1c10      	adds	r0, r2, #0
 801870a:	bf18      	it	ne
 801870c:	2001      	movne	r0, #1
 801870e:	b002      	add	sp, #8
 8018710:	4770      	bx	lr
 8018712:	4610      	mov	r0, r2
 8018714:	e7fb      	b.n	801870e <__ascii_mbtowc+0x16>
 8018716:	f06f 0001 	mvn.w	r0, #1
 801871a:	e7f8      	b.n	801870e <__ascii_mbtowc+0x16>

0801871c <_Balloc>:
 801871c:	b570      	push	{r4, r5, r6, lr}
 801871e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018720:	4604      	mov	r4, r0
 8018722:	460e      	mov	r6, r1
 8018724:	b93d      	cbnz	r5, 8018736 <_Balloc+0x1a>
 8018726:	2010      	movs	r0, #16
 8018728:	f7ff ffde 	bl	80186e8 <malloc>
 801872c:	6260      	str	r0, [r4, #36]	; 0x24
 801872e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018732:	6005      	str	r5, [r0, #0]
 8018734:	60c5      	str	r5, [r0, #12]
 8018736:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018738:	68eb      	ldr	r3, [r5, #12]
 801873a:	b183      	cbz	r3, 801875e <_Balloc+0x42>
 801873c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801873e:	68db      	ldr	r3, [r3, #12]
 8018740:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018744:	b9b8      	cbnz	r0, 8018776 <_Balloc+0x5a>
 8018746:	2101      	movs	r1, #1
 8018748:	fa01 f506 	lsl.w	r5, r1, r6
 801874c:	1d6a      	adds	r2, r5, #5
 801874e:	0092      	lsls	r2, r2, #2
 8018750:	4620      	mov	r0, r4
 8018752:	f000 fbe2 	bl	8018f1a <_calloc_r>
 8018756:	b160      	cbz	r0, 8018772 <_Balloc+0x56>
 8018758:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801875c:	e00e      	b.n	801877c <_Balloc+0x60>
 801875e:	2221      	movs	r2, #33	; 0x21
 8018760:	2104      	movs	r1, #4
 8018762:	4620      	mov	r0, r4
 8018764:	f000 fbd9 	bl	8018f1a <_calloc_r>
 8018768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801876a:	60e8      	str	r0, [r5, #12]
 801876c:	68db      	ldr	r3, [r3, #12]
 801876e:	2b00      	cmp	r3, #0
 8018770:	d1e4      	bne.n	801873c <_Balloc+0x20>
 8018772:	2000      	movs	r0, #0
 8018774:	bd70      	pop	{r4, r5, r6, pc}
 8018776:	6802      	ldr	r2, [r0, #0]
 8018778:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801877c:	2300      	movs	r3, #0
 801877e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018782:	e7f7      	b.n	8018774 <_Balloc+0x58>

08018784 <_Bfree>:
 8018784:	b570      	push	{r4, r5, r6, lr}
 8018786:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018788:	4606      	mov	r6, r0
 801878a:	460d      	mov	r5, r1
 801878c:	b93c      	cbnz	r4, 801879e <_Bfree+0x1a>
 801878e:	2010      	movs	r0, #16
 8018790:	f7ff ffaa 	bl	80186e8 <malloc>
 8018794:	6270      	str	r0, [r6, #36]	; 0x24
 8018796:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801879a:	6004      	str	r4, [r0, #0]
 801879c:	60c4      	str	r4, [r0, #12]
 801879e:	b13d      	cbz	r5, 80187b0 <_Bfree+0x2c>
 80187a0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80187a2:	686a      	ldr	r2, [r5, #4]
 80187a4:	68db      	ldr	r3, [r3, #12]
 80187a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80187aa:	6029      	str	r1, [r5, #0]
 80187ac:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80187b0:	bd70      	pop	{r4, r5, r6, pc}

080187b2 <__multadd>:
 80187b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187b6:	690d      	ldr	r5, [r1, #16]
 80187b8:	461f      	mov	r7, r3
 80187ba:	4606      	mov	r6, r0
 80187bc:	460c      	mov	r4, r1
 80187be:	f101 0c14 	add.w	ip, r1, #20
 80187c2:	2300      	movs	r3, #0
 80187c4:	f8dc 0000 	ldr.w	r0, [ip]
 80187c8:	b281      	uxth	r1, r0
 80187ca:	fb02 7101 	mla	r1, r2, r1, r7
 80187ce:	0c0f      	lsrs	r7, r1, #16
 80187d0:	0c00      	lsrs	r0, r0, #16
 80187d2:	fb02 7000 	mla	r0, r2, r0, r7
 80187d6:	b289      	uxth	r1, r1
 80187d8:	3301      	adds	r3, #1
 80187da:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80187de:	429d      	cmp	r5, r3
 80187e0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80187e4:	f84c 1b04 	str.w	r1, [ip], #4
 80187e8:	dcec      	bgt.n	80187c4 <__multadd+0x12>
 80187ea:	b1d7      	cbz	r7, 8018822 <__multadd+0x70>
 80187ec:	68a3      	ldr	r3, [r4, #8]
 80187ee:	42ab      	cmp	r3, r5
 80187f0:	dc12      	bgt.n	8018818 <__multadd+0x66>
 80187f2:	6861      	ldr	r1, [r4, #4]
 80187f4:	4630      	mov	r0, r6
 80187f6:	3101      	adds	r1, #1
 80187f8:	f7ff ff90 	bl	801871c <_Balloc>
 80187fc:	6922      	ldr	r2, [r4, #16]
 80187fe:	3202      	adds	r2, #2
 8018800:	f104 010c 	add.w	r1, r4, #12
 8018804:	4680      	mov	r8, r0
 8018806:	0092      	lsls	r2, r2, #2
 8018808:	300c      	adds	r0, #12
 801880a:	f7fd f839 	bl	8015880 <memcpy>
 801880e:	4621      	mov	r1, r4
 8018810:	4630      	mov	r0, r6
 8018812:	f7ff ffb7 	bl	8018784 <_Bfree>
 8018816:	4644      	mov	r4, r8
 8018818:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801881c:	3501      	adds	r5, #1
 801881e:	615f      	str	r7, [r3, #20]
 8018820:	6125      	str	r5, [r4, #16]
 8018822:	4620      	mov	r0, r4
 8018824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018828 <__s2b>:
 8018828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801882c:	460c      	mov	r4, r1
 801882e:	4615      	mov	r5, r2
 8018830:	461f      	mov	r7, r3
 8018832:	2209      	movs	r2, #9
 8018834:	3308      	adds	r3, #8
 8018836:	4606      	mov	r6, r0
 8018838:	fb93 f3f2 	sdiv	r3, r3, r2
 801883c:	2100      	movs	r1, #0
 801883e:	2201      	movs	r2, #1
 8018840:	429a      	cmp	r2, r3
 8018842:	db20      	blt.n	8018886 <__s2b+0x5e>
 8018844:	4630      	mov	r0, r6
 8018846:	f7ff ff69 	bl	801871c <_Balloc>
 801884a:	9b08      	ldr	r3, [sp, #32]
 801884c:	6143      	str	r3, [r0, #20]
 801884e:	2d09      	cmp	r5, #9
 8018850:	f04f 0301 	mov.w	r3, #1
 8018854:	6103      	str	r3, [r0, #16]
 8018856:	dd19      	ble.n	801888c <__s2b+0x64>
 8018858:	f104 0809 	add.w	r8, r4, #9
 801885c:	46c1      	mov	r9, r8
 801885e:	442c      	add	r4, r5
 8018860:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018864:	4601      	mov	r1, r0
 8018866:	3b30      	subs	r3, #48	; 0x30
 8018868:	220a      	movs	r2, #10
 801886a:	4630      	mov	r0, r6
 801886c:	f7ff ffa1 	bl	80187b2 <__multadd>
 8018870:	45a1      	cmp	r9, r4
 8018872:	d1f5      	bne.n	8018860 <__s2b+0x38>
 8018874:	eb08 0405 	add.w	r4, r8, r5
 8018878:	3c08      	subs	r4, #8
 801887a:	1b2d      	subs	r5, r5, r4
 801887c:	1963      	adds	r3, r4, r5
 801887e:	42bb      	cmp	r3, r7
 8018880:	db07      	blt.n	8018892 <__s2b+0x6a>
 8018882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018886:	0052      	lsls	r2, r2, #1
 8018888:	3101      	adds	r1, #1
 801888a:	e7d9      	b.n	8018840 <__s2b+0x18>
 801888c:	340a      	adds	r4, #10
 801888e:	2509      	movs	r5, #9
 8018890:	e7f3      	b.n	801887a <__s2b+0x52>
 8018892:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018896:	4601      	mov	r1, r0
 8018898:	3b30      	subs	r3, #48	; 0x30
 801889a:	220a      	movs	r2, #10
 801889c:	4630      	mov	r0, r6
 801889e:	f7ff ff88 	bl	80187b2 <__multadd>
 80188a2:	e7eb      	b.n	801887c <__s2b+0x54>

080188a4 <__hi0bits>:
 80188a4:	0c02      	lsrs	r2, r0, #16
 80188a6:	0412      	lsls	r2, r2, #16
 80188a8:	4603      	mov	r3, r0
 80188aa:	b9b2      	cbnz	r2, 80188da <__hi0bits+0x36>
 80188ac:	0403      	lsls	r3, r0, #16
 80188ae:	2010      	movs	r0, #16
 80188b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80188b4:	bf04      	itt	eq
 80188b6:	021b      	lsleq	r3, r3, #8
 80188b8:	3008      	addeq	r0, #8
 80188ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80188be:	bf04      	itt	eq
 80188c0:	011b      	lsleq	r3, r3, #4
 80188c2:	3004      	addeq	r0, #4
 80188c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80188c8:	bf04      	itt	eq
 80188ca:	009b      	lsleq	r3, r3, #2
 80188cc:	3002      	addeq	r0, #2
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	db06      	blt.n	80188e0 <__hi0bits+0x3c>
 80188d2:	005b      	lsls	r3, r3, #1
 80188d4:	d503      	bpl.n	80188de <__hi0bits+0x3a>
 80188d6:	3001      	adds	r0, #1
 80188d8:	4770      	bx	lr
 80188da:	2000      	movs	r0, #0
 80188dc:	e7e8      	b.n	80188b0 <__hi0bits+0xc>
 80188de:	2020      	movs	r0, #32
 80188e0:	4770      	bx	lr

080188e2 <__lo0bits>:
 80188e2:	6803      	ldr	r3, [r0, #0]
 80188e4:	f013 0207 	ands.w	r2, r3, #7
 80188e8:	4601      	mov	r1, r0
 80188ea:	d00b      	beq.n	8018904 <__lo0bits+0x22>
 80188ec:	07da      	lsls	r2, r3, #31
 80188ee:	d423      	bmi.n	8018938 <__lo0bits+0x56>
 80188f0:	0798      	lsls	r0, r3, #30
 80188f2:	bf49      	itett	mi
 80188f4:	085b      	lsrmi	r3, r3, #1
 80188f6:	089b      	lsrpl	r3, r3, #2
 80188f8:	2001      	movmi	r0, #1
 80188fa:	600b      	strmi	r3, [r1, #0]
 80188fc:	bf5c      	itt	pl
 80188fe:	600b      	strpl	r3, [r1, #0]
 8018900:	2002      	movpl	r0, #2
 8018902:	4770      	bx	lr
 8018904:	b298      	uxth	r0, r3
 8018906:	b9a8      	cbnz	r0, 8018934 <__lo0bits+0x52>
 8018908:	0c1b      	lsrs	r3, r3, #16
 801890a:	2010      	movs	r0, #16
 801890c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018910:	bf04      	itt	eq
 8018912:	0a1b      	lsreq	r3, r3, #8
 8018914:	3008      	addeq	r0, #8
 8018916:	071a      	lsls	r2, r3, #28
 8018918:	bf04      	itt	eq
 801891a:	091b      	lsreq	r3, r3, #4
 801891c:	3004      	addeq	r0, #4
 801891e:	079a      	lsls	r2, r3, #30
 8018920:	bf04      	itt	eq
 8018922:	089b      	lsreq	r3, r3, #2
 8018924:	3002      	addeq	r0, #2
 8018926:	07da      	lsls	r2, r3, #31
 8018928:	d402      	bmi.n	8018930 <__lo0bits+0x4e>
 801892a:	085b      	lsrs	r3, r3, #1
 801892c:	d006      	beq.n	801893c <__lo0bits+0x5a>
 801892e:	3001      	adds	r0, #1
 8018930:	600b      	str	r3, [r1, #0]
 8018932:	4770      	bx	lr
 8018934:	4610      	mov	r0, r2
 8018936:	e7e9      	b.n	801890c <__lo0bits+0x2a>
 8018938:	2000      	movs	r0, #0
 801893a:	4770      	bx	lr
 801893c:	2020      	movs	r0, #32
 801893e:	4770      	bx	lr

08018940 <__i2b>:
 8018940:	b510      	push	{r4, lr}
 8018942:	460c      	mov	r4, r1
 8018944:	2101      	movs	r1, #1
 8018946:	f7ff fee9 	bl	801871c <_Balloc>
 801894a:	2201      	movs	r2, #1
 801894c:	6144      	str	r4, [r0, #20]
 801894e:	6102      	str	r2, [r0, #16]
 8018950:	bd10      	pop	{r4, pc}

08018952 <__multiply>:
 8018952:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018956:	4614      	mov	r4, r2
 8018958:	690a      	ldr	r2, [r1, #16]
 801895a:	6923      	ldr	r3, [r4, #16]
 801895c:	429a      	cmp	r2, r3
 801895e:	bfb8      	it	lt
 8018960:	460b      	movlt	r3, r1
 8018962:	4688      	mov	r8, r1
 8018964:	bfbc      	itt	lt
 8018966:	46a0      	movlt	r8, r4
 8018968:	461c      	movlt	r4, r3
 801896a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801896e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018972:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018976:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801897a:	eb07 0609 	add.w	r6, r7, r9
 801897e:	42b3      	cmp	r3, r6
 8018980:	bfb8      	it	lt
 8018982:	3101      	addlt	r1, #1
 8018984:	f7ff feca 	bl	801871c <_Balloc>
 8018988:	f100 0514 	add.w	r5, r0, #20
 801898c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018990:	462b      	mov	r3, r5
 8018992:	2200      	movs	r2, #0
 8018994:	4573      	cmp	r3, lr
 8018996:	d316      	bcc.n	80189c6 <__multiply+0x74>
 8018998:	f104 0214 	add.w	r2, r4, #20
 801899c:	f108 0114 	add.w	r1, r8, #20
 80189a0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80189a4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80189a8:	9300      	str	r3, [sp, #0]
 80189aa:	9b00      	ldr	r3, [sp, #0]
 80189ac:	9201      	str	r2, [sp, #4]
 80189ae:	4293      	cmp	r3, r2
 80189b0:	d80c      	bhi.n	80189cc <__multiply+0x7a>
 80189b2:	2e00      	cmp	r6, #0
 80189b4:	dd03      	ble.n	80189be <__multiply+0x6c>
 80189b6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d05d      	beq.n	8018a7a <__multiply+0x128>
 80189be:	6106      	str	r6, [r0, #16]
 80189c0:	b003      	add	sp, #12
 80189c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189c6:	f843 2b04 	str.w	r2, [r3], #4
 80189ca:	e7e3      	b.n	8018994 <__multiply+0x42>
 80189cc:	f8b2 b000 	ldrh.w	fp, [r2]
 80189d0:	f1bb 0f00 	cmp.w	fp, #0
 80189d4:	d023      	beq.n	8018a1e <__multiply+0xcc>
 80189d6:	4689      	mov	r9, r1
 80189d8:	46ac      	mov	ip, r5
 80189da:	f04f 0800 	mov.w	r8, #0
 80189de:	f859 4b04 	ldr.w	r4, [r9], #4
 80189e2:	f8dc a000 	ldr.w	sl, [ip]
 80189e6:	b2a3      	uxth	r3, r4
 80189e8:	fa1f fa8a 	uxth.w	sl, sl
 80189ec:	fb0b a303 	mla	r3, fp, r3, sl
 80189f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80189f4:	f8dc 4000 	ldr.w	r4, [ip]
 80189f8:	4443      	add	r3, r8
 80189fa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80189fe:	fb0b 840a 	mla	r4, fp, sl, r8
 8018a02:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018a06:	46e2      	mov	sl, ip
 8018a08:	b29b      	uxth	r3, r3
 8018a0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018a0e:	454f      	cmp	r7, r9
 8018a10:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018a14:	f84a 3b04 	str.w	r3, [sl], #4
 8018a18:	d82b      	bhi.n	8018a72 <__multiply+0x120>
 8018a1a:	f8cc 8004 	str.w	r8, [ip, #4]
 8018a1e:	9b01      	ldr	r3, [sp, #4]
 8018a20:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018a24:	3204      	adds	r2, #4
 8018a26:	f1ba 0f00 	cmp.w	sl, #0
 8018a2a:	d020      	beq.n	8018a6e <__multiply+0x11c>
 8018a2c:	682b      	ldr	r3, [r5, #0]
 8018a2e:	4689      	mov	r9, r1
 8018a30:	46a8      	mov	r8, r5
 8018a32:	f04f 0b00 	mov.w	fp, #0
 8018a36:	f8b9 c000 	ldrh.w	ip, [r9]
 8018a3a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018a3e:	fb0a 440c 	mla	r4, sl, ip, r4
 8018a42:	445c      	add	r4, fp
 8018a44:	46c4      	mov	ip, r8
 8018a46:	b29b      	uxth	r3, r3
 8018a48:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018a4c:	f84c 3b04 	str.w	r3, [ip], #4
 8018a50:	f859 3b04 	ldr.w	r3, [r9], #4
 8018a54:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018a58:	0c1b      	lsrs	r3, r3, #16
 8018a5a:	fb0a b303 	mla	r3, sl, r3, fp
 8018a5e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018a62:	454f      	cmp	r7, r9
 8018a64:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018a68:	d805      	bhi.n	8018a76 <__multiply+0x124>
 8018a6a:	f8c8 3004 	str.w	r3, [r8, #4]
 8018a6e:	3504      	adds	r5, #4
 8018a70:	e79b      	b.n	80189aa <__multiply+0x58>
 8018a72:	46d4      	mov	ip, sl
 8018a74:	e7b3      	b.n	80189de <__multiply+0x8c>
 8018a76:	46e0      	mov	r8, ip
 8018a78:	e7dd      	b.n	8018a36 <__multiply+0xe4>
 8018a7a:	3e01      	subs	r6, #1
 8018a7c:	e799      	b.n	80189b2 <__multiply+0x60>
	...

08018a80 <__pow5mult>:
 8018a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a84:	4615      	mov	r5, r2
 8018a86:	f012 0203 	ands.w	r2, r2, #3
 8018a8a:	4606      	mov	r6, r0
 8018a8c:	460f      	mov	r7, r1
 8018a8e:	d007      	beq.n	8018aa0 <__pow5mult+0x20>
 8018a90:	3a01      	subs	r2, #1
 8018a92:	4c21      	ldr	r4, [pc, #132]	; (8018b18 <__pow5mult+0x98>)
 8018a94:	2300      	movs	r3, #0
 8018a96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018a9a:	f7ff fe8a 	bl	80187b2 <__multadd>
 8018a9e:	4607      	mov	r7, r0
 8018aa0:	10ad      	asrs	r5, r5, #2
 8018aa2:	d035      	beq.n	8018b10 <__pow5mult+0x90>
 8018aa4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018aa6:	b93c      	cbnz	r4, 8018ab8 <__pow5mult+0x38>
 8018aa8:	2010      	movs	r0, #16
 8018aaa:	f7ff fe1d 	bl	80186e8 <malloc>
 8018aae:	6270      	str	r0, [r6, #36]	; 0x24
 8018ab0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018ab4:	6004      	str	r4, [r0, #0]
 8018ab6:	60c4      	str	r4, [r0, #12]
 8018ab8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018abc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018ac0:	b94c      	cbnz	r4, 8018ad6 <__pow5mult+0x56>
 8018ac2:	f240 2171 	movw	r1, #625	; 0x271
 8018ac6:	4630      	mov	r0, r6
 8018ac8:	f7ff ff3a 	bl	8018940 <__i2b>
 8018acc:	2300      	movs	r3, #0
 8018ace:	f8c8 0008 	str.w	r0, [r8, #8]
 8018ad2:	4604      	mov	r4, r0
 8018ad4:	6003      	str	r3, [r0, #0]
 8018ad6:	f04f 0800 	mov.w	r8, #0
 8018ada:	07eb      	lsls	r3, r5, #31
 8018adc:	d50a      	bpl.n	8018af4 <__pow5mult+0x74>
 8018ade:	4639      	mov	r1, r7
 8018ae0:	4622      	mov	r2, r4
 8018ae2:	4630      	mov	r0, r6
 8018ae4:	f7ff ff35 	bl	8018952 <__multiply>
 8018ae8:	4639      	mov	r1, r7
 8018aea:	4681      	mov	r9, r0
 8018aec:	4630      	mov	r0, r6
 8018aee:	f7ff fe49 	bl	8018784 <_Bfree>
 8018af2:	464f      	mov	r7, r9
 8018af4:	106d      	asrs	r5, r5, #1
 8018af6:	d00b      	beq.n	8018b10 <__pow5mult+0x90>
 8018af8:	6820      	ldr	r0, [r4, #0]
 8018afa:	b938      	cbnz	r0, 8018b0c <__pow5mult+0x8c>
 8018afc:	4622      	mov	r2, r4
 8018afe:	4621      	mov	r1, r4
 8018b00:	4630      	mov	r0, r6
 8018b02:	f7ff ff26 	bl	8018952 <__multiply>
 8018b06:	6020      	str	r0, [r4, #0]
 8018b08:	f8c0 8000 	str.w	r8, [r0]
 8018b0c:	4604      	mov	r4, r0
 8018b0e:	e7e4      	b.n	8018ada <__pow5mult+0x5a>
 8018b10:	4638      	mov	r0, r7
 8018b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b16:	bf00      	nop
 8018b18:	0801a718 	.word	0x0801a718

08018b1c <__lshift>:
 8018b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b20:	460c      	mov	r4, r1
 8018b22:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018b26:	6923      	ldr	r3, [r4, #16]
 8018b28:	6849      	ldr	r1, [r1, #4]
 8018b2a:	eb0a 0903 	add.w	r9, sl, r3
 8018b2e:	68a3      	ldr	r3, [r4, #8]
 8018b30:	4607      	mov	r7, r0
 8018b32:	4616      	mov	r6, r2
 8018b34:	f109 0501 	add.w	r5, r9, #1
 8018b38:	42ab      	cmp	r3, r5
 8018b3a:	db32      	blt.n	8018ba2 <__lshift+0x86>
 8018b3c:	4638      	mov	r0, r7
 8018b3e:	f7ff fded 	bl	801871c <_Balloc>
 8018b42:	2300      	movs	r3, #0
 8018b44:	4680      	mov	r8, r0
 8018b46:	f100 0114 	add.w	r1, r0, #20
 8018b4a:	461a      	mov	r2, r3
 8018b4c:	4553      	cmp	r3, sl
 8018b4e:	db2b      	blt.n	8018ba8 <__lshift+0x8c>
 8018b50:	6920      	ldr	r0, [r4, #16]
 8018b52:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018b56:	f104 0314 	add.w	r3, r4, #20
 8018b5a:	f016 021f 	ands.w	r2, r6, #31
 8018b5e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018b62:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018b66:	d025      	beq.n	8018bb4 <__lshift+0x98>
 8018b68:	f1c2 0e20 	rsb	lr, r2, #32
 8018b6c:	2000      	movs	r0, #0
 8018b6e:	681e      	ldr	r6, [r3, #0]
 8018b70:	468a      	mov	sl, r1
 8018b72:	4096      	lsls	r6, r2
 8018b74:	4330      	orrs	r0, r6
 8018b76:	f84a 0b04 	str.w	r0, [sl], #4
 8018b7a:	f853 0b04 	ldr.w	r0, [r3], #4
 8018b7e:	459c      	cmp	ip, r3
 8018b80:	fa20 f00e 	lsr.w	r0, r0, lr
 8018b84:	d814      	bhi.n	8018bb0 <__lshift+0x94>
 8018b86:	6048      	str	r0, [r1, #4]
 8018b88:	b108      	cbz	r0, 8018b8e <__lshift+0x72>
 8018b8a:	f109 0502 	add.w	r5, r9, #2
 8018b8e:	3d01      	subs	r5, #1
 8018b90:	4638      	mov	r0, r7
 8018b92:	f8c8 5010 	str.w	r5, [r8, #16]
 8018b96:	4621      	mov	r1, r4
 8018b98:	f7ff fdf4 	bl	8018784 <_Bfree>
 8018b9c:	4640      	mov	r0, r8
 8018b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ba2:	3101      	adds	r1, #1
 8018ba4:	005b      	lsls	r3, r3, #1
 8018ba6:	e7c7      	b.n	8018b38 <__lshift+0x1c>
 8018ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018bac:	3301      	adds	r3, #1
 8018bae:	e7cd      	b.n	8018b4c <__lshift+0x30>
 8018bb0:	4651      	mov	r1, sl
 8018bb2:	e7dc      	b.n	8018b6e <__lshift+0x52>
 8018bb4:	3904      	subs	r1, #4
 8018bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8018bba:	f841 2f04 	str.w	r2, [r1, #4]!
 8018bbe:	459c      	cmp	ip, r3
 8018bc0:	d8f9      	bhi.n	8018bb6 <__lshift+0x9a>
 8018bc2:	e7e4      	b.n	8018b8e <__lshift+0x72>

08018bc4 <__mcmp>:
 8018bc4:	6903      	ldr	r3, [r0, #16]
 8018bc6:	690a      	ldr	r2, [r1, #16]
 8018bc8:	1a9b      	subs	r3, r3, r2
 8018bca:	b530      	push	{r4, r5, lr}
 8018bcc:	d10c      	bne.n	8018be8 <__mcmp+0x24>
 8018bce:	0092      	lsls	r2, r2, #2
 8018bd0:	3014      	adds	r0, #20
 8018bd2:	3114      	adds	r1, #20
 8018bd4:	1884      	adds	r4, r0, r2
 8018bd6:	4411      	add	r1, r2
 8018bd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018bdc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018be0:	4295      	cmp	r5, r2
 8018be2:	d003      	beq.n	8018bec <__mcmp+0x28>
 8018be4:	d305      	bcc.n	8018bf2 <__mcmp+0x2e>
 8018be6:	2301      	movs	r3, #1
 8018be8:	4618      	mov	r0, r3
 8018bea:	bd30      	pop	{r4, r5, pc}
 8018bec:	42a0      	cmp	r0, r4
 8018bee:	d3f3      	bcc.n	8018bd8 <__mcmp+0x14>
 8018bf0:	e7fa      	b.n	8018be8 <__mcmp+0x24>
 8018bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8018bf6:	e7f7      	b.n	8018be8 <__mcmp+0x24>

08018bf8 <__mdiff>:
 8018bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018bfc:	460d      	mov	r5, r1
 8018bfe:	4607      	mov	r7, r0
 8018c00:	4611      	mov	r1, r2
 8018c02:	4628      	mov	r0, r5
 8018c04:	4614      	mov	r4, r2
 8018c06:	f7ff ffdd 	bl	8018bc4 <__mcmp>
 8018c0a:	1e06      	subs	r6, r0, #0
 8018c0c:	d108      	bne.n	8018c20 <__mdiff+0x28>
 8018c0e:	4631      	mov	r1, r6
 8018c10:	4638      	mov	r0, r7
 8018c12:	f7ff fd83 	bl	801871c <_Balloc>
 8018c16:	2301      	movs	r3, #1
 8018c18:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c20:	bfa4      	itt	ge
 8018c22:	4623      	movge	r3, r4
 8018c24:	462c      	movge	r4, r5
 8018c26:	4638      	mov	r0, r7
 8018c28:	6861      	ldr	r1, [r4, #4]
 8018c2a:	bfa6      	itte	ge
 8018c2c:	461d      	movge	r5, r3
 8018c2e:	2600      	movge	r6, #0
 8018c30:	2601      	movlt	r6, #1
 8018c32:	f7ff fd73 	bl	801871c <_Balloc>
 8018c36:	692b      	ldr	r3, [r5, #16]
 8018c38:	60c6      	str	r6, [r0, #12]
 8018c3a:	6926      	ldr	r6, [r4, #16]
 8018c3c:	f105 0914 	add.w	r9, r5, #20
 8018c40:	f104 0214 	add.w	r2, r4, #20
 8018c44:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018c48:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018c4c:	f100 0514 	add.w	r5, r0, #20
 8018c50:	f04f 0e00 	mov.w	lr, #0
 8018c54:	f852 ab04 	ldr.w	sl, [r2], #4
 8018c58:	f859 4b04 	ldr.w	r4, [r9], #4
 8018c5c:	fa1e f18a 	uxtah	r1, lr, sl
 8018c60:	b2a3      	uxth	r3, r4
 8018c62:	1ac9      	subs	r1, r1, r3
 8018c64:	0c23      	lsrs	r3, r4, #16
 8018c66:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018c6a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018c6e:	b289      	uxth	r1, r1
 8018c70:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018c74:	45c8      	cmp	r8, r9
 8018c76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018c7a:	4694      	mov	ip, r2
 8018c7c:	f845 3b04 	str.w	r3, [r5], #4
 8018c80:	d8e8      	bhi.n	8018c54 <__mdiff+0x5c>
 8018c82:	45bc      	cmp	ip, r7
 8018c84:	d304      	bcc.n	8018c90 <__mdiff+0x98>
 8018c86:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018c8a:	b183      	cbz	r3, 8018cae <__mdiff+0xb6>
 8018c8c:	6106      	str	r6, [r0, #16]
 8018c8e:	e7c5      	b.n	8018c1c <__mdiff+0x24>
 8018c90:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018c94:	fa1e f381 	uxtah	r3, lr, r1
 8018c98:	141a      	asrs	r2, r3, #16
 8018c9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018c9e:	b29b      	uxth	r3, r3
 8018ca0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018ca4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018ca8:	f845 3b04 	str.w	r3, [r5], #4
 8018cac:	e7e9      	b.n	8018c82 <__mdiff+0x8a>
 8018cae:	3e01      	subs	r6, #1
 8018cb0:	e7e9      	b.n	8018c86 <__mdiff+0x8e>
	...

08018cb4 <__ulp>:
 8018cb4:	4b12      	ldr	r3, [pc, #72]	; (8018d00 <__ulp+0x4c>)
 8018cb6:	ee10 2a90 	vmov	r2, s1
 8018cba:	401a      	ands	r2, r3
 8018cbc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	dd04      	ble.n	8018cce <__ulp+0x1a>
 8018cc4:	2000      	movs	r0, #0
 8018cc6:	4619      	mov	r1, r3
 8018cc8:	ec41 0b10 	vmov	d0, r0, r1
 8018ccc:	4770      	bx	lr
 8018cce:	425b      	negs	r3, r3
 8018cd0:	151b      	asrs	r3, r3, #20
 8018cd2:	2b13      	cmp	r3, #19
 8018cd4:	f04f 0000 	mov.w	r0, #0
 8018cd8:	f04f 0100 	mov.w	r1, #0
 8018cdc:	dc04      	bgt.n	8018ce8 <__ulp+0x34>
 8018cde:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018ce2:	fa42 f103 	asr.w	r1, r2, r3
 8018ce6:	e7ef      	b.n	8018cc8 <__ulp+0x14>
 8018ce8:	3b14      	subs	r3, #20
 8018cea:	2b1e      	cmp	r3, #30
 8018cec:	f04f 0201 	mov.w	r2, #1
 8018cf0:	bfda      	itte	le
 8018cf2:	f1c3 031f 	rsble	r3, r3, #31
 8018cf6:	fa02 f303 	lslle.w	r3, r2, r3
 8018cfa:	4613      	movgt	r3, r2
 8018cfc:	4618      	mov	r0, r3
 8018cfe:	e7e3      	b.n	8018cc8 <__ulp+0x14>
 8018d00:	7ff00000 	.word	0x7ff00000

08018d04 <__b2d>:
 8018d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d06:	6905      	ldr	r5, [r0, #16]
 8018d08:	f100 0714 	add.w	r7, r0, #20
 8018d0c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018d10:	1f2e      	subs	r6, r5, #4
 8018d12:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018d16:	4620      	mov	r0, r4
 8018d18:	f7ff fdc4 	bl	80188a4 <__hi0bits>
 8018d1c:	f1c0 0320 	rsb	r3, r0, #32
 8018d20:	280a      	cmp	r0, #10
 8018d22:	600b      	str	r3, [r1, #0]
 8018d24:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018d9c <__b2d+0x98>
 8018d28:	dc14      	bgt.n	8018d54 <__b2d+0x50>
 8018d2a:	f1c0 0e0b 	rsb	lr, r0, #11
 8018d2e:	fa24 f10e 	lsr.w	r1, r4, lr
 8018d32:	42b7      	cmp	r7, r6
 8018d34:	ea41 030c 	orr.w	r3, r1, ip
 8018d38:	bf34      	ite	cc
 8018d3a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018d3e:	2100      	movcs	r1, #0
 8018d40:	3015      	adds	r0, #21
 8018d42:	fa04 f000 	lsl.w	r0, r4, r0
 8018d46:	fa21 f10e 	lsr.w	r1, r1, lr
 8018d4a:	ea40 0201 	orr.w	r2, r0, r1
 8018d4e:	ec43 2b10 	vmov	d0, r2, r3
 8018d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d54:	42b7      	cmp	r7, r6
 8018d56:	bf3a      	itte	cc
 8018d58:	f1a5 0608 	subcc.w	r6, r5, #8
 8018d5c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018d60:	2100      	movcs	r1, #0
 8018d62:	380b      	subs	r0, #11
 8018d64:	d015      	beq.n	8018d92 <__b2d+0x8e>
 8018d66:	4084      	lsls	r4, r0
 8018d68:	f1c0 0520 	rsb	r5, r0, #32
 8018d6c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018d70:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018d74:	42be      	cmp	r6, r7
 8018d76:	fa21 fc05 	lsr.w	ip, r1, r5
 8018d7a:	ea44 030c 	orr.w	r3, r4, ip
 8018d7e:	bf8c      	ite	hi
 8018d80:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018d84:	2400      	movls	r4, #0
 8018d86:	fa01 f000 	lsl.w	r0, r1, r0
 8018d8a:	40ec      	lsrs	r4, r5
 8018d8c:	ea40 0204 	orr.w	r2, r0, r4
 8018d90:	e7dd      	b.n	8018d4e <__b2d+0x4a>
 8018d92:	ea44 030c 	orr.w	r3, r4, ip
 8018d96:	460a      	mov	r2, r1
 8018d98:	e7d9      	b.n	8018d4e <__b2d+0x4a>
 8018d9a:	bf00      	nop
 8018d9c:	3ff00000 	.word	0x3ff00000

08018da0 <__d2b>:
 8018da0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018da4:	460e      	mov	r6, r1
 8018da6:	2101      	movs	r1, #1
 8018da8:	ec59 8b10 	vmov	r8, r9, d0
 8018dac:	4615      	mov	r5, r2
 8018dae:	f7ff fcb5 	bl	801871c <_Balloc>
 8018db2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018db6:	4607      	mov	r7, r0
 8018db8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018dbc:	bb34      	cbnz	r4, 8018e0c <__d2b+0x6c>
 8018dbe:	9301      	str	r3, [sp, #4]
 8018dc0:	f1b8 0300 	subs.w	r3, r8, #0
 8018dc4:	d027      	beq.n	8018e16 <__d2b+0x76>
 8018dc6:	a802      	add	r0, sp, #8
 8018dc8:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018dcc:	f7ff fd89 	bl	80188e2 <__lo0bits>
 8018dd0:	9900      	ldr	r1, [sp, #0]
 8018dd2:	b1f0      	cbz	r0, 8018e12 <__d2b+0x72>
 8018dd4:	9a01      	ldr	r2, [sp, #4]
 8018dd6:	f1c0 0320 	rsb	r3, r0, #32
 8018dda:	fa02 f303 	lsl.w	r3, r2, r3
 8018dde:	430b      	orrs	r3, r1
 8018de0:	40c2      	lsrs	r2, r0
 8018de2:	617b      	str	r3, [r7, #20]
 8018de4:	9201      	str	r2, [sp, #4]
 8018de6:	9b01      	ldr	r3, [sp, #4]
 8018de8:	61bb      	str	r3, [r7, #24]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	bf14      	ite	ne
 8018dee:	2102      	movne	r1, #2
 8018df0:	2101      	moveq	r1, #1
 8018df2:	6139      	str	r1, [r7, #16]
 8018df4:	b1c4      	cbz	r4, 8018e28 <__d2b+0x88>
 8018df6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018dfa:	4404      	add	r4, r0
 8018dfc:	6034      	str	r4, [r6, #0]
 8018dfe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018e02:	6028      	str	r0, [r5, #0]
 8018e04:	4638      	mov	r0, r7
 8018e06:	b003      	add	sp, #12
 8018e08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018e10:	e7d5      	b.n	8018dbe <__d2b+0x1e>
 8018e12:	6179      	str	r1, [r7, #20]
 8018e14:	e7e7      	b.n	8018de6 <__d2b+0x46>
 8018e16:	a801      	add	r0, sp, #4
 8018e18:	f7ff fd63 	bl	80188e2 <__lo0bits>
 8018e1c:	9b01      	ldr	r3, [sp, #4]
 8018e1e:	617b      	str	r3, [r7, #20]
 8018e20:	2101      	movs	r1, #1
 8018e22:	6139      	str	r1, [r7, #16]
 8018e24:	3020      	adds	r0, #32
 8018e26:	e7e5      	b.n	8018df4 <__d2b+0x54>
 8018e28:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018e2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018e30:	6030      	str	r0, [r6, #0]
 8018e32:	6918      	ldr	r0, [r3, #16]
 8018e34:	f7ff fd36 	bl	80188a4 <__hi0bits>
 8018e38:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018e3c:	e7e1      	b.n	8018e02 <__d2b+0x62>

08018e3e <__ratio>:
 8018e3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e42:	4688      	mov	r8, r1
 8018e44:	4669      	mov	r1, sp
 8018e46:	4681      	mov	r9, r0
 8018e48:	f7ff ff5c 	bl	8018d04 <__b2d>
 8018e4c:	a901      	add	r1, sp, #4
 8018e4e:	4640      	mov	r0, r8
 8018e50:	ec57 6b10 	vmov	r6, r7, d0
 8018e54:	f7ff ff56 	bl	8018d04 <__b2d>
 8018e58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018e5c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018e60:	eba3 0c02 	sub.w	ip, r3, r2
 8018e64:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018e68:	1a9b      	subs	r3, r3, r2
 8018e6a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018e6e:	ec5b ab10 	vmov	sl, fp, d0
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	bfce      	itee	gt
 8018e76:	463a      	movgt	r2, r7
 8018e78:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018e7c:	465a      	movle	r2, fp
 8018e7e:	4659      	mov	r1, fp
 8018e80:	463d      	mov	r5, r7
 8018e82:	bfd4      	ite	le
 8018e84:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018e88:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018e8c:	4630      	mov	r0, r6
 8018e8e:	ee10 2a10 	vmov	r2, s0
 8018e92:	460b      	mov	r3, r1
 8018e94:	4629      	mov	r1, r5
 8018e96:	f7e7 fcf1 	bl	800087c <__aeabi_ddiv>
 8018e9a:	ec41 0b10 	vmov	d0, r0, r1
 8018e9e:	b003      	add	sp, #12
 8018ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018ea4 <__copybits>:
 8018ea4:	3901      	subs	r1, #1
 8018ea6:	b510      	push	{r4, lr}
 8018ea8:	1149      	asrs	r1, r1, #5
 8018eaa:	6914      	ldr	r4, [r2, #16]
 8018eac:	3101      	adds	r1, #1
 8018eae:	f102 0314 	add.w	r3, r2, #20
 8018eb2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018eb6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018eba:	42a3      	cmp	r3, r4
 8018ebc:	4602      	mov	r2, r0
 8018ebe:	d303      	bcc.n	8018ec8 <__copybits+0x24>
 8018ec0:	2300      	movs	r3, #0
 8018ec2:	428a      	cmp	r2, r1
 8018ec4:	d305      	bcc.n	8018ed2 <__copybits+0x2e>
 8018ec6:	bd10      	pop	{r4, pc}
 8018ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ecc:	f840 2b04 	str.w	r2, [r0], #4
 8018ed0:	e7f3      	b.n	8018eba <__copybits+0x16>
 8018ed2:	f842 3b04 	str.w	r3, [r2], #4
 8018ed6:	e7f4      	b.n	8018ec2 <__copybits+0x1e>

08018ed8 <__any_on>:
 8018ed8:	f100 0214 	add.w	r2, r0, #20
 8018edc:	6900      	ldr	r0, [r0, #16]
 8018ede:	114b      	asrs	r3, r1, #5
 8018ee0:	4298      	cmp	r0, r3
 8018ee2:	b510      	push	{r4, lr}
 8018ee4:	db11      	blt.n	8018f0a <__any_on+0x32>
 8018ee6:	dd0a      	ble.n	8018efe <__any_on+0x26>
 8018ee8:	f011 011f 	ands.w	r1, r1, #31
 8018eec:	d007      	beq.n	8018efe <__any_on+0x26>
 8018eee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018ef2:	fa24 f001 	lsr.w	r0, r4, r1
 8018ef6:	fa00 f101 	lsl.w	r1, r0, r1
 8018efa:	428c      	cmp	r4, r1
 8018efc:	d10b      	bne.n	8018f16 <__any_on+0x3e>
 8018efe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018f02:	4293      	cmp	r3, r2
 8018f04:	d803      	bhi.n	8018f0e <__any_on+0x36>
 8018f06:	2000      	movs	r0, #0
 8018f08:	bd10      	pop	{r4, pc}
 8018f0a:	4603      	mov	r3, r0
 8018f0c:	e7f7      	b.n	8018efe <__any_on+0x26>
 8018f0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018f12:	2900      	cmp	r1, #0
 8018f14:	d0f5      	beq.n	8018f02 <__any_on+0x2a>
 8018f16:	2001      	movs	r0, #1
 8018f18:	e7f6      	b.n	8018f08 <__any_on+0x30>

08018f1a <_calloc_r>:
 8018f1a:	b538      	push	{r3, r4, r5, lr}
 8018f1c:	fb02 f401 	mul.w	r4, r2, r1
 8018f20:	4621      	mov	r1, r4
 8018f22:	f000 f857 	bl	8018fd4 <_malloc_r>
 8018f26:	4605      	mov	r5, r0
 8018f28:	b118      	cbz	r0, 8018f32 <_calloc_r+0x18>
 8018f2a:	4622      	mov	r2, r4
 8018f2c:	2100      	movs	r1, #0
 8018f2e:	f7fc fcb2 	bl	8015896 <memset>
 8018f32:	4628      	mov	r0, r5
 8018f34:	bd38      	pop	{r3, r4, r5, pc}
	...

08018f38 <_free_r>:
 8018f38:	b538      	push	{r3, r4, r5, lr}
 8018f3a:	4605      	mov	r5, r0
 8018f3c:	2900      	cmp	r1, #0
 8018f3e:	d045      	beq.n	8018fcc <_free_r+0x94>
 8018f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018f44:	1f0c      	subs	r4, r1, #4
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	bfb8      	it	lt
 8018f4a:	18e4      	addlt	r4, r4, r3
 8018f4c:	f000 fe30 	bl	8019bb0 <__malloc_lock>
 8018f50:	4a1f      	ldr	r2, [pc, #124]	; (8018fd0 <_free_r+0x98>)
 8018f52:	6813      	ldr	r3, [r2, #0]
 8018f54:	4610      	mov	r0, r2
 8018f56:	b933      	cbnz	r3, 8018f66 <_free_r+0x2e>
 8018f58:	6063      	str	r3, [r4, #4]
 8018f5a:	6014      	str	r4, [r2, #0]
 8018f5c:	4628      	mov	r0, r5
 8018f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018f62:	f000 be26 	b.w	8019bb2 <__malloc_unlock>
 8018f66:	42a3      	cmp	r3, r4
 8018f68:	d90c      	bls.n	8018f84 <_free_r+0x4c>
 8018f6a:	6821      	ldr	r1, [r4, #0]
 8018f6c:	1862      	adds	r2, r4, r1
 8018f6e:	4293      	cmp	r3, r2
 8018f70:	bf04      	itt	eq
 8018f72:	681a      	ldreq	r2, [r3, #0]
 8018f74:	685b      	ldreq	r3, [r3, #4]
 8018f76:	6063      	str	r3, [r4, #4]
 8018f78:	bf04      	itt	eq
 8018f7a:	1852      	addeq	r2, r2, r1
 8018f7c:	6022      	streq	r2, [r4, #0]
 8018f7e:	6004      	str	r4, [r0, #0]
 8018f80:	e7ec      	b.n	8018f5c <_free_r+0x24>
 8018f82:	4613      	mov	r3, r2
 8018f84:	685a      	ldr	r2, [r3, #4]
 8018f86:	b10a      	cbz	r2, 8018f8c <_free_r+0x54>
 8018f88:	42a2      	cmp	r2, r4
 8018f8a:	d9fa      	bls.n	8018f82 <_free_r+0x4a>
 8018f8c:	6819      	ldr	r1, [r3, #0]
 8018f8e:	1858      	adds	r0, r3, r1
 8018f90:	42a0      	cmp	r0, r4
 8018f92:	d10b      	bne.n	8018fac <_free_r+0x74>
 8018f94:	6820      	ldr	r0, [r4, #0]
 8018f96:	4401      	add	r1, r0
 8018f98:	1858      	adds	r0, r3, r1
 8018f9a:	4282      	cmp	r2, r0
 8018f9c:	6019      	str	r1, [r3, #0]
 8018f9e:	d1dd      	bne.n	8018f5c <_free_r+0x24>
 8018fa0:	6810      	ldr	r0, [r2, #0]
 8018fa2:	6852      	ldr	r2, [r2, #4]
 8018fa4:	605a      	str	r2, [r3, #4]
 8018fa6:	4401      	add	r1, r0
 8018fa8:	6019      	str	r1, [r3, #0]
 8018faa:	e7d7      	b.n	8018f5c <_free_r+0x24>
 8018fac:	d902      	bls.n	8018fb4 <_free_r+0x7c>
 8018fae:	230c      	movs	r3, #12
 8018fb0:	602b      	str	r3, [r5, #0]
 8018fb2:	e7d3      	b.n	8018f5c <_free_r+0x24>
 8018fb4:	6820      	ldr	r0, [r4, #0]
 8018fb6:	1821      	adds	r1, r4, r0
 8018fb8:	428a      	cmp	r2, r1
 8018fba:	bf04      	itt	eq
 8018fbc:	6811      	ldreq	r1, [r2, #0]
 8018fbe:	6852      	ldreq	r2, [r2, #4]
 8018fc0:	6062      	str	r2, [r4, #4]
 8018fc2:	bf04      	itt	eq
 8018fc4:	1809      	addeq	r1, r1, r0
 8018fc6:	6021      	streq	r1, [r4, #0]
 8018fc8:	605c      	str	r4, [r3, #4]
 8018fca:	e7c7      	b.n	8018f5c <_free_r+0x24>
 8018fcc:	bd38      	pop	{r3, r4, r5, pc}
 8018fce:	bf00      	nop
 8018fd0:	2003d514 	.word	0x2003d514

08018fd4 <_malloc_r>:
 8018fd4:	b570      	push	{r4, r5, r6, lr}
 8018fd6:	1ccd      	adds	r5, r1, #3
 8018fd8:	f025 0503 	bic.w	r5, r5, #3
 8018fdc:	3508      	adds	r5, #8
 8018fde:	2d0c      	cmp	r5, #12
 8018fe0:	bf38      	it	cc
 8018fe2:	250c      	movcc	r5, #12
 8018fe4:	2d00      	cmp	r5, #0
 8018fe6:	4606      	mov	r6, r0
 8018fe8:	db01      	blt.n	8018fee <_malloc_r+0x1a>
 8018fea:	42a9      	cmp	r1, r5
 8018fec:	d903      	bls.n	8018ff6 <_malloc_r+0x22>
 8018fee:	230c      	movs	r3, #12
 8018ff0:	6033      	str	r3, [r6, #0]
 8018ff2:	2000      	movs	r0, #0
 8018ff4:	bd70      	pop	{r4, r5, r6, pc}
 8018ff6:	f000 fddb 	bl	8019bb0 <__malloc_lock>
 8018ffa:	4a21      	ldr	r2, [pc, #132]	; (8019080 <_malloc_r+0xac>)
 8018ffc:	6814      	ldr	r4, [r2, #0]
 8018ffe:	4621      	mov	r1, r4
 8019000:	b991      	cbnz	r1, 8019028 <_malloc_r+0x54>
 8019002:	4c20      	ldr	r4, [pc, #128]	; (8019084 <_malloc_r+0xb0>)
 8019004:	6823      	ldr	r3, [r4, #0]
 8019006:	b91b      	cbnz	r3, 8019010 <_malloc_r+0x3c>
 8019008:	4630      	mov	r0, r6
 801900a:	f000 fc91 	bl	8019930 <_sbrk_r>
 801900e:	6020      	str	r0, [r4, #0]
 8019010:	4629      	mov	r1, r5
 8019012:	4630      	mov	r0, r6
 8019014:	f000 fc8c 	bl	8019930 <_sbrk_r>
 8019018:	1c43      	adds	r3, r0, #1
 801901a:	d124      	bne.n	8019066 <_malloc_r+0x92>
 801901c:	230c      	movs	r3, #12
 801901e:	6033      	str	r3, [r6, #0]
 8019020:	4630      	mov	r0, r6
 8019022:	f000 fdc6 	bl	8019bb2 <__malloc_unlock>
 8019026:	e7e4      	b.n	8018ff2 <_malloc_r+0x1e>
 8019028:	680b      	ldr	r3, [r1, #0]
 801902a:	1b5b      	subs	r3, r3, r5
 801902c:	d418      	bmi.n	8019060 <_malloc_r+0x8c>
 801902e:	2b0b      	cmp	r3, #11
 8019030:	d90f      	bls.n	8019052 <_malloc_r+0x7e>
 8019032:	600b      	str	r3, [r1, #0]
 8019034:	50cd      	str	r5, [r1, r3]
 8019036:	18cc      	adds	r4, r1, r3
 8019038:	4630      	mov	r0, r6
 801903a:	f000 fdba 	bl	8019bb2 <__malloc_unlock>
 801903e:	f104 000b 	add.w	r0, r4, #11
 8019042:	1d23      	adds	r3, r4, #4
 8019044:	f020 0007 	bic.w	r0, r0, #7
 8019048:	1ac3      	subs	r3, r0, r3
 801904a:	d0d3      	beq.n	8018ff4 <_malloc_r+0x20>
 801904c:	425a      	negs	r2, r3
 801904e:	50e2      	str	r2, [r4, r3]
 8019050:	e7d0      	b.n	8018ff4 <_malloc_r+0x20>
 8019052:	428c      	cmp	r4, r1
 8019054:	684b      	ldr	r3, [r1, #4]
 8019056:	bf16      	itet	ne
 8019058:	6063      	strne	r3, [r4, #4]
 801905a:	6013      	streq	r3, [r2, #0]
 801905c:	460c      	movne	r4, r1
 801905e:	e7eb      	b.n	8019038 <_malloc_r+0x64>
 8019060:	460c      	mov	r4, r1
 8019062:	6849      	ldr	r1, [r1, #4]
 8019064:	e7cc      	b.n	8019000 <_malloc_r+0x2c>
 8019066:	1cc4      	adds	r4, r0, #3
 8019068:	f024 0403 	bic.w	r4, r4, #3
 801906c:	42a0      	cmp	r0, r4
 801906e:	d005      	beq.n	801907c <_malloc_r+0xa8>
 8019070:	1a21      	subs	r1, r4, r0
 8019072:	4630      	mov	r0, r6
 8019074:	f000 fc5c 	bl	8019930 <_sbrk_r>
 8019078:	3001      	adds	r0, #1
 801907a:	d0cf      	beq.n	801901c <_malloc_r+0x48>
 801907c:	6025      	str	r5, [r4, #0]
 801907e:	e7db      	b.n	8019038 <_malloc_r+0x64>
 8019080:	2003d514 	.word	0x2003d514
 8019084:	2003d518 	.word	0x2003d518

08019088 <__ssputs_r>:
 8019088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801908c:	688e      	ldr	r6, [r1, #8]
 801908e:	429e      	cmp	r6, r3
 8019090:	4682      	mov	sl, r0
 8019092:	460c      	mov	r4, r1
 8019094:	4690      	mov	r8, r2
 8019096:	4699      	mov	r9, r3
 8019098:	d837      	bhi.n	801910a <__ssputs_r+0x82>
 801909a:	898a      	ldrh	r2, [r1, #12]
 801909c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80190a0:	d031      	beq.n	8019106 <__ssputs_r+0x7e>
 80190a2:	6825      	ldr	r5, [r4, #0]
 80190a4:	6909      	ldr	r1, [r1, #16]
 80190a6:	1a6f      	subs	r7, r5, r1
 80190a8:	6965      	ldr	r5, [r4, #20]
 80190aa:	2302      	movs	r3, #2
 80190ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80190b0:	fb95 f5f3 	sdiv	r5, r5, r3
 80190b4:	f109 0301 	add.w	r3, r9, #1
 80190b8:	443b      	add	r3, r7
 80190ba:	429d      	cmp	r5, r3
 80190bc:	bf38      	it	cc
 80190be:	461d      	movcc	r5, r3
 80190c0:	0553      	lsls	r3, r2, #21
 80190c2:	d530      	bpl.n	8019126 <__ssputs_r+0x9e>
 80190c4:	4629      	mov	r1, r5
 80190c6:	f7ff ff85 	bl	8018fd4 <_malloc_r>
 80190ca:	4606      	mov	r6, r0
 80190cc:	b950      	cbnz	r0, 80190e4 <__ssputs_r+0x5c>
 80190ce:	230c      	movs	r3, #12
 80190d0:	f8ca 3000 	str.w	r3, [sl]
 80190d4:	89a3      	ldrh	r3, [r4, #12]
 80190d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80190da:	81a3      	strh	r3, [r4, #12]
 80190dc:	f04f 30ff 	mov.w	r0, #4294967295
 80190e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190e4:	463a      	mov	r2, r7
 80190e6:	6921      	ldr	r1, [r4, #16]
 80190e8:	f7fc fbca 	bl	8015880 <memcpy>
 80190ec:	89a3      	ldrh	r3, [r4, #12]
 80190ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80190f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80190f6:	81a3      	strh	r3, [r4, #12]
 80190f8:	6126      	str	r6, [r4, #16]
 80190fa:	6165      	str	r5, [r4, #20]
 80190fc:	443e      	add	r6, r7
 80190fe:	1bed      	subs	r5, r5, r7
 8019100:	6026      	str	r6, [r4, #0]
 8019102:	60a5      	str	r5, [r4, #8]
 8019104:	464e      	mov	r6, r9
 8019106:	454e      	cmp	r6, r9
 8019108:	d900      	bls.n	801910c <__ssputs_r+0x84>
 801910a:	464e      	mov	r6, r9
 801910c:	4632      	mov	r2, r6
 801910e:	4641      	mov	r1, r8
 8019110:	6820      	ldr	r0, [r4, #0]
 8019112:	f000 fd34 	bl	8019b7e <memmove>
 8019116:	68a3      	ldr	r3, [r4, #8]
 8019118:	1b9b      	subs	r3, r3, r6
 801911a:	60a3      	str	r3, [r4, #8]
 801911c:	6823      	ldr	r3, [r4, #0]
 801911e:	441e      	add	r6, r3
 8019120:	6026      	str	r6, [r4, #0]
 8019122:	2000      	movs	r0, #0
 8019124:	e7dc      	b.n	80190e0 <__ssputs_r+0x58>
 8019126:	462a      	mov	r2, r5
 8019128:	f000 fd44 	bl	8019bb4 <_realloc_r>
 801912c:	4606      	mov	r6, r0
 801912e:	2800      	cmp	r0, #0
 8019130:	d1e2      	bne.n	80190f8 <__ssputs_r+0x70>
 8019132:	6921      	ldr	r1, [r4, #16]
 8019134:	4650      	mov	r0, sl
 8019136:	f7ff feff 	bl	8018f38 <_free_r>
 801913a:	e7c8      	b.n	80190ce <__ssputs_r+0x46>

0801913c <_svfiprintf_r>:
 801913c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019140:	461d      	mov	r5, r3
 8019142:	898b      	ldrh	r3, [r1, #12]
 8019144:	061f      	lsls	r7, r3, #24
 8019146:	b09d      	sub	sp, #116	; 0x74
 8019148:	4680      	mov	r8, r0
 801914a:	460c      	mov	r4, r1
 801914c:	4616      	mov	r6, r2
 801914e:	d50f      	bpl.n	8019170 <_svfiprintf_r+0x34>
 8019150:	690b      	ldr	r3, [r1, #16]
 8019152:	b96b      	cbnz	r3, 8019170 <_svfiprintf_r+0x34>
 8019154:	2140      	movs	r1, #64	; 0x40
 8019156:	f7ff ff3d 	bl	8018fd4 <_malloc_r>
 801915a:	6020      	str	r0, [r4, #0]
 801915c:	6120      	str	r0, [r4, #16]
 801915e:	b928      	cbnz	r0, 801916c <_svfiprintf_r+0x30>
 8019160:	230c      	movs	r3, #12
 8019162:	f8c8 3000 	str.w	r3, [r8]
 8019166:	f04f 30ff 	mov.w	r0, #4294967295
 801916a:	e0c8      	b.n	80192fe <_svfiprintf_r+0x1c2>
 801916c:	2340      	movs	r3, #64	; 0x40
 801916e:	6163      	str	r3, [r4, #20]
 8019170:	2300      	movs	r3, #0
 8019172:	9309      	str	r3, [sp, #36]	; 0x24
 8019174:	2320      	movs	r3, #32
 8019176:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801917a:	2330      	movs	r3, #48	; 0x30
 801917c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019180:	9503      	str	r5, [sp, #12]
 8019182:	f04f 0b01 	mov.w	fp, #1
 8019186:	4637      	mov	r7, r6
 8019188:	463d      	mov	r5, r7
 801918a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801918e:	b10b      	cbz	r3, 8019194 <_svfiprintf_r+0x58>
 8019190:	2b25      	cmp	r3, #37	; 0x25
 8019192:	d13e      	bne.n	8019212 <_svfiprintf_r+0xd6>
 8019194:	ebb7 0a06 	subs.w	sl, r7, r6
 8019198:	d00b      	beq.n	80191b2 <_svfiprintf_r+0x76>
 801919a:	4653      	mov	r3, sl
 801919c:	4632      	mov	r2, r6
 801919e:	4621      	mov	r1, r4
 80191a0:	4640      	mov	r0, r8
 80191a2:	f7ff ff71 	bl	8019088 <__ssputs_r>
 80191a6:	3001      	adds	r0, #1
 80191a8:	f000 80a4 	beq.w	80192f4 <_svfiprintf_r+0x1b8>
 80191ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191ae:	4453      	add	r3, sl
 80191b0:	9309      	str	r3, [sp, #36]	; 0x24
 80191b2:	783b      	ldrb	r3, [r7, #0]
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	f000 809d 	beq.w	80192f4 <_svfiprintf_r+0x1b8>
 80191ba:	2300      	movs	r3, #0
 80191bc:	f04f 32ff 	mov.w	r2, #4294967295
 80191c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80191c4:	9304      	str	r3, [sp, #16]
 80191c6:	9307      	str	r3, [sp, #28]
 80191c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80191cc:	931a      	str	r3, [sp, #104]	; 0x68
 80191ce:	462f      	mov	r7, r5
 80191d0:	2205      	movs	r2, #5
 80191d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80191d6:	4850      	ldr	r0, [pc, #320]	; (8019318 <_svfiprintf_r+0x1dc>)
 80191d8:	f7e7 f81a 	bl	8000210 <memchr>
 80191dc:	9b04      	ldr	r3, [sp, #16]
 80191de:	b9d0      	cbnz	r0, 8019216 <_svfiprintf_r+0xda>
 80191e0:	06d9      	lsls	r1, r3, #27
 80191e2:	bf44      	itt	mi
 80191e4:	2220      	movmi	r2, #32
 80191e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80191ea:	071a      	lsls	r2, r3, #28
 80191ec:	bf44      	itt	mi
 80191ee:	222b      	movmi	r2, #43	; 0x2b
 80191f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80191f4:	782a      	ldrb	r2, [r5, #0]
 80191f6:	2a2a      	cmp	r2, #42	; 0x2a
 80191f8:	d015      	beq.n	8019226 <_svfiprintf_r+0xea>
 80191fa:	9a07      	ldr	r2, [sp, #28]
 80191fc:	462f      	mov	r7, r5
 80191fe:	2000      	movs	r0, #0
 8019200:	250a      	movs	r5, #10
 8019202:	4639      	mov	r1, r7
 8019204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019208:	3b30      	subs	r3, #48	; 0x30
 801920a:	2b09      	cmp	r3, #9
 801920c:	d94d      	bls.n	80192aa <_svfiprintf_r+0x16e>
 801920e:	b1b8      	cbz	r0, 8019240 <_svfiprintf_r+0x104>
 8019210:	e00f      	b.n	8019232 <_svfiprintf_r+0xf6>
 8019212:	462f      	mov	r7, r5
 8019214:	e7b8      	b.n	8019188 <_svfiprintf_r+0x4c>
 8019216:	4a40      	ldr	r2, [pc, #256]	; (8019318 <_svfiprintf_r+0x1dc>)
 8019218:	1a80      	subs	r0, r0, r2
 801921a:	fa0b f000 	lsl.w	r0, fp, r0
 801921e:	4318      	orrs	r0, r3
 8019220:	9004      	str	r0, [sp, #16]
 8019222:	463d      	mov	r5, r7
 8019224:	e7d3      	b.n	80191ce <_svfiprintf_r+0x92>
 8019226:	9a03      	ldr	r2, [sp, #12]
 8019228:	1d11      	adds	r1, r2, #4
 801922a:	6812      	ldr	r2, [r2, #0]
 801922c:	9103      	str	r1, [sp, #12]
 801922e:	2a00      	cmp	r2, #0
 8019230:	db01      	blt.n	8019236 <_svfiprintf_r+0xfa>
 8019232:	9207      	str	r2, [sp, #28]
 8019234:	e004      	b.n	8019240 <_svfiprintf_r+0x104>
 8019236:	4252      	negs	r2, r2
 8019238:	f043 0302 	orr.w	r3, r3, #2
 801923c:	9207      	str	r2, [sp, #28]
 801923e:	9304      	str	r3, [sp, #16]
 8019240:	783b      	ldrb	r3, [r7, #0]
 8019242:	2b2e      	cmp	r3, #46	; 0x2e
 8019244:	d10c      	bne.n	8019260 <_svfiprintf_r+0x124>
 8019246:	787b      	ldrb	r3, [r7, #1]
 8019248:	2b2a      	cmp	r3, #42	; 0x2a
 801924a:	d133      	bne.n	80192b4 <_svfiprintf_r+0x178>
 801924c:	9b03      	ldr	r3, [sp, #12]
 801924e:	1d1a      	adds	r2, r3, #4
 8019250:	681b      	ldr	r3, [r3, #0]
 8019252:	9203      	str	r2, [sp, #12]
 8019254:	2b00      	cmp	r3, #0
 8019256:	bfb8      	it	lt
 8019258:	f04f 33ff 	movlt.w	r3, #4294967295
 801925c:	3702      	adds	r7, #2
 801925e:	9305      	str	r3, [sp, #20]
 8019260:	4d2e      	ldr	r5, [pc, #184]	; (801931c <_svfiprintf_r+0x1e0>)
 8019262:	7839      	ldrb	r1, [r7, #0]
 8019264:	2203      	movs	r2, #3
 8019266:	4628      	mov	r0, r5
 8019268:	f7e6 ffd2 	bl	8000210 <memchr>
 801926c:	b138      	cbz	r0, 801927e <_svfiprintf_r+0x142>
 801926e:	2340      	movs	r3, #64	; 0x40
 8019270:	1b40      	subs	r0, r0, r5
 8019272:	fa03 f000 	lsl.w	r0, r3, r0
 8019276:	9b04      	ldr	r3, [sp, #16]
 8019278:	4303      	orrs	r3, r0
 801927a:	3701      	adds	r7, #1
 801927c:	9304      	str	r3, [sp, #16]
 801927e:	7839      	ldrb	r1, [r7, #0]
 8019280:	4827      	ldr	r0, [pc, #156]	; (8019320 <_svfiprintf_r+0x1e4>)
 8019282:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019286:	2206      	movs	r2, #6
 8019288:	1c7e      	adds	r6, r7, #1
 801928a:	f7e6 ffc1 	bl	8000210 <memchr>
 801928e:	2800      	cmp	r0, #0
 8019290:	d038      	beq.n	8019304 <_svfiprintf_r+0x1c8>
 8019292:	4b24      	ldr	r3, [pc, #144]	; (8019324 <_svfiprintf_r+0x1e8>)
 8019294:	bb13      	cbnz	r3, 80192dc <_svfiprintf_r+0x1a0>
 8019296:	9b03      	ldr	r3, [sp, #12]
 8019298:	3307      	adds	r3, #7
 801929a:	f023 0307 	bic.w	r3, r3, #7
 801929e:	3308      	adds	r3, #8
 80192a0:	9303      	str	r3, [sp, #12]
 80192a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80192a4:	444b      	add	r3, r9
 80192a6:	9309      	str	r3, [sp, #36]	; 0x24
 80192a8:	e76d      	b.n	8019186 <_svfiprintf_r+0x4a>
 80192aa:	fb05 3202 	mla	r2, r5, r2, r3
 80192ae:	2001      	movs	r0, #1
 80192b0:	460f      	mov	r7, r1
 80192b2:	e7a6      	b.n	8019202 <_svfiprintf_r+0xc6>
 80192b4:	2300      	movs	r3, #0
 80192b6:	3701      	adds	r7, #1
 80192b8:	9305      	str	r3, [sp, #20]
 80192ba:	4619      	mov	r1, r3
 80192bc:	250a      	movs	r5, #10
 80192be:	4638      	mov	r0, r7
 80192c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80192c4:	3a30      	subs	r2, #48	; 0x30
 80192c6:	2a09      	cmp	r2, #9
 80192c8:	d903      	bls.n	80192d2 <_svfiprintf_r+0x196>
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d0c8      	beq.n	8019260 <_svfiprintf_r+0x124>
 80192ce:	9105      	str	r1, [sp, #20]
 80192d0:	e7c6      	b.n	8019260 <_svfiprintf_r+0x124>
 80192d2:	fb05 2101 	mla	r1, r5, r1, r2
 80192d6:	2301      	movs	r3, #1
 80192d8:	4607      	mov	r7, r0
 80192da:	e7f0      	b.n	80192be <_svfiprintf_r+0x182>
 80192dc:	ab03      	add	r3, sp, #12
 80192de:	9300      	str	r3, [sp, #0]
 80192e0:	4622      	mov	r2, r4
 80192e2:	4b11      	ldr	r3, [pc, #68]	; (8019328 <_svfiprintf_r+0x1ec>)
 80192e4:	a904      	add	r1, sp, #16
 80192e6:	4640      	mov	r0, r8
 80192e8:	f7fc fb72 	bl	80159d0 <_printf_float>
 80192ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80192f0:	4681      	mov	r9, r0
 80192f2:	d1d6      	bne.n	80192a2 <_svfiprintf_r+0x166>
 80192f4:	89a3      	ldrh	r3, [r4, #12]
 80192f6:	065b      	lsls	r3, r3, #25
 80192f8:	f53f af35 	bmi.w	8019166 <_svfiprintf_r+0x2a>
 80192fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80192fe:	b01d      	add	sp, #116	; 0x74
 8019300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019304:	ab03      	add	r3, sp, #12
 8019306:	9300      	str	r3, [sp, #0]
 8019308:	4622      	mov	r2, r4
 801930a:	4b07      	ldr	r3, [pc, #28]	; (8019328 <_svfiprintf_r+0x1ec>)
 801930c:	a904      	add	r1, sp, #16
 801930e:	4640      	mov	r0, r8
 8019310:	f7fc fe14 	bl	8015f3c <_printf_i>
 8019314:	e7ea      	b.n	80192ec <_svfiprintf_r+0x1b0>
 8019316:	bf00      	nop
 8019318:	0801a724 	.word	0x0801a724
 801931c:	0801a72a 	.word	0x0801a72a
 8019320:	0801a72e 	.word	0x0801a72e
 8019324:	080159d1 	.word	0x080159d1
 8019328:	08019089 	.word	0x08019089

0801932c <_sungetc_r>:
 801932c:	b538      	push	{r3, r4, r5, lr}
 801932e:	1c4b      	adds	r3, r1, #1
 8019330:	4614      	mov	r4, r2
 8019332:	d103      	bne.n	801933c <_sungetc_r+0x10>
 8019334:	f04f 35ff 	mov.w	r5, #4294967295
 8019338:	4628      	mov	r0, r5
 801933a:	bd38      	pop	{r3, r4, r5, pc}
 801933c:	8993      	ldrh	r3, [r2, #12]
 801933e:	f023 0320 	bic.w	r3, r3, #32
 8019342:	8193      	strh	r3, [r2, #12]
 8019344:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019346:	6852      	ldr	r2, [r2, #4]
 8019348:	b2cd      	uxtb	r5, r1
 801934a:	b18b      	cbz	r3, 8019370 <_sungetc_r+0x44>
 801934c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801934e:	4293      	cmp	r3, r2
 8019350:	dd08      	ble.n	8019364 <_sungetc_r+0x38>
 8019352:	6823      	ldr	r3, [r4, #0]
 8019354:	1e5a      	subs	r2, r3, #1
 8019356:	6022      	str	r2, [r4, #0]
 8019358:	f803 5c01 	strb.w	r5, [r3, #-1]
 801935c:	6863      	ldr	r3, [r4, #4]
 801935e:	3301      	adds	r3, #1
 8019360:	6063      	str	r3, [r4, #4]
 8019362:	e7e9      	b.n	8019338 <_sungetc_r+0xc>
 8019364:	4621      	mov	r1, r4
 8019366:	f000 fbc3 	bl	8019af0 <__submore>
 801936a:	2800      	cmp	r0, #0
 801936c:	d0f1      	beq.n	8019352 <_sungetc_r+0x26>
 801936e:	e7e1      	b.n	8019334 <_sungetc_r+0x8>
 8019370:	6921      	ldr	r1, [r4, #16]
 8019372:	6823      	ldr	r3, [r4, #0]
 8019374:	b151      	cbz	r1, 801938c <_sungetc_r+0x60>
 8019376:	4299      	cmp	r1, r3
 8019378:	d208      	bcs.n	801938c <_sungetc_r+0x60>
 801937a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801937e:	42a9      	cmp	r1, r5
 8019380:	d104      	bne.n	801938c <_sungetc_r+0x60>
 8019382:	3b01      	subs	r3, #1
 8019384:	3201      	adds	r2, #1
 8019386:	6023      	str	r3, [r4, #0]
 8019388:	6062      	str	r2, [r4, #4]
 801938a:	e7d5      	b.n	8019338 <_sungetc_r+0xc>
 801938c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8019390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019394:	6363      	str	r3, [r4, #52]	; 0x34
 8019396:	2303      	movs	r3, #3
 8019398:	63a3      	str	r3, [r4, #56]	; 0x38
 801939a:	4623      	mov	r3, r4
 801939c:	f803 5f46 	strb.w	r5, [r3, #70]!
 80193a0:	6023      	str	r3, [r4, #0]
 80193a2:	2301      	movs	r3, #1
 80193a4:	e7dc      	b.n	8019360 <_sungetc_r+0x34>

080193a6 <__ssrefill_r>:
 80193a6:	b510      	push	{r4, lr}
 80193a8:	460c      	mov	r4, r1
 80193aa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80193ac:	b169      	cbz	r1, 80193ca <__ssrefill_r+0x24>
 80193ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80193b2:	4299      	cmp	r1, r3
 80193b4:	d001      	beq.n	80193ba <__ssrefill_r+0x14>
 80193b6:	f7ff fdbf 	bl	8018f38 <_free_r>
 80193ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80193bc:	6063      	str	r3, [r4, #4]
 80193be:	2000      	movs	r0, #0
 80193c0:	6360      	str	r0, [r4, #52]	; 0x34
 80193c2:	b113      	cbz	r3, 80193ca <__ssrefill_r+0x24>
 80193c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80193c6:	6023      	str	r3, [r4, #0]
 80193c8:	bd10      	pop	{r4, pc}
 80193ca:	6923      	ldr	r3, [r4, #16]
 80193cc:	6023      	str	r3, [r4, #0]
 80193ce:	2300      	movs	r3, #0
 80193d0:	6063      	str	r3, [r4, #4]
 80193d2:	89a3      	ldrh	r3, [r4, #12]
 80193d4:	f043 0320 	orr.w	r3, r3, #32
 80193d8:	81a3      	strh	r3, [r4, #12]
 80193da:	f04f 30ff 	mov.w	r0, #4294967295
 80193de:	e7f3      	b.n	80193c8 <__ssrefill_r+0x22>

080193e0 <__ssvfiscanf_r>:
 80193e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193e4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80193e8:	460c      	mov	r4, r1
 80193ea:	2100      	movs	r1, #0
 80193ec:	9144      	str	r1, [sp, #272]	; 0x110
 80193ee:	9145      	str	r1, [sp, #276]	; 0x114
 80193f0:	499f      	ldr	r1, [pc, #636]	; (8019670 <__ssvfiscanf_r+0x290>)
 80193f2:	91a0      	str	r1, [sp, #640]	; 0x280
 80193f4:	f10d 0804 	add.w	r8, sp, #4
 80193f8:	499e      	ldr	r1, [pc, #632]	; (8019674 <__ssvfiscanf_r+0x294>)
 80193fa:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8019678 <__ssvfiscanf_r+0x298>
 80193fe:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019402:	4606      	mov	r6, r0
 8019404:	4692      	mov	sl, r2
 8019406:	91a1      	str	r1, [sp, #644]	; 0x284
 8019408:	9300      	str	r3, [sp, #0]
 801940a:	270a      	movs	r7, #10
 801940c:	f89a 3000 	ldrb.w	r3, [sl]
 8019410:	2b00      	cmp	r3, #0
 8019412:	f000 812a 	beq.w	801966a <__ssvfiscanf_r+0x28a>
 8019416:	4655      	mov	r5, sl
 8019418:	f7ff f948 	bl	80186ac <__locale_ctype_ptr>
 801941c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8019420:	4458      	add	r0, fp
 8019422:	7843      	ldrb	r3, [r0, #1]
 8019424:	f013 0308 	ands.w	r3, r3, #8
 8019428:	d01c      	beq.n	8019464 <__ssvfiscanf_r+0x84>
 801942a:	6863      	ldr	r3, [r4, #4]
 801942c:	2b00      	cmp	r3, #0
 801942e:	dd12      	ble.n	8019456 <__ssvfiscanf_r+0x76>
 8019430:	f7ff f93c 	bl	80186ac <__locale_ctype_ptr>
 8019434:	6823      	ldr	r3, [r4, #0]
 8019436:	781a      	ldrb	r2, [r3, #0]
 8019438:	4410      	add	r0, r2
 801943a:	7842      	ldrb	r2, [r0, #1]
 801943c:	0712      	lsls	r2, r2, #28
 801943e:	d401      	bmi.n	8019444 <__ssvfiscanf_r+0x64>
 8019440:	46aa      	mov	sl, r5
 8019442:	e7e3      	b.n	801940c <__ssvfiscanf_r+0x2c>
 8019444:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019446:	3201      	adds	r2, #1
 8019448:	9245      	str	r2, [sp, #276]	; 0x114
 801944a:	6862      	ldr	r2, [r4, #4]
 801944c:	3301      	adds	r3, #1
 801944e:	3a01      	subs	r2, #1
 8019450:	6062      	str	r2, [r4, #4]
 8019452:	6023      	str	r3, [r4, #0]
 8019454:	e7e9      	b.n	801942a <__ssvfiscanf_r+0x4a>
 8019456:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019458:	4621      	mov	r1, r4
 801945a:	4630      	mov	r0, r6
 801945c:	4798      	blx	r3
 801945e:	2800      	cmp	r0, #0
 8019460:	d0e6      	beq.n	8019430 <__ssvfiscanf_r+0x50>
 8019462:	e7ed      	b.n	8019440 <__ssvfiscanf_r+0x60>
 8019464:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8019468:	f040 8082 	bne.w	8019570 <__ssvfiscanf_r+0x190>
 801946c:	9343      	str	r3, [sp, #268]	; 0x10c
 801946e:	9341      	str	r3, [sp, #260]	; 0x104
 8019470:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8019474:	2b2a      	cmp	r3, #42	; 0x2a
 8019476:	d103      	bne.n	8019480 <__ssvfiscanf_r+0xa0>
 8019478:	2310      	movs	r3, #16
 801947a:	9341      	str	r3, [sp, #260]	; 0x104
 801947c:	f10a 0502 	add.w	r5, sl, #2
 8019480:	46aa      	mov	sl, r5
 8019482:	f815 1b01 	ldrb.w	r1, [r5], #1
 8019486:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801948a:	2a09      	cmp	r2, #9
 801948c:	d922      	bls.n	80194d4 <__ssvfiscanf_r+0xf4>
 801948e:	2203      	movs	r2, #3
 8019490:	4879      	ldr	r0, [pc, #484]	; (8019678 <__ssvfiscanf_r+0x298>)
 8019492:	f7e6 febd 	bl	8000210 <memchr>
 8019496:	b138      	cbz	r0, 80194a8 <__ssvfiscanf_r+0xc8>
 8019498:	eba0 0309 	sub.w	r3, r0, r9
 801949c:	2001      	movs	r0, #1
 801949e:	4098      	lsls	r0, r3
 80194a0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80194a2:	4318      	orrs	r0, r3
 80194a4:	9041      	str	r0, [sp, #260]	; 0x104
 80194a6:	46aa      	mov	sl, r5
 80194a8:	f89a 3000 	ldrb.w	r3, [sl]
 80194ac:	2b67      	cmp	r3, #103	; 0x67
 80194ae:	f10a 0501 	add.w	r5, sl, #1
 80194b2:	d82b      	bhi.n	801950c <__ssvfiscanf_r+0x12c>
 80194b4:	2b65      	cmp	r3, #101	; 0x65
 80194b6:	f080 809f 	bcs.w	80195f8 <__ssvfiscanf_r+0x218>
 80194ba:	2b47      	cmp	r3, #71	; 0x47
 80194bc:	d810      	bhi.n	80194e0 <__ssvfiscanf_r+0x100>
 80194be:	2b45      	cmp	r3, #69	; 0x45
 80194c0:	f080 809a 	bcs.w	80195f8 <__ssvfiscanf_r+0x218>
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d06c      	beq.n	80195a2 <__ssvfiscanf_r+0x1c2>
 80194c8:	2b25      	cmp	r3, #37	; 0x25
 80194ca:	d051      	beq.n	8019570 <__ssvfiscanf_r+0x190>
 80194cc:	2303      	movs	r3, #3
 80194ce:	9347      	str	r3, [sp, #284]	; 0x11c
 80194d0:	9742      	str	r7, [sp, #264]	; 0x108
 80194d2:	e027      	b.n	8019524 <__ssvfiscanf_r+0x144>
 80194d4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80194d6:	fb07 1303 	mla	r3, r7, r3, r1
 80194da:	3b30      	subs	r3, #48	; 0x30
 80194dc:	9343      	str	r3, [sp, #268]	; 0x10c
 80194de:	e7cf      	b.n	8019480 <__ssvfiscanf_r+0xa0>
 80194e0:	2b5b      	cmp	r3, #91	; 0x5b
 80194e2:	d06a      	beq.n	80195ba <__ssvfiscanf_r+0x1da>
 80194e4:	d80c      	bhi.n	8019500 <__ssvfiscanf_r+0x120>
 80194e6:	2b58      	cmp	r3, #88	; 0x58
 80194e8:	d1f0      	bne.n	80194cc <__ssvfiscanf_r+0xec>
 80194ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80194ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80194f0:	9241      	str	r2, [sp, #260]	; 0x104
 80194f2:	2210      	movs	r2, #16
 80194f4:	9242      	str	r2, [sp, #264]	; 0x108
 80194f6:	2b6e      	cmp	r3, #110	; 0x6e
 80194f8:	bf8c      	ite	hi
 80194fa:	2304      	movhi	r3, #4
 80194fc:	2303      	movls	r3, #3
 80194fe:	e010      	b.n	8019522 <__ssvfiscanf_r+0x142>
 8019500:	2b63      	cmp	r3, #99	; 0x63
 8019502:	d065      	beq.n	80195d0 <__ssvfiscanf_r+0x1f0>
 8019504:	2b64      	cmp	r3, #100	; 0x64
 8019506:	d1e1      	bne.n	80194cc <__ssvfiscanf_r+0xec>
 8019508:	9742      	str	r7, [sp, #264]	; 0x108
 801950a:	e7f4      	b.n	80194f6 <__ssvfiscanf_r+0x116>
 801950c:	2b70      	cmp	r3, #112	; 0x70
 801950e:	d04b      	beq.n	80195a8 <__ssvfiscanf_r+0x1c8>
 8019510:	d826      	bhi.n	8019560 <__ssvfiscanf_r+0x180>
 8019512:	2b6e      	cmp	r3, #110	; 0x6e
 8019514:	d062      	beq.n	80195dc <__ssvfiscanf_r+0x1fc>
 8019516:	d84c      	bhi.n	80195b2 <__ssvfiscanf_r+0x1d2>
 8019518:	2b69      	cmp	r3, #105	; 0x69
 801951a:	d1d7      	bne.n	80194cc <__ssvfiscanf_r+0xec>
 801951c:	2300      	movs	r3, #0
 801951e:	9342      	str	r3, [sp, #264]	; 0x108
 8019520:	2303      	movs	r3, #3
 8019522:	9347      	str	r3, [sp, #284]	; 0x11c
 8019524:	6863      	ldr	r3, [r4, #4]
 8019526:	2b00      	cmp	r3, #0
 8019528:	dd68      	ble.n	80195fc <__ssvfiscanf_r+0x21c>
 801952a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801952c:	0659      	lsls	r1, r3, #25
 801952e:	d407      	bmi.n	8019540 <__ssvfiscanf_r+0x160>
 8019530:	f7ff f8bc 	bl	80186ac <__locale_ctype_ptr>
 8019534:	6823      	ldr	r3, [r4, #0]
 8019536:	781a      	ldrb	r2, [r3, #0]
 8019538:	4410      	add	r0, r2
 801953a:	7842      	ldrb	r2, [r0, #1]
 801953c:	0712      	lsls	r2, r2, #28
 801953e:	d464      	bmi.n	801960a <__ssvfiscanf_r+0x22a>
 8019540:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019542:	2b02      	cmp	r3, #2
 8019544:	dc73      	bgt.n	801962e <__ssvfiscanf_r+0x24e>
 8019546:	466b      	mov	r3, sp
 8019548:	4622      	mov	r2, r4
 801954a:	a941      	add	r1, sp, #260	; 0x104
 801954c:	4630      	mov	r0, r6
 801954e:	f000 f897 	bl	8019680 <_scanf_chars>
 8019552:	2801      	cmp	r0, #1
 8019554:	f000 8089 	beq.w	801966a <__ssvfiscanf_r+0x28a>
 8019558:	2802      	cmp	r0, #2
 801955a:	f47f af71 	bne.w	8019440 <__ssvfiscanf_r+0x60>
 801955e:	e01d      	b.n	801959c <__ssvfiscanf_r+0x1bc>
 8019560:	2b75      	cmp	r3, #117	; 0x75
 8019562:	d0d1      	beq.n	8019508 <__ssvfiscanf_r+0x128>
 8019564:	2b78      	cmp	r3, #120	; 0x78
 8019566:	d0c0      	beq.n	80194ea <__ssvfiscanf_r+0x10a>
 8019568:	2b73      	cmp	r3, #115	; 0x73
 801956a:	d1af      	bne.n	80194cc <__ssvfiscanf_r+0xec>
 801956c:	2302      	movs	r3, #2
 801956e:	e7d8      	b.n	8019522 <__ssvfiscanf_r+0x142>
 8019570:	6863      	ldr	r3, [r4, #4]
 8019572:	2b00      	cmp	r3, #0
 8019574:	dd0c      	ble.n	8019590 <__ssvfiscanf_r+0x1b0>
 8019576:	6823      	ldr	r3, [r4, #0]
 8019578:	781a      	ldrb	r2, [r3, #0]
 801957a:	455a      	cmp	r2, fp
 801957c:	d175      	bne.n	801966a <__ssvfiscanf_r+0x28a>
 801957e:	3301      	adds	r3, #1
 8019580:	6862      	ldr	r2, [r4, #4]
 8019582:	6023      	str	r3, [r4, #0]
 8019584:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8019586:	3a01      	subs	r2, #1
 8019588:	3301      	adds	r3, #1
 801958a:	6062      	str	r2, [r4, #4]
 801958c:	9345      	str	r3, [sp, #276]	; 0x114
 801958e:	e757      	b.n	8019440 <__ssvfiscanf_r+0x60>
 8019590:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019592:	4621      	mov	r1, r4
 8019594:	4630      	mov	r0, r6
 8019596:	4798      	blx	r3
 8019598:	2800      	cmp	r0, #0
 801959a:	d0ec      	beq.n	8019576 <__ssvfiscanf_r+0x196>
 801959c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801959e:	2800      	cmp	r0, #0
 80195a0:	d159      	bne.n	8019656 <__ssvfiscanf_r+0x276>
 80195a2:	f04f 30ff 	mov.w	r0, #4294967295
 80195a6:	e05c      	b.n	8019662 <__ssvfiscanf_r+0x282>
 80195a8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80195aa:	f042 0220 	orr.w	r2, r2, #32
 80195ae:	9241      	str	r2, [sp, #260]	; 0x104
 80195b0:	e79b      	b.n	80194ea <__ssvfiscanf_r+0x10a>
 80195b2:	2308      	movs	r3, #8
 80195b4:	9342      	str	r3, [sp, #264]	; 0x108
 80195b6:	2304      	movs	r3, #4
 80195b8:	e7b3      	b.n	8019522 <__ssvfiscanf_r+0x142>
 80195ba:	4629      	mov	r1, r5
 80195bc:	4640      	mov	r0, r8
 80195be:	f000 f9c7 	bl	8019950 <__sccl>
 80195c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80195c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80195c8:	9341      	str	r3, [sp, #260]	; 0x104
 80195ca:	4605      	mov	r5, r0
 80195cc:	2301      	movs	r3, #1
 80195ce:	e7a8      	b.n	8019522 <__ssvfiscanf_r+0x142>
 80195d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80195d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80195d6:	9341      	str	r3, [sp, #260]	; 0x104
 80195d8:	2300      	movs	r3, #0
 80195da:	e7a2      	b.n	8019522 <__ssvfiscanf_r+0x142>
 80195dc:	9841      	ldr	r0, [sp, #260]	; 0x104
 80195de:	06c3      	lsls	r3, r0, #27
 80195e0:	f53f af2e 	bmi.w	8019440 <__ssvfiscanf_r+0x60>
 80195e4:	9b00      	ldr	r3, [sp, #0]
 80195e6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80195e8:	1d19      	adds	r1, r3, #4
 80195ea:	9100      	str	r1, [sp, #0]
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	07c0      	lsls	r0, r0, #31
 80195f0:	bf4c      	ite	mi
 80195f2:	801a      	strhmi	r2, [r3, #0]
 80195f4:	601a      	strpl	r2, [r3, #0]
 80195f6:	e723      	b.n	8019440 <__ssvfiscanf_r+0x60>
 80195f8:	2305      	movs	r3, #5
 80195fa:	e792      	b.n	8019522 <__ssvfiscanf_r+0x142>
 80195fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80195fe:	4621      	mov	r1, r4
 8019600:	4630      	mov	r0, r6
 8019602:	4798      	blx	r3
 8019604:	2800      	cmp	r0, #0
 8019606:	d090      	beq.n	801952a <__ssvfiscanf_r+0x14a>
 8019608:	e7c8      	b.n	801959c <__ssvfiscanf_r+0x1bc>
 801960a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801960c:	3201      	adds	r2, #1
 801960e:	9245      	str	r2, [sp, #276]	; 0x114
 8019610:	6862      	ldr	r2, [r4, #4]
 8019612:	3a01      	subs	r2, #1
 8019614:	2a00      	cmp	r2, #0
 8019616:	6062      	str	r2, [r4, #4]
 8019618:	dd02      	ble.n	8019620 <__ssvfiscanf_r+0x240>
 801961a:	3301      	adds	r3, #1
 801961c:	6023      	str	r3, [r4, #0]
 801961e:	e787      	b.n	8019530 <__ssvfiscanf_r+0x150>
 8019620:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019622:	4621      	mov	r1, r4
 8019624:	4630      	mov	r0, r6
 8019626:	4798      	blx	r3
 8019628:	2800      	cmp	r0, #0
 801962a:	d081      	beq.n	8019530 <__ssvfiscanf_r+0x150>
 801962c:	e7b6      	b.n	801959c <__ssvfiscanf_r+0x1bc>
 801962e:	2b04      	cmp	r3, #4
 8019630:	dc06      	bgt.n	8019640 <__ssvfiscanf_r+0x260>
 8019632:	466b      	mov	r3, sp
 8019634:	4622      	mov	r2, r4
 8019636:	a941      	add	r1, sp, #260	; 0x104
 8019638:	4630      	mov	r0, r6
 801963a:	f000 f885 	bl	8019748 <_scanf_i>
 801963e:	e788      	b.n	8019552 <__ssvfiscanf_r+0x172>
 8019640:	4b0e      	ldr	r3, [pc, #56]	; (801967c <__ssvfiscanf_r+0x29c>)
 8019642:	2b00      	cmp	r3, #0
 8019644:	f43f aefc 	beq.w	8019440 <__ssvfiscanf_r+0x60>
 8019648:	466b      	mov	r3, sp
 801964a:	4622      	mov	r2, r4
 801964c:	a941      	add	r1, sp, #260	; 0x104
 801964e:	4630      	mov	r0, r6
 8019650:	f7fc fd86 	bl	8016160 <_scanf_float>
 8019654:	e77d      	b.n	8019552 <__ssvfiscanf_r+0x172>
 8019656:	89a3      	ldrh	r3, [r4, #12]
 8019658:	f013 0f40 	tst.w	r3, #64	; 0x40
 801965c:	bf18      	it	ne
 801965e:	f04f 30ff 	movne.w	r0, #4294967295
 8019662:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8019666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801966a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801966c:	e7f9      	b.n	8019662 <__ssvfiscanf_r+0x282>
 801966e:	bf00      	nop
 8019670:	0801932d 	.word	0x0801932d
 8019674:	080193a7 	.word	0x080193a7
 8019678:	0801a72a 	.word	0x0801a72a
 801967c:	08016161 	.word	0x08016161

08019680 <_scanf_chars>:
 8019680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019684:	4615      	mov	r5, r2
 8019686:	688a      	ldr	r2, [r1, #8]
 8019688:	4680      	mov	r8, r0
 801968a:	460c      	mov	r4, r1
 801968c:	b932      	cbnz	r2, 801969c <_scanf_chars+0x1c>
 801968e:	698a      	ldr	r2, [r1, #24]
 8019690:	2a00      	cmp	r2, #0
 8019692:	bf14      	ite	ne
 8019694:	f04f 32ff 	movne.w	r2, #4294967295
 8019698:	2201      	moveq	r2, #1
 801969a:	608a      	str	r2, [r1, #8]
 801969c:	6822      	ldr	r2, [r4, #0]
 801969e:	06d1      	lsls	r1, r2, #27
 80196a0:	bf5f      	itttt	pl
 80196a2:	681a      	ldrpl	r2, [r3, #0]
 80196a4:	1d11      	addpl	r1, r2, #4
 80196a6:	6019      	strpl	r1, [r3, #0]
 80196a8:	6817      	ldrpl	r7, [r2, #0]
 80196aa:	2600      	movs	r6, #0
 80196ac:	69a3      	ldr	r3, [r4, #24]
 80196ae:	b1db      	cbz	r3, 80196e8 <_scanf_chars+0x68>
 80196b0:	2b01      	cmp	r3, #1
 80196b2:	d107      	bne.n	80196c4 <_scanf_chars+0x44>
 80196b4:	682b      	ldr	r3, [r5, #0]
 80196b6:	6962      	ldr	r2, [r4, #20]
 80196b8:	781b      	ldrb	r3, [r3, #0]
 80196ba:	5cd3      	ldrb	r3, [r2, r3]
 80196bc:	b9a3      	cbnz	r3, 80196e8 <_scanf_chars+0x68>
 80196be:	2e00      	cmp	r6, #0
 80196c0:	d132      	bne.n	8019728 <_scanf_chars+0xa8>
 80196c2:	e006      	b.n	80196d2 <_scanf_chars+0x52>
 80196c4:	2b02      	cmp	r3, #2
 80196c6:	d007      	beq.n	80196d8 <_scanf_chars+0x58>
 80196c8:	2e00      	cmp	r6, #0
 80196ca:	d12d      	bne.n	8019728 <_scanf_chars+0xa8>
 80196cc:	69a3      	ldr	r3, [r4, #24]
 80196ce:	2b01      	cmp	r3, #1
 80196d0:	d12a      	bne.n	8019728 <_scanf_chars+0xa8>
 80196d2:	2001      	movs	r0, #1
 80196d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196d8:	f7fe ffe8 	bl	80186ac <__locale_ctype_ptr>
 80196dc:	682b      	ldr	r3, [r5, #0]
 80196de:	781b      	ldrb	r3, [r3, #0]
 80196e0:	4418      	add	r0, r3
 80196e2:	7843      	ldrb	r3, [r0, #1]
 80196e4:	071b      	lsls	r3, r3, #28
 80196e6:	d4ef      	bmi.n	80196c8 <_scanf_chars+0x48>
 80196e8:	6823      	ldr	r3, [r4, #0]
 80196ea:	06da      	lsls	r2, r3, #27
 80196ec:	bf5e      	ittt	pl
 80196ee:	682b      	ldrpl	r3, [r5, #0]
 80196f0:	781b      	ldrbpl	r3, [r3, #0]
 80196f2:	703b      	strbpl	r3, [r7, #0]
 80196f4:	682a      	ldr	r2, [r5, #0]
 80196f6:	686b      	ldr	r3, [r5, #4]
 80196f8:	f102 0201 	add.w	r2, r2, #1
 80196fc:	602a      	str	r2, [r5, #0]
 80196fe:	68a2      	ldr	r2, [r4, #8]
 8019700:	f103 33ff 	add.w	r3, r3, #4294967295
 8019704:	f102 32ff 	add.w	r2, r2, #4294967295
 8019708:	606b      	str	r3, [r5, #4]
 801970a:	f106 0601 	add.w	r6, r6, #1
 801970e:	bf58      	it	pl
 8019710:	3701      	addpl	r7, #1
 8019712:	60a2      	str	r2, [r4, #8]
 8019714:	b142      	cbz	r2, 8019728 <_scanf_chars+0xa8>
 8019716:	2b00      	cmp	r3, #0
 8019718:	dcc8      	bgt.n	80196ac <_scanf_chars+0x2c>
 801971a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801971e:	4629      	mov	r1, r5
 8019720:	4640      	mov	r0, r8
 8019722:	4798      	blx	r3
 8019724:	2800      	cmp	r0, #0
 8019726:	d0c1      	beq.n	80196ac <_scanf_chars+0x2c>
 8019728:	6823      	ldr	r3, [r4, #0]
 801972a:	f013 0310 	ands.w	r3, r3, #16
 801972e:	d105      	bne.n	801973c <_scanf_chars+0xbc>
 8019730:	68e2      	ldr	r2, [r4, #12]
 8019732:	3201      	adds	r2, #1
 8019734:	60e2      	str	r2, [r4, #12]
 8019736:	69a2      	ldr	r2, [r4, #24]
 8019738:	b102      	cbz	r2, 801973c <_scanf_chars+0xbc>
 801973a:	703b      	strb	r3, [r7, #0]
 801973c:	6923      	ldr	r3, [r4, #16]
 801973e:	441e      	add	r6, r3
 8019740:	6126      	str	r6, [r4, #16]
 8019742:	2000      	movs	r0, #0
 8019744:	e7c6      	b.n	80196d4 <_scanf_chars+0x54>
	...

08019748 <_scanf_i>:
 8019748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801974c:	469a      	mov	sl, r3
 801974e:	4b74      	ldr	r3, [pc, #464]	; (8019920 <_scanf_i+0x1d8>)
 8019750:	460c      	mov	r4, r1
 8019752:	4683      	mov	fp, r0
 8019754:	4616      	mov	r6, r2
 8019756:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801975a:	b087      	sub	sp, #28
 801975c:	ab03      	add	r3, sp, #12
 801975e:	68a7      	ldr	r7, [r4, #8]
 8019760:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019764:	4b6f      	ldr	r3, [pc, #444]	; (8019924 <_scanf_i+0x1dc>)
 8019766:	69a1      	ldr	r1, [r4, #24]
 8019768:	4a6f      	ldr	r2, [pc, #444]	; (8019928 <_scanf_i+0x1e0>)
 801976a:	2903      	cmp	r1, #3
 801976c:	bf08      	it	eq
 801976e:	461a      	moveq	r2, r3
 8019770:	1e7b      	subs	r3, r7, #1
 8019772:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8019776:	bf84      	itt	hi
 8019778:	f240 135d 	movwhi	r3, #349	; 0x15d
 801977c:	60a3      	strhi	r3, [r4, #8]
 801977e:	6823      	ldr	r3, [r4, #0]
 8019780:	9200      	str	r2, [sp, #0]
 8019782:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019786:	bf88      	it	hi
 8019788:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801978c:	f104 091c 	add.w	r9, r4, #28
 8019790:	6023      	str	r3, [r4, #0]
 8019792:	bf8c      	ite	hi
 8019794:	197f      	addhi	r7, r7, r5
 8019796:	2700      	movls	r7, #0
 8019798:	464b      	mov	r3, r9
 801979a:	f04f 0800 	mov.w	r8, #0
 801979e:	9301      	str	r3, [sp, #4]
 80197a0:	6831      	ldr	r1, [r6, #0]
 80197a2:	ab03      	add	r3, sp, #12
 80197a4:	2202      	movs	r2, #2
 80197a6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80197aa:	7809      	ldrb	r1, [r1, #0]
 80197ac:	f7e6 fd30 	bl	8000210 <memchr>
 80197b0:	9b01      	ldr	r3, [sp, #4]
 80197b2:	b330      	cbz	r0, 8019802 <_scanf_i+0xba>
 80197b4:	f1b8 0f01 	cmp.w	r8, #1
 80197b8:	d15a      	bne.n	8019870 <_scanf_i+0x128>
 80197ba:	6862      	ldr	r2, [r4, #4]
 80197bc:	b92a      	cbnz	r2, 80197ca <_scanf_i+0x82>
 80197be:	6822      	ldr	r2, [r4, #0]
 80197c0:	2108      	movs	r1, #8
 80197c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80197c6:	6061      	str	r1, [r4, #4]
 80197c8:	6022      	str	r2, [r4, #0]
 80197ca:	6822      	ldr	r2, [r4, #0]
 80197cc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80197d0:	6022      	str	r2, [r4, #0]
 80197d2:	68a2      	ldr	r2, [r4, #8]
 80197d4:	1e51      	subs	r1, r2, #1
 80197d6:	60a1      	str	r1, [r4, #8]
 80197d8:	b19a      	cbz	r2, 8019802 <_scanf_i+0xba>
 80197da:	6832      	ldr	r2, [r6, #0]
 80197dc:	1c51      	adds	r1, r2, #1
 80197de:	6031      	str	r1, [r6, #0]
 80197e0:	7812      	ldrb	r2, [r2, #0]
 80197e2:	701a      	strb	r2, [r3, #0]
 80197e4:	1c5d      	adds	r5, r3, #1
 80197e6:	6873      	ldr	r3, [r6, #4]
 80197e8:	3b01      	subs	r3, #1
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	6073      	str	r3, [r6, #4]
 80197ee:	dc07      	bgt.n	8019800 <_scanf_i+0xb8>
 80197f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80197f4:	4631      	mov	r1, r6
 80197f6:	4658      	mov	r0, fp
 80197f8:	4798      	blx	r3
 80197fa:	2800      	cmp	r0, #0
 80197fc:	f040 8086 	bne.w	801990c <_scanf_i+0x1c4>
 8019800:	462b      	mov	r3, r5
 8019802:	f108 0801 	add.w	r8, r8, #1
 8019806:	f1b8 0f03 	cmp.w	r8, #3
 801980a:	d1c8      	bne.n	801979e <_scanf_i+0x56>
 801980c:	6862      	ldr	r2, [r4, #4]
 801980e:	b90a      	cbnz	r2, 8019814 <_scanf_i+0xcc>
 8019810:	220a      	movs	r2, #10
 8019812:	6062      	str	r2, [r4, #4]
 8019814:	6862      	ldr	r2, [r4, #4]
 8019816:	4945      	ldr	r1, [pc, #276]	; (801992c <_scanf_i+0x1e4>)
 8019818:	6960      	ldr	r0, [r4, #20]
 801981a:	9301      	str	r3, [sp, #4]
 801981c:	1a89      	subs	r1, r1, r2
 801981e:	f000 f897 	bl	8019950 <__sccl>
 8019822:	9b01      	ldr	r3, [sp, #4]
 8019824:	f04f 0800 	mov.w	r8, #0
 8019828:	461d      	mov	r5, r3
 801982a:	68a3      	ldr	r3, [r4, #8]
 801982c:	6822      	ldr	r2, [r4, #0]
 801982e:	2b00      	cmp	r3, #0
 8019830:	d03a      	beq.n	80198a8 <_scanf_i+0x160>
 8019832:	6831      	ldr	r1, [r6, #0]
 8019834:	6960      	ldr	r0, [r4, #20]
 8019836:	f891 c000 	ldrb.w	ip, [r1]
 801983a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801983e:	2800      	cmp	r0, #0
 8019840:	d032      	beq.n	80198a8 <_scanf_i+0x160>
 8019842:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019846:	d121      	bne.n	801988c <_scanf_i+0x144>
 8019848:	0510      	lsls	r0, r2, #20
 801984a:	d51f      	bpl.n	801988c <_scanf_i+0x144>
 801984c:	f108 0801 	add.w	r8, r8, #1
 8019850:	b117      	cbz	r7, 8019858 <_scanf_i+0x110>
 8019852:	3301      	adds	r3, #1
 8019854:	3f01      	subs	r7, #1
 8019856:	60a3      	str	r3, [r4, #8]
 8019858:	6873      	ldr	r3, [r6, #4]
 801985a:	3b01      	subs	r3, #1
 801985c:	2b00      	cmp	r3, #0
 801985e:	6073      	str	r3, [r6, #4]
 8019860:	dd1b      	ble.n	801989a <_scanf_i+0x152>
 8019862:	6833      	ldr	r3, [r6, #0]
 8019864:	3301      	adds	r3, #1
 8019866:	6033      	str	r3, [r6, #0]
 8019868:	68a3      	ldr	r3, [r4, #8]
 801986a:	3b01      	subs	r3, #1
 801986c:	60a3      	str	r3, [r4, #8]
 801986e:	e7dc      	b.n	801982a <_scanf_i+0xe2>
 8019870:	f1b8 0f02 	cmp.w	r8, #2
 8019874:	d1ad      	bne.n	80197d2 <_scanf_i+0x8a>
 8019876:	6822      	ldr	r2, [r4, #0]
 8019878:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801987c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019880:	d1bf      	bne.n	8019802 <_scanf_i+0xba>
 8019882:	2110      	movs	r1, #16
 8019884:	6061      	str	r1, [r4, #4]
 8019886:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801988a:	e7a1      	b.n	80197d0 <_scanf_i+0x88>
 801988c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019890:	6022      	str	r2, [r4, #0]
 8019892:	780b      	ldrb	r3, [r1, #0]
 8019894:	702b      	strb	r3, [r5, #0]
 8019896:	3501      	adds	r5, #1
 8019898:	e7de      	b.n	8019858 <_scanf_i+0x110>
 801989a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801989e:	4631      	mov	r1, r6
 80198a0:	4658      	mov	r0, fp
 80198a2:	4798      	blx	r3
 80198a4:	2800      	cmp	r0, #0
 80198a6:	d0df      	beq.n	8019868 <_scanf_i+0x120>
 80198a8:	6823      	ldr	r3, [r4, #0]
 80198aa:	05d9      	lsls	r1, r3, #23
 80198ac:	d50c      	bpl.n	80198c8 <_scanf_i+0x180>
 80198ae:	454d      	cmp	r5, r9
 80198b0:	d908      	bls.n	80198c4 <_scanf_i+0x17c>
 80198b2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80198b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80198ba:	4632      	mov	r2, r6
 80198bc:	4658      	mov	r0, fp
 80198be:	4798      	blx	r3
 80198c0:	1e6f      	subs	r7, r5, #1
 80198c2:	463d      	mov	r5, r7
 80198c4:	454d      	cmp	r5, r9
 80198c6:	d029      	beq.n	801991c <_scanf_i+0x1d4>
 80198c8:	6822      	ldr	r2, [r4, #0]
 80198ca:	f012 0210 	ands.w	r2, r2, #16
 80198ce:	d113      	bne.n	80198f8 <_scanf_i+0x1b0>
 80198d0:	702a      	strb	r2, [r5, #0]
 80198d2:	6863      	ldr	r3, [r4, #4]
 80198d4:	9e00      	ldr	r6, [sp, #0]
 80198d6:	4649      	mov	r1, r9
 80198d8:	4658      	mov	r0, fp
 80198da:	47b0      	blx	r6
 80198dc:	f8da 3000 	ldr.w	r3, [sl]
 80198e0:	6821      	ldr	r1, [r4, #0]
 80198e2:	1d1a      	adds	r2, r3, #4
 80198e4:	f8ca 2000 	str.w	r2, [sl]
 80198e8:	f011 0f20 	tst.w	r1, #32
 80198ec:	681b      	ldr	r3, [r3, #0]
 80198ee:	d010      	beq.n	8019912 <_scanf_i+0x1ca>
 80198f0:	6018      	str	r0, [r3, #0]
 80198f2:	68e3      	ldr	r3, [r4, #12]
 80198f4:	3301      	adds	r3, #1
 80198f6:	60e3      	str	r3, [r4, #12]
 80198f8:	eba5 0509 	sub.w	r5, r5, r9
 80198fc:	44a8      	add	r8, r5
 80198fe:	6925      	ldr	r5, [r4, #16]
 8019900:	4445      	add	r5, r8
 8019902:	6125      	str	r5, [r4, #16]
 8019904:	2000      	movs	r0, #0
 8019906:	b007      	add	sp, #28
 8019908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801990c:	f04f 0800 	mov.w	r8, #0
 8019910:	e7ca      	b.n	80198a8 <_scanf_i+0x160>
 8019912:	07ca      	lsls	r2, r1, #31
 8019914:	bf4c      	ite	mi
 8019916:	8018      	strhmi	r0, [r3, #0]
 8019918:	6018      	strpl	r0, [r3, #0]
 801991a:	e7ea      	b.n	80198f2 <_scanf_i+0x1aa>
 801991c:	2001      	movs	r0, #1
 801991e:	e7f2      	b.n	8019906 <_scanf_i+0x1be>
 8019920:	0801a284 	.word	0x0801a284
 8019924:	08017369 	.word	0x08017369
 8019928:	08019acd 	.word	0x08019acd
 801992c:	0801a745 	.word	0x0801a745

08019930 <_sbrk_r>:
 8019930:	b538      	push	{r3, r4, r5, lr}
 8019932:	4c06      	ldr	r4, [pc, #24]	; (801994c <_sbrk_r+0x1c>)
 8019934:	2300      	movs	r3, #0
 8019936:	4605      	mov	r5, r0
 8019938:	4608      	mov	r0, r1
 801993a:	6023      	str	r3, [r4, #0]
 801993c:	f7ed fe14 	bl	8007568 <_sbrk>
 8019940:	1c43      	adds	r3, r0, #1
 8019942:	d102      	bne.n	801994a <_sbrk_r+0x1a>
 8019944:	6823      	ldr	r3, [r4, #0]
 8019946:	b103      	cbz	r3, 801994a <_sbrk_r+0x1a>
 8019948:	602b      	str	r3, [r5, #0]
 801994a:	bd38      	pop	{r3, r4, r5, pc}
 801994c:	20041eb4 	.word	0x20041eb4

08019950 <__sccl>:
 8019950:	b570      	push	{r4, r5, r6, lr}
 8019952:	780b      	ldrb	r3, [r1, #0]
 8019954:	2b5e      	cmp	r3, #94	; 0x5e
 8019956:	bf13      	iteet	ne
 8019958:	1c4a      	addne	r2, r1, #1
 801995a:	1c8a      	addeq	r2, r1, #2
 801995c:	784b      	ldrbeq	r3, [r1, #1]
 801995e:	2100      	movne	r1, #0
 8019960:	bf08      	it	eq
 8019962:	2101      	moveq	r1, #1
 8019964:	1e44      	subs	r4, r0, #1
 8019966:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801996a:	f804 1f01 	strb.w	r1, [r4, #1]!
 801996e:	42ac      	cmp	r4, r5
 8019970:	d1fb      	bne.n	801996a <__sccl+0x1a>
 8019972:	b913      	cbnz	r3, 801997a <__sccl+0x2a>
 8019974:	3a01      	subs	r2, #1
 8019976:	4610      	mov	r0, r2
 8019978:	bd70      	pop	{r4, r5, r6, pc}
 801997a:	f081 0401 	eor.w	r4, r1, #1
 801997e:	54c4      	strb	r4, [r0, r3]
 8019980:	1c51      	adds	r1, r2, #1
 8019982:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019986:	2d2d      	cmp	r5, #45	; 0x2d
 8019988:	f101 36ff 	add.w	r6, r1, #4294967295
 801998c:	460a      	mov	r2, r1
 801998e:	d006      	beq.n	801999e <__sccl+0x4e>
 8019990:	2d5d      	cmp	r5, #93	; 0x5d
 8019992:	d0f0      	beq.n	8019976 <__sccl+0x26>
 8019994:	b90d      	cbnz	r5, 801999a <__sccl+0x4a>
 8019996:	4632      	mov	r2, r6
 8019998:	e7ed      	b.n	8019976 <__sccl+0x26>
 801999a:	462b      	mov	r3, r5
 801999c:	e7ef      	b.n	801997e <__sccl+0x2e>
 801999e:	780e      	ldrb	r6, [r1, #0]
 80199a0:	2e5d      	cmp	r6, #93	; 0x5d
 80199a2:	d0fa      	beq.n	801999a <__sccl+0x4a>
 80199a4:	42b3      	cmp	r3, r6
 80199a6:	dcf8      	bgt.n	801999a <__sccl+0x4a>
 80199a8:	3301      	adds	r3, #1
 80199aa:	429e      	cmp	r6, r3
 80199ac:	54c4      	strb	r4, [r0, r3]
 80199ae:	dcfb      	bgt.n	80199a8 <__sccl+0x58>
 80199b0:	3102      	adds	r1, #2
 80199b2:	e7e6      	b.n	8019982 <__sccl+0x32>

080199b4 <strncmp>:
 80199b4:	b510      	push	{r4, lr}
 80199b6:	b16a      	cbz	r2, 80199d4 <strncmp+0x20>
 80199b8:	3901      	subs	r1, #1
 80199ba:	1884      	adds	r4, r0, r2
 80199bc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80199c0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80199c4:	4293      	cmp	r3, r2
 80199c6:	d103      	bne.n	80199d0 <strncmp+0x1c>
 80199c8:	42a0      	cmp	r0, r4
 80199ca:	d001      	beq.n	80199d0 <strncmp+0x1c>
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	d1f5      	bne.n	80199bc <strncmp+0x8>
 80199d0:	1a98      	subs	r0, r3, r2
 80199d2:	bd10      	pop	{r4, pc}
 80199d4:	4610      	mov	r0, r2
 80199d6:	e7fc      	b.n	80199d2 <strncmp+0x1e>

080199d8 <_strtoul_l.isra.0>:
 80199d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80199dc:	4680      	mov	r8, r0
 80199de:	4689      	mov	r9, r1
 80199e0:	4692      	mov	sl, r2
 80199e2:	461e      	mov	r6, r3
 80199e4:	460f      	mov	r7, r1
 80199e6:	463d      	mov	r5, r7
 80199e8:	9808      	ldr	r0, [sp, #32]
 80199ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80199ee:	f7fe fe59 	bl	80186a4 <__locale_ctype_ptr_l>
 80199f2:	4420      	add	r0, r4
 80199f4:	7843      	ldrb	r3, [r0, #1]
 80199f6:	f013 0308 	ands.w	r3, r3, #8
 80199fa:	d130      	bne.n	8019a5e <_strtoul_l.isra.0+0x86>
 80199fc:	2c2d      	cmp	r4, #45	; 0x2d
 80199fe:	d130      	bne.n	8019a62 <_strtoul_l.isra.0+0x8a>
 8019a00:	787c      	ldrb	r4, [r7, #1]
 8019a02:	1cbd      	adds	r5, r7, #2
 8019a04:	2101      	movs	r1, #1
 8019a06:	2e00      	cmp	r6, #0
 8019a08:	d05c      	beq.n	8019ac4 <_strtoul_l.isra.0+0xec>
 8019a0a:	2e10      	cmp	r6, #16
 8019a0c:	d109      	bne.n	8019a22 <_strtoul_l.isra.0+0x4a>
 8019a0e:	2c30      	cmp	r4, #48	; 0x30
 8019a10:	d107      	bne.n	8019a22 <_strtoul_l.isra.0+0x4a>
 8019a12:	782b      	ldrb	r3, [r5, #0]
 8019a14:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019a18:	2b58      	cmp	r3, #88	; 0x58
 8019a1a:	d14e      	bne.n	8019aba <_strtoul_l.isra.0+0xe2>
 8019a1c:	786c      	ldrb	r4, [r5, #1]
 8019a1e:	2610      	movs	r6, #16
 8019a20:	3502      	adds	r5, #2
 8019a22:	f04f 32ff 	mov.w	r2, #4294967295
 8019a26:	2300      	movs	r3, #0
 8019a28:	fbb2 f2f6 	udiv	r2, r2, r6
 8019a2c:	fb06 fc02 	mul.w	ip, r6, r2
 8019a30:	ea6f 0c0c 	mvn.w	ip, ip
 8019a34:	4618      	mov	r0, r3
 8019a36:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019a3a:	2f09      	cmp	r7, #9
 8019a3c:	d817      	bhi.n	8019a6e <_strtoul_l.isra.0+0x96>
 8019a3e:	463c      	mov	r4, r7
 8019a40:	42a6      	cmp	r6, r4
 8019a42:	dd23      	ble.n	8019a8c <_strtoul_l.isra.0+0xb4>
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	db1e      	blt.n	8019a86 <_strtoul_l.isra.0+0xae>
 8019a48:	4282      	cmp	r2, r0
 8019a4a:	d31c      	bcc.n	8019a86 <_strtoul_l.isra.0+0xae>
 8019a4c:	d101      	bne.n	8019a52 <_strtoul_l.isra.0+0x7a>
 8019a4e:	45a4      	cmp	ip, r4
 8019a50:	db19      	blt.n	8019a86 <_strtoul_l.isra.0+0xae>
 8019a52:	fb00 4006 	mla	r0, r0, r6, r4
 8019a56:	2301      	movs	r3, #1
 8019a58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019a5c:	e7eb      	b.n	8019a36 <_strtoul_l.isra.0+0x5e>
 8019a5e:	462f      	mov	r7, r5
 8019a60:	e7c1      	b.n	80199e6 <_strtoul_l.isra.0+0xe>
 8019a62:	2c2b      	cmp	r4, #43	; 0x2b
 8019a64:	bf04      	itt	eq
 8019a66:	1cbd      	addeq	r5, r7, #2
 8019a68:	787c      	ldrbeq	r4, [r7, #1]
 8019a6a:	4619      	mov	r1, r3
 8019a6c:	e7cb      	b.n	8019a06 <_strtoul_l.isra.0+0x2e>
 8019a6e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019a72:	2f19      	cmp	r7, #25
 8019a74:	d801      	bhi.n	8019a7a <_strtoul_l.isra.0+0xa2>
 8019a76:	3c37      	subs	r4, #55	; 0x37
 8019a78:	e7e2      	b.n	8019a40 <_strtoul_l.isra.0+0x68>
 8019a7a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019a7e:	2f19      	cmp	r7, #25
 8019a80:	d804      	bhi.n	8019a8c <_strtoul_l.isra.0+0xb4>
 8019a82:	3c57      	subs	r4, #87	; 0x57
 8019a84:	e7dc      	b.n	8019a40 <_strtoul_l.isra.0+0x68>
 8019a86:	f04f 33ff 	mov.w	r3, #4294967295
 8019a8a:	e7e5      	b.n	8019a58 <_strtoul_l.isra.0+0x80>
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	da09      	bge.n	8019aa4 <_strtoul_l.isra.0+0xcc>
 8019a90:	2322      	movs	r3, #34	; 0x22
 8019a92:	f8c8 3000 	str.w	r3, [r8]
 8019a96:	f04f 30ff 	mov.w	r0, #4294967295
 8019a9a:	f1ba 0f00 	cmp.w	sl, #0
 8019a9e:	d107      	bne.n	8019ab0 <_strtoul_l.isra.0+0xd8>
 8019aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019aa4:	b101      	cbz	r1, 8019aa8 <_strtoul_l.isra.0+0xd0>
 8019aa6:	4240      	negs	r0, r0
 8019aa8:	f1ba 0f00 	cmp.w	sl, #0
 8019aac:	d0f8      	beq.n	8019aa0 <_strtoul_l.isra.0+0xc8>
 8019aae:	b10b      	cbz	r3, 8019ab4 <_strtoul_l.isra.0+0xdc>
 8019ab0:	f105 39ff 	add.w	r9, r5, #4294967295
 8019ab4:	f8ca 9000 	str.w	r9, [sl]
 8019ab8:	e7f2      	b.n	8019aa0 <_strtoul_l.isra.0+0xc8>
 8019aba:	2430      	movs	r4, #48	; 0x30
 8019abc:	2e00      	cmp	r6, #0
 8019abe:	d1b0      	bne.n	8019a22 <_strtoul_l.isra.0+0x4a>
 8019ac0:	2608      	movs	r6, #8
 8019ac2:	e7ae      	b.n	8019a22 <_strtoul_l.isra.0+0x4a>
 8019ac4:	2c30      	cmp	r4, #48	; 0x30
 8019ac6:	d0a4      	beq.n	8019a12 <_strtoul_l.isra.0+0x3a>
 8019ac8:	260a      	movs	r6, #10
 8019aca:	e7aa      	b.n	8019a22 <_strtoul_l.isra.0+0x4a>

08019acc <_strtoul_r>:
 8019acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019ace:	4c06      	ldr	r4, [pc, #24]	; (8019ae8 <_strtoul_r+0x1c>)
 8019ad0:	4d06      	ldr	r5, [pc, #24]	; (8019aec <_strtoul_r+0x20>)
 8019ad2:	6824      	ldr	r4, [r4, #0]
 8019ad4:	6a24      	ldr	r4, [r4, #32]
 8019ad6:	2c00      	cmp	r4, #0
 8019ad8:	bf08      	it	eq
 8019ada:	462c      	moveq	r4, r5
 8019adc:	9400      	str	r4, [sp, #0]
 8019ade:	f7ff ff7b 	bl	80199d8 <_strtoul_l.isra.0>
 8019ae2:	b003      	add	sp, #12
 8019ae4:	bd30      	pop	{r4, r5, pc}
 8019ae6:	bf00      	nop
 8019ae8:	2000000c 	.word	0x2000000c
 8019aec:	20000070 	.word	0x20000070

08019af0 <__submore>:
 8019af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019af4:	460c      	mov	r4, r1
 8019af6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019af8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019afc:	4299      	cmp	r1, r3
 8019afe:	d11d      	bne.n	8019b3c <__submore+0x4c>
 8019b00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019b04:	f7ff fa66 	bl	8018fd4 <_malloc_r>
 8019b08:	b918      	cbnz	r0, 8019b12 <__submore+0x22>
 8019b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8019b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019b16:	63a3      	str	r3, [r4, #56]	; 0x38
 8019b18:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019b1c:	6360      	str	r0, [r4, #52]	; 0x34
 8019b1e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019b22:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019b26:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019b2a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019b2e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019b32:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019b36:	6020      	str	r0, [r4, #0]
 8019b38:	2000      	movs	r0, #0
 8019b3a:	e7e8      	b.n	8019b0e <__submore+0x1e>
 8019b3c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019b3e:	0077      	lsls	r7, r6, #1
 8019b40:	463a      	mov	r2, r7
 8019b42:	f000 f837 	bl	8019bb4 <_realloc_r>
 8019b46:	4605      	mov	r5, r0
 8019b48:	2800      	cmp	r0, #0
 8019b4a:	d0de      	beq.n	8019b0a <__submore+0x1a>
 8019b4c:	eb00 0806 	add.w	r8, r0, r6
 8019b50:	4601      	mov	r1, r0
 8019b52:	4632      	mov	r2, r6
 8019b54:	4640      	mov	r0, r8
 8019b56:	f7fb fe93 	bl	8015880 <memcpy>
 8019b5a:	f8c4 8000 	str.w	r8, [r4]
 8019b5e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019b62:	e7e9      	b.n	8019b38 <__submore+0x48>

08019b64 <__ascii_wctomb>:
 8019b64:	b149      	cbz	r1, 8019b7a <__ascii_wctomb+0x16>
 8019b66:	2aff      	cmp	r2, #255	; 0xff
 8019b68:	bf85      	ittet	hi
 8019b6a:	238a      	movhi	r3, #138	; 0x8a
 8019b6c:	6003      	strhi	r3, [r0, #0]
 8019b6e:	700a      	strbls	r2, [r1, #0]
 8019b70:	f04f 30ff 	movhi.w	r0, #4294967295
 8019b74:	bf98      	it	ls
 8019b76:	2001      	movls	r0, #1
 8019b78:	4770      	bx	lr
 8019b7a:	4608      	mov	r0, r1
 8019b7c:	4770      	bx	lr

08019b7e <memmove>:
 8019b7e:	4288      	cmp	r0, r1
 8019b80:	b510      	push	{r4, lr}
 8019b82:	eb01 0302 	add.w	r3, r1, r2
 8019b86:	d807      	bhi.n	8019b98 <memmove+0x1a>
 8019b88:	1e42      	subs	r2, r0, #1
 8019b8a:	4299      	cmp	r1, r3
 8019b8c:	d00a      	beq.n	8019ba4 <memmove+0x26>
 8019b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019b92:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019b96:	e7f8      	b.n	8019b8a <memmove+0xc>
 8019b98:	4283      	cmp	r3, r0
 8019b9a:	d9f5      	bls.n	8019b88 <memmove+0xa>
 8019b9c:	1881      	adds	r1, r0, r2
 8019b9e:	1ad2      	subs	r2, r2, r3
 8019ba0:	42d3      	cmn	r3, r2
 8019ba2:	d100      	bne.n	8019ba6 <memmove+0x28>
 8019ba4:	bd10      	pop	{r4, pc}
 8019ba6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019baa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019bae:	e7f7      	b.n	8019ba0 <memmove+0x22>

08019bb0 <__malloc_lock>:
 8019bb0:	4770      	bx	lr

08019bb2 <__malloc_unlock>:
 8019bb2:	4770      	bx	lr

08019bb4 <_realloc_r>:
 8019bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bb6:	4607      	mov	r7, r0
 8019bb8:	4614      	mov	r4, r2
 8019bba:	460e      	mov	r6, r1
 8019bbc:	b921      	cbnz	r1, 8019bc8 <_realloc_r+0x14>
 8019bbe:	4611      	mov	r1, r2
 8019bc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019bc4:	f7ff ba06 	b.w	8018fd4 <_malloc_r>
 8019bc8:	b922      	cbnz	r2, 8019bd4 <_realloc_r+0x20>
 8019bca:	f7ff f9b5 	bl	8018f38 <_free_r>
 8019bce:	4625      	mov	r5, r4
 8019bd0:	4628      	mov	r0, r5
 8019bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bd4:	f000 f814 	bl	8019c00 <_malloc_usable_size_r>
 8019bd8:	42a0      	cmp	r0, r4
 8019bda:	d20f      	bcs.n	8019bfc <_realloc_r+0x48>
 8019bdc:	4621      	mov	r1, r4
 8019bde:	4638      	mov	r0, r7
 8019be0:	f7ff f9f8 	bl	8018fd4 <_malloc_r>
 8019be4:	4605      	mov	r5, r0
 8019be6:	2800      	cmp	r0, #0
 8019be8:	d0f2      	beq.n	8019bd0 <_realloc_r+0x1c>
 8019bea:	4631      	mov	r1, r6
 8019bec:	4622      	mov	r2, r4
 8019bee:	f7fb fe47 	bl	8015880 <memcpy>
 8019bf2:	4631      	mov	r1, r6
 8019bf4:	4638      	mov	r0, r7
 8019bf6:	f7ff f99f 	bl	8018f38 <_free_r>
 8019bfa:	e7e9      	b.n	8019bd0 <_realloc_r+0x1c>
 8019bfc:	4635      	mov	r5, r6
 8019bfe:	e7e7      	b.n	8019bd0 <_realloc_r+0x1c>

08019c00 <_malloc_usable_size_r>:
 8019c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019c04:	1f18      	subs	r0, r3, #4
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	bfbc      	itt	lt
 8019c0a:	580b      	ldrlt	r3, [r1, r0]
 8019c0c:	18c0      	addlt	r0, r0, r3
 8019c0e:	4770      	bx	lr

08019c10 <_init>:
 8019c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c12:	bf00      	nop
 8019c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c16:	bc08      	pop	{r3}
 8019c18:	469e      	mov	lr, r3
 8019c1a:	4770      	bx	lr

08019c1c <_fini>:
 8019c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c1e:	bf00      	nop
 8019c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c22:	bc08      	pop	{r3}
 8019c24:	469e      	mov	lr, r3
 8019c26:	4770      	bx	lr
