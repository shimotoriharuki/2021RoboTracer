
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017788  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b04  08017948  08017948  00027948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801844c  0801844c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801844c  0801844c  0002844c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018454  08018454  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018454  08018454  00028454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801845c  0801845c  0002845c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08018460  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003dbd0  200001e0  0801863c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2003ddb0  0801863c  0003ddb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037ee5  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007909  00000000  00000000  000680f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021e0  00000000  00000000  0006fa00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f20  00000000  00000000  00071be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036f32  00000000  00000000  00073b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025762  00000000  00000000  000aaa32  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110365  00000000  00000000  000d0194  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e04f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a108  00000000  00000000  001e0574  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08017930 	.word	0x08017930

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08017930 	.word	0x08017930

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f008 f94c 	bl	8009274 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2003b8a4 	.word	0x2003b8a4

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f008 f934 	bl	8009274 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2003b8a4 	.word	0x2003b8a4

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f007 ffd5 	bl	8008fd0 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f006 fd3c 	bl	8007aa4 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f006 fd36 	bl	8007aa4 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f006 fd30 	bl	8007aa4 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f006 fd2a 	bl	8007aa4 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f006 fd24 	bl	8007aa4 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f006 fd1e 	bl	8007aa4 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f006 fd18 	bl	8007aa4 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f006 fd12 	bl	8007aa4 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f006 fd0c 	bl	8007aa4 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f006 fd06 	bl	8007aa4 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f006 fcfa 	bl	8007aa4 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f006 fcf4 	bl	8007aa4 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f013 ffd5 	bl	80150d8 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011b4:	213c      	movs	r1, #60	; 0x3c
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <_ZN7Encoder4initEv+0x30>)
 80011b8:	f00b fef4 	bl	800cfa4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011bc:	213c      	movs	r1, #60	; 0x3c
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <_ZN7Encoder4initEv+0x34>)
 80011c0:	f00b fef0 	bl	800cfa4 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_ZN7Encoder4initEv+0x38>)
 80011c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <_ZN7Encoder4initEv+0x3c>)
 80011ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2003baf8 	.word	0x2003baf8
 80011e0:	2003b7dc 	.word	0x2003b7dc
 80011e4:	40010000 	.word	0x40010000
 80011e8:	40010400 	.word	0x40010400
 80011ec:	00000000 	.word	0x00000000

080011f0 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011f8:	4b69      	ldr	r3, [pc, #420]	; (80013a0 <_ZN7Encoder6updateEv+0x1b0>)
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001204:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001214:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001218:	4b64      	ldr	r3, [pc, #400]	; (80013ac <_ZN7Encoder6updateEv+0x1bc>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001224:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800122c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001234:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4a5d      	ldr	r2, [pc, #372]	; (80013b0 <_ZN7Encoder6updateEv+0x1c0>)
 800123c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f999 	bl	8000578 <__aeabi_f2d>
 8001246:	a350      	add	r3, pc, #320	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff f9ec 	bl	8000628 <__aeabi_dmul>
 8001250:	4603      	mov	r3, r0
 8001252:	460c      	mov	r4, r1
 8001254:	4625      	mov	r5, r4
 8001256:	461c      	mov	r4, r3
 8001258:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f98b 	bl	8000578 <__aeabi_f2d>
 8001262:	a34b      	add	r3, pc, #300	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff f9de 	bl	8000628 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4620      	mov	r0, r4
 8001272:	4629      	mov	r1, r5
 8001274:	f7ff f822 	bl	80002bc <__adddf3>
 8001278:	4603      	mov	r3, r0
 800127a:	460c      	mov	r4, r1
 800127c:	4618      	mov	r0, r3
 800127e:	4621      	mov	r1, r4
 8001280:	f7ff fcca 	bl	8000c18 <__aeabi_d2f>
 8001284:	4602      	mov	r2, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f973 	bl	8000578 <__aeabi_f2d>
 8001292:	a33d      	add	r3, pc, #244	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f9c6 	bl	8000628 <__aeabi_dmul>
 800129c:	4603      	mov	r3, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	4625      	mov	r5, r4
 80012a2:	461c      	mov	r4, r3
 80012a4:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f965 	bl	8000578 <__aeabi_f2d>
 80012ae:	a338      	add	r3, pc, #224	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7ff f9b8 	bl	8000628 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7fe fffc 	bl	80002bc <__adddf3>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	4618      	mov	r0, r3
 80012ca:	4621      	mov	r1, r4
 80012cc:	f7ff fca4 	bl	8000c18 <__aeabi_d2f>
 80012d0:	4602      	mov	r2, r0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a38      	ldr	r2, [pc, #224]	; (80013bc <_ZN7Encoder6updateEv+0x1cc>)
 80012dc:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a34      	ldr	r2, [pc, #208]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 80012e4:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	4a33      	ldr	r2, [pc, #204]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012ec:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	ed93 7a00 	vldr	s14, [r3]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fe:	ee17 0a90 	vmov	r0, s15
 8001302:	f7ff f939 	bl	8000578 <__aeabi_f2d>
 8001306:	a324      	add	r3, pc, #144	; (adr r3, 8001398 <_ZN7Encoder6updateEv+0x1a8>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f98c 	bl	8000628 <__aeabi_dmul>
 8001310:	4603      	mov	r3, r0
 8001312:	460c      	mov	r4, r1
 8001314:	4618      	mov	r0, r3
 8001316:	4621      	mov	r1, r4
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001320:	f7ff faac 	bl	800087c <__aeabi_ddiv>
 8001324:	4603      	mov	r3, r0
 8001326:	460c      	mov	r4, r1
 8001328:	4618      	mov	r0, r3
 800132a:	4621      	mov	r1, r4
 800132c:	f7ff fc74 	bl	8000c18 <__aeabi_d2f>
 8001330:	4602      	mov	r2, r0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	ed93 7a05 	vldr	s14, [r3, #20]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edd3 7a02 	vldr	s15, [r3, #8]
 8001358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	ed93 7a07 	vldr	s14, [r3, #28]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edd3 7a02 	vldr	s15, [r3, #8]
 800136e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <_ZN7Encoder6updateEv+0x1d0>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bdb0      	pop	{r4, r5, r7, pc}
 8001388:	9999999a 	.word	0x9999999a
 800138c:	3fa99999 	.word	0x3fa99999
 8001390:	66666666 	.word	0x66666666
 8001394:	3fee6666 	.word	0x3fee6666
 8001398:	ce73a049 	.word	0xce73a049
 800139c:	3f77a3f6 	.word	0x3f77a3f6
 80013a0:	40010000 	.word	0x40010000
 80013a4:	47000000 	.word	0x47000000
 80013a8:	3f912547 	.word	0x3f912547
 80013ac:	40010400 	.word	0x40010400
 80013b0:	20000200 	.word	0x20000200
 80013b4:	20000208 	.word	0x20000208
 80013b8:	2000020c 	.word	0x2000020c
 80013bc:	20000204 	.word	0x20000204
 80013c0:	200001fc 	.word	0x200001fc

080013c4 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_ZN7Encoder5clearEv+0x3c>)
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_ZN7Encoder5clearEv+0x40>)
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40010000 	.word	0x40010000
 8001404:	40010400 	.word	0x40010400

08001408 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	return distance_;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	ee07 3a90 	vmov	s15, r3
}
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	ee07 3a90 	vmov	s15, r3
}
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	ee07 3a90 	vmov	s15, r3
}
 800147c:	eeb0 0a67 	vmov.f32	s0, s15
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	615a      	str	r2, [r3, #20]
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	ee07 3a90 	vmov	s15, r3
}
 80014d2:	eeb0 0a67 	vmov.f32	s0, s15
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	61da      	str	r2, [r3, #28]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 800150a:	6839      	ldr	r1, [r7, #0]
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 f977 	bl	8001800 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 8001512:	f000 f98b 	bl	800182c <fopen_folder_and_file>

	return ret;
 8001516:	7bfb      	ldrb	r3, [r7, #15]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 800152a:	4804      	ldr	r0, [pc, #16]	; (800153c <user_fclose+0x1c>)
 800152c:	f010 fa94 	bl	8011a58 <f_close>

	return ret;
 8001530:	79fb      	ldrb	r3, [r7, #7]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2003a6e8 	.word	0x2003a6e8

08001540 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b087      	sub	sp, #28
 8001544:	af02      	add	r7, sp, #8
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	80fb      	strh	r3, [r7, #6]
 800154c:	4613      	mov	r3, r2
 800154e:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001554:	2300      	movs	r3, #0
 8001556:	81fb      	strh	r3, [r7, #14]
 8001558:	e030      	b.n	80015bc <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800155a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	4413      	add	r3, r2
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff f806 	bl	8000578 <__aeabi_f2d>
 800156c:	4603      	mov	r3, r0
 800156e:	460c      	mov	r4, r1
 8001570:	e9cd 3400 	strd	r3, r4, [sp]
 8001574:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <sd_write_float+0x94>)
 8001576:	2180      	movs	r1, #128	; 0x80
 8001578:	4817      	ldr	r0, [pc, #92]	; (80015d8 <sd_write_float+0x98>)
 800157a:	f012 fe61 	bl	8014240 <sniprintf>

		if(state == ADD_WRITE){
 800157e:	797b      	ldrb	r3, [r7, #5]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d106      	bne.n	8001592 <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001584:	4b15      	ldr	r3, [pc, #84]	; (80015dc <sd_write_float+0x9c>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	4619      	mov	r1, r3
 800158a:	4814      	ldr	r0, [pc, #80]	; (80015dc <sd_write_float+0x9c>)
 800158c:	f010 fad8 	bl	8011b40 <f_lseek>
 8001590:	e003      	b.n	800159a <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 8001592:	2100      	movs	r1, #0
 8001594:	4811      	ldr	r0, [pc, #68]	; (80015dc <sd_write_float+0x9c>)
 8001596:	f010 fad3 	bl	8011b40 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 800159a:	480f      	ldr	r0, [pc, #60]	; (80015d8 <sd_write_float+0x98>)
 800159c:	f7fe fe30 	bl	8000200 <strlen>
 80015a0:	4602      	mov	r2, r0
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <sd_write_float+0xa0>)
 80015a4:	490c      	ldr	r1, [pc, #48]	; (80015d8 <sd_write_float+0x98>)
 80015a6:	480d      	ldr	r0, [pc, #52]	; (80015dc <sd_write_float+0x9c>)
 80015a8:	f010 f841 	bl	801162e <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80015ac:	f000 f958 	bl	8001860 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	3301      	adds	r3, #1
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	81fb      	strh	r3, [r7, #14]
 80015bc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	dbc8      	blt.n	800155a <sd_write_float+0x1a>
	}
	return ret;
 80015c8:	7b7b      	ldrb	r3, [r7, #13]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd90      	pop	{r4, r7, pc}
 80015d2:	bf00      	nop
 80015d4:	08017948 	.word	0x08017948
 80015d8:	2003a658 	.word	0x2003a658
 80015dc:	2003a6e8 	.word	0x2003a6e8
 80015e0:	2003a6d8 	.word	0x2003a6d8

080015e4 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af02      	add	r7, sp, #8
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	4613      	mov	r3, r2
 80015f2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f000 f900 	bl	8001800 <create_path>

	if(state == OVER_WRITE){
 8001600:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001604:	2b00      	cmp	r3, #0
 8001606:	d108      	bne.n	800161a <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001608:	4822      	ldr	r0, [pc, #136]	; (8001694 <sd_write_array_float+0xb0>)
 800160a:	f010 fa4f 	bl	8011aac <f_chdir>
		f_unlink(filepath);	//	一回消す
 800160e:	4822      	ldr	r0, [pc, #136]	; (8001698 <sd_write_array_float+0xb4>)
 8001610:	f010 fcba 	bl	8011f88 <f_unlink>
		f_chdir("..");
 8001614:	4821      	ldr	r0, [pc, #132]	; (800169c <sd_write_array_float+0xb8>)
 8001616:	f010 fa49 	bl	8011aac <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 800161a:	f000 f907 	bl	800182c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800161e:	2300      	movs	r3, #0
 8001620:	82fb      	strh	r3, [r7, #22]
 8001622:	e028      	b.n	8001676 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001624:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	4413      	add	r3, r2
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ffa1 	bl	8000578 <__aeabi_f2d>
 8001636:	4603      	mov	r3, r0
 8001638:	460c      	mov	r4, r1
 800163a:	e9cd 3400 	strd	r3, r4, [sp]
 800163e:	4a18      	ldr	r2, [pc, #96]	; (80016a0 <sd_write_array_float+0xbc>)
 8001640:	2180      	movs	r1, #128	; 0x80
 8001642:	4818      	ldr	r0, [pc, #96]	; (80016a4 <sd_write_array_float+0xc0>)
 8001644:	f012 fdfc 	bl	8014240 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <sd_write_array_float+0xc4>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	4619      	mov	r1, r3
 800164e:	4816      	ldr	r0, [pc, #88]	; (80016a8 <sd_write_array_float+0xc4>)
 8001650:	f010 fa76 	bl	8011b40 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001654:	4813      	ldr	r0, [pc, #76]	; (80016a4 <sd_write_array_float+0xc0>)
 8001656:	f7fe fdd3 	bl	8000200 <strlen>
 800165a:	4602      	mov	r2, r0
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <sd_write_array_float+0xc8>)
 800165e:	4911      	ldr	r1, [pc, #68]	; (80016a4 <sd_write_array_float+0xc0>)
 8001660:	4811      	ldr	r0, [pc, #68]	; (80016a8 <sd_write_array_float+0xc4>)
 8001662:	f00f ffe4 	bl	801162e <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001666:	f000 f8fb 	bl	8001860 <bufclear>
	for(short i = 0 ; i < size; i++){
 800166a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800166e:	b29b      	uxth	r3, r3
 8001670:	3301      	adds	r3, #1
 8001672:	b29b      	uxth	r3, r3
 8001674:	82fb      	strh	r3, [r7, #22]
 8001676:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800167a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800167e:	429a      	cmp	r2, r3
 8001680:	dbd0      	blt.n	8001624 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 8001682:	4809      	ldr	r0, [pc, #36]	; (80016a8 <sd_write_array_float+0xc4>)
 8001684:	f010 f9e8 	bl	8011a58 <f_close>

	return ret;
 8001688:	7d7b      	ldrb	r3, [r7, #21]
}
 800168a:	4618      	mov	r0, r3
 800168c:	371c      	adds	r7, #28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd90      	pop	{r4, r7, pc}
 8001692:	bf00      	nop
 8001694:	2003a558 	.word	0x2003a558
 8001698:	20039418 	.word	0x20039418
 800169c:	08017964 	.word	0x08017964
 80016a0:	08017948 	.word	0x08017948
 80016a4:	2003a658 	.word	0x2003a658
 80016a8:	2003a6e8 	.word	0x2003a6e8
 80016ac:	2003a6d8 	.word	0x2003a6d8

080016b0 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	4613      	mov	r3, r2
 80016be:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f000 f898 	bl	8001800 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016d0:	f000 f8ac 	bl	800182c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016d4:	e019      	b.n	800170a <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 80016d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	461a      	mov	r2, r3
 80016e2:	4913      	ldr	r1, [pc, #76]	; (8001730 <sd_read_array_float+0x80>)
 80016e4:	4813      	ldr	r0, [pc, #76]	; (8001734 <sd_read_array_float+0x84>)
 80016e6:	f012 fdff 	bl	80142e8 <siscanf>
		i++;
 80016ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	3301      	adds	r3, #1
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80016f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016fe:	429a      	cmp	r2, r3
 8001700:	db03      	blt.n	800170a <sd_read_array_float+0x5a>
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	3b01      	subs	r3, #1
 8001706:	b29b      	uxth	r3, r3
 8001708:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800170a:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <sd_read_array_float+0x88>)
 800170c:	2180      	movs	r1, #128	; 0x80
 800170e:	4809      	ldr	r0, [pc, #36]	; (8001734 <sd_read_array_float+0x84>)
 8001710:	f010 fe18 	bl	8012344 <f_gets>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1dd      	bne.n	80016d6 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800171a:	f000 f8a1 	bl	8001860 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800171e:	4806      	ldr	r0, [pc, #24]	; (8001738 <sd_read_array_float+0x88>)
 8001720:	f010 f99a 	bl	8011a58 <f_close>

	return ret;
 8001724:	7d7b      	ldrb	r3, [r7, #21]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	08017954 	.word	0x08017954
 8001734:	2003a658 	.word	0x2003a658
 8001738:	2003a6e8 	.word	0x2003a6e8

0800173c <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	4613      	mov	r3, r2
 800174a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 f852 	bl	8001800 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800175c:	f000 f866 	bl	800182c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001760:	e019      	b.n	8001796 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 8001762:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	4413      	add	r3, r2
 800176c:	461a      	mov	r2, r3
 800176e:	4913      	ldr	r1, [pc, #76]	; (80017bc <sd_read_array_double+0x80>)
 8001770:	4813      	ldr	r0, [pc, #76]	; (80017c0 <sd_read_array_double+0x84>)
 8001772:	f012 fdb9 	bl	80142e8 <siscanf>
		i++;
 8001776:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800177a:	b29b      	uxth	r3, r3
 800177c:	3301      	adds	r3, #1
 800177e:	b29b      	uxth	r3, r3
 8001780:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001782:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800178a:	429a      	cmp	r2, r3
 800178c:	db03      	blt.n	8001796 <sd_read_array_double+0x5a>
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	3b01      	subs	r3, #1
 8001792:	b29b      	uxth	r3, r3
 8001794:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001796:	4a0b      	ldr	r2, [pc, #44]	; (80017c4 <sd_read_array_double+0x88>)
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	4809      	ldr	r0, [pc, #36]	; (80017c0 <sd_read_array_double+0x84>)
 800179c:	f010 fdd2 	bl	8012344 <f_gets>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1dd      	bne.n	8001762 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80017a6:	f000 f85b 	bl	8001860 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80017aa:	4806      	ldr	r0, [pc, #24]	; (80017c4 <sd_read_array_double+0x88>)
 80017ac:	f010 f954 	bl	8011a58 <f_close>

	return ret;
 80017b0:	7d7b      	ldrb	r3, [r7, #21]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	08017960 	.word	0x08017960
 80017c0:	2003a658 	.word	0x2003a658
 80017c4:	2003a6e8 	.word	0x2003a6e8

080017c8 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80017d2:	2201      	movs	r2, #1
 80017d4:	4908      	ldr	r1, [pc, #32]	; (80017f8 <sd_mount+0x30>)
 80017d6:	4809      	ldr	r0, [pc, #36]	; (80017fc <sd_mount+0x34>)
 80017d8:	f00f fbb6 	bl	8010f48 <f_mount>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <sd_mount+0x20>
 80017e2:	2301      	movs	r3, #1
 80017e4:	71fb      	strb	r3, [r7, #7]
 80017e6:	e001      	b.n	80017ec <sd_mount+0x24>
	else ret = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	71fb      	strb	r3, [r7, #7]

	return ret;
 80017ec:	79fb      	ldrb	r3, [r7, #7]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	08017970 	.word	0x08017970
 80017fc:	20039518 	.word	0x20039518

08001800 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4805      	ldr	r0, [pc, #20]	; (8001824 <create_path+0x24>)
 800180e:	f012 fd97 	bl	8014340 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001812:	6839      	ldr	r1, [r7, #0]
 8001814:	4804      	ldr	r0, [pc, #16]	; (8001828 <create_path+0x28>)
 8001816:	f012 fd93 	bl	8014340 <strcpy>

}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2003a558 	.word	0x2003a558
 8001828:	20039418 	.word	0x20039418

0800182c <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001830:	4807      	ldr	r0, [pc, #28]	; (8001850 <fopen_folder_and_file+0x24>)
 8001832:	f010 fc6b 	bl	801210c <f_mkdir>

	f_chdir(dirpath);
 8001836:	4806      	ldr	r0, [pc, #24]	; (8001850 <fopen_folder_and_file+0x24>)
 8001838:	f010 f938 	bl	8011aac <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800183c:	2213      	movs	r2, #19
 800183e:	4905      	ldr	r1, [pc, #20]	; (8001854 <fopen_folder_and_file+0x28>)
 8001840:	4805      	ldr	r0, [pc, #20]	; (8001858 <fopen_folder_and_file+0x2c>)
 8001842:	f00f fbc7 	bl	8010fd4 <f_open>

	f_chdir("..");
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <fopen_folder_and_file+0x30>)
 8001848:	f010 f930 	bl	8011aac <f_chdir>


}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}
 8001850:	2003a558 	.word	0x2003a558
 8001854:	20039418 	.word	0x20039418
 8001858:	2003a6e8 	.word	0x2003a6e8
 800185c:	08017964 	.word	0x08017964

08001860 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	e007      	b.n	800187c <bufclear+0x1c>
		buffer[i] = '\0';
 800186c:	4a08      	ldr	r2, [pc, #32]	; (8001890 <bufclear+0x30>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3301      	adds	r3, #1
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b7f      	cmp	r3, #127	; 0x7f
 8001880:	ddf4      	ble.n	800186c <bufclear+0xc>
	}
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	2003a658 	.word	0x2003a658

08001894 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018a8:	2200      	movs	r2, #0
 80018aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ae:	480e      	ldr	r0, [pc, #56]	; (80018e8 <read_byte+0x54>)
 80018b0:	f007 fb8e 	bl	8008fd0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018b4:	f107 010f 	add.w	r1, r7, #15
 80018b8:	2364      	movs	r3, #100	; 0x64
 80018ba:	2201      	movs	r2, #1
 80018bc:	480b      	ldr	r0, [pc, #44]	; (80018ec <read_byte+0x58>)
 80018be:	f00a fd37 	bl	800c330 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80018c2:	f107 010e 	add.w	r1, r7, #14
 80018c6:	2364      	movs	r3, #100	; 0x64
 80018c8:	2201      	movs	r2, #1
 80018ca:	4808      	ldr	r0, [pc, #32]	; (80018ec <read_byte+0x58>)
 80018cc:	f00a fe64 	bl	800c598 <HAL_SPI_Receive>
	CS_SET;
 80018d0:	2201      	movs	r2, #1
 80018d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018d6:	4804      	ldr	r0, [pc, #16]	; (80018e8 <read_byte+0x54>)
 80018d8:	f007 fb7a 	bl	8008fd0 <HAL_GPIO_WritePin>

	return val;
 80018dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40020400 	.word	0x40020400
 80018ec:	2003b784 	.word	0x2003b784

080018f0 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	460a      	mov	r2, r1
 80018fa:	71fb      	strb	r3, [r7, #7]
 80018fc:	4613      	mov	r3, r2
 80018fe:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001906:	b2db      	uxtb	r3, r3
 8001908:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800190a:	2200      	movs	r2, #0
 800190c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001910:	480c      	ldr	r0, [pc, #48]	; (8001944 <write_byte+0x54>)
 8001912:	f007 fb5d 	bl	8008fd0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001916:	f107 010f 	add.w	r1, r7, #15
 800191a:	2364      	movs	r3, #100	; 0x64
 800191c:	2201      	movs	r2, #1
 800191e:	480a      	ldr	r0, [pc, #40]	; (8001948 <write_byte+0x58>)
 8001920:	f00a fd06 	bl	800c330 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001924:	1db9      	adds	r1, r7, #6
 8001926:	2364      	movs	r3, #100	; 0x64
 8001928:	2201      	movs	r2, #1
 800192a:	4807      	ldr	r0, [pc, #28]	; (8001948 <write_byte+0x58>)
 800192c:	f00a fd00 	bl	800c330 <HAL_SPI_Transmit>
	CS_SET;
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001936:	4803      	ldr	r0, [pc, #12]	; (8001944 <write_byte+0x54>)
 8001938:	f007 fb4a 	bl	8008fd0 <HAL_GPIO_WritePin>
}
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40020400 	.word	0x40020400
 8001948:	2003b784 	.word	0x2003b784

0800194c <IMU_init>:

uint16_t IMU_init() {
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001956:	2000      	movs	r0, #0
 8001958:	f7ff ff9c 	bl	8001894 <read_byte>
 800195c:	4603      	mov	r3, r0
 800195e:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001960:	797b      	ldrb	r3, [r7, #5]
 8001962:	2be0      	cmp	r3, #224	; 0xe0
 8001964:	d119      	bne.n	800199a <IMU_init+0x4e>
		ret = 1;
 8001966:	2301      	movs	r3, #1
 8001968:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800196a:	2101      	movs	r1, #1
 800196c:	2006      	movs	r0, #6
 800196e:	f7ff ffbf 	bl	80018f0 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001972:	2110      	movs	r1, #16
 8001974:	2003      	movs	r0, #3
 8001976:	f7ff ffbb 	bl	80018f0 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800197a:	2120      	movs	r1, #32
 800197c:	207f      	movs	r0, #127	; 0x7f
 800197e:	f7ff ffb7 	bl	80018f0 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001982:	2106      	movs	r1, #6
 8001984:	2001      	movs	r0, #1
 8001986:	f7ff ffb3 	bl	80018f0 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 800198a:	2106      	movs	r1, #6
 800198c:	2014      	movs	r0, #20
 800198e:	f7ff ffaf 	bl	80018f0 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001992:	2100      	movs	r1, #0
 8001994:	207f      	movs	r0, #127	; 0x7f
 8001996:	f7ff ffab 	bl	80018f0 <write_byte>
	}
	return ret;
 800199a:	88fb      	ldrh	r3, [r7, #6]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <read_gyro_data>:

void read_gyro_data() {
 80019a4:	b598      	push	{r3, r4, r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80019a8:	2033      	movs	r0, #51	; 0x33
 80019aa:	f7ff ff73 	bl	8001894 <read_byte>
 80019ae:	4603      	mov	r3, r0
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	b21c      	sxth	r4, r3
 80019b4:	2034      	movs	r0, #52	; 0x34
 80019b6:	f7ff ff6d 	bl	8001894 <read_byte>
 80019ba:	4603      	mov	r3, r0
 80019bc:	b21b      	sxth	r3, r3
 80019be:	4323      	orrs	r3, r4
 80019c0:	b21a      	sxth	r2, r3
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <read_gyro_data+0x64>)
 80019c4:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80019c6:	2035      	movs	r0, #53	; 0x35
 80019c8:	f7ff ff64 	bl	8001894 <read_byte>
 80019cc:	4603      	mov	r3, r0
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	b21c      	sxth	r4, r3
 80019d2:	2036      	movs	r0, #54	; 0x36
 80019d4:	f7ff ff5e 	bl	8001894 <read_byte>
 80019d8:	4603      	mov	r3, r0
 80019da:	b21b      	sxth	r3, r3
 80019dc:	4323      	orrs	r3, r4
 80019de:	b21a      	sxth	r2, r3
 80019e0:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <read_gyro_data+0x68>)
 80019e2:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 80019e4:	2037      	movs	r0, #55	; 0x37
 80019e6:	f7ff ff55 	bl	8001894 <read_byte>
 80019ea:	4603      	mov	r3, r0
 80019ec:	021b      	lsls	r3, r3, #8
 80019ee:	b21c      	sxth	r4, r3
 80019f0:	2038      	movs	r0, #56	; 0x38
 80019f2:	f7ff ff4f 	bl	8001894 <read_byte>
 80019f6:	4603      	mov	r3, r0
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	4323      	orrs	r3, r4
 80019fc:	b21a      	sxth	r2, r3
 80019fe:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <read_gyro_data+0x6c>)
 8001a00:	801a      	strh	r2, [r3, #0]
}
 8001a02:	bf00      	nop
 8001a04:	bd98      	pop	{r3, r4, r7, pc}
 8001a06:	bf00      	nop
 8001a08:	2003b720 	.word	0x2003b720
 8001a0c:	2003b71e 	.word	0x2003b71e
 8001a10:	2003b718 	.word	0x2003b718

08001a14 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	801a      	strh	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	805a      	strh	r2, [r3, #2]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	809a      	strh	r2, [r3, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	80da      	strh	r2, [r3, #6]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	811a      	strh	r2, [r3, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	815a      	strh	r2, [r3, #10]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	60da      	str	r2, [r3, #12]
{

}
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a60:	f7ff ff74 	bl	800194c <IMU_init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001a68:	f7ff fb1a 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f7ff fb26 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001a74:	4809      	ldr	r0, [pc, #36]	; (8001a9c <_ZN3IMU4initEv+0x44>)
 8001a76:	f7ff fb4d 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff fb1f 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001a82:	89fb      	ldrh	r3, [r7, #14]
 8001a84:	4619      	mov	r1, r3
 8001a86:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <_ZN3IMU4initEv+0x48>)
 8001a88:	f7ff fb44 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001a8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a90:	f006 f808 	bl	8007aa4 <HAL_Delay>

}
 8001a94:	bf00      	nop
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	08017974 	.word	0x08017974
 8001aa0:	08017980 	.word	0x08017980
 8001aa4:	00000000 	.word	0x00000000

08001aa8 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001aa8:	b5b0      	push	{r4, r5, r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001ab0:	f7ff ff78 	bl	80019a4 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001ab4:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <_ZN3IMU12updateValuesEv+0xa0>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	b21a      	sxth	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001abe:	4b23      	ldr	r3, [pc, #140]	; (8001b4c <_ZN3IMU12updateValuesEv+0xa4>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	b21a      	sxth	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001ac8:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <_ZN3IMU12updateValuesEv+0xa8>)
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	b21a      	sxth	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fd3b 	bl	8000554 <__aeabi_i2d>
 8001ade:	a316      	add	r3, pc, #88	; (adr r3, 8001b38 <_ZN3IMU12updateValuesEv+0x90>)
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	f7fe fda0 	bl	8000628 <__aeabi_dmul>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	460c      	mov	r4, r1
 8001aec:	4625      	mov	r5, r4
 8001aee:	461c      	mov	r4, r3
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <_ZN3IMU12updateValuesEv+0xac>)
 8001af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fd2c 	bl	8000554 <__aeabi_i2d>
 8001afc:	a310      	add	r3, pc, #64	; (adr r3, 8001b40 <_ZN3IMU12updateValuesEv+0x98>)
 8001afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b02:	f7fe fd91 	bl	8000628 <__aeabi_dmul>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	f7fe fbd5 	bl	80002bc <__adddf3>
 8001b12:	4603      	mov	r3, r0
 8001b14:	460c      	mov	r4, r1
 8001b16:	4618      	mov	r0, r3
 8001b18:	4621      	mov	r1, r4
 8001b1a:	f7ff f835 	bl	8000b88 <__aeabi_d2iz>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	b21a      	sxth	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <_ZN3IMU12updateValuesEv+0xac>)
 8001b2e:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bdb0      	pop	{r4, r5, r7, pc}
 8001b38:	eb851eb8 	.word	0xeb851eb8
 8001b3c:	3f9eb851 	.word	0x3f9eb851
 8001b40:	70a3d70a 	.word	0x70a3d70a
 8001b44:	3fef0a3d 	.word	0x3fef0a3d
 8001b48:	2003b720 	.word	0x2003b720
 8001b4c:	2003b71e 	.word	0x2003b71e
 8001b50:	2003b718 	.word	0x2003b718
 8001b54:	20000210 	.word	0x20000210

08001b58 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001b58:	b5b0      	push	{r4, r5, r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b66:	ee07 3a90 	vmov	s15, r3
 8001b6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b78:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f7fe fcfb 	bl	8000578 <__aeabi_f2d>
 8001b82:	a316      	add	r3, pc, #88	; (adr r3, 8001bdc <_ZN3IMU8getOmegaEv+0x84>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	f7fe fe78 	bl	800087c <__aeabi_ddiv>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4614      	mov	r4, r2
 8001b92:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b96:	a313      	add	r3, pc, #76	; (adr r3, 8001be4 <_ZN3IMU8getOmegaEv+0x8c>)
 8001b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	f7fe fd42 	bl	8000628 <__aeabi_dmul>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	460c      	mov	r4, r1
 8001ba8:	4618      	mov	r0, r3
 8001baa:	4621      	mov	r1, r4
 8001bac:	f04f 0200 	mov.w	r2, #0
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <_ZN3IMU8getOmegaEv+0x80>)
 8001bb2:	f7fe fe63 	bl	800087c <__aeabi_ddiv>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	460c      	mov	r4, r1
 8001bba:	4618      	mov	r0, r3
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	f7ff f82b 	bl	8000c18 <__aeabi_d2f>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	ee07 3a90 	vmov	s15, r3
}
 8001bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	f3af 8000 	nop.w
 8001bd8:	40668000 	.word	0x40668000
 8001bdc:	66666666 	.word	0x66666666
 8001be0:	40306666 	.word	0x40306666
 8001be4:	54411744 	.word	0x54411744
 8001be8:	400921fb 	.word	0x400921fb

08001bec <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bee:	b08b      	sub	sp, #44	; 0x2c
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001bf4:	466b      	mov	r3, sp
 8001bf6:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001bf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bfc:	f005 ff52 	bl	8007aa4 <HAL_Delay>
	lcd_clear();
 8001c00:	f7ff fa4e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c04:	2100      	movs	r1, #0
 8001c06:	2000      	movs	r0, #0
 8001c08:	f7ff fa5a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001c0c:	4840      	ldr	r0, [pc, #256]	; (8001d10 <_ZN3IMU11calibrationEv+0x124>)
 8001c0e:	f7ff fa81 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c12:	2101      	movs	r1, #1
 8001c14:	2000      	movs	r0, #0
 8001c16:	f7ff fa53 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001c1a:	483e      	ldr	r0, [pc, #248]	; (8001d14 <_ZN3IMU11calibrationEv+0x128>)
 8001c1c:	f7ff fa7a 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001c20:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c24:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001c26:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c2a:	1e5d      	subs	r5, r3, #1
 8001c2c:	61bd      	str	r5, [r7, #24]
 8001c2e:	462b      	mov	r3, r5
 8001c30:	3301      	adds	r3, #1
 8001c32:	4619      	mov	r1, r3
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	f04f 0400 	mov.w	r4, #0
 8001c40:	0154      	lsls	r4, r2, #5
 8001c42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c46:	014b      	lsls	r3, r1, #5
 8001c48:	462b      	mov	r3, r5
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	f04f 0400 	mov.w	r4, #0
 8001c5a:	0154      	lsls	r4, r2, #5
 8001c5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c60:	014b      	lsls	r3, r1, #5
 8001c62:	462b      	mov	r3, r5
 8001c64:	3301      	adds	r3, #1
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	3303      	adds	r3, #3
 8001c6a:	3307      	adds	r3, #7
 8001c6c:	08db      	lsrs	r3, r3, #3
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	ebad 0d03 	sub.w	sp, sp, r3
 8001c74:	466b      	mov	r3, sp
 8001c76:	3303      	adds	r3, #3
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c7e:	2300      	movs	r3, #0
 8001c80:	83fb      	strh	r3, [r7, #30]
 8001c82:	8bfa      	ldrh	r2, [r7, #30]
 8001c84:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	da13      	bge.n	8001cb4 <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001c92:	8bfb      	ldrh	r3, [r7, #30]
 8001c94:	ee07 2a90 	vmov	s15, r2
 8001c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001ca6:	2002      	movs	r0, #2
 8001ca8:	f005 fefc 	bl	8007aa4 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001cac:	8bfb      	ldrh	r3, [r7, #30]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	83fb      	strh	r3, [r7, #30]
 8001cb2:	e7e6      	b.n	8001c82 <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	462b      	mov	r3, r5
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d00e      	beq.n	8001cea <_ZN3IMU11calibrationEv+0xfe>
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	edd3 7a00 	vldr	s15, [r3]
 8001cd6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cde:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce8:	e7ec      	b.n	8001cc4 <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001cea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001cee:	ee07 3a90 	vmov	s15, r3
 8001cf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cf6:	edd7 6a08 	vldr	s13, [r7, #32]
 8001cfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	edc3 7a03 	vstr	s15, [r3, #12]
 8001d04:	46b5      	mov	sp, r6
}
 8001d06:	bf00      	nop
 8001d08:	372c      	adds	r7, #44	; 0x2c
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	08017984 	.word	0x08017984
 8001d14:	08017990 	.word	0x08017990

08001d18 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	4603      	mov	r3, r0
 8001d20:	460a      	mov	r2, r1
 8001d22:	71fb      	strb	r3, [r7, #7]
 8001d24:	4613      	mov	r3, r2
 8001d26:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001d28:	79bb      	ldrb	r3, [r7, #6]
 8001d2a:	b299      	uxth	r1, r3
 8001d2c:	1dfa      	adds	r2, r7, #7
 8001d2e:	2364      	movs	r3, #100	; 0x64
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	2301      	movs	r3, #1
 8001d34:	480c      	ldr	r0, [pc, #48]	; (8001d68 <INA260_read+0x50>)
 8001d36:	f007 fa9d 	bl	8009274 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d3a:	79bb      	ldrb	r3, [r7, #6]
 8001d3c:	b299      	uxth	r1, r3
 8001d3e:	f107 020c 	add.w	r2, r7, #12
 8001d42:	2364      	movs	r3, #100	; 0x64
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2302      	movs	r3, #2
 8001d48:	4807      	ldr	r0, [pc, #28]	; (8001d68 <INA260_read+0x50>)
 8001d4a:	f007 fb91 	bl	8009470 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d4e:	7b3b      	ldrb	r3, [r7, #12]
 8001d50:	021b      	lsls	r3, r3, #8
 8001d52:	b21a      	sxth	r2, r3
 8001d54:	7b7b      	ldrb	r3, [r7, #13]
 8001d56:	b21b      	sxth	r3, r3
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	b21b      	sxth	r3, r3
 8001d5c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d5e:	89fb      	ldrh	r3, [r7, #14]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	2003b938 	.word	0x2003b938

08001d6c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	4604      	mov	r4, r0
 8001d74:	4608      	mov	r0, r1
 8001d76:	4611      	mov	r1, r2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4623      	mov	r3, r4
 8001d7c:	71fb      	strb	r3, [r7, #7]
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71bb      	strb	r3, [r7, #6]
 8001d82:	460b      	mov	r3, r1
 8001d84:	717b      	strb	r3, [r7, #5]
 8001d86:	4613      	mov	r3, r2
 8001d88:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	733b      	strb	r3, [r7, #12]
 8001d8e:	79bb      	ldrb	r3, [r7, #6]
 8001d90:	737b      	strb	r3, [r7, #13]
 8001d92:	797b      	ldrb	r3, [r7, #5]
 8001d94:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001d96:	793b      	ldrb	r3, [r7, #4]
 8001d98:	b299      	uxth	r1, r3
 8001d9a:	f107 020c 	add.w	r2, r7, #12
 8001d9e:	2364      	movs	r3, #100	; 0x64
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2303      	movs	r3, #3
 8001da4:	4803      	ldr	r0, [pc, #12]	; (8001db4 <INA260_write+0x48>)
 8001da6:	f007 fa65 	bl	8009274 <HAL_I2C_Master_Transmit>
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd90      	pop	{r4, r7, pc}
 8001db2:	bf00      	nop
 8001db4:	2003b938 	.word	0x2003b938

08001db8 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	71fb      	strb	r3, [r7, #7]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	71bb      	strb	r3, [r7, #6]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001dca:	797b      	ldrb	r3, [r7, #5]
 8001dcc:	79ba      	ldrb	r2, [r7, #6]
 8001dce:	79f9      	ldrb	r1, [r7, #7]
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f7ff ffcb 	bl	8001d6c <INA260_write>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	461a      	mov	r2, r3
 8001dec:	21df      	movs	r1, #223	; 0xdf
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7ff ffe2 	bl	8001db8 <setConfig>
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
{

}
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e24:	482a      	ldr	r0, [pc, #168]	; (8001ed0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e26:	f007 f8bb 	bl	8008fa0 <HAL_GPIO_ReadPin>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <_ZN8JoyStick8getValueEv+0x2e>
 8001e3a:	89fb      	ldrh	r3, [r7, #14]
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e42:	2101      	movs	r1, #1
 8001e44:	4823      	ldr	r0, [pc, #140]	; (8001ed4 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e46:	f007 f8ab 	bl	8008fa0 <HAL_GPIO_ReadPin>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <_ZN8JoyStick8getValueEv+0x4e>
 8001e5a:	89fb      	ldrh	r3, [r7, #14]
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e66:	481a      	ldr	r0, [pc, #104]	; (8001ed0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e68:	f007 f89a 	bl	8008fa0 <HAL_GPIO_ReadPin>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	bf0c      	ite	eq
 8001e72:	2301      	moveq	r3, #1
 8001e74:	2300      	movne	r3, #0
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <_ZN8JoyStick8getValueEv+0x70>
 8001e7c:	89fb      	ldrh	r3, [r7, #14]
 8001e7e:	f043 0304 	orr.w	r3, r3, #4
 8001e82:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001e84:	2104      	movs	r1, #4
 8001e86:	4814      	ldr	r0, [pc, #80]	; (8001ed8 <_ZN8JoyStick8getValueEv+0xc4>)
 8001e88:	f007 f88a 	bl	8008fa0 <HAL_GPIO_ReadPin>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf0c      	ite	eq
 8001e92:	2301      	moveq	r3, #1
 8001e94:	2300      	movne	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <_ZN8JoyStick8getValueEv+0x90>
 8001e9c:	89fb      	ldrh	r3, [r7, #14]
 8001e9e:	f043 0308 	orr.w	r3, r3, #8
 8001ea2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001ea4:	2180      	movs	r1, #128	; 0x80
 8001ea6:	480a      	ldr	r0, [pc, #40]	; (8001ed0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001ea8:	f007 f87a 	bl	8008fa0 <HAL_GPIO_ReadPin>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bf0c      	ite	eq
 8001eb2:	2301      	moveq	r3, #1
 8001eb4:	2300      	movne	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <_ZN8JoyStick8getValueEv+0xb0>
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	f043 0310 	orr.w	r3, r3, #16
 8001ec2:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001ec4:	89fb      	ldrh	r3, [r7, #14]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40020c00 	.word	0x40020c00
 8001ed8:	40020400 	.word	0x40020400

08001edc <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	2b52      	cmp	r3, #82	; 0x52
 8001eec:	d112      	bne.n	8001f14 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ef4:	4856      	ldr	r0, [pc, #344]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001ef6:	f007 f86b 	bl	8008fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001efa:	2201      	movs	r2, #1
 8001efc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f00:	4853      	ldr	r0, [pc, #332]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f02:	f007 f865 	bl	8008fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f06:	2201      	movs	r2, #1
 8001f08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f0c:	4850      	ldr	r0, [pc, #320]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f0e:	f007 f85f 	bl	8008fd0 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f12:	e098      	b.n	8002046 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	2b47      	cmp	r3, #71	; 0x47
 8001f18:	d112      	bne.n	8001f40 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f20:	484b      	ldr	r0, [pc, #300]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f22:	f007 f855 	bl	8008fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f26:	2200      	movs	r2, #0
 8001f28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f2c:	4848      	ldr	r0, [pc, #288]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f2e:	f007 f84f 	bl	8008fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f32:	2201      	movs	r2, #1
 8001f34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f38:	4845      	ldr	r0, [pc, #276]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f3a:	f007 f849 	bl	8008fd0 <HAL_GPIO_WritePin>
}
 8001f3e:	e082      	b.n	8002046 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	2b42      	cmp	r3, #66	; 0x42
 8001f44:	d112      	bne.n	8001f6c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f46:	2201      	movs	r2, #1
 8001f48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f4c:	4840      	ldr	r0, [pc, #256]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f4e:	f007 f83f 	bl	8008fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f52:	2201      	movs	r2, #1
 8001f54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f58:	483d      	ldr	r0, [pc, #244]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f5a:	f007 f839 	bl	8008fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f64:	483a      	ldr	r0, [pc, #232]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f66:	f007 f833 	bl	8008fd0 <HAL_GPIO_WritePin>
}
 8001f6a:	e06c      	b.n	8002046 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	2b43      	cmp	r3, #67	; 0x43
 8001f70:	d112      	bne.n	8001f98 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f78:	4835      	ldr	r0, [pc, #212]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f7a:	f007 f829 	bl	8008fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f84:	4832      	ldr	r0, [pc, #200]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f86:	f007 f823 	bl	8008fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f90:	482f      	ldr	r0, [pc, #188]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001f92:	f007 f81d 	bl	8008fd0 <HAL_GPIO_WritePin>
}
 8001f96:	e056      	b.n	8002046 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001f98:	78fb      	ldrb	r3, [r7, #3]
 8001f9a:	2b4d      	cmp	r3, #77	; 0x4d
 8001f9c:	d112      	bne.n	8001fc4 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa4:	482a      	ldr	r0, [pc, #168]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001fa6:	f007 f813 	bl	8008fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001faa:	2201      	movs	r2, #1
 8001fac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fb0:	4827      	ldr	r0, [pc, #156]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001fb2:	f007 f80d 	bl	8008fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fbc:	4824      	ldr	r0, [pc, #144]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001fbe:	f007 f807 	bl	8008fd0 <HAL_GPIO_WritePin>
}
 8001fc2:	e040      	b.n	8002046 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	2b59      	cmp	r3, #89	; 0x59
 8001fc8:	d112      	bne.n	8001ff0 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd0:	481f      	ldr	r0, [pc, #124]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001fd2:	f006 fffd 	bl	8008fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fdc:	481c      	ldr	r0, [pc, #112]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001fde:	f006 fff7 	bl	8008fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fe8:	4819      	ldr	r0, [pc, #100]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001fea:	f006 fff1 	bl	8008fd0 <HAL_GPIO_WritePin>
}
 8001fee:	e02a      	b.n	8002046 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001ff0:	78fb      	ldrb	r3, [r7, #3]
 8001ff2:	2b57      	cmp	r3, #87	; 0x57
 8001ff4:	d112      	bne.n	800201c <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ffc:	4814      	ldr	r0, [pc, #80]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8001ffe:	f006 ffe7 	bl	8008fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002002:	2200      	movs	r2, #0
 8002004:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002008:	4811      	ldr	r0, [pc, #68]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 800200a:	f006 ffe1 	bl	8008fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800200e:	2200      	movs	r2, #0
 8002010:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002014:	480e      	ldr	r0, [pc, #56]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8002016:	f006 ffdb 	bl	8008fd0 <HAL_GPIO_WritePin>
}
 800201a:	e014      	b.n	8002046 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	2b7e      	cmp	r3, #126	; 0x7e
 8002020:	d111      	bne.n	8002046 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002022:	2201      	movs	r2, #1
 8002024:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002028:	4809      	ldr	r0, [pc, #36]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 800202a:	f006 ffd1 	bl	8008fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800202e:	2201      	movs	r2, #1
 8002030:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002034:	4806      	ldr	r0, [pc, #24]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8002036:	f006 ffcb 	bl	8008fd0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800203a:	2201      	movs	r2, #1
 800203c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002040:	4803      	ldr	r0, [pc, #12]	; (8002050 <_ZN3LED9fullColorEc+0x174>)
 8002042:	f006 ffc5 	bl	8008fd0 <HAL_GPIO_WritePin>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40020000 	.word	0x40020000

08002054 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	70fb      	strb	r3, [r7, #3]
 8002060:	4613      	mov	r3, r2
 8002062:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002064:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d106      	bne.n	800207a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002072:	4813      	ldr	r0, [pc, #76]	; (80020c0 <_ZN3LED2LREaa+0x6c>)
 8002074:	f006 ffac 	bl	8008fd0 <HAL_GPIO_WritePin>
 8002078:	e009      	b.n	800208e <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800207a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d105      	bne.n	800208e <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002088:	480d      	ldr	r0, [pc, #52]	; (80020c0 <_ZN3LED2LREaa+0x6c>)
 800208a:	f006 ffa1 	bl	8008fd0 <HAL_GPIO_WritePin>

	if(r_status == 1)
 800208e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d106      	bne.n	80020a4 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002096:	2201      	movs	r2, #1
 8002098:	f44f 7100 	mov.w	r1, #512	; 0x200
 800209c:	4808      	ldr	r0, [pc, #32]	; (80020c0 <_ZN3LED2LREaa+0x6c>)
 800209e:	f006 ff97 	bl	8008fd0 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80020a2:	e009      	b.n	80020b8 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80020a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d105      	bne.n	80020b8 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80020ac:	2200      	movs	r2, #0
 80020ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020b2:	4803      	ldr	r0, [pc, #12]	; (80020c0 <_ZN3LED2LREaa+0x6c>)
 80020b4:	f006 ff8c 	bl	8008fd0 <HAL_GPIO_WritePin>
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40020000 	.word	0x40020000

080020c4 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b092      	sub	sp, #72	; 0x48
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fe92 	bl	8001dfc <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
 80020dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020de:	647b      	str	r3, [r7, #68]	; 0x44
 80020e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e2:	331c      	adds	r3, #28
 80020e4:	633b      	str	r3, [r7, #48]	; 0x30
 80020e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d008      	beq.n	8002100 <_ZN10LineSensorC1Ev+0x3c>
 80020ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 80020f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f4:	2200      	movs	r2, #0
 80020f6:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 80020f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020fa:	3302      	adds	r3, #2
 80020fc:	647b      	str	r3, [r7, #68]	; 0x44
 80020fe:	e7f2      	b.n	80020e6 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
 8002108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210a:	643b      	str	r3, [r7, #64]	; 0x40
 800210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210e:	3338      	adds	r3, #56	; 0x38
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
 8002112:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	429a      	cmp	r2, r3
 8002118:	d009      	beq.n	800212e <_ZN10LineSensorC1Ev+0x6a>
 800211a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800211c:	623b      	str	r3, [r7, #32]
		s = 0;
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002128:	3304      	adds	r3, #4
 800212a:	643b      	str	r3, [r7, #64]	; 0x40
 800212c:	e7f1      	b.n	8002112 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3338      	adds	r3, #56	; 0x38
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	429a      	cmp	r2, r3
 8002146:	d009      	beq.n	800215c <_ZN10LineSensorC1Ev+0x98>
 8002148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800214a:	617b      	str	r3, [r7, #20]
		m = 0;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002156:	3304      	adds	r3, #4
 8002158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215a:	e7f1      	b.n	8002140 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	63bb      	str	r3, [r7, #56]	; 0x38
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	3338      	adds	r3, #56	; 0x38
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	429a      	cmp	r2, r3
 8002174:	d009      	beq.n	800218a <_ZN10LineSensorC1Ev+0xc6>
 8002176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002178:	60bb      	str	r3, [r7, #8]
		s = 1;
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002180:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8002182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002184:	3304      	adds	r3, #4
 8002186:	63bb      	str	r3, [r7, #56]	; 0x38
 8002188:	e7f1      	b.n	800216e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4618      	mov	r0, r3
 800218e:	3748      	adds	r7, #72	; 0x48
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	220e      	movs	r2, #14
 80021a0:	4619      	mov	r1, r3
 80021a2:	4803      	ldr	r0, [pc, #12]	; (80021b0 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80021a4:	f005 fce4 	bl	8007b70 <HAL_ADC_Start_DMA>
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	2003b85c 	.word	0x2003b85c

080021b4 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2b0d      	cmp	r3, #13
 80021c4:	dc2f      	bgt.n	8002226 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3392      	adds	r3, #146	; 0x92
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	3304      	adds	r3, #4
 80021d2:	ed93 7a00 	vldr	s14, [r3]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021de:	ee07 3a90 	vmov	s15, r3
 80021e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	33a0      	adds	r3, #160	; 0xa0
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3304      	adds	r3, #4
 80021f2:	edd3 7a00 	vldr	s15, [r3]
 80021f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021fa:	4b14      	ldr	r3, [pc, #80]	; (800224c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	4619      	mov	r1, r3
 8002200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	460b      	mov	r3, r1
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	1a5b      	subs	r3, r3, r1
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	68f9      	ldr	r1, [r7, #12]
 8002210:	440b      	add	r3, r1
 8002212:	3306      	adds	r3, #6
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	3304      	adds	r3, #4
 800221a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3301      	adds	r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	e7cc      	b.n	80021c0 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	3301      	adds	r3, #1
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002230:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b09      	cmp	r3, #9
 8002238:	d902      	bls.n	8002240 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]


}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	2000021c 	.word	0x2000021c

08002250 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002250:	b5b0      	push	{r4, r5, r7, lr}
 8002252:	b08e      	sub	sp, #56	; 0x38
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002258:	2300      	movs	r3, #0
 800225a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800225e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002262:	2b0d      	cmp	r3, #13
 8002264:	f200 80b8 	bhi.w	80023d8 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002268:	2300      	movs	r3, #0
 800226a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800226e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002272:	2b09      	cmp	r3, #9
 8002274:	d81c      	bhi.n	80022b0 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002276:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800227a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800227e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4423      	add	r3, r4
 800228e:	3306      	adds	r3, #6
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4403      	add	r3, r0
 8002294:	3304      	adds	r3, #4
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	008b      	lsls	r3, r1, #2
 800229a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800229e:	440b      	add	r3, r1
 80022a0:	3b30      	subs	r3, #48	; 0x30
 80022a2:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022a4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022a8:	3301      	adds	r3, #1
 80022aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022ae:	e7de      	b.n	800226e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80022b0:	2300      	movs	r3, #0
 80022b2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022b6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022ba:	2b09      	cmp	r3, #9
 80022bc:	d84d      	bhi.n	800235a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80022be:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022c2:	3301      	adds	r3, #1
 80022c4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022c8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022cc:	2b09      	cmp	r3, #9
 80022ce:	d83e      	bhi.n	800234e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80022d0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022da:	4413      	add	r3, r2
 80022dc:	3b30      	subs	r3, #48	; 0x30
 80022de:	ed93 7a00 	vldr	s14, [r3]
 80022e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022ec:	4413      	add	r3, r2
 80022ee:	3b30      	subs	r3, #48	; 0x30
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fc:	d521      	bpl.n	8002342 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80022fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002308:	4413      	add	r3, r2
 800230a:	3b30      	subs	r3, #48	; 0x30
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002310:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002314:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002318:	0092      	lsls	r2, r2, #2
 800231a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800231e:	440a      	add	r2, r1
 8002320:	3a30      	subs	r2, #48	; 0x30
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800232a:	440b      	add	r3, r1
 800232c:	3b30      	subs	r3, #48	; 0x30
 800232e:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002330:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800233a:	4413      	add	r3, r2
 800233c:	3b30      	subs	r3, #48	; 0x30
 800233e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002340:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002342:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002346:	3301      	adds	r3, #1
 8002348:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800234c:	e7bc      	b.n	80022c8 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800234e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002352:	3301      	adds	r3, #1
 8002354:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002358:	e7ad      	b.n	80022b6 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe f90b 	bl	8000578 <__aeabi_f2d>
 8002362:	a32a      	add	r3, pc, #168	; (adr r3, 800240c <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 8002364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002368:	f7fe f95e 	bl	8000628 <__aeabi_dmul>
 800236c:	4603      	mov	r3, r0
 800236e:	460c      	mov	r4, r1
 8002370:	4625      	mov	r5, r4
 8002372:	461c      	mov	r4, r3
 8002374:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002378:	4a21      	ldr	r2, [pc, #132]	; (8002400 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8f9 	bl	8000578 <__aeabi_f2d>
 8002386:	a31c      	add	r3, pc, #112	; (adr r3, 80023f8 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238c:	f7fe f94c 	bl	8000628 <__aeabi_dmul>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4620      	mov	r0, r4
 8002396:	4629      	mov	r1, r5
 8002398:	f7fd ff90 	bl	80002bc <__adddf3>
 800239c:	4603      	mov	r3, r0
 800239e:	460c      	mov	r4, r1
 80023a0:	461a      	mov	r2, r3
 80023a2:	4623      	mov	r3, r4
 80023a4:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	f7fe fc34 	bl	8000c18 <__aeabi_d2f>
 80023b0:	4601      	mov	r1, r0
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 80023be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	490e      	ldr	r1, [pc, #56]	; (8002400 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80023cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023d0:	3301      	adds	r3, #1
 80023d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023d6:	e742      	b.n	800225e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80023de:	4a09      	ldr	r2, [pc, #36]	; (8002404 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 80023e0:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80023e8:	4a07      	ldr	r2, [pc, #28]	; (8002408 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 80023ea:	6013      	str	r3, [r2, #0]
}
 80023ec:	bf00      	nop
 80023ee:	3738      	adds	r7, #56	; 0x38
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bdb0      	pop	{r4, r5, r7, pc}
 80023f4:	f3af 8000 	nop.w
 80023f8:	66666666 	.word	0x66666666
 80023fc:	3fee6666 	.word	0x3fee6666
 8002400:	20000220 	.word	0x20000220
 8002404:	20000214 	.word	0x20000214
 8002408:	20000218 	.word	0x20000218
 800240c:	9999999a 	.word	0x9999999a
 8002410:	3fa99999 	.word	0x3fa99999

08002414 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b0a0      	sub	sp, #128	; 0x80
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800241c:	2064      	movs	r0, #100	; 0x64
 800241e:	f005 fb41 	bl	8007aa4 <HAL_Delay>

	lcd_clear();
 8002422:	f7fe fe3d 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8002426:	2100      	movs	r1, #0
 8002428:	2000      	movs	r0, #0
 800242a:	f7fe fe49 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 800242e:	4886      	ldr	r0, [pc, #536]	; (8002648 <_ZN10LineSensor11calibrationEv+0x234>)
 8002430:	f7fe fe70 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002434:	2101      	movs	r1, #1
 8002436:	2000      	movs	r0, #0
 8002438:	f7fe fe42 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 800243c:	4883      	ldr	r0, [pc, #524]	; (800264c <_ZN10LineSensor11calibrationEv+0x238>)
 800243e:	f7fe fe69 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002442:	2300      	movs	r3, #0
 8002444:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002448:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800244c:	2b0d      	cmp	r3, #13
 800244e:	d823      	bhi.n	8002498 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002450:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002454:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	32b0      	adds	r2, #176	; 0xb0
 800245c:	0092      	lsls	r2, r2, #2
 800245e:	440a      	add	r2, r1
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002468:	440b      	add	r3, r1
 800246a:	3b40      	subs	r3, #64	; 0x40
 800246c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800246e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002472:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	32b0      	adds	r2, #176	; 0xb0
 800247a:	0092      	lsls	r2, r2, #2
 800247c:	440a      	add	r2, r1
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002486:	440b      	add	r3, r1
 8002488:	3b78      	subs	r3, #120	; 0x78
 800248a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800248c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002490:	3301      	adds	r3, #1
 8002492:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002496:	e7d7      	b.n	8002448 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fcb8 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	bf14      	ite	ne
 80024aa:	2301      	movne	r3, #1
 80024ac:	2300      	moveq	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d079      	beq.n	80025a8 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80024ba:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024be:	2b0d      	cmp	r3, #13
 80024c0:	d850      	bhi.n	8002564 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80024c2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024cc:	4413      	add	r3, r2
 80024ce:	3b40      	subs	r3, #64	; 0x40
 80024d0:	ed93 7a00 	vldr	s14, [r3]
 80024d4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	33b0      	adds	r3, #176	; 0xb0
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ec:	d50f      	bpl.n	800250e <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80024ee:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80024f2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	32b0      	adds	r2, #176	; 0xb0
 80024fa:	0092      	lsls	r2, r2, #2
 80024fc:	440a      	add	r2, r1
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002506:	440b      	add	r3, r1
 8002508:	3b40      	subs	r3, #64	; 0x40
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	e024      	b.n	8002558 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 800250e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002518:	4413      	add	r3, r2
 800251a:	3b78      	subs	r3, #120	; 0x78
 800251c:	ed93 7a00 	vldr	s14, [r3]
 8002520:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	33b0      	adds	r3, #176	; 0xb0
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	edd3 7a00 	vldr	s15, [r3]
 8002530:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002538:	dd0e      	ble.n	8002558 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800253a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800253e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	32b0      	adds	r2, #176	; 0xb0
 8002546:	0092      	lsls	r2, r2, #2
 8002548:	440a      	add	r2, r1
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002552:	440b      	add	r3, r1
 8002554:	3b78      	subs	r3, #120	; 0x78
 8002556:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002558:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800255c:	3301      	adds	r3, #1
 800255e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002562:	e7aa      	b.n	80024ba <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800256a:	4618      	mov	r0, r3
 800256c:	f001 fd3a 	bl	8003fe4 <_ZN12RotarySwitch8getValueEv>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	bf0c      	ite	eq
 8002576:	2301      	moveq	r3, #1
 8002578:	2300      	movne	r3, #0
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d009      	beq.n	8002594 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002586:	2201      	movs	r2, #1
 8002588:	f04f 31ff 	mov.w	r1, #4294967295
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fd61 	bl	8002054 <_ZN3LED2LREaa>
 8002592:	e781      	b.n	8002498 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800259a:	2200      	movs	r2, #0
 800259c:	f04f 31ff 	mov.w	r1, #4294967295
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fd57 	bl	8002054 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80025a6:	e777      	b.n	8002498 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025a8:	2300      	movs	r3, #0
 80025aa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80025ae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025b2:	2b0d      	cmp	r3, #13
 80025b4:	d826      	bhi.n	8002604 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80025b6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025c0:	4413      	add	r3, r2
 80025c2:	3b40      	subs	r3, #64	; 0x40
 80025c4:	ed93 7a00 	vldr	s14, [r3]
 80025c8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025d2:	4413      	add	r3, r2
 80025d4:	3b78      	subs	r3, #120	; 0x78
 80025d6:	edd3 7a00 	vldr	s15, [r3]
 80025da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025de:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025e2:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002650 <_ZN10LineSensor11calibrationEv+0x23c>
 80025e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	3392      	adds	r3, #146	; 0x92
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	3304      	adds	r3, #4
 80025f4:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025f8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025fc:	3301      	adds	r3, #1
 80025fe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002602:	e7d4      	b.n	80025ae <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002604:	2300      	movs	r3, #0
 8002606:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800260a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800260e:	2b0d      	cmp	r3, #13
 8002610:	d815      	bhi.n	800263e <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 8002612:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8002616:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800261a:	0092      	lsls	r2, r2, #2
 800261c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002620:	440a      	add	r2, r1
 8002622:	3a78      	subs	r2, #120	; 0x78
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	33a0      	adds	r3, #160	; 0xa0
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	3304      	adds	r3, #4
 8002630:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002632:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002636:	3301      	adds	r3, #1
 8002638:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800263c:	e7e5      	b.n	800260a <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 800263e:	bf00      	nop
 8002640:	3780      	adds	r7, #128	; 0x80
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	0801799c 	.word	0x0801799c
 800264c:	080179a8 	.word	0x080179a8
 8002650:	447a0000 	.word	0x447a0000

08002654 <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	; 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	61bb      	str	r3, [r7, #24]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3338      	adds	r3, #56	; 0x38
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	429a      	cmp	r2, r3
 8002678:	d012      	beq.n	80026a0 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	edd3 7a00 	vldr	s15, [r3]
 8002684:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80026f4 <_ZN10LineSensor13emergencyStopEv+0xa0>
 8002688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800268c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002690:	db02      	blt.n	8002698 <_ZN10LineSensor13emergencyStopEv+0x44>
 8002692:	8bfb      	ldrh	r3, [r7, #30]
 8002694:	3301      	adds	r3, #1
 8002696:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	3304      	adds	r3, #4
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	e7e8      	b.n	8002672 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 80026a0:	8bfb      	ldrh	r3, [r7, #30]
 80026a2:	2b0d      	cmp	r3, #13
 80026a4:	d906      	bls.n	80026b4 <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 80026a6:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	3301      	adds	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026b0:	801a      	strh	r2, [r3, #0]
 80026b2:	e002      	b.n	80026ba <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 80026b4:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 80026ba:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	2b31      	cmp	r3, #49	; 0x31
 80026c0:	d903      	bls.n	80026ca <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
 80026c8:	e002      	b.n	80026d0 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 80026ca:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	f242 720f 	movw	r2, #9999	; 0x270f
 80026d8:	4293      	cmp	r3, r2
 80026da:	d903      	bls.n	80026e4 <_ZN10LineSensor13emergencyStopEv+0x90>
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026de:	f242 7210 	movw	r2, #10000	; 0x2710
 80026e2:	801a      	strh	r2, [r3, #0]

	return flag;
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026e6:	781b      	ldrb	r3, [r3, #0]

}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3724      	adds	r7, #36	; 0x24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	442f0000 	.word	0x442f0000
 80026f8:	20000258 	.word	0x20000258
 80026fc:	2000025a 	.word	0x2000025a

08002700 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	ed87 0a01 	vstr	s0, [r7, #4]
 800270a:	edd7 7a01 	vldr	s15, [r7, #4]
 800270e:	eef0 7ae7 	vabs.f32	s15, s15
 8002712:	eeb0 0a67 	vmov.f32	s0, s15
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger>:
float mon_ave_l, mon_ave_r;
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger) :
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
 800272c:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), logging_flag_(false), ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	621a      	str	r2, [r3, #32]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	625a      	str	r2, [r3, #36]	; 0x24
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	629a      	str	r2, [r3, #40]	; 0x28
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	62da      	str	r2, [r3, #44]	; 0x2c
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	635a      	str	r2, [r3, #52]	; 0x34
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	63da      	str	r2, [r3, #60]	; 0x3c
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	675a      	str	r2, [r3, #116]	; 0x74
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800278c:	333c      	adds	r3, #60	; 0x3c
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027a4:	3302      	adds	r3, #2
 80027a6:	2200      	movs	r2, #0
 80027a8:	801a      	strh	r2, [r3, #0]
{
	motor_ = motor;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a3a      	ldr	r2, [r7, #32]
 80027c0:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c6:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027cc:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d2:	61da      	str	r2, [r3, #28]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80027d4:	2300      	movs	r3, #0
 80027d6:	82fb      	strh	r3, [r7, #22]
 80027d8:	8afb      	ldrh	r3, [r7, #22]
 80027da:	f241 726f 	movw	r2, #5999	; 0x176f
 80027de:	4293      	cmp	r3, r2
 80027e0:	d80d      	bhi.n	80027fe <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger+0xde>
		velocity_table_[i] = 0;
 80027e2:	8afb      	ldrh	r3, [r7, #22]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80027ea:	3310      	adds	r3, #16
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80027f6:	8afb      	ldrh	r3, [r7, #22]
 80027f8:	3301      	adds	r3, #1
 80027fa:	82fb      	strh	r3, [r7, #22]
 80027fc:	e7ec      	b.n	80027d8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger+0xb8>
	}
}
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4618      	mov	r0, r3
 8002802:	371c      	adds	r7, #28
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	0000      	movs	r0, r0
	...

08002810 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002810:	b5b0      	push	{r4, r5, r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002828:	ee37 7a27 	vadd.f32	s14, s14, s15
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002834:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002840:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800284c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002858:	ee37 7a27 	vadd.f32	s14, s14, s15
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002864:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002878:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002884:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002890:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 800289c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80028a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80028b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028b8:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80028bc:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4a1f      	ldr	r2, [pc, #124]	; (8002940 <_ZN9LineTrace9calcErrorEv+0x130>)
 80028c4:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fd fe55 	bl	8000578 <__aeabi_f2d>
 80028ce:	a318      	add	r3, pc, #96	; (adr r3, 8002930 <_ZN9LineTrace9calcErrorEv+0x120>)
 80028d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d4:	f7fd fea8 	bl	8000628 <__aeabi_dmul>
 80028d8:	4603      	mov	r3, r0
 80028da:	460c      	mov	r4, r1
 80028dc:	4625      	mov	r5, r4
 80028de:	461c      	mov	r4, r3
 80028e0:	4b18      	ldr	r3, [pc, #96]	; (8002944 <_ZN9LineTrace9calcErrorEv+0x134>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fd fe47 	bl	8000578 <__aeabi_f2d>
 80028ea:	a313      	add	r3, pc, #76	; (adr r3, 8002938 <_ZN9LineTrace9calcErrorEv+0x128>)
 80028ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f0:	f7fd fe9a 	bl	8000628 <__aeabi_dmul>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4620      	mov	r0, r4
 80028fa:	4629      	mov	r1, r5
 80028fc:	f7fd fcde 	bl	80002bc <__adddf3>
 8002900:	4603      	mov	r3, r0
 8002902:	460c      	mov	r4, r1
 8002904:	4618      	mov	r0, r3
 8002906:	4621      	mov	r1, r4
 8002908:	f7fe f986 	bl	8000c18 <__aeabi_d2f>
 800290c:	4603      	mov	r3, r0
 800290e:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4a0d      	ldr	r2, [pc, #52]	; (8002948 <_ZN9LineTrace9calcErrorEv+0x138>)
 8002914:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <_ZN9LineTrace9calcErrorEv+0x134>)
 800291a:	6013      	str	r3, [r2, #0]

	return diff;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	ee07 3a90 	vmov	s15, r3

}
 8002922:	eeb0 0a67 	vmov.f32	s0, s15
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bdb0      	pop	{r4, r5, r7, pc}
 800292c:	f3af 8000 	nop.w
 8002930:	47ae147b 	.word	0x47ae147b
 8002934:	3fb47ae1 	.word	0x3fb47ae1
 8002938:	d70a3d71 	.word	0xd70a3d71
 800293c:	3fed70a3 	.word	0x3fed70a3
 8002940:	2000025c 	.word	0x2000025c
 8002944:	20000280 	.word	0x20000280
 8002948:	20000260 	.word	0x20000260
 800294c:	00000000 	.word	0x00000000

08002950 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 8002950:	b5b0      	push	{r4, r5, r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff ff59 	bl	8002810 <_ZN9LineTrace9calcErrorEv>
 800295e:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002968:	2b00      	cmp	r3, #0
 800296a:	d007      	beq.n	800297c <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 800296c:	4b3c      	ldr	r3, [pc, #240]	; (8002a60 <_ZN9LineTrace8pidTraceEv+0x110>)
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	}

	p = kp_ * diff;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002982:	ed97 7a05 	vldr	s14, [r7, #20]
 8002986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800298a:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002994:	4b33      	ldr	r3, [pc, #204]	; (8002a64 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002996:	edd3 7a00 	vldr	s15, [r3]
 800299a:	edd7 6a05 	vldr	s13, [r7, #20]
 800299e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80029a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029a6:	ee17 0a90 	vmov	r0, s15
 80029aa:	f7fd fde5 	bl	8000578 <__aeabi_f2d>
 80029ae:	a32a      	add	r3, pc, #168	; (adr r3, 8002a58 <_ZN9LineTrace8pidTraceEv+0x108>)
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f7fd ff62 	bl	800087c <__aeabi_ddiv>
 80029b8:	4603      	mov	r3, r0
 80029ba:	460c      	mov	r4, r1
 80029bc:	4618      	mov	r0, r3
 80029be:	4621      	mov	r1, r4
 80029c0:	f7fe f92a 	bl	8000c18 <__aeabi_d2f>
 80029c4:	4603      	mov	r3, r0
 80029c6:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 80029c8:	4b25      	ldr	r3, [pc, #148]	; (8002a60 <_ZN9LineTrace8pidTraceEv+0x110>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fdd3 	bl	8000578 <__aeabi_f2d>
 80029d2:	4604      	mov	r4, r0
 80029d4:	460d      	mov	r5, r1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80029dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80029e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029e4:	ee17 0a90 	vmov	r0, s15
 80029e8:	f7fd fdc6 	bl	8000578 <__aeabi_f2d>
 80029ec:	a31a      	add	r3, pc, #104	; (adr r3, 8002a58 <_ZN9LineTrace8pidTraceEv+0x108>)
 80029ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f2:	f7fd fe19 	bl	8000628 <__aeabi_dmul>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4620      	mov	r0, r4
 80029fc:	4629      	mov	r1, r5
 80029fe:	f7fd fc5d 	bl	80002bc <__adddf3>
 8002a02:	4603      	mov	r3, r0
 8002a04:	460c      	mov	r4, r1
 8002a06:	4618      	mov	r0, r3
 8002a08:	4621      	mov	r1, r4
 8002a0a:	f7fe f905 	bl	8000c18 <__aeabi_d2f>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a12:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002a14:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a18:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a20:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a22:	edd3 7a00 	vldr	s15, [r3]
 8002a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a2a:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002a38:	edd7 0a02 	vldr	s1, [r7, #8]
 8002a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a40:	4610      	mov	r0, r2
 8002a42:	f001 fea5 	bl	8004790 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002a46:	4a07      	ldr	r2, [pc, #28]	; (8002a64 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	6013      	str	r3, [r2, #0]

}
 8002a4c:	bf00      	nop
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bdb0      	pop	{r4, r5, r7, pc}
 8002a54:	f3af 8000 	nop.w
 8002a58:	d2f1a9fc 	.word	0xd2f1a9fc
 8002a5c:	3f50624d 	.word	0x3f50624d
 8002a60:	20000288 	.word	0x20000288
 8002a64:	20000284 	.word	0x20000284

08002a68 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fe fd08 	bl	800148a <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f001 f902 	bl	8003c88 <_ZN8Odometry13clearPotitionEv>
	//logger_->start();

	logging_flag_ = true;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 8002a8c:	bf00      	nop
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fe97 	bl	80037d4 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002ad0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002adc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ae0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002ae4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ae8:	edc7 7a04 	vstr	s15, [r7, #16]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002afc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002b08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b0c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002b10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b14:	edc7 7a03 	vstr	s15, [r7, #12]
	bool flag = false;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	75fb      	strb	r3, [r7, #23]
	mon_ave_l = sensor_edge_val_l;
 8002b1c:	4a17      	ldr	r2, [pc, #92]	; (8002b7c <_ZN9LineTrace11isCrossLineEv+0xc4>)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002b22:	4a17      	ldr	r2, [pc, #92]	; (8002b80 <_ZN9LineTrace11isCrossLineEv+0xc8>)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6013      	str	r3, [r2, #0]

	if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002b28:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b2c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002b84 <_ZN9LineTrace11isCrossLineEv+0xcc>
 8002b30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b38:	d50f      	bpl.n	8002b5a <_ZN9LineTrace11isCrossLineEv+0xa2>
 8002b3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b3e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002b84 <_ZN9LineTrace11isCrossLineEv+0xcc>
 8002b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4a:	d506      	bpl.n	8002b5a <_ZN9LineTrace11isCrossLineEv+0xa2>
		cnt++;
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <_ZN9LineTrace11isCrossLineEv+0xd0>)
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	3301      	adds	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <_ZN9LineTrace11isCrossLineEv+0xd0>)
 8002b56:	801a      	strh	r2, [r3, #0]
 8002b58:	e002      	b.n	8002b60 <_ZN9LineTrace11isCrossLineEv+0xa8>
	}
	else{
		cnt = 0;
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <_ZN9LineTrace11isCrossLineEv+0xd0>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 3){
 8002b60:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <_ZN9LineTrace11isCrossLineEv+0xd0>)
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <_ZN9LineTrace11isCrossLineEv+0xb4>
		flag = true;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	75fb      	strb	r3, [r7, #23]
		//cnt = 0;
	}

	return flag;
 8002b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	371c      	adds	r7, #28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	20000268 	.word	0x20000268
 8002b80:	2000026c 	.word	0x2000026c
 8002b84:	44160000 	.word	0x44160000
 8002b88:	2000028c 	.word	0x2000028c

08002b8c <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(radius < 130) velocity = 1.3;
 8002b98:	edd7 7a00 	vldr	s15, [r7]
 8002b9c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002be0 <_ZN9LineTrace15radius2VelocityEf+0x54>
 8002ba0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba8:	d502      	bpl.n	8002bb0 <_ZN9LineTrace15radius2VelocityEf+0x24>
 8002baa:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <_ZN9LineTrace15radius2VelocityEf+0x58>)
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	e00d      	b.n	8002bcc <_ZN9LineTrace15radius2VelocityEf+0x40>
	else if(radius < 300) velocity = 1.3;
 8002bb0:	edd7 7a00 	vldr	s15, [r7]
 8002bb4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002be8 <_ZN9LineTrace15radius2VelocityEf+0x5c>
 8002bb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc0:	d502      	bpl.n	8002bc8 <_ZN9LineTrace15radius2VelocityEf+0x3c>
 8002bc2:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <_ZN9LineTrace15radius2VelocityEf+0x58>)
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	e001      	b.n	8002bcc <_ZN9LineTrace15radius2VelocityEf+0x40>
	else velocity = 1.3;
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <_ZN9LineTrace15radius2VelocityEf+0x58>)
 8002bca:	60fb      	str	r3, [r7, #12]

	return velocity;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	ee07 3a90 	vmov	s15, r3
}
 8002bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	43020000 	.word	0x43020000
 8002be4:	3fa66666 	.word	0x3fa66666
 8002be8:	43960000 	.word	0x43960000

08002bec <_ZN9LineTrace20createVelocityTabeleEv>:

void LineTrace::createVelocityTabele()
{
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b08b      	sub	sp, #44	; 0x2c
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69d8      	ldr	r0, [r3, #28]
 8002bf8:	4b39      	ldr	r3, [pc, #228]	; (8002ce0 <_ZN9LineTrace20createVelocityTabeleEv+0xf4>)
 8002bfa:	4a3a      	ldr	r2, [pc, #232]	; (8002ce4 <_ZN9LineTrace20createVelocityTabeleEv+0xf8>)
 8002bfc:	493a      	ldr	r1, [pc, #232]	; (8002ce8 <_ZN9LineTrace20createVelocityTabeleEv+0xfc>)
 8002bfe:	f000 fd3e 	bl	800367e <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fcd1 	bl	80035ae <_ZN6Logger23getDistanceArrayPointerEv>
 8002c0c:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fcd9 	bl	80035ca <_ZN6Logger20getThetaArrayPointerEv>
 8002c18:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	837b      	strh	r3, [r7, #26]
 8002c1e:	8b7b      	ldrh	r3, [r7, #26]
 8002c20:	f241 726f 	movw	r2, #5999	; 0x176f
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d84b      	bhi.n	8002cc0 <_ZN9LineTrace20createVelocityTabeleEv+0xd4>
		temp_distance = p_distance[i];
 8002c28:	8b7b      	ldrh	r3, [r7, #26]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4413      	add	r3, r2
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002c34:	8b7b      	ldrh	r3, [r7, #26]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002c40:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c44:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4c:	d101      	bne.n	8002c52 <_ZN9LineTrace20createVelocityTabeleEv+0x66>
 8002c4e:	4b27      	ldr	r3, [pc, #156]	; (8002cec <_ZN9LineTrace20createVelocityTabeleEv+0x100>)
 8002c50:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002c52:	ed97 7a02 	vldr	s14, [r7, #8]
 8002c56:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c5a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c5e:	eeb0 0a66 	vmov.f32	s0, s13
 8002c62:	f7ff fd4d 	bl	8002700 <_ZSt3absf>
 8002c66:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002c6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c6e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002cf0 <_ZN9LineTrace20createVelocityTabeleEv+0x104>
 8002c72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7a:	db01      	blt.n	8002c80 <_ZN9LineTrace20createVelocityTabeleEv+0x94>
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <_ZN9LineTrace20createVelocityTabeleEv+0x108>)
 8002c7e:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8002c80:	8b7c      	ldrh	r4, [r7, #26]
 8002c82:	ed97 0a05 	vldr	s0, [r7, #20]
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff ff80 	bl	8002b8c <_ZN9LineTrace15radius2VelocityEf>
 8002c8c:	eef0 7a40 	vmov.f32	s15, s0
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8002c96:	3310      	adds	r3, #16
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	edc3 7a00 	vstr	s15, [r3]
		//velocity_table_[i] = radius;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8002ca0:	8b7b      	ldrh	r3, [r7, #26]
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	441a      	add	r2, r3
 8002ca8:	8b7b      	ldrh	r3, [r7, #26]
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	331e      	adds	r3, #30
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002cb8:	8b7b      	ldrh	r3, [r7, #26]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	837b      	strh	r3, [r7, #26]
 8002cbe:	e7ae      	b.n	8002c1e <_ZN9LineTrace20createVelocityTabeleEv+0x32>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002cc6:	3340      	adds	r3, #64	; 0x40
 8002cc8:	2200      	movs	r2, #0
 8002cca:	9200      	str	r2, [sp, #0]
 8002ccc:	f241 7270 	movw	r2, #6000	; 0x1770
 8002cd0:	4909      	ldr	r1, [pc, #36]	; (8002cf8 <_ZN9LineTrace20createVelocityTabeleEv+0x10c>)
 8002cd2:	4805      	ldr	r0, [pc, #20]	; (8002ce8 <_ZN9LineTrace20createVelocityTabeleEv+0xfc>)
 8002cd4:	f7fe fc86 	bl	80015e4 <sd_write_array_float>

}
 8002cd8:	bf00      	nop
 8002cda:	3724      	adds	r7, #36	; 0x24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd90      	pop	{r4, r7, pc}
 8002ce0:	080179ec 	.word	0x080179ec
 8002ce4:	080179f8 	.word	0x080179f8
 8002ce8:	08017a08 	.word	0x08017a08
 8002cec:	3727c5ac 	.word	0x3727c5ac
 8002cf0:	459c4000 	.word	0x459c4000
 8002cf4:	459c4000 	.word	0x459c4000
 8002cf8:	08017a14 	.word	0x08017a14

08002cfc <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 8085 	beq.w	8002e1c <_ZN9LineTrace20updateTargetVelocityEv+0x120>

		if(encoder_->getTotalDistance() >= ref_distance_){
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fe fba8 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8002d1c:	eeb0 7a40 	vmov.f32	s14, s0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002d26:	333c      	adds	r3, #60	; 0x3c
 8002d28:	edd3 7a00 	vldr	s15, [r3]
 8002d2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d34:	bfac      	ite	ge
 8002d36:	2301      	movge	r3, #1
 8002d38:	2300      	movlt	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d025      	beq.n	8002d8c <_ZN9LineTrace20updateTargetVelocityEv+0x90>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002d46:	333c      	adds	r3, #60	; 0x3c
 8002d48:	ed93 7a00 	vldr	s14, [r3]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d52:	3302      	adds	r3, #2
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	331e      	adds	r3, #30
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3304      	adds	r3, #4
 8002d60:	edd3 7a00 	vldr	s15, [r3]
 8002d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002d6e:	333c      	adds	r3, #60	; 0x3c
 8002d70:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d7a:	3302      	adds	r3, #2
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d88:	3302      	adds	r3, #2
 8002d8a:	801a      	strh	r2, [r3, #0]
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d92:	3302      	adds	r3, #2
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	f241 726f 	movw	r2, #5999	; 0x176f
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d906      	bls.n	8002dac <_ZN9LineTrace20updateTargetVelocityEv+0xb0>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002da4:	3302      	adds	r3, #2
 8002da6:	f241 726f 	movw	r2, #5999	; 0x176f
 8002daa:	801a      	strh	r2, [r3, #0]


		mon_ref_dis = ref_distance_;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002db2:	333c      	adds	r3, #60	; 0x3c
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1b      	ldr	r2, [pc, #108]	; (8002e24 <_ZN9LineTrace20updateTargetVelocityEv+0x128>)
 8002db8:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe fb54 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8002dc4:	eef0 7a40 	vmov.f32	s15, s0
 8002dc8:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <_ZN9LineTrace20updateTargetVelocityEv+0x12c>)
 8002dca:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	881a      	ldrh	r2, [r3, #0]
 8002dd8:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 8002dda:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002de2:	3302      	adds	r3, #2
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8002dec:	3310      	adds	r3, #16
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	edd3 7a00 	vldr	s15, [r3]
 8002df6:	eeb0 0a67 	vmov.f32	s0, s15
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f8a3 	bl	8002f46 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002e06:	3302      	adds	r3, #2
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8002e10:	3310      	adds	r3, #16
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a05      	ldr	r2, [pc, #20]	; (8002e30 <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 8002e1a:	6013      	str	r3, [r2, #0]

	}
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20000270 	.word	0x20000270
 8002e28:	20000274 	.word	0x20000274
 8002e2c:	20000278 	.word	0x20000278
 8002e30:	2000027c 	.word	0x2000027c

08002e34 <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8002e3c:	f107 0314 	add.w	r3, r7, #20
 8002e40:	2201      	movs	r2, #1
 8002e42:	4912      	ldr	r1, [pc, #72]	; (8002e8c <_ZN9LineTrace4initEv+0x58>)
 8002e44:	4812      	ldr	r0, [pc, #72]	; (8002e90 <_ZN9LineTrace4initEv+0x5c>)
 8002e46:	f7fe fc33 	bl	80016b0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8002e4a:	f107 0310 	add.w	r3, r7, #16
 8002e4e:	2201      	movs	r2, #1
 8002e50:	4910      	ldr	r1, [pc, #64]	; (8002e94 <_ZN9LineTrace4initEv+0x60>)
 8002e52:	480f      	ldr	r0, [pc, #60]	; (8002e90 <_ZN9LineTrace4initEv+0x5c>)
 8002e54:	f7fe fc2c 	bl	80016b0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8002e58:	f107 030c 	add.w	r3, r7, #12
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	490e      	ldr	r1, [pc, #56]	; (8002e98 <_ZN9LineTrace4initEv+0x64>)
 8002e60:	480b      	ldr	r0, [pc, #44]	; (8002e90 <_ZN9LineTrace4initEv+0x5c>)
 8002e62:	f7fe fc25 	bl	80016b0 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8002e66:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e6a:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e6e:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e72:	eeb0 1a66 	vmov.f32	s2, s13
 8002e76:	eef0 0a47 	vmov.f32	s1, s14
 8002e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f80c 	bl	8002e9c <_ZN9LineTrace7setGainEfff>
}
 8002e84:	bf00      	nop
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	08017a24 	.word	0x08017a24
 8002e90:	08017a2c 	.word	0x08017a2c
 8002e94:	08017a34 	.word	0x08017a34
 8002e98:	08017a3c 	.word	0x08017a3c

08002e9c <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	ed87 0a02 	vstr	s0, [r7, #8]
 8002ea8:	edc7 0a01 	vstr	s1, [r7, #4]
 8002eac:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	621a      	str	r2, [r3, #32]
	ki_ = ki;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	629a      	str	r2, [r3, #40]	; 0x28
	kd_ = kd;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
	return kp_;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	ee07 3a90 	vmov	s15, r3
}
 8002ede:	eeb0 0a67 	vmov.f32	s0, s15
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
	return ki_;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	ee07 3a90 	vmov	s15, r3
}
 8002efc:	eeb0 0a67 	vmov.f32	s0, s15
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
	return kd_;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	ee07 3a90 	vmov	s15, r3
}
 8002f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d06b      	beq.n	800304e <_ZN9LineTrace4flipEv+0xea>
		// ---- line following processing -----//
		pidTrace();
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff fcea 	bl	8002950 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();


		if(isTargetDistance(10) == true){
 8002f7c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f9bb 	bl	80032fc <_ZN9LineTrace16isTargetDistanceEf>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00c      	beq.n	8002fa6 <_ZN9LineTrace4flipEv+0x42>
			// ---- Store Logs ------//
			storeLogs();
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f93f 	bl	8003210 <_ZN9LineTrace9storeLogsEv>

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe fa77 	bl	800148a <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fe71 	bl	8003c88 <_ZN8Odometry13clearPotitionEv>
		}

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff fea8 	bl	8002cfc <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff fd83 	bl	8002ab8 <_ZN9LineTrace11isCrossLineEv>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d011      	beq.n	8002fdc <_ZN9LineTrace4flipEv+0x78>
			led_.LR(1, -1);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	330c      	adds	r3, #12
 8002fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff f846 	bl	8002054 <_ZN3LED2LREaa>
			side_sensor_->enableIgnore();
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f001 f975 	bl	80042bc <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe fa82 	bl	80014e0 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}
		else{
		}
		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f001 f985 	bl	80042f0 <_ZN10SideSensor13getIgnoreFlagEv>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00f      	beq.n	800300c <_ZN9LineTrace4flipEv+0xa8>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7fe fa66 	bl	80014c2 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8002ff6:	eeb0 7a40 	vmov.f32	s14, s0
 8002ffa:	eddf 7a17 	vldr	s15, [pc, #92]	; 8003058 <_ZN9LineTrace4flipEv+0xf4>
 8002ffe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003006:	db01      	blt.n	800300c <_ZN9LineTrace4flipEv+0xa8>
 8003008:	2301      	movs	r3, #1
 800300a:	e000      	b.n	800300e <_ZN9LineTrace4flipEv+0xaa>
 800300c:	2300      	movs	r3, #0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00c      	beq.n	800302c <_ZN9LineTrace4flipEv+0xc8>
			side_sensor_->disableIgnore();
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	4618      	mov	r0, r3
 8003018:	f001 f95d 	bl	80042d6 <_ZN10SideSensor13disableIgnoreEv>
			led_.LR(0, -1);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	330c      	adds	r3, #12
 8003020:	f04f 32ff 	mov.w	r2, #4294967295
 8003024:	2100      	movs	r1, #0
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff f814 	bl	8002054 <_ZN3LED2LREaa>
		}

		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff fb0f 	bl	8002654 <_ZN10LineSensor13emergencyStopEv>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <_ZN9LineTrace4flipEv+0xea>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	eddf 0a06 	vldr	s1, [pc, #24]	; 800305c <_ZN9LineTrace4flipEv+0xf8>
 8003044:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800305c <_ZN9LineTrace4flipEv+0xf8>
 8003048:	4618      	mov	r0, r3
 800304a:	f001 fba1 	bl	8004790 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}
	}
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	43480000 	.word	0x43480000
 800305c:	00000000 	.word	0x00000000

08003060 <_ZN9LineTrace5startEv>:
		odometry_->clearPotition();
	}
}

void LineTrace::start()
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	i_reset_flag_ = true;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	velocity_ctrl_->start();
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	4618      	mov	r0, r3
 800307e:	f001 fbe0 	bl	8004842 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	4618      	mov	r0, r3
 8003088:	f001 f908 	bl	800429c <_ZN10SideSensor17resetWhiteLineCntEv>
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	velocity_ctrl_->stop();
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f001 fbdd 	bl	8004868 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	330c      	adds	r3, #12
 80030b2:	2201      	movs	r2, #1
 80030b4:	f04f 31ff 	mov.w	r1, #4294967295
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fe ffcb 	bl	8002054 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80030c4:	3304      	adds	r3, #4
 80030c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d107      	bne.n	80030de <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69d8      	ldr	r0, [r3, #28]
 80030d2:	4b13      	ldr	r3, [pc, #76]	; (8003120 <_ZN9LineTrace4stopEv+0x8c>)
 80030d4:	4a13      	ldr	r2, [pc, #76]	; (8003124 <_ZN9LineTrace4stopEv+0x90>)
 80030d6:	4914      	ldr	r1, [pc, #80]	; (8003128 <_ZN9LineTrace4stopEv+0x94>)
 80030d8:	f000 faae 	bl	8003638 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 80030dc:	e00e      	b.n	80030fc <_ZN9LineTrace4stopEv+0x68>
	}
	else if(mode_selector_ == SECOND_RUNNING){//Secondary run
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80030e4:	3304      	adds	r3, #4
 80030e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d106      	bne.n	80030fc <_ZN9LineTrace4stopEv+0x68>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69d8      	ldr	r0, [r3, #28]
 80030f2:	4b0e      	ldr	r3, [pc, #56]	; (800312c <_ZN9LineTrace4stopEv+0x98>)
 80030f4:	4a0e      	ldr	r2, [pc, #56]	; (8003130 <_ZN9LineTrace4stopEv+0x9c>)
 80030f6:	490c      	ldr	r1, [pc, #48]	; (8003128 <_ZN9LineTrace4stopEv+0x94>)
 80030f8:	f000 fa9e 	bl	8003638 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
	}
	led_.LR(-1, 0);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	330c      	adds	r3, #12
 8003100:	2200      	movs	r2, #0
 8003102:	f04f 31ff 	mov.w	r1, #4294967295
 8003106:	4618      	mov	r0, r3
 8003108:	f7fe ffa4 	bl	8002054 <_ZN3LED2LREaa>

	logger_->resetLogs();
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fad2 	bl	80036ba <_ZN6Logger9resetLogsEv>
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	080179ec 	.word	0x080179ec
 8003124:	080179f8 	.word	0x080179f8
 8003128:	08017a08 	.word	0x08017a08
 800312c:	08017a44 	.word	0x08017a44
 8003130:	08017a50 	.word	0x08017a50

08003134 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8003140:	2300      	movs	r3, #0
 8003142:	737b      	strb	r3, [r7, #13]
	start();
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff ff8b 	bl	8003060 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 800314a:	7b7b      	ldrb	r3, [r7, #13]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d156      	bne.n	80031fe <_ZN9LineTrace7runningEv+0xca>
		switch(stage){
 8003150:	89fb      	ldrh	r3, [r7, #14]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <_ZN9LineTrace7runningEv+0x28>
 8003156:	2b0a      	cmp	r3, #10
 8003158:	d02b      	beq.n	80031b2 <_ZN9LineTrace7runningEv+0x7e>
 800315a:	e04f      	b.n	80031fc <_ZN9LineTrace7runningEv+0xc8>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	4618      	mov	r0, r3
 8003162:	f001 f88f 	bl	8004284 <_ZN10SideSensor16getWhiteLineCntREv>
 8003166:	4603      	mov	r3, r0
 8003168:	2b01      	cmp	r3, #1
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d03f      	beq.n	80031f6 <_ZN9LineTrace7runningEv+0xc2>
				loggerStart();
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7ff fc76 	bl	8002a68 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003182:	3304      	adds	r3, #4
 8003184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f875 	bl	800327c <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe f9a2 	bl	80014e0 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				led_.LR(1, -1);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	330c      	adds	r3, #12
 80031a0:	f04f 32ff 	mov.w	r2, #4294967295
 80031a4:	2101      	movs	r1, #1
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe ff54 	bl	8002054 <_ZN3LED2LREaa>
				stage = 10;
 80031ac:	230a      	movs	r3, #10
 80031ae:	81fb      	strh	r3, [r7, #14]
			}

			break;
 80031b0:	e021      	b.n	80031f6 <_ZN9LineTrace7runningEv+0xc2>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f001 f864 	bl	8004284 <_ZN10SideSensor16getWhiteLineCntREv>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b02      	cmp	r3, #2
 80031c0:	bf0c      	ite	eq
 80031c2:	2301      	moveq	r3, #1
 80031c4:	2300      	movne	r3, #0
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d016      	beq.n	80031fa <_ZN9LineTrace7runningEv+0xc6>
				loggerStop();
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7ff fc61 	bl	8002a94 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f864 	bl	80032a0 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80031d8:	2064      	movs	r0, #100	; 0x64
 80031da:	f004 fc63 	bl	8007aa4 <HAL_Delay>

				setTargetVelocity(0);
 80031de:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800320c <_ZN9LineTrace7runningEv+0xd8>
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff feaf 	bl	8002f46 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 80031e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031ec:	f004 fc5a 	bl	8007aa4 <HAL_Delay>

				goal_flag = true;
 80031f0:	2301      	movs	r3, #1
 80031f2:	737b      	strb	r3, [r7, #13]

			}

			break;
 80031f4:	e001      	b.n	80031fa <_ZN9LineTrace7runningEv+0xc6>
			break;
 80031f6:	bf00      	nop
 80031f8:	e7a7      	b.n	800314a <_ZN9LineTrace7runningEv+0x16>
			break;
 80031fa:	bf00      	nop
	while(goal_flag == false){
 80031fc:	e7a5      	b.n	800314a <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff ff48 	bl	8003094 <_ZN9LineTrace4stopEv>
}
 8003204:	bf00      	nop
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	00000000 	.word	0x00000000

08003210 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8003210:	b590      	push	{r4, r7, lr}
 8003212:	ed2d 8b02 	vpush	{d8}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003222:	2b00      	cmp	r3, #0
 8003224:	d021      	beq.n	800326a <_ZN9LineTrace9storeLogsEv+0x5a>
		logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69dc      	ldr	r4, [r3, #28]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe f90d 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003234:	eeb0 8a40 	vmov.f32	s16, s0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fd12 	bl	8003c66 <_ZN8Odometry8getThetaEv>
 8003242:	ec53 2b10 	vmov	r2, r3, d0
 8003246:	4610      	mov	r0, r2
 8003248:	4619      	mov	r1, r3
 800324a:	f7fd fce5 	bl	8000c18 <__aeabi_d2f>
 800324e:	4603      	mov	r3, r0
 8003250:	ee00 3a90 	vmov	s1, r3
 8003254:	eeb0 0a48 	vmov.f32	s0, s16
 8003258:	4620      	mov	r0, r4
 800325a:	f000 f960 	bl	800351e <_ZN6Logger21storeDistanceAndThetaEff>

		mon_store_cnt++;
 800325e:	4b06      	ldr	r3, [pc, #24]	; (8003278 <_ZN9LineTrace9storeLogsEv+0x68>)
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	3301      	adds	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	4b04      	ldr	r3, [pc, #16]	; (8003278 <_ZN9LineTrace9storeLogsEv+0x68>)
 8003268:	801a      	strh	r2, [r3, #0]
	}
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	ecbd 8b02 	vpop	{d8}
 8003274:	bd90      	pop	{r4, r7, pc}
 8003276:	bf00      	nop
 8003278:	20000264 	.word	0x20000264

0800327c <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	4618      	mov	r0, r3
 800328a:	f7fe f90c 	bl	80014a6 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003294:	2201      	movs	r2, #1
 8003296:	701a      	strb	r2, [r3, #0]
}
 8003298:	bf00      	nop
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80032b8:	3302      	adds	r3, #2
 80032ba:	2200      	movs	r2, #0
 80032bc:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80032c4:	333c      	adds	r3, #60	; 0x3c
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80032ea:	3304      	adds	r3, #4
 80032ec:	887a      	ldrh	r2, [r7, #2]
 80032ee:	801a      	strh	r2, [r3, #0]
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003308:	2300      	movs	r3, #0
 800330a:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	4618      	mov	r0, r3
 8003312:	f7fe f89c 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003316:	eeb0 7a40 	vmov.f32	s14, s0
 800331a:	edd7 7a00 	vldr	s15, [r7]
 800331e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003326:	bf94      	ite	ls
 8003328:	2301      	movls	r3, #1
 800332a:	2300      	movhi	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 8003332:	2301      	movs	r3, #1
 8003334:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003336:	7bfb      	ldrb	r3, [r7, #15]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800334e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800335c:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003360:	2200      	movs	r2, #0
 8003362:	801a      	strh	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800336a:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800336e:	2200      	movs	r2, #0
 8003370:	801a      	strh	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003378:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800337c:	2200      	movs	r2, #0
 800337e:	801a      	strh	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4618      	mov	r0, r3
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
	...

08003390 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003398:	2300      	movs	r3, #0
 800339a:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 800339c:	f7fe fa14 	bl	80017c8 <sd_mount>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	bf0c      	ite	eq
 80033a6:	2301      	moveq	r3, #1
 80033a8:	2300      	movne	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d016      	beq.n	80033de <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 80033b0:	f7fd fe76 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80033b4:	2100      	movs	r1, #0
 80033b6:	2000      	movs	r0, #0
 80033b8:	f7fd fe82 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80033bc:	4815      	ldr	r0, [pc, #84]	; (8003414 <_ZN6Logger10sdCardInitEv+0x84>)
 80033be:	f7fd fea9 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80033c2:	2101      	movs	r1, #1
 80033c4:	2000      	movs	r0, #0
 80033c6:	f7fd fe7b 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 80033ca:	4813      	ldr	r0, [pc, #76]	; (8003418 <_ZN6Logger10sdCardInitEv+0x88>)
 80033cc:	f7fd fea2 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 80033d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033d4:	f004 fb66 	bl	8007aa4 <HAL_Delay>

	  ret = true;
 80033d8:	2301      	movs	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
 80033dc:	e015      	b.n	800340a <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 80033de:	f7fd fe5f 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80033e2:	2100      	movs	r1, #0
 80033e4:	2000      	movs	r0, #0
 80033e6:	f7fd fe6b 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80033ea:	480a      	ldr	r0, [pc, #40]	; (8003414 <_ZN6Logger10sdCardInitEv+0x84>)
 80033ec:	f7fd fe92 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80033f0:	2101      	movs	r1, #1
 80033f2:	2000      	movs	r0, #0
 80033f4:	f7fd fe64 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 80033f8:	4808      	ldr	r0, [pc, #32]	; (800341c <_ZN6Logger10sdCardInitEv+0x8c>)
 80033fa:	f7fd fe8b 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 80033fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003402:	f004 fb4f 	bl	8007aa4 <HAL_Delay>

	  ret = false;
 8003406:	2300      	movs	r3, #0
 8003408:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 800340a:	7bfb      	ldrb	r3, [r7, #15]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	08017a60 	.word	0x08017a60
 8003418:	08017a6c 	.word	0x08017a6c
 800341c:	08017a74 	.word	0x08017a74

08003420 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003432:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d029      	beq.n	8003490 <_ZN6Logger8storeLogEf+0x70>
		store_data_float_[log_index_tim_] = data;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003442:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003458:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	3301      	adds	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003468:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 800346c:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003474:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	f241 3287 	movw	r2, #4999	; 0x1387
 800347e:	4293      	cmp	r3, r2
 8003480:	d906      	bls.n	8003490 <_ZN6Logger8storeLogEf+0x70>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003488:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 800348c:	2200      	movs	r2, #0
 800348e:	801a      	strh	r2, [r3, #0]
	}
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80034ae:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d02c      	beq.n	8003512 <_ZN6Logger9storeLog2Ef+0x76>
		store_data_float2_[log_index_tim2_] = data;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80034be:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80034ca:	3308      	adds	r3, #8
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80034da:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	3301      	adds	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80034ea:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80034ee:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80034f6:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	f241 3287 	movw	r2, #4999	; 0x1387
 8003500:	4293      	cmp	r3, r2
 8003502:	d906      	bls.n	8003512 <_ZN6Logger9storeLog2Ef+0x76>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800350a:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800350e:	2200      	movs	r2, #0
 8003510:	801a      	strh	r2, [r3, #0]
	}
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 800351e:	b480      	push	{r7}
 8003520:	b085      	sub	sp, #20
 8003522:	af00      	add	r7, sp, #0
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	ed87 0a02 	vstr	s0, [r7, #8]
 800352a:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003534:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003540:	3310      	adds	r3, #16
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003550:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800356a:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	3301      	adds	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800357a:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800357e:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003586:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003590:	4293      	cmp	r3, r2
 8003592:	d906      	bls.n	80035a2 <_ZN6Logger21storeDistanceAndThetaEff+0x84>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800359a:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800359e:	2200      	movs	r2, #0
 80035a0:	801a      	strh	r2, [r3, #0]
	//}
}
 80035a2:	bf00      	nop
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <_ZN6Logger23getDistanceArrayPointerEv>:

const float *Logger::getDistanceArrayPointer()
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
	return store_distance_;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80035bc:	3340      	adds	r3, #64	; 0x40
}
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
	return store_theta_;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	2300      	movs	r3, #0
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	4613      	mov	r3, r2
 80035f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	68b8      	ldr	r0, [r7, #8]
 8003600:	f7fd fff0 	bl	80015e4 <sd_write_array_float>
}
 8003604:	bf00      	nop
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af02      	add	r7, sp, #8
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800361e:	3320      	adds	r3, #32
 8003620:	2200      	movs	r2, #0
 8003622:	9200      	str	r2, [sp, #0]
 8003624:	f241 3288 	movw	r2, #5000	; 0x1388
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	68b8      	ldr	r0, [r7, #8]
 800362c:	f7fd ffda 	bl	80015e4 <sd_write_array_float>
}
 8003630:	bf00      	nop
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af02      	add	r7, sp, #8
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 800364c:	3340      	adds	r3, #64	; 0x40
 800364e:	2200      	movs	r2, #0
 8003650:	9200      	str	r2, [sp, #0]
 8003652:	f241 7270 	movw	r2, #6000	; 0x1770
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	68b8      	ldr	r0, [r7, #8]
 800365a:	f7fd ffc3 	bl	80015e4 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f503 427a 	add.w	r2, r3, #64000	; 0xfa00
 8003664:	2300      	movs	r3, #0
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	4613      	mov	r3, r2
 800366a:	f241 7270 	movw	r2, #6000	; 0x1770
 800366e:	6839      	ldr	r1, [r7, #0]
 8003670:	68b8      	ldr	r0, [r7, #8]
 8003672:	f7fd ffb7 	bl	80015e4 <sd_write_array_float>
}
 8003676:	bf00      	nop
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	af00      	add	r7, sp, #0
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	607a      	str	r2, [r7, #4]
 800368a:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8003692:	3340      	adds	r3, #64	; 0x40
 8003694:	f241 7270 	movw	r2, #6000	; 0x1770
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	68b8      	ldr	r0, [r7, #8]
 800369c:	f7fe f808 	bl	80016b0 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 80036a6:	f241 7270 	movw	r2, #6000	; 0x1770
 80036aa:	6839      	ldr	r1, [r7, #0]
 80036ac:	68b8      	ldr	r0, [r7, #8]
 80036ae:	f7fd ffff 	bl	80016b0 <sd_read_array_float>
}
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <_ZN6Logger9resetLogsEv>:
	user_fclose();
}
*/

void Logger::resetLogs()
{
 80036ba:	b480      	push	{r7}
 80036bc:	b093      	sub	sp, #76	; 0x4c
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
	for(auto &log : store_data_float_){
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	637b      	str	r3, [r7, #52]	; 0x34
 80036c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c8:	647b      	str	r3, [r7, #68]	; 0x44
 80036ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036cc:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80036d0:	3320      	adds	r3, #32
 80036d2:	633b      	str	r3, [r7, #48]	; 0x30
 80036d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	429a      	cmp	r2, r3
 80036da:	d009      	beq.n	80036f0 <_ZN6Logger9resetLogsEv+0x36>
 80036dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036de:	62fb      	str	r3, [r7, #44]	; 0x2c
		log = 0;
 80036e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float_){
 80036e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ea:	3304      	adds	r3, #4
 80036ec:	647b      	str	r3, [r7, #68]	; 0x44
 80036ee:	e7f1      	b.n	80036d4 <_ZN6Logger9resetLogsEv+0x1a>
	}
	for(auto &log : store_data_float2_){
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80036f6:	3320      	adds	r3, #32
 80036f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fc:	643b      	str	r3, [r7, #64]	; 0x40
 80036fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003700:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8003704:	3320      	adds	r3, #32
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
 8003708:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	429a      	cmp	r2, r3
 800370e:	d009      	beq.n	8003724 <_ZN6Logger9resetLogsEv+0x6a>
 8003710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003712:	623b      	str	r3, [r7, #32]
		log = 0;
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float2_){
 800371c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800371e:	3304      	adds	r3, #4
 8003720:	643b      	str	r3, [r7, #64]	; 0x40
 8003722:	e7f1      	b.n	8003708 <_ZN6Logger9resetLogsEv+0x4e>
	/*
	for(auto &log : store_data_uint16_){
		log = 0;
	}
	*/
	for(auto &log : store_distance_){
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 800372a:	3340      	adds	r3, #64	; 0x40
 800372c:	61fb      	str	r3, [r7, #28]
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8003738:	3340      	adds	r3, #64	; 0x40
 800373a:	61bb      	str	r3, [r7, #24]
 800373c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	429a      	cmp	r2, r3
 8003742:	d009      	beq.n	8003758 <_ZN6Logger9resetLogsEv+0x9e>
 8003744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003746:	617b      	str	r3, [r7, #20]
		log = 0;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance_){
 8003750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003752:	3304      	adds	r3, #4
 8003754:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003756:	e7f1      	b.n	800373c <_ZN6Logger9resetLogsEv+0x82>
	}
	for(auto &log : store_theta_){
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	63bb      	str	r3, [r7, #56]	; 0x38
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800376a:	3340      	adds	r3, #64	; 0x40
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	429a      	cmp	r2, r3
 8003774:	d009      	beq.n	800378a <_ZN6Logger9resetLogsEv+0xd0>
 8003776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003778:	60bb      	str	r3, [r7, #8]
		log = 0;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta_){
 8003782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003784:	3304      	adds	r3, #4
 8003786:	63bb      	str	r3, [r7, #56]	; 0x38
 8003788:	e7f1      	b.n	800376e <_ZN6Logger9resetLogsEv+0xb4>
	}

	log_index_tim_ = 0;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003790:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003794:	2200      	movs	r2, #0
 8003796:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800379e:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80037a2:	2200      	movs	r2, #0
 80037a4:	801a      	strh	r2, [r3, #0]
}
 80037a6:	bf00      	nop
 80037a8:	374c      	adds	r7, #76	; 0x4c
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <_ZN6Logger5startEv>:

void Logger::start()
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80037c0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80037c4:	2201      	movs	r2, #1
 80037c6:	701a      	strb	r2, [r3, #0]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80037e2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80037e6:	2200      	movs	r2, #0
 80037e8:	701a      	strb	r2, [r3, #0]
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	801a      	strh	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	805a      	strh	r2, [r3, #2]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <_ZN5Motor4initEv>:

void Motor::init()
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003820:	2108      	movs	r1, #8
 8003822:	4805      	ldr	r0, [pc, #20]	; (8003838 <_ZN5Motor4initEv+0x20>)
 8003824:	f009 faee 	bl	800ce04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003828:	210c      	movs	r1, #12
 800382a:	4803      	ldr	r0, [pc, #12]	; (8003838 <_ZN5Motor4initEv+0x20>)
 800382c:	f009 faea 	bl	800ce04 <HAL_TIM_PWM_Start>

}
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	2003b81c 	.word	0x2003b81c

0800383c <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f9b3 3000 	ldrsh.w	r3, [r3]
 800384a:	2b00      	cmp	r3, #0
 800384c:	da0d      	bge.n	800386a <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 800384e:	2200      	movs	r2, #0
 8003850:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003854:	481f      	ldr	r0, [pc, #124]	; (80038d4 <_ZN5Motor9motorCtrlEv+0x98>)
 8003856:	f005 fbbb 	bl	8008fd0 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003860:	b29b      	uxth	r3, r3
 8003862:	425b      	negs	r3, r3
 8003864:	b29b      	uxth	r3, r3
 8003866:	81fb      	strh	r3, [r7, #14]
 8003868:	e00a      	b.n	8003880 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 800386a:	2201      	movs	r2, #1
 800386c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003870:	4818      	ldr	r0, [pc, #96]	; (80038d4 <_ZN5Motor9motorCtrlEv+0x98>)
 8003872:	f005 fbad 	bl	8008fd0 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800387c:	b29b      	uxth	r3, r3
 800387e:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003886:	2b00      	cmp	r3, #0
 8003888:	da0d      	bge.n	80038a6 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 800388a:	2201      	movs	r2, #1
 800388c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003890:	4810      	ldr	r0, [pc, #64]	; (80038d4 <_ZN5Motor9motorCtrlEv+0x98>)
 8003892:	f005 fb9d 	bl	8008fd0 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800389c:	b29b      	uxth	r3, r3
 800389e:	425b      	negs	r3, r3
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	81bb      	strh	r3, [r7, #12]
 80038a4:	e00a      	b.n	80038bc <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80038a6:	2200      	movs	r2, #0
 80038a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80038ac:	4809      	ldr	r0, [pc, #36]	; (80038d4 <_ZN5Motor9motorCtrlEv+0x98>)
 80038ae:	f005 fb8f 	bl	8008fd0 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 80038bc:	89fa      	ldrh	r2, [r7, #14]
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <_ZN5Motor9motorCtrlEv+0x9c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 80038c4:	89ba      	ldrh	r2, [r7, #12]
 80038c6:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <_ZN5Motor9motorCtrlEv+0x9c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	641a      	str	r2, [r3, #64]	; 0x40
}
 80038cc:	bf00      	nop
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40020c00 	.word	0x40020c00
 80038d8:	2003b81c 	.word	0x2003b81c

080038dc <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 80038dc:	b590      	push	{r4, r7, lr}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6178      	str	r0, [r7, #20]
 80038e4:	ed87 0b02 	vstr	d0, [r7, #8]
 80038e8:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	4b30      	ldr	r3, [pc, #192]	; (80039b4 <_ZN5Motor8setRatioEdd+0xd8>)
 80038f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038f6:	f7fd f927 	bl	8000b48 <__aeabi_dcmpgt>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <_ZN5Motor8setRatioEdd+0x30>
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	4c2b      	ldr	r4, [pc, #172]	; (80039b4 <_ZN5Motor8setRatioEdd+0xd8>)
 8003906:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800390a:	e00e      	b.n	800392a <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	4b29      	ldr	r3, [pc, #164]	; (80039b8 <_ZN5Motor8setRatioEdd+0xdc>)
 8003912:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003916:	f7fd f8f9 	bl	8000b0c <__aeabi_dcmplt>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d004      	beq.n	800392a <_ZN5Motor8setRatioEdd+0x4e>
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	4c24      	ldr	r4, [pc, #144]	; (80039b8 <_ZN5Motor8setRatioEdd+0xdc>)
 8003926:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	4b21      	ldr	r3, [pc, #132]	; (80039b4 <_ZN5Motor8setRatioEdd+0xd8>)
 8003930:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003934:	f7fd f908 	bl	8000b48 <__aeabi_dcmpgt>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d005      	beq.n	800394a <_ZN5Motor8setRatioEdd+0x6e>
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	4c1c      	ldr	r4, [pc, #112]	; (80039b4 <_ZN5Motor8setRatioEdd+0xd8>)
 8003944:	e9c7 3400 	strd	r3, r4, [r7]
 8003948:	e00e      	b.n	8003968 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	4b1a      	ldr	r3, [pc, #104]	; (80039b8 <_ZN5Motor8setRatioEdd+0xdc>)
 8003950:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003954:	f7fd f8da 	bl	8000b0c <__aeabi_dcmplt>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d004      	beq.n	8003968 <_ZN5Motor8setRatioEdd+0x8c>
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	4c15      	ldr	r4, [pc, #84]	; (80039b8 <_ZN5Motor8setRatioEdd+0xdc>)
 8003964:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	4b13      	ldr	r3, [pc, #76]	; (80039bc <_ZN5Motor8setRatioEdd+0xe0>)
 800396e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003972:	f7fc fe59 	bl	8000628 <__aeabi_dmul>
 8003976:	4603      	mov	r3, r0
 8003978:	460c      	mov	r4, r1
 800397a:	4618      	mov	r0, r3
 800397c:	4621      	mov	r1, r4
 800397e:	f7fd f903 	bl	8000b88 <__aeabi_d2iz>
 8003982:	4603      	mov	r3, r0
 8003984:	b21a      	sxth	r2, r3
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <_ZN5Motor8setRatioEdd+0xe0>)
 8003990:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003994:	f7fc fe48 	bl	8000628 <__aeabi_dmul>
 8003998:	4603      	mov	r3, r0
 800399a:	460c      	mov	r4, r1
 800399c:	4618      	mov	r0, r3
 800399e:	4621      	mov	r1, r4
 80039a0:	f7fd f8f2 	bl	8000b88 <__aeabi_d2iz>
 80039a4:	4603      	mov	r3, r0
 80039a6:	b21a      	sxth	r2, r3
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	805a      	strh	r2, [r3, #2]

}
 80039ac:	bf00      	nop
 80039ae:	371c      	adds	r7, #28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd90      	pop	{r4, r7, pc}
 80039b4:	3ff00000 	.word	0x3ff00000
 80039b8:	bff00000 	.word	0xbff00000
 80039bc:	409c2000 	.word	0x409c2000

080039c0 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 80039c0:	b490      	push	{r4, r7}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	f04f 0400 	mov.w	r4, #0
 80039d8:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	f04f 0300 	mov.w	r3, #0
 80039e2:	f04f 0400 	mov.w	r4, #0
 80039e6:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	f04f 0400 	mov.w	r4, #0
 80039f4:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	f04f 0400 	mov.w	r4, #0
 8003a02:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	f04f 0400 	mov.w	r4, #0
 8003a10:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	609a      	str	r2, [r3, #8]
}
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc90      	pop	{r4, r7}
 8003a30:	4770      	bx	lr
 8003a32:	0000      	movs	r0, r0
 8003a34:	0000      	movs	r0, r0
	...

08003a38 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8003a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a3c:	b086      	sub	sp, #24
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe f886 	bl	8001b58 <_ZN3IMU8getOmegaEv>
 8003a4c:	ee10 3a10 	vmov	r3, s0
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fc fd91 	bl	8000578 <__aeabi_f2d>
 8003a56:	4603      	mov	r3, r0
 8003a58:	460c      	mov	r4, r1
 8003a5a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fd fce4 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 8003a68:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8003a6c:	a376      	add	r3, pc, #472	; (adr r3, 8003c48 <_ZN8Odometry12calcPotitionEv+0x210>)
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a76:	f7fc fdd7 	bl	8000628 <__aeabi_dmul>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	460c      	mov	r4, r1
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f7fc fd74 	bl	8000578 <__aeabi_f2d>
 8003a90:	4682      	mov	sl, r0
 8003a92:	468b      	mov	fp, r1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003aa8:	f7fc fee8 	bl	800087c <__aeabi_ddiv>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4640      	mov	r0, r8
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	f7fc fc02 	bl	80002bc <__adddf3>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	ec43 2b17 	vmov	d7, r2, r3
 8003ac0:	eeb0 0a47 	vmov.f32	s0, s14
 8003ac4:	eef0 0a67 	vmov.f32	s1, s15
 8003ac8:	f00e fce2 	bl	8012490 <cos>
 8003acc:	ec53 2b10 	vmov	r2, r3, d0
 8003ad0:	4650      	mov	r0, sl
 8003ad2:	4659      	mov	r1, fp
 8003ad4:	f7fc fda8 	bl	8000628 <__aeabi_dmul>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4620      	mov	r0, r4
 8003ade:	4629      	mov	r1, r5
 8003ae0:	f7fc fbec 	bl	80002bc <__adddf3>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	460c      	mov	r4, r1
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f7fc fd3f 	bl	8000578 <__aeabi_f2d>
 8003afa:	4682      	mov	sl, r0
 8003afc:	468b      	mov	fp, r1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b12:	f7fc feb3 	bl	800087c <__aeabi_ddiv>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4640      	mov	r0, r8
 8003b1c:	4649      	mov	r1, r9
 8003b1e:	f7fc fbcd 	bl	80002bc <__adddf3>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	ec43 2b17 	vmov	d7, r2, r3
 8003b2a:	eeb0 0a47 	vmov.f32	s0, s14
 8003b2e:	eef0 0a67 	vmov.f32	s1, s15
 8003b32:	f00e fcf1 	bl	8012518 <sin>
 8003b36:	ec53 2b10 	vmov	r2, r3, d0
 8003b3a:	4650      	mov	r0, sl
 8003b3c:	4659      	mov	r1, fp
 8003b3e:	f7fc fd73 	bl	8000628 <__aeabi_dmul>
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4620      	mov	r0, r4
 8003b48:	4629      	mov	r1, r5
 8003b4a:	f7fc fbb7 	bl	80002bc <__adddf3>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	460c      	mov	r4, r1
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8003b64:	461a      	mov	r2, r3
 8003b66:	4623      	mov	r3, r4
 8003b68:	f7fc fba8 	bl	80002bc <__adddf3>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	460c      	mov	r4, r1
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	ed93 7b08 	vldr	d7, [r3, #32]
 8003b82:	eeb0 0a47 	vmov.f32	s0, s14
 8003b86:	eef0 0a67 	vmov.f32	s1, s15
 8003b8a:	f00e fc81 	bl	8012490 <cos>
 8003b8e:	ec51 0b10 	vmov	r0, r1, d0
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	4b28      	ldr	r3, [pc, #160]	; (8003c38 <_ZN8Odometry12calcPotitionEv+0x200>)
 8003b98:	f7fc fd46 	bl	8000628 <__aeabi_dmul>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	f7fc fb8a 	bl	80002bc <__adddf3>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	460c      	mov	r4, r1
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	ed93 7b08 	vldr	d7, [r3, #32]
 8003bbe:	eeb0 0a47 	vmov.f32	s0, s14
 8003bc2:	eef0 0a67 	vmov.f32	s1, s15
 8003bc6:	f00e fca7 	bl	8012518 <sin>
 8003bca:	ec51 0b10 	vmov	r0, r1, d0
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	4b19      	ldr	r3, [pc, #100]	; (8003c38 <_ZN8Odometry12calcPotitionEv+0x200>)
 8003bd4:	f7fc fd28 	bl	8000628 <__aeabi_dmul>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4620      	mov	r0, r4
 8003bde:	4629      	mov	r1, r5
 8003be0:	f7fc fb6c 	bl	80002bc <__adddf3>
 8003be4:	4603      	mov	r3, r0
 8003be6:	460c      	mov	r4, r1
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	4621      	mov	r1, r4
 8003bf8:	f7fd f80e 	bl	8000c18 <__aeabi_d2f>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <_ZN8Odometry12calcPotitionEv+0x204>)
 8003c00:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8003c08:	4618      	mov	r0, r3
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	f7fd f804 	bl	8000c18 <__aeabi_d2f>
 8003c10:	4602      	mov	r2, r0
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <_ZN8Odometry12calcPotitionEv+0x208>)
 8003c14:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	4621      	mov	r1, r4
 8003c20:	f7fc fffa 	bl	8000c18 <__aeabi_d2f>
 8003c24:	4602      	mov	r2, r0
 8003c26:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <_ZN8Odometry12calcPotitionEv+0x20c>)
 8003c28:	601a      	str	r2, [r3, #0]
}
 8003c2a:	bf00      	nop
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c34:	f3af 8000 	nop.w
 8003c38:	405b8000 	.word	0x405b8000
 8003c3c:	20000290 	.word	0x20000290
 8003c40:	20000294 	.word	0x20000294
 8003c44:	20000298 	.word	0x20000298
 8003c48:	d2f1a9fc 	.word	0xd2f1a9fc
 8003c4c:	3f50624d 	.word	0x3f50624d

08003c50 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
	calcPotition();
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff feed 	bl	8003a38 <_ZN8Odometry12calcPotitionEv>
}
 8003c5e:	bf00      	nop
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8003c66:	b490      	push	{r4, r7}
 8003c68:	b082      	sub	sp, #8
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
	return theta_;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8003c74:	ec44 3b17 	vmov	d7, r3, r4
}
 8003c78:	eeb0 0a47 	vmov.f32	s0, s14
 8003c7c:	eef0 0a67 	vmov.f32	s1, s15
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc90      	pop	{r4, r7}
 8003c86:	4770      	bx	lr

08003c88 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8003c88:	b490      	push	{r4, r7}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	f04f 0400 	mov.w	r4, #0
 8003c9a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	f04f 0400 	mov.w	r4, #0
 8003ca8:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	f04f 0400 	mov.w	r4, #0
 8003cb6:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc90      	pop	{r4, r7}
 8003cc2:	4770      	bx	lr

08003cc4 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8003cc4:	b490      	push	{r4, r7}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	f04f 0400 	mov.w	r4, #0
 8003cdc:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	f04f 0300 	mov.w	r3, #0
 8003ce6:	f04f 0400 	mov.w	r4, #0
 8003cea:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	f04f 0400 	mov.w	r4, #0
 8003cf8:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003d02:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003d06:	2200      	movs	r2, #0
 8003d08:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8003d0a:	4a29      	ldr	r2, [pc, #164]	; (8003db0 <_ZN13PathFollowingC1Ev+0xec>)
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	f04f 0400 	mov.w	r4, #0
 8003d14:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8003d18:	4a25      	ldr	r2, [pc, #148]	; (8003db0 <_ZN13PathFollowingC1Ev+0xec>)
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	f04f 0400 	mov.w	r4, #0
 8003d22:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8003d26:	4a22      	ldr	r2, [pc, #136]	; (8003db0 <_ZN13PathFollowingC1Ev+0xec>)
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	f04f 0400 	mov.w	r4, #0
 8003d30:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8003d34:	4a1f      	ldr	r2, [pc, #124]	; (8003db4 <_ZN13PathFollowingC1Ev+0xf0>)
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	f04f 0400 	mov.w	r4, #0
 8003d3e:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8003d42:	4a1c      	ldr	r2, [pc, #112]	; (8003db4 <_ZN13PathFollowingC1Ev+0xf0>)
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	f04f 0400 	mov.w	r4, #0
 8003d4c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8003d50:	4a18      	ldr	r2, [pc, #96]	; (8003db4 <_ZN13PathFollowingC1Ev+0xf0>)
 8003d52:	f04f 0300 	mov.w	r3, #0
 8003d56:	f04f 0400 	mov.w	r4, #0
 8003d5a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8003d5e:	4a15      	ldr	r2, [pc, #84]	; (8003db4 <_ZN13PathFollowingC1Ev+0xf0>)
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	f04f 0400 	mov.w	r4, #0
 8003d68:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8003d6c:	4a11      	ldr	r2, [pc, #68]	; (8003db4 <_ZN13PathFollowingC1Ev+0xf0>)
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	f04f 0400 	mov.w	r4, #0
 8003d76:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8003d7a:	4a0e      	ldr	r2, [pc, #56]	; (8003db4 <_ZN13PathFollowingC1Ev+0xf0>)
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	f04f 0400 	mov.w	r4, #0
 8003d84:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8003d88:	4a0b      	ldr	r2, [pc, #44]	; (8003db8 <_ZN13PathFollowingC1Ev+0xf4>)
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	f04f 0400 	mov.w	r4, #0
 8003d92:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8003d96:	4a08      	ldr	r2, [pc, #32]	; (8003db8 <_ZN13PathFollowingC1Ev+0xf4>)
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	f04f 0400 	mov.w	r4, #0
 8003da0:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4618      	mov	r0, r3
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc90      	pop	{r4, r7}
 8003dae:	4770      	bx	lr
 8003db0:	2003bd20 	.word	0x2003bd20
 8003db4:	2003bcb0 	.word	0x2003bcb0
 8003db8:	2003bd10 	.word	0x2003bd10

08003dbc <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8003dc4:	f001 fce6 	bl	8005794 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8003dc8:	f107 0318 	add.w	r3, r7, #24
 8003dcc:	2201      	movs	r2, #1
 8003dce:	4915      	ldr	r1, [pc, #84]	; (8003e24 <_ZN13PathFollowing4initEv+0x68>)
 8003dd0:	4815      	ldr	r0, [pc, #84]	; (8003e28 <_ZN13PathFollowing4initEv+0x6c>)
 8003dd2:	f7fd fcb3 	bl	800173c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8003dd6:	f107 0310 	add.w	r3, r7, #16
 8003dda:	2201      	movs	r2, #1
 8003ddc:	4913      	ldr	r1, [pc, #76]	; (8003e2c <_ZN13PathFollowing4initEv+0x70>)
 8003dde:	4812      	ldr	r0, [pc, #72]	; (8003e28 <_ZN13PathFollowing4initEv+0x6c>)
 8003de0:	f7fd fcac 	bl	800173c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8003de4:	f107 0308 	add.w	r3, r7, #8
 8003de8:	2201      	movs	r2, #1
 8003dea:	4911      	ldr	r1, [pc, #68]	; (8003e30 <_ZN13PathFollowing4initEv+0x74>)
 8003dec:	480e      	ldr	r0, [pc, #56]	; (8003e28 <_ZN13PathFollowing4initEv+0x6c>)
 8003dee:	f7fd fca5 	bl	800173c <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8003df2:	ed97 7b06 	vldr	d7, [r7, #24]
 8003df6:	ed97 6b04 	vldr	d6, [r7, #16]
 8003dfa:	ed97 5b02 	vldr	d5, [r7, #8]
 8003dfe:	eeb0 2a45 	vmov.f32	s4, s10
 8003e02:	eef0 2a65 	vmov.f32	s5, s11
 8003e06:	eeb0 1a46 	vmov.f32	s2, s12
 8003e0a:	eef0 1a66 	vmov.f32	s3, s13
 8003e0e:	eeb0 0a47 	vmov.f32	s0, s14
 8003e12:	eef0 0a67 	vmov.f32	s1, s15
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f80c 	bl	8003e34 <_ZN13PathFollowing7setGainEddd>
}
 8003e1c:	bf00      	nop
 8003e1e:	3720      	adds	r7, #32
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	08017a7c 	.word	0x08017a7c
 8003e28:	08017a84 	.word	0x08017a84
 8003e2c:	08017a8c 	.word	0x08017a8c
 8003e30:	08017a94 	.word	0x08017a94

08003e34 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8003e34:	b490      	push	{r4, r7}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	61f8      	str	r0, [r7, #28]
 8003e3c:	ed87 0b04 	vstr	d0, [r7, #16]
 8003e40:	ed87 1b02 	vstr	d1, [r7, #8]
 8003e44:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8003e48:	4a09      	ldr	r2, [pc, #36]	; (8003e70 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003e4a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003e4e:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8003e52:	4a07      	ldr	r2, [pc, #28]	; (8003e70 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003e54:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003e58:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8003e5c:	4a04      	ldr	r2, [pc, #16]	; (8003e70 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003e5e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003e62:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8003e66:	bf00      	nop
 8003e68:	3720      	adds	r7, #32
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bc90      	pop	{r4, r7}
 8003e6e:	4770      	bx	lr
 8003e70:	2003bd20 	.word	0x2003bd20

08003e74 <_ZN13PathFollowing8getKxValEv>:

double PathFollowing::getKxVal()
{
 8003e74:	b490      	push	{r4, r7}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
	return rtParam.kx;
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <_ZN13PathFollowing8getKxValEv+0x24>)
 8003e7e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e82:	ec44 3b17 	vmov	d7, r3, r4
}
 8003e86:	eeb0 0a47 	vmov.f32	s0, s14
 8003e8a:	eef0 0a67 	vmov.f32	s1, s15
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc90      	pop	{r4, r7}
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	2003bd20 	.word	0x2003bd20

08003e9c <_ZN13PathFollowing8getKyValEv>:

double PathFollowing::getKyVal()
{
 8003e9c:	b490      	push	{r4, r7}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
	return rtParam.ky;
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <_ZN13PathFollowing8getKyValEv+0x24>)
 8003ea6:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003eaa:	ec44 3b17 	vmov	d7, r3, r4
}
 8003eae:	eeb0 0a47 	vmov.f32	s0, s14
 8003eb2:	eef0 0a67 	vmov.f32	s1, s15
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc90      	pop	{r4, r7}
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	2003bd20 	.word	0x2003bd20

08003ec4 <_ZN13PathFollowing8getKtValEv>:

double PathFollowing::getKtVal()
{
 8003ec4:	b490      	push	{r4, r7}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	return rtParam.kt;
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <_ZN13PathFollowing8getKtValEv+0x24>)
 8003ece:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003ed2:	ec44 3b17 	vmov	d7, r3, r4
}
 8003ed6:	eeb0 0a47 	vmov.f32	s0, s14
 8003eda:	eef0 0a67 	vmov.f32	s1, s15
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bc90      	pop	{r4, r7}
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	2003bd20 	.word	0x2003bd20

08003eec <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8003ef4:	2088      	movs	r0, #136	; 0x88
 8003ef6:	f7fd ff72 	bl	8001dde <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8003efa:	2080      	movs	r0, #128	; 0x80
 8003efc:	f7fd ff6f 	bl	8001dde <INA260_init>
}
 8003f00:	bf00      	nop
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8003f10:	2188      	movs	r1, #136	; 0x88
 8003f12:	2002      	movs	r0, #2
 8003f14:	f7fd ff00 	bl	8001d18 <INA260_read>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fc fb1a 	bl	8000554 <__aeabi_i2d>
 8003f20:	a30c      	add	r3, pc, #48	; (adr r3, 8003f54 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8003f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f26:	f7fc fb7f 	bl	8000628 <__aeabi_dmul>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	460c      	mov	r4, r1
 8003f2e:	4618      	mov	r0, r3
 8003f30:	4621      	mov	r1, r4
 8003f32:	f7fc fe71 	bl	8000c18 <__aeabi_d2f>
 8003f36:	4602      	mov	r2, r0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	4a03      	ldr	r2, [pc, #12]	; (8003f50 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8003f42:	6013      	str	r3, [r2, #0]
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd90      	pop	{r4, r7, pc}
 8003f4c:	f3af 8000 	nop.w
 8003f50:	2000029c 	.word	0x2000029c
 8003f54:	47ae147b 	.word	0x47ae147b
 8003f58:	3f547ae1 	.word	0x3f547ae1

08003f5c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	ee07 3a90 	vmov	s15, r3

}
 8003f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	0000      	movs	r0, r0
 8003f7c:	0000      	movs	r0, r0
	...

08003f80 <_ZN11PowerSensor12butteryCheckEv>:

bool PowerSensor::butteryCheck()
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fc faf1 	bl	8000578 <__aeabi_f2d>
 8003f96:	a311      	add	r3, pc, #68	; (adr r3, 8003fdc <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8003f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9c:	f7fc fdb6 	bl	8000b0c <__aeabi_dcmplt>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d006      	beq.n	8003fb4 <_ZN11PowerSensor12butteryCheckEv+0x34>
 8003fa6:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	3301      	adds	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003fb0:	801a      	strh	r2, [r3, #0]
 8003fb2:	e002      	b.n	8003fba <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 8003fb4:	4b08      	ldr	r3, [pc, #32]	; (8003fd8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 8003fba:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d004      	beq.n	8003fcc <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 8003fc6:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	200002a0 	.word	0x200002a0
 8003fdc:	9999999a 	.word	0x9999999a
 8003fe0:	401d9999 	.word	0x401d9999

08003fe4 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8003ff0:	2102      	movs	r1, #2
 8003ff2:	4822      	ldr	r0, [pc, #136]	; (800407c <_ZN12RotarySwitch8getValueEv+0x98>)
 8003ff4:	f004 ffd4 	bl	8008fa0 <HAL_GPIO_ReadPin>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	bf0c      	ite	eq
 8003ffe:	2301      	moveq	r3, #1
 8004000:	2300      	movne	r3, #0
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <_ZN12RotarySwitch8getValueEv+0x2c>
 8004008:	89fb      	ldrh	r3, [r7, #14]
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8004010:	2108      	movs	r1, #8
 8004012:	481a      	ldr	r0, [pc, #104]	; (800407c <_ZN12RotarySwitch8getValueEv+0x98>)
 8004014:	f004 ffc4 	bl	8008fa0 <HAL_GPIO_ReadPin>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	bf0c      	ite	eq
 800401e:	2301      	moveq	r3, #1
 8004020:	2300      	movne	r3, #0
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <_ZN12RotarySwitch8getValueEv+0x4c>
 8004028:	89fb      	ldrh	r3, [r7, #14]
 800402a:	f043 0302 	orr.w	r3, r3, #2
 800402e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8004030:	2110      	movs	r1, #16
 8004032:	4812      	ldr	r0, [pc, #72]	; (800407c <_ZN12RotarySwitch8getValueEv+0x98>)
 8004034:	f004 ffb4 	bl	8008fa0 <HAL_GPIO_ReadPin>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	bf0c      	ite	eq
 800403e:	2301      	moveq	r3, #1
 8004040:	2300      	movne	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <_ZN12RotarySwitch8getValueEv+0x6c>
 8004048:	89fb      	ldrh	r3, [r7, #14]
 800404a:	f043 0304 	orr.w	r3, r3, #4
 800404e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8004050:	2180      	movs	r1, #128	; 0x80
 8004052:	480a      	ldr	r0, [pc, #40]	; (800407c <_ZN12RotarySwitch8getValueEv+0x98>)
 8004054:	f004 ffa4 	bl	8008fa0 <HAL_GPIO_ReadPin>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	bf0c      	ite	eq
 800405e:	2301      	moveq	r3, #1
 8004060:	2300      	movne	r3, #0
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <_ZN12RotarySwitch8getValueEv+0x8c>
 8004068:	89fb      	ldrh	r3, [r7, #14]
 800406a:	f043 0308 	orr.w	r3, r3, #8
 800406e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8004070:	89fb      	ldrh	r3, [r7, #14]

}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40020c00 	.word	0x40020c00

08004080 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	801a      	strh	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	805a      	strh	r2, [r3, #2]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	809a      	strh	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	719a      	strb	r2, [r3, #6]
{

}
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4618      	mov	r0, r3
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
	...

080040b0 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	799b      	ldrb	r3, [r3, #6]
 80040bc:	f083 0301 	eor.w	r3, r3, #1
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 80c7 	beq.w	8004256 <_ZN10SideSensor12updateStatusEv+0x1a6>

		if(white_flag1 == false){
 80040c8:	4b65      	ldr	r3, [pc, #404]	; (8004260 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	f083 0301 	eor.w	r3, r3, #1
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d027      	beq.n	8004126 <_ZN10SideSensor12updateStatusEv+0x76>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 80040d6:	2104      	movs	r1, #4
 80040d8:	4862      	ldr	r0, [pc, #392]	; (8004264 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 80040da:	f004 ff61 	bl	8008fa0 <HAL_GPIO_ReadPin>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	bf0c      	ite	eq
 80040e4:	2301      	moveq	r3, #1
 80040e6:	2300      	movne	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d006      	beq.n	80040fc <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 80040ee:	4b5e      	ldr	r3, [pc, #376]	; (8004268 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	3301      	adds	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	4b5c      	ldr	r3, [pc, #368]	; (8004268 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80040f8:	801a      	strh	r2, [r3, #0]
 80040fa:	e002      	b.n	8004102 <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 80040fc:	4b5a      	ldr	r3, [pc, #360]	; (8004268 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80040fe:	2200      	movs	r2, #0
 8004100:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004102:	4b59      	ldr	r3, [pc, #356]	; (8004268 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	2b04      	cmp	r3, #4
 8004108:	d93f      	bls.n	800418a <_ZN10SideSensor12updateStatusEv+0xda>
				status_ |= 0x01;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	f043 0301 	orr.w	r3, r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 8004118:	4b51      	ldr	r3, [pc, #324]	; (8004260 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 800411a:	2201      	movs	r2, #1
 800411c:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 800411e:	4b52      	ldr	r3, [pc, #328]	; (8004268 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004120:	2200      	movs	r2, #0
 8004122:	801a      	strh	r2, [r3, #0]
 8004124:	e031      	b.n	800418a <_ZN10SideSensor12updateStatusEv+0xda>
			}

		}
		else if(white_flag1 == true){
 8004126:	4b4e      	ldr	r3, [pc, #312]	; (8004260 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d02d      	beq.n	800418a <_ZN10SideSensor12updateStatusEv+0xda>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 800412e:	2104      	movs	r1, #4
 8004130:	484c      	ldr	r0, [pc, #304]	; (8004264 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8004132:	f004 ff35 	bl	8008fa0 <HAL_GPIO_ReadPin>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	bf14      	ite	ne
 800413c:	2301      	movne	r3, #1
 800413e:	2300      	moveq	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d006      	beq.n	8004154 <_ZN10SideSensor12updateStatusEv+0xa4>
				cnt_r++;
 8004146:	4b48      	ldr	r3, [pc, #288]	; (8004268 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	3301      	adds	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	4b46      	ldr	r3, [pc, #280]	; (8004268 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004150:	801a      	strh	r2, [r3, #0]
 8004152:	e002      	b.n	800415a <_ZN10SideSensor12updateStatusEv+0xaa>
			}
			else{
				cnt_r = 0;
 8004154:	4b44      	ldr	r3, [pc, #272]	; (8004268 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004156:	2200      	movs	r2, #0
 8004158:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 800415a:	4b43      	ldr	r3, [pc, #268]	; (8004268 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	2b04      	cmp	r3, #4
 8004160:	d913      	bls.n	800418a <_ZN10SideSensor12updateStatusEv+0xda>
				status_ ^= 0x01;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	f083 0301 	eor.w	r3, r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 8004170:	4b3b      	ldr	r3, [pc, #236]	; (8004260 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004172:	2200      	movs	r2, #0
 8004174:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	889b      	ldrh	r3, [r3, #4]
 800417a:	3301      	adds	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	889a      	ldrh	r2, [r3, #4]
 8004186:	4b39      	ldr	r3, [pc, #228]	; (800426c <_ZN10SideSensor12updateStatusEv+0x1bc>)
 8004188:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 800418a:	4b39      	ldr	r3, [pc, #228]	; (8004270 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	f083 0301 	eor.w	r3, r3, #1
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d027      	beq.n	80041e8 <_ZN10SideSensor12updateStatusEv+0x138>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8004198:	f44f 7180 	mov.w	r1, #256	; 0x100
 800419c:	4835      	ldr	r0, [pc, #212]	; (8004274 <_ZN10SideSensor12updateStatusEv+0x1c4>)
 800419e:	f004 feff 	bl	8008fa0 <HAL_GPIO_ReadPin>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bf0c      	ite	eq
 80041a8:	2301      	moveq	r3, #1
 80041aa:	2300      	movne	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d006      	beq.n	80041c0 <_ZN10SideSensor12updateStatusEv+0x110>
				cnt_l++;
 80041b2:	4b31      	ldr	r3, [pc, #196]	; (8004278 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	3301      	adds	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	4b2f      	ldr	r3, [pc, #188]	; (8004278 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80041bc:	801a      	strh	r2, [r3, #0]
 80041be:	e002      	b.n	80041c6 <_ZN10SideSensor12updateStatusEv+0x116>
			}
			else{
				cnt_l = 0;
 80041c0:	4b2d      	ldr	r3, [pc, #180]	; (8004278 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 80041c6:	4b2c      	ldr	r3, [pc, #176]	; (8004278 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d90c      	bls.n	80041e8 <_ZN10SideSensor12updateStatusEv+0x138>
				status_ |= 0x02;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	f043 0302 	orr.w	r3, r3, #2
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 80041dc:	4b24      	ldr	r3, [pc, #144]	; (8004270 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 80041de:	2201      	movs	r2, #1
 80041e0:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 80041e2:	4b25      	ldr	r3, [pc, #148]	; (8004278 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 80041e8:	4b21      	ldr	r3, [pc, #132]	; (8004270 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d02e      	beq.n	800424e <_ZN10SideSensor12updateStatusEv+0x19e>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 80041f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041f4:	481f      	ldr	r0, [pc, #124]	; (8004274 <_ZN10SideSensor12updateStatusEv+0x1c4>)
 80041f6:	f004 fed3 	bl	8008fa0 <HAL_GPIO_ReadPin>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf14      	ite	ne
 8004200:	2301      	movne	r3, #1
 8004202:	2300      	moveq	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d006      	beq.n	8004218 <_ZN10SideSensor12updateStatusEv+0x168>
				cnt_l++;
 800420a:	4b1b      	ldr	r3, [pc, #108]	; (8004278 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	3301      	adds	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	4b19      	ldr	r3, [pc, #100]	; (8004278 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004214:	801a      	strh	r2, [r3, #0]
 8004216:	e002      	b.n	800421e <_ZN10SideSensor12updateStatusEv+0x16e>
			}
			else{
				cnt_l = 0;
 8004218:	4b17      	ldr	r3, [pc, #92]	; (8004278 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800421a:	2200      	movs	r2, #0
 800421c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800421e:	4b16      	ldr	r3, [pc, #88]	; (8004278 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	2b04      	cmp	r3, #4
 8004224:	d913      	bls.n	800424e <_ZN10SideSensor12updateStatusEv+0x19e>
				status_ ^= 0x02;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	f083 0302 	eor.w	r3, r3, #2
 800422e:	b29a      	uxth	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 8004234:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004236:	2200      	movs	r2, #0
 8004238:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	885b      	ldrh	r3, [r3, #2]
 800423e:	3301      	adds	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	885a      	ldrh	r2, [r3, #2]
 800424a:	4b0c      	ldr	r3, [pc, #48]	; (800427c <_ZN10SideSensor12updateStatusEv+0x1cc>)
 800424c:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	881a      	ldrh	r2, [r3, #0]
 8004252:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 8004254:	801a      	strh	r2, [r3, #0]
	}

}
 8004256:	bf00      	nop
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	200002a8 	.word	0x200002a8
 8004264:	40021000 	.word	0x40021000
 8004268:	200002ac 	.word	0x200002ac
 800426c:	200002a6 	.word	0x200002a6
 8004270:	200002a9 	.word	0x200002a9
 8004274:	40020c00 	.word	0x40020c00
 8004278:	200002aa 	.word	0x200002aa
 800427c:	200002a4 	.word	0x200002a4
 8004280:	200002a2 	.word	0x200002a2

08004284 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	889b      	ldrh	r3, [r3, #4]
}
 8004290:	4618      	mov	r0, r3
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	809a      	strh	r2, [r3, #4]
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	719a      	strb	r2, [r3, #6]
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	719a      	strb	r2, [r3, #6]
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	799b      	ldrb	r3, [r3, #6]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4a10      	ldr	r2, [pc, #64]	; (8004358 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8004318:	3308      	adds	r3, #8
 800431a:	4611      	mov	r1, r2
 800431c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004320:	4618      	mov	r0, r3
 8004322:	f00f f935 	bl	8013590 <memcpy>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	08017ab8 	.word	0x08017ab8

0800435c <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800436e:	2b00      	cmp	r3, #0
 8004370:	d010      	beq.n	8004394 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	ed97 0a00 	vldr	s0, [r7]
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff f850 	bl	8003420 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 800438a:	eeb0 0a67 	vmov.f32	s0, s15
 800438e:	4610      	mov	r0, r2
 8004390:	f7ff f884 	bl	800349c <_ZN6Logger9storeLog2Ef>
	}

}
 8004394:	bf00      	nop
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a07      	ldr	r2, [pc, #28]	; (80043c8 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 80043aa:	4908      	ldr	r1, [pc, #32]	; (80043cc <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff f919 	bl	80035e4 <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a06      	ldr	r2, [pc, #24]	; (80043d0 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 80043b8:	4904      	ldr	r1, [pc, #16]	; (80043cc <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff f926 	bl	800360c <_ZN6Logger9saveLogs2EPKcS1_>
}
 80043c0:	bf00      	nop
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	08017cac 	.word	0x08017cac
 80043cc:	08017cb8 	.word	0x08017cb8
 80043d0:	08017cc4 	.word	0x08017cc4

080043d4 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 80043d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d046      	beq.n	8004474 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80043f2:	461a      	mov	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3204      	adds	r2, #4
 80043f8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80043fc:	ee07 3a90 	vmov	s15, r3
 8004400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8004414:	3301      	adds	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004424:	4a15      	ldr	r2, [pc, #84]	; (800447c <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 8004426:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800442e:	2bf9      	cmp	r3, #249	; 0xf9
 8004430:	d903      	bls.n	800443a <_ZN20SystemIdentification10updateMsigEv+0x66>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	22fa      	movs	r2, #250	; 0xfa
 8004436:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685c      	ldr	r4, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004444:	4618      	mov	r0, r3
 8004446:	f7fc f897 	bl	8000578 <__aeabi_f2d>
 800444a:	4605      	mov	r5, r0
 800444c:	460e      	mov	r6, r1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8004454:	eef1 7a67 	vneg.f32	s15, s15
 8004458:	ee17 3a90 	vmov	r3, s15
 800445c:	4618      	mov	r0, r3
 800445e:	f7fc f88b 	bl	8000578 <__aeabi_f2d>
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	ec43 2b11 	vmov	d1, r2, r3
 800446a:	ec46 5b10 	vmov	d0, r5, r6
 800446e:	4620      	mov	r0, r4
 8004470:	f7ff fa34 	bl	80038dc <_ZN5Motor8setRatioEdd>

	}

}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800447c:	200002b0 	.word	0x200002b0

08004480 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff f980 	bl	80037b2 <_ZN6Logger5startEv>
	processing_flag_ = true;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 80044ba:	bf00      	nop
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	0000      	movs	r0, r0
 80044c4:	0000      	movs	r0, r0
	...

080044c8 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
	logger_->stop();
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff f97d 	bl	80037d4 <_ZN6Logger4stopEv>
	processing_flag_ = false;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8004508 <_ZN20SystemIdentification4stopEv+0x40>
 80044f2:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8004508 <_ZN20SystemIdentification4stopEv+0x40>
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff f9f0 	bl	80038dc <_ZN5Motor8setRatioEdd>
}
 80044fc:	bf00      	nop
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	f3af 8000 	nop.w
	...

08004510 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
 800451c:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	609a      	str	r2, [r3, #8]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	60da      	str	r2, [r3, #12]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	611a      	str	r2, [r3, #16]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	615a      	str	r2, [r3, #20]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	619a      	str	r2, [r3, #24]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	61da      	str	r2, [r3, #28]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	621a      	str	r2, [r3, #32]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	625a      	str	r2, [r3, #36]	; 0x24
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	639a      	str	r2, [r3, #56]	; 0x38

}
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
	...

080045a8 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 80045a8:	b590      	push	{r4, r7, lr}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b4:	f107 020c 	add.w	r2, r7, #12
 80045b8:	f107 0110 	add.w	r1, r7, #16
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fc ff23 	bl	8001408 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 80045c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80045c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80045ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045ce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80045d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045d6:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 80045da:	6978      	ldr	r0, [r7, #20]
 80045dc:	f7fb ffcc 	bl	8000578 <__aeabi_f2d>
 80045e0:	a30b      	add	r3, pc, #44	; (adr r3, 8004610 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	f7fc f81f 	bl	8000628 <__aeabi_dmul>
 80045ea:	4603      	mov	r3, r0
 80045ec:	460c      	mov	r4, r1
 80045ee:	4618      	mov	r0, r3
 80045f0:	4621      	mov	r1, r4
 80045f2:	f7fc fb11 	bl	8000c18 <__aeabi_d2f>
 80045f6:	4602      	mov	r2, r0
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	ee07 3a90 	vmov	s15, r3
}
 8004604:	eeb0 0a67 	vmov.f32	s0, s15
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	bd90      	pop	{r4, r7, pc}
 800460e:	bf00      	nop
 8004610:	1ab1d998 	.word	0x1ab1d998
 8004614:	3f7830b5 	.word	0x3f7830b5

08004618 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8004618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	ed93 7a00 	vldr	s14, [r3]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	edd3 7a02 	vldr	s15, [r3, #8]
 800462c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004630:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800463a:	2b00      	cmp	r3, #0
 800463c:	d007      	beq.n	800464e <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 800463e:	4b48      	ldr	r3, [pc, #288]	; (8004760 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	edd3 7a04 	vldr	s15, [r3, #16]
 8004654:	ed97 7a05 	vldr	s14, [r7, #20]
 8004658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465c:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8004660:	4b3f      	ldr	r3, [pc, #252]	; (8004760 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f7fb ff87 	bl	8000578 <__aeabi_f2d>
 800466a:	4604      	mov	r4, r0
 800466c:	460d      	mov	r5, r1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	ed93 7a06 	vldr	s14, [r3, #24]
 8004674:	edd7 7a05 	vldr	s15, [r7, #20]
 8004678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467c:	ee17 0a90 	vmov	r0, s15
 8004680:	f7fb ff7a 	bl	8000578 <__aeabi_f2d>
 8004684:	a334      	add	r3, pc, #208	; (adr r3, 8004758 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8004686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468a:	f7fb ffcd 	bl	8000628 <__aeabi_dmul>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	4620      	mov	r0, r4
 8004694:	4629      	mov	r1, r5
 8004696:	f7fb fe11 	bl	80002bc <__adddf3>
 800469a:	4603      	mov	r3, r0
 800469c:	460c      	mov	r4, r1
 800469e:	4618      	mov	r0, r3
 80046a0:	4621      	mov	r1, r4
 80046a2:	f7fc fab9 	bl	8000c18 <__aeabi_d2f>
 80046a6:	4602      	mov	r2, r0
 80046a8:	4b2d      	ldr	r3, [pc, #180]	; (8004760 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80046aa:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	ed93 7a05 	vldr	s14, [r3, #20]
 80046b2:	4b2c      	ldr	r3, [pc, #176]	; (8004764 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 80046b4:	edd3 7a00 	vldr	s15, [r3]
 80046b8:	edd7 6a05 	vldr	s13, [r7, #20]
 80046bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80046c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c4:	ee17 0a90 	vmov	r0, s15
 80046c8:	f7fb ff56 	bl	8000578 <__aeabi_f2d>
 80046cc:	a322      	add	r3, pc, #136	; (adr r3, 8004758 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 80046ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d2:	f7fc f8d3 	bl	800087c <__aeabi_ddiv>
 80046d6:	4603      	mov	r3, r0
 80046d8:	460c      	mov	r4, r1
 80046da:	4618      	mov	r0, r3
 80046dc:	4621      	mov	r1, r4
 80046de:	f7fc fa9b 	bl	8000c18 <__aeabi_d2f>
 80046e2:	4603      	mov	r3, r0
 80046e4:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 80046e6:	ed97 7a04 	vldr	s14, [r7, #16]
 80046ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80046ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046f2:	4b1b      	ldr	r3, [pc, #108]	; (8004760 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80046f4:	edd3 7a00 	vldr	s15, [r3]
 80046f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046fc:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800470a:	edd7 7a02 	vldr	s15, [r7, #8]
 800470e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004712:	ee17 0a90 	vmov	r0, s15
 8004716:	f7fb ff2f 	bl	8000578 <__aeabi_f2d>
 800471a:	4605      	mov	r5, r0
 800471c:	460e      	mov	r6, r1
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004724:	ed97 7a02 	vldr	s14, [r7, #8]
 8004728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800472c:	ee17 0a90 	vmov	r0, s15
 8004730:	f7fb ff22 	bl	8000578 <__aeabi_f2d>
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	ec43 2b11 	vmov	d1, r2, r3
 800473c:	ec46 5b10 	vmov	d0, r5, r6
 8004740:	4620      	mov	r0, r4
 8004742:	f7ff f8cb 	bl	80038dc <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8004746:	4a07      	ldr	r2, [pc, #28]	; (8004764 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	6013      	str	r3, [r2, #0]
}
 800474c:	bf00      	nop
 800474e:	371c      	adds	r7, #28
 8004750:	46bd      	mov	sp, r7
 8004752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004754:	f3af 8000 	nop.w
 8004758:	d2f1a9fc 	.word	0xd2f1a9fc
 800475c:	3f50624d 	.word	0x3f50624d
 8004760:	200002b8 	.word	0x200002b8
 8004764:	200002b4 	.word	0x200002b4

08004768 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	ed87 0a02 	vstr	s0, [r7, #8]
 8004774:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	605a      	str	r2, [r3, #4]
}
 8004784:	bf00      	nop
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	ed87 0a02 	vstr	s0, [r7, #8]
 800479c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80047ac:	bf00      	nop
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80047c4:	edc7 0a01 	vstr	s1, [r7, #4]
 80047c8:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	615a      	str	r2, [r3, #20]
}
 80047de:	bf00      	nop
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b085      	sub	sp, #20
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	60f8      	str	r0, [r7, #12]
 80047f2:	ed87 0a02 	vstr	s0, [r7, #8]
 80047f6:	edc7 0a01 	vstr	s1, [r7, #4]
 80047fa:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	621a      	str	r2, [r3, #32]
}
 8004810:	bf00      	nop
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff febf 	bl	80045a8 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7ff feef 	bl	8004618 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 800483a:	bf00      	nop
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
	...

08004868 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8004898 <_ZN12VelocityCtrl4stopEv+0x30>
 8004880:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8004898 <_ZN12VelocityCtrl4stopEv+0x30>
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff f829 	bl	80038dc <_ZN5Motor8setRatioEdd>

}
 800488a:	bf00      	nop
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	f3af 8000 	nop.w
	...

080048a0 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a1e      	ldr	r2, [pc, #120]	; (8004928 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d10e      	bne.n	80048d0 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 80048b2:	f001 fe69 	bl	8006588 <cppFlip100ns>

		tim7_timer++;
 80048b6:	4b1d      	ldr	r3, [pc, #116]	; (800492c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3301      	adds	r3, #1
 80048bc:	4a1b      	ldr	r2, [pc, #108]	; (800492c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80048be:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 80048c0:	4b1a      	ldr	r3, [pc, #104]	; (800492c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a1a      	ldr	r2, [pc, #104]	; (8004930 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d902      	bls.n	80048d0 <HAL_TIM_PeriodElapsedCallback+0x30>
 80048ca:	4b18      	ldr	r3, [pc, #96]	; (800492c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a17      	ldr	r2, [pc, #92]	; (8004934 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d10e      	bne.n	80048f8 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 80048da:	f001 fe0b 	bl	80064f4 <cppFlip1ms>

		tim6_timer++;
 80048de:	4b16      	ldr	r3, [pc, #88]	; (8004938 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3301      	adds	r3, #1
 80048e4:	4a14      	ldr	r2, [pc, #80]	; (8004938 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80048e6:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 80048e8:	4b13      	ldr	r3, [pc, #76]	; (8004938 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a10      	ldr	r2, [pc, #64]	; (8004930 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d902      	bls.n	80048f8 <HAL_TIM_PeriodElapsedCallback+0x58>
 80048f2:	4b11      	ldr	r3, [pc, #68]	; (8004938 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a0f      	ldr	r2, [pc, #60]	; (800493c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d10e      	bne.n	8004920 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8004902:	f001 fe4b 	bl	800659c <cppFlip10ms>

		tim13_timer++;
 8004906:	4b0e      	ldr	r3, [pc, #56]	; (8004940 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3301      	adds	r3, #1
 800490c:	4a0c      	ldr	r2, [pc, #48]	; (8004940 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800490e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a06      	ldr	r2, [pc, #24]	; (8004930 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d902      	bls.n	8004920 <HAL_TIM_PeriodElapsedCallback+0x80>
 800491a:	4b09      	ldr	r3, [pc, #36]	; (8004940 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
	}

}
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40001400 	.word	0x40001400
 800492c:	2003b9d0 	.word	0x2003b9d0
 8004930:	0001869f 	.word	0x0001869f
 8004934:	40001000 	.word	0x40001000
 8004938:	2003b98c 	.word	0x2003b98c
 800493c:	40001c00 	.word	0x40001c00
 8004940:	2003b9d4 	.word	0x2003b9d4

08004944 <init>:

void init()
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8004948:	2201      	movs	r2, #1
 800494a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800494e:	4808      	ldr	r0, [pc, #32]	; (8004970 <init+0x2c>)
 8004950:	f004 fb3e 	bl	8008fd0 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8004954:	4807      	ldr	r0, [pc, #28]	; (8004974 <init+0x30>)
 8004956:	f008 fa06 	bl	800cd66 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 800495a:	4807      	ldr	r0, [pc, #28]	; (8004978 <init+0x34>)
 800495c:	f008 fa03 	bl	800cd66 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8004960:	4806      	ldr	r0, [pc, #24]	; (800497c <init+0x38>)
 8004962:	f008 fa00 	bl	800cd66 <HAL_TIM_Base_Start_IT>

	cppInit();
 8004966:	f001 fd1d 	bl	80063a4 <cppInit>

	//path_following_initialize();

}
 800496a:	bf00      	nop
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	40021000 	.word	0x40021000
 8004974:	2003bab8 	.word	0x2003bab8
 8004978:	2003bc5c 	.word	0x2003bc5c
 800497c:	2003b9d8 	.word	0x2003b9d8

08004980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004984:	f003 f81c 	bl	80079c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004988:	f000 f82a 	bl	80049e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800498c:	f000 fdbc 	bl	8005508 <MX_GPIO_Init>
  MX_DMA_Init();
 8004990:	f000 fd8a 	bl	80054a8 <MX_DMA_Init>
  MX_I2C2_Init();
 8004994:	f000 f9e8 	bl	8004d68 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8004998:	f000 fa14 	bl	8004dc4 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 800499c:	f000 fa32 	bl	8004e04 <MX_SPI2_Init>
  MX_TIM1_Init();
 80049a0:	f000 fa66 	bl	8004e70 <MX_TIM1_Init>
  MX_TIM4_Init();
 80049a4:	f000 fb70 	bl	8005088 <MX_TIM4_Init>
  MX_TIM8_Init();
 80049a8:	f000 fc3c 	bl	8005224 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80049ac:	f000 fd52 	bl	8005454 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80049b0:	f00a f9ac 	bl	800ed0c <MX_FATFS_Init>
  MX_TIM6_Init();
 80049b4:	f000 fbcc 	bl	8005150 <MX_TIM6_Init>
  MX_I2C1_Init();
 80049b8:	f000 f9a8 	bl	8004d0c <MX_I2C1_Init>
  MX_TIM3_Init();
 80049bc:	f000 fb00 	bl	8004fc0 <MX_TIM3_Init>
  MX_TIM10_Init();
 80049c0:	f000 fc88 	bl	80052d4 <MX_TIM10_Init>
  MX_TIM11_Init();
 80049c4:	f000 fcd4 	bl	8005370 <MX_TIM11_Init>
  MX_ADC2_Init();
 80049c8:	f000 f898 	bl	8004afc <MX_ADC2_Init>
  MX_TIM7_Init();
 80049cc:	f000 fbf6 	bl	80051bc <MX_TIM7_Init>
  MX_TIM13_Init();
 80049d0:	f000 fd1c 	bl	800540c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 80049d4:	f7ff ffb6 	bl	8004944 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 80049d8:	f001 fdfe 	bl	80065d8 <cppLoop>
 80049dc:	e7fc      	b.n	80049d8 <main+0x58>
	...

080049e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b0a4      	sub	sp, #144	; 0x90
 80049e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80049ea:	2234      	movs	r2, #52	; 0x34
 80049ec:	2100      	movs	r1, #0
 80049ee:	4618      	mov	r0, r3
 80049f0:	f00e fdd9 	bl	80135a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	605a      	str	r2, [r3, #4]
 80049fe:	609a      	str	r2, [r3, #8]
 8004a00:	60da      	str	r2, [r3, #12]
 8004a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a04:	f107 030c 	add.w	r3, r7, #12
 8004a08:	223c      	movs	r2, #60	; 0x3c
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f00e fdca 	bl	80135a6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a12:	2300      	movs	r3, #0
 8004a14:	60bb      	str	r3, [r7, #8]
 8004a16:	4b37      	ldr	r3, [pc, #220]	; (8004af4 <SystemClock_Config+0x114>)
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	4a36      	ldr	r2, [pc, #216]	; (8004af4 <SystemClock_Config+0x114>)
 8004a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a20:	6413      	str	r3, [r2, #64]	; 0x40
 8004a22:	4b34      	ldr	r3, [pc, #208]	; (8004af4 <SystemClock_Config+0x114>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	60bb      	str	r3, [r7, #8]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a2e:	2300      	movs	r3, #0
 8004a30:	607b      	str	r3, [r7, #4]
 8004a32:	4b31      	ldr	r3, [pc, #196]	; (8004af8 <SystemClock_Config+0x118>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a30      	ldr	r2, [pc, #192]	; (8004af8 <SystemClock_Config+0x118>)
 8004a38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	4b2e      	ldr	r3, [pc, #184]	; (8004af8 <SystemClock_Config+0x118>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a46:	607b      	str	r3, [r7, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004a4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004a52:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a54:	2302      	movs	r3, #2
 8004a56:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004a58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a5c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004a5e:	2308      	movs	r3, #8
 8004a60:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8004a62:	23b4      	movs	r3, #180	; 0xb4
 8004a64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8004a6e:	2308      	movs	r3, #8
 8004a70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004a74:	2302      	movs	r3, #2
 8004a76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a7a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f005 fec8 	bl	800a814 <HAL_RCC_OscConfig>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8004a8a:	f000 fe7f 	bl	800578c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004a8e:	f005 fa43 	bl	8009f18 <HAL_PWREx_EnableOverDrive>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8004a98:	f000 fe78 	bl	800578c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a9c:	230f      	movs	r3, #15
 8004a9e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004aa8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004aac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ab2:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004ab4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ab8:	2105      	movs	r1, #5
 8004aba:	4618      	mov	r0, r3
 8004abc:	f005 fa7c 	bl	8009fb8 <HAL_RCC_ClockConfig>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <SystemClock_Config+0xea>
  {
    Error_Handler();
 8004ac6:	f000 fe61 	bl	800578c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8004aca:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004ace:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ad8:	f107 030c 	add.w	r3, r7, #12
 8004adc:	4618      	mov	r0, r3
 8004ade:	f005 fc5b 	bl	800a398 <HAL_RCCEx_PeriphCLKConfig>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8004ae8:	f000 fe50 	bl	800578c <Error_Handler>
  }
}
 8004aec:	bf00      	nop
 8004aee:	3790      	adds	r7, #144	; 0x90
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40023800 	.word	0x40023800
 8004af8:	40007000 	.word	0x40007000

08004afc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004b02:	463b      	mov	r3, r7
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	605a      	str	r2, [r3, #4]
 8004b0a:	609a      	str	r2, [r3, #8]
 8004b0c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004b0e:	4b7c      	ldr	r3, [pc, #496]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004b10:	4a7c      	ldr	r2, [pc, #496]	; (8004d04 <MX_ADC2_Init+0x208>)
 8004b12:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004b14:	4b7a      	ldr	r3, [pc, #488]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004b16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004b1a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004b1c:	4b78      	ldr	r3, [pc, #480]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8004b22:	4b77      	ldr	r3, [pc, #476]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004b24:	2201      	movs	r2, #1
 8004b26:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004b28:	4b75      	ldr	r3, [pc, #468]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004b2e:	4b74      	ldr	r3, [pc, #464]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004b36:	4b72      	ldr	r3, [pc, #456]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004b3c:	4b70      	ldr	r3, [pc, #448]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004b3e:	4a72      	ldr	r2, [pc, #456]	; (8004d08 <MX_ADC2_Init+0x20c>)
 8004b40:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004b42:	4b6f      	ldr	r3, [pc, #444]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8004b48:	4b6d      	ldr	r3, [pc, #436]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004b4a:	220e      	movs	r2, #14
 8004b4c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004b4e:	4b6c      	ldr	r3, [pc, #432]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004b56:	4b6a      	ldr	r3, [pc, #424]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004b58:	2201      	movs	r2, #1
 8004b5a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004b5c:	4868      	ldr	r0, [pc, #416]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004b5e:	f002 ffc3 	bl	8007ae8 <HAL_ADC_Init>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004b68:	f000 fe10 	bl	800578c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004b6c:	230a      	movs	r3, #10
 8004b6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004b70:	2301      	movs	r3, #1
 8004b72:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8004b74:	2306      	movs	r3, #6
 8004b76:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b78:	463b      	mov	r3, r7
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4860      	ldr	r0, [pc, #384]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004b7e:	f003 f907 	bl	8007d90 <HAL_ADC_ConfigChannel>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004b88:	f000 fe00 	bl	800578c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8004b8c:	230b      	movs	r3, #11
 8004b8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004b90:	2302      	movs	r3, #2
 8004b92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b94:	463b      	mov	r3, r7
 8004b96:	4619      	mov	r1, r3
 8004b98:	4859      	ldr	r0, [pc, #356]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004b9a:	f003 f8f9 	bl	8007d90 <HAL_ADC_ConfigChannel>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8004ba4:	f000 fdf2 	bl	800578c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004ba8:	230c      	movs	r3, #12
 8004baa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8004bac:	2303      	movs	r3, #3
 8004bae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004bb0:	463b      	mov	r3, r7
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	4852      	ldr	r0, [pc, #328]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004bb6:	f003 f8eb 	bl	8007d90 <HAL_ADC_ConfigChannel>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8004bc0:	f000 fde4 	bl	800578c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004bc4:	230d      	movs	r3, #13
 8004bc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004bc8:	2304      	movs	r3, #4
 8004bca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004bcc:	463b      	mov	r3, r7
 8004bce:	4619      	mov	r1, r3
 8004bd0:	484b      	ldr	r0, [pc, #300]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004bd2:	f003 f8dd 	bl	8007d90 <HAL_ADC_ConfigChannel>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8004bdc:	f000 fdd6 	bl	800578c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004be0:	2300      	movs	r3, #0
 8004be2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8004be4:	2305      	movs	r3, #5
 8004be6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004be8:	463b      	mov	r3, r7
 8004bea:	4619      	mov	r1, r3
 8004bec:	4844      	ldr	r0, [pc, #272]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004bee:	f003 f8cf 	bl	8007d90 <HAL_ADC_ConfigChannel>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8004bf8:	f000 fdc8 	bl	800578c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004c00:	2306      	movs	r3, #6
 8004c02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004c04:	463b      	mov	r3, r7
 8004c06:	4619      	mov	r1, r3
 8004c08:	483d      	ldr	r0, [pc, #244]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004c0a:	f003 f8c1 	bl	8007d90 <HAL_ADC_ConfigChannel>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8004c14:	f000 fdba 	bl	800578c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004c18:	2302      	movs	r3, #2
 8004c1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8004c1c:	2307      	movs	r3, #7
 8004c1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004c20:	463b      	mov	r3, r7
 8004c22:	4619      	mov	r1, r3
 8004c24:	4836      	ldr	r0, [pc, #216]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004c26:	f003 f8b3 	bl	8007d90 <HAL_ADC_ConfigChannel>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8004c30:	f000 fdac 	bl	800578c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004c34:	2303      	movs	r3, #3
 8004c36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8004c38:	2308      	movs	r3, #8
 8004c3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004c3c:	463b      	mov	r3, r7
 8004c3e:	4619      	mov	r1, r3
 8004c40:	482f      	ldr	r0, [pc, #188]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004c42:	f003 f8a5 	bl	8007d90 <HAL_ADC_ConfigChannel>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8004c4c:	f000 fd9e 	bl	800578c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004c50:	2304      	movs	r3, #4
 8004c52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8004c54:	2309      	movs	r3, #9
 8004c56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004c58:	463b      	mov	r3, r7
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	4828      	ldr	r0, [pc, #160]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004c5e:	f003 f897 	bl	8007d90 <HAL_ADC_ConfigChannel>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8004c68:	f000 fd90 	bl	800578c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004c6c:	2305      	movs	r3, #5
 8004c6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8004c70:	230a      	movs	r3, #10
 8004c72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004c74:	463b      	mov	r3, r7
 8004c76:	4619      	mov	r1, r3
 8004c78:	4821      	ldr	r0, [pc, #132]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004c7a:	f003 f889 	bl	8007d90 <HAL_ADC_ConfigChannel>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8004c84:	f000 fd82 	bl	800578c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004c88:	2306      	movs	r3, #6
 8004c8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8004c8c:	230b      	movs	r3, #11
 8004c8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004c90:	463b      	mov	r3, r7
 8004c92:	4619      	mov	r1, r3
 8004c94:	481a      	ldr	r0, [pc, #104]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004c96:	f003 f87b 	bl	8007d90 <HAL_ADC_ConfigChannel>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8004ca0:	f000 fd74 	bl	800578c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004ca4:	2307      	movs	r3, #7
 8004ca6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8004ca8:	230c      	movs	r3, #12
 8004caa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004cac:	463b      	mov	r3, r7
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4813      	ldr	r0, [pc, #76]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004cb2:	f003 f86d 	bl	8007d90 <HAL_ADC_ConfigChannel>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8004cbc:	f000 fd66 	bl	800578c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004cc0:	2308      	movs	r3, #8
 8004cc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8004cc4:	230d      	movs	r3, #13
 8004cc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004cc8:	463b      	mov	r3, r7
 8004cca:	4619      	mov	r1, r3
 8004ccc:	480c      	ldr	r0, [pc, #48]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004cce:	f003 f85f 	bl	8007d90 <HAL_ADC_ConfigChannel>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8004cd8:	f000 fd58 	bl	800578c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004cdc:	2309      	movs	r3, #9
 8004cde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8004ce0:	230e      	movs	r3, #14
 8004ce2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004ce4:	463b      	mov	r3, r7
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4805      	ldr	r0, [pc, #20]	; (8004d00 <MX_ADC2_Init+0x204>)
 8004cea:	f003 f851 	bl	8007d90 <HAL_ADC_ConfigChannel>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8004cf4:	f000 fd4a 	bl	800578c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004cf8:	bf00      	nop
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	2003b85c 	.word	0x2003b85c
 8004d04:	40012100 	.word	0x40012100
 8004d08:	0f000001 	.word	0x0f000001

08004d0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004d10:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <MX_I2C1_Init+0x50>)
 8004d12:	4a13      	ldr	r2, [pc, #76]	; (8004d60 <MX_I2C1_Init+0x54>)
 8004d14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004d16:	4b11      	ldr	r3, [pc, #68]	; (8004d5c <MX_I2C1_Init+0x50>)
 8004d18:	4a12      	ldr	r2, [pc, #72]	; (8004d64 <MX_I2C1_Init+0x58>)
 8004d1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004d1c:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <MX_I2C1_Init+0x50>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004d22:	4b0e      	ldr	r3, [pc, #56]	; (8004d5c <MX_I2C1_Init+0x50>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004d28:	4b0c      	ldr	r3, [pc, #48]	; (8004d5c <MX_I2C1_Init+0x50>)
 8004d2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004d30:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <MX_I2C1_Init+0x50>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004d36:	4b09      	ldr	r3, [pc, #36]	; (8004d5c <MX_I2C1_Init+0x50>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004d3c:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <MX_I2C1_Init+0x50>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8004d42:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <MX_I2C1_Init+0x50>)
 8004d44:	2280      	movs	r2, #128	; 0x80
 8004d46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004d48:	4804      	ldr	r0, [pc, #16]	; (8004d5c <MX_I2C1_Init+0x50>)
 8004d4a:	f004 f95b 	bl	8009004 <HAL_I2C_Init>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004d54:	f000 fd1a 	bl	800578c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004d58:	bf00      	nop
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	2003b8a4 	.word	0x2003b8a4
 8004d60:	40005400 	.word	0x40005400
 8004d64:	000186a0 	.word	0x000186a0

08004d68 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004d6c:	4b12      	ldr	r3, [pc, #72]	; (8004db8 <MX_I2C2_Init+0x50>)
 8004d6e:	4a13      	ldr	r2, [pc, #76]	; (8004dbc <MX_I2C2_Init+0x54>)
 8004d70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004d72:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <MX_I2C2_Init+0x50>)
 8004d74:	4a12      	ldr	r2, [pc, #72]	; (8004dc0 <MX_I2C2_Init+0x58>)
 8004d76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004d78:	4b0f      	ldr	r3, [pc, #60]	; (8004db8 <MX_I2C2_Init+0x50>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004d7e:	4b0e      	ldr	r3, [pc, #56]	; (8004db8 <MX_I2C2_Init+0x50>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004d84:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <MX_I2C2_Init+0x50>)
 8004d86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d8a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004d8c:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <MX_I2C2_Init+0x50>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004d92:	4b09      	ldr	r3, [pc, #36]	; (8004db8 <MX_I2C2_Init+0x50>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004d98:	4b07      	ldr	r3, [pc, #28]	; (8004db8 <MX_I2C2_Init+0x50>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8004d9e:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <MX_I2C2_Init+0x50>)
 8004da0:	2280      	movs	r2, #128	; 0x80
 8004da2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004da4:	4804      	ldr	r0, [pc, #16]	; (8004db8 <MX_I2C2_Init+0x50>)
 8004da6:	f004 f92d 	bl	8009004 <HAL_I2C_Init>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004db0:	f000 fcec 	bl	800578c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004db4:	bf00      	nop
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	2003b938 	.word	0x2003b938
 8004dbc:	40005800 	.word	0x40005800
 8004dc0:	000186a0 	.word	0x000186a0

08004dc4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004dc8:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <MX_SDIO_SD_Init+0x38>)
 8004dca:	4a0d      	ldr	r2, [pc, #52]	; (8004e00 <MX_SDIO_SD_Init+0x3c>)
 8004dcc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8004dce:	4b0b      	ldr	r3, [pc, #44]	; (8004dfc <MX_SDIO_SD_Init+0x38>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004dd4:	4b09      	ldr	r3, [pc, #36]	; (8004dfc <MX_SDIO_SD_Init+0x38>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004dda:	4b08      	ldr	r3, [pc, #32]	; (8004dfc <MX_SDIO_SD_Init+0x38>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004de0:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <MX_SDIO_SD_Init+0x38>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004de6:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <MX_SDIO_SD_Init+0x38>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8004dec:	4b03      	ldr	r3, [pc, #12]	; (8004dfc <MX_SDIO_SD_Init+0x38>)
 8004dee:	2202      	movs	r2, #2
 8004df0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8004df2:	bf00      	nop
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	2003bb38 	.word	0x2003bb38
 8004e00:	40012c00 	.word	0x40012c00

08004e04 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004e08:	4b17      	ldr	r3, [pc, #92]	; (8004e68 <MX_SPI2_Init+0x64>)
 8004e0a:	4a18      	ldr	r2, [pc, #96]	; (8004e6c <MX_SPI2_Init+0x68>)
 8004e0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004e0e:	4b16      	ldr	r3, [pc, #88]	; (8004e68 <MX_SPI2_Init+0x64>)
 8004e10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004e14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004e16:	4b14      	ldr	r3, [pc, #80]	; (8004e68 <MX_SPI2_Init+0x64>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004e1c:	4b12      	ldr	r3, [pc, #72]	; (8004e68 <MX_SPI2_Init+0x64>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004e22:	4b11      	ldr	r3, [pc, #68]	; (8004e68 <MX_SPI2_Init+0x64>)
 8004e24:	2202      	movs	r2, #2
 8004e26:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004e28:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <MX_SPI2_Init+0x64>)
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004e2e:	4b0e      	ldr	r3, [pc, #56]	; (8004e68 <MX_SPI2_Init+0x64>)
 8004e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e34:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004e36:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <MX_SPI2_Init+0x64>)
 8004e38:	2228      	movs	r2, #40	; 0x28
 8004e3a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004e3c:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <MX_SPI2_Init+0x64>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004e42:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <MX_SPI2_Init+0x64>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e48:	4b07      	ldr	r3, [pc, #28]	; (8004e68 <MX_SPI2_Init+0x64>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004e4e:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <MX_SPI2_Init+0x64>)
 8004e50:	220a      	movs	r2, #10
 8004e52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004e54:	4804      	ldr	r0, [pc, #16]	; (8004e68 <MX_SPI2_Init+0x64>)
 8004e56:	f007 fa07 	bl	800c268 <HAL_SPI_Init>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004e60:	f000 fc94 	bl	800578c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004e64:	bf00      	nop
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	2003b784 	.word	0x2003b784
 8004e6c:	40003800 	.word	0x40003800

08004e70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b09a      	sub	sp, #104	; 0x68
 8004e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004e76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004e7a:	2224      	movs	r2, #36	; 0x24
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f00e fb91 	bl	80135a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e84:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e8e:	f107 0320 	add.w	r3, r7, #32
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	605a      	str	r2, [r3, #4]
 8004e98:	609a      	str	r2, [r3, #8]
 8004e9a:	60da      	str	r2, [r3, #12]
 8004e9c:	611a      	str	r2, [r3, #16]
 8004e9e:	615a      	str	r2, [r3, #20]
 8004ea0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004ea2:	463b      	mov	r3, r7
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f00e fb7c 	bl	80135a6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004eae:	4b42      	ldr	r3, [pc, #264]	; (8004fb8 <MX_TIM1_Init+0x148>)
 8004eb0:	4a42      	ldr	r2, [pc, #264]	; (8004fbc <MX_TIM1_Init+0x14c>)
 8004eb2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004eb4:	4b40      	ldr	r3, [pc, #256]	; (8004fb8 <MX_TIM1_Init+0x148>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004eba:	4b3f      	ldr	r3, [pc, #252]	; (8004fb8 <MX_TIM1_Init+0x148>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004ec0:	4b3d      	ldr	r3, [pc, #244]	; (8004fb8 <MX_TIM1_Init+0x148>)
 8004ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ec6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ec8:	4b3b      	ldr	r3, [pc, #236]	; (8004fb8 <MX_TIM1_Init+0x148>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004ece:	4b3a      	ldr	r3, [pc, #232]	; (8004fb8 <MX_TIM1_Init+0x148>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ed4:	4b38      	ldr	r3, [pc, #224]	; (8004fb8 <MX_TIM1_Init+0x148>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004eda:	4837      	ldr	r0, [pc, #220]	; (8004fb8 <MX_TIM1_Init+0x148>)
 8004edc:	f007 ff67 	bl	800cdae <HAL_TIM_PWM_Init>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004ee6:	f000 fc51 	bl	800578c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004eea:	2303      	movs	r3, #3
 8004eec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8004efa:	2300      	movs	r3, #0
 8004efc:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004efe:	2300      	movs	r3, #0
 8004f00:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004f02:	2301      	movs	r3, #1
 8004f04:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004f06:	2300      	movs	r3, #0
 8004f08:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8004f0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004f12:	4619      	mov	r1, r3
 8004f14:	4828      	ldr	r0, [pc, #160]	; (8004fb8 <MX_TIM1_Init+0x148>)
 8004f16:	f007 ffb3 	bl	800ce80 <HAL_TIM_Encoder_Init>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8004f20:	f000 fc34 	bl	800578c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f24:	2300      	movs	r3, #0
 8004f26:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004f2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004f30:	4619      	mov	r1, r3
 8004f32:	4821      	ldr	r0, [pc, #132]	; (8004fb8 <MX_TIM1_Init+0x148>)
 8004f34:	f008 fcda 	bl	800d8ec <HAL_TIMEx_MasterConfigSynchronization>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8004f3e:	f000 fc25 	bl	800578c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f42:	2360      	movs	r3, #96	; 0x60
 8004f44:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8004f46:	2300      	movs	r3, #0
 8004f48:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f52:	2300      	movs	r3, #0
 8004f54:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004f56:	2300      	movs	r3, #0
 8004f58:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004f5e:	f107 0320 	add.w	r3, r7, #32
 8004f62:	2208      	movs	r2, #8
 8004f64:	4619      	mov	r1, r3
 8004f66:	4814      	ldr	r0, [pc, #80]	; (8004fb8 <MX_TIM1_Init+0x148>)
 8004f68:	f008 f95c 	bl	800d224 <HAL_TIM_PWM_ConfigChannel>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8004f72:	f000 fc0b 	bl	800578c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004f76:	2300      	movs	r3, #0
 8004f78:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004f86:	2300      	movs	r3, #0
 8004f88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004f90:	2300      	movs	r3, #0
 8004f92:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004f94:	463b      	mov	r3, r7
 8004f96:	4619      	mov	r1, r3
 8004f98:	4807      	ldr	r0, [pc, #28]	; (8004fb8 <MX_TIM1_Init+0x148>)
 8004f9a:	f008 fd23 	bl	800d9e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8004fa4:	f000 fbf2 	bl	800578c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004fa8:	4803      	ldr	r0, [pc, #12]	; (8004fb8 <MX_TIM1_Init+0x148>)
 8004faa:	f000 ffdf 	bl	8005f6c <HAL_TIM_MspPostInit>

}
 8004fae:	bf00      	nop
 8004fb0:	3768      	adds	r7, #104	; 0x68
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	2003baf8 	.word	0x2003baf8
 8004fbc:	40010000 	.word	0x40010000

08004fc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08a      	sub	sp, #40	; 0x28
 8004fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fc6:	f107 0320 	add.w	r3, r7, #32
 8004fca:	2200      	movs	r2, #0
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004fd0:	1d3b      	adds	r3, r7, #4
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	605a      	str	r2, [r3, #4]
 8004fd8:	609a      	str	r2, [r3, #8]
 8004fda:	60da      	str	r2, [r3, #12]
 8004fdc:	611a      	str	r2, [r3, #16]
 8004fde:	615a      	str	r2, [r3, #20]
 8004fe0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004fe2:	4b27      	ldr	r3, [pc, #156]	; (8005080 <MX_TIM3_Init+0xc0>)
 8004fe4:	4a27      	ldr	r2, [pc, #156]	; (8005084 <MX_TIM3_Init+0xc4>)
 8004fe6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004fe8:	4b25      	ldr	r3, [pc, #148]	; (8005080 <MX_TIM3_Init+0xc0>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fee:	4b24      	ldr	r3, [pc, #144]	; (8005080 <MX_TIM3_Init+0xc0>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004ff4:	4b22      	ldr	r3, [pc, #136]	; (8005080 <MX_TIM3_Init+0xc0>)
 8004ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ffa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ffc:	4b20      	ldr	r3, [pc, #128]	; (8005080 <MX_TIM3_Init+0xc0>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005002:	4b1f      	ldr	r3, [pc, #124]	; (8005080 <MX_TIM3_Init+0xc0>)
 8005004:	2200      	movs	r2, #0
 8005006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005008:	481d      	ldr	r0, [pc, #116]	; (8005080 <MX_TIM3_Init+0xc0>)
 800500a:	f007 fed0 	bl	800cdae <HAL_TIM_PWM_Init>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005014:	f000 fbba 	bl	800578c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005018:	2300      	movs	r3, #0
 800501a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800501c:	2300      	movs	r3, #0
 800501e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005020:	f107 0320 	add.w	r3, r7, #32
 8005024:	4619      	mov	r1, r3
 8005026:	4816      	ldr	r0, [pc, #88]	; (8005080 <MX_TIM3_Init+0xc0>)
 8005028:	f008 fc60 	bl	800d8ec <HAL_TIMEx_MasterConfigSynchronization>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005032:	f000 fbab 	bl	800578c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005036:	2360      	movs	r3, #96	; 0x60
 8005038:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800503a:	2300      	movs	r3, #0
 800503c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005042:	2300      	movs	r3, #0
 8005044:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005046:	1d3b      	adds	r3, r7, #4
 8005048:	2200      	movs	r2, #0
 800504a:	4619      	mov	r1, r3
 800504c:	480c      	ldr	r0, [pc, #48]	; (8005080 <MX_TIM3_Init+0xc0>)
 800504e:	f008 f8e9 	bl	800d224 <HAL_TIM_PWM_ConfigChannel>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8005058:	f000 fb98 	bl	800578c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800505c:	1d3b      	adds	r3, r7, #4
 800505e:	2204      	movs	r2, #4
 8005060:	4619      	mov	r1, r3
 8005062:	4807      	ldr	r0, [pc, #28]	; (8005080 <MX_TIM3_Init+0xc0>)
 8005064:	f008 f8de 	bl	800d224 <HAL_TIM_PWM_ConfigChannel>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800506e:	f000 fb8d 	bl	800578c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005072:	4803      	ldr	r0, [pc, #12]	; (8005080 <MX_TIM3_Init+0xc0>)
 8005074:	f000 ff7a 	bl	8005f6c <HAL_TIM_MspPostInit>

}
 8005078:	bf00      	nop
 800507a:	3728      	adds	r7, #40	; 0x28
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	2003b990 	.word	0x2003b990
 8005084:	40000400 	.word	0x40000400

08005088 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b08a      	sub	sp, #40	; 0x28
 800508c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800508e:	f107 0320 	add.w	r3, r7, #32
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005098:	1d3b      	adds	r3, r7, #4
 800509a:	2200      	movs	r2, #0
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	605a      	str	r2, [r3, #4]
 80050a0:	609a      	str	r2, [r3, #8]
 80050a2:	60da      	str	r2, [r3, #12]
 80050a4:	611a      	str	r2, [r3, #16]
 80050a6:	615a      	str	r2, [r3, #20]
 80050a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80050aa:	4b27      	ldr	r3, [pc, #156]	; (8005148 <MX_TIM4_Init+0xc0>)
 80050ac:	4a27      	ldr	r2, [pc, #156]	; (800514c <MX_TIM4_Init+0xc4>)
 80050ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80050b0:	4b25      	ldr	r3, [pc, #148]	; (8005148 <MX_TIM4_Init+0xc0>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050b6:	4b24      	ldr	r3, [pc, #144]	; (8005148 <MX_TIM4_Init+0xc0>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80050bc:	4b22      	ldr	r3, [pc, #136]	; (8005148 <MX_TIM4_Init+0xc0>)
 80050be:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80050c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050c4:	4b20      	ldr	r3, [pc, #128]	; (8005148 <MX_TIM4_Init+0xc0>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050ca:	4b1f      	ldr	r3, [pc, #124]	; (8005148 <MX_TIM4_Init+0xc0>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80050d0:	481d      	ldr	r0, [pc, #116]	; (8005148 <MX_TIM4_Init+0xc0>)
 80050d2:	f007 fe6c 	bl	800cdae <HAL_TIM_PWM_Init>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80050dc:	f000 fb56 	bl	800578c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050e0:	2300      	movs	r3, #0
 80050e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050e4:	2300      	movs	r3, #0
 80050e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80050e8:	f107 0320 	add.w	r3, r7, #32
 80050ec:	4619      	mov	r1, r3
 80050ee:	4816      	ldr	r0, [pc, #88]	; (8005148 <MX_TIM4_Init+0xc0>)
 80050f0:	f008 fbfc 	bl	800d8ec <HAL_TIMEx_MasterConfigSynchronization>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80050fa:	f000 fb47 	bl	800578c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80050fe:	2360      	movs	r3, #96	; 0x60
 8005100:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005102:	2300      	movs	r3, #0
 8005104:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800510e:	1d3b      	adds	r3, r7, #4
 8005110:	2208      	movs	r2, #8
 8005112:	4619      	mov	r1, r3
 8005114:	480c      	ldr	r0, [pc, #48]	; (8005148 <MX_TIM4_Init+0xc0>)
 8005116:	f008 f885 	bl	800d224 <HAL_TIM_PWM_ConfigChannel>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8005120:	f000 fb34 	bl	800578c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005124:	1d3b      	adds	r3, r7, #4
 8005126:	220c      	movs	r2, #12
 8005128:	4619      	mov	r1, r3
 800512a:	4807      	ldr	r0, [pc, #28]	; (8005148 <MX_TIM4_Init+0xc0>)
 800512c:	f008 f87a 	bl	800d224 <HAL_TIM_PWM_ConfigChannel>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005136:	f000 fb29 	bl	800578c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800513a:	4803      	ldr	r0, [pc, #12]	; (8005148 <MX_TIM4_Init+0xc0>)
 800513c:	f000 ff16 	bl	8005f6c <HAL_TIM_MspPostInit>

}
 8005140:	bf00      	nop
 8005142:	3728      	adds	r7, #40	; 0x28
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	2003b81c 	.word	0x2003b81c
 800514c:	40000800 	.word	0x40000800

08005150 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005156:	463b      	mov	r3, r7
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800515e:	4b15      	ldr	r3, [pc, #84]	; (80051b4 <MX_TIM6_Init+0x64>)
 8005160:	4a15      	ldr	r2, [pc, #84]	; (80051b8 <MX_TIM6_Init+0x68>)
 8005162:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8005164:	4b13      	ldr	r3, [pc, #76]	; (80051b4 <MX_TIM6_Init+0x64>)
 8005166:	2259      	movs	r2, #89	; 0x59
 8005168:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800516a:	4b12      	ldr	r3, [pc, #72]	; (80051b4 <MX_TIM6_Init+0x64>)
 800516c:	2200      	movs	r2, #0
 800516e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8005170:	4b10      	ldr	r3, [pc, #64]	; (80051b4 <MX_TIM6_Init+0x64>)
 8005172:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005176:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005178:	4b0e      	ldr	r3, [pc, #56]	; (80051b4 <MX_TIM6_Init+0x64>)
 800517a:	2280      	movs	r2, #128	; 0x80
 800517c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800517e:	480d      	ldr	r0, [pc, #52]	; (80051b4 <MX_TIM6_Init+0x64>)
 8005180:	f007 fdc6 	bl	800cd10 <HAL_TIM_Base_Init>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800518a:	f000 faff 	bl	800578c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800518e:	2300      	movs	r3, #0
 8005190:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005192:	2300      	movs	r3, #0
 8005194:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005196:	463b      	mov	r3, r7
 8005198:	4619      	mov	r1, r3
 800519a:	4806      	ldr	r0, [pc, #24]	; (80051b4 <MX_TIM6_Init+0x64>)
 800519c:	f008 fba6 	bl	800d8ec <HAL_TIMEx_MasterConfigSynchronization>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80051a6:	f000 faf1 	bl	800578c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80051aa:	bf00      	nop
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	2003bab8 	.word	0x2003bab8
 80051b8:	40001000 	.word	0x40001000

080051bc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051c2:	463b      	mov	r3, r7
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80051ca:	4b14      	ldr	r3, [pc, #80]	; (800521c <MX_TIM7_Init+0x60>)
 80051cc:	4a14      	ldr	r2, [pc, #80]	; (8005220 <MX_TIM7_Init+0x64>)
 80051ce:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80051d0:	4b12      	ldr	r3, [pc, #72]	; (800521c <MX_TIM7_Init+0x60>)
 80051d2:	22b3      	movs	r2, #179	; 0xb3
 80051d4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051d6:	4b11      	ldr	r3, [pc, #68]	; (800521c <MX_TIM7_Init+0x60>)
 80051d8:	2200      	movs	r2, #0
 80051da:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80051dc:	4b0f      	ldr	r3, [pc, #60]	; (800521c <MX_TIM7_Init+0x60>)
 80051de:	2231      	movs	r2, #49	; 0x31
 80051e0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80051e2:	4b0e      	ldr	r3, [pc, #56]	; (800521c <MX_TIM7_Init+0x60>)
 80051e4:	2280      	movs	r2, #128	; 0x80
 80051e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80051e8:	480c      	ldr	r0, [pc, #48]	; (800521c <MX_TIM7_Init+0x60>)
 80051ea:	f007 fd91 	bl	800cd10 <HAL_TIM_Base_Init>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80051f4:	f000 faca 	bl	800578c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051f8:	2300      	movs	r3, #0
 80051fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051fc:	2300      	movs	r3, #0
 80051fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005200:	463b      	mov	r3, r7
 8005202:	4619      	mov	r1, r3
 8005204:	4805      	ldr	r0, [pc, #20]	; (800521c <MX_TIM7_Init+0x60>)
 8005206:	f008 fb71 	bl	800d8ec <HAL_TIMEx_MasterConfigSynchronization>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8005210:	f000 fabc 	bl	800578c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005214:	bf00      	nop
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	2003bc5c 	.word	0x2003bc5c
 8005220:	40001400 	.word	0x40001400

08005224 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b08c      	sub	sp, #48	; 0x30
 8005228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800522a:	f107 030c 	add.w	r3, r7, #12
 800522e:	2224      	movs	r2, #36	; 0x24
 8005230:	2100      	movs	r1, #0
 8005232:	4618      	mov	r0, r3
 8005234:	f00e f9b7 	bl	80135a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005238:	1d3b      	adds	r3, r7, #4
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005240:	4b22      	ldr	r3, [pc, #136]	; (80052cc <MX_TIM8_Init+0xa8>)
 8005242:	4a23      	ldr	r2, [pc, #140]	; (80052d0 <MX_TIM8_Init+0xac>)
 8005244:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005246:	4b21      	ldr	r3, [pc, #132]	; (80052cc <MX_TIM8_Init+0xa8>)
 8005248:	2200      	movs	r2, #0
 800524a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800524c:	4b1f      	ldr	r3, [pc, #124]	; (80052cc <MX_TIM8_Init+0xa8>)
 800524e:	2210      	movs	r2, #16
 8005250:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8005252:	4b1e      	ldr	r3, [pc, #120]	; (80052cc <MX_TIM8_Init+0xa8>)
 8005254:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005258:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800525a:	4b1c      	ldr	r3, [pc, #112]	; (80052cc <MX_TIM8_Init+0xa8>)
 800525c:	2200      	movs	r2, #0
 800525e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005260:	4b1a      	ldr	r3, [pc, #104]	; (80052cc <MX_TIM8_Init+0xa8>)
 8005262:	2200      	movs	r2, #0
 8005264:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005266:	4b19      	ldr	r3, [pc, #100]	; (80052cc <MX_TIM8_Init+0xa8>)
 8005268:	2200      	movs	r2, #0
 800526a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800526c:	2303      	movs	r3, #3
 800526e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005270:	2300      	movs	r3, #0
 8005272:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005274:	2301      	movs	r3, #1
 8005276:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005278:	2300      	movs	r3, #0
 800527a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800527c:	2300      	movs	r3, #0
 800527e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005280:	2300      	movs	r3, #0
 8005282:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005284:	2301      	movs	r3, #1
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005288:	2300      	movs	r3, #0
 800528a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800528c:	2300      	movs	r3, #0
 800528e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8005290:	f107 030c 	add.w	r3, r7, #12
 8005294:	4619      	mov	r1, r3
 8005296:	480d      	ldr	r0, [pc, #52]	; (80052cc <MX_TIM8_Init+0xa8>)
 8005298:	f007 fdf2 	bl	800ce80 <HAL_TIM_Encoder_Init>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80052a2:	f000 fa73 	bl	800578c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052a6:	2300      	movs	r3, #0
 80052a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80052ae:	1d3b      	adds	r3, r7, #4
 80052b0:	4619      	mov	r1, r3
 80052b2:	4806      	ldr	r0, [pc, #24]	; (80052cc <MX_TIM8_Init+0xa8>)
 80052b4:	f008 fb1a 	bl	800d8ec <HAL_TIMEx_MasterConfigSynchronization>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80052be:	f000 fa65 	bl	800578c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80052c2:	bf00      	nop
 80052c4:	3730      	adds	r7, #48	; 0x30
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	2003b7dc 	.word	0x2003b7dc
 80052d0:	40010400 	.word	0x40010400

080052d4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80052da:	1d3b      	adds	r3, r7, #4
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	605a      	str	r2, [r3, #4]
 80052e2:	609a      	str	r2, [r3, #8]
 80052e4:	60da      	str	r2, [r3, #12]
 80052e6:	611a      	str	r2, [r3, #16]
 80052e8:	615a      	str	r2, [r3, #20]
 80052ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80052ec:	4b1e      	ldr	r3, [pc, #120]	; (8005368 <MX_TIM10_Init+0x94>)
 80052ee:	4a1f      	ldr	r2, [pc, #124]	; (800536c <MX_TIM10_Init+0x98>)
 80052f0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80052f2:	4b1d      	ldr	r3, [pc, #116]	; (8005368 <MX_TIM10_Init+0x94>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052f8:	4b1b      	ldr	r3, [pc, #108]	; (8005368 <MX_TIM10_Init+0x94>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80052fe:	4b1a      	ldr	r3, [pc, #104]	; (8005368 <MX_TIM10_Init+0x94>)
 8005300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005304:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005306:	4b18      	ldr	r3, [pc, #96]	; (8005368 <MX_TIM10_Init+0x94>)
 8005308:	2200      	movs	r2, #0
 800530a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800530c:	4b16      	ldr	r3, [pc, #88]	; (8005368 <MX_TIM10_Init+0x94>)
 800530e:	2200      	movs	r2, #0
 8005310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005312:	4815      	ldr	r0, [pc, #84]	; (8005368 <MX_TIM10_Init+0x94>)
 8005314:	f007 fcfc 	bl	800cd10 <HAL_TIM_Base_Init>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800531e:	f000 fa35 	bl	800578c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8005322:	4811      	ldr	r0, [pc, #68]	; (8005368 <MX_TIM10_Init+0x94>)
 8005324:	f007 fd43 	bl	800cdae <HAL_TIM_PWM_Init>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800532e:	f000 fa2d 	bl	800578c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005332:	2360      	movs	r3, #96	; 0x60
 8005334:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005336:	2300      	movs	r3, #0
 8005338:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800533e:	2300      	movs	r3, #0
 8005340:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005342:	1d3b      	adds	r3, r7, #4
 8005344:	2200      	movs	r2, #0
 8005346:	4619      	mov	r1, r3
 8005348:	4807      	ldr	r0, [pc, #28]	; (8005368 <MX_TIM10_Init+0x94>)
 800534a:	f007 ff6b 	bl	800d224 <HAL_TIM_PWM_ConfigChannel>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8005354:	f000 fa1a 	bl	800578c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8005358:	4803      	ldr	r0, [pc, #12]	; (8005368 <MX_TIM10_Init+0x94>)
 800535a:	f000 fe07 	bl	8005f6c <HAL_TIM_MspPostInit>

}
 800535e:	bf00      	nop
 8005360:	3720      	adds	r7, #32
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	2003b8f8 	.word	0x2003b8f8
 800536c:	40014400 	.word	0x40014400

08005370 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005376:	1d3b      	adds	r3, r7, #4
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	605a      	str	r2, [r3, #4]
 800537e:	609a      	str	r2, [r3, #8]
 8005380:	60da      	str	r2, [r3, #12]
 8005382:	611a      	str	r2, [r3, #16]
 8005384:	615a      	str	r2, [r3, #20]
 8005386:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8005388:	4b1e      	ldr	r3, [pc, #120]	; (8005404 <MX_TIM11_Init+0x94>)
 800538a:	4a1f      	ldr	r2, [pc, #124]	; (8005408 <MX_TIM11_Init+0x98>)
 800538c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800538e:	4b1d      	ldr	r3, [pc, #116]	; (8005404 <MX_TIM11_Init+0x94>)
 8005390:	2200      	movs	r2, #0
 8005392:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005394:	4b1b      	ldr	r3, [pc, #108]	; (8005404 <MX_TIM11_Init+0x94>)
 8005396:	2200      	movs	r2, #0
 8005398:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800539a:	4b1a      	ldr	r3, [pc, #104]	; (8005404 <MX_TIM11_Init+0x94>)
 800539c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053a0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053a2:	4b18      	ldr	r3, [pc, #96]	; (8005404 <MX_TIM11_Init+0x94>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053a8:	4b16      	ldr	r3, [pc, #88]	; (8005404 <MX_TIM11_Init+0x94>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80053ae:	4815      	ldr	r0, [pc, #84]	; (8005404 <MX_TIM11_Init+0x94>)
 80053b0:	f007 fcae 	bl	800cd10 <HAL_TIM_Base_Init>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80053ba:	f000 f9e7 	bl	800578c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80053be:	4811      	ldr	r0, [pc, #68]	; (8005404 <MX_TIM11_Init+0x94>)
 80053c0:	f007 fcf5 	bl	800cdae <HAL_TIM_PWM_Init>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80053ca:	f000 f9df 	bl	800578c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80053ce:	2360      	movs	r3, #96	; 0x60
 80053d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053d6:	2300      	movs	r3, #0
 80053d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80053da:	2300      	movs	r3, #0
 80053dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80053de:	1d3b      	adds	r3, r7, #4
 80053e0:	2200      	movs	r2, #0
 80053e2:	4619      	mov	r1, r3
 80053e4:	4807      	ldr	r0, [pc, #28]	; (8005404 <MX_TIM11_Init+0x94>)
 80053e6:	f007 ff1d 	bl	800d224 <HAL_TIM_PWM_ConfigChannel>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80053f0:	f000 f9cc 	bl	800578c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80053f4:	4803      	ldr	r0, [pc, #12]	; (8005404 <MX_TIM11_Init+0x94>)
 80053f6:	f000 fdb9 	bl	8005f6c <HAL_TIM_MspPostInit>

}
 80053fa:	bf00      	nop
 80053fc:	3720      	adds	r7, #32
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	2003ba18 	.word	0x2003ba18
 8005408:	40014800 	.word	0x40014800

0800540c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005410:	4b0e      	ldr	r3, [pc, #56]	; (800544c <MX_TIM13_Init+0x40>)
 8005412:	4a0f      	ldr	r2, [pc, #60]	; (8005450 <MX_TIM13_Init+0x44>)
 8005414:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8005416:	4b0d      	ldr	r3, [pc, #52]	; (800544c <MX_TIM13_Init+0x40>)
 8005418:	2259      	movs	r2, #89	; 0x59
 800541a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800541c:	4b0b      	ldr	r3, [pc, #44]	; (800544c <MX_TIM13_Init+0x40>)
 800541e:	2200      	movs	r2, #0
 8005420:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8005422:	4b0a      	ldr	r3, [pc, #40]	; (800544c <MX_TIM13_Init+0x40>)
 8005424:	f242 720f 	movw	r2, #9999	; 0x270f
 8005428:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800542a:	4b08      	ldr	r3, [pc, #32]	; (800544c <MX_TIM13_Init+0x40>)
 800542c:	2200      	movs	r2, #0
 800542e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005430:	4b06      	ldr	r3, [pc, #24]	; (800544c <MX_TIM13_Init+0x40>)
 8005432:	2280      	movs	r2, #128	; 0x80
 8005434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005436:	4805      	ldr	r0, [pc, #20]	; (800544c <MX_TIM13_Init+0x40>)
 8005438:	f007 fc6a 	bl	800cd10 <HAL_TIM_Base_Init>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8005442:	f000 f9a3 	bl	800578c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8005446:	bf00      	nop
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	2003b9d8 	.word	0x2003b9d8
 8005450:	40001c00 	.word	0x40001c00

08005454 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005458:	4b11      	ldr	r3, [pc, #68]	; (80054a0 <MX_USART2_UART_Init+0x4c>)
 800545a:	4a12      	ldr	r2, [pc, #72]	; (80054a4 <MX_USART2_UART_Init+0x50>)
 800545c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800545e:	4b10      	ldr	r3, [pc, #64]	; (80054a0 <MX_USART2_UART_Init+0x4c>)
 8005460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005464:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005466:	4b0e      	ldr	r3, [pc, #56]	; (80054a0 <MX_USART2_UART_Init+0x4c>)
 8005468:	2200      	movs	r2, #0
 800546a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800546c:	4b0c      	ldr	r3, [pc, #48]	; (80054a0 <MX_USART2_UART_Init+0x4c>)
 800546e:	2200      	movs	r2, #0
 8005470:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005472:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <MX_USART2_UART_Init+0x4c>)
 8005474:	2200      	movs	r2, #0
 8005476:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005478:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <MX_USART2_UART_Init+0x4c>)
 800547a:	220c      	movs	r2, #12
 800547c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800547e:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <MX_USART2_UART_Init+0x4c>)
 8005480:	2200      	movs	r2, #0
 8005482:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005484:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <MX_USART2_UART_Init+0x4c>)
 8005486:	2200      	movs	r2, #0
 8005488:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800548a:	4805      	ldr	r0, [pc, #20]	; (80054a0 <MX_USART2_UART_Init+0x4c>)
 800548c:	f008 fb10 	bl	800dab0 <HAL_UART_Init>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005496:	f000 f979 	bl	800578c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800549a:	bf00      	nop
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	2003bbbc 	.word	0x2003bbbc
 80054a4:	40004400 	.word	0x40004400

080054a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80054ae:	2300      	movs	r3, #0
 80054b0:	607b      	str	r3, [r7, #4]
 80054b2:	4b14      	ldr	r3, [pc, #80]	; (8005504 <MX_DMA_Init+0x5c>)
 80054b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b6:	4a13      	ldr	r2, [pc, #76]	; (8005504 <MX_DMA_Init+0x5c>)
 80054b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054bc:	6313      	str	r3, [r2, #48]	; 0x30
 80054be:	4b11      	ldr	r3, [pc, #68]	; (8005504 <MX_DMA_Init+0x5c>)
 80054c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054c6:	607b      	str	r3, [r7, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80054ca:	2200      	movs	r2, #0
 80054cc:	2100      	movs	r1, #0
 80054ce:	203a      	movs	r0, #58	; 0x3a
 80054d0:	f002 ffe9 	bl	80084a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80054d4:	203a      	movs	r0, #58	; 0x3a
 80054d6:	f003 f802 	bl	80084de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80054da:	2200      	movs	r2, #0
 80054dc:	2100      	movs	r1, #0
 80054de:	203b      	movs	r0, #59	; 0x3b
 80054e0:	f002 ffe1 	bl	80084a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80054e4:	203b      	movs	r0, #59	; 0x3b
 80054e6:	f002 fffa 	bl	80084de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80054ea:	2200      	movs	r2, #0
 80054ec:	2100      	movs	r1, #0
 80054ee:	2045      	movs	r0, #69	; 0x45
 80054f0:	f002 ffd9 	bl	80084a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80054f4:	2045      	movs	r0, #69	; 0x45
 80054f6:	f002 fff2 	bl	80084de <HAL_NVIC_EnableIRQ>

}
 80054fa:	bf00      	nop
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	40023800 	.word	0x40023800

08005508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08c      	sub	sp, #48	; 0x30
 800550c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800550e:	f107 031c 	add.w	r3, r7, #28
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	605a      	str	r2, [r3, #4]
 8005518:	609a      	str	r2, [r3, #8]
 800551a:	60da      	str	r2, [r3, #12]
 800551c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800551e:	2300      	movs	r3, #0
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	4b94      	ldr	r3, [pc, #592]	; (8005774 <MX_GPIO_Init+0x26c>)
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	4a93      	ldr	r2, [pc, #588]	; (8005774 <MX_GPIO_Init+0x26c>)
 8005528:	f043 0310 	orr.w	r3, r3, #16
 800552c:	6313      	str	r3, [r2, #48]	; 0x30
 800552e:	4b91      	ldr	r3, [pc, #580]	; (8005774 <MX_GPIO_Init+0x26c>)
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	f003 0310 	and.w	r3, r3, #16
 8005536:	61bb      	str	r3, [r7, #24]
 8005538:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800553a:	2300      	movs	r3, #0
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	4b8d      	ldr	r3, [pc, #564]	; (8005774 <MX_GPIO_Init+0x26c>)
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	4a8c      	ldr	r2, [pc, #560]	; (8005774 <MX_GPIO_Init+0x26c>)
 8005544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005548:	6313      	str	r3, [r2, #48]	; 0x30
 800554a:	4b8a      	ldr	r3, [pc, #552]	; (8005774 <MX_GPIO_Init+0x26c>)
 800554c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005556:	2300      	movs	r3, #0
 8005558:	613b      	str	r3, [r7, #16]
 800555a:	4b86      	ldr	r3, [pc, #536]	; (8005774 <MX_GPIO_Init+0x26c>)
 800555c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555e:	4a85      	ldr	r2, [pc, #532]	; (8005774 <MX_GPIO_Init+0x26c>)
 8005560:	f043 0304 	orr.w	r3, r3, #4
 8005564:	6313      	str	r3, [r2, #48]	; 0x30
 8005566:	4b83      	ldr	r3, [pc, #524]	; (8005774 <MX_GPIO_Init+0x26c>)
 8005568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005572:	2300      	movs	r3, #0
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	4b7f      	ldr	r3, [pc, #508]	; (8005774 <MX_GPIO_Init+0x26c>)
 8005578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557a:	4a7e      	ldr	r2, [pc, #504]	; (8005774 <MX_GPIO_Init+0x26c>)
 800557c:	f043 0301 	orr.w	r3, r3, #1
 8005580:	6313      	str	r3, [r2, #48]	; 0x30
 8005582:	4b7c      	ldr	r3, [pc, #496]	; (8005774 <MX_GPIO_Init+0x26c>)
 8005584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800558e:	2300      	movs	r3, #0
 8005590:	60bb      	str	r3, [r7, #8]
 8005592:	4b78      	ldr	r3, [pc, #480]	; (8005774 <MX_GPIO_Init+0x26c>)
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	4a77      	ldr	r2, [pc, #476]	; (8005774 <MX_GPIO_Init+0x26c>)
 8005598:	f043 0302 	orr.w	r3, r3, #2
 800559c:	6313      	str	r3, [r2, #48]	; 0x30
 800559e:	4b75      	ldr	r3, [pc, #468]	; (8005774 <MX_GPIO_Init+0x26c>)
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	60bb      	str	r3, [r7, #8]
 80055a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80055aa:	2300      	movs	r3, #0
 80055ac:	607b      	str	r3, [r7, #4]
 80055ae:	4b71      	ldr	r3, [pc, #452]	; (8005774 <MX_GPIO_Init+0x26c>)
 80055b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b2:	4a70      	ldr	r2, [pc, #448]	; (8005774 <MX_GPIO_Init+0x26c>)
 80055b4:	f043 0308 	orr.w	r3, r3, #8
 80055b8:	6313      	str	r3, [r2, #48]	; 0x30
 80055ba:	4b6e      	ldr	r3, [pc, #440]	; (8005774 <MX_GPIO_Init+0x26c>)
 80055bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	607b      	str	r3, [r7, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80055c6:	2200      	movs	r2, #0
 80055c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055cc:	486a      	ldr	r0, [pc, #424]	; (8005778 <MX_GPIO_Init+0x270>)
 80055ce:	f003 fcff 	bl	8008fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80055d2:	2200      	movs	r2, #0
 80055d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80055d8:	4868      	ldr	r0, [pc, #416]	; (800577c <MX_GPIO_Init+0x274>)
 80055da:	f003 fcf9 	bl	8008fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80055de:	2200      	movs	r2, #0
 80055e0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80055e4:	4866      	ldr	r0, [pc, #408]	; (8005780 <MX_GPIO_Init+0x278>)
 80055e6:	f003 fcf3 	bl	8008fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80055ea:	2200      	movs	r2, #0
 80055ec:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80055f0:	4864      	ldr	r0, [pc, #400]	; (8005784 <MX_GPIO_Init+0x27c>)
 80055f2:	f003 fced 	bl	8008fd0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80055f6:	2304      	movs	r3, #4
 80055f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055fa:	2300      	movs	r3, #0
 80055fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055fe:	2300      	movs	r3, #0
 8005600:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005602:	f107 031c 	add.w	r3, r7, #28
 8005606:	4619      	mov	r1, r3
 8005608:	485b      	ldr	r0, [pc, #364]	; (8005778 <MX_GPIO_Init+0x270>)
 800560a:	f003 fb1f 	bl	8008c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800560e:	230f      	movs	r3, #15
 8005610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005612:	2303      	movs	r3, #3
 8005614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005616:	2300      	movs	r3, #0
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800561a:	f107 031c 	add.w	r3, r7, #28
 800561e:	4619      	mov	r1, r3
 8005620:	4859      	ldr	r0, [pc, #356]	; (8005788 <MX_GPIO_Init+0x280>)
 8005622:	f003 fb13 	bl	8008c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005626:	23e1      	movs	r3, #225	; 0xe1
 8005628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800562a:	2303      	movs	r3, #3
 800562c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800562e:	2300      	movs	r3, #0
 8005630:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005632:	f107 031c 	add.w	r3, r7, #28
 8005636:	4619      	mov	r1, r3
 8005638:	4852      	ldr	r0, [pc, #328]	; (8005784 <MX_GPIO_Init+0x27c>)
 800563a:	f003 fb07 	bl	8008c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800563e:	2303      	movs	r3, #3
 8005640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005642:	2303      	movs	r3, #3
 8005644:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005646:	2300      	movs	r3, #0
 8005648:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800564a:	f107 031c 	add.w	r3, r7, #28
 800564e:	4619      	mov	r1, r3
 8005650:	484a      	ldr	r0, [pc, #296]	; (800577c <MX_GPIO_Init+0x274>)
 8005652:	f003 fafb 	bl	8008c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005656:	2304      	movs	r3, #4
 8005658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800565a:	2300      	movs	r3, #0
 800565c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800565e:	2301      	movs	r3, #1
 8005660:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005662:	f107 031c 	add.w	r3, r7, #28
 8005666:	4619      	mov	r1, r3
 8005668:	4844      	ldr	r0, [pc, #272]	; (800577c <MX_GPIO_Init+0x274>)
 800566a:	f003 faef 	bl	8008c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 800566e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8005672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005674:	2300      	movs	r3, #0
 8005676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005678:	2301      	movs	r3, #1
 800567a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800567c:	f107 031c 	add.w	r3, r7, #28
 8005680:	4619      	mov	r1, r3
 8005682:	483d      	ldr	r0, [pc, #244]	; (8005778 <MX_GPIO_Init+0x270>)
 8005684:	f003 fae2 	bl	8008c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005688:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800568c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800568e:	2301      	movs	r3, #1
 8005690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005692:	2300      	movs	r3, #0
 8005694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005696:	2300      	movs	r3, #0
 8005698:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800569a:	f107 031c 	add.w	r3, r7, #28
 800569e:	4619      	mov	r1, r3
 80056a0:	4835      	ldr	r0, [pc, #212]	; (8005778 <MX_GPIO_Init+0x270>)
 80056a2:	f003 fad3 	bl	8008c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80056a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056ac:	2301      	movs	r3, #1
 80056ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056b0:	2300      	movs	r3, #0
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056b4:	2300      	movs	r3, #0
 80056b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056b8:	f107 031c 	add.w	r3, r7, #28
 80056bc:	4619      	mov	r1, r3
 80056be:	482f      	ldr	r0, [pc, #188]	; (800577c <MX_GPIO_Init+0x274>)
 80056c0:	f003 fac4 	bl	8008c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80056c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056ca:	2300      	movs	r3, #0
 80056cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ce:	2300      	movs	r3, #0
 80056d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056d2:	f107 031c 	add.w	r3, r7, #28
 80056d6:	4619      	mov	r1, r3
 80056d8:	4829      	ldr	r0, [pc, #164]	; (8005780 <MX_GPIO_Init+0x278>)
 80056da:	f003 fab7 	bl	8008c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80056de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80056e4:	2301      	movs	r3, #1
 80056e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056e8:	2300      	movs	r3, #0
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ec:	2300      	movs	r3, #0
 80056ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056f0:	f107 031c 	add.w	r3, r7, #28
 80056f4:	4619      	mov	r1, r3
 80056f6:	4822      	ldr	r0, [pc, #136]	; (8005780 <MX_GPIO_Init+0x278>)
 80056f8:	f003 faa8 	bl	8008c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80056fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005702:	2301      	movs	r3, #1
 8005704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005706:	2301      	movs	r3, #1
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800570a:	2300      	movs	r3, #0
 800570c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800570e:	f107 031c 	add.w	r3, r7, #28
 8005712:	4619      	mov	r1, r3
 8005714:	481a      	ldr	r0, [pc, #104]	; (8005780 <MX_GPIO_Init+0x278>)
 8005716:	f003 fa99 	bl	8008c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800571a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800571e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005720:	2301      	movs	r3, #1
 8005722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005724:	2300      	movs	r3, #0
 8005726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005728:	2300      	movs	r3, #0
 800572a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800572c:	f107 031c 	add.w	r3, r7, #28
 8005730:	4619      	mov	r1, r3
 8005732:	4814      	ldr	r0, [pc, #80]	; (8005784 <MX_GPIO_Init+0x27c>)
 8005734:	f003 fa8a 	bl	8008c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005738:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800573c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800573e:	2300      	movs	r3, #0
 8005740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005742:	2300      	movs	r3, #0
 8005744:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005746:	f107 031c 	add.w	r3, r7, #28
 800574a:	4619      	mov	r1, r3
 800574c:	480d      	ldr	r0, [pc, #52]	; (8005784 <MX_GPIO_Init+0x27c>)
 800574e:	f003 fa7d 	bl	8008c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8005752:	239b      	movs	r3, #155	; 0x9b
 8005754:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005756:	2300      	movs	r3, #0
 8005758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800575a:	2301      	movs	r3, #1
 800575c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800575e:	f107 031c 	add.w	r3, r7, #28
 8005762:	4619      	mov	r1, r3
 8005764:	4806      	ldr	r0, [pc, #24]	; (8005780 <MX_GPIO_Init+0x278>)
 8005766:	f003 fa71 	bl	8008c4c <HAL_GPIO_Init>

}
 800576a:	bf00      	nop
 800576c:	3730      	adds	r7, #48	; 0x30
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	40023800 	.word	0x40023800
 8005778:	40021000 	.word	0x40021000
 800577c:	40020400 	.word	0x40020400
 8005780:	40020c00 	.word	0x40020c00
 8005784:	40020000 	.word	0x40020000
 8005788:	40020800 	.word	0x40020800

0800578c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005790:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005792:	e7fe      	b.n	8005792 <Error_Handler+0x6>

08005794 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8005798:	bf00      	nop
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
	...

080057a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057aa:	2300      	movs	r3, #0
 80057ac:	607b      	str	r3, [r7, #4]
 80057ae:	4b10      	ldr	r3, [pc, #64]	; (80057f0 <HAL_MspInit+0x4c>)
 80057b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b2:	4a0f      	ldr	r2, [pc, #60]	; (80057f0 <HAL_MspInit+0x4c>)
 80057b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057b8:	6453      	str	r3, [r2, #68]	; 0x44
 80057ba:	4b0d      	ldr	r3, [pc, #52]	; (80057f0 <HAL_MspInit+0x4c>)
 80057bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057c2:	607b      	str	r3, [r7, #4]
 80057c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057c6:	2300      	movs	r3, #0
 80057c8:	603b      	str	r3, [r7, #0]
 80057ca:	4b09      	ldr	r3, [pc, #36]	; (80057f0 <HAL_MspInit+0x4c>)
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	4a08      	ldr	r2, [pc, #32]	; (80057f0 <HAL_MspInit+0x4c>)
 80057d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d4:	6413      	str	r3, [r2, #64]	; 0x40
 80057d6:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <HAL_MspInit+0x4c>)
 80057d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057de:	603b      	str	r3, [r7, #0]
 80057e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40023800 	.word	0x40023800

080057f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b08c      	sub	sp, #48	; 0x30
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057fc:	f107 031c 	add.w	r3, r7, #28
 8005800:	2200      	movs	r2, #0
 8005802:	601a      	str	r2, [r3, #0]
 8005804:	605a      	str	r2, [r3, #4]
 8005806:	609a      	str	r2, [r3, #8]
 8005808:	60da      	str	r2, [r3, #12]
 800580a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a4a      	ldr	r2, [pc, #296]	; (800593c <HAL_ADC_MspInit+0x148>)
 8005812:	4293      	cmp	r3, r2
 8005814:	f040 808e 	bne.w	8005934 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005818:	2300      	movs	r3, #0
 800581a:	61bb      	str	r3, [r7, #24]
 800581c:	4b48      	ldr	r3, [pc, #288]	; (8005940 <HAL_ADC_MspInit+0x14c>)
 800581e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005820:	4a47      	ldr	r2, [pc, #284]	; (8005940 <HAL_ADC_MspInit+0x14c>)
 8005822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005826:	6453      	str	r3, [r2, #68]	; 0x44
 8005828:	4b45      	ldr	r3, [pc, #276]	; (8005940 <HAL_ADC_MspInit+0x14c>)
 800582a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005830:	61bb      	str	r3, [r7, #24]
 8005832:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005834:	2300      	movs	r3, #0
 8005836:	617b      	str	r3, [r7, #20]
 8005838:	4b41      	ldr	r3, [pc, #260]	; (8005940 <HAL_ADC_MspInit+0x14c>)
 800583a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583c:	4a40      	ldr	r2, [pc, #256]	; (8005940 <HAL_ADC_MspInit+0x14c>)
 800583e:	f043 0304 	orr.w	r3, r3, #4
 8005842:	6313      	str	r3, [r2, #48]	; 0x30
 8005844:	4b3e      	ldr	r3, [pc, #248]	; (8005940 <HAL_ADC_MspInit+0x14c>)
 8005846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005850:	2300      	movs	r3, #0
 8005852:	613b      	str	r3, [r7, #16]
 8005854:	4b3a      	ldr	r3, [pc, #232]	; (8005940 <HAL_ADC_MspInit+0x14c>)
 8005856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005858:	4a39      	ldr	r2, [pc, #228]	; (8005940 <HAL_ADC_MspInit+0x14c>)
 800585a:	f043 0301 	orr.w	r3, r3, #1
 800585e:	6313      	str	r3, [r2, #48]	; 0x30
 8005860:	4b37      	ldr	r3, [pc, #220]	; (8005940 <HAL_ADC_MspInit+0x14c>)
 8005862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	613b      	str	r3, [r7, #16]
 800586a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800586c:	2300      	movs	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	4b33      	ldr	r3, [pc, #204]	; (8005940 <HAL_ADC_MspInit+0x14c>)
 8005872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005874:	4a32      	ldr	r2, [pc, #200]	; (8005940 <HAL_ADC_MspInit+0x14c>)
 8005876:	f043 0302 	orr.w	r3, r3, #2
 800587a:	6313      	str	r3, [r2, #48]	; 0x30
 800587c:	4b30      	ldr	r3, [pc, #192]	; (8005940 <HAL_ADC_MspInit+0x14c>)
 800587e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005888:	230f      	movs	r3, #15
 800588a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800588c:	2303      	movs	r3, #3
 800588e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005890:	2300      	movs	r3, #0
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005894:	f107 031c 	add.w	r3, r7, #28
 8005898:	4619      	mov	r1, r3
 800589a:	482a      	ldr	r0, [pc, #168]	; (8005944 <HAL_ADC_MspInit+0x150>)
 800589c:	f003 f9d6 	bl	8008c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80058a0:	23ff      	movs	r3, #255	; 0xff
 80058a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80058a4:	2303      	movs	r3, #3
 80058a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058a8:	2300      	movs	r3, #0
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058ac:	f107 031c 	add.w	r3, r7, #28
 80058b0:	4619      	mov	r1, r3
 80058b2:	4825      	ldr	r0, [pc, #148]	; (8005948 <HAL_ADC_MspInit+0x154>)
 80058b4:	f003 f9ca 	bl	8008c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80058b8:	2303      	movs	r3, #3
 80058ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80058bc:	2303      	movs	r3, #3
 80058be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058c0:	2300      	movs	r3, #0
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058c4:	f107 031c 	add.w	r3, r7, #28
 80058c8:	4619      	mov	r1, r3
 80058ca:	4820      	ldr	r0, [pc, #128]	; (800594c <HAL_ADC_MspInit+0x158>)
 80058cc:	f003 f9be 	bl	8008c4c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80058d0:	4b1f      	ldr	r3, [pc, #124]	; (8005950 <HAL_ADC_MspInit+0x15c>)
 80058d2:	4a20      	ldr	r2, [pc, #128]	; (8005954 <HAL_ADC_MspInit+0x160>)
 80058d4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80058d6:	4b1e      	ldr	r3, [pc, #120]	; (8005950 <HAL_ADC_MspInit+0x15c>)
 80058d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058dc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80058de:	4b1c      	ldr	r3, [pc, #112]	; (8005950 <HAL_ADC_MspInit+0x15c>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80058e4:	4b1a      	ldr	r3, [pc, #104]	; (8005950 <HAL_ADC_MspInit+0x15c>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80058ea:	4b19      	ldr	r3, [pc, #100]	; (8005950 <HAL_ADC_MspInit+0x15c>)
 80058ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058f0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80058f2:	4b17      	ldr	r3, [pc, #92]	; (8005950 <HAL_ADC_MspInit+0x15c>)
 80058f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058f8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80058fa:	4b15      	ldr	r3, [pc, #84]	; (8005950 <HAL_ADC_MspInit+0x15c>)
 80058fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005900:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005902:	4b13      	ldr	r3, [pc, #76]	; (8005950 <HAL_ADC_MspInit+0x15c>)
 8005904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005908:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800590a:	4b11      	ldr	r3, [pc, #68]	; (8005950 <HAL_ADC_MspInit+0x15c>)
 800590c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005910:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005912:	4b0f      	ldr	r3, [pc, #60]	; (8005950 <HAL_ADC_MspInit+0x15c>)
 8005914:	2200      	movs	r2, #0
 8005916:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005918:	480d      	ldr	r0, [pc, #52]	; (8005950 <HAL_ADC_MspInit+0x15c>)
 800591a:	f002 fdfb 	bl	8008514 <HAL_DMA_Init>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8005924:	f7ff ff32 	bl	800578c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a09      	ldr	r2, [pc, #36]	; (8005950 <HAL_ADC_MspInit+0x15c>)
 800592c:	639a      	str	r2, [r3, #56]	; 0x38
 800592e:	4a08      	ldr	r2, [pc, #32]	; (8005950 <HAL_ADC_MspInit+0x15c>)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005934:	bf00      	nop
 8005936:	3730      	adds	r7, #48	; 0x30
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40012100 	.word	0x40012100
 8005940:	40023800 	.word	0x40023800
 8005944:	40020800 	.word	0x40020800
 8005948:	40020000 	.word	0x40020000
 800594c:	40020400 	.word	0x40020400
 8005950:	2003bbfc 	.word	0x2003bbfc
 8005954:	40026440 	.word	0x40026440

08005958 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b08c      	sub	sp, #48	; 0x30
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005960:	f107 031c 	add.w	r3, r7, #28
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	605a      	str	r2, [r3, #4]
 800596a:	609a      	str	r2, [r3, #8]
 800596c:	60da      	str	r2, [r3, #12]
 800596e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a32      	ldr	r2, [pc, #200]	; (8005a40 <HAL_I2C_MspInit+0xe8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d12c      	bne.n	80059d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800597a:	2300      	movs	r3, #0
 800597c:	61bb      	str	r3, [r7, #24]
 800597e:	4b31      	ldr	r3, [pc, #196]	; (8005a44 <HAL_I2C_MspInit+0xec>)
 8005980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005982:	4a30      	ldr	r2, [pc, #192]	; (8005a44 <HAL_I2C_MspInit+0xec>)
 8005984:	f043 0302 	orr.w	r3, r3, #2
 8005988:	6313      	str	r3, [r2, #48]	; 0x30
 800598a:	4b2e      	ldr	r3, [pc, #184]	; (8005a44 <HAL_I2C_MspInit+0xec>)
 800598c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	61bb      	str	r3, [r7, #24]
 8005994:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005996:	23c0      	movs	r3, #192	; 0xc0
 8005998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800599a:	2312      	movs	r3, #18
 800599c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800599e:	2301      	movs	r3, #1
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059a2:	2303      	movs	r3, #3
 80059a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80059a6:	2304      	movs	r3, #4
 80059a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059aa:	f107 031c 	add.w	r3, r7, #28
 80059ae:	4619      	mov	r1, r3
 80059b0:	4825      	ldr	r0, [pc, #148]	; (8005a48 <HAL_I2C_MspInit+0xf0>)
 80059b2:	f003 f94b 	bl	8008c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80059b6:	2300      	movs	r3, #0
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	4b22      	ldr	r3, [pc, #136]	; (8005a44 <HAL_I2C_MspInit+0xec>)
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	4a21      	ldr	r2, [pc, #132]	; (8005a44 <HAL_I2C_MspInit+0xec>)
 80059c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059c4:	6413      	str	r3, [r2, #64]	; 0x40
 80059c6:	4b1f      	ldr	r3, [pc, #124]	; (8005a44 <HAL_I2C_MspInit+0xec>)
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059ce:	617b      	str	r3, [r7, #20]
 80059d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80059d2:	e031      	b.n	8005a38 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1c      	ldr	r2, [pc, #112]	; (8005a4c <HAL_I2C_MspInit+0xf4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d12c      	bne.n	8005a38 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059de:	2300      	movs	r3, #0
 80059e0:	613b      	str	r3, [r7, #16]
 80059e2:	4b18      	ldr	r3, [pc, #96]	; (8005a44 <HAL_I2C_MspInit+0xec>)
 80059e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e6:	4a17      	ldr	r2, [pc, #92]	; (8005a44 <HAL_I2C_MspInit+0xec>)
 80059e8:	f043 0302 	orr.w	r3, r3, #2
 80059ec:	6313      	str	r3, [r2, #48]	; 0x30
 80059ee:	4b15      	ldr	r3, [pc, #84]	; (8005a44 <HAL_I2C_MspInit+0xec>)
 80059f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	613b      	str	r3, [r7, #16]
 80059f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80059fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80059fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a00:	2312      	movs	r3, #18
 8005a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a04:	2301      	movs	r3, #1
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005a0c:	2304      	movs	r3, #4
 8005a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a10:	f107 031c 	add.w	r3, r7, #28
 8005a14:	4619      	mov	r1, r3
 8005a16:	480c      	ldr	r0, [pc, #48]	; (8005a48 <HAL_I2C_MspInit+0xf0>)
 8005a18:	f003 f918 	bl	8008c4c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	4b08      	ldr	r3, [pc, #32]	; (8005a44 <HAL_I2C_MspInit+0xec>)
 8005a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a24:	4a07      	ldr	r2, [pc, #28]	; (8005a44 <HAL_I2C_MspInit+0xec>)
 8005a26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8005a2c:	4b05      	ldr	r3, [pc, #20]	; (8005a44 <HAL_I2C_MspInit+0xec>)
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	68fb      	ldr	r3, [r7, #12]
}
 8005a38:	bf00      	nop
 8005a3a:	3730      	adds	r7, #48	; 0x30
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	40005400 	.word	0x40005400
 8005a44:	40023800 	.word	0x40023800
 8005a48:	40020400 	.word	0x40020400
 8005a4c:	40005800 	.word	0x40005800

08005a50 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08a      	sub	sp, #40	; 0x28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a58:	f107 0314 	add.w	r3, r7, #20
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	605a      	str	r2, [r3, #4]
 8005a62:	609a      	str	r2, [r3, #8]
 8005a64:	60da      	str	r2, [r3, #12]
 8005a66:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a69      	ldr	r2, [pc, #420]	; (8005c14 <HAL_SD_MspInit+0x1c4>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	f040 80cb 	bne.w	8005c0a <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8005a74:	2300      	movs	r3, #0
 8005a76:	613b      	str	r3, [r7, #16]
 8005a78:	4b67      	ldr	r3, [pc, #412]	; (8005c18 <HAL_SD_MspInit+0x1c8>)
 8005a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a7c:	4a66      	ldr	r2, [pc, #408]	; (8005c18 <HAL_SD_MspInit+0x1c8>)
 8005a7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a82:	6453      	str	r3, [r2, #68]	; 0x44
 8005a84:	4b64      	ldr	r3, [pc, #400]	; (8005c18 <HAL_SD_MspInit+0x1c8>)
 8005a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a8c:	613b      	str	r3, [r7, #16]
 8005a8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a90:	2300      	movs	r3, #0
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	4b60      	ldr	r3, [pc, #384]	; (8005c18 <HAL_SD_MspInit+0x1c8>)
 8005a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a98:	4a5f      	ldr	r2, [pc, #380]	; (8005c18 <HAL_SD_MspInit+0x1c8>)
 8005a9a:	f043 0304 	orr.w	r3, r3, #4
 8005a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8005aa0:	4b5d      	ldr	r3, [pc, #372]	; (8005c18 <HAL_SD_MspInit+0x1c8>)
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005aac:	2300      	movs	r3, #0
 8005aae:	60bb      	str	r3, [r7, #8]
 8005ab0:	4b59      	ldr	r3, [pc, #356]	; (8005c18 <HAL_SD_MspInit+0x1c8>)
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab4:	4a58      	ldr	r2, [pc, #352]	; (8005c18 <HAL_SD_MspInit+0x1c8>)
 8005ab6:	f043 0308 	orr.w	r3, r3, #8
 8005aba:	6313      	str	r3, [r2, #48]	; 0x30
 8005abc:	4b56      	ldr	r3, [pc, #344]	; (8005c18 <HAL_SD_MspInit+0x1c8>)
 8005abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac0:	f003 0308 	and.w	r3, r3, #8
 8005ac4:	60bb      	str	r3, [r7, #8]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005ac8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005acc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ace:	2302      	movs	r3, #2
 8005ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005ada:	230c      	movs	r3, #12
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ade:	f107 0314 	add.w	r3, r7, #20
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	484d      	ldr	r0, [pc, #308]	; (8005c1c <HAL_SD_MspInit+0x1cc>)
 8005ae6:	f003 f8b1 	bl	8008c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005aea:	2304      	movs	r3, #4
 8005aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aee:	2302      	movs	r3, #2
 8005af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005af2:	2300      	movs	r3, #0
 8005af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005af6:	2303      	movs	r3, #3
 8005af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005afa:	230c      	movs	r3, #12
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005afe:	f107 0314 	add.w	r3, r7, #20
 8005b02:	4619      	mov	r1, r3
 8005b04:	4846      	ldr	r0, [pc, #280]	; (8005c20 <HAL_SD_MspInit+0x1d0>)
 8005b06:	f003 f8a1 	bl	8008c4c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8005b0a:	4b46      	ldr	r3, [pc, #280]	; (8005c24 <HAL_SD_MspInit+0x1d4>)
 8005b0c:	4a46      	ldr	r2, [pc, #280]	; (8005c28 <HAL_SD_MspInit+0x1d8>)
 8005b0e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8005b10:	4b44      	ldr	r3, [pc, #272]	; (8005c24 <HAL_SD_MspInit+0x1d4>)
 8005b12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b16:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b18:	4b42      	ldr	r3, [pc, #264]	; (8005c24 <HAL_SD_MspInit+0x1d4>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b1e:	4b41      	ldr	r3, [pc, #260]	; (8005c24 <HAL_SD_MspInit+0x1d4>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b24:	4b3f      	ldr	r3, [pc, #252]	; (8005c24 <HAL_SD_MspInit+0x1d4>)
 8005b26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b2a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005b2c:	4b3d      	ldr	r3, [pc, #244]	; (8005c24 <HAL_SD_MspInit+0x1d4>)
 8005b2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b32:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005b34:	4b3b      	ldr	r3, [pc, #236]	; (8005c24 <HAL_SD_MspInit+0x1d4>)
 8005b36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b3a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8005b3c:	4b39      	ldr	r3, [pc, #228]	; (8005c24 <HAL_SD_MspInit+0x1d4>)
 8005b3e:	2220      	movs	r2, #32
 8005b40:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005b42:	4b38      	ldr	r3, [pc, #224]	; (8005c24 <HAL_SD_MspInit+0x1d4>)
 8005b44:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005b48:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005b4a:	4b36      	ldr	r3, [pc, #216]	; (8005c24 <HAL_SD_MspInit+0x1d4>)
 8005b4c:	2204      	movs	r2, #4
 8005b4e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005b50:	4b34      	ldr	r3, [pc, #208]	; (8005c24 <HAL_SD_MspInit+0x1d4>)
 8005b52:	2203      	movs	r2, #3
 8005b54:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8005b56:	4b33      	ldr	r3, [pc, #204]	; (8005c24 <HAL_SD_MspInit+0x1d4>)
 8005b58:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005b5c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005b5e:	4b31      	ldr	r3, [pc, #196]	; (8005c24 <HAL_SD_MspInit+0x1d4>)
 8005b60:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005b64:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8005b66:	482f      	ldr	r0, [pc, #188]	; (8005c24 <HAL_SD_MspInit+0x1d4>)
 8005b68:	f002 fcd4 	bl	8008514 <HAL_DMA_Init>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8005b72:	f7ff fe0b 	bl	800578c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a2a      	ldr	r2, [pc, #168]	; (8005c24 <HAL_SD_MspInit+0x1d4>)
 8005b7a:	641a      	str	r2, [r3, #64]	; 0x40
 8005b7c:	4a29      	ldr	r2, [pc, #164]	; (8005c24 <HAL_SD_MspInit+0x1d4>)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8005b82:	4b2a      	ldr	r3, [pc, #168]	; (8005c2c <HAL_SD_MspInit+0x1dc>)
 8005b84:	4a2a      	ldr	r2, [pc, #168]	; (8005c30 <HAL_SD_MspInit+0x1e0>)
 8005b86:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8005b88:	4b28      	ldr	r3, [pc, #160]	; (8005c2c <HAL_SD_MspInit+0x1dc>)
 8005b8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b8e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b90:	4b26      	ldr	r3, [pc, #152]	; (8005c2c <HAL_SD_MspInit+0x1dc>)
 8005b92:	2240      	movs	r2, #64	; 0x40
 8005b94:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b96:	4b25      	ldr	r3, [pc, #148]	; (8005c2c <HAL_SD_MspInit+0x1dc>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005b9c:	4b23      	ldr	r3, [pc, #140]	; (8005c2c <HAL_SD_MspInit+0x1dc>)
 8005b9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ba2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005ba4:	4b21      	ldr	r3, [pc, #132]	; (8005c2c <HAL_SD_MspInit+0x1dc>)
 8005ba6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005baa:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005bac:	4b1f      	ldr	r3, [pc, #124]	; (8005c2c <HAL_SD_MspInit+0x1dc>)
 8005bae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005bb2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8005bb4:	4b1d      	ldr	r3, [pc, #116]	; (8005c2c <HAL_SD_MspInit+0x1dc>)
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005bba:	4b1c      	ldr	r3, [pc, #112]	; (8005c2c <HAL_SD_MspInit+0x1dc>)
 8005bbc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005bc0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005bc2:	4b1a      	ldr	r3, [pc, #104]	; (8005c2c <HAL_SD_MspInit+0x1dc>)
 8005bc4:	2204      	movs	r2, #4
 8005bc6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005bc8:	4b18      	ldr	r3, [pc, #96]	; (8005c2c <HAL_SD_MspInit+0x1dc>)
 8005bca:	2203      	movs	r2, #3
 8005bcc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005bce:	4b17      	ldr	r3, [pc, #92]	; (8005c2c <HAL_SD_MspInit+0x1dc>)
 8005bd0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005bd4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005bd6:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <HAL_SD_MspInit+0x1dc>)
 8005bd8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005bdc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8005bde:	4813      	ldr	r0, [pc, #76]	; (8005c2c <HAL_SD_MspInit+0x1dc>)
 8005be0:	f002 fc98 	bl	8008514 <HAL_DMA_Init>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8005bea:	f7ff fdcf 	bl	800578c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a0e      	ldr	r2, [pc, #56]	; (8005c2c <HAL_SD_MspInit+0x1dc>)
 8005bf2:	63da      	str	r2, [r3, #60]	; 0x3c
 8005bf4:	4a0d      	ldr	r2, [pc, #52]	; (8005c2c <HAL_SD_MspInit+0x1dc>)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	2031      	movs	r0, #49	; 0x31
 8005c00:	f002 fc51 	bl	80084a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8005c04:	2031      	movs	r0, #49	; 0x31
 8005c06:	f002 fc6a 	bl	80084de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8005c0a:	bf00      	nop
 8005c0c:	3728      	adds	r7, #40	; 0x28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	40012c00 	.word	0x40012c00
 8005c18:	40023800 	.word	0x40023800
 8005c1c:	40020800 	.word	0x40020800
 8005c20:	40020c00 	.word	0x40020c00
 8005c24:	2003b724 	.word	0x2003b724
 8005c28:	40026458 	.word	0x40026458
 8005c2c:	2003ba58 	.word	0x2003ba58
 8005c30:	400264a0 	.word	0x400264a0

08005c34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08a      	sub	sp, #40	; 0x28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c3c:	f107 0314 	add.w	r3, r7, #20
 8005c40:	2200      	movs	r2, #0
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	605a      	str	r2, [r3, #4]
 8005c46:	609a      	str	r2, [r3, #8]
 8005c48:	60da      	str	r2, [r3, #12]
 8005c4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a19      	ldr	r2, [pc, #100]	; (8005cb8 <HAL_SPI_MspInit+0x84>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d12c      	bne.n	8005cb0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005c56:	2300      	movs	r3, #0
 8005c58:	613b      	str	r3, [r7, #16]
 8005c5a:	4b18      	ldr	r3, [pc, #96]	; (8005cbc <HAL_SPI_MspInit+0x88>)
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	4a17      	ldr	r2, [pc, #92]	; (8005cbc <HAL_SPI_MspInit+0x88>)
 8005c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c64:	6413      	str	r3, [r2, #64]	; 0x40
 8005c66:	4b15      	ldr	r3, [pc, #84]	; (8005cbc <HAL_SPI_MspInit+0x88>)
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c6e:	613b      	str	r3, [r7, #16]
 8005c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	4b11      	ldr	r3, [pc, #68]	; (8005cbc <HAL_SPI_MspInit+0x88>)
 8005c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7a:	4a10      	ldr	r2, [pc, #64]	; (8005cbc <HAL_SPI_MspInit+0x88>)
 8005c7c:	f043 0302 	orr.w	r3, r3, #2
 8005c80:	6313      	str	r3, [r2, #48]	; 0x30
 8005c82:	4b0e      	ldr	r3, [pc, #56]	; (8005cbc <HAL_SPI_MspInit+0x88>)
 8005c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	60fb      	str	r3, [r7, #12]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005c8e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c94:	2302      	movs	r3, #2
 8005c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005ca0:	2305      	movs	r3, #5
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ca4:	f107 0314 	add.w	r3, r7, #20
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4805      	ldr	r0, [pc, #20]	; (8005cc0 <HAL_SPI_MspInit+0x8c>)
 8005cac:	f002 ffce 	bl	8008c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005cb0:	bf00      	nop
 8005cb2:	3728      	adds	r7, #40	; 0x28
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	40003800 	.word	0x40003800
 8005cbc:	40023800 	.word	0x40023800
 8005cc0:	40020400 	.word	0x40020400

08005cc4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08c      	sub	sp, #48	; 0x30
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ccc:	f107 031c 	add.w	r3, r7, #28
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	605a      	str	r2, [r3, #4]
 8005cd6:	609a      	str	r2, [r3, #8]
 8005cd8:	60da      	str	r2, [r3, #12]
 8005cda:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a2d      	ldr	r2, [pc, #180]	; (8005d98 <HAL_TIM_PWM_MspInit+0xd4>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d12d      	bne.n	8005d42 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	61bb      	str	r3, [r7, #24]
 8005cea:	4b2c      	ldr	r3, [pc, #176]	; (8005d9c <HAL_TIM_PWM_MspInit+0xd8>)
 8005cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cee:	4a2b      	ldr	r2, [pc, #172]	; (8005d9c <HAL_TIM_PWM_MspInit+0xd8>)
 8005cf0:	f043 0301 	orr.w	r3, r3, #1
 8005cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8005cf6:	4b29      	ldr	r3, [pc, #164]	; (8005d9c <HAL_TIM_PWM_MspInit+0xd8>)
 8005cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	61bb      	str	r3, [r7, #24]
 8005d00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005d02:	2300      	movs	r3, #0
 8005d04:	617b      	str	r3, [r7, #20]
 8005d06:	4b25      	ldr	r3, [pc, #148]	; (8005d9c <HAL_TIM_PWM_MspInit+0xd8>)
 8005d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0a:	4a24      	ldr	r2, [pc, #144]	; (8005d9c <HAL_TIM_PWM_MspInit+0xd8>)
 8005d0c:	f043 0310 	orr.w	r3, r3, #16
 8005d10:	6313      	str	r3, [r2, #48]	; 0x30
 8005d12:	4b22      	ldr	r3, [pc, #136]	; (8005d9c <HAL_TIM_PWM_MspInit+0xd8>)
 8005d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d16:	f003 0310 	and.w	r3, r3, #16
 8005d1a:	617b      	str	r3, [r7, #20]
 8005d1c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8005d1e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d24:	2302      	movs	r3, #2
 8005d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005d30:	2301      	movs	r3, #1
 8005d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005d34:	f107 031c 	add.w	r3, r7, #28
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4819      	ldr	r0, [pc, #100]	; (8005da0 <HAL_TIM_PWM_MspInit+0xdc>)
 8005d3c:	f002 ff86 	bl	8008c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005d40:	e026      	b.n	8005d90 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a17      	ldr	r2, [pc, #92]	; (8005da4 <HAL_TIM_PWM_MspInit+0xe0>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d10e      	bne.n	8005d6a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	613b      	str	r3, [r7, #16]
 8005d50:	4b12      	ldr	r3, [pc, #72]	; (8005d9c <HAL_TIM_PWM_MspInit+0xd8>)
 8005d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d54:	4a11      	ldr	r2, [pc, #68]	; (8005d9c <HAL_TIM_PWM_MspInit+0xd8>)
 8005d56:	f043 0302 	orr.w	r3, r3, #2
 8005d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8005d5c:	4b0f      	ldr	r3, [pc, #60]	; (8005d9c <HAL_TIM_PWM_MspInit+0xd8>)
 8005d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	613b      	str	r3, [r7, #16]
 8005d66:	693b      	ldr	r3, [r7, #16]
}
 8005d68:	e012      	b.n	8005d90 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a0e      	ldr	r2, [pc, #56]	; (8005da8 <HAL_TIM_PWM_MspInit+0xe4>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d10d      	bne.n	8005d90 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005d74:	2300      	movs	r3, #0
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	4b08      	ldr	r3, [pc, #32]	; (8005d9c <HAL_TIM_PWM_MspInit+0xd8>)
 8005d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7c:	4a07      	ldr	r2, [pc, #28]	; (8005d9c <HAL_TIM_PWM_MspInit+0xd8>)
 8005d7e:	f043 0304 	orr.w	r3, r3, #4
 8005d82:	6413      	str	r3, [r2, #64]	; 0x40
 8005d84:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <HAL_TIM_PWM_MspInit+0xd8>)
 8005d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
}
 8005d90:	bf00      	nop
 8005d92:	3730      	adds	r7, #48	; 0x30
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	40010000 	.word	0x40010000
 8005d9c:	40023800 	.word	0x40023800
 8005da0:	40021000 	.word	0x40021000
 8005da4:	40000400 	.word	0x40000400
 8005da8:	40000800 	.word	0x40000800

08005dac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b088      	sub	sp, #32
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a3e      	ldr	r2, [pc, #248]	; (8005eb4 <HAL_TIM_Base_MspInit+0x108>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d116      	bne.n	8005dec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	61fb      	str	r3, [r7, #28]
 8005dc2:	4b3d      	ldr	r3, [pc, #244]	; (8005eb8 <HAL_TIM_Base_MspInit+0x10c>)
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	4a3c      	ldr	r2, [pc, #240]	; (8005eb8 <HAL_TIM_Base_MspInit+0x10c>)
 8005dc8:	f043 0310 	orr.w	r3, r3, #16
 8005dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8005dce:	4b3a      	ldr	r3, [pc, #232]	; (8005eb8 <HAL_TIM_Base_MspInit+0x10c>)
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd2:	f003 0310 	and.w	r3, r3, #16
 8005dd6:	61fb      	str	r3, [r7, #28]
 8005dd8:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005dda:	2200      	movs	r2, #0
 8005ddc:	2101      	movs	r1, #1
 8005dde:	2036      	movs	r0, #54	; 0x36
 8005de0:	f002 fb61 	bl	80084a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005de4:	2036      	movs	r0, #54	; 0x36
 8005de6:	f002 fb7a 	bl	80084de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8005dea:	e05e      	b.n	8005eaa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a32      	ldr	r2, [pc, #200]	; (8005ebc <HAL_TIM_Base_MspInit+0x110>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d116      	bne.n	8005e24 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005df6:	2300      	movs	r3, #0
 8005df8:	61bb      	str	r3, [r7, #24]
 8005dfa:	4b2f      	ldr	r3, [pc, #188]	; (8005eb8 <HAL_TIM_Base_MspInit+0x10c>)
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	4a2e      	ldr	r2, [pc, #184]	; (8005eb8 <HAL_TIM_Base_MspInit+0x10c>)
 8005e00:	f043 0320 	orr.w	r3, r3, #32
 8005e04:	6413      	str	r3, [r2, #64]	; 0x40
 8005e06:	4b2c      	ldr	r3, [pc, #176]	; (8005eb8 <HAL_TIM_Base_MspInit+0x10c>)
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	61bb      	str	r3, [r7, #24]
 8005e10:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005e12:	2200      	movs	r2, #0
 8005e14:	2100      	movs	r1, #0
 8005e16:	2037      	movs	r0, #55	; 0x37
 8005e18:	f002 fb45 	bl	80084a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005e1c:	2037      	movs	r0, #55	; 0x37
 8005e1e:	f002 fb5e 	bl	80084de <HAL_NVIC_EnableIRQ>
}
 8005e22:	e042      	b.n	8005eaa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a25      	ldr	r2, [pc, #148]	; (8005ec0 <HAL_TIM_Base_MspInit+0x114>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d10e      	bne.n	8005e4c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005e2e:	2300      	movs	r3, #0
 8005e30:	617b      	str	r3, [r7, #20]
 8005e32:	4b21      	ldr	r3, [pc, #132]	; (8005eb8 <HAL_TIM_Base_MspInit+0x10c>)
 8005e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e36:	4a20      	ldr	r2, [pc, #128]	; (8005eb8 <HAL_TIM_Base_MspInit+0x10c>)
 8005e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8005e3e:	4b1e      	ldr	r3, [pc, #120]	; (8005eb8 <HAL_TIM_Base_MspInit+0x10c>)
 8005e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e46:	617b      	str	r3, [r7, #20]
 8005e48:	697b      	ldr	r3, [r7, #20]
}
 8005e4a:	e02e      	b.n	8005eaa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a1c      	ldr	r2, [pc, #112]	; (8005ec4 <HAL_TIM_Base_MspInit+0x118>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d10e      	bne.n	8005e74 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005e56:	2300      	movs	r3, #0
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	4b17      	ldr	r3, [pc, #92]	; (8005eb8 <HAL_TIM_Base_MspInit+0x10c>)
 8005e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5e:	4a16      	ldr	r2, [pc, #88]	; (8005eb8 <HAL_TIM_Base_MspInit+0x10c>)
 8005e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e64:	6453      	str	r3, [r2, #68]	; 0x44
 8005e66:	4b14      	ldr	r3, [pc, #80]	; (8005eb8 <HAL_TIM_Base_MspInit+0x10c>)
 8005e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e6e:	613b      	str	r3, [r7, #16]
 8005e70:	693b      	ldr	r3, [r7, #16]
}
 8005e72:	e01a      	b.n	8005eaa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a13      	ldr	r2, [pc, #76]	; (8005ec8 <HAL_TIM_Base_MspInit+0x11c>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d115      	bne.n	8005eaa <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	4b0d      	ldr	r3, [pc, #52]	; (8005eb8 <HAL_TIM_Base_MspInit+0x10c>)
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	4a0c      	ldr	r2, [pc, #48]	; (8005eb8 <HAL_TIM_Base_MspInit+0x10c>)
 8005e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e8e:	4b0a      	ldr	r3, [pc, #40]	; (8005eb8 <HAL_TIM_Base_MspInit+0x10c>)
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	202c      	movs	r0, #44	; 0x2c
 8005ea0:	f002 fb01 	bl	80084a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005ea4:	202c      	movs	r0, #44	; 0x2c
 8005ea6:	f002 fb1a 	bl	80084de <HAL_NVIC_EnableIRQ>
}
 8005eaa:	bf00      	nop
 8005eac:	3720      	adds	r7, #32
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	40001000 	.word	0x40001000
 8005eb8:	40023800 	.word	0x40023800
 8005ebc:	40001400 	.word	0x40001400
 8005ec0:	40014400 	.word	0x40014400
 8005ec4:	40014800 	.word	0x40014800
 8005ec8:	40001c00 	.word	0x40001c00

08005ecc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08a      	sub	sp, #40	; 0x28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ed4:	f107 0314 	add.w	r3, r7, #20
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	605a      	str	r2, [r3, #4]
 8005ede:	609a      	str	r2, [r3, #8]
 8005ee0:	60da      	str	r2, [r3, #12]
 8005ee2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a1d      	ldr	r2, [pc, #116]	; (8005f60 <HAL_TIM_Encoder_MspInit+0x94>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d133      	bne.n	8005f56 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005eee:	2300      	movs	r3, #0
 8005ef0:	613b      	str	r3, [r7, #16]
 8005ef2:	4b1c      	ldr	r3, [pc, #112]	; (8005f64 <HAL_TIM_Encoder_MspInit+0x98>)
 8005ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef6:	4a1b      	ldr	r2, [pc, #108]	; (8005f64 <HAL_TIM_Encoder_MspInit+0x98>)
 8005ef8:	f043 0302 	orr.w	r3, r3, #2
 8005efc:	6453      	str	r3, [r2, #68]	; 0x44
 8005efe:	4b19      	ldr	r3, [pc, #100]	; (8005f64 <HAL_TIM_Encoder_MspInit+0x98>)
 8005f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	613b      	str	r3, [r7, #16]
 8005f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60fb      	str	r3, [r7, #12]
 8005f0e:	4b15      	ldr	r3, [pc, #84]	; (8005f64 <HAL_TIM_Encoder_MspInit+0x98>)
 8005f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f12:	4a14      	ldr	r2, [pc, #80]	; (8005f64 <HAL_TIM_Encoder_MspInit+0x98>)
 8005f14:	f043 0304 	orr.w	r3, r3, #4
 8005f18:	6313      	str	r3, [r2, #48]	; 0x30
 8005f1a:	4b12      	ldr	r3, [pc, #72]	; (8005f64 <HAL_TIM_Encoder_MspInit+0x98>)
 8005f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1e:	f003 0304 	and.w	r3, r3, #4
 8005f22:	60fb      	str	r3, [r7, #12]
 8005f24:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005f26:	23c0      	movs	r3, #192	; 0xc0
 8005f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f32:	2300      	movs	r3, #0
 8005f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005f36:	2303      	movs	r3, #3
 8005f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f3a:	f107 0314 	add.w	r3, r7, #20
 8005f3e:	4619      	mov	r1, r3
 8005f40:	4809      	ldr	r0, [pc, #36]	; (8005f68 <HAL_TIM_Encoder_MspInit+0x9c>)
 8005f42:	f002 fe83 	bl	8008c4c <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005f46:	2200      	movs	r2, #0
 8005f48:	2100      	movs	r1, #0
 8005f4a:	202c      	movs	r0, #44	; 0x2c
 8005f4c:	f002 faab 	bl	80084a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005f50:	202c      	movs	r0, #44	; 0x2c
 8005f52:	f002 fac4 	bl	80084de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005f56:	bf00      	nop
 8005f58:	3728      	adds	r7, #40	; 0x28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	40010400 	.word	0x40010400
 8005f64:	40023800 	.word	0x40023800
 8005f68:	40020800 	.word	0x40020800

08005f6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08c      	sub	sp, #48	; 0x30
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f74:	f107 031c 	add.w	r3, r7, #28
 8005f78:	2200      	movs	r2, #0
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	605a      	str	r2, [r3, #4]
 8005f7e:	609a      	str	r2, [r3, #8]
 8005f80:	60da      	str	r2, [r3, #12]
 8005f82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a5c      	ldr	r2, [pc, #368]	; (80060fc <HAL_TIM_MspPostInit+0x190>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d11f      	bne.n	8005fce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f8e:	2300      	movs	r3, #0
 8005f90:	61bb      	str	r3, [r7, #24]
 8005f92:	4b5b      	ldr	r3, [pc, #364]	; (8006100 <HAL_TIM_MspPostInit+0x194>)
 8005f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f96:	4a5a      	ldr	r2, [pc, #360]	; (8006100 <HAL_TIM_MspPostInit+0x194>)
 8005f98:	f043 0310 	orr.w	r3, r3, #16
 8005f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f9e:	4b58      	ldr	r3, [pc, #352]	; (8006100 <HAL_TIM_MspPostInit+0x194>)
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa2:	f003 0310 	and.w	r3, r3, #16
 8005fa6:	61bb      	str	r3, [r7, #24]
 8005fa8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005faa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005fc0:	f107 031c 	add.w	r3, r7, #28
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	484f      	ldr	r0, [pc, #316]	; (8006104 <HAL_TIM_MspPostInit+0x198>)
 8005fc8:	f002 fe40 	bl	8008c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8005fcc:	e091      	b.n	80060f2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a4d      	ldr	r2, [pc, #308]	; (8006108 <HAL_TIM_MspPostInit+0x19c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d11e      	bne.n	8006016 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]
 8005fdc:	4b48      	ldr	r3, [pc, #288]	; (8006100 <HAL_TIM_MspPostInit+0x194>)
 8005fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe0:	4a47      	ldr	r2, [pc, #284]	; (8006100 <HAL_TIM_MspPostInit+0x194>)
 8005fe2:	f043 0302 	orr.w	r3, r3, #2
 8005fe6:	6313      	str	r3, [r2, #48]	; 0x30
 8005fe8:	4b45      	ldr	r3, [pc, #276]	; (8006100 <HAL_TIM_MspPostInit+0x194>)
 8005fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	617b      	str	r3, [r7, #20]
 8005ff2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005ff4:	2330      	movs	r3, #48	; 0x30
 8005ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006000:	2300      	movs	r3, #0
 8006002:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006004:	2302      	movs	r3, #2
 8006006:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006008:	f107 031c 	add.w	r3, r7, #28
 800600c:	4619      	mov	r1, r3
 800600e:	483f      	ldr	r0, [pc, #252]	; (800610c <HAL_TIM_MspPostInit+0x1a0>)
 8006010:	f002 fe1c 	bl	8008c4c <HAL_GPIO_Init>
}
 8006014:	e06d      	b.n	80060f2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a3d      	ldr	r2, [pc, #244]	; (8006110 <HAL_TIM_MspPostInit+0x1a4>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d11f      	bne.n	8006060 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006020:	2300      	movs	r3, #0
 8006022:	613b      	str	r3, [r7, #16]
 8006024:	4b36      	ldr	r3, [pc, #216]	; (8006100 <HAL_TIM_MspPostInit+0x194>)
 8006026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006028:	4a35      	ldr	r2, [pc, #212]	; (8006100 <HAL_TIM_MspPostInit+0x194>)
 800602a:	f043 0308 	orr.w	r3, r3, #8
 800602e:	6313      	str	r3, [r2, #48]	; 0x30
 8006030:	4b33      	ldr	r3, [pc, #204]	; (8006100 <HAL_TIM_MspPostInit+0x194>)
 8006032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006034:	f003 0308 	and.w	r3, r3, #8
 8006038:	613b      	str	r3, [r7, #16]
 800603a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800603c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006042:	2302      	movs	r3, #2
 8006044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006046:	2300      	movs	r3, #0
 8006048:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800604a:	2300      	movs	r3, #0
 800604c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800604e:	2302      	movs	r3, #2
 8006050:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006052:	f107 031c 	add.w	r3, r7, #28
 8006056:	4619      	mov	r1, r3
 8006058:	482e      	ldr	r0, [pc, #184]	; (8006114 <HAL_TIM_MspPostInit+0x1a8>)
 800605a:	f002 fdf7 	bl	8008c4c <HAL_GPIO_Init>
}
 800605e:	e048      	b.n	80060f2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a2c      	ldr	r2, [pc, #176]	; (8006118 <HAL_TIM_MspPostInit+0x1ac>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d11f      	bne.n	80060aa <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	4b24      	ldr	r3, [pc, #144]	; (8006100 <HAL_TIM_MspPostInit+0x194>)
 8006070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006072:	4a23      	ldr	r2, [pc, #140]	; (8006100 <HAL_TIM_MspPostInit+0x194>)
 8006074:	f043 0302 	orr.w	r3, r3, #2
 8006078:	6313      	str	r3, [r2, #48]	; 0x30
 800607a:	4b21      	ldr	r3, [pc, #132]	; (8006100 <HAL_TIM_MspPostInit+0x194>)
 800607c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006086:	f44f 7380 	mov.w	r3, #256	; 0x100
 800608a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800608c:	2302      	movs	r3, #2
 800608e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006090:	2300      	movs	r3, #0
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006094:	2300      	movs	r3, #0
 8006096:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8006098:	2303      	movs	r3, #3
 800609a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800609c:	f107 031c 	add.w	r3, r7, #28
 80060a0:	4619      	mov	r1, r3
 80060a2:	481a      	ldr	r0, [pc, #104]	; (800610c <HAL_TIM_MspPostInit+0x1a0>)
 80060a4:	f002 fdd2 	bl	8008c4c <HAL_GPIO_Init>
}
 80060a8:	e023      	b.n	80060f2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a1b      	ldr	r2, [pc, #108]	; (800611c <HAL_TIM_MspPostInit+0x1b0>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d11e      	bne.n	80060f2 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060b4:	2300      	movs	r3, #0
 80060b6:	60bb      	str	r3, [r7, #8]
 80060b8:	4b11      	ldr	r3, [pc, #68]	; (8006100 <HAL_TIM_MspPostInit+0x194>)
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	4a10      	ldr	r2, [pc, #64]	; (8006100 <HAL_TIM_MspPostInit+0x194>)
 80060be:	f043 0302 	orr.w	r3, r3, #2
 80060c2:	6313      	str	r3, [r2, #48]	; 0x30
 80060c4:	4b0e      	ldr	r3, [pc, #56]	; (8006100 <HAL_TIM_MspPostInit+0x194>)
 80060c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	60bb      	str	r3, [r7, #8]
 80060ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80060d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d6:	2302      	movs	r3, #2
 80060d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060da:	2300      	movs	r3, #0
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060de:	2300      	movs	r3, #0
 80060e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80060e2:	2303      	movs	r3, #3
 80060e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060e6:	f107 031c 	add.w	r3, r7, #28
 80060ea:	4619      	mov	r1, r3
 80060ec:	4807      	ldr	r0, [pc, #28]	; (800610c <HAL_TIM_MspPostInit+0x1a0>)
 80060ee:	f002 fdad 	bl	8008c4c <HAL_GPIO_Init>
}
 80060f2:	bf00      	nop
 80060f4:	3730      	adds	r7, #48	; 0x30
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	40010000 	.word	0x40010000
 8006100:	40023800 	.word	0x40023800
 8006104:	40021000 	.word	0x40021000
 8006108:	40000400 	.word	0x40000400
 800610c:	40020400 	.word	0x40020400
 8006110:	40000800 	.word	0x40000800
 8006114:	40020c00 	.word	0x40020c00
 8006118:	40014400 	.word	0x40014400
 800611c:	40014800 	.word	0x40014800

08006120 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b08a      	sub	sp, #40	; 0x28
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006128:	f107 0314 	add.w	r3, r7, #20
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	605a      	str	r2, [r3, #4]
 8006132:	609a      	str	r2, [r3, #8]
 8006134:	60da      	str	r2, [r3, #12]
 8006136:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a19      	ldr	r2, [pc, #100]	; (80061a4 <HAL_UART_MspInit+0x84>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d12b      	bne.n	800619a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006142:	2300      	movs	r3, #0
 8006144:	613b      	str	r3, [r7, #16]
 8006146:	4b18      	ldr	r3, [pc, #96]	; (80061a8 <HAL_UART_MspInit+0x88>)
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	4a17      	ldr	r2, [pc, #92]	; (80061a8 <HAL_UART_MspInit+0x88>)
 800614c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006150:	6413      	str	r3, [r2, #64]	; 0x40
 8006152:	4b15      	ldr	r3, [pc, #84]	; (80061a8 <HAL_UART_MspInit+0x88>)
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800615a:	613b      	str	r3, [r7, #16]
 800615c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800615e:	2300      	movs	r3, #0
 8006160:	60fb      	str	r3, [r7, #12]
 8006162:	4b11      	ldr	r3, [pc, #68]	; (80061a8 <HAL_UART_MspInit+0x88>)
 8006164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006166:	4a10      	ldr	r2, [pc, #64]	; (80061a8 <HAL_UART_MspInit+0x88>)
 8006168:	f043 0308 	orr.w	r3, r3, #8
 800616c:	6313      	str	r3, [r2, #48]	; 0x30
 800616e:	4b0e      	ldr	r3, [pc, #56]	; (80061a8 <HAL_UART_MspInit+0x88>)
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	f003 0308 	and.w	r3, r3, #8
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800617a:	2360      	movs	r3, #96	; 0x60
 800617c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800617e:	2302      	movs	r3, #2
 8006180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006182:	2300      	movs	r3, #0
 8006184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006186:	2303      	movs	r3, #3
 8006188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800618a:	2307      	movs	r3, #7
 800618c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800618e:	f107 0314 	add.w	r3, r7, #20
 8006192:	4619      	mov	r1, r3
 8006194:	4805      	ldr	r0, [pc, #20]	; (80061ac <HAL_UART_MspInit+0x8c>)
 8006196:	f002 fd59 	bl	8008c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800619a:	bf00      	nop
 800619c:	3728      	adds	r7, #40	; 0x28
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	40004400 	.word	0x40004400
 80061a8:	40023800 	.word	0x40023800
 80061ac:	40020c00 	.word	0x40020c00

080061b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80061b0:	b480      	push	{r7}
 80061b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80061b4:	e7fe      	b.n	80061b4 <NMI_Handler+0x4>

080061b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80061b6:	b480      	push	{r7}
 80061b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80061ba:	e7fe      	b.n	80061ba <HardFault_Handler+0x4>

080061bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80061c0:	e7fe      	b.n	80061c0 <MemManage_Handler+0x4>

080061c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80061c2:	b480      	push	{r7}
 80061c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80061c6:	e7fe      	b.n	80061c6 <BusFault_Handler+0x4>

080061c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80061cc:	e7fe      	b.n	80061cc <UsageFault_Handler+0x4>

080061ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80061ce:	b480      	push	{r7}
 80061d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80061d2:	bf00      	nop
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80061e0:	bf00      	nop
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80061ea:	b480      	push	{r7}
 80061ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80061ee:	bf00      	nop
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80061fc:	f001 fc32 	bl	8007a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006200:	bf00      	nop
 8006202:	bd80      	pop	{r7, pc}

08006204 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006208:	4803      	ldr	r0, [pc, #12]	; (8006218 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800620a:	f006 ff02 	bl	800d012 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800620e:	4803      	ldr	r0, [pc, #12]	; (800621c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8006210:	f006 feff 	bl	800d012 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8006214:	bf00      	nop
 8006216:	bd80      	pop	{r7, pc}
 8006218:	2003b7dc 	.word	0x2003b7dc
 800621c:	2003b9d8 	.word	0x2003b9d8

08006220 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8006224:	4802      	ldr	r0, [pc, #8]	; (8006230 <SDIO_IRQHandler+0x10>)
 8006226:	f004 ff9b 	bl	800b160 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800622a:	bf00      	nop
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	2003bb38 	.word	0x2003bb38

08006234 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006238:	4802      	ldr	r0, [pc, #8]	; (8006244 <TIM6_DAC_IRQHandler+0x10>)
 800623a:	f006 feea 	bl	800d012 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800623e:	bf00      	nop
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	2003bab8 	.word	0x2003bab8

08006248 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800624c:	4802      	ldr	r0, [pc, #8]	; (8006258 <TIM7_IRQHandler+0x10>)
 800624e:	f006 fee0 	bl	800d012 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006252:	bf00      	nop
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	2003bc5c 	.word	0x2003bc5c

0800625c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006260:	4802      	ldr	r0, [pc, #8]	; (800626c <DMA2_Stream2_IRQHandler+0x10>)
 8006262:	f002 fa7f 	bl	8008764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006266:	bf00      	nop
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	2003bbfc 	.word	0x2003bbfc

08006270 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8006274:	4802      	ldr	r0, [pc, #8]	; (8006280 <DMA2_Stream3_IRQHandler+0x10>)
 8006276:	f002 fa75 	bl	8008764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800627a:	bf00      	nop
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	2003b724 	.word	0x2003b724

08006284 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8006288:	4802      	ldr	r0, [pc, #8]	; (8006294 <DMA2_Stream6_IRQHandler+0x10>)
 800628a:	f002 fa6b 	bl	8008764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800628e:	bf00      	nop
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	2003ba58 	.word	0x2003ba58

08006298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80062a0:	4a14      	ldr	r2, [pc, #80]	; (80062f4 <_sbrk+0x5c>)
 80062a2:	4b15      	ldr	r3, [pc, #84]	; (80062f8 <_sbrk+0x60>)
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80062ac:	4b13      	ldr	r3, [pc, #76]	; (80062fc <_sbrk+0x64>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d102      	bne.n	80062ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80062b4:	4b11      	ldr	r3, [pc, #68]	; (80062fc <_sbrk+0x64>)
 80062b6:	4a12      	ldr	r2, [pc, #72]	; (8006300 <_sbrk+0x68>)
 80062b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80062ba:	4b10      	ldr	r3, [pc, #64]	; (80062fc <_sbrk+0x64>)
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4413      	add	r3, r2
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d207      	bcs.n	80062d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80062c8:	f00d f938 	bl	801353c <__errno>
 80062cc:	4602      	mov	r2, r0
 80062ce:	230c      	movs	r3, #12
 80062d0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80062d2:	f04f 33ff 	mov.w	r3, #4294967295
 80062d6:	e009      	b.n	80062ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80062d8:	4b08      	ldr	r3, [pc, #32]	; (80062fc <_sbrk+0x64>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80062de:	4b07      	ldr	r3, [pc, #28]	; (80062fc <_sbrk+0x64>)
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4413      	add	r3, r2
 80062e6:	4a05      	ldr	r2, [pc, #20]	; (80062fc <_sbrk+0x64>)
 80062e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80062ea:	68fb      	ldr	r3, [r7, #12]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	20050000 	.word	0x20050000
 80062f8:	00000800 	.word	0x00000800
 80062fc:	200002bc 	.word	0x200002bc
 8006300:	2003ddb0 	.word	0x2003ddb0

08006304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006304:	b480      	push	{r7}
 8006306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006308:	4b08      	ldr	r3, [pc, #32]	; (800632c <SystemInit+0x28>)
 800630a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630e:	4a07      	ldr	r2, [pc, #28]	; (800632c <SystemInit+0x28>)
 8006310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006318:	4b04      	ldr	r3, [pc, #16]	; (800632c <SystemInit+0x28>)
 800631a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800631e:	609a      	str	r2, [r3, #8]
#endif
}
 8006320:	bf00      	nop
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	e000ed00 	.word	0xe000ed00

08006330 <batteryLowMode>:
float mon_v, mon_w;
uint16_t mon_cnt;
float mon_zg, mon_offset;

void batteryLowMode()
{
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
	lcd_clear();
 8006334:	f7fa feb4 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8006338:	2100      	movs	r1, #0
 800633a:	2000      	movs	r0, #0
 800633c:	f7fa fec0 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 8006340:	4814      	ldr	r0, [pc, #80]	; (8006394 <batteryLowMode+0x64>)
 8006342:	f7fa fee7 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8006346:	2101      	movs	r1, #1
 8006348:	2000      	movs	r0, #0
 800634a:	f7fa feb9 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 800634e:	4812      	ldr	r0, [pc, #72]	; (8006398 <batteryLowMode+0x68>)
 8006350:	f7fa fee0 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 8006354:	2152      	movs	r1, #82	; 0x52
 8006356:	4811      	ldr	r0, [pc, #68]	; (800639c <batteryLowMode+0x6c>)
 8006358:	f7fb fdc0 	bl	8001edc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800635c:	2064      	movs	r0, #100	; 0x64
 800635e:	f001 fba1 	bl	8007aa4 <HAL_Delay>
		led.fullColor('Y');
 8006362:	2159      	movs	r1, #89	; 0x59
 8006364:	480d      	ldr	r0, [pc, #52]	; (800639c <batteryLowMode+0x6c>)
 8006366:	f7fb fdb9 	bl	8001edc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800636a:	2064      	movs	r0, #100	; 0x64
 800636c:	f001 fb9a 	bl	8007aa4 <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 8006370:	480b      	ldr	r0, [pc, #44]	; (80063a0 <batteryLowMode+0x70>)
 8006372:	f7fb fd4f 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006376:	4603      	mov	r3, r0
 8006378:	2b02      	cmp	r3, #2
 800637a:	bf0c      	ite	eq
 800637c:	2301      	moveq	r3, #1
 800637e:	2300      	movne	r3, #0
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d0e6      	beq.n	8006354 <batteryLowMode+0x24>
			HAL_Delay(500);
 8006386:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800638a:	f001 fb8b 	bl	8007aa4 <HAL_Delay>
			break;
 800638e:	bf00      	nop
		}
	}
}
 8006390:	bf00      	nop
 8006392:	bd80      	pop	{r7, pc}
 8006394:	08017cd0 	.word	0x08017cd0
 8006398:	08017cd8 	.word	0x08017cd8
 800639c:	200005cc 	.word	0x200005cc
 80063a0:	200005c0 	.word	0x200005c0

080063a4 <cppInit>:

void cppInit(void)
{
 80063a4:	b598      	push	{r3, r4, r7, lr}
 80063a6:	af00      	add	r7, sp, #0
	lcd_init();
 80063a8:	f7fa fe36 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 80063ac:	483e      	ldr	r0, [pc, #248]	; (80064a8 <cppInit+0x104>)
 80063ae:	f7fd fd9d 	bl	8003eec <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 80063b2:	2064      	movs	r0, #100	; 0x64
 80063b4:	f001 fb76 	bl	8007aa4 <HAL_Delay>
	power_sensor.updateValues();
 80063b8:	483b      	ldr	r0, [pc, #236]	; (80064a8 <cppInit+0x104>)
 80063ba:	f7fd fda5 	bl	8003f08 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 80063be:	f7fa fe6f 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80063c2:	2100      	movs	r1, #0
 80063c4:	2000      	movs	r0, #0
 80063c6:	f7fa fe7b 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 80063ca:	4838      	ldr	r0, [pc, #224]	; (80064ac <cppInit+0x108>)
 80063cc:	f7fa fea2 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80063d0:	2101      	movs	r1, #1
 80063d2:	2000      	movs	r0, #0
 80063d4:	f7fa fe74 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 80063d8:	4833      	ldr	r0, [pc, #204]	; (80064a8 <cppInit+0x104>)
 80063da:	f7fd fdbf 	bl	8003f5c <_ZN11PowerSensor17getButteryVoltageEv>
 80063de:	ee10 3a10 	vmov	r3, s0
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fa f8c8 	bl	8000578 <__aeabi_f2d>
 80063e8:	4603      	mov	r3, r0
 80063ea:	460c      	mov	r4, r1
 80063ec:	461a      	mov	r2, r3
 80063ee:	4623      	mov	r3, r4
 80063f0:	482f      	ldr	r0, [pc, #188]	; (80064b0 <cppInit+0x10c>)
 80063f2:	f7fa fe8f 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 80063f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80063fa:	f001 fb53 	bl	8007aa4 <HAL_Delay>

	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 80063fe:	482a      	ldr	r0, [pc, #168]	; (80064a8 <cppInit+0x104>)
 8006400:	f7fd fdbe 	bl	8003f80 <_ZN11PowerSensor12butteryCheckEv>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <cppInit+0x6a>
 800640a:	f7ff ff91 	bl	8006330 <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 800640e:	4829      	ldr	r0, [pc, #164]	; (80064b4 <cppInit+0x110>)
 8006410:	f7fc ffbe 	bl	8003390 <_ZN6Logger10sdCardInitEv>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d007      	beq.n	800642a <cppInit+0x86>
		led.fullColor('G');
 800641a:	2147      	movs	r1, #71	; 0x47
 800641c:	4826      	ldr	r0, [pc, #152]	; (80064b8 <cppInit+0x114>)
 800641e:	f7fb fd5d 	bl	8001edc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8006422:	2064      	movs	r0, #100	; 0x64
 8006424:	f001 fb3e 	bl	8007aa4 <HAL_Delay>
 8006428:	e006      	b.n	8006438 <cppInit+0x94>
	}
	else{ //sd mount fali
		led.fullColor('R');
 800642a:	2152      	movs	r1, #82	; 0x52
 800642c:	4822      	ldr	r0, [pc, #136]	; (80064b8 <cppInit+0x114>)
 800642e:	f7fb fd55 	bl	8001edc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8006432:	2064      	movs	r0, #100	; 0x64
 8006434:	f001 fb36 	bl	8007aa4 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8006438:	4820      	ldr	r0, [pc, #128]	; (80064bc <cppInit+0x118>)
 800643a:	f7fb feab 	bl	8002194 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800643e:	4820      	ldr	r0, [pc, #128]	; (80064c0 <cppInit+0x11c>)
 8006440:	f7fd f9ea 	bl	8003818 <_ZN5Motor4initEv>
	encoder.init();
 8006444:	481f      	ldr	r0, [pc, #124]	; (80064c4 <cppInit+0x120>)
 8006446:	f7fa feb1 	bl	80011ac <_ZN7Encoder4initEv>
	imu.init();
 800644a:	481f      	ldr	r0, [pc, #124]	; (80064c8 <cppInit+0x124>)
 800644c:	f7fb fb04 	bl	8001a58 <_ZN3IMU4initEv>
	line_trace.init();
 8006450:	481e      	ldr	r0, [pc, #120]	; (80064cc <cppInit+0x128>)
 8006452:	f7fc fcef 	bl	8002e34 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8006456:	4819      	ldr	r0, [pc, #100]	; (80064bc <cppInit+0x118>)
 8006458:	f7fb ffdc 	bl	8002414 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 800645c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006460:	f001 fb20 	bl	8007aa4 <HAL_Delay>

	led.fullColor('M');
 8006464:	214d      	movs	r1, #77	; 0x4d
 8006466:	4814      	ldr	r0, [pc, #80]	; (80064b8 <cppInit+0x114>)
 8006468:	f7fb fd38 	bl	8001edc <_ZN3LED9fullColorEc>
	imu.calibration();
 800646c:	4816      	ldr	r0, [pc, #88]	; (80064c8 <cppInit+0x124>)
 800646e:	f7fb fbbd 	bl	8001bec <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 8006472:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80064d0 <cppInit+0x12c>
 8006476:	eddf 0a17 	vldr	s1, [pc, #92]	; 80064d4 <cppInit+0x130>
 800647a:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80064d8 <cppInit+0x134>
 800647e:	4817      	ldr	r0, [pc, #92]	; (80064dc <cppInit+0x138>)
 8006480:	f7fe f99a 	bl	80047b8 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 8006484:	ed9f 1a16 	vldr	s2, [pc, #88]	; 80064e0 <cppInit+0x13c>
 8006488:	eddf 0a16 	vldr	s1, [pc, #88]	; 80064e4 <cppInit+0x140>
 800648c:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80064e8 <cppInit+0x144>
 8006490:	4812      	ldr	r0, [pc, #72]	; (80064dc <cppInit+0x138>)
 8006492:	f7fe f9aa 	bl	80047ea <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 8006496:	4815      	ldr	r0, [pc, #84]	; (80064ec <cppInit+0x148>)
 8006498:	f7fd fbf6 	bl	8003c88 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 800649c:	4814      	ldr	r0, [pc, #80]	; (80064f0 <cppInit+0x14c>)
 800649e:	f7fd fc8d 	bl	8003dbc <_ZN13PathFollowing4initEv>

}
 80064a2:	bf00      	nop
 80064a4:	bd98      	pop	{r3, r4, r7, pc}
 80064a6:	bf00      	nop
 80064a8:	200005d0 	.word	0x200005d0
 80064ac:	08017cdc 	.word	0x08017cdc
 80064b0:	08017ce4 	.word	0x08017ce4
 80064b4:	200005f0 	.word	0x200005f0
 80064b8:	200005cc 	.word	0x200005cc
 80064bc:	200002c0 	.word	0x200002c0
 80064c0:	200005c8 	.word	0x200005c8
 80064c4:	20015db8 	.word	0x20015db8
 80064c8:	200005dc 	.word	0x200005dc
 80064cc:	20015e58 	.word	0x20015e58
 80064d0:	3cceca68 	.word	0x3cceca68
 80064d4:	4180f06f 	.word	0x4180f06f
 80064d8:	3fea2d0e 	.word	0x3fea2d0e
 80064dc:	20015dd8 	.word	0x20015dd8
 80064e0:	3ab7dacd 	.word	0x3ab7dacd
 80064e4:	3f5e3fbc 	.word	0x3f5e3fbc
 80064e8:	3d8eefa2 	.word	0x3d8eefa2
 80064ec:	20015e18 	.word	0x20015e18
 80064f0:	20021c70 	.word	0x20021c70

080064f4 <cppFlip1ms>:

void cppFlip1ms(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 80064f8:	4819      	ldr	r0, [pc, #100]	; (8006560 <cppFlip1ms+0x6c>)
 80064fa:	f7fb fea9 	bl	8002250 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 80064fe:	4819      	ldr	r0, [pc, #100]	; (8006564 <cppFlip1ms+0x70>)
 8006500:	f7fb fad2 	bl	8001aa8 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8006504:	4818      	ldr	r0, [pc, #96]	; (8006568 <cppFlip1ms+0x74>)
 8006506:	f7fa fe73 	bl	80011f0 <_ZN7Encoder6updateEv>

	line_trace.flip();
 800650a:	4818      	ldr	r0, [pc, #96]	; (800656c <cppFlip1ms+0x78>)
 800650c:	f7fc fd2a 	bl	8002f64 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8006510:	4817      	ldr	r0, [pc, #92]	; (8006570 <cppFlip1ms+0x7c>)
 8006512:	f7fe f983 	bl	800481c <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8006516:	4817      	ldr	r0, [pc, #92]	; (8006574 <cppFlip1ms+0x80>)
 8006518:	f7fd fb9a 	bl	8003c50 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 800651c:	4816      	ldr	r0, [pc, #88]	; (8006578 <cppFlip1ms+0x84>)
 800651e:	f7fd fdc7 	bl	80040b0 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8006522:	4816      	ldr	r0, [pc, #88]	; (800657c <cppFlip1ms+0x88>)
 8006524:	f7fd f98a 	bl	800383c <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8006528:	4b15      	ldr	r3, [pc, #84]	; (8006580 <cppFlip1ms+0x8c>)
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	3301      	adds	r3, #1
 800652e:	b29a      	uxth	r2, r3
 8006530:	4b13      	ldr	r3, [pc, #76]	; (8006580 <cppFlip1ms+0x8c>)
 8006532:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8006534:	4b12      	ldr	r3, [pc, #72]	; (8006580 <cppFlip1ms+0x8c>)
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d90c      	bls.n	8006556 <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 800653c:	4809      	ldr	r0, [pc, #36]	; (8006564 <cppFlip1ms+0x70>)
 800653e:	f7fb fb0b 	bl	8001b58 <_ZN3IMU8getOmegaEv>
 8006542:	eef0 7a40 	vmov.f32	s15, s0
 8006546:	eeb0 0a67 	vmov.f32	s0, s15
 800654a:	480e      	ldr	r0, [pc, #56]	; (8006584 <cppFlip1ms+0x90>)
 800654c:	f7fd ff06 	bl	800435c <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 8006550:	4b0b      	ldr	r3, [pc, #44]	; (8006580 <cppFlip1ms+0x8c>)
 8006552:	2200      	movs	r2, #0
 8006554:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8006556:	4804      	ldr	r0, [pc, #16]	; (8006568 <cppFlip1ms+0x74>)
 8006558:	f7fa ff34 	bl	80013c4 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 800655c:	bf00      	nop
 800655e:	bd80      	pop	{r7, pc}
 8006560:	200002c0 	.word	0x200002c0
 8006564:	200005dc 	.word	0x200005dc
 8006568:	20015db8 	.word	0x20015db8
 800656c:	20015e58 	.word	0x20015e58
 8006570:	20015dd8 	.word	0x20015dd8
 8006574:	20015e18 	.word	0x20015e18
 8006578:	200005b8 	.word	0x200005b8
 800657c:	200005c8 	.word	0x200005c8
 8006580:	2003939a 	.word	0x2003939a
 8006584:	20021a60 	.word	0x20021a60

08006588 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 800658c:	4802      	ldr	r0, [pc, #8]	; (8006598 <cppFlip100ns+0x10>)
 800658e:	f7fb fe11 	bl	80021b4 <_ZN10LineSensor17storeSensorValuesEv>
	//line_trace.flip100ns();
}
 8006592:	bf00      	nop
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	200002c0 	.word	0x200002c0

0800659c <cppFlip10ms>:

void cppFlip10ms(void)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 80065a0:	4b0a      	ldr	r3, [pc, #40]	; (80065cc <cppFlip10ms+0x30>)
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	3301      	adds	r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	4b08      	ldr	r3, [pc, #32]	; (80065cc <cppFlip10ms+0x30>)
 80065aa:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 80065ac:	4b07      	ldr	r3, [pc, #28]	; (80065cc <cppFlip10ms+0x30>)
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	2b06      	cmp	r3, #6
 80065b2:	d905      	bls.n	80065c0 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 80065b4:	4806      	ldr	r0, [pc, #24]	; (80065d0 <cppFlip10ms+0x34>)
 80065b6:	f7fd ff0d 	bl	80043d4 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 80065ba:	4b04      	ldr	r3, [pc, #16]	; (80065cc <cppFlip10ms+0x30>)
 80065bc:	2200      	movs	r2, #0
 80065be:	801a      	strh	r2, [r3, #0]
	}

	mon_cnt = twice_cnt;
 80065c0:	4b02      	ldr	r3, [pc, #8]	; (80065cc <cppFlip10ms+0x30>)
 80065c2:	881a      	ldrh	r2, [r3, #0]
 80065c4:	4b03      	ldr	r3, [pc, #12]	; (80065d4 <cppFlip10ms+0x38>)
 80065c6:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 80065c8:	bf00      	nop
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	2003939c 	.word	0x2003939c
 80065d0:	20021a60 	.word	0x20021a60
 80065d4:	20039398 	.word	0x20039398

080065d8 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 80065d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80065dc:	b08b      	sub	sp, #44	; 0x2c
 80065de:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 80065e0:	48bf      	ldr	r0, [pc, #764]	; (80068e0 <cppLoop+0x308>)
 80065e2:	f7fd fcff 	bl	8003fe4 <_ZN12RotarySwitch8getValueEv>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b0f      	cmp	r3, #15
 80065ea:	f201 80f7 	bhi.w	80077dc <cppLoop+0x1204>
 80065ee:	a201      	add	r2, pc, #4	; (adr r2, 80065f4 <cppLoop+0x1c>)
 80065f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f4:	08006635 	.word	0x08006635
 80065f8:	08006b0f 	.word	0x08006b0f
 80065fc:	08006b8b 	.word	0x08006b8b
 8006600:	08006c59 	.word	0x08006c59
 8006604:	08006d09 	.word	0x08006d09
 8006608:	08006d97 	.word	0x08006d97
 800660c:	08006e57 	.word	0x08006e57
 8006610:	08006f65 	.word	0x08006f65
 8006614:	08007005 	.word	0x08007005
 8006618:	0800753d 	.word	0x0800753d
 800661c:	080075d9 	.word	0x080075d9
 8006620:	08007673 	.word	0x08007673
 8006624:	080076db 	.word	0x080076db
 8006628:	0800775f 	.word	0x0800775f
 800662c:	08007789 	.word	0x08007789
 8006630:	080077b3 	.word	0x080077b3
	static int16_t selector;

	case 0:
		led.fullColor('R');
 8006634:	2152      	movs	r1, #82	; 0x52
 8006636:	48ab      	ldr	r0, [pc, #684]	; (80068e4 <cppLoop+0x30c>)
 8006638:	f7fb fc50 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 800663c:	f7fa fd30 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006640:	2100      	movs	r1, #0
 8006642:	2000      	movs	r0, #0
 8006644:	f7fa fd3c 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8006648:	48a7      	ldr	r0, [pc, #668]	; (80068e8 <cppLoop+0x310>)
 800664a:	f7fc fc40 	bl	8002ece <_ZN9LineTrace5getKpEv>
 800664e:	eeb0 7a40 	vmov.f32	s14, s0
 8006652:	eddf 7aa6 	vldr	s15, [pc, #664]	; 80068ec <cppLoop+0x314>
 8006656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800665a:	ee17 0a90 	vmov	r0, s15
 800665e:	f7f9 ff8b 	bl	8000578 <__aeabi_f2d>
 8006662:	4603      	mov	r3, r0
 8006664:	460c      	mov	r4, r1
 8006666:	461a      	mov	r2, r3
 8006668:	4623      	mov	r3, r4
 800666a:	48a1      	ldr	r0, [pc, #644]	; (80068f0 <cppLoop+0x318>)
 800666c:	f7fa fd52 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006670:	2101      	movs	r1, #1
 8006672:	2000      	movs	r0, #0
 8006674:	f7fa fd24 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8006678:	489b      	ldr	r0, [pc, #620]	; (80068e8 <cppLoop+0x310>)
 800667a:	f7fc fc37 	bl	8002eec <_ZN9LineTrace5getKiEv>
 800667e:	eeb0 7a40 	vmov.f32	s14, s0
 8006682:	eddf 7a9c 	vldr	s15, [pc, #624]	; 80068f4 <cppLoop+0x31c>
 8006686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800668a:	ee17 0a90 	vmov	r0, s15
 800668e:	f7f9 ff73 	bl	8000578 <__aeabi_f2d>
 8006692:	4605      	mov	r5, r0
 8006694:	460e      	mov	r6, r1
 8006696:	4894      	ldr	r0, [pc, #592]	; (80068e8 <cppLoop+0x310>)
 8006698:	f7fc fc37 	bl	8002f0a <_ZN9LineTrace5getKdEv>
 800669c:	eeb0 7a40 	vmov.f32	s14, s0
 80066a0:	eddf 7a95 	vldr	s15, [pc, #596]	; 80068f8 <cppLoop+0x320>
 80066a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066a8:	ee17 0a90 	vmov	r0, s15
 80066ac:	f7f9 ff64 	bl	8000578 <__aeabi_f2d>
 80066b0:	4603      	mov	r3, r0
 80066b2:	460c      	mov	r4, r1
 80066b4:	e9cd 3400 	strd	r3, r4, [sp]
 80066b8:	462a      	mov	r2, r5
 80066ba:	4633      	mov	r3, r6
 80066bc:	488f      	ldr	r0, [pc, #572]	; (80068fc <cppLoop+0x324>)
 80066be:	f7fa fd29 	bl	8001114 <lcd_printf>

		static float adj_kp = line_trace.getKp();
 80066c2:	4b8f      	ldr	r3, [pc, #572]	; (8006900 <cppLoop+0x328>)
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	f3bf 8f5b 	dmb	ish
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	bf0c      	ite	eq
 80066d4:	2301      	moveq	r3, #1
 80066d6:	2300      	movne	r3, #0
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d015      	beq.n	800670a <cppLoop+0x132>
 80066de:	4888      	ldr	r0, [pc, #544]	; (8006900 <cppLoop+0x328>)
 80066e0:	f00b fec5 	bl	801246e <__cxa_guard_acquire>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	bf14      	ite	ne
 80066ea:	2301      	movne	r3, #1
 80066ec:	2300      	moveq	r3, #0
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00a      	beq.n	800670a <cppLoop+0x132>
 80066f4:	487c      	ldr	r0, [pc, #496]	; (80068e8 <cppLoop+0x310>)
 80066f6:	f7fc fbea 	bl	8002ece <_ZN9LineTrace5getKpEv>
 80066fa:	eef0 7a40 	vmov.f32	s15, s0
 80066fe:	4b81      	ldr	r3, [pc, #516]	; (8006904 <cppLoop+0x32c>)
 8006700:	edc3 7a00 	vstr	s15, [r3]
 8006704:	487e      	ldr	r0, [pc, #504]	; (8006900 <cppLoop+0x328>)
 8006706:	f00b febe 	bl	8012486 <__cxa_guard_release>
		static float adj_ki = line_trace.getKi();
 800670a:	4b7f      	ldr	r3, [pc, #508]	; (8006908 <cppLoop+0x330>)
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	f3bf 8f5b 	dmb	ish
 8006712:	b2db      	uxtb	r3, r3
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	bf0c      	ite	eq
 800671c:	2301      	moveq	r3, #1
 800671e:	2300      	movne	r3, #0
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d015      	beq.n	8006752 <cppLoop+0x17a>
 8006726:	4878      	ldr	r0, [pc, #480]	; (8006908 <cppLoop+0x330>)
 8006728:	f00b fea1 	bl	801246e <__cxa_guard_acquire>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	bf14      	ite	ne
 8006732:	2301      	movne	r3, #1
 8006734:	2300      	moveq	r3, #0
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00a      	beq.n	8006752 <cppLoop+0x17a>
 800673c:	486a      	ldr	r0, [pc, #424]	; (80068e8 <cppLoop+0x310>)
 800673e:	f7fc fbd5 	bl	8002eec <_ZN9LineTrace5getKiEv>
 8006742:	eef0 7a40 	vmov.f32	s15, s0
 8006746:	4b71      	ldr	r3, [pc, #452]	; (800690c <cppLoop+0x334>)
 8006748:	edc3 7a00 	vstr	s15, [r3]
 800674c:	486e      	ldr	r0, [pc, #440]	; (8006908 <cppLoop+0x330>)
 800674e:	f00b fe9a 	bl	8012486 <__cxa_guard_release>
		static float adj_kd = line_trace.getKd();
 8006752:	4b6f      	ldr	r3, [pc, #444]	; (8006910 <cppLoop+0x338>)
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	f3bf 8f5b 	dmb	ish
 800675a:	b2db      	uxtb	r3, r3
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b00      	cmp	r3, #0
 8006762:	bf0c      	ite	eq
 8006764:	2301      	moveq	r3, #1
 8006766:	2300      	movne	r3, #0
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d015      	beq.n	800679a <cppLoop+0x1c2>
 800676e:	4868      	ldr	r0, [pc, #416]	; (8006910 <cppLoop+0x338>)
 8006770:	f00b fe7d 	bl	801246e <__cxa_guard_acquire>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	bf14      	ite	ne
 800677a:	2301      	movne	r3, #1
 800677c:	2300      	moveq	r3, #0
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00a      	beq.n	800679a <cppLoop+0x1c2>
 8006784:	4858      	ldr	r0, [pc, #352]	; (80068e8 <cppLoop+0x310>)
 8006786:	f7fc fbc0 	bl	8002f0a <_ZN9LineTrace5getKdEv>
 800678a:	eef0 7a40 	vmov.f32	s15, s0
 800678e:	4b61      	ldr	r3, [pc, #388]	; (8006914 <cppLoop+0x33c>)
 8006790:	edc3 7a00 	vstr	s15, [r3]
 8006794:	485e      	ldr	r0, [pc, #376]	; (8006910 <cppLoop+0x338>)
 8006796:	f00b fe76 	bl	8012486 <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 800679a:	485f      	ldr	r0, [pc, #380]	; (8006918 <cppLoop+0x340>)
 800679c:	f7fb fb3a 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b08      	cmp	r3, #8
 80067a4:	bf0c      	ite	eq
 80067a6:	2301      	moveq	r3, #1
 80067a8:	2300      	movne	r3, #0
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d022      	beq.n	80067f6 <cppLoop+0x21e>
			led.LR(-1, 1);
 80067b0:	2201      	movs	r2, #1
 80067b2:	f04f 31ff 	mov.w	r1, #4294967295
 80067b6:	484b      	ldr	r0, [pc, #300]	; (80068e4 <cppLoop+0x30c>)
 80067b8:	f7fb fc4c 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80067bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80067c0:	f001 f970 	bl	8007aa4 <HAL_Delay>

			selector++;
 80067c4:	4b55      	ldr	r3, [pc, #340]	; (800691c <cppLoop+0x344>)
 80067c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	3301      	adds	r3, #1
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	b21a      	sxth	r2, r3
 80067d2:	4b52      	ldr	r3, [pc, #328]	; (800691c <cppLoop+0x344>)
 80067d4:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80067d6:	4b51      	ldr	r3, [pc, #324]	; (800691c <cppLoop+0x344>)
 80067d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067dc:	2b02      	cmp	r3, #2
 80067de:	dd02      	ble.n	80067e6 <cppLoop+0x20e>
 80067e0:	4b4e      	ldr	r3, [pc, #312]	; (800691c <cppLoop+0x344>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80067e6:	2200      	movs	r2, #0
 80067e8:	f04f 31ff 	mov.w	r1, #4294967295
 80067ec:	483d      	ldr	r0, [pc, #244]	; (80068e4 <cppLoop+0x30c>)
 80067ee:	f7fb fc31 	bl	8002054 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 80067f2:	f000 bff5 	b.w	80077e0 <cppLoop+0x1208>
		else if(joy_stick.getValue() == JOY_R){
 80067f6:	4848      	ldr	r0, [pc, #288]	; (8006918 <cppLoop+0x340>)
 80067f8:	f7fb fb0c 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b10      	cmp	r3, #16
 8006800:	bf0c      	ite	eq
 8006802:	2301      	moveq	r3, #1
 8006804:	2300      	movne	r3, #0
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 8089 	beq.w	8006920 <cppLoop+0x348>
			led.LR(-1, 1);
 800680e:	2201      	movs	r2, #1
 8006810:	f04f 31ff 	mov.w	r1, #4294967295
 8006814:	4833      	ldr	r0, [pc, #204]	; (80068e4 <cppLoop+0x30c>)
 8006816:	f7fb fc1d 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800681a:	2064      	movs	r0, #100	; 0x64
 800681c:	f001 f942 	bl	8007aa4 <HAL_Delay>
			if(selector == 0){
 8006820:	4b3e      	ldr	r3, [pc, #248]	; (800691c <cppLoop+0x344>)
 8006822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d113      	bne.n	8006852 <cppLoop+0x27a>
				adj_kp = adj_kp + 0.00001;
 800682a:	4b36      	ldr	r3, [pc, #216]	; (8006904 <cppLoop+0x32c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4618      	mov	r0, r3
 8006830:	f7f9 fea2 	bl	8000578 <__aeabi_f2d>
 8006834:	a324      	add	r3, pc, #144	; (adr r3, 80068c8 <cppLoop+0x2f0>)
 8006836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683a:	f7f9 fd3f 	bl	80002bc <__adddf3>
 800683e:	4603      	mov	r3, r0
 8006840:	460c      	mov	r4, r1
 8006842:	4618      	mov	r0, r3
 8006844:	4621      	mov	r1, r4
 8006846:	f7fa f9e7 	bl	8000c18 <__aeabi_d2f>
 800684a:	4602      	mov	r2, r0
 800684c:	4b2d      	ldr	r3, [pc, #180]	; (8006904 <cppLoop+0x32c>)
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	e02b      	b.n	80068aa <cppLoop+0x2d2>
			else if(selector == 1){
 8006852:	4b32      	ldr	r3, [pc, #200]	; (800691c <cppLoop+0x344>)
 8006854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d113      	bne.n	8006884 <cppLoop+0x2ac>
				adj_ki = adj_ki + 0.0001;
 800685c:	4b2b      	ldr	r3, [pc, #172]	; (800690c <cppLoop+0x334>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4618      	mov	r0, r3
 8006862:	f7f9 fe89 	bl	8000578 <__aeabi_f2d>
 8006866:	a31a      	add	r3, pc, #104	; (adr r3, 80068d0 <cppLoop+0x2f8>)
 8006868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686c:	f7f9 fd26 	bl	80002bc <__adddf3>
 8006870:	4603      	mov	r3, r0
 8006872:	460c      	mov	r4, r1
 8006874:	4618      	mov	r0, r3
 8006876:	4621      	mov	r1, r4
 8006878:	f7fa f9ce 	bl	8000c18 <__aeabi_d2f>
 800687c:	4602      	mov	r2, r0
 800687e:	4b23      	ldr	r3, [pc, #140]	; (800690c <cppLoop+0x334>)
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	e012      	b.n	80068aa <cppLoop+0x2d2>
				adj_kd = adj_kd + 0.000001;
 8006884:	4b23      	ldr	r3, [pc, #140]	; (8006914 <cppLoop+0x33c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4618      	mov	r0, r3
 800688a:	f7f9 fe75 	bl	8000578 <__aeabi_f2d>
 800688e:	a312      	add	r3, pc, #72	; (adr r3, 80068d8 <cppLoop+0x300>)
 8006890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006894:	f7f9 fd12 	bl	80002bc <__adddf3>
 8006898:	4603      	mov	r3, r0
 800689a:	460c      	mov	r4, r1
 800689c:	4618      	mov	r0, r3
 800689e:	4621      	mov	r1, r4
 80068a0:	f7fa f9ba 	bl	8000c18 <__aeabi_d2f>
 80068a4:	4602      	mov	r2, r0
 80068a6:	4b1b      	ldr	r3, [pc, #108]	; (8006914 <cppLoop+0x33c>)
 80068a8:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80068aa:	2152      	movs	r1, #82	; 0x52
 80068ac:	480d      	ldr	r0, [pc, #52]	; (80068e4 <cppLoop+0x30c>)
 80068ae:	f7fb fb15 	bl	8001edc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80068b2:	2200      	movs	r2, #0
 80068b4:	f04f 31ff 	mov.w	r1, #4294967295
 80068b8:	480a      	ldr	r0, [pc, #40]	; (80068e4 <cppLoop+0x30c>)
 80068ba:	f7fb fbcb 	bl	8002054 <_ZN3LED2LREaa>
		break;
 80068be:	f000 bf8f 	b.w	80077e0 <cppLoop+0x1208>
 80068c2:	bf00      	nop
 80068c4:	f3af 8000 	nop.w
 80068c8:	88e368f1 	.word	0x88e368f1
 80068cc:	3ee4f8b5 	.word	0x3ee4f8b5
 80068d0:	eb1c432d 	.word	0xeb1c432d
 80068d4:	3f1a36e2 	.word	0x3f1a36e2
 80068d8:	a0b5ed8d 	.word	0xa0b5ed8d
 80068dc:	3eb0c6f7 	.word	0x3eb0c6f7
 80068e0:	200005c4 	.word	0x200005c4
 80068e4:	200005cc 	.word	0x200005cc
 80068e8:	20015e58 	.word	0x20015e58
 80068ec:	447a0000 	.word	0x447a0000
 80068f0:	08017ce8 	.word	0x08017ce8
 80068f4:	42c80000 	.word	0x42c80000
 80068f8:	461c4000 	.word	0x461c4000
 80068fc:	08017cf4 	.word	0x08017cf4
 8006900:	200393a4 	.word	0x200393a4
 8006904:	200393a0 	.word	0x200393a0
 8006908:	200393ac 	.word	0x200393ac
 800690c:	200393a8 	.word	0x200393a8
 8006910:	200393b4 	.word	0x200393b4
 8006914:	200393b0 	.word	0x200393b0
 8006918:	200005c0 	.word	0x200005c0
 800691c:	2003939e 	.word	0x2003939e
		else if(joy_stick.getValue() == JOY_L){
 8006920:	48bf      	ldr	r0, [pc, #764]	; (8006c20 <cppLoop+0x648>)
 8006922:	f7fb fa77 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006926:	4603      	mov	r3, r0
 8006928:	2b01      	cmp	r3, #1
 800692a:	bf0c      	ite	eq
 800692c:	2301      	moveq	r3, #1
 800692e:	2300      	movne	r3, #0
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d059      	beq.n	80069ea <cppLoop+0x412>
			led.LR(-1, 1);
 8006936:	2201      	movs	r2, #1
 8006938:	f04f 31ff 	mov.w	r1, #4294967295
 800693c:	48b9      	ldr	r0, [pc, #740]	; (8006c24 <cppLoop+0x64c>)
 800693e:	f7fb fb89 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006942:	2064      	movs	r0, #100	; 0x64
 8006944:	f001 f8ae 	bl	8007aa4 <HAL_Delay>
			if(selector == 0){
 8006948:	4bb7      	ldr	r3, [pc, #732]	; (8006c28 <cppLoop+0x650>)
 800694a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d113      	bne.n	800697a <cppLoop+0x3a2>
				adj_kp = adj_kp - 0.00001;
 8006952:	4bb6      	ldr	r3, [pc, #728]	; (8006c2c <cppLoop+0x654>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4618      	mov	r0, r3
 8006958:	f7f9 fe0e 	bl	8000578 <__aeabi_f2d>
 800695c:	a3aa      	add	r3, pc, #680	; (adr r3, 8006c08 <cppLoop+0x630>)
 800695e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006962:	f7f9 fca9 	bl	80002b8 <__aeabi_dsub>
 8006966:	4603      	mov	r3, r0
 8006968:	460c      	mov	r4, r1
 800696a:	4618      	mov	r0, r3
 800696c:	4621      	mov	r1, r4
 800696e:	f7fa f953 	bl	8000c18 <__aeabi_d2f>
 8006972:	4602      	mov	r2, r0
 8006974:	4bad      	ldr	r3, [pc, #692]	; (8006c2c <cppLoop+0x654>)
 8006976:	601a      	str	r2, [r3, #0]
 8006978:	e02b      	b.n	80069d2 <cppLoop+0x3fa>
			else if(selector == 1){
 800697a:	4bab      	ldr	r3, [pc, #684]	; (8006c28 <cppLoop+0x650>)
 800697c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d113      	bne.n	80069ac <cppLoop+0x3d4>
				adj_ki = adj_ki - 0.0001;
 8006984:	4baa      	ldr	r3, [pc, #680]	; (8006c30 <cppLoop+0x658>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4618      	mov	r0, r3
 800698a:	f7f9 fdf5 	bl	8000578 <__aeabi_f2d>
 800698e:	a3a0      	add	r3, pc, #640	; (adr r3, 8006c10 <cppLoop+0x638>)
 8006990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006994:	f7f9 fc90 	bl	80002b8 <__aeabi_dsub>
 8006998:	4603      	mov	r3, r0
 800699a:	460c      	mov	r4, r1
 800699c:	4618      	mov	r0, r3
 800699e:	4621      	mov	r1, r4
 80069a0:	f7fa f93a 	bl	8000c18 <__aeabi_d2f>
 80069a4:	4602      	mov	r2, r0
 80069a6:	4ba2      	ldr	r3, [pc, #648]	; (8006c30 <cppLoop+0x658>)
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	e012      	b.n	80069d2 <cppLoop+0x3fa>
				adj_kd = adj_kd - 0.000001;
 80069ac:	4ba1      	ldr	r3, [pc, #644]	; (8006c34 <cppLoop+0x65c>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7f9 fde1 	bl	8000578 <__aeabi_f2d>
 80069b6:	a398      	add	r3, pc, #608	; (adr r3, 8006c18 <cppLoop+0x640>)
 80069b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069bc:	f7f9 fc7c 	bl	80002b8 <__aeabi_dsub>
 80069c0:	4603      	mov	r3, r0
 80069c2:	460c      	mov	r4, r1
 80069c4:	4618      	mov	r0, r3
 80069c6:	4621      	mov	r1, r4
 80069c8:	f7fa f926 	bl	8000c18 <__aeabi_d2f>
 80069cc:	4602      	mov	r2, r0
 80069ce:	4b99      	ldr	r3, [pc, #612]	; (8006c34 <cppLoop+0x65c>)
 80069d0:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80069d2:	2152      	movs	r1, #82	; 0x52
 80069d4:	4893      	ldr	r0, [pc, #588]	; (8006c24 <cppLoop+0x64c>)
 80069d6:	f7fb fa81 	bl	8001edc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80069da:	2200      	movs	r2, #0
 80069dc:	f04f 31ff 	mov.w	r1, #4294967295
 80069e0:	4890      	ldr	r0, [pc, #576]	; (8006c24 <cppLoop+0x64c>)
 80069e2:	f7fb fb37 	bl	8002054 <_ZN3LED2LREaa>
		break;
 80069e6:	f000 befb 	b.w	80077e0 <cppLoop+0x1208>
		else if(joy_stick.getValue() == JOY_D){
 80069ea:	488d      	ldr	r0, [pc, #564]	; (8006c20 <cppLoop+0x648>)
 80069ec:	f7fb fa12 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	bf0c      	ite	eq
 80069f6:	2301      	moveq	r3, #1
 80069f8:	2300      	movne	r3, #0
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d03e      	beq.n	8006a7e <cppLoop+0x4a6>
			led.LR(-1, 1);
 8006a00:	2201      	movs	r2, #1
 8006a02:	f04f 31ff 	mov.w	r1, #4294967295
 8006a06:	4887      	ldr	r0, [pc, #540]	; (8006c24 <cppLoop+0x64c>)
 8006a08:	f7fb fb24 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006a0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006a10:	f001 f848 	bl	8007aa4 <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8006a14:	f107 031c 	add.w	r3, r7, #28
 8006a18:	2201      	movs	r2, #1
 8006a1a:	4987      	ldr	r1, [pc, #540]	; (8006c38 <cppLoop+0x660>)
 8006a1c:	4887      	ldr	r0, [pc, #540]	; (8006c3c <cppLoop+0x664>)
 8006a1e:	f7fa fe47 	bl	80016b0 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8006a22:	f107 0318 	add.w	r3, r7, #24
 8006a26:	2201      	movs	r2, #1
 8006a28:	4985      	ldr	r1, [pc, #532]	; (8006c40 <cppLoop+0x668>)
 8006a2a:	4884      	ldr	r0, [pc, #528]	; (8006c3c <cppLoop+0x664>)
 8006a2c:	f7fa fe40 	bl	80016b0 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8006a30:	f107 0314 	add.w	r3, r7, #20
 8006a34:	2201      	movs	r2, #1
 8006a36:	4983      	ldr	r1, [pc, #524]	; (8006c44 <cppLoop+0x66c>)
 8006a38:	4880      	ldr	r0, [pc, #512]	; (8006c3c <cppLoop+0x664>)
 8006a3a:	f7fa fe39 	bl	80016b0 <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 8006a3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006a42:	ed97 7a06 	vldr	s14, [r7, #24]
 8006a46:	edd7 6a05 	vldr	s13, [r7, #20]
 8006a4a:	eeb0 1a66 	vmov.f32	s2, s13
 8006a4e:	eef0 0a47 	vmov.f32	s1, s14
 8006a52:	eeb0 0a67 	vmov.f32	s0, s15
 8006a56:	487c      	ldr	r0, [pc, #496]	; (8006c48 <cppLoop+0x670>)
 8006a58:	f7fc fa20 	bl	8002e9c <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	4a73      	ldr	r2, [pc, #460]	; (8006c2c <cppLoop+0x654>)
 8006a60:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	4a72      	ldr	r2, [pc, #456]	; (8006c30 <cppLoop+0x658>)
 8006a66:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	4a72      	ldr	r2, [pc, #456]	; (8006c34 <cppLoop+0x65c>)
 8006a6c:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f04f 31ff 	mov.w	r1, #4294967295
 8006a74:	486b      	ldr	r0, [pc, #428]	; (8006c24 <cppLoop+0x64c>)
 8006a76:	f7fb faed 	bl	8002054 <_ZN3LED2LREaa>
		break;
 8006a7a:	f000 beb1 	b.w	80077e0 <cppLoop+0x1208>
		else if(joy_stick.getValue() == JOY_C){
 8006a7e:	4868      	ldr	r0, [pc, #416]	; (8006c20 <cppLoop+0x648>)
 8006a80:	f7fb f9c8 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	bf0c      	ite	eq
 8006a8a:	2301      	moveq	r3, #1
 8006a8c:	2300      	movne	r3, #0
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 86a5 	beq.w	80077e0 <cppLoop+0x1208>
			led.LR(-1, 1);
 8006a96:	2201      	movs	r2, #1
 8006a98:	f04f 31ff 	mov.w	r1, #4294967295
 8006a9c:	4861      	ldr	r0, [pc, #388]	; (8006c24 <cppLoop+0x64c>)
 8006a9e:	f7fb fad9 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006aa2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006aa6:	f000 fffd 	bl	8007aa4 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8006aaa:	2300      	movs	r3, #0
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	4b5f      	ldr	r3, [pc, #380]	; (8006c2c <cppLoop+0x654>)
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	4961      	ldr	r1, [pc, #388]	; (8006c38 <cppLoop+0x660>)
 8006ab4:	4861      	ldr	r0, [pc, #388]	; (8006c3c <cppLoop+0x664>)
 8006ab6:	f7fa fd95 	bl	80015e4 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8006aba:	2300      	movs	r3, #0
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	4b5c      	ldr	r3, [pc, #368]	; (8006c30 <cppLoop+0x658>)
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	495f      	ldr	r1, [pc, #380]	; (8006c40 <cppLoop+0x668>)
 8006ac4:	485d      	ldr	r0, [pc, #372]	; (8006c3c <cppLoop+0x664>)
 8006ac6:	f7fa fd8d 	bl	80015e4 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8006aca:	2300      	movs	r3, #0
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	4b59      	ldr	r3, [pc, #356]	; (8006c34 <cppLoop+0x65c>)
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	495c      	ldr	r1, [pc, #368]	; (8006c44 <cppLoop+0x66c>)
 8006ad4:	4859      	ldr	r0, [pc, #356]	; (8006c3c <cppLoop+0x664>)
 8006ad6:	f7fa fd85 	bl	80015e4 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8006ada:	4b54      	ldr	r3, [pc, #336]	; (8006c2c <cppLoop+0x654>)
 8006adc:	edd3 7a00 	vldr	s15, [r3]
 8006ae0:	4b53      	ldr	r3, [pc, #332]	; (8006c30 <cppLoop+0x658>)
 8006ae2:	ed93 7a00 	vldr	s14, [r3]
 8006ae6:	4b53      	ldr	r3, [pc, #332]	; (8006c34 <cppLoop+0x65c>)
 8006ae8:	edd3 6a00 	vldr	s13, [r3]
 8006aec:	eeb0 1a66 	vmov.f32	s2, s13
 8006af0:	eef0 0a47 	vmov.f32	s1, s14
 8006af4:	eeb0 0a67 	vmov.f32	s0, s15
 8006af8:	4853      	ldr	r0, [pc, #332]	; (8006c48 <cppLoop+0x670>)
 8006afa:	f7fc f9cf 	bl	8002e9c <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8006afe:	2200      	movs	r2, #0
 8006b00:	f04f 31ff 	mov.w	r1, #4294967295
 8006b04:	4847      	ldr	r0, [pc, #284]	; (8006c24 <cppLoop+0x64c>)
 8006b06:	f7fb faa5 	bl	8002054 <_ZN3LED2LREaa>
		break;
 8006b0a:	f000 be69 	b.w	80077e0 <cppLoop+0x1208>

	case 1:
		led.fullColor('B');
 8006b0e:	2142      	movs	r1, #66	; 0x42
 8006b10:	4844      	ldr	r0, [pc, #272]	; (8006c24 <cppLoop+0x64c>)
 8006b12:	f7fb f9e3 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006b16:	f7fa fac3 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	2000      	movs	r0, #0
 8006b1e:	f7fa facf 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8006b22:	484a      	ldr	r0, [pc, #296]	; (8006c4c <cppLoop+0x674>)
 8006b24:	f7fa faf6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006b28:	2101      	movs	r1, #1
 8006b2a:	2000      	movs	r0, #0
 8006b2c:	f7fa fac8 	bl	80010c0 <lcd_locate>
		lcd_printf("trace");
 8006b30:	4847      	ldr	r0, [pc, #284]	; (8006c50 <cppLoop+0x678>)
 8006b32:	f7fa faef 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006b36:	483a      	ldr	r0, [pc, #232]	; (8006c20 <cppLoop+0x648>)
 8006b38:	f7fb f96c 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	bf0c      	ite	eq
 8006b42:	2301      	moveq	r3, #1
 8006b44:	2300      	movne	r3, #0
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 864b 	beq.w	80077e4 <cppLoop+0x120c>
			HAL_Delay(500);
 8006b4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b52:	f000 ffa7 	bl	8007aa4 <HAL_Delay>

			line_trace.setTargetVelocity(1.0);
 8006b56:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006b5a:	483b      	ldr	r0, [pc, #236]	; (8006c48 <cppLoop+0x670>)
 8006b5c:	f7fc f9f3 	bl	8002f46 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8006b60:	f04f 32ff 	mov.w	r2, #4294967295
 8006b64:	2101      	movs	r1, #1
 8006b66:	482f      	ldr	r0, [pc, #188]	; (8006c24 <cppLoop+0x64c>)
 8006b68:	f7fb fa74 	bl	8002054 <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	4836      	ldr	r0, [pc, #216]	; (8006c48 <cppLoop+0x670>)
 8006b70:	f7fc fbb2 	bl	80032d8 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8006b74:	4834      	ldr	r0, [pc, #208]	; (8006c48 <cppLoop+0x670>)
 8006b76:	f7fc fadd 	bl	8003134 <_ZN9LineTrace7runningEv>
			//HAL_Delay(3000);

			//line_trace.stop();
			led.LR(0, -1);
 8006b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b7e:	2100      	movs	r1, #0
 8006b80:	4828      	ldr	r0, [pc, #160]	; (8006c24 <cppLoop+0x64c>)
 8006b82:	f7fb fa67 	bl	8002054 <_ZN3LED2LREaa>

			//logger.stop();
		}

		break;
 8006b86:	f000 be2d 	b.w	80077e4 <cppLoop+0x120c>

	case 2:
		led.fullColor('M');
 8006b8a:	214d      	movs	r1, #77	; 0x4d
 8006b8c:	4825      	ldr	r0, [pc, #148]	; (8006c24 <cppLoop+0x64c>)
 8006b8e:	f7fb f9a5 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006b92:	f7fa fa85 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006b96:	2100      	movs	r1, #0
 8006b98:	2000      	movs	r0, #0
 8006b9a:	f7fa fa91 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8006b9e:	482b      	ldr	r0, [pc, #172]	; (8006c4c <cppLoop+0x674>)
 8006ba0:	f7fa fab8 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	f7fa fa8a 	bl	80010c0 <lcd_locate>
		lcd_printf("update");
 8006bac:	4829      	ldr	r0, [pc, #164]	; (8006c54 <cppLoop+0x67c>)
 8006bae:	f7fa fab1 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006bb2:	481b      	ldr	r0, [pc, #108]	; (8006c20 <cppLoop+0x648>)
 8006bb4:	f7fb f92e 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	bf0c      	ite	eq
 8006bbe:	2301      	moveq	r3, #1
 8006bc0:	2300      	movne	r3, #0
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 860f 	beq.w	80077e8 <cppLoop+0x1210>
			HAL_Delay(500);
 8006bca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006bce:	f000 ff69 	bl	8007aa4 <HAL_Delay>

			line_trace.setTargetVelocity(1.0);
 8006bd2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006bd6:	481c      	ldr	r0, [pc, #112]	; (8006c48 <cppLoop+0x670>)
 8006bd8:	f7fc f9b5 	bl	8002f46 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8006bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8006be0:	2101      	movs	r1, #1
 8006be2:	4810      	ldr	r0, [pc, #64]	; (8006c24 <cppLoop+0x64c>)
 8006be4:	f7fb fa36 	bl	8002054 <_ZN3LED2LREaa>

			line_trace.setMode(SECOND_RUNNING);
 8006be8:	2101      	movs	r1, #1
 8006bea:	4817      	ldr	r0, [pc, #92]	; (8006c48 <cppLoop+0x670>)
 8006bec:	f7fc fb74 	bl	80032d8 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8006bf0:	4815      	ldr	r0, [pc, #84]	; (8006c48 <cppLoop+0x670>)
 8006bf2:	f7fc fa9f 	bl	8003134 <_ZN9LineTrace7runningEv>
			//HAL_Delay(3000);

			//line_trace.stop();
			led.LR(0, -1);
 8006bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	4809      	ldr	r0, [pc, #36]	; (8006c24 <cppLoop+0x64c>)
 8006bfe:	f7fb fa29 	bl	8002054 <_ZN3LED2LREaa>

			//logger.stop();
		}
		break;
 8006c02:	f000 bdf1 	b.w	80077e8 <cppLoop+0x1210>
 8006c06:	bf00      	nop
 8006c08:	88e368f1 	.word	0x88e368f1
 8006c0c:	3ee4f8b5 	.word	0x3ee4f8b5
 8006c10:	eb1c432d 	.word	0xeb1c432d
 8006c14:	3f1a36e2 	.word	0x3f1a36e2
 8006c18:	a0b5ed8d 	.word	0xa0b5ed8d
 8006c1c:	3eb0c6f7 	.word	0x3eb0c6f7
 8006c20:	200005c0 	.word	0x200005c0
 8006c24:	200005cc 	.word	0x200005cc
 8006c28:	2003939e 	.word	0x2003939e
 8006c2c:	200393a0 	.word	0x200393a0
 8006c30:	200393a8 	.word	0x200393a8
 8006c34:	200393b0 	.word	0x200393b0
 8006c38:	08017d04 	.word	0x08017d04
 8006c3c:	08017d0c 	.word	0x08017d0c
 8006c40:	08017d14 	.word	0x08017d14
 8006c44:	08017d1c 	.word	0x08017d1c
 8006c48:	20015e58 	.word	0x20015e58
 8006c4c:	08017d24 	.word	0x08017d24
 8006c50:	08017d30 	.word	0x08017d30
 8006c54:	08017d38 	.word	0x08017d38

	case 3:
		led.fullColor('G');
 8006c58:	2147      	movs	r1, #71	; 0x47
 8006c5a:	48ac      	ldr	r0, [pc, #688]	; (8006f0c <cppLoop+0x934>)
 8006c5c:	f7fb f93e 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006c60:	f7fa fa1e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006c64:	2100      	movs	r1, #0
 8006c66:	2000      	movs	r0, #0
 8006c68:	f7fa fa2a 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 8006c6c:	48a8      	ldr	r0, [pc, #672]	; (8006f10 <cppLoop+0x938>)
 8006c6e:	f7fa fa51 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006c72:	2101      	movs	r1, #1
 8006c74:	2000      	movs	r0, #0
 8006c76:	f7fa fa23 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8006c7a:	48a6      	ldr	r0, [pc, #664]	; (8006f14 <cppLoop+0x93c>)
 8006c7c:	f7fa fa4a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006c80:	48a5      	ldr	r0, [pc, #660]	; (8006f18 <cppLoop+0x940>)
 8006c82:	f7fb f8c7 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	bf0c      	ite	eq
 8006c8c:	2301      	moveq	r3, #1
 8006c8e:	2300      	movne	r3, #0
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 85aa 	beq.w	80077ec <cppLoop+0x1214>
			led.LR(-1, 1);
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f04f 31ff 	mov.w	r1, #4294967295
 8006c9e:	489b      	ldr	r0, [pc, #620]	; (8006f0c <cppLoop+0x934>)
 8006ca0:	f7fb f9d8 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006ca4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ca8:	f000 fefc 	bl	8007aa4 <HAL_Delay>

			logger.start();
 8006cac:	489b      	ldr	r0, [pc, #620]	; (8006f1c <cppLoop+0x944>)
 8006cae:	f7fc fd80 	bl	80037b2 <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 8006cb2:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8006f20 <cppLoop+0x948>
 8006cb6:	489b      	ldr	r0, [pc, #620]	; (8006f24 <cppLoop+0x94c>)
 8006cb8:	f7fc f936 	bl	8002f28 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006cbc:	4899      	ldr	r0, [pc, #612]	; (8006f24 <cppLoop+0x94c>)
 8006cbe:	f7fc f9cf 	bl	8003060 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 8006cc2:	f241 3088 	movw	r0, #5000	; 0x1388
 8006cc6:	f000 feed 	bl	8007aa4 <HAL_Delay>

			logger.stop();
 8006cca:	4894      	ldr	r0, [pc, #592]	; (8006f1c <cppLoop+0x944>)
 8006ccc:	f7fc fd82 	bl	80037d4 <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8006cd0:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8006f20 <cppLoop+0x948>
 8006cd4:	4893      	ldr	r0, [pc, #588]	; (8006f24 <cppLoop+0x94c>)
 8006cd6:	f7fc f927 	bl	8002f28 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 8006cda:	4892      	ldr	r0, [pc, #584]	; (8006f24 <cppLoop+0x94c>)
 8006cdc:	f7fc f9da 	bl	8003094 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 8006ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	4889      	ldr	r0, [pc, #548]	; (8006f0c <cppLoop+0x934>)
 8006ce8:	f7fb f9b4 	bl	8002054 <_ZN3LED2LREaa>
			//logger.saveLogs("line_sensors", "sensor7.csv");
			led.LR(0, -1);
 8006cec:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	4886      	ldr	r0, [pc, #536]	; (8006f0c <cppLoop+0x934>)
 8006cf4:	f7fb f9ae 	bl	8002054 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f04f 31ff 	mov.w	r1, #4294967295
 8006cfe:	4883      	ldr	r0, [pc, #524]	; (8006f0c <cppLoop+0x934>)
 8006d00:	f7fb f9a8 	bl	8002054 <_ZN3LED2LREaa>
		}

		break;
 8006d04:	f000 bd72 	b.w	80077ec <cppLoop+0x1214>

	case 4:
		led.fullColor('Y');
 8006d08:	2159      	movs	r1, #89	; 0x59
 8006d0a:	4880      	ldr	r0, [pc, #512]	; (8006f0c <cppLoop+0x934>)
 8006d0c:	f7fb f8e6 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006d10:	f7fa f9c6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006d14:	2100      	movs	r1, #0
 8006d16:	2000      	movs	r0, #0
 8006d18:	f7fa f9d2 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 8006d1c:	4882      	ldr	r0, [pc, #520]	; (8006f28 <cppLoop+0x950>)
 8006d1e:	f7fa f9f9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006d22:	2101      	movs	r1, #1
 8006d24:	2000      	movs	r0, #0
 8006d26:	f7fa f9cb 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8006d2a:	487a      	ldr	r0, [pc, #488]	; (8006f14 <cppLoop+0x93c>)
 8006d2c:	f7fa f9f2 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006d30:	4879      	ldr	r0, [pc, #484]	; (8006f18 <cppLoop+0x940>)
 8006d32:	f7fb f86f 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	bf0c      	ite	eq
 8006d3c:	2301      	moveq	r3, #1
 8006d3e:	2300      	movne	r3, #0
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 8554 	beq.w	80077f0 <cppLoop+0x1218>
			led.LR(-1, 1);
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f04f 31ff 	mov.w	r1, #4294967295
 8006d4e:	486f      	ldr	r0, [pc, #444]	; (8006f0c <cppLoop+0x934>)
 8006d50:	f7fb f980 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006d54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d58:	f000 fea4 	bl	8007aa4 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 8006d5c:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8006f20 <cppLoop+0x948>
 8006d60:	4870      	ldr	r0, [pc, #448]	; (8006f24 <cppLoop+0x94c>)
 8006d62:	f7fc f8f0 	bl	8002f46 <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 8006d66:	4871      	ldr	r0, [pc, #452]	; (8006f2c <cppLoop+0x954>)
 8006d68:	f7fd fd6b 	bl	8004842 <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 8006d6c:	486d      	ldr	r0, [pc, #436]	; (8006f24 <cppLoop+0x94c>)
 8006d6e:	f7fc f977 	bl	8003060 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 8006d72:	f242 7010 	movw	r0, #10000	; 0x2710
 8006d76:	f000 fe95 	bl	8007aa4 <HAL_Delay>

			line_trace.stop();
 8006d7a:	486a      	ldr	r0, [pc, #424]	; (8006f24 <cppLoop+0x94c>)
 8006d7c:	f7fc f98a 	bl	8003094 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 8006d80:	486a      	ldr	r0, [pc, #424]	; (8006f2c <cppLoop+0x954>)
 8006d82:	f7fd fd71 	bl	8004868 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 8006d86:	2200      	movs	r2, #0
 8006d88:	f04f 31ff 	mov.w	r1, #4294967295
 8006d8c:	485f      	ldr	r0, [pc, #380]	; (8006f0c <cppLoop+0x934>)
 8006d8e:	f7fb f961 	bl	8002054 <_ZN3LED2LREaa>
		}
		break;
 8006d92:	f000 bd2d 	b.w	80077f0 <cppLoop+0x1218>

	case 5:
		led.fullColor('C');
 8006d96:	2143      	movs	r1, #67	; 0x43
 8006d98:	485c      	ldr	r0, [pc, #368]	; (8006f0c <cppLoop+0x934>)
 8006d9a:	f7fb f89f 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006d9e:	f7fa f97f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006da2:	2100      	movs	r1, #0
 8006da4:	2000      	movs	r0, #0
 8006da6:	f7fa f98b 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8006daa:	4861      	ldr	r0, [pc, #388]	; (8006f30 <cppLoop+0x958>)
 8006dac:	f7fa f9b2 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006db0:	2101      	movs	r1, #1
 8006db2:	2000      	movs	r0, #0
 8006db4:	f7fa f984 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8006db8:	485e      	ldr	r0, [pc, #376]	; (8006f34 <cppLoop+0x95c>)
 8006dba:	f7fa f9ab 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006dbe:	4856      	ldr	r0, [pc, #344]	; (8006f18 <cppLoop+0x940>)
 8006dc0:	f7fb f828 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	bf0c      	ite	eq
 8006dca:	2301      	moveq	r3, #1
 8006dcc:	2300      	movne	r3, #0
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 850f 	beq.w	80077f4 <cppLoop+0x121c>
			led.LR(-1, 1);
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8006ddc:	484b      	ldr	r0, [pc, #300]	; (8006f0c <cppLoop+0x934>)
 8006dde:	f7fb f939 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006de2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006de6:	f000 fe5d 	bl	8007aa4 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8006dea:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8006f38 <cppLoop+0x960>
 8006dee:	484d      	ldr	r0, [pc, #308]	; (8006f24 <cppLoop+0x94c>)
 8006df0:	f7fc f89a 	bl	8002f28 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006df4:	484b      	ldr	r0, [pc, #300]	; (8006f24 <cppLoop+0x94c>)
 8006df6:	f7fc f933 	bl	8003060 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006dfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006dfe:	f000 fe51 	bl	8007aa4 <HAL_Delay>

			led.fullColor('R');
 8006e02:	2152      	movs	r1, #82	; 0x52
 8006e04:	4841      	ldr	r0, [pc, #260]	; (8006f0c <cppLoop+0x934>)
 8006e06:	f7fb f869 	bl	8001edc <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 8006e0a:	484c      	ldr	r0, [pc, #304]	; (8006f3c <cppLoop+0x964>)
 8006e0c:	f7fa fb3d 	bl	800148a <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8006e10:	f242 7010 	movw	r0, #10000	; 0x2710
 8006e14:	f000 fe46 	bl	8007aa4 <HAL_Delay>

			line_trace.stop();
 8006e18:	4842      	ldr	r0, [pc, #264]	; (8006f24 <cppLoop+0x94c>)
 8006e1a:	f7fc f93b 	bl	8003094 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8006e1e:	4948      	ldr	r1, [pc, #288]	; (8006f40 <cppLoop+0x968>)
 8006e20:	4848      	ldr	r0, [pc, #288]	; (8006f44 <cppLoop+0x96c>)
 8006e22:	f7fa fb6b 	bl	80014fc <user_fopen>
			float d = encoder.getDistance();
 8006e26:	4845      	ldr	r0, [pc, #276]	; (8006f3c <cppLoop+0x964>)
 8006e28:	f7fa fb02 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 8006e2c:	eef0 7a40 	vmov.f32	s15, s0
 8006e30:	edc7 7a04 	vstr	s15, [r7, #16]
			sd_write_float(1, &d, ADD_WRITE);
 8006e34:	f107 0310 	add.w	r3, r7, #16
 8006e38:	2201      	movs	r2, #1
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	2001      	movs	r0, #1
 8006e3e:	f7fa fb7f 	bl	8001540 <sd_write_float>
			user_fclose();
 8006e42:	f7fa fb6d 	bl	8001520 <user_fclose>

			led.LR(-1, 0);
 8006e46:	2200      	movs	r2, #0
 8006e48:	f04f 31ff 	mov.w	r1, #4294967295
 8006e4c:	482f      	ldr	r0, [pc, #188]	; (8006f0c <cppLoop+0x934>)
 8006e4e:	f7fb f901 	bl	8002054 <_ZN3LED2LREaa>
		}

		break;
 8006e52:	f000 bccf 	b.w	80077f4 <cppLoop+0x121c>

	case 6:
		led.fullColor('R');
 8006e56:	2152      	movs	r1, #82	; 0x52
 8006e58:	482c      	ldr	r0, [pc, #176]	; (8006f0c <cppLoop+0x934>)
 8006e5a:	f7fb f83f 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006e5e:	f7fa f91f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006e62:	2100      	movs	r1, #0
 8006e64:	2000      	movs	r0, #0
 8006e66:	f7fa f92b 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 8006e6a:	4837      	ldr	r0, [pc, #220]	; (8006f48 <cppLoop+0x970>)
 8006e6c:	f7fa f952 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006e70:	2101      	movs	r1, #1
 8006e72:	2000      	movs	r0, #0
 8006e74:	f7fa f924 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8006e78:	4834      	ldr	r0, [pc, #208]	; (8006f4c <cppLoop+0x974>)
 8006e7a:	f7fa f94b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006e7e:	4826      	ldr	r0, [pc, #152]	; (8006f18 <cppLoop+0x940>)
 8006e80:	f7fa ffc8 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	bf0c      	ite	eq
 8006e8a:	2301      	moveq	r3, #1
 8006e8c:	2300      	movne	r3, #0
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 84b1 	beq.w	80077f8 <cppLoop+0x1220>
			HAL_Delay(500);
 8006e96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006e9a:	f000 fe03 	bl	8007aa4 <HAL_Delay>
			led.LR(-1, 1);
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8006ea4:	4819      	ldr	r0, [pc, #100]	; (8006f0c <cppLoop+0x934>)
 8006ea6:	f7fb f8d5 	bl	8002054 <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.07);
 8006eaa:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8006f50 <cppLoop+0x978>
 8006eae:	481d      	ldr	r0, [pc, #116]	; (8006f24 <cppLoop+0x94c>)
 8006eb0:	f7fc f83a 	bl	8002f28 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006eb4:	481b      	ldr	r0, [pc, #108]	; (8006f24 <cppLoop+0x94c>)
 8006eb6:	f7fc f8d3 	bl	8003060 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006eba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ebe:	f000 fdf1 	bl	8007aa4 <HAL_Delay>

			led.fullColor('R');
 8006ec2:	2152      	movs	r1, #82	; 0x52
 8006ec4:	4811      	ldr	r0, [pc, #68]	; (8006f0c <cppLoop+0x934>)
 8006ec6:	f7fb f809 	bl	8001edc <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 8006eca:	481c      	ldr	r0, [pc, #112]	; (8006f3c <cppLoop+0x964>)
 8006ecc:	f7fa fadd 	bl	800148a <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();
			odometry.clearPotition();
 8006ed0:	4820      	ldr	r0, [pc, #128]	; (8006f54 <cppLoop+0x97c>)
 8006ed2:	f7fc fed9 	bl	8003c88 <_ZN8Odometry13clearPotitionEv>
			logger.start();
 8006ed6:	4811      	ldr	r0, [pc, #68]	; (8006f1c <cppLoop+0x944>)
 8006ed8:	f7fc fc6b 	bl	80037b2 <_ZN6Logger5startEv>

			HAL_Delay(3000);
 8006edc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006ee0:	f000 fde0 	bl	8007aa4 <HAL_Delay>

			line_trace.stop();
 8006ee4:	480f      	ldr	r0, [pc, #60]	; (8006f24 <cppLoop+0x94c>)
 8006ee6:	f7fc f8d5 	bl	8003094 <_ZN9LineTrace4stopEv>
			logger.stop();
 8006eea:	480c      	ldr	r0, [pc, #48]	; (8006f1c <cppLoop+0x944>)
 8006eec:	f7fc fc72 	bl	80037d4 <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Pos", "dis_s2.txt", "th_s2.txt");
 8006ef0:	4b19      	ldr	r3, [pc, #100]	; (8006f58 <cppLoop+0x980>)
 8006ef2:	4a1a      	ldr	r2, [pc, #104]	; (8006f5c <cppLoop+0x984>)
 8006ef4:	491a      	ldr	r1, [pc, #104]	; (8006f60 <cppLoop+0x988>)
 8006ef6:	4809      	ldr	r0, [pc, #36]	; (8006f1c <cppLoop+0x944>)
 8006ef8:	f7fc fb9e 	bl	8003638 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 8006efc:	2200      	movs	r2, #0
 8006efe:	f04f 31ff 	mov.w	r1, #4294967295
 8006f02:	4802      	ldr	r0, [pc, #8]	; (8006f0c <cppLoop+0x934>)
 8006f04:	f7fb f8a6 	bl	8002054 <_ZN3LED2LREaa>
		}

		break;
 8006f08:	f000 bc76 	b.w	80077f8 <cppLoop+0x1220>
 8006f0c:	200005cc 	.word	0x200005cc
 8006f10:	08017d40 	.word	0x08017d40
 8006f14:	08017d48 	.word	0x08017d48
 8006f18:	200005c0 	.word	0x200005c0
 8006f1c:	200005f0 	.word	0x200005f0
 8006f20:	3dcccccd 	.word	0x3dcccccd
 8006f24:	20015e58 	.word	0x20015e58
 8006f28:	08017d50 	.word	0x08017d50
 8006f2c:	20015dd8 	.word	0x20015dd8
 8006f30:	08017d5c 	.word	0x08017d5c
 8006f34:	08017d64 	.word	0x08017d64
 8006f38:	00000000 	.word	0x00000000
 8006f3c:	20015db8 	.word	0x20015db8
 8006f40:	08017d70 	.word	0x08017d70
 8006f44:	08017d78 	.word	0x08017d78
 8006f48:	08017d84 	.word	0x08017d84
 8006f4c:	08017d90 	.word	0x08017d90
 8006f50:	3d8f5c29 	.word	0x3d8f5c29
 8006f54:	20015e18 	.word	0x20015e18
 8006f58:	08017d98 	.word	0x08017d98
 8006f5c:	08017da4 	.word	0x08017da4
 8006f60:	08017db0 	.word	0x08017db0

	case 7:
		led.fullColor('G');
 8006f64:	2147      	movs	r1, #71	; 0x47
 8006f66:	48b4      	ldr	r0, [pc, #720]	; (8007238 <cppLoop+0xc60>)
 8006f68:	f7fa ffb8 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8006f6c:	f7fa f898 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006f70:	2100      	movs	r1, #0
 8006f72:	2000      	movs	r0, #0
 8006f74:	f7fa f8a4 	bl	80010c0 <lcd_locate>
		lcd_printf("Velocity");
 8006f78:	48b0      	ldr	r0, [pc, #704]	; (800723c <cppLoop+0xc64>)
 8006f7a:	f7fa f8cb 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006f7e:	2101      	movs	r1, #1
 8006f80:	2000      	movs	r0, #0
 8006f82:	f7fa f89d 	bl	80010c0 <lcd_locate>
		lcd_printf("Test");
 8006f86:	48ae      	ldr	r0, [pc, #696]	; (8007240 <cppLoop+0xc68>)
 8006f88:	f7fa f8c4 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006f8c:	48ad      	ldr	r0, [pc, #692]	; (8007244 <cppLoop+0xc6c>)
 8006f8e:	f7fa ff41 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	bf0c      	ite	eq
 8006f98:	2301      	moveq	r3, #1
 8006f9a:	2300      	movne	r3, #0
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f000 842c 	beq.w	80077fc <cppLoop+0x1224>
			led.LR(-1, 1);
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f04f 31ff 	mov.w	r1, #4294967295
 8006faa:	48a3      	ldr	r0, [pc, #652]	; (8007238 <cppLoop+0xc60>)
 8006fac:	f7fb f852 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006fb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006fb4:	f000 fd76 	bl	8007aa4 <HAL_Delay>

			led.fullColor('R');
 8006fb8:	2152      	movs	r1, #82	; 0x52
 8006fba:	489f      	ldr	r0, [pc, #636]	; (8007238 <cppLoop+0xc60>)
 8006fbc:	f7fa ff8e 	bl	8001edc <_ZN3LED9fullColorEc>
			velocity_ctrl.setVelocity(0, 1.57);
 8006fc0:	eddf 0aa1 	vldr	s1, [pc, #644]	; 8007248 <cppLoop+0xc70>
 8006fc4:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 800724c <cppLoop+0xc74>
 8006fc8:	48a1      	ldr	r0, [pc, #644]	; (8007250 <cppLoop+0xc78>)
 8006fca:	f7fd fbcd 	bl	8004768 <_ZN12VelocityCtrl11setVelocityEff>
			velocity_ctrl.start();
 8006fce:	48a0      	ldr	r0, [pc, #640]	; (8007250 <cppLoop+0xc78>)
 8006fd0:	f7fd fc37 	bl	8004842 <_ZN12VelocityCtrl5startEv>

			HAL_Delay(1000);
 8006fd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006fd8:	f000 fd64 	bl	8007aa4 <HAL_Delay>
			velocity_ctrl.setVelocity(0, 0);
 8006fdc:	eddf 0a9b 	vldr	s1, [pc, #620]	; 800724c <cppLoop+0xc74>
 8006fe0:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 800724c <cppLoop+0xc74>
 8006fe4:	489a      	ldr	r0, [pc, #616]	; (8007250 <cppLoop+0xc78>)
 8006fe6:	f7fd fbbf 	bl	8004768 <_ZN12VelocityCtrl11setVelocityEff>
			HAL_Delay(100);
 8006fea:	2064      	movs	r0, #100	; 0x64
 8006fec:	f000 fd5a 	bl	8007aa4 <HAL_Delay>
			velocity_ctrl.stop();
 8006ff0:	4897      	ldr	r0, [pc, #604]	; (8007250 <cppLoop+0xc78>)
 8006ff2:	f7fd fc39 	bl	8004868 <_ZN12VelocityCtrl4stopEv>

			led.LR(-1, 0);
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8006ffc:	488e      	ldr	r0, [pc, #568]	; (8007238 <cppLoop+0xc60>)
 8006ffe:	f7fb f829 	bl	8002054 <_ZN3LED2LREaa>
		}
		break;
 8007002:	e3fb      	b.n	80077fc <cppLoop+0x1224>

	case 8:
		led.fullColor('B');
 8007004:	2142      	movs	r1, #66	; 0x42
 8007006:	488c      	ldr	r0, [pc, #560]	; (8007238 <cppLoop+0xc60>)
 8007008:	f7fa ff68 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 800700c:	f7fa f848 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007010:	2100      	movs	r1, #0
 8007012:	2000      	movs	r0, #0
 8007014:	f7fa f854 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", path_following.getKxVal()*1000);
 8007018:	488e      	ldr	r0, [pc, #568]	; (8007254 <cppLoop+0xc7c>)
 800701a:	f7fc ff2b 	bl	8003e74 <_ZN13PathFollowing8getKxValEv>
 800701e:	ec51 0b10 	vmov	r0, r1, d0
 8007022:	f04f 0200 	mov.w	r2, #0
 8007026:	4b8c      	ldr	r3, [pc, #560]	; (8007258 <cppLoop+0xc80>)
 8007028:	f7f9 fafe 	bl	8000628 <__aeabi_dmul>
 800702c:	4603      	mov	r3, r0
 800702e:	460c      	mov	r4, r1
 8007030:	461a      	mov	r2, r3
 8007032:	4623      	mov	r3, r4
 8007034:	4889      	ldr	r0, [pc, #548]	; (800725c <cppLoop+0xc84>)
 8007036:	f7fa f86d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800703a:	2101      	movs	r1, #1
 800703c:	2000      	movs	r0, #0
 800703e:	f7fa f83f 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", path_following.getKyVal()*1000, path_following.getKtVal()*1000);
 8007042:	4884      	ldr	r0, [pc, #528]	; (8007254 <cppLoop+0xc7c>)
 8007044:	f7fc ff2a 	bl	8003e9c <_ZN13PathFollowing8getKyValEv>
 8007048:	ec51 0b10 	vmov	r0, r1, d0
 800704c:	f04f 0200 	mov.w	r2, #0
 8007050:	4b81      	ldr	r3, [pc, #516]	; (8007258 <cppLoop+0xc80>)
 8007052:	f7f9 fae9 	bl	8000628 <__aeabi_dmul>
 8007056:	4603      	mov	r3, r0
 8007058:	460c      	mov	r4, r1
 800705a:	461d      	mov	r5, r3
 800705c:	4626      	mov	r6, r4
 800705e:	487d      	ldr	r0, [pc, #500]	; (8007254 <cppLoop+0xc7c>)
 8007060:	f7fc ff30 	bl	8003ec4 <_ZN13PathFollowing8getKtValEv>
 8007064:	ec51 0b10 	vmov	r0, r1, d0
 8007068:	f04f 0200 	mov.w	r2, #0
 800706c:	4b7a      	ldr	r3, [pc, #488]	; (8007258 <cppLoop+0xc80>)
 800706e:	f7f9 fadb 	bl	8000628 <__aeabi_dmul>
 8007072:	4603      	mov	r3, r0
 8007074:	460c      	mov	r4, r1
 8007076:	e9cd 3400 	strd	r3, r4, [sp]
 800707a:	462a      	mov	r2, r5
 800707c:	4633      	mov	r3, r6
 800707e:	4878      	ldr	r0, [pc, #480]	; (8007260 <cppLoop+0xc88>)
 8007080:	f7fa f848 	bl	8001114 <lcd_printf>

		static float adj_kx = path_following.getKxVal();
 8007084:	4b77      	ldr	r3, [pc, #476]	; (8007264 <cppLoop+0xc8c>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	f3bf 8f5b 	dmb	ish
 800708c:	b2db      	uxtb	r3, r3
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	bf0c      	ite	eq
 8007096:	2301      	moveq	r3, #1
 8007098:	2300      	movne	r3, #0
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	d019      	beq.n	80070d4 <cppLoop+0xafc>
 80070a0:	4870      	ldr	r0, [pc, #448]	; (8007264 <cppLoop+0xc8c>)
 80070a2:	f00b f9e4 	bl	801246e <__cxa_guard_acquire>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	bf14      	ite	ne
 80070ac:	2301      	movne	r3, #1
 80070ae:	2300      	moveq	r3, #0
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00e      	beq.n	80070d4 <cppLoop+0xafc>
 80070b6:	4867      	ldr	r0, [pc, #412]	; (8007254 <cppLoop+0xc7c>)
 80070b8:	f7fc fedc 	bl	8003e74 <_ZN13PathFollowing8getKxValEv>
 80070bc:	ec54 3b10 	vmov	r3, r4, d0
 80070c0:	4618      	mov	r0, r3
 80070c2:	4621      	mov	r1, r4
 80070c4:	f7f9 fda8 	bl	8000c18 <__aeabi_d2f>
 80070c8:	4602      	mov	r2, r0
 80070ca:	4b67      	ldr	r3, [pc, #412]	; (8007268 <cppLoop+0xc90>)
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	4865      	ldr	r0, [pc, #404]	; (8007264 <cppLoop+0xc8c>)
 80070d0:	f00b f9d9 	bl	8012486 <__cxa_guard_release>
		static float adj_ky = path_following.getKyVal();
 80070d4:	4b65      	ldr	r3, [pc, #404]	; (800726c <cppLoop+0xc94>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	f3bf 8f5b 	dmb	ish
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	bf0c      	ite	eq
 80070e6:	2301      	moveq	r3, #1
 80070e8:	2300      	movne	r3, #0
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d019      	beq.n	8007124 <cppLoop+0xb4c>
 80070f0:	485e      	ldr	r0, [pc, #376]	; (800726c <cppLoop+0xc94>)
 80070f2:	f00b f9bc 	bl	801246e <__cxa_guard_acquire>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	bf14      	ite	ne
 80070fc:	2301      	movne	r3, #1
 80070fe:	2300      	moveq	r3, #0
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00e      	beq.n	8007124 <cppLoop+0xb4c>
 8007106:	4853      	ldr	r0, [pc, #332]	; (8007254 <cppLoop+0xc7c>)
 8007108:	f7fc fec8 	bl	8003e9c <_ZN13PathFollowing8getKyValEv>
 800710c:	ec54 3b10 	vmov	r3, r4, d0
 8007110:	4618      	mov	r0, r3
 8007112:	4621      	mov	r1, r4
 8007114:	f7f9 fd80 	bl	8000c18 <__aeabi_d2f>
 8007118:	4602      	mov	r2, r0
 800711a:	4b55      	ldr	r3, [pc, #340]	; (8007270 <cppLoop+0xc98>)
 800711c:	601a      	str	r2, [r3, #0]
 800711e:	4853      	ldr	r0, [pc, #332]	; (800726c <cppLoop+0xc94>)
 8007120:	f00b f9b1 	bl	8012486 <__cxa_guard_release>
		static float adj_kt = path_following.getKtVal();
 8007124:	4b53      	ldr	r3, [pc, #332]	; (8007274 <cppLoop+0xc9c>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	f3bf 8f5b 	dmb	ish
 800712c:	b2db      	uxtb	r3, r3
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	2b00      	cmp	r3, #0
 8007134:	bf0c      	ite	eq
 8007136:	2301      	moveq	r3, #1
 8007138:	2300      	movne	r3, #0
 800713a:	b2db      	uxtb	r3, r3
 800713c:	2b00      	cmp	r3, #0
 800713e:	d019      	beq.n	8007174 <cppLoop+0xb9c>
 8007140:	484c      	ldr	r0, [pc, #304]	; (8007274 <cppLoop+0xc9c>)
 8007142:	f00b f994 	bl	801246e <__cxa_guard_acquire>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	bf14      	ite	ne
 800714c:	2301      	movne	r3, #1
 800714e:	2300      	moveq	r3, #0
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00e      	beq.n	8007174 <cppLoop+0xb9c>
 8007156:	483f      	ldr	r0, [pc, #252]	; (8007254 <cppLoop+0xc7c>)
 8007158:	f7fc feb4 	bl	8003ec4 <_ZN13PathFollowing8getKtValEv>
 800715c:	ec54 3b10 	vmov	r3, r4, d0
 8007160:	4618      	mov	r0, r3
 8007162:	4621      	mov	r1, r4
 8007164:	f7f9 fd58 	bl	8000c18 <__aeabi_d2f>
 8007168:	4602      	mov	r2, r0
 800716a:	4b43      	ldr	r3, [pc, #268]	; (8007278 <cppLoop+0xca0>)
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	4841      	ldr	r0, [pc, #260]	; (8007274 <cppLoop+0xc9c>)
 8007170:	f00b f989 	bl	8012486 <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 8007174:	4833      	ldr	r0, [pc, #204]	; (8007244 <cppLoop+0xc6c>)
 8007176:	f7fa fe4d 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 800717a:	4603      	mov	r3, r0
 800717c:	2b08      	cmp	r3, #8
 800717e:	bf0c      	ite	eq
 8007180:	2301      	moveq	r3, #1
 8007182:	2300      	movne	r3, #0
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d021      	beq.n	80071ce <cppLoop+0xbf6>
			led.LR(-1, 1);
 800718a:	2201      	movs	r2, #1
 800718c:	f04f 31ff 	mov.w	r1, #4294967295
 8007190:	4829      	ldr	r0, [pc, #164]	; (8007238 <cppLoop+0xc60>)
 8007192:	f7fa ff5f 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007196:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800719a:	f000 fc83 	bl	8007aa4 <HAL_Delay>

			selector++;
 800719e:	4b37      	ldr	r3, [pc, #220]	; (800727c <cppLoop+0xca4>)
 80071a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	3301      	adds	r3, #1
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	b21a      	sxth	r2, r3
 80071ac:	4b33      	ldr	r3, [pc, #204]	; (800727c <cppLoop+0xca4>)
 80071ae:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80071b0:	4b32      	ldr	r3, [pc, #200]	; (800727c <cppLoop+0xca4>)
 80071b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	dd02      	ble.n	80071c0 <cppLoop+0xbe8>
 80071ba:	4b30      	ldr	r3, [pc, #192]	; (800727c <cppLoop+0xca4>)
 80071bc:	2200      	movs	r2, #0
 80071be:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80071c0:	2200      	movs	r2, #0
 80071c2:	f04f 31ff 	mov.w	r1, #4294967295
 80071c6:	481c      	ldr	r0, [pc, #112]	; (8007238 <cppLoop+0xc60>)
 80071c8:	f7fa ff44 	bl	8002054 <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}


		break;
 80071cc:	e318      	b.n	8007800 <cppLoop+0x1228>
		else if(joy_stick.getValue() == JOY_R){
 80071ce:	481d      	ldr	r0, [pc, #116]	; (8007244 <cppLoop+0xc6c>)
 80071d0:	f7fa fe20 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b10      	cmp	r3, #16
 80071d8:	bf0c      	ite	eq
 80071da:	2301      	moveq	r3, #1
 80071dc:	2300      	movne	r3, #0
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 8084 	beq.w	80072ee <cppLoop+0xd16>
			led.LR(-1, 1);
 80071e6:	2201      	movs	r2, #1
 80071e8:	f04f 31ff 	mov.w	r1, #4294967295
 80071ec:	4812      	ldr	r0, [pc, #72]	; (8007238 <cppLoop+0xc60>)
 80071ee:	f7fa ff31 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80071f2:	2064      	movs	r0, #100	; 0x64
 80071f4:	f000 fc56 	bl	8007aa4 <HAL_Delay>
			if(selector == 0){
 80071f8:	4b20      	ldr	r3, [pc, #128]	; (800727c <cppLoop+0xca4>)
 80071fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d13e      	bne.n	8007280 <cppLoop+0xca8>
				adj_kx = adj_kx + 0.00001;
 8007202:	4b19      	ldr	r3, [pc, #100]	; (8007268 <cppLoop+0xc90>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4618      	mov	r0, r3
 8007208:	f7f9 f9b6 	bl	8000578 <__aeabi_f2d>
 800720c:	a308      	add	r3, pc, #32	; (adr r3, 8007230 <cppLoop+0xc58>)
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	f7f9 f853 	bl	80002bc <__adddf3>
 8007216:	4603      	mov	r3, r0
 8007218:	460c      	mov	r4, r1
 800721a:	4618      	mov	r0, r3
 800721c:	4621      	mov	r1, r4
 800721e:	f7f9 fcfb 	bl	8000c18 <__aeabi_d2f>
 8007222:	4602      	mov	r2, r0
 8007224:	4b10      	ldr	r3, [pc, #64]	; (8007268 <cppLoop+0xc90>)
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	e056      	b.n	80072d8 <cppLoop+0xd00>
 800722a:	bf00      	nop
 800722c:	f3af 8000 	nop.w
 8007230:	88e368f1 	.word	0x88e368f1
 8007234:	3ee4f8b5 	.word	0x3ee4f8b5
 8007238:	200005cc 	.word	0x200005cc
 800723c:	08017db4 	.word	0x08017db4
 8007240:	08017dc0 	.word	0x08017dc0
 8007244:	200005c0 	.word	0x200005c0
 8007248:	3fc8f5c3 	.word	0x3fc8f5c3
 800724c:	00000000 	.word	0x00000000
 8007250:	20015dd8 	.word	0x20015dd8
 8007254:	20021c70 	.word	0x20021c70
 8007258:	408f4000 	.word	0x408f4000
 800725c:	08017ce8 	.word	0x08017ce8
 8007260:	08017cf4 	.word	0x08017cf4
 8007264:	200393bc 	.word	0x200393bc
 8007268:	200393b8 	.word	0x200393b8
 800726c:	200393c4 	.word	0x200393c4
 8007270:	200393c0 	.word	0x200393c0
 8007274:	200393cc 	.word	0x200393cc
 8007278:	200393c8 	.word	0x200393c8
 800727c:	2003939e 	.word	0x2003939e
			else if(selector == 1){
 8007280:	4ba3      	ldr	r3, [pc, #652]	; (8007510 <cppLoop+0xf38>)
 8007282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d113      	bne.n	80072b2 <cppLoop+0xcda>
				adj_ky = adj_ky + 0.00001;
 800728a:	4ba2      	ldr	r3, [pc, #648]	; (8007514 <cppLoop+0xf3c>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	f7f9 f972 	bl	8000578 <__aeabi_f2d>
 8007294:	a39c      	add	r3, pc, #624	; (adr r3, 8007508 <cppLoop+0xf30>)
 8007296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729a:	f7f9 f80f 	bl	80002bc <__adddf3>
 800729e:	4603      	mov	r3, r0
 80072a0:	460c      	mov	r4, r1
 80072a2:	4618      	mov	r0, r3
 80072a4:	4621      	mov	r1, r4
 80072a6:	f7f9 fcb7 	bl	8000c18 <__aeabi_d2f>
 80072aa:	4602      	mov	r2, r0
 80072ac:	4b99      	ldr	r3, [pc, #612]	; (8007514 <cppLoop+0xf3c>)
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	e012      	b.n	80072d8 <cppLoop+0xd00>
				adj_kt = adj_kt + 0.00001;
 80072b2:	4b99      	ldr	r3, [pc, #612]	; (8007518 <cppLoop+0xf40>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7f9 f95e 	bl	8000578 <__aeabi_f2d>
 80072bc:	a392      	add	r3, pc, #584	; (adr r3, 8007508 <cppLoop+0xf30>)
 80072be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c2:	f7f8 fffb 	bl	80002bc <__adddf3>
 80072c6:	4603      	mov	r3, r0
 80072c8:	460c      	mov	r4, r1
 80072ca:	4618      	mov	r0, r3
 80072cc:	4621      	mov	r1, r4
 80072ce:	f7f9 fca3 	bl	8000c18 <__aeabi_d2f>
 80072d2:	4602      	mov	r2, r0
 80072d4:	4b90      	ldr	r3, [pc, #576]	; (8007518 <cppLoop+0xf40>)
 80072d6:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80072d8:	2152      	movs	r1, #82	; 0x52
 80072da:	4890      	ldr	r0, [pc, #576]	; (800751c <cppLoop+0xf44>)
 80072dc:	f7fa fdfe 	bl	8001edc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80072e0:	2200      	movs	r2, #0
 80072e2:	f04f 31ff 	mov.w	r1, #4294967295
 80072e6:	488d      	ldr	r0, [pc, #564]	; (800751c <cppLoop+0xf44>)
 80072e8:	f7fa feb4 	bl	8002054 <_ZN3LED2LREaa>
		break;
 80072ec:	e288      	b.n	8007800 <cppLoop+0x1228>
		else if(joy_stick.getValue() == JOY_L){
 80072ee:	488c      	ldr	r0, [pc, #560]	; (8007520 <cppLoop+0xf48>)
 80072f0:	f7fa fd90 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	bf0c      	ite	eq
 80072fa:	2301      	moveq	r3, #1
 80072fc:	2300      	movne	r3, #0
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	d058      	beq.n	80073b6 <cppLoop+0xdde>
			led.LR(-1, 1);
 8007304:	2201      	movs	r2, #1
 8007306:	f04f 31ff 	mov.w	r1, #4294967295
 800730a:	4884      	ldr	r0, [pc, #528]	; (800751c <cppLoop+0xf44>)
 800730c:	f7fa fea2 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007310:	2064      	movs	r0, #100	; 0x64
 8007312:	f000 fbc7 	bl	8007aa4 <HAL_Delay>
			if(selector == 0){
 8007316:	4b7e      	ldr	r3, [pc, #504]	; (8007510 <cppLoop+0xf38>)
 8007318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d113      	bne.n	8007348 <cppLoop+0xd70>
				adj_kx = adj_kx - 0.00001;
 8007320:	4b80      	ldr	r3, [pc, #512]	; (8007524 <cppLoop+0xf4c>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4618      	mov	r0, r3
 8007326:	f7f9 f927 	bl	8000578 <__aeabi_f2d>
 800732a:	a377      	add	r3, pc, #476	; (adr r3, 8007508 <cppLoop+0xf30>)
 800732c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007330:	f7f8 ffc2 	bl	80002b8 <__aeabi_dsub>
 8007334:	4603      	mov	r3, r0
 8007336:	460c      	mov	r4, r1
 8007338:	4618      	mov	r0, r3
 800733a:	4621      	mov	r1, r4
 800733c:	f7f9 fc6c 	bl	8000c18 <__aeabi_d2f>
 8007340:	4602      	mov	r2, r0
 8007342:	4b78      	ldr	r3, [pc, #480]	; (8007524 <cppLoop+0xf4c>)
 8007344:	601a      	str	r2, [r3, #0]
 8007346:	e02b      	b.n	80073a0 <cppLoop+0xdc8>
			else if(selector == 1){
 8007348:	4b71      	ldr	r3, [pc, #452]	; (8007510 <cppLoop+0xf38>)
 800734a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d113      	bne.n	800737a <cppLoop+0xda2>
				adj_ky = adj_ky - 0.00001;
 8007352:	4b70      	ldr	r3, [pc, #448]	; (8007514 <cppLoop+0xf3c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4618      	mov	r0, r3
 8007358:	f7f9 f90e 	bl	8000578 <__aeabi_f2d>
 800735c:	a36a      	add	r3, pc, #424	; (adr r3, 8007508 <cppLoop+0xf30>)
 800735e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007362:	f7f8 ffa9 	bl	80002b8 <__aeabi_dsub>
 8007366:	4603      	mov	r3, r0
 8007368:	460c      	mov	r4, r1
 800736a:	4618      	mov	r0, r3
 800736c:	4621      	mov	r1, r4
 800736e:	f7f9 fc53 	bl	8000c18 <__aeabi_d2f>
 8007372:	4602      	mov	r2, r0
 8007374:	4b67      	ldr	r3, [pc, #412]	; (8007514 <cppLoop+0xf3c>)
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	e012      	b.n	80073a0 <cppLoop+0xdc8>
				adj_kt = adj_kt - 0.00001;
 800737a:	4b67      	ldr	r3, [pc, #412]	; (8007518 <cppLoop+0xf40>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4618      	mov	r0, r3
 8007380:	f7f9 f8fa 	bl	8000578 <__aeabi_f2d>
 8007384:	a360      	add	r3, pc, #384	; (adr r3, 8007508 <cppLoop+0xf30>)
 8007386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738a:	f7f8 ff95 	bl	80002b8 <__aeabi_dsub>
 800738e:	4603      	mov	r3, r0
 8007390:	460c      	mov	r4, r1
 8007392:	4618      	mov	r0, r3
 8007394:	4621      	mov	r1, r4
 8007396:	f7f9 fc3f 	bl	8000c18 <__aeabi_d2f>
 800739a:	4602      	mov	r2, r0
 800739c:	4b5e      	ldr	r3, [pc, #376]	; (8007518 <cppLoop+0xf40>)
 800739e:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80073a0:	2152      	movs	r1, #82	; 0x52
 80073a2:	485e      	ldr	r0, [pc, #376]	; (800751c <cppLoop+0xf44>)
 80073a4:	f7fa fd9a 	bl	8001edc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80073a8:	2200      	movs	r2, #0
 80073aa:	f04f 31ff 	mov.w	r1, #4294967295
 80073ae:	485b      	ldr	r0, [pc, #364]	; (800751c <cppLoop+0xf44>)
 80073b0:	f7fa fe50 	bl	8002054 <_ZN3LED2LREaa>
		break;
 80073b4:	e224      	b.n	8007800 <cppLoop+0x1228>
		else if(joy_stick.getValue() == JOY_D){
 80073b6:	485a      	ldr	r0, [pc, #360]	; (8007520 <cppLoop+0xf48>)
 80073b8:	f7fa fd2c 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b04      	cmp	r3, #4
 80073c0:	bf0c      	ite	eq
 80073c2:	2301      	moveq	r3, #1
 80073c4:	2300      	movne	r3, #0
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d048      	beq.n	800745e <cppLoop+0xe86>
			led.LR(-1, 1);
 80073cc:	2201      	movs	r2, #1
 80073ce:	f04f 31ff 	mov.w	r1, #4294967295
 80073d2:	4852      	ldr	r0, [pc, #328]	; (800751c <cppLoop+0xf44>)
 80073d4:	f7fa fe3e 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80073d8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80073dc:	f000 fb62 	bl	8007aa4 <HAL_Delay>
			sd_read_array_float("PARAMS", "KX.TXT", 1, &temp_kx);
 80073e0:	f107 030c 	add.w	r3, r7, #12
 80073e4:	2201      	movs	r2, #1
 80073e6:	4950      	ldr	r1, [pc, #320]	; (8007528 <cppLoop+0xf50>)
 80073e8:	4850      	ldr	r0, [pc, #320]	; (800752c <cppLoop+0xf54>)
 80073ea:	f7fa f961 	bl	80016b0 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KY.TXT", 1, &temp_ky);
 80073ee:	f107 0308 	add.w	r3, r7, #8
 80073f2:	2201      	movs	r2, #1
 80073f4:	494e      	ldr	r1, [pc, #312]	; (8007530 <cppLoop+0xf58>)
 80073f6:	484d      	ldr	r0, [pc, #308]	; (800752c <cppLoop+0xf54>)
 80073f8:	f7fa f95a 	bl	80016b0 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KT.TXT", 1, &temp_kt);
 80073fc:	1d3b      	adds	r3, r7, #4
 80073fe:	2201      	movs	r2, #1
 8007400:	494c      	ldr	r1, [pc, #304]	; (8007534 <cppLoop+0xf5c>)
 8007402:	484a      	ldr	r0, [pc, #296]	; (800752c <cppLoop+0xf54>)
 8007404:	f7fa f954 	bl	80016b0 <sd_read_array_float>
			path_following.setGain(temp_kx, temp_ky, temp_kt);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	4618      	mov	r0, r3
 800740c:	f7f9 f8b4 	bl	8000578 <__aeabi_f2d>
 8007410:	4604      	mov	r4, r0
 8007412:	460d      	mov	r5, r1
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	4618      	mov	r0, r3
 8007418:	f7f9 f8ae 	bl	8000578 <__aeabi_f2d>
 800741c:	4680      	mov	r8, r0
 800741e:	4689      	mov	r9, r1
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4618      	mov	r0, r3
 8007424:	f7f9 f8a8 	bl	8000578 <__aeabi_f2d>
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	ec43 2b12 	vmov	d2, r2, r3
 8007430:	ec49 8b11 	vmov	d1, r8, r9
 8007434:	ec45 4b10 	vmov	d0, r4, r5
 8007438:	483f      	ldr	r0, [pc, #252]	; (8007538 <cppLoop+0xf60>)
 800743a:	f7fc fcfb 	bl	8003e34 <_ZN13PathFollowing7setGainEddd>
			adj_kx = temp_kx;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	4a38      	ldr	r2, [pc, #224]	; (8007524 <cppLoop+0xf4c>)
 8007442:	6013      	str	r3, [r2, #0]
			adj_ky = temp_ky;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	4a33      	ldr	r2, [pc, #204]	; (8007514 <cppLoop+0xf3c>)
 8007448:	6013      	str	r3, [r2, #0]
			adj_kt = temp_kt;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a32      	ldr	r2, [pc, #200]	; (8007518 <cppLoop+0xf40>)
 800744e:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8007450:	2200      	movs	r2, #0
 8007452:	f04f 31ff 	mov.w	r1, #4294967295
 8007456:	4831      	ldr	r0, [pc, #196]	; (800751c <cppLoop+0xf44>)
 8007458:	f7fa fdfc 	bl	8002054 <_ZN3LED2LREaa>
		break;
 800745c:	e1d0      	b.n	8007800 <cppLoop+0x1228>
		else if(joy_stick.getValue() == JOY_C){
 800745e:	4830      	ldr	r0, [pc, #192]	; (8007520 <cppLoop+0xf48>)
 8007460:	f7fa fcd8 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8007464:	4603      	mov	r3, r0
 8007466:	2b02      	cmp	r3, #2
 8007468:	bf0c      	ite	eq
 800746a:	2301      	moveq	r3, #1
 800746c:	2300      	movne	r3, #0
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 81c5 	beq.w	8007800 <cppLoop+0x1228>
			led.LR(-1, 1);
 8007476:	2201      	movs	r2, #1
 8007478:	f04f 31ff 	mov.w	r1, #4294967295
 800747c:	4827      	ldr	r0, [pc, #156]	; (800751c <cppLoop+0xf44>)
 800747e:	f7fa fde9 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007482:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007486:	f000 fb0d 	bl	8007aa4 <HAL_Delay>
			sd_write_array_float("PARAMS", "KX.TXT", 1, &adj_kx, OVER_WRITE);
 800748a:	2300      	movs	r3, #0
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	4b25      	ldr	r3, [pc, #148]	; (8007524 <cppLoop+0xf4c>)
 8007490:	2201      	movs	r2, #1
 8007492:	4925      	ldr	r1, [pc, #148]	; (8007528 <cppLoop+0xf50>)
 8007494:	4825      	ldr	r0, [pc, #148]	; (800752c <cppLoop+0xf54>)
 8007496:	f7fa f8a5 	bl	80015e4 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KY.TXT", 1, &adj_ky, OVER_WRITE);
 800749a:	2300      	movs	r3, #0
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	4b1d      	ldr	r3, [pc, #116]	; (8007514 <cppLoop+0xf3c>)
 80074a0:	2201      	movs	r2, #1
 80074a2:	4923      	ldr	r1, [pc, #140]	; (8007530 <cppLoop+0xf58>)
 80074a4:	4821      	ldr	r0, [pc, #132]	; (800752c <cppLoop+0xf54>)
 80074a6:	f7fa f89d 	bl	80015e4 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KT.TXT", 1, &adj_kt, OVER_WRITE);
 80074aa:	2300      	movs	r3, #0
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	4b1a      	ldr	r3, [pc, #104]	; (8007518 <cppLoop+0xf40>)
 80074b0:	2201      	movs	r2, #1
 80074b2:	4920      	ldr	r1, [pc, #128]	; (8007534 <cppLoop+0xf5c>)
 80074b4:	481d      	ldr	r0, [pc, #116]	; (800752c <cppLoop+0xf54>)
 80074b6:	f7fa f895 	bl	80015e4 <sd_write_array_float>
			path_following.setGain(adj_kx, adj_ky, adj_kt);
 80074ba:	4b1a      	ldr	r3, [pc, #104]	; (8007524 <cppLoop+0xf4c>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4618      	mov	r0, r3
 80074c0:	f7f9 f85a 	bl	8000578 <__aeabi_f2d>
 80074c4:	4604      	mov	r4, r0
 80074c6:	460d      	mov	r5, r1
 80074c8:	4b12      	ldr	r3, [pc, #72]	; (8007514 <cppLoop+0xf3c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7f9 f853 	bl	8000578 <__aeabi_f2d>
 80074d2:	4680      	mov	r8, r0
 80074d4:	4689      	mov	r9, r1
 80074d6:	4b10      	ldr	r3, [pc, #64]	; (8007518 <cppLoop+0xf40>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4618      	mov	r0, r3
 80074dc:	f7f9 f84c 	bl	8000578 <__aeabi_f2d>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	ec43 2b12 	vmov	d2, r2, r3
 80074e8:	ec49 8b11 	vmov	d1, r8, r9
 80074ec:	ec45 4b10 	vmov	d0, r4, r5
 80074f0:	4811      	ldr	r0, [pc, #68]	; (8007538 <cppLoop+0xf60>)
 80074f2:	f7fc fc9f 	bl	8003e34 <_ZN13PathFollowing7setGainEddd>
			led.LR(-1, 0);
 80074f6:	2200      	movs	r2, #0
 80074f8:	f04f 31ff 	mov.w	r1, #4294967295
 80074fc:	4807      	ldr	r0, [pc, #28]	; (800751c <cppLoop+0xf44>)
 80074fe:	f7fa fda9 	bl	8002054 <_ZN3LED2LREaa>
		break;
 8007502:	e17d      	b.n	8007800 <cppLoop+0x1228>
 8007504:	f3af 8000 	nop.w
 8007508:	88e368f1 	.word	0x88e368f1
 800750c:	3ee4f8b5 	.word	0x3ee4f8b5
 8007510:	2003939e 	.word	0x2003939e
 8007514:	200393c0 	.word	0x200393c0
 8007518:	200393c8 	.word	0x200393c8
 800751c:	200005cc 	.word	0x200005cc
 8007520:	200005c0 	.word	0x200005c0
 8007524:	200393b8 	.word	0x200393b8
 8007528:	08017dc8 	.word	0x08017dc8
 800752c:	08017d0c 	.word	0x08017d0c
 8007530:	08017dd0 	.word	0x08017dd0
 8007534:	08017dd8 	.word	0x08017dd8
 8007538:	20021c70 	.word	0x20021c70

	case 9:
		led.fullColor('M');
 800753c:	214d      	movs	r1, #77	; 0x4d
 800753e:	48c0      	ldr	r0, [pc, #768]	; (8007840 <cppLoop+0x1268>)
 8007540:	f7fa fccc 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007544:	f7f9 fdac 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007548:	2100      	movs	r1, #0
 800754a:	2000      	movs	r0, #0
 800754c:	f7f9 fdb8 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 8007550:	48bc      	ldr	r0, [pc, #752]	; (8007844 <cppLoop+0x126c>)
 8007552:	f7f9 fddf 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007556:	2101      	movs	r1, #1
 8007558:	2000      	movs	r0, #0
 800755a:	f7f9 fdb1 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 800755e:	48ba      	ldr	r0, [pc, #744]	; (8007848 <cppLoop+0x1270>)
 8007560:	f7f9 fdd8 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007564:	48b9      	ldr	r0, [pc, #740]	; (800784c <cppLoop+0x1274>)
 8007566:	f7fa fc55 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 800756a:	4603      	mov	r3, r0
 800756c:	2b02      	cmp	r3, #2
 800756e:	bf0c      	ite	eq
 8007570:	2301      	moveq	r3, #1
 8007572:	2300      	movne	r3, #0
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 8144 	beq.w	8007804 <cppLoop+0x122c>
			HAL_Delay(1500);
 800757c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007580:	f000 fa90 	bl	8007aa4 <HAL_Delay>
			led.LR(-1, 1);
 8007584:	2201      	movs	r2, #1
 8007586:	f04f 31ff 	mov.w	r1, #4294967295
 800758a:	48ad      	ldr	r0, [pc, #692]	; (8007840 <cppLoop+0x1268>)
 800758c:	f7fa fd62 	bl	8002054 <_ZN3LED2LREaa>

			logger.start();
 8007590:	48af      	ldr	r0, [pc, #700]	; (8007850 <cppLoop+0x1278>)
 8007592:	f7fc f90e 	bl	80037b2 <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 8007596:	ed9f 1ba4 	vldr	d1, [pc, #656]	; 8007828 <cppLoop+0x1250>
 800759a:	ed9f 0ba5 	vldr	d0, [pc, #660]	; 8007830 <cppLoop+0x1258>
 800759e:	48ad      	ldr	r0, [pc, #692]	; (8007854 <cppLoop+0x127c>)
 80075a0:	f7fc f99c 	bl	80038dc <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 80075a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80075a8:	f000 fa7c 	bl	8007aa4 <HAL_Delay>

			logger.stop();
 80075ac:	48a8      	ldr	r0, [pc, #672]	; (8007850 <cppLoop+0x1278>)
 80075ae:	f7fc f911 	bl	80037d4 <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 80075b2:	ed9f 1ba1 	vldr	d1, [pc, #644]	; 8007838 <cppLoop+0x1260>
 80075b6:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 8007838 <cppLoop+0x1260>
 80075ba:	48a6      	ldr	r0, [pc, #664]	; (8007854 <cppLoop+0x127c>)
 80075bc:	f7fc f98e 	bl	80038dc <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 80075c0:	4aa5      	ldr	r2, [pc, #660]	; (8007858 <cppLoop+0x1280>)
 80075c2:	49a6      	ldr	r1, [pc, #664]	; (800785c <cppLoop+0x1284>)
 80075c4:	48a2      	ldr	r0, [pc, #648]	; (8007850 <cppLoop+0x1278>)
 80075c6:	f7fc f80d 	bl	80035e4 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80075ca:	2200      	movs	r2, #0
 80075cc:	f04f 31ff 	mov.w	r1, #4294967295
 80075d0:	489b      	ldr	r0, [pc, #620]	; (8007840 <cppLoop+0x1268>)
 80075d2:	f7fa fd3f 	bl	8002054 <_ZN3LED2LREaa>
		}
		break;
 80075d6:	e115      	b.n	8007804 <cppLoop+0x122c>

	case 10:
		led.fullColor('Y');
 80075d8:	2159      	movs	r1, #89	; 0x59
 80075da:	4899      	ldr	r0, [pc, #612]	; (8007840 <cppLoop+0x1268>)
 80075dc:	f7fa fc7e 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 80075e0:	f7f9 fd5e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80075e4:	2100      	movs	r1, #0
 80075e6:	2000      	movs	r0, #0
 80075e8:	f7f9 fd6a 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 80075ec:	489c      	ldr	r0, [pc, #624]	; (8007860 <cppLoop+0x1288>)
 80075ee:	f7f9 fd91 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80075f2:	2101      	movs	r1, #1
 80075f4:	2000      	movs	r0, #0
 80075f6:	f7f9 fd63 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 80075fa:	489a      	ldr	r0, [pc, #616]	; (8007864 <cppLoop+0x128c>)
 80075fc:	f7f9 fd8a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007600:	4892      	ldr	r0, [pc, #584]	; (800784c <cppLoop+0x1274>)
 8007602:	f7fa fc07 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8007606:	4603      	mov	r3, r0
 8007608:	2b02      	cmp	r3, #2
 800760a:	bf0c      	ite	eq
 800760c:	2301      	moveq	r3, #1
 800760e:	2300      	movne	r3, #0
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	f000 80f8 	beq.w	8007808 <cppLoop+0x1230>
			HAL_Delay(1500);
 8007618:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800761c:	f000 fa42 	bl	8007aa4 <HAL_Delay>
			led.LR(-1, 1);
 8007620:	2201      	movs	r2, #1
 8007622:	f04f 31ff 	mov.w	r1, #4294967295
 8007626:	4886      	ldr	r0, [pc, #536]	; (8007840 <cppLoop+0x1268>)
 8007628:	f7fa fd14 	bl	8002054 <_ZN3LED2LREaa>

			logger.start();
 800762c:	4888      	ldr	r0, [pc, #544]	; (8007850 <cppLoop+0x1278>)
 800762e:	f7fc f8c0 	bl	80037b2 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8007632:	488d      	ldr	r0, [pc, #564]	; (8007868 <cppLoop+0x1290>)
 8007634:	f7fd f905 	bl	8004842 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 8007638:	eddf 0a8c 	vldr	s1, [pc, #560]	; 800786c <cppLoop+0x1294>
 800763c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007640:	4889      	ldr	r0, [pc, #548]	; (8007868 <cppLoop+0x1290>)
 8007642:	f7fd f891 	bl	8004768 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8007646:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800764a:	f000 fa2b 	bl	8007aa4 <HAL_Delay>

			logger.stop();
 800764e:	4880      	ldr	r0, [pc, #512]	; (8007850 <cppLoop+0x1278>)
 8007650:	f7fc f8c0 	bl	80037d4 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8007654:	4884      	ldr	r0, [pc, #528]	; (8007868 <cppLoop+0x1290>)
 8007656:	f7fd f907 	bl	8004868 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 800765a:	4a85      	ldr	r2, [pc, #532]	; (8007870 <cppLoop+0x1298>)
 800765c:	497f      	ldr	r1, [pc, #508]	; (800785c <cppLoop+0x1284>)
 800765e:	487c      	ldr	r0, [pc, #496]	; (8007850 <cppLoop+0x1278>)
 8007660:	f7fb ffc0 	bl	80035e4 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8007664:	2200      	movs	r2, #0
 8007666:	f04f 31ff 	mov.w	r1, #4294967295
 800766a:	4875      	ldr	r0, [pc, #468]	; (8007840 <cppLoop+0x1268>)
 800766c:	f7fa fcf2 	bl	8002054 <_ZN3LED2LREaa>
		}

		break;
 8007670:	e0ca      	b.n	8007808 <cppLoop+0x1230>

	case 11:
		led.fullColor('C');
 8007672:	2143      	movs	r1, #67	; 0x43
 8007674:	4872      	ldr	r0, [pc, #456]	; (8007840 <cppLoop+0x1268>)
 8007676:	f7fa fc31 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 800767a:	f7f9 fd11 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800767e:	2100      	movs	r1, #0
 8007680:	2000      	movs	r0, #0
 8007682:	f7f9 fd1d 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 8007686:	487b      	ldr	r0, [pc, #492]	; (8007874 <cppLoop+0x129c>)
 8007688:	f7f9 fd44 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800768c:	2101      	movs	r1, #1
 800768e:	2000      	movs	r0, #0
 8007690:	f7f9 fd16 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8007694:	4878      	ldr	r0, [pc, #480]	; (8007878 <cppLoop+0x12a0>)
 8007696:	f7f9 fd3d 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 800769a:	486c      	ldr	r0, [pc, #432]	; (800784c <cppLoop+0x1274>)
 800769c:	f7fa fbba 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	bf0c      	ite	eq
 80076a6:	2301      	moveq	r3, #1
 80076a8:	2300      	movne	r3, #0
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f000 80ad 	beq.w	800780c <cppLoop+0x1234>
			HAL_Delay(500);
 80076b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80076b6:	f000 f9f5 	bl	8007aa4 <HAL_Delay>
			led.LR(-1, 1);
 80076ba:	2201      	movs	r2, #1
 80076bc:	f04f 31ff 	mov.w	r1, #4294967295
 80076c0:	485f      	ldr	r0, [pc, #380]	; (8007840 <cppLoop+0x1268>)
 80076c2:	f7fa fcc7 	bl	8002054 <_ZN3LED2LREaa>

			line_trace.createVelocityTabele();
 80076c6:	486d      	ldr	r0, [pc, #436]	; (800787c <cppLoop+0x12a4>)
 80076c8:	f7fb fa90 	bl	8002bec <_ZN9LineTrace20createVelocityTabeleEv>

			led.LR(-1, 0);
 80076cc:	2200      	movs	r2, #0
 80076ce:	f04f 31ff 	mov.w	r1, #4294967295
 80076d2:	485b      	ldr	r0, [pc, #364]	; (8007840 <cppLoop+0x1268>)
 80076d4:	f7fa fcbe 	bl	8002054 <_ZN3LED2LREaa>
		}

		break;
 80076d8:	e098      	b.n	800780c <cppLoop+0x1234>

	case 12:
		led.fullColor('R');
 80076da:	2152      	movs	r1, #82	; 0x52
 80076dc:	4858      	ldr	r0, [pc, #352]	; (8007840 <cppLoop+0x1268>)
 80076de:	f7fa fbfd 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 80076e2:	f7f9 fcdd 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80076e6:	2100      	movs	r1, #0
 80076e8:	2000      	movs	r0, #0
 80076ea:	f7f9 fce9 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 80076ee:	4864      	ldr	r0, [pc, #400]	; (8007880 <cppLoop+0x12a8>)
 80076f0:	f7f9 fd10 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80076f4:	2101      	movs	r1, #1
 80076f6:	2000      	movs	r0, #0
 80076f8:	f7f9 fce2 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80076fc:	4852      	ldr	r0, [pc, #328]	; (8007848 <cppLoop+0x1270>)
 80076fe:	f7f9 fd09 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007702:	4852      	ldr	r0, [pc, #328]	; (800784c <cppLoop+0x1274>)
 8007704:	f7fa fb86 	bl	8001e14 <_ZN8JoyStick8getValueEv>
 8007708:	4603      	mov	r3, r0
 800770a:	2b02      	cmp	r3, #2
 800770c:	bf0c      	ite	eq
 800770e:	2301      	moveq	r3, #1
 8007710:	2300      	movne	r3, #0
 8007712:	b2db      	uxtb	r3, r3
 8007714:	2b00      	cmp	r3, #0
 8007716:	d07b      	beq.n	8007810 <cppLoop+0x1238>
			led.LR(-1, 1);
 8007718:	2201      	movs	r2, #1
 800771a:	f04f 31ff 	mov.w	r1, #4294967295
 800771e:	4848      	ldr	r0, [pc, #288]	; (8007840 <cppLoop+0x1268>)
 8007720:	f7fa fc98 	bl	8002054 <_ZN3LED2LREaa>
			HAL_Delay(1500);
 8007724:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007728:	f000 f9bc 	bl	8007aa4 <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 800772c:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8007884 <cppLoop+0x12ac>
 8007730:	4855      	ldr	r0, [pc, #340]	; (8007888 <cppLoop+0x12b0>)
 8007732:	f7fc fea5 	bl	8004480 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 8007736:	4854      	ldr	r0, [pc, #336]	; (8007888 <cppLoop+0x12b0>)
 8007738:	f7fc feb2 	bl	80044a0 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 800773c:	f244 405c 	movw	r0, #17500	; 0x445c
 8007740:	f000 f9b0 	bl	8007aa4 <HAL_Delay>
			sys_ident.stop();
 8007744:	4850      	ldr	r0, [pc, #320]	; (8007888 <cppLoop+0x12b0>)
 8007746:	f7fc febf 	bl	80044c8 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 800774a:	484f      	ldr	r0, [pc, #316]	; (8007888 <cppLoop+0x12b0>)
 800774c:	f7fc fe26 	bl	800439c <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 8007750:	2200      	movs	r2, #0
 8007752:	f04f 31ff 	mov.w	r1, #4294967295
 8007756:	483a      	ldr	r0, [pc, #232]	; (8007840 <cppLoop+0x1268>)
 8007758:	f7fa fc7c 	bl	8002054 <_ZN3LED2LREaa>
		}

		break;
 800775c:	e058      	b.n	8007810 <cppLoop+0x1238>

	case 13:
		led.fullColor('G');
 800775e:	2147      	movs	r1, #71	; 0x47
 8007760:	4837      	ldr	r0, [pc, #220]	; (8007840 <cppLoop+0x1268>)
 8007762:	f7fa fbbb 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007766:	f7f9 fc9b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800776a:	2100      	movs	r1, #0
 800776c:	2000      	movs	r0, #0
 800776e:	f7f9 fca7 	bl	80010c0 <lcd_locate>
		lcd_printf("13      ");
 8007772:	4846      	ldr	r0, [pc, #280]	; (800788c <cppLoop+0x12b4>)
 8007774:	f7f9 fcce 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007778:	2101      	movs	r1, #1
 800777a:	2000      	movs	r0, #0
 800777c:	f7f9 fca0 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8007780:	4843      	ldr	r0, [pc, #268]	; (8007890 <cppLoop+0x12b8>)
 8007782:	f7f9 fcc7 	bl	8001114 <lcd_printf>

		break;
 8007786:	e044      	b.n	8007812 <cppLoop+0x123a>

	case 14:
		led.fullColor('B');
 8007788:	2142      	movs	r1, #66	; 0x42
 800778a:	482d      	ldr	r0, [pc, #180]	; (8007840 <cppLoop+0x1268>)
 800778c:	f7fa fba6 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007790:	f7f9 fc86 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007794:	2100      	movs	r1, #0
 8007796:	2000      	movs	r0, #0
 8007798:	f7f9 fc92 	bl	80010c0 <lcd_locate>
		lcd_printf("14      ");
 800779c:	483d      	ldr	r0, [pc, #244]	; (8007894 <cppLoop+0x12bc>)
 800779e:	f7f9 fcb9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80077a2:	2101      	movs	r1, #1
 80077a4:	2000      	movs	r0, #0
 80077a6:	f7f9 fc8b 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 80077aa:	4839      	ldr	r0, [pc, #228]	; (8007890 <cppLoop+0x12b8>)
 80077ac:	f7f9 fcb2 	bl	8001114 <lcd_printf>

		break;
 80077b0:	e02f      	b.n	8007812 <cppLoop+0x123a>

	case 15:
		led.fullColor('M');
 80077b2:	214d      	movs	r1, #77	; 0x4d
 80077b4:	4822      	ldr	r0, [pc, #136]	; (8007840 <cppLoop+0x1268>)
 80077b6:	f7fa fb91 	bl	8001edc <_ZN3LED9fullColorEc>

		lcd_clear();
 80077ba:	f7f9 fc71 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80077be:	2100      	movs	r1, #0
 80077c0:	2000      	movs	r0, #0
 80077c2:	f7f9 fc7d 	bl	80010c0 <lcd_locate>
		lcd_printf("15      ");
 80077c6:	4834      	ldr	r0, [pc, #208]	; (8007898 <cppLoop+0x12c0>)
 80077c8:	f7f9 fca4 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80077cc:	2101      	movs	r1, #1
 80077ce:	2000      	movs	r0, #0
 80077d0:	f7f9 fc76 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 80077d4:	482e      	ldr	r0, [pc, #184]	; (8007890 <cppLoop+0x12b8>)
 80077d6:	f7f9 fc9d 	bl	8001114 <lcd_printf>

		break;
 80077da:	e01a      	b.n	8007812 <cppLoop+0x123a>

	default:
		break;
 80077dc:	bf00      	nop
 80077de:	e018      	b.n	8007812 <cppLoop+0x123a>
		break;
 80077e0:	bf00      	nop
 80077e2:	e016      	b.n	8007812 <cppLoop+0x123a>
		break;
 80077e4:	bf00      	nop
 80077e6:	e014      	b.n	8007812 <cppLoop+0x123a>
		break;
 80077e8:	bf00      	nop
 80077ea:	e012      	b.n	8007812 <cppLoop+0x123a>
		break;
 80077ec:	bf00      	nop
 80077ee:	e010      	b.n	8007812 <cppLoop+0x123a>
		break;
 80077f0:	bf00      	nop
 80077f2:	e00e      	b.n	8007812 <cppLoop+0x123a>
		break;
 80077f4:	bf00      	nop
 80077f6:	e00c      	b.n	8007812 <cppLoop+0x123a>
		break;
 80077f8:	bf00      	nop
 80077fa:	e00a      	b.n	8007812 <cppLoop+0x123a>
		break;
 80077fc:	bf00      	nop
 80077fe:	e008      	b.n	8007812 <cppLoop+0x123a>
		break;
 8007800:	bf00      	nop
 8007802:	e006      	b.n	8007812 <cppLoop+0x123a>
		break;
 8007804:	bf00      	nop
 8007806:	e004      	b.n	8007812 <cppLoop+0x123a>
		break;
 8007808:	bf00      	nop
 800780a:	e002      	b.n	8007812 <cppLoop+0x123a>
		break;
 800780c:	bf00      	nop
 800780e:	e000      	b.n	8007812 <cppLoop+0x123a>
		break;
 8007810:	bf00      	nop

	}

	HAL_Delay(30);
 8007812:	201e      	movs	r0, #30
 8007814:	f000 f946 	bl	8007aa4 <HAL_Delay>

}
 8007818:	bf00      	nop
 800781a:	3724      	adds	r7, #36	; 0x24
 800781c:	46bd      	mov	sp, r7
 800781e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007822:	bf00      	nop
 8007824:	f3af 8000 	nop.w
 8007828:	33333333 	.word	0x33333333
 800782c:	bfd33333 	.word	0xbfd33333
 8007830:	33333333 	.word	0x33333333
 8007834:	3fd33333 	.word	0x3fd33333
	...
 8007840:	200005cc 	.word	0x200005cc
 8007844:	08017de0 	.word	0x08017de0
 8007848:	08017d90 	.word	0x08017d90
 800784c:	200005c0 	.word	0x200005c0
 8007850:	200005f0 	.word	0x200005f0
 8007854:	200005c8 	.word	0x200005c8
 8007858:	08017de8 	.word	0x08017de8
 800785c:	08017df4 	.word	0x08017df4
 8007860:	08017e00 	.word	0x08017e00
 8007864:	08017e04 	.word	0x08017e04
 8007868:	20015dd8 	.word	0x20015dd8
 800786c:	00000000 	.word	0x00000000
 8007870:	08017e10 	.word	0x08017e10
 8007874:	08017e1c 	.word	0x08017e1c
 8007878:	08017e28 	.word	0x08017e28
 800787c:	20015e58 	.word	0x20015e58
 8007880:	08017e34 	.word	0x08017e34
 8007884:	3e99999a 	.word	0x3e99999a
 8007888:	20021a60 	.word	0x20021a60
 800788c:	08017e3c 	.word	0x08017e3c
 8007890:	08017e48 	.word	0x08017e48
 8007894:	08017e54 	.word	0x08017e54
 8007898:	08017e60 	.word	0x08017e60

0800789c <_Z41__static_initialization_and_destruction_0ii>:
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af04      	add	r7, sp, #16
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d13b      	bne.n	8007924 <_Z41__static_initialization_and_destruction_0ii+0x88>
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d136      	bne.n	8007924 <_Z41__static_initialization_and_destruction_0ii+0x88>
LineSensor line_sensor;
 80078b6:	481d      	ldr	r0, [pc, #116]	; (800792c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80078b8:	f7fa fc04 	bl	80020c4 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 80078bc:	481c      	ldr	r0, [pc, #112]	; (8007930 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80078be:	f7fc fbdf 	bl	8004080 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 80078c2:	481c      	ldr	r0, [pc, #112]	; (8007934 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80078c4:	f7fa fa9a 	bl	8001dfc <_ZN8JoyStickC1Ev>
Motor motor;
 80078c8:	481b      	ldr	r0, [pc, #108]	; (8007938 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80078ca:	f7fb ff94 	bl	80037f6 <_ZN5MotorC1Ev>
IMU imu;
 80078ce:	481b      	ldr	r0, [pc, #108]	; (800793c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80078d0:	f7fa f8a0 	bl	8001a14 <_ZN3IMUC1Ev>
Logger logger;
 80078d4:	481a      	ldr	r0, [pc, #104]	; (8007940 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80078d6:	f7fb fd33 	bl	8003340 <_ZN6LoggerC1Ev>
Encoder encoder;
 80078da:	481a      	ldr	r0, [pc, #104]	; (8007944 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80078dc:	f7f9 fc3a 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 80078e0:	4b16      	ldr	r3, [pc, #88]	; (800793c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80078e2:	4a18      	ldr	r2, [pc, #96]	; (8007944 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80078e4:	4914      	ldr	r1, [pc, #80]	; (8007938 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80078e6:	4818      	ldr	r0, [pc, #96]	; (8007948 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80078e8:	f7fc fe12 	bl	8004510 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 80078ec:	4b16      	ldr	r3, [pc, #88]	; (8007948 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80078ee:	4a13      	ldr	r2, [pc, #76]	; (800793c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80078f0:	4914      	ldr	r1, [pc, #80]	; (8007944 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80078f2:	4816      	ldr	r0, [pc, #88]	; (800794c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80078f4:	f7fc f864 	bl	80039c0 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger);
 80078f8:	4b11      	ldr	r3, [pc, #68]	; (8007940 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80078fa:	9303      	str	r3, [sp, #12]
 80078fc:	4b13      	ldr	r3, [pc, #76]	; (800794c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80078fe:	9302      	str	r3, [sp, #8]
 8007900:	4b10      	ldr	r3, [pc, #64]	; (8007944 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007902:	9301      	str	r3, [sp, #4]
 8007904:	4b0a      	ldr	r3, [pc, #40]	; (8007930 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	4b0f      	ldr	r3, [pc, #60]	; (8007948 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800790a:	4a08      	ldr	r2, [pc, #32]	; (800792c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800790c:	490a      	ldr	r1, [pc, #40]	; (8007938 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800790e:	4810      	ldr	r0, [pc, #64]	; (8007950 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8007910:	f7fa ff06 	bl	8002720 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger>
SystemIdentification sys_ident(&logger, &motor);
 8007914:	4a08      	ldr	r2, [pc, #32]	; (8007938 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8007916:	490a      	ldr	r1, [pc, #40]	; (8007940 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007918:	480e      	ldr	r0, [pc, #56]	; (8007954 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800791a:	f7fc fcf5 	bl	8004308 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 800791e:	480e      	ldr	r0, [pc, #56]	; (8007958 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8007920:	f7fc f9d0 	bl	8003cc4 <_ZN13PathFollowingC1Ev>
}
 8007924:	bf00      	nop
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	200002c0 	.word	0x200002c0
 8007930:	200005b8 	.word	0x200005b8
 8007934:	200005c0 	.word	0x200005c0
 8007938:	200005c8 	.word	0x200005c8
 800793c:	200005dc 	.word	0x200005dc
 8007940:	200005f0 	.word	0x200005f0
 8007944:	20015db8 	.word	0x20015db8
 8007948:	20015dd8 	.word	0x20015dd8
 800794c:	20015e18 	.word	0x20015e18
 8007950:	20015e58 	.word	0x20015e58
 8007954:	20021a60 	.word	0x20021a60
 8007958:	20021c70 	.word	0x20021c70

0800795c <_GLOBAL__sub_I_line_sensor>:
 800795c:	b580      	push	{r7, lr}
 800795e:	af00      	add	r7, sp, #0
 8007960:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007964:	2001      	movs	r0, #1
 8007966:	f7ff ff99 	bl	800789c <_Z41__static_initialization_and_destruction_0ii>
 800796a:	bd80      	pop	{r7, pc}

0800796c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800796c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80079a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007970:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007972:	e003      	b.n	800797c <LoopCopyDataInit>

08007974 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007974:	4b0c      	ldr	r3, [pc, #48]	; (80079a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007976:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007978:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800797a:	3104      	adds	r1, #4

0800797c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800797c:	480b      	ldr	r0, [pc, #44]	; (80079ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800797e:	4b0c      	ldr	r3, [pc, #48]	; (80079b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007980:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007982:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007984:	d3f6      	bcc.n	8007974 <CopyDataInit>
  ldr  r2, =_sbss
 8007986:	4a0b      	ldr	r2, [pc, #44]	; (80079b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007988:	e002      	b.n	8007990 <LoopFillZerobss>

0800798a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800798a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800798c:	f842 3b04 	str.w	r3, [r2], #4

08007990 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007990:	4b09      	ldr	r3, [pc, #36]	; (80079b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007992:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007994:	d3f9      	bcc.n	800798a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007996:	f7fe fcb5 	bl	8006304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800799a:	f00b fdd5 	bl	8013548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800799e:	f7fc ffef 	bl	8004980 <main>
  bx  lr    
 80079a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80079a4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80079a8:	08018460 	.word	0x08018460
  ldr  r0, =_sdata
 80079ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80079b0:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80079b4:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80079b8:	2003ddb0 	.word	0x2003ddb0

080079bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80079bc:	e7fe      	b.n	80079bc <ADC_IRQHandler>
	...

080079c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80079c4:	4b0e      	ldr	r3, [pc, #56]	; (8007a00 <HAL_Init+0x40>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a0d      	ldr	r2, [pc, #52]	; (8007a00 <HAL_Init+0x40>)
 80079ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80079ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80079d0:	4b0b      	ldr	r3, [pc, #44]	; (8007a00 <HAL_Init+0x40>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a0a      	ldr	r2, [pc, #40]	; (8007a00 <HAL_Init+0x40>)
 80079d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80079da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80079dc:	4b08      	ldr	r3, [pc, #32]	; (8007a00 <HAL_Init+0x40>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a07      	ldr	r2, [pc, #28]	; (8007a00 <HAL_Init+0x40>)
 80079e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80079e8:	2003      	movs	r0, #3
 80079ea:	f000 fd51 	bl	8008490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80079ee:	2000      	movs	r0, #0
 80079f0:	f000 f808 	bl	8007a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80079f4:	f7fd fed6 	bl	80057a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	40023c00 	.word	0x40023c00

08007a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007a0c:	4b12      	ldr	r3, [pc, #72]	; (8007a58 <HAL_InitTick+0x54>)
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	4b12      	ldr	r3, [pc, #72]	; (8007a5c <HAL_InitTick+0x58>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	4619      	mov	r1, r3
 8007a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 fd69 	bl	80084fa <HAL_SYSTICK_Config>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e00e      	b.n	8007a50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b0f      	cmp	r3, #15
 8007a36:	d80a      	bhi.n	8007a4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007a38:	2200      	movs	r2, #0
 8007a3a:	6879      	ldr	r1, [r7, #4]
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a40:	f000 fd31 	bl	80084a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007a44:	4a06      	ldr	r2, [pc, #24]	; (8007a60 <HAL_InitTick+0x5c>)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	e000      	b.n	8007a50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	20000000 	.word	0x20000000
 8007a5c:	20000008 	.word	0x20000008
 8007a60:	20000004 	.word	0x20000004

08007a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007a64:	b480      	push	{r7}
 8007a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007a68:	4b06      	ldr	r3, [pc, #24]	; (8007a84 <HAL_IncTick+0x20>)
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	4b06      	ldr	r3, [pc, #24]	; (8007a88 <HAL_IncTick+0x24>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4413      	add	r3, r2
 8007a74:	4a04      	ldr	r2, [pc, #16]	; (8007a88 <HAL_IncTick+0x24>)
 8007a76:	6013      	str	r3, [r2, #0]
}
 8007a78:	bf00      	nop
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	20000008 	.word	0x20000008
 8007a88:	2003bd38 	.word	0x2003bd38

08007a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8007a90:	4b03      	ldr	r3, [pc, #12]	; (8007aa0 <HAL_GetTick+0x14>)
 8007a92:	681b      	ldr	r3, [r3, #0]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	2003bd38 	.word	0x2003bd38

08007aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007aac:	f7ff ffee 	bl	8007a8c <HAL_GetTick>
 8007ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abc:	d005      	beq.n	8007aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007abe:	4b09      	ldr	r3, [pc, #36]	; (8007ae4 <HAL_Delay+0x40>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007aca:	bf00      	nop
 8007acc:	f7ff ffde 	bl	8007a8c <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d8f7      	bhi.n	8007acc <HAL_Delay+0x28>
  {
  }
}
 8007adc:	bf00      	nop
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	20000008 	.word	0x20000008

08007ae8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e033      	b.n	8007b66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d109      	bne.n	8007b1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7fd fe74 	bl	80057f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1e:	f003 0310 	and.w	r3, r3, #16
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d118      	bne.n	8007b58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007b2e:	f023 0302 	bic.w	r3, r3, #2
 8007b32:	f043 0202 	orr.w	r2, r3, #2
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fa5a 	bl	8007ff4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4a:	f023 0303 	bic.w	r3, r3, #3
 8007b4e:	f043 0201 	orr.w	r2, r3, #1
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	641a      	str	r2, [r3, #64]	; 0x40
 8007b56:	e001      	b.n	8007b5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
	...

08007b70 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d101      	bne.n	8007b8e <HAL_ADC_Start_DMA+0x1e>
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	e0cc      	b.n	8007d28 <HAL_ADC_Start_DMA+0x1b8>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f003 0301 	and.w	r3, r3, #1
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d018      	beq.n	8007bd6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689a      	ldr	r2, [r3, #8]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f042 0201 	orr.w	r2, r2, #1
 8007bb2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007bb4:	4b5e      	ldr	r3, [pc, #376]	; (8007d30 <HAL_ADC_Start_DMA+0x1c0>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a5e      	ldr	r2, [pc, #376]	; (8007d34 <HAL_ADC_Start_DMA+0x1c4>)
 8007bba:	fba2 2303 	umull	r2, r3, r2, r3
 8007bbe:	0c9a      	lsrs	r2, r3, #18
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	005b      	lsls	r3, r3, #1
 8007bc4:	4413      	add	r3, r2
 8007bc6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007bc8:	e002      	b.n	8007bd0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1f9      	bne.n	8007bca <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	f040 80a0 	bne.w	8007d26 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007bee:	f023 0301 	bic.w	r3, r3, #1
 8007bf2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d007      	beq.n	8007c18 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007c10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c24:	d106      	bne.n	8007c34 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c2a:	f023 0206 	bic.w	r2, r3, #6
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	645a      	str	r2, [r3, #68]	; 0x44
 8007c32:	e002      	b.n	8007c3a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007c42:	4b3d      	ldr	r3, [pc, #244]	; (8007d38 <HAL_ADC_Start_DMA+0x1c8>)
 8007c44:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4a:	4a3c      	ldr	r2, [pc, #240]	; (8007d3c <HAL_ADC_Start_DMA+0x1cc>)
 8007c4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c52:	4a3b      	ldr	r2, [pc, #236]	; (8007d40 <HAL_ADC_Start_DMA+0x1d0>)
 8007c54:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5a:	4a3a      	ldr	r2, [pc, #232]	; (8007d44 <HAL_ADC_Start_DMA+0x1d4>)
 8007c5c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007c66:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007c76:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	689a      	ldr	r2, [r3, #8]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c86:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	334c      	adds	r3, #76	; 0x4c
 8007c92:	4619      	mov	r1, r3
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f000 fcea 	bl	8008670 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	f003 031f 	and.w	r3, r3, #31
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d12a      	bne.n	8007cfe <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a26      	ldr	r2, [pc, #152]	; (8007d48 <HAL_ADC_Start_DMA+0x1d8>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d015      	beq.n	8007cde <HAL_ADC_Start_DMA+0x16e>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a25      	ldr	r2, [pc, #148]	; (8007d4c <HAL_ADC_Start_DMA+0x1dc>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d105      	bne.n	8007cc8 <HAL_ADC_Start_DMA+0x158>
 8007cbc:	4b1e      	ldr	r3, [pc, #120]	; (8007d38 <HAL_ADC_Start_DMA+0x1c8>)
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f003 031f 	and.w	r3, r3, #31
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00a      	beq.n	8007cde <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a20      	ldr	r2, [pc, #128]	; (8007d50 <HAL_ADC_Start_DMA+0x1e0>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d129      	bne.n	8007d26 <HAL_ADC_Start_DMA+0x1b6>
 8007cd2:	4b19      	ldr	r3, [pc, #100]	; (8007d38 <HAL_ADC_Start_DMA+0x1c8>)
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	f003 031f 	and.w	r3, r3, #31
 8007cda:	2b0f      	cmp	r3, #15
 8007cdc:	d823      	bhi.n	8007d26 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d11c      	bne.n	8007d26 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689a      	ldr	r2, [r3, #8]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007cfa:	609a      	str	r2, [r3, #8]
 8007cfc:	e013      	b.n	8007d26 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a11      	ldr	r2, [pc, #68]	; (8007d48 <HAL_ADC_Start_DMA+0x1d8>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d10e      	bne.n	8007d26 <HAL_ADC_Start_DMA+0x1b6>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d107      	bne.n	8007d26 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007d24:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3718      	adds	r7, #24
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	20000000 	.word	0x20000000
 8007d34:	431bde83 	.word	0x431bde83
 8007d38:	40012300 	.word	0x40012300
 8007d3c:	080081ed 	.word	0x080081ed
 8007d40:	080082a7 	.word	0x080082a7
 8007d44:	080082c3 	.word	0x080082c3
 8007d48:	40012000 	.word	0x40012000
 8007d4c:	40012100 	.word	0x40012100
 8007d50:	40012200 	.word	0x40012200

08007d54 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007d84:	bf00      	nop
 8007d86:	370c      	adds	r7, #12
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d101      	bne.n	8007dac <HAL_ADC_ConfigChannel+0x1c>
 8007da8:	2302      	movs	r3, #2
 8007daa:	e113      	b.n	8007fd4 <HAL_ADC_ConfigChannel+0x244>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2b09      	cmp	r3, #9
 8007dba:	d925      	bls.n	8007e08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68d9      	ldr	r1, [r3, #12]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	461a      	mov	r2, r3
 8007dca:	4613      	mov	r3, r2
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	4413      	add	r3, r2
 8007dd0:	3b1e      	subs	r3, #30
 8007dd2:	2207      	movs	r2, #7
 8007dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd8:	43da      	mvns	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	400a      	ands	r2, r1
 8007de0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68d9      	ldr	r1, [r3, #12]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	689a      	ldr	r2, [r3, #8]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	4618      	mov	r0, r3
 8007df4:	4603      	mov	r3, r0
 8007df6:	005b      	lsls	r3, r3, #1
 8007df8:	4403      	add	r3, r0
 8007dfa:	3b1e      	subs	r3, #30
 8007dfc:	409a      	lsls	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	60da      	str	r2, [r3, #12]
 8007e06:	e022      	b.n	8007e4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6919      	ldr	r1, [r3, #16]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	461a      	mov	r2, r3
 8007e16:	4613      	mov	r3, r2
 8007e18:	005b      	lsls	r3, r3, #1
 8007e1a:	4413      	add	r3, r2
 8007e1c:	2207      	movs	r2, #7
 8007e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e22:	43da      	mvns	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	400a      	ands	r2, r1
 8007e2a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6919      	ldr	r1, [r3, #16]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	689a      	ldr	r2, [r3, #8]
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	4603      	mov	r3, r0
 8007e40:	005b      	lsls	r3, r3, #1
 8007e42:	4403      	add	r3, r0
 8007e44:	409a      	lsls	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	2b06      	cmp	r3, #6
 8007e54:	d824      	bhi.n	8007ea0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	4613      	mov	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	3b05      	subs	r3, #5
 8007e68:	221f      	movs	r2, #31
 8007e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6e:	43da      	mvns	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	400a      	ands	r2, r1
 8007e76:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	4618      	mov	r0, r3
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	685a      	ldr	r2, [r3, #4]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	3b05      	subs	r3, #5
 8007e92:	fa00 f203 	lsl.w	r2, r0, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	635a      	str	r2, [r3, #52]	; 0x34
 8007e9e:	e04c      	b.n	8007f3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	2b0c      	cmp	r3, #12
 8007ea6:	d824      	bhi.n	8007ef2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	3b23      	subs	r3, #35	; 0x23
 8007eba:	221f      	movs	r2, #31
 8007ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec0:	43da      	mvns	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	400a      	ands	r2, r1
 8007ec8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	4613      	mov	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4413      	add	r3, r2
 8007ee2:	3b23      	subs	r3, #35	; 0x23
 8007ee4:	fa00 f203 	lsl.w	r2, r0, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	430a      	orrs	r2, r1
 8007eee:	631a      	str	r2, [r3, #48]	; 0x30
 8007ef0:	e023      	b.n	8007f3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	4613      	mov	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4413      	add	r3, r2
 8007f02:	3b41      	subs	r3, #65	; 0x41
 8007f04:	221f      	movs	r2, #31
 8007f06:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0a:	43da      	mvns	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	400a      	ands	r2, r1
 8007f12:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	4618      	mov	r0, r3
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	4613      	mov	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4413      	add	r3, r2
 8007f2c:	3b41      	subs	r3, #65	; 0x41
 8007f2e:	fa00 f203 	lsl.w	r2, r0, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007f3a:	4b29      	ldr	r3, [pc, #164]	; (8007fe0 <HAL_ADC_ConfigChannel+0x250>)
 8007f3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a28      	ldr	r2, [pc, #160]	; (8007fe4 <HAL_ADC_ConfigChannel+0x254>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d10f      	bne.n	8007f68 <HAL_ADC_ConfigChannel+0x1d8>
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b12      	cmp	r3, #18
 8007f4e:	d10b      	bne.n	8007f68 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a1d      	ldr	r2, [pc, #116]	; (8007fe4 <HAL_ADC_ConfigChannel+0x254>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d12b      	bne.n	8007fca <HAL_ADC_ConfigChannel+0x23a>
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a1c      	ldr	r2, [pc, #112]	; (8007fe8 <HAL_ADC_ConfigChannel+0x258>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d003      	beq.n	8007f84 <HAL_ADC_ConfigChannel+0x1f4>
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2b11      	cmp	r3, #17
 8007f82:	d122      	bne.n	8007fca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a11      	ldr	r2, [pc, #68]	; (8007fe8 <HAL_ADC_ConfigChannel+0x258>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d111      	bne.n	8007fca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007fa6:	4b11      	ldr	r3, [pc, #68]	; (8007fec <HAL_ADC_ConfigChannel+0x25c>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a11      	ldr	r2, [pc, #68]	; (8007ff0 <HAL_ADC_ConfigChannel+0x260>)
 8007fac:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb0:	0c9a      	lsrs	r2, r3, #18
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	005b      	lsls	r3, r3, #1
 8007fba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007fbc:	e002      	b.n	8007fc4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1f9      	bne.n	8007fbe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3714      	adds	r7, #20
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr
 8007fe0:	40012300 	.word	0x40012300
 8007fe4:	40012000 	.word	0x40012000
 8007fe8:	10000012 	.word	0x10000012
 8007fec:	20000000 	.word	0x20000000
 8007ff0:	431bde83 	.word	0x431bde83

08007ff4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007ffc:	4b79      	ldr	r3, [pc, #484]	; (80081e4 <ADC_Init+0x1f0>)
 8007ffe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	685a      	ldr	r2, [r3, #4]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	431a      	orrs	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008028:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	6859      	ldr	r1, [r3, #4]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	021a      	lsls	r2, r3, #8
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	430a      	orrs	r2, r1
 800803c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800804c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	6859      	ldr	r1, [r3, #4]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	689a      	ldr	r2, [r3, #8]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	430a      	orrs	r2, r1
 800805e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689a      	ldr	r2, [r3, #8]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800806e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	6899      	ldr	r1, [r3, #8]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68da      	ldr	r2, [r3, #12]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	430a      	orrs	r2, r1
 8008080:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008086:	4a58      	ldr	r2, [pc, #352]	; (80081e8 <ADC_Init+0x1f4>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d022      	beq.n	80080d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	689a      	ldr	r2, [r3, #8]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800809a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6899      	ldr	r1, [r3, #8]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	689a      	ldr	r2, [r3, #8]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80080bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6899      	ldr	r1, [r3, #8]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	430a      	orrs	r2, r1
 80080ce:	609a      	str	r2, [r3, #8]
 80080d0:	e00f      	b.n	80080f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80080e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	689a      	ldr	r2, [r3, #8]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80080f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	689a      	ldr	r2, [r3, #8]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f022 0202 	bic.w	r2, r2, #2
 8008100:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	6899      	ldr	r1, [r3, #8]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	7e1b      	ldrb	r3, [r3, #24]
 800810c:	005a      	lsls	r2, r3, #1
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	430a      	orrs	r2, r1
 8008114:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 3020 	ldrb.w	r3, [r3, #32]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d01b      	beq.n	8008158 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	685a      	ldr	r2, [r3, #4]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800812e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	685a      	ldr	r2, [r3, #4]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800813e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	6859      	ldr	r1, [r3, #4]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814a:	3b01      	subs	r3, #1
 800814c:	035a      	lsls	r2, r3, #13
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	430a      	orrs	r2, r1
 8008154:	605a      	str	r2, [r3, #4]
 8008156:	e007      	b.n	8008168 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008166:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008176:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	69db      	ldr	r3, [r3, #28]
 8008182:	3b01      	subs	r3, #1
 8008184:	051a      	lsls	r2, r3, #20
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	430a      	orrs	r2, r1
 800818c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	689a      	ldr	r2, [r3, #8]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800819c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	6899      	ldr	r1, [r3, #8]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081aa:	025a      	lsls	r2, r3, #9
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	430a      	orrs	r2, r1
 80081b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689a      	ldr	r2, [r3, #8]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	6899      	ldr	r1, [r3, #8]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	029a      	lsls	r2, r3, #10
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	430a      	orrs	r2, r1
 80081d6:	609a      	str	r2, [r3, #8]
}
 80081d8:	bf00      	nop
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr
 80081e4:	40012300 	.word	0x40012300
 80081e8:	0f000001 	.word	0x0f000001

080081ec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008202:	2b00      	cmp	r3, #0
 8008204:	d13c      	bne.n	8008280 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d12b      	bne.n	8008278 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008224:	2b00      	cmp	r3, #0
 8008226:	d127      	bne.n	8008278 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008232:	2b00      	cmp	r3, #0
 8008234:	d006      	beq.n	8008244 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008240:	2b00      	cmp	r3, #0
 8008242:	d119      	bne.n	8008278 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f022 0220 	bic.w	r2, r2, #32
 8008252:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008258:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008264:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008268:	2b00      	cmp	r3, #0
 800826a:	d105      	bne.n	8008278 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008270:	f043 0201 	orr.w	r2, r3, #1
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f7ff fd6b 	bl	8007d54 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800827e:	e00e      	b.n	800829e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008284:	f003 0310 	and.w	r3, r3, #16
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f7ff fd75 	bl	8007d7c <HAL_ADC_ErrorCallback>
}
 8008292:	e004      	b.n	800829e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	4798      	blx	r3
}
 800829e:	bf00      	nop
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f7ff fd57 	bl	8007d68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80082ba:	bf00      	nop
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ce:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2240      	movs	r2, #64	; 0x40
 80082d4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082da:	f043 0204 	orr.w	r2, r3, #4
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f7ff fd4a 	bl	8007d7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80082e8:	bf00      	nop
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f003 0307 	and.w	r3, r3, #7
 80082fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008300:	4b0c      	ldr	r3, [pc, #48]	; (8008334 <__NVIC_SetPriorityGrouping+0x44>)
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800830c:	4013      	ands	r3, r2
 800830e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800831c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008322:	4a04      	ldr	r2, [pc, #16]	; (8008334 <__NVIC_SetPriorityGrouping+0x44>)
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	60d3      	str	r3, [r2, #12]
}
 8008328:	bf00      	nop
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	e000ed00 	.word	0xe000ed00

08008338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008338:	b480      	push	{r7}
 800833a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800833c:	4b04      	ldr	r3, [pc, #16]	; (8008350 <__NVIC_GetPriorityGrouping+0x18>)
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	0a1b      	lsrs	r3, r3, #8
 8008342:	f003 0307 	and.w	r3, r3, #7
}
 8008346:	4618      	mov	r0, r3
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr
 8008350:	e000ed00 	.word	0xe000ed00

08008354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	4603      	mov	r3, r0
 800835c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800835e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008362:	2b00      	cmp	r3, #0
 8008364:	db0b      	blt.n	800837e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008366:	79fb      	ldrb	r3, [r7, #7]
 8008368:	f003 021f 	and.w	r2, r3, #31
 800836c:	4907      	ldr	r1, [pc, #28]	; (800838c <__NVIC_EnableIRQ+0x38>)
 800836e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008372:	095b      	lsrs	r3, r3, #5
 8008374:	2001      	movs	r0, #1
 8008376:	fa00 f202 	lsl.w	r2, r0, r2
 800837a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800837e:	bf00      	nop
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	e000e100 	.word	0xe000e100

08008390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	4603      	mov	r3, r0
 8008398:	6039      	str	r1, [r7, #0]
 800839a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800839c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	db0a      	blt.n	80083ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	490c      	ldr	r1, [pc, #48]	; (80083dc <__NVIC_SetPriority+0x4c>)
 80083aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083ae:	0112      	lsls	r2, r2, #4
 80083b0:	b2d2      	uxtb	r2, r2
 80083b2:	440b      	add	r3, r1
 80083b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80083b8:	e00a      	b.n	80083d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	4908      	ldr	r1, [pc, #32]	; (80083e0 <__NVIC_SetPriority+0x50>)
 80083c0:	79fb      	ldrb	r3, [r7, #7]
 80083c2:	f003 030f 	and.w	r3, r3, #15
 80083c6:	3b04      	subs	r3, #4
 80083c8:	0112      	lsls	r2, r2, #4
 80083ca:	b2d2      	uxtb	r2, r2
 80083cc:	440b      	add	r3, r1
 80083ce:	761a      	strb	r2, [r3, #24]
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	e000e100 	.word	0xe000e100
 80083e0:	e000ed00 	.word	0xe000ed00

080083e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b089      	sub	sp, #36	; 0x24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f003 0307 	and.w	r3, r3, #7
 80083f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	f1c3 0307 	rsb	r3, r3, #7
 80083fe:	2b04      	cmp	r3, #4
 8008400:	bf28      	it	cs
 8008402:	2304      	movcs	r3, #4
 8008404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	3304      	adds	r3, #4
 800840a:	2b06      	cmp	r3, #6
 800840c:	d902      	bls.n	8008414 <NVIC_EncodePriority+0x30>
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	3b03      	subs	r3, #3
 8008412:	e000      	b.n	8008416 <NVIC_EncodePriority+0x32>
 8008414:	2300      	movs	r3, #0
 8008416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008418:	f04f 32ff 	mov.w	r2, #4294967295
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	fa02 f303 	lsl.w	r3, r2, r3
 8008422:	43da      	mvns	r2, r3
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	401a      	ands	r2, r3
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800842c:	f04f 31ff 	mov.w	r1, #4294967295
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	fa01 f303 	lsl.w	r3, r1, r3
 8008436:	43d9      	mvns	r1, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800843c:	4313      	orrs	r3, r2
         );
}
 800843e:	4618      	mov	r0, r3
 8008440:	3724      	adds	r7, #36	; 0x24
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
	...

0800844c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3b01      	subs	r3, #1
 8008458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800845c:	d301      	bcc.n	8008462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800845e:	2301      	movs	r3, #1
 8008460:	e00f      	b.n	8008482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008462:	4a0a      	ldr	r2, [pc, #40]	; (800848c <SysTick_Config+0x40>)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	3b01      	subs	r3, #1
 8008468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800846a:	210f      	movs	r1, #15
 800846c:	f04f 30ff 	mov.w	r0, #4294967295
 8008470:	f7ff ff8e 	bl	8008390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008474:	4b05      	ldr	r3, [pc, #20]	; (800848c <SysTick_Config+0x40>)
 8008476:	2200      	movs	r2, #0
 8008478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800847a:	4b04      	ldr	r3, [pc, #16]	; (800848c <SysTick_Config+0x40>)
 800847c:	2207      	movs	r2, #7
 800847e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	e000e010 	.word	0xe000e010

08008490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f7ff ff29 	bl	80082f0 <__NVIC_SetPriorityGrouping>
}
 800849e:	bf00      	nop
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b086      	sub	sp, #24
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	4603      	mov	r3, r0
 80084ae:	60b9      	str	r1, [r7, #8]
 80084b0:	607a      	str	r2, [r7, #4]
 80084b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80084b4:	2300      	movs	r3, #0
 80084b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80084b8:	f7ff ff3e 	bl	8008338 <__NVIC_GetPriorityGrouping>
 80084bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	68b9      	ldr	r1, [r7, #8]
 80084c2:	6978      	ldr	r0, [r7, #20]
 80084c4:	f7ff ff8e 	bl	80083e4 <NVIC_EncodePriority>
 80084c8:	4602      	mov	r2, r0
 80084ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084ce:	4611      	mov	r1, r2
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7ff ff5d 	bl	8008390 <__NVIC_SetPriority>
}
 80084d6:	bf00      	nop
 80084d8:	3718      	adds	r7, #24
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b082      	sub	sp, #8
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	4603      	mov	r3, r0
 80084e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80084e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7ff ff31 	bl	8008354 <__NVIC_EnableIRQ>
}
 80084f2:	bf00      	nop
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b082      	sub	sp, #8
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7ff ffa2 	bl	800844c <SysTick_Config>
 8008508:	4603      	mov	r3, r0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
	...

08008514 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800851c:	2300      	movs	r3, #0
 800851e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008520:	f7ff fab4 	bl	8007a8c <HAL_GetTick>
 8008524:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d101      	bne.n	8008530 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e099      	b.n	8008664 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2202      	movs	r2, #2
 800853c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f022 0201 	bic.w	r2, r2, #1
 800854e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008550:	e00f      	b.n	8008572 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008552:	f7ff fa9b 	bl	8007a8c <HAL_GetTick>
 8008556:	4602      	mov	r2, r0
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	2b05      	cmp	r3, #5
 800855e:	d908      	bls.n	8008572 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2220      	movs	r2, #32
 8008564:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2203      	movs	r2, #3
 800856a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e078      	b.n	8008664 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0301 	and.w	r3, r3, #1
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1e8      	bne.n	8008552 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	4b38      	ldr	r3, [pc, #224]	; (800866c <HAL_DMA_Init+0x158>)
 800858c:	4013      	ands	r3, r2
 800858e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685a      	ldr	r2, [r3, #4]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800859e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6a1b      	ldr	r3, [r3, #32]
 80085bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c8:	2b04      	cmp	r3, #4
 80085ca:	d107      	bne.n	80085dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d4:	4313      	orrs	r3, r2
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	4313      	orrs	r3, r2
 80085da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	697a      	ldr	r2, [r7, #20]
 80085e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f023 0307 	bic.w	r3, r3, #7
 80085f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	697a      	ldr	r2, [r7, #20]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008602:	2b04      	cmp	r3, #4
 8008604:	d117      	bne.n	8008636 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	4313      	orrs	r3, r2
 800860e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00e      	beq.n	8008636 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fa9d 	bl	8008b58 <DMA_CheckFifoParam>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d008      	beq.n	8008636 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2240      	movs	r2, #64	; 0x40
 8008628:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008632:	2301      	movs	r3, #1
 8008634:	e016      	b.n	8008664 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fa54 	bl	8008aec <DMA_CalcBaseAndBitshift>
 8008644:	4603      	mov	r3, r0
 8008646:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800864c:	223f      	movs	r2, #63	; 0x3f
 800864e:	409a      	lsls	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3718      	adds	r7, #24
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	f010803f 	.word	0xf010803f

08008670 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
 800867c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008686:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800868e:	2b01      	cmp	r3, #1
 8008690:	d101      	bne.n	8008696 <HAL_DMA_Start_IT+0x26>
 8008692:	2302      	movs	r3, #2
 8008694:	e040      	b.n	8008718 <HAL_DMA_Start_IT+0xa8>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2201      	movs	r2, #1
 800869a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d12f      	bne.n	800870a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2202      	movs	r2, #2
 80086ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	68b9      	ldr	r1, [r7, #8]
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f000 f9e6 	bl	8008a90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086c8:	223f      	movs	r2, #63	; 0x3f
 80086ca:	409a      	lsls	r2, r3
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f042 0216 	orr.w	r2, r2, #22
 80086de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d007      	beq.n	80086f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f042 0208 	orr.w	r2, r2, #8
 80086f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f042 0201 	orr.w	r2, r2, #1
 8008706:	601a      	str	r2, [r3, #0]
 8008708:	e005      	b.n	8008716 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008712:	2302      	movs	r3, #2
 8008714:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008716:	7dfb      	ldrb	r3, [r7, #23]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3718      	adds	r7, #24
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800872e:	b2db      	uxtb	r3, r3
 8008730:	2b02      	cmp	r3, #2
 8008732:	d004      	beq.n	800873e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2280      	movs	r2, #128	; 0x80
 8008738:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e00c      	b.n	8008758 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2205      	movs	r2, #5
 8008742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f022 0201 	bic.w	r2, r2, #1
 8008754:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800876c:	2300      	movs	r3, #0
 800876e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008770:	4b92      	ldr	r3, [pc, #584]	; (80089bc <HAL_DMA_IRQHandler+0x258>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a92      	ldr	r2, [pc, #584]	; (80089c0 <HAL_DMA_IRQHandler+0x25c>)
 8008776:	fba2 2303 	umull	r2, r3, r2, r3
 800877a:	0a9b      	lsrs	r3, r3, #10
 800877c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008782:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800878e:	2208      	movs	r2, #8
 8008790:	409a      	lsls	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	4013      	ands	r3, r2
 8008796:	2b00      	cmp	r3, #0
 8008798:	d01a      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0304 	and.w	r3, r3, #4
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d013      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f022 0204 	bic.w	r2, r2, #4
 80087b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087bc:	2208      	movs	r2, #8
 80087be:	409a      	lsls	r2, r3
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c8:	f043 0201 	orr.w	r2, r3, #1
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087d4:	2201      	movs	r2, #1
 80087d6:	409a      	lsls	r2, r3
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	4013      	ands	r3, r2
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d012      	beq.n	8008806 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00b      	beq.n	8008806 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087f2:	2201      	movs	r2, #1
 80087f4:	409a      	lsls	r2, r3
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087fe:	f043 0202 	orr.w	r2, r3, #2
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800880a:	2204      	movs	r2, #4
 800880c:	409a      	lsls	r2, r3
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	4013      	ands	r3, r2
 8008812:	2b00      	cmp	r3, #0
 8008814:	d012      	beq.n	800883c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 0302 	and.w	r3, r3, #2
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00b      	beq.n	800883c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008828:	2204      	movs	r2, #4
 800882a:	409a      	lsls	r2, r3
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008834:	f043 0204 	orr.w	r2, r3, #4
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008840:	2210      	movs	r2, #16
 8008842:	409a      	lsls	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	4013      	ands	r3, r2
 8008848:	2b00      	cmp	r3, #0
 800884a:	d043      	beq.n	80088d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 0308 	and.w	r3, r3, #8
 8008856:	2b00      	cmp	r3, #0
 8008858:	d03c      	beq.n	80088d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800885e:	2210      	movs	r2, #16
 8008860:	409a      	lsls	r2, r3
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d018      	beq.n	80088a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d108      	bne.n	8008894 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008886:	2b00      	cmp	r3, #0
 8008888:	d024      	beq.n	80088d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	4798      	blx	r3
 8008892:	e01f      	b.n	80088d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008898:	2b00      	cmp	r3, #0
 800889a:	d01b      	beq.n	80088d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	4798      	blx	r3
 80088a4:	e016      	b.n	80088d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d107      	bne.n	80088c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f022 0208 	bic.w	r2, r2, #8
 80088c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d003      	beq.n	80088d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088d8:	2220      	movs	r2, #32
 80088da:	409a      	lsls	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4013      	ands	r3, r2
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 808e 	beq.w	8008a02 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 0310 	and.w	r3, r3, #16
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 8086 	beq.w	8008a02 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088fa:	2220      	movs	r2, #32
 80088fc:	409a      	lsls	r2, r3
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b05      	cmp	r3, #5
 800890c:	d136      	bne.n	800897c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f022 0216 	bic.w	r2, r2, #22
 800891c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	695a      	ldr	r2, [r3, #20]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800892c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008932:	2b00      	cmp	r3, #0
 8008934:	d103      	bne.n	800893e <HAL_DMA_IRQHandler+0x1da>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800893a:	2b00      	cmp	r3, #0
 800893c:	d007      	beq.n	800894e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f022 0208 	bic.w	r2, r2, #8
 800894c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008952:	223f      	movs	r2, #63	; 0x3f
 8008954:	409a      	lsls	r2, r3
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2201      	movs	r2, #1
 8008966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800896e:	2b00      	cmp	r3, #0
 8008970:	d07d      	beq.n	8008a6e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	4798      	blx	r3
        }
        return;
 800897a:	e078      	b.n	8008a6e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d01c      	beq.n	80089c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d108      	bne.n	80089aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800899c:	2b00      	cmp	r3, #0
 800899e:	d030      	beq.n	8008a02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	4798      	blx	r3
 80089a8:	e02b      	b.n	8008a02 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d027      	beq.n	8008a02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	4798      	blx	r3
 80089ba:	e022      	b.n	8008a02 <HAL_DMA_IRQHandler+0x29e>
 80089bc:	20000000 	.word	0x20000000
 80089c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10f      	bne.n	80089f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f022 0210 	bic.w	r2, r2, #16
 80089e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d032      	beq.n	8008a70 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d022      	beq.n	8008a5c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2205      	movs	r2, #5
 8008a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f022 0201 	bic.w	r2, r2, #1
 8008a2c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	3301      	adds	r3, #1
 8008a32:	60bb      	str	r3, [r7, #8]
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d307      	bcc.n	8008a4a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0301 	and.w	r3, r3, #1
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1f2      	bne.n	8008a2e <HAL_DMA_IRQHandler+0x2ca>
 8008a48:	e000      	b.n	8008a4c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008a4a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d005      	beq.n	8008a70 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	4798      	blx	r3
 8008a6c:	e000      	b.n	8008a70 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008a6e:	bf00      	nop
    }
  }
}
 8008a70:	3718      	adds	r7, #24
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop

08008a78 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
 8008a9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008aac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	2b40      	cmp	r3, #64	; 0x40
 8008abc:	d108      	bne.n	8008ad0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008ace:	e007      	b.n	8008ae0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	60da      	str	r2, [r3, #12]
}
 8008ae0:	bf00      	nop
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	3b10      	subs	r3, #16
 8008afc:	4a14      	ldr	r2, [pc, #80]	; (8008b50 <DMA_CalcBaseAndBitshift+0x64>)
 8008afe:	fba2 2303 	umull	r2, r3, r2, r3
 8008b02:	091b      	lsrs	r3, r3, #4
 8008b04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008b06:	4a13      	ldr	r2, [pc, #76]	; (8008b54 <DMA_CalcBaseAndBitshift+0x68>)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2b03      	cmp	r3, #3
 8008b18:	d909      	bls.n	8008b2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008b22:	f023 0303 	bic.w	r3, r3, #3
 8008b26:	1d1a      	adds	r2, r3, #4
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	659a      	str	r2, [r3, #88]	; 0x58
 8008b2c:	e007      	b.n	8008b3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008b36:	f023 0303 	bic.w	r3, r3, #3
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	aaaaaaab 	.word	0xaaaaaaab
 8008b54:	08017ea0 	.word	0x08017ea0

08008b58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	699b      	ldr	r3, [r3, #24]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d11f      	bne.n	8008bb2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	2b03      	cmp	r3, #3
 8008b76:	d855      	bhi.n	8008c24 <DMA_CheckFifoParam+0xcc>
 8008b78:	a201      	add	r2, pc, #4	; (adr r2, 8008b80 <DMA_CheckFifoParam+0x28>)
 8008b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7e:	bf00      	nop
 8008b80:	08008b91 	.word	0x08008b91
 8008b84:	08008ba3 	.word	0x08008ba3
 8008b88:	08008b91 	.word	0x08008b91
 8008b8c:	08008c25 	.word	0x08008c25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d045      	beq.n	8008c28 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ba0:	e042      	b.n	8008c28 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008baa:	d13f      	bne.n	8008c2c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008bb0:	e03c      	b.n	8008c2c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	699b      	ldr	r3, [r3, #24]
 8008bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bba:	d121      	bne.n	8008c00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	d836      	bhi.n	8008c30 <DMA_CheckFifoParam+0xd8>
 8008bc2:	a201      	add	r2, pc, #4	; (adr r2, 8008bc8 <DMA_CheckFifoParam+0x70>)
 8008bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc8:	08008bd9 	.word	0x08008bd9
 8008bcc:	08008bdf 	.word	0x08008bdf
 8008bd0:	08008bd9 	.word	0x08008bd9
 8008bd4:	08008bf1 	.word	0x08008bf1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	73fb      	strb	r3, [r7, #15]
      break;
 8008bdc:	e02f      	b.n	8008c3e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d024      	beq.n	8008c34 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008bee:	e021      	b.n	8008c34 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008bf8:	d11e      	bne.n	8008c38 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008bfe:	e01b      	b.n	8008c38 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d902      	bls.n	8008c0c <DMA_CheckFifoParam+0xb4>
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d003      	beq.n	8008c12 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008c0a:	e018      	b.n	8008c3e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c10:	e015      	b.n	8008c3e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00e      	beq.n	8008c3c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	73fb      	strb	r3, [r7, #15]
      break;
 8008c22:	e00b      	b.n	8008c3c <DMA_CheckFifoParam+0xe4>
      break;
 8008c24:	bf00      	nop
 8008c26:	e00a      	b.n	8008c3e <DMA_CheckFifoParam+0xe6>
      break;
 8008c28:	bf00      	nop
 8008c2a:	e008      	b.n	8008c3e <DMA_CheckFifoParam+0xe6>
      break;
 8008c2c:	bf00      	nop
 8008c2e:	e006      	b.n	8008c3e <DMA_CheckFifoParam+0xe6>
      break;
 8008c30:	bf00      	nop
 8008c32:	e004      	b.n	8008c3e <DMA_CheckFifoParam+0xe6>
      break;
 8008c34:	bf00      	nop
 8008c36:	e002      	b.n	8008c3e <DMA_CheckFifoParam+0xe6>
      break;   
 8008c38:	bf00      	nop
 8008c3a:	e000      	b.n	8008c3e <DMA_CheckFifoParam+0xe6>
      break;
 8008c3c:	bf00      	nop
    }
  } 
  
  return status; 
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b089      	sub	sp, #36	; 0x24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008c56:	2300      	movs	r3, #0
 8008c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008c62:	2300      	movs	r3, #0
 8008c64:	61fb      	str	r3, [r7, #28]
 8008c66:	e177      	b.n	8008f58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008c68:	2201      	movs	r2, #1
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	697a      	ldr	r2, [r7, #20]
 8008c78:	4013      	ands	r3, r2
 8008c7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	f040 8166 	bne.w	8008f52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d00b      	beq.n	8008ca6 <HAL_GPIO_Init+0x5a>
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d007      	beq.n	8008ca6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008c9a:	2b11      	cmp	r3, #17
 8008c9c:	d003      	beq.n	8008ca6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	2b12      	cmp	r3, #18
 8008ca4:	d130      	bne.n	8008d08 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	005b      	lsls	r3, r3, #1
 8008cb0:	2203      	movs	r2, #3
 8008cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb6:	43db      	mvns	r3, r3
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	4013      	ands	r3, r2
 8008cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	68da      	ldr	r2, [r3, #12]
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	005b      	lsls	r3, r3, #1
 8008cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	69ba      	ldr	r2, [r7, #24]
 8008cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008cdc:	2201      	movs	r2, #1
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce4:	43db      	mvns	r3, r3
 8008ce6:	69ba      	ldr	r2, [r7, #24]
 8008ce8:	4013      	ands	r3, r2
 8008cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	091b      	lsrs	r3, r3, #4
 8008cf2:	f003 0201 	and.w	r2, r3, #1
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	69ba      	ldr	r2, [r7, #24]
 8008d06:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	005b      	lsls	r3, r3, #1
 8008d12:	2203      	movs	r2, #3
 8008d14:	fa02 f303 	lsl.w	r3, r2, r3
 8008d18:	43db      	mvns	r3, r3
 8008d1a:	69ba      	ldr	r2, [r7, #24]
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	689a      	ldr	r2, [r3, #8]
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	005b      	lsls	r3, r3, #1
 8008d28:	fa02 f303 	lsl.w	r3, r2, r3
 8008d2c:	69ba      	ldr	r2, [r7, #24]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	69ba      	ldr	r2, [r7, #24]
 8008d36:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d003      	beq.n	8008d48 <HAL_GPIO_Init+0xfc>
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	2b12      	cmp	r3, #18
 8008d46:	d123      	bne.n	8008d90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	08da      	lsrs	r2, r3, #3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	3208      	adds	r2, #8
 8008d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	f003 0307 	and.w	r3, r3, #7
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	220f      	movs	r2, #15
 8008d60:	fa02 f303 	lsl.w	r3, r2, r3
 8008d64:	43db      	mvns	r3, r3
 8008d66:	69ba      	ldr	r2, [r7, #24]
 8008d68:	4013      	ands	r3, r2
 8008d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	691a      	ldr	r2, [r3, #16]
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	f003 0307 	and.w	r3, r3, #7
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	fa02 f303 	lsl.w	r3, r2, r3
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	08da      	lsrs	r2, r3, #3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	3208      	adds	r2, #8
 8008d8a:	69b9      	ldr	r1, [r7, #24]
 8008d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	005b      	lsls	r3, r3, #1
 8008d9a:	2203      	movs	r2, #3
 8008d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008da0:	43db      	mvns	r3, r3
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	4013      	ands	r3, r2
 8008da6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	f003 0203 	and.w	r2, r3, #3
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	005b      	lsls	r3, r3, #1
 8008db4:	fa02 f303 	lsl.w	r3, r2, r3
 8008db8:	69ba      	ldr	r2, [r7, #24]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	69ba      	ldr	r2, [r7, #24]
 8008dc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f000 80c0 	beq.w	8008f52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	60fb      	str	r3, [r7, #12]
 8008dd6:	4b65      	ldr	r3, [pc, #404]	; (8008f6c <HAL_GPIO_Init+0x320>)
 8008dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dda:	4a64      	ldr	r2, [pc, #400]	; (8008f6c <HAL_GPIO_Init+0x320>)
 8008ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008de0:	6453      	str	r3, [r2, #68]	; 0x44
 8008de2:	4b62      	ldr	r3, [pc, #392]	; (8008f6c <HAL_GPIO_Init+0x320>)
 8008de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dea:	60fb      	str	r3, [r7, #12]
 8008dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008dee:	4a60      	ldr	r2, [pc, #384]	; (8008f70 <HAL_GPIO_Init+0x324>)
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	089b      	lsrs	r3, r3, #2
 8008df4:	3302      	adds	r3, #2
 8008df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	f003 0303 	and.w	r3, r3, #3
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	220f      	movs	r2, #15
 8008e06:	fa02 f303 	lsl.w	r3, r2, r3
 8008e0a:	43db      	mvns	r3, r3
 8008e0c:	69ba      	ldr	r2, [r7, #24]
 8008e0e:	4013      	ands	r3, r2
 8008e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a57      	ldr	r2, [pc, #348]	; (8008f74 <HAL_GPIO_Init+0x328>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d037      	beq.n	8008e8a <HAL_GPIO_Init+0x23e>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a56      	ldr	r2, [pc, #344]	; (8008f78 <HAL_GPIO_Init+0x32c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d031      	beq.n	8008e86 <HAL_GPIO_Init+0x23a>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a55      	ldr	r2, [pc, #340]	; (8008f7c <HAL_GPIO_Init+0x330>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d02b      	beq.n	8008e82 <HAL_GPIO_Init+0x236>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a54      	ldr	r2, [pc, #336]	; (8008f80 <HAL_GPIO_Init+0x334>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d025      	beq.n	8008e7e <HAL_GPIO_Init+0x232>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a53      	ldr	r2, [pc, #332]	; (8008f84 <HAL_GPIO_Init+0x338>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d01f      	beq.n	8008e7a <HAL_GPIO_Init+0x22e>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a52      	ldr	r2, [pc, #328]	; (8008f88 <HAL_GPIO_Init+0x33c>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d019      	beq.n	8008e76 <HAL_GPIO_Init+0x22a>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a51      	ldr	r2, [pc, #324]	; (8008f8c <HAL_GPIO_Init+0x340>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d013      	beq.n	8008e72 <HAL_GPIO_Init+0x226>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a50      	ldr	r2, [pc, #320]	; (8008f90 <HAL_GPIO_Init+0x344>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d00d      	beq.n	8008e6e <HAL_GPIO_Init+0x222>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a4f      	ldr	r2, [pc, #316]	; (8008f94 <HAL_GPIO_Init+0x348>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d007      	beq.n	8008e6a <HAL_GPIO_Init+0x21e>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a4e      	ldr	r2, [pc, #312]	; (8008f98 <HAL_GPIO_Init+0x34c>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d101      	bne.n	8008e66 <HAL_GPIO_Init+0x21a>
 8008e62:	2309      	movs	r3, #9
 8008e64:	e012      	b.n	8008e8c <HAL_GPIO_Init+0x240>
 8008e66:	230a      	movs	r3, #10
 8008e68:	e010      	b.n	8008e8c <HAL_GPIO_Init+0x240>
 8008e6a:	2308      	movs	r3, #8
 8008e6c:	e00e      	b.n	8008e8c <HAL_GPIO_Init+0x240>
 8008e6e:	2307      	movs	r3, #7
 8008e70:	e00c      	b.n	8008e8c <HAL_GPIO_Init+0x240>
 8008e72:	2306      	movs	r3, #6
 8008e74:	e00a      	b.n	8008e8c <HAL_GPIO_Init+0x240>
 8008e76:	2305      	movs	r3, #5
 8008e78:	e008      	b.n	8008e8c <HAL_GPIO_Init+0x240>
 8008e7a:	2304      	movs	r3, #4
 8008e7c:	e006      	b.n	8008e8c <HAL_GPIO_Init+0x240>
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e004      	b.n	8008e8c <HAL_GPIO_Init+0x240>
 8008e82:	2302      	movs	r3, #2
 8008e84:	e002      	b.n	8008e8c <HAL_GPIO_Init+0x240>
 8008e86:	2301      	movs	r3, #1
 8008e88:	e000      	b.n	8008e8c <HAL_GPIO_Init+0x240>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	69fa      	ldr	r2, [r7, #28]
 8008e8e:	f002 0203 	and.w	r2, r2, #3
 8008e92:	0092      	lsls	r2, r2, #2
 8008e94:	4093      	lsls	r3, r2
 8008e96:	69ba      	ldr	r2, [r7, #24]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e9c:	4934      	ldr	r1, [pc, #208]	; (8008f70 <HAL_GPIO_Init+0x324>)
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	089b      	lsrs	r3, r3, #2
 8008ea2:	3302      	adds	r3, #2
 8008ea4:	69ba      	ldr	r2, [r7, #24]
 8008ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008eaa:	4b3c      	ldr	r3, [pc, #240]	; (8008f9c <HAL_GPIO_Init+0x350>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	43db      	mvns	r3, r3
 8008eb4:	69ba      	ldr	r2, [r7, #24]
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d003      	beq.n	8008ece <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008ec6:	69ba      	ldr	r2, [r7, #24]
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008ece:	4a33      	ldr	r2, [pc, #204]	; (8008f9c <HAL_GPIO_Init+0x350>)
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008ed4:	4b31      	ldr	r3, [pc, #196]	; (8008f9c <HAL_GPIO_Init+0x350>)
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	43db      	mvns	r3, r3
 8008ede:	69ba      	ldr	r2, [r7, #24]
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d003      	beq.n	8008ef8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008ef0:	69ba      	ldr	r2, [r7, #24]
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008ef8:	4a28      	ldr	r2, [pc, #160]	; (8008f9c <HAL_GPIO_Init+0x350>)
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008efe:	4b27      	ldr	r3, [pc, #156]	; (8008f9c <HAL_GPIO_Init+0x350>)
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	43db      	mvns	r3, r3
 8008f08:	69ba      	ldr	r2, [r7, #24]
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d003      	beq.n	8008f22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008f1a:	69ba      	ldr	r2, [r7, #24]
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008f22:	4a1e      	ldr	r2, [pc, #120]	; (8008f9c <HAL_GPIO_Init+0x350>)
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008f28:	4b1c      	ldr	r3, [pc, #112]	; (8008f9c <HAL_GPIO_Init+0x350>)
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	43db      	mvns	r3, r3
 8008f32:	69ba      	ldr	r2, [r7, #24]
 8008f34:	4013      	ands	r3, r2
 8008f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d003      	beq.n	8008f4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008f44:	69ba      	ldr	r2, [r7, #24]
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008f4c:	4a13      	ldr	r2, [pc, #76]	; (8008f9c <HAL_GPIO_Init+0x350>)
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	3301      	adds	r3, #1
 8008f56:	61fb      	str	r3, [r7, #28]
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	2b0f      	cmp	r3, #15
 8008f5c:	f67f ae84 	bls.w	8008c68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008f60:	bf00      	nop
 8008f62:	3724      	adds	r7, #36	; 0x24
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	40023800 	.word	0x40023800
 8008f70:	40013800 	.word	0x40013800
 8008f74:	40020000 	.word	0x40020000
 8008f78:	40020400 	.word	0x40020400
 8008f7c:	40020800 	.word	0x40020800
 8008f80:	40020c00 	.word	0x40020c00
 8008f84:	40021000 	.word	0x40021000
 8008f88:	40021400 	.word	0x40021400
 8008f8c:	40021800 	.word	0x40021800
 8008f90:	40021c00 	.word	0x40021c00
 8008f94:	40022000 	.word	0x40022000
 8008f98:	40022400 	.word	0x40022400
 8008f9c:	40013c00 	.word	0x40013c00

08008fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	691a      	ldr	r2, [r3, #16]
 8008fb0:	887b      	ldrh	r3, [r7, #2]
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d002      	beq.n	8008fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	73fb      	strb	r3, [r7, #15]
 8008fbc:	e001      	b.n	8008fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	460b      	mov	r3, r1
 8008fda:	807b      	strh	r3, [r7, #2]
 8008fdc:	4613      	mov	r3, r2
 8008fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008fe0:	787b      	ldrb	r3, [r7, #1]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d003      	beq.n	8008fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008fe6:	887a      	ldrh	r2, [r7, #2]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008fec:	e003      	b.n	8008ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008fee:	887b      	ldrh	r3, [r7, #2]
 8008ff0:	041a      	lsls	r2, r3, #16
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	619a      	str	r2, [r3, #24]
}
 8008ff6:	bf00      	nop
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
	...

08009004 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d101      	bne.n	8009016 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e11f      	b.n	8009256 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800901c:	b2db      	uxtb	r3, r3
 800901e:	2b00      	cmp	r3, #0
 8009020:	d106      	bne.n	8009030 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f7fc fc94 	bl	8005958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2224      	movs	r2, #36	; 0x24
 8009034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f022 0201 	bic.w	r2, r2, #1
 8009046:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009056:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009066:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009068:	f001 f96e 	bl	800a348 <HAL_RCC_GetPCLK1Freq>
 800906c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	4a7b      	ldr	r2, [pc, #492]	; (8009260 <HAL_I2C_Init+0x25c>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d807      	bhi.n	8009088 <HAL_I2C_Init+0x84>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	4a7a      	ldr	r2, [pc, #488]	; (8009264 <HAL_I2C_Init+0x260>)
 800907c:	4293      	cmp	r3, r2
 800907e:	bf94      	ite	ls
 8009080:	2301      	movls	r3, #1
 8009082:	2300      	movhi	r3, #0
 8009084:	b2db      	uxtb	r3, r3
 8009086:	e006      	b.n	8009096 <HAL_I2C_Init+0x92>
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	4a77      	ldr	r2, [pc, #476]	; (8009268 <HAL_I2C_Init+0x264>)
 800908c:	4293      	cmp	r3, r2
 800908e:	bf94      	ite	ls
 8009090:	2301      	movls	r3, #1
 8009092:	2300      	movhi	r3, #0
 8009094:	b2db      	uxtb	r3, r3
 8009096:	2b00      	cmp	r3, #0
 8009098:	d001      	beq.n	800909e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e0db      	b.n	8009256 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	4a72      	ldr	r2, [pc, #456]	; (800926c <HAL_I2C_Init+0x268>)
 80090a2:	fba2 2303 	umull	r2, r3, r2, r3
 80090a6:	0c9b      	lsrs	r3, r3, #18
 80090a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	68ba      	ldr	r2, [r7, #8]
 80090ba:	430a      	orrs	r2, r1
 80090bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	6a1b      	ldr	r3, [r3, #32]
 80090c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	4a64      	ldr	r2, [pc, #400]	; (8009260 <HAL_I2C_Init+0x25c>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d802      	bhi.n	80090d8 <HAL_I2C_Init+0xd4>
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	3301      	adds	r3, #1
 80090d6:	e009      	b.n	80090ec <HAL_I2C_Init+0xe8>
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80090de:	fb02 f303 	mul.w	r3, r2, r3
 80090e2:	4a63      	ldr	r2, [pc, #396]	; (8009270 <HAL_I2C_Init+0x26c>)
 80090e4:	fba2 2303 	umull	r2, r3, r2, r3
 80090e8:	099b      	lsrs	r3, r3, #6
 80090ea:	3301      	adds	r3, #1
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	6812      	ldr	r2, [r2, #0]
 80090f0:	430b      	orrs	r3, r1
 80090f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	69db      	ldr	r3, [r3, #28]
 80090fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80090fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	4956      	ldr	r1, [pc, #344]	; (8009260 <HAL_I2C_Init+0x25c>)
 8009108:	428b      	cmp	r3, r1
 800910a:	d80d      	bhi.n	8009128 <HAL_I2C_Init+0x124>
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	1e59      	subs	r1, r3, #1
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	005b      	lsls	r3, r3, #1
 8009116:	fbb1 f3f3 	udiv	r3, r1, r3
 800911a:	3301      	adds	r3, #1
 800911c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009120:	2b04      	cmp	r3, #4
 8009122:	bf38      	it	cc
 8009124:	2304      	movcc	r3, #4
 8009126:	e04f      	b.n	80091c8 <HAL_I2C_Init+0x1c4>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d111      	bne.n	8009154 <HAL_I2C_Init+0x150>
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	1e58      	subs	r0, r3, #1
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6859      	ldr	r1, [r3, #4]
 8009138:	460b      	mov	r3, r1
 800913a:	005b      	lsls	r3, r3, #1
 800913c:	440b      	add	r3, r1
 800913e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009142:	3301      	adds	r3, #1
 8009144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009148:	2b00      	cmp	r3, #0
 800914a:	bf0c      	ite	eq
 800914c:	2301      	moveq	r3, #1
 800914e:	2300      	movne	r3, #0
 8009150:	b2db      	uxtb	r3, r3
 8009152:	e012      	b.n	800917a <HAL_I2C_Init+0x176>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	1e58      	subs	r0, r3, #1
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6859      	ldr	r1, [r3, #4]
 800915c:	460b      	mov	r3, r1
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	440b      	add	r3, r1
 8009162:	0099      	lsls	r1, r3, #2
 8009164:	440b      	add	r3, r1
 8009166:	fbb0 f3f3 	udiv	r3, r0, r3
 800916a:	3301      	adds	r3, #1
 800916c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009170:	2b00      	cmp	r3, #0
 8009172:	bf0c      	ite	eq
 8009174:	2301      	moveq	r3, #1
 8009176:	2300      	movne	r3, #0
 8009178:	b2db      	uxtb	r3, r3
 800917a:	2b00      	cmp	r3, #0
 800917c:	d001      	beq.n	8009182 <HAL_I2C_Init+0x17e>
 800917e:	2301      	movs	r3, #1
 8009180:	e022      	b.n	80091c8 <HAL_I2C_Init+0x1c4>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10e      	bne.n	80091a8 <HAL_I2C_Init+0x1a4>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	1e58      	subs	r0, r3, #1
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6859      	ldr	r1, [r3, #4]
 8009192:	460b      	mov	r3, r1
 8009194:	005b      	lsls	r3, r3, #1
 8009196:	440b      	add	r3, r1
 8009198:	fbb0 f3f3 	udiv	r3, r0, r3
 800919c:	3301      	adds	r3, #1
 800919e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091a6:	e00f      	b.n	80091c8 <HAL_I2C_Init+0x1c4>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	1e58      	subs	r0, r3, #1
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6859      	ldr	r1, [r3, #4]
 80091b0:	460b      	mov	r3, r1
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	440b      	add	r3, r1
 80091b6:	0099      	lsls	r1, r3, #2
 80091b8:	440b      	add	r3, r1
 80091ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80091be:	3301      	adds	r3, #1
 80091c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80091c8:	6879      	ldr	r1, [r7, #4]
 80091ca:	6809      	ldr	r1, [r1, #0]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	69da      	ldr	r2, [r3, #28]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a1b      	ldr	r3, [r3, #32]
 80091e2:	431a      	orrs	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	430a      	orrs	r2, r1
 80091ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80091f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	6911      	ldr	r1, [r2, #16]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	68d2      	ldr	r2, [r2, #12]
 8009202:	4311      	orrs	r1, r2
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	6812      	ldr	r2, [r2, #0]
 8009208:	430b      	orrs	r3, r1
 800920a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	695a      	ldr	r2, [r3, #20]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	431a      	orrs	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	430a      	orrs	r2, r1
 8009226:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f042 0201 	orr.w	r2, r2, #1
 8009236:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2220      	movs	r2, #32
 8009242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	000186a0 	.word	0x000186a0
 8009264:	001e847f 	.word	0x001e847f
 8009268:	003d08ff 	.word	0x003d08ff
 800926c:	431bde83 	.word	0x431bde83
 8009270:	10624dd3 	.word	0x10624dd3

08009274 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b088      	sub	sp, #32
 8009278:	af02      	add	r7, sp, #8
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	607a      	str	r2, [r7, #4]
 800927e:	461a      	mov	r2, r3
 8009280:	460b      	mov	r3, r1
 8009282:	817b      	strh	r3, [r7, #10]
 8009284:	4613      	mov	r3, r2
 8009286:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009288:	f7fe fc00 	bl	8007a8c <HAL_GetTick>
 800928c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009294:	b2db      	uxtb	r3, r3
 8009296:	2b20      	cmp	r3, #32
 8009298:	f040 80e0 	bne.w	800945c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	2319      	movs	r3, #25
 80092a2:	2201      	movs	r2, #1
 80092a4:	4970      	ldr	r1, [pc, #448]	; (8009468 <HAL_I2C_Master_Transmit+0x1f4>)
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f000 fc58 	bl	8009b5c <I2C_WaitOnFlagUntilTimeout>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80092b2:	2302      	movs	r3, #2
 80092b4:	e0d3      	b.n	800945e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d101      	bne.n	80092c4 <HAL_I2C_Master_Transmit+0x50>
 80092c0:	2302      	movs	r3, #2
 80092c2:	e0cc      	b.n	800945e <HAL_I2C_Master_Transmit+0x1ea>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 0301 	and.w	r3, r3, #1
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d007      	beq.n	80092ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f042 0201 	orr.w	r2, r2, #1
 80092e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2221      	movs	r2, #33	; 0x21
 80092fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2210      	movs	r2, #16
 8009306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	893a      	ldrh	r2, [r7, #8]
 800931a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009320:	b29a      	uxth	r2, r3
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	4a50      	ldr	r2, [pc, #320]	; (800946c <HAL_I2C_Master_Transmit+0x1f8>)
 800932a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800932c:	8979      	ldrh	r1, [r7, #10]
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	6a3a      	ldr	r2, [r7, #32]
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f000 fac2 	bl	80098bc <I2C_MasterRequestWrite>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d001      	beq.n	8009342 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e08d      	b.n	800945e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009342:	2300      	movs	r3, #0
 8009344:	613b      	str	r3, [r7, #16]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	695b      	ldr	r3, [r3, #20]
 800934c:	613b      	str	r3, [r7, #16]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	613b      	str	r3, [r7, #16]
 8009356:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009358:	e066      	b.n	8009428 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	6a39      	ldr	r1, [r7, #32]
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	f000 fcd2 	bl	8009d08 <I2C_WaitOnTXEFlagUntilTimeout>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00d      	beq.n	8009386 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800936e:	2b04      	cmp	r3, #4
 8009370:	d107      	bne.n	8009382 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009380:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e06b      	b.n	800945e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938a:	781a      	ldrb	r2, [r3, #0]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009396:	1c5a      	adds	r2, r3, #1
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	3b01      	subs	r3, #1
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ae:	3b01      	subs	r3, #1
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	695b      	ldr	r3, [r3, #20]
 80093bc:	f003 0304 	and.w	r3, r3, #4
 80093c0:	2b04      	cmp	r3, #4
 80093c2:	d11b      	bne.n	80093fc <HAL_I2C_Master_Transmit+0x188>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d017      	beq.n	80093fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d0:	781a      	ldrb	r2, [r3, #0]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093dc:	1c5a      	adds	r2, r3, #1
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	3b01      	subs	r3, #1
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093f4:	3b01      	subs	r3, #1
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093fc:	697a      	ldr	r2, [r7, #20]
 80093fe:	6a39      	ldr	r1, [r7, #32]
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	f000 fcc2 	bl	8009d8a <I2C_WaitOnBTFFlagUntilTimeout>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00d      	beq.n	8009428 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009410:	2b04      	cmp	r3, #4
 8009412:	d107      	bne.n	8009424 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009422:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	e01a      	b.n	800945e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800942c:	2b00      	cmp	r3, #0
 800942e:	d194      	bne.n	800935a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800943e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2220      	movs	r2, #32
 8009444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009458:	2300      	movs	r3, #0
 800945a:	e000      	b.n	800945e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800945c:	2302      	movs	r3, #2
  }
}
 800945e:	4618      	mov	r0, r3
 8009460:	3718      	adds	r7, #24
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	00100002 	.word	0x00100002
 800946c:	ffff0000 	.word	0xffff0000

08009470 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b08c      	sub	sp, #48	; 0x30
 8009474:	af02      	add	r7, sp, #8
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	607a      	str	r2, [r7, #4]
 800947a:	461a      	mov	r2, r3
 800947c:	460b      	mov	r3, r1
 800947e:	817b      	strh	r3, [r7, #10]
 8009480:	4613      	mov	r3, r2
 8009482:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009484:	f7fe fb02 	bl	8007a8c <HAL_GetTick>
 8009488:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009490:	b2db      	uxtb	r3, r3
 8009492:	2b20      	cmp	r3, #32
 8009494:	f040 820b 	bne.w	80098ae <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949a:	9300      	str	r3, [sp, #0]
 800949c:	2319      	movs	r3, #25
 800949e:	2201      	movs	r2, #1
 80094a0:	497c      	ldr	r1, [pc, #496]	; (8009694 <HAL_I2C_Master_Receive+0x224>)
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f000 fb5a 	bl	8009b5c <I2C_WaitOnFlagUntilTimeout>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d001      	beq.n	80094b2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80094ae:	2302      	movs	r3, #2
 80094b0:	e1fe      	b.n	80098b0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d101      	bne.n	80094c0 <HAL_I2C_Master_Receive+0x50>
 80094bc:	2302      	movs	r3, #2
 80094be:	e1f7      	b.n	80098b0 <HAL_I2C_Master_Receive+0x440>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f003 0301 	and.w	r3, r3, #1
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d007      	beq.n	80094e6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f042 0201 	orr.w	r2, r2, #1
 80094e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2222      	movs	r2, #34	; 0x22
 80094fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2210      	movs	r2, #16
 8009502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2200      	movs	r2, #0
 800950a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	893a      	ldrh	r2, [r7, #8]
 8009516:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800951c:	b29a      	uxth	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	4a5c      	ldr	r2, [pc, #368]	; (8009698 <HAL_I2C_Master_Receive+0x228>)
 8009526:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009528:	8979      	ldrh	r1, [r7, #10]
 800952a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f000 fa46 	bl	80099c0 <I2C_MasterRequestRead>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d001      	beq.n	800953e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e1b8      	b.n	80098b0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009542:	2b00      	cmp	r3, #0
 8009544:	d113      	bne.n	800956e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009546:	2300      	movs	r3, #0
 8009548:	623b      	str	r3, [r7, #32]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	695b      	ldr	r3, [r3, #20]
 8009550:	623b      	str	r3, [r7, #32]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	699b      	ldr	r3, [r3, #24]
 8009558:	623b      	str	r3, [r7, #32]
 800955a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800956a:	601a      	str	r2, [r3, #0]
 800956c:	e18c      	b.n	8009888 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009572:	2b01      	cmp	r3, #1
 8009574:	d11b      	bne.n	80095ae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009584:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009586:	2300      	movs	r3, #0
 8009588:	61fb      	str	r3, [r7, #28]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	695b      	ldr	r3, [r3, #20]
 8009590:	61fb      	str	r3, [r7, #28]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	61fb      	str	r3, [r7, #28]
 800959a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095aa:	601a      	str	r2, [r3, #0]
 80095ac:	e16c      	b.n	8009888 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d11b      	bne.n	80095ee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095d6:	2300      	movs	r3, #0
 80095d8:	61bb      	str	r3, [r7, #24]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	61bb      	str	r3, [r7, #24]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	699b      	ldr	r3, [r3, #24]
 80095e8:	61bb      	str	r3, [r7, #24]
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	e14c      	b.n	8009888 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80095fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095fe:	2300      	movs	r3, #0
 8009600:	617b      	str	r3, [r7, #20]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	695b      	ldr	r3, [r3, #20]
 8009608:	617b      	str	r3, [r7, #20]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	617b      	str	r3, [r7, #20]
 8009612:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009614:	e138      	b.n	8009888 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800961a:	2b03      	cmp	r3, #3
 800961c:	f200 80f1 	bhi.w	8009802 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009624:	2b01      	cmp	r3, #1
 8009626:	d123      	bne.n	8009670 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800962a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f000 fbed 	bl	8009e0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d001      	beq.n	800963c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	e139      	b.n	80098b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	691a      	ldr	r2, [r3, #16]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009646:	b2d2      	uxtb	r2, r2
 8009648:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964e:	1c5a      	adds	r2, r3, #1
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009658:	3b01      	subs	r3, #1
 800965a:	b29a      	uxth	r2, r3
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009664:	b29b      	uxth	r3, r3
 8009666:	3b01      	subs	r3, #1
 8009668:	b29a      	uxth	r2, r3
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800966e:	e10b      	b.n	8009888 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009674:	2b02      	cmp	r3, #2
 8009676:	d14e      	bne.n	8009716 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967e:	2200      	movs	r2, #0
 8009680:	4906      	ldr	r1, [pc, #24]	; (800969c <HAL_I2C_Master_Receive+0x22c>)
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f000 fa6a 	bl	8009b5c <I2C_WaitOnFlagUntilTimeout>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d008      	beq.n	80096a0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e10e      	b.n	80098b0 <HAL_I2C_Master_Receive+0x440>
 8009692:	bf00      	nop
 8009694:	00100002 	.word	0x00100002
 8009698:	ffff0000 	.word	0xffff0000
 800969c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	691a      	ldr	r2, [r3, #16]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ba:	b2d2      	uxtb	r2, r2
 80096bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c2:	1c5a      	adds	r2, r3, #1
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096cc:	3b01      	subs	r3, #1
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096d8:	b29b      	uxth	r3, r3
 80096da:	3b01      	subs	r3, #1
 80096dc:	b29a      	uxth	r2, r3
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	691a      	ldr	r2, [r3, #16]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ec:	b2d2      	uxtb	r2, r2
 80096ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f4:	1c5a      	adds	r2, r3, #1
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096fe:	3b01      	subs	r3, #1
 8009700:	b29a      	uxth	r2, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800970a:	b29b      	uxth	r3, r3
 800970c:	3b01      	subs	r3, #1
 800970e:	b29a      	uxth	r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009714:	e0b8      	b.n	8009888 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971c:	2200      	movs	r2, #0
 800971e:	4966      	ldr	r1, [pc, #408]	; (80098b8 <HAL_I2C_Master_Receive+0x448>)
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f000 fa1b 	bl	8009b5c <I2C_WaitOnFlagUntilTimeout>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d001      	beq.n	8009730 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	e0bf      	b.n	80098b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800973e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	691a      	ldr	r2, [r3, #16]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974a:	b2d2      	uxtb	r2, r2
 800974c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009752:	1c5a      	adds	r2, r3, #1
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800975c:	3b01      	subs	r3, #1
 800975e:	b29a      	uxth	r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009768:	b29b      	uxth	r3, r3
 800976a:	3b01      	subs	r3, #1
 800976c:	b29a      	uxth	r2, r3
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009774:	9300      	str	r3, [sp, #0]
 8009776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009778:	2200      	movs	r2, #0
 800977a:	494f      	ldr	r1, [pc, #316]	; (80098b8 <HAL_I2C_Master_Receive+0x448>)
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f000 f9ed 	bl	8009b5c <I2C_WaitOnFlagUntilTimeout>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d001      	beq.n	800978c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	e091      	b.n	80098b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800979a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	691a      	ldr	r2, [r3, #16]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a6:	b2d2      	uxtb	r2, r2
 80097a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ae:	1c5a      	adds	r2, r3, #1
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097b8:	3b01      	subs	r3, #1
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	3b01      	subs	r3, #1
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	691a      	ldr	r2, [r3, #16]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d8:	b2d2      	uxtb	r2, r2
 80097da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e0:	1c5a      	adds	r2, r3, #1
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097ea:	3b01      	subs	r3, #1
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	3b01      	subs	r3, #1
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009800:	e042      	b.n	8009888 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009804:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f000 fb00 	bl	8009e0c <I2C_WaitOnRXNEFlagUntilTimeout>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d001      	beq.n	8009816 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e04c      	b.n	80098b0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	691a      	ldr	r2, [r3, #16]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009820:	b2d2      	uxtb	r2, r2
 8009822:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009828:	1c5a      	adds	r2, r3, #1
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009832:	3b01      	subs	r3, #1
 8009834:	b29a      	uxth	r2, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800983e:	b29b      	uxth	r3, r3
 8009840:	3b01      	subs	r3, #1
 8009842:	b29a      	uxth	r2, r3
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	695b      	ldr	r3, [r3, #20]
 800984e:	f003 0304 	and.w	r3, r3, #4
 8009852:	2b04      	cmp	r3, #4
 8009854:	d118      	bne.n	8009888 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	691a      	ldr	r2, [r3, #16]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009860:	b2d2      	uxtb	r2, r2
 8009862:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009868:	1c5a      	adds	r2, r3, #1
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009872:	3b01      	subs	r3, #1
 8009874:	b29a      	uxth	r2, r3
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800987e:	b29b      	uxth	r3, r3
 8009880:	3b01      	subs	r3, #1
 8009882:	b29a      	uxth	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800988c:	2b00      	cmp	r3, #0
 800988e:	f47f aec2 	bne.w	8009616 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2220      	movs	r2, #32
 8009896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80098aa:	2300      	movs	r3, #0
 80098ac:	e000      	b.n	80098b0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80098ae:	2302      	movs	r3, #2
  }
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3728      	adds	r7, #40	; 0x28
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	00010004 	.word	0x00010004

080098bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b088      	sub	sp, #32
 80098c0:	af02      	add	r7, sp, #8
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	607a      	str	r2, [r7, #4]
 80098c6:	603b      	str	r3, [r7, #0]
 80098c8:	460b      	mov	r3, r1
 80098ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	2b08      	cmp	r3, #8
 80098d6:	d006      	beq.n	80098e6 <I2C_MasterRequestWrite+0x2a>
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d003      	beq.n	80098e6 <I2C_MasterRequestWrite+0x2a>
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80098e4:	d108      	bne.n	80098f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098f4:	601a      	str	r2, [r3, #0]
 80098f6:	e00b      	b.n	8009910 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fc:	2b12      	cmp	r3, #18
 80098fe:	d107      	bne.n	8009910 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800990e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	9300      	str	r3, [sp, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	f000 f91d 	bl	8009b5c <I2C_WaitOnFlagUntilTimeout>
 8009922:	4603      	mov	r3, r0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d00d      	beq.n	8009944 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009936:	d103      	bne.n	8009940 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800993e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009940:	2303      	movs	r3, #3
 8009942:	e035      	b.n	80099b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800994c:	d108      	bne.n	8009960 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800994e:	897b      	ldrh	r3, [r7, #10]
 8009950:	b2db      	uxtb	r3, r3
 8009952:	461a      	mov	r2, r3
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800995c:	611a      	str	r2, [r3, #16]
 800995e:	e01b      	b.n	8009998 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009960:	897b      	ldrh	r3, [r7, #10]
 8009962:	11db      	asrs	r3, r3, #7
 8009964:	b2db      	uxtb	r3, r3
 8009966:	f003 0306 	and.w	r3, r3, #6
 800996a:	b2db      	uxtb	r3, r3
 800996c:	f063 030f 	orn	r3, r3, #15
 8009970:	b2da      	uxtb	r2, r3
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	490e      	ldr	r1, [pc, #56]	; (80099b8 <I2C_MasterRequestWrite+0xfc>)
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f000 f943 	bl	8009c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d001      	beq.n	800998e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	e010      	b.n	80099b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800998e:	897b      	ldrh	r3, [r7, #10]
 8009990:	b2da      	uxtb	r2, r3
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	4907      	ldr	r1, [pc, #28]	; (80099bc <I2C_MasterRequestWrite+0x100>)
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f000 f933 	bl	8009c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e000      	b.n	80099b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3718      	adds	r7, #24
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	00010008 	.word	0x00010008
 80099bc:	00010002 	.word	0x00010002

080099c0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b088      	sub	sp, #32
 80099c4:	af02      	add	r7, sp, #8
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	607a      	str	r2, [r7, #4]
 80099ca:	603b      	str	r3, [r7, #0]
 80099cc:	460b      	mov	r3, r1
 80099ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80099e4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	2b08      	cmp	r3, #8
 80099ea:	d006      	beq.n	80099fa <I2C_MasterRequestRead+0x3a>
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d003      	beq.n	80099fa <I2C_MasterRequestRead+0x3a>
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80099f8:	d108      	bne.n	8009a0c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a08:	601a      	str	r2, [r3, #0]
 8009a0a:	e00b      	b.n	8009a24 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a10:	2b11      	cmp	r3, #17
 8009a12:	d107      	bne.n	8009a24 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f000 f893 	bl	8009b5c <I2C_WaitOnFlagUntilTimeout>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00d      	beq.n	8009a58 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a4a:	d103      	bne.n	8009a54 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009a54:	2303      	movs	r3, #3
 8009a56:	e079      	b.n	8009b4c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a60:	d108      	bne.n	8009a74 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009a62:	897b      	ldrh	r3, [r7, #10]
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	f043 0301 	orr.w	r3, r3, #1
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	611a      	str	r2, [r3, #16]
 8009a72:	e05f      	b.n	8009b34 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009a74:	897b      	ldrh	r3, [r7, #10]
 8009a76:	11db      	asrs	r3, r3, #7
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	f003 0306 	and.w	r3, r3, #6
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	f063 030f 	orn	r3, r3, #15
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	4930      	ldr	r1, [pc, #192]	; (8009b54 <I2C_MasterRequestRead+0x194>)
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f000 f8b9 	bl	8009c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e054      	b.n	8009b4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009aa2:	897b      	ldrh	r3, [r7, #10]
 8009aa4:	b2da      	uxtb	r2, r3
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	4929      	ldr	r1, [pc, #164]	; (8009b58 <I2C_MasterRequestRead+0x198>)
 8009ab2:	68f8      	ldr	r0, [r7, #12]
 8009ab4:	f000 f8a9 	bl	8009c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d001      	beq.n	8009ac2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e044      	b.n	8009b4c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	613b      	str	r3, [r7, #16]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	695b      	ldr	r3, [r3, #20]
 8009acc:	613b      	str	r3, [r7, #16]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	699b      	ldr	r3, [r3, #24]
 8009ad4:	613b      	str	r3, [r7, #16]
 8009ad6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ae6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	9300      	str	r3, [sp, #0]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f000 f831 	bl	8009b5c <I2C_WaitOnFlagUntilTimeout>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00d      	beq.n	8009b1c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b0e:	d103      	bne.n	8009b18 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b16:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009b18:	2303      	movs	r3, #3
 8009b1a:	e017      	b.n	8009b4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009b1c:	897b      	ldrh	r3, [r7, #10]
 8009b1e:	11db      	asrs	r3, r3, #7
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	f003 0306 	and.w	r3, r3, #6
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	f063 030e 	orn	r3, r3, #14
 8009b2c:	b2da      	uxtb	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	4907      	ldr	r1, [pc, #28]	; (8009b58 <I2C_MasterRequestRead+0x198>)
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f000 f865 	bl	8009c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d001      	beq.n	8009b4a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e000      	b.n	8009b4c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3718      	adds	r7, #24
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	00010008 	.word	0x00010008
 8009b58:	00010002 	.word	0x00010002

08009b5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	603b      	str	r3, [r7, #0]
 8009b68:	4613      	mov	r3, r2
 8009b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b6c:	e025      	b.n	8009bba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b74:	d021      	beq.n	8009bba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b76:	f7fd ff89 	bl	8007a8c <HAL_GetTick>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	683a      	ldr	r2, [r7, #0]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d302      	bcc.n	8009b8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d116      	bne.n	8009bba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2220      	movs	r2, #32
 8009b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba6:	f043 0220 	orr.w	r2, r3, #32
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e023      	b.n	8009c02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	0c1b      	lsrs	r3, r3, #16
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d10d      	bne.n	8009be0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	695b      	ldr	r3, [r3, #20]
 8009bca:	43da      	mvns	r2, r3
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	4013      	ands	r3, r2
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	bf0c      	ite	eq
 8009bd6:	2301      	moveq	r3, #1
 8009bd8:	2300      	movne	r3, #0
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	461a      	mov	r2, r3
 8009bde:	e00c      	b.n	8009bfa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	699b      	ldr	r3, [r3, #24]
 8009be6:	43da      	mvns	r2, r3
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	4013      	ands	r3, r2
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	bf0c      	ite	eq
 8009bf2:	2301      	moveq	r3, #1
 8009bf4:	2300      	movne	r3, #0
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	79fb      	ldrb	r3, [r7, #7]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d0b6      	beq.n	8009b6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b084      	sub	sp, #16
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	60f8      	str	r0, [r7, #12]
 8009c12:	60b9      	str	r1, [r7, #8]
 8009c14:	607a      	str	r2, [r7, #4]
 8009c16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c18:	e051      	b.n	8009cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	695b      	ldr	r3, [r3, #20]
 8009c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c28:	d123      	bne.n	8009c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009c42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2200      	movs	r2, #0
 8009c48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2220      	movs	r2, #32
 8009c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c5e:	f043 0204 	orr.w	r2, r3, #4
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e046      	b.n	8009d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c78:	d021      	beq.n	8009cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c7a:	f7fd ff07 	bl	8007a8c <HAL_GetTick>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	1ad3      	subs	r3, r2, r3
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d302      	bcc.n	8009c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d116      	bne.n	8009cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2200      	movs	r2, #0
 8009c94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2220      	movs	r2, #32
 8009c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009caa:	f043 0220 	orr.w	r2, r3, #32
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e020      	b.n	8009d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	0c1b      	lsrs	r3, r3, #16
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d10c      	bne.n	8009ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	695b      	ldr	r3, [r3, #20]
 8009cce:	43da      	mvns	r2, r3
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	4013      	ands	r3, r2
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	bf14      	ite	ne
 8009cda:	2301      	movne	r3, #1
 8009cdc:	2300      	moveq	r3, #0
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	e00b      	b.n	8009cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	699b      	ldr	r3, [r3, #24]
 8009ce8:	43da      	mvns	r2, r3
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	4013      	ands	r3, r2
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	bf14      	ite	ne
 8009cf4:	2301      	movne	r3, #1
 8009cf6:	2300      	moveq	r3, #0
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d18d      	bne.n	8009c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009cfe:	2300      	movs	r3, #0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d14:	e02d      	b.n	8009d72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f000 f8ce 	bl	8009eb8 <I2C_IsAcknowledgeFailed>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d001      	beq.n	8009d26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e02d      	b.n	8009d82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d2c:	d021      	beq.n	8009d72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d2e:	f7fd fead 	bl	8007a8c <HAL_GetTick>
 8009d32:	4602      	mov	r2, r0
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	68ba      	ldr	r2, [r7, #8]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d302      	bcc.n	8009d44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d116      	bne.n	8009d72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2200      	movs	r2, #0
 8009d48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2220      	movs	r2, #32
 8009d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5e:	f043 0220 	orr.w	r2, r3, #32
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e007      	b.n	8009d82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	695b      	ldr	r3, [r3, #20]
 8009d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d7c:	2b80      	cmp	r3, #128	; 0x80
 8009d7e:	d1ca      	bne.n	8009d16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b084      	sub	sp, #16
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	60f8      	str	r0, [r7, #12]
 8009d92:	60b9      	str	r1, [r7, #8]
 8009d94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009d96:	e02d      	b.n	8009df4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f000 f88d 	bl	8009eb8 <I2C_IsAcknowledgeFailed>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d001      	beq.n	8009da8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	e02d      	b.n	8009e04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dae:	d021      	beq.n	8009df4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009db0:	f7fd fe6c 	bl	8007a8c <HAL_GetTick>
 8009db4:	4602      	mov	r2, r0
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d302      	bcc.n	8009dc6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d116      	bne.n	8009df4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2220      	movs	r2, #32
 8009dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de0:	f043 0220 	orr.w	r2, r3, #32
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009df0:	2301      	movs	r3, #1
 8009df2:	e007      	b.n	8009e04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	695b      	ldr	r3, [r3, #20]
 8009dfa:	f003 0304 	and.w	r3, r3, #4
 8009dfe:	2b04      	cmp	r3, #4
 8009e00:	d1ca      	bne.n	8009d98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e18:	e042      	b.n	8009ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	695b      	ldr	r3, [r3, #20]
 8009e20:	f003 0310 	and.w	r3, r3, #16
 8009e24:	2b10      	cmp	r3, #16
 8009e26:	d119      	bne.n	8009e5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f06f 0210 	mvn.w	r2, #16
 8009e30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2200      	movs	r2, #0
 8009e36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2220      	movs	r2, #32
 8009e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e029      	b.n	8009eb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e5c:	f7fd fe16 	bl	8007a8c <HAL_GetTick>
 8009e60:	4602      	mov	r2, r0
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	1ad3      	subs	r3, r2, r3
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d302      	bcc.n	8009e72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d116      	bne.n	8009ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2200      	movs	r2, #0
 8009e76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2220      	movs	r2, #32
 8009e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8c:	f043 0220 	orr.w	r2, r3, #32
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e007      	b.n	8009eb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	695b      	ldr	r3, [r3, #20]
 8009ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eaa:	2b40      	cmp	r3, #64	; 0x40
 8009eac:	d1b5      	bne.n	8009e1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	695b      	ldr	r3, [r3, #20]
 8009ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ece:	d11b      	bne.n	8009f08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009ed8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2220      	movs	r2, #32
 8009ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef4:	f043 0204 	orr.w	r2, r3, #4
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	e000      	b.n	8009f0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	370c      	adds	r7, #12
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
	...

08009f18 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009f22:	2300      	movs	r3, #0
 8009f24:	603b      	str	r3, [r7, #0]
 8009f26:	4b20      	ldr	r3, [pc, #128]	; (8009fa8 <HAL_PWREx_EnableOverDrive+0x90>)
 8009f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2a:	4a1f      	ldr	r2, [pc, #124]	; (8009fa8 <HAL_PWREx_EnableOverDrive+0x90>)
 8009f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f30:	6413      	str	r3, [r2, #64]	; 0x40
 8009f32:	4b1d      	ldr	r3, [pc, #116]	; (8009fa8 <HAL_PWREx_EnableOverDrive+0x90>)
 8009f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f3a:	603b      	str	r3, [r7, #0]
 8009f3c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009f3e:	4b1b      	ldr	r3, [pc, #108]	; (8009fac <HAL_PWREx_EnableOverDrive+0x94>)
 8009f40:	2201      	movs	r2, #1
 8009f42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009f44:	f7fd fda2 	bl	8007a8c <HAL_GetTick>
 8009f48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009f4a:	e009      	b.n	8009f60 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009f4c:	f7fd fd9e 	bl	8007a8c <HAL_GetTick>
 8009f50:	4602      	mov	r2, r0
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	1ad3      	subs	r3, r2, r3
 8009f56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f5a:	d901      	bls.n	8009f60 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009f5c:	2303      	movs	r3, #3
 8009f5e:	e01f      	b.n	8009fa0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009f60:	4b13      	ldr	r3, [pc, #76]	; (8009fb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f6c:	d1ee      	bne.n	8009f4c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009f6e:	4b11      	ldr	r3, [pc, #68]	; (8009fb4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009f70:	2201      	movs	r2, #1
 8009f72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009f74:	f7fd fd8a 	bl	8007a8c <HAL_GetTick>
 8009f78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009f7a:	e009      	b.n	8009f90 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009f7c:	f7fd fd86 	bl	8007a8c <HAL_GetTick>
 8009f80:	4602      	mov	r2, r0
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f8a:	d901      	bls.n	8009f90 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	e007      	b.n	8009fa0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009f90:	4b07      	ldr	r3, [pc, #28]	; (8009fb0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f9c:	d1ee      	bne.n	8009f7c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009f9e:	2300      	movs	r3, #0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	40023800 	.word	0x40023800
 8009fac:	420e0040 	.word	0x420e0040
 8009fb0:	40007000 	.word	0x40007000
 8009fb4:	420e0044 	.word	0x420e0044

08009fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d101      	bne.n	8009fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	e0cc      	b.n	800a166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009fcc:	4b68      	ldr	r3, [pc, #416]	; (800a170 <HAL_RCC_ClockConfig+0x1b8>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f003 030f 	and.w	r3, r3, #15
 8009fd4:	683a      	ldr	r2, [r7, #0]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d90c      	bls.n	8009ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fda:	4b65      	ldr	r3, [pc, #404]	; (800a170 <HAL_RCC_ClockConfig+0x1b8>)
 8009fdc:	683a      	ldr	r2, [r7, #0]
 8009fde:	b2d2      	uxtb	r2, r2
 8009fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fe2:	4b63      	ldr	r3, [pc, #396]	; (800a170 <HAL_RCC_ClockConfig+0x1b8>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f003 030f 	and.w	r3, r3, #15
 8009fea:	683a      	ldr	r2, [r7, #0]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d001      	beq.n	8009ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e0b8      	b.n	800a166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 0302 	and.w	r3, r3, #2
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d020      	beq.n	800a042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f003 0304 	and.w	r3, r3, #4
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d005      	beq.n	800a018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a00c:	4b59      	ldr	r3, [pc, #356]	; (800a174 <HAL_RCC_ClockConfig+0x1bc>)
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	4a58      	ldr	r2, [pc, #352]	; (800a174 <HAL_RCC_ClockConfig+0x1bc>)
 800a012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a016:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f003 0308 	and.w	r3, r3, #8
 800a020:	2b00      	cmp	r3, #0
 800a022:	d005      	beq.n	800a030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a024:	4b53      	ldr	r3, [pc, #332]	; (800a174 <HAL_RCC_ClockConfig+0x1bc>)
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	4a52      	ldr	r2, [pc, #328]	; (800a174 <HAL_RCC_ClockConfig+0x1bc>)
 800a02a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a02e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a030:	4b50      	ldr	r3, [pc, #320]	; (800a174 <HAL_RCC_ClockConfig+0x1bc>)
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	494d      	ldr	r1, [pc, #308]	; (800a174 <HAL_RCC_ClockConfig+0x1bc>)
 800a03e:	4313      	orrs	r3, r2
 800a040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 0301 	and.w	r3, r3, #1
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d044      	beq.n	800a0d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	2b01      	cmp	r3, #1
 800a054:	d107      	bne.n	800a066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a056:	4b47      	ldr	r3, [pc, #284]	; (800a174 <HAL_RCC_ClockConfig+0x1bc>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d119      	bne.n	800a096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	e07f      	b.n	800a166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d003      	beq.n	800a076 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a072:	2b03      	cmp	r3, #3
 800a074:	d107      	bne.n	800a086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a076:	4b3f      	ldr	r3, [pc, #252]	; (800a174 <HAL_RCC_ClockConfig+0x1bc>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d109      	bne.n	800a096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e06f      	b.n	800a166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a086:	4b3b      	ldr	r3, [pc, #236]	; (800a174 <HAL_RCC_ClockConfig+0x1bc>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f003 0302 	and.w	r3, r3, #2
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d101      	bne.n	800a096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	e067      	b.n	800a166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a096:	4b37      	ldr	r3, [pc, #220]	; (800a174 <HAL_RCC_ClockConfig+0x1bc>)
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	f023 0203 	bic.w	r2, r3, #3
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	4934      	ldr	r1, [pc, #208]	; (800a174 <HAL_RCC_ClockConfig+0x1bc>)
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a0a8:	f7fd fcf0 	bl	8007a8c <HAL_GetTick>
 800a0ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0ae:	e00a      	b.n	800a0c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a0b0:	f7fd fcec 	bl	8007a8c <HAL_GetTick>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	1ad3      	subs	r3, r2, r3
 800a0ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d901      	bls.n	800a0c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a0c2:	2303      	movs	r3, #3
 800a0c4:	e04f      	b.n	800a166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0c6:	4b2b      	ldr	r3, [pc, #172]	; (800a174 <HAL_RCC_ClockConfig+0x1bc>)
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	f003 020c 	and.w	r2, r3, #12
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d1eb      	bne.n	800a0b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a0d8:	4b25      	ldr	r3, [pc, #148]	; (800a170 <HAL_RCC_ClockConfig+0x1b8>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f003 030f 	and.w	r3, r3, #15
 800a0e0:	683a      	ldr	r2, [r7, #0]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d20c      	bcs.n	800a100 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0e6:	4b22      	ldr	r3, [pc, #136]	; (800a170 <HAL_RCC_ClockConfig+0x1b8>)
 800a0e8:	683a      	ldr	r2, [r7, #0]
 800a0ea:	b2d2      	uxtb	r2, r2
 800a0ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0ee:	4b20      	ldr	r3, [pc, #128]	; (800a170 <HAL_RCC_ClockConfig+0x1b8>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f003 030f 	and.w	r3, r3, #15
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d001      	beq.n	800a100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e032      	b.n	800a166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f003 0304 	and.w	r3, r3, #4
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d008      	beq.n	800a11e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a10c:	4b19      	ldr	r3, [pc, #100]	; (800a174 <HAL_RCC_ClockConfig+0x1bc>)
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	4916      	ldr	r1, [pc, #88]	; (800a174 <HAL_RCC_ClockConfig+0x1bc>)
 800a11a:	4313      	orrs	r3, r2
 800a11c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f003 0308 	and.w	r3, r3, #8
 800a126:	2b00      	cmp	r3, #0
 800a128:	d009      	beq.n	800a13e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a12a:	4b12      	ldr	r3, [pc, #72]	; (800a174 <HAL_RCC_ClockConfig+0x1bc>)
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	00db      	lsls	r3, r3, #3
 800a138:	490e      	ldr	r1, [pc, #56]	; (800a174 <HAL_RCC_ClockConfig+0x1bc>)
 800a13a:	4313      	orrs	r3, r2
 800a13c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a13e:	f000 f821 	bl	800a184 <HAL_RCC_GetSysClockFreq>
 800a142:	4601      	mov	r1, r0
 800a144:	4b0b      	ldr	r3, [pc, #44]	; (800a174 <HAL_RCC_ClockConfig+0x1bc>)
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	091b      	lsrs	r3, r3, #4
 800a14a:	f003 030f 	and.w	r3, r3, #15
 800a14e:	4a0a      	ldr	r2, [pc, #40]	; (800a178 <HAL_RCC_ClockConfig+0x1c0>)
 800a150:	5cd3      	ldrb	r3, [r2, r3]
 800a152:	fa21 f303 	lsr.w	r3, r1, r3
 800a156:	4a09      	ldr	r2, [pc, #36]	; (800a17c <HAL_RCC_ClockConfig+0x1c4>)
 800a158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a15a:	4b09      	ldr	r3, [pc, #36]	; (800a180 <HAL_RCC_ClockConfig+0x1c8>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fd fc50 	bl	8007a04 <HAL_InitTick>

  return HAL_OK;
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	40023c00 	.word	0x40023c00
 800a174:	40023800 	.word	0x40023800
 800a178:	08017e88 	.word	0x08017e88
 800a17c:	20000000 	.word	0x20000000
 800a180:	20000004 	.word	0x20000004

0800a184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a184:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a186:	b085      	sub	sp, #20
 800a188:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a18a:	2300      	movs	r3, #0
 800a18c:	607b      	str	r3, [r7, #4]
 800a18e:	2300      	movs	r3, #0
 800a190:	60fb      	str	r3, [r7, #12]
 800a192:	2300      	movs	r3, #0
 800a194:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a196:	2300      	movs	r3, #0
 800a198:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a19a:	4b63      	ldr	r3, [pc, #396]	; (800a328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	f003 030c 	and.w	r3, r3, #12
 800a1a2:	2b04      	cmp	r3, #4
 800a1a4:	d007      	beq.n	800a1b6 <HAL_RCC_GetSysClockFreq+0x32>
 800a1a6:	2b08      	cmp	r3, #8
 800a1a8:	d008      	beq.n	800a1bc <HAL_RCC_GetSysClockFreq+0x38>
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f040 80b4 	bne.w	800a318 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a1b0:	4b5e      	ldr	r3, [pc, #376]	; (800a32c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a1b2:	60bb      	str	r3, [r7, #8]
       break;
 800a1b4:	e0b3      	b.n	800a31e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a1b6:	4b5d      	ldr	r3, [pc, #372]	; (800a32c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a1b8:	60bb      	str	r3, [r7, #8]
      break;
 800a1ba:	e0b0      	b.n	800a31e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a1bc:	4b5a      	ldr	r3, [pc, #360]	; (800a328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a1c6:	4b58      	ldr	r3, [pc, #352]	; (800a328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d04a      	beq.n	800a268 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a1d2:	4b55      	ldr	r3, [pc, #340]	; (800a328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	099b      	lsrs	r3, r3, #6
 800a1d8:	f04f 0400 	mov.w	r4, #0
 800a1dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a1e0:	f04f 0200 	mov.w	r2, #0
 800a1e4:	ea03 0501 	and.w	r5, r3, r1
 800a1e8:	ea04 0602 	and.w	r6, r4, r2
 800a1ec:	4629      	mov	r1, r5
 800a1ee:	4632      	mov	r2, r6
 800a1f0:	f04f 0300 	mov.w	r3, #0
 800a1f4:	f04f 0400 	mov.w	r4, #0
 800a1f8:	0154      	lsls	r4, r2, #5
 800a1fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a1fe:	014b      	lsls	r3, r1, #5
 800a200:	4619      	mov	r1, r3
 800a202:	4622      	mov	r2, r4
 800a204:	1b49      	subs	r1, r1, r5
 800a206:	eb62 0206 	sbc.w	r2, r2, r6
 800a20a:	f04f 0300 	mov.w	r3, #0
 800a20e:	f04f 0400 	mov.w	r4, #0
 800a212:	0194      	lsls	r4, r2, #6
 800a214:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a218:	018b      	lsls	r3, r1, #6
 800a21a:	1a5b      	subs	r3, r3, r1
 800a21c:	eb64 0402 	sbc.w	r4, r4, r2
 800a220:	f04f 0100 	mov.w	r1, #0
 800a224:	f04f 0200 	mov.w	r2, #0
 800a228:	00e2      	lsls	r2, r4, #3
 800a22a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a22e:	00d9      	lsls	r1, r3, #3
 800a230:	460b      	mov	r3, r1
 800a232:	4614      	mov	r4, r2
 800a234:	195b      	adds	r3, r3, r5
 800a236:	eb44 0406 	adc.w	r4, r4, r6
 800a23a:	f04f 0100 	mov.w	r1, #0
 800a23e:	f04f 0200 	mov.w	r2, #0
 800a242:	02a2      	lsls	r2, r4, #10
 800a244:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a248:	0299      	lsls	r1, r3, #10
 800a24a:	460b      	mov	r3, r1
 800a24c:	4614      	mov	r4, r2
 800a24e:	4618      	mov	r0, r3
 800a250:	4621      	mov	r1, r4
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f04f 0400 	mov.w	r4, #0
 800a258:	461a      	mov	r2, r3
 800a25a:	4623      	mov	r3, r4
 800a25c:	f7f6 fd2c 	bl	8000cb8 <__aeabi_uldivmod>
 800a260:	4603      	mov	r3, r0
 800a262:	460c      	mov	r4, r1
 800a264:	60fb      	str	r3, [r7, #12]
 800a266:	e049      	b.n	800a2fc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a268:	4b2f      	ldr	r3, [pc, #188]	; (800a328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	099b      	lsrs	r3, r3, #6
 800a26e:	f04f 0400 	mov.w	r4, #0
 800a272:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a276:	f04f 0200 	mov.w	r2, #0
 800a27a:	ea03 0501 	and.w	r5, r3, r1
 800a27e:	ea04 0602 	and.w	r6, r4, r2
 800a282:	4629      	mov	r1, r5
 800a284:	4632      	mov	r2, r6
 800a286:	f04f 0300 	mov.w	r3, #0
 800a28a:	f04f 0400 	mov.w	r4, #0
 800a28e:	0154      	lsls	r4, r2, #5
 800a290:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a294:	014b      	lsls	r3, r1, #5
 800a296:	4619      	mov	r1, r3
 800a298:	4622      	mov	r2, r4
 800a29a:	1b49      	subs	r1, r1, r5
 800a29c:	eb62 0206 	sbc.w	r2, r2, r6
 800a2a0:	f04f 0300 	mov.w	r3, #0
 800a2a4:	f04f 0400 	mov.w	r4, #0
 800a2a8:	0194      	lsls	r4, r2, #6
 800a2aa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a2ae:	018b      	lsls	r3, r1, #6
 800a2b0:	1a5b      	subs	r3, r3, r1
 800a2b2:	eb64 0402 	sbc.w	r4, r4, r2
 800a2b6:	f04f 0100 	mov.w	r1, #0
 800a2ba:	f04f 0200 	mov.w	r2, #0
 800a2be:	00e2      	lsls	r2, r4, #3
 800a2c0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a2c4:	00d9      	lsls	r1, r3, #3
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	4614      	mov	r4, r2
 800a2ca:	195b      	adds	r3, r3, r5
 800a2cc:	eb44 0406 	adc.w	r4, r4, r6
 800a2d0:	f04f 0100 	mov.w	r1, #0
 800a2d4:	f04f 0200 	mov.w	r2, #0
 800a2d8:	02a2      	lsls	r2, r4, #10
 800a2da:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a2de:	0299      	lsls	r1, r3, #10
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	4614      	mov	r4, r2
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	4621      	mov	r1, r4
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f04f 0400 	mov.w	r4, #0
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	4623      	mov	r3, r4
 800a2f2:	f7f6 fce1 	bl	8000cb8 <__aeabi_uldivmod>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	460c      	mov	r4, r1
 800a2fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a2fc:	4b0a      	ldr	r3, [pc, #40]	; (800a328 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	0c1b      	lsrs	r3, r3, #16
 800a302:	f003 0303 	and.w	r3, r3, #3
 800a306:	3301      	adds	r3, #1
 800a308:	005b      	lsls	r3, r3, #1
 800a30a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	fbb2 f3f3 	udiv	r3, r2, r3
 800a314:	60bb      	str	r3, [r7, #8]
      break;
 800a316:	e002      	b.n	800a31e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a318:	4b04      	ldr	r3, [pc, #16]	; (800a32c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a31a:	60bb      	str	r3, [r7, #8]
      break;
 800a31c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a31e:	68bb      	ldr	r3, [r7, #8]
}
 800a320:	4618      	mov	r0, r3
 800a322:	3714      	adds	r7, #20
 800a324:	46bd      	mov	sp, r7
 800a326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a328:	40023800 	.word	0x40023800
 800a32c:	00f42400 	.word	0x00f42400

0800a330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a330:	b480      	push	{r7}
 800a332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a334:	4b03      	ldr	r3, [pc, #12]	; (800a344 <HAL_RCC_GetHCLKFreq+0x14>)
 800a336:	681b      	ldr	r3, [r3, #0]
}
 800a338:	4618      	mov	r0, r3
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop
 800a344:	20000000 	.word	0x20000000

0800a348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a34c:	f7ff fff0 	bl	800a330 <HAL_RCC_GetHCLKFreq>
 800a350:	4601      	mov	r1, r0
 800a352:	4b05      	ldr	r3, [pc, #20]	; (800a368 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	0a9b      	lsrs	r3, r3, #10
 800a358:	f003 0307 	and.w	r3, r3, #7
 800a35c:	4a03      	ldr	r2, [pc, #12]	; (800a36c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a35e:	5cd3      	ldrb	r3, [r2, r3]
 800a360:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a364:	4618      	mov	r0, r3
 800a366:	bd80      	pop	{r7, pc}
 800a368:	40023800 	.word	0x40023800
 800a36c:	08017e98 	.word	0x08017e98

0800a370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a374:	f7ff ffdc 	bl	800a330 <HAL_RCC_GetHCLKFreq>
 800a378:	4601      	mov	r1, r0
 800a37a:	4b05      	ldr	r3, [pc, #20]	; (800a390 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	0b5b      	lsrs	r3, r3, #13
 800a380:	f003 0307 	and.w	r3, r3, #7
 800a384:	4a03      	ldr	r2, [pc, #12]	; (800a394 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a386:	5cd3      	ldrb	r3, [r2, r3]
 800a388:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	40023800 	.word	0x40023800
 800a394:	08017e98 	.word	0x08017e98

0800a398 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b088      	sub	sp, #32
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00a      	beq.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a3c0:	4b66      	ldr	r3, [pc, #408]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a3c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3c6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ce:	4963      	ldr	r1, [pc, #396]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00a      	beq.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800a3e2:	4b5e      	ldr	r3, [pc, #376]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a3e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3e8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f0:	495a      	ldr	r1, [pc, #360]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 0301 	and.w	r3, r3, #1
 800a400:	2b00      	cmp	r3, #0
 800a402:	d10b      	bne.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d105      	bne.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d075      	beq.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a41c:	4b50      	ldr	r3, [pc, #320]	; (800a560 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a41e:	2200      	movs	r2, #0
 800a420:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a422:	f7fd fb33 	bl	8007a8c <HAL_GetTick>
 800a426:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a428:	e008      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a42a:	f7fd fb2f 	bl	8007a8c <HAL_GetTick>
 800a42e:	4602      	mov	r2, r0
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	2b02      	cmp	r3, #2
 800a436:	d901      	bls.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a438:	2303      	movs	r3, #3
 800a43a:	e1dc      	b.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a43c:	4b47      	ldr	r3, [pc, #284]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a444:	2b00      	cmp	r3, #0
 800a446:	d1f0      	bne.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	2b00      	cmp	r3, #0
 800a452:	d009      	beq.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	019a      	lsls	r2, r3, #6
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	071b      	lsls	r3, r3, #28
 800a460:	493e      	ldr	r1, [pc, #248]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a462:	4313      	orrs	r3, r2
 800a464:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f003 0302 	and.w	r3, r3, #2
 800a470:	2b00      	cmp	r3, #0
 800a472:	d01f      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a474:	4b39      	ldr	r3, [pc, #228]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a47a:	0f1b      	lsrs	r3, r3, #28
 800a47c:	f003 0307 	and.w	r3, r3, #7
 800a480:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	019a      	lsls	r2, r3, #6
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	061b      	lsls	r3, r3, #24
 800a48e:	431a      	orrs	r2, r3
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	071b      	lsls	r3, r3, #28
 800a494:	4931      	ldr	r1, [pc, #196]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a496:	4313      	orrs	r3, r2
 800a498:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a49c:	4b2f      	ldr	r3, [pc, #188]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a49e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4a2:	f023 021f 	bic.w	r2, r3, #31
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a1b      	ldr	r3, [r3, #32]
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	492b      	ldr	r1, [pc, #172]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d00d      	beq.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	019a      	lsls	r2, r3, #6
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	061b      	lsls	r3, r3, #24
 800a4cc:	431a      	orrs	r2, r3
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	689b      	ldr	r3, [r3, #8]
 800a4d2:	071b      	lsls	r3, r3, #28
 800a4d4:	4921      	ldr	r1, [pc, #132]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a4dc:	4b20      	ldr	r3, [pc, #128]	; (800a560 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a4de:	2201      	movs	r2, #1
 800a4e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a4e2:	f7fd fad3 	bl	8007a8c <HAL_GetTick>
 800a4e6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a4e8:	e008      	b.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a4ea:	f7fd facf 	bl	8007a8c <HAL_GetTick>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	1ad3      	subs	r3, r2, r3
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	d901      	bls.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a4f8:	2303      	movs	r3, #3
 800a4fa:	e17c      	b.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a4fc:	4b17      	ldr	r3, [pc, #92]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a504:	2b00      	cmp	r3, #0
 800a506:	d0f0      	beq.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 0304 	and.w	r3, r3, #4
 800a510:	2b00      	cmp	r3, #0
 800a512:	d112      	bne.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d10c      	bne.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800a528:	2b00      	cmp	r3, #0
 800a52a:	f000 80ce 	beq.w	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800a532:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a536:	f040 80c8 	bne.w	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a53a:	4b0a      	ldr	r3, [pc, #40]	; (800a564 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800a53c:	2200      	movs	r2, #0
 800a53e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a540:	f7fd faa4 	bl	8007a8c <HAL_GetTick>
 800a544:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a546:	e00f      	b.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a548:	f7fd faa0 	bl	8007a8c <HAL_GetTick>
 800a54c:	4602      	mov	r2, r0
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	2b02      	cmp	r3, #2
 800a554:	d908      	bls.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a556:	2303      	movs	r3, #3
 800a558:	e14d      	b.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800a55a:	bf00      	nop
 800a55c:	40023800 	.word	0x40023800
 800a560:	42470068 	.word	0x42470068
 800a564:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a568:	4ba5      	ldr	r3, [pc, #660]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a574:	d0e8      	beq.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 0304 	and.w	r3, r3, #4
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d02e      	beq.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a582:	4b9f      	ldr	r3, [pc, #636]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a588:	0c1b      	lsrs	r3, r3, #16
 800a58a:	f003 0303 	and.w	r3, r3, #3
 800a58e:	3301      	adds	r3, #1
 800a590:	005b      	lsls	r3, r3, #1
 800a592:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a594:	4b9a      	ldr	r3, [pc, #616]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a59a:	0f1b      	lsrs	r3, r3, #28
 800a59c:	f003 0307 	and.w	r3, r3, #7
 800a5a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	691b      	ldr	r3, [r3, #16]
 800a5a6:	019a      	lsls	r2, r3, #6
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	085b      	lsrs	r3, r3, #1
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	041b      	lsls	r3, r3, #16
 800a5b0:	431a      	orrs	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	061b      	lsls	r3, r3, #24
 800a5b8:	431a      	orrs	r2, r3
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	071b      	lsls	r3, r3, #28
 800a5be:	4990      	ldr	r1, [pc, #576]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a5c6:	4b8e      	ldr	r3, [pc, #568]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a5c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	021b      	lsls	r3, r3, #8
 800a5d8:	4989      	ldr	r1, [pc, #548]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 0308 	and.w	r3, r3, #8
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d02c      	beq.n	800a646 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a5ec:	4b84      	ldr	r3, [pc, #528]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a5ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f2:	0c1b      	lsrs	r3, r3, #16
 800a5f4:	f003 0303 	and.w	r3, r3, #3
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	005b      	lsls	r3, r3, #1
 800a5fc:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a5fe:	4b80      	ldr	r3, [pc, #512]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a604:	0e1b      	lsrs	r3, r3, #24
 800a606:	f003 030f 	and.w	r3, r3, #15
 800a60a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	691b      	ldr	r3, [r3, #16]
 800a610:	019a      	lsls	r2, r3, #6
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	085b      	lsrs	r3, r3, #1
 800a616:	3b01      	subs	r3, #1
 800a618:	041b      	lsls	r3, r3, #16
 800a61a:	431a      	orrs	r2, r3
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	061b      	lsls	r3, r3, #24
 800a620:	431a      	orrs	r2, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	69db      	ldr	r3, [r3, #28]
 800a626:	071b      	lsls	r3, r3, #28
 800a628:	4975      	ldr	r1, [pc, #468]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a62a:	4313      	orrs	r3, r2
 800a62c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a630:	4b73      	ldr	r3, [pc, #460]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a636:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a63e:	4970      	ldr	r1, [pc, #448]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a640:	4313      	orrs	r3, r2
 800a642:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d024      	beq.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800a656:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a65a:	d11f      	bne.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a65c:	4b68      	ldr	r3, [pc, #416]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a65e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a662:	0e1b      	lsrs	r3, r3, #24
 800a664:	f003 030f 	and.w	r3, r3, #15
 800a668:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a66a:	4b65      	ldr	r3, [pc, #404]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a66c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a670:	0f1b      	lsrs	r3, r3, #28
 800a672:	f003 0307 	and.w	r3, r3, #7
 800a676:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	019a      	lsls	r2, r3, #6
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	695b      	ldr	r3, [r3, #20]
 800a682:	085b      	lsrs	r3, r3, #1
 800a684:	3b01      	subs	r3, #1
 800a686:	041b      	lsls	r3, r3, #16
 800a688:	431a      	orrs	r2, r3
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	061b      	lsls	r3, r3, #24
 800a68e:	431a      	orrs	r2, r3
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	071b      	lsls	r3, r3, #28
 800a694:	495a      	ldr	r1, [pc, #360]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a696:	4313      	orrs	r3, r2
 800a698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a69c:	4b59      	ldr	r3, [pc, #356]	; (800a804 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800a69e:	2201      	movs	r2, #1
 800a6a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a6a2:	f7fd f9f3 	bl	8007a8c <HAL_GetTick>
 800a6a6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a6a8:	e008      	b.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a6aa:	f7fd f9ef 	bl	8007a8c <HAL_GetTick>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	1ad3      	subs	r3, r2, r3
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d901      	bls.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	e09c      	b.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a6bc:	4b50      	ldr	r3, [pc, #320]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6c8:	d1ef      	bne.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f003 0320 	and.w	r3, r3, #32
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f000 8083 	beq.w	800a7de <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a6d8:	2300      	movs	r3, #0
 800a6da:	60bb      	str	r3, [r7, #8]
 800a6dc:	4b48      	ldr	r3, [pc, #288]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a6de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e0:	4a47      	ldr	r2, [pc, #284]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a6e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6e6:	6413      	str	r3, [r2, #64]	; 0x40
 800a6e8:	4b45      	ldr	r3, [pc, #276]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a6ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6f0:	60bb      	str	r3, [r7, #8]
 800a6f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a6f4:	4b44      	ldr	r3, [pc, #272]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a43      	ldr	r2, [pc, #268]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a6fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6fe:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a700:	f7fd f9c4 	bl	8007a8c <HAL_GetTick>
 800a704:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a706:	e008      	b.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a708:	f7fd f9c0 	bl	8007a8c <HAL_GetTick>
 800a70c:	4602      	mov	r2, r0
 800a70e:	69fb      	ldr	r3, [r7, #28]
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	2b02      	cmp	r3, #2
 800a714:	d901      	bls.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800a716:	2303      	movs	r3, #3
 800a718:	e06d      	b.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a71a:	4b3b      	ldr	r3, [pc, #236]	; (800a808 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a722:	2b00      	cmp	r3, #0
 800a724:	d0f0      	beq.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a726:	4b36      	ldr	r3, [pc, #216]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a72a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a72e:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a730:	69bb      	ldr	r3, [r7, #24]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d02f      	beq.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a73e:	69ba      	ldr	r2, [r7, #24]
 800a740:	429a      	cmp	r2, r3
 800a742:	d028      	beq.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a744:	4b2e      	ldr	r3, [pc, #184]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a74c:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a74e:	4b2f      	ldr	r3, [pc, #188]	; (800a80c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a750:	2201      	movs	r2, #1
 800a752:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a754:	4b2d      	ldr	r3, [pc, #180]	; (800a80c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a756:	2200      	movs	r2, #0
 800a758:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a75a:	4a29      	ldr	r2, [pc, #164]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a75c:	69bb      	ldr	r3, [r7, #24]
 800a75e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a760:	4b27      	ldr	r3, [pc, #156]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a764:	f003 0301 	and.w	r3, r3, #1
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d114      	bne.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a76c:	f7fd f98e 	bl	8007a8c <HAL_GetTick>
 800a770:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a772:	e00a      	b.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a774:	f7fd f98a 	bl	8007a8c <HAL_GetTick>
 800a778:	4602      	mov	r2, r0
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a782:	4293      	cmp	r3, r2
 800a784:	d901      	bls.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800a786:	2303      	movs	r3, #3
 800a788:	e035      	b.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a78a:	4b1d      	ldr	r3, [pc, #116]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a78c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a78e:	f003 0302 	and.w	r3, r3, #2
 800a792:	2b00      	cmp	r3, #0
 800a794:	d0ee      	beq.n	800a774 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a79a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a79e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7a2:	d10d      	bne.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800a7a4:	4b16      	ldr	r3, [pc, #88]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a7b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7b8:	4911      	ldr	r1, [pc, #68]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	608b      	str	r3, [r1, #8]
 800a7be:	e005      	b.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x434>
 800a7c0:	4b0f      	ldr	r3, [pc, #60]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	4a0e      	ldr	r2, [pc, #56]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a7c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a7ca:	6093      	str	r3, [r2, #8]
 800a7cc:	4b0c      	ldr	r3, [pc, #48]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a7ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7d8:	4909      	ldr	r1, [pc, #36]	; (800a800 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f003 0310 	and.w	r3, r3, #16
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d004      	beq.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a7f0:	4b07      	ldr	r3, [pc, #28]	; (800a810 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800a7f2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3720      	adds	r7, #32
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	40023800 	.word	0x40023800
 800a804:	42470070 	.word	0x42470070
 800a808:	40007000 	.word	0x40007000
 800a80c:	42470e40 	.word	0x42470e40
 800a810:	424711e0 	.word	0x424711e0

0800a814 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a81c:	2300      	movs	r3, #0
 800a81e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f003 0301 	and.w	r3, r3, #1
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d075      	beq.n	800a918 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a82c:	4ba2      	ldr	r3, [pc, #648]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	f003 030c 	and.w	r3, r3, #12
 800a834:	2b04      	cmp	r3, #4
 800a836:	d00c      	beq.n	800a852 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a838:	4b9f      	ldr	r3, [pc, #636]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a840:	2b08      	cmp	r3, #8
 800a842:	d112      	bne.n	800a86a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a844:	4b9c      	ldr	r3, [pc, #624]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a84c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a850:	d10b      	bne.n	800a86a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a852:	4b99      	ldr	r3, [pc, #612]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d05b      	beq.n	800a916 <HAL_RCC_OscConfig+0x102>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d157      	bne.n	800a916 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	e20b      	b.n	800ac82 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a872:	d106      	bne.n	800a882 <HAL_RCC_OscConfig+0x6e>
 800a874:	4b90      	ldr	r3, [pc, #576]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a8f      	ldr	r2, [pc, #572]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a87a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a87e:	6013      	str	r3, [r2, #0]
 800a880:	e01d      	b.n	800a8be <HAL_RCC_OscConfig+0xaa>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a88a:	d10c      	bne.n	800a8a6 <HAL_RCC_OscConfig+0x92>
 800a88c:	4b8a      	ldr	r3, [pc, #552]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a89      	ldr	r2, [pc, #548]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a892:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a896:	6013      	str	r3, [r2, #0]
 800a898:	4b87      	ldr	r3, [pc, #540]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a86      	ldr	r2, [pc, #536]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a89e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8a2:	6013      	str	r3, [r2, #0]
 800a8a4:	e00b      	b.n	800a8be <HAL_RCC_OscConfig+0xaa>
 800a8a6:	4b84      	ldr	r3, [pc, #528]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a83      	ldr	r2, [pc, #524]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a8ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8b0:	6013      	str	r3, [r2, #0]
 800a8b2:	4b81      	ldr	r3, [pc, #516]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a80      	ldr	r2, [pc, #512]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a8b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d013      	beq.n	800a8ee <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8c6:	f7fd f8e1 	bl	8007a8c <HAL_GetTick>
 800a8ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8cc:	e008      	b.n	800a8e0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a8ce:	f7fd f8dd 	bl	8007a8c <HAL_GetTick>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	1ad3      	subs	r3, r2, r3
 800a8d8:	2b64      	cmp	r3, #100	; 0x64
 800a8da:	d901      	bls.n	800a8e0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	e1d0      	b.n	800ac82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8e0:	4b75      	ldr	r3, [pc, #468]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d0f0      	beq.n	800a8ce <HAL_RCC_OscConfig+0xba>
 800a8ec:	e014      	b.n	800a918 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8ee:	f7fd f8cd 	bl	8007a8c <HAL_GetTick>
 800a8f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a8f4:	e008      	b.n	800a908 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a8f6:	f7fd f8c9 	bl	8007a8c <HAL_GetTick>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	1ad3      	subs	r3, r2, r3
 800a900:	2b64      	cmp	r3, #100	; 0x64
 800a902:	d901      	bls.n	800a908 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800a904:	2303      	movs	r3, #3
 800a906:	e1bc      	b.n	800ac82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a908:	4b6b      	ldr	r3, [pc, #428]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a910:	2b00      	cmp	r3, #0
 800a912:	d1f0      	bne.n	800a8f6 <HAL_RCC_OscConfig+0xe2>
 800a914:	e000      	b.n	800a918 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a916:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f003 0302 	and.w	r3, r3, #2
 800a920:	2b00      	cmp	r3, #0
 800a922:	d063      	beq.n	800a9ec <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a924:	4b64      	ldr	r3, [pc, #400]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a926:	689b      	ldr	r3, [r3, #8]
 800a928:	f003 030c 	and.w	r3, r3, #12
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d00b      	beq.n	800a948 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a930:	4b61      	ldr	r3, [pc, #388]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a938:	2b08      	cmp	r3, #8
 800a93a:	d11c      	bne.n	800a976 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a93c:	4b5e      	ldr	r3, [pc, #376]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a944:	2b00      	cmp	r3, #0
 800a946:	d116      	bne.n	800a976 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a948:	4b5b      	ldr	r3, [pc, #364]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f003 0302 	and.w	r3, r3, #2
 800a950:	2b00      	cmp	r3, #0
 800a952:	d005      	beq.n	800a960 <HAL_RCC_OscConfig+0x14c>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d001      	beq.n	800a960 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	e190      	b.n	800ac82 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a960:	4b55      	ldr	r3, [pc, #340]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	691b      	ldr	r3, [r3, #16]
 800a96c:	00db      	lsls	r3, r3, #3
 800a96e:	4952      	ldr	r1, [pc, #328]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a970:	4313      	orrs	r3, r2
 800a972:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a974:	e03a      	b.n	800a9ec <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d020      	beq.n	800a9c0 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a97e:	4b4f      	ldr	r3, [pc, #316]	; (800aabc <HAL_RCC_OscConfig+0x2a8>)
 800a980:	2201      	movs	r2, #1
 800a982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a984:	f7fd f882 	bl	8007a8c <HAL_GetTick>
 800a988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a98a:	e008      	b.n	800a99e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a98c:	f7fd f87e 	bl	8007a8c <HAL_GetTick>
 800a990:	4602      	mov	r2, r0
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	1ad3      	subs	r3, r2, r3
 800a996:	2b02      	cmp	r3, #2
 800a998:	d901      	bls.n	800a99e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800a99a:	2303      	movs	r3, #3
 800a99c:	e171      	b.n	800ac82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a99e:	4b46      	ldr	r3, [pc, #280]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f003 0302 	and.w	r3, r3, #2
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d0f0      	beq.n	800a98c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9aa:	4b43      	ldr	r3, [pc, #268]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	00db      	lsls	r3, r3, #3
 800a9b8:	493f      	ldr	r1, [pc, #252]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	600b      	str	r3, [r1, #0]
 800a9be:	e015      	b.n	800a9ec <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a9c0:	4b3e      	ldr	r3, [pc, #248]	; (800aabc <HAL_RCC_OscConfig+0x2a8>)
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9c6:	f7fd f861 	bl	8007a8c <HAL_GetTick>
 800a9ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9cc:	e008      	b.n	800a9e0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a9ce:	f7fd f85d 	bl	8007a8c <HAL_GetTick>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d901      	bls.n	800a9e0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800a9dc:	2303      	movs	r3, #3
 800a9de:	e150      	b.n	800ac82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a9e0:	4b35      	ldr	r3, [pc, #212]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f003 0302 	and.w	r3, r3, #2
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d1f0      	bne.n	800a9ce <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 0308 	and.w	r3, r3, #8
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d030      	beq.n	800aa5a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	695b      	ldr	r3, [r3, #20]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d016      	beq.n	800aa2e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa00:	4b2f      	ldr	r3, [pc, #188]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800aa02:	2201      	movs	r2, #1
 800aa04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa06:	f7fd f841 	bl	8007a8c <HAL_GetTick>
 800aa0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa0c:	e008      	b.n	800aa20 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aa0e:	f7fd f83d 	bl	8007a8c <HAL_GetTick>
 800aa12:	4602      	mov	r2, r0
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	1ad3      	subs	r3, r2, r3
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	d901      	bls.n	800aa20 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800aa1c:	2303      	movs	r3, #3
 800aa1e:	e130      	b.n	800ac82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa20:	4b25      	ldr	r3, [pc, #148]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800aa22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa24:	f003 0302 	and.w	r3, r3, #2
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d0f0      	beq.n	800aa0e <HAL_RCC_OscConfig+0x1fa>
 800aa2c:	e015      	b.n	800aa5a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa2e:	4b24      	ldr	r3, [pc, #144]	; (800aac0 <HAL_RCC_OscConfig+0x2ac>)
 800aa30:	2200      	movs	r2, #0
 800aa32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa34:	f7fd f82a 	bl	8007a8c <HAL_GetTick>
 800aa38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa3a:	e008      	b.n	800aa4e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aa3c:	f7fd f826 	bl	8007a8c <HAL_GetTick>
 800aa40:	4602      	mov	r2, r0
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	1ad3      	subs	r3, r2, r3
 800aa46:	2b02      	cmp	r3, #2
 800aa48:	d901      	bls.n	800aa4e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800aa4a:	2303      	movs	r3, #3
 800aa4c:	e119      	b.n	800ac82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa4e:	4b1a      	ldr	r3, [pc, #104]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800aa50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa52:	f003 0302 	and.w	r3, r3, #2
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1f0      	bne.n	800aa3c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f003 0304 	and.w	r3, r3, #4
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f000 809f 	beq.w	800aba6 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa6c:	4b12      	ldr	r3, [pc, #72]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800aa6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10f      	bne.n	800aa98 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa78:	2300      	movs	r3, #0
 800aa7a:	60fb      	str	r3, [r7, #12]
 800aa7c:	4b0e      	ldr	r3, [pc, #56]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800aa7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa80:	4a0d      	ldr	r2, [pc, #52]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800aa82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa86:	6413      	str	r3, [r2, #64]	; 0x40
 800aa88:	4b0b      	ldr	r3, [pc, #44]	; (800aab8 <HAL_RCC_OscConfig+0x2a4>)
 800aa8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa90:	60fb      	str	r3, [r7, #12]
 800aa92:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800aa94:	2301      	movs	r3, #1
 800aa96:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aa98:	4b0a      	ldr	r3, [pc, #40]	; (800aac4 <HAL_RCC_OscConfig+0x2b0>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d120      	bne.n	800aae6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aaa4:	4b07      	ldr	r3, [pc, #28]	; (800aac4 <HAL_RCC_OscConfig+0x2b0>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a06      	ldr	r2, [pc, #24]	; (800aac4 <HAL_RCC_OscConfig+0x2b0>)
 800aaaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aaae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aab0:	f7fc ffec 	bl	8007a8c <HAL_GetTick>
 800aab4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aab6:	e010      	b.n	800aada <HAL_RCC_OscConfig+0x2c6>
 800aab8:	40023800 	.word	0x40023800
 800aabc:	42470000 	.word	0x42470000
 800aac0:	42470e80 	.word	0x42470e80
 800aac4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aac8:	f7fc ffe0 	bl	8007a8c <HAL_GetTick>
 800aacc:	4602      	mov	r2, r0
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	1ad3      	subs	r3, r2, r3
 800aad2:	2b02      	cmp	r3, #2
 800aad4:	d901      	bls.n	800aada <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800aad6:	2303      	movs	r3, #3
 800aad8:	e0d3      	b.n	800ac82 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aada:	4b6c      	ldr	r3, [pc, #432]	; (800ac8c <HAL_RCC_OscConfig+0x478>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d0f0      	beq.n	800aac8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	2b01      	cmp	r3, #1
 800aaec:	d106      	bne.n	800aafc <HAL_RCC_OscConfig+0x2e8>
 800aaee:	4b68      	ldr	r3, [pc, #416]	; (800ac90 <HAL_RCC_OscConfig+0x47c>)
 800aaf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaf2:	4a67      	ldr	r2, [pc, #412]	; (800ac90 <HAL_RCC_OscConfig+0x47c>)
 800aaf4:	f043 0301 	orr.w	r3, r3, #1
 800aaf8:	6713      	str	r3, [r2, #112]	; 0x70
 800aafa:	e01c      	b.n	800ab36 <HAL_RCC_OscConfig+0x322>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	2b05      	cmp	r3, #5
 800ab02:	d10c      	bne.n	800ab1e <HAL_RCC_OscConfig+0x30a>
 800ab04:	4b62      	ldr	r3, [pc, #392]	; (800ac90 <HAL_RCC_OscConfig+0x47c>)
 800ab06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab08:	4a61      	ldr	r2, [pc, #388]	; (800ac90 <HAL_RCC_OscConfig+0x47c>)
 800ab0a:	f043 0304 	orr.w	r3, r3, #4
 800ab0e:	6713      	str	r3, [r2, #112]	; 0x70
 800ab10:	4b5f      	ldr	r3, [pc, #380]	; (800ac90 <HAL_RCC_OscConfig+0x47c>)
 800ab12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab14:	4a5e      	ldr	r2, [pc, #376]	; (800ac90 <HAL_RCC_OscConfig+0x47c>)
 800ab16:	f043 0301 	orr.w	r3, r3, #1
 800ab1a:	6713      	str	r3, [r2, #112]	; 0x70
 800ab1c:	e00b      	b.n	800ab36 <HAL_RCC_OscConfig+0x322>
 800ab1e:	4b5c      	ldr	r3, [pc, #368]	; (800ac90 <HAL_RCC_OscConfig+0x47c>)
 800ab20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab22:	4a5b      	ldr	r2, [pc, #364]	; (800ac90 <HAL_RCC_OscConfig+0x47c>)
 800ab24:	f023 0301 	bic.w	r3, r3, #1
 800ab28:	6713      	str	r3, [r2, #112]	; 0x70
 800ab2a:	4b59      	ldr	r3, [pc, #356]	; (800ac90 <HAL_RCC_OscConfig+0x47c>)
 800ab2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab2e:	4a58      	ldr	r2, [pc, #352]	; (800ac90 <HAL_RCC_OscConfig+0x47c>)
 800ab30:	f023 0304 	bic.w	r3, r3, #4
 800ab34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d015      	beq.n	800ab6a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab3e:	f7fc ffa5 	bl	8007a8c <HAL_GetTick>
 800ab42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab44:	e00a      	b.n	800ab5c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab46:	f7fc ffa1 	bl	8007a8c <HAL_GetTick>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	1ad3      	subs	r3, r2, r3
 800ab50:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d901      	bls.n	800ab5c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800ab58:	2303      	movs	r3, #3
 800ab5a:	e092      	b.n	800ac82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab5c:	4b4c      	ldr	r3, [pc, #304]	; (800ac90 <HAL_RCC_OscConfig+0x47c>)
 800ab5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab60:	f003 0302 	and.w	r3, r3, #2
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d0ee      	beq.n	800ab46 <HAL_RCC_OscConfig+0x332>
 800ab68:	e014      	b.n	800ab94 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab6a:	f7fc ff8f 	bl	8007a8c <HAL_GetTick>
 800ab6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab70:	e00a      	b.n	800ab88 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab72:	f7fc ff8b 	bl	8007a8c <HAL_GetTick>
 800ab76:	4602      	mov	r2, r0
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	1ad3      	subs	r3, r2, r3
 800ab7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d901      	bls.n	800ab88 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800ab84:	2303      	movs	r3, #3
 800ab86:	e07c      	b.n	800ac82 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ab88:	4b41      	ldr	r3, [pc, #260]	; (800ac90 <HAL_RCC_OscConfig+0x47c>)
 800ab8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab8c:	f003 0302 	and.w	r3, r3, #2
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d1ee      	bne.n	800ab72 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ab94:	7dfb      	ldrb	r3, [r7, #23]
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d105      	bne.n	800aba6 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab9a:	4b3d      	ldr	r3, [pc, #244]	; (800ac90 <HAL_RCC_OscConfig+0x47c>)
 800ab9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab9e:	4a3c      	ldr	r2, [pc, #240]	; (800ac90 <HAL_RCC_OscConfig+0x47c>)
 800aba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aba4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	699b      	ldr	r3, [r3, #24]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d068      	beq.n	800ac80 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800abae:	4b38      	ldr	r3, [pc, #224]	; (800ac90 <HAL_RCC_OscConfig+0x47c>)
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	f003 030c 	and.w	r3, r3, #12
 800abb6:	2b08      	cmp	r3, #8
 800abb8:	d060      	beq.n	800ac7c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	699b      	ldr	r3, [r3, #24]
 800abbe:	2b02      	cmp	r3, #2
 800abc0:	d145      	bne.n	800ac4e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abc2:	4b34      	ldr	r3, [pc, #208]	; (800ac94 <HAL_RCC_OscConfig+0x480>)
 800abc4:	2200      	movs	r2, #0
 800abc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abc8:	f7fc ff60 	bl	8007a8c <HAL_GetTick>
 800abcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800abce:	e008      	b.n	800abe2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800abd0:	f7fc ff5c 	bl	8007a8c <HAL_GetTick>
 800abd4:	4602      	mov	r2, r0
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	1ad3      	subs	r3, r2, r3
 800abda:	2b02      	cmp	r3, #2
 800abdc:	d901      	bls.n	800abe2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800abde:	2303      	movs	r3, #3
 800abe0:	e04f      	b.n	800ac82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800abe2:	4b2b      	ldr	r3, [pc, #172]	; (800ac90 <HAL_RCC_OscConfig+0x47c>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abea:	2b00      	cmp	r3, #0
 800abec:	d1f0      	bne.n	800abd0 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	69da      	ldr	r2, [r3, #28]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6a1b      	ldr	r3, [r3, #32]
 800abf6:	431a      	orrs	r2, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfc:	019b      	lsls	r3, r3, #6
 800abfe:	431a      	orrs	r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac04:	085b      	lsrs	r3, r3, #1
 800ac06:	3b01      	subs	r3, #1
 800ac08:	041b      	lsls	r3, r3, #16
 800ac0a:	431a      	orrs	r2, r3
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac10:	061b      	lsls	r3, r3, #24
 800ac12:	431a      	orrs	r2, r3
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac18:	071b      	lsls	r3, r3, #28
 800ac1a:	491d      	ldr	r1, [pc, #116]	; (800ac90 <HAL_RCC_OscConfig+0x47c>)
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac20:	4b1c      	ldr	r3, [pc, #112]	; (800ac94 <HAL_RCC_OscConfig+0x480>)
 800ac22:	2201      	movs	r2, #1
 800ac24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac26:	f7fc ff31 	bl	8007a8c <HAL_GetTick>
 800ac2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac2c:	e008      	b.n	800ac40 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ac2e:	f7fc ff2d 	bl	8007a8c <HAL_GetTick>
 800ac32:	4602      	mov	r2, r0
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	1ad3      	subs	r3, r2, r3
 800ac38:	2b02      	cmp	r3, #2
 800ac3a:	d901      	bls.n	800ac40 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800ac3c:	2303      	movs	r3, #3
 800ac3e:	e020      	b.n	800ac82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac40:	4b13      	ldr	r3, [pc, #76]	; (800ac90 <HAL_RCC_OscConfig+0x47c>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d0f0      	beq.n	800ac2e <HAL_RCC_OscConfig+0x41a>
 800ac4c:	e018      	b.n	800ac80 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac4e:	4b11      	ldr	r3, [pc, #68]	; (800ac94 <HAL_RCC_OscConfig+0x480>)
 800ac50:	2200      	movs	r2, #0
 800ac52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac54:	f7fc ff1a 	bl	8007a8c <HAL_GetTick>
 800ac58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac5a:	e008      	b.n	800ac6e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ac5c:	f7fc ff16 	bl	8007a8c <HAL_GetTick>
 800ac60:	4602      	mov	r2, r0
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	1ad3      	subs	r3, r2, r3
 800ac66:	2b02      	cmp	r3, #2
 800ac68:	d901      	bls.n	800ac6e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800ac6a:	2303      	movs	r3, #3
 800ac6c:	e009      	b.n	800ac82 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac6e:	4b08      	ldr	r3, [pc, #32]	; (800ac90 <HAL_RCC_OscConfig+0x47c>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1f0      	bne.n	800ac5c <HAL_RCC_OscConfig+0x448>
 800ac7a:	e001      	b.n	800ac80 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	e000      	b.n	800ac82 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3718      	adds	r7, #24
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	40007000 	.word	0x40007000
 800ac90:	40023800 	.word	0x40023800
 800ac94:	42470060 	.word	0x42470060

0800ac98 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d101      	bne.n	800acaa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	e022      	b.n	800acf0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d105      	bne.n	800acc2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2200      	movs	r2, #0
 800acba:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f7fa fec7 	bl	8005a50 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2203      	movs	r2, #3
 800acc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f814 	bl	800acf8 <HAL_SD_InitCard>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d001      	beq.n	800acda <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800acd6:	2301      	movs	r3, #1
 800acd8:	e00a      	b.n	800acf0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2201      	movs	r2, #1
 800acea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800acf8:	b5b0      	push	{r4, r5, r7, lr}
 800acfa:	b08e      	sub	sp, #56	; 0x38
 800acfc:	af04      	add	r7, sp, #16
 800acfe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800ad00:	2300      	movs	r3, #0
 800ad02:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800ad04:	2300      	movs	r3, #0
 800ad06:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800ad10:	2300      	movs	r3, #0
 800ad12:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800ad14:	2376      	movs	r3, #118	; 0x76
 800ad16:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681d      	ldr	r5, [r3, #0]
 800ad1c:	466c      	mov	r4, sp
 800ad1e:	f107 0314 	add.w	r3, r7, #20
 800ad22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ad26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ad2a:	f107 0308 	add.w	r3, r7, #8
 800ad2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad30:	4628      	mov	r0, r5
 800ad32:	f003 fa87 	bl	800e244 <SDIO_Init>
 800ad36:	4603      	mov	r3, r0
 800ad38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800ad3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d001      	beq.n	800ad48 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	e031      	b.n	800adac <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800ad48:	4b1a      	ldr	r3, [pc, #104]	; (800adb4 <HAL_SD_InitCard+0xbc>)
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4618      	mov	r0, r3
 800ad54:	f003 fabf 	bl	800e2d6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800ad58:	4b16      	ldr	r3, [pc, #88]	; (800adb4 <HAL_SD_InitCard+0xbc>)
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 ffc6 	bl	800bcf0 <SD_PowerON>
 800ad64:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad66:	6a3b      	ldr	r3, [r7, #32]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00b      	beq.n	800ad84 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad78:	6a3b      	ldr	r3, [r7, #32]
 800ad7a:	431a      	orrs	r2, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ad80:	2301      	movs	r3, #1
 800ad82:	e013      	b.n	800adac <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 fee5 	bl	800bb54 <SD_InitCard>
 800ad8a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad8c:	6a3b      	ldr	r3, [r7, #32]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00b      	beq.n	800adaa <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2201      	movs	r2, #1
 800ad96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad9e:	6a3b      	ldr	r3, [r7, #32]
 800ada0:	431a      	orrs	r2, r3
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ada6:	2301      	movs	r3, #1
 800ada8:	e000      	b.n	800adac <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800adaa:	2300      	movs	r3, #0
}
 800adac:	4618      	mov	r0, r3
 800adae:	3728      	adds	r7, #40	; 0x28
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bdb0      	pop	{r4, r5, r7, pc}
 800adb4:	422580a0 	.word	0x422580a0

0800adb8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b08c      	sub	sp, #48	; 0x30
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]
 800adc4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d107      	bne.n	800ade0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800addc:	2301      	movs	r3, #1
 800adde:	e0c7      	b.n	800af70 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	2b01      	cmp	r3, #1
 800adea:	f040 80c0 	bne.w	800af6e <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2200      	movs	r2, #0
 800adf2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800adf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	441a      	add	r2, r3
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d907      	bls.n	800ae12 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae06:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e0ae      	b.n	800af70 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2203      	movs	r2, #3
 800ae16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800ae30:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae36:	4a50      	ldr	r2, [pc, #320]	; (800af78 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800ae38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae3e:	4a4f      	ldr	r2, [pc, #316]	; (800af7c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800ae40:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae46:	2200      	movs	r2, #0
 800ae48:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	3380      	adds	r3, #128	; 0x80
 800ae54:	4619      	mov	r1, r3
 800ae56:	68ba      	ldr	r2, [r7, #8]
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	025b      	lsls	r3, r3, #9
 800ae5c:	089b      	lsrs	r3, r3, #2
 800ae5e:	f7fd fc07 	bl	8008670 <HAL_DMA_Start_IT>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d017      	beq.n	800ae98 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800ae76:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a40      	ldr	r2, [pc, #256]	; (800af80 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800ae7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ae94:	2301      	movs	r3, #1
 800ae96:	e06b      	b.n	800af70 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800ae98:	4b3a      	ldr	r3, [pc, #232]	; (800af84 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d002      	beq.n	800aeac <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800aea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea8:	025b      	lsls	r3, r3, #9
 800aeaa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f003 faa1 	bl	800e3fc <SDMMC_CmdBlockLength>
 800aeba:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800aebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d00f      	beq.n	800aee2 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a2e      	ldr	r2, [pc, #184]	; (800af80 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800aec8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed0:	431a      	orrs	r2, r3
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2201      	movs	r2, #1
 800aeda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	e046      	b.n	800af70 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aee2:	f04f 33ff 	mov.w	r3, #4294967295
 800aee6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	025b      	lsls	r3, r3, #9
 800aeec:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800aeee:	2390      	movs	r3, #144	; 0x90
 800aef0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800aef2:	2302      	movs	r3, #2
 800aef4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800aef6:	2300      	movs	r3, #0
 800aef8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800aefa:	2301      	movs	r3, #1
 800aefc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f107 0210 	add.w	r2, r7, #16
 800af06:	4611      	mov	r1, r2
 800af08:	4618      	mov	r0, r3
 800af0a:	f003 fa4b 	bl	800e3a4 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	2b01      	cmp	r3, #1
 800af12:	d90a      	bls.n	800af2a <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2282      	movs	r2, #130	; 0x82
 800af18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af20:	4618      	mov	r0, r3
 800af22:	f003 faaf 	bl	800e484 <SDMMC_CmdReadMultiBlock>
 800af26:	62f8      	str	r0, [r7, #44]	; 0x2c
 800af28:	e009      	b.n	800af3e <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2281      	movs	r2, #129	; 0x81
 800af2e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af36:	4618      	mov	r0, r3
 800af38:	f003 fa82 	bl	800e440 <SDMMC_CmdReadSingleBlock>
 800af3c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800af3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af40:	2b00      	cmp	r3, #0
 800af42:	d012      	beq.n	800af6a <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a0d      	ldr	r2, [pc, #52]	; (800af80 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800af4a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af52:	431a      	orrs	r2, r3
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2200      	movs	r2, #0
 800af64:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800af66:	2301      	movs	r3, #1
 800af68:	e002      	b.n	800af70 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800af6a:	2300      	movs	r3, #0
 800af6c:	e000      	b.n	800af70 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800af6e:	2302      	movs	r3, #2
  }
}
 800af70:	4618      	mov	r0, r3
 800af72:	3730      	adds	r7, #48	; 0x30
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	0800b963 	.word	0x0800b963
 800af7c:	0800b9d5 	.word	0x0800b9d5
 800af80:	004005ff 	.word	0x004005ff
 800af84:	4225858c 	.word	0x4225858c

0800af88 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b08c      	sub	sp, #48	; 0x30
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
 800af94:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d107      	bne.n	800afb0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800afac:	2301      	movs	r3, #1
 800afae:	e0ca      	b.n	800b146 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	2b01      	cmp	r3, #1
 800afba:	f040 80c3 	bne.w	800b144 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2200      	movs	r2, #0
 800afc2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800afc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	441a      	add	r2, r3
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afce:	429a      	cmp	r2, r3
 800afd0:	d907      	bls.n	800afe2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800afde:	2301      	movs	r3, #1
 800afe0:	e0b1      	b.n	800b146 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2203      	movs	r2, #3
 800afe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	2200      	movs	r2, #0
 800aff0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f042 021a 	orr.w	r2, r2, #26
 800b000:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b006:	4a52      	ldr	r2, [pc, #328]	; (800b150 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800b008:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b00e:	4a51      	ldr	r2, [pc, #324]	; (800b154 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800b010:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b016:	2200      	movs	r2, #0
 800b018:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d002      	beq.n	800b028 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800b022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b024:	025b      	lsls	r3, r3, #9
 800b026:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b030:	4618      	mov	r0, r3
 800b032:	f003 f9e3 	bl	800e3fc <SDMMC_CmdBlockLength>
 800b036:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00f      	beq.n	800b05e <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a45      	ldr	r2, [pc, #276]	; (800b158 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b044:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b04c:	431a      	orrs	r2, r3
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2201      	movs	r2, #1
 800b056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	e073      	b.n	800b146 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	2b01      	cmp	r3, #1
 800b062:	d90a      	bls.n	800b07a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	22a0      	movs	r2, #160	; 0xa0
 800b068:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b070:	4618      	mov	r0, r3
 800b072:	f003 fa4b 	bl	800e50c <SDMMC_CmdWriteMultiBlock>
 800b076:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b078:	e009      	b.n	800b08e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2290      	movs	r2, #144	; 0x90
 800b07e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b086:	4618      	mov	r0, r3
 800b088:	f003 fa1e 	bl	800e4c8 <SDMMC_CmdWriteSingleBlock>
 800b08c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b090:	2b00      	cmp	r3, #0
 800b092:	d012      	beq.n	800b0ba <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a2f      	ldr	r2, [pc, #188]	; (800b158 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b09a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a2:	431a      	orrs	r2, r3
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e045      	b.n	800b146 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800b0ba:	4b28      	ldr	r3, [pc, #160]	; (800b15c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800b0bc:	2201      	movs	r2, #1
 800b0be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b0c4:	68b9      	ldr	r1, [r7, #8]
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	3380      	adds	r3, #128	; 0x80
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	025b      	lsls	r3, r3, #9
 800b0d2:	089b      	lsrs	r3, r3, #2
 800b0d4:	f7fd facc 	bl	8008670 <HAL_DMA_Start_IT>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d01a      	beq.n	800b114 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f022 021a 	bic.w	r2, r2, #26
 800b0ec:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a19      	ldr	r2, [pc, #100]	; (800b158 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b0f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2201      	movs	r2, #1
 800b106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2200      	movs	r2, #0
 800b10e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b110:	2301      	movs	r3, #1
 800b112:	e018      	b.n	800b146 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b114:	f04f 33ff 	mov.w	r3, #4294967295
 800b118:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	025b      	lsls	r3, r3, #9
 800b11e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b120:	2390      	movs	r3, #144	; 0x90
 800b122:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800b124:	2300      	movs	r3, #0
 800b126:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b128:	2300      	movs	r3, #0
 800b12a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800b12c:	2301      	movs	r3, #1
 800b12e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f107 0210 	add.w	r2, r7, #16
 800b138:	4611      	mov	r1, r2
 800b13a:	4618      	mov	r0, r3
 800b13c:	f003 f932 	bl	800e3a4 <SDIO_ConfigData>

      return HAL_OK;
 800b140:	2300      	movs	r3, #0
 800b142:	e000      	b.n	800b146 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800b144:	2302      	movs	r3, #2
  }
}
 800b146:	4618      	mov	r0, r3
 800b148:	3730      	adds	r7, #48	; 0x30
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	0800b939 	.word	0x0800b939
 800b154:	0800b9d5 	.word	0x0800b9d5
 800b158:	004005ff 	.word	0x004005ff
 800b15c:	4225858c 	.word	0x4225858c

0800b160 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b16c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b174:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d008      	beq.n	800b18e <HAL_SD_IRQHandler+0x2e>
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f003 0308 	and.w	r3, r3, #8
 800b182:	2b00      	cmp	r3, #0
 800b184:	d003      	beq.n	800b18e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 ffc8 	bl	800c11c <SD_Read_IT>
 800b18c:	e155      	b.n	800b43a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f000 808f 	beq.w	800b2bc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b1a6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	6812      	ldr	r2, [r2, #0]
 800b1b2:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800b1b6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800b1ba:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f022 0201 	bic.w	r2, r2, #1
 800b1ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f003 0308 	and.w	r3, r3, #8
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d039      	beq.n	800b24a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f003 0302 	and.w	r3, r3, #2
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d104      	bne.n	800b1ea <HAL_SD_IRQHandler+0x8a>
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f003 0320 	and.w	r3, r3, #32
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d011      	beq.n	800b20e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f003 f9ae 	bl	800e550 <SDMMC_CmdStopTransfer>
 800b1f4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d008      	beq.n	800b20e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	431a      	orrs	r2, r3
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 f91f 	bl	800b44c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f240 523a 	movw	r2, #1338	; 0x53a
 800b216:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2201      	movs	r2, #1
 800b21c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f003 0301 	and.w	r3, r3, #1
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d104      	bne.n	800b23a <HAL_SD_IRQHandler+0xda>
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f003 0302 	and.w	r3, r3, #2
 800b236:	2b00      	cmp	r3, #0
 800b238:	d003      	beq.n	800b242 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f003 fe04 	bl	800ee48 <HAL_SD_RxCpltCallback>
 800b240:	e0fb      	b.n	800b43a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f003 fdf6 	bl	800ee34 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b248:	e0f7      	b.n	800b43a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b250:	2b00      	cmp	r3, #0
 800b252:	f000 80f2 	beq.w	800b43a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f003 0320 	and.w	r3, r3, #32
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d011      	beq.n	800b284 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4618      	mov	r0, r3
 800b266:	f003 f973 	bl	800e550 <SDMMC_CmdStopTransfer>
 800b26a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d008      	beq.n	800b284 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	431a      	orrs	r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f8e4 	bl	800b44c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f003 0301 	and.w	r3, r3, #1
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f040 80d5 	bne.w	800b43a <HAL_SD_IRQHandler+0x2da>
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f003 0302 	and.w	r3, r3, #2
 800b296:	2b00      	cmp	r3, #0
 800b298:	f040 80cf 	bne.w	800b43a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f022 0208 	bic.w	r2, r2, #8
 800b2aa:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f003 fdbd 	bl	800ee34 <HAL_SD_TxCpltCallback>
}
 800b2ba:	e0be      	b.n	800b43a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d008      	beq.n	800b2dc <HAL_SD_IRQHandler+0x17c>
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f003 0308 	and.w	r3, r3, #8
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d003      	beq.n	800b2dc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 ff72 	bl	800c1be <SD_Write_IT>
 800b2da:	e0ae      	b.n	800b43a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2e2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	f000 80a7 	beq.w	800b43a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f2:	f003 0302 	and.w	r3, r3, #2
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d005      	beq.n	800b306 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2fe:	f043 0202 	orr.w	r2, r3, #2
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b30c:	f003 0308 	and.w	r3, r3, #8
 800b310:	2b00      	cmp	r3, #0
 800b312:	d005      	beq.n	800b320 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b318:	f043 0208 	orr.w	r2, r3, #8
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b326:	f003 0320 	and.w	r3, r3, #32
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d005      	beq.n	800b33a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b332:	f043 0220 	orr.w	r2, r3, #32
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b340:	f003 0310 	and.w	r3, r3, #16
 800b344:	2b00      	cmp	r3, #0
 800b346:	d005      	beq.n	800b354 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b34c:	f043 0210 	orr.w	r2, r3, #16
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f240 523a 	movw	r2, #1338	; 0x53a
 800b35c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b36c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4618      	mov	r0, r3
 800b374:	f003 f8ec 	bl	800e550 <SDMMC_CmdStopTransfer>
 800b378:	4602      	mov	r2, r0
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b37e:	431a      	orrs	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f003 0308 	and.w	r3, r3, #8
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00a      	beq.n	800b3a4 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2201      	movs	r2, #1
 800b392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f000 f855 	bl	800b44c <HAL_SD_ErrorCallback>
}
 800b3a2:	e04a      	b.n	800b43a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d045      	beq.n	800b43a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f003 0310 	and.w	r3, r3, #16
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d104      	bne.n	800b3c2 <HAL_SD_IRQHandler+0x262>
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f003 0320 	and.w	r3, r3, #32
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d011      	beq.n	800b3e6 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3c6:	4a1f      	ldr	r2, [pc, #124]	; (800b444 <HAL_SD_IRQHandler+0x2e4>)
 800b3c8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7fd f9a6 	bl	8008720 <HAL_DMA_Abort_IT>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d02f      	beq.n	800b43a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f000 fb4a 	bl	800ba78 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b3e4:	e029      	b.n	800b43a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f003 0301 	and.w	r3, r3, #1
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d104      	bne.n	800b3fa <HAL_SD_IRQHandler+0x29a>
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f003 0302 	and.w	r3, r3, #2
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d011      	beq.n	800b41e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3fe:	4a12      	ldr	r2, [pc, #72]	; (800b448 <HAL_SD_IRQHandler+0x2e8>)
 800b400:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b406:	4618      	mov	r0, r3
 800b408:	f7fd f98a 	bl	8008720 <HAL_DMA_Abort_IT>
 800b40c:	4603      	mov	r3, r0
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d013      	beq.n	800b43a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b416:	4618      	mov	r0, r3
 800b418:	f000 fb65 	bl	800bae6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b41c:	e00d      	b.n	800b43a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2201      	movs	r2, #1
 800b428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f003 fcf4 	bl	800ee20 <HAL_SD_AbortCallback>
}
 800b438:	e7ff      	b.n	800b43a <HAL_SD_IRQHandler+0x2da>
 800b43a:	bf00      	nop
 800b43c:	3710      	adds	r7, #16
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	0800ba79 	.word	0x0800ba79
 800b448:	0800bae7 	.word	0x0800bae7

0800b44c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b454:	bf00      	nop
 800b456:	370c      	adds	r7, #12
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr

0800b460 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b460:	b480      	push	{r7}
 800b462:	b083      	sub	sp, #12
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b46e:	0f9b      	lsrs	r3, r3, #30
 800b470:	b2da      	uxtb	r2, r3
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b47a:	0e9b      	lsrs	r3, r3, #26
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	f003 030f 	and.w	r3, r3, #15
 800b482:	b2da      	uxtb	r2, r3
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b48c:	0e1b      	lsrs	r3, r3, #24
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	f003 0303 	and.w	r3, r3, #3
 800b494:	b2da      	uxtb	r2, r3
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b49e:	0c1b      	lsrs	r3, r3, #16
 800b4a0:	b2da      	uxtb	r2, r3
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4aa:	0a1b      	lsrs	r3, r3, #8
 800b4ac:	b2da      	uxtb	r2, r3
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4b6:	b2da      	uxtb	r2, r3
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4c0:	0d1b      	lsrs	r3, r3, #20
 800b4c2:	b29a      	uxth	r2, r3
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4cc:	0c1b      	lsrs	r3, r3, #16
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	f003 030f 	and.w	r3, r3, #15
 800b4d4:	b2da      	uxtb	r2, r3
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4de:	0bdb      	lsrs	r3, r3, #15
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	f003 0301 	and.w	r3, r3, #1
 800b4e6:	b2da      	uxtb	r2, r3
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4f0:	0b9b      	lsrs	r3, r3, #14
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	f003 0301 	and.w	r3, r3, #1
 800b4f8:	b2da      	uxtb	r2, r3
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b502:	0b5b      	lsrs	r3, r3, #13
 800b504:	b2db      	uxtb	r3, r3
 800b506:	f003 0301 	and.w	r3, r3, #1
 800b50a:	b2da      	uxtb	r2, r3
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b514:	0b1b      	lsrs	r3, r3, #12
 800b516:	b2db      	uxtb	r3, r3
 800b518:	f003 0301 	and.w	r3, r3, #1
 800b51c:	b2da      	uxtb	r2, r3
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	2200      	movs	r2, #0
 800b526:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d163      	bne.n	800b5f8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b534:	009a      	lsls	r2, r3, #2
 800b536:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b53a:	4013      	ands	r3, r2
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b540:	0f92      	lsrs	r2, r2, #30
 800b542:	431a      	orrs	r2, r3
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b54c:	0edb      	lsrs	r3, r3, #27
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	f003 0307 	and.w	r3, r3, #7
 800b554:	b2da      	uxtb	r2, r3
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b55e:	0e1b      	lsrs	r3, r3, #24
 800b560:	b2db      	uxtb	r3, r3
 800b562:	f003 0307 	and.w	r3, r3, #7
 800b566:	b2da      	uxtb	r2, r3
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b570:	0d5b      	lsrs	r3, r3, #21
 800b572:	b2db      	uxtb	r3, r3
 800b574:	f003 0307 	and.w	r3, r3, #7
 800b578:	b2da      	uxtb	r2, r3
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b582:	0c9b      	lsrs	r3, r3, #18
 800b584:	b2db      	uxtb	r3, r3
 800b586:	f003 0307 	and.w	r3, r3, #7
 800b58a:	b2da      	uxtb	r2, r3
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b594:	0bdb      	lsrs	r3, r3, #15
 800b596:	b2db      	uxtb	r3, r3
 800b598:	f003 0307 	and.w	r3, r3, #7
 800b59c:	b2da      	uxtb	r2, r3
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	691b      	ldr	r3, [r3, #16]
 800b5a6:	1c5a      	adds	r2, r3, #1
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	7e1b      	ldrb	r3, [r3, #24]
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	f003 0307 	and.w	r3, r3, #7
 800b5b6:	3302      	adds	r3, #2
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b5c2:	fb02 f203 	mul.w	r2, r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	7a1b      	ldrb	r3, [r3, #8]
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	f003 030f 	and.w	r3, r3, #15
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	409a      	lsls	r2, r3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b5e4:	0a52      	lsrs	r2, r2, #9
 800b5e6:	fb02 f203 	mul.w	r2, r2, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5f4:	661a      	str	r2, [r3, #96]	; 0x60
 800b5f6:	e031      	b.n	800b65c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d11d      	bne.n	800b63c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b604:	041b      	lsls	r3, r3, #16
 800b606:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b60e:	0c1b      	lsrs	r3, r3, #16
 800b610:	431a      	orrs	r2, r3
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	691b      	ldr	r3, [r3, #16]
 800b61a:	3301      	adds	r3, #1
 800b61c:	029a      	lsls	r2, r3, #10
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b630:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	661a      	str	r2, [r3, #96]	; 0x60
 800b63a:	e00f      	b.n	800b65c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a58      	ldr	r2, [pc, #352]	; (800b7a4 <HAL_SD_GetCardCSD+0x344>)
 800b642:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b648:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2201      	movs	r2, #1
 800b654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	e09d      	b.n	800b798 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b660:	0b9b      	lsrs	r3, r3, #14
 800b662:	b2db      	uxtb	r3, r3
 800b664:	f003 0301 	and.w	r3, r3, #1
 800b668:	b2da      	uxtb	r2, r3
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b672:	09db      	lsrs	r3, r3, #7
 800b674:	b2db      	uxtb	r3, r3
 800b676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b67a:	b2da      	uxtb	r2, r3
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b684:	b2db      	uxtb	r3, r3
 800b686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b68a:	b2da      	uxtb	r2, r3
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b694:	0fdb      	lsrs	r3, r3, #31
 800b696:	b2da      	uxtb	r2, r3
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6a0:	0f5b      	lsrs	r3, r3, #29
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	f003 0303 	and.w	r3, r3, #3
 800b6a8:	b2da      	uxtb	r2, r3
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6b2:	0e9b      	lsrs	r3, r3, #26
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	f003 0307 	and.w	r3, r3, #7
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6c4:	0d9b      	lsrs	r3, r3, #22
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	f003 030f 	and.w	r3, r3, #15
 800b6cc:	b2da      	uxtb	r2, r3
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6d6:	0d5b      	lsrs	r3, r3, #21
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	f003 0301 	and.w	r3, r3, #1
 800b6de:	b2da      	uxtb	r2, r3
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6f2:	0c1b      	lsrs	r3, r3, #16
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	f003 0301 	and.w	r3, r3, #1
 800b6fa:	b2da      	uxtb	r2, r3
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b706:	0bdb      	lsrs	r3, r3, #15
 800b708:	b2db      	uxtb	r3, r3
 800b70a:	f003 0301 	and.w	r3, r3, #1
 800b70e:	b2da      	uxtb	r2, r3
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b71a:	0b9b      	lsrs	r3, r3, #14
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	f003 0301 	and.w	r3, r3, #1
 800b722:	b2da      	uxtb	r2, r3
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b72e:	0b5b      	lsrs	r3, r3, #13
 800b730:	b2db      	uxtb	r3, r3
 800b732:	f003 0301 	and.w	r3, r3, #1
 800b736:	b2da      	uxtb	r2, r3
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b742:	0b1b      	lsrs	r3, r3, #12
 800b744:	b2db      	uxtb	r3, r3
 800b746:	f003 0301 	and.w	r3, r3, #1
 800b74a:	b2da      	uxtb	r2, r3
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b756:	0a9b      	lsrs	r3, r3, #10
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	f003 0303 	and.w	r3, r3, #3
 800b75e:	b2da      	uxtb	r2, r3
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b76a:	0a1b      	lsrs	r3, r3, #8
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	f003 0303 	and.w	r3, r3, #3
 800b772:	b2da      	uxtb	r2, r3
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b77e:	085b      	lsrs	r3, r3, #1
 800b780:	b2db      	uxtb	r3, r3
 800b782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b786:	b2da      	uxtb	r2, r3
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	2201      	movs	r2, #1
 800b792:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b796:	2300      	movs	r3, #0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr
 800b7a4:	004005ff 	.word	0x004005ff

0800b7a8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	370c      	adds	r7, #12
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b800:	b5b0      	push	{r4, r5, r7, lr}
 800b802:	b08e      	sub	sp, #56	; 0x38
 800b804:	af04      	add	r7, sp, #16
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2203      	movs	r2, #3
 800b80e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b816:	2b03      	cmp	r3, #3
 800b818:	d02e      	beq.n	800b878 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b820:	d106      	bne.n	800b830 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b826:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	639a      	str	r2, [r3, #56]	; 0x38
 800b82e:	e029      	b.n	800b884 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b836:	d10a      	bne.n	800b84e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f000 fb0f 	bl	800be5c <SD_WideBus_Enable>
 800b83e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b846:	431a      	orrs	r2, r3
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	639a      	str	r2, [r3, #56]	; 0x38
 800b84c:	e01a      	b.n	800b884 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d10a      	bne.n	800b86a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 fb4c 	bl	800bef2 <SD_WideBus_Disable>
 800b85a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b862:	431a      	orrs	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	639a      	str	r2, [r3, #56]	; 0x38
 800b868:	e00c      	b.n	800b884 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b86e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	639a      	str	r2, [r3, #56]	; 0x38
 800b876:	e005      	b.n	800b884 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b87c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d009      	beq.n	800b8a0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a18      	ldr	r2, [pc, #96]	; (800b8f4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800b892:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2201      	movs	r2, #1
 800b898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b89c:	2301      	movs	r3, #1
 800b89e:	e024      	b.n	800b8ea <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	68db      	ldr	r3, [r3, #12]
 800b8b0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	695b      	ldr	r3, [r3, #20]
 800b8ba:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	699b      	ldr	r3, [r3, #24]
 800b8c0:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681d      	ldr	r5, [r3, #0]
 800b8c6:	466c      	mov	r4, sp
 800b8c8:	f107 0318 	add.w	r3, r7, #24
 800b8cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b8d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b8d4:	f107 030c 	add.w	r3, r7, #12
 800b8d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b8da:	4628      	mov	r0, r5
 800b8dc:	f002 fcb2 	bl	800e244 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b8e8:	2300      	movs	r3, #0
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3728      	adds	r7, #40	; 0x28
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bdb0      	pop	{r4, r5, r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	004005ff 	.word	0x004005ff

0800b8f8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b086      	sub	sp, #24
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b900:	2300      	movs	r3, #0
 800b902:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b904:	f107 030c 	add.w	r3, r7, #12
 800b908:	4619      	mov	r1, r3
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 fa7e 	bl	800be0c <SD_SendStatus>
 800b910:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d005      	beq.n	800b924 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	431a      	orrs	r2, r3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	0a5b      	lsrs	r3, r3, #9
 800b928:	f003 030f 	and.w	r3, r3, #15
 800b92c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b92e:	693b      	ldr	r3, [r7, #16]
}
 800b930:	4618      	mov	r0, r3
 800b932:	3718      	adds	r7, #24
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b944:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b954:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b956:	bf00      	nop
 800b958:	3714      	adds	r7, #20
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr

0800b962 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b084      	sub	sp, #16
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b96e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b974:	2b82      	cmp	r3, #130	; 0x82
 800b976:	d111      	bne.n	800b99c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4618      	mov	r0, r3
 800b97e:	f002 fde7 	bl	800e550 <SDMMC_CmdStopTransfer>
 800b982:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d008      	beq.n	800b99c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	431a      	orrs	r2, r3
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	f7ff fd58 	bl	800b44c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f022 0208 	bic.w	r2, r2, #8
 800b9aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f240 523a 	movw	r2, #1338	; 0x53a
 800b9b4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b9c4:	68f8      	ldr	r0, [r7, #12]
 800b9c6:	f003 fa3f 	bl	800ee48 <HAL_SD_RxCpltCallback>
#endif
}
 800b9ca:	bf00      	nop
 800b9cc:	3710      	adds	r7, #16
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
	...

0800b9d4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b086      	sub	sp, #24
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9e0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f7fd f848 	bl	8008a78 <HAL_DMA_GetError>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b02      	cmp	r3, #2
 800b9ec:	d03e      	beq.n	800ba6c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9f4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9fc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d002      	beq.n	800ba0a <SD_DMAError+0x36>
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d12d      	bne.n	800ba66 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4a19      	ldr	r2, [pc, #100]	; (800ba74 <SD_DMAError+0xa0>)
 800ba10:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ba20:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800ba2e:	6978      	ldr	r0, [r7, #20]
 800ba30:	f7ff ff62 	bl	800b8f8 <HAL_SD_GetCardState>
 800ba34:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	2b06      	cmp	r3, #6
 800ba3a:	d002      	beq.n	800ba42 <SD_DMAError+0x6e>
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	2b05      	cmp	r3, #5
 800ba40:	d10a      	bne.n	800ba58 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4618      	mov	r0, r3
 800ba48:	f002 fd82 	bl	800e550 <SDMMC_CmdStopTransfer>
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba52:	431a      	orrs	r2, r3
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	2200      	movs	r2, #0
 800ba64:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800ba66:	6978      	ldr	r0, [r7, #20]
 800ba68:	f7ff fcf0 	bl	800b44c <HAL_SD_ErrorCallback>
#endif
  }
}
 800ba6c:	bf00      	nop
 800ba6e:	3718      	adds	r7, #24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	004005ff 	.word	0x004005ff

0800ba78 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba84:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f240 523a 	movw	r2, #1338	; 0x53a
 800ba8e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f7ff ff31 	bl	800b8f8 <HAL_SD_GetCardState>
 800ba96:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2200      	movs	r2, #0
 800baa4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	2b06      	cmp	r3, #6
 800baaa:	d002      	beq.n	800bab2 <SD_DMATxAbort+0x3a>
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	2b05      	cmp	r3, #5
 800bab0:	d10a      	bne.n	800bac8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4618      	mov	r0, r3
 800bab8:	f002 fd4a 	bl	800e550 <SDMMC_CmdStopTransfer>
 800babc:	4602      	mov	r2, r0
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bac2:	431a      	orrs	r2, r3
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d103      	bne.n	800bad8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800bad0:	68f8      	ldr	r0, [r7, #12]
 800bad2:	f003 f9a5 	bl	800ee20 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800bad6:	e002      	b.n	800bade <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	f7ff fcb7 	bl	800b44c <HAL_SD_ErrorCallback>
}
 800bade:	bf00      	nop
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b084      	sub	sp, #16
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f240 523a 	movw	r2, #1338	; 0x53a
 800bafc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f7ff fefa 	bl	800b8f8 <HAL_SD_GetCardState>
 800bb04:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2201      	movs	r2, #1
 800bb0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2200      	movs	r2, #0
 800bb12:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	2b06      	cmp	r3, #6
 800bb18:	d002      	beq.n	800bb20 <SD_DMARxAbort+0x3a>
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	2b05      	cmp	r3, #5
 800bb1e:	d10a      	bne.n	800bb36 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4618      	mov	r0, r3
 800bb26:	f002 fd13 	bl	800e550 <SDMMC_CmdStopTransfer>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb30:	431a      	orrs	r2, r3
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d103      	bne.n	800bb46 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f003 f96e 	bl	800ee20 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800bb44:	e002      	b.n	800bb4c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800bb46:	68f8      	ldr	r0, [r7, #12]
 800bb48:	f7ff fc80 	bl	800b44c <HAL_SD_ErrorCallback>
}
 800bb4c:	bf00      	nop
 800bb4e:	3710      	adds	r7, #16
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bb54:	b5b0      	push	{r4, r5, r7, lr}
 800bb56:	b094      	sub	sp, #80	; 0x50
 800bb58:	af04      	add	r7, sp, #16
 800bb5a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4618      	mov	r0, r3
 800bb66:	f002 fbc5 	bl	800e2f4 <SDIO_GetPowerState>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d102      	bne.n	800bb76 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bb70:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800bb74:	e0b7      	b.n	800bce6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb7a:	2b03      	cmp	r3, #3
 800bb7c:	d02f      	beq.n	800bbde <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4618      	mov	r0, r3
 800bb84:	f002 fdee 	bl	800e764 <SDMMC_CmdSendCID>
 800bb88:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d001      	beq.n	800bb94 <SD_InitCard+0x40>
    {
      return errorstate;
 800bb90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb92:	e0a8      	b.n	800bce6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2100      	movs	r1, #0
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f002 fbef 	bl	800e37e <SDIO_GetResponse>
 800bba0:	4602      	mov	r2, r0
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	2104      	movs	r1, #4
 800bbac:	4618      	mov	r0, r3
 800bbae:	f002 fbe6 	bl	800e37e <SDIO_GetResponse>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2108      	movs	r1, #8
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f002 fbdd 	bl	800e37e <SDIO_GetResponse>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	210c      	movs	r1, #12
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f002 fbd4 	bl	800e37e <SDIO_GetResponse>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbe2:	2b03      	cmp	r3, #3
 800bbe4:	d00d      	beq.n	800bc02 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f107 020e 	add.w	r2, r7, #14
 800bbee:	4611      	mov	r1, r2
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f002 fdf4 	bl	800e7de <SDMMC_CmdSetRelAdd>
 800bbf6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bbf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d001      	beq.n	800bc02 <SD_InitCard+0xae>
    {
      return errorstate;
 800bbfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc00:	e071      	b.n	800bce6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc06:	2b03      	cmp	r3, #3
 800bc08:	d036      	beq.n	800bc78 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800bc0a:	89fb      	ldrh	r3, [r7, #14]
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc1a:	041b      	lsls	r3, r3, #16
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	4610      	mov	r0, r2
 800bc20:	f002 fdbe 	bl	800e7a0 <SDMMC_CmdSendCSD>
 800bc24:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d001      	beq.n	800bc30 <SD_InitCard+0xdc>
    {
      return errorstate;
 800bc2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc2e:	e05a      	b.n	800bce6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2100      	movs	r1, #0
 800bc36:	4618      	mov	r0, r3
 800bc38:	f002 fba1 	bl	800e37e <SDIO_GetResponse>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	2104      	movs	r1, #4
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f002 fb98 	bl	800e37e <SDIO_GetResponse>
 800bc4e:	4602      	mov	r2, r0
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2108      	movs	r1, #8
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f002 fb8f 	bl	800e37e <SDIO_GetResponse>
 800bc60:	4602      	mov	r2, r0
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	210c      	movs	r1, #12
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f002 fb86 	bl	800e37e <SDIO_GetResponse>
 800bc72:	4602      	mov	r2, r0
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2104      	movs	r1, #4
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f002 fb7d 	bl	800e37e <SDIO_GetResponse>
 800bc84:	4603      	mov	r3, r0
 800bc86:	0d1a      	lsrs	r2, r3, #20
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bc8c:	f107 0310 	add.w	r3, r7, #16
 800bc90:	4619      	mov	r1, r3
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f7ff fbe4 	bl	800b460 <HAL_SD_GetCardCSD>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d002      	beq.n	800bca4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bc9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bca2:	e020      	b.n	800bce6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6819      	ldr	r1, [r3, #0]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcac:	041b      	lsls	r3, r3, #16
 800bcae:	f04f 0400 	mov.w	r4, #0
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	4623      	mov	r3, r4
 800bcb6:	4608      	mov	r0, r1
 800bcb8:	f002 fc6c 	bl	800e594 <SDMMC_CmdSelDesel>
 800bcbc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800bcbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d001      	beq.n	800bcc8 <SD_InitCard+0x174>
  {
    return errorstate;
 800bcc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcc6:	e00e      	b.n	800bce6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681d      	ldr	r5, [r3, #0]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	466c      	mov	r4, sp
 800bcd0:	f103 0210 	add.w	r2, r3, #16
 800bcd4:	ca07      	ldmia	r2, {r0, r1, r2}
 800bcd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bcda:	3304      	adds	r3, #4
 800bcdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bcde:	4628      	mov	r0, r5
 800bce0:	f002 fab0 	bl	800e244 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3740      	adds	r7, #64	; 0x40
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800bcf0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b086      	sub	sp, #24
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	617b      	str	r3, [r7, #20]
 800bd00:	2300      	movs	r3, #0
 800bd02:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f002 fc66 	bl	800e5da <SDMMC_CmdGoIdleState>
 800bd0e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d001      	beq.n	800bd1a <SD_PowerON+0x2a>
  {
    return errorstate;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	e072      	b.n	800be00 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f002 fc79 	bl	800e616 <SDMMC_CmdOperCond>
 800bd24:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00d      	beq.n	800bd48 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4618      	mov	r0, r3
 800bd38:	f002 fc4f 	bl	800e5da <SDMMC_CmdGoIdleState>
 800bd3c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d004      	beq.n	800bd4e <SD_PowerON+0x5e>
    {
      return errorstate;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	e05b      	b.n	800be00 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d137      	bne.n	800bdc6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	2100      	movs	r1, #0
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f002 fc79 	bl	800e654 <SDMMC_CmdAppCommand>
 800bd62:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d02d      	beq.n	800bdc6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bd6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bd6e:	e047      	b.n	800be00 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2100      	movs	r1, #0
 800bd76:	4618      	mov	r0, r3
 800bd78:	f002 fc6c 	bl	800e654 <SDMMC_CmdAppCommand>
 800bd7c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d001      	beq.n	800bd88 <SD_PowerON+0x98>
    {
      return errorstate;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	e03b      	b.n	800be00 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	491e      	ldr	r1, [pc, #120]	; (800be08 <SD_PowerON+0x118>)
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f002 fc82 	bl	800e698 <SDMMC_CmdAppOperCommand>
 800bd94:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d002      	beq.n	800bda2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bd9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bda0:	e02e      	b.n	800be00 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2100      	movs	r1, #0
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f002 fae8 	bl	800e37e <SDIO_GetResponse>
 800bdae:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	0fdb      	lsrs	r3, r3, #31
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d101      	bne.n	800bdbc <SD_PowerON+0xcc>
 800bdb8:	2301      	movs	r3, #1
 800bdba:	e000      	b.n	800bdbe <SD_PowerON+0xce>
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	613b      	str	r3, [r7, #16]

    count++;
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d802      	bhi.n	800bdd6 <SD_PowerON+0xe6>
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d0cc      	beq.n	800bd70 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d902      	bls.n	800bde6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800bde0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bde4:	e00c      	b.n	800be00 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d003      	beq.n	800bdf8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	645a      	str	r2, [r3, #68]	; 0x44
 800bdf6:	e002      	b.n	800bdfe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800bdfe:	2300      	movs	r3, #0
}
 800be00:	4618      	mov	r0, r3
 800be02:	3718      	adds	r7, #24
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}
 800be08:	c1100000 	.word	0xc1100000

0800be0c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d102      	bne.n	800be22 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800be1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800be20:	e018      	b.n	800be54 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be2a:	041b      	lsls	r3, r3, #16
 800be2c:	4619      	mov	r1, r3
 800be2e:	4610      	mov	r0, r2
 800be30:	f002 fcf6 	bl	800e820 <SDMMC_CmdSendStatus>
 800be34:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d001      	beq.n	800be40 <SD_SendStatus+0x34>
  {
    return errorstate;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	e009      	b.n	800be54 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2100      	movs	r1, #0
 800be46:	4618      	mov	r0, r3
 800be48:	f002 fa99 	bl	800e37e <SDIO_GetResponse>
 800be4c:	4602      	mov	r2, r0
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800be52:	2300      	movs	r3, #0
}
 800be54:	4618      	mov	r0, r3
 800be56:	3710      	adds	r7, #16
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b086      	sub	sp, #24
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800be64:	2300      	movs	r3, #0
 800be66:	60fb      	str	r3, [r7, #12]
 800be68:	2300      	movs	r3, #0
 800be6a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2100      	movs	r1, #0
 800be72:	4618      	mov	r0, r3
 800be74:	f002 fa83 	bl	800e37e <SDIO_GetResponse>
 800be78:	4603      	mov	r3, r0
 800be7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be82:	d102      	bne.n	800be8a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800be84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be88:	e02f      	b.n	800beea <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800be8a:	f107 030c 	add.w	r3, r7, #12
 800be8e:	4619      	mov	r1, r3
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 f879 	bl	800bf88 <SD_FindSCR>
 800be96:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d001      	beq.n	800bea2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	e023      	b.n	800beea <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d01c      	beq.n	800bee6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beb4:	041b      	lsls	r3, r3, #16
 800beb6:	4619      	mov	r1, r3
 800beb8:	4610      	mov	r0, r2
 800beba:	f002 fbcb 	bl	800e654 <SDMMC_CmdAppCommand>
 800bebe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d001      	beq.n	800beca <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	e00f      	b.n	800beea <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2102      	movs	r1, #2
 800bed0:	4618      	mov	r0, r3
 800bed2:	f002 fc04 	bl	800e6de <SDMMC_CmdBusWidth>
 800bed6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d001      	beq.n	800bee2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	e003      	b.n	800beea <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bee2:	2300      	movs	r3, #0
 800bee4:	e001      	b.n	800beea <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bee6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800beea:	4618      	mov	r0, r3
 800beec:	3718      	adds	r7, #24
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}

0800bef2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800bef2:	b580      	push	{r7, lr}
 800bef4:	b086      	sub	sp, #24
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800befa:	2300      	movs	r3, #0
 800befc:	60fb      	str	r3, [r7, #12]
 800befe:	2300      	movs	r3, #0
 800bf00:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2100      	movs	r1, #0
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f002 fa38 	bl	800e37e <SDIO_GetResponse>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf18:	d102      	bne.n	800bf20 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bf1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bf1e:	e02f      	b.n	800bf80 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bf20:	f107 030c 	add.w	r3, r7, #12
 800bf24:	4619      	mov	r1, r3
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 f82e 	bl	800bf88 <SD_FindSCR>
 800bf2c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d001      	beq.n	800bf38 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	e023      	b.n	800bf80 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d01c      	beq.n	800bf7c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681a      	ldr	r2, [r3, #0]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf4a:	041b      	lsls	r3, r3, #16
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	4610      	mov	r0, r2
 800bf50:	f002 fb80 	bl	800e654 <SDMMC_CmdAppCommand>
 800bf54:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d001      	beq.n	800bf60 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	e00f      	b.n	800bf80 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	2100      	movs	r1, #0
 800bf66:	4618      	mov	r0, r3
 800bf68:	f002 fbb9 	bl	800e6de <SDMMC_CmdBusWidth>
 800bf6c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d001      	beq.n	800bf78 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	e003      	b.n	800bf80 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	e001      	b.n	800bf80 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bf7c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3718      	adds	r7, #24
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bf88:	b590      	push	{r4, r7, lr}
 800bf8a:	b08f      	sub	sp, #60	; 0x3c
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bf92:	f7fb fd7b 	bl	8007a8c <HAL_GetTick>
 800bf96:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	60bb      	str	r3, [r7, #8]
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2108      	movs	r1, #8
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f002 fa24 	bl	800e3fc <SDMMC_CmdBlockLength>
 800bfb4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d001      	beq.n	800bfc0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800bfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfbe:	e0a9      	b.n	800c114 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681a      	ldr	r2, [r3, #0]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfc8:	041b      	lsls	r3, r3, #16
 800bfca:	4619      	mov	r1, r3
 800bfcc:	4610      	mov	r0, r2
 800bfce:	f002 fb41 	bl	800e654 <SDMMC_CmdAppCommand>
 800bfd2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d001      	beq.n	800bfde <SD_FindSCR+0x56>
  {
    return errorstate;
 800bfda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfdc:	e09a      	b.n	800c114 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bfde:	f04f 33ff 	mov.w	r3, #4294967295
 800bfe2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800bfe4:	2308      	movs	r3, #8
 800bfe6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800bfe8:	2330      	movs	r3, #48	; 0x30
 800bfea:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800bfec:	2302      	movs	r3, #2
 800bfee:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800bff0:	2300      	movs	r3, #0
 800bff2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800bff4:	2301      	movs	r3, #1
 800bff6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f107 0210 	add.w	r2, r7, #16
 800c000:	4611      	mov	r1, r2
 800c002:	4618      	mov	r0, r3
 800c004:	f002 f9ce 	bl	800e3a4 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4618      	mov	r0, r3
 800c00e:	f002 fb88 	bl	800e722 <SDMMC_CmdSendSCR>
 800c012:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c016:	2b00      	cmp	r3, #0
 800c018:	d022      	beq.n	800c060 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800c01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01c:	e07a      	b.n	800c114 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d00e      	beq.n	800c04a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6819      	ldr	r1, [r3, #0]
 800c030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c032:	009b      	lsls	r3, r3, #2
 800c034:	f107 0208 	add.w	r2, r7, #8
 800c038:	18d4      	adds	r4, r2, r3
 800c03a:	4608      	mov	r0, r1
 800c03c:	f002 f92d 	bl	800e29a <SDIO_ReadFIFO>
 800c040:	4603      	mov	r3, r0
 800c042:	6023      	str	r3, [r4, #0]
      index++;
 800c044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c046:	3301      	adds	r3, #1
 800c048:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c04a:	f7fb fd1f 	bl	8007a8c <HAL_GetTick>
 800c04e:	4602      	mov	r2, r0
 800c050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c052:	1ad3      	subs	r3, r2, r3
 800c054:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c058:	d102      	bne.n	800c060 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c05a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c05e:	e059      	b.n	800c114 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c066:	f240 432a 	movw	r3, #1066	; 0x42a
 800c06a:	4013      	ands	r3, r2
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d0d6      	beq.n	800c01e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c076:	f003 0308 	and.w	r3, r3, #8
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d005      	beq.n	800c08a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	2208      	movs	r2, #8
 800c084:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c086:	2308      	movs	r3, #8
 800c088:	e044      	b.n	800c114 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c090:	f003 0302 	and.w	r3, r3, #2
 800c094:	2b00      	cmp	r3, #0
 800c096:	d005      	beq.n	800c0a4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	2202      	movs	r2, #2
 800c09e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c0a0:	2302      	movs	r3, #2
 800c0a2:	e037      	b.n	800c114 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0aa:	f003 0320 	and.w	r3, r3, #32
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d005      	beq.n	800c0be <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2220      	movs	r2, #32
 800c0b8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c0ba:	2320      	movs	r3, #32
 800c0bc:	e02a      	b.n	800c114 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f240 523a 	movw	r2, #1338	; 0x53a
 800c0c6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	061a      	lsls	r2, r3, #24
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	021b      	lsls	r3, r3, #8
 800c0d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c0d4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	0a1b      	lsrs	r3, r3, #8
 800c0da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c0de:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	0e1b      	lsrs	r3, r3, #24
 800c0e4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e8:	601a      	str	r2, [r3, #0]
    scr++;
 800c0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ec:	3304      	adds	r3, #4
 800c0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	061a      	lsls	r2, r3, #24
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	021b      	lsls	r3, r3, #8
 800c0f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c0fc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	0a1b      	lsrs	r3, r3, #8
 800c102:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c106:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	0e1b      	lsrs	r3, r3, #24
 800c10c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c110:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c112:	2300      	movs	r3, #0
}
 800c114:	4618      	mov	r0, r3
 800c116:	373c      	adds	r7, #60	; 0x3c
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd90      	pop	{r4, r7, pc}

0800c11c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b086      	sub	sp, #24
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c128:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c12e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d03f      	beq.n	800c1b6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800c136:	2300      	movs	r3, #0
 800c138:	617b      	str	r3, [r7, #20]
 800c13a:	e033      	b.n	800c1a4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4618      	mov	r0, r3
 800c142:	f002 f8aa 	bl	800e29a <SDIO_ReadFIFO>
 800c146:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	b2da      	uxtb	r2, r3
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	3301      	adds	r3, #1
 800c154:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	3b01      	subs	r3, #1
 800c15a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	0a1b      	lsrs	r3, r3, #8
 800c160:	b2da      	uxtb	r2, r3
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	3301      	adds	r3, #1
 800c16a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	3b01      	subs	r3, #1
 800c170:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	0c1b      	lsrs	r3, r3, #16
 800c176:	b2da      	uxtb	r2, r3
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	3301      	adds	r3, #1
 800c180:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	3b01      	subs	r3, #1
 800c186:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	0e1b      	lsrs	r3, r3, #24
 800c18c:	b2da      	uxtb	r2, r3
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	3301      	adds	r3, #1
 800c196:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	3b01      	subs	r3, #1
 800c19c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	617b      	str	r3, [r7, #20]
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	2b07      	cmp	r3, #7
 800c1a8:	d9c8      	bls.n	800c13c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	68fa      	ldr	r2, [r7, #12]
 800c1ae:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	693a      	ldr	r2, [r7, #16]
 800c1b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800c1b6:	bf00      	nop
 800c1b8:	3718      	adds	r7, #24
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}

0800c1be <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c1be:	b580      	push	{r7, lr}
 800c1c0:	b086      	sub	sp, #24
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6a1b      	ldr	r3, [r3, #32]
 800c1ca:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d043      	beq.n	800c260 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800c1d8:	2300      	movs	r3, #0
 800c1da:	617b      	str	r3, [r7, #20]
 800c1dc:	e037      	b.n	800c24e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	3b01      	subs	r3, #1
 800c1ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	021a      	lsls	r2, r3, #8
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	3301      	adds	r3, #1
 800c200:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	3b01      	subs	r3, #1
 800c206:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	041a      	lsls	r2, r3, #16
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	4313      	orrs	r3, r2
 800c212:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	3301      	adds	r3, #1
 800c218:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	3b01      	subs	r3, #1
 800c21e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	061a      	lsls	r2, r3, #24
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	4313      	orrs	r3, r2
 800c22a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	3301      	adds	r3, #1
 800c230:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	3b01      	subs	r3, #1
 800c236:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f107 0208 	add.w	r2, r7, #8
 800c240:	4611      	mov	r1, r2
 800c242:	4618      	mov	r0, r3
 800c244:	f002 f836 	bl	800e2b4 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	3301      	adds	r3, #1
 800c24c:	617b      	str	r3, [r7, #20]
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	2b07      	cmp	r3, #7
 800c252:	d9c4      	bls.n	800c1de <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	68fa      	ldr	r2, [r7, #12]
 800c258:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	693a      	ldr	r2, [r7, #16]
 800c25e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800c260:	bf00      	nop
 800c262:	3718      	adds	r7, #24
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d101      	bne.n	800c27a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c276:	2301      	movs	r3, #1
 800c278:	e056      	b.n	800c328 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2200      	movs	r2, #0
 800c27e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c286:	b2db      	uxtb	r3, r3
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d106      	bne.n	800c29a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2200      	movs	r2, #0
 800c290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f7f9 fccd 	bl	8005c34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2202      	movs	r2, #2
 800c29e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c2b0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	685a      	ldr	r2, [r3, #4]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	431a      	orrs	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	431a      	orrs	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	691b      	ldr	r3, [r3, #16]
 800c2c6:	431a      	orrs	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	695b      	ldr	r3, [r3, #20]
 800c2cc:	431a      	orrs	r2, r3
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	699b      	ldr	r3, [r3, #24]
 800c2d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c2d6:	431a      	orrs	r2, r3
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	69db      	ldr	r3, [r3, #28]
 800c2dc:	431a      	orrs	r2, r3
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6a1b      	ldr	r3, [r3, #32]
 800c2e2:	ea42 0103 	orr.w	r1, r2, r3
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	430a      	orrs	r2, r1
 800c2f0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	699b      	ldr	r3, [r3, #24]
 800c2f6:	0c1b      	lsrs	r3, r3, #16
 800c2f8:	f003 0104 	and.w	r1, r3, #4
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	430a      	orrs	r2, r1
 800c306:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	69da      	ldr	r2, [r3, #28]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c316:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2200      	movs	r2, #0
 800c31c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2201      	movs	r2, #1
 800c322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c326:	2300      	movs	r3, #0
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3708      	adds	r7, #8
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b088      	sub	sp, #32
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	603b      	str	r3, [r7, #0]
 800c33c:	4613      	mov	r3, r2
 800c33e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c340:	2300      	movs	r3, #0
 800c342:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	d101      	bne.n	800c352 <HAL_SPI_Transmit+0x22>
 800c34e:	2302      	movs	r3, #2
 800c350:	e11e      	b.n	800c590 <HAL_SPI_Transmit+0x260>
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2201      	movs	r2, #1
 800c356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c35a:	f7fb fb97 	bl	8007a8c <HAL_GetTick>
 800c35e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c360:	88fb      	ldrh	r3, [r7, #6]
 800c362:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d002      	beq.n	800c376 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c370:	2302      	movs	r3, #2
 800c372:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c374:	e103      	b.n	800c57e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d002      	beq.n	800c382 <HAL_SPI_Transmit+0x52>
 800c37c:	88fb      	ldrh	r3, [r7, #6]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d102      	bne.n	800c388 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c382:	2301      	movs	r3, #1
 800c384:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c386:	e0fa      	b.n	800c57e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2203      	movs	r2, #3
 800c38c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2200      	movs	r2, #0
 800c394:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	68ba      	ldr	r2, [r7, #8]
 800c39a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	88fa      	ldrh	r2, [r7, #6]
 800c3a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	88fa      	ldrh	r2, [r7, #6]
 800c3a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3ce:	d107      	bne.n	800c3e0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c3de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3ea:	2b40      	cmp	r3, #64	; 0x40
 800c3ec:	d007      	beq.n	800c3fe <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c3fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	68db      	ldr	r3, [r3, #12]
 800c402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c406:	d14b      	bne.n	800c4a0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d002      	beq.n	800c416 <HAL_SPI_Transmit+0xe6>
 800c410:	8afb      	ldrh	r3, [r7, #22]
 800c412:	2b01      	cmp	r3, #1
 800c414:	d13e      	bne.n	800c494 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c41a:	881a      	ldrh	r2, [r3, #0]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c426:	1c9a      	adds	r2, r3, #2
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c430:	b29b      	uxth	r3, r3
 800c432:	3b01      	subs	r3, #1
 800c434:	b29a      	uxth	r2, r3
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c43a:	e02b      	b.n	800c494 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	f003 0302 	and.w	r3, r3, #2
 800c446:	2b02      	cmp	r3, #2
 800c448:	d112      	bne.n	800c470 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c44e:	881a      	ldrh	r2, [r3, #0]
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c45a:	1c9a      	adds	r2, r3, #2
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c464:	b29b      	uxth	r3, r3
 800c466:	3b01      	subs	r3, #1
 800c468:	b29a      	uxth	r2, r3
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	86da      	strh	r2, [r3, #54]	; 0x36
 800c46e:	e011      	b.n	800c494 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c470:	f7fb fb0c 	bl	8007a8c <HAL_GetTick>
 800c474:	4602      	mov	r2, r0
 800c476:	69bb      	ldr	r3, [r7, #24]
 800c478:	1ad3      	subs	r3, r2, r3
 800c47a:	683a      	ldr	r2, [r7, #0]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d803      	bhi.n	800c488 <HAL_SPI_Transmit+0x158>
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c486:	d102      	bne.n	800c48e <HAL_SPI_Transmit+0x15e>
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d102      	bne.n	800c494 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800c48e:	2303      	movs	r3, #3
 800c490:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c492:	e074      	b.n	800c57e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c498:	b29b      	uxth	r3, r3
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1ce      	bne.n	800c43c <HAL_SPI_Transmit+0x10c>
 800c49e:	e04c      	b.n	800c53a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d002      	beq.n	800c4ae <HAL_SPI_Transmit+0x17e>
 800c4a8:	8afb      	ldrh	r3, [r7, #22]
 800c4aa:	2b01      	cmp	r3, #1
 800c4ac:	d140      	bne.n	800c530 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	330c      	adds	r3, #12
 800c4b8:	7812      	ldrb	r2, [r2, #0]
 800c4ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4c0:	1c5a      	adds	r2, r3, #1
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	b29a      	uxth	r2, r3
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c4d4:	e02c      	b.n	800c530 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	f003 0302 	and.w	r3, r3, #2
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	d113      	bne.n	800c50c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	330c      	adds	r3, #12
 800c4ee:	7812      	ldrb	r2, [r2, #0]
 800c4f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4f6:	1c5a      	adds	r2, r3, #1
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c500:	b29b      	uxth	r3, r3
 800c502:	3b01      	subs	r3, #1
 800c504:	b29a      	uxth	r2, r3
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	86da      	strh	r2, [r3, #54]	; 0x36
 800c50a:	e011      	b.n	800c530 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c50c:	f7fb fabe 	bl	8007a8c <HAL_GetTick>
 800c510:	4602      	mov	r2, r0
 800c512:	69bb      	ldr	r3, [r7, #24]
 800c514:	1ad3      	subs	r3, r2, r3
 800c516:	683a      	ldr	r2, [r7, #0]
 800c518:	429a      	cmp	r2, r3
 800c51a:	d803      	bhi.n	800c524 <HAL_SPI_Transmit+0x1f4>
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c522:	d102      	bne.n	800c52a <HAL_SPI_Transmit+0x1fa>
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d102      	bne.n	800c530 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800c52a:	2303      	movs	r3, #3
 800c52c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c52e:	e026      	b.n	800c57e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c534:	b29b      	uxth	r3, r3
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1cd      	bne.n	800c4d6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c53a:	69ba      	ldr	r2, [r7, #24]
 800c53c:	6839      	ldr	r1, [r7, #0]
 800c53e:	68f8      	ldr	r0, [r7, #12]
 800c540:	f000 fba4 	bl	800cc8c <SPI_EndRxTxTransaction>
 800c544:	4603      	mov	r3, r0
 800c546:	2b00      	cmp	r3, #0
 800c548:	d002      	beq.n	800c550 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2220      	movs	r2, #32
 800c54e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	689b      	ldr	r3, [r3, #8]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d10a      	bne.n	800c56e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c558:	2300      	movs	r3, #0
 800c55a:	613b      	str	r3, [r7, #16]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	613b      	str	r3, [r7, #16]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	613b      	str	r3, [r7, #16]
 800c56c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c572:	2b00      	cmp	r3, #0
 800c574:	d002      	beq.n	800c57c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800c576:	2301      	movs	r3, #1
 800c578:	77fb      	strb	r3, [r7, #31]
 800c57a:	e000      	b.n	800c57e <HAL_SPI_Transmit+0x24e>
  }

error:
 800c57c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2201      	movs	r2, #1
 800c582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2200      	movs	r2, #0
 800c58a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c58e:	7ffb      	ldrb	r3, [r7, #31]
}
 800c590:	4618      	mov	r0, r3
 800c592:	3720      	adds	r7, #32
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b088      	sub	sp, #32
 800c59c:	af02      	add	r7, sp, #8
 800c59e:	60f8      	str	r0, [r7, #12]
 800c5a0:	60b9      	str	r1, [r7, #8]
 800c5a2:	603b      	str	r3, [r7, #0]
 800c5a4:	4613      	mov	r3, r2
 800c5a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c5b4:	d112      	bne.n	800c5dc <HAL_SPI_Receive+0x44>
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d10e      	bne.n	800c5dc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2204      	movs	r2, #4
 800c5c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c5c6:	88fa      	ldrh	r2, [r7, #6]
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	9300      	str	r3, [sp, #0]
 800c5cc:	4613      	mov	r3, r2
 800c5ce:	68ba      	ldr	r2, [r7, #8]
 800c5d0:	68b9      	ldr	r1, [r7, #8]
 800c5d2:	68f8      	ldr	r0, [r7, #12]
 800c5d4:	f000 f8e9 	bl	800c7aa <HAL_SPI_TransmitReceive>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	e0e2      	b.n	800c7a2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c5e2:	2b01      	cmp	r3, #1
 800c5e4:	d101      	bne.n	800c5ea <HAL_SPI_Receive+0x52>
 800c5e6:	2302      	movs	r3, #2
 800c5e8:	e0db      	b.n	800c7a2 <HAL_SPI_Receive+0x20a>
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c5f2:	f7fb fa4b 	bl	8007a8c <HAL_GetTick>
 800c5f6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	2b01      	cmp	r3, #1
 800c602:	d002      	beq.n	800c60a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800c604:	2302      	movs	r3, #2
 800c606:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c608:	e0c2      	b.n	800c790 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d002      	beq.n	800c616 <HAL_SPI_Receive+0x7e>
 800c610:	88fb      	ldrh	r3, [r7, #6]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d102      	bne.n	800c61c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c616:	2301      	movs	r3, #1
 800c618:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c61a:	e0b9      	b.n	800c790 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2204      	movs	r2, #4
 800c620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2200      	movs	r2, #0
 800c628:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	68ba      	ldr	r2, [r7, #8]
 800c62e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	88fa      	ldrh	r2, [r7, #6]
 800c634:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	88fa      	ldrh	r2, [r7, #6]
 800c63a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2200      	movs	r2, #0
 800c640:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2200      	movs	r2, #0
 800c646:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2200      	movs	r2, #0
 800c64c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	2200      	movs	r2, #0
 800c652:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2200      	movs	r2, #0
 800c658:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c662:	d107      	bne.n	800c674 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c672:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c67e:	2b40      	cmp	r3, #64	; 0x40
 800c680:	d007      	beq.n	800c692 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c690:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	68db      	ldr	r3, [r3, #12]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d162      	bne.n	800c760 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c69a:	e02e      	b.n	800c6fa <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	689b      	ldr	r3, [r3, #8]
 800c6a2:	f003 0301 	and.w	r3, r3, #1
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	d115      	bne.n	800c6d6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f103 020c 	add.w	r2, r3, #12
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b6:	7812      	ldrb	r2, [r2, #0]
 800c6b8:	b2d2      	uxtb	r2, r2
 800c6ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6c0:	1c5a      	adds	r2, r3, #1
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6ca:	b29b      	uxth	r3, r3
 800c6cc:	3b01      	subs	r3, #1
 800c6ce:	b29a      	uxth	r2, r3
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c6d4:	e011      	b.n	800c6fa <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c6d6:	f7fb f9d9 	bl	8007a8c <HAL_GetTick>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	1ad3      	subs	r3, r2, r3
 800c6e0:	683a      	ldr	r2, [r7, #0]
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d803      	bhi.n	800c6ee <HAL_SPI_Receive+0x156>
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ec:	d102      	bne.n	800c6f4 <HAL_SPI_Receive+0x15c>
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d102      	bne.n	800c6fa <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800c6f4:	2303      	movs	r3, #3
 800c6f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c6f8:	e04a      	b.n	800c790 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6fe:	b29b      	uxth	r3, r3
 800c700:	2b00      	cmp	r3, #0
 800c702:	d1cb      	bne.n	800c69c <HAL_SPI_Receive+0x104>
 800c704:	e031      	b.n	800c76a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	f003 0301 	and.w	r3, r3, #1
 800c710:	2b01      	cmp	r3, #1
 800c712:	d113      	bne.n	800c73c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	68da      	ldr	r2, [r3, #12]
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c71e:	b292      	uxth	r2, r2
 800c720:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c726:	1c9a      	adds	r2, r3, #2
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c730:	b29b      	uxth	r3, r3
 800c732:	3b01      	subs	r3, #1
 800c734:	b29a      	uxth	r2, r3
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c73a:	e011      	b.n	800c760 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c73c:	f7fb f9a6 	bl	8007a8c <HAL_GetTick>
 800c740:	4602      	mov	r2, r0
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	1ad3      	subs	r3, r2, r3
 800c746:	683a      	ldr	r2, [r7, #0]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d803      	bhi.n	800c754 <HAL_SPI_Receive+0x1bc>
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c752:	d102      	bne.n	800c75a <HAL_SPI_Receive+0x1c2>
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d102      	bne.n	800c760 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800c75a:	2303      	movs	r3, #3
 800c75c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c75e:	e017      	b.n	800c790 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c764:	b29b      	uxth	r3, r3
 800c766:	2b00      	cmp	r3, #0
 800c768:	d1cd      	bne.n	800c706 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c76a:	693a      	ldr	r2, [r7, #16]
 800c76c:	6839      	ldr	r1, [r7, #0]
 800c76e:	68f8      	ldr	r0, [r7, #12]
 800c770:	f000 fa27 	bl	800cbc2 <SPI_EndRxTransaction>
 800c774:	4603      	mov	r3, r0
 800c776:	2b00      	cmp	r3, #0
 800c778:	d002      	beq.n	800c780 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2220      	movs	r2, #32
 800c77e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c784:	2b00      	cmp	r3, #0
 800c786:	d002      	beq.n	800c78e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800c788:	2301      	movs	r3, #1
 800c78a:	75fb      	strb	r3, [r7, #23]
 800c78c:	e000      	b.n	800c790 <HAL_SPI_Receive+0x1f8>
  }

error :
 800c78e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2201      	movs	r2, #1
 800c794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2200      	movs	r2, #0
 800c79c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c7a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3718      	adds	r7, #24
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}

0800c7aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c7aa:	b580      	push	{r7, lr}
 800c7ac:	b08c      	sub	sp, #48	; 0x30
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	60f8      	str	r0, [r7, #12]
 800c7b2:	60b9      	str	r1, [r7, #8]
 800c7b4:	607a      	str	r2, [r7, #4]
 800c7b6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d101      	bne.n	800c7d0 <HAL_SPI_TransmitReceive+0x26>
 800c7cc:	2302      	movs	r3, #2
 800c7ce:	e18a      	b.n	800cae6 <HAL_SPI_TransmitReceive+0x33c>
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c7d8:	f7fb f958 	bl	8007a8c <HAL_GetTick>
 800c7dc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c7e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c7ee:	887b      	ldrh	r3, [r7, #2]
 800c7f0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c7f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c7f6:	2b01      	cmp	r3, #1
 800c7f8:	d00f      	beq.n	800c81a <HAL_SPI_TransmitReceive+0x70>
 800c7fa:	69fb      	ldr	r3, [r7, #28]
 800c7fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c800:	d107      	bne.n	800c812 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	689b      	ldr	r3, [r3, #8]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d103      	bne.n	800c812 <HAL_SPI_TransmitReceive+0x68>
 800c80a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c80e:	2b04      	cmp	r3, #4
 800c810:	d003      	beq.n	800c81a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c812:	2302      	movs	r3, #2
 800c814:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c818:	e15b      	b.n	800cad2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d005      	beq.n	800c82c <HAL_SPI_TransmitReceive+0x82>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d002      	beq.n	800c82c <HAL_SPI_TransmitReceive+0x82>
 800c826:	887b      	ldrh	r3, [r7, #2]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d103      	bne.n	800c834 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c82c:	2301      	movs	r3, #1
 800c82e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c832:	e14e      	b.n	800cad2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	2b04      	cmp	r3, #4
 800c83e:	d003      	beq.n	800c848 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2205      	movs	r2, #5
 800c844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2200      	movs	r2, #0
 800c84c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	687a      	ldr	r2, [r7, #4]
 800c852:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	887a      	ldrh	r2, [r7, #2]
 800c858:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	887a      	ldrh	r2, [r7, #2]
 800c85e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	68ba      	ldr	r2, [r7, #8]
 800c864:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	887a      	ldrh	r2, [r7, #2]
 800c86a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	887a      	ldrh	r2, [r7, #2]
 800c870:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2200      	movs	r2, #0
 800c876:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2200      	movs	r2, #0
 800c87c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c888:	2b40      	cmp	r3, #64	; 0x40
 800c88a:	d007      	beq.n	800c89c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c89a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	68db      	ldr	r3, [r3, #12]
 800c8a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c8a4:	d178      	bne.n	800c998 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d002      	beq.n	800c8b4 <HAL_SPI_TransmitReceive+0x10a>
 800c8ae:	8b7b      	ldrh	r3, [r7, #26]
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d166      	bne.n	800c982 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8b8:	881a      	ldrh	r2, [r3, #0]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8c4:	1c9a      	adds	r2, r3, #2
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	3b01      	subs	r3, #1
 800c8d2:	b29a      	uxth	r2, r3
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c8d8:	e053      	b.n	800c982 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	689b      	ldr	r3, [r3, #8]
 800c8e0:	f003 0302 	and.w	r3, r3, #2
 800c8e4:	2b02      	cmp	r3, #2
 800c8e6:	d11b      	bne.n	800c920 <HAL_SPI_TransmitReceive+0x176>
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c8ec:	b29b      	uxth	r3, r3
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d016      	beq.n	800c920 <HAL_SPI_TransmitReceive+0x176>
 800c8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d113      	bne.n	800c920 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8fc:	881a      	ldrh	r2, [r3, #0]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c908:	1c9a      	adds	r2, r3, #2
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c912:	b29b      	uxth	r3, r3
 800c914:	3b01      	subs	r3, #1
 800c916:	b29a      	uxth	r2, r3
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c91c:	2300      	movs	r3, #0
 800c91e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	689b      	ldr	r3, [r3, #8]
 800c926:	f003 0301 	and.w	r3, r3, #1
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d119      	bne.n	800c962 <HAL_SPI_TransmitReceive+0x1b8>
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c932:	b29b      	uxth	r3, r3
 800c934:	2b00      	cmp	r3, #0
 800c936:	d014      	beq.n	800c962 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	68da      	ldr	r2, [r3, #12]
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c942:	b292      	uxth	r2, r2
 800c944:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c94a:	1c9a      	adds	r2, r3, #2
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c954:	b29b      	uxth	r3, r3
 800c956:	3b01      	subs	r3, #1
 800c958:	b29a      	uxth	r2, r3
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c95e:	2301      	movs	r3, #1
 800c960:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c962:	f7fb f893 	bl	8007a8c <HAL_GetTick>
 800c966:	4602      	mov	r2, r0
 800c968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96a:	1ad3      	subs	r3, r2, r3
 800c96c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c96e:	429a      	cmp	r2, r3
 800c970:	d807      	bhi.n	800c982 <HAL_SPI_TransmitReceive+0x1d8>
 800c972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c974:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c978:	d003      	beq.n	800c982 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c97a:	2303      	movs	r3, #3
 800c97c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c980:	e0a7      	b.n	800cad2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c986:	b29b      	uxth	r3, r3
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d1a6      	bne.n	800c8da <HAL_SPI_TransmitReceive+0x130>
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c990:	b29b      	uxth	r3, r3
 800c992:	2b00      	cmp	r3, #0
 800c994:	d1a1      	bne.n	800c8da <HAL_SPI_TransmitReceive+0x130>
 800c996:	e07c      	b.n	800ca92 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d002      	beq.n	800c9a6 <HAL_SPI_TransmitReceive+0x1fc>
 800c9a0:	8b7b      	ldrh	r3, [r7, #26]
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d16b      	bne.n	800ca7e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	330c      	adds	r3, #12
 800c9b0:	7812      	ldrb	r2, [r2, #0]
 800c9b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9b8:	1c5a      	adds	r2, r3, #1
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	3b01      	subs	r3, #1
 800c9c6:	b29a      	uxth	r2, r3
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c9cc:	e057      	b.n	800ca7e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	f003 0302 	and.w	r3, r3, #2
 800c9d8:	2b02      	cmp	r3, #2
 800c9da:	d11c      	bne.n	800ca16 <HAL_SPI_TransmitReceive+0x26c>
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c9e0:	b29b      	uxth	r3, r3
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d017      	beq.n	800ca16 <HAL_SPI_TransmitReceive+0x26c>
 800c9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d114      	bne.n	800ca16 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	330c      	adds	r3, #12
 800c9f6:	7812      	ldrb	r2, [r2, #0]
 800c9f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9fe:	1c5a      	adds	r2, r3, #1
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ca08:	b29b      	uxth	r3, r3
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	b29a      	uxth	r2, r3
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ca12:	2300      	movs	r3, #0
 800ca14:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	f003 0301 	and.w	r3, r3, #1
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d119      	bne.n	800ca58 <HAL_SPI_TransmitReceive+0x2ae>
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca28:	b29b      	uxth	r3, r3
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d014      	beq.n	800ca58 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	68da      	ldr	r2, [r3, #12]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca38:	b2d2      	uxtb	r2, r2
 800ca3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca40:	1c5a      	adds	r2, r3, #1
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca4a:	b29b      	uxth	r3, r3
 800ca4c:	3b01      	subs	r3, #1
 800ca4e:	b29a      	uxth	r2, r3
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ca54:	2301      	movs	r3, #1
 800ca56:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ca58:	f7fb f818 	bl	8007a8c <HAL_GetTick>
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca60:	1ad3      	subs	r3, r2, r3
 800ca62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d803      	bhi.n	800ca70 <HAL_SPI_TransmitReceive+0x2c6>
 800ca68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca6e:	d102      	bne.n	800ca76 <HAL_SPI_TransmitReceive+0x2cc>
 800ca70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d103      	bne.n	800ca7e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ca76:	2303      	movs	r3, #3
 800ca78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ca7c:	e029      	b.n	800cad2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d1a2      	bne.n	800c9ce <HAL_SPI_TransmitReceive+0x224>
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d19d      	bne.n	800c9ce <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ca92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca96:	68f8      	ldr	r0, [r7, #12]
 800ca98:	f000 f8f8 	bl	800cc8c <SPI_EndRxTxTransaction>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d006      	beq.n	800cab0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800caa2:	2301      	movs	r3, #1
 800caa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2220      	movs	r2, #32
 800caac:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800caae:	e010      	b.n	800cad2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	689b      	ldr	r3, [r3, #8]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d10b      	bne.n	800cad0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cab8:	2300      	movs	r3, #0
 800caba:	617b      	str	r3, [r7, #20]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	68db      	ldr	r3, [r3, #12]
 800cac2:	617b      	str	r3, [r7, #20]
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	689b      	ldr	r3, [r3, #8]
 800caca:	617b      	str	r3, [r7, #20]
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	e000      	b.n	800cad2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800cad0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2201      	movs	r2, #1
 800cad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	2200      	movs	r2, #0
 800cade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cae2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3730      	adds	r7, #48	; 0x30
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}

0800caee <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800caee:	b580      	push	{r7, lr}
 800caf0:	b084      	sub	sp, #16
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	60f8      	str	r0, [r7, #12]
 800caf6:	60b9      	str	r1, [r7, #8]
 800caf8:	603b      	str	r3, [r7, #0]
 800cafa:	4613      	mov	r3, r2
 800cafc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cafe:	e04c      	b.n	800cb9a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb06:	d048      	beq.n	800cb9a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800cb08:	f7fa ffc0 	bl	8007a8c <HAL_GetTick>
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	69bb      	ldr	r3, [r7, #24]
 800cb10:	1ad3      	subs	r3, r2, r3
 800cb12:	683a      	ldr	r2, [r7, #0]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d902      	bls.n	800cb1e <SPI_WaitFlagStateUntilTimeout+0x30>
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d13d      	bne.n	800cb9a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	685a      	ldr	r2, [r3, #4]
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cb2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cb36:	d111      	bne.n	800cb5c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	689b      	ldr	r3, [r3, #8]
 800cb3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb40:	d004      	beq.n	800cb4c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	689b      	ldr	r3, [r3, #8]
 800cb46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb4a:	d107      	bne.n	800cb5c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	681a      	ldr	r2, [r3, #0]
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb64:	d10f      	bne.n	800cb86 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cb74:	601a      	str	r2, [r3, #0]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	681a      	ldr	r2, [r3, #0]
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cb84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2201      	movs	r2, #1
 800cb8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2200      	movs	r2, #0
 800cb92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800cb96:	2303      	movs	r3, #3
 800cb98:	e00f      	b.n	800cbba <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	689a      	ldr	r2, [r3, #8]
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	4013      	ands	r3, r2
 800cba4:	68ba      	ldr	r2, [r7, #8]
 800cba6:	429a      	cmp	r2, r3
 800cba8:	bf0c      	ite	eq
 800cbaa:	2301      	moveq	r3, #1
 800cbac:	2300      	movne	r3, #0
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	79fb      	ldrb	r3, [r7, #7]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d1a3      	bne.n	800cb00 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800cbb8:	2300      	movs	r3, #0
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3710      	adds	r7, #16
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}

0800cbc2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b086      	sub	sp, #24
 800cbc6:	af02      	add	r7, sp, #8
 800cbc8:	60f8      	str	r0, [r7, #12]
 800cbca:	60b9      	str	r1, [r7, #8]
 800cbcc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cbd6:	d111      	bne.n	800cbfc <SPI_EndRxTransaction+0x3a>
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cbe0:	d004      	beq.n	800cbec <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	689b      	ldr	r3, [r3, #8]
 800cbe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbea:	d107      	bne.n	800cbfc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cbfa:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cc04:	d12a      	bne.n	800cc5c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	689b      	ldr	r3, [r3, #8]
 800cc0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc0e:	d012      	beq.n	800cc36 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	9300      	str	r3, [sp, #0]
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	2200      	movs	r2, #0
 800cc18:	2180      	movs	r1, #128	; 0x80
 800cc1a:	68f8      	ldr	r0, [r7, #12]
 800cc1c:	f7ff ff67 	bl	800caee <SPI_WaitFlagStateUntilTimeout>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d02d      	beq.n	800cc82 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc2a:	f043 0220 	orr.w	r2, r3, #32
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800cc32:	2303      	movs	r3, #3
 800cc34:	e026      	b.n	800cc84 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	9300      	str	r3, [sp, #0]
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	2101      	movs	r1, #1
 800cc40:	68f8      	ldr	r0, [r7, #12]
 800cc42:	f7ff ff54 	bl	800caee <SPI_WaitFlagStateUntilTimeout>
 800cc46:	4603      	mov	r3, r0
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d01a      	beq.n	800cc82 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc50:	f043 0220 	orr.w	r2, r3, #32
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800cc58:	2303      	movs	r3, #3
 800cc5a:	e013      	b.n	800cc84 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	9300      	str	r3, [sp, #0]
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	2200      	movs	r2, #0
 800cc64:	2101      	movs	r1, #1
 800cc66:	68f8      	ldr	r0, [r7, #12]
 800cc68:	f7ff ff41 	bl	800caee <SPI_WaitFlagStateUntilTimeout>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d007      	beq.n	800cc82 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc76:	f043 0220 	orr.w	r2, r3, #32
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800cc7e:	2303      	movs	r3, #3
 800cc80:	e000      	b.n	800cc84 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800cc82:	2300      	movs	r3, #0
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3710      	adds	r7, #16
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b088      	sub	sp, #32
 800cc90:	af02      	add	r7, sp, #8
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	60b9      	str	r1, [r7, #8]
 800cc96:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800cc98:	4b1b      	ldr	r3, [pc, #108]	; (800cd08 <SPI_EndRxTxTransaction+0x7c>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4a1b      	ldr	r2, [pc, #108]	; (800cd0c <SPI_EndRxTxTransaction+0x80>)
 800cc9e:	fba2 2303 	umull	r2, r3, r2, r3
 800cca2:	0d5b      	lsrs	r3, r3, #21
 800cca4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cca8:	fb02 f303 	mul.w	r3, r2, r3
 800ccac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ccb6:	d112      	bne.n	800ccde <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	9300      	str	r3, [sp, #0]
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	2180      	movs	r1, #128	; 0x80
 800ccc2:	68f8      	ldr	r0, [r7, #12]
 800ccc4:	f7ff ff13 	bl	800caee <SPI_WaitFlagStateUntilTimeout>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d016      	beq.n	800ccfc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccd2:	f043 0220 	orr.w	r2, r3, #32
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ccda:	2303      	movs	r3, #3
 800ccdc:	e00f      	b.n	800ccfe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d00a      	beq.n	800ccfa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	3b01      	subs	r3, #1
 800cce8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	689b      	ldr	r3, [r3, #8]
 800ccf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccf4:	2b80      	cmp	r3, #128	; 0x80
 800ccf6:	d0f2      	beq.n	800ccde <SPI_EndRxTxTransaction+0x52>
 800ccf8:	e000      	b.n	800ccfc <SPI_EndRxTxTransaction+0x70>
        break;
 800ccfa:	bf00      	nop
  }

  return HAL_OK;
 800ccfc:	2300      	movs	r3, #0
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3718      	adds	r7, #24
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	20000000 	.word	0x20000000
 800cd0c:	165e9f81 	.word	0x165e9f81

0800cd10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d101      	bne.n	800cd22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e01d      	b.n	800cd5e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d106      	bne.n	800cd3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2200      	movs	r2, #0
 800cd32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f7f9 f838 	bl	8005dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2202      	movs	r2, #2
 800cd40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681a      	ldr	r2, [r3, #0]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	3304      	adds	r3, #4
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	4610      	mov	r0, r2
 800cd50:	f000 fb56 	bl	800d400 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2201      	movs	r2, #1
 800cd58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cd5c:	2300      	movs	r3, #0
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3708      	adds	r7, #8
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}

0800cd66 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cd66:	b480      	push	{r7}
 800cd68:	b085      	sub	sp, #20
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	68da      	ldr	r2, [r3, #12]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f042 0201 	orr.w	r2, r2, #1
 800cd7c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	689b      	ldr	r3, [r3, #8]
 800cd84:	f003 0307 	and.w	r3, r3, #7
 800cd88:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2b06      	cmp	r3, #6
 800cd8e:	d007      	beq.n	800cda0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	681a      	ldr	r2, [r3, #0]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f042 0201 	orr.w	r2, r2, #1
 800cd9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cda0:	2300      	movs	r3, #0
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3714      	adds	r7, #20
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr

0800cdae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cdae:	b580      	push	{r7, lr}
 800cdb0:	b082      	sub	sp, #8
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d101      	bne.n	800cdc0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	e01d      	b.n	800cdfc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdc6:	b2db      	uxtb	r3, r3
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d106      	bne.n	800cdda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f7f8 ff75 	bl	8005cc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2202      	movs	r2, #2
 800cdde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681a      	ldr	r2, [r3, #0]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	3304      	adds	r3, #4
 800cdea:	4619      	mov	r1, r3
 800cdec:	4610      	mov	r0, r2
 800cdee:	f000 fb07 	bl	800d400 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cdfa:	2300      	movs	r3, #0
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3708      	adds	r7, #8
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}

0800ce04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	2201      	movs	r2, #1
 800ce14:	6839      	ldr	r1, [r7, #0]
 800ce16:	4618      	mov	r0, r3
 800ce18:	f000 fd42 	bl	800d8a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4a15      	ldr	r2, [pc, #84]	; (800ce78 <HAL_TIM_PWM_Start+0x74>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d004      	beq.n	800ce30 <HAL_TIM_PWM_Start+0x2c>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4a14      	ldr	r2, [pc, #80]	; (800ce7c <HAL_TIM_PWM_Start+0x78>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d101      	bne.n	800ce34 <HAL_TIM_PWM_Start+0x30>
 800ce30:	2301      	movs	r3, #1
 800ce32:	e000      	b.n	800ce36 <HAL_TIM_PWM_Start+0x32>
 800ce34:	2300      	movs	r3, #0
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d007      	beq.n	800ce4a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ce48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	689b      	ldr	r3, [r3, #8]
 800ce50:	f003 0307 	and.w	r3, r3, #7
 800ce54:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2b06      	cmp	r3, #6
 800ce5a:	d007      	beq.n	800ce6c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	681a      	ldr	r2, [r3, #0]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f042 0201 	orr.w	r2, r2, #1
 800ce6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ce6c:	2300      	movs	r3, #0
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3710      	adds	r7, #16
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop
 800ce78:	40010000 	.word	0x40010000
 800ce7c:	40010400 	.word	0x40010400

0800ce80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b086      	sub	sp, #24
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d101      	bne.n	800ce94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ce90:	2301      	movs	r3, #1
 800ce92:	e083      	b.n	800cf9c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce9a:	b2db      	uxtb	r3, r3
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d106      	bne.n	800ceae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2200      	movs	r2, #0
 800cea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f7f9 f80f 	bl	8005ecc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2202      	movs	r2, #2
 800ceb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	689b      	ldr	r3, [r3, #8]
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	6812      	ldr	r2, [r2, #0]
 800cec0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cec4:	f023 0307 	bic.w	r3, r3, #7
 800cec8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	3304      	adds	r3, #4
 800ced2:	4619      	mov	r1, r3
 800ced4:	4610      	mov	r0, r2
 800ced6:	f000 fa93 	bl	800d400 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	689b      	ldr	r3, [r3, #8]
 800cee0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	699b      	ldr	r3, [r3, #24]
 800cee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	6a1b      	ldr	r3, [r3, #32]
 800cef0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	697a      	ldr	r2, [r7, #20]
 800cef8:	4313      	orrs	r3, r2
 800cefa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf02:	f023 0303 	bic.w	r3, r3, #3
 800cf06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	689a      	ldr	r2, [r3, #8]
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	699b      	ldr	r3, [r3, #24]
 800cf10:	021b      	lsls	r3, r3, #8
 800cf12:	4313      	orrs	r3, r2
 800cf14:	693a      	ldr	r2, [r7, #16]
 800cf16:	4313      	orrs	r3, r2
 800cf18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800cf20:	f023 030c 	bic.w	r3, r3, #12
 800cf24:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cf2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cf30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	68da      	ldr	r2, [r3, #12]
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	69db      	ldr	r3, [r3, #28]
 800cf3a:	021b      	lsls	r3, r3, #8
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	693a      	ldr	r2, [r7, #16]
 800cf40:	4313      	orrs	r3, r2
 800cf42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	691b      	ldr	r3, [r3, #16]
 800cf48:	011a      	lsls	r2, r3, #4
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	6a1b      	ldr	r3, [r3, #32]
 800cf4e:	031b      	lsls	r3, r3, #12
 800cf50:	4313      	orrs	r3, r2
 800cf52:	693a      	ldr	r2, [r7, #16]
 800cf54:	4313      	orrs	r3, r2
 800cf56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800cf5e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800cf66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	685a      	ldr	r2, [r3, #4]
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	695b      	ldr	r3, [r3, #20]
 800cf70:	011b      	lsls	r3, r3, #4
 800cf72:	4313      	orrs	r3, r2
 800cf74:	68fa      	ldr	r2, [r7, #12]
 800cf76:	4313      	orrs	r3, r2
 800cf78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	697a      	ldr	r2, [r7, #20]
 800cf80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	693a      	ldr	r2, [r7, #16]
 800cf88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	68fa      	ldr	r2, [r7, #12]
 800cf90:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2201      	movs	r2, #1
 800cf96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cf9a:	2300      	movs	r3, #0
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3718      	adds	r7, #24
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d002      	beq.n	800cfba <HAL_TIM_Encoder_Start+0x16>
 800cfb4:	2b04      	cmp	r3, #4
 800cfb6:	d008      	beq.n	800cfca <HAL_TIM_Encoder_Start+0x26>
 800cfb8:	e00f      	b.n	800cfda <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	2100      	movs	r1, #0
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f000 fc6c 	bl	800d8a0 <TIM_CCxChannelCmd>
      break;
 800cfc8:	e016      	b.n	800cff8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	2104      	movs	r1, #4
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f000 fc64 	bl	800d8a0 <TIM_CCxChannelCmd>
      break;
 800cfd8:	e00e      	b.n	800cff8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	2201      	movs	r2, #1
 800cfe0:	2100      	movs	r1, #0
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f000 fc5c 	bl	800d8a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	2201      	movs	r2, #1
 800cfee:	2104      	movs	r1, #4
 800cff0:	4618      	mov	r0, r3
 800cff2:	f000 fc55 	bl	800d8a0 <TIM_CCxChannelCmd>
      break;
 800cff6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	681a      	ldr	r2, [r3, #0]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f042 0201 	orr.w	r2, r2, #1
 800d006:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d008:	2300      	movs	r3, #0
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3708      	adds	r7, #8
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}

0800d012 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d012:	b580      	push	{r7, lr}
 800d014:	b082      	sub	sp, #8
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	691b      	ldr	r3, [r3, #16]
 800d020:	f003 0302 	and.w	r3, r3, #2
 800d024:	2b02      	cmp	r3, #2
 800d026:	d122      	bne.n	800d06e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	68db      	ldr	r3, [r3, #12]
 800d02e:	f003 0302 	and.w	r3, r3, #2
 800d032:	2b02      	cmp	r3, #2
 800d034:	d11b      	bne.n	800d06e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f06f 0202 	mvn.w	r2, #2
 800d03e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2201      	movs	r2, #1
 800d044:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	699b      	ldr	r3, [r3, #24]
 800d04c:	f003 0303 	and.w	r3, r3, #3
 800d050:	2b00      	cmp	r3, #0
 800d052:	d003      	beq.n	800d05c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f000 f9b5 	bl	800d3c4 <HAL_TIM_IC_CaptureCallback>
 800d05a:	e005      	b.n	800d068 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f000 f9a7 	bl	800d3b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f000 f9b8 	bl	800d3d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2200      	movs	r2, #0
 800d06c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	691b      	ldr	r3, [r3, #16]
 800d074:	f003 0304 	and.w	r3, r3, #4
 800d078:	2b04      	cmp	r3, #4
 800d07a:	d122      	bne.n	800d0c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	68db      	ldr	r3, [r3, #12]
 800d082:	f003 0304 	and.w	r3, r3, #4
 800d086:	2b04      	cmp	r3, #4
 800d088:	d11b      	bne.n	800d0c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f06f 0204 	mvn.w	r2, #4
 800d092:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2202      	movs	r2, #2
 800d098:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	699b      	ldr	r3, [r3, #24]
 800d0a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d003      	beq.n	800d0b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f000 f98b 	bl	800d3c4 <HAL_TIM_IC_CaptureCallback>
 800d0ae:	e005      	b.n	800d0bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f000 f97d 	bl	800d3b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f000 f98e 	bl	800d3d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	691b      	ldr	r3, [r3, #16]
 800d0c8:	f003 0308 	and.w	r3, r3, #8
 800d0cc:	2b08      	cmp	r3, #8
 800d0ce:	d122      	bne.n	800d116 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	68db      	ldr	r3, [r3, #12]
 800d0d6:	f003 0308 	and.w	r3, r3, #8
 800d0da:	2b08      	cmp	r3, #8
 800d0dc:	d11b      	bne.n	800d116 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f06f 0208 	mvn.w	r2, #8
 800d0e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2204      	movs	r2, #4
 800d0ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	69db      	ldr	r3, [r3, #28]
 800d0f4:	f003 0303 	and.w	r3, r3, #3
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d003      	beq.n	800d104 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f000 f961 	bl	800d3c4 <HAL_TIM_IC_CaptureCallback>
 800d102:	e005      	b.n	800d110 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 f953 	bl	800d3b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 f964 	bl	800d3d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2200      	movs	r2, #0
 800d114:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	691b      	ldr	r3, [r3, #16]
 800d11c:	f003 0310 	and.w	r3, r3, #16
 800d120:	2b10      	cmp	r3, #16
 800d122:	d122      	bne.n	800d16a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	f003 0310 	and.w	r3, r3, #16
 800d12e:	2b10      	cmp	r3, #16
 800d130:	d11b      	bne.n	800d16a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f06f 0210 	mvn.w	r2, #16
 800d13a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2208      	movs	r2, #8
 800d140:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	69db      	ldr	r3, [r3, #28]
 800d148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d003      	beq.n	800d158 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f000 f937 	bl	800d3c4 <HAL_TIM_IC_CaptureCallback>
 800d156:	e005      	b.n	800d164 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f000 f929 	bl	800d3b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f000 f93a 	bl	800d3d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2200      	movs	r2, #0
 800d168:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	691b      	ldr	r3, [r3, #16]
 800d170:	f003 0301 	and.w	r3, r3, #1
 800d174:	2b01      	cmp	r3, #1
 800d176:	d10e      	bne.n	800d196 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	68db      	ldr	r3, [r3, #12]
 800d17e:	f003 0301 	and.w	r3, r3, #1
 800d182:	2b01      	cmp	r3, #1
 800d184:	d107      	bne.n	800d196 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f06f 0201 	mvn.w	r2, #1
 800d18e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f7f7 fb85 	bl	80048a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	691b      	ldr	r3, [r3, #16]
 800d19c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1a0:	2b80      	cmp	r3, #128	; 0x80
 800d1a2:	d10e      	bne.n	800d1c2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	68db      	ldr	r3, [r3, #12]
 800d1aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1ae:	2b80      	cmp	r3, #128	; 0x80
 800d1b0:	d107      	bne.n	800d1c2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d1ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f000 fc6d 	bl	800da9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	691b      	ldr	r3, [r3, #16]
 800d1c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1cc:	2b40      	cmp	r3, #64	; 0x40
 800d1ce:	d10e      	bne.n	800d1ee <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	68db      	ldr	r3, [r3, #12]
 800d1d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1da:	2b40      	cmp	r3, #64	; 0x40
 800d1dc:	d107      	bne.n	800d1ee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d1e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 f8ff 	bl	800d3ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	691b      	ldr	r3, [r3, #16]
 800d1f4:	f003 0320 	and.w	r3, r3, #32
 800d1f8:	2b20      	cmp	r3, #32
 800d1fa:	d10e      	bne.n	800d21a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	68db      	ldr	r3, [r3, #12]
 800d202:	f003 0320 	and.w	r3, r3, #32
 800d206:	2b20      	cmp	r3, #32
 800d208:	d107      	bne.n	800d21a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f06f 0220 	mvn.w	r2, #32
 800d212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 fc37 	bl	800da88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d21a:	bf00      	nop
 800d21c:	3708      	adds	r7, #8
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
	...

0800d224 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b084      	sub	sp, #16
 800d228:	af00      	add	r7, sp, #0
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	60b9      	str	r1, [r7, #8]
 800d22e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d236:	2b01      	cmp	r3, #1
 800d238:	d101      	bne.n	800d23e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d23a:	2302      	movs	r3, #2
 800d23c:	e0b4      	b.n	800d3a8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2201      	movs	r2, #1
 800d242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2202      	movs	r2, #2
 800d24a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2b0c      	cmp	r3, #12
 800d252:	f200 809f 	bhi.w	800d394 <HAL_TIM_PWM_ConfigChannel+0x170>
 800d256:	a201      	add	r2, pc, #4	; (adr r2, 800d25c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800d258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d25c:	0800d291 	.word	0x0800d291
 800d260:	0800d395 	.word	0x0800d395
 800d264:	0800d395 	.word	0x0800d395
 800d268:	0800d395 	.word	0x0800d395
 800d26c:	0800d2d1 	.word	0x0800d2d1
 800d270:	0800d395 	.word	0x0800d395
 800d274:	0800d395 	.word	0x0800d395
 800d278:	0800d395 	.word	0x0800d395
 800d27c:	0800d313 	.word	0x0800d313
 800d280:	0800d395 	.word	0x0800d395
 800d284:	0800d395 	.word	0x0800d395
 800d288:	0800d395 	.word	0x0800d395
 800d28c:	0800d353 	.word	0x0800d353
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	68b9      	ldr	r1, [r7, #8]
 800d296:	4618      	mov	r0, r3
 800d298:	f000 f952 	bl	800d540 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	699a      	ldr	r2, [r3, #24]
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f042 0208 	orr.w	r2, r2, #8
 800d2aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	699a      	ldr	r2, [r3, #24]
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f022 0204 	bic.w	r2, r2, #4
 800d2ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	6999      	ldr	r1, [r3, #24]
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	691a      	ldr	r2, [r3, #16]
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	430a      	orrs	r2, r1
 800d2cc:	619a      	str	r2, [r3, #24]
      break;
 800d2ce:	e062      	b.n	800d396 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	68b9      	ldr	r1, [r7, #8]
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f000 f9a2 	bl	800d620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	699a      	ldr	r2, [r3, #24]
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d2ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	699a      	ldr	r2, [r3, #24]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d2fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	6999      	ldr	r1, [r3, #24]
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	691b      	ldr	r3, [r3, #16]
 800d306:	021a      	lsls	r2, r3, #8
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	430a      	orrs	r2, r1
 800d30e:	619a      	str	r2, [r3, #24]
      break;
 800d310:	e041      	b.n	800d396 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	68b9      	ldr	r1, [r7, #8]
 800d318:	4618      	mov	r0, r3
 800d31a:	f000 f9f7 	bl	800d70c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	69da      	ldr	r2, [r3, #28]
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f042 0208 	orr.w	r2, r2, #8
 800d32c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	69da      	ldr	r2, [r3, #28]
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f022 0204 	bic.w	r2, r2, #4
 800d33c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	69d9      	ldr	r1, [r3, #28]
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	691a      	ldr	r2, [r3, #16]
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	430a      	orrs	r2, r1
 800d34e:	61da      	str	r2, [r3, #28]
      break;
 800d350:	e021      	b.n	800d396 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	68b9      	ldr	r1, [r7, #8]
 800d358:	4618      	mov	r0, r3
 800d35a:	f000 fa4b 	bl	800d7f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	69da      	ldr	r2, [r3, #28]
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d36c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	69da      	ldr	r2, [r3, #28]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d37c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	69d9      	ldr	r1, [r3, #28]
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	691b      	ldr	r3, [r3, #16]
 800d388:	021a      	lsls	r2, r3, #8
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	430a      	orrs	r2, r1
 800d390:	61da      	str	r2, [r3, #28]
      break;
 800d392:	e000      	b.n	800d396 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800d394:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	2201      	movs	r2, #1
 800d39a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d3a6:	2300      	movs	r3, #0
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3710      	adds	r7, #16
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}

0800d3b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d3b8:	bf00      	nop
 800d3ba:	370c      	adds	r7, #12
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr

0800d3c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d3cc:	bf00      	nop
 800d3ce:	370c      	adds	r7, #12
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d6:	4770      	bx	lr

0800d3d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b083      	sub	sp, #12
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d3e0:	bf00      	nop
 800d3e2:	370c      	adds	r7, #12
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr

0800d3ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b083      	sub	sp, #12
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d3f4:	bf00      	nop
 800d3f6:	370c      	adds	r7, #12
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fe:	4770      	bx	lr

0800d400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d400:	b480      	push	{r7}
 800d402:	b085      	sub	sp, #20
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	4a40      	ldr	r2, [pc, #256]	; (800d514 <TIM_Base_SetConfig+0x114>)
 800d414:	4293      	cmp	r3, r2
 800d416:	d013      	beq.n	800d440 <TIM_Base_SetConfig+0x40>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d41e:	d00f      	beq.n	800d440 <TIM_Base_SetConfig+0x40>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	4a3d      	ldr	r2, [pc, #244]	; (800d518 <TIM_Base_SetConfig+0x118>)
 800d424:	4293      	cmp	r3, r2
 800d426:	d00b      	beq.n	800d440 <TIM_Base_SetConfig+0x40>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	4a3c      	ldr	r2, [pc, #240]	; (800d51c <TIM_Base_SetConfig+0x11c>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d007      	beq.n	800d440 <TIM_Base_SetConfig+0x40>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	4a3b      	ldr	r2, [pc, #236]	; (800d520 <TIM_Base_SetConfig+0x120>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d003      	beq.n	800d440 <TIM_Base_SetConfig+0x40>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	4a3a      	ldr	r2, [pc, #232]	; (800d524 <TIM_Base_SetConfig+0x124>)
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d108      	bne.n	800d452 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	685b      	ldr	r3, [r3, #4]
 800d44c:	68fa      	ldr	r2, [r7, #12]
 800d44e:	4313      	orrs	r3, r2
 800d450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	4a2f      	ldr	r2, [pc, #188]	; (800d514 <TIM_Base_SetConfig+0x114>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d02b      	beq.n	800d4b2 <TIM_Base_SetConfig+0xb2>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d460:	d027      	beq.n	800d4b2 <TIM_Base_SetConfig+0xb2>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	4a2c      	ldr	r2, [pc, #176]	; (800d518 <TIM_Base_SetConfig+0x118>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d023      	beq.n	800d4b2 <TIM_Base_SetConfig+0xb2>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	4a2b      	ldr	r2, [pc, #172]	; (800d51c <TIM_Base_SetConfig+0x11c>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d01f      	beq.n	800d4b2 <TIM_Base_SetConfig+0xb2>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	4a2a      	ldr	r2, [pc, #168]	; (800d520 <TIM_Base_SetConfig+0x120>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d01b      	beq.n	800d4b2 <TIM_Base_SetConfig+0xb2>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	4a29      	ldr	r2, [pc, #164]	; (800d524 <TIM_Base_SetConfig+0x124>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d017      	beq.n	800d4b2 <TIM_Base_SetConfig+0xb2>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	4a28      	ldr	r2, [pc, #160]	; (800d528 <TIM_Base_SetConfig+0x128>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d013      	beq.n	800d4b2 <TIM_Base_SetConfig+0xb2>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	4a27      	ldr	r2, [pc, #156]	; (800d52c <TIM_Base_SetConfig+0x12c>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d00f      	beq.n	800d4b2 <TIM_Base_SetConfig+0xb2>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	4a26      	ldr	r2, [pc, #152]	; (800d530 <TIM_Base_SetConfig+0x130>)
 800d496:	4293      	cmp	r3, r2
 800d498:	d00b      	beq.n	800d4b2 <TIM_Base_SetConfig+0xb2>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	4a25      	ldr	r2, [pc, #148]	; (800d534 <TIM_Base_SetConfig+0x134>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d007      	beq.n	800d4b2 <TIM_Base_SetConfig+0xb2>
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	4a24      	ldr	r2, [pc, #144]	; (800d538 <TIM_Base_SetConfig+0x138>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d003      	beq.n	800d4b2 <TIM_Base_SetConfig+0xb2>
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	4a23      	ldr	r2, [pc, #140]	; (800d53c <TIM_Base_SetConfig+0x13c>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d108      	bne.n	800d4c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	68db      	ldr	r3, [r3, #12]
 800d4be:	68fa      	ldr	r2, [r7, #12]
 800d4c0:	4313      	orrs	r3, r2
 800d4c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	695b      	ldr	r3, [r3, #20]
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	68fa      	ldr	r2, [r7, #12]
 800d4d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	689a      	ldr	r2, [r3, #8]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	681a      	ldr	r2, [r3, #0]
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	4a0a      	ldr	r2, [pc, #40]	; (800d514 <TIM_Base_SetConfig+0x114>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d003      	beq.n	800d4f8 <TIM_Base_SetConfig+0xf8>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	4a0c      	ldr	r2, [pc, #48]	; (800d524 <TIM_Base_SetConfig+0x124>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d103      	bne.n	800d500 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	691a      	ldr	r2, [r3, #16]
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2201      	movs	r2, #1
 800d504:	615a      	str	r2, [r3, #20]
}
 800d506:	bf00      	nop
 800d508:	3714      	adds	r7, #20
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr
 800d512:	bf00      	nop
 800d514:	40010000 	.word	0x40010000
 800d518:	40000400 	.word	0x40000400
 800d51c:	40000800 	.word	0x40000800
 800d520:	40000c00 	.word	0x40000c00
 800d524:	40010400 	.word	0x40010400
 800d528:	40014000 	.word	0x40014000
 800d52c:	40014400 	.word	0x40014400
 800d530:	40014800 	.word	0x40014800
 800d534:	40001800 	.word	0x40001800
 800d538:	40001c00 	.word	0x40001c00
 800d53c:	40002000 	.word	0x40002000

0800d540 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d540:	b480      	push	{r7}
 800d542:	b087      	sub	sp, #28
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6a1b      	ldr	r3, [r3, #32]
 800d54e:	f023 0201 	bic.w	r2, r3, #1
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6a1b      	ldr	r3, [r3, #32]
 800d55a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	699b      	ldr	r3, [r3, #24]
 800d566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d56e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f023 0303 	bic.w	r3, r3, #3
 800d576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	68fa      	ldr	r2, [r7, #12]
 800d57e:	4313      	orrs	r3, r2
 800d580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	f023 0302 	bic.w	r3, r3, #2
 800d588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	689b      	ldr	r3, [r3, #8]
 800d58e:	697a      	ldr	r2, [r7, #20]
 800d590:	4313      	orrs	r3, r2
 800d592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	4a20      	ldr	r2, [pc, #128]	; (800d618 <TIM_OC1_SetConfig+0xd8>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d003      	beq.n	800d5a4 <TIM_OC1_SetConfig+0x64>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	4a1f      	ldr	r2, [pc, #124]	; (800d61c <TIM_OC1_SetConfig+0xdc>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d10c      	bne.n	800d5be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	f023 0308 	bic.w	r3, r3, #8
 800d5aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	68db      	ldr	r3, [r3, #12]
 800d5b0:	697a      	ldr	r2, [r7, #20]
 800d5b2:	4313      	orrs	r3, r2
 800d5b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	f023 0304 	bic.w	r3, r3, #4
 800d5bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	4a15      	ldr	r2, [pc, #84]	; (800d618 <TIM_OC1_SetConfig+0xd8>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d003      	beq.n	800d5ce <TIM_OC1_SetConfig+0x8e>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	4a14      	ldr	r2, [pc, #80]	; (800d61c <TIM_OC1_SetConfig+0xdc>)
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	d111      	bne.n	800d5f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d5d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d5dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	695b      	ldr	r3, [r3, #20]
 800d5e2:	693a      	ldr	r2, [r7, #16]
 800d5e4:	4313      	orrs	r3, r2
 800d5e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	699b      	ldr	r3, [r3, #24]
 800d5ec:	693a      	ldr	r2, [r7, #16]
 800d5ee:	4313      	orrs	r3, r2
 800d5f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	693a      	ldr	r2, [r7, #16]
 800d5f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	68fa      	ldr	r2, [r7, #12]
 800d5fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	685a      	ldr	r2, [r3, #4]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	697a      	ldr	r2, [r7, #20]
 800d60a:	621a      	str	r2, [r3, #32]
}
 800d60c:	bf00      	nop
 800d60e:	371c      	adds	r7, #28
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr
 800d618:	40010000 	.word	0x40010000
 800d61c:	40010400 	.word	0x40010400

0800d620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d620:	b480      	push	{r7}
 800d622:	b087      	sub	sp, #28
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6a1b      	ldr	r3, [r3, #32]
 800d62e:	f023 0210 	bic.w	r2, r3, #16
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6a1b      	ldr	r3, [r3, #32]
 800d63a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	685b      	ldr	r3, [r3, #4]
 800d640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	699b      	ldr	r3, [r3, #24]
 800d646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d64e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	021b      	lsls	r3, r3, #8
 800d65e:	68fa      	ldr	r2, [r7, #12]
 800d660:	4313      	orrs	r3, r2
 800d662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	f023 0320 	bic.w	r3, r3, #32
 800d66a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	689b      	ldr	r3, [r3, #8]
 800d670:	011b      	lsls	r3, r3, #4
 800d672:	697a      	ldr	r2, [r7, #20]
 800d674:	4313      	orrs	r3, r2
 800d676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	4a22      	ldr	r2, [pc, #136]	; (800d704 <TIM_OC2_SetConfig+0xe4>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d003      	beq.n	800d688 <TIM_OC2_SetConfig+0x68>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	4a21      	ldr	r2, [pc, #132]	; (800d708 <TIM_OC2_SetConfig+0xe8>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d10d      	bne.n	800d6a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d68e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	68db      	ldr	r3, [r3, #12]
 800d694:	011b      	lsls	r3, r3, #4
 800d696:	697a      	ldr	r2, [r7, #20]
 800d698:	4313      	orrs	r3, r2
 800d69a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	4a17      	ldr	r2, [pc, #92]	; (800d704 <TIM_OC2_SetConfig+0xe4>)
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d003      	beq.n	800d6b4 <TIM_OC2_SetConfig+0x94>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	4a16      	ldr	r2, [pc, #88]	; (800d708 <TIM_OC2_SetConfig+0xe8>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d113      	bne.n	800d6dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d6ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d6bc:	693b      	ldr	r3, [r7, #16]
 800d6be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d6c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	695b      	ldr	r3, [r3, #20]
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	693a      	ldr	r2, [r7, #16]
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	699b      	ldr	r3, [r3, #24]
 800d6d4:	009b      	lsls	r3, r3, #2
 800d6d6:	693a      	ldr	r2, [r7, #16]
 800d6d8:	4313      	orrs	r3, r2
 800d6da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	693a      	ldr	r2, [r7, #16]
 800d6e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	68fa      	ldr	r2, [r7, #12]
 800d6e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	685a      	ldr	r2, [r3, #4]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	697a      	ldr	r2, [r7, #20]
 800d6f4:	621a      	str	r2, [r3, #32]
}
 800d6f6:	bf00      	nop
 800d6f8:	371c      	adds	r7, #28
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d700:	4770      	bx	lr
 800d702:	bf00      	nop
 800d704:	40010000 	.word	0x40010000
 800d708:	40010400 	.word	0x40010400

0800d70c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b087      	sub	sp, #28
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6a1b      	ldr	r3, [r3, #32]
 800d71a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6a1b      	ldr	r3, [r3, #32]
 800d726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	685b      	ldr	r3, [r3, #4]
 800d72c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	69db      	ldr	r3, [r3, #28]
 800d732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d73a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f023 0303 	bic.w	r3, r3, #3
 800d742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	68fa      	ldr	r2, [r7, #12]
 800d74a:	4313      	orrs	r3, r2
 800d74c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	689b      	ldr	r3, [r3, #8]
 800d75a:	021b      	lsls	r3, r3, #8
 800d75c:	697a      	ldr	r2, [r7, #20]
 800d75e:	4313      	orrs	r3, r2
 800d760:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	4a21      	ldr	r2, [pc, #132]	; (800d7ec <TIM_OC3_SetConfig+0xe0>)
 800d766:	4293      	cmp	r3, r2
 800d768:	d003      	beq.n	800d772 <TIM_OC3_SetConfig+0x66>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	4a20      	ldr	r2, [pc, #128]	; (800d7f0 <TIM_OC3_SetConfig+0xe4>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d10d      	bne.n	800d78e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	021b      	lsls	r3, r3, #8
 800d780:	697a      	ldr	r2, [r7, #20]
 800d782:	4313      	orrs	r3, r2
 800d784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d78c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	4a16      	ldr	r2, [pc, #88]	; (800d7ec <TIM_OC3_SetConfig+0xe0>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d003      	beq.n	800d79e <TIM_OC3_SetConfig+0x92>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	4a15      	ldr	r2, [pc, #84]	; (800d7f0 <TIM_OC3_SetConfig+0xe4>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d113      	bne.n	800d7c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d7a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d7ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	695b      	ldr	r3, [r3, #20]
 800d7b2:	011b      	lsls	r3, r3, #4
 800d7b4:	693a      	ldr	r2, [r7, #16]
 800d7b6:	4313      	orrs	r3, r2
 800d7b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	699b      	ldr	r3, [r3, #24]
 800d7be:	011b      	lsls	r3, r3, #4
 800d7c0:	693a      	ldr	r2, [r7, #16]
 800d7c2:	4313      	orrs	r3, r2
 800d7c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	693a      	ldr	r2, [r7, #16]
 800d7ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	68fa      	ldr	r2, [r7, #12]
 800d7d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	685a      	ldr	r2, [r3, #4]
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	697a      	ldr	r2, [r7, #20]
 800d7de:	621a      	str	r2, [r3, #32]
}
 800d7e0:	bf00      	nop
 800d7e2:	371c      	adds	r7, #28
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr
 800d7ec:	40010000 	.word	0x40010000
 800d7f0:	40010400 	.word	0x40010400

0800d7f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b087      	sub	sp, #28
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6a1b      	ldr	r3, [r3, #32]
 800d802:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6a1b      	ldr	r3, [r3, #32]
 800d80e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	685b      	ldr	r3, [r3, #4]
 800d814:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	69db      	ldr	r3, [r3, #28]
 800d81a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d82a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	021b      	lsls	r3, r3, #8
 800d832:	68fa      	ldr	r2, [r7, #12]
 800d834:	4313      	orrs	r3, r2
 800d836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d83e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	689b      	ldr	r3, [r3, #8]
 800d844:	031b      	lsls	r3, r3, #12
 800d846:	693a      	ldr	r2, [r7, #16]
 800d848:	4313      	orrs	r3, r2
 800d84a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	4a12      	ldr	r2, [pc, #72]	; (800d898 <TIM_OC4_SetConfig+0xa4>)
 800d850:	4293      	cmp	r3, r2
 800d852:	d003      	beq.n	800d85c <TIM_OC4_SetConfig+0x68>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	4a11      	ldr	r2, [pc, #68]	; (800d89c <TIM_OC4_SetConfig+0xa8>)
 800d858:	4293      	cmp	r3, r2
 800d85a:	d109      	bne.n	800d870 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d862:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	695b      	ldr	r3, [r3, #20]
 800d868:	019b      	lsls	r3, r3, #6
 800d86a:	697a      	ldr	r2, [r7, #20]
 800d86c:	4313      	orrs	r3, r2
 800d86e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	697a      	ldr	r2, [r7, #20]
 800d874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	68fa      	ldr	r2, [r7, #12]
 800d87a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	685a      	ldr	r2, [r3, #4]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	693a      	ldr	r2, [r7, #16]
 800d888:	621a      	str	r2, [r3, #32]
}
 800d88a:	bf00      	nop
 800d88c:	371c      	adds	r7, #28
 800d88e:	46bd      	mov	sp, r7
 800d890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d894:	4770      	bx	lr
 800d896:	bf00      	nop
 800d898:	40010000 	.word	0x40010000
 800d89c:	40010400 	.word	0x40010400

0800d8a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b087      	sub	sp, #28
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	60f8      	str	r0, [r7, #12]
 800d8a8:	60b9      	str	r1, [r7, #8]
 800d8aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	f003 031f 	and.w	r3, r3, #31
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	fa02 f303 	lsl.w	r3, r2, r3
 800d8b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	6a1a      	ldr	r2, [r3, #32]
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	43db      	mvns	r3, r3
 800d8c2:	401a      	ands	r2, r3
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	6a1a      	ldr	r2, [r3, #32]
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	f003 031f 	and.w	r3, r3, #31
 800d8d2:	6879      	ldr	r1, [r7, #4]
 800d8d4:	fa01 f303 	lsl.w	r3, r1, r3
 800d8d8:	431a      	orrs	r2, r3
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	621a      	str	r2, [r3, #32]
}
 800d8de:	bf00      	nop
 800d8e0:	371c      	adds	r7, #28
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr
	...

0800d8ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b085      	sub	sp, #20
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d101      	bne.n	800d904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d900:	2302      	movs	r3, #2
 800d902:	e05a      	b.n	800d9ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2201      	movs	r2, #1
 800d908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2202      	movs	r2, #2
 800d910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	689b      	ldr	r3, [r3, #8]
 800d922:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d92a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	68fa      	ldr	r2, [r7, #12]
 800d932:	4313      	orrs	r3, r2
 800d934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	68fa      	ldr	r2, [r7, #12]
 800d93c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	4a21      	ldr	r2, [pc, #132]	; (800d9c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d022      	beq.n	800d98e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d950:	d01d      	beq.n	800d98e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4a1d      	ldr	r2, [pc, #116]	; (800d9cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d958:	4293      	cmp	r3, r2
 800d95a:	d018      	beq.n	800d98e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	4a1b      	ldr	r2, [pc, #108]	; (800d9d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d962:	4293      	cmp	r3, r2
 800d964:	d013      	beq.n	800d98e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4a1a      	ldr	r2, [pc, #104]	; (800d9d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d96c:	4293      	cmp	r3, r2
 800d96e:	d00e      	beq.n	800d98e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4a18      	ldr	r2, [pc, #96]	; (800d9d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d976:	4293      	cmp	r3, r2
 800d978:	d009      	beq.n	800d98e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	4a17      	ldr	r2, [pc, #92]	; (800d9dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d980:	4293      	cmp	r3, r2
 800d982:	d004      	beq.n	800d98e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	4a15      	ldr	r2, [pc, #84]	; (800d9e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d98a:	4293      	cmp	r3, r2
 800d98c:	d10c      	bne.n	800d9a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d994:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	685b      	ldr	r3, [r3, #4]
 800d99a:	68ba      	ldr	r2, [r7, #8]
 800d99c:	4313      	orrs	r3, r2
 800d99e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	68ba      	ldr	r2, [r7, #8]
 800d9a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d9b8:	2300      	movs	r3, #0
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3714      	adds	r7, #20
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c4:	4770      	bx	lr
 800d9c6:	bf00      	nop
 800d9c8:	40010000 	.word	0x40010000
 800d9cc:	40000400 	.word	0x40000400
 800d9d0:	40000800 	.word	0x40000800
 800d9d4:	40000c00 	.word	0x40000c00
 800d9d8:	40010400 	.word	0x40010400
 800d9dc:	40014000 	.word	0x40014000
 800d9e0:	40001800 	.word	0x40001800

0800d9e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	b085      	sub	sp, #20
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d9f8:	2b01      	cmp	r3, #1
 800d9fa:	d101      	bne.n	800da00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d9fc:	2302      	movs	r3, #2
 800d9fe:	e03d      	b.n	800da7c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2201      	movs	r2, #1
 800da04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	68db      	ldr	r3, [r3, #12]
 800da12:	4313      	orrs	r3, r2
 800da14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	689b      	ldr	r3, [r3, #8]
 800da20:	4313      	orrs	r3, r2
 800da22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	4313      	orrs	r3, r2
 800da30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4313      	orrs	r3, r2
 800da3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	691b      	ldr	r3, [r3, #16]
 800da4a:	4313      	orrs	r3, r2
 800da4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	695b      	ldr	r3, [r3, #20]
 800da58:	4313      	orrs	r3, r2
 800da5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	69db      	ldr	r3, [r3, #28]
 800da66:	4313      	orrs	r3, r2
 800da68:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	68fa      	ldr	r2, [r7, #12]
 800da70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2200      	movs	r2, #0
 800da76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800da7a:	2300      	movs	r3, #0
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3714      	adds	r7, #20
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr

0800da88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800da88:	b480      	push	{r7}
 800da8a:	b083      	sub	sp, #12
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800da90:	bf00      	nop
 800da92:	370c      	adds	r7, #12
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr

0800da9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b083      	sub	sp, #12
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800daa4:	bf00      	nop
 800daa6:	370c      	adds	r7, #12
 800daa8:	46bd      	mov	sp, r7
 800daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daae:	4770      	bx	lr

0800dab0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d101      	bne.n	800dac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dabe:	2301      	movs	r3, #1
 800dac0:	e03f      	b.n	800db42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dac8:	b2db      	uxtb	r3, r3
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d106      	bne.n	800dadc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2200      	movs	r2, #0
 800dad2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f7f8 fb22 	bl	8006120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2224      	movs	r2, #36	; 0x24
 800dae0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	68da      	ldr	r2, [r3, #12]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800daf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f000 f829 	bl	800db4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	691a      	ldr	r2, [r3, #16]
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800db08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	695a      	ldr	r2, [r3, #20]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800db18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	68da      	ldr	r2, [r3, #12]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800db28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2200      	movs	r2, #0
 800db2e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2220      	movs	r2, #32
 800db34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2220      	movs	r2, #32
 800db3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800db40:	2300      	movs	r3, #0
}
 800db42:	4618      	mov	r0, r3
 800db44:	3708      	adds	r7, #8
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
	...

0800db4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800db4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db50:	b085      	sub	sp, #20
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	691b      	ldr	r3, [r3, #16]
 800db5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	68da      	ldr	r2, [r3, #12]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	430a      	orrs	r2, r1
 800db6a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	689a      	ldr	r2, [r3, #8]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	691b      	ldr	r3, [r3, #16]
 800db74:	431a      	orrs	r2, r3
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	695b      	ldr	r3, [r3, #20]
 800db7a:	431a      	orrs	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	69db      	ldr	r3, [r3, #28]
 800db80:	4313      	orrs	r3, r2
 800db82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	68db      	ldr	r3, [r3, #12]
 800db8a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800db8e:	f023 030c 	bic.w	r3, r3, #12
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	6812      	ldr	r2, [r2, #0]
 800db96:	68f9      	ldr	r1, [r7, #12]
 800db98:	430b      	orrs	r3, r1
 800db9a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	695b      	ldr	r3, [r3, #20]
 800dba2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	699a      	ldr	r2, [r3, #24]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	430a      	orrs	r2, r1
 800dbb0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	69db      	ldr	r3, [r3, #28]
 800dbb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dbba:	f040 818b 	bne.w	800ded4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	4ac1      	ldr	r2, [pc, #772]	; (800dec8 <UART_SetConfig+0x37c>)
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d005      	beq.n	800dbd4 <UART_SetConfig+0x88>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	4abf      	ldr	r2, [pc, #764]	; (800decc <UART_SetConfig+0x380>)
 800dbce:	4293      	cmp	r3, r2
 800dbd0:	f040 80bd 	bne.w	800dd4e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800dbd4:	f7fc fbcc 	bl	800a370 <HAL_RCC_GetPCLK2Freq>
 800dbd8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	461d      	mov	r5, r3
 800dbde:	f04f 0600 	mov.w	r6, #0
 800dbe2:	46a8      	mov	r8, r5
 800dbe4:	46b1      	mov	r9, r6
 800dbe6:	eb18 0308 	adds.w	r3, r8, r8
 800dbea:	eb49 0409 	adc.w	r4, r9, r9
 800dbee:	4698      	mov	r8, r3
 800dbf0:	46a1      	mov	r9, r4
 800dbf2:	eb18 0805 	adds.w	r8, r8, r5
 800dbf6:	eb49 0906 	adc.w	r9, r9, r6
 800dbfa:	f04f 0100 	mov.w	r1, #0
 800dbfe:	f04f 0200 	mov.w	r2, #0
 800dc02:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800dc06:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800dc0a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800dc0e:	4688      	mov	r8, r1
 800dc10:	4691      	mov	r9, r2
 800dc12:	eb18 0005 	adds.w	r0, r8, r5
 800dc16:	eb49 0106 	adc.w	r1, r9, r6
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	461d      	mov	r5, r3
 800dc20:	f04f 0600 	mov.w	r6, #0
 800dc24:	196b      	adds	r3, r5, r5
 800dc26:	eb46 0406 	adc.w	r4, r6, r6
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	4623      	mov	r3, r4
 800dc2e:	f7f3 f843 	bl	8000cb8 <__aeabi_uldivmod>
 800dc32:	4603      	mov	r3, r0
 800dc34:	460c      	mov	r4, r1
 800dc36:	461a      	mov	r2, r3
 800dc38:	4ba5      	ldr	r3, [pc, #660]	; (800ded0 <UART_SetConfig+0x384>)
 800dc3a:	fba3 2302 	umull	r2, r3, r3, r2
 800dc3e:	095b      	lsrs	r3, r3, #5
 800dc40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	461d      	mov	r5, r3
 800dc48:	f04f 0600 	mov.w	r6, #0
 800dc4c:	46a9      	mov	r9, r5
 800dc4e:	46b2      	mov	sl, r6
 800dc50:	eb19 0309 	adds.w	r3, r9, r9
 800dc54:	eb4a 040a 	adc.w	r4, sl, sl
 800dc58:	4699      	mov	r9, r3
 800dc5a:	46a2      	mov	sl, r4
 800dc5c:	eb19 0905 	adds.w	r9, r9, r5
 800dc60:	eb4a 0a06 	adc.w	sl, sl, r6
 800dc64:	f04f 0100 	mov.w	r1, #0
 800dc68:	f04f 0200 	mov.w	r2, #0
 800dc6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dc70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dc74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dc78:	4689      	mov	r9, r1
 800dc7a:	4692      	mov	sl, r2
 800dc7c:	eb19 0005 	adds.w	r0, r9, r5
 800dc80:	eb4a 0106 	adc.w	r1, sl, r6
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	685b      	ldr	r3, [r3, #4]
 800dc88:	461d      	mov	r5, r3
 800dc8a:	f04f 0600 	mov.w	r6, #0
 800dc8e:	196b      	adds	r3, r5, r5
 800dc90:	eb46 0406 	adc.w	r4, r6, r6
 800dc94:	461a      	mov	r2, r3
 800dc96:	4623      	mov	r3, r4
 800dc98:	f7f3 f80e 	bl	8000cb8 <__aeabi_uldivmod>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	460c      	mov	r4, r1
 800dca0:	461a      	mov	r2, r3
 800dca2:	4b8b      	ldr	r3, [pc, #556]	; (800ded0 <UART_SetConfig+0x384>)
 800dca4:	fba3 1302 	umull	r1, r3, r3, r2
 800dca8:	095b      	lsrs	r3, r3, #5
 800dcaa:	2164      	movs	r1, #100	; 0x64
 800dcac:	fb01 f303 	mul.w	r3, r1, r3
 800dcb0:	1ad3      	subs	r3, r2, r3
 800dcb2:	00db      	lsls	r3, r3, #3
 800dcb4:	3332      	adds	r3, #50	; 0x32
 800dcb6:	4a86      	ldr	r2, [pc, #536]	; (800ded0 <UART_SetConfig+0x384>)
 800dcb8:	fba2 2303 	umull	r2, r3, r2, r3
 800dcbc:	095b      	lsrs	r3, r3, #5
 800dcbe:	005b      	lsls	r3, r3, #1
 800dcc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800dcc4:	4498      	add	r8, r3
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	461d      	mov	r5, r3
 800dcca:	f04f 0600 	mov.w	r6, #0
 800dcce:	46a9      	mov	r9, r5
 800dcd0:	46b2      	mov	sl, r6
 800dcd2:	eb19 0309 	adds.w	r3, r9, r9
 800dcd6:	eb4a 040a 	adc.w	r4, sl, sl
 800dcda:	4699      	mov	r9, r3
 800dcdc:	46a2      	mov	sl, r4
 800dcde:	eb19 0905 	adds.w	r9, r9, r5
 800dce2:	eb4a 0a06 	adc.w	sl, sl, r6
 800dce6:	f04f 0100 	mov.w	r1, #0
 800dcea:	f04f 0200 	mov.w	r2, #0
 800dcee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dcf2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dcf6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dcfa:	4689      	mov	r9, r1
 800dcfc:	4692      	mov	sl, r2
 800dcfe:	eb19 0005 	adds.w	r0, r9, r5
 800dd02:	eb4a 0106 	adc.w	r1, sl, r6
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	461d      	mov	r5, r3
 800dd0c:	f04f 0600 	mov.w	r6, #0
 800dd10:	196b      	adds	r3, r5, r5
 800dd12:	eb46 0406 	adc.w	r4, r6, r6
 800dd16:	461a      	mov	r2, r3
 800dd18:	4623      	mov	r3, r4
 800dd1a:	f7f2 ffcd 	bl	8000cb8 <__aeabi_uldivmod>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	460c      	mov	r4, r1
 800dd22:	461a      	mov	r2, r3
 800dd24:	4b6a      	ldr	r3, [pc, #424]	; (800ded0 <UART_SetConfig+0x384>)
 800dd26:	fba3 1302 	umull	r1, r3, r3, r2
 800dd2a:	095b      	lsrs	r3, r3, #5
 800dd2c:	2164      	movs	r1, #100	; 0x64
 800dd2e:	fb01 f303 	mul.w	r3, r1, r3
 800dd32:	1ad3      	subs	r3, r2, r3
 800dd34:	00db      	lsls	r3, r3, #3
 800dd36:	3332      	adds	r3, #50	; 0x32
 800dd38:	4a65      	ldr	r2, [pc, #404]	; (800ded0 <UART_SetConfig+0x384>)
 800dd3a:	fba2 2303 	umull	r2, r3, r2, r3
 800dd3e:	095b      	lsrs	r3, r3, #5
 800dd40:	f003 0207 	and.w	r2, r3, #7
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4442      	add	r2, r8
 800dd4a:	609a      	str	r2, [r3, #8]
 800dd4c:	e26f      	b.n	800e22e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800dd4e:	f7fc fafb 	bl	800a348 <HAL_RCC_GetPCLK1Freq>
 800dd52:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	461d      	mov	r5, r3
 800dd58:	f04f 0600 	mov.w	r6, #0
 800dd5c:	46a8      	mov	r8, r5
 800dd5e:	46b1      	mov	r9, r6
 800dd60:	eb18 0308 	adds.w	r3, r8, r8
 800dd64:	eb49 0409 	adc.w	r4, r9, r9
 800dd68:	4698      	mov	r8, r3
 800dd6a:	46a1      	mov	r9, r4
 800dd6c:	eb18 0805 	adds.w	r8, r8, r5
 800dd70:	eb49 0906 	adc.w	r9, r9, r6
 800dd74:	f04f 0100 	mov.w	r1, #0
 800dd78:	f04f 0200 	mov.w	r2, #0
 800dd7c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800dd80:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800dd84:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800dd88:	4688      	mov	r8, r1
 800dd8a:	4691      	mov	r9, r2
 800dd8c:	eb18 0005 	adds.w	r0, r8, r5
 800dd90:	eb49 0106 	adc.w	r1, r9, r6
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	461d      	mov	r5, r3
 800dd9a:	f04f 0600 	mov.w	r6, #0
 800dd9e:	196b      	adds	r3, r5, r5
 800dda0:	eb46 0406 	adc.w	r4, r6, r6
 800dda4:	461a      	mov	r2, r3
 800dda6:	4623      	mov	r3, r4
 800dda8:	f7f2 ff86 	bl	8000cb8 <__aeabi_uldivmod>
 800ddac:	4603      	mov	r3, r0
 800ddae:	460c      	mov	r4, r1
 800ddb0:	461a      	mov	r2, r3
 800ddb2:	4b47      	ldr	r3, [pc, #284]	; (800ded0 <UART_SetConfig+0x384>)
 800ddb4:	fba3 2302 	umull	r2, r3, r3, r2
 800ddb8:	095b      	lsrs	r3, r3, #5
 800ddba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	461d      	mov	r5, r3
 800ddc2:	f04f 0600 	mov.w	r6, #0
 800ddc6:	46a9      	mov	r9, r5
 800ddc8:	46b2      	mov	sl, r6
 800ddca:	eb19 0309 	adds.w	r3, r9, r9
 800ddce:	eb4a 040a 	adc.w	r4, sl, sl
 800ddd2:	4699      	mov	r9, r3
 800ddd4:	46a2      	mov	sl, r4
 800ddd6:	eb19 0905 	adds.w	r9, r9, r5
 800ddda:	eb4a 0a06 	adc.w	sl, sl, r6
 800ddde:	f04f 0100 	mov.w	r1, #0
 800dde2:	f04f 0200 	mov.w	r2, #0
 800dde6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ddea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ddee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ddf2:	4689      	mov	r9, r1
 800ddf4:	4692      	mov	sl, r2
 800ddf6:	eb19 0005 	adds.w	r0, r9, r5
 800ddfa:	eb4a 0106 	adc.w	r1, sl, r6
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	685b      	ldr	r3, [r3, #4]
 800de02:	461d      	mov	r5, r3
 800de04:	f04f 0600 	mov.w	r6, #0
 800de08:	196b      	adds	r3, r5, r5
 800de0a:	eb46 0406 	adc.w	r4, r6, r6
 800de0e:	461a      	mov	r2, r3
 800de10:	4623      	mov	r3, r4
 800de12:	f7f2 ff51 	bl	8000cb8 <__aeabi_uldivmod>
 800de16:	4603      	mov	r3, r0
 800de18:	460c      	mov	r4, r1
 800de1a:	461a      	mov	r2, r3
 800de1c:	4b2c      	ldr	r3, [pc, #176]	; (800ded0 <UART_SetConfig+0x384>)
 800de1e:	fba3 1302 	umull	r1, r3, r3, r2
 800de22:	095b      	lsrs	r3, r3, #5
 800de24:	2164      	movs	r1, #100	; 0x64
 800de26:	fb01 f303 	mul.w	r3, r1, r3
 800de2a:	1ad3      	subs	r3, r2, r3
 800de2c:	00db      	lsls	r3, r3, #3
 800de2e:	3332      	adds	r3, #50	; 0x32
 800de30:	4a27      	ldr	r2, [pc, #156]	; (800ded0 <UART_SetConfig+0x384>)
 800de32:	fba2 2303 	umull	r2, r3, r2, r3
 800de36:	095b      	lsrs	r3, r3, #5
 800de38:	005b      	lsls	r3, r3, #1
 800de3a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800de3e:	4498      	add	r8, r3
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	461d      	mov	r5, r3
 800de44:	f04f 0600 	mov.w	r6, #0
 800de48:	46a9      	mov	r9, r5
 800de4a:	46b2      	mov	sl, r6
 800de4c:	eb19 0309 	adds.w	r3, r9, r9
 800de50:	eb4a 040a 	adc.w	r4, sl, sl
 800de54:	4699      	mov	r9, r3
 800de56:	46a2      	mov	sl, r4
 800de58:	eb19 0905 	adds.w	r9, r9, r5
 800de5c:	eb4a 0a06 	adc.w	sl, sl, r6
 800de60:	f04f 0100 	mov.w	r1, #0
 800de64:	f04f 0200 	mov.w	r2, #0
 800de68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800de6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800de70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800de74:	4689      	mov	r9, r1
 800de76:	4692      	mov	sl, r2
 800de78:	eb19 0005 	adds.w	r0, r9, r5
 800de7c:	eb4a 0106 	adc.w	r1, sl, r6
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	461d      	mov	r5, r3
 800de86:	f04f 0600 	mov.w	r6, #0
 800de8a:	196b      	adds	r3, r5, r5
 800de8c:	eb46 0406 	adc.w	r4, r6, r6
 800de90:	461a      	mov	r2, r3
 800de92:	4623      	mov	r3, r4
 800de94:	f7f2 ff10 	bl	8000cb8 <__aeabi_uldivmod>
 800de98:	4603      	mov	r3, r0
 800de9a:	460c      	mov	r4, r1
 800de9c:	461a      	mov	r2, r3
 800de9e:	4b0c      	ldr	r3, [pc, #48]	; (800ded0 <UART_SetConfig+0x384>)
 800dea0:	fba3 1302 	umull	r1, r3, r3, r2
 800dea4:	095b      	lsrs	r3, r3, #5
 800dea6:	2164      	movs	r1, #100	; 0x64
 800dea8:	fb01 f303 	mul.w	r3, r1, r3
 800deac:	1ad3      	subs	r3, r2, r3
 800deae:	00db      	lsls	r3, r3, #3
 800deb0:	3332      	adds	r3, #50	; 0x32
 800deb2:	4a07      	ldr	r2, [pc, #28]	; (800ded0 <UART_SetConfig+0x384>)
 800deb4:	fba2 2303 	umull	r2, r3, r2, r3
 800deb8:	095b      	lsrs	r3, r3, #5
 800deba:	f003 0207 	and.w	r2, r3, #7
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	4442      	add	r2, r8
 800dec4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800dec6:	e1b2      	b.n	800e22e <UART_SetConfig+0x6e2>
 800dec8:	40011000 	.word	0x40011000
 800decc:	40011400 	.word	0x40011400
 800ded0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4ad7      	ldr	r2, [pc, #860]	; (800e238 <UART_SetConfig+0x6ec>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d005      	beq.n	800deea <UART_SetConfig+0x39e>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	4ad6      	ldr	r2, [pc, #856]	; (800e23c <UART_SetConfig+0x6f0>)
 800dee4:	4293      	cmp	r3, r2
 800dee6:	f040 80d1 	bne.w	800e08c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800deea:	f7fc fa41 	bl	800a370 <HAL_RCC_GetPCLK2Freq>
 800deee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	469a      	mov	sl, r3
 800def4:	f04f 0b00 	mov.w	fp, #0
 800def8:	46d0      	mov	r8, sl
 800defa:	46d9      	mov	r9, fp
 800defc:	eb18 0308 	adds.w	r3, r8, r8
 800df00:	eb49 0409 	adc.w	r4, r9, r9
 800df04:	4698      	mov	r8, r3
 800df06:	46a1      	mov	r9, r4
 800df08:	eb18 080a 	adds.w	r8, r8, sl
 800df0c:	eb49 090b 	adc.w	r9, r9, fp
 800df10:	f04f 0100 	mov.w	r1, #0
 800df14:	f04f 0200 	mov.w	r2, #0
 800df18:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800df1c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800df20:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800df24:	4688      	mov	r8, r1
 800df26:	4691      	mov	r9, r2
 800df28:	eb1a 0508 	adds.w	r5, sl, r8
 800df2c:	eb4b 0609 	adc.w	r6, fp, r9
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	685b      	ldr	r3, [r3, #4]
 800df34:	4619      	mov	r1, r3
 800df36:	f04f 0200 	mov.w	r2, #0
 800df3a:	f04f 0300 	mov.w	r3, #0
 800df3e:	f04f 0400 	mov.w	r4, #0
 800df42:	0094      	lsls	r4, r2, #2
 800df44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800df48:	008b      	lsls	r3, r1, #2
 800df4a:	461a      	mov	r2, r3
 800df4c:	4623      	mov	r3, r4
 800df4e:	4628      	mov	r0, r5
 800df50:	4631      	mov	r1, r6
 800df52:	f7f2 feb1 	bl	8000cb8 <__aeabi_uldivmod>
 800df56:	4603      	mov	r3, r0
 800df58:	460c      	mov	r4, r1
 800df5a:	461a      	mov	r2, r3
 800df5c:	4bb8      	ldr	r3, [pc, #736]	; (800e240 <UART_SetConfig+0x6f4>)
 800df5e:	fba3 2302 	umull	r2, r3, r3, r2
 800df62:	095b      	lsrs	r3, r3, #5
 800df64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	469b      	mov	fp, r3
 800df6c:	f04f 0c00 	mov.w	ip, #0
 800df70:	46d9      	mov	r9, fp
 800df72:	46e2      	mov	sl, ip
 800df74:	eb19 0309 	adds.w	r3, r9, r9
 800df78:	eb4a 040a 	adc.w	r4, sl, sl
 800df7c:	4699      	mov	r9, r3
 800df7e:	46a2      	mov	sl, r4
 800df80:	eb19 090b 	adds.w	r9, r9, fp
 800df84:	eb4a 0a0c 	adc.w	sl, sl, ip
 800df88:	f04f 0100 	mov.w	r1, #0
 800df8c:	f04f 0200 	mov.w	r2, #0
 800df90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800df94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800df98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800df9c:	4689      	mov	r9, r1
 800df9e:	4692      	mov	sl, r2
 800dfa0:	eb1b 0509 	adds.w	r5, fp, r9
 800dfa4:	eb4c 060a 	adc.w	r6, ip, sl
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	685b      	ldr	r3, [r3, #4]
 800dfac:	4619      	mov	r1, r3
 800dfae:	f04f 0200 	mov.w	r2, #0
 800dfb2:	f04f 0300 	mov.w	r3, #0
 800dfb6:	f04f 0400 	mov.w	r4, #0
 800dfba:	0094      	lsls	r4, r2, #2
 800dfbc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800dfc0:	008b      	lsls	r3, r1, #2
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	4623      	mov	r3, r4
 800dfc6:	4628      	mov	r0, r5
 800dfc8:	4631      	mov	r1, r6
 800dfca:	f7f2 fe75 	bl	8000cb8 <__aeabi_uldivmod>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	460c      	mov	r4, r1
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	4b9a      	ldr	r3, [pc, #616]	; (800e240 <UART_SetConfig+0x6f4>)
 800dfd6:	fba3 1302 	umull	r1, r3, r3, r2
 800dfda:	095b      	lsrs	r3, r3, #5
 800dfdc:	2164      	movs	r1, #100	; 0x64
 800dfde:	fb01 f303 	mul.w	r3, r1, r3
 800dfe2:	1ad3      	subs	r3, r2, r3
 800dfe4:	011b      	lsls	r3, r3, #4
 800dfe6:	3332      	adds	r3, #50	; 0x32
 800dfe8:	4a95      	ldr	r2, [pc, #596]	; (800e240 <UART_SetConfig+0x6f4>)
 800dfea:	fba2 2303 	umull	r2, r3, r2, r3
 800dfee:	095b      	lsrs	r3, r3, #5
 800dff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dff4:	4498      	add	r8, r3
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	469b      	mov	fp, r3
 800dffa:	f04f 0c00 	mov.w	ip, #0
 800dffe:	46d9      	mov	r9, fp
 800e000:	46e2      	mov	sl, ip
 800e002:	eb19 0309 	adds.w	r3, r9, r9
 800e006:	eb4a 040a 	adc.w	r4, sl, sl
 800e00a:	4699      	mov	r9, r3
 800e00c:	46a2      	mov	sl, r4
 800e00e:	eb19 090b 	adds.w	r9, r9, fp
 800e012:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e016:	f04f 0100 	mov.w	r1, #0
 800e01a:	f04f 0200 	mov.w	r2, #0
 800e01e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e022:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e026:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e02a:	4689      	mov	r9, r1
 800e02c:	4692      	mov	sl, r2
 800e02e:	eb1b 0509 	adds.w	r5, fp, r9
 800e032:	eb4c 060a 	adc.w	r6, ip, sl
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	4619      	mov	r1, r3
 800e03c:	f04f 0200 	mov.w	r2, #0
 800e040:	f04f 0300 	mov.w	r3, #0
 800e044:	f04f 0400 	mov.w	r4, #0
 800e048:	0094      	lsls	r4, r2, #2
 800e04a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e04e:	008b      	lsls	r3, r1, #2
 800e050:	461a      	mov	r2, r3
 800e052:	4623      	mov	r3, r4
 800e054:	4628      	mov	r0, r5
 800e056:	4631      	mov	r1, r6
 800e058:	f7f2 fe2e 	bl	8000cb8 <__aeabi_uldivmod>
 800e05c:	4603      	mov	r3, r0
 800e05e:	460c      	mov	r4, r1
 800e060:	461a      	mov	r2, r3
 800e062:	4b77      	ldr	r3, [pc, #476]	; (800e240 <UART_SetConfig+0x6f4>)
 800e064:	fba3 1302 	umull	r1, r3, r3, r2
 800e068:	095b      	lsrs	r3, r3, #5
 800e06a:	2164      	movs	r1, #100	; 0x64
 800e06c:	fb01 f303 	mul.w	r3, r1, r3
 800e070:	1ad3      	subs	r3, r2, r3
 800e072:	011b      	lsls	r3, r3, #4
 800e074:	3332      	adds	r3, #50	; 0x32
 800e076:	4a72      	ldr	r2, [pc, #456]	; (800e240 <UART_SetConfig+0x6f4>)
 800e078:	fba2 2303 	umull	r2, r3, r2, r3
 800e07c:	095b      	lsrs	r3, r3, #5
 800e07e:	f003 020f 	and.w	r2, r3, #15
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	4442      	add	r2, r8
 800e088:	609a      	str	r2, [r3, #8]
 800e08a:	e0d0      	b.n	800e22e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800e08c:	f7fc f95c 	bl	800a348 <HAL_RCC_GetPCLK1Freq>
 800e090:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	469a      	mov	sl, r3
 800e096:	f04f 0b00 	mov.w	fp, #0
 800e09a:	46d0      	mov	r8, sl
 800e09c:	46d9      	mov	r9, fp
 800e09e:	eb18 0308 	adds.w	r3, r8, r8
 800e0a2:	eb49 0409 	adc.w	r4, r9, r9
 800e0a6:	4698      	mov	r8, r3
 800e0a8:	46a1      	mov	r9, r4
 800e0aa:	eb18 080a 	adds.w	r8, r8, sl
 800e0ae:	eb49 090b 	adc.w	r9, r9, fp
 800e0b2:	f04f 0100 	mov.w	r1, #0
 800e0b6:	f04f 0200 	mov.w	r2, #0
 800e0ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e0be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e0c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e0c6:	4688      	mov	r8, r1
 800e0c8:	4691      	mov	r9, r2
 800e0ca:	eb1a 0508 	adds.w	r5, sl, r8
 800e0ce:	eb4b 0609 	adc.w	r6, fp, r9
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	f04f 0200 	mov.w	r2, #0
 800e0dc:	f04f 0300 	mov.w	r3, #0
 800e0e0:	f04f 0400 	mov.w	r4, #0
 800e0e4:	0094      	lsls	r4, r2, #2
 800e0e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e0ea:	008b      	lsls	r3, r1, #2
 800e0ec:	461a      	mov	r2, r3
 800e0ee:	4623      	mov	r3, r4
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	4631      	mov	r1, r6
 800e0f4:	f7f2 fde0 	bl	8000cb8 <__aeabi_uldivmod>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	460c      	mov	r4, r1
 800e0fc:	461a      	mov	r2, r3
 800e0fe:	4b50      	ldr	r3, [pc, #320]	; (800e240 <UART_SetConfig+0x6f4>)
 800e100:	fba3 2302 	umull	r2, r3, r3, r2
 800e104:	095b      	lsrs	r3, r3, #5
 800e106:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	469b      	mov	fp, r3
 800e10e:	f04f 0c00 	mov.w	ip, #0
 800e112:	46d9      	mov	r9, fp
 800e114:	46e2      	mov	sl, ip
 800e116:	eb19 0309 	adds.w	r3, r9, r9
 800e11a:	eb4a 040a 	adc.w	r4, sl, sl
 800e11e:	4699      	mov	r9, r3
 800e120:	46a2      	mov	sl, r4
 800e122:	eb19 090b 	adds.w	r9, r9, fp
 800e126:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e12a:	f04f 0100 	mov.w	r1, #0
 800e12e:	f04f 0200 	mov.w	r2, #0
 800e132:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e136:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e13a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e13e:	4689      	mov	r9, r1
 800e140:	4692      	mov	sl, r2
 800e142:	eb1b 0509 	adds.w	r5, fp, r9
 800e146:	eb4c 060a 	adc.w	r6, ip, sl
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	4619      	mov	r1, r3
 800e150:	f04f 0200 	mov.w	r2, #0
 800e154:	f04f 0300 	mov.w	r3, #0
 800e158:	f04f 0400 	mov.w	r4, #0
 800e15c:	0094      	lsls	r4, r2, #2
 800e15e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e162:	008b      	lsls	r3, r1, #2
 800e164:	461a      	mov	r2, r3
 800e166:	4623      	mov	r3, r4
 800e168:	4628      	mov	r0, r5
 800e16a:	4631      	mov	r1, r6
 800e16c:	f7f2 fda4 	bl	8000cb8 <__aeabi_uldivmod>
 800e170:	4603      	mov	r3, r0
 800e172:	460c      	mov	r4, r1
 800e174:	461a      	mov	r2, r3
 800e176:	4b32      	ldr	r3, [pc, #200]	; (800e240 <UART_SetConfig+0x6f4>)
 800e178:	fba3 1302 	umull	r1, r3, r3, r2
 800e17c:	095b      	lsrs	r3, r3, #5
 800e17e:	2164      	movs	r1, #100	; 0x64
 800e180:	fb01 f303 	mul.w	r3, r1, r3
 800e184:	1ad3      	subs	r3, r2, r3
 800e186:	011b      	lsls	r3, r3, #4
 800e188:	3332      	adds	r3, #50	; 0x32
 800e18a:	4a2d      	ldr	r2, [pc, #180]	; (800e240 <UART_SetConfig+0x6f4>)
 800e18c:	fba2 2303 	umull	r2, r3, r2, r3
 800e190:	095b      	lsrs	r3, r3, #5
 800e192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e196:	4498      	add	r8, r3
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	469b      	mov	fp, r3
 800e19c:	f04f 0c00 	mov.w	ip, #0
 800e1a0:	46d9      	mov	r9, fp
 800e1a2:	46e2      	mov	sl, ip
 800e1a4:	eb19 0309 	adds.w	r3, r9, r9
 800e1a8:	eb4a 040a 	adc.w	r4, sl, sl
 800e1ac:	4699      	mov	r9, r3
 800e1ae:	46a2      	mov	sl, r4
 800e1b0:	eb19 090b 	adds.w	r9, r9, fp
 800e1b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e1b8:	f04f 0100 	mov.w	r1, #0
 800e1bc:	f04f 0200 	mov.w	r2, #0
 800e1c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e1c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e1c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e1cc:	4689      	mov	r9, r1
 800e1ce:	4692      	mov	sl, r2
 800e1d0:	eb1b 0509 	adds.w	r5, fp, r9
 800e1d4:	eb4c 060a 	adc.w	r6, ip, sl
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	4619      	mov	r1, r3
 800e1de:	f04f 0200 	mov.w	r2, #0
 800e1e2:	f04f 0300 	mov.w	r3, #0
 800e1e6:	f04f 0400 	mov.w	r4, #0
 800e1ea:	0094      	lsls	r4, r2, #2
 800e1ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e1f0:	008b      	lsls	r3, r1, #2
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	4623      	mov	r3, r4
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	4631      	mov	r1, r6
 800e1fa:	f7f2 fd5d 	bl	8000cb8 <__aeabi_uldivmod>
 800e1fe:	4603      	mov	r3, r0
 800e200:	460c      	mov	r4, r1
 800e202:	461a      	mov	r2, r3
 800e204:	4b0e      	ldr	r3, [pc, #56]	; (800e240 <UART_SetConfig+0x6f4>)
 800e206:	fba3 1302 	umull	r1, r3, r3, r2
 800e20a:	095b      	lsrs	r3, r3, #5
 800e20c:	2164      	movs	r1, #100	; 0x64
 800e20e:	fb01 f303 	mul.w	r3, r1, r3
 800e212:	1ad3      	subs	r3, r2, r3
 800e214:	011b      	lsls	r3, r3, #4
 800e216:	3332      	adds	r3, #50	; 0x32
 800e218:	4a09      	ldr	r2, [pc, #36]	; (800e240 <UART_SetConfig+0x6f4>)
 800e21a:	fba2 2303 	umull	r2, r3, r2, r3
 800e21e:	095b      	lsrs	r3, r3, #5
 800e220:	f003 020f 	and.w	r2, r3, #15
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4442      	add	r2, r8
 800e22a:	609a      	str	r2, [r3, #8]
}
 800e22c:	e7ff      	b.n	800e22e <UART_SetConfig+0x6e2>
 800e22e:	bf00      	nop
 800e230:	3714      	adds	r7, #20
 800e232:	46bd      	mov	sp, r7
 800e234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e238:	40011000 	.word	0x40011000
 800e23c:	40011400 	.word	0x40011400
 800e240:	51eb851f 	.word	0x51eb851f

0800e244 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800e244:	b084      	sub	sp, #16
 800e246:	b480      	push	{r7}
 800e248:	b085      	sub	sp, #20
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
 800e24e:	f107 001c 	add.w	r0, r7, #28
 800e252:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e256:	2300      	movs	r3, #0
 800e258:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e25a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e25c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e25e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e262:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e264:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e266:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e26a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e26e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e270:	68fa      	ldr	r2, [r7, #12]
 800e272:	4313      	orrs	r3, r2
 800e274:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	685b      	ldr	r3, [r3, #4]
 800e27a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800e27e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e282:	68fa      	ldr	r2, [r7, #12]
 800e284:	431a      	orrs	r2, r3
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e28a:	2300      	movs	r3, #0
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3714      	adds	r7, #20
 800e290:	46bd      	mov	sp, r7
 800e292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e296:	b004      	add	sp, #16
 800e298:	4770      	bx	lr

0800e29a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800e29a:	b480      	push	{r7}
 800e29c:	b083      	sub	sp, #12
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	370c      	adds	r7, #12
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b2:	4770      	bx	lr

0800e2b4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800e2b4:	b480      	push	{r7}
 800e2b6:	b083      	sub	sp, #12
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e2c8:	2300      	movs	r3, #0
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	370c      	adds	r7, #12
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d4:	4770      	bx	lr

0800e2d6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800e2d6:	b580      	push	{r7, lr}
 800e2d8:	b082      	sub	sp, #8
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2203      	movs	r2, #3
 800e2e2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800e2e4:	2002      	movs	r0, #2
 800e2e6:	f7f9 fbdd 	bl	8007aa4 <HAL_Delay>
  
  return HAL_OK;
 800e2ea:	2300      	movs	r3, #0
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3708      	adds	r7, #8
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f003 0303 	and.w	r3, r3, #3
}
 800e304:	4618      	mov	r0, r3
 800e306:	370c      	adds	r7, #12
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr

0800e310 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800e310:	b480      	push	{r7}
 800e312:	b085      	sub	sp, #20
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e31a:	2300      	movs	r3, #0
 800e31c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	681a      	ldr	r2, [r3, #0]
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e32e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e334:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e33a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e33c:	68fa      	ldr	r2, [r7, #12]
 800e33e:	4313      	orrs	r3, r2
 800e340:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	68db      	ldr	r3, [r3, #12]
 800e346:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e34a:	f023 030f 	bic.w	r3, r3, #15
 800e34e:	68fa      	ldr	r2, [r7, #12]
 800e350:	431a      	orrs	r2, r3
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e356:	2300      	movs	r3, #0
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3714      	adds	r7, #20
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr

0800e364 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800e364:	b480      	push	{r7}
 800e366:	b083      	sub	sp, #12
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	691b      	ldr	r3, [r3, #16]
 800e370:	b2db      	uxtb	r3, r3
}
 800e372:	4618      	mov	r0, r3
 800e374:	370c      	adds	r7, #12
 800e376:	46bd      	mov	sp, r7
 800e378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37c:	4770      	bx	lr

0800e37e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800e37e:	b480      	push	{r7}
 800e380:	b085      	sub	sp, #20
 800e382:	af00      	add	r7, sp, #0
 800e384:	6078      	str	r0, [r7, #4]
 800e386:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	3314      	adds	r3, #20
 800e38c:	461a      	mov	r2, r3
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	4413      	add	r3, r2
 800e392:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
}  
 800e398:	4618      	mov	r0, r3
 800e39a:	3714      	adds	r7, #20
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr

0800e3a4 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b085      	sub	sp, #20
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	685a      	ldr	r2, [r3, #4]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e3ca:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e3d0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e3d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e3d8:	68fa      	ldr	r2, [r7, #12]
 800e3da:	4313      	orrs	r3, r2
 800e3dc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3e2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	431a      	orrs	r2, r3
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e3ee:	2300      	movs	r3, #0

}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3714      	adds	r7, #20
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr

0800e3fc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b088      	sub	sp, #32
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e40a:	2310      	movs	r3, #16
 800e40c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e40e:	2340      	movs	r3, #64	; 0x40
 800e410:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e412:	2300      	movs	r3, #0
 800e414:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e41a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e41c:	f107 0308 	add.w	r3, r7, #8
 800e420:	4619      	mov	r1, r3
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f7ff ff74 	bl	800e310 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800e428:	f241 3288 	movw	r2, #5000	; 0x1388
 800e42c:	2110      	movs	r1, #16
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f000 fa40 	bl	800e8b4 <SDMMC_GetCmdResp1>
 800e434:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e436:	69fb      	ldr	r3, [r7, #28]
}
 800e438:	4618      	mov	r0, r3
 800e43a:	3720      	adds	r7, #32
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}

0800e440 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b088      	sub	sp, #32
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e44e:	2311      	movs	r3, #17
 800e450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e452:	2340      	movs	r3, #64	; 0x40
 800e454:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e456:	2300      	movs	r3, #0
 800e458:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e45a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e45e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e460:	f107 0308 	add.w	r3, r7, #8
 800e464:	4619      	mov	r1, r3
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f7ff ff52 	bl	800e310 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e46c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e470:	2111      	movs	r1, #17
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f000 fa1e 	bl	800e8b4 <SDMMC_GetCmdResp1>
 800e478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e47a:	69fb      	ldr	r3, [r7, #28]
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3720      	adds	r7, #32
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}

0800e484 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b088      	sub	sp, #32
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
 800e48c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e492:	2312      	movs	r3, #18
 800e494:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e496:	2340      	movs	r3, #64	; 0x40
 800e498:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e49a:	2300      	movs	r3, #0
 800e49c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e49e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e4a4:	f107 0308 	add.w	r3, r7, #8
 800e4a8:	4619      	mov	r1, r3
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f7ff ff30 	bl	800e310 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e4b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4b4:	2112      	movs	r1, #18
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f000 f9fc 	bl	800e8b4 <SDMMC_GetCmdResp1>
 800e4bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4be:	69fb      	ldr	r3, [r7, #28]
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3720      	adds	r7, #32
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}

0800e4c8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b088      	sub	sp, #32
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e4d6:	2318      	movs	r3, #24
 800e4d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e4da:	2340      	movs	r3, #64	; 0x40
 800e4dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e4e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e4e8:	f107 0308 	add.w	r3, r7, #8
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f7ff ff0e 	bl	800e310 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e4f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4f8:	2118      	movs	r1, #24
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f000 f9da 	bl	800e8b4 <SDMMC_GetCmdResp1>
 800e500:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e502:	69fb      	ldr	r3, [r7, #28]
}
 800e504:	4618      	mov	r0, r3
 800e506:	3720      	adds	r7, #32
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b088      	sub	sp, #32
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e51a:	2319      	movs	r3, #25
 800e51c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e51e:	2340      	movs	r3, #64	; 0x40
 800e520:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e522:	2300      	movs	r3, #0
 800e524:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e52a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e52c:	f107 0308 	add.w	r3, r7, #8
 800e530:	4619      	mov	r1, r3
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f7ff feec 	bl	800e310 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e538:	f241 3288 	movw	r2, #5000	; 0x1388
 800e53c:	2119      	movs	r1, #25
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f000 f9b8 	bl	800e8b4 <SDMMC_GetCmdResp1>
 800e544:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e546:	69fb      	ldr	r3, [r7, #28]
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3720      	adds	r7, #32
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b088      	sub	sp, #32
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e558:	2300      	movs	r3, #0
 800e55a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e55c:	230c      	movs	r3, #12
 800e55e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e560:	2340      	movs	r3, #64	; 0x40
 800e562:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e564:	2300      	movs	r3, #0
 800e566:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e56c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e56e:	f107 0308 	add.w	r3, r7, #8
 800e572:	4619      	mov	r1, r3
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f7ff fecb 	bl	800e310 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800e57a:	4a05      	ldr	r2, [pc, #20]	; (800e590 <SDMMC_CmdStopTransfer+0x40>)
 800e57c:	210c      	movs	r1, #12
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f000 f998 	bl	800e8b4 <SDMMC_GetCmdResp1>
 800e584:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e586:	69fb      	ldr	r3, [r7, #28]
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3720      	adds	r7, #32
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}
 800e590:	05f5e100 	.word	0x05f5e100

0800e594 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b08a      	sub	sp, #40	; 0x28
 800e598:	af00      	add	r7, sp, #0
 800e59a:	60f8      	str	r0, [r7, #12]
 800e59c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e5a4:	2307      	movs	r3, #7
 800e5a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e5a8:	2340      	movs	r3, #64	; 0x40
 800e5aa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e5b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5b4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e5b6:	f107 0310 	add.w	r3, r7, #16
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	68f8      	ldr	r0, [r7, #12]
 800e5be:	f7ff fea7 	bl	800e310 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e5c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5c6:	2107      	movs	r1, #7
 800e5c8:	68f8      	ldr	r0, [r7, #12]
 800e5ca:	f000 f973 	bl	800e8b4 <SDMMC_GetCmdResp1>
 800e5ce:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3728      	adds	r7, #40	; 0x28
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}

0800e5da <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e5da:	b580      	push	{r7, lr}
 800e5dc:	b088      	sub	sp, #32
 800e5de:	af00      	add	r7, sp, #0
 800e5e0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e5f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e5f8:	f107 0308 	add.w	r3, r7, #8
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f7ff fe86 	bl	800e310 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f000 f92d 	bl	800e864 <SDMMC_GetCmdError>
 800e60a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e60c:	69fb      	ldr	r3, [r7, #28]
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3720      	adds	r7, #32
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}

0800e616 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e616:	b580      	push	{r7, lr}
 800e618:	b088      	sub	sp, #32
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e61e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e622:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e624:	2308      	movs	r3, #8
 800e626:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e628:	2340      	movs	r3, #64	; 0x40
 800e62a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e62c:	2300      	movs	r3, #0
 800e62e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e634:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e636:	f107 0308 	add.w	r3, r7, #8
 800e63a:	4619      	mov	r1, r3
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f7ff fe67 	bl	800e310 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f000 fb16 	bl	800ec74 <SDMMC_GetCmdResp7>
 800e648:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e64a:	69fb      	ldr	r3, [r7, #28]
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	3720      	adds	r7, #32
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}

0800e654 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b088      	sub	sp, #32
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e662:	2337      	movs	r3, #55	; 0x37
 800e664:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e666:	2340      	movs	r3, #64	; 0x40
 800e668:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e66a:	2300      	movs	r3, #0
 800e66c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e66e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e672:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e674:	f107 0308 	add.w	r3, r7, #8
 800e678:	4619      	mov	r1, r3
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f7ff fe48 	bl	800e310 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e680:	f241 3288 	movw	r2, #5000	; 0x1388
 800e684:	2137      	movs	r1, #55	; 0x37
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f000 f914 	bl	800e8b4 <SDMMC_GetCmdResp1>
 800e68c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e68e:	69fb      	ldr	r3, [r7, #28]
}
 800e690:	4618      	mov	r0, r3
 800e692:	3720      	adds	r7, #32
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b088      	sub	sp, #32
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e6a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e6ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e6ae:	2329      	movs	r3, #41	; 0x29
 800e6b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e6b2:	2340      	movs	r3, #64	; 0x40
 800e6b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e6ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e6c0:	f107 0308 	add.w	r3, r7, #8
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f7ff fe22 	bl	800e310 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 fa23 	bl	800eb18 <SDMMC_GetCmdResp3>
 800e6d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6d4:	69fb      	ldr	r3, [r7, #28]
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3720      	adds	r7, #32
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800e6de:	b580      	push	{r7, lr}
 800e6e0:	b088      	sub	sp, #32
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	6078      	str	r0, [r7, #4]
 800e6e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e6ec:	2306      	movs	r3, #6
 800e6ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e6f0:	2340      	movs	r3, #64	; 0x40
 800e6f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e6f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e6fe:	f107 0308 	add.w	r3, r7, #8
 800e702:	4619      	mov	r1, r3
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f7ff fe03 	bl	800e310 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800e70a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e70e:	2106      	movs	r1, #6
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f000 f8cf 	bl	800e8b4 <SDMMC_GetCmdResp1>
 800e716:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e718:	69fb      	ldr	r3, [r7, #28]
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3720      	adds	r7, #32
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}

0800e722 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800e722:	b580      	push	{r7, lr}
 800e724:	b088      	sub	sp, #32
 800e726:	af00      	add	r7, sp, #0
 800e728:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e72a:	2300      	movs	r3, #0
 800e72c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e72e:	2333      	movs	r3, #51	; 0x33
 800e730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e732:	2340      	movs	r3, #64	; 0x40
 800e734:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e736:	2300      	movs	r3, #0
 800e738:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e73a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e73e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e740:	f107 0308 	add.w	r3, r7, #8
 800e744:	4619      	mov	r1, r3
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f7ff fde2 	bl	800e310 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800e74c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e750:	2133      	movs	r1, #51	; 0x33
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f000 f8ae 	bl	800e8b4 <SDMMC_GetCmdResp1>
 800e758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e75a:	69fb      	ldr	r3, [r7, #28]
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3720      	adds	r7, #32
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}

0800e764 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b088      	sub	sp, #32
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e76c:	2300      	movs	r3, #0
 800e76e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e770:	2302      	movs	r3, #2
 800e772:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e774:	23c0      	movs	r3, #192	; 0xc0
 800e776:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e778:	2300      	movs	r3, #0
 800e77a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e77c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e780:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e782:	f107 0308 	add.w	r3, r7, #8
 800e786:	4619      	mov	r1, r3
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f7ff fdc1 	bl	800e310 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f000 f97c 	bl	800ea8c <SDMMC_GetCmdResp2>
 800e794:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e796:	69fb      	ldr	r3, [r7, #28]
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3720      	adds	r7, #32
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}

0800e7a0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b088      	sub	sp, #32
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e7ae:	2309      	movs	r3, #9
 800e7b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e7b2:	23c0      	movs	r3, #192	; 0xc0
 800e7b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e7ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e7c0:	f107 0308 	add.w	r3, r7, #8
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f7ff fda2 	bl	800e310 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f000 f95d 	bl	800ea8c <SDMMC_GetCmdResp2>
 800e7d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e7d4:	69fb      	ldr	r3, [r7, #28]
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3720      	adds	r7, #32
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}

0800e7de <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e7de:	b580      	push	{r7, lr}
 800e7e0:	b088      	sub	sp, #32
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	6078      	str	r0, [r7, #4]
 800e7e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e7ec:	2303      	movs	r3, #3
 800e7ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e7f0:	2340      	movs	r3, #64	; 0x40
 800e7f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e7f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e7fe:	f107 0308 	add.w	r3, r7, #8
 800e802:	4619      	mov	r1, r3
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f7ff fd83 	bl	800e310 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e80a:	683a      	ldr	r2, [r7, #0]
 800e80c:	2103      	movs	r1, #3
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f000 f9bc 	bl	800eb8c <SDMMC_GetCmdResp6>
 800e814:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e816:	69fb      	ldr	r3, [r7, #28]
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3720      	adds	r7, #32
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}

0800e820 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b088      	sub	sp, #32
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e82e:	230d      	movs	r3, #13
 800e830:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e832:	2340      	movs	r3, #64	; 0x40
 800e834:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e836:	2300      	movs	r3, #0
 800e838:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e83a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e83e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e840:	f107 0308 	add.w	r3, r7, #8
 800e844:	4619      	mov	r1, r3
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f7ff fd62 	bl	800e310 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800e84c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e850:	210d      	movs	r1, #13
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f000 f82e 	bl	800e8b4 <SDMMC_GetCmdResp1>
 800e858:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e85a:	69fb      	ldr	r3, [r7, #28]
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	3720      	adds	r7, #32
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}

0800e864 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e864:	b490      	push	{r4, r7}
 800e866:	b082      	sub	sp, #8
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e86c:	4b0f      	ldr	r3, [pc, #60]	; (800e8ac <SDMMC_GetCmdError+0x48>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a0f      	ldr	r2, [pc, #60]	; (800e8b0 <SDMMC_GetCmdError+0x4c>)
 800e872:	fba2 2303 	umull	r2, r3, r2, r3
 800e876:	0a5b      	lsrs	r3, r3, #9
 800e878:	f241 3288 	movw	r2, #5000	; 0x1388
 800e87c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e880:	4623      	mov	r3, r4
 800e882:	1e5c      	subs	r4, r3, #1
 800e884:	2b00      	cmp	r3, #0
 800e886:	d102      	bne.n	800e88e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e888:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e88c:	e009      	b.n	800e8a2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e896:	2b00      	cmp	r3, #0
 800e898:	d0f2      	beq.n	800e880 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	22c5      	movs	r2, #197	; 0xc5
 800e89e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e8a0:	2300      	movs	r3, #0
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3708      	adds	r7, #8
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bc90      	pop	{r4, r7}
 800e8aa:	4770      	bx	lr
 800e8ac:	20000000 	.word	0x20000000
 800e8b0:	10624dd3 	.word	0x10624dd3

0800e8b4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e8b4:	b590      	push	{r4, r7, lr}
 800e8b6:	b087      	sub	sp, #28
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	60f8      	str	r0, [r7, #12]
 800e8bc:	460b      	mov	r3, r1
 800e8be:	607a      	str	r2, [r7, #4]
 800e8c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e8c2:	4b6f      	ldr	r3, [pc, #444]	; (800ea80 <SDMMC_GetCmdResp1+0x1cc>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	4a6f      	ldr	r2, [pc, #444]	; (800ea84 <SDMMC_GetCmdResp1+0x1d0>)
 800e8c8:	fba2 2303 	umull	r2, r3, r2, r3
 800e8cc:	0a5b      	lsrs	r3, r3, #9
 800e8ce:	687a      	ldr	r2, [r7, #4]
 800e8d0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e8d4:	4623      	mov	r3, r4
 800e8d6:	1e5c      	subs	r4, r3, #1
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d102      	bne.n	800e8e2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e8dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e8e0:	e0c9      	b.n	800ea76 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8e6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d0f0      	beq.n	800e8d4 <SDMMC_GetCmdResp1+0x20>
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d1eb      	bne.n	800e8d4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e900:	f003 0304 	and.w	r3, r3, #4
 800e904:	2b00      	cmp	r3, #0
 800e906:	d004      	beq.n	800e912 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	2204      	movs	r2, #4
 800e90c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e90e:	2304      	movs	r3, #4
 800e910:	e0b1      	b.n	800ea76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e916:	f003 0301 	and.w	r3, r3, #1
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d004      	beq.n	800e928 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	2201      	movs	r2, #1
 800e922:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e924:	2301      	movs	r3, #1
 800e926:	e0a6      	b.n	800ea76 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	22c5      	movs	r2, #197	; 0xc5
 800e92c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e92e:	68f8      	ldr	r0, [r7, #12]
 800e930:	f7ff fd18 	bl	800e364 <SDIO_GetCommandResponse>
 800e934:	4603      	mov	r3, r0
 800e936:	461a      	mov	r2, r3
 800e938:	7afb      	ldrb	r3, [r7, #11]
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d001      	beq.n	800e942 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e93e:	2301      	movs	r3, #1
 800e940:	e099      	b.n	800ea76 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e942:	2100      	movs	r1, #0
 800e944:	68f8      	ldr	r0, [r7, #12]
 800e946:	f7ff fd1a 	bl	800e37e <SDIO_GetResponse>
 800e94a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e94c:	693a      	ldr	r2, [r7, #16]
 800e94e:	4b4e      	ldr	r3, [pc, #312]	; (800ea88 <SDMMC_GetCmdResp1+0x1d4>)
 800e950:	4013      	ands	r3, r2
 800e952:	2b00      	cmp	r3, #0
 800e954:	d101      	bne.n	800e95a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800e956:	2300      	movs	r3, #0
 800e958:	e08d      	b.n	800ea76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	da02      	bge.n	800e966 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e960:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e964:	e087      	b.n	800ea76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d001      	beq.n	800e974 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e970:	2340      	movs	r3, #64	; 0x40
 800e972:	e080      	b.n	800ea76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d001      	beq.n	800e982 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e97e:	2380      	movs	r3, #128	; 0x80
 800e980:	e079      	b.n	800ea76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d002      	beq.n	800e992 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e98c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e990:	e071      	b.n	800ea76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e992:	693b      	ldr	r3, [r7, #16]
 800e994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d002      	beq.n	800e9a2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e99c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e9a0:	e069      	b.n	800ea76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d002      	beq.n	800e9b2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e9ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9b0:	e061      	b.n	800ea76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d002      	beq.n	800e9c2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e9bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e9c0:	e059      	b.n	800ea76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d002      	beq.n	800e9d2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e9cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e9d0:	e051      	b.n	800ea76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d002      	beq.n	800e9e2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e9dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e9e0:	e049      	b.n	800ea76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d002      	beq.n	800e9f2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e9ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e9f0:	e041      	b.n	800ea76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d002      	beq.n	800ea02 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800e9fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea00:	e039      	b.n	800ea76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d002      	beq.n	800ea12 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ea0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ea10:	e031      	b.n	800ea76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ea12:	693b      	ldr	r3, [r7, #16]
 800ea14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d002      	beq.n	800ea22 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ea1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ea20:	e029      	b.n	800ea76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d002      	beq.n	800ea32 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ea2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ea30:	e021      	b.n	800ea76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ea32:	693b      	ldr	r3, [r7, #16]
 800ea34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d002      	beq.n	800ea42 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ea3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ea40:	e019      	b.n	800ea76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d002      	beq.n	800ea52 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ea4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ea50:	e011      	b.n	800ea76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ea52:	693b      	ldr	r3, [r7, #16]
 800ea54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d002      	beq.n	800ea62 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ea5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ea60:	e009      	b.n	800ea76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	f003 0308 	and.w	r3, r3, #8
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d002      	beq.n	800ea72 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ea6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ea70:	e001      	b.n	800ea76 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ea72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	371c      	adds	r7, #28
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd90      	pop	{r4, r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	20000000 	.word	0x20000000
 800ea84:	10624dd3 	.word	0x10624dd3
 800ea88:	fdffe008 	.word	0xfdffe008

0800ea8c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800ea8c:	b490      	push	{r4, r7}
 800ea8e:	b084      	sub	sp, #16
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ea94:	4b1e      	ldr	r3, [pc, #120]	; (800eb10 <SDMMC_GetCmdResp2+0x84>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	4a1e      	ldr	r2, [pc, #120]	; (800eb14 <SDMMC_GetCmdResp2+0x88>)
 800ea9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ea9e:	0a5b      	lsrs	r3, r3, #9
 800eaa0:	f241 3288 	movw	r2, #5000	; 0x1388
 800eaa4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800eaa8:	4623      	mov	r3, r4
 800eaaa:	1e5c      	subs	r4, r3, #1
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d102      	bne.n	800eab6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eab0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eab4:	e026      	b.n	800eb04 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d0f0      	beq.n	800eaa8 <SDMMC_GetCmdResp2+0x1c>
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d1eb      	bne.n	800eaa8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ead4:	f003 0304 	and.w	r3, r3, #4
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d004      	beq.n	800eae6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2204      	movs	r2, #4
 800eae0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eae2:	2304      	movs	r3, #4
 800eae4:	e00e      	b.n	800eb04 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaea:	f003 0301 	and.w	r3, r3, #1
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d004      	beq.n	800eafc <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eaf8:	2301      	movs	r3, #1
 800eafa:	e003      	b.n	800eb04 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	22c5      	movs	r2, #197	; 0xc5
 800eb00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800eb02:	2300      	movs	r3, #0
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3710      	adds	r7, #16
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bc90      	pop	{r4, r7}
 800eb0c:	4770      	bx	lr
 800eb0e:	bf00      	nop
 800eb10:	20000000 	.word	0x20000000
 800eb14:	10624dd3 	.word	0x10624dd3

0800eb18 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800eb18:	b490      	push	{r4, r7}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eb20:	4b18      	ldr	r3, [pc, #96]	; (800eb84 <SDMMC_GetCmdResp3+0x6c>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	4a18      	ldr	r2, [pc, #96]	; (800eb88 <SDMMC_GetCmdResp3+0x70>)
 800eb26:	fba2 2303 	umull	r2, r3, r2, r3
 800eb2a:	0a5b      	lsrs	r3, r3, #9
 800eb2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb30:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800eb34:	4623      	mov	r3, r4
 800eb36:	1e5c      	subs	r4, r3, #1
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d102      	bne.n	800eb42 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eb3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb40:	e01b      	b.n	800eb7a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb46:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d0f0      	beq.n	800eb34 <SDMMC_GetCmdResp3+0x1c>
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d1eb      	bne.n	800eb34 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb60:	f003 0304 	and.w	r3, r3, #4
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d004      	beq.n	800eb72 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2204      	movs	r2, #4
 800eb6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eb6e:	2304      	movs	r3, #4
 800eb70:	e003      	b.n	800eb7a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	22c5      	movs	r2, #197	; 0xc5
 800eb76:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800eb78:	2300      	movs	r3, #0
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3710      	adds	r7, #16
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bc90      	pop	{r4, r7}
 800eb82:	4770      	bx	lr
 800eb84:	20000000 	.word	0x20000000
 800eb88:	10624dd3 	.word	0x10624dd3

0800eb8c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800eb8c:	b590      	push	{r4, r7, lr}
 800eb8e:	b087      	sub	sp, #28
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	460b      	mov	r3, r1
 800eb96:	607a      	str	r2, [r7, #4]
 800eb98:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eb9a:	4b34      	ldr	r3, [pc, #208]	; (800ec6c <SDMMC_GetCmdResp6+0xe0>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	4a34      	ldr	r2, [pc, #208]	; (800ec70 <SDMMC_GetCmdResp6+0xe4>)
 800eba0:	fba2 2303 	umull	r2, r3, r2, r3
 800eba4:	0a5b      	lsrs	r3, r3, #9
 800eba6:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebaa:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ebae:	4623      	mov	r3, r4
 800ebb0:	1e5c      	subs	r4, r3, #1
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d102      	bne.n	800ebbc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ebb6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ebba:	e052      	b.n	800ec62 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebc0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d0f0      	beq.n	800ebae <SDMMC_GetCmdResp6+0x22>
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d1eb      	bne.n	800ebae <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebda:	f003 0304 	and.w	r3, r3, #4
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d004      	beq.n	800ebec <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	2204      	movs	r2, #4
 800ebe6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ebe8:	2304      	movs	r3, #4
 800ebea:	e03a      	b.n	800ec62 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebf0:	f003 0301 	and.w	r3, r3, #1
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d004      	beq.n	800ec02 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ebfe:	2301      	movs	r3, #1
 800ec00:	e02f      	b.n	800ec62 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ec02:	68f8      	ldr	r0, [r7, #12]
 800ec04:	f7ff fbae 	bl	800e364 <SDIO_GetCommandResponse>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	461a      	mov	r2, r3
 800ec0c:	7afb      	ldrb	r3, [r7, #11]
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d001      	beq.n	800ec16 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ec12:	2301      	movs	r3, #1
 800ec14:	e025      	b.n	800ec62 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	22c5      	movs	r2, #197	; 0xc5
 800ec1a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ec1c:	2100      	movs	r1, #0
 800ec1e:	68f8      	ldr	r0, [r7, #12]
 800ec20:	f7ff fbad 	bl	800e37e <SDIO_GetResponse>
 800ec24:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ec26:	693b      	ldr	r3, [r7, #16]
 800ec28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d106      	bne.n	800ec3e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	0c1b      	lsrs	r3, r3, #16
 800ec34:	b29a      	uxth	r2, r3
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	e011      	b.n	800ec62 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d002      	beq.n	800ec4e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ec48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ec4c:	e009      	b.n	800ec62 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d002      	beq.n	800ec5e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ec58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec5c:	e001      	b.n	800ec62 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ec5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	371c      	adds	r7, #28
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd90      	pop	{r4, r7, pc}
 800ec6a:	bf00      	nop
 800ec6c:	20000000 	.word	0x20000000
 800ec70:	10624dd3 	.word	0x10624dd3

0800ec74 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ec74:	b490      	push	{r4, r7}
 800ec76:	b084      	sub	sp, #16
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ec7c:	4b21      	ldr	r3, [pc, #132]	; (800ed04 <SDMMC_GetCmdResp7+0x90>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	4a21      	ldr	r2, [pc, #132]	; (800ed08 <SDMMC_GetCmdResp7+0x94>)
 800ec82:	fba2 2303 	umull	r2, r3, r2, r3
 800ec86:	0a5b      	lsrs	r3, r3, #9
 800ec88:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec8c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ec90:	4623      	mov	r3, r4
 800ec92:	1e5c      	subs	r4, r3, #1
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d102      	bne.n	800ec9e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ec98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec9c:	e02c      	b.n	800ecf8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eca2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d0f0      	beq.n	800ec90 <SDMMC_GetCmdResp7+0x1c>
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d1eb      	bne.n	800ec90 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecbc:	f003 0304 	and.w	r3, r3, #4
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d004      	beq.n	800ecce <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2204      	movs	r2, #4
 800ecc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ecca:	2304      	movs	r3, #4
 800eccc:	e014      	b.n	800ecf8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecd2:	f003 0301 	and.w	r3, r3, #1
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d004      	beq.n	800ece4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2201      	movs	r2, #1
 800ecde:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ece0:	2301      	movs	r3, #1
 800ece2:	e009      	b.n	800ecf8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ece8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d002      	beq.n	800ecf6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2240      	movs	r2, #64	; 0x40
 800ecf4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ecf6:	2300      	movs	r3, #0
  
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3710      	adds	r7, #16
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bc90      	pop	{r4, r7}
 800ed00:	4770      	bx	lr
 800ed02:	bf00      	nop
 800ed04:	20000000 	.word	0x20000000
 800ed08:	10624dd3 	.word	0x10624dd3

0800ed0c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ed10:	4904      	ldr	r1, [pc, #16]	; (800ed24 <MX_FATFS_Init+0x18>)
 800ed12:	4805      	ldr	r0, [pc, #20]	; (800ed28 <MX_FATFS_Init+0x1c>)
 800ed14:	f003 fb9c 	bl	8012450 <FATFS_LinkDriver>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	4b03      	ldr	r3, [pc, #12]	; (800ed2c <MX_FATFS_Init+0x20>)
 800ed1e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ed20:	bf00      	nop
 800ed22:	bd80      	pop	{r7, pc}
 800ed24:	2003bd40 	.word	0x2003bd40
 800ed28:	08017ea8 	.word	0x08017ea8
 800ed2c:	2003bd3c 	.word	0x2003bd3c

0800ed30 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ed36:	2300      	movs	r3, #0
 800ed38:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ed3a:	f000 f896 	bl	800ee6a <BSP_SD_IsDetected>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	2b01      	cmp	r3, #1
 800ed42:	d001      	beq.n	800ed48 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ed44:	2301      	movs	r3, #1
 800ed46:	e012      	b.n	800ed6e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ed48:	480b      	ldr	r0, [pc, #44]	; (800ed78 <BSP_SD_Init+0x48>)
 800ed4a:	f7fb ffa5 	bl	800ac98 <HAL_SD_Init>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ed52:	79fb      	ldrb	r3, [r7, #7]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d109      	bne.n	800ed6c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ed58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ed5c:	4806      	ldr	r0, [pc, #24]	; (800ed78 <BSP_SD_Init+0x48>)
 800ed5e:	f7fc fd4f 	bl	800b800 <HAL_SD_ConfigWideBusOperation>
 800ed62:	4603      	mov	r3, r0
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d001      	beq.n	800ed6c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ed68:	2301      	movs	r3, #1
 800ed6a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ed6c:	79fb      	ldrb	r3, [r7, #7]
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3708      	adds	r7, #8
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	2003bb38 	.word	0x2003bb38

0800ed7c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b086      	sub	sp, #24
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	60f8      	str	r0, [r7, #12]
 800ed84:	60b9      	str	r1, [r7, #8]
 800ed86:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	68ba      	ldr	r2, [r7, #8]
 800ed90:	68f9      	ldr	r1, [r7, #12]
 800ed92:	4806      	ldr	r0, [pc, #24]	; (800edac <BSP_SD_ReadBlocks_DMA+0x30>)
 800ed94:	f7fc f810 	bl	800adb8 <HAL_SD_ReadBlocks_DMA>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d001      	beq.n	800eda2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ed9e:	2301      	movs	r3, #1
 800eda0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800eda2:	7dfb      	ldrb	r3, [r7, #23]
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3718      	adds	r7, #24
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}
 800edac:	2003bb38 	.word	0x2003bb38

0800edb0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b086      	sub	sp, #24
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	60f8      	str	r0, [r7, #12]
 800edb8:	60b9      	str	r1, [r7, #8]
 800edba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800edbc:	2300      	movs	r3, #0
 800edbe:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	68ba      	ldr	r2, [r7, #8]
 800edc4:	68f9      	ldr	r1, [r7, #12]
 800edc6:	4806      	ldr	r0, [pc, #24]	; (800ede0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800edc8:	f7fc f8de 	bl	800af88 <HAL_SD_WriteBlocks_DMA>
 800edcc:	4603      	mov	r3, r0
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d001      	beq.n	800edd6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800edd2:	2301      	movs	r3, #1
 800edd4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800edd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800edd8:	4618      	mov	r0, r3
 800edda:	3718      	adds	r7, #24
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}
 800ede0:	2003bb38 	.word	0x2003bb38

0800ede4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ede8:	4805      	ldr	r0, [pc, #20]	; (800ee00 <BSP_SD_GetCardState+0x1c>)
 800edea:	f7fc fd85 	bl	800b8f8 <HAL_SD_GetCardState>
 800edee:	4603      	mov	r3, r0
 800edf0:	2b04      	cmp	r3, #4
 800edf2:	bf14      	ite	ne
 800edf4:	2301      	movne	r3, #1
 800edf6:	2300      	moveq	r3, #0
 800edf8:	b2db      	uxtb	r3, r3
}
 800edfa:	4618      	mov	r0, r3
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	2003bb38 	.word	0x2003bb38

0800ee04 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b082      	sub	sp, #8
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ee0c:	6879      	ldr	r1, [r7, #4]
 800ee0e:	4803      	ldr	r0, [pc, #12]	; (800ee1c <BSP_SD_GetCardInfo+0x18>)
 800ee10:	f7fc fcca 	bl	800b7a8 <HAL_SD_GetCardInfo>
}
 800ee14:	bf00      	nop
 800ee16:	3708      	adds	r7, #8
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	2003bb38 	.word	0x2003bb38

0800ee20 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ee28:	f000 f818 	bl	800ee5c <BSP_SD_AbortCallback>
}
 800ee2c:	bf00      	nop
 800ee2e:	3708      	adds	r7, #8
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ee3c:	f000 f9a8 	bl	800f190 <BSP_SD_WriteCpltCallback>
}
 800ee40:	bf00      	nop
 800ee42:	3708      	adds	r7, #8
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ee50:	f000 f9aa 	bl	800f1a8 <BSP_SD_ReadCpltCallback>
}
 800ee54:	bf00      	nop
 800ee56:	3708      	adds	r7, #8
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	af00      	add	r7, sp, #0

}
 800ee60:	bf00      	nop
 800ee62:	46bd      	mov	sp, r7
 800ee64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee68:	4770      	bx	lr

0800ee6a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ee6a:	b580      	push	{r7, lr}
 800ee6c:	b082      	sub	sp, #8
 800ee6e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ee70:	2301      	movs	r3, #1
 800ee72:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ee74:	f000 f80c 	bl	800ee90 <BSP_PlatformIsDetected>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d101      	bne.n	800ee82 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ee82:	79fb      	ldrb	r3, [r7, #7]
 800ee84:	b2db      	uxtb	r3, r3
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3708      	adds	r7, #8
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
	...

0800ee90 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b082      	sub	sp, #8
 800ee94:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ee96:	2301      	movs	r3, #1
 800ee98:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ee9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ee9e:	4806      	ldr	r0, [pc, #24]	; (800eeb8 <BSP_PlatformIsDetected+0x28>)
 800eea0:	f7fa f87e 	bl	8008fa0 <HAL_GPIO_ReadPin>
 800eea4:	4603      	mov	r3, r0
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d001      	beq.n	800eeae <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800eeae:	79fb      	ldrb	r3, [r7, #7]
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3708      	adds	r7, #8
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}
 800eeb8:	40020000 	.word	0x40020000

0800eebc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b084      	sub	sp, #16
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800eec4:	f7f8 fde2 	bl	8007a8c <HAL_GetTick>
 800eec8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800eeca:	e006      	b.n	800eeda <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eecc:	f7ff ff8a 	bl	800ede4 <BSP_SD_GetCardState>
 800eed0:	4603      	mov	r3, r0
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d101      	bne.n	800eeda <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800eed6:	2300      	movs	r3, #0
 800eed8:	e009      	b.n	800eeee <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800eeda:	f7f8 fdd7 	bl	8007a8c <HAL_GetTick>
 800eede:	4602      	mov	r2, r0
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	1ad3      	subs	r3, r2, r3
 800eee4:	687a      	ldr	r2, [r7, #4]
 800eee6:	429a      	cmp	r2, r3
 800eee8:	d8f0      	bhi.n	800eecc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800eeea:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3710      	adds	r7, #16
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}
	...

0800eef8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b082      	sub	sp, #8
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	4603      	mov	r3, r0
 800ef00:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ef02:	4b0b      	ldr	r3, [pc, #44]	; (800ef30 <SD_CheckStatus+0x38>)
 800ef04:	2201      	movs	r2, #1
 800ef06:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ef08:	f7ff ff6c 	bl	800ede4 <BSP_SD_GetCardState>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d107      	bne.n	800ef22 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ef12:	4b07      	ldr	r3, [pc, #28]	; (800ef30 <SD_CheckStatus+0x38>)
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	b2db      	uxtb	r3, r3
 800ef18:	f023 0301 	bic.w	r3, r3, #1
 800ef1c:	b2da      	uxtb	r2, r3
 800ef1e:	4b04      	ldr	r3, [pc, #16]	; (800ef30 <SD_CheckStatus+0x38>)
 800ef20:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ef22:	4b03      	ldr	r3, [pc, #12]	; (800ef30 <SD_CheckStatus+0x38>)
 800ef24:	781b      	ldrb	r3, [r3, #0]
 800ef26:	b2db      	uxtb	r3, r3
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3708      	adds	r7, #8
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}
 800ef30:	20000009 	.word	0x20000009

0800ef34 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b082      	sub	sp, #8
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ef3e:	f7ff fef7 	bl	800ed30 <BSP_SD_Init>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d107      	bne.n	800ef58 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ef48:	79fb      	ldrb	r3, [r7, #7]
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7ff ffd4 	bl	800eef8 <SD_CheckStatus>
 800ef50:	4603      	mov	r3, r0
 800ef52:	461a      	mov	r2, r3
 800ef54:	4b04      	ldr	r3, [pc, #16]	; (800ef68 <SD_initialize+0x34>)
 800ef56:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ef58:	4b03      	ldr	r3, [pc, #12]	; (800ef68 <SD_initialize+0x34>)
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	b2db      	uxtb	r3, r3
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3708      	adds	r7, #8
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
 800ef66:	bf00      	nop
 800ef68:	20000009 	.word	0x20000009

0800ef6c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b082      	sub	sp, #8
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	4603      	mov	r3, r0
 800ef74:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ef76:	79fb      	ldrb	r3, [r7, #7]
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f7ff ffbd 	bl	800eef8 <SD_CheckStatus>
 800ef7e:	4603      	mov	r3, r0
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	3708      	adds	r7, #8
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}

0800ef88 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b086      	sub	sp, #24
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	60b9      	str	r1, [r7, #8]
 800ef90:	607a      	str	r2, [r7, #4]
 800ef92:	603b      	str	r3, [r7, #0]
 800ef94:	4603      	mov	r3, r0
 800ef96:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ef98:	2301      	movs	r3, #1
 800ef9a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ef9c:	f247 5030 	movw	r0, #30000	; 0x7530
 800efa0:	f7ff ff8c 	bl	800eebc <SD_CheckStatusWithTimeout>
 800efa4:	4603      	mov	r3, r0
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	da01      	bge.n	800efae <SD_read+0x26>
  {
    return res;
 800efaa:	7dfb      	ldrb	r3, [r7, #23]
 800efac:	e03b      	b.n	800f026 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800efae:	683a      	ldr	r2, [r7, #0]
 800efb0:	6879      	ldr	r1, [r7, #4]
 800efb2:	68b8      	ldr	r0, [r7, #8]
 800efb4:	f7ff fee2 	bl	800ed7c <BSP_SD_ReadBlocks_DMA>
 800efb8:	4603      	mov	r3, r0
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d132      	bne.n	800f024 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800efbe:	4b1c      	ldr	r3, [pc, #112]	; (800f030 <SD_read+0xa8>)
 800efc0:	2200      	movs	r2, #0
 800efc2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800efc4:	f7f8 fd62 	bl	8007a8c <HAL_GetTick>
 800efc8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800efca:	bf00      	nop
 800efcc:	4b18      	ldr	r3, [pc, #96]	; (800f030 <SD_read+0xa8>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d108      	bne.n	800efe6 <SD_read+0x5e>
 800efd4:	f7f8 fd5a 	bl	8007a8c <HAL_GetTick>
 800efd8:	4602      	mov	r2, r0
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	1ad3      	subs	r3, r2, r3
 800efde:	f247 522f 	movw	r2, #29999	; 0x752f
 800efe2:	4293      	cmp	r3, r2
 800efe4:	d9f2      	bls.n	800efcc <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800efe6:	4b12      	ldr	r3, [pc, #72]	; (800f030 <SD_read+0xa8>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d102      	bne.n	800eff4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800efee:	2301      	movs	r3, #1
 800eff0:	75fb      	strb	r3, [r7, #23]
 800eff2:	e017      	b.n	800f024 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800eff4:	4b0e      	ldr	r3, [pc, #56]	; (800f030 <SD_read+0xa8>)
 800eff6:	2200      	movs	r2, #0
 800eff8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800effa:	f7f8 fd47 	bl	8007a8c <HAL_GetTick>
 800effe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f000:	e007      	b.n	800f012 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f002:	f7ff feef 	bl	800ede4 <BSP_SD_GetCardState>
 800f006:	4603      	mov	r3, r0
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d102      	bne.n	800f012 <SD_read+0x8a>
          {
            res = RES_OK;
 800f00c:	2300      	movs	r3, #0
 800f00e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800f010:	e008      	b.n	800f024 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f012:	f7f8 fd3b 	bl	8007a8c <HAL_GetTick>
 800f016:	4602      	mov	r2, r0
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	1ad3      	subs	r3, r2, r3
 800f01c:	f247 522f 	movw	r2, #29999	; 0x752f
 800f020:	4293      	cmp	r3, r2
 800f022:	d9ee      	bls.n	800f002 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800f024:	7dfb      	ldrb	r3, [r7, #23]
}
 800f026:	4618      	mov	r0, r3
 800f028:	3718      	adds	r7, #24
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}
 800f02e:	bf00      	nop
 800f030:	200393d4 	.word	0x200393d4

0800f034 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b086      	sub	sp, #24
 800f038:	af00      	add	r7, sp, #0
 800f03a:	60b9      	str	r1, [r7, #8]
 800f03c:	607a      	str	r2, [r7, #4]
 800f03e:	603b      	str	r3, [r7, #0]
 800f040:	4603      	mov	r3, r0
 800f042:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f044:	2301      	movs	r3, #1
 800f046:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800f048:	4b24      	ldr	r3, [pc, #144]	; (800f0dc <SD_write+0xa8>)
 800f04a:	2200      	movs	r2, #0
 800f04c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f04e:	f247 5030 	movw	r0, #30000	; 0x7530
 800f052:	f7ff ff33 	bl	800eebc <SD_CheckStatusWithTimeout>
 800f056:	4603      	mov	r3, r0
 800f058:	2b00      	cmp	r3, #0
 800f05a:	da01      	bge.n	800f060 <SD_write+0x2c>
  {
    return res;
 800f05c:	7dfb      	ldrb	r3, [r7, #23]
 800f05e:	e038      	b.n	800f0d2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f060:	683a      	ldr	r2, [r7, #0]
 800f062:	6879      	ldr	r1, [r7, #4]
 800f064:	68b8      	ldr	r0, [r7, #8]
 800f066:	f7ff fea3 	bl	800edb0 <BSP_SD_WriteBlocks_DMA>
 800f06a:	4603      	mov	r3, r0
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d12f      	bne.n	800f0d0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800f070:	f7f8 fd0c 	bl	8007a8c <HAL_GetTick>
 800f074:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800f076:	bf00      	nop
 800f078:	4b18      	ldr	r3, [pc, #96]	; (800f0dc <SD_write+0xa8>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d108      	bne.n	800f092 <SD_write+0x5e>
 800f080:	f7f8 fd04 	bl	8007a8c <HAL_GetTick>
 800f084:	4602      	mov	r2, r0
 800f086:	693b      	ldr	r3, [r7, #16]
 800f088:	1ad3      	subs	r3, r2, r3
 800f08a:	f247 522f 	movw	r2, #29999	; 0x752f
 800f08e:	4293      	cmp	r3, r2
 800f090:	d9f2      	bls.n	800f078 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800f092:	4b12      	ldr	r3, [pc, #72]	; (800f0dc <SD_write+0xa8>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d102      	bne.n	800f0a0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800f09a:	2301      	movs	r3, #1
 800f09c:	75fb      	strb	r3, [r7, #23]
 800f09e:	e017      	b.n	800f0d0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800f0a0:	4b0e      	ldr	r3, [pc, #56]	; (800f0dc <SD_write+0xa8>)
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800f0a6:	f7f8 fcf1 	bl	8007a8c <HAL_GetTick>
 800f0aa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f0ac:	e007      	b.n	800f0be <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f0ae:	f7ff fe99 	bl	800ede4 <BSP_SD_GetCardState>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d102      	bne.n	800f0be <SD_write+0x8a>
          {
            res = RES_OK;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	75fb      	strb	r3, [r7, #23]
            break;
 800f0bc:	e008      	b.n	800f0d0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f0be:	f7f8 fce5 	bl	8007a8c <HAL_GetTick>
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	693b      	ldr	r3, [r7, #16]
 800f0c6:	1ad3      	subs	r3, r2, r3
 800f0c8:	f247 522f 	movw	r2, #29999	; 0x752f
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d9ee      	bls.n	800f0ae <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800f0d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3718      	adds	r7, #24
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}
 800f0da:	bf00      	nop
 800f0dc:	200393d0 	.word	0x200393d0

0800f0e0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b08c      	sub	sp, #48	; 0x30
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	603a      	str	r2, [r7, #0]
 800f0ea:	71fb      	strb	r3, [r7, #7]
 800f0ec:	460b      	mov	r3, r1
 800f0ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f0f6:	4b25      	ldr	r3, [pc, #148]	; (800f18c <SD_ioctl+0xac>)
 800f0f8:	781b      	ldrb	r3, [r3, #0]
 800f0fa:	b2db      	uxtb	r3, r3
 800f0fc:	f003 0301 	and.w	r3, r3, #1
 800f100:	2b00      	cmp	r3, #0
 800f102:	d001      	beq.n	800f108 <SD_ioctl+0x28>
 800f104:	2303      	movs	r3, #3
 800f106:	e03c      	b.n	800f182 <SD_ioctl+0xa2>

  switch (cmd)
 800f108:	79bb      	ldrb	r3, [r7, #6]
 800f10a:	2b03      	cmp	r3, #3
 800f10c:	d834      	bhi.n	800f178 <SD_ioctl+0x98>
 800f10e:	a201      	add	r2, pc, #4	; (adr r2, 800f114 <SD_ioctl+0x34>)
 800f110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f114:	0800f125 	.word	0x0800f125
 800f118:	0800f12d 	.word	0x0800f12d
 800f11c:	0800f145 	.word	0x0800f145
 800f120:	0800f15f 	.word	0x0800f15f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f124:	2300      	movs	r3, #0
 800f126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f12a:	e028      	b.n	800f17e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f12c:	f107 030c 	add.w	r3, r7, #12
 800f130:	4618      	mov	r0, r3
 800f132:	f7ff fe67 	bl	800ee04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f13c:	2300      	movs	r3, #0
 800f13e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f142:	e01c      	b.n	800f17e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f144:	f107 030c 	add.w	r3, r7, #12
 800f148:	4618      	mov	r0, r3
 800f14a:	f7ff fe5b 	bl	800ee04 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f150:	b29a      	uxth	r2, r3
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f156:	2300      	movs	r3, #0
 800f158:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f15c:	e00f      	b.n	800f17e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f15e:	f107 030c 	add.w	r3, r7, #12
 800f162:	4618      	mov	r0, r3
 800f164:	f7ff fe4e 	bl	800ee04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f16a:	0a5a      	lsrs	r2, r3, #9
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f170:	2300      	movs	r3, #0
 800f172:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f176:	e002      	b.n	800f17e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f178:	2304      	movs	r3, #4
 800f17a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f17e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f182:	4618      	mov	r0, r3
 800f184:	3730      	adds	r7, #48	; 0x30
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}
 800f18a:	bf00      	nop
 800f18c:	20000009 	.word	0x20000009

0800f190 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800f190:	b480      	push	{r7}
 800f192:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800f194:	4b03      	ldr	r3, [pc, #12]	; (800f1a4 <BSP_SD_WriteCpltCallback+0x14>)
 800f196:	2201      	movs	r2, #1
 800f198:	601a      	str	r2, [r3, #0]
}
 800f19a:	bf00      	nop
 800f19c:	46bd      	mov	sp, r7
 800f19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a2:	4770      	bx	lr
 800f1a4:	200393d0 	.word	0x200393d0

0800f1a8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800f1ac:	4b03      	ldr	r3, [pc, #12]	; (800f1bc <BSP_SD_ReadCpltCallback+0x14>)
 800f1ae:	2201      	movs	r2, #1
 800f1b0:	601a      	str	r2, [r3, #0]
}
 800f1b2:	bf00      	nop
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ba:	4770      	bx	lr
 800f1bc:	200393d4 	.word	0x200393d4

0800f1c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b084      	sub	sp, #16
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f1ca:	79fb      	ldrb	r3, [r7, #7]
 800f1cc:	4a08      	ldr	r2, [pc, #32]	; (800f1f0 <disk_status+0x30>)
 800f1ce:	009b      	lsls	r3, r3, #2
 800f1d0:	4413      	add	r3, r2
 800f1d2:	685b      	ldr	r3, [r3, #4]
 800f1d4:	685b      	ldr	r3, [r3, #4]
 800f1d6:	79fa      	ldrb	r2, [r7, #7]
 800f1d8:	4905      	ldr	r1, [pc, #20]	; (800f1f0 <disk_status+0x30>)
 800f1da:	440a      	add	r2, r1
 800f1dc:	7a12      	ldrb	r2, [r2, #8]
 800f1de:	4610      	mov	r0, r2
 800f1e0:	4798      	blx	r3
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3710      	adds	r7, #16
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}
 800f1f0:	20039400 	.word	0x20039400

0800f1f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b084      	sub	sp, #16
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f1fe:	2300      	movs	r3, #0
 800f200:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f202:	79fb      	ldrb	r3, [r7, #7]
 800f204:	4a0d      	ldr	r2, [pc, #52]	; (800f23c <disk_initialize+0x48>)
 800f206:	5cd3      	ldrb	r3, [r2, r3]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d111      	bne.n	800f230 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f20c:	79fb      	ldrb	r3, [r7, #7]
 800f20e:	4a0b      	ldr	r2, [pc, #44]	; (800f23c <disk_initialize+0x48>)
 800f210:	2101      	movs	r1, #1
 800f212:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f214:	79fb      	ldrb	r3, [r7, #7]
 800f216:	4a09      	ldr	r2, [pc, #36]	; (800f23c <disk_initialize+0x48>)
 800f218:	009b      	lsls	r3, r3, #2
 800f21a:	4413      	add	r3, r2
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	79fa      	ldrb	r2, [r7, #7]
 800f222:	4906      	ldr	r1, [pc, #24]	; (800f23c <disk_initialize+0x48>)
 800f224:	440a      	add	r2, r1
 800f226:	7a12      	ldrb	r2, [r2, #8]
 800f228:	4610      	mov	r0, r2
 800f22a:	4798      	blx	r3
 800f22c:	4603      	mov	r3, r0
 800f22e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f230:	7bfb      	ldrb	r3, [r7, #15]
}
 800f232:	4618      	mov	r0, r3
 800f234:	3710      	adds	r7, #16
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}
 800f23a:	bf00      	nop
 800f23c:	20039400 	.word	0x20039400

0800f240 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f240:	b590      	push	{r4, r7, lr}
 800f242:	b087      	sub	sp, #28
 800f244:	af00      	add	r7, sp, #0
 800f246:	60b9      	str	r1, [r7, #8]
 800f248:	607a      	str	r2, [r7, #4]
 800f24a:	603b      	str	r3, [r7, #0]
 800f24c:	4603      	mov	r3, r0
 800f24e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f250:	7bfb      	ldrb	r3, [r7, #15]
 800f252:	4a0a      	ldr	r2, [pc, #40]	; (800f27c <disk_read+0x3c>)
 800f254:	009b      	lsls	r3, r3, #2
 800f256:	4413      	add	r3, r2
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	689c      	ldr	r4, [r3, #8]
 800f25c:	7bfb      	ldrb	r3, [r7, #15]
 800f25e:	4a07      	ldr	r2, [pc, #28]	; (800f27c <disk_read+0x3c>)
 800f260:	4413      	add	r3, r2
 800f262:	7a18      	ldrb	r0, [r3, #8]
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	687a      	ldr	r2, [r7, #4]
 800f268:	68b9      	ldr	r1, [r7, #8]
 800f26a:	47a0      	blx	r4
 800f26c:	4603      	mov	r3, r0
 800f26e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f270:	7dfb      	ldrb	r3, [r7, #23]
}
 800f272:	4618      	mov	r0, r3
 800f274:	371c      	adds	r7, #28
 800f276:	46bd      	mov	sp, r7
 800f278:	bd90      	pop	{r4, r7, pc}
 800f27a:	bf00      	nop
 800f27c:	20039400 	.word	0x20039400

0800f280 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f280:	b590      	push	{r4, r7, lr}
 800f282:	b087      	sub	sp, #28
 800f284:	af00      	add	r7, sp, #0
 800f286:	60b9      	str	r1, [r7, #8]
 800f288:	607a      	str	r2, [r7, #4]
 800f28a:	603b      	str	r3, [r7, #0]
 800f28c:	4603      	mov	r3, r0
 800f28e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f290:	7bfb      	ldrb	r3, [r7, #15]
 800f292:	4a0a      	ldr	r2, [pc, #40]	; (800f2bc <disk_write+0x3c>)
 800f294:	009b      	lsls	r3, r3, #2
 800f296:	4413      	add	r3, r2
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	68dc      	ldr	r4, [r3, #12]
 800f29c:	7bfb      	ldrb	r3, [r7, #15]
 800f29e:	4a07      	ldr	r2, [pc, #28]	; (800f2bc <disk_write+0x3c>)
 800f2a0:	4413      	add	r3, r2
 800f2a2:	7a18      	ldrb	r0, [r3, #8]
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	687a      	ldr	r2, [r7, #4]
 800f2a8:	68b9      	ldr	r1, [r7, #8]
 800f2aa:	47a0      	blx	r4
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	75fb      	strb	r3, [r7, #23]
  return res;
 800f2b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	371c      	adds	r7, #28
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd90      	pop	{r4, r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	20039400 	.word	0x20039400

0800f2c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b084      	sub	sp, #16
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	603a      	str	r2, [r7, #0]
 800f2ca:	71fb      	strb	r3, [r7, #7]
 800f2cc:	460b      	mov	r3, r1
 800f2ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f2d0:	79fb      	ldrb	r3, [r7, #7]
 800f2d2:	4a09      	ldr	r2, [pc, #36]	; (800f2f8 <disk_ioctl+0x38>)
 800f2d4:	009b      	lsls	r3, r3, #2
 800f2d6:	4413      	add	r3, r2
 800f2d8:	685b      	ldr	r3, [r3, #4]
 800f2da:	691b      	ldr	r3, [r3, #16]
 800f2dc:	79fa      	ldrb	r2, [r7, #7]
 800f2de:	4906      	ldr	r1, [pc, #24]	; (800f2f8 <disk_ioctl+0x38>)
 800f2e0:	440a      	add	r2, r1
 800f2e2:	7a10      	ldrb	r0, [r2, #8]
 800f2e4:	79b9      	ldrb	r1, [r7, #6]
 800f2e6:	683a      	ldr	r2, [r7, #0]
 800f2e8:	4798      	blx	r3
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	73fb      	strb	r3, [r7, #15]
  return res;
 800f2ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	3710      	adds	r7, #16
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}
 800f2f8:	20039400 	.word	0x20039400

0800f2fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b085      	sub	sp, #20
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	3301      	adds	r3, #1
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f30c:	89fb      	ldrh	r3, [r7, #14]
 800f30e:	021b      	lsls	r3, r3, #8
 800f310:	b21a      	sxth	r2, r3
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	781b      	ldrb	r3, [r3, #0]
 800f316:	b21b      	sxth	r3, r3
 800f318:	4313      	orrs	r3, r2
 800f31a:	b21b      	sxth	r3, r3
 800f31c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f31e:	89fb      	ldrh	r3, [r7, #14]
}
 800f320:	4618      	mov	r0, r3
 800f322:	3714      	adds	r7, #20
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr

0800f32c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f32c:	b480      	push	{r7}
 800f32e:	b085      	sub	sp, #20
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	3303      	adds	r3, #3
 800f338:	781b      	ldrb	r3, [r3, #0]
 800f33a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	021b      	lsls	r3, r3, #8
 800f340:	687a      	ldr	r2, [r7, #4]
 800f342:	3202      	adds	r2, #2
 800f344:	7812      	ldrb	r2, [r2, #0]
 800f346:	4313      	orrs	r3, r2
 800f348:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	021b      	lsls	r3, r3, #8
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	3201      	adds	r2, #1
 800f352:	7812      	ldrb	r2, [r2, #0]
 800f354:	4313      	orrs	r3, r2
 800f356:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	021b      	lsls	r3, r3, #8
 800f35c:	687a      	ldr	r2, [r7, #4]
 800f35e:	7812      	ldrb	r2, [r2, #0]
 800f360:	4313      	orrs	r3, r2
 800f362:	60fb      	str	r3, [r7, #12]
	return rv;
 800f364:	68fb      	ldr	r3, [r7, #12]
}
 800f366:	4618      	mov	r0, r3
 800f368:	3714      	adds	r7, #20
 800f36a:	46bd      	mov	sp, r7
 800f36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f370:	4770      	bx	lr

0800f372 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f372:	b480      	push	{r7}
 800f374:	b083      	sub	sp, #12
 800f376:	af00      	add	r7, sp, #0
 800f378:	6078      	str	r0, [r7, #4]
 800f37a:	460b      	mov	r3, r1
 800f37c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	1c5a      	adds	r2, r3, #1
 800f382:	607a      	str	r2, [r7, #4]
 800f384:	887a      	ldrh	r2, [r7, #2]
 800f386:	b2d2      	uxtb	r2, r2
 800f388:	701a      	strb	r2, [r3, #0]
 800f38a:	887b      	ldrh	r3, [r7, #2]
 800f38c:	0a1b      	lsrs	r3, r3, #8
 800f38e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	1c5a      	adds	r2, r3, #1
 800f394:	607a      	str	r2, [r7, #4]
 800f396:	887a      	ldrh	r2, [r7, #2]
 800f398:	b2d2      	uxtb	r2, r2
 800f39a:	701a      	strb	r2, [r3, #0]
}
 800f39c:	bf00      	nop
 800f39e:	370c      	adds	r7, #12
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a6:	4770      	bx	lr

0800f3a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b083      	sub	sp, #12
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	1c5a      	adds	r2, r3, #1
 800f3b6:	607a      	str	r2, [r7, #4]
 800f3b8:	683a      	ldr	r2, [r7, #0]
 800f3ba:	b2d2      	uxtb	r2, r2
 800f3bc:	701a      	strb	r2, [r3, #0]
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	0a1b      	lsrs	r3, r3, #8
 800f3c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	1c5a      	adds	r2, r3, #1
 800f3c8:	607a      	str	r2, [r7, #4]
 800f3ca:	683a      	ldr	r2, [r7, #0]
 800f3cc:	b2d2      	uxtb	r2, r2
 800f3ce:	701a      	strb	r2, [r3, #0]
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	0a1b      	lsrs	r3, r3, #8
 800f3d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	1c5a      	adds	r2, r3, #1
 800f3da:	607a      	str	r2, [r7, #4]
 800f3dc:	683a      	ldr	r2, [r7, #0]
 800f3de:	b2d2      	uxtb	r2, r2
 800f3e0:	701a      	strb	r2, [r3, #0]
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	0a1b      	lsrs	r3, r3, #8
 800f3e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	1c5a      	adds	r2, r3, #1
 800f3ec:	607a      	str	r2, [r7, #4]
 800f3ee:	683a      	ldr	r2, [r7, #0]
 800f3f0:	b2d2      	uxtb	r2, r2
 800f3f2:	701a      	strb	r2, [r3, #0]
}
 800f3f4:	bf00      	nop
 800f3f6:	370c      	adds	r7, #12
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fe:	4770      	bx	lr

0800f400 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f400:	b480      	push	{r7}
 800f402:	b087      	sub	sp, #28
 800f404:	af00      	add	r7, sp, #0
 800f406:	60f8      	str	r0, [r7, #12]
 800f408:	60b9      	str	r1, [r7, #8]
 800f40a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d00d      	beq.n	800f436 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f41a:	693a      	ldr	r2, [r7, #16]
 800f41c:	1c53      	adds	r3, r2, #1
 800f41e:	613b      	str	r3, [r7, #16]
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	1c59      	adds	r1, r3, #1
 800f424:	6179      	str	r1, [r7, #20]
 800f426:	7812      	ldrb	r2, [r2, #0]
 800f428:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	3b01      	subs	r3, #1
 800f42e:	607b      	str	r3, [r7, #4]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d1f1      	bne.n	800f41a <mem_cpy+0x1a>
	}
}
 800f436:	bf00      	nop
 800f438:	371c      	adds	r7, #28
 800f43a:	46bd      	mov	sp, r7
 800f43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f440:	4770      	bx	lr

0800f442 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f442:	b480      	push	{r7}
 800f444:	b087      	sub	sp, #28
 800f446:	af00      	add	r7, sp, #0
 800f448:	60f8      	str	r0, [r7, #12]
 800f44a:	60b9      	str	r1, [r7, #8]
 800f44c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	1c5a      	adds	r2, r3, #1
 800f456:	617a      	str	r2, [r7, #20]
 800f458:	68ba      	ldr	r2, [r7, #8]
 800f45a:	b2d2      	uxtb	r2, r2
 800f45c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	3b01      	subs	r3, #1
 800f462:	607b      	str	r3, [r7, #4]
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d1f3      	bne.n	800f452 <mem_set+0x10>
}
 800f46a:	bf00      	nop
 800f46c:	371c      	adds	r7, #28
 800f46e:	46bd      	mov	sp, r7
 800f470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f474:	4770      	bx	lr

0800f476 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f476:	b480      	push	{r7}
 800f478:	b089      	sub	sp, #36	; 0x24
 800f47a:	af00      	add	r7, sp, #0
 800f47c:	60f8      	str	r0, [r7, #12]
 800f47e:	60b9      	str	r1, [r7, #8]
 800f480:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	61fb      	str	r3, [r7, #28]
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f48a:	2300      	movs	r3, #0
 800f48c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f48e:	69fb      	ldr	r3, [r7, #28]
 800f490:	1c5a      	adds	r2, r3, #1
 800f492:	61fa      	str	r2, [r7, #28]
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	4619      	mov	r1, r3
 800f498:	69bb      	ldr	r3, [r7, #24]
 800f49a:	1c5a      	adds	r2, r3, #1
 800f49c:	61ba      	str	r2, [r7, #24]
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	1acb      	subs	r3, r1, r3
 800f4a2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	3b01      	subs	r3, #1
 800f4a8:	607b      	str	r3, [r7, #4]
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d002      	beq.n	800f4b6 <mem_cmp+0x40>
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d0eb      	beq.n	800f48e <mem_cmp+0x18>

	return r;
 800f4b6:	697b      	ldr	r3, [r7, #20]
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3724      	adds	r7, #36	; 0x24
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c2:	4770      	bx	lr

0800f4c4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f4c4:	b480      	push	{r7}
 800f4c6:	b083      	sub	sp, #12
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f4ce:	e002      	b.n	800f4d6 <chk_chr+0x12>
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	607b      	str	r3, [r7, #4]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d005      	beq.n	800f4ea <chk_chr+0x26>
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	781b      	ldrb	r3, [r3, #0]
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d1f2      	bne.n	800f4d0 <chk_chr+0xc>
	return *str;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	781b      	ldrb	r3, [r3, #0]
}
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	370c      	adds	r7, #12
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f8:	4770      	bx	lr
	...

0800f4fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b085      	sub	sp, #20
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
 800f504:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f506:	2300      	movs	r3, #0
 800f508:	60bb      	str	r3, [r7, #8]
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	60fb      	str	r3, [r7, #12]
 800f50e:	e029      	b.n	800f564 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f510:	4a27      	ldr	r2, [pc, #156]	; (800f5b0 <chk_lock+0xb4>)
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	011b      	lsls	r3, r3, #4
 800f516:	4413      	add	r3, r2
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d01d      	beq.n	800f55a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f51e:	4a24      	ldr	r2, [pc, #144]	; (800f5b0 <chk_lock+0xb4>)
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	011b      	lsls	r3, r3, #4
 800f524:	4413      	add	r3, r2
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d116      	bne.n	800f55e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f530:	4a1f      	ldr	r2, [pc, #124]	; (800f5b0 <chk_lock+0xb4>)
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	011b      	lsls	r3, r3, #4
 800f536:	4413      	add	r3, r2
 800f538:	3304      	adds	r3, #4
 800f53a:	681a      	ldr	r2, [r3, #0]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f540:	429a      	cmp	r2, r3
 800f542:	d10c      	bne.n	800f55e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f544:	4a1a      	ldr	r2, [pc, #104]	; (800f5b0 <chk_lock+0xb4>)
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	011b      	lsls	r3, r3, #4
 800f54a:	4413      	add	r3, r2
 800f54c:	3308      	adds	r3, #8
 800f54e:	681a      	ldr	r2, [r3, #0]
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f554:	429a      	cmp	r2, r3
 800f556:	d102      	bne.n	800f55e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f558:	e007      	b.n	800f56a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f55a:	2301      	movs	r3, #1
 800f55c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	3301      	adds	r3, #1
 800f562:	60fb      	str	r3, [r7, #12]
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	2b01      	cmp	r3, #1
 800f568:	d9d2      	bls.n	800f510 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	2b02      	cmp	r3, #2
 800f56e:	d109      	bne.n	800f584 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d102      	bne.n	800f57c <chk_lock+0x80>
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	2b02      	cmp	r3, #2
 800f57a:	d101      	bne.n	800f580 <chk_lock+0x84>
 800f57c:	2300      	movs	r3, #0
 800f57e:	e010      	b.n	800f5a2 <chk_lock+0xa6>
 800f580:	2312      	movs	r3, #18
 800f582:	e00e      	b.n	800f5a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d108      	bne.n	800f59c <chk_lock+0xa0>
 800f58a:	4a09      	ldr	r2, [pc, #36]	; (800f5b0 <chk_lock+0xb4>)
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	011b      	lsls	r3, r3, #4
 800f590:	4413      	add	r3, r2
 800f592:	330c      	adds	r3, #12
 800f594:	881b      	ldrh	r3, [r3, #0]
 800f596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f59a:	d101      	bne.n	800f5a0 <chk_lock+0xa4>
 800f59c:	2310      	movs	r3, #16
 800f59e:	e000      	b.n	800f5a2 <chk_lock+0xa6>
 800f5a0:	2300      	movs	r3, #0
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3714      	adds	r7, #20
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ac:	4770      	bx	lr
 800f5ae:	bf00      	nop
 800f5b0:	200393e0 	.word	0x200393e0

0800f5b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b083      	sub	sp, #12
 800f5b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	607b      	str	r3, [r7, #4]
 800f5be:	e002      	b.n	800f5c6 <enq_lock+0x12>
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	607b      	str	r3, [r7, #4]
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	2b01      	cmp	r3, #1
 800f5ca:	d806      	bhi.n	800f5da <enq_lock+0x26>
 800f5cc:	4a09      	ldr	r2, [pc, #36]	; (800f5f4 <enq_lock+0x40>)
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	011b      	lsls	r3, r3, #4
 800f5d2:	4413      	add	r3, r2
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d1f2      	bne.n	800f5c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2b02      	cmp	r3, #2
 800f5de:	bf14      	ite	ne
 800f5e0:	2301      	movne	r3, #1
 800f5e2:	2300      	moveq	r3, #0
 800f5e4:	b2db      	uxtb	r3, r3
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	370c      	adds	r7, #12
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f0:	4770      	bx	lr
 800f5f2:	bf00      	nop
 800f5f4:	200393e0 	.word	0x200393e0

0800f5f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b085      	sub	sp, #20
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
 800f600:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f602:	2300      	movs	r3, #0
 800f604:	60fb      	str	r3, [r7, #12]
 800f606:	e01f      	b.n	800f648 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f608:	4a41      	ldr	r2, [pc, #260]	; (800f710 <inc_lock+0x118>)
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	011b      	lsls	r3, r3, #4
 800f60e:	4413      	add	r3, r2
 800f610:	681a      	ldr	r2, [r3, #0]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	429a      	cmp	r2, r3
 800f618:	d113      	bne.n	800f642 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f61a:	4a3d      	ldr	r2, [pc, #244]	; (800f710 <inc_lock+0x118>)
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	011b      	lsls	r3, r3, #4
 800f620:	4413      	add	r3, r2
 800f622:	3304      	adds	r3, #4
 800f624:	681a      	ldr	r2, [r3, #0]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f62a:	429a      	cmp	r2, r3
 800f62c:	d109      	bne.n	800f642 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f62e:	4a38      	ldr	r2, [pc, #224]	; (800f710 <inc_lock+0x118>)
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	011b      	lsls	r3, r3, #4
 800f634:	4413      	add	r3, r2
 800f636:	3308      	adds	r3, #8
 800f638:	681a      	ldr	r2, [r3, #0]
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f63e:	429a      	cmp	r2, r3
 800f640:	d006      	beq.n	800f650 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	3301      	adds	r3, #1
 800f646:	60fb      	str	r3, [r7, #12]
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2b01      	cmp	r3, #1
 800f64c:	d9dc      	bls.n	800f608 <inc_lock+0x10>
 800f64e:	e000      	b.n	800f652 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f650:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	2b02      	cmp	r3, #2
 800f656:	d132      	bne.n	800f6be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f658:	2300      	movs	r3, #0
 800f65a:	60fb      	str	r3, [r7, #12]
 800f65c:	e002      	b.n	800f664 <inc_lock+0x6c>
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	3301      	adds	r3, #1
 800f662:	60fb      	str	r3, [r7, #12]
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2b01      	cmp	r3, #1
 800f668:	d806      	bhi.n	800f678 <inc_lock+0x80>
 800f66a:	4a29      	ldr	r2, [pc, #164]	; (800f710 <inc_lock+0x118>)
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	011b      	lsls	r3, r3, #4
 800f670:	4413      	add	r3, r2
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d1f2      	bne.n	800f65e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	2b02      	cmp	r3, #2
 800f67c:	d101      	bne.n	800f682 <inc_lock+0x8a>
 800f67e:	2300      	movs	r3, #0
 800f680:	e040      	b.n	800f704 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681a      	ldr	r2, [r3, #0]
 800f686:	4922      	ldr	r1, [pc, #136]	; (800f710 <inc_lock+0x118>)
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	011b      	lsls	r3, r3, #4
 800f68c:	440b      	add	r3, r1
 800f68e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	689a      	ldr	r2, [r3, #8]
 800f694:	491e      	ldr	r1, [pc, #120]	; (800f710 <inc_lock+0x118>)
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	011b      	lsls	r3, r3, #4
 800f69a:	440b      	add	r3, r1
 800f69c:	3304      	adds	r3, #4
 800f69e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	695a      	ldr	r2, [r3, #20]
 800f6a4:	491a      	ldr	r1, [pc, #104]	; (800f710 <inc_lock+0x118>)
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	011b      	lsls	r3, r3, #4
 800f6aa:	440b      	add	r3, r1
 800f6ac:	3308      	adds	r3, #8
 800f6ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f6b0:	4a17      	ldr	r2, [pc, #92]	; (800f710 <inc_lock+0x118>)
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	011b      	lsls	r3, r3, #4
 800f6b6:	4413      	add	r3, r2
 800f6b8:	330c      	adds	r3, #12
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d009      	beq.n	800f6d8 <inc_lock+0xe0>
 800f6c4:	4a12      	ldr	r2, [pc, #72]	; (800f710 <inc_lock+0x118>)
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	011b      	lsls	r3, r3, #4
 800f6ca:	4413      	add	r3, r2
 800f6cc:	330c      	adds	r3, #12
 800f6ce:	881b      	ldrh	r3, [r3, #0]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d001      	beq.n	800f6d8 <inc_lock+0xe0>
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	e015      	b.n	800f704 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d108      	bne.n	800f6f0 <inc_lock+0xf8>
 800f6de:	4a0c      	ldr	r2, [pc, #48]	; (800f710 <inc_lock+0x118>)
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	011b      	lsls	r3, r3, #4
 800f6e4:	4413      	add	r3, r2
 800f6e6:	330c      	adds	r3, #12
 800f6e8:	881b      	ldrh	r3, [r3, #0]
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	b29a      	uxth	r2, r3
 800f6ee:	e001      	b.n	800f6f4 <inc_lock+0xfc>
 800f6f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f6f4:	4906      	ldr	r1, [pc, #24]	; (800f710 <inc_lock+0x118>)
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	011b      	lsls	r3, r3, #4
 800f6fa:	440b      	add	r3, r1
 800f6fc:	330c      	adds	r3, #12
 800f6fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	3301      	adds	r3, #1
}
 800f704:	4618      	mov	r0, r3
 800f706:	3714      	adds	r7, #20
 800f708:	46bd      	mov	sp, r7
 800f70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70e:	4770      	bx	lr
 800f710:	200393e0 	.word	0x200393e0

0800f714 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f714:	b480      	push	{r7}
 800f716:	b085      	sub	sp, #20
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	3b01      	subs	r3, #1
 800f720:	607b      	str	r3, [r7, #4]
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2b01      	cmp	r3, #1
 800f726:	d825      	bhi.n	800f774 <dec_lock+0x60>
		n = Files[i].ctr;
 800f728:	4a17      	ldr	r2, [pc, #92]	; (800f788 <dec_lock+0x74>)
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	011b      	lsls	r3, r3, #4
 800f72e:	4413      	add	r3, r2
 800f730:	330c      	adds	r3, #12
 800f732:	881b      	ldrh	r3, [r3, #0]
 800f734:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f736:	89fb      	ldrh	r3, [r7, #14]
 800f738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f73c:	d101      	bne.n	800f742 <dec_lock+0x2e>
 800f73e:	2300      	movs	r3, #0
 800f740:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f742:	89fb      	ldrh	r3, [r7, #14]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d002      	beq.n	800f74e <dec_lock+0x3a>
 800f748:	89fb      	ldrh	r3, [r7, #14]
 800f74a:	3b01      	subs	r3, #1
 800f74c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f74e:	4a0e      	ldr	r2, [pc, #56]	; (800f788 <dec_lock+0x74>)
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	011b      	lsls	r3, r3, #4
 800f754:	4413      	add	r3, r2
 800f756:	330c      	adds	r3, #12
 800f758:	89fa      	ldrh	r2, [r7, #14]
 800f75a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f75c:	89fb      	ldrh	r3, [r7, #14]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d105      	bne.n	800f76e <dec_lock+0x5a>
 800f762:	4a09      	ldr	r2, [pc, #36]	; (800f788 <dec_lock+0x74>)
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	011b      	lsls	r3, r3, #4
 800f768:	4413      	add	r3, r2
 800f76a:	2200      	movs	r2, #0
 800f76c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f76e:	2300      	movs	r3, #0
 800f770:	737b      	strb	r3, [r7, #13]
 800f772:	e001      	b.n	800f778 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f774:	2302      	movs	r3, #2
 800f776:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f778:	7b7b      	ldrb	r3, [r7, #13]
}
 800f77a:	4618      	mov	r0, r3
 800f77c:	3714      	adds	r7, #20
 800f77e:	46bd      	mov	sp, r7
 800f780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f784:	4770      	bx	lr
 800f786:	bf00      	nop
 800f788:	200393e0 	.word	0x200393e0

0800f78c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f78c:	b480      	push	{r7}
 800f78e:	b085      	sub	sp, #20
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f794:	2300      	movs	r3, #0
 800f796:	60fb      	str	r3, [r7, #12]
 800f798:	e010      	b.n	800f7bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f79a:	4a0d      	ldr	r2, [pc, #52]	; (800f7d0 <clear_lock+0x44>)
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	011b      	lsls	r3, r3, #4
 800f7a0:	4413      	add	r3, r2
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	687a      	ldr	r2, [r7, #4]
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	d105      	bne.n	800f7b6 <clear_lock+0x2a>
 800f7aa:	4a09      	ldr	r2, [pc, #36]	; (800f7d0 <clear_lock+0x44>)
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	011b      	lsls	r3, r3, #4
 800f7b0:	4413      	add	r3, r2
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	60fb      	str	r3, [r7, #12]
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	2b01      	cmp	r3, #1
 800f7c0:	d9eb      	bls.n	800f79a <clear_lock+0xe>
	}
}
 800f7c2:	bf00      	nop
 800f7c4:	3714      	adds	r7, #20
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr
 800f7ce:	bf00      	nop
 800f7d0:	200393e0 	.word	0x200393e0

0800f7d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b086      	sub	sp, #24
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f7dc:	2300      	movs	r3, #0
 800f7de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	78db      	ldrb	r3, [r3, #3]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d034      	beq.n	800f852 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	7858      	ldrb	r0, [r3, #1]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	697a      	ldr	r2, [r7, #20]
 800f7fc:	f7ff fd40 	bl	800f280 <disk_write>
 800f800:	4603      	mov	r3, r0
 800f802:	2b00      	cmp	r3, #0
 800f804:	d002      	beq.n	800f80c <sync_window+0x38>
			res = FR_DISK_ERR;
 800f806:	2301      	movs	r3, #1
 800f808:	73fb      	strb	r3, [r7, #15]
 800f80a:	e022      	b.n	800f852 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2200      	movs	r2, #0
 800f810:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f816:	697a      	ldr	r2, [r7, #20]
 800f818:	1ad2      	subs	r2, r2, r3
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6a1b      	ldr	r3, [r3, #32]
 800f81e:	429a      	cmp	r2, r3
 800f820:	d217      	bcs.n	800f852 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	789b      	ldrb	r3, [r3, #2]
 800f826:	613b      	str	r3, [r7, #16]
 800f828:	e010      	b.n	800f84c <sync_window+0x78>
					wsect += fs->fsize;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6a1b      	ldr	r3, [r3, #32]
 800f82e:	697a      	ldr	r2, [r7, #20]
 800f830:	4413      	add	r3, r2
 800f832:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	7858      	ldrb	r0, [r3, #1]
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f83e:	2301      	movs	r3, #1
 800f840:	697a      	ldr	r2, [r7, #20]
 800f842:	f7ff fd1d 	bl	800f280 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	3b01      	subs	r3, #1
 800f84a:	613b      	str	r3, [r7, #16]
 800f84c:	693b      	ldr	r3, [r7, #16]
 800f84e:	2b01      	cmp	r3, #1
 800f850:	d8eb      	bhi.n	800f82a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f852:	7bfb      	ldrb	r3, [r7, #15]
}
 800f854:	4618      	mov	r0, r3
 800f856:	3718      	adds	r7, #24
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}

0800f85c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b084      	sub	sp, #16
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f866:	2300      	movs	r3, #0
 800f868:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f86e:	683a      	ldr	r2, [r7, #0]
 800f870:	429a      	cmp	r2, r3
 800f872:	d01b      	beq.n	800f8ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f874:	6878      	ldr	r0, [r7, #4]
 800f876:	f7ff ffad 	bl	800f7d4 <sync_window>
 800f87a:	4603      	mov	r3, r0
 800f87c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f87e:	7bfb      	ldrb	r3, [r7, #15]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d113      	bne.n	800f8ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	7858      	ldrb	r0, [r3, #1]
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f88e:	2301      	movs	r3, #1
 800f890:	683a      	ldr	r2, [r7, #0]
 800f892:	f7ff fcd5 	bl	800f240 <disk_read>
 800f896:	4603      	mov	r3, r0
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d004      	beq.n	800f8a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f89c:	f04f 33ff 	mov.w	r3, #4294967295
 800f8a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	683a      	ldr	r2, [r7, #0]
 800f8aa:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800f8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	3710      	adds	r7, #16
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}
	...

0800f8b8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b084      	sub	sp, #16
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f7ff ff87 	bl	800f7d4 <sync_window>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f8ca:	7bfb      	ldrb	r3, [r7, #15]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d159      	bne.n	800f984 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	2b03      	cmp	r3, #3
 800f8d6:	d149      	bne.n	800f96c <sync_fs+0xb4>
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	791b      	ldrb	r3, [r3, #4]
 800f8dc:	2b01      	cmp	r3, #1
 800f8de:	d145      	bne.n	800f96c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	899b      	ldrh	r3, [r3, #12]
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	2100      	movs	r1, #0
 800f8ee:	f7ff fda8 	bl	800f442 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	3338      	adds	r3, #56	; 0x38
 800f8f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f8fa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f8fe:	4618      	mov	r0, r3
 800f900:	f7ff fd37 	bl	800f372 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	3338      	adds	r3, #56	; 0x38
 800f908:	4921      	ldr	r1, [pc, #132]	; (800f990 <sync_fs+0xd8>)
 800f90a:	4618      	mov	r0, r3
 800f90c:	f7ff fd4c 	bl	800f3a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	3338      	adds	r3, #56	; 0x38
 800f914:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f918:	491e      	ldr	r1, [pc, #120]	; (800f994 <sync_fs+0xdc>)
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7ff fd44 	bl	800f3a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	3338      	adds	r3, #56	; 0x38
 800f924:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	695b      	ldr	r3, [r3, #20]
 800f92c:	4619      	mov	r1, r3
 800f92e:	4610      	mov	r0, r2
 800f930:	f7ff fd3a 	bl	800f3a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	3338      	adds	r3, #56	; 0x38
 800f938:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	691b      	ldr	r3, [r3, #16]
 800f940:	4619      	mov	r1, r3
 800f942:	4610      	mov	r0, r2
 800f944:	f7ff fd30 	bl	800f3a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f94c:	1c5a      	adds	r2, r3, #1
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	7858      	ldrb	r0, [r3, #1]
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f960:	2301      	movs	r3, #1
 800f962:	f7ff fc8d 	bl	800f280 <disk_write>
			fs->fsi_flag = 0;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	2200      	movs	r2, #0
 800f96a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	785b      	ldrb	r3, [r3, #1]
 800f970:	2200      	movs	r2, #0
 800f972:	2100      	movs	r1, #0
 800f974:	4618      	mov	r0, r3
 800f976:	f7ff fca3 	bl	800f2c0 <disk_ioctl>
 800f97a:	4603      	mov	r3, r0
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d001      	beq.n	800f984 <sync_fs+0xcc>
 800f980:	2301      	movs	r3, #1
 800f982:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f984:	7bfb      	ldrb	r3, [r7, #15]
}
 800f986:	4618      	mov	r0, r3
 800f988:	3710      	adds	r7, #16
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}
 800f98e:	bf00      	nop
 800f990:	41615252 	.word	0x41615252
 800f994:	61417272 	.word	0x61417272

0800f998 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f998:	b480      	push	{r7}
 800f99a:	b083      	sub	sp, #12
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	3b02      	subs	r3, #2
 800f9a6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	69db      	ldr	r3, [r3, #28]
 800f9ac:	3b02      	subs	r3, #2
 800f9ae:	683a      	ldr	r2, [r7, #0]
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d301      	bcc.n	800f9b8 <clust2sect+0x20>
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	e008      	b.n	800f9ca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	895b      	ldrh	r3, [r3, #10]
 800f9bc:	461a      	mov	r2, r3
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	fb03 f202 	mul.w	r2, r3, r2
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9c8:	4413      	add	r3, r2
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	370c      	adds	r7, #12
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d4:	4770      	bx	lr

0800f9d6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f9d6:	b580      	push	{r7, lr}
 800f9d8:	b086      	sub	sp, #24
 800f9da:	af00      	add	r7, sp, #0
 800f9dc:	6078      	str	r0, [r7, #4]
 800f9de:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	2b01      	cmp	r3, #1
 800f9ea:	d904      	bls.n	800f9f6 <get_fat+0x20>
 800f9ec:	693b      	ldr	r3, [r7, #16]
 800f9ee:	69db      	ldr	r3, [r3, #28]
 800f9f0:	683a      	ldr	r2, [r7, #0]
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	d302      	bcc.n	800f9fc <get_fat+0x26>
		val = 1;	/* Internal error */
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	617b      	str	r3, [r7, #20]
 800f9fa:	e0b7      	b.n	800fb6c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f9fc:	f04f 33ff 	mov.w	r3, #4294967295
 800fa00:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fa02:	693b      	ldr	r3, [r7, #16]
 800fa04:	781b      	ldrb	r3, [r3, #0]
 800fa06:	2b02      	cmp	r3, #2
 800fa08:	d05a      	beq.n	800fac0 <get_fat+0xea>
 800fa0a:	2b03      	cmp	r3, #3
 800fa0c:	d07d      	beq.n	800fb0a <get_fat+0x134>
 800fa0e:	2b01      	cmp	r3, #1
 800fa10:	f040 80a2 	bne.w	800fb58 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	60fb      	str	r3, [r7, #12]
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	085b      	lsrs	r3, r3, #1
 800fa1c:	68fa      	ldr	r2, [r7, #12]
 800fa1e:	4413      	add	r3, r2
 800fa20:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fa22:	693b      	ldr	r3, [r7, #16]
 800fa24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fa26:	693b      	ldr	r3, [r7, #16]
 800fa28:	899b      	ldrh	r3, [r3, #12]
 800fa2a:	4619      	mov	r1, r3
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	fbb3 f3f1 	udiv	r3, r3, r1
 800fa32:	4413      	add	r3, r2
 800fa34:	4619      	mov	r1, r3
 800fa36:	6938      	ldr	r0, [r7, #16]
 800fa38:	f7ff ff10 	bl	800f85c <move_window>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	f040 808d 	bne.w	800fb5e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	1c5a      	adds	r2, r3, #1
 800fa48:	60fa      	str	r2, [r7, #12]
 800fa4a:	693a      	ldr	r2, [r7, #16]
 800fa4c:	8992      	ldrh	r2, [r2, #12]
 800fa4e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa52:	fb02 f201 	mul.w	r2, r2, r1
 800fa56:	1a9b      	subs	r3, r3, r2
 800fa58:	693a      	ldr	r2, [r7, #16]
 800fa5a:	4413      	add	r3, r2
 800fa5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fa60:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fa62:	693b      	ldr	r3, [r7, #16]
 800fa64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fa66:	693b      	ldr	r3, [r7, #16]
 800fa68:	899b      	ldrh	r3, [r3, #12]
 800fa6a:	4619      	mov	r1, r3
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	fbb3 f3f1 	udiv	r3, r3, r1
 800fa72:	4413      	add	r3, r2
 800fa74:	4619      	mov	r1, r3
 800fa76:	6938      	ldr	r0, [r7, #16]
 800fa78:	f7ff fef0 	bl	800f85c <move_window>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d16f      	bne.n	800fb62 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fa82:	693b      	ldr	r3, [r7, #16]
 800fa84:	899b      	ldrh	r3, [r3, #12]
 800fa86:	461a      	mov	r2, r3
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa8e:	fb02 f201 	mul.w	r2, r2, r1
 800fa92:	1a9b      	subs	r3, r3, r2
 800fa94:	693a      	ldr	r2, [r7, #16]
 800fa96:	4413      	add	r3, r2
 800fa98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fa9c:	021b      	lsls	r3, r3, #8
 800fa9e:	461a      	mov	r2, r3
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	4313      	orrs	r3, r2
 800faa4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	f003 0301 	and.w	r3, r3, #1
 800faac:	2b00      	cmp	r3, #0
 800faae:	d002      	beq.n	800fab6 <get_fat+0xe0>
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	091b      	lsrs	r3, r3, #4
 800fab4:	e002      	b.n	800fabc <get_fat+0xe6>
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fabc:	617b      	str	r3, [r7, #20]
			break;
 800fabe:	e055      	b.n	800fb6c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	899b      	ldrh	r3, [r3, #12]
 800fac8:	085b      	lsrs	r3, r3, #1
 800faca:	b29b      	uxth	r3, r3
 800facc:	4619      	mov	r1, r3
 800face:	683b      	ldr	r3, [r7, #0]
 800fad0:	fbb3 f3f1 	udiv	r3, r3, r1
 800fad4:	4413      	add	r3, r2
 800fad6:	4619      	mov	r1, r3
 800fad8:	6938      	ldr	r0, [r7, #16]
 800fada:	f7ff febf 	bl	800f85c <move_window>
 800fade:	4603      	mov	r3, r0
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d140      	bne.n	800fb66 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	005b      	lsls	r3, r3, #1
 800faee:	693a      	ldr	r2, [r7, #16]
 800faf0:	8992      	ldrh	r2, [r2, #12]
 800faf2:	fbb3 f0f2 	udiv	r0, r3, r2
 800faf6:	fb02 f200 	mul.w	r2, r2, r0
 800fafa:	1a9b      	subs	r3, r3, r2
 800fafc:	440b      	add	r3, r1
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7ff fbfc 	bl	800f2fc <ld_word>
 800fb04:	4603      	mov	r3, r0
 800fb06:	617b      	str	r3, [r7, #20]
			break;
 800fb08:	e030      	b.n	800fb6c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fb0a:	693b      	ldr	r3, [r7, #16]
 800fb0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fb0e:	693b      	ldr	r3, [r7, #16]
 800fb10:	899b      	ldrh	r3, [r3, #12]
 800fb12:	089b      	lsrs	r3, r3, #2
 800fb14:	b29b      	uxth	r3, r3
 800fb16:	4619      	mov	r1, r3
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	fbb3 f3f1 	udiv	r3, r3, r1
 800fb1e:	4413      	add	r3, r2
 800fb20:	4619      	mov	r1, r3
 800fb22:	6938      	ldr	r0, [r7, #16]
 800fb24:	f7ff fe9a 	bl	800f85c <move_window>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d11d      	bne.n	800fb6a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fb2e:	693b      	ldr	r3, [r7, #16]
 800fb30:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	009b      	lsls	r3, r3, #2
 800fb38:	693a      	ldr	r2, [r7, #16]
 800fb3a:	8992      	ldrh	r2, [r2, #12]
 800fb3c:	fbb3 f0f2 	udiv	r0, r3, r2
 800fb40:	fb02 f200 	mul.w	r2, r2, r0
 800fb44:	1a9b      	subs	r3, r3, r2
 800fb46:	440b      	add	r3, r1
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f7ff fbef 	bl	800f32c <ld_dword>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fb54:	617b      	str	r3, [r7, #20]
			break;
 800fb56:	e009      	b.n	800fb6c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fb58:	2301      	movs	r3, #1
 800fb5a:	617b      	str	r3, [r7, #20]
 800fb5c:	e006      	b.n	800fb6c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fb5e:	bf00      	nop
 800fb60:	e004      	b.n	800fb6c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fb62:	bf00      	nop
 800fb64:	e002      	b.n	800fb6c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fb66:	bf00      	nop
 800fb68:	e000      	b.n	800fb6c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fb6a:	bf00      	nop
		}
	}

	return val;
 800fb6c:	697b      	ldr	r3, [r7, #20]
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3718      	adds	r7, #24
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}

0800fb76 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fb76:	b590      	push	{r4, r7, lr}
 800fb78:	b089      	sub	sp, #36	; 0x24
 800fb7a:	af00      	add	r7, sp, #0
 800fb7c:	60f8      	str	r0, [r7, #12]
 800fb7e:	60b9      	str	r1, [r7, #8]
 800fb80:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fb82:	2302      	movs	r3, #2
 800fb84:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fb86:	68bb      	ldr	r3, [r7, #8]
 800fb88:	2b01      	cmp	r3, #1
 800fb8a:	f240 8106 	bls.w	800fd9a <put_fat+0x224>
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	69db      	ldr	r3, [r3, #28]
 800fb92:	68ba      	ldr	r2, [r7, #8]
 800fb94:	429a      	cmp	r2, r3
 800fb96:	f080 8100 	bcs.w	800fd9a <put_fat+0x224>
		switch (fs->fs_type) {
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	781b      	ldrb	r3, [r3, #0]
 800fb9e:	2b02      	cmp	r3, #2
 800fba0:	f000 8088 	beq.w	800fcb4 <put_fat+0x13e>
 800fba4:	2b03      	cmp	r3, #3
 800fba6:	f000 80b0 	beq.w	800fd0a <put_fat+0x194>
 800fbaa:	2b01      	cmp	r3, #1
 800fbac:	f040 80f5 	bne.w	800fd9a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fbb0:	68bb      	ldr	r3, [r7, #8]
 800fbb2:	61bb      	str	r3, [r7, #24]
 800fbb4:	69bb      	ldr	r3, [r7, #24]
 800fbb6:	085b      	lsrs	r3, r3, #1
 800fbb8:	69ba      	ldr	r2, [r7, #24]
 800fbba:	4413      	add	r3, r2
 800fbbc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	899b      	ldrh	r3, [r3, #12]
 800fbc6:	4619      	mov	r1, r3
 800fbc8:	69bb      	ldr	r3, [r7, #24]
 800fbca:	fbb3 f3f1 	udiv	r3, r3, r1
 800fbce:	4413      	add	r3, r2
 800fbd0:	4619      	mov	r1, r3
 800fbd2:	68f8      	ldr	r0, [r7, #12]
 800fbd4:	f7ff fe42 	bl	800f85c <move_window>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fbdc:	7ffb      	ldrb	r3, [r7, #31]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	f040 80d4 	bne.w	800fd8c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fbea:	69bb      	ldr	r3, [r7, #24]
 800fbec:	1c5a      	adds	r2, r3, #1
 800fbee:	61ba      	str	r2, [r7, #24]
 800fbf0:	68fa      	ldr	r2, [r7, #12]
 800fbf2:	8992      	ldrh	r2, [r2, #12]
 800fbf4:	fbb3 f0f2 	udiv	r0, r3, r2
 800fbf8:	fb02 f200 	mul.w	r2, r2, r0
 800fbfc:	1a9b      	subs	r3, r3, r2
 800fbfe:	440b      	add	r3, r1
 800fc00:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	f003 0301 	and.w	r3, r3, #1
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d00d      	beq.n	800fc28 <put_fat+0xb2>
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	781b      	ldrb	r3, [r3, #0]
 800fc10:	b25b      	sxtb	r3, r3
 800fc12:	f003 030f 	and.w	r3, r3, #15
 800fc16:	b25a      	sxtb	r2, r3
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	b2db      	uxtb	r3, r3
 800fc1c:	011b      	lsls	r3, r3, #4
 800fc1e:	b25b      	sxtb	r3, r3
 800fc20:	4313      	orrs	r3, r2
 800fc22:	b25b      	sxtb	r3, r3
 800fc24:	b2db      	uxtb	r3, r3
 800fc26:	e001      	b.n	800fc2c <put_fat+0xb6>
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	b2db      	uxtb	r3, r3
 800fc2c:	697a      	ldr	r2, [r7, #20]
 800fc2e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	2201      	movs	r2, #1
 800fc34:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	899b      	ldrh	r3, [r3, #12]
 800fc3e:	4619      	mov	r1, r3
 800fc40:	69bb      	ldr	r3, [r7, #24]
 800fc42:	fbb3 f3f1 	udiv	r3, r3, r1
 800fc46:	4413      	add	r3, r2
 800fc48:	4619      	mov	r1, r3
 800fc4a:	68f8      	ldr	r0, [r7, #12]
 800fc4c:	f7ff fe06 	bl	800f85c <move_window>
 800fc50:	4603      	mov	r3, r0
 800fc52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fc54:	7ffb      	ldrb	r3, [r7, #31]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	f040 809a 	bne.w	800fd90 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	899b      	ldrh	r3, [r3, #12]
 800fc66:	461a      	mov	r2, r3
 800fc68:	69bb      	ldr	r3, [r7, #24]
 800fc6a:	fbb3 f0f2 	udiv	r0, r3, r2
 800fc6e:	fb02 f200 	mul.w	r2, r2, r0
 800fc72:	1a9b      	subs	r3, r3, r2
 800fc74:	440b      	add	r3, r1
 800fc76:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	f003 0301 	and.w	r3, r3, #1
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d003      	beq.n	800fc8a <put_fat+0x114>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	091b      	lsrs	r3, r3, #4
 800fc86:	b2db      	uxtb	r3, r3
 800fc88:	e00e      	b.n	800fca8 <put_fat+0x132>
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	781b      	ldrb	r3, [r3, #0]
 800fc8e:	b25b      	sxtb	r3, r3
 800fc90:	f023 030f 	bic.w	r3, r3, #15
 800fc94:	b25a      	sxtb	r2, r3
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	0a1b      	lsrs	r3, r3, #8
 800fc9a:	b25b      	sxtb	r3, r3
 800fc9c:	f003 030f 	and.w	r3, r3, #15
 800fca0:	b25b      	sxtb	r3, r3
 800fca2:	4313      	orrs	r3, r2
 800fca4:	b25b      	sxtb	r3, r3
 800fca6:	b2db      	uxtb	r3, r3
 800fca8:	697a      	ldr	r2, [r7, #20]
 800fcaa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	2201      	movs	r2, #1
 800fcb0:	70da      	strb	r2, [r3, #3]
			break;
 800fcb2:	e072      	b.n	800fd9a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	899b      	ldrh	r3, [r3, #12]
 800fcbc:	085b      	lsrs	r3, r3, #1
 800fcbe:	b29b      	uxth	r3, r3
 800fcc0:	4619      	mov	r1, r3
 800fcc2:	68bb      	ldr	r3, [r7, #8]
 800fcc4:	fbb3 f3f1 	udiv	r3, r3, r1
 800fcc8:	4413      	add	r3, r2
 800fcca:	4619      	mov	r1, r3
 800fccc:	68f8      	ldr	r0, [r7, #12]
 800fcce:	f7ff fdc5 	bl	800f85c <move_window>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fcd6:	7ffb      	ldrb	r3, [r7, #31]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d15b      	bne.n	800fd94 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	005b      	lsls	r3, r3, #1
 800fce6:	68fa      	ldr	r2, [r7, #12]
 800fce8:	8992      	ldrh	r2, [r2, #12]
 800fcea:	fbb3 f0f2 	udiv	r0, r3, r2
 800fcee:	fb02 f200 	mul.w	r2, r2, r0
 800fcf2:	1a9b      	subs	r3, r3, r2
 800fcf4:	440b      	add	r3, r1
 800fcf6:	687a      	ldr	r2, [r7, #4]
 800fcf8:	b292      	uxth	r2, r2
 800fcfa:	4611      	mov	r1, r2
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7ff fb38 	bl	800f372 <st_word>
			fs->wflag = 1;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	2201      	movs	r2, #1
 800fd06:	70da      	strb	r2, [r3, #3]
			break;
 800fd08:	e047      	b.n	800fd9a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	899b      	ldrh	r3, [r3, #12]
 800fd12:	089b      	lsrs	r3, r3, #2
 800fd14:	b29b      	uxth	r3, r3
 800fd16:	4619      	mov	r1, r3
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	fbb3 f3f1 	udiv	r3, r3, r1
 800fd1e:	4413      	add	r3, r2
 800fd20:	4619      	mov	r1, r3
 800fd22:	68f8      	ldr	r0, [r7, #12]
 800fd24:	f7ff fd9a 	bl	800f85c <move_window>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fd2c:	7ffb      	ldrb	r3, [r7, #31]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d132      	bne.n	800fd98 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	009b      	lsls	r3, r3, #2
 800fd42:	68fa      	ldr	r2, [r7, #12]
 800fd44:	8992      	ldrh	r2, [r2, #12]
 800fd46:	fbb3 f0f2 	udiv	r0, r3, r2
 800fd4a:	fb02 f200 	mul.w	r2, r2, r0
 800fd4e:	1a9b      	subs	r3, r3, r2
 800fd50:	440b      	add	r3, r1
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7ff faea 	bl	800f32c <ld_dword>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fd5e:	4323      	orrs	r3, r4
 800fd60:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	009b      	lsls	r3, r3, #2
 800fd6c:	68fa      	ldr	r2, [r7, #12]
 800fd6e:	8992      	ldrh	r2, [r2, #12]
 800fd70:	fbb3 f0f2 	udiv	r0, r3, r2
 800fd74:	fb02 f200 	mul.w	r2, r2, r0
 800fd78:	1a9b      	subs	r3, r3, r2
 800fd7a:	440b      	add	r3, r1
 800fd7c:	6879      	ldr	r1, [r7, #4]
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f7ff fb12 	bl	800f3a8 <st_dword>
			fs->wflag = 1;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	2201      	movs	r2, #1
 800fd88:	70da      	strb	r2, [r3, #3]
			break;
 800fd8a:	e006      	b.n	800fd9a <put_fat+0x224>
			if (res != FR_OK) break;
 800fd8c:	bf00      	nop
 800fd8e:	e004      	b.n	800fd9a <put_fat+0x224>
			if (res != FR_OK) break;
 800fd90:	bf00      	nop
 800fd92:	e002      	b.n	800fd9a <put_fat+0x224>
			if (res != FR_OK) break;
 800fd94:	bf00      	nop
 800fd96:	e000      	b.n	800fd9a <put_fat+0x224>
			if (res != FR_OK) break;
 800fd98:	bf00      	nop
		}
	}
	return res;
 800fd9a:	7ffb      	ldrb	r3, [r7, #31]
}
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	3724      	adds	r7, #36	; 0x24
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd90      	pop	{r4, r7, pc}

0800fda4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b088      	sub	sp, #32
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	60f8      	str	r0, [r7, #12]
 800fdac:	60b9      	str	r1, [r7, #8]
 800fdae:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fdba:	68bb      	ldr	r3, [r7, #8]
 800fdbc:	2b01      	cmp	r3, #1
 800fdbe:	d904      	bls.n	800fdca <remove_chain+0x26>
 800fdc0:	69bb      	ldr	r3, [r7, #24]
 800fdc2:	69db      	ldr	r3, [r3, #28]
 800fdc4:	68ba      	ldr	r2, [r7, #8]
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d301      	bcc.n	800fdce <remove_chain+0x2a>
 800fdca:	2302      	movs	r3, #2
 800fdcc:	e04b      	b.n	800fe66 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d00c      	beq.n	800fdee <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fdd4:	f04f 32ff 	mov.w	r2, #4294967295
 800fdd8:	6879      	ldr	r1, [r7, #4]
 800fdda:	69b8      	ldr	r0, [r7, #24]
 800fddc:	f7ff fecb 	bl	800fb76 <put_fat>
 800fde0:	4603      	mov	r3, r0
 800fde2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fde4:	7ffb      	ldrb	r3, [r7, #31]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d001      	beq.n	800fdee <remove_chain+0x4a>
 800fdea:	7ffb      	ldrb	r3, [r7, #31]
 800fdec:	e03b      	b.n	800fe66 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fdee:	68b9      	ldr	r1, [r7, #8]
 800fdf0:	68f8      	ldr	r0, [r7, #12]
 800fdf2:	f7ff fdf0 	bl	800f9d6 <get_fat>
 800fdf6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d031      	beq.n	800fe62 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800fdfe:	697b      	ldr	r3, [r7, #20]
 800fe00:	2b01      	cmp	r3, #1
 800fe02:	d101      	bne.n	800fe08 <remove_chain+0x64>
 800fe04:	2302      	movs	r3, #2
 800fe06:	e02e      	b.n	800fe66 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fe08:	697b      	ldr	r3, [r7, #20]
 800fe0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe0e:	d101      	bne.n	800fe14 <remove_chain+0x70>
 800fe10:	2301      	movs	r3, #1
 800fe12:	e028      	b.n	800fe66 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fe14:	2200      	movs	r2, #0
 800fe16:	68b9      	ldr	r1, [r7, #8]
 800fe18:	69b8      	ldr	r0, [r7, #24]
 800fe1a:	f7ff feac 	bl	800fb76 <put_fat>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fe22:	7ffb      	ldrb	r3, [r7, #31]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d001      	beq.n	800fe2c <remove_chain+0x88>
 800fe28:	7ffb      	ldrb	r3, [r7, #31]
 800fe2a:	e01c      	b.n	800fe66 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fe2c:	69bb      	ldr	r3, [r7, #24]
 800fe2e:	695a      	ldr	r2, [r3, #20]
 800fe30:	69bb      	ldr	r3, [r7, #24]
 800fe32:	69db      	ldr	r3, [r3, #28]
 800fe34:	3b02      	subs	r3, #2
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d20b      	bcs.n	800fe52 <remove_chain+0xae>
			fs->free_clst++;
 800fe3a:	69bb      	ldr	r3, [r7, #24]
 800fe3c:	695b      	ldr	r3, [r3, #20]
 800fe3e:	1c5a      	adds	r2, r3, #1
 800fe40:	69bb      	ldr	r3, [r7, #24]
 800fe42:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800fe44:	69bb      	ldr	r3, [r7, #24]
 800fe46:	791b      	ldrb	r3, [r3, #4]
 800fe48:	f043 0301 	orr.w	r3, r3, #1
 800fe4c:	b2da      	uxtb	r2, r3
 800fe4e:	69bb      	ldr	r3, [r7, #24]
 800fe50:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fe56:	69bb      	ldr	r3, [r7, #24]
 800fe58:	69db      	ldr	r3, [r3, #28]
 800fe5a:	68ba      	ldr	r2, [r7, #8]
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d3c6      	bcc.n	800fdee <remove_chain+0x4a>
 800fe60:	e000      	b.n	800fe64 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fe62:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fe64:	2300      	movs	r3, #0
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3720      	adds	r7, #32
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}

0800fe6e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fe6e:	b580      	push	{r7, lr}
 800fe70:	b088      	sub	sp, #32
 800fe72:	af00      	add	r7, sp, #0
 800fe74:	6078      	str	r0, [r7, #4]
 800fe76:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d10d      	bne.n	800fea0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fe84:	693b      	ldr	r3, [r7, #16]
 800fe86:	691b      	ldr	r3, [r3, #16]
 800fe88:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fe8a:	69bb      	ldr	r3, [r7, #24]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d004      	beq.n	800fe9a <create_chain+0x2c>
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	69db      	ldr	r3, [r3, #28]
 800fe94:	69ba      	ldr	r2, [r7, #24]
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d31b      	bcc.n	800fed2 <create_chain+0x64>
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	61bb      	str	r3, [r7, #24]
 800fe9e:	e018      	b.n	800fed2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fea0:	6839      	ldr	r1, [r7, #0]
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f7ff fd97 	bl	800f9d6 <get_fat>
 800fea8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	2b01      	cmp	r3, #1
 800feae:	d801      	bhi.n	800feb4 <create_chain+0x46>
 800feb0:	2301      	movs	r3, #1
 800feb2:	e070      	b.n	800ff96 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800feba:	d101      	bne.n	800fec0 <create_chain+0x52>
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	e06a      	b.n	800ff96 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	69db      	ldr	r3, [r3, #28]
 800fec4:	68fa      	ldr	r2, [r7, #12]
 800fec6:	429a      	cmp	r2, r3
 800fec8:	d201      	bcs.n	800fece <create_chain+0x60>
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	e063      	b.n	800ff96 <create_chain+0x128>
		scl = clst;
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800fed2:	69bb      	ldr	r3, [r7, #24]
 800fed4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800fed6:	69fb      	ldr	r3, [r7, #28]
 800fed8:	3301      	adds	r3, #1
 800feda:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fedc:	693b      	ldr	r3, [r7, #16]
 800fede:	69db      	ldr	r3, [r3, #28]
 800fee0:	69fa      	ldr	r2, [r7, #28]
 800fee2:	429a      	cmp	r2, r3
 800fee4:	d307      	bcc.n	800fef6 <create_chain+0x88>
				ncl = 2;
 800fee6:	2302      	movs	r3, #2
 800fee8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800feea:	69fa      	ldr	r2, [r7, #28]
 800feec:	69bb      	ldr	r3, [r7, #24]
 800feee:	429a      	cmp	r2, r3
 800fef0:	d901      	bls.n	800fef6 <create_chain+0x88>
 800fef2:	2300      	movs	r3, #0
 800fef4:	e04f      	b.n	800ff96 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fef6:	69f9      	ldr	r1, [r7, #28]
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f7ff fd6c 	bl	800f9d6 <get_fat>
 800fefe:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d00e      	beq.n	800ff24 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	2b01      	cmp	r3, #1
 800ff0a:	d003      	beq.n	800ff14 <create_chain+0xa6>
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff12:	d101      	bne.n	800ff18 <create_chain+0xaa>
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	e03e      	b.n	800ff96 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ff18:	69fa      	ldr	r2, [r7, #28]
 800ff1a:	69bb      	ldr	r3, [r7, #24]
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d1da      	bne.n	800fed6 <create_chain+0x68>
 800ff20:	2300      	movs	r3, #0
 800ff22:	e038      	b.n	800ff96 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ff24:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ff26:	f04f 32ff 	mov.w	r2, #4294967295
 800ff2a:	69f9      	ldr	r1, [r7, #28]
 800ff2c:	6938      	ldr	r0, [r7, #16]
 800ff2e:	f7ff fe22 	bl	800fb76 <put_fat>
 800ff32:	4603      	mov	r3, r0
 800ff34:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ff36:	7dfb      	ldrb	r3, [r7, #23]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d109      	bne.n	800ff50 <create_chain+0xe2>
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d006      	beq.n	800ff50 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ff42:	69fa      	ldr	r2, [r7, #28]
 800ff44:	6839      	ldr	r1, [r7, #0]
 800ff46:	6938      	ldr	r0, [r7, #16]
 800ff48:	f7ff fe15 	bl	800fb76 <put_fat>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ff50:	7dfb      	ldrb	r3, [r7, #23]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d116      	bne.n	800ff84 <create_chain+0x116>
		fs->last_clst = ncl;
 800ff56:	693b      	ldr	r3, [r7, #16]
 800ff58:	69fa      	ldr	r2, [r7, #28]
 800ff5a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ff5c:	693b      	ldr	r3, [r7, #16]
 800ff5e:	695a      	ldr	r2, [r3, #20]
 800ff60:	693b      	ldr	r3, [r7, #16]
 800ff62:	69db      	ldr	r3, [r3, #28]
 800ff64:	3b02      	subs	r3, #2
 800ff66:	429a      	cmp	r2, r3
 800ff68:	d804      	bhi.n	800ff74 <create_chain+0x106>
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	695b      	ldr	r3, [r3, #20]
 800ff6e:	1e5a      	subs	r2, r3, #1
 800ff70:	693b      	ldr	r3, [r7, #16]
 800ff72:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ff74:	693b      	ldr	r3, [r7, #16]
 800ff76:	791b      	ldrb	r3, [r3, #4]
 800ff78:	f043 0301 	orr.w	r3, r3, #1
 800ff7c:	b2da      	uxtb	r2, r3
 800ff7e:	693b      	ldr	r3, [r7, #16]
 800ff80:	711a      	strb	r2, [r3, #4]
 800ff82:	e007      	b.n	800ff94 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ff84:	7dfb      	ldrb	r3, [r7, #23]
 800ff86:	2b01      	cmp	r3, #1
 800ff88:	d102      	bne.n	800ff90 <create_chain+0x122>
 800ff8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ff8e:	e000      	b.n	800ff92 <create_chain+0x124>
 800ff90:	2301      	movs	r3, #1
 800ff92:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ff94:	69fb      	ldr	r3, [r7, #28]
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3720      	adds	r7, #32
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}

0800ff9e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ff9e:	b480      	push	{r7}
 800ffa0:	b087      	sub	sp, #28
 800ffa2:	af00      	add	r7, sp, #0
 800ffa4:	6078      	str	r0, [r7, #4]
 800ffa6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffb2:	3304      	adds	r3, #4
 800ffb4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	899b      	ldrh	r3, [r3, #12]
 800ffba:	461a      	mov	r2, r3
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffc2:	68fa      	ldr	r2, [r7, #12]
 800ffc4:	8952      	ldrh	r2, [r2, #10]
 800ffc6:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffca:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ffcc:	693b      	ldr	r3, [r7, #16]
 800ffce:	1d1a      	adds	r2, r3, #4
 800ffd0:	613a      	str	r2, [r7, #16]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d101      	bne.n	800ffe0 <clmt_clust+0x42>
 800ffdc:	2300      	movs	r3, #0
 800ffde:	e010      	b.n	8010002 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800ffe0:	697a      	ldr	r2, [r7, #20]
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d307      	bcc.n	800fff8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800ffe8:	697a      	ldr	r2, [r7, #20]
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	1ad3      	subs	r3, r2, r3
 800ffee:	617b      	str	r3, [r7, #20]
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	3304      	adds	r3, #4
 800fff4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fff6:	e7e9      	b.n	800ffcc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800fff8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800fffa:	693b      	ldr	r3, [r7, #16]
 800fffc:	681a      	ldr	r2, [r3, #0]
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	4413      	add	r3, r2
}
 8010002:	4618      	mov	r0, r3
 8010004:	371c      	adds	r7, #28
 8010006:	46bd      	mov	sp, r7
 8010008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000c:	4770      	bx	lr

0801000e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801000e:	b580      	push	{r7, lr}
 8010010:	b086      	sub	sp, #24
 8010012:	af00      	add	r7, sp, #0
 8010014:	6078      	str	r0, [r7, #4]
 8010016:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010024:	d204      	bcs.n	8010030 <dir_sdi+0x22>
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	f003 031f 	and.w	r3, r3, #31
 801002c:	2b00      	cmp	r3, #0
 801002e:	d001      	beq.n	8010034 <dir_sdi+0x26>
		return FR_INT_ERR;
 8010030:	2302      	movs	r3, #2
 8010032:	e071      	b.n	8010118 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	683a      	ldr	r2, [r7, #0]
 8010038:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	689b      	ldr	r3, [r3, #8]
 801003e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010040:	697b      	ldr	r3, [r7, #20]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d106      	bne.n	8010054 <dir_sdi+0x46>
 8010046:	693b      	ldr	r3, [r7, #16]
 8010048:	781b      	ldrb	r3, [r3, #0]
 801004a:	2b02      	cmp	r3, #2
 801004c:	d902      	bls.n	8010054 <dir_sdi+0x46>
		clst = fs->dirbase;
 801004e:	693b      	ldr	r3, [r7, #16]
 8010050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010052:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010054:	697b      	ldr	r3, [r7, #20]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d10c      	bne.n	8010074 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	095b      	lsrs	r3, r3, #5
 801005e:	693a      	ldr	r2, [r7, #16]
 8010060:	8912      	ldrh	r2, [r2, #8]
 8010062:	4293      	cmp	r3, r2
 8010064:	d301      	bcc.n	801006a <dir_sdi+0x5c>
 8010066:	2302      	movs	r3, #2
 8010068:	e056      	b.n	8010118 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801006a:	693b      	ldr	r3, [r7, #16]
 801006c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	61da      	str	r2, [r3, #28]
 8010072:	e02d      	b.n	80100d0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010074:	693b      	ldr	r3, [r7, #16]
 8010076:	895b      	ldrh	r3, [r3, #10]
 8010078:	461a      	mov	r2, r3
 801007a:	693b      	ldr	r3, [r7, #16]
 801007c:	899b      	ldrh	r3, [r3, #12]
 801007e:	fb03 f302 	mul.w	r3, r3, r2
 8010082:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010084:	e019      	b.n	80100ba <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6979      	ldr	r1, [r7, #20]
 801008a:	4618      	mov	r0, r3
 801008c:	f7ff fca3 	bl	800f9d6 <get_fat>
 8010090:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010098:	d101      	bne.n	801009e <dir_sdi+0x90>
 801009a:	2301      	movs	r3, #1
 801009c:	e03c      	b.n	8010118 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	2b01      	cmp	r3, #1
 80100a2:	d904      	bls.n	80100ae <dir_sdi+0xa0>
 80100a4:	693b      	ldr	r3, [r7, #16]
 80100a6:	69db      	ldr	r3, [r3, #28]
 80100a8:	697a      	ldr	r2, [r7, #20]
 80100aa:	429a      	cmp	r2, r3
 80100ac:	d301      	bcc.n	80100b2 <dir_sdi+0xa4>
 80100ae:	2302      	movs	r3, #2
 80100b0:	e032      	b.n	8010118 <dir_sdi+0x10a>
			ofs -= csz;
 80100b2:	683a      	ldr	r2, [r7, #0]
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	1ad3      	subs	r3, r2, r3
 80100b8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80100ba:	683a      	ldr	r2, [r7, #0]
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	429a      	cmp	r2, r3
 80100c0:	d2e1      	bcs.n	8010086 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80100c2:	6979      	ldr	r1, [r7, #20]
 80100c4:	6938      	ldr	r0, [r7, #16]
 80100c6:	f7ff fc67 	bl	800f998 <clust2sect>
 80100ca:	4602      	mov	r2, r0
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	697a      	ldr	r2, [r7, #20]
 80100d4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	69db      	ldr	r3, [r3, #28]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d101      	bne.n	80100e2 <dir_sdi+0xd4>
 80100de:	2302      	movs	r3, #2
 80100e0:	e01a      	b.n	8010118 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	69da      	ldr	r2, [r3, #28]
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	899b      	ldrh	r3, [r3, #12]
 80100ea:	4619      	mov	r1, r3
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80100f2:	441a      	add	r2, r3
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80100fe:	693b      	ldr	r3, [r7, #16]
 8010100:	899b      	ldrh	r3, [r3, #12]
 8010102:	461a      	mov	r2, r3
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	fbb3 f0f2 	udiv	r0, r3, r2
 801010a:	fb02 f200 	mul.w	r2, r2, r0
 801010e:	1a9b      	subs	r3, r3, r2
 8010110:	18ca      	adds	r2, r1, r3
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010116:	2300      	movs	r3, #0
}
 8010118:	4618      	mov	r0, r3
 801011a:	3718      	adds	r7, #24
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}

08010120 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b086      	sub	sp, #24
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
 8010128:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	695b      	ldr	r3, [r3, #20]
 8010134:	3320      	adds	r3, #32
 8010136:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	69db      	ldr	r3, [r3, #28]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d003      	beq.n	8010148 <dir_next+0x28>
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010146:	d301      	bcc.n	801014c <dir_next+0x2c>
 8010148:	2304      	movs	r3, #4
 801014a:	e0bb      	b.n	80102c4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	899b      	ldrh	r3, [r3, #12]
 8010150:	461a      	mov	r2, r3
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	fbb3 f1f2 	udiv	r1, r3, r2
 8010158:	fb02 f201 	mul.w	r2, r2, r1
 801015c:	1a9b      	subs	r3, r3, r2
 801015e:	2b00      	cmp	r3, #0
 8010160:	f040 809d 	bne.w	801029e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	69db      	ldr	r3, [r3, #28]
 8010168:	1c5a      	adds	r2, r3, #1
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	699b      	ldr	r3, [r3, #24]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d10b      	bne.n	801018e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	095b      	lsrs	r3, r3, #5
 801017a:	68fa      	ldr	r2, [r7, #12]
 801017c:	8912      	ldrh	r2, [r2, #8]
 801017e:	4293      	cmp	r3, r2
 8010180:	f0c0 808d 	bcc.w	801029e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2200      	movs	r2, #0
 8010188:	61da      	str	r2, [r3, #28]
 801018a:	2304      	movs	r3, #4
 801018c:	e09a      	b.n	80102c4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	899b      	ldrh	r3, [r3, #12]
 8010192:	461a      	mov	r2, r3
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	fbb3 f3f2 	udiv	r3, r3, r2
 801019a:	68fa      	ldr	r2, [r7, #12]
 801019c:	8952      	ldrh	r2, [r2, #10]
 801019e:	3a01      	subs	r2, #1
 80101a0:	4013      	ands	r3, r2
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d17b      	bne.n	801029e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80101a6:	687a      	ldr	r2, [r7, #4]
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	699b      	ldr	r3, [r3, #24]
 80101ac:	4619      	mov	r1, r3
 80101ae:	4610      	mov	r0, r2
 80101b0:	f7ff fc11 	bl	800f9d6 <get_fat>
 80101b4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	2b01      	cmp	r3, #1
 80101ba:	d801      	bhi.n	80101c0 <dir_next+0xa0>
 80101bc:	2302      	movs	r3, #2
 80101be:	e081      	b.n	80102c4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101c6:	d101      	bne.n	80101cc <dir_next+0xac>
 80101c8:	2301      	movs	r3, #1
 80101ca:	e07b      	b.n	80102c4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	69db      	ldr	r3, [r3, #28]
 80101d0:	697a      	ldr	r2, [r7, #20]
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d359      	bcc.n	801028a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d104      	bne.n	80101e6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2200      	movs	r2, #0
 80101e0:	61da      	str	r2, [r3, #28]
 80101e2:	2304      	movs	r3, #4
 80101e4:	e06e      	b.n	80102c4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	699b      	ldr	r3, [r3, #24]
 80101ec:	4619      	mov	r1, r3
 80101ee:	4610      	mov	r0, r2
 80101f0:	f7ff fe3d 	bl	800fe6e <create_chain>
 80101f4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80101f6:	697b      	ldr	r3, [r7, #20]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d101      	bne.n	8010200 <dir_next+0xe0>
 80101fc:	2307      	movs	r3, #7
 80101fe:	e061      	b.n	80102c4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	2b01      	cmp	r3, #1
 8010204:	d101      	bne.n	801020a <dir_next+0xea>
 8010206:	2302      	movs	r3, #2
 8010208:	e05c      	b.n	80102c4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010210:	d101      	bne.n	8010216 <dir_next+0xf6>
 8010212:	2301      	movs	r3, #1
 8010214:	e056      	b.n	80102c4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010216:	68f8      	ldr	r0, [r7, #12]
 8010218:	f7ff fadc 	bl	800f7d4 <sync_window>
 801021c:	4603      	mov	r3, r0
 801021e:	2b00      	cmp	r3, #0
 8010220:	d001      	beq.n	8010226 <dir_next+0x106>
 8010222:	2301      	movs	r3, #1
 8010224:	e04e      	b.n	80102c4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	899b      	ldrh	r3, [r3, #12]
 8010230:	461a      	mov	r2, r3
 8010232:	2100      	movs	r1, #0
 8010234:	f7ff f905 	bl	800f442 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010238:	2300      	movs	r3, #0
 801023a:	613b      	str	r3, [r7, #16]
 801023c:	6979      	ldr	r1, [r7, #20]
 801023e:	68f8      	ldr	r0, [r7, #12]
 8010240:	f7ff fbaa 	bl	800f998 <clust2sect>
 8010244:	4602      	mov	r2, r0
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	635a      	str	r2, [r3, #52]	; 0x34
 801024a:	e012      	b.n	8010272 <dir_next+0x152>
						fs->wflag = 1;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	2201      	movs	r2, #1
 8010250:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010252:	68f8      	ldr	r0, [r7, #12]
 8010254:	f7ff fabe 	bl	800f7d4 <sync_window>
 8010258:	4603      	mov	r3, r0
 801025a:	2b00      	cmp	r3, #0
 801025c:	d001      	beq.n	8010262 <dir_next+0x142>
 801025e:	2301      	movs	r3, #1
 8010260:	e030      	b.n	80102c4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010262:	693b      	ldr	r3, [r7, #16]
 8010264:	3301      	adds	r3, #1
 8010266:	613b      	str	r3, [r7, #16]
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801026c:	1c5a      	adds	r2, r3, #1
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	635a      	str	r2, [r3, #52]	; 0x34
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	895b      	ldrh	r3, [r3, #10]
 8010276:	461a      	mov	r2, r3
 8010278:	693b      	ldr	r3, [r7, #16]
 801027a:	4293      	cmp	r3, r2
 801027c:	d3e6      	bcc.n	801024c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010282:	693b      	ldr	r3, [r7, #16]
 8010284:	1ad2      	subs	r2, r2, r3
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	697a      	ldr	r2, [r7, #20]
 801028e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010290:	6979      	ldr	r1, [r7, #20]
 8010292:	68f8      	ldr	r0, [r7, #12]
 8010294:	f7ff fb80 	bl	800f998 <clust2sect>
 8010298:	4602      	mov	r2, r0
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	68ba      	ldr	r2, [r7, #8]
 80102a2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	899b      	ldrh	r3, [r3, #12]
 80102ae:	461a      	mov	r2, r3
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80102b6:	fb02 f200 	mul.w	r2, r2, r0
 80102ba:	1a9b      	subs	r3, r3, r2
 80102bc:	18ca      	adds	r2, r1, r3
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80102c2:	2300      	movs	r3, #0
}
 80102c4:	4618      	mov	r0, r3
 80102c6:	3718      	adds	r7, #24
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}

080102cc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b086      	sub	sp, #24
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80102dc:	2100      	movs	r1, #0
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f7ff fe95 	bl	801000e <dir_sdi>
 80102e4:	4603      	mov	r3, r0
 80102e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80102e8:	7dfb      	ldrb	r3, [r7, #23]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d12b      	bne.n	8010346 <dir_alloc+0x7a>
		n = 0;
 80102ee:	2300      	movs	r3, #0
 80102f0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	69db      	ldr	r3, [r3, #28]
 80102f6:	4619      	mov	r1, r3
 80102f8:	68f8      	ldr	r0, [r7, #12]
 80102fa:	f7ff faaf 	bl	800f85c <move_window>
 80102fe:	4603      	mov	r3, r0
 8010300:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010302:	7dfb      	ldrb	r3, [r7, #23]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d11d      	bne.n	8010344 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	6a1b      	ldr	r3, [r3, #32]
 801030c:	781b      	ldrb	r3, [r3, #0]
 801030e:	2be5      	cmp	r3, #229	; 0xe5
 8010310:	d004      	beq.n	801031c <dir_alloc+0x50>
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6a1b      	ldr	r3, [r3, #32]
 8010316:	781b      	ldrb	r3, [r3, #0]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d107      	bne.n	801032c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801031c:	693b      	ldr	r3, [r7, #16]
 801031e:	3301      	adds	r3, #1
 8010320:	613b      	str	r3, [r7, #16]
 8010322:	693a      	ldr	r2, [r7, #16]
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	429a      	cmp	r2, r3
 8010328:	d102      	bne.n	8010330 <dir_alloc+0x64>
 801032a:	e00c      	b.n	8010346 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801032c:	2300      	movs	r3, #0
 801032e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010330:	2101      	movs	r1, #1
 8010332:	6878      	ldr	r0, [r7, #4]
 8010334:	f7ff fef4 	bl	8010120 <dir_next>
 8010338:	4603      	mov	r3, r0
 801033a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801033c:	7dfb      	ldrb	r3, [r7, #23]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d0d7      	beq.n	80102f2 <dir_alloc+0x26>
 8010342:	e000      	b.n	8010346 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010344:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010346:	7dfb      	ldrb	r3, [r7, #23]
 8010348:	2b04      	cmp	r3, #4
 801034a:	d101      	bne.n	8010350 <dir_alloc+0x84>
 801034c:	2307      	movs	r3, #7
 801034e:	75fb      	strb	r3, [r7, #23]
	return res;
 8010350:	7dfb      	ldrb	r3, [r7, #23]
}
 8010352:	4618      	mov	r0, r3
 8010354:	3718      	adds	r7, #24
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}

0801035a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801035a:	b580      	push	{r7, lr}
 801035c:	b084      	sub	sp, #16
 801035e:	af00      	add	r7, sp, #0
 8010360:	6078      	str	r0, [r7, #4]
 8010362:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	331a      	adds	r3, #26
 8010368:	4618      	mov	r0, r3
 801036a:	f7fe ffc7 	bl	800f2fc <ld_word>
 801036e:	4603      	mov	r3, r0
 8010370:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	781b      	ldrb	r3, [r3, #0]
 8010376:	2b03      	cmp	r3, #3
 8010378:	d109      	bne.n	801038e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	3314      	adds	r3, #20
 801037e:	4618      	mov	r0, r3
 8010380:	f7fe ffbc 	bl	800f2fc <ld_word>
 8010384:	4603      	mov	r3, r0
 8010386:	041b      	lsls	r3, r3, #16
 8010388:	68fa      	ldr	r2, [r7, #12]
 801038a:	4313      	orrs	r3, r2
 801038c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801038e:	68fb      	ldr	r3, [r7, #12]
}
 8010390:	4618      	mov	r0, r3
 8010392:	3710      	adds	r7, #16
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}

08010398 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b084      	sub	sp, #16
 801039c:	af00      	add	r7, sp, #0
 801039e:	60f8      	str	r0, [r7, #12]
 80103a0:	60b9      	str	r1, [r7, #8]
 80103a2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80103a4:	68bb      	ldr	r3, [r7, #8]
 80103a6:	331a      	adds	r3, #26
 80103a8:	687a      	ldr	r2, [r7, #4]
 80103aa:	b292      	uxth	r2, r2
 80103ac:	4611      	mov	r1, r2
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7fe ffdf 	bl	800f372 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	781b      	ldrb	r3, [r3, #0]
 80103b8:	2b03      	cmp	r3, #3
 80103ba:	d109      	bne.n	80103d0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	f103 0214 	add.w	r2, r3, #20
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	0c1b      	lsrs	r3, r3, #16
 80103c6:	b29b      	uxth	r3, r3
 80103c8:	4619      	mov	r1, r3
 80103ca:	4610      	mov	r0, r2
 80103cc:	f7fe ffd1 	bl	800f372 <st_word>
	}
}
 80103d0:	bf00      	nop
 80103d2:	3710      	adds	r7, #16
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}

080103d8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b086      	sub	sp, #24
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
 80103e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80103e2:	2304      	movs	r3, #4
 80103e4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80103ec:	e03c      	b.n	8010468 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	69db      	ldr	r3, [r3, #28]
 80103f2:	4619      	mov	r1, r3
 80103f4:	6938      	ldr	r0, [r7, #16]
 80103f6:	f7ff fa31 	bl	800f85c <move_window>
 80103fa:	4603      	mov	r3, r0
 80103fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80103fe:	7dfb      	ldrb	r3, [r7, #23]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d136      	bne.n	8010472 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	6a1b      	ldr	r3, [r3, #32]
 8010408:	781b      	ldrb	r3, [r3, #0]
 801040a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 801040c:	7bfb      	ldrb	r3, [r7, #15]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d102      	bne.n	8010418 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8010412:	2304      	movs	r3, #4
 8010414:	75fb      	strb	r3, [r7, #23]
 8010416:	e031      	b.n	801047c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6a1b      	ldr	r3, [r3, #32]
 801041c:	330b      	adds	r3, #11
 801041e:	781b      	ldrb	r3, [r3, #0]
 8010420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010424:	73bb      	strb	r3, [r7, #14]
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	7bba      	ldrb	r2, [r7, #14]
 801042a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 801042c:	7bfb      	ldrb	r3, [r7, #15]
 801042e:	2be5      	cmp	r3, #229	; 0xe5
 8010430:	d011      	beq.n	8010456 <dir_read+0x7e>
 8010432:	7bfb      	ldrb	r3, [r7, #15]
 8010434:	2b2e      	cmp	r3, #46	; 0x2e
 8010436:	d00e      	beq.n	8010456 <dir_read+0x7e>
 8010438:	7bbb      	ldrb	r3, [r7, #14]
 801043a:	2b0f      	cmp	r3, #15
 801043c:	d00b      	beq.n	8010456 <dir_read+0x7e>
 801043e:	7bbb      	ldrb	r3, [r7, #14]
 8010440:	f023 0320 	bic.w	r3, r3, #32
 8010444:	2b08      	cmp	r3, #8
 8010446:	bf0c      	ite	eq
 8010448:	2301      	moveq	r3, #1
 801044a:	2300      	movne	r3, #0
 801044c:	b2db      	uxtb	r3, r3
 801044e:	461a      	mov	r2, r3
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	4293      	cmp	r3, r2
 8010454:	d00f      	beq.n	8010476 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8010456:	2100      	movs	r1, #0
 8010458:	6878      	ldr	r0, [r7, #4]
 801045a:	f7ff fe61 	bl	8010120 <dir_next>
 801045e:	4603      	mov	r3, r0
 8010460:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010462:	7dfb      	ldrb	r3, [r7, #23]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d108      	bne.n	801047a <dir_read+0xa2>
	while (dp->sect) {
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	69db      	ldr	r3, [r3, #28]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d1be      	bne.n	80103ee <dir_read+0x16>
 8010470:	e004      	b.n	801047c <dir_read+0xa4>
		if (res != FR_OK) break;
 8010472:	bf00      	nop
 8010474:	e002      	b.n	801047c <dir_read+0xa4>
				break;
 8010476:	bf00      	nop
 8010478:	e000      	b.n	801047c <dir_read+0xa4>
		if (res != FR_OK) break;
 801047a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801047c:	7dfb      	ldrb	r3, [r7, #23]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d002      	beq.n	8010488 <dir_read+0xb0>
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	2200      	movs	r2, #0
 8010486:	61da      	str	r2, [r3, #28]
	return res;
 8010488:	7dfb      	ldrb	r3, [r7, #23]
}
 801048a:	4618      	mov	r0, r3
 801048c:	3718      	adds	r7, #24
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}

08010492 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010492:	b580      	push	{r7, lr}
 8010494:	b086      	sub	sp, #24
 8010496:	af00      	add	r7, sp, #0
 8010498:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80104a0:	2100      	movs	r1, #0
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f7ff fdb3 	bl	801000e <dir_sdi>
 80104a8:	4603      	mov	r3, r0
 80104aa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80104ac:	7dfb      	ldrb	r3, [r7, #23]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d001      	beq.n	80104b6 <dir_find+0x24>
 80104b2:	7dfb      	ldrb	r3, [r7, #23]
 80104b4:	e03e      	b.n	8010534 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	69db      	ldr	r3, [r3, #28]
 80104ba:	4619      	mov	r1, r3
 80104bc:	6938      	ldr	r0, [r7, #16]
 80104be:	f7ff f9cd 	bl	800f85c <move_window>
 80104c2:	4603      	mov	r3, r0
 80104c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80104c6:	7dfb      	ldrb	r3, [r7, #23]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d12f      	bne.n	801052c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	6a1b      	ldr	r3, [r3, #32]
 80104d0:	781b      	ldrb	r3, [r3, #0]
 80104d2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80104d4:	7bfb      	ldrb	r3, [r7, #15]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d102      	bne.n	80104e0 <dir_find+0x4e>
 80104da:	2304      	movs	r3, #4
 80104dc:	75fb      	strb	r3, [r7, #23]
 80104de:	e028      	b.n	8010532 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	6a1b      	ldr	r3, [r3, #32]
 80104e4:	330b      	adds	r3, #11
 80104e6:	781b      	ldrb	r3, [r3, #0]
 80104e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80104ec:	b2da      	uxtb	r2, r3
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	6a1b      	ldr	r3, [r3, #32]
 80104f6:	330b      	adds	r3, #11
 80104f8:	781b      	ldrb	r3, [r3, #0]
 80104fa:	f003 0308 	and.w	r3, r3, #8
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d10a      	bne.n	8010518 <dir_find+0x86>
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	6a18      	ldr	r0, [r3, #32]
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	3324      	adds	r3, #36	; 0x24
 801050a:	220b      	movs	r2, #11
 801050c:	4619      	mov	r1, r3
 801050e:	f7fe ffb2 	bl	800f476 <mem_cmp>
 8010512:	4603      	mov	r3, r0
 8010514:	2b00      	cmp	r3, #0
 8010516:	d00b      	beq.n	8010530 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010518:	2100      	movs	r1, #0
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	f7ff fe00 	bl	8010120 <dir_next>
 8010520:	4603      	mov	r3, r0
 8010522:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010524:	7dfb      	ldrb	r3, [r7, #23]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d0c5      	beq.n	80104b6 <dir_find+0x24>
 801052a:	e002      	b.n	8010532 <dir_find+0xa0>
		if (res != FR_OK) break;
 801052c:	bf00      	nop
 801052e:	e000      	b.n	8010532 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010530:	bf00      	nop

	return res;
 8010532:	7dfb      	ldrb	r3, [r7, #23]
}
 8010534:	4618      	mov	r0, r3
 8010536:	3718      	adds	r7, #24
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}

0801053c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b084      	sub	sp, #16
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801054a:	2101      	movs	r1, #1
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	f7ff febd 	bl	80102cc <dir_alloc>
 8010552:	4603      	mov	r3, r0
 8010554:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010556:	7bfb      	ldrb	r3, [r7, #15]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d11c      	bne.n	8010596 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	69db      	ldr	r3, [r3, #28]
 8010560:	4619      	mov	r1, r3
 8010562:	68b8      	ldr	r0, [r7, #8]
 8010564:	f7ff f97a 	bl	800f85c <move_window>
 8010568:	4603      	mov	r3, r0
 801056a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801056c:	7bfb      	ldrb	r3, [r7, #15]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d111      	bne.n	8010596 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6a1b      	ldr	r3, [r3, #32]
 8010576:	2220      	movs	r2, #32
 8010578:	2100      	movs	r1, #0
 801057a:	4618      	mov	r0, r3
 801057c:	f7fe ff61 	bl	800f442 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6a18      	ldr	r0, [r3, #32]
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	3324      	adds	r3, #36	; 0x24
 8010588:	220b      	movs	r2, #11
 801058a:	4619      	mov	r1, r3
 801058c:	f7fe ff38 	bl	800f400 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	2201      	movs	r2, #1
 8010594:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010596:	7bfb      	ldrb	r3, [r7, #15]
}
 8010598:	4618      	mov	r0, r3
 801059a:	3710      	adds	r7, #16
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}

080105a0 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b084      	sub	sp, #16
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	69db      	ldr	r3, [r3, #28]
 80105b2:	4619      	mov	r1, r3
 80105b4:	68f8      	ldr	r0, [r7, #12]
 80105b6:	f7ff f951 	bl	800f85c <move_window>
 80105ba:	4603      	mov	r3, r0
 80105bc:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80105be:	7afb      	ldrb	r3, [r7, #11]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d106      	bne.n	80105d2 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6a1b      	ldr	r3, [r3, #32]
 80105c8:	22e5      	movs	r2, #229	; 0xe5
 80105ca:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	2201      	movs	r2, #1
 80105d0:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80105d2:	7afb      	ldrb	r3, [r7, #11]
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3710      	adds	r7, #16
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}

080105dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b088      	sub	sp, #32
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
 80105e4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	60fb      	str	r3, [r7, #12]
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	3324      	adds	r3, #36	; 0x24
 80105f0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80105f2:	220b      	movs	r2, #11
 80105f4:	2120      	movs	r1, #32
 80105f6:	68b8      	ldr	r0, [r7, #8]
 80105f8:	f7fe ff23 	bl	800f442 <mem_set>
	si = i = 0; ni = 8;
 80105fc:	2300      	movs	r3, #0
 80105fe:	613b      	str	r3, [r7, #16]
 8010600:	693b      	ldr	r3, [r7, #16]
 8010602:	617b      	str	r3, [r7, #20]
 8010604:	2308      	movs	r3, #8
 8010606:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8010608:	68fa      	ldr	r2, [r7, #12]
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	4413      	add	r3, r2
 801060e:	781b      	ldrb	r3, [r3, #0]
 8010610:	2b2e      	cmp	r3, #46	; 0x2e
 8010612:	d12f      	bne.n	8010674 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8010614:	697b      	ldr	r3, [r7, #20]
 8010616:	1c5a      	adds	r2, r3, #1
 8010618:	617a      	str	r2, [r7, #20]
 801061a:	68fa      	ldr	r2, [r7, #12]
 801061c:	4413      	add	r3, r2
 801061e:	781b      	ldrb	r3, [r3, #0]
 8010620:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8010622:	7ffb      	ldrb	r3, [r7, #31]
 8010624:	2b2e      	cmp	r3, #46	; 0x2e
 8010626:	d10a      	bne.n	801063e <create_name+0x62>
 8010628:	697b      	ldr	r3, [r7, #20]
 801062a:	2b02      	cmp	r3, #2
 801062c:	d807      	bhi.n	801063e <create_name+0x62>
			sfn[i++] = c;
 801062e:	693b      	ldr	r3, [r7, #16]
 8010630:	1c5a      	adds	r2, r3, #1
 8010632:	613a      	str	r2, [r7, #16]
 8010634:	68ba      	ldr	r2, [r7, #8]
 8010636:	4413      	add	r3, r2
 8010638:	7ffa      	ldrb	r2, [r7, #31]
 801063a:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 801063c:	e7ea      	b.n	8010614 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 801063e:	7ffb      	ldrb	r3, [r7, #31]
 8010640:	2b2f      	cmp	r3, #47	; 0x2f
 8010642:	d007      	beq.n	8010654 <create_name+0x78>
 8010644:	7ffb      	ldrb	r3, [r7, #31]
 8010646:	2b5c      	cmp	r3, #92	; 0x5c
 8010648:	d004      	beq.n	8010654 <create_name+0x78>
 801064a:	7ffb      	ldrb	r3, [r7, #31]
 801064c:	2b20      	cmp	r3, #32
 801064e:	d901      	bls.n	8010654 <create_name+0x78>
 8010650:	2306      	movs	r3, #6
 8010652:	e084      	b.n	801075e <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8010654:	68fa      	ldr	r2, [r7, #12]
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	441a      	add	r2, r3
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 801065e:	7ffb      	ldrb	r3, [r7, #31]
 8010660:	2b20      	cmp	r3, #32
 8010662:	d801      	bhi.n	8010668 <create_name+0x8c>
 8010664:	2224      	movs	r2, #36	; 0x24
 8010666:	e000      	b.n	801066a <create_name+0x8e>
 8010668:	2220      	movs	r2, #32
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	330b      	adds	r3, #11
 801066e:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8010670:	2300      	movs	r3, #0
 8010672:	e074      	b.n	801075e <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	1c5a      	adds	r2, r3, #1
 8010678:	617a      	str	r2, [r7, #20]
 801067a:	68fa      	ldr	r2, [r7, #12]
 801067c:	4413      	add	r3, r2
 801067e:	781b      	ldrb	r3, [r3, #0]
 8010680:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010682:	7ffb      	ldrb	r3, [r7, #31]
 8010684:	2b20      	cmp	r3, #32
 8010686:	d94e      	bls.n	8010726 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010688:	7ffb      	ldrb	r3, [r7, #31]
 801068a:	2b2f      	cmp	r3, #47	; 0x2f
 801068c:	d006      	beq.n	801069c <create_name+0xc0>
 801068e:	7ffb      	ldrb	r3, [r7, #31]
 8010690:	2b5c      	cmp	r3, #92	; 0x5c
 8010692:	d110      	bne.n	80106b6 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010694:	e002      	b.n	801069c <create_name+0xc0>
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	3301      	adds	r3, #1
 801069a:	617b      	str	r3, [r7, #20]
 801069c:	68fa      	ldr	r2, [r7, #12]
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	4413      	add	r3, r2
 80106a2:	781b      	ldrb	r3, [r3, #0]
 80106a4:	2b2f      	cmp	r3, #47	; 0x2f
 80106a6:	d0f6      	beq.n	8010696 <create_name+0xba>
 80106a8:	68fa      	ldr	r2, [r7, #12]
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	4413      	add	r3, r2
 80106ae:	781b      	ldrb	r3, [r3, #0]
 80106b0:	2b5c      	cmp	r3, #92	; 0x5c
 80106b2:	d0f0      	beq.n	8010696 <create_name+0xba>
			break;
 80106b4:	e038      	b.n	8010728 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80106b6:	7ffb      	ldrb	r3, [r7, #31]
 80106b8:	2b2e      	cmp	r3, #46	; 0x2e
 80106ba:	d003      	beq.n	80106c4 <create_name+0xe8>
 80106bc:	693a      	ldr	r2, [r7, #16]
 80106be:	69bb      	ldr	r3, [r7, #24]
 80106c0:	429a      	cmp	r2, r3
 80106c2:	d30c      	bcc.n	80106de <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80106c4:	69bb      	ldr	r3, [r7, #24]
 80106c6:	2b0b      	cmp	r3, #11
 80106c8:	d002      	beq.n	80106d0 <create_name+0xf4>
 80106ca:	7ffb      	ldrb	r3, [r7, #31]
 80106cc:	2b2e      	cmp	r3, #46	; 0x2e
 80106ce:	d001      	beq.n	80106d4 <create_name+0xf8>
 80106d0:	2306      	movs	r3, #6
 80106d2:	e044      	b.n	801075e <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 80106d4:	2308      	movs	r3, #8
 80106d6:	613b      	str	r3, [r7, #16]
 80106d8:	230b      	movs	r3, #11
 80106da:	61bb      	str	r3, [r7, #24]
			continue;
 80106dc:	e022      	b.n	8010724 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 80106de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	da04      	bge.n	80106f0 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80106e6:	7ffb      	ldrb	r3, [r7, #31]
 80106e8:	3b80      	subs	r3, #128	; 0x80
 80106ea:	4a1f      	ldr	r2, [pc, #124]	; (8010768 <create_name+0x18c>)
 80106ec:	5cd3      	ldrb	r3, [r2, r3]
 80106ee:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80106f0:	7ffb      	ldrb	r3, [r7, #31]
 80106f2:	4619      	mov	r1, r3
 80106f4:	481d      	ldr	r0, [pc, #116]	; (801076c <create_name+0x190>)
 80106f6:	f7fe fee5 	bl	800f4c4 <chk_chr>
 80106fa:	4603      	mov	r3, r0
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d001      	beq.n	8010704 <create_name+0x128>
 8010700:	2306      	movs	r3, #6
 8010702:	e02c      	b.n	801075e <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010704:	7ffb      	ldrb	r3, [r7, #31]
 8010706:	2b60      	cmp	r3, #96	; 0x60
 8010708:	d905      	bls.n	8010716 <create_name+0x13a>
 801070a:	7ffb      	ldrb	r3, [r7, #31]
 801070c:	2b7a      	cmp	r3, #122	; 0x7a
 801070e:	d802      	bhi.n	8010716 <create_name+0x13a>
 8010710:	7ffb      	ldrb	r3, [r7, #31]
 8010712:	3b20      	subs	r3, #32
 8010714:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8010716:	693b      	ldr	r3, [r7, #16]
 8010718:	1c5a      	adds	r2, r3, #1
 801071a:	613a      	str	r2, [r7, #16]
 801071c:	68ba      	ldr	r2, [r7, #8]
 801071e:	4413      	add	r3, r2
 8010720:	7ffa      	ldrb	r2, [r7, #31]
 8010722:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010724:	e7a6      	b.n	8010674 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010726:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010728:	68fa      	ldr	r2, [r7, #12]
 801072a:	697b      	ldr	r3, [r7, #20]
 801072c:	441a      	add	r2, r3
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d101      	bne.n	801073c <create_name+0x160>
 8010738:	2306      	movs	r3, #6
 801073a:	e010      	b.n	801075e <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	2be5      	cmp	r3, #229	; 0xe5
 8010742:	d102      	bne.n	801074a <create_name+0x16e>
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	2205      	movs	r2, #5
 8010748:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801074a:	7ffb      	ldrb	r3, [r7, #31]
 801074c:	2b20      	cmp	r3, #32
 801074e:	d801      	bhi.n	8010754 <create_name+0x178>
 8010750:	2204      	movs	r2, #4
 8010752:	e000      	b.n	8010756 <create_name+0x17a>
 8010754:	2200      	movs	r2, #0
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	330b      	adds	r3, #11
 801075a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801075c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801075e:	4618      	mov	r0, r3
 8010760:	3720      	adds	r7, #32
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}
 8010766:	bf00      	nop
 8010768:	08017ebc 	.word	0x08017ebc
 801076c:	08017e6c 	.word	0x08017e6c

08010770 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b086      	sub	sp, #24
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
 8010778:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801077e:	693b      	ldr	r3, [r7, #16]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8010784:	683b      	ldr	r3, [r7, #0]
 8010786:	781b      	ldrb	r3, [r3, #0]
 8010788:	2b2f      	cmp	r3, #47	; 0x2f
 801078a:	d00b      	beq.n	80107a4 <follow_path+0x34>
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	781b      	ldrb	r3, [r3, #0]
 8010790:	2b5c      	cmp	r3, #92	; 0x5c
 8010792:	d007      	beq.n	80107a4 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	699a      	ldr	r2, [r3, #24]
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	609a      	str	r2, [r3, #8]
 801079c:	e00d      	b.n	80107ba <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801079e:	683b      	ldr	r3, [r7, #0]
 80107a0:	3301      	adds	r3, #1
 80107a2:	603b      	str	r3, [r7, #0]
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	781b      	ldrb	r3, [r3, #0]
 80107a8:	2b2f      	cmp	r3, #47	; 0x2f
 80107aa:	d0f8      	beq.n	801079e <follow_path+0x2e>
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	781b      	ldrb	r3, [r3, #0]
 80107b0:	2b5c      	cmp	r3, #92	; 0x5c
 80107b2:	d0f4      	beq.n	801079e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	2200      	movs	r2, #0
 80107b8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	781b      	ldrb	r3, [r3, #0]
 80107be:	2b1f      	cmp	r3, #31
 80107c0:	d80a      	bhi.n	80107d8 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2280      	movs	r2, #128	; 0x80
 80107c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80107ca:	2100      	movs	r1, #0
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f7ff fc1e 	bl	801000e <dir_sdi>
 80107d2:	4603      	mov	r3, r0
 80107d4:	75fb      	strb	r3, [r7, #23]
 80107d6:	e05b      	b.n	8010890 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80107d8:	463b      	mov	r3, r7
 80107da:	4619      	mov	r1, r3
 80107dc:	6878      	ldr	r0, [r7, #4]
 80107de:	f7ff fefd 	bl	80105dc <create_name>
 80107e2:	4603      	mov	r3, r0
 80107e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80107e6:	7dfb      	ldrb	r3, [r7, #23]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d14c      	bne.n	8010886 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 80107ec:	6878      	ldr	r0, [r7, #4]
 80107ee:	f7ff fe50 	bl	8010492 <dir_find>
 80107f2:	4603      	mov	r3, r0
 80107f4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80107fc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80107fe:	7dfb      	ldrb	r3, [r7, #23]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d01b      	beq.n	801083c <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010804:	7dfb      	ldrb	r3, [r7, #23]
 8010806:	2b04      	cmp	r3, #4
 8010808:	d13f      	bne.n	801088a <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 801080a:	7afb      	ldrb	r3, [r7, #11]
 801080c:	f003 0320 	and.w	r3, r3, #32
 8010810:	2b00      	cmp	r3, #0
 8010812:	d00b      	beq.n	801082c <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010814:	7afb      	ldrb	r3, [r7, #11]
 8010816:	f003 0304 	and.w	r3, r3, #4
 801081a:	2b00      	cmp	r3, #0
 801081c:	d031      	beq.n	8010882 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2280      	movs	r2, #128	; 0x80
 8010822:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8010826:	2300      	movs	r3, #0
 8010828:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 801082a:	e02e      	b.n	801088a <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801082c:	7afb      	ldrb	r3, [r7, #11]
 801082e:	f003 0304 	and.w	r3, r3, #4
 8010832:	2b00      	cmp	r3, #0
 8010834:	d129      	bne.n	801088a <follow_path+0x11a>
 8010836:	2305      	movs	r3, #5
 8010838:	75fb      	strb	r3, [r7, #23]
				break;
 801083a:	e026      	b.n	801088a <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801083c:	7afb      	ldrb	r3, [r7, #11]
 801083e:	f003 0304 	and.w	r3, r3, #4
 8010842:	2b00      	cmp	r3, #0
 8010844:	d123      	bne.n	801088e <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010846:	693b      	ldr	r3, [r7, #16]
 8010848:	799b      	ldrb	r3, [r3, #6]
 801084a:	f003 0310 	and.w	r3, r3, #16
 801084e:	2b00      	cmp	r3, #0
 8010850:	d102      	bne.n	8010858 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8010852:	2305      	movs	r3, #5
 8010854:	75fb      	strb	r3, [r7, #23]
 8010856:	e01b      	b.n	8010890 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	695b      	ldr	r3, [r3, #20]
 8010862:	68fa      	ldr	r2, [r7, #12]
 8010864:	8992      	ldrh	r2, [r2, #12]
 8010866:	fbb3 f0f2 	udiv	r0, r3, r2
 801086a:	fb02 f200 	mul.w	r2, r2, r0
 801086e:	1a9b      	subs	r3, r3, r2
 8010870:	440b      	add	r3, r1
 8010872:	4619      	mov	r1, r3
 8010874:	68f8      	ldr	r0, [r7, #12]
 8010876:	f7ff fd70 	bl	801035a <ld_clust>
 801087a:	4602      	mov	r2, r0
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	609a      	str	r2, [r3, #8]
 8010880:	e7aa      	b.n	80107d8 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010882:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010884:	e7a8      	b.n	80107d8 <follow_path+0x68>
			if (res != FR_OK) break;
 8010886:	bf00      	nop
 8010888:	e002      	b.n	8010890 <follow_path+0x120>
				break;
 801088a:	bf00      	nop
 801088c:	e000      	b.n	8010890 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801088e:	bf00      	nop
			}
		}
	}

	return res;
 8010890:	7dfb      	ldrb	r3, [r7, #23]
}
 8010892:	4618      	mov	r0, r3
 8010894:	3718      	adds	r7, #24
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}

0801089a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801089a:	b480      	push	{r7}
 801089c:	b087      	sub	sp, #28
 801089e:	af00      	add	r7, sp, #0
 80108a0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80108a2:	f04f 33ff 	mov.w	r3, #4294967295
 80108a6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d031      	beq.n	8010914 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	617b      	str	r3, [r7, #20]
 80108b6:	e002      	b.n	80108be <get_ldnumber+0x24>
 80108b8:	697b      	ldr	r3, [r7, #20]
 80108ba:	3301      	adds	r3, #1
 80108bc:	617b      	str	r3, [r7, #20]
 80108be:	697b      	ldr	r3, [r7, #20]
 80108c0:	781b      	ldrb	r3, [r3, #0]
 80108c2:	2b20      	cmp	r3, #32
 80108c4:	d903      	bls.n	80108ce <get_ldnumber+0x34>
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	781b      	ldrb	r3, [r3, #0]
 80108ca:	2b3a      	cmp	r3, #58	; 0x3a
 80108cc:	d1f4      	bne.n	80108b8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	781b      	ldrb	r3, [r3, #0]
 80108d2:	2b3a      	cmp	r3, #58	; 0x3a
 80108d4:	d11c      	bne.n	8010910 <get_ldnumber+0x76>
			tp = *path;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	1c5a      	adds	r2, r3, #1
 80108e0:	60fa      	str	r2, [r7, #12]
 80108e2:	781b      	ldrb	r3, [r3, #0]
 80108e4:	3b30      	subs	r3, #48	; 0x30
 80108e6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	2b09      	cmp	r3, #9
 80108ec:	d80e      	bhi.n	801090c <get_ldnumber+0x72>
 80108ee:	68fa      	ldr	r2, [r7, #12]
 80108f0:	697b      	ldr	r3, [r7, #20]
 80108f2:	429a      	cmp	r2, r3
 80108f4:	d10a      	bne.n	801090c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d107      	bne.n	801090c <get_ldnumber+0x72>
					vol = (int)i;
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	3301      	adds	r3, #1
 8010904:	617b      	str	r3, [r7, #20]
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	697a      	ldr	r2, [r7, #20]
 801090a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	e002      	b.n	8010916 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010910:	2300      	movs	r3, #0
 8010912:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010914:	693b      	ldr	r3, [r7, #16]
}
 8010916:	4618      	mov	r0, r3
 8010918:	371c      	adds	r7, #28
 801091a:	46bd      	mov	sp, r7
 801091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010920:	4770      	bx	lr
	...

08010924 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b082      	sub	sp, #8
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2200      	movs	r2, #0
 8010932:	70da      	strb	r2, [r3, #3]
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f04f 32ff 	mov.w	r2, #4294967295
 801093a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801093c:	6839      	ldr	r1, [r7, #0]
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f7fe ff8c 	bl	800f85c <move_window>
 8010944:	4603      	mov	r3, r0
 8010946:	2b00      	cmp	r3, #0
 8010948:	d001      	beq.n	801094e <check_fs+0x2a>
 801094a:	2304      	movs	r3, #4
 801094c:	e038      	b.n	80109c0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	3338      	adds	r3, #56	; 0x38
 8010952:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010956:	4618      	mov	r0, r3
 8010958:	f7fe fcd0 	bl	800f2fc <ld_word>
 801095c:	4603      	mov	r3, r0
 801095e:	461a      	mov	r2, r3
 8010960:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010964:	429a      	cmp	r2, r3
 8010966:	d001      	beq.n	801096c <check_fs+0x48>
 8010968:	2303      	movs	r3, #3
 801096a:	e029      	b.n	80109c0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010972:	2be9      	cmp	r3, #233	; 0xe9
 8010974:	d009      	beq.n	801098a <check_fs+0x66>
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801097c:	2beb      	cmp	r3, #235	; 0xeb
 801097e:	d11e      	bne.n	80109be <check_fs+0x9a>
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010986:	2b90      	cmp	r3, #144	; 0x90
 8010988:	d119      	bne.n	80109be <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	3338      	adds	r3, #56	; 0x38
 801098e:	3336      	adds	r3, #54	; 0x36
 8010990:	4618      	mov	r0, r3
 8010992:	f7fe fccb 	bl	800f32c <ld_dword>
 8010996:	4603      	mov	r3, r0
 8010998:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801099c:	4a0a      	ldr	r2, [pc, #40]	; (80109c8 <check_fs+0xa4>)
 801099e:	4293      	cmp	r3, r2
 80109a0:	d101      	bne.n	80109a6 <check_fs+0x82>
 80109a2:	2300      	movs	r3, #0
 80109a4:	e00c      	b.n	80109c0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	3338      	adds	r3, #56	; 0x38
 80109aa:	3352      	adds	r3, #82	; 0x52
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7fe fcbd 	bl	800f32c <ld_dword>
 80109b2:	4602      	mov	r2, r0
 80109b4:	4b05      	ldr	r3, [pc, #20]	; (80109cc <check_fs+0xa8>)
 80109b6:	429a      	cmp	r2, r3
 80109b8:	d101      	bne.n	80109be <check_fs+0x9a>
 80109ba:	2300      	movs	r3, #0
 80109bc:	e000      	b.n	80109c0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80109be:	2302      	movs	r3, #2
}
 80109c0:	4618      	mov	r0, r3
 80109c2:	3708      	adds	r7, #8
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}
 80109c8:	00544146 	.word	0x00544146
 80109cc:	33544146 	.word	0x33544146

080109d0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b096      	sub	sp, #88	; 0x58
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	60f8      	str	r0, [r7, #12]
 80109d8:	60b9      	str	r1, [r7, #8]
 80109da:	4613      	mov	r3, r2
 80109dc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80109de:	68bb      	ldr	r3, [r7, #8]
 80109e0:	2200      	movs	r2, #0
 80109e2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80109e4:	68f8      	ldr	r0, [r7, #12]
 80109e6:	f7ff ff58 	bl	801089a <get_ldnumber>
 80109ea:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80109ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	da01      	bge.n	80109f6 <find_volume+0x26>
 80109f2:	230b      	movs	r3, #11
 80109f4:	e268      	b.n	8010ec8 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80109f6:	4ab0      	ldr	r2, [pc, #704]	; (8010cb8 <find_volume+0x2e8>)
 80109f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80109fe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d101      	bne.n	8010a0a <find_volume+0x3a>
 8010a06:	230c      	movs	r3, #12
 8010a08:	e25e      	b.n	8010ec8 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010a0a:	68bb      	ldr	r3, [r7, #8]
 8010a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010a0e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010a10:	79fb      	ldrb	r3, [r7, #7]
 8010a12:	f023 0301 	bic.w	r3, r3, #1
 8010a16:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a1a:	781b      	ldrb	r3, [r3, #0]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d01a      	beq.n	8010a56 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a22:	785b      	ldrb	r3, [r3, #1]
 8010a24:	4618      	mov	r0, r3
 8010a26:	f7fe fbcb 	bl	800f1c0 <disk_status>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010a30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010a34:	f003 0301 	and.w	r3, r3, #1
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d10c      	bne.n	8010a56 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010a3c:	79fb      	ldrb	r3, [r7, #7]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d007      	beq.n	8010a52 <find_volume+0x82>
 8010a42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010a46:	f003 0304 	and.w	r3, r3, #4
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d001      	beq.n	8010a52 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010a4e:	230a      	movs	r3, #10
 8010a50:	e23a      	b.n	8010ec8 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8010a52:	2300      	movs	r3, #0
 8010a54:	e238      	b.n	8010ec8 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a58:	2200      	movs	r2, #0
 8010a5a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a5e:	b2da      	uxtb	r2, r3
 8010a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a62:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a66:	785b      	ldrb	r3, [r3, #1]
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f7fe fbc3 	bl	800f1f4 <disk_initialize>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010a74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010a78:	f003 0301 	and.w	r3, r3, #1
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d001      	beq.n	8010a84 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010a80:	2303      	movs	r3, #3
 8010a82:	e221      	b.n	8010ec8 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010a84:	79fb      	ldrb	r3, [r7, #7]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d007      	beq.n	8010a9a <find_volume+0xca>
 8010a8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010a8e:	f003 0304 	and.w	r3, r3, #4
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d001      	beq.n	8010a9a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010a96:	230a      	movs	r3, #10
 8010a98:	e216      	b.n	8010ec8 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8010a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a9c:	7858      	ldrb	r0, [r3, #1]
 8010a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aa0:	330c      	adds	r3, #12
 8010aa2:	461a      	mov	r2, r3
 8010aa4:	2102      	movs	r1, #2
 8010aa6:	f7fe fc0b 	bl	800f2c0 <disk_ioctl>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d001      	beq.n	8010ab4 <find_volume+0xe4>
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	e209      	b.n	8010ec8 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8010ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab6:	899b      	ldrh	r3, [r3, #12]
 8010ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010abc:	d80d      	bhi.n	8010ada <find_volume+0x10a>
 8010abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ac0:	899b      	ldrh	r3, [r3, #12]
 8010ac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ac6:	d308      	bcc.n	8010ada <find_volume+0x10a>
 8010ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aca:	899b      	ldrh	r3, [r3, #12]
 8010acc:	461a      	mov	r2, r3
 8010ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ad0:	899b      	ldrh	r3, [r3, #12]
 8010ad2:	3b01      	subs	r3, #1
 8010ad4:	4013      	ands	r3, r2
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d001      	beq.n	8010ade <find_volume+0x10e>
 8010ada:	2301      	movs	r3, #1
 8010adc:	e1f4      	b.n	8010ec8 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010ae2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010ae4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010ae6:	f7ff ff1d 	bl	8010924 <check_fs>
 8010aea:	4603      	mov	r3, r0
 8010aec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010af0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010af4:	2b02      	cmp	r3, #2
 8010af6:	d14b      	bne.n	8010b90 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010af8:	2300      	movs	r3, #0
 8010afa:	643b      	str	r3, [r7, #64]	; 0x40
 8010afc:	e01f      	b.n	8010b3e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b00:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b06:	011b      	lsls	r3, r3, #4
 8010b08:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010b0c:	4413      	add	r3, r2
 8010b0e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b12:	3304      	adds	r3, #4
 8010b14:	781b      	ldrb	r3, [r3, #0]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d006      	beq.n	8010b28 <find_volume+0x158>
 8010b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b1c:	3308      	adds	r3, #8
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f7fe fc04 	bl	800f32c <ld_dword>
 8010b24:	4602      	mov	r2, r0
 8010b26:	e000      	b.n	8010b2a <find_volume+0x15a>
 8010b28:	2200      	movs	r2, #0
 8010b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b2c:	009b      	lsls	r3, r3, #2
 8010b2e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010b32:	440b      	add	r3, r1
 8010b34:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b3a:	3301      	adds	r3, #1
 8010b3c:	643b      	str	r3, [r7, #64]	; 0x40
 8010b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b40:	2b03      	cmp	r3, #3
 8010b42:	d9dc      	bls.n	8010afe <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010b44:	2300      	movs	r3, #0
 8010b46:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d002      	beq.n	8010b54 <find_volume+0x184>
 8010b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b50:	3b01      	subs	r3, #1
 8010b52:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b56:	009b      	lsls	r3, r3, #2
 8010b58:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010b5c:	4413      	add	r3, r2
 8010b5e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010b62:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d005      	beq.n	8010b76 <find_volume+0x1a6>
 8010b6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010b6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010b6e:	f7ff fed9 	bl	8010924 <check_fs>
 8010b72:	4603      	mov	r3, r0
 8010b74:	e000      	b.n	8010b78 <find_volume+0x1a8>
 8010b76:	2303      	movs	r3, #3
 8010b78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010b7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010b80:	2b01      	cmp	r3, #1
 8010b82:	d905      	bls.n	8010b90 <find_volume+0x1c0>
 8010b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b86:	3301      	adds	r3, #1
 8010b88:	643b      	str	r3, [r7, #64]	; 0x40
 8010b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b8c:	2b03      	cmp	r3, #3
 8010b8e:	d9e1      	bls.n	8010b54 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010b90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010b94:	2b04      	cmp	r3, #4
 8010b96:	d101      	bne.n	8010b9c <find_volume+0x1cc>
 8010b98:	2301      	movs	r3, #1
 8010b9a:	e195      	b.n	8010ec8 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010b9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010ba0:	2b01      	cmp	r3, #1
 8010ba2:	d901      	bls.n	8010ba8 <find_volume+0x1d8>
 8010ba4:	230d      	movs	r3, #13
 8010ba6:	e18f      	b.n	8010ec8 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010baa:	3338      	adds	r3, #56	; 0x38
 8010bac:	330b      	adds	r3, #11
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f7fe fba4 	bl	800f2fc <ld_word>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	461a      	mov	r2, r3
 8010bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bba:	899b      	ldrh	r3, [r3, #12]
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	d001      	beq.n	8010bc4 <find_volume+0x1f4>
 8010bc0:	230d      	movs	r3, #13
 8010bc2:	e181      	b.n	8010ec8 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bc6:	3338      	adds	r3, #56	; 0x38
 8010bc8:	3316      	adds	r3, #22
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f7fe fb96 	bl	800f2fc <ld_word>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d106      	bne.n	8010be8 <find_volume+0x218>
 8010bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bdc:	3338      	adds	r3, #56	; 0x38
 8010bde:	3324      	adds	r3, #36	; 0x24
 8010be0:	4618      	mov	r0, r3
 8010be2:	f7fe fba3 	bl	800f32c <ld_dword>
 8010be6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010bec:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bf0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bf6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bfa:	789b      	ldrb	r3, [r3, #2]
 8010bfc:	2b01      	cmp	r3, #1
 8010bfe:	d005      	beq.n	8010c0c <find_volume+0x23c>
 8010c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c02:	789b      	ldrb	r3, [r3, #2]
 8010c04:	2b02      	cmp	r3, #2
 8010c06:	d001      	beq.n	8010c0c <find_volume+0x23c>
 8010c08:	230d      	movs	r3, #13
 8010c0a:	e15d      	b.n	8010ec8 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c0e:	789b      	ldrb	r3, [r3, #2]
 8010c10:	461a      	mov	r2, r3
 8010c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c14:	fb02 f303 	mul.w	r3, r2, r3
 8010c18:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c20:	b29a      	uxth	r2, r3
 8010c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c24:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c28:	895b      	ldrh	r3, [r3, #10]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d008      	beq.n	8010c40 <find_volume+0x270>
 8010c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c30:	895b      	ldrh	r3, [r3, #10]
 8010c32:	461a      	mov	r2, r3
 8010c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c36:	895b      	ldrh	r3, [r3, #10]
 8010c38:	3b01      	subs	r3, #1
 8010c3a:	4013      	ands	r3, r2
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d001      	beq.n	8010c44 <find_volume+0x274>
 8010c40:	230d      	movs	r3, #13
 8010c42:	e141      	b.n	8010ec8 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c46:	3338      	adds	r3, #56	; 0x38
 8010c48:	3311      	adds	r3, #17
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7fe fb56 	bl	800f2fc <ld_word>
 8010c50:	4603      	mov	r3, r0
 8010c52:	461a      	mov	r2, r3
 8010c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c56:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c5a:	891b      	ldrh	r3, [r3, #8]
 8010c5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c5e:	8992      	ldrh	r2, [r2, #12]
 8010c60:	0952      	lsrs	r2, r2, #5
 8010c62:	b292      	uxth	r2, r2
 8010c64:	fbb3 f1f2 	udiv	r1, r3, r2
 8010c68:	fb02 f201 	mul.w	r2, r2, r1
 8010c6c:	1a9b      	subs	r3, r3, r2
 8010c6e:	b29b      	uxth	r3, r3
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d001      	beq.n	8010c78 <find_volume+0x2a8>
 8010c74:	230d      	movs	r3, #13
 8010c76:	e127      	b.n	8010ec8 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c7a:	3338      	adds	r3, #56	; 0x38
 8010c7c:	3313      	adds	r3, #19
 8010c7e:	4618      	mov	r0, r3
 8010c80:	f7fe fb3c 	bl	800f2fc <ld_word>
 8010c84:	4603      	mov	r3, r0
 8010c86:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d106      	bne.n	8010c9c <find_volume+0x2cc>
 8010c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c90:	3338      	adds	r3, #56	; 0x38
 8010c92:	3320      	adds	r3, #32
 8010c94:	4618      	mov	r0, r3
 8010c96:	f7fe fb49 	bl	800f32c <ld_dword>
 8010c9a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c9e:	3338      	adds	r3, #56	; 0x38
 8010ca0:	330e      	adds	r3, #14
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	f7fe fb2a 	bl	800f2fc <ld_word>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010cac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d104      	bne.n	8010cbc <find_volume+0x2ec>
 8010cb2:	230d      	movs	r3, #13
 8010cb4:	e108      	b.n	8010ec8 <find_volume+0x4f8>
 8010cb6:	bf00      	nop
 8010cb8:	200393d8 	.word	0x200393d8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010cbc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cc0:	4413      	add	r3, r2
 8010cc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010cc4:	8911      	ldrh	r1, [r2, #8]
 8010cc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010cc8:	8992      	ldrh	r2, [r2, #12]
 8010cca:	0952      	lsrs	r2, r2, #5
 8010ccc:	b292      	uxth	r2, r2
 8010cce:	fbb1 f2f2 	udiv	r2, r1, r2
 8010cd2:	b292      	uxth	r2, r2
 8010cd4:	4413      	add	r3, r2
 8010cd6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010cd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cdc:	429a      	cmp	r2, r3
 8010cde:	d201      	bcs.n	8010ce4 <find_volume+0x314>
 8010ce0:	230d      	movs	r3, #13
 8010ce2:	e0f1      	b.n	8010ec8 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010ce4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce8:	1ad3      	subs	r3, r2, r3
 8010cea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010cec:	8952      	ldrh	r2, [r2, #10]
 8010cee:	fbb3 f3f2 	udiv	r3, r3, r2
 8010cf2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d101      	bne.n	8010cfe <find_volume+0x32e>
 8010cfa:	230d      	movs	r3, #13
 8010cfc:	e0e4      	b.n	8010ec8 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8010cfe:	2303      	movs	r3, #3
 8010d00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d06:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010d0a:	4293      	cmp	r3, r2
 8010d0c:	d802      	bhi.n	8010d14 <find_volume+0x344>
 8010d0e:	2302      	movs	r3, #2
 8010d10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d16:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010d1a:	4293      	cmp	r3, r2
 8010d1c:	d802      	bhi.n	8010d24 <find_volume+0x354>
 8010d1e:	2301      	movs	r3, #1
 8010d20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d26:	1c9a      	adds	r2, r3, #2
 8010d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d2a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8010d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010d30:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010d32:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d36:	441a      	add	r2, r3
 8010d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d3a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8010d3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d40:	441a      	add	r2, r3
 8010d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d44:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8010d46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010d4a:	2b03      	cmp	r3, #3
 8010d4c:	d11e      	bne.n	8010d8c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d50:	3338      	adds	r3, #56	; 0x38
 8010d52:	332a      	adds	r3, #42	; 0x2a
 8010d54:	4618      	mov	r0, r3
 8010d56:	f7fe fad1 	bl	800f2fc <ld_word>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d001      	beq.n	8010d64 <find_volume+0x394>
 8010d60:	230d      	movs	r3, #13
 8010d62:	e0b1      	b.n	8010ec8 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d66:	891b      	ldrh	r3, [r3, #8]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d001      	beq.n	8010d70 <find_volume+0x3a0>
 8010d6c:	230d      	movs	r3, #13
 8010d6e:	e0ab      	b.n	8010ec8 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d72:	3338      	adds	r3, #56	; 0x38
 8010d74:	332c      	adds	r3, #44	; 0x2c
 8010d76:	4618      	mov	r0, r3
 8010d78:	f7fe fad8 	bl	800f32c <ld_dword>
 8010d7c:	4602      	mov	r2, r0
 8010d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d80:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d84:	69db      	ldr	r3, [r3, #28]
 8010d86:	009b      	lsls	r3, r3, #2
 8010d88:	647b      	str	r3, [r7, #68]	; 0x44
 8010d8a:	e01f      	b.n	8010dcc <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d8e:	891b      	ldrh	r3, [r3, #8]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d101      	bne.n	8010d98 <find_volume+0x3c8>
 8010d94:	230d      	movs	r3, #13
 8010d96:	e097      	b.n	8010ec8 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d9e:	441a      	add	r2, r3
 8010da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010da2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010da4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010da8:	2b02      	cmp	r3, #2
 8010daa:	d103      	bne.n	8010db4 <find_volume+0x3e4>
 8010dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dae:	69db      	ldr	r3, [r3, #28]
 8010db0:	005b      	lsls	r3, r3, #1
 8010db2:	e00a      	b.n	8010dca <find_volume+0x3fa>
 8010db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010db6:	69da      	ldr	r2, [r3, #28]
 8010db8:	4613      	mov	r3, r2
 8010dba:	005b      	lsls	r3, r3, #1
 8010dbc:	4413      	add	r3, r2
 8010dbe:	085a      	lsrs	r2, r3, #1
 8010dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dc2:	69db      	ldr	r3, [r3, #28]
 8010dc4:	f003 0301 	and.w	r3, r3, #1
 8010dc8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010dca:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dce:	6a1a      	ldr	r2, [r3, #32]
 8010dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dd2:	899b      	ldrh	r3, [r3, #12]
 8010dd4:	4619      	mov	r1, r3
 8010dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010dd8:	440b      	add	r3, r1
 8010dda:	3b01      	subs	r3, #1
 8010ddc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010dde:	8989      	ldrh	r1, [r1, #12]
 8010de0:	fbb3 f3f1 	udiv	r3, r3, r1
 8010de4:	429a      	cmp	r2, r3
 8010de6:	d201      	bcs.n	8010dec <find_volume+0x41c>
 8010de8:	230d      	movs	r3, #13
 8010dea:	e06d      	b.n	8010ec8 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dee:	f04f 32ff 	mov.w	r2, #4294967295
 8010df2:	615a      	str	r2, [r3, #20]
 8010df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010df6:	695a      	ldr	r2, [r3, #20]
 8010df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dfa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dfe:	2280      	movs	r2, #128	; 0x80
 8010e00:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010e02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010e06:	2b03      	cmp	r3, #3
 8010e08:	d149      	bne.n	8010e9e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e0c:	3338      	adds	r3, #56	; 0x38
 8010e0e:	3330      	adds	r3, #48	; 0x30
 8010e10:	4618      	mov	r0, r3
 8010e12:	f7fe fa73 	bl	800f2fc <ld_word>
 8010e16:	4603      	mov	r3, r0
 8010e18:	2b01      	cmp	r3, #1
 8010e1a:	d140      	bne.n	8010e9e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010e1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e1e:	3301      	adds	r3, #1
 8010e20:	4619      	mov	r1, r3
 8010e22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010e24:	f7fe fd1a 	bl	800f85c <move_window>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d137      	bne.n	8010e9e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8010e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e30:	2200      	movs	r2, #0
 8010e32:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e36:	3338      	adds	r3, #56	; 0x38
 8010e38:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f7fe fa5d 	bl	800f2fc <ld_word>
 8010e42:	4603      	mov	r3, r0
 8010e44:	461a      	mov	r2, r3
 8010e46:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	d127      	bne.n	8010e9e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e50:	3338      	adds	r3, #56	; 0x38
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7fe fa6a 	bl	800f32c <ld_dword>
 8010e58:	4602      	mov	r2, r0
 8010e5a:	4b1d      	ldr	r3, [pc, #116]	; (8010ed0 <find_volume+0x500>)
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	d11e      	bne.n	8010e9e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e62:	3338      	adds	r3, #56	; 0x38
 8010e64:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f7fe fa5f 	bl	800f32c <ld_dword>
 8010e6e:	4602      	mov	r2, r0
 8010e70:	4b18      	ldr	r3, [pc, #96]	; (8010ed4 <find_volume+0x504>)
 8010e72:	429a      	cmp	r2, r3
 8010e74:	d113      	bne.n	8010e9e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e78:	3338      	adds	r3, #56	; 0x38
 8010e7a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f7fe fa54 	bl	800f32c <ld_dword>
 8010e84:	4602      	mov	r2, r0
 8010e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e88:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e8c:	3338      	adds	r3, #56	; 0x38
 8010e8e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010e92:	4618      	mov	r0, r3
 8010e94:	f7fe fa4a 	bl	800f32c <ld_dword>
 8010e98:	4602      	mov	r2, r0
 8010e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e9c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010ea4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010ea6:	4b0c      	ldr	r3, [pc, #48]	; (8010ed8 <find_volume+0x508>)
 8010ea8:	881b      	ldrh	r3, [r3, #0]
 8010eaa:	3301      	adds	r3, #1
 8010eac:	b29a      	uxth	r2, r3
 8010eae:	4b0a      	ldr	r3, [pc, #40]	; (8010ed8 <find_volume+0x508>)
 8010eb0:	801a      	strh	r2, [r3, #0]
 8010eb2:	4b09      	ldr	r3, [pc, #36]	; (8010ed8 <find_volume+0x508>)
 8010eb4:	881a      	ldrh	r2, [r3, #0]
 8010eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eb8:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8010eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010ec0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010ec2:	f7fe fc63 	bl	800f78c <clear_lock>
#endif
	return FR_OK;
 8010ec6:	2300      	movs	r3, #0
}
 8010ec8:	4618      	mov	r0, r3
 8010eca:	3758      	adds	r7, #88	; 0x58
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bd80      	pop	{r7, pc}
 8010ed0:	41615252 	.word	0x41615252
 8010ed4:	61417272 	.word	0x61417272
 8010ed8:	200393dc 	.word	0x200393dc

08010edc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b084      	sub	sp, #16
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010ee6:	2309      	movs	r3, #9
 8010ee8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d01c      	beq.n	8010f2a <validate+0x4e>
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d018      	beq.n	8010f2a <validate+0x4e>
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	781b      	ldrb	r3, [r3, #0]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d013      	beq.n	8010f2a <validate+0x4e>
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	889a      	ldrh	r2, [r3, #4]
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	88db      	ldrh	r3, [r3, #6]
 8010f0c:	429a      	cmp	r2, r3
 8010f0e:	d10c      	bne.n	8010f2a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	785b      	ldrb	r3, [r3, #1]
 8010f16:	4618      	mov	r0, r3
 8010f18:	f7fe f952 	bl	800f1c0 <disk_status>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	f003 0301 	and.w	r3, r3, #1
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d101      	bne.n	8010f2a <validate+0x4e>
			res = FR_OK;
 8010f26:	2300      	movs	r3, #0
 8010f28:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010f2a:	7bfb      	ldrb	r3, [r7, #15]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d102      	bne.n	8010f36 <validate+0x5a>
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	e000      	b.n	8010f38 <validate+0x5c>
 8010f36:	2300      	movs	r3, #0
 8010f38:	683a      	ldr	r2, [r7, #0]
 8010f3a:	6013      	str	r3, [r2, #0]
	return res;
 8010f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3710      	adds	r7, #16
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}
	...

08010f48 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b088      	sub	sp, #32
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	60f8      	str	r0, [r7, #12]
 8010f50:	60b9      	str	r1, [r7, #8]
 8010f52:	4613      	mov	r3, r2
 8010f54:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010f5a:	f107 0310 	add.w	r3, r7, #16
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f7ff fc9b 	bl	801089a <get_ldnumber>
 8010f64:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010f66:	69fb      	ldr	r3, [r7, #28]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	da01      	bge.n	8010f70 <f_mount+0x28>
 8010f6c:	230b      	movs	r3, #11
 8010f6e:	e02b      	b.n	8010fc8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010f70:	4a17      	ldr	r2, [pc, #92]	; (8010fd0 <f_mount+0x88>)
 8010f72:	69fb      	ldr	r3, [r7, #28]
 8010f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f78:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010f7a:	69bb      	ldr	r3, [r7, #24]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d005      	beq.n	8010f8c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010f80:	69b8      	ldr	r0, [r7, #24]
 8010f82:	f7fe fc03 	bl	800f78c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010f86:	69bb      	ldr	r3, [r7, #24]
 8010f88:	2200      	movs	r2, #0
 8010f8a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d002      	beq.n	8010f98 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	2200      	movs	r2, #0
 8010f96:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010f98:	68fa      	ldr	r2, [r7, #12]
 8010f9a:	490d      	ldr	r1, [pc, #52]	; (8010fd0 <f_mount+0x88>)
 8010f9c:	69fb      	ldr	r3, [r7, #28]
 8010f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d002      	beq.n	8010fae <f_mount+0x66>
 8010fa8:	79fb      	ldrb	r3, [r7, #7]
 8010faa:	2b01      	cmp	r3, #1
 8010fac:	d001      	beq.n	8010fb2 <f_mount+0x6a>
 8010fae:	2300      	movs	r3, #0
 8010fb0:	e00a      	b.n	8010fc8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010fb2:	f107 010c 	add.w	r1, r7, #12
 8010fb6:	f107 0308 	add.w	r3, r7, #8
 8010fba:	2200      	movs	r2, #0
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	f7ff fd07 	bl	80109d0 <find_volume>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fc8:	4618      	mov	r0, r3
 8010fca:	3720      	adds	r7, #32
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd80      	pop	{r7, pc}
 8010fd0:	200393d8 	.word	0x200393d8

08010fd4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b098      	sub	sp, #96	; 0x60
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	60f8      	str	r0, [r7, #12]
 8010fdc:	60b9      	str	r1, [r7, #8]
 8010fde:	4613      	mov	r3, r2
 8010fe0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d101      	bne.n	8010fec <f_open+0x18>
 8010fe8:	2309      	movs	r3, #9
 8010fea:	e1ba      	b.n	8011362 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010fec:	79fb      	ldrb	r3, [r7, #7]
 8010fee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010ff2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010ff4:	79fa      	ldrb	r2, [r7, #7]
 8010ff6:	f107 0110 	add.w	r1, r7, #16
 8010ffa:	f107 0308 	add.w	r3, r7, #8
 8010ffe:	4618      	mov	r0, r3
 8011000:	f7ff fce6 	bl	80109d0 <find_volume>
 8011004:	4603      	mov	r3, r0
 8011006:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801100a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801100e:	2b00      	cmp	r3, #0
 8011010:	f040 819e 	bne.w	8011350 <f_open+0x37c>
		dj.obj.fs = fs;
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011018:	68ba      	ldr	r2, [r7, #8]
 801101a:	f107 0314 	add.w	r3, r7, #20
 801101e:	4611      	mov	r1, r2
 8011020:	4618      	mov	r0, r3
 8011022:	f7ff fba5 	bl	8010770 <follow_path>
 8011026:	4603      	mov	r3, r0
 8011028:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801102c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011030:	2b00      	cmp	r3, #0
 8011032:	d11a      	bne.n	801106a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011034:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011038:	b25b      	sxtb	r3, r3
 801103a:	2b00      	cmp	r3, #0
 801103c:	da03      	bge.n	8011046 <f_open+0x72>
				res = FR_INVALID_NAME;
 801103e:	2306      	movs	r3, #6
 8011040:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011044:	e011      	b.n	801106a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011046:	79fb      	ldrb	r3, [r7, #7]
 8011048:	f023 0301 	bic.w	r3, r3, #1
 801104c:	2b00      	cmp	r3, #0
 801104e:	bf14      	ite	ne
 8011050:	2301      	movne	r3, #1
 8011052:	2300      	moveq	r3, #0
 8011054:	b2db      	uxtb	r3, r3
 8011056:	461a      	mov	r2, r3
 8011058:	f107 0314 	add.w	r3, r7, #20
 801105c:	4611      	mov	r1, r2
 801105e:	4618      	mov	r0, r3
 8011060:	f7fe fa4c 	bl	800f4fc <chk_lock>
 8011064:	4603      	mov	r3, r0
 8011066:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801106a:	79fb      	ldrb	r3, [r7, #7]
 801106c:	f003 031c 	and.w	r3, r3, #28
 8011070:	2b00      	cmp	r3, #0
 8011072:	d07e      	beq.n	8011172 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8011074:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011078:	2b00      	cmp	r3, #0
 801107a:	d017      	beq.n	80110ac <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801107c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011080:	2b04      	cmp	r3, #4
 8011082:	d10e      	bne.n	80110a2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011084:	f7fe fa96 	bl	800f5b4 <enq_lock>
 8011088:	4603      	mov	r3, r0
 801108a:	2b00      	cmp	r3, #0
 801108c:	d006      	beq.n	801109c <f_open+0xc8>
 801108e:	f107 0314 	add.w	r3, r7, #20
 8011092:	4618      	mov	r0, r3
 8011094:	f7ff fa52 	bl	801053c <dir_register>
 8011098:	4603      	mov	r3, r0
 801109a:	e000      	b.n	801109e <f_open+0xca>
 801109c:	2312      	movs	r3, #18
 801109e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80110a2:	79fb      	ldrb	r3, [r7, #7]
 80110a4:	f043 0308 	orr.w	r3, r3, #8
 80110a8:	71fb      	strb	r3, [r7, #7]
 80110aa:	e010      	b.n	80110ce <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80110ac:	7ebb      	ldrb	r3, [r7, #26]
 80110ae:	f003 0311 	and.w	r3, r3, #17
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d003      	beq.n	80110be <f_open+0xea>
					res = FR_DENIED;
 80110b6:	2307      	movs	r3, #7
 80110b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80110bc:	e007      	b.n	80110ce <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80110be:	79fb      	ldrb	r3, [r7, #7]
 80110c0:	f003 0304 	and.w	r3, r3, #4
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d002      	beq.n	80110ce <f_open+0xfa>
 80110c8:	2308      	movs	r3, #8
 80110ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80110ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d167      	bne.n	80111a6 <f_open+0x1d2>
 80110d6:	79fb      	ldrb	r3, [r7, #7]
 80110d8:	f003 0308 	and.w	r3, r3, #8
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d062      	beq.n	80111a6 <f_open+0x1d2>
				dw = GET_FATTIME();
 80110e0:	4ba2      	ldr	r3, [pc, #648]	; (801136c <f_open+0x398>)
 80110e2:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80110e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110e6:	330e      	adds	r3, #14
 80110e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80110ea:	4618      	mov	r0, r3
 80110ec:	f7fe f95c 	bl	800f3a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80110f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110f2:	3316      	adds	r3, #22
 80110f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7fe f956 	bl	800f3a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80110fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110fe:	330b      	adds	r3, #11
 8011100:	2220      	movs	r2, #32
 8011102:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011104:	693b      	ldr	r3, [r7, #16]
 8011106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011108:	4611      	mov	r1, r2
 801110a:	4618      	mov	r0, r3
 801110c:	f7ff f925 	bl	801035a <ld_clust>
 8011110:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011112:	693b      	ldr	r3, [r7, #16]
 8011114:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011116:	2200      	movs	r2, #0
 8011118:	4618      	mov	r0, r3
 801111a:	f7ff f93d 	bl	8010398 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801111e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011120:	331c      	adds	r3, #28
 8011122:	2100      	movs	r1, #0
 8011124:	4618      	mov	r0, r3
 8011126:	f7fe f93f 	bl	800f3a8 <st_dword>
					fs->wflag = 1;
 801112a:	693b      	ldr	r3, [r7, #16]
 801112c:	2201      	movs	r2, #1
 801112e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011132:	2b00      	cmp	r3, #0
 8011134:	d037      	beq.n	80111a6 <f_open+0x1d2>
						dw = fs->winsect;
 8011136:	693b      	ldr	r3, [r7, #16]
 8011138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801113a:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801113c:	f107 0314 	add.w	r3, r7, #20
 8011140:	2200      	movs	r2, #0
 8011142:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011144:	4618      	mov	r0, r3
 8011146:	f7fe fe2d 	bl	800fda4 <remove_chain>
 801114a:	4603      	mov	r3, r0
 801114c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8011150:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011154:	2b00      	cmp	r3, #0
 8011156:	d126      	bne.n	80111a6 <f_open+0x1d2>
							res = move_window(fs, dw);
 8011158:	693b      	ldr	r3, [r7, #16]
 801115a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801115c:	4618      	mov	r0, r3
 801115e:	f7fe fb7d 	bl	800f85c <move_window>
 8011162:	4603      	mov	r3, r0
 8011164:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011168:	693b      	ldr	r3, [r7, #16]
 801116a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801116c:	3a01      	subs	r2, #1
 801116e:	611a      	str	r2, [r3, #16]
 8011170:	e019      	b.n	80111a6 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011172:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011176:	2b00      	cmp	r3, #0
 8011178:	d115      	bne.n	80111a6 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801117a:	7ebb      	ldrb	r3, [r7, #26]
 801117c:	f003 0310 	and.w	r3, r3, #16
 8011180:	2b00      	cmp	r3, #0
 8011182:	d003      	beq.n	801118c <f_open+0x1b8>
					res = FR_NO_FILE;
 8011184:	2304      	movs	r3, #4
 8011186:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801118a:	e00c      	b.n	80111a6 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801118c:	79fb      	ldrb	r3, [r7, #7]
 801118e:	f003 0302 	and.w	r3, r3, #2
 8011192:	2b00      	cmp	r3, #0
 8011194:	d007      	beq.n	80111a6 <f_open+0x1d2>
 8011196:	7ebb      	ldrb	r3, [r7, #26]
 8011198:	f003 0301 	and.w	r3, r3, #1
 801119c:	2b00      	cmp	r3, #0
 801119e:	d002      	beq.n	80111a6 <f_open+0x1d2>
						res = FR_DENIED;
 80111a0:	2307      	movs	r3, #7
 80111a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80111a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d128      	bne.n	8011200 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80111ae:	79fb      	ldrb	r3, [r7, #7]
 80111b0:	f003 0308 	and.w	r3, r3, #8
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d003      	beq.n	80111c0 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 80111b8:	79fb      	ldrb	r3, [r7, #7]
 80111ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111be:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80111c0:	693b      	ldr	r3, [r7, #16]
 80111c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80111c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80111ce:	79fb      	ldrb	r3, [r7, #7]
 80111d0:	f023 0301 	bic.w	r3, r3, #1
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	bf14      	ite	ne
 80111d8:	2301      	movne	r3, #1
 80111da:	2300      	moveq	r3, #0
 80111dc:	b2db      	uxtb	r3, r3
 80111de:	461a      	mov	r2, r3
 80111e0:	f107 0314 	add.w	r3, r7, #20
 80111e4:	4611      	mov	r1, r2
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7fe fa06 	bl	800f5f8 <inc_lock>
 80111ec:	4602      	mov	r2, r0
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	691b      	ldr	r3, [r3, #16]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d102      	bne.n	8011200 <f_open+0x22c>
 80111fa:	2302      	movs	r3, #2
 80111fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011200:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011204:	2b00      	cmp	r3, #0
 8011206:	f040 80a3 	bne.w	8011350 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801120a:	693b      	ldr	r3, [r7, #16]
 801120c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801120e:	4611      	mov	r1, r2
 8011210:	4618      	mov	r0, r3
 8011212:	f7ff f8a2 	bl	801035a <ld_clust>
 8011216:	4602      	mov	r2, r0
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801121c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801121e:	331c      	adds	r3, #28
 8011220:	4618      	mov	r0, r3
 8011222:	f7fe f883 	bl	800f32c <ld_dword>
 8011226:	4602      	mov	r2, r0
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	2200      	movs	r2, #0
 8011230:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011232:	693a      	ldr	r2, [r7, #16]
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011238:	693b      	ldr	r3, [r7, #16]
 801123a:	88da      	ldrh	r2, [r3, #6]
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	79fa      	ldrb	r2, [r7, #7]
 8011244:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	2200      	movs	r2, #0
 801124a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	2200      	movs	r2, #0
 8011250:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	2200      	movs	r2, #0
 8011256:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	3330      	adds	r3, #48	; 0x30
 801125c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011260:	2100      	movs	r1, #0
 8011262:	4618      	mov	r0, r3
 8011264:	f7fe f8ed 	bl	800f442 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011268:	79fb      	ldrb	r3, [r7, #7]
 801126a:	f003 0320 	and.w	r3, r3, #32
 801126e:	2b00      	cmp	r3, #0
 8011270:	d06e      	beq.n	8011350 <f_open+0x37c>
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	68db      	ldr	r3, [r3, #12]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d06a      	beq.n	8011350 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	68da      	ldr	r2, [r3, #12]
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011282:	693b      	ldr	r3, [r7, #16]
 8011284:	895b      	ldrh	r3, [r3, #10]
 8011286:	461a      	mov	r2, r3
 8011288:	693b      	ldr	r3, [r7, #16]
 801128a:	899b      	ldrh	r3, [r3, #12]
 801128c:	fb03 f302 	mul.w	r3, r3, r2
 8011290:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	689b      	ldr	r3, [r3, #8]
 8011296:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	68db      	ldr	r3, [r3, #12]
 801129c:	657b      	str	r3, [r7, #84]	; 0x54
 801129e:	e016      	b.n	80112ce <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80112a4:	4618      	mov	r0, r3
 80112a6:	f7fe fb96 	bl	800f9d6 <get_fat>
 80112aa:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80112ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80112ae:	2b01      	cmp	r3, #1
 80112b0:	d802      	bhi.n	80112b8 <f_open+0x2e4>
 80112b2:	2302      	movs	r3, #2
 80112b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80112b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80112ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112be:	d102      	bne.n	80112c6 <f_open+0x2f2>
 80112c0:	2301      	movs	r3, #1
 80112c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80112c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80112c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112ca:	1ad3      	subs	r3, r2, r3
 80112cc:	657b      	str	r3, [r7, #84]	; 0x54
 80112ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d103      	bne.n	80112de <f_open+0x30a>
 80112d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80112d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112da:	429a      	cmp	r2, r3
 80112dc:	d8e0      	bhi.n	80112a0 <f_open+0x2cc>
				}
				fp->clust = clst;
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80112e2:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80112e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d131      	bne.n	8011350 <f_open+0x37c>
 80112ec:	693b      	ldr	r3, [r7, #16]
 80112ee:	899b      	ldrh	r3, [r3, #12]
 80112f0:	461a      	mov	r2, r3
 80112f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80112f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80112f8:	fb02 f201 	mul.w	r2, r2, r1
 80112fc:	1a9b      	subs	r3, r3, r2
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d026      	beq.n	8011350 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011302:	693b      	ldr	r3, [r7, #16]
 8011304:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011306:	4618      	mov	r0, r3
 8011308:	f7fe fb46 	bl	800f998 <clust2sect>
 801130c:	6478      	str	r0, [r7, #68]	; 0x44
 801130e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011310:	2b00      	cmp	r3, #0
 8011312:	d103      	bne.n	801131c <f_open+0x348>
						res = FR_INT_ERR;
 8011314:	2302      	movs	r3, #2
 8011316:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801131a:	e019      	b.n	8011350 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801131c:	693b      	ldr	r3, [r7, #16]
 801131e:	899b      	ldrh	r3, [r3, #12]
 8011320:	461a      	mov	r2, r3
 8011322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011324:	fbb3 f2f2 	udiv	r2, r3, r2
 8011328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801132a:	441a      	add	r2, r3
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011330:	693b      	ldr	r3, [r7, #16]
 8011332:	7858      	ldrb	r0, [r3, #1]
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	6a1a      	ldr	r2, [r3, #32]
 801133e:	2301      	movs	r3, #1
 8011340:	f7fd ff7e 	bl	800f240 <disk_read>
 8011344:	4603      	mov	r3, r0
 8011346:	2b00      	cmp	r3, #0
 8011348:	d002      	beq.n	8011350 <f_open+0x37c>
 801134a:	2301      	movs	r3, #1
 801134c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011350:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011354:	2b00      	cmp	r3, #0
 8011356:	d002      	beq.n	801135e <f_open+0x38a>
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	2200      	movs	r2, #0
 801135c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801135e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8011362:	4618      	mov	r0, r3
 8011364:	3760      	adds	r7, #96	; 0x60
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}
 801136a:	bf00      	nop
 801136c:	274a0000 	.word	0x274a0000

08011370 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b08e      	sub	sp, #56	; 0x38
 8011374:	af00      	add	r7, sp, #0
 8011376:	60f8      	str	r0, [r7, #12]
 8011378:	60b9      	str	r1, [r7, #8]
 801137a:	607a      	str	r2, [r7, #4]
 801137c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801137e:	68bb      	ldr	r3, [r7, #8]
 8011380:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	2200      	movs	r2, #0
 8011386:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	f107 0214 	add.w	r2, r7, #20
 801138e:	4611      	mov	r1, r2
 8011390:	4618      	mov	r0, r3
 8011392:	f7ff fda3 	bl	8010edc <validate>
 8011396:	4603      	mov	r3, r0
 8011398:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801139c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d107      	bne.n	80113b4 <f_read+0x44>
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	7d5b      	ldrb	r3, [r3, #21]
 80113a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80113ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d002      	beq.n	80113ba <f_read+0x4a>
 80113b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80113b8:	e135      	b.n	8011626 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	7d1b      	ldrb	r3, [r3, #20]
 80113be:	f003 0301 	and.w	r3, r3, #1
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d101      	bne.n	80113ca <f_read+0x5a>
 80113c6:	2307      	movs	r3, #7
 80113c8:	e12d      	b.n	8011626 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	68da      	ldr	r2, [r3, #12]
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	699b      	ldr	r3, [r3, #24]
 80113d2:	1ad3      	subs	r3, r2, r3
 80113d4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80113d6:	687a      	ldr	r2, [r7, #4]
 80113d8:	6a3b      	ldr	r3, [r7, #32]
 80113da:	429a      	cmp	r2, r3
 80113dc:	f240 811e 	bls.w	801161c <f_read+0x2ac>
 80113e0:	6a3b      	ldr	r3, [r7, #32]
 80113e2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80113e4:	e11a      	b.n	801161c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	699b      	ldr	r3, [r3, #24]
 80113ea:	697a      	ldr	r2, [r7, #20]
 80113ec:	8992      	ldrh	r2, [r2, #12]
 80113ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80113f2:	fb02 f201 	mul.w	r2, r2, r1
 80113f6:	1a9b      	subs	r3, r3, r2
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	f040 80d5 	bne.w	80115a8 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	699b      	ldr	r3, [r3, #24]
 8011402:	697a      	ldr	r2, [r7, #20]
 8011404:	8992      	ldrh	r2, [r2, #12]
 8011406:	fbb3 f3f2 	udiv	r3, r3, r2
 801140a:	697a      	ldr	r2, [r7, #20]
 801140c:	8952      	ldrh	r2, [r2, #10]
 801140e:	3a01      	subs	r2, #1
 8011410:	4013      	ands	r3, r2
 8011412:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8011414:	69fb      	ldr	r3, [r7, #28]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d12f      	bne.n	801147a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	699b      	ldr	r3, [r3, #24]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d103      	bne.n	801142a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	689b      	ldr	r3, [r3, #8]
 8011426:	633b      	str	r3, [r7, #48]	; 0x30
 8011428:	e013      	b.n	8011452 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801142e:	2b00      	cmp	r3, #0
 8011430:	d007      	beq.n	8011442 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	699b      	ldr	r3, [r3, #24]
 8011436:	4619      	mov	r1, r3
 8011438:	68f8      	ldr	r0, [r7, #12]
 801143a:	f7fe fdb0 	bl	800ff9e <clmt_clust>
 801143e:	6338      	str	r0, [r7, #48]	; 0x30
 8011440:	e007      	b.n	8011452 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8011442:	68fa      	ldr	r2, [r7, #12]
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	69db      	ldr	r3, [r3, #28]
 8011448:	4619      	mov	r1, r3
 801144a:	4610      	mov	r0, r2
 801144c:	f7fe fac3 	bl	800f9d6 <get_fat>
 8011450:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011454:	2b01      	cmp	r3, #1
 8011456:	d804      	bhi.n	8011462 <f_read+0xf2>
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	2202      	movs	r2, #2
 801145c:	755a      	strb	r2, [r3, #21]
 801145e:	2302      	movs	r3, #2
 8011460:	e0e1      	b.n	8011626 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011468:	d104      	bne.n	8011474 <f_read+0x104>
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	2201      	movs	r2, #1
 801146e:	755a      	strb	r2, [r3, #21]
 8011470:	2301      	movs	r3, #1
 8011472:	e0d8      	b.n	8011626 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011478:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801147a:	697a      	ldr	r2, [r7, #20]
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	69db      	ldr	r3, [r3, #28]
 8011480:	4619      	mov	r1, r3
 8011482:	4610      	mov	r0, r2
 8011484:	f7fe fa88 	bl	800f998 <clust2sect>
 8011488:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801148a:	69bb      	ldr	r3, [r7, #24]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d104      	bne.n	801149a <f_read+0x12a>
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	2202      	movs	r2, #2
 8011494:	755a      	strb	r2, [r3, #21]
 8011496:	2302      	movs	r3, #2
 8011498:	e0c5      	b.n	8011626 <f_read+0x2b6>
			sect += csect;
 801149a:	69ba      	ldr	r2, [r7, #24]
 801149c:	69fb      	ldr	r3, [r7, #28]
 801149e:	4413      	add	r3, r2
 80114a0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80114a2:	697b      	ldr	r3, [r7, #20]
 80114a4:	899b      	ldrh	r3, [r3, #12]
 80114a6:	461a      	mov	r2, r3
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80114ae:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80114b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d041      	beq.n	801153a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80114b6:	69fa      	ldr	r2, [r7, #28]
 80114b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114ba:	4413      	add	r3, r2
 80114bc:	697a      	ldr	r2, [r7, #20]
 80114be:	8952      	ldrh	r2, [r2, #10]
 80114c0:	4293      	cmp	r3, r2
 80114c2:	d905      	bls.n	80114d0 <f_read+0x160>
					cc = fs->csize - csect;
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	895b      	ldrh	r3, [r3, #10]
 80114c8:	461a      	mov	r2, r3
 80114ca:	69fb      	ldr	r3, [r7, #28]
 80114cc:	1ad3      	subs	r3, r2, r3
 80114ce:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	7858      	ldrb	r0, [r3, #1]
 80114d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d6:	69ba      	ldr	r2, [r7, #24]
 80114d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80114da:	f7fd feb1 	bl	800f240 <disk_read>
 80114de:	4603      	mov	r3, r0
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d004      	beq.n	80114ee <f_read+0x17e>
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	2201      	movs	r2, #1
 80114e8:	755a      	strb	r2, [r3, #21]
 80114ea:	2301      	movs	r3, #1
 80114ec:	e09b      	b.n	8011626 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	7d1b      	ldrb	r3, [r3, #20]
 80114f2:	b25b      	sxtb	r3, r3
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	da18      	bge.n	801152a <f_read+0x1ba>
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	6a1a      	ldr	r2, [r3, #32]
 80114fc:	69bb      	ldr	r3, [r7, #24]
 80114fe:	1ad3      	subs	r3, r2, r3
 8011500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011502:	429a      	cmp	r2, r3
 8011504:	d911      	bls.n	801152a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	6a1a      	ldr	r2, [r3, #32]
 801150a:	69bb      	ldr	r3, [r7, #24]
 801150c:	1ad3      	subs	r3, r2, r3
 801150e:	697a      	ldr	r2, [r7, #20]
 8011510:	8992      	ldrh	r2, [r2, #12]
 8011512:	fb02 f303 	mul.w	r3, r2, r3
 8011516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011518:	18d0      	adds	r0, r2, r3
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011520:	697b      	ldr	r3, [r7, #20]
 8011522:	899b      	ldrh	r3, [r3, #12]
 8011524:	461a      	mov	r2, r3
 8011526:	f7fd ff6b 	bl	800f400 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801152a:	697b      	ldr	r3, [r7, #20]
 801152c:	899b      	ldrh	r3, [r3, #12]
 801152e:	461a      	mov	r2, r3
 8011530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011532:	fb02 f303 	mul.w	r3, r2, r3
 8011536:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8011538:	e05c      	b.n	80115f4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	6a1b      	ldr	r3, [r3, #32]
 801153e:	69ba      	ldr	r2, [r7, #24]
 8011540:	429a      	cmp	r2, r3
 8011542:	d02e      	beq.n	80115a2 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	7d1b      	ldrb	r3, [r3, #20]
 8011548:	b25b      	sxtb	r3, r3
 801154a:	2b00      	cmp	r3, #0
 801154c:	da18      	bge.n	8011580 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801154e:	697b      	ldr	r3, [r7, #20]
 8011550:	7858      	ldrb	r0, [r3, #1]
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	6a1a      	ldr	r2, [r3, #32]
 801155c:	2301      	movs	r3, #1
 801155e:	f7fd fe8f 	bl	800f280 <disk_write>
 8011562:	4603      	mov	r3, r0
 8011564:	2b00      	cmp	r3, #0
 8011566:	d004      	beq.n	8011572 <f_read+0x202>
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	2201      	movs	r2, #1
 801156c:	755a      	strb	r2, [r3, #21]
 801156e:	2301      	movs	r3, #1
 8011570:	e059      	b.n	8011626 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	7d1b      	ldrb	r3, [r3, #20]
 8011576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801157a:	b2da      	uxtb	r2, r3
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	7858      	ldrb	r0, [r3, #1]
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801158a:	2301      	movs	r3, #1
 801158c:	69ba      	ldr	r2, [r7, #24]
 801158e:	f7fd fe57 	bl	800f240 <disk_read>
 8011592:	4603      	mov	r3, r0
 8011594:	2b00      	cmp	r3, #0
 8011596:	d004      	beq.n	80115a2 <f_read+0x232>
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	2201      	movs	r2, #1
 801159c:	755a      	strb	r2, [r3, #21]
 801159e:	2301      	movs	r3, #1
 80115a0:	e041      	b.n	8011626 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	69ba      	ldr	r2, [r7, #24]
 80115a6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80115a8:	697b      	ldr	r3, [r7, #20]
 80115aa:	899b      	ldrh	r3, [r3, #12]
 80115ac:	4618      	mov	r0, r3
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	699b      	ldr	r3, [r3, #24]
 80115b2:	697a      	ldr	r2, [r7, #20]
 80115b4:	8992      	ldrh	r2, [r2, #12]
 80115b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80115ba:	fb02 f201 	mul.w	r2, r2, r1
 80115be:	1a9b      	subs	r3, r3, r2
 80115c0:	1ac3      	subs	r3, r0, r3
 80115c2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80115c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d901      	bls.n	80115d0 <f_read+0x260>
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	699b      	ldr	r3, [r3, #24]
 80115da:	697a      	ldr	r2, [r7, #20]
 80115dc:	8992      	ldrh	r2, [r2, #12]
 80115de:	fbb3 f0f2 	udiv	r0, r3, r2
 80115e2:	fb02 f200 	mul.w	r2, r2, r0
 80115e6:	1a9b      	subs	r3, r3, r2
 80115e8:	440b      	add	r3, r1
 80115ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115ec:	4619      	mov	r1, r3
 80115ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80115f0:	f7fd ff06 	bl	800f400 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80115f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115f8:	4413      	add	r3, r2
 80115fa:	627b      	str	r3, [r7, #36]	; 0x24
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	699a      	ldr	r2, [r3, #24]
 8011600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011602:	441a      	add	r2, r3
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	619a      	str	r2, [r3, #24]
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	681a      	ldr	r2, [r3, #0]
 801160c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801160e:	441a      	add	r2, r3
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	601a      	str	r2, [r3, #0]
 8011614:	687a      	ldr	r2, [r7, #4]
 8011616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011618:	1ad3      	subs	r3, r2, r3
 801161a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	2b00      	cmp	r3, #0
 8011620:	f47f aee1 	bne.w	80113e6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011624:	2300      	movs	r3, #0
}
 8011626:	4618      	mov	r0, r3
 8011628:	3738      	adds	r7, #56	; 0x38
 801162a:	46bd      	mov	sp, r7
 801162c:	bd80      	pop	{r7, pc}

0801162e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801162e:	b580      	push	{r7, lr}
 8011630:	b08c      	sub	sp, #48	; 0x30
 8011632:	af00      	add	r7, sp, #0
 8011634:	60f8      	str	r0, [r7, #12]
 8011636:	60b9      	str	r1, [r7, #8]
 8011638:	607a      	str	r2, [r7, #4]
 801163a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801163c:	68bb      	ldr	r3, [r7, #8]
 801163e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011640:	683b      	ldr	r3, [r7, #0]
 8011642:	2200      	movs	r2, #0
 8011644:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	f107 0210 	add.w	r2, r7, #16
 801164c:	4611      	mov	r1, r2
 801164e:	4618      	mov	r0, r3
 8011650:	f7ff fc44 	bl	8010edc <validate>
 8011654:	4603      	mov	r3, r0
 8011656:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801165a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801165e:	2b00      	cmp	r3, #0
 8011660:	d107      	bne.n	8011672 <f_write+0x44>
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	7d5b      	ldrb	r3, [r3, #21]
 8011666:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801166a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801166e:	2b00      	cmp	r3, #0
 8011670:	d002      	beq.n	8011678 <f_write+0x4a>
 8011672:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011676:	e16a      	b.n	801194e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	7d1b      	ldrb	r3, [r3, #20]
 801167c:	f003 0302 	and.w	r3, r3, #2
 8011680:	2b00      	cmp	r3, #0
 8011682:	d101      	bne.n	8011688 <f_write+0x5a>
 8011684:	2307      	movs	r3, #7
 8011686:	e162      	b.n	801194e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	699a      	ldr	r2, [r3, #24]
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	441a      	add	r2, r3
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	699b      	ldr	r3, [r3, #24]
 8011694:	429a      	cmp	r2, r3
 8011696:	f080 814c 	bcs.w	8011932 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	699b      	ldr	r3, [r3, #24]
 801169e:	43db      	mvns	r3, r3
 80116a0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80116a2:	e146      	b.n	8011932 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	699b      	ldr	r3, [r3, #24]
 80116a8:	693a      	ldr	r2, [r7, #16]
 80116aa:	8992      	ldrh	r2, [r2, #12]
 80116ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80116b0:	fb02 f201 	mul.w	r2, r2, r1
 80116b4:	1a9b      	subs	r3, r3, r2
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	f040 80f1 	bne.w	801189e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	699b      	ldr	r3, [r3, #24]
 80116c0:	693a      	ldr	r2, [r7, #16]
 80116c2:	8992      	ldrh	r2, [r2, #12]
 80116c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80116c8:	693a      	ldr	r2, [r7, #16]
 80116ca:	8952      	ldrh	r2, [r2, #10]
 80116cc:	3a01      	subs	r2, #1
 80116ce:	4013      	ands	r3, r2
 80116d0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80116d2:	69bb      	ldr	r3, [r7, #24]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d143      	bne.n	8011760 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	699b      	ldr	r3, [r3, #24]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d10c      	bne.n	80116fa <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	689b      	ldr	r3, [r3, #8]
 80116e4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80116e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d11a      	bne.n	8011722 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	2100      	movs	r1, #0
 80116f0:	4618      	mov	r0, r3
 80116f2:	f7fe fbbc 	bl	800fe6e <create_chain>
 80116f6:	62b8      	str	r0, [r7, #40]	; 0x28
 80116f8:	e013      	b.n	8011722 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d007      	beq.n	8011712 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	699b      	ldr	r3, [r3, #24]
 8011706:	4619      	mov	r1, r3
 8011708:	68f8      	ldr	r0, [r7, #12]
 801170a:	f7fe fc48 	bl	800ff9e <clmt_clust>
 801170e:	62b8      	str	r0, [r7, #40]	; 0x28
 8011710:	e007      	b.n	8011722 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011712:	68fa      	ldr	r2, [r7, #12]
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	69db      	ldr	r3, [r3, #28]
 8011718:	4619      	mov	r1, r3
 801171a:	4610      	mov	r0, r2
 801171c:	f7fe fba7 	bl	800fe6e <create_chain>
 8011720:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011724:	2b00      	cmp	r3, #0
 8011726:	f000 8109 	beq.w	801193c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801172a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801172c:	2b01      	cmp	r3, #1
 801172e:	d104      	bne.n	801173a <f_write+0x10c>
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	2202      	movs	r2, #2
 8011734:	755a      	strb	r2, [r3, #21]
 8011736:	2302      	movs	r3, #2
 8011738:	e109      	b.n	801194e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801173a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801173c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011740:	d104      	bne.n	801174c <f_write+0x11e>
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	2201      	movs	r2, #1
 8011746:	755a      	strb	r2, [r3, #21]
 8011748:	2301      	movs	r3, #1
 801174a:	e100      	b.n	801194e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011750:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	689b      	ldr	r3, [r3, #8]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d102      	bne.n	8011760 <f_write+0x132>
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801175e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	7d1b      	ldrb	r3, [r3, #20]
 8011764:	b25b      	sxtb	r3, r3
 8011766:	2b00      	cmp	r3, #0
 8011768:	da18      	bge.n	801179c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801176a:	693b      	ldr	r3, [r7, #16]
 801176c:	7858      	ldrb	r0, [r3, #1]
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	6a1a      	ldr	r2, [r3, #32]
 8011778:	2301      	movs	r3, #1
 801177a:	f7fd fd81 	bl	800f280 <disk_write>
 801177e:	4603      	mov	r3, r0
 8011780:	2b00      	cmp	r3, #0
 8011782:	d004      	beq.n	801178e <f_write+0x160>
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	2201      	movs	r2, #1
 8011788:	755a      	strb	r2, [r3, #21]
 801178a:	2301      	movs	r3, #1
 801178c:	e0df      	b.n	801194e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	7d1b      	ldrb	r3, [r3, #20]
 8011792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011796:	b2da      	uxtb	r2, r3
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801179c:	693a      	ldr	r2, [r7, #16]
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	69db      	ldr	r3, [r3, #28]
 80117a2:	4619      	mov	r1, r3
 80117a4:	4610      	mov	r0, r2
 80117a6:	f7fe f8f7 	bl	800f998 <clust2sect>
 80117aa:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80117ac:	697b      	ldr	r3, [r7, #20]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d104      	bne.n	80117bc <f_write+0x18e>
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	2202      	movs	r2, #2
 80117b6:	755a      	strb	r2, [r3, #21]
 80117b8:	2302      	movs	r3, #2
 80117ba:	e0c8      	b.n	801194e <f_write+0x320>
			sect += csect;
 80117bc:	697a      	ldr	r2, [r7, #20]
 80117be:	69bb      	ldr	r3, [r7, #24]
 80117c0:	4413      	add	r3, r2
 80117c2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80117c4:	693b      	ldr	r3, [r7, #16]
 80117c6:	899b      	ldrh	r3, [r3, #12]
 80117c8:	461a      	mov	r2, r3
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80117d0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80117d2:	6a3b      	ldr	r3, [r7, #32]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d043      	beq.n	8011860 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80117d8:	69ba      	ldr	r2, [r7, #24]
 80117da:	6a3b      	ldr	r3, [r7, #32]
 80117dc:	4413      	add	r3, r2
 80117de:	693a      	ldr	r2, [r7, #16]
 80117e0:	8952      	ldrh	r2, [r2, #10]
 80117e2:	4293      	cmp	r3, r2
 80117e4:	d905      	bls.n	80117f2 <f_write+0x1c4>
					cc = fs->csize - csect;
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	895b      	ldrh	r3, [r3, #10]
 80117ea:	461a      	mov	r2, r3
 80117ec:	69bb      	ldr	r3, [r7, #24]
 80117ee:	1ad3      	subs	r3, r2, r3
 80117f0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80117f2:	693b      	ldr	r3, [r7, #16]
 80117f4:	7858      	ldrb	r0, [r3, #1]
 80117f6:	6a3b      	ldr	r3, [r7, #32]
 80117f8:	697a      	ldr	r2, [r7, #20]
 80117fa:	69f9      	ldr	r1, [r7, #28]
 80117fc:	f7fd fd40 	bl	800f280 <disk_write>
 8011800:	4603      	mov	r3, r0
 8011802:	2b00      	cmp	r3, #0
 8011804:	d004      	beq.n	8011810 <f_write+0x1e2>
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	2201      	movs	r2, #1
 801180a:	755a      	strb	r2, [r3, #21]
 801180c:	2301      	movs	r3, #1
 801180e:	e09e      	b.n	801194e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	6a1a      	ldr	r2, [r3, #32]
 8011814:	697b      	ldr	r3, [r7, #20]
 8011816:	1ad3      	subs	r3, r2, r3
 8011818:	6a3a      	ldr	r2, [r7, #32]
 801181a:	429a      	cmp	r2, r3
 801181c:	d918      	bls.n	8011850 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	6a1a      	ldr	r2, [r3, #32]
 8011828:	697b      	ldr	r3, [r7, #20]
 801182a:	1ad3      	subs	r3, r2, r3
 801182c:	693a      	ldr	r2, [r7, #16]
 801182e:	8992      	ldrh	r2, [r2, #12]
 8011830:	fb02 f303 	mul.w	r3, r2, r3
 8011834:	69fa      	ldr	r2, [r7, #28]
 8011836:	18d1      	adds	r1, r2, r3
 8011838:	693b      	ldr	r3, [r7, #16]
 801183a:	899b      	ldrh	r3, [r3, #12]
 801183c:	461a      	mov	r2, r3
 801183e:	f7fd fddf 	bl	800f400 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	7d1b      	ldrb	r3, [r3, #20]
 8011846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801184a:	b2da      	uxtb	r2, r3
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011850:	693b      	ldr	r3, [r7, #16]
 8011852:	899b      	ldrh	r3, [r3, #12]
 8011854:	461a      	mov	r2, r3
 8011856:	6a3b      	ldr	r3, [r7, #32]
 8011858:	fb02 f303 	mul.w	r3, r2, r3
 801185c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801185e:	e04b      	b.n	80118f8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	6a1b      	ldr	r3, [r3, #32]
 8011864:	697a      	ldr	r2, [r7, #20]
 8011866:	429a      	cmp	r2, r3
 8011868:	d016      	beq.n	8011898 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	699a      	ldr	r2, [r3, #24]
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011872:	429a      	cmp	r2, r3
 8011874:	d210      	bcs.n	8011898 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011876:	693b      	ldr	r3, [r7, #16]
 8011878:	7858      	ldrb	r0, [r3, #1]
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011880:	2301      	movs	r3, #1
 8011882:	697a      	ldr	r2, [r7, #20]
 8011884:	f7fd fcdc 	bl	800f240 <disk_read>
 8011888:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801188a:	2b00      	cmp	r3, #0
 801188c:	d004      	beq.n	8011898 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	2201      	movs	r2, #1
 8011892:	755a      	strb	r2, [r3, #21]
 8011894:	2301      	movs	r3, #1
 8011896:	e05a      	b.n	801194e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	697a      	ldr	r2, [r7, #20]
 801189c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	899b      	ldrh	r3, [r3, #12]
 80118a2:	4618      	mov	r0, r3
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	699b      	ldr	r3, [r3, #24]
 80118a8:	693a      	ldr	r2, [r7, #16]
 80118aa:	8992      	ldrh	r2, [r2, #12]
 80118ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80118b0:	fb02 f201 	mul.w	r2, r2, r1
 80118b4:	1a9b      	subs	r3, r3, r2
 80118b6:	1ac3      	subs	r3, r0, r3
 80118b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80118ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	429a      	cmp	r2, r3
 80118c0:	d901      	bls.n	80118c6 <f_write+0x298>
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	699b      	ldr	r3, [r3, #24]
 80118d0:	693a      	ldr	r2, [r7, #16]
 80118d2:	8992      	ldrh	r2, [r2, #12]
 80118d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80118d8:	fb02 f200 	mul.w	r2, r2, r0
 80118dc:	1a9b      	subs	r3, r3, r2
 80118de:	440b      	add	r3, r1
 80118e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118e2:	69f9      	ldr	r1, [r7, #28]
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7fd fd8b 	bl	800f400 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	7d1b      	ldrb	r3, [r3, #20]
 80118ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80118f2:	b2da      	uxtb	r2, r3
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80118f8:	69fa      	ldr	r2, [r7, #28]
 80118fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118fc:	4413      	add	r3, r2
 80118fe:	61fb      	str	r3, [r7, #28]
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	699a      	ldr	r2, [r3, #24]
 8011904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011906:	441a      	add	r2, r3
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	619a      	str	r2, [r3, #24]
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	68da      	ldr	r2, [r3, #12]
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	699b      	ldr	r3, [r3, #24]
 8011914:	429a      	cmp	r2, r3
 8011916:	bf38      	it	cc
 8011918:	461a      	movcc	r2, r3
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	60da      	str	r2, [r3, #12]
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	681a      	ldr	r2, [r3, #0]
 8011922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011924:	441a      	add	r2, r3
 8011926:	683b      	ldr	r3, [r7, #0]
 8011928:	601a      	str	r2, [r3, #0]
 801192a:	687a      	ldr	r2, [r7, #4]
 801192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801192e:	1ad3      	subs	r3, r2, r3
 8011930:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	2b00      	cmp	r3, #0
 8011936:	f47f aeb5 	bne.w	80116a4 <f_write+0x76>
 801193a:	e000      	b.n	801193e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801193c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	7d1b      	ldrb	r3, [r3, #20]
 8011942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011946:	b2da      	uxtb	r2, r3
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801194c:	2300      	movs	r3, #0
}
 801194e:	4618      	mov	r0, r3
 8011950:	3730      	adds	r7, #48	; 0x30
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}
	...

08011958 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b086      	sub	sp, #24
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	f107 0208 	add.w	r2, r7, #8
 8011966:	4611      	mov	r1, r2
 8011968:	4618      	mov	r0, r3
 801196a:	f7ff fab7 	bl	8010edc <validate>
 801196e:	4603      	mov	r3, r0
 8011970:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011972:	7dfb      	ldrb	r3, [r7, #23]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d167      	bne.n	8011a48 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	7d1b      	ldrb	r3, [r3, #20]
 801197c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011980:	2b00      	cmp	r3, #0
 8011982:	d061      	beq.n	8011a48 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	7d1b      	ldrb	r3, [r3, #20]
 8011988:	b25b      	sxtb	r3, r3
 801198a:	2b00      	cmp	r3, #0
 801198c:	da15      	bge.n	80119ba <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801198e:	68bb      	ldr	r3, [r7, #8]
 8011990:	7858      	ldrb	r0, [r3, #1]
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	6a1a      	ldr	r2, [r3, #32]
 801199c:	2301      	movs	r3, #1
 801199e:	f7fd fc6f 	bl	800f280 <disk_write>
 80119a2:	4603      	mov	r3, r0
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d001      	beq.n	80119ac <f_sync+0x54>
 80119a8:	2301      	movs	r3, #1
 80119aa:	e04e      	b.n	8011a4a <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	7d1b      	ldrb	r3, [r3, #20]
 80119b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80119b4:	b2da      	uxtb	r2, r3
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80119ba:	4b26      	ldr	r3, [pc, #152]	; (8011a54 <f_sync+0xfc>)
 80119bc:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80119be:	68ba      	ldr	r2, [r7, #8]
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119c4:	4619      	mov	r1, r3
 80119c6:	4610      	mov	r0, r2
 80119c8:	f7fd ff48 	bl	800f85c <move_window>
 80119cc:	4603      	mov	r3, r0
 80119ce:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80119d0:	7dfb      	ldrb	r3, [r7, #23]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d138      	bne.n	8011a48 <f_sync+0xf0>
					dir = fp->dir_ptr;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119da:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	330b      	adds	r3, #11
 80119e0:	781a      	ldrb	r2, [r3, #0]
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	330b      	adds	r3, #11
 80119e6:	f042 0220 	orr.w	r2, r2, #32
 80119ea:	b2d2      	uxtb	r2, r2
 80119ec:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	6818      	ldr	r0, [r3, #0]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	689b      	ldr	r3, [r3, #8]
 80119f6:	461a      	mov	r2, r3
 80119f8:	68f9      	ldr	r1, [r7, #12]
 80119fa:	f7fe fccd 	bl	8010398 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	f103 021c 	add.w	r2, r3, #28
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	68db      	ldr	r3, [r3, #12]
 8011a08:	4619      	mov	r1, r3
 8011a0a:	4610      	mov	r0, r2
 8011a0c:	f7fd fccc 	bl	800f3a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	3316      	adds	r3, #22
 8011a14:	6939      	ldr	r1, [r7, #16]
 8011a16:	4618      	mov	r0, r3
 8011a18:	f7fd fcc6 	bl	800f3a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	3312      	adds	r3, #18
 8011a20:	2100      	movs	r1, #0
 8011a22:	4618      	mov	r0, r3
 8011a24:	f7fd fca5 	bl	800f372 <st_word>
					fs->wflag = 1;
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011a2e:	68bb      	ldr	r3, [r7, #8]
 8011a30:	4618      	mov	r0, r3
 8011a32:	f7fd ff41 	bl	800f8b8 <sync_fs>
 8011a36:	4603      	mov	r3, r0
 8011a38:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	7d1b      	ldrb	r3, [r3, #20]
 8011a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a42:	b2da      	uxtb	r2, r3
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	3718      	adds	r7, #24
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}
 8011a52:	bf00      	nop
 8011a54:	274a0000 	.word	0x274a0000

08011a58 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b084      	sub	sp, #16
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011a60:	6878      	ldr	r0, [r7, #4]
 8011a62:	f7ff ff79 	bl	8011958 <f_sync>
 8011a66:	4603      	mov	r3, r0
 8011a68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011a6a:	7bfb      	ldrb	r3, [r7, #15]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d118      	bne.n	8011aa2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	f107 0208 	add.w	r2, r7, #8
 8011a76:	4611      	mov	r1, r2
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f7ff fa2f 	bl	8010edc <validate>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011a82:	7bfb      	ldrb	r3, [r7, #15]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d10c      	bne.n	8011aa2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	691b      	ldr	r3, [r3, #16]
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f7fd fe41 	bl	800f714 <dec_lock>
 8011a92:	4603      	mov	r3, r0
 8011a94:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011a96:	7bfb      	ldrb	r3, [r7, #15]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d102      	bne.n	8011aa2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	3710      	adds	r7, #16
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	bd80      	pop	{r7, pc}

08011aac <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011aac:	b590      	push	{r4, r7, lr}
 8011aae:	b091      	sub	sp, #68	; 0x44
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8011ab4:	f107 0108 	add.w	r1, r7, #8
 8011ab8:	1d3b      	adds	r3, r7, #4
 8011aba:	2200      	movs	r2, #0
 8011abc:	4618      	mov	r0, r3
 8011abe:	f7fe ff87 	bl	80109d0 <find_volume>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8011ac8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d131      	bne.n	8011b34 <f_chdir+0x88>
		dj.obj.fs = fs;
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8011ad4:	687a      	ldr	r2, [r7, #4]
 8011ad6:	f107 030c 	add.w	r3, r7, #12
 8011ada:	4611      	mov	r1, r2
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7fe fe47 	bl	8010770 <follow_path>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8011ae8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d11a      	bne.n	8011b26 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8011af0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011af4:	b25b      	sxtb	r3, r3
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	da03      	bge.n	8011b02 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8011afa:	68bb      	ldr	r3, [r7, #8]
 8011afc:	697a      	ldr	r2, [r7, #20]
 8011afe:	619a      	str	r2, [r3, #24]
 8011b00:	e011      	b.n	8011b26 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8011b02:	7cbb      	ldrb	r3, [r7, #18]
 8011b04:	f003 0310 	and.w	r3, r3, #16
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d009      	beq.n	8011b20 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8011b0c:	68bb      	ldr	r3, [r7, #8]
 8011b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b10:	68bc      	ldr	r4, [r7, #8]
 8011b12:	4611      	mov	r1, r2
 8011b14:	4618      	mov	r0, r3
 8011b16:	f7fe fc20 	bl	801035a <ld_clust>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	61a3      	str	r3, [r4, #24]
 8011b1e:	e002      	b.n	8011b26 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8011b20:	2305      	movs	r3, #5
 8011b22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011b26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011b2a:	2b04      	cmp	r3, #4
 8011b2c:	d102      	bne.n	8011b34 <f_chdir+0x88>
 8011b2e:	2305      	movs	r3, #5
 8011b30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8011b34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011b38:	4618      	mov	r0, r3
 8011b3a:	3744      	adds	r7, #68	; 0x44
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	bd90      	pop	{r4, r7, pc}

08011b40 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b090      	sub	sp, #64	; 0x40
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
 8011b48:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	f107 0208 	add.w	r2, r7, #8
 8011b50:	4611      	mov	r1, r2
 8011b52:	4618      	mov	r0, r3
 8011b54:	f7ff f9c2 	bl	8010edc <validate>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011b5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d103      	bne.n	8011b6e <f_lseek+0x2e>
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	7d5b      	ldrb	r3, [r3, #21]
 8011b6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011b6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d002      	beq.n	8011b7c <f_lseek+0x3c>
 8011b76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011b7a:	e201      	b.n	8011f80 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	f000 80d9 	beq.w	8011d38 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b8c:	d15a      	bne.n	8011c44 <f_lseek+0x104>
			tbl = fp->cltbl;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b92:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b96:	1d1a      	adds	r2, r3, #4
 8011b98:	627a      	str	r2, [r7, #36]	; 0x24
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	617b      	str	r3, [r7, #20]
 8011b9e:	2302      	movs	r3, #2
 8011ba0:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	689b      	ldr	r3, [r3, #8]
 8011ba6:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8011ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d03a      	beq.n	8011c24 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bb0:	613b      	str	r3, [r7, #16]
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb8:	3302      	adds	r3, #2
 8011bba:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8011bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bbe:	60fb      	str	r3, [r7, #12]
 8011bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc2:	3301      	adds	r3, #1
 8011bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f7fd ff03 	bl	800f9d6 <get_fat>
 8011bd0:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bd4:	2b01      	cmp	r3, #1
 8011bd6:	d804      	bhi.n	8011be2 <f_lseek+0xa2>
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	2202      	movs	r2, #2
 8011bdc:	755a      	strb	r2, [r3, #21]
 8011bde:	2302      	movs	r3, #2
 8011be0:	e1ce      	b.n	8011f80 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011be8:	d104      	bne.n	8011bf4 <f_lseek+0xb4>
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2201      	movs	r2, #1
 8011bee:	755a      	strb	r2, [r3, #21]
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	e1c5      	b.n	8011f80 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	3301      	adds	r3, #1
 8011bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011bfa:	429a      	cmp	r2, r3
 8011bfc:	d0de      	beq.n	8011bbc <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c00:	697b      	ldr	r3, [r7, #20]
 8011c02:	429a      	cmp	r2, r3
 8011c04:	d809      	bhi.n	8011c1a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8011c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c08:	1d1a      	adds	r2, r3, #4
 8011c0a:	627a      	str	r2, [r7, #36]	; 0x24
 8011c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c0e:	601a      	str	r2, [r3, #0]
 8011c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c12:	1d1a      	adds	r2, r3, #4
 8011c14:	627a      	str	r2, [r7, #36]	; 0x24
 8011c16:	693a      	ldr	r2, [r7, #16]
 8011c18:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011c1a:	68bb      	ldr	r3, [r7, #8]
 8011c1c:	69db      	ldr	r3, [r3, #28]
 8011c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c20:	429a      	cmp	r2, r3
 8011c22:	d3c4      	bcc.n	8011bae <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c2a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011c2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c2e:	697b      	ldr	r3, [r7, #20]
 8011c30:	429a      	cmp	r2, r3
 8011c32:	d803      	bhi.n	8011c3c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8011c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c36:	2200      	movs	r2, #0
 8011c38:	601a      	str	r2, [r3, #0]
 8011c3a:	e19f      	b.n	8011f7c <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011c3c:	2311      	movs	r3, #17
 8011c3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011c42:	e19b      	b.n	8011f7c <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	68db      	ldr	r3, [r3, #12]
 8011c48:	683a      	ldr	r2, [r7, #0]
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	d902      	bls.n	8011c54 <f_lseek+0x114>
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	68db      	ldr	r3, [r3, #12]
 8011c52:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	683a      	ldr	r2, [r7, #0]
 8011c58:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	f000 818d 	beq.w	8011f7c <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	3b01      	subs	r3, #1
 8011c66:	4619      	mov	r1, r3
 8011c68:	6878      	ldr	r0, [r7, #4]
 8011c6a:	f7fe f998 	bl	800ff9e <clmt_clust>
 8011c6e:	4602      	mov	r2, r0
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011c74:	68ba      	ldr	r2, [r7, #8]
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	69db      	ldr	r3, [r3, #28]
 8011c7a:	4619      	mov	r1, r3
 8011c7c:	4610      	mov	r0, r2
 8011c7e:	f7fd fe8b 	bl	800f998 <clust2sect>
 8011c82:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011c84:	69bb      	ldr	r3, [r7, #24]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d104      	bne.n	8011c94 <f_lseek+0x154>
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	2202      	movs	r2, #2
 8011c8e:	755a      	strb	r2, [r3, #21]
 8011c90:	2302      	movs	r3, #2
 8011c92:	e175      	b.n	8011f80 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	3b01      	subs	r3, #1
 8011c98:	68ba      	ldr	r2, [r7, #8]
 8011c9a:	8992      	ldrh	r2, [r2, #12]
 8011c9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ca0:	68ba      	ldr	r2, [r7, #8]
 8011ca2:	8952      	ldrh	r2, [r2, #10]
 8011ca4:	3a01      	subs	r2, #1
 8011ca6:	4013      	ands	r3, r2
 8011ca8:	69ba      	ldr	r2, [r7, #24]
 8011caa:	4413      	add	r3, r2
 8011cac:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	699b      	ldr	r3, [r3, #24]
 8011cb2:	68ba      	ldr	r2, [r7, #8]
 8011cb4:	8992      	ldrh	r2, [r2, #12]
 8011cb6:	fbb3 f1f2 	udiv	r1, r3, r2
 8011cba:	fb02 f201 	mul.w	r2, r2, r1
 8011cbe:	1a9b      	subs	r3, r3, r2
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	f000 815b 	beq.w	8011f7c <f_lseek+0x43c>
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6a1b      	ldr	r3, [r3, #32]
 8011cca:	69ba      	ldr	r2, [r7, #24]
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	f000 8155 	beq.w	8011f7c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	7d1b      	ldrb	r3, [r3, #20]
 8011cd6:	b25b      	sxtb	r3, r3
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	da18      	bge.n	8011d0e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011cdc:	68bb      	ldr	r3, [r7, #8]
 8011cde:	7858      	ldrb	r0, [r3, #1]
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	6a1a      	ldr	r2, [r3, #32]
 8011cea:	2301      	movs	r3, #1
 8011cec:	f7fd fac8 	bl	800f280 <disk_write>
 8011cf0:	4603      	mov	r3, r0
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d004      	beq.n	8011d00 <f_lseek+0x1c0>
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	2201      	movs	r2, #1
 8011cfa:	755a      	strb	r2, [r3, #21]
 8011cfc:	2301      	movs	r3, #1
 8011cfe:	e13f      	b.n	8011f80 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	7d1b      	ldrb	r3, [r3, #20]
 8011d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d08:	b2da      	uxtb	r2, r3
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	7858      	ldrb	r0, [r3, #1]
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011d18:	2301      	movs	r3, #1
 8011d1a:	69ba      	ldr	r2, [r7, #24]
 8011d1c:	f7fd fa90 	bl	800f240 <disk_read>
 8011d20:	4603      	mov	r3, r0
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d004      	beq.n	8011d30 <f_lseek+0x1f0>
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	2201      	movs	r2, #1
 8011d2a:	755a      	strb	r2, [r3, #21]
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	e127      	b.n	8011f80 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	69ba      	ldr	r2, [r7, #24]
 8011d34:	621a      	str	r2, [r3, #32]
 8011d36:	e121      	b.n	8011f7c <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	68db      	ldr	r3, [r3, #12]
 8011d3c:	683a      	ldr	r2, [r7, #0]
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	d908      	bls.n	8011d54 <f_lseek+0x214>
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	7d1b      	ldrb	r3, [r3, #20]
 8011d46:	f003 0302 	and.w	r3, r3, #2
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d102      	bne.n	8011d54 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	68db      	ldr	r3, [r3, #12]
 8011d52:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	699b      	ldr	r3, [r3, #24]
 8011d58:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d62:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011d64:	683b      	ldr	r3, [r7, #0]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	f000 80b5 	beq.w	8011ed6 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	895b      	ldrh	r3, [r3, #10]
 8011d70:	461a      	mov	r2, r3
 8011d72:	68bb      	ldr	r3, [r7, #8]
 8011d74:	899b      	ldrh	r3, [r3, #12]
 8011d76:	fb03 f302 	mul.w	r3, r3, r2
 8011d7a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011d7c:	6a3b      	ldr	r3, [r7, #32]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d01b      	beq.n	8011dba <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011d82:	683b      	ldr	r3, [r7, #0]
 8011d84:	1e5a      	subs	r2, r3, #1
 8011d86:	69fb      	ldr	r3, [r7, #28]
 8011d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8011d8c:	6a3b      	ldr	r3, [r7, #32]
 8011d8e:	1e59      	subs	r1, r3, #1
 8011d90:	69fb      	ldr	r3, [r7, #28]
 8011d92:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011d96:	429a      	cmp	r2, r3
 8011d98:	d30f      	bcc.n	8011dba <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011d9a:	6a3b      	ldr	r3, [r7, #32]
 8011d9c:	1e5a      	subs	r2, r3, #1
 8011d9e:	69fb      	ldr	r3, [r7, #28]
 8011da0:	425b      	negs	r3, r3
 8011da2:	401a      	ands	r2, r3
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	699b      	ldr	r3, [r3, #24]
 8011dac:	683a      	ldr	r2, [r7, #0]
 8011dae:	1ad3      	subs	r3, r2, r3
 8011db0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	69db      	ldr	r3, [r3, #28]
 8011db6:	63bb      	str	r3, [r7, #56]	; 0x38
 8011db8:	e022      	b.n	8011e00 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	689b      	ldr	r3, [r3, #8]
 8011dbe:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d119      	bne.n	8011dfa <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2100      	movs	r1, #0
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f7fe f84f 	bl	800fe6e <create_chain>
 8011dd0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dd4:	2b01      	cmp	r3, #1
 8011dd6:	d104      	bne.n	8011de2 <f_lseek+0x2a2>
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	2202      	movs	r2, #2
 8011ddc:	755a      	strb	r2, [r3, #21]
 8011dde:	2302      	movs	r3, #2
 8011de0:	e0ce      	b.n	8011f80 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011de8:	d104      	bne.n	8011df4 <f_lseek+0x2b4>
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	2201      	movs	r2, #1
 8011dee:	755a      	strb	r2, [r3, #21]
 8011df0:	2301      	movs	r3, #1
 8011df2:	e0c5      	b.n	8011f80 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011df8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011dfe:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d067      	beq.n	8011ed6 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8011e06:	e03a      	b.n	8011e7e <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8011e08:	683a      	ldr	r2, [r7, #0]
 8011e0a:	69fb      	ldr	r3, [r7, #28]
 8011e0c:	1ad3      	subs	r3, r2, r3
 8011e0e:	603b      	str	r3, [r7, #0]
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	699a      	ldr	r2, [r3, #24]
 8011e14:	69fb      	ldr	r3, [r7, #28]
 8011e16:	441a      	add	r2, r3
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	7d1b      	ldrb	r3, [r3, #20]
 8011e20:	f003 0302 	and.w	r3, r3, #2
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d00b      	beq.n	8011e40 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f7fe f81e 	bl	800fe6e <create_chain>
 8011e32:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d108      	bne.n	8011e4c <f_lseek+0x30c>
							ofs = 0; break;
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	603b      	str	r3, [r7, #0]
 8011e3e:	e022      	b.n	8011e86 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011e44:	4618      	mov	r0, r3
 8011e46:	f7fd fdc6 	bl	800f9d6 <get_fat>
 8011e4a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e52:	d104      	bne.n	8011e5e <f_lseek+0x31e>
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2201      	movs	r2, #1
 8011e58:	755a      	strb	r2, [r3, #21]
 8011e5a:	2301      	movs	r3, #1
 8011e5c:	e090      	b.n	8011f80 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e60:	2b01      	cmp	r3, #1
 8011e62:	d904      	bls.n	8011e6e <f_lseek+0x32e>
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	69db      	ldr	r3, [r3, #28]
 8011e68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	d304      	bcc.n	8011e78 <f_lseek+0x338>
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	2202      	movs	r2, #2
 8011e72:	755a      	strb	r2, [r3, #21]
 8011e74:	2302      	movs	r3, #2
 8011e76:	e083      	b.n	8011f80 <f_lseek+0x440>
					fp->clust = clst;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e7c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011e7e:	683a      	ldr	r2, [r7, #0]
 8011e80:	69fb      	ldr	r3, [r7, #28]
 8011e82:	429a      	cmp	r2, r3
 8011e84:	d8c0      	bhi.n	8011e08 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	699a      	ldr	r2, [r3, #24]
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	441a      	add	r2, r3
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011e92:	68bb      	ldr	r3, [r7, #8]
 8011e94:	899b      	ldrh	r3, [r3, #12]
 8011e96:	461a      	mov	r2, r3
 8011e98:	683b      	ldr	r3, [r7, #0]
 8011e9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e9e:	fb02 f201 	mul.w	r2, r2, r1
 8011ea2:	1a9b      	subs	r3, r3, r2
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d016      	beq.n	8011ed6 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011ea8:	68bb      	ldr	r3, [r7, #8]
 8011eaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011eac:	4618      	mov	r0, r3
 8011eae:	f7fd fd73 	bl	800f998 <clust2sect>
 8011eb2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d104      	bne.n	8011ec4 <f_lseek+0x384>
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2202      	movs	r2, #2
 8011ebe:	755a      	strb	r2, [r3, #21]
 8011ec0:	2302      	movs	r3, #2
 8011ec2:	e05d      	b.n	8011f80 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8011ec4:	68bb      	ldr	r3, [r7, #8]
 8011ec6:	899b      	ldrh	r3, [r3, #12]
 8011ec8:	461a      	mov	r2, r3
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ed0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ed2:	4413      	add	r3, r2
 8011ed4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	699a      	ldr	r2, [r3, #24]
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	68db      	ldr	r3, [r3, #12]
 8011ede:	429a      	cmp	r2, r3
 8011ee0:	d90a      	bls.n	8011ef8 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	699a      	ldr	r2, [r3, #24]
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	7d1b      	ldrb	r3, [r3, #20]
 8011eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ef2:	b2da      	uxtb	r2, r3
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	699b      	ldr	r3, [r3, #24]
 8011efc:	68ba      	ldr	r2, [r7, #8]
 8011efe:	8992      	ldrh	r2, [r2, #12]
 8011f00:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f04:	fb02 f201 	mul.w	r2, r2, r1
 8011f08:	1a9b      	subs	r3, r3, r2
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d036      	beq.n	8011f7c <f_lseek+0x43c>
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	6a1b      	ldr	r3, [r3, #32]
 8011f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f14:	429a      	cmp	r2, r3
 8011f16:	d031      	beq.n	8011f7c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	7d1b      	ldrb	r3, [r3, #20]
 8011f1c:	b25b      	sxtb	r3, r3
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	da18      	bge.n	8011f54 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011f22:	68bb      	ldr	r3, [r7, #8]
 8011f24:	7858      	ldrb	r0, [r3, #1]
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	6a1a      	ldr	r2, [r3, #32]
 8011f30:	2301      	movs	r3, #1
 8011f32:	f7fd f9a5 	bl	800f280 <disk_write>
 8011f36:	4603      	mov	r3, r0
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d004      	beq.n	8011f46 <f_lseek+0x406>
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	2201      	movs	r2, #1
 8011f40:	755a      	strb	r2, [r3, #21]
 8011f42:	2301      	movs	r3, #1
 8011f44:	e01c      	b.n	8011f80 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	7d1b      	ldrb	r3, [r3, #20]
 8011f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f4e:	b2da      	uxtb	r2, r3
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	7858      	ldrb	r0, [r3, #1]
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011f5e:	2301      	movs	r3, #1
 8011f60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f62:	f7fd f96d 	bl	800f240 <disk_read>
 8011f66:	4603      	mov	r3, r0
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d004      	beq.n	8011f76 <f_lseek+0x436>
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	2201      	movs	r2, #1
 8011f70:	755a      	strb	r2, [r3, #21]
 8011f72:	2301      	movs	r3, #1
 8011f74:	e004      	b.n	8011f80 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f7a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011f7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	3740      	adds	r7, #64	; 0x40
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}

08011f88 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b09e      	sub	sp, #120	; 0x78
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8011f90:	2300      	movs	r3, #0
 8011f92:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011f94:	f107 010c 	add.w	r1, r7, #12
 8011f98:	1d3b      	adds	r3, r7, #4
 8011f9a:	2202      	movs	r2, #2
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7fe fd17 	bl	80109d0 <find_volume>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8011fac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	f040 80a4 	bne.w	80120fe <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8011fb6:	687a      	ldr	r2, [r7, #4]
 8011fb8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011fbc:	4611      	mov	r1, r2
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7fe fbd6 	bl	8010770 <follow_path>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8011fca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d108      	bne.n	8011fe4 <f_unlink+0x5c>
 8011fd2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011fd6:	f003 0320 	and.w	r3, r3, #32
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d002      	beq.n	8011fe4 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8011fde:	2306      	movs	r3, #6
 8011fe0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8011fe4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d108      	bne.n	8011ffe <f_unlink+0x76>
 8011fec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011ff0:	2102      	movs	r1, #2
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f7fd fa82 	bl	800f4fc <chk_lock>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8011ffe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012002:	2b00      	cmp	r3, #0
 8012004:	d17b      	bne.n	80120fe <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8012006:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801200a:	b25b      	sxtb	r3, r3
 801200c:	2b00      	cmp	r3, #0
 801200e:	da03      	bge.n	8012018 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8012010:	2306      	movs	r3, #6
 8012012:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8012016:	e008      	b.n	801202a <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8012018:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801201c:	f003 0301 	and.w	r3, r3, #1
 8012020:	2b00      	cmp	r3, #0
 8012022:	d002      	beq.n	801202a <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8012024:	2307      	movs	r3, #7
 8012026:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 801202a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801202e:	2b00      	cmp	r3, #0
 8012030:	d13d      	bne.n	80120ae <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012036:	4611      	mov	r1, r2
 8012038:	4618      	mov	r0, r3
 801203a:	f7fe f98e 	bl	801035a <ld_clust>
 801203e:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8012040:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8012044:	f003 0310 	and.w	r3, r3, #16
 8012048:	2b00      	cmp	r3, #0
 801204a:	d030      	beq.n	80120ae <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	699b      	ldr	r3, [r3, #24]
 8012050:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012052:	429a      	cmp	r2, r3
 8012054:	d103      	bne.n	801205e <f_unlink+0xd6>
						res = FR_DENIED;
 8012056:	2307      	movs	r3, #7
 8012058:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801205c:	e027      	b.n	80120ae <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8012062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012064:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8012066:	f107 0310 	add.w	r3, r7, #16
 801206a:	2100      	movs	r1, #0
 801206c:	4618      	mov	r0, r3
 801206e:	f7fd ffce 	bl	801000e <dir_sdi>
 8012072:	4603      	mov	r3, r0
 8012074:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8012078:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801207c:	2b00      	cmp	r3, #0
 801207e:	d116      	bne.n	80120ae <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8012080:	f107 0310 	add.w	r3, r7, #16
 8012084:	2100      	movs	r1, #0
 8012086:	4618      	mov	r0, r3
 8012088:	f7fe f9a6 	bl	80103d8 <dir_read>
 801208c:	4603      	mov	r3, r0
 801208e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8012092:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012096:	2b00      	cmp	r3, #0
 8012098:	d102      	bne.n	80120a0 <f_unlink+0x118>
 801209a:	2307      	movs	r3, #7
 801209c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80120a0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80120a4:	2b04      	cmp	r3, #4
 80120a6:	d102      	bne.n	80120ae <f_unlink+0x126>
 80120a8:	2300      	movs	r3, #0
 80120aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80120ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d123      	bne.n	80120fe <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80120b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80120ba:	4618      	mov	r0, r3
 80120bc:	f7fe fa70 	bl	80105a0 <dir_remove>
 80120c0:	4603      	mov	r3, r0
 80120c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80120c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d10c      	bne.n	80120e8 <f_unlink+0x160>
 80120ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d009      	beq.n	80120e8 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80120d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80120d8:	2200      	movs	r2, #0
 80120da:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80120dc:	4618      	mov	r0, r3
 80120de:	f7fd fe61 	bl	800fda4 <remove_chain>
 80120e2:	4603      	mov	r3, r0
 80120e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80120e8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d106      	bne.n	80120fe <f_unlink+0x176>
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7fd fbe0 	bl	800f8b8 <sync_fs>
 80120f8:	4603      	mov	r3, r0
 80120fa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80120fe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8012102:	4618      	mov	r0, r3
 8012104:	3778      	adds	r7, #120	; 0x78
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}
	...

0801210c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b096      	sub	sp, #88	; 0x58
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8012114:	f107 0108 	add.w	r1, r7, #8
 8012118:	1d3b      	adds	r3, r7, #4
 801211a:	2202      	movs	r2, #2
 801211c:	4618      	mov	r0, r3
 801211e:	f7fe fc57 	bl	80109d0 <find_volume>
 8012122:	4603      	mov	r3, r0
 8012124:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8012128:	68bb      	ldr	r3, [r7, #8]
 801212a:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 801212c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012130:	2b00      	cmp	r3, #0
 8012132:	f040 80fe 	bne.w	8012332 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8012136:	687a      	ldr	r2, [r7, #4]
 8012138:	f107 030c 	add.w	r3, r7, #12
 801213c:	4611      	mov	r1, r2
 801213e:	4618      	mov	r0, r3
 8012140:	f7fe fb16 	bl	8010770 <follow_path>
 8012144:	4603      	mov	r3, r0
 8012146:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801214a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801214e:	2b00      	cmp	r3, #0
 8012150:	d102      	bne.n	8012158 <f_mkdir+0x4c>
 8012152:	2308      	movs	r3, #8
 8012154:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8012158:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801215c:	2b04      	cmp	r3, #4
 801215e:	d108      	bne.n	8012172 <f_mkdir+0x66>
 8012160:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012164:	f003 0320 	and.w	r3, r3, #32
 8012168:	2b00      	cmp	r3, #0
 801216a:	d002      	beq.n	8012172 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 801216c:	2306      	movs	r3, #6
 801216e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8012172:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012176:	2b04      	cmp	r3, #4
 8012178:	f040 80db 	bne.w	8012332 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 801217c:	f107 030c 	add.w	r3, r7, #12
 8012180:	2100      	movs	r1, #0
 8012182:	4618      	mov	r0, r3
 8012184:	f7fd fe73 	bl	800fe6e <create_chain>
 8012188:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801218a:	68bb      	ldr	r3, [r7, #8]
 801218c:	895b      	ldrh	r3, [r3, #10]
 801218e:	461a      	mov	r2, r3
 8012190:	68bb      	ldr	r3, [r7, #8]
 8012192:	899b      	ldrh	r3, [r3, #12]
 8012194:	fb03 f302 	mul.w	r3, r3, r2
 8012198:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801219a:	2300      	movs	r3, #0
 801219c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80121a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d102      	bne.n	80121ac <f_mkdir+0xa0>
 80121a6:	2307      	movs	r3, #7
 80121a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80121ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121ae:	2b01      	cmp	r3, #1
 80121b0:	d102      	bne.n	80121b8 <f_mkdir+0xac>
 80121b2:	2302      	movs	r3, #2
 80121b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80121b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121be:	d102      	bne.n	80121c6 <f_mkdir+0xba>
 80121c0:	2301      	movs	r3, #1
 80121c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80121c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d106      	bne.n	80121dc <f_mkdir+0xd0>
 80121ce:	68bb      	ldr	r3, [r7, #8]
 80121d0:	4618      	mov	r0, r3
 80121d2:	f7fd faff 	bl	800f7d4 <sync_window>
 80121d6:	4603      	mov	r3, r0
 80121d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80121dc:	4b58      	ldr	r3, [pc, #352]	; (8012340 <f_mkdir+0x234>)
 80121de:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80121e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d16c      	bne.n	80122c2 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80121ec:	4618      	mov	r0, r3
 80121ee:	f7fd fbd3 	bl	800f998 <clust2sect>
 80121f2:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	3338      	adds	r3, #56	; 0x38
 80121f8:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80121fa:	68bb      	ldr	r3, [r7, #8]
 80121fc:	899b      	ldrh	r3, [r3, #12]
 80121fe:	461a      	mov	r2, r3
 8012200:	2100      	movs	r1, #0
 8012202:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012204:	f7fd f91d 	bl	800f442 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8012208:	220b      	movs	r2, #11
 801220a:	2120      	movs	r1, #32
 801220c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801220e:	f7fd f918 	bl	800f442 <mem_set>
					dir[DIR_Name] = '.';
 8012212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012214:	222e      	movs	r2, #46	; 0x2e
 8012216:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8012218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801221a:	330b      	adds	r3, #11
 801221c:	2210      	movs	r2, #16
 801221e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8012220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012222:	3316      	adds	r3, #22
 8012224:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012226:	4618      	mov	r0, r3
 8012228:	f7fd f8be 	bl	800f3a8 <st_dword>
					st_clust(fs, dir, dcl);
 801222c:	68bb      	ldr	r3, [r7, #8]
 801222e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012230:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012232:	4618      	mov	r0, r3
 8012234:	f7fe f8b0 	bl	8010398 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8012238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801223a:	3320      	adds	r3, #32
 801223c:	2220      	movs	r2, #32
 801223e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012240:	4618      	mov	r0, r3
 8012242:	f7fd f8dd 	bl	800f400 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8012246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012248:	3321      	adds	r3, #33	; 0x21
 801224a:	222e      	movs	r2, #46	; 0x2e
 801224c:	701a      	strb	r2, [r3, #0]
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8012252:	68bb      	ldr	r3, [r7, #8]
 8012254:	781b      	ldrb	r3, [r3, #0]
 8012256:	2b03      	cmp	r3, #3
 8012258:	d106      	bne.n	8012268 <f_mkdir+0x15c>
 801225a:	68bb      	ldr	r3, [r7, #8]
 801225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801225e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012260:	429a      	cmp	r2, r3
 8012262:	d101      	bne.n	8012268 <f_mkdir+0x15c>
 8012264:	2300      	movs	r3, #0
 8012266:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8012268:	68b8      	ldr	r0, [r7, #8]
 801226a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801226c:	3320      	adds	r3, #32
 801226e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012270:	4619      	mov	r1, r3
 8012272:	f7fe f891 	bl	8010398 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	895b      	ldrh	r3, [r3, #10]
 801227a:	653b      	str	r3, [r7, #80]	; 0x50
 801227c:	e01c      	b.n	80122b8 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 801227e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012280:	1c5a      	adds	r2, r3, #1
 8012282:	64fa      	str	r2, [r7, #76]	; 0x4c
 8012284:	68ba      	ldr	r2, [r7, #8]
 8012286:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8012288:	68bb      	ldr	r3, [r7, #8]
 801228a:	2201      	movs	r2, #1
 801228c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801228e:	68bb      	ldr	r3, [r7, #8]
 8012290:	4618      	mov	r0, r3
 8012292:	f7fd fa9f 	bl	800f7d4 <sync_window>
 8012296:	4603      	mov	r3, r0
 8012298:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 801229c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d10d      	bne.n	80122c0 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 80122a4:	68bb      	ldr	r3, [r7, #8]
 80122a6:	899b      	ldrh	r3, [r3, #12]
 80122a8:	461a      	mov	r2, r3
 80122aa:	2100      	movs	r1, #0
 80122ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80122ae:	f7fd f8c8 	bl	800f442 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80122b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122b4:	3b01      	subs	r3, #1
 80122b6:	653b      	str	r3, [r7, #80]	; 0x50
 80122b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d1df      	bne.n	801227e <f_mkdir+0x172>
 80122be:	e000      	b.n	80122c2 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 80122c0:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80122c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d107      	bne.n	80122da <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80122ca:	f107 030c 	add.w	r3, r7, #12
 80122ce:	4618      	mov	r0, r3
 80122d0:	f7fe f934 	bl	801053c <dir_register>
 80122d4:	4603      	mov	r3, r0
 80122d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80122da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d120      	bne.n	8012324 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80122e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122e4:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80122e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122e8:	3316      	adds	r3, #22
 80122ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80122ec:	4618      	mov	r0, r3
 80122ee:	f7fd f85b 	bl	800f3a8 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80122f2:	68bb      	ldr	r3, [r7, #8]
 80122f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80122f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80122f8:	4618      	mov	r0, r3
 80122fa:	f7fe f84d 	bl	8010398 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80122fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012300:	330b      	adds	r3, #11
 8012302:	2210      	movs	r2, #16
 8012304:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	2201      	movs	r2, #1
 801230a:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 801230c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012310:	2b00      	cmp	r3, #0
 8012312:	d10e      	bne.n	8012332 <f_mkdir+0x226>
					res = sync_fs(fs);
 8012314:	68bb      	ldr	r3, [r7, #8]
 8012316:	4618      	mov	r0, r3
 8012318:	f7fd face 	bl	800f8b8 <sync_fs>
 801231c:	4603      	mov	r3, r0
 801231e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8012322:	e006      	b.n	8012332 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8012324:	f107 030c 	add.w	r3, r7, #12
 8012328:	2200      	movs	r2, #0
 801232a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801232c:	4618      	mov	r0, r3
 801232e:	f7fd fd39 	bl	800fda4 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8012332:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8012336:	4618      	mov	r0, r3
 8012338:	3758      	adds	r7, #88	; 0x58
 801233a:	46bd      	mov	sp, r7
 801233c:	bd80      	pop	{r7, pc}
 801233e:	bf00      	nop
 8012340:	274a0000 	.word	0x274a0000

08012344 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b088      	sub	sp, #32
 8012348:	af00      	add	r7, sp, #0
 801234a:	60f8      	str	r0, [r7, #12]
 801234c:	60b9      	str	r1, [r7, #8]
 801234e:	607a      	str	r2, [r7, #4]
	int n = 0;
 8012350:	2300      	movs	r3, #0
 8012352:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8012358:	e017      	b.n	801238a <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801235a:	f107 0310 	add.w	r3, r7, #16
 801235e:	f107 0114 	add.w	r1, r7, #20
 8012362:	2201      	movs	r2, #1
 8012364:	6878      	ldr	r0, [r7, #4]
 8012366:	f7ff f803 	bl	8011370 <f_read>
		if (rc != 1) break;
 801236a:	693b      	ldr	r3, [r7, #16]
 801236c:	2b01      	cmp	r3, #1
 801236e:	d112      	bne.n	8012396 <f_gets+0x52>
		c = s[0];
 8012370:	7d3b      	ldrb	r3, [r7, #20]
 8012372:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8012374:	69bb      	ldr	r3, [r7, #24]
 8012376:	1c5a      	adds	r2, r3, #1
 8012378:	61ba      	str	r2, [r7, #24]
 801237a:	7dfa      	ldrb	r2, [r7, #23]
 801237c:	701a      	strb	r2, [r3, #0]
		n++;
 801237e:	69fb      	ldr	r3, [r7, #28]
 8012380:	3301      	adds	r3, #1
 8012382:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8012384:	7dfb      	ldrb	r3, [r7, #23]
 8012386:	2b0a      	cmp	r3, #10
 8012388:	d007      	beq.n	801239a <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801238a:	68bb      	ldr	r3, [r7, #8]
 801238c:	3b01      	subs	r3, #1
 801238e:	69fa      	ldr	r2, [r7, #28]
 8012390:	429a      	cmp	r2, r3
 8012392:	dbe2      	blt.n	801235a <f_gets+0x16>
 8012394:	e002      	b.n	801239c <f_gets+0x58>
		if (rc != 1) break;
 8012396:	bf00      	nop
 8012398:	e000      	b.n	801239c <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 801239a:	bf00      	nop
	}
	*p = 0;
 801239c:	69bb      	ldr	r3, [r7, #24]
 801239e:	2200      	movs	r2, #0
 80123a0:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80123a2:	69fb      	ldr	r3, [r7, #28]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d001      	beq.n	80123ac <f_gets+0x68>
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	e000      	b.n	80123ae <f_gets+0x6a>
 80123ac:	2300      	movs	r3, #0
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	3720      	adds	r7, #32
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}
	...

080123b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80123b8:	b480      	push	{r7}
 80123ba:	b087      	sub	sp, #28
 80123bc:	af00      	add	r7, sp, #0
 80123be:	60f8      	str	r0, [r7, #12]
 80123c0:	60b9      	str	r1, [r7, #8]
 80123c2:	4613      	mov	r3, r2
 80123c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80123c6:	2301      	movs	r3, #1
 80123c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80123ca:	2300      	movs	r3, #0
 80123cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80123ce:	4b1f      	ldr	r3, [pc, #124]	; (801244c <FATFS_LinkDriverEx+0x94>)
 80123d0:	7a5b      	ldrb	r3, [r3, #9]
 80123d2:	b2db      	uxtb	r3, r3
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d131      	bne.n	801243c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80123d8:	4b1c      	ldr	r3, [pc, #112]	; (801244c <FATFS_LinkDriverEx+0x94>)
 80123da:	7a5b      	ldrb	r3, [r3, #9]
 80123dc:	b2db      	uxtb	r3, r3
 80123de:	461a      	mov	r2, r3
 80123e0:	4b1a      	ldr	r3, [pc, #104]	; (801244c <FATFS_LinkDriverEx+0x94>)
 80123e2:	2100      	movs	r1, #0
 80123e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80123e6:	4b19      	ldr	r3, [pc, #100]	; (801244c <FATFS_LinkDriverEx+0x94>)
 80123e8:	7a5b      	ldrb	r3, [r3, #9]
 80123ea:	b2db      	uxtb	r3, r3
 80123ec:	4a17      	ldr	r2, [pc, #92]	; (801244c <FATFS_LinkDriverEx+0x94>)
 80123ee:	009b      	lsls	r3, r3, #2
 80123f0:	4413      	add	r3, r2
 80123f2:	68fa      	ldr	r2, [r7, #12]
 80123f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80123f6:	4b15      	ldr	r3, [pc, #84]	; (801244c <FATFS_LinkDriverEx+0x94>)
 80123f8:	7a5b      	ldrb	r3, [r3, #9]
 80123fa:	b2db      	uxtb	r3, r3
 80123fc:	461a      	mov	r2, r3
 80123fe:	4b13      	ldr	r3, [pc, #76]	; (801244c <FATFS_LinkDriverEx+0x94>)
 8012400:	4413      	add	r3, r2
 8012402:	79fa      	ldrb	r2, [r7, #7]
 8012404:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012406:	4b11      	ldr	r3, [pc, #68]	; (801244c <FATFS_LinkDriverEx+0x94>)
 8012408:	7a5b      	ldrb	r3, [r3, #9]
 801240a:	b2db      	uxtb	r3, r3
 801240c:	1c5a      	adds	r2, r3, #1
 801240e:	b2d1      	uxtb	r1, r2
 8012410:	4a0e      	ldr	r2, [pc, #56]	; (801244c <FATFS_LinkDriverEx+0x94>)
 8012412:	7251      	strb	r1, [r2, #9]
 8012414:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012416:	7dbb      	ldrb	r3, [r7, #22]
 8012418:	3330      	adds	r3, #48	; 0x30
 801241a:	b2da      	uxtb	r2, r3
 801241c:	68bb      	ldr	r3, [r7, #8]
 801241e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012420:	68bb      	ldr	r3, [r7, #8]
 8012422:	3301      	adds	r3, #1
 8012424:	223a      	movs	r2, #58	; 0x3a
 8012426:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012428:	68bb      	ldr	r3, [r7, #8]
 801242a:	3302      	adds	r3, #2
 801242c:	222f      	movs	r2, #47	; 0x2f
 801242e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012430:	68bb      	ldr	r3, [r7, #8]
 8012432:	3303      	adds	r3, #3
 8012434:	2200      	movs	r2, #0
 8012436:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012438:	2300      	movs	r3, #0
 801243a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801243c:	7dfb      	ldrb	r3, [r7, #23]
}
 801243e:	4618      	mov	r0, r3
 8012440:	371c      	adds	r7, #28
 8012442:	46bd      	mov	sp, r7
 8012444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012448:	4770      	bx	lr
 801244a:	bf00      	nop
 801244c:	20039400 	.word	0x20039400

08012450 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b082      	sub	sp, #8
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
 8012458:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801245a:	2200      	movs	r2, #0
 801245c:	6839      	ldr	r1, [r7, #0]
 801245e:	6878      	ldr	r0, [r7, #4]
 8012460:	f7ff ffaa 	bl	80123b8 <FATFS_LinkDriverEx>
 8012464:	4603      	mov	r3, r0
}
 8012466:	4618      	mov	r0, r3
 8012468:	3708      	adds	r7, #8
 801246a:	46bd      	mov	sp, r7
 801246c:	bd80      	pop	{r7, pc}

0801246e <__cxa_guard_acquire>:
 801246e:	6803      	ldr	r3, [r0, #0]
 8012470:	07db      	lsls	r3, r3, #31
 8012472:	d406      	bmi.n	8012482 <__cxa_guard_acquire+0x14>
 8012474:	7843      	ldrb	r3, [r0, #1]
 8012476:	b103      	cbz	r3, 801247a <__cxa_guard_acquire+0xc>
 8012478:	deff      	udf	#255	; 0xff
 801247a:	2301      	movs	r3, #1
 801247c:	7043      	strb	r3, [r0, #1]
 801247e:	4618      	mov	r0, r3
 8012480:	4770      	bx	lr
 8012482:	2000      	movs	r0, #0
 8012484:	4770      	bx	lr

08012486 <__cxa_guard_release>:
 8012486:	2301      	movs	r3, #1
 8012488:	6003      	str	r3, [r0, #0]
 801248a:	4770      	bx	lr
 801248c:	0000      	movs	r0, r0
	...

08012490 <cos>:
 8012490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012492:	ec51 0b10 	vmov	r0, r1, d0
 8012496:	4a1e      	ldr	r2, [pc, #120]	; (8012510 <cos+0x80>)
 8012498:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801249c:	4293      	cmp	r3, r2
 801249e:	dc06      	bgt.n	80124ae <cos+0x1e>
 80124a0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8012508 <cos+0x78>
 80124a4:	f000 fa74 	bl	8012990 <__kernel_cos>
 80124a8:	ec51 0b10 	vmov	r0, r1, d0
 80124ac:	e007      	b.n	80124be <cos+0x2e>
 80124ae:	4a19      	ldr	r2, [pc, #100]	; (8012514 <cos+0x84>)
 80124b0:	4293      	cmp	r3, r2
 80124b2:	dd09      	ble.n	80124c8 <cos+0x38>
 80124b4:	ee10 2a10 	vmov	r2, s0
 80124b8:	460b      	mov	r3, r1
 80124ba:	f7ed fefd 	bl	80002b8 <__aeabi_dsub>
 80124be:	ec41 0b10 	vmov	d0, r0, r1
 80124c2:	b005      	add	sp, #20
 80124c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80124c8:	4668      	mov	r0, sp
 80124ca:	f000 f86d 	bl	80125a8 <__ieee754_rem_pio2>
 80124ce:	f000 0003 	and.w	r0, r0, #3
 80124d2:	2801      	cmp	r0, #1
 80124d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80124d8:	ed9d 0b00 	vldr	d0, [sp]
 80124dc:	d007      	beq.n	80124ee <cos+0x5e>
 80124de:	2802      	cmp	r0, #2
 80124e0:	d00e      	beq.n	8012500 <cos+0x70>
 80124e2:	2800      	cmp	r0, #0
 80124e4:	d0de      	beq.n	80124a4 <cos+0x14>
 80124e6:	2001      	movs	r0, #1
 80124e8:	f000 fe5a 	bl	80131a0 <__kernel_sin>
 80124ec:	e7dc      	b.n	80124a8 <cos+0x18>
 80124ee:	f000 fe57 	bl	80131a0 <__kernel_sin>
 80124f2:	ec53 2b10 	vmov	r2, r3, d0
 80124f6:	ee10 0a10 	vmov	r0, s0
 80124fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80124fe:	e7de      	b.n	80124be <cos+0x2e>
 8012500:	f000 fa46 	bl	8012990 <__kernel_cos>
 8012504:	e7f5      	b.n	80124f2 <cos+0x62>
 8012506:	bf00      	nop
	...
 8012510:	3fe921fb 	.word	0x3fe921fb
 8012514:	7fefffff 	.word	0x7fefffff

08012518 <sin>:
 8012518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801251a:	ec51 0b10 	vmov	r0, r1, d0
 801251e:	4a20      	ldr	r2, [pc, #128]	; (80125a0 <sin+0x88>)
 8012520:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012524:	4293      	cmp	r3, r2
 8012526:	dc07      	bgt.n	8012538 <sin+0x20>
 8012528:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8012598 <sin+0x80>
 801252c:	2000      	movs	r0, #0
 801252e:	f000 fe37 	bl	80131a0 <__kernel_sin>
 8012532:	ec51 0b10 	vmov	r0, r1, d0
 8012536:	e007      	b.n	8012548 <sin+0x30>
 8012538:	4a1a      	ldr	r2, [pc, #104]	; (80125a4 <sin+0x8c>)
 801253a:	4293      	cmp	r3, r2
 801253c:	dd09      	ble.n	8012552 <sin+0x3a>
 801253e:	ee10 2a10 	vmov	r2, s0
 8012542:	460b      	mov	r3, r1
 8012544:	f7ed feb8 	bl	80002b8 <__aeabi_dsub>
 8012548:	ec41 0b10 	vmov	d0, r0, r1
 801254c:	b005      	add	sp, #20
 801254e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012552:	4668      	mov	r0, sp
 8012554:	f000 f828 	bl	80125a8 <__ieee754_rem_pio2>
 8012558:	f000 0003 	and.w	r0, r0, #3
 801255c:	2801      	cmp	r0, #1
 801255e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012562:	ed9d 0b00 	vldr	d0, [sp]
 8012566:	d004      	beq.n	8012572 <sin+0x5a>
 8012568:	2802      	cmp	r0, #2
 801256a:	d005      	beq.n	8012578 <sin+0x60>
 801256c:	b970      	cbnz	r0, 801258c <sin+0x74>
 801256e:	2001      	movs	r0, #1
 8012570:	e7dd      	b.n	801252e <sin+0x16>
 8012572:	f000 fa0d 	bl	8012990 <__kernel_cos>
 8012576:	e7dc      	b.n	8012532 <sin+0x1a>
 8012578:	2001      	movs	r0, #1
 801257a:	f000 fe11 	bl	80131a0 <__kernel_sin>
 801257e:	ec53 2b10 	vmov	r2, r3, d0
 8012582:	ee10 0a10 	vmov	r0, s0
 8012586:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801258a:	e7dd      	b.n	8012548 <sin+0x30>
 801258c:	f000 fa00 	bl	8012990 <__kernel_cos>
 8012590:	e7f5      	b.n	801257e <sin+0x66>
 8012592:	bf00      	nop
 8012594:	f3af 8000 	nop.w
	...
 80125a0:	3fe921fb 	.word	0x3fe921fb
 80125a4:	7fefffff 	.word	0x7fefffff

080125a8 <__ieee754_rem_pio2>:
 80125a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125ac:	ec57 6b10 	vmov	r6, r7, d0
 80125b0:	4bc3      	ldr	r3, [pc, #780]	; (80128c0 <__ieee754_rem_pio2+0x318>)
 80125b2:	b08d      	sub	sp, #52	; 0x34
 80125b4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80125b8:	4598      	cmp	r8, r3
 80125ba:	4604      	mov	r4, r0
 80125bc:	9704      	str	r7, [sp, #16]
 80125be:	dc07      	bgt.n	80125d0 <__ieee754_rem_pio2+0x28>
 80125c0:	2200      	movs	r2, #0
 80125c2:	2300      	movs	r3, #0
 80125c4:	ed84 0b00 	vstr	d0, [r4]
 80125c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80125cc:	2500      	movs	r5, #0
 80125ce:	e027      	b.n	8012620 <__ieee754_rem_pio2+0x78>
 80125d0:	4bbc      	ldr	r3, [pc, #752]	; (80128c4 <__ieee754_rem_pio2+0x31c>)
 80125d2:	4598      	cmp	r8, r3
 80125d4:	dc75      	bgt.n	80126c2 <__ieee754_rem_pio2+0x11a>
 80125d6:	9b04      	ldr	r3, [sp, #16]
 80125d8:	4dbb      	ldr	r5, [pc, #748]	; (80128c8 <__ieee754_rem_pio2+0x320>)
 80125da:	2b00      	cmp	r3, #0
 80125dc:	ee10 0a10 	vmov	r0, s0
 80125e0:	a3a9      	add	r3, pc, #676	; (adr r3, 8012888 <__ieee754_rem_pio2+0x2e0>)
 80125e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125e6:	4639      	mov	r1, r7
 80125e8:	dd36      	ble.n	8012658 <__ieee754_rem_pio2+0xb0>
 80125ea:	f7ed fe65 	bl	80002b8 <__aeabi_dsub>
 80125ee:	45a8      	cmp	r8, r5
 80125f0:	4606      	mov	r6, r0
 80125f2:	460f      	mov	r7, r1
 80125f4:	d018      	beq.n	8012628 <__ieee754_rem_pio2+0x80>
 80125f6:	a3a6      	add	r3, pc, #664	; (adr r3, 8012890 <__ieee754_rem_pio2+0x2e8>)
 80125f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125fc:	f7ed fe5c 	bl	80002b8 <__aeabi_dsub>
 8012600:	4602      	mov	r2, r0
 8012602:	460b      	mov	r3, r1
 8012604:	e9c4 2300 	strd	r2, r3, [r4]
 8012608:	4630      	mov	r0, r6
 801260a:	4639      	mov	r1, r7
 801260c:	f7ed fe54 	bl	80002b8 <__aeabi_dsub>
 8012610:	a39f      	add	r3, pc, #636	; (adr r3, 8012890 <__ieee754_rem_pio2+0x2e8>)
 8012612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012616:	f7ed fe4f 	bl	80002b8 <__aeabi_dsub>
 801261a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801261e:	2501      	movs	r5, #1
 8012620:	4628      	mov	r0, r5
 8012622:	b00d      	add	sp, #52	; 0x34
 8012624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012628:	a39b      	add	r3, pc, #620	; (adr r3, 8012898 <__ieee754_rem_pio2+0x2f0>)
 801262a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801262e:	f7ed fe43 	bl	80002b8 <__aeabi_dsub>
 8012632:	a39b      	add	r3, pc, #620	; (adr r3, 80128a0 <__ieee754_rem_pio2+0x2f8>)
 8012634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012638:	4606      	mov	r6, r0
 801263a:	460f      	mov	r7, r1
 801263c:	f7ed fe3c 	bl	80002b8 <__aeabi_dsub>
 8012640:	4602      	mov	r2, r0
 8012642:	460b      	mov	r3, r1
 8012644:	e9c4 2300 	strd	r2, r3, [r4]
 8012648:	4630      	mov	r0, r6
 801264a:	4639      	mov	r1, r7
 801264c:	f7ed fe34 	bl	80002b8 <__aeabi_dsub>
 8012650:	a393      	add	r3, pc, #588	; (adr r3, 80128a0 <__ieee754_rem_pio2+0x2f8>)
 8012652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012656:	e7de      	b.n	8012616 <__ieee754_rem_pio2+0x6e>
 8012658:	f7ed fe30 	bl	80002bc <__adddf3>
 801265c:	45a8      	cmp	r8, r5
 801265e:	4606      	mov	r6, r0
 8012660:	460f      	mov	r7, r1
 8012662:	d016      	beq.n	8012692 <__ieee754_rem_pio2+0xea>
 8012664:	a38a      	add	r3, pc, #552	; (adr r3, 8012890 <__ieee754_rem_pio2+0x2e8>)
 8012666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801266a:	f7ed fe27 	bl	80002bc <__adddf3>
 801266e:	4602      	mov	r2, r0
 8012670:	460b      	mov	r3, r1
 8012672:	e9c4 2300 	strd	r2, r3, [r4]
 8012676:	4630      	mov	r0, r6
 8012678:	4639      	mov	r1, r7
 801267a:	f7ed fe1d 	bl	80002b8 <__aeabi_dsub>
 801267e:	a384      	add	r3, pc, #528	; (adr r3, 8012890 <__ieee754_rem_pio2+0x2e8>)
 8012680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012684:	f7ed fe1a 	bl	80002bc <__adddf3>
 8012688:	f04f 35ff 	mov.w	r5, #4294967295
 801268c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012690:	e7c6      	b.n	8012620 <__ieee754_rem_pio2+0x78>
 8012692:	a381      	add	r3, pc, #516	; (adr r3, 8012898 <__ieee754_rem_pio2+0x2f0>)
 8012694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012698:	f7ed fe10 	bl	80002bc <__adddf3>
 801269c:	a380      	add	r3, pc, #512	; (adr r3, 80128a0 <__ieee754_rem_pio2+0x2f8>)
 801269e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126a2:	4606      	mov	r6, r0
 80126a4:	460f      	mov	r7, r1
 80126a6:	f7ed fe09 	bl	80002bc <__adddf3>
 80126aa:	4602      	mov	r2, r0
 80126ac:	460b      	mov	r3, r1
 80126ae:	e9c4 2300 	strd	r2, r3, [r4]
 80126b2:	4630      	mov	r0, r6
 80126b4:	4639      	mov	r1, r7
 80126b6:	f7ed fdff 	bl	80002b8 <__aeabi_dsub>
 80126ba:	a379      	add	r3, pc, #484	; (adr r3, 80128a0 <__ieee754_rem_pio2+0x2f8>)
 80126bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c0:	e7e0      	b.n	8012684 <__ieee754_rem_pio2+0xdc>
 80126c2:	4b82      	ldr	r3, [pc, #520]	; (80128cc <__ieee754_rem_pio2+0x324>)
 80126c4:	4598      	cmp	r8, r3
 80126c6:	f300 80d0 	bgt.w	801286a <__ieee754_rem_pio2+0x2c2>
 80126ca:	f000 fe23 	bl	8013314 <fabs>
 80126ce:	ec57 6b10 	vmov	r6, r7, d0
 80126d2:	ee10 0a10 	vmov	r0, s0
 80126d6:	a374      	add	r3, pc, #464	; (adr r3, 80128a8 <__ieee754_rem_pio2+0x300>)
 80126d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126dc:	4639      	mov	r1, r7
 80126de:	f7ed ffa3 	bl	8000628 <__aeabi_dmul>
 80126e2:	2200      	movs	r2, #0
 80126e4:	4b7a      	ldr	r3, [pc, #488]	; (80128d0 <__ieee754_rem_pio2+0x328>)
 80126e6:	f7ed fde9 	bl	80002bc <__adddf3>
 80126ea:	f7ee fa4d 	bl	8000b88 <__aeabi_d2iz>
 80126ee:	4605      	mov	r5, r0
 80126f0:	f7ed ff30 	bl	8000554 <__aeabi_i2d>
 80126f4:	a364      	add	r3, pc, #400	; (adr r3, 8012888 <__ieee754_rem_pio2+0x2e0>)
 80126f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80126fe:	f7ed ff93 	bl	8000628 <__aeabi_dmul>
 8012702:	4602      	mov	r2, r0
 8012704:	460b      	mov	r3, r1
 8012706:	4630      	mov	r0, r6
 8012708:	4639      	mov	r1, r7
 801270a:	f7ed fdd5 	bl	80002b8 <__aeabi_dsub>
 801270e:	a360      	add	r3, pc, #384	; (adr r3, 8012890 <__ieee754_rem_pio2+0x2e8>)
 8012710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012714:	4682      	mov	sl, r0
 8012716:	468b      	mov	fp, r1
 8012718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801271c:	f7ed ff84 	bl	8000628 <__aeabi_dmul>
 8012720:	2d1f      	cmp	r5, #31
 8012722:	4606      	mov	r6, r0
 8012724:	460f      	mov	r7, r1
 8012726:	dc0c      	bgt.n	8012742 <__ieee754_rem_pio2+0x19a>
 8012728:	1e6a      	subs	r2, r5, #1
 801272a:	4b6a      	ldr	r3, [pc, #424]	; (80128d4 <__ieee754_rem_pio2+0x32c>)
 801272c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012730:	4543      	cmp	r3, r8
 8012732:	d006      	beq.n	8012742 <__ieee754_rem_pio2+0x19a>
 8012734:	4632      	mov	r2, r6
 8012736:	463b      	mov	r3, r7
 8012738:	4650      	mov	r0, sl
 801273a:	4659      	mov	r1, fp
 801273c:	f7ed fdbc 	bl	80002b8 <__aeabi_dsub>
 8012740:	e00e      	b.n	8012760 <__ieee754_rem_pio2+0x1b8>
 8012742:	4632      	mov	r2, r6
 8012744:	463b      	mov	r3, r7
 8012746:	4650      	mov	r0, sl
 8012748:	4659      	mov	r1, fp
 801274a:	f7ed fdb5 	bl	80002b8 <__aeabi_dsub>
 801274e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012752:	9305      	str	r3, [sp, #20]
 8012754:	9a05      	ldr	r2, [sp, #20]
 8012756:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801275a:	1ad3      	subs	r3, r2, r3
 801275c:	2b10      	cmp	r3, #16
 801275e:	dc02      	bgt.n	8012766 <__ieee754_rem_pio2+0x1be>
 8012760:	e9c4 0100 	strd	r0, r1, [r4]
 8012764:	e039      	b.n	80127da <__ieee754_rem_pio2+0x232>
 8012766:	a34c      	add	r3, pc, #304	; (adr r3, 8012898 <__ieee754_rem_pio2+0x2f0>)
 8012768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801276c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012770:	f7ed ff5a 	bl	8000628 <__aeabi_dmul>
 8012774:	4606      	mov	r6, r0
 8012776:	460f      	mov	r7, r1
 8012778:	4602      	mov	r2, r0
 801277a:	460b      	mov	r3, r1
 801277c:	4650      	mov	r0, sl
 801277e:	4659      	mov	r1, fp
 8012780:	f7ed fd9a 	bl	80002b8 <__aeabi_dsub>
 8012784:	4602      	mov	r2, r0
 8012786:	460b      	mov	r3, r1
 8012788:	4680      	mov	r8, r0
 801278a:	4689      	mov	r9, r1
 801278c:	4650      	mov	r0, sl
 801278e:	4659      	mov	r1, fp
 8012790:	f7ed fd92 	bl	80002b8 <__aeabi_dsub>
 8012794:	4632      	mov	r2, r6
 8012796:	463b      	mov	r3, r7
 8012798:	f7ed fd8e 	bl	80002b8 <__aeabi_dsub>
 801279c:	a340      	add	r3, pc, #256	; (adr r3, 80128a0 <__ieee754_rem_pio2+0x2f8>)
 801279e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127a2:	4606      	mov	r6, r0
 80127a4:	460f      	mov	r7, r1
 80127a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127aa:	f7ed ff3d 	bl	8000628 <__aeabi_dmul>
 80127ae:	4632      	mov	r2, r6
 80127b0:	463b      	mov	r3, r7
 80127b2:	f7ed fd81 	bl	80002b8 <__aeabi_dsub>
 80127b6:	4602      	mov	r2, r0
 80127b8:	460b      	mov	r3, r1
 80127ba:	4606      	mov	r6, r0
 80127bc:	460f      	mov	r7, r1
 80127be:	4640      	mov	r0, r8
 80127c0:	4649      	mov	r1, r9
 80127c2:	f7ed fd79 	bl	80002b8 <__aeabi_dsub>
 80127c6:	9a05      	ldr	r2, [sp, #20]
 80127c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80127cc:	1ad3      	subs	r3, r2, r3
 80127ce:	2b31      	cmp	r3, #49	; 0x31
 80127d0:	dc20      	bgt.n	8012814 <__ieee754_rem_pio2+0x26c>
 80127d2:	e9c4 0100 	strd	r0, r1, [r4]
 80127d6:	46c2      	mov	sl, r8
 80127d8:	46cb      	mov	fp, r9
 80127da:	e9d4 8900 	ldrd	r8, r9, [r4]
 80127de:	4650      	mov	r0, sl
 80127e0:	4642      	mov	r2, r8
 80127e2:	464b      	mov	r3, r9
 80127e4:	4659      	mov	r1, fp
 80127e6:	f7ed fd67 	bl	80002b8 <__aeabi_dsub>
 80127ea:	463b      	mov	r3, r7
 80127ec:	4632      	mov	r2, r6
 80127ee:	f7ed fd63 	bl	80002b8 <__aeabi_dsub>
 80127f2:	9b04      	ldr	r3, [sp, #16]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80127fa:	f6bf af11 	bge.w	8012620 <__ieee754_rem_pio2+0x78>
 80127fe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012802:	6063      	str	r3, [r4, #4]
 8012804:	f8c4 8000 	str.w	r8, [r4]
 8012808:	60a0      	str	r0, [r4, #8]
 801280a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801280e:	60e3      	str	r3, [r4, #12]
 8012810:	426d      	negs	r5, r5
 8012812:	e705      	b.n	8012620 <__ieee754_rem_pio2+0x78>
 8012814:	a326      	add	r3, pc, #152	; (adr r3, 80128b0 <__ieee754_rem_pio2+0x308>)
 8012816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801281a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801281e:	f7ed ff03 	bl	8000628 <__aeabi_dmul>
 8012822:	4606      	mov	r6, r0
 8012824:	460f      	mov	r7, r1
 8012826:	4602      	mov	r2, r0
 8012828:	460b      	mov	r3, r1
 801282a:	4640      	mov	r0, r8
 801282c:	4649      	mov	r1, r9
 801282e:	f7ed fd43 	bl	80002b8 <__aeabi_dsub>
 8012832:	4602      	mov	r2, r0
 8012834:	460b      	mov	r3, r1
 8012836:	4682      	mov	sl, r0
 8012838:	468b      	mov	fp, r1
 801283a:	4640      	mov	r0, r8
 801283c:	4649      	mov	r1, r9
 801283e:	f7ed fd3b 	bl	80002b8 <__aeabi_dsub>
 8012842:	4632      	mov	r2, r6
 8012844:	463b      	mov	r3, r7
 8012846:	f7ed fd37 	bl	80002b8 <__aeabi_dsub>
 801284a:	a31b      	add	r3, pc, #108	; (adr r3, 80128b8 <__ieee754_rem_pio2+0x310>)
 801284c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012850:	4606      	mov	r6, r0
 8012852:	460f      	mov	r7, r1
 8012854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012858:	f7ed fee6 	bl	8000628 <__aeabi_dmul>
 801285c:	4632      	mov	r2, r6
 801285e:	463b      	mov	r3, r7
 8012860:	f7ed fd2a 	bl	80002b8 <__aeabi_dsub>
 8012864:	4606      	mov	r6, r0
 8012866:	460f      	mov	r7, r1
 8012868:	e764      	b.n	8012734 <__ieee754_rem_pio2+0x18c>
 801286a:	4b1b      	ldr	r3, [pc, #108]	; (80128d8 <__ieee754_rem_pio2+0x330>)
 801286c:	4598      	cmp	r8, r3
 801286e:	dd35      	ble.n	80128dc <__ieee754_rem_pio2+0x334>
 8012870:	ee10 2a10 	vmov	r2, s0
 8012874:	463b      	mov	r3, r7
 8012876:	4630      	mov	r0, r6
 8012878:	4639      	mov	r1, r7
 801287a:	f7ed fd1d 	bl	80002b8 <__aeabi_dsub>
 801287e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012882:	e9c4 0100 	strd	r0, r1, [r4]
 8012886:	e6a1      	b.n	80125cc <__ieee754_rem_pio2+0x24>
 8012888:	54400000 	.word	0x54400000
 801288c:	3ff921fb 	.word	0x3ff921fb
 8012890:	1a626331 	.word	0x1a626331
 8012894:	3dd0b461 	.word	0x3dd0b461
 8012898:	1a600000 	.word	0x1a600000
 801289c:	3dd0b461 	.word	0x3dd0b461
 80128a0:	2e037073 	.word	0x2e037073
 80128a4:	3ba3198a 	.word	0x3ba3198a
 80128a8:	6dc9c883 	.word	0x6dc9c883
 80128ac:	3fe45f30 	.word	0x3fe45f30
 80128b0:	2e000000 	.word	0x2e000000
 80128b4:	3ba3198a 	.word	0x3ba3198a
 80128b8:	252049c1 	.word	0x252049c1
 80128bc:	397b839a 	.word	0x397b839a
 80128c0:	3fe921fb 	.word	0x3fe921fb
 80128c4:	4002d97b 	.word	0x4002d97b
 80128c8:	3ff921fb 	.word	0x3ff921fb
 80128cc:	413921fb 	.word	0x413921fb
 80128d0:	3fe00000 	.word	0x3fe00000
 80128d4:	08017f3c 	.word	0x08017f3c
 80128d8:	7fefffff 	.word	0x7fefffff
 80128dc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80128e0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80128e4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80128e8:	4630      	mov	r0, r6
 80128ea:	460f      	mov	r7, r1
 80128ec:	f7ee f94c 	bl	8000b88 <__aeabi_d2iz>
 80128f0:	f7ed fe30 	bl	8000554 <__aeabi_i2d>
 80128f4:	4602      	mov	r2, r0
 80128f6:	460b      	mov	r3, r1
 80128f8:	4630      	mov	r0, r6
 80128fa:	4639      	mov	r1, r7
 80128fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012900:	f7ed fcda 	bl	80002b8 <__aeabi_dsub>
 8012904:	2200      	movs	r2, #0
 8012906:	4b1f      	ldr	r3, [pc, #124]	; (8012984 <__ieee754_rem_pio2+0x3dc>)
 8012908:	f7ed fe8e 	bl	8000628 <__aeabi_dmul>
 801290c:	460f      	mov	r7, r1
 801290e:	4606      	mov	r6, r0
 8012910:	f7ee f93a 	bl	8000b88 <__aeabi_d2iz>
 8012914:	f7ed fe1e 	bl	8000554 <__aeabi_i2d>
 8012918:	4602      	mov	r2, r0
 801291a:	460b      	mov	r3, r1
 801291c:	4630      	mov	r0, r6
 801291e:	4639      	mov	r1, r7
 8012920:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012924:	f7ed fcc8 	bl	80002b8 <__aeabi_dsub>
 8012928:	2200      	movs	r2, #0
 801292a:	4b16      	ldr	r3, [pc, #88]	; (8012984 <__ieee754_rem_pio2+0x3dc>)
 801292c:	f7ed fe7c 	bl	8000628 <__aeabi_dmul>
 8012930:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012934:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8012938:	f04f 0803 	mov.w	r8, #3
 801293c:	2600      	movs	r6, #0
 801293e:	2700      	movs	r7, #0
 8012940:	4632      	mov	r2, r6
 8012942:	463b      	mov	r3, r7
 8012944:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8012948:	f108 3aff 	add.w	sl, r8, #4294967295
 801294c:	f7ee f8d4 	bl	8000af8 <__aeabi_dcmpeq>
 8012950:	b9b0      	cbnz	r0, 8012980 <__ieee754_rem_pio2+0x3d8>
 8012952:	4b0d      	ldr	r3, [pc, #52]	; (8012988 <__ieee754_rem_pio2+0x3e0>)
 8012954:	9301      	str	r3, [sp, #4]
 8012956:	2302      	movs	r3, #2
 8012958:	9300      	str	r3, [sp, #0]
 801295a:	462a      	mov	r2, r5
 801295c:	4643      	mov	r3, r8
 801295e:	4621      	mov	r1, r4
 8012960:	a806      	add	r0, sp, #24
 8012962:	f000 f8dd 	bl	8012b20 <__kernel_rem_pio2>
 8012966:	9b04      	ldr	r3, [sp, #16]
 8012968:	2b00      	cmp	r3, #0
 801296a:	4605      	mov	r5, r0
 801296c:	f6bf ae58 	bge.w	8012620 <__ieee754_rem_pio2+0x78>
 8012970:	6863      	ldr	r3, [r4, #4]
 8012972:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012976:	6063      	str	r3, [r4, #4]
 8012978:	68e3      	ldr	r3, [r4, #12]
 801297a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801297e:	e746      	b.n	801280e <__ieee754_rem_pio2+0x266>
 8012980:	46d0      	mov	r8, sl
 8012982:	e7dd      	b.n	8012940 <__ieee754_rem_pio2+0x398>
 8012984:	41700000 	.word	0x41700000
 8012988:	08017fbc 	.word	0x08017fbc
 801298c:	00000000 	.word	0x00000000

08012990 <__kernel_cos>:
 8012990:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012994:	ec59 8b10 	vmov	r8, r9, d0
 8012998:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801299c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80129a0:	ed2d 8b02 	vpush	{d8}
 80129a4:	eeb0 8a41 	vmov.f32	s16, s2
 80129a8:	eef0 8a61 	vmov.f32	s17, s3
 80129ac:	da07      	bge.n	80129be <__kernel_cos+0x2e>
 80129ae:	ee10 0a10 	vmov	r0, s0
 80129b2:	4649      	mov	r1, r9
 80129b4:	f7ee f8e8 	bl	8000b88 <__aeabi_d2iz>
 80129b8:	2800      	cmp	r0, #0
 80129ba:	f000 8089 	beq.w	8012ad0 <__kernel_cos+0x140>
 80129be:	4642      	mov	r2, r8
 80129c0:	464b      	mov	r3, r9
 80129c2:	4640      	mov	r0, r8
 80129c4:	4649      	mov	r1, r9
 80129c6:	f7ed fe2f 	bl	8000628 <__aeabi_dmul>
 80129ca:	2200      	movs	r2, #0
 80129cc:	4b4e      	ldr	r3, [pc, #312]	; (8012b08 <__kernel_cos+0x178>)
 80129ce:	4604      	mov	r4, r0
 80129d0:	460d      	mov	r5, r1
 80129d2:	f7ed fe29 	bl	8000628 <__aeabi_dmul>
 80129d6:	a340      	add	r3, pc, #256	; (adr r3, 8012ad8 <__kernel_cos+0x148>)
 80129d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129dc:	4682      	mov	sl, r0
 80129de:	468b      	mov	fp, r1
 80129e0:	4620      	mov	r0, r4
 80129e2:	4629      	mov	r1, r5
 80129e4:	f7ed fe20 	bl	8000628 <__aeabi_dmul>
 80129e8:	a33d      	add	r3, pc, #244	; (adr r3, 8012ae0 <__kernel_cos+0x150>)
 80129ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ee:	f7ed fc65 	bl	80002bc <__adddf3>
 80129f2:	4622      	mov	r2, r4
 80129f4:	462b      	mov	r3, r5
 80129f6:	f7ed fe17 	bl	8000628 <__aeabi_dmul>
 80129fa:	a33b      	add	r3, pc, #236	; (adr r3, 8012ae8 <__kernel_cos+0x158>)
 80129fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a00:	f7ed fc5a 	bl	80002b8 <__aeabi_dsub>
 8012a04:	4622      	mov	r2, r4
 8012a06:	462b      	mov	r3, r5
 8012a08:	f7ed fe0e 	bl	8000628 <__aeabi_dmul>
 8012a0c:	a338      	add	r3, pc, #224	; (adr r3, 8012af0 <__kernel_cos+0x160>)
 8012a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a12:	f7ed fc53 	bl	80002bc <__adddf3>
 8012a16:	4622      	mov	r2, r4
 8012a18:	462b      	mov	r3, r5
 8012a1a:	f7ed fe05 	bl	8000628 <__aeabi_dmul>
 8012a1e:	a336      	add	r3, pc, #216	; (adr r3, 8012af8 <__kernel_cos+0x168>)
 8012a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a24:	f7ed fc48 	bl	80002b8 <__aeabi_dsub>
 8012a28:	4622      	mov	r2, r4
 8012a2a:	462b      	mov	r3, r5
 8012a2c:	f7ed fdfc 	bl	8000628 <__aeabi_dmul>
 8012a30:	a333      	add	r3, pc, #204	; (adr r3, 8012b00 <__kernel_cos+0x170>)
 8012a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a36:	f7ed fc41 	bl	80002bc <__adddf3>
 8012a3a:	4622      	mov	r2, r4
 8012a3c:	462b      	mov	r3, r5
 8012a3e:	f7ed fdf3 	bl	8000628 <__aeabi_dmul>
 8012a42:	4622      	mov	r2, r4
 8012a44:	462b      	mov	r3, r5
 8012a46:	f7ed fdef 	bl	8000628 <__aeabi_dmul>
 8012a4a:	ec53 2b18 	vmov	r2, r3, d8
 8012a4e:	4604      	mov	r4, r0
 8012a50:	460d      	mov	r5, r1
 8012a52:	4640      	mov	r0, r8
 8012a54:	4649      	mov	r1, r9
 8012a56:	f7ed fde7 	bl	8000628 <__aeabi_dmul>
 8012a5a:	460b      	mov	r3, r1
 8012a5c:	4602      	mov	r2, r0
 8012a5e:	4629      	mov	r1, r5
 8012a60:	4620      	mov	r0, r4
 8012a62:	f7ed fc29 	bl	80002b8 <__aeabi_dsub>
 8012a66:	4b29      	ldr	r3, [pc, #164]	; (8012b0c <__kernel_cos+0x17c>)
 8012a68:	429e      	cmp	r6, r3
 8012a6a:	4680      	mov	r8, r0
 8012a6c:	4689      	mov	r9, r1
 8012a6e:	dc11      	bgt.n	8012a94 <__kernel_cos+0x104>
 8012a70:	4602      	mov	r2, r0
 8012a72:	460b      	mov	r3, r1
 8012a74:	4650      	mov	r0, sl
 8012a76:	4659      	mov	r1, fp
 8012a78:	f7ed fc1e 	bl	80002b8 <__aeabi_dsub>
 8012a7c:	460b      	mov	r3, r1
 8012a7e:	4924      	ldr	r1, [pc, #144]	; (8012b10 <__kernel_cos+0x180>)
 8012a80:	4602      	mov	r2, r0
 8012a82:	2000      	movs	r0, #0
 8012a84:	f7ed fc18 	bl	80002b8 <__aeabi_dsub>
 8012a88:	ecbd 8b02 	vpop	{d8}
 8012a8c:	ec41 0b10 	vmov	d0, r0, r1
 8012a90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a94:	4b1f      	ldr	r3, [pc, #124]	; (8012b14 <__kernel_cos+0x184>)
 8012a96:	491e      	ldr	r1, [pc, #120]	; (8012b10 <__kernel_cos+0x180>)
 8012a98:	429e      	cmp	r6, r3
 8012a9a:	bfcc      	ite	gt
 8012a9c:	4d1e      	ldrgt	r5, [pc, #120]	; (8012b18 <__kernel_cos+0x188>)
 8012a9e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8012aa2:	2400      	movs	r4, #0
 8012aa4:	4622      	mov	r2, r4
 8012aa6:	462b      	mov	r3, r5
 8012aa8:	2000      	movs	r0, #0
 8012aaa:	f7ed fc05 	bl	80002b8 <__aeabi_dsub>
 8012aae:	4622      	mov	r2, r4
 8012ab0:	4606      	mov	r6, r0
 8012ab2:	460f      	mov	r7, r1
 8012ab4:	462b      	mov	r3, r5
 8012ab6:	4650      	mov	r0, sl
 8012ab8:	4659      	mov	r1, fp
 8012aba:	f7ed fbfd 	bl	80002b8 <__aeabi_dsub>
 8012abe:	4642      	mov	r2, r8
 8012ac0:	464b      	mov	r3, r9
 8012ac2:	f7ed fbf9 	bl	80002b8 <__aeabi_dsub>
 8012ac6:	4602      	mov	r2, r0
 8012ac8:	460b      	mov	r3, r1
 8012aca:	4630      	mov	r0, r6
 8012acc:	4639      	mov	r1, r7
 8012ace:	e7d9      	b.n	8012a84 <__kernel_cos+0xf4>
 8012ad0:	2000      	movs	r0, #0
 8012ad2:	490f      	ldr	r1, [pc, #60]	; (8012b10 <__kernel_cos+0x180>)
 8012ad4:	e7d8      	b.n	8012a88 <__kernel_cos+0xf8>
 8012ad6:	bf00      	nop
 8012ad8:	be8838d4 	.word	0xbe8838d4
 8012adc:	bda8fae9 	.word	0xbda8fae9
 8012ae0:	bdb4b1c4 	.word	0xbdb4b1c4
 8012ae4:	3e21ee9e 	.word	0x3e21ee9e
 8012ae8:	809c52ad 	.word	0x809c52ad
 8012aec:	3e927e4f 	.word	0x3e927e4f
 8012af0:	19cb1590 	.word	0x19cb1590
 8012af4:	3efa01a0 	.word	0x3efa01a0
 8012af8:	16c15177 	.word	0x16c15177
 8012afc:	3f56c16c 	.word	0x3f56c16c
 8012b00:	5555554c 	.word	0x5555554c
 8012b04:	3fa55555 	.word	0x3fa55555
 8012b08:	3fe00000 	.word	0x3fe00000
 8012b0c:	3fd33332 	.word	0x3fd33332
 8012b10:	3ff00000 	.word	0x3ff00000
 8012b14:	3fe90000 	.word	0x3fe90000
 8012b18:	3fd20000 	.word	0x3fd20000
 8012b1c:	00000000 	.word	0x00000000

08012b20 <__kernel_rem_pio2>:
 8012b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b24:	ed2d 8b02 	vpush	{d8}
 8012b28:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8012b2c:	1ed4      	subs	r4, r2, #3
 8012b2e:	9308      	str	r3, [sp, #32]
 8012b30:	9101      	str	r1, [sp, #4]
 8012b32:	4bc5      	ldr	r3, [pc, #788]	; (8012e48 <__kernel_rem_pio2+0x328>)
 8012b34:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012b36:	9009      	str	r0, [sp, #36]	; 0x24
 8012b38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012b3c:	9304      	str	r3, [sp, #16]
 8012b3e:	9b08      	ldr	r3, [sp, #32]
 8012b40:	3b01      	subs	r3, #1
 8012b42:	9307      	str	r3, [sp, #28]
 8012b44:	2318      	movs	r3, #24
 8012b46:	fb94 f4f3 	sdiv	r4, r4, r3
 8012b4a:	f06f 0317 	mvn.w	r3, #23
 8012b4e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8012b52:	fb04 3303 	mla	r3, r4, r3, r3
 8012b56:	eb03 0a02 	add.w	sl, r3, r2
 8012b5a:	9b04      	ldr	r3, [sp, #16]
 8012b5c:	9a07      	ldr	r2, [sp, #28]
 8012b5e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012e38 <__kernel_rem_pio2+0x318>
 8012b62:	eb03 0802 	add.w	r8, r3, r2
 8012b66:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012b68:	1aa7      	subs	r7, r4, r2
 8012b6a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012b6e:	ae22      	add	r6, sp, #136	; 0x88
 8012b70:	2500      	movs	r5, #0
 8012b72:	4545      	cmp	r5, r8
 8012b74:	dd13      	ble.n	8012b9e <__kernel_rem_pio2+0x7e>
 8012b76:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012e38 <__kernel_rem_pio2+0x318>
 8012b7a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8012b7e:	2600      	movs	r6, #0
 8012b80:	9b04      	ldr	r3, [sp, #16]
 8012b82:	429e      	cmp	r6, r3
 8012b84:	dc32      	bgt.n	8012bec <__kernel_rem_pio2+0xcc>
 8012b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b88:	9302      	str	r3, [sp, #8]
 8012b8a:	9b08      	ldr	r3, [sp, #32]
 8012b8c:	199d      	adds	r5, r3, r6
 8012b8e:	ab22      	add	r3, sp, #136	; 0x88
 8012b90:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012b94:	9306      	str	r3, [sp, #24]
 8012b96:	ec59 8b18 	vmov	r8, r9, d8
 8012b9a:	2700      	movs	r7, #0
 8012b9c:	e01f      	b.n	8012bde <__kernel_rem_pio2+0xbe>
 8012b9e:	42ef      	cmn	r7, r5
 8012ba0:	d407      	bmi.n	8012bb2 <__kernel_rem_pio2+0x92>
 8012ba2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012ba6:	f7ed fcd5 	bl	8000554 <__aeabi_i2d>
 8012baa:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012bae:	3501      	adds	r5, #1
 8012bb0:	e7df      	b.n	8012b72 <__kernel_rem_pio2+0x52>
 8012bb2:	ec51 0b18 	vmov	r0, r1, d8
 8012bb6:	e7f8      	b.n	8012baa <__kernel_rem_pio2+0x8a>
 8012bb8:	9906      	ldr	r1, [sp, #24]
 8012bba:	9d02      	ldr	r5, [sp, #8]
 8012bbc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8012bc0:	9106      	str	r1, [sp, #24]
 8012bc2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8012bc6:	9502      	str	r5, [sp, #8]
 8012bc8:	f7ed fd2e 	bl	8000628 <__aeabi_dmul>
 8012bcc:	4602      	mov	r2, r0
 8012bce:	460b      	mov	r3, r1
 8012bd0:	4640      	mov	r0, r8
 8012bd2:	4649      	mov	r1, r9
 8012bd4:	f7ed fb72 	bl	80002bc <__adddf3>
 8012bd8:	3701      	adds	r7, #1
 8012bda:	4680      	mov	r8, r0
 8012bdc:	4689      	mov	r9, r1
 8012bde:	9b07      	ldr	r3, [sp, #28]
 8012be0:	429f      	cmp	r7, r3
 8012be2:	dde9      	ble.n	8012bb8 <__kernel_rem_pio2+0x98>
 8012be4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8012be8:	3601      	adds	r6, #1
 8012bea:	e7c9      	b.n	8012b80 <__kernel_rem_pio2+0x60>
 8012bec:	9b04      	ldr	r3, [sp, #16]
 8012bee:	aa0e      	add	r2, sp, #56	; 0x38
 8012bf0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012bf4:	930c      	str	r3, [sp, #48]	; 0x30
 8012bf6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012bf8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012bfc:	9c04      	ldr	r4, [sp, #16]
 8012bfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8012c00:	ab9a      	add	r3, sp, #616	; 0x268
 8012c02:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8012c06:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012c0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012c0e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8012c12:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8012c16:	ab9a      	add	r3, sp, #616	; 0x268
 8012c18:	445b      	add	r3, fp
 8012c1a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8012c1e:	2500      	movs	r5, #0
 8012c20:	1b63      	subs	r3, r4, r5
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	dc78      	bgt.n	8012d18 <__kernel_rem_pio2+0x1f8>
 8012c26:	4650      	mov	r0, sl
 8012c28:	ec49 8b10 	vmov	d0, r8, r9
 8012c2c:	f000 fc00 	bl	8013430 <scalbn>
 8012c30:	ec57 6b10 	vmov	r6, r7, d0
 8012c34:	2200      	movs	r2, #0
 8012c36:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012c3a:	ee10 0a10 	vmov	r0, s0
 8012c3e:	4639      	mov	r1, r7
 8012c40:	f7ed fcf2 	bl	8000628 <__aeabi_dmul>
 8012c44:	ec41 0b10 	vmov	d0, r0, r1
 8012c48:	f000 fb6e 	bl	8013328 <floor>
 8012c4c:	2200      	movs	r2, #0
 8012c4e:	ec51 0b10 	vmov	r0, r1, d0
 8012c52:	4b7e      	ldr	r3, [pc, #504]	; (8012e4c <__kernel_rem_pio2+0x32c>)
 8012c54:	f7ed fce8 	bl	8000628 <__aeabi_dmul>
 8012c58:	4602      	mov	r2, r0
 8012c5a:	460b      	mov	r3, r1
 8012c5c:	4630      	mov	r0, r6
 8012c5e:	4639      	mov	r1, r7
 8012c60:	f7ed fb2a 	bl	80002b8 <__aeabi_dsub>
 8012c64:	460f      	mov	r7, r1
 8012c66:	4606      	mov	r6, r0
 8012c68:	f7ed ff8e 	bl	8000b88 <__aeabi_d2iz>
 8012c6c:	9006      	str	r0, [sp, #24]
 8012c6e:	f7ed fc71 	bl	8000554 <__aeabi_i2d>
 8012c72:	4602      	mov	r2, r0
 8012c74:	460b      	mov	r3, r1
 8012c76:	4630      	mov	r0, r6
 8012c78:	4639      	mov	r1, r7
 8012c7a:	f7ed fb1d 	bl	80002b8 <__aeabi_dsub>
 8012c7e:	f1ba 0f00 	cmp.w	sl, #0
 8012c82:	4606      	mov	r6, r0
 8012c84:	460f      	mov	r7, r1
 8012c86:	dd6c      	ble.n	8012d62 <__kernel_rem_pio2+0x242>
 8012c88:	1e62      	subs	r2, r4, #1
 8012c8a:	ab0e      	add	r3, sp, #56	; 0x38
 8012c8c:	f1ca 0118 	rsb	r1, sl, #24
 8012c90:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012c94:	9d06      	ldr	r5, [sp, #24]
 8012c96:	fa40 f301 	asr.w	r3, r0, r1
 8012c9a:	441d      	add	r5, r3
 8012c9c:	408b      	lsls	r3, r1
 8012c9e:	1ac0      	subs	r0, r0, r3
 8012ca0:	ab0e      	add	r3, sp, #56	; 0x38
 8012ca2:	9506      	str	r5, [sp, #24]
 8012ca4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012ca8:	f1ca 0317 	rsb	r3, sl, #23
 8012cac:	fa40 f303 	asr.w	r3, r0, r3
 8012cb0:	9302      	str	r3, [sp, #8]
 8012cb2:	9b02      	ldr	r3, [sp, #8]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	dd62      	ble.n	8012d7e <__kernel_rem_pio2+0x25e>
 8012cb8:	9b06      	ldr	r3, [sp, #24]
 8012cba:	2200      	movs	r2, #0
 8012cbc:	3301      	adds	r3, #1
 8012cbe:	9306      	str	r3, [sp, #24]
 8012cc0:	4615      	mov	r5, r2
 8012cc2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012cc6:	4294      	cmp	r4, r2
 8012cc8:	f300 8095 	bgt.w	8012df6 <__kernel_rem_pio2+0x2d6>
 8012ccc:	f1ba 0f00 	cmp.w	sl, #0
 8012cd0:	dd07      	ble.n	8012ce2 <__kernel_rem_pio2+0x1c2>
 8012cd2:	f1ba 0f01 	cmp.w	sl, #1
 8012cd6:	f000 80a2 	beq.w	8012e1e <__kernel_rem_pio2+0x2fe>
 8012cda:	f1ba 0f02 	cmp.w	sl, #2
 8012cde:	f000 80c1 	beq.w	8012e64 <__kernel_rem_pio2+0x344>
 8012ce2:	9b02      	ldr	r3, [sp, #8]
 8012ce4:	2b02      	cmp	r3, #2
 8012ce6:	d14a      	bne.n	8012d7e <__kernel_rem_pio2+0x25e>
 8012ce8:	4632      	mov	r2, r6
 8012cea:	463b      	mov	r3, r7
 8012cec:	2000      	movs	r0, #0
 8012cee:	4958      	ldr	r1, [pc, #352]	; (8012e50 <__kernel_rem_pio2+0x330>)
 8012cf0:	f7ed fae2 	bl	80002b8 <__aeabi_dsub>
 8012cf4:	4606      	mov	r6, r0
 8012cf6:	460f      	mov	r7, r1
 8012cf8:	2d00      	cmp	r5, #0
 8012cfa:	d040      	beq.n	8012d7e <__kernel_rem_pio2+0x25e>
 8012cfc:	4650      	mov	r0, sl
 8012cfe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012e40 <__kernel_rem_pio2+0x320>
 8012d02:	f000 fb95 	bl	8013430 <scalbn>
 8012d06:	4630      	mov	r0, r6
 8012d08:	4639      	mov	r1, r7
 8012d0a:	ec53 2b10 	vmov	r2, r3, d0
 8012d0e:	f7ed fad3 	bl	80002b8 <__aeabi_dsub>
 8012d12:	4606      	mov	r6, r0
 8012d14:	460f      	mov	r7, r1
 8012d16:	e032      	b.n	8012d7e <__kernel_rem_pio2+0x25e>
 8012d18:	2200      	movs	r2, #0
 8012d1a:	4b4e      	ldr	r3, [pc, #312]	; (8012e54 <__kernel_rem_pio2+0x334>)
 8012d1c:	4640      	mov	r0, r8
 8012d1e:	4649      	mov	r1, r9
 8012d20:	f7ed fc82 	bl	8000628 <__aeabi_dmul>
 8012d24:	f7ed ff30 	bl	8000b88 <__aeabi_d2iz>
 8012d28:	f7ed fc14 	bl	8000554 <__aeabi_i2d>
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	4b4a      	ldr	r3, [pc, #296]	; (8012e58 <__kernel_rem_pio2+0x338>)
 8012d30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d34:	f7ed fc78 	bl	8000628 <__aeabi_dmul>
 8012d38:	4602      	mov	r2, r0
 8012d3a:	460b      	mov	r3, r1
 8012d3c:	4640      	mov	r0, r8
 8012d3e:	4649      	mov	r1, r9
 8012d40:	f7ed faba 	bl	80002b8 <__aeabi_dsub>
 8012d44:	f7ed ff20 	bl	8000b88 <__aeabi_d2iz>
 8012d48:	ab0e      	add	r3, sp, #56	; 0x38
 8012d4a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8012d4e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8012d52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d56:	f7ed fab1 	bl	80002bc <__adddf3>
 8012d5a:	3501      	adds	r5, #1
 8012d5c:	4680      	mov	r8, r0
 8012d5e:	4689      	mov	r9, r1
 8012d60:	e75e      	b.n	8012c20 <__kernel_rem_pio2+0x100>
 8012d62:	d105      	bne.n	8012d70 <__kernel_rem_pio2+0x250>
 8012d64:	1e63      	subs	r3, r4, #1
 8012d66:	aa0e      	add	r2, sp, #56	; 0x38
 8012d68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012d6c:	15c3      	asrs	r3, r0, #23
 8012d6e:	e79f      	b.n	8012cb0 <__kernel_rem_pio2+0x190>
 8012d70:	2200      	movs	r2, #0
 8012d72:	4b3a      	ldr	r3, [pc, #232]	; (8012e5c <__kernel_rem_pio2+0x33c>)
 8012d74:	f7ed fede 	bl	8000b34 <__aeabi_dcmpge>
 8012d78:	2800      	cmp	r0, #0
 8012d7a:	d139      	bne.n	8012df0 <__kernel_rem_pio2+0x2d0>
 8012d7c:	9002      	str	r0, [sp, #8]
 8012d7e:	2200      	movs	r2, #0
 8012d80:	2300      	movs	r3, #0
 8012d82:	4630      	mov	r0, r6
 8012d84:	4639      	mov	r1, r7
 8012d86:	f7ed feb7 	bl	8000af8 <__aeabi_dcmpeq>
 8012d8a:	2800      	cmp	r0, #0
 8012d8c:	f000 80c7 	beq.w	8012f1e <__kernel_rem_pio2+0x3fe>
 8012d90:	1e65      	subs	r5, r4, #1
 8012d92:	462b      	mov	r3, r5
 8012d94:	2200      	movs	r2, #0
 8012d96:	9904      	ldr	r1, [sp, #16]
 8012d98:	428b      	cmp	r3, r1
 8012d9a:	da6a      	bge.n	8012e72 <__kernel_rem_pio2+0x352>
 8012d9c:	2a00      	cmp	r2, #0
 8012d9e:	f000 8088 	beq.w	8012eb2 <__kernel_rem_pio2+0x392>
 8012da2:	ab0e      	add	r3, sp, #56	; 0x38
 8012da4:	f1aa 0a18 	sub.w	sl, sl, #24
 8012da8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	f000 80b4 	beq.w	8012f1a <__kernel_rem_pio2+0x3fa>
 8012db2:	4650      	mov	r0, sl
 8012db4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012e40 <__kernel_rem_pio2+0x320>
 8012db8:	f000 fb3a 	bl	8013430 <scalbn>
 8012dbc:	00ec      	lsls	r4, r5, #3
 8012dbe:	ab72      	add	r3, sp, #456	; 0x1c8
 8012dc0:	191e      	adds	r6, r3, r4
 8012dc2:	ec59 8b10 	vmov	r8, r9, d0
 8012dc6:	f106 0a08 	add.w	sl, r6, #8
 8012dca:	462f      	mov	r7, r5
 8012dcc:	2f00      	cmp	r7, #0
 8012dce:	f280 80df 	bge.w	8012f90 <__kernel_rem_pio2+0x470>
 8012dd2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012e38 <__kernel_rem_pio2+0x318>
 8012dd6:	f04f 0a00 	mov.w	sl, #0
 8012dda:	eba5 030a 	sub.w	r3, r5, sl
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	f2c0 810a 	blt.w	8012ff8 <__kernel_rem_pio2+0x4d8>
 8012de4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012e60 <__kernel_rem_pio2+0x340>
 8012de8:	ec59 8b18 	vmov	r8, r9, d8
 8012dec:	2700      	movs	r7, #0
 8012dee:	e0f5      	b.n	8012fdc <__kernel_rem_pio2+0x4bc>
 8012df0:	2302      	movs	r3, #2
 8012df2:	9302      	str	r3, [sp, #8]
 8012df4:	e760      	b.n	8012cb8 <__kernel_rem_pio2+0x198>
 8012df6:	ab0e      	add	r3, sp, #56	; 0x38
 8012df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012dfc:	b94d      	cbnz	r5, 8012e12 <__kernel_rem_pio2+0x2f2>
 8012dfe:	b12b      	cbz	r3, 8012e0c <__kernel_rem_pio2+0x2ec>
 8012e00:	a80e      	add	r0, sp, #56	; 0x38
 8012e02:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012e06:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012e0a:	2301      	movs	r3, #1
 8012e0c:	3201      	adds	r2, #1
 8012e0e:	461d      	mov	r5, r3
 8012e10:	e759      	b.n	8012cc6 <__kernel_rem_pio2+0x1a6>
 8012e12:	a80e      	add	r0, sp, #56	; 0x38
 8012e14:	1acb      	subs	r3, r1, r3
 8012e16:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012e1a:	462b      	mov	r3, r5
 8012e1c:	e7f6      	b.n	8012e0c <__kernel_rem_pio2+0x2ec>
 8012e1e:	1e62      	subs	r2, r4, #1
 8012e20:	ab0e      	add	r3, sp, #56	; 0x38
 8012e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e26:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012e2a:	a90e      	add	r1, sp, #56	; 0x38
 8012e2c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012e30:	e757      	b.n	8012ce2 <__kernel_rem_pio2+0x1c2>
 8012e32:	bf00      	nop
 8012e34:	f3af 8000 	nop.w
	...
 8012e44:	3ff00000 	.word	0x3ff00000
 8012e48:	08018108 	.word	0x08018108
 8012e4c:	40200000 	.word	0x40200000
 8012e50:	3ff00000 	.word	0x3ff00000
 8012e54:	3e700000 	.word	0x3e700000
 8012e58:	41700000 	.word	0x41700000
 8012e5c:	3fe00000 	.word	0x3fe00000
 8012e60:	080180c8 	.word	0x080180c8
 8012e64:	1e62      	subs	r2, r4, #1
 8012e66:	ab0e      	add	r3, sp, #56	; 0x38
 8012e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e6c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012e70:	e7db      	b.n	8012e2a <__kernel_rem_pio2+0x30a>
 8012e72:	a90e      	add	r1, sp, #56	; 0x38
 8012e74:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012e78:	3b01      	subs	r3, #1
 8012e7a:	430a      	orrs	r2, r1
 8012e7c:	e78b      	b.n	8012d96 <__kernel_rem_pio2+0x276>
 8012e7e:	3301      	adds	r3, #1
 8012e80:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012e84:	2900      	cmp	r1, #0
 8012e86:	d0fa      	beq.n	8012e7e <__kernel_rem_pio2+0x35e>
 8012e88:	9a08      	ldr	r2, [sp, #32]
 8012e8a:	4422      	add	r2, r4
 8012e8c:	00d2      	lsls	r2, r2, #3
 8012e8e:	a922      	add	r1, sp, #136	; 0x88
 8012e90:	18e3      	adds	r3, r4, r3
 8012e92:	9206      	str	r2, [sp, #24]
 8012e94:	440a      	add	r2, r1
 8012e96:	9302      	str	r3, [sp, #8]
 8012e98:	f10b 0108 	add.w	r1, fp, #8
 8012e9c:	f102 0308 	add.w	r3, r2, #8
 8012ea0:	1c66      	adds	r6, r4, #1
 8012ea2:	910a      	str	r1, [sp, #40]	; 0x28
 8012ea4:	2500      	movs	r5, #0
 8012ea6:	930d      	str	r3, [sp, #52]	; 0x34
 8012ea8:	9b02      	ldr	r3, [sp, #8]
 8012eaa:	42b3      	cmp	r3, r6
 8012eac:	da04      	bge.n	8012eb8 <__kernel_rem_pio2+0x398>
 8012eae:	461c      	mov	r4, r3
 8012eb0:	e6a6      	b.n	8012c00 <__kernel_rem_pio2+0xe0>
 8012eb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012eb4:	2301      	movs	r3, #1
 8012eb6:	e7e3      	b.n	8012e80 <__kernel_rem_pio2+0x360>
 8012eb8:	9b06      	ldr	r3, [sp, #24]
 8012eba:	18ef      	adds	r7, r5, r3
 8012ebc:	ab22      	add	r3, sp, #136	; 0x88
 8012ebe:	441f      	add	r7, r3
 8012ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ec2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012ec6:	f7ed fb45 	bl	8000554 <__aeabi_i2d>
 8012eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ecc:	461c      	mov	r4, r3
 8012ece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ed0:	e9c7 0100 	strd	r0, r1, [r7]
 8012ed4:	eb03 0b05 	add.w	fp, r3, r5
 8012ed8:	2700      	movs	r7, #0
 8012eda:	f04f 0800 	mov.w	r8, #0
 8012ede:	f04f 0900 	mov.w	r9, #0
 8012ee2:	9b07      	ldr	r3, [sp, #28]
 8012ee4:	429f      	cmp	r7, r3
 8012ee6:	dd08      	ble.n	8012efa <__kernel_rem_pio2+0x3da>
 8012ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012eea:	aa72      	add	r2, sp, #456	; 0x1c8
 8012eec:	18eb      	adds	r3, r5, r3
 8012eee:	4413      	add	r3, r2
 8012ef0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8012ef4:	3601      	adds	r6, #1
 8012ef6:	3508      	adds	r5, #8
 8012ef8:	e7d6      	b.n	8012ea8 <__kernel_rem_pio2+0x388>
 8012efa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012efe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012f02:	f7ed fb91 	bl	8000628 <__aeabi_dmul>
 8012f06:	4602      	mov	r2, r0
 8012f08:	460b      	mov	r3, r1
 8012f0a:	4640      	mov	r0, r8
 8012f0c:	4649      	mov	r1, r9
 8012f0e:	f7ed f9d5 	bl	80002bc <__adddf3>
 8012f12:	3701      	adds	r7, #1
 8012f14:	4680      	mov	r8, r0
 8012f16:	4689      	mov	r9, r1
 8012f18:	e7e3      	b.n	8012ee2 <__kernel_rem_pio2+0x3c2>
 8012f1a:	3d01      	subs	r5, #1
 8012f1c:	e741      	b.n	8012da2 <__kernel_rem_pio2+0x282>
 8012f1e:	f1ca 0000 	rsb	r0, sl, #0
 8012f22:	ec47 6b10 	vmov	d0, r6, r7
 8012f26:	f000 fa83 	bl	8013430 <scalbn>
 8012f2a:	ec57 6b10 	vmov	r6, r7, d0
 8012f2e:	2200      	movs	r2, #0
 8012f30:	4b99      	ldr	r3, [pc, #612]	; (8013198 <__kernel_rem_pio2+0x678>)
 8012f32:	ee10 0a10 	vmov	r0, s0
 8012f36:	4639      	mov	r1, r7
 8012f38:	f7ed fdfc 	bl	8000b34 <__aeabi_dcmpge>
 8012f3c:	b1f8      	cbz	r0, 8012f7e <__kernel_rem_pio2+0x45e>
 8012f3e:	2200      	movs	r2, #0
 8012f40:	4b96      	ldr	r3, [pc, #600]	; (801319c <__kernel_rem_pio2+0x67c>)
 8012f42:	4630      	mov	r0, r6
 8012f44:	4639      	mov	r1, r7
 8012f46:	f7ed fb6f 	bl	8000628 <__aeabi_dmul>
 8012f4a:	f7ed fe1d 	bl	8000b88 <__aeabi_d2iz>
 8012f4e:	4680      	mov	r8, r0
 8012f50:	f7ed fb00 	bl	8000554 <__aeabi_i2d>
 8012f54:	2200      	movs	r2, #0
 8012f56:	4b90      	ldr	r3, [pc, #576]	; (8013198 <__kernel_rem_pio2+0x678>)
 8012f58:	f7ed fb66 	bl	8000628 <__aeabi_dmul>
 8012f5c:	460b      	mov	r3, r1
 8012f5e:	4602      	mov	r2, r0
 8012f60:	4639      	mov	r1, r7
 8012f62:	4630      	mov	r0, r6
 8012f64:	f7ed f9a8 	bl	80002b8 <__aeabi_dsub>
 8012f68:	f7ed fe0e 	bl	8000b88 <__aeabi_d2iz>
 8012f6c:	1c65      	adds	r5, r4, #1
 8012f6e:	ab0e      	add	r3, sp, #56	; 0x38
 8012f70:	f10a 0a18 	add.w	sl, sl, #24
 8012f74:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012f78:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012f7c:	e719      	b.n	8012db2 <__kernel_rem_pio2+0x292>
 8012f7e:	4630      	mov	r0, r6
 8012f80:	4639      	mov	r1, r7
 8012f82:	f7ed fe01 	bl	8000b88 <__aeabi_d2iz>
 8012f86:	ab0e      	add	r3, sp, #56	; 0x38
 8012f88:	4625      	mov	r5, r4
 8012f8a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012f8e:	e710      	b.n	8012db2 <__kernel_rem_pio2+0x292>
 8012f90:	ab0e      	add	r3, sp, #56	; 0x38
 8012f92:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012f96:	f7ed fadd 	bl	8000554 <__aeabi_i2d>
 8012f9a:	4642      	mov	r2, r8
 8012f9c:	464b      	mov	r3, r9
 8012f9e:	f7ed fb43 	bl	8000628 <__aeabi_dmul>
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012fa8:	4b7c      	ldr	r3, [pc, #496]	; (801319c <__kernel_rem_pio2+0x67c>)
 8012faa:	4640      	mov	r0, r8
 8012fac:	4649      	mov	r1, r9
 8012fae:	f7ed fb3b 	bl	8000628 <__aeabi_dmul>
 8012fb2:	3f01      	subs	r7, #1
 8012fb4:	4680      	mov	r8, r0
 8012fb6:	4689      	mov	r9, r1
 8012fb8:	e708      	b.n	8012dcc <__kernel_rem_pio2+0x2ac>
 8012fba:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8012fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8012fc6:	f7ed fb2f 	bl	8000628 <__aeabi_dmul>
 8012fca:	4602      	mov	r2, r0
 8012fcc:	460b      	mov	r3, r1
 8012fce:	4640      	mov	r0, r8
 8012fd0:	4649      	mov	r1, r9
 8012fd2:	f7ed f973 	bl	80002bc <__adddf3>
 8012fd6:	3701      	adds	r7, #1
 8012fd8:	4680      	mov	r8, r0
 8012fda:	4689      	mov	r9, r1
 8012fdc:	9b04      	ldr	r3, [sp, #16]
 8012fde:	429f      	cmp	r7, r3
 8012fe0:	dc01      	bgt.n	8012fe6 <__kernel_rem_pio2+0x4c6>
 8012fe2:	45ba      	cmp	sl, r7
 8012fe4:	dae9      	bge.n	8012fba <__kernel_rem_pio2+0x49a>
 8012fe6:	ab4a      	add	r3, sp, #296	; 0x128
 8012fe8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012fec:	e9c3 8900 	strd	r8, r9, [r3]
 8012ff0:	f10a 0a01 	add.w	sl, sl, #1
 8012ff4:	3e08      	subs	r6, #8
 8012ff6:	e6f0      	b.n	8012dda <__kernel_rem_pio2+0x2ba>
 8012ff8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012ffa:	2b03      	cmp	r3, #3
 8012ffc:	d85b      	bhi.n	80130b6 <__kernel_rem_pio2+0x596>
 8012ffe:	e8df f003 	tbb	[pc, r3]
 8013002:	264a      	.short	0x264a
 8013004:	0226      	.short	0x0226
 8013006:	ab9a      	add	r3, sp, #616	; 0x268
 8013008:	441c      	add	r4, r3
 801300a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801300e:	46a2      	mov	sl, r4
 8013010:	46ab      	mov	fp, r5
 8013012:	f1bb 0f00 	cmp.w	fp, #0
 8013016:	dc6c      	bgt.n	80130f2 <__kernel_rem_pio2+0x5d2>
 8013018:	46a2      	mov	sl, r4
 801301a:	46ab      	mov	fp, r5
 801301c:	f1bb 0f01 	cmp.w	fp, #1
 8013020:	f300 8086 	bgt.w	8013130 <__kernel_rem_pio2+0x610>
 8013024:	2000      	movs	r0, #0
 8013026:	2100      	movs	r1, #0
 8013028:	2d01      	cmp	r5, #1
 801302a:	f300 80a0 	bgt.w	801316e <__kernel_rem_pio2+0x64e>
 801302e:	9b02      	ldr	r3, [sp, #8]
 8013030:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8013034:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8013038:	2b00      	cmp	r3, #0
 801303a:	f040 809e 	bne.w	801317a <__kernel_rem_pio2+0x65a>
 801303e:	9b01      	ldr	r3, [sp, #4]
 8013040:	e9c3 7800 	strd	r7, r8, [r3]
 8013044:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8013048:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801304c:	e033      	b.n	80130b6 <__kernel_rem_pio2+0x596>
 801304e:	3408      	adds	r4, #8
 8013050:	ab4a      	add	r3, sp, #296	; 0x128
 8013052:	441c      	add	r4, r3
 8013054:	462e      	mov	r6, r5
 8013056:	2000      	movs	r0, #0
 8013058:	2100      	movs	r1, #0
 801305a:	2e00      	cmp	r6, #0
 801305c:	da3a      	bge.n	80130d4 <__kernel_rem_pio2+0x5b4>
 801305e:	9b02      	ldr	r3, [sp, #8]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d03d      	beq.n	80130e0 <__kernel_rem_pio2+0x5c0>
 8013064:	4602      	mov	r2, r0
 8013066:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801306a:	9c01      	ldr	r4, [sp, #4]
 801306c:	e9c4 2300 	strd	r2, r3, [r4]
 8013070:	4602      	mov	r2, r0
 8013072:	460b      	mov	r3, r1
 8013074:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8013078:	f7ed f91e 	bl	80002b8 <__aeabi_dsub>
 801307c:	ae4c      	add	r6, sp, #304	; 0x130
 801307e:	2401      	movs	r4, #1
 8013080:	42a5      	cmp	r5, r4
 8013082:	da30      	bge.n	80130e6 <__kernel_rem_pio2+0x5c6>
 8013084:	9b02      	ldr	r3, [sp, #8]
 8013086:	b113      	cbz	r3, 801308e <__kernel_rem_pio2+0x56e>
 8013088:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801308c:	4619      	mov	r1, r3
 801308e:	9b01      	ldr	r3, [sp, #4]
 8013090:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013094:	e00f      	b.n	80130b6 <__kernel_rem_pio2+0x596>
 8013096:	ab9a      	add	r3, sp, #616	; 0x268
 8013098:	441c      	add	r4, r3
 801309a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801309e:	2000      	movs	r0, #0
 80130a0:	2100      	movs	r1, #0
 80130a2:	2d00      	cmp	r5, #0
 80130a4:	da10      	bge.n	80130c8 <__kernel_rem_pio2+0x5a8>
 80130a6:	9b02      	ldr	r3, [sp, #8]
 80130a8:	b113      	cbz	r3, 80130b0 <__kernel_rem_pio2+0x590>
 80130aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80130ae:	4619      	mov	r1, r3
 80130b0:	9b01      	ldr	r3, [sp, #4]
 80130b2:	e9c3 0100 	strd	r0, r1, [r3]
 80130b6:	9b06      	ldr	r3, [sp, #24]
 80130b8:	f003 0007 	and.w	r0, r3, #7
 80130bc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80130c0:	ecbd 8b02 	vpop	{d8}
 80130c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130c8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80130cc:	f7ed f8f6 	bl	80002bc <__adddf3>
 80130d0:	3d01      	subs	r5, #1
 80130d2:	e7e6      	b.n	80130a2 <__kernel_rem_pio2+0x582>
 80130d4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80130d8:	f7ed f8f0 	bl	80002bc <__adddf3>
 80130dc:	3e01      	subs	r6, #1
 80130de:	e7bc      	b.n	801305a <__kernel_rem_pio2+0x53a>
 80130e0:	4602      	mov	r2, r0
 80130e2:	460b      	mov	r3, r1
 80130e4:	e7c1      	b.n	801306a <__kernel_rem_pio2+0x54a>
 80130e6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80130ea:	f7ed f8e7 	bl	80002bc <__adddf3>
 80130ee:	3401      	adds	r4, #1
 80130f0:	e7c6      	b.n	8013080 <__kernel_rem_pio2+0x560>
 80130f2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80130f6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80130fa:	4640      	mov	r0, r8
 80130fc:	ec53 2b17 	vmov	r2, r3, d7
 8013100:	4649      	mov	r1, r9
 8013102:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013106:	f7ed f8d9 	bl	80002bc <__adddf3>
 801310a:	4602      	mov	r2, r0
 801310c:	460b      	mov	r3, r1
 801310e:	4606      	mov	r6, r0
 8013110:	460f      	mov	r7, r1
 8013112:	4640      	mov	r0, r8
 8013114:	4649      	mov	r1, r9
 8013116:	f7ed f8cf 	bl	80002b8 <__aeabi_dsub>
 801311a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801311e:	f7ed f8cd 	bl	80002bc <__adddf3>
 8013122:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013126:	e9ca 0100 	strd	r0, r1, [sl]
 801312a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801312e:	e770      	b.n	8013012 <__kernel_rem_pio2+0x4f2>
 8013130:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8013134:	ed3a 7b02 	vldmdb	sl!, {d7}
 8013138:	4630      	mov	r0, r6
 801313a:	ec53 2b17 	vmov	r2, r3, d7
 801313e:	4639      	mov	r1, r7
 8013140:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013144:	f7ed f8ba 	bl	80002bc <__adddf3>
 8013148:	4602      	mov	r2, r0
 801314a:	460b      	mov	r3, r1
 801314c:	4680      	mov	r8, r0
 801314e:	4689      	mov	r9, r1
 8013150:	4630      	mov	r0, r6
 8013152:	4639      	mov	r1, r7
 8013154:	f7ed f8b0 	bl	80002b8 <__aeabi_dsub>
 8013158:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801315c:	f7ed f8ae 	bl	80002bc <__adddf3>
 8013160:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013164:	e9ca 0100 	strd	r0, r1, [sl]
 8013168:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801316c:	e756      	b.n	801301c <__kernel_rem_pio2+0x4fc>
 801316e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013172:	f7ed f8a3 	bl	80002bc <__adddf3>
 8013176:	3d01      	subs	r5, #1
 8013178:	e756      	b.n	8013028 <__kernel_rem_pio2+0x508>
 801317a:	9b01      	ldr	r3, [sp, #4]
 801317c:	9a01      	ldr	r2, [sp, #4]
 801317e:	601f      	str	r7, [r3, #0]
 8013180:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8013184:	605c      	str	r4, [r3, #4]
 8013186:	609d      	str	r5, [r3, #8]
 8013188:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801318c:	60d3      	str	r3, [r2, #12]
 801318e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013192:	6110      	str	r0, [r2, #16]
 8013194:	6153      	str	r3, [r2, #20]
 8013196:	e78e      	b.n	80130b6 <__kernel_rem_pio2+0x596>
 8013198:	41700000 	.word	0x41700000
 801319c:	3e700000 	.word	0x3e700000

080131a0 <__kernel_sin>:
 80131a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131a4:	ec55 4b10 	vmov	r4, r5, d0
 80131a8:	b085      	sub	sp, #20
 80131aa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80131ae:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80131b2:	ed8d 1b00 	vstr	d1, [sp]
 80131b6:	9002      	str	r0, [sp, #8]
 80131b8:	da06      	bge.n	80131c8 <__kernel_sin+0x28>
 80131ba:	ee10 0a10 	vmov	r0, s0
 80131be:	4629      	mov	r1, r5
 80131c0:	f7ed fce2 	bl	8000b88 <__aeabi_d2iz>
 80131c4:	2800      	cmp	r0, #0
 80131c6:	d051      	beq.n	801326c <__kernel_sin+0xcc>
 80131c8:	4622      	mov	r2, r4
 80131ca:	462b      	mov	r3, r5
 80131cc:	4620      	mov	r0, r4
 80131ce:	4629      	mov	r1, r5
 80131d0:	f7ed fa2a 	bl	8000628 <__aeabi_dmul>
 80131d4:	4682      	mov	sl, r0
 80131d6:	468b      	mov	fp, r1
 80131d8:	4602      	mov	r2, r0
 80131da:	460b      	mov	r3, r1
 80131dc:	4620      	mov	r0, r4
 80131de:	4629      	mov	r1, r5
 80131e0:	f7ed fa22 	bl	8000628 <__aeabi_dmul>
 80131e4:	a341      	add	r3, pc, #260	; (adr r3, 80132ec <__kernel_sin+0x14c>)
 80131e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ea:	4680      	mov	r8, r0
 80131ec:	4689      	mov	r9, r1
 80131ee:	4650      	mov	r0, sl
 80131f0:	4659      	mov	r1, fp
 80131f2:	f7ed fa19 	bl	8000628 <__aeabi_dmul>
 80131f6:	a33f      	add	r3, pc, #252	; (adr r3, 80132f4 <__kernel_sin+0x154>)
 80131f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131fc:	f7ed f85c 	bl	80002b8 <__aeabi_dsub>
 8013200:	4652      	mov	r2, sl
 8013202:	465b      	mov	r3, fp
 8013204:	f7ed fa10 	bl	8000628 <__aeabi_dmul>
 8013208:	a33c      	add	r3, pc, #240	; (adr r3, 80132fc <__kernel_sin+0x15c>)
 801320a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801320e:	f7ed f855 	bl	80002bc <__adddf3>
 8013212:	4652      	mov	r2, sl
 8013214:	465b      	mov	r3, fp
 8013216:	f7ed fa07 	bl	8000628 <__aeabi_dmul>
 801321a:	a33a      	add	r3, pc, #232	; (adr r3, 8013304 <__kernel_sin+0x164>)
 801321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013220:	f7ed f84a 	bl	80002b8 <__aeabi_dsub>
 8013224:	4652      	mov	r2, sl
 8013226:	465b      	mov	r3, fp
 8013228:	f7ed f9fe 	bl	8000628 <__aeabi_dmul>
 801322c:	a337      	add	r3, pc, #220	; (adr r3, 801330c <__kernel_sin+0x16c>)
 801322e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013232:	f7ed f843 	bl	80002bc <__adddf3>
 8013236:	9b02      	ldr	r3, [sp, #8]
 8013238:	4606      	mov	r6, r0
 801323a:	460f      	mov	r7, r1
 801323c:	b9db      	cbnz	r3, 8013276 <__kernel_sin+0xd6>
 801323e:	4602      	mov	r2, r0
 8013240:	460b      	mov	r3, r1
 8013242:	4650      	mov	r0, sl
 8013244:	4659      	mov	r1, fp
 8013246:	f7ed f9ef 	bl	8000628 <__aeabi_dmul>
 801324a:	a325      	add	r3, pc, #148	; (adr r3, 80132e0 <__kernel_sin+0x140>)
 801324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013250:	f7ed f832 	bl	80002b8 <__aeabi_dsub>
 8013254:	4642      	mov	r2, r8
 8013256:	464b      	mov	r3, r9
 8013258:	f7ed f9e6 	bl	8000628 <__aeabi_dmul>
 801325c:	4602      	mov	r2, r0
 801325e:	460b      	mov	r3, r1
 8013260:	4620      	mov	r0, r4
 8013262:	4629      	mov	r1, r5
 8013264:	f7ed f82a 	bl	80002bc <__adddf3>
 8013268:	4604      	mov	r4, r0
 801326a:	460d      	mov	r5, r1
 801326c:	ec45 4b10 	vmov	d0, r4, r5
 8013270:	b005      	add	sp, #20
 8013272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013276:	2200      	movs	r2, #0
 8013278:	4b1b      	ldr	r3, [pc, #108]	; (80132e8 <__kernel_sin+0x148>)
 801327a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801327e:	f7ed f9d3 	bl	8000628 <__aeabi_dmul>
 8013282:	4632      	mov	r2, r6
 8013284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013288:	463b      	mov	r3, r7
 801328a:	4640      	mov	r0, r8
 801328c:	4649      	mov	r1, r9
 801328e:	f7ed f9cb 	bl	8000628 <__aeabi_dmul>
 8013292:	4602      	mov	r2, r0
 8013294:	460b      	mov	r3, r1
 8013296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801329a:	f7ed f80d 	bl	80002b8 <__aeabi_dsub>
 801329e:	4652      	mov	r2, sl
 80132a0:	465b      	mov	r3, fp
 80132a2:	f7ed f9c1 	bl	8000628 <__aeabi_dmul>
 80132a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80132aa:	f7ed f805 	bl	80002b8 <__aeabi_dsub>
 80132ae:	a30c      	add	r3, pc, #48	; (adr r3, 80132e0 <__kernel_sin+0x140>)
 80132b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b4:	4606      	mov	r6, r0
 80132b6:	460f      	mov	r7, r1
 80132b8:	4640      	mov	r0, r8
 80132ba:	4649      	mov	r1, r9
 80132bc:	f7ed f9b4 	bl	8000628 <__aeabi_dmul>
 80132c0:	4602      	mov	r2, r0
 80132c2:	460b      	mov	r3, r1
 80132c4:	4630      	mov	r0, r6
 80132c6:	4639      	mov	r1, r7
 80132c8:	f7ec fff8 	bl	80002bc <__adddf3>
 80132cc:	4602      	mov	r2, r0
 80132ce:	460b      	mov	r3, r1
 80132d0:	4620      	mov	r0, r4
 80132d2:	4629      	mov	r1, r5
 80132d4:	f7ec fff0 	bl	80002b8 <__aeabi_dsub>
 80132d8:	e7c6      	b.n	8013268 <__kernel_sin+0xc8>
 80132da:	bf00      	nop
 80132dc:	f3af 8000 	nop.w
 80132e0:	55555549 	.word	0x55555549
 80132e4:	3fc55555 	.word	0x3fc55555
 80132e8:	3fe00000 	.word	0x3fe00000
 80132ec:	5acfd57c 	.word	0x5acfd57c
 80132f0:	3de5d93a 	.word	0x3de5d93a
 80132f4:	8a2b9ceb 	.word	0x8a2b9ceb
 80132f8:	3e5ae5e6 	.word	0x3e5ae5e6
 80132fc:	57b1fe7d 	.word	0x57b1fe7d
 8013300:	3ec71de3 	.word	0x3ec71de3
 8013304:	19c161d5 	.word	0x19c161d5
 8013308:	3f2a01a0 	.word	0x3f2a01a0
 801330c:	1110f8a6 	.word	0x1110f8a6
 8013310:	3f811111 	.word	0x3f811111

08013314 <fabs>:
 8013314:	ec51 0b10 	vmov	r0, r1, d0
 8013318:	ee10 2a10 	vmov	r2, s0
 801331c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013320:	ec43 2b10 	vmov	d0, r2, r3
 8013324:	4770      	bx	lr
	...

08013328 <floor>:
 8013328:	ec51 0b10 	vmov	r0, r1, d0
 801332c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013330:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8013334:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013338:	2e13      	cmp	r6, #19
 801333a:	460c      	mov	r4, r1
 801333c:	ee10 5a10 	vmov	r5, s0
 8013340:	4680      	mov	r8, r0
 8013342:	dc34      	bgt.n	80133ae <floor+0x86>
 8013344:	2e00      	cmp	r6, #0
 8013346:	da16      	bge.n	8013376 <floor+0x4e>
 8013348:	a335      	add	r3, pc, #212	; (adr r3, 8013420 <floor+0xf8>)
 801334a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801334e:	f7ec ffb5 	bl	80002bc <__adddf3>
 8013352:	2200      	movs	r2, #0
 8013354:	2300      	movs	r3, #0
 8013356:	f7ed fbf7 	bl	8000b48 <__aeabi_dcmpgt>
 801335a:	b148      	cbz	r0, 8013370 <floor+0x48>
 801335c:	2c00      	cmp	r4, #0
 801335e:	da59      	bge.n	8013414 <floor+0xec>
 8013360:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013364:	4a30      	ldr	r2, [pc, #192]	; (8013428 <floor+0x100>)
 8013366:	432b      	orrs	r3, r5
 8013368:	2500      	movs	r5, #0
 801336a:	42ab      	cmp	r3, r5
 801336c:	bf18      	it	ne
 801336e:	4614      	movne	r4, r2
 8013370:	4621      	mov	r1, r4
 8013372:	4628      	mov	r0, r5
 8013374:	e025      	b.n	80133c2 <floor+0x9a>
 8013376:	4f2d      	ldr	r7, [pc, #180]	; (801342c <floor+0x104>)
 8013378:	4137      	asrs	r7, r6
 801337a:	ea01 0307 	and.w	r3, r1, r7
 801337e:	4303      	orrs	r3, r0
 8013380:	d01f      	beq.n	80133c2 <floor+0x9a>
 8013382:	a327      	add	r3, pc, #156	; (adr r3, 8013420 <floor+0xf8>)
 8013384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013388:	f7ec ff98 	bl	80002bc <__adddf3>
 801338c:	2200      	movs	r2, #0
 801338e:	2300      	movs	r3, #0
 8013390:	f7ed fbda 	bl	8000b48 <__aeabi_dcmpgt>
 8013394:	2800      	cmp	r0, #0
 8013396:	d0eb      	beq.n	8013370 <floor+0x48>
 8013398:	2c00      	cmp	r4, #0
 801339a:	bfbe      	ittt	lt
 801339c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80133a0:	fa43 f606 	asrlt.w	r6, r3, r6
 80133a4:	19a4      	addlt	r4, r4, r6
 80133a6:	ea24 0407 	bic.w	r4, r4, r7
 80133aa:	2500      	movs	r5, #0
 80133ac:	e7e0      	b.n	8013370 <floor+0x48>
 80133ae:	2e33      	cmp	r6, #51	; 0x33
 80133b0:	dd0b      	ble.n	80133ca <floor+0xa2>
 80133b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80133b6:	d104      	bne.n	80133c2 <floor+0x9a>
 80133b8:	ee10 2a10 	vmov	r2, s0
 80133bc:	460b      	mov	r3, r1
 80133be:	f7ec ff7d 	bl	80002bc <__adddf3>
 80133c2:	ec41 0b10 	vmov	d0, r0, r1
 80133c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133ca:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80133ce:	f04f 33ff 	mov.w	r3, #4294967295
 80133d2:	fa23 f707 	lsr.w	r7, r3, r7
 80133d6:	4207      	tst	r7, r0
 80133d8:	d0f3      	beq.n	80133c2 <floor+0x9a>
 80133da:	a311      	add	r3, pc, #68	; (adr r3, 8013420 <floor+0xf8>)
 80133dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133e0:	f7ec ff6c 	bl	80002bc <__adddf3>
 80133e4:	2200      	movs	r2, #0
 80133e6:	2300      	movs	r3, #0
 80133e8:	f7ed fbae 	bl	8000b48 <__aeabi_dcmpgt>
 80133ec:	2800      	cmp	r0, #0
 80133ee:	d0bf      	beq.n	8013370 <floor+0x48>
 80133f0:	2c00      	cmp	r4, #0
 80133f2:	da02      	bge.n	80133fa <floor+0xd2>
 80133f4:	2e14      	cmp	r6, #20
 80133f6:	d103      	bne.n	8013400 <floor+0xd8>
 80133f8:	3401      	adds	r4, #1
 80133fa:	ea25 0507 	bic.w	r5, r5, r7
 80133fe:	e7b7      	b.n	8013370 <floor+0x48>
 8013400:	2301      	movs	r3, #1
 8013402:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013406:	fa03 f606 	lsl.w	r6, r3, r6
 801340a:	4435      	add	r5, r6
 801340c:	4545      	cmp	r5, r8
 801340e:	bf38      	it	cc
 8013410:	18e4      	addcc	r4, r4, r3
 8013412:	e7f2      	b.n	80133fa <floor+0xd2>
 8013414:	2500      	movs	r5, #0
 8013416:	462c      	mov	r4, r5
 8013418:	e7aa      	b.n	8013370 <floor+0x48>
 801341a:	bf00      	nop
 801341c:	f3af 8000 	nop.w
 8013420:	8800759c 	.word	0x8800759c
 8013424:	7e37e43c 	.word	0x7e37e43c
 8013428:	bff00000 	.word	0xbff00000
 801342c:	000fffff 	.word	0x000fffff

08013430 <scalbn>:
 8013430:	b570      	push	{r4, r5, r6, lr}
 8013432:	ec55 4b10 	vmov	r4, r5, d0
 8013436:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801343a:	4606      	mov	r6, r0
 801343c:	462b      	mov	r3, r5
 801343e:	b9aa      	cbnz	r2, 801346c <scalbn+0x3c>
 8013440:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013444:	4323      	orrs	r3, r4
 8013446:	d03b      	beq.n	80134c0 <scalbn+0x90>
 8013448:	4b31      	ldr	r3, [pc, #196]	; (8013510 <scalbn+0xe0>)
 801344a:	4629      	mov	r1, r5
 801344c:	2200      	movs	r2, #0
 801344e:	ee10 0a10 	vmov	r0, s0
 8013452:	f7ed f8e9 	bl	8000628 <__aeabi_dmul>
 8013456:	4b2f      	ldr	r3, [pc, #188]	; (8013514 <scalbn+0xe4>)
 8013458:	429e      	cmp	r6, r3
 801345a:	4604      	mov	r4, r0
 801345c:	460d      	mov	r5, r1
 801345e:	da12      	bge.n	8013486 <scalbn+0x56>
 8013460:	a327      	add	r3, pc, #156	; (adr r3, 8013500 <scalbn+0xd0>)
 8013462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013466:	f7ed f8df 	bl	8000628 <__aeabi_dmul>
 801346a:	e009      	b.n	8013480 <scalbn+0x50>
 801346c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013470:	428a      	cmp	r2, r1
 8013472:	d10c      	bne.n	801348e <scalbn+0x5e>
 8013474:	ee10 2a10 	vmov	r2, s0
 8013478:	4620      	mov	r0, r4
 801347a:	4629      	mov	r1, r5
 801347c:	f7ec ff1e 	bl	80002bc <__adddf3>
 8013480:	4604      	mov	r4, r0
 8013482:	460d      	mov	r5, r1
 8013484:	e01c      	b.n	80134c0 <scalbn+0x90>
 8013486:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801348a:	460b      	mov	r3, r1
 801348c:	3a36      	subs	r2, #54	; 0x36
 801348e:	4432      	add	r2, r6
 8013490:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013494:	428a      	cmp	r2, r1
 8013496:	dd0b      	ble.n	80134b0 <scalbn+0x80>
 8013498:	ec45 4b11 	vmov	d1, r4, r5
 801349c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8013508 <scalbn+0xd8>
 80134a0:	f000 f83c 	bl	801351c <copysign>
 80134a4:	a318      	add	r3, pc, #96	; (adr r3, 8013508 <scalbn+0xd8>)
 80134a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134aa:	ec51 0b10 	vmov	r0, r1, d0
 80134ae:	e7da      	b.n	8013466 <scalbn+0x36>
 80134b0:	2a00      	cmp	r2, #0
 80134b2:	dd08      	ble.n	80134c6 <scalbn+0x96>
 80134b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80134b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80134bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80134c0:	ec45 4b10 	vmov	d0, r4, r5
 80134c4:	bd70      	pop	{r4, r5, r6, pc}
 80134c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80134ca:	da0d      	bge.n	80134e8 <scalbn+0xb8>
 80134cc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80134d0:	429e      	cmp	r6, r3
 80134d2:	ec45 4b11 	vmov	d1, r4, r5
 80134d6:	dce1      	bgt.n	801349c <scalbn+0x6c>
 80134d8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8013500 <scalbn+0xd0>
 80134dc:	f000 f81e 	bl	801351c <copysign>
 80134e0:	a307      	add	r3, pc, #28	; (adr r3, 8013500 <scalbn+0xd0>)
 80134e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134e6:	e7e0      	b.n	80134aa <scalbn+0x7a>
 80134e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80134ec:	3236      	adds	r2, #54	; 0x36
 80134ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80134f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80134f6:	4620      	mov	r0, r4
 80134f8:	4629      	mov	r1, r5
 80134fa:	2200      	movs	r2, #0
 80134fc:	4b06      	ldr	r3, [pc, #24]	; (8013518 <scalbn+0xe8>)
 80134fe:	e7b2      	b.n	8013466 <scalbn+0x36>
 8013500:	c2f8f359 	.word	0xc2f8f359
 8013504:	01a56e1f 	.word	0x01a56e1f
 8013508:	8800759c 	.word	0x8800759c
 801350c:	7e37e43c 	.word	0x7e37e43c
 8013510:	43500000 	.word	0x43500000
 8013514:	ffff3cb0 	.word	0xffff3cb0
 8013518:	3c900000 	.word	0x3c900000

0801351c <copysign>:
 801351c:	ec51 0b10 	vmov	r0, r1, d0
 8013520:	ee11 0a90 	vmov	r0, s3
 8013524:	ee10 2a10 	vmov	r2, s0
 8013528:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801352c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8013530:	ea41 0300 	orr.w	r3, r1, r0
 8013534:	ec43 2b10 	vmov	d0, r2, r3
 8013538:	4770      	bx	lr
	...

0801353c <__errno>:
 801353c:	4b01      	ldr	r3, [pc, #4]	; (8013544 <__errno+0x8>)
 801353e:	6818      	ldr	r0, [r3, #0]
 8013540:	4770      	bx	lr
 8013542:	bf00      	nop
 8013544:	2000000c 	.word	0x2000000c

08013548 <__libc_init_array>:
 8013548:	b570      	push	{r4, r5, r6, lr}
 801354a:	4e0d      	ldr	r6, [pc, #52]	; (8013580 <__libc_init_array+0x38>)
 801354c:	4c0d      	ldr	r4, [pc, #52]	; (8013584 <__libc_init_array+0x3c>)
 801354e:	1ba4      	subs	r4, r4, r6
 8013550:	10a4      	asrs	r4, r4, #2
 8013552:	2500      	movs	r5, #0
 8013554:	42a5      	cmp	r5, r4
 8013556:	d109      	bne.n	801356c <__libc_init_array+0x24>
 8013558:	4e0b      	ldr	r6, [pc, #44]	; (8013588 <__libc_init_array+0x40>)
 801355a:	4c0c      	ldr	r4, [pc, #48]	; (801358c <__libc_init_array+0x44>)
 801355c:	f004 f9e8 	bl	8017930 <_init>
 8013560:	1ba4      	subs	r4, r4, r6
 8013562:	10a4      	asrs	r4, r4, #2
 8013564:	2500      	movs	r5, #0
 8013566:	42a5      	cmp	r5, r4
 8013568:	d105      	bne.n	8013576 <__libc_init_array+0x2e>
 801356a:	bd70      	pop	{r4, r5, r6, pc}
 801356c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013570:	4798      	blx	r3
 8013572:	3501      	adds	r5, #1
 8013574:	e7ee      	b.n	8013554 <__libc_init_array+0xc>
 8013576:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801357a:	4798      	blx	r3
 801357c:	3501      	adds	r5, #1
 801357e:	e7f2      	b.n	8013566 <__libc_init_array+0x1e>
 8013580:	08018454 	.word	0x08018454
 8013584:	08018454 	.word	0x08018454
 8013588:	08018454 	.word	0x08018454
 801358c:	0801845c 	.word	0x0801845c

08013590 <memcpy>:
 8013590:	b510      	push	{r4, lr}
 8013592:	1e43      	subs	r3, r0, #1
 8013594:	440a      	add	r2, r1
 8013596:	4291      	cmp	r1, r2
 8013598:	d100      	bne.n	801359c <memcpy+0xc>
 801359a:	bd10      	pop	{r4, pc}
 801359c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80135a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80135a4:	e7f7      	b.n	8013596 <memcpy+0x6>

080135a6 <memset>:
 80135a6:	4402      	add	r2, r0
 80135a8:	4603      	mov	r3, r0
 80135aa:	4293      	cmp	r3, r2
 80135ac:	d100      	bne.n	80135b0 <memset+0xa>
 80135ae:	4770      	bx	lr
 80135b0:	f803 1b01 	strb.w	r1, [r3], #1
 80135b4:	e7f9      	b.n	80135aa <memset+0x4>

080135b6 <__cvt>:
 80135b6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80135ba:	ec55 4b10 	vmov	r4, r5, d0
 80135be:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80135c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80135c4:	2d00      	cmp	r5, #0
 80135c6:	460e      	mov	r6, r1
 80135c8:	4691      	mov	r9, r2
 80135ca:	4619      	mov	r1, r3
 80135cc:	bfb8      	it	lt
 80135ce:	4622      	movlt	r2, r4
 80135d0:	462b      	mov	r3, r5
 80135d2:	f027 0720 	bic.w	r7, r7, #32
 80135d6:	bfbb      	ittet	lt
 80135d8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80135dc:	461d      	movlt	r5, r3
 80135de:	2300      	movge	r3, #0
 80135e0:	232d      	movlt	r3, #45	; 0x2d
 80135e2:	bfb8      	it	lt
 80135e4:	4614      	movlt	r4, r2
 80135e6:	2f46      	cmp	r7, #70	; 0x46
 80135e8:	700b      	strb	r3, [r1, #0]
 80135ea:	d004      	beq.n	80135f6 <__cvt+0x40>
 80135ec:	2f45      	cmp	r7, #69	; 0x45
 80135ee:	d100      	bne.n	80135f2 <__cvt+0x3c>
 80135f0:	3601      	adds	r6, #1
 80135f2:	2102      	movs	r1, #2
 80135f4:	e000      	b.n	80135f8 <__cvt+0x42>
 80135f6:	2103      	movs	r1, #3
 80135f8:	ab03      	add	r3, sp, #12
 80135fa:	9301      	str	r3, [sp, #4]
 80135fc:	ab02      	add	r3, sp, #8
 80135fe:	9300      	str	r3, [sp, #0]
 8013600:	4632      	mov	r2, r6
 8013602:	4653      	mov	r3, sl
 8013604:	ec45 4b10 	vmov	d0, r4, r5
 8013608:	f001 fdfe 	bl	8015208 <_dtoa_r>
 801360c:	2f47      	cmp	r7, #71	; 0x47
 801360e:	4680      	mov	r8, r0
 8013610:	d102      	bne.n	8013618 <__cvt+0x62>
 8013612:	f019 0f01 	tst.w	r9, #1
 8013616:	d026      	beq.n	8013666 <__cvt+0xb0>
 8013618:	2f46      	cmp	r7, #70	; 0x46
 801361a:	eb08 0906 	add.w	r9, r8, r6
 801361e:	d111      	bne.n	8013644 <__cvt+0x8e>
 8013620:	f898 3000 	ldrb.w	r3, [r8]
 8013624:	2b30      	cmp	r3, #48	; 0x30
 8013626:	d10a      	bne.n	801363e <__cvt+0x88>
 8013628:	2200      	movs	r2, #0
 801362a:	2300      	movs	r3, #0
 801362c:	4620      	mov	r0, r4
 801362e:	4629      	mov	r1, r5
 8013630:	f7ed fa62 	bl	8000af8 <__aeabi_dcmpeq>
 8013634:	b918      	cbnz	r0, 801363e <__cvt+0x88>
 8013636:	f1c6 0601 	rsb	r6, r6, #1
 801363a:	f8ca 6000 	str.w	r6, [sl]
 801363e:	f8da 3000 	ldr.w	r3, [sl]
 8013642:	4499      	add	r9, r3
 8013644:	2200      	movs	r2, #0
 8013646:	2300      	movs	r3, #0
 8013648:	4620      	mov	r0, r4
 801364a:	4629      	mov	r1, r5
 801364c:	f7ed fa54 	bl	8000af8 <__aeabi_dcmpeq>
 8013650:	b938      	cbnz	r0, 8013662 <__cvt+0xac>
 8013652:	2230      	movs	r2, #48	; 0x30
 8013654:	9b03      	ldr	r3, [sp, #12]
 8013656:	454b      	cmp	r3, r9
 8013658:	d205      	bcs.n	8013666 <__cvt+0xb0>
 801365a:	1c59      	adds	r1, r3, #1
 801365c:	9103      	str	r1, [sp, #12]
 801365e:	701a      	strb	r2, [r3, #0]
 8013660:	e7f8      	b.n	8013654 <__cvt+0x9e>
 8013662:	f8cd 900c 	str.w	r9, [sp, #12]
 8013666:	9b03      	ldr	r3, [sp, #12]
 8013668:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801366a:	eba3 0308 	sub.w	r3, r3, r8
 801366e:	4640      	mov	r0, r8
 8013670:	6013      	str	r3, [r2, #0]
 8013672:	b004      	add	sp, #16
 8013674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013678 <__exponent>:
 8013678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801367a:	2900      	cmp	r1, #0
 801367c:	4604      	mov	r4, r0
 801367e:	bfba      	itte	lt
 8013680:	4249      	neglt	r1, r1
 8013682:	232d      	movlt	r3, #45	; 0x2d
 8013684:	232b      	movge	r3, #43	; 0x2b
 8013686:	2909      	cmp	r1, #9
 8013688:	f804 2b02 	strb.w	r2, [r4], #2
 801368c:	7043      	strb	r3, [r0, #1]
 801368e:	dd20      	ble.n	80136d2 <__exponent+0x5a>
 8013690:	f10d 0307 	add.w	r3, sp, #7
 8013694:	461f      	mov	r7, r3
 8013696:	260a      	movs	r6, #10
 8013698:	fb91 f5f6 	sdiv	r5, r1, r6
 801369c:	fb06 1115 	mls	r1, r6, r5, r1
 80136a0:	3130      	adds	r1, #48	; 0x30
 80136a2:	2d09      	cmp	r5, #9
 80136a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80136a8:	f103 32ff 	add.w	r2, r3, #4294967295
 80136ac:	4629      	mov	r1, r5
 80136ae:	dc09      	bgt.n	80136c4 <__exponent+0x4c>
 80136b0:	3130      	adds	r1, #48	; 0x30
 80136b2:	3b02      	subs	r3, #2
 80136b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80136b8:	42bb      	cmp	r3, r7
 80136ba:	4622      	mov	r2, r4
 80136bc:	d304      	bcc.n	80136c8 <__exponent+0x50>
 80136be:	1a10      	subs	r0, r2, r0
 80136c0:	b003      	add	sp, #12
 80136c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136c4:	4613      	mov	r3, r2
 80136c6:	e7e7      	b.n	8013698 <__exponent+0x20>
 80136c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136cc:	f804 2b01 	strb.w	r2, [r4], #1
 80136d0:	e7f2      	b.n	80136b8 <__exponent+0x40>
 80136d2:	2330      	movs	r3, #48	; 0x30
 80136d4:	4419      	add	r1, r3
 80136d6:	7083      	strb	r3, [r0, #2]
 80136d8:	1d02      	adds	r2, r0, #4
 80136da:	70c1      	strb	r1, [r0, #3]
 80136dc:	e7ef      	b.n	80136be <__exponent+0x46>
	...

080136e0 <_printf_float>:
 80136e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136e4:	b08d      	sub	sp, #52	; 0x34
 80136e6:	460c      	mov	r4, r1
 80136e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80136ec:	4616      	mov	r6, r2
 80136ee:	461f      	mov	r7, r3
 80136f0:	4605      	mov	r5, r0
 80136f2:	f002 fe7b 	bl	80163ec <_localeconv_r>
 80136f6:	6803      	ldr	r3, [r0, #0]
 80136f8:	9304      	str	r3, [sp, #16]
 80136fa:	4618      	mov	r0, r3
 80136fc:	f7ec fd80 	bl	8000200 <strlen>
 8013700:	2300      	movs	r3, #0
 8013702:	930a      	str	r3, [sp, #40]	; 0x28
 8013704:	f8d8 3000 	ldr.w	r3, [r8]
 8013708:	9005      	str	r0, [sp, #20]
 801370a:	3307      	adds	r3, #7
 801370c:	f023 0307 	bic.w	r3, r3, #7
 8013710:	f103 0208 	add.w	r2, r3, #8
 8013714:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013718:	f8d4 b000 	ldr.w	fp, [r4]
 801371c:	f8c8 2000 	str.w	r2, [r8]
 8013720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013724:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013728:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801372c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013730:	9307      	str	r3, [sp, #28]
 8013732:	f8cd 8018 	str.w	r8, [sp, #24]
 8013736:	f04f 32ff 	mov.w	r2, #4294967295
 801373a:	4ba7      	ldr	r3, [pc, #668]	; (80139d8 <_printf_float+0x2f8>)
 801373c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013740:	f7ed fa0c 	bl	8000b5c <__aeabi_dcmpun>
 8013744:	bb70      	cbnz	r0, 80137a4 <_printf_float+0xc4>
 8013746:	f04f 32ff 	mov.w	r2, #4294967295
 801374a:	4ba3      	ldr	r3, [pc, #652]	; (80139d8 <_printf_float+0x2f8>)
 801374c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013750:	f7ed f9e6 	bl	8000b20 <__aeabi_dcmple>
 8013754:	bb30      	cbnz	r0, 80137a4 <_printf_float+0xc4>
 8013756:	2200      	movs	r2, #0
 8013758:	2300      	movs	r3, #0
 801375a:	4640      	mov	r0, r8
 801375c:	4649      	mov	r1, r9
 801375e:	f7ed f9d5 	bl	8000b0c <__aeabi_dcmplt>
 8013762:	b110      	cbz	r0, 801376a <_printf_float+0x8a>
 8013764:	232d      	movs	r3, #45	; 0x2d
 8013766:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801376a:	4a9c      	ldr	r2, [pc, #624]	; (80139dc <_printf_float+0x2fc>)
 801376c:	4b9c      	ldr	r3, [pc, #624]	; (80139e0 <_printf_float+0x300>)
 801376e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013772:	bf8c      	ite	hi
 8013774:	4690      	movhi	r8, r2
 8013776:	4698      	movls	r8, r3
 8013778:	2303      	movs	r3, #3
 801377a:	f02b 0204 	bic.w	r2, fp, #4
 801377e:	6123      	str	r3, [r4, #16]
 8013780:	6022      	str	r2, [r4, #0]
 8013782:	f04f 0900 	mov.w	r9, #0
 8013786:	9700      	str	r7, [sp, #0]
 8013788:	4633      	mov	r3, r6
 801378a:	aa0b      	add	r2, sp, #44	; 0x2c
 801378c:	4621      	mov	r1, r4
 801378e:	4628      	mov	r0, r5
 8013790:	f000 f9e6 	bl	8013b60 <_printf_common>
 8013794:	3001      	adds	r0, #1
 8013796:	f040 808d 	bne.w	80138b4 <_printf_float+0x1d4>
 801379a:	f04f 30ff 	mov.w	r0, #4294967295
 801379e:	b00d      	add	sp, #52	; 0x34
 80137a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137a4:	4642      	mov	r2, r8
 80137a6:	464b      	mov	r3, r9
 80137a8:	4640      	mov	r0, r8
 80137aa:	4649      	mov	r1, r9
 80137ac:	f7ed f9d6 	bl	8000b5c <__aeabi_dcmpun>
 80137b0:	b110      	cbz	r0, 80137b8 <_printf_float+0xd8>
 80137b2:	4a8c      	ldr	r2, [pc, #560]	; (80139e4 <_printf_float+0x304>)
 80137b4:	4b8c      	ldr	r3, [pc, #560]	; (80139e8 <_printf_float+0x308>)
 80137b6:	e7da      	b.n	801376e <_printf_float+0x8e>
 80137b8:	6861      	ldr	r1, [r4, #4]
 80137ba:	1c4b      	adds	r3, r1, #1
 80137bc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80137c0:	a80a      	add	r0, sp, #40	; 0x28
 80137c2:	d13e      	bne.n	8013842 <_printf_float+0x162>
 80137c4:	2306      	movs	r3, #6
 80137c6:	6063      	str	r3, [r4, #4]
 80137c8:	2300      	movs	r3, #0
 80137ca:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80137ce:	ab09      	add	r3, sp, #36	; 0x24
 80137d0:	9300      	str	r3, [sp, #0]
 80137d2:	ec49 8b10 	vmov	d0, r8, r9
 80137d6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80137da:	6022      	str	r2, [r4, #0]
 80137dc:	f8cd a004 	str.w	sl, [sp, #4]
 80137e0:	6861      	ldr	r1, [r4, #4]
 80137e2:	4628      	mov	r0, r5
 80137e4:	f7ff fee7 	bl	80135b6 <__cvt>
 80137e8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80137ec:	2b47      	cmp	r3, #71	; 0x47
 80137ee:	4680      	mov	r8, r0
 80137f0:	d109      	bne.n	8013806 <_printf_float+0x126>
 80137f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137f4:	1cd8      	adds	r0, r3, #3
 80137f6:	db02      	blt.n	80137fe <_printf_float+0x11e>
 80137f8:	6862      	ldr	r2, [r4, #4]
 80137fa:	4293      	cmp	r3, r2
 80137fc:	dd47      	ble.n	801388e <_printf_float+0x1ae>
 80137fe:	f1aa 0a02 	sub.w	sl, sl, #2
 8013802:	fa5f fa8a 	uxtb.w	sl, sl
 8013806:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801380a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801380c:	d824      	bhi.n	8013858 <_printf_float+0x178>
 801380e:	3901      	subs	r1, #1
 8013810:	4652      	mov	r2, sl
 8013812:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013816:	9109      	str	r1, [sp, #36]	; 0x24
 8013818:	f7ff ff2e 	bl	8013678 <__exponent>
 801381c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801381e:	1813      	adds	r3, r2, r0
 8013820:	2a01      	cmp	r2, #1
 8013822:	4681      	mov	r9, r0
 8013824:	6123      	str	r3, [r4, #16]
 8013826:	dc02      	bgt.n	801382e <_printf_float+0x14e>
 8013828:	6822      	ldr	r2, [r4, #0]
 801382a:	07d1      	lsls	r1, r2, #31
 801382c:	d501      	bpl.n	8013832 <_printf_float+0x152>
 801382e:	3301      	adds	r3, #1
 8013830:	6123      	str	r3, [r4, #16]
 8013832:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013836:	2b00      	cmp	r3, #0
 8013838:	d0a5      	beq.n	8013786 <_printf_float+0xa6>
 801383a:	232d      	movs	r3, #45	; 0x2d
 801383c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013840:	e7a1      	b.n	8013786 <_printf_float+0xa6>
 8013842:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8013846:	f000 8177 	beq.w	8013b38 <_printf_float+0x458>
 801384a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801384e:	d1bb      	bne.n	80137c8 <_printf_float+0xe8>
 8013850:	2900      	cmp	r1, #0
 8013852:	d1b9      	bne.n	80137c8 <_printf_float+0xe8>
 8013854:	2301      	movs	r3, #1
 8013856:	e7b6      	b.n	80137c6 <_printf_float+0xe6>
 8013858:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801385c:	d119      	bne.n	8013892 <_printf_float+0x1b2>
 801385e:	2900      	cmp	r1, #0
 8013860:	6863      	ldr	r3, [r4, #4]
 8013862:	dd0c      	ble.n	801387e <_printf_float+0x19e>
 8013864:	6121      	str	r1, [r4, #16]
 8013866:	b913      	cbnz	r3, 801386e <_printf_float+0x18e>
 8013868:	6822      	ldr	r2, [r4, #0]
 801386a:	07d2      	lsls	r2, r2, #31
 801386c:	d502      	bpl.n	8013874 <_printf_float+0x194>
 801386e:	3301      	adds	r3, #1
 8013870:	440b      	add	r3, r1
 8013872:	6123      	str	r3, [r4, #16]
 8013874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013876:	65a3      	str	r3, [r4, #88]	; 0x58
 8013878:	f04f 0900 	mov.w	r9, #0
 801387c:	e7d9      	b.n	8013832 <_printf_float+0x152>
 801387e:	b913      	cbnz	r3, 8013886 <_printf_float+0x1a6>
 8013880:	6822      	ldr	r2, [r4, #0]
 8013882:	07d0      	lsls	r0, r2, #31
 8013884:	d501      	bpl.n	801388a <_printf_float+0x1aa>
 8013886:	3302      	adds	r3, #2
 8013888:	e7f3      	b.n	8013872 <_printf_float+0x192>
 801388a:	2301      	movs	r3, #1
 801388c:	e7f1      	b.n	8013872 <_printf_float+0x192>
 801388e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8013892:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013896:	4293      	cmp	r3, r2
 8013898:	db05      	blt.n	80138a6 <_printf_float+0x1c6>
 801389a:	6822      	ldr	r2, [r4, #0]
 801389c:	6123      	str	r3, [r4, #16]
 801389e:	07d1      	lsls	r1, r2, #31
 80138a0:	d5e8      	bpl.n	8013874 <_printf_float+0x194>
 80138a2:	3301      	adds	r3, #1
 80138a4:	e7e5      	b.n	8013872 <_printf_float+0x192>
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	bfd4      	ite	le
 80138aa:	f1c3 0302 	rsble	r3, r3, #2
 80138ae:	2301      	movgt	r3, #1
 80138b0:	4413      	add	r3, r2
 80138b2:	e7de      	b.n	8013872 <_printf_float+0x192>
 80138b4:	6823      	ldr	r3, [r4, #0]
 80138b6:	055a      	lsls	r2, r3, #21
 80138b8:	d407      	bmi.n	80138ca <_printf_float+0x1ea>
 80138ba:	6923      	ldr	r3, [r4, #16]
 80138bc:	4642      	mov	r2, r8
 80138be:	4631      	mov	r1, r6
 80138c0:	4628      	mov	r0, r5
 80138c2:	47b8      	blx	r7
 80138c4:	3001      	adds	r0, #1
 80138c6:	d12b      	bne.n	8013920 <_printf_float+0x240>
 80138c8:	e767      	b.n	801379a <_printf_float+0xba>
 80138ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80138ce:	f240 80dc 	bls.w	8013a8a <_printf_float+0x3aa>
 80138d2:	2200      	movs	r2, #0
 80138d4:	2300      	movs	r3, #0
 80138d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80138da:	f7ed f90d 	bl	8000af8 <__aeabi_dcmpeq>
 80138de:	2800      	cmp	r0, #0
 80138e0:	d033      	beq.n	801394a <_printf_float+0x26a>
 80138e2:	2301      	movs	r3, #1
 80138e4:	4a41      	ldr	r2, [pc, #260]	; (80139ec <_printf_float+0x30c>)
 80138e6:	4631      	mov	r1, r6
 80138e8:	4628      	mov	r0, r5
 80138ea:	47b8      	blx	r7
 80138ec:	3001      	adds	r0, #1
 80138ee:	f43f af54 	beq.w	801379a <_printf_float+0xba>
 80138f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80138f6:	429a      	cmp	r2, r3
 80138f8:	db02      	blt.n	8013900 <_printf_float+0x220>
 80138fa:	6823      	ldr	r3, [r4, #0]
 80138fc:	07d8      	lsls	r0, r3, #31
 80138fe:	d50f      	bpl.n	8013920 <_printf_float+0x240>
 8013900:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013904:	4631      	mov	r1, r6
 8013906:	4628      	mov	r0, r5
 8013908:	47b8      	blx	r7
 801390a:	3001      	adds	r0, #1
 801390c:	f43f af45 	beq.w	801379a <_printf_float+0xba>
 8013910:	f04f 0800 	mov.w	r8, #0
 8013914:	f104 091a 	add.w	r9, r4, #26
 8013918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801391a:	3b01      	subs	r3, #1
 801391c:	4543      	cmp	r3, r8
 801391e:	dc09      	bgt.n	8013934 <_printf_float+0x254>
 8013920:	6823      	ldr	r3, [r4, #0]
 8013922:	079b      	lsls	r3, r3, #30
 8013924:	f100 8103 	bmi.w	8013b2e <_printf_float+0x44e>
 8013928:	68e0      	ldr	r0, [r4, #12]
 801392a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801392c:	4298      	cmp	r0, r3
 801392e:	bfb8      	it	lt
 8013930:	4618      	movlt	r0, r3
 8013932:	e734      	b.n	801379e <_printf_float+0xbe>
 8013934:	2301      	movs	r3, #1
 8013936:	464a      	mov	r2, r9
 8013938:	4631      	mov	r1, r6
 801393a:	4628      	mov	r0, r5
 801393c:	47b8      	blx	r7
 801393e:	3001      	adds	r0, #1
 8013940:	f43f af2b 	beq.w	801379a <_printf_float+0xba>
 8013944:	f108 0801 	add.w	r8, r8, #1
 8013948:	e7e6      	b.n	8013918 <_printf_float+0x238>
 801394a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801394c:	2b00      	cmp	r3, #0
 801394e:	dc2b      	bgt.n	80139a8 <_printf_float+0x2c8>
 8013950:	2301      	movs	r3, #1
 8013952:	4a26      	ldr	r2, [pc, #152]	; (80139ec <_printf_float+0x30c>)
 8013954:	4631      	mov	r1, r6
 8013956:	4628      	mov	r0, r5
 8013958:	47b8      	blx	r7
 801395a:	3001      	adds	r0, #1
 801395c:	f43f af1d 	beq.w	801379a <_printf_float+0xba>
 8013960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013962:	b923      	cbnz	r3, 801396e <_printf_float+0x28e>
 8013964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013966:	b913      	cbnz	r3, 801396e <_printf_float+0x28e>
 8013968:	6823      	ldr	r3, [r4, #0]
 801396a:	07d9      	lsls	r1, r3, #31
 801396c:	d5d8      	bpl.n	8013920 <_printf_float+0x240>
 801396e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013972:	4631      	mov	r1, r6
 8013974:	4628      	mov	r0, r5
 8013976:	47b8      	blx	r7
 8013978:	3001      	adds	r0, #1
 801397a:	f43f af0e 	beq.w	801379a <_printf_float+0xba>
 801397e:	f04f 0900 	mov.w	r9, #0
 8013982:	f104 0a1a 	add.w	sl, r4, #26
 8013986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013988:	425b      	negs	r3, r3
 801398a:	454b      	cmp	r3, r9
 801398c:	dc01      	bgt.n	8013992 <_printf_float+0x2b2>
 801398e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013990:	e794      	b.n	80138bc <_printf_float+0x1dc>
 8013992:	2301      	movs	r3, #1
 8013994:	4652      	mov	r2, sl
 8013996:	4631      	mov	r1, r6
 8013998:	4628      	mov	r0, r5
 801399a:	47b8      	blx	r7
 801399c:	3001      	adds	r0, #1
 801399e:	f43f aefc 	beq.w	801379a <_printf_float+0xba>
 80139a2:	f109 0901 	add.w	r9, r9, #1
 80139a6:	e7ee      	b.n	8013986 <_printf_float+0x2a6>
 80139a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80139aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80139ac:	429a      	cmp	r2, r3
 80139ae:	bfa8      	it	ge
 80139b0:	461a      	movge	r2, r3
 80139b2:	2a00      	cmp	r2, #0
 80139b4:	4691      	mov	r9, r2
 80139b6:	dd07      	ble.n	80139c8 <_printf_float+0x2e8>
 80139b8:	4613      	mov	r3, r2
 80139ba:	4631      	mov	r1, r6
 80139bc:	4642      	mov	r2, r8
 80139be:	4628      	mov	r0, r5
 80139c0:	47b8      	blx	r7
 80139c2:	3001      	adds	r0, #1
 80139c4:	f43f aee9 	beq.w	801379a <_printf_float+0xba>
 80139c8:	f104 031a 	add.w	r3, r4, #26
 80139cc:	f04f 0b00 	mov.w	fp, #0
 80139d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80139d4:	9306      	str	r3, [sp, #24]
 80139d6:	e015      	b.n	8013a04 <_printf_float+0x324>
 80139d8:	7fefffff 	.word	0x7fefffff
 80139dc:	0801811c 	.word	0x0801811c
 80139e0:	08018118 	.word	0x08018118
 80139e4:	08018124 	.word	0x08018124
 80139e8:	08018120 	.word	0x08018120
 80139ec:	08018343 	.word	0x08018343
 80139f0:	2301      	movs	r3, #1
 80139f2:	9a06      	ldr	r2, [sp, #24]
 80139f4:	4631      	mov	r1, r6
 80139f6:	4628      	mov	r0, r5
 80139f8:	47b8      	blx	r7
 80139fa:	3001      	adds	r0, #1
 80139fc:	f43f aecd 	beq.w	801379a <_printf_float+0xba>
 8013a00:	f10b 0b01 	add.w	fp, fp, #1
 8013a04:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013a08:	ebaa 0309 	sub.w	r3, sl, r9
 8013a0c:	455b      	cmp	r3, fp
 8013a0e:	dcef      	bgt.n	80139f0 <_printf_float+0x310>
 8013a10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013a14:	429a      	cmp	r2, r3
 8013a16:	44d0      	add	r8, sl
 8013a18:	db15      	blt.n	8013a46 <_printf_float+0x366>
 8013a1a:	6823      	ldr	r3, [r4, #0]
 8013a1c:	07da      	lsls	r2, r3, #31
 8013a1e:	d412      	bmi.n	8013a46 <_printf_float+0x366>
 8013a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013a24:	eba3 020a 	sub.w	r2, r3, sl
 8013a28:	eba3 0a01 	sub.w	sl, r3, r1
 8013a2c:	4592      	cmp	sl, r2
 8013a2e:	bfa8      	it	ge
 8013a30:	4692      	movge	sl, r2
 8013a32:	f1ba 0f00 	cmp.w	sl, #0
 8013a36:	dc0e      	bgt.n	8013a56 <_printf_float+0x376>
 8013a38:	f04f 0800 	mov.w	r8, #0
 8013a3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013a40:	f104 091a 	add.w	r9, r4, #26
 8013a44:	e019      	b.n	8013a7a <_printf_float+0x39a>
 8013a46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013a4a:	4631      	mov	r1, r6
 8013a4c:	4628      	mov	r0, r5
 8013a4e:	47b8      	blx	r7
 8013a50:	3001      	adds	r0, #1
 8013a52:	d1e5      	bne.n	8013a20 <_printf_float+0x340>
 8013a54:	e6a1      	b.n	801379a <_printf_float+0xba>
 8013a56:	4653      	mov	r3, sl
 8013a58:	4642      	mov	r2, r8
 8013a5a:	4631      	mov	r1, r6
 8013a5c:	4628      	mov	r0, r5
 8013a5e:	47b8      	blx	r7
 8013a60:	3001      	adds	r0, #1
 8013a62:	d1e9      	bne.n	8013a38 <_printf_float+0x358>
 8013a64:	e699      	b.n	801379a <_printf_float+0xba>
 8013a66:	2301      	movs	r3, #1
 8013a68:	464a      	mov	r2, r9
 8013a6a:	4631      	mov	r1, r6
 8013a6c:	4628      	mov	r0, r5
 8013a6e:	47b8      	blx	r7
 8013a70:	3001      	adds	r0, #1
 8013a72:	f43f ae92 	beq.w	801379a <_printf_float+0xba>
 8013a76:	f108 0801 	add.w	r8, r8, #1
 8013a7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013a7e:	1a9b      	subs	r3, r3, r2
 8013a80:	eba3 030a 	sub.w	r3, r3, sl
 8013a84:	4543      	cmp	r3, r8
 8013a86:	dcee      	bgt.n	8013a66 <_printf_float+0x386>
 8013a88:	e74a      	b.n	8013920 <_printf_float+0x240>
 8013a8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a8c:	2a01      	cmp	r2, #1
 8013a8e:	dc01      	bgt.n	8013a94 <_printf_float+0x3b4>
 8013a90:	07db      	lsls	r3, r3, #31
 8013a92:	d53a      	bpl.n	8013b0a <_printf_float+0x42a>
 8013a94:	2301      	movs	r3, #1
 8013a96:	4642      	mov	r2, r8
 8013a98:	4631      	mov	r1, r6
 8013a9a:	4628      	mov	r0, r5
 8013a9c:	47b8      	blx	r7
 8013a9e:	3001      	adds	r0, #1
 8013aa0:	f43f ae7b 	beq.w	801379a <_printf_float+0xba>
 8013aa4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013aa8:	4631      	mov	r1, r6
 8013aaa:	4628      	mov	r0, r5
 8013aac:	47b8      	blx	r7
 8013aae:	3001      	adds	r0, #1
 8013ab0:	f108 0801 	add.w	r8, r8, #1
 8013ab4:	f43f ae71 	beq.w	801379a <_printf_float+0xba>
 8013ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013aba:	2200      	movs	r2, #0
 8013abc:	f103 3aff 	add.w	sl, r3, #4294967295
 8013ac0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	f7ed f817 	bl	8000af8 <__aeabi_dcmpeq>
 8013aca:	b9c8      	cbnz	r0, 8013b00 <_printf_float+0x420>
 8013acc:	4653      	mov	r3, sl
 8013ace:	4642      	mov	r2, r8
 8013ad0:	4631      	mov	r1, r6
 8013ad2:	4628      	mov	r0, r5
 8013ad4:	47b8      	blx	r7
 8013ad6:	3001      	adds	r0, #1
 8013ad8:	d10e      	bne.n	8013af8 <_printf_float+0x418>
 8013ada:	e65e      	b.n	801379a <_printf_float+0xba>
 8013adc:	2301      	movs	r3, #1
 8013ade:	4652      	mov	r2, sl
 8013ae0:	4631      	mov	r1, r6
 8013ae2:	4628      	mov	r0, r5
 8013ae4:	47b8      	blx	r7
 8013ae6:	3001      	adds	r0, #1
 8013ae8:	f43f ae57 	beq.w	801379a <_printf_float+0xba>
 8013aec:	f108 0801 	add.w	r8, r8, #1
 8013af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013af2:	3b01      	subs	r3, #1
 8013af4:	4543      	cmp	r3, r8
 8013af6:	dcf1      	bgt.n	8013adc <_printf_float+0x3fc>
 8013af8:	464b      	mov	r3, r9
 8013afa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013afe:	e6de      	b.n	80138be <_printf_float+0x1de>
 8013b00:	f04f 0800 	mov.w	r8, #0
 8013b04:	f104 0a1a 	add.w	sl, r4, #26
 8013b08:	e7f2      	b.n	8013af0 <_printf_float+0x410>
 8013b0a:	2301      	movs	r3, #1
 8013b0c:	e7df      	b.n	8013ace <_printf_float+0x3ee>
 8013b0e:	2301      	movs	r3, #1
 8013b10:	464a      	mov	r2, r9
 8013b12:	4631      	mov	r1, r6
 8013b14:	4628      	mov	r0, r5
 8013b16:	47b8      	blx	r7
 8013b18:	3001      	adds	r0, #1
 8013b1a:	f43f ae3e 	beq.w	801379a <_printf_float+0xba>
 8013b1e:	f108 0801 	add.w	r8, r8, #1
 8013b22:	68e3      	ldr	r3, [r4, #12]
 8013b24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013b26:	1a9b      	subs	r3, r3, r2
 8013b28:	4543      	cmp	r3, r8
 8013b2a:	dcf0      	bgt.n	8013b0e <_printf_float+0x42e>
 8013b2c:	e6fc      	b.n	8013928 <_printf_float+0x248>
 8013b2e:	f04f 0800 	mov.w	r8, #0
 8013b32:	f104 0919 	add.w	r9, r4, #25
 8013b36:	e7f4      	b.n	8013b22 <_printf_float+0x442>
 8013b38:	2900      	cmp	r1, #0
 8013b3a:	f43f ae8b 	beq.w	8013854 <_printf_float+0x174>
 8013b3e:	2300      	movs	r3, #0
 8013b40:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013b44:	ab09      	add	r3, sp, #36	; 0x24
 8013b46:	9300      	str	r3, [sp, #0]
 8013b48:	ec49 8b10 	vmov	d0, r8, r9
 8013b4c:	6022      	str	r2, [r4, #0]
 8013b4e:	f8cd a004 	str.w	sl, [sp, #4]
 8013b52:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013b56:	4628      	mov	r0, r5
 8013b58:	f7ff fd2d 	bl	80135b6 <__cvt>
 8013b5c:	4680      	mov	r8, r0
 8013b5e:	e648      	b.n	80137f2 <_printf_float+0x112>

08013b60 <_printf_common>:
 8013b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b64:	4691      	mov	r9, r2
 8013b66:	461f      	mov	r7, r3
 8013b68:	688a      	ldr	r2, [r1, #8]
 8013b6a:	690b      	ldr	r3, [r1, #16]
 8013b6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013b70:	4293      	cmp	r3, r2
 8013b72:	bfb8      	it	lt
 8013b74:	4613      	movlt	r3, r2
 8013b76:	f8c9 3000 	str.w	r3, [r9]
 8013b7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013b7e:	4606      	mov	r6, r0
 8013b80:	460c      	mov	r4, r1
 8013b82:	b112      	cbz	r2, 8013b8a <_printf_common+0x2a>
 8013b84:	3301      	adds	r3, #1
 8013b86:	f8c9 3000 	str.w	r3, [r9]
 8013b8a:	6823      	ldr	r3, [r4, #0]
 8013b8c:	0699      	lsls	r1, r3, #26
 8013b8e:	bf42      	ittt	mi
 8013b90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013b94:	3302      	addmi	r3, #2
 8013b96:	f8c9 3000 	strmi.w	r3, [r9]
 8013b9a:	6825      	ldr	r5, [r4, #0]
 8013b9c:	f015 0506 	ands.w	r5, r5, #6
 8013ba0:	d107      	bne.n	8013bb2 <_printf_common+0x52>
 8013ba2:	f104 0a19 	add.w	sl, r4, #25
 8013ba6:	68e3      	ldr	r3, [r4, #12]
 8013ba8:	f8d9 2000 	ldr.w	r2, [r9]
 8013bac:	1a9b      	subs	r3, r3, r2
 8013bae:	42ab      	cmp	r3, r5
 8013bb0:	dc28      	bgt.n	8013c04 <_printf_common+0xa4>
 8013bb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013bb6:	6822      	ldr	r2, [r4, #0]
 8013bb8:	3300      	adds	r3, #0
 8013bba:	bf18      	it	ne
 8013bbc:	2301      	movne	r3, #1
 8013bbe:	0692      	lsls	r2, r2, #26
 8013bc0:	d42d      	bmi.n	8013c1e <_printf_common+0xbe>
 8013bc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013bc6:	4639      	mov	r1, r7
 8013bc8:	4630      	mov	r0, r6
 8013bca:	47c0      	blx	r8
 8013bcc:	3001      	adds	r0, #1
 8013bce:	d020      	beq.n	8013c12 <_printf_common+0xb2>
 8013bd0:	6823      	ldr	r3, [r4, #0]
 8013bd2:	68e5      	ldr	r5, [r4, #12]
 8013bd4:	f8d9 2000 	ldr.w	r2, [r9]
 8013bd8:	f003 0306 	and.w	r3, r3, #6
 8013bdc:	2b04      	cmp	r3, #4
 8013bde:	bf08      	it	eq
 8013be0:	1aad      	subeq	r5, r5, r2
 8013be2:	68a3      	ldr	r3, [r4, #8]
 8013be4:	6922      	ldr	r2, [r4, #16]
 8013be6:	bf0c      	ite	eq
 8013be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013bec:	2500      	movne	r5, #0
 8013bee:	4293      	cmp	r3, r2
 8013bf0:	bfc4      	itt	gt
 8013bf2:	1a9b      	subgt	r3, r3, r2
 8013bf4:	18ed      	addgt	r5, r5, r3
 8013bf6:	f04f 0900 	mov.w	r9, #0
 8013bfa:	341a      	adds	r4, #26
 8013bfc:	454d      	cmp	r5, r9
 8013bfe:	d11a      	bne.n	8013c36 <_printf_common+0xd6>
 8013c00:	2000      	movs	r0, #0
 8013c02:	e008      	b.n	8013c16 <_printf_common+0xb6>
 8013c04:	2301      	movs	r3, #1
 8013c06:	4652      	mov	r2, sl
 8013c08:	4639      	mov	r1, r7
 8013c0a:	4630      	mov	r0, r6
 8013c0c:	47c0      	blx	r8
 8013c0e:	3001      	adds	r0, #1
 8013c10:	d103      	bne.n	8013c1a <_printf_common+0xba>
 8013c12:	f04f 30ff 	mov.w	r0, #4294967295
 8013c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c1a:	3501      	adds	r5, #1
 8013c1c:	e7c3      	b.n	8013ba6 <_printf_common+0x46>
 8013c1e:	18e1      	adds	r1, r4, r3
 8013c20:	1c5a      	adds	r2, r3, #1
 8013c22:	2030      	movs	r0, #48	; 0x30
 8013c24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013c28:	4422      	add	r2, r4
 8013c2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013c2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013c32:	3302      	adds	r3, #2
 8013c34:	e7c5      	b.n	8013bc2 <_printf_common+0x62>
 8013c36:	2301      	movs	r3, #1
 8013c38:	4622      	mov	r2, r4
 8013c3a:	4639      	mov	r1, r7
 8013c3c:	4630      	mov	r0, r6
 8013c3e:	47c0      	blx	r8
 8013c40:	3001      	adds	r0, #1
 8013c42:	d0e6      	beq.n	8013c12 <_printf_common+0xb2>
 8013c44:	f109 0901 	add.w	r9, r9, #1
 8013c48:	e7d8      	b.n	8013bfc <_printf_common+0x9c>
	...

08013c4c <_printf_i>:
 8013c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013c50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013c54:	460c      	mov	r4, r1
 8013c56:	7e09      	ldrb	r1, [r1, #24]
 8013c58:	b085      	sub	sp, #20
 8013c5a:	296e      	cmp	r1, #110	; 0x6e
 8013c5c:	4617      	mov	r7, r2
 8013c5e:	4606      	mov	r6, r0
 8013c60:	4698      	mov	r8, r3
 8013c62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013c64:	f000 80b3 	beq.w	8013dce <_printf_i+0x182>
 8013c68:	d822      	bhi.n	8013cb0 <_printf_i+0x64>
 8013c6a:	2963      	cmp	r1, #99	; 0x63
 8013c6c:	d036      	beq.n	8013cdc <_printf_i+0x90>
 8013c6e:	d80a      	bhi.n	8013c86 <_printf_i+0x3a>
 8013c70:	2900      	cmp	r1, #0
 8013c72:	f000 80b9 	beq.w	8013de8 <_printf_i+0x19c>
 8013c76:	2958      	cmp	r1, #88	; 0x58
 8013c78:	f000 8083 	beq.w	8013d82 <_printf_i+0x136>
 8013c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013c80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013c84:	e032      	b.n	8013cec <_printf_i+0xa0>
 8013c86:	2964      	cmp	r1, #100	; 0x64
 8013c88:	d001      	beq.n	8013c8e <_printf_i+0x42>
 8013c8a:	2969      	cmp	r1, #105	; 0x69
 8013c8c:	d1f6      	bne.n	8013c7c <_printf_i+0x30>
 8013c8e:	6820      	ldr	r0, [r4, #0]
 8013c90:	6813      	ldr	r3, [r2, #0]
 8013c92:	0605      	lsls	r5, r0, #24
 8013c94:	f103 0104 	add.w	r1, r3, #4
 8013c98:	d52a      	bpl.n	8013cf0 <_printf_i+0xa4>
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	6011      	str	r1, [r2, #0]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	da03      	bge.n	8013caa <_printf_i+0x5e>
 8013ca2:	222d      	movs	r2, #45	; 0x2d
 8013ca4:	425b      	negs	r3, r3
 8013ca6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013caa:	486f      	ldr	r0, [pc, #444]	; (8013e68 <_printf_i+0x21c>)
 8013cac:	220a      	movs	r2, #10
 8013cae:	e039      	b.n	8013d24 <_printf_i+0xd8>
 8013cb0:	2973      	cmp	r1, #115	; 0x73
 8013cb2:	f000 809d 	beq.w	8013df0 <_printf_i+0x1a4>
 8013cb6:	d808      	bhi.n	8013cca <_printf_i+0x7e>
 8013cb8:	296f      	cmp	r1, #111	; 0x6f
 8013cba:	d020      	beq.n	8013cfe <_printf_i+0xb2>
 8013cbc:	2970      	cmp	r1, #112	; 0x70
 8013cbe:	d1dd      	bne.n	8013c7c <_printf_i+0x30>
 8013cc0:	6823      	ldr	r3, [r4, #0]
 8013cc2:	f043 0320 	orr.w	r3, r3, #32
 8013cc6:	6023      	str	r3, [r4, #0]
 8013cc8:	e003      	b.n	8013cd2 <_printf_i+0x86>
 8013cca:	2975      	cmp	r1, #117	; 0x75
 8013ccc:	d017      	beq.n	8013cfe <_printf_i+0xb2>
 8013cce:	2978      	cmp	r1, #120	; 0x78
 8013cd0:	d1d4      	bne.n	8013c7c <_printf_i+0x30>
 8013cd2:	2378      	movs	r3, #120	; 0x78
 8013cd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013cd8:	4864      	ldr	r0, [pc, #400]	; (8013e6c <_printf_i+0x220>)
 8013cda:	e055      	b.n	8013d88 <_printf_i+0x13c>
 8013cdc:	6813      	ldr	r3, [r2, #0]
 8013cde:	1d19      	adds	r1, r3, #4
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	6011      	str	r1, [r2, #0]
 8013ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013cec:	2301      	movs	r3, #1
 8013cee:	e08c      	b.n	8013e0a <_printf_i+0x1be>
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	6011      	str	r1, [r2, #0]
 8013cf4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013cf8:	bf18      	it	ne
 8013cfa:	b21b      	sxthne	r3, r3
 8013cfc:	e7cf      	b.n	8013c9e <_printf_i+0x52>
 8013cfe:	6813      	ldr	r3, [r2, #0]
 8013d00:	6825      	ldr	r5, [r4, #0]
 8013d02:	1d18      	adds	r0, r3, #4
 8013d04:	6010      	str	r0, [r2, #0]
 8013d06:	0628      	lsls	r0, r5, #24
 8013d08:	d501      	bpl.n	8013d0e <_printf_i+0xc2>
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	e002      	b.n	8013d14 <_printf_i+0xc8>
 8013d0e:	0668      	lsls	r0, r5, #25
 8013d10:	d5fb      	bpl.n	8013d0a <_printf_i+0xbe>
 8013d12:	881b      	ldrh	r3, [r3, #0]
 8013d14:	4854      	ldr	r0, [pc, #336]	; (8013e68 <_printf_i+0x21c>)
 8013d16:	296f      	cmp	r1, #111	; 0x6f
 8013d18:	bf14      	ite	ne
 8013d1a:	220a      	movne	r2, #10
 8013d1c:	2208      	moveq	r2, #8
 8013d1e:	2100      	movs	r1, #0
 8013d20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013d24:	6865      	ldr	r5, [r4, #4]
 8013d26:	60a5      	str	r5, [r4, #8]
 8013d28:	2d00      	cmp	r5, #0
 8013d2a:	f2c0 8095 	blt.w	8013e58 <_printf_i+0x20c>
 8013d2e:	6821      	ldr	r1, [r4, #0]
 8013d30:	f021 0104 	bic.w	r1, r1, #4
 8013d34:	6021      	str	r1, [r4, #0]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d13d      	bne.n	8013db6 <_printf_i+0x16a>
 8013d3a:	2d00      	cmp	r5, #0
 8013d3c:	f040 808e 	bne.w	8013e5c <_printf_i+0x210>
 8013d40:	4665      	mov	r5, ip
 8013d42:	2a08      	cmp	r2, #8
 8013d44:	d10b      	bne.n	8013d5e <_printf_i+0x112>
 8013d46:	6823      	ldr	r3, [r4, #0]
 8013d48:	07db      	lsls	r3, r3, #31
 8013d4a:	d508      	bpl.n	8013d5e <_printf_i+0x112>
 8013d4c:	6923      	ldr	r3, [r4, #16]
 8013d4e:	6862      	ldr	r2, [r4, #4]
 8013d50:	429a      	cmp	r2, r3
 8013d52:	bfde      	ittt	le
 8013d54:	2330      	movle	r3, #48	; 0x30
 8013d56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013d5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013d5e:	ebac 0305 	sub.w	r3, ip, r5
 8013d62:	6123      	str	r3, [r4, #16]
 8013d64:	f8cd 8000 	str.w	r8, [sp]
 8013d68:	463b      	mov	r3, r7
 8013d6a:	aa03      	add	r2, sp, #12
 8013d6c:	4621      	mov	r1, r4
 8013d6e:	4630      	mov	r0, r6
 8013d70:	f7ff fef6 	bl	8013b60 <_printf_common>
 8013d74:	3001      	adds	r0, #1
 8013d76:	d14d      	bne.n	8013e14 <_printf_i+0x1c8>
 8013d78:	f04f 30ff 	mov.w	r0, #4294967295
 8013d7c:	b005      	add	sp, #20
 8013d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d82:	4839      	ldr	r0, [pc, #228]	; (8013e68 <_printf_i+0x21c>)
 8013d84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013d88:	6813      	ldr	r3, [r2, #0]
 8013d8a:	6821      	ldr	r1, [r4, #0]
 8013d8c:	1d1d      	adds	r5, r3, #4
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	6015      	str	r5, [r2, #0]
 8013d92:	060a      	lsls	r2, r1, #24
 8013d94:	d50b      	bpl.n	8013dae <_printf_i+0x162>
 8013d96:	07ca      	lsls	r2, r1, #31
 8013d98:	bf44      	itt	mi
 8013d9a:	f041 0120 	orrmi.w	r1, r1, #32
 8013d9e:	6021      	strmi	r1, [r4, #0]
 8013da0:	b91b      	cbnz	r3, 8013daa <_printf_i+0x15e>
 8013da2:	6822      	ldr	r2, [r4, #0]
 8013da4:	f022 0220 	bic.w	r2, r2, #32
 8013da8:	6022      	str	r2, [r4, #0]
 8013daa:	2210      	movs	r2, #16
 8013dac:	e7b7      	b.n	8013d1e <_printf_i+0xd2>
 8013dae:	064d      	lsls	r5, r1, #25
 8013db0:	bf48      	it	mi
 8013db2:	b29b      	uxthmi	r3, r3
 8013db4:	e7ef      	b.n	8013d96 <_printf_i+0x14a>
 8013db6:	4665      	mov	r5, ip
 8013db8:	fbb3 f1f2 	udiv	r1, r3, r2
 8013dbc:	fb02 3311 	mls	r3, r2, r1, r3
 8013dc0:	5cc3      	ldrb	r3, [r0, r3]
 8013dc2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013dc6:	460b      	mov	r3, r1
 8013dc8:	2900      	cmp	r1, #0
 8013dca:	d1f5      	bne.n	8013db8 <_printf_i+0x16c>
 8013dcc:	e7b9      	b.n	8013d42 <_printf_i+0xf6>
 8013dce:	6813      	ldr	r3, [r2, #0]
 8013dd0:	6825      	ldr	r5, [r4, #0]
 8013dd2:	6961      	ldr	r1, [r4, #20]
 8013dd4:	1d18      	adds	r0, r3, #4
 8013dd6:	6010      	str	r0, [r2, #0]
 8013dd8:	0628      	lsls	r0, r5, #24
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	d501      	bpl.n	8013de2 <_printf_i+0x196>
 8013dde:	6019      	str	r1, [r3, #0]
 8013de0:	e002      	b.n	8013de8 <_printf_i+0x19c>
 8013de2:	066a      	lsls	r2, r5, #25
 8013de4:	d5fb      	bpl.n	8013dde <_printf_i+0x192>
 8013de6:	8019      	strh	r1, [r3, #0]
 8013de8:	2300      	movs	r3, #0
 8013dea:	6123      	str	r3, [r4, #16]
 8013dec:	4665      	mov	r5, ip
 8013dee:	e7b9      	b.n	8013d64 <_printf_i+0x118>
 8013df0:	6813      	ldr	r3, [r2, #0]
 8013df2:	1d19      	adds	r1, r3, #4
 8013df4:	6011      	str	r1, [r2, #0]
 8013df6:	681d      	ldr	r5, [r3, #0]
 8013df8:	6862      	ldr	r2, [r4, #4]
 8013dfa:	2100      	movs	r1, #0
 8013dfc:	4628      	mov	r0, r5
 8013dfe:	f7ec fa07 	bl	8000210 <memchr>
 8013e02:	b108      	cbz	r0, 8013e08 <_printf_i+0x1bc>
 8013e04:	1b40      	subs	r0, r0, r5
 8013e06:	6060      	str	r0, [r4, #4]
 8013e08:	6863      	ldr	r3, [r4, #4]
 8013e0a:	6123      	str	r3, [r4, #16]
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013e12:	e7a7      	b.n	8013d64 <_printf_i+0x118>
 8013e14:	6923      	ldr	r3, [r4, #16]
 8013e16:	462a      	mov	r2, r5
 8013e18:	4639      	mov	r1, r7
 8013e1a:	4630      	mov	r0, r6
 8013e1c:	47c0      	blx	r8
 8013e1e:	3001      	adds	r0, #1
 8013e20:	d0aa      	beq.n	8013d78 <_printf_i+0x12c>
 8013e22:	6823      	ldr	r3, [r4, #0]
 8013e24:	079b      	lsls	r3, r3, #30
 8013e26:	d413      	bmi.n	8013e50 <_printf_i+0x204>
 8013e28:	68e0      	ldr	r0, [r4, #12]
 8013e2a:	9b03      	ldr	r3, [sp, #12]
 8013e2c:	4298      	cmp	r0, r3
 8013e2e:	bfb8      	it	lt
 8013e30:	4618      	movlt	r0, r3
 8013e32:	e7a3      	b.n	8013d7c <_printf_i+0x130>
 8013e34:	2301      	movs	r3, #1
 8013e36:	464a      	mov	r2, r9
 8013e38:	4639      	mov	r1, r7
 8013e3a:	4630      	mov	r0, r6
 8013e3c:	47c0      	blx	r8
 8013e3e:	3001      	adds	r0, #1
 8013e40:	d09a      	beq.n	8013d78 <_printf_i+0x12c>
 8013e42:	3501      	adds	r5, #1
 8013e44:	68e3      	ldr	r3, [r4, #12]
 8013e46:	9a03      	ldr	r2, [sp, #12]
 8013e48:	1a9b      	subs	r3, r3, r2
 8013e4a:	42ab      	cmp	r3, r5
 8013e4c:	dcf2      	bgt.n	8013e34 <_printf_i+0x1e8>
 8013e4e:	e7eb      	b.n	8013e28 <_printf_i+0x1dc>
 8013e50:	2500      	movs	r5, #0
 8013e52:	f104 0919 	add.w	r9, r4, #25
 8013e56:	e7f5      	b.n	8013e44 <_printf_i+0x1f8>
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d1ac      	bne.n	8013db6 <_printf_i+0x16a>
 8013e5c:	7803      	ldrb	r3, [r0, #0]
 8013e5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013e62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013e66:	e76c      	b.n	8013d42 <_printf_i+0xf6>
 8013e68:	08018128 	.word	0x08018128
 8013e6c:	08018139 	.word	0x08018139

08013e70 <_scanf_float>:
 8013e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e74:	469a      	mov	sl, r3
 8013e76:	688b      	ldr	r3, [r1, #8]
 8013e78:	4616      	mov	r6, r2
 8013e7a:	1e5a      	subs	r2, r3, #1
 8013e7c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013e80:	b087      	sub	sp, #28
 8013e82:	bf83      	ittte	hi
 8013e84:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8013e88:	189b      	addhi	r3, r3, r2
 8013e8a:	9301      	strhi	r3, [sp, #4]
 8013e8c:	2300      	movls	r3, #0
 8013e8e:	bf86      	itte	hi
 8013e90:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013e94:	608b      	strhi	r3, [r1, #8]
 8013e96:	9301      	strls	r3, [sp, #4]
 8013e98:	680b      	ldr	r3, [r1, #0]
 8013e9a:	4688      	mov	r8, r1
 8013e9c:	f04f 0b00 	mov.w	fp, #0
 8013ea0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013ea4:	f848 3b1c 	str.w	r3, [r8], #28
 8013ea8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8013eac:	4607      	mov	r7, r0
 8013eae:	460c      	mov	r4, r1
 8013eb0:	4645      	mov	r5, r8
 8013eb2:	465a      	mov	r2, fp
 8013eb4:	46d9      	mov	r9, fp
 8013eb6:	f8cd b008 	str.w	fp, [sp, #8]
 8013eba:	68a1      	ldr	r1, [r4, #8]
 8013ebc:	b181      	cbz	r1, 8013ee0 <_scanf_float+0x70>
 8013ebe:	6833      	ldr	r3, [r6, #0]
 8013ec0:	781b      	ldrb	r3, [r3, #0]
 8013ec2:	2b49      	cmp	r3, #73	; 0x49
 8013ec4:	d071      	beq.n	8013faa <_scanf_float+0x13a>
 8013ec6:	d84d      	bhi.n	8013f64 <_scanf_float+0xf4>
 8013ec8:	2b39      	cmp	r3, #57	; 0x39
 8013eca:	d840      	bhi.n	8013f4e <_scanf_float+0xde>
 8013ecc:	2b31      	cmp	r3, #49	; 0x31
 8013ece:	f080 8088 	bcs.w	8013fe2 <_scanf_float+0x172>
 8013ed2:	2b2d      	cmp	r3, #45	; 0x2d
 8013ed4:	f000 8090 	beq.w	8013ff8 <_scanf_float+0x188>
 8013ed8:	d815      	bhi.n	8013f06 <_scanf_float+0x96>
 8013eda:	2b2b      	cmp	r3, #43	; 0x2b
 8013edc:	f000 808c 	beq.w	8013ff8 <_scanf_float+0x188>
 8013ee0:	f1b9 0f00 	cmp.w	r9, #0
 8013ee4:	d003      	beq.n	8013eee <_scanf_float+0x7e>
 8013ee6:	6823      	ldr	r3, [r4, #0]
 8013ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013eec:	6023      	str	r3, [r4, #0]
 8013eee:	3a01      	subs	r2, #1
 8013ef0:	2a01      	cmp	r2, #1
 8013ef2:	f200 80ea 	bhi.w	80140ca <_scanf_float+0x25a>
 8013ef6:	4545      	cmp	r5, r8
 8013ef8:	f200 80dc 	bhi.w	80140b4 <_scanf_float+0x244>
 8013efc:	2601      	movs	r6, #1
 8013efe:	4630      	mov	r0, r6
 8013f00:	b007      	add	sp, #28
 8013f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f06:	2b2e      	cmp	r3, #46	; 0x2e
 8013f08:	f000 809f 	beq.w	801404a <_scanf_float+0x1da>
 8013f0c:	2b30      	cmp	r3, #48	; 0x30
 8013f0e:	d1e7      	bne.n	8013ee0 <_scanf_float+0x70>
 8013f10:	6820      	ldr	r0, [r4, #0]
 8013f12:	f410 7f80 	tst.w	r0, #256	; 0x100
 8013f16:	d064      	beq.n	8013fe2 <_scanf_float+0x172>
 8013f18:	9b01      	ldr	r3, [sp, #4]
 8013f1a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8013f1e:	6020      	str	r0, [r4, #0]
 8013f20:	f109 0901 	add.w	r9, r9, #1
 8013f24:	b11b      	cbz	r3, 8013f2e <_scanf_float+0xbe>
 8013f26:	3b01      	subs	r3, #1
 8013f28:	3101      	adds	r1, #1
 8013f2a:	9301      	str	r3, [sp, #4]
 8013f2c:	60a1      	str	r1, [r4, #8]
 8013f2e:	68a3      	ldr	r3, [r4, #8]
 8013f30:	3b01      	subs	r3, #1
 8013f32:	60a3      	str	r3, [r4, #8]
 8013f34:	6923      	ldr	r3, [r4, #16]
 8013f36:	3301      	adds	r3, #1
 8013f38:	6123      	str	r3, [r4, #16]
 8013f3a:	6873      	ldr	r3, [r6, #4]
 8013f3c:	3b01      	subs	r3, #1
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	6073      	str	r3, [r6, #4]
 8013f42:	f340 80ac 	ble.w	801409e <_scanf_float+0x22e>
 8013f46:	6833      	ldr	r3, [r6, #0]
 8013f48:	3301      	adds	r3, #1
 8013f4a:	6033      	str	r3, [r6, #0]
 8013f4c:	e7b5      	b.n	8013eba <_scanf_float+0x4a>
 8013f4e:	2b45      	cmp	r3, #69	; 0x45
 8013f50:	f000 8085 	beq.w	801405e <_scanf_float+0x1ee>
 8013f54:	2b46      	cmp	r3, #70	; 0x46
 8013f56:	d06a      	beq.n	801402e <_scanf_float+0x1be>
 8013f58:	2b41      	cmp	r3, #65	; 0x41
 8013f5a:	d1c1      	bne.n	8013ee0 <_scanf_float+0x70>
 8013f5c:	2a01      	cmp	r2, #1
 8013f5e:	d1bf      	bne.n	8013ee0 <_scanf_float+0x70>
 8013f60:	2202      	movs	r2, #2
 8013f62:	e046      	b.n	8013ff2 <_scanf_float+0x182>
 8013f64:	2b65      	cmp	r3, #101	; 0x65
 8013f66:	d07a      	beq.n	801405e <_scanf_float+0x1ee>
 8013f68:	d818      	bhi.n	8013f9c <_scanf_float+0x12c>
 8013f6a:	2b54      	cmp	r3, #84	; 0x54
 8013f6c:	d066      	beq.n	801403c <_scanf_float+0x1cc>
 8013f6e:	d811      	bhi.n	8013f94 <_scanf_float+0x124>
 8013f70:	2b4e      	cmp	r3, #78	; 0x4e
 8013f72:	d1b5      	bne.n	8013ee0 <_scanf_float+0x70>
 8013f74:	2a00      	cmp	r2, #0
 8013f76:	d146      	bne.n	8014006 <_scanf_float+0x196>
 8013f78:	f1b9 0f00 	cmp.w	r9, #0
 8013f7c:	d145      	bne.n	801400a <_scanf_float+0x19a>
 8013f7e:	6821      	ldr	r1, [r4, #0]
 8013f80:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013f84:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013f88:	d13f      	bne.n	801400a <_scanf_float+0x19a>
 8013f8a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013f8e:	6021      	str	r1, [r4, #0]
 8013f90:	2201      	movs	r2, #1
 8013f92:	e02e      	b.n	8013ff2 <_scanf_float+0x182>
 8013f94:	2b59      	cmp	r3, #89	; 0x59
 8013f96:	d01e      	beq.n	8013fd6 <_scanf_float+0x166>
 8013f98:	2b61      	cmp	r3, #97	; 0x61
 8013f9a:	e7de      	b.n	8013f5a <_scanf_float+0xea>
 8013f9c:	2b6e      	cmp	r3, #110	; 0x6e
 8013f9e:	d0e9      	beq.n	8013f74 <_scanf_float+0x104>
 8013fa0:	d815      	bhi.n	8013fce <_scanf_float+0x15e>
 8013fa2:	2b66      	cmp	r3, #102	; 0x66
 8013fa4:	d043      	beq.n	801402e <_scanf_float+0x1be>
 8013fa6:	2b69      	cmp	r3, #105	; 0x69
 8013fa8:	d19a      	bne.n	8013ee0 <_scanf_float+0x70>
 8013faa:	f1bb 0f00 	cmp.w	fp, #0
 8013fae:	d138      	bne.n	8014022 <_scanf_float+0x1b2>
 8013fb0:	f1b9 0f00 	cmp.w	r9, #0
 8013fb4:	d197      	bne.n	8013ee6 <_scanf_float+0x76>
 8013fb6:	6821      	ldr	r1, [r4, #0]
 8013fb8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013fbc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013fc0:	d195      	bne.n	8013eee <_scanf_float+0x7e>
 8013fc2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013fc6:	6021      	str	r1, [r4, #0]
 8013fc8:	f04f 0b01 	mov.w	fp, #1
 8013fcc:	e011      	b.n	8013ff2 <_scanf_float+0x182>
 8013fce:	2b74      	cmp	r3, #116	; 0x74
 8013fd0:	d034      	beq.n	801403c <_scanf_float+0x1cc>
 8013fd2:	2b79      	cmp	r3, #121	; 0x79
 8013fd4:	d184      	bne.n	8013ee0 <_scanf_float+0x70>
 8013fd6:	f1bb 0f07 	cmp.w	fp, #7
 8013fda:	d181      	bne.n	8013ee0 <_scanf_float+0x70>
 8013fdc:	f04f 0b08 	mov.w	fp, #8
 8013fe0:	e007      	b.n	8013ff2 <_scanf_float+0x182>
 8013fe2:	eb12 0f0b 	cmn.w	r2, fp
 8013fe6:	f47f af7b 	bne.w	8013ee0 <_scanf_float+0x70>
 8013fea:	6821      	ldr	r1, [r4, #0]
 8013fec:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8013ff0:	6021      	str	r1, [r4, #0]
 8013ff2:	702b      	strb	r3, [r5, #0]
 8013ff4:	3501      	adds	r5, #1
 8013ff6:	e79a      	b.n	8013f2e <_scanf_float+0xbe>
 8013ff8:	6821      	ldr	r1, [r4, #0]
 8013ffa:	0608      	lsls	r0, r1, #24
 8013ffc:	f57f af70 	bpl.w	8013ee0 <_scanf_float+0x70>
 8014000:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014004:	e7f4      	b.n	8013ff0 <_scanf_float+0x180>
 8014006:	2a02      	cmp	r2, #2
 8014008:	d047      	beq.n	801409a <_scanf_float+0x22a>
 801400a:	f1bb 0f01 	cmp.w	fp, #1
 801400e:	d003      	beq.n	8014018 <_scanf_float+0x1a8>
 8014010:	f1bb 0f04 	cmp.w	fp, #4
 8014014:	f47f af64 	bne.w	8013ee0 <_scanf_float+0x70>
 8014018:	f10b 0b01 	add.w	fp, fp, #1
 801401c:	fa5f fb8b 	uxtb.w	fp, fp
 8014020:	e7e7      	b.n	8013ff2 <_scanf_float+0x182>
 8014022:	f1bb 0f03 	cmp.w	fp, #3
 8014026:	d0f7      	beq.n	8014018 <_scanf_float+0x1a8>
 8014028:	f1bb 0f05 	cmp.w	fp, #5
 801402c:	e7f2      	b.n	8014014 <_scanf_float+0x1a4>
 801402e:	f1bb 0f02 	cmp.w	fp, #2
 8014032:	f47f af55 	bne.w	8013ee0 <_scanf_float+0x70>
 8014036:	f04f 0b03 	mov.w	fp, #3
 801403a:	e7da      	b.n	8013ff2 <_scanf_float+0x182>
 801403c:	f1bb 0f06 	cmp.w	fp, #6
 8014040:	f47f af4e 	bne.w	8013ee0 <_scanf_float+0x70>
 8014044:	f04f 0b07 	mov.w	fp, #7
 8014048:	e7d3      	b.n	8013ff2 <_scanf_float+0x182>
 801404a:	6821      	ldr	r1, [r4, #0]
 801404c:	0588      	lsls	r0, r1, #22
 801404e:	f57f af47 	bpl.w	8013ee0 <_scanf_float+0x70>
 8014052:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8014056:	6021      	str	r1, [r4, #0]
 8014058:	f8cd 9008 	str.w	r9, [sp, #8]
 801405c:	e7c9      	b.n	8013ff2 <_scanf_float+0x182>
 801405e:	6821      	ldr	r1, [r4, #0]
 8014060:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8014064:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8014068:	d006      	beq.n	8014078 <_scanf_float+0x208>
 801406a:	0548      	lsls	r0, r1, #21
 801406c:	f57f af38 	bpl.w	8013ee0 <_scanf_float+0x70>
 8014070:	f1b9 0f00 	cmp.w	r9, #0
 8014074:	f43f af3b 	beq.w	8013eee <_scanf_float+0x7e>
 8014078:	0588      	lsls	r0, r1, #22
 801407a:	bf58      	it	pl
 801407c:	9802      	ldrpl	r0, [sp, #8]
 801407e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014082:	bf58      	it	pl
 8014084:	eba9 0000 	subpl.w	r0, r9, r0
 8014088:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801408c:	bf58      	it	pl
 801408e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8014092:	6021      	str	r1, [r4, #0]
 8014094:	f04f 0900 	mov.w	r9, #0
 8014098:	e7ab      	b.n	8013ff2 <_scanf_float+0x182>
 801409a:	2203      	movs	r2, #3
 801409c:	e7a9      	b.n	8013ff2 <_scanf_float+0x182>
 801409e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80140a2:	9205      	str	r2, [sp, #20]
 80140a4:	4631      	mov	r1, r6
 80140a6:	4638      	mov	r0, r7
 80140a8:	4798      	blx	r3
 80140aa:	9a05      	ldr	r2, [sp, #20]
 80140ac:	2800      	cmp	r0, #0
 80140ae:	f43f af04 	beq.w	8013eba <_scanf_float+0x4a>
 80140b2:	e715      	b.n	8013ee0 <_scanf_float+0x70>
 80140b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80140b8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80140bc:	4632      	mov	r2, r6
 80140be:	4638      	mov	r0, r7
 80140c0:	4798      	blx	r3
 80140c2:	6923      	ldr	r3, [r4, #16]
 80140c4:	3b01      	subs	r3, #1
 80140c6:	6123      	str	r3, [r4, #16]
 80140c8:	e715      	b.n	8013ef6 <_scanf_float+0x86>
 80140ca:	f10b 33ff 	add.w	r3, fp, #4294967295
 80140ce:	2b06      	cmp	r3, #6
 80140d0:	d80a      	bhi.n	80140e8 <_scanf_float+0x278>
 80140d2:	f1bb 0f02 	cmp.w	fp, #2
 80140d6:	d968      	bls.n	80141aa <_scanf_float+0x33a>
 80140d8:	f1ab 0b03 	sub.w	fp, fp, #3
 80140dc:	fa5f fb8b 	uxtb.w	fp, fp
 80140e0:	eba5 0b0b 	sub.w	fp, r5, fp
 80140e4:	455d      	cmp	r5, fp
 80140e6:	d14b      	bne.n	8014180 <_scanf_float+0x310>
 80140e8:	6823      	ldr	r3, [r4, #0]
 80140ea:	05da      	lsls	r2, r3, #23
 80140ec:	d51f      	bpl.n	801412e <_scanf_float+0x2be>
 80140ee:	055b      	lsls	r3, r3, #21
 80140f0:	d468      	bmi.n	80141c4 <_scanf_float+0x354>
 80140f2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80140f6:	6923      	ldr	r3, [r4, #16]
 80140f8:	2965      	cmp	r1, #101	; 0x65
 80140fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80140fe:	f105 3bff 	add.w	fp, r5, #4294967295
 8014102:	6123      	str	r3, [r4, #16]
 8014104:	d00d      	beq.n	8014122 <_scanf_float+0x2b2>
 8014106:	2945      	cmp	r1, #69	; 0x45
 8014108:	d00b      	beq.n	8014122 <_scanf_float+0x2b2>
 801410a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801410e:	4632      	mov	r2, r6
 8014110:	4638      	mov	r0, r7
 8014112:	4798      	blx	r3
 8014114:	6923      	ldr	r3, [r4, #16]
 8014116:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801411a:	3b01      	subs	r3, #1
 801411c:	f1a5 0b02 	sub.w	fp, r5, #2
 8014120:	6123      	str	r3, [r4, #16]
 8014122:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014126:	4632      	mov	r2, r6
 8014128:	4638      	mov	r0, r7
 801412a:	4798      	blx	r3
 801412c:	465d      	mov	r5, fp
 801412e:	6826      	ldr	r6, [r4, #0]
 8014130:	f016 0610 	ands.w	r6, r6, #16
 8014134:	d17a      	bne.n	801422c <_scanf_float+0x3bc>
 8014136:	702e      	strb	r6, [r5, #0]
 8014138:	6823      	ldr	r3, [r4, #0]
 801413a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801413e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014142:	d142      	bne.n	80141ca <_scanf_float+0x35a>
 8014144:	9b02      	ldr	r3, [sp, #8]
 8014146:	eba9 0303 	sub.w	r3, r9, r3
 801414a:	425a      	negs	r2, r3
 801414c:	2b00      	cmp	r3, #0
 801414e:	d149      	bne.n	80141e4 <_scanf_float+0x374>
 8014150:	2200      	movs	r2, #0
 8014152:	4641      	mov	r1, r8
 8014154:	4638      	mov	r0, r7
 8014156:	f000 ff0b 	bl	8014f70 <_strtod_r>
 801415a:	6825      	ldr	r5, [r4, #0]
 801415c:	f8da 3000 	ldr.w	r3, [sl]
 8014160:	f015 0f02 	tst.w	r5, #2
 8014164:	f103 0204 	add.w	r2, r3, #4
 8014168:	ec59 8b10 	vmov	r8, r9, d0
 801416c:	f8ca 2000 	str.w	r2, [sl]
 8014170:	d043      	beq.n	80141fa <_scanf_float+0x38a>
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	e9c3 8900 	strd	r8, r9, [r3]
 8014178:	68e3      	ldr	r3, [r4, #12]
 801417a:	3301      	adds	r3, #1
 801417c:	60e3      	str	r3, [r4, #12]
 801417e:	e6be      	b.n	8013efe <_scanf_float+0x8e>
 8014180:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014184:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014188:	4632      	mov	r2, r6
 801418a:	4638      	mov	r0, r7
 801418c:	4798      	blx	r3
 801418e:	6923      	ldr	r3, [r4, #16]
 8014190:	3b01      	subs	r3, #1
 8014192:	6123      	str	r3, [r4, #16]
 8014194:	e7a6      	b.n	80140e4 <_scanf_float+0x274>
 8014196:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801419a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801419e:	4632      	mov	r2, r6
 80141a0:	4638      	mov	r0, r7
 80141a2:	4798      	blx	r3
 80141a4:	6923      	ldr	r3, [r4, #16]
 80141a6:	3b01      	subs	r3, #1
 80141a8:	6123      	str	r3, [r4, #16]
 80141aa:	4545      	cmp	r5, r8
 80141ac:	d8f3      	bhi.n	8014196 <_scanf_float+0x326>
 80141ae:	e6a5      	b.n	8013efc <_scanf_float+0x8c>
 80141b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80141b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80141b8:	4632      	mov	r2, r6
 80141ba:	4638      	mov	r0, r7
 80141bc:	4798      	blx	r3
 80141be:	6923      	ldr	r3, [r4, #16]
 80141c0:	3b01      	subs	r3, #1
 80141c2:	6123      	str	r3, [r4, #16]
 80141c4:	4545      	cmp	r5, r8
 80141c6:	d8f3      	bhi.n	80141b0 <_scanf_float+0x340>
 80141c8:	e698      	b.n	8013efc <_scanf_float+0x8c>
 80141ca:	9b03      	ldr	r3, [sp, #12]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d0bf      	beq.n	8014150 <_scanf_float+0x2e0>
 80141d0:	9904      	ldr	r1, [sp, #16]
 80141d2:	230a      	movs	r3, #10
 80141d4:	4632      	mov	r2, r6
 80141d6:	3101      	adds	r1, #1
 80141d8:	4638      	mov	r0, r7
 80141da:	f000 ff55 	bl	8015088 <_strtol_r>
 80141de:	9b03      	ldr	r3, [sp, #12]
 80141e0:	9d04      	ldr	r5, [sp, #16]
 80141e2:	1ac2      	subs	r2, r0, r3
 80141e4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80141e8:	429d      	cmp	r5, r3
 80141ea:	bf28      	it	cs
 80141ec:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80141f0:	490f      	ldr	r1, [pc, #60]	; (8014230 <_scanf_float+0x3c0>)
 80141f2:	4628      	mov	r0, r5
 80141f4:	f000 f858 	bl	80142a8 <siprintf>
 80141f8:	e7aa      	b.n	8014150 <_scanf_float+0x2e0>
 80141fa:	f015 0504 	ands.w	r5, r5, #4
 80141fe:	d1b8      	bne.n	8014172 <_scanf_float+0x302>
 8014200:	681f      	ldr	r7, [r3, #0]
 8014202:	ee10 2a10 	vmov	r2, s0
 8014206:	464b      	mov	r3, r9
 8014208:	ee10 0a10 	vmov	r0, s0
 801420c:	4649      	mov	r1, r9
 801420e:	f7ec fca5 	bl	8000b5c <__aeabi_dcmpun>
 8014212:	b128      	cbz	r0, 8014220 <_scanf_float+0x3b0>
 8014214:	4628      	mov	r0, r5
 8014216:	f000 f80d 	bl	8014234 <nanf>
 801421a:	ed87 0a00 	vstr	s0, [r7]
 801421e:	e7ab      	b.n	8014178 <_scanf_float+0x308>
 8014220:	4640      	mov	r0, r8
 8014222:	4649      	mov	r1, r9
 8014224:	f7ec fcf8 	bl	8000c18 <__aeabi_d2f>
 8014228:	6038      	str	r0, [r7, #0]
 801422a:	e7a5      	b.n	8014178 <_scanf_float+0x308>
 801422c:	2600      	movs	r6, #0
 801422e:	e666      	b.n	8013efe <_scanf_float+0x8e>
 8014230:	0801814a 	.word	0x0801814a

08014234 <nanf>:
 8014234:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801423c <nanf+0x8>
 8014238:	4770      	bx	lr
 801423a:	bf00      	nop
 801423c:	7fc00000 	.word	0x7fc00000

08014240 <sniprintf>:
 8014240:	b40c      	push	{r2, r3}
 8014242:	b530      	push	{r4, r5, lr}
 8014244:	4b17      	ldr	r3, [pc, #92]	; (80142a4 <sniprintf+0x64>)
 8014246:	1e0c      	subs	r4, r1, #0
 8014248:	b09d      	sub	sp, #116	; 0x74
 801424a:	681d      	ldr	r5, [r3, #0]
 801424c:	da08      	bge.n	8014260 <sniprintf+0x20>
 801424e:	238b      	movs	r3, #139	; 0x8b
 8014250:	602b      	str	r3, [r5, #0]
 8014252:	f04f 30ff 	mov.w	r0, #4294967295
 8014256:	b01d      	add	sp, #116	; 0x74
 8014258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801425c:	b002      	add	sp, #8
 801425e:	4770      	bx	lr
 8014260:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014264:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014268:	bf14      	ite	ne
 801426a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801426e:	4623      	moveq	r3, r4
 8014270:	9304      	str	r3, [sp, #16]
 8014272:	9307      	str	r3, [sp, #28]
 8014274:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014278:	9002      	str	r0, [sp, #8]
 801427a:	9006      	str	r0, [sp, #24]
 801427c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014280:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014282:	ab21      	add	r3, sp, #132	; 0x84
 8014284:	a902      	add	r1, sp, #8
 8014286:	4628      	mov	r0, r5
 8014288:	9301      	str	r3, [sp, #4]
 801428a:	f002 fde7 	bl	8016e5c <_svfiprintf_r>
 801428e:	1c43      	adds	r3, r0, #1
 8014290:	bfbc      	itt	lt
 8014292:	238b      	movlt	r3, #139	; 0x8b
 8014294:	602b      	strlt	r3, [r5, #0]
 8014296:	2c00      	cmp	r4, #0
 8014298:	d0dd      	beq.n	8014256 <sniprintf+0x16>
 801429a:	9b02      	ldr	r3, [sp, #8]
 801429c:	2200      	movs	r2, #0
 801429e:	701a      	strb	r2, [r3, #0]
 80142a0:	e7d9      	b.n	8014256 <sniprintf+0x16>
 80142a2:	bf00      	nop
 80142a4:	2000000c 	.word	0x2000000c

080142a8 <siprintf>:
 80142a8:	b40e      	push	{r1, r2, r3}
 80142aa:	b500      	push	{lr}
 80142ac:	b09c      	sub	sp, #112	; 0x70
 80142ae:	ab1d      	add	r3, sp, #116	; 0x74
 80142b0:	9002      	str	r0, [sp, #8]
 80142b2:	9006      	str	r0, [sp, #24]
 80142b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80142b8:	4809      	ldr	r0, [pc, #36]	; (80142e0 <siprintf+0x38>)
 80142ba:	9107      	str	r1, [sp, #28]
 80142bc:	9104      	str	r1, [sp, #16]
 80142be:	4909      	ldr	r1, [pc, #36]	; (80142e4 <siprintf+0x3c>)
 80142c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80142c4:	9105      	str	r1, [sp, #20]
 80142c6:	6800      	ldr	r0, [r0, #0]
 80142c8:	9301      	str	r3, [sp, #4]
 80142ca:	a902      	add	r1, sp, #8
 80142cc:	f002 fdc6 	bl	8016e5c <_svfiprintf_r>
 80142d0:	9b02      	ldr	r3, [sp, #8]
 80142d2:	2200      	movs	r2, #0
 80142d4:	701a      	strb	r2, [r3, #0]
 80142d6:	b01c      	add	sp, #112	; 0x70
 80142d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80142dc:	b003      	add	sp, #12
 80142de:	4770      	bx	lr
 80142e0:	2000000c 	.word	0x2000000c
 80142e4:	ffff0208 	.word	0xffff0208

080142e8 <siscanf>:
 80142e8:	b40e      	push	{r1, r2, r3}
 80142ea:	b530      	push	{r4, r5, lr}
 80142ec:	b09c      	sub	sp, #112	; 0x70
 80142ee:	ac1f      	add	r4, sp, #124	; 0x7c
 80142f0:	f44f 7201 	mov.w	r2, #516	; 0x204
 80142f4:	f854 5b04 	ldr.w	r5, [r4], #4
 80142f8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80142fc:	9002      	str	r0, [sp, #8]
 80142fe:	9006      	str	r0, [sp, #24]
 8014300:	f7eb ff7e 	bl	8000200 <strlen>
 8014304:	4b0b      	ldr	r3, [pc, #44]	; (8014334 <siscanf+0x4c>)
 8014306:	9003      	str	r0, [sp, #12]
 8014308:	9007      	str	r0, [sp, #28]
 801430a:	930b      	str	r3, [sp, #44]	; 0x2c
 801430c:	480a      	ldr	r0, [pc, #40]	; (8014338 <siscanf+0x50>)
 801430e:	9401      	str	r4, [sp, #4]
 8014310:	2300      	movs	r3, #0
 8014312:	930f      	str	r3, [sp, #60]	; 0x3c
 8014314:	9314      	str	r3, [sp, #80]	; 0x50
 8014316:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801431a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801431e:	462a      	mov	r2, r5
 8014320:	4623      	mov	r3, r4
 8014322:	a902      	add	r1, sp, #8
 8014324:	6800      	ldr	r0, [r0, #0]
 8014326:	f002 feeb 	bl	8017100 <__ssvfiscanf_r>
 801432a:	b01c      	add	sp, #112	; 0x70
 801432c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014330:	b003      	add	sp, #12
 8014332:	4770      	bx	lr
 8014334:	0801433d 	.word	0x0801433d
 8014338:	2000000c 	.word	0x2000000c

0801433c <__seofread>:
 801433c:	2000      	movs	r0, #0
 801433e:	4770      	bx	lr

08014340 <strcpy>:
 8014340:	4603      	mov	r3, r0
 8014342:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014346:	f803 2b01 	strb.w	r2, [r3], #1
 801434a:	2a00      	cmp	r2, #0
 801434c:	d1f9      	bne.n	8014342 <strcpy+0x2>
 801434e:	4770      	bx	lr

08014350 <sulp>:
 8014350:	b570      	push	{r4, r5, r6, lr}
 8014352:	4604      	mov	r4, r0
 8014354:	460d      	mov	r5, r1
 8014356:	ec45 4b10 	vmov	d0, r4, r5
 801435a:	4616      	mov	r6, r2
 801435c:	f002 fb3a 	bl	80169d4 <__ulp>
 8014360:	ec51 0b10 	vmov	r0, r1, d0
 8014364:	b17e      	cbz	r6, 8014386 <sulp+0x36>
 8014366:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801436a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801436e:	2b00      	cmp	r3, #0
 8014370:	dd09      	ble.n	8014386 <sulp+0x36>
 8014372:	051b      	lsls	r3, r3, #20
 8014374:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014378:	2400      	movs	r4, #0
 801437a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801437e:	4622      	mov	r2, r4
 8014380:	462b      	mov	r3, r5
 8014382:	f7ec f951 	bl	8000628 <__aeabi_dmul>
 8014386:	bd70      	pop	{r4, r5, r6, pc}

08014388 <_strtod_l>:
 8014388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801438c:	461f      	mov	r7, r3
 801438e:	b0a1      	sub	sp, #132	; 0x84
 8014390:	2300      	movs	r3, #0
 8014392:	4681      	mov	r9, r0
 8014394:	4638      	mov	r0, r7
 8014396:	460e      	mov	r6, r1
 8014398:	9217      	str	r2, [sp, #92]	; 0x5c
 801439a:	931c      	str	r3, [sp, #112]	; 0x70
 801439c:	f002 f824 	bl	80163e8 <__localeconv_l>
 80143a0:	4680      	mov	r8, r0
 80143a2:	6800      	ldr	r0, [r0, #0]
 80143a4:	f7eb ff2c 	bl	8000200 <strlen>
 80143a8:	f04f 0a00 	mov.w	sl, #0
 80143ac:	4604      	mov	r4, r0
 80143ae:	f04f 0b00 	mov.w	fp, #0
 80143b2:	961b      	str	r6, [sp, #108]	; 0x6c
 80143b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80143b6:	781a      	ldrb	r2, [r3, #0]
 80143b8:	2a0d      	cmp	r2, #13
 80143ba:	d832      	bhi.n	8014422 <_strtod_l+0x9a>
 80143bc:	2a09      	cmp	r2, #9
 80143be:	d236      	bcs.n	801442e <_strtod_l+0xa6>
 80143c0:	2a00      	cmp	r2, #0
 80143c2:	d03e      	beq.n	8014442 <_strtod_l+0xba>
 80143c4:	2300      	movs	r3, #0
 80143c6:	930d      	str	r3, [sp, #52]	; 0x34
 80143c8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80143ca:	782b      	ldrb	r3, [r5, #0]
 80143cc:	2b30      	cmp	r3, #48	; 0x30
 80143ce:	f040 80ac 	bne.w	801452a <_strtod_l+0x1a2>
 80143d2:	786b      	ldrb	r3, [r5, #1]
 80143d4:	2b58      	cmp	r3, #88	; 0x58
 80143d6:	d001      	beq.n	80143dc <_strtod_l+0x54>
 80143d8:	2b78      	cmp	r3, #120	; 0x78
 80143da:	d167      	bne.n	80144ac <_strtod_l+0x124>
 80143dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80143de:	9301      	str	r3, [sp, #4]
 80143e0:	ab1c      	add	r3, sp, #112	; 0x70
 80143e2:	9300      	str	r3, [sp, #0]
 80143e4:	9702      	str	r7, [sp, #8]
 80143e6:	ab1d      	add	r3, sp, #116	; 0x74
 80143e8:	4a88      	ldr	r2, [pc, #544]	; (801460c <_strtod_l+0x284>)
 80143ea:	a91b      	add	r1, sp, #108	; 0x6c
 80143ec:	4648      	mov	r0, r9
 80143ee:	f001 fd12 	bl	8015e16 <__gethex>
 80143f2:	f010 0407 	ands.w	r4, r0, #7
 80143f6:	4606      	mov	r6, r0
 80143f8:	d005      	beq.n	8014406 <_strtod_l+0x7e>
 80143fa:	2c06      	cmp	r4, #6
 80143fc:	d12b      	bne.n	8014456 <_strtod_l+0xce>
 80143fe:	3501      	adds	r5, #1
 8014400:	2300      	movs	r3, #0
 8014402:	951b      	str	r5, [sp, #108]	; 0x6c
 8014404:	930d      	str	r3, [sp, #52]	; 0x34
 8014406:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014408:	2b00      	cmp	r3, #0
 801440a:	f040 859a 	bne.w	8014f42 <_strtod_l+0xbba>
 801440e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014410:	b1e3      	cbz	r3, 801444c <_strtod_l+0xc4>
 8014412:	4652      	mov	r2, sl
 8014414:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014418:	ec43 2b10 	vmov	d0, r2, r3
 801441c:	b021      	add	sp, #132	; 0x84
 801441e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014422:	2a2b      	cmp	r2, #43	; 0x2b
 8014424:	d015      	beq.n	8014452 <_strtod_l+0xca>
 8014426:	2a2d      	cmp	r2, #45	; 0x2d
 8014428:	d004      	beq.n	8014434 <_strtod_l+0xac>
 801442a:	2a20      	cmp	r2, #32
 801442c:	d1ca      	bne.n	80143c4 <_strtod_l+0x3c>
 801442e:	3301      	adds	r3, #1
 8014430:	931b      	str	r3, [sp, #108]	; 0x6c
 8014432:	e7bf      	b.n	80143b4 <_strtod_l+0x2c>
 8014434:	2201      	movs	r2, #1
 8014436:	920d      	str	r2, [sp, #52]	; 0x34
 8014438:	1c5a      	adds	r2, r3, #1
 801443a:	921b      	str	r2, [sp, #108]	; 0x6c
 801443c:	785b      	ldrb	r3, [r3, #1]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d1c2      	bne.n	80143c8 <_strtod_l+0x40>
 8014442:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014444:	961b      	str	r6, [sp, #108]	; 0x6c
 8014446:	2b00      	cmp	r3, #0
 8014448:	f040 8579 	bne.w	8014f3e <_strtod_l+0xbb6>
 801444c:	4652      	mov	r2, sl
 801444e:	465b      	mov	r3, fp
 8014450:	e7e2      	b.n	8014418 <_strtod_l+0x90>
 8014452:	2200      	movs	r2, #0
 8014454:	e7ef      	b.n	8014436 <_strtod_l+0xae>
 8014456:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014458:	b13a      	cbz	r2, 801446a <_strtod_l+0xe2>
 801445a:	2135      	movs	r1, #53	; 0x35
 801445c:	a81e      	add	r0, sp, #120	; 0x78
 801445e:	f002 fbb1 	bl	8016bc4 <__copybits>
 8014462:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014464:	4648      	mov	r0, r9
 8014466:	f002 f81d 	bl	80164a4 <_Bfree>
 801446a:	3c01      	subs	r4, #1
 801446c:	2c04      	cmp	r4, #4
 801446e:	d806      	bhi.n	801447e <_strtod_l+0xf6>
 8014470:	e8df f004 	tbb	[pc, r4]
 8014474:	1714030a 	.word	0x1714030a
 8014478:	0a          	.byte	0x0a
 8014479:	00          	.byte	0x00
 801447a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801447e:	0730      	lsls	r0, r6, #28
 8014480:	d5c1      	bpl.n	8014406 <_strtod_l+0x7e>
 8014482:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8014486:	e7be      	b.n	8014406 <_strtod_l+0x7e>
 8014488:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801448c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801448e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014492:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014496:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801449a:	e7f0      	b.n	801447e <_strtod_l+0xf6>
 801449c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8014610 <_strtod_l+0x288>
 80144a0:	e7ed      	b.n	801447e <_strtod_l+0xf6>
 80144a2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80144a6:	f04f 3aff 	mov.w	sl, #4294967295
 80144aa:	e7e8      	b.n	801447e <_strtod_l+0xf6>
 80144ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80144ae:	1c5a      	adds	r2, r3, #1
 80144b0:	921b      	str	r2, [sp, #108]	; 0x6c
 80144b2:	785b      	ldrb	r3, [r3, #1]
 80144b4:	2b30      	cmp	r3, #48	; 0x30
 80144b6:	d0f9      	beq.n	80144ac <_strtod_l+0x124>
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d0a4      	beq.n	8014406 <_strtod_l+0x7e>
 80144bc:	2301      	movs	r3, #1
 80144be:	2500      	movs	r5, #0
 80144c0:	9306      	str	r3, [sp, #24]
 80144c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80144c4:	9308      	str	r3, [sp, #32]
 80144c6:	9507      	str	r5, [sp, #28]
 80144c8:	9505      	str	r5, [sp, #20]
 80144ca:	220a      	movs	r2, #10
 80144cc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80144ce:	7807      	ldrb	r7, [r0, #0]
 80144d0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80144d4:	b2d9      	uxtb	r1, r3
 80144d6:	2909      	cmp	r1, #9
 80144d8:	d929      	bls.n	801452e <_strtod_l+0x1a6>
 80144da:	4622      	mov	r2, r4
 80144dc:	f8d8 1000 	ldr.w	r1, [r8]
 80144e0:	f003 f8f8 	bl	80176d4 <strncmp>
 80144e4:	2800      	cmp	r0, #0
 80144e6:	d031      	beq.n	801454c <_strtod_l+0x1c4>
 80144e8:	2000      	movs	r0, #0
 80144ea:	9c05      	ldr	r4, [sp, #20]
 80144ec:	9004      	str	r0, [sp, #16]
 80144ee:	463b      	mov	r3, r7
 80144f0:	4602      	mov	r2, r0
 80144f2:	2b65      	cmp	r3, #101	; 0x65
 80144f4:	d001      	beq.n	80144fa <_strtod_l+0x172>
 80144f6:	2b45      	cmp	r3, #69	; 0x45
 80144f8:	d114      	bne.n	8014524 <_strtod_l+0x19c>
 80144fa:	b924      	cbnz	r4, 8014506 <_strtod_l+0x17e>
 80144fc:	b910      	cbnz	r0, 8014504 <_strtod_l+0x17c>
 80144fe:	9b06      	ldr	r3, [sp, #24]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d09e      	beq.n	8014442 <_strtod_l+0xba>
 8014504:	2400      	movs	r4, #0
 8014506:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8014508:	1c73      	adds	r3, r6, #1
 801450a:	931b      	str	r3, [sp, #108]	; 0x6c
 801450c:	7873      	ldrb	r3, [r6, #1]
 801450e:	2b2b      	cmp	r3, #43	; 0x2b
 8014510:	d078      	beq.n	8014604 <_strtod_l+0x27c>
 8014512:	2b2d      	cmp	r3, #45	; 0x2d
 8014514:	d070      	beq.n	80145f8 <_strtod_l+0x270>
 8014516:	f04f 0c00 	mov.w	ip, #0
 801451a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801451e:	2f09      	cmp	r7, #9
 8014520:	d97c      	bls.n	801461c <_strtod_l+0x294>
 8014522:	961b      	str	r6, [sp, #108]	; 0x6c
 8014524:	f04f 0e00 	mov.w	lr, #0
 8014528:	e09a      	b.n	8014660 <_strtod_l+0x2d8>
 801452a:	2300      	movs	r3, #0
 801452c:	e7c7      	b.n	80144be <_strtod_l+0x136>
 801452e:	9905      	ldr	r1, [sp, #20]
 8014530:	2908      	cmp	r1, #8
 8014532:	bfdd      	ittte	le
 8014534:	9907      	ldrle	r1, [sp, #28]
 8014536:	fb02 3301 	mlale	r3, r2, r1, r3
 801453a:	9307      	strle	r3, [sp, #28]
 801453c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8014540:	9b05      	ldr	r3, [sp, #20]
 8014542:	3001      	adds	r0, #1
 8014544:	3301      	adds	r3, #1
 8014546:	9305      	str	r3, [sp, #20]
 8014548:	901b      	str	r0, [sp, #108]	; 0x6c
 801454a:	e7bf      	b.n	80144cc <_strtod_l+0x144>
 801454c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801454e:	191a      	adds	r2, r3, r4
 8014550:	921b      	str	r2, [sp, #108]	; 0x6c
 8014552:	9a05      	ldr	r2, [sp, #20]
 8014554:	5d1b      	ldrb	r3, [r3, r4]
 8014556:	2a00      	cmp	r2, #0
 8014558:	d037      	beq.n	80145ca <_strtod_l+0x242>
 801455a:	9c05      	ldr	r4, [sp, #20]
 801455c:	4602      	mov	r2, r0
 801455e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8014562:	2909      	cmp	r1, #9
 8014564:	d913      	bls.n	801458e <_strtod_l+0x206>
 8014566:	2101      	movs	r1, #1
 8014568:	9104      	str	r1, [sp, #16]
 801456a:	e7c2      	b.n	80144f2 <_strtod_l+0x16a>
 801456c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801456e:	1c5a      	adds	r2, r3, #1
 8014570:	921b      	str	r2, [sp, #108]	; 0x6c
 8014572:	785b      	ldrb	r3, [r3, #1]
 8014574:	3001      	adds	r0, #1
 8014576:	2b30      	cmp	r3, #48	; 0x30
 8014578:	d0f8      	beq.n	801456c <_strtod_l+0x1e4>
 801457a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801457e:	2a08      	cmp	r2, #8
 8014580:	f200 84e4 	bhi.w	8014f4c <_strtod_l+0xbc4>
 8014584:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014586:	9208      	str	r2, [sp, #32]
 8014588:	4602      	mov	r2, r0
 801458a:	2000      	movs	r0, #0
 801458c:	4604      	mov	r4, r0
 801458e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8014592:	f100 0101 	add.w	r1, r0, #1
 8014596:	d012      	beq.n	80145be <_strtod_l+0x236>
 8014598:	440a      	add	r2, r1
 801459a:	eb00 0c04 	add.w	ip, r0, r4
 801459e:	4621      	mov	r1, r4
 80145a0:	270a      	movs	r7, #10
 80145a2:	458c      	cmp	ip, r1
 80145a4:	d113      	bne.n	80145ce <_strtod_l+0x246>
 80145a6:	1821      	adds	r1, r4, r0
 80145a8:	2908      	cmp	r1, #8
 80145aa:	f104 0401 	add.w	r4, r4, #1
 80145ae:	4404      	add	r4, r0
 80145b0:	dc19      	bgt.n	80145e6 <_strtod_l+0x25e>
 80145b2:	9b07      	ldr	r3, [sp, #28]
 80145b4:	210a      	movs	r1, #10
 80145b6:	fb01 e303 	mla	r3, r1, r3, lr
 80145ba:	9307      	str	r3, [sp, #28]
 80145bc:	2100      	movs	r1, #0
 80145be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80145c0:	1c58      	adds	r0, r3, #1
 80145c2:	901b      	str	r0, [sp, #108]	; 0x6c
 80145c4:	785b      	ldrb	r3, [r3, #1]
 80145c6:	4608      	mov	r0, r1
 80145c8:	e7c9      	b.n	801455e <_strtod_l+0x1d6>
 80145ca:	9805      	ldr	r0, [sp, #20]
 80145cc:	e7d3      	b.n	8014576 <_strtod_l+0x1ee>
 80145ce:	2908      	cmp	r1, #8
 80145d0:	f101 0101 	add.w	r1, r1, #1
 80145d4:	dc03      	bgt.n	80145de <_strtod_l+0x256>
 80145d6:	9b07      	ldr	r3, [sp, #28]
 80145d8:	437b      	muls	r3, r7
 80145da:	9307      	str	r3, [sp, #28]
 80145dc:	e7e1      	b.n	80145a2 <_strtod_l+0x21a>
 80145de:	2910      	cmp	r1, #16
 80145e0:	bfd8      	it	le
 80145e2:	437d      	mulle	r5, r7
 80145e4:	e7dd      	b.n	80145a2 <_strtod_l+0x21a>
 80145e6:	2c10      	cmp	r4, #16
 80145e8:	bfdc      	itt	le
 80145ea:	210a      	movle	r1, #10
 80145ec:	fb01 e505 	mlale	r5, r1, r5, lr
 80145f0:	e7e4      	b.n	80145bc <_strtod_l+0x234>
 80145f2:	2301      	movs	r3, #1
 80145f4:	9304      	str	r3, [sp, #16]
 80145f6:	e781      	b.n	80144fc <_strtod_l+0x174>
 80145f8:	f04f 0c01 	mov.w	ip, #1
 80145fc:	1cb3      	adds	r3, r6, #2
 80145fe:	931b      	str	r3, [sp, #108]	; 0x6c
 8014600:	78b3      	ldrb	r3, [r6, #2]
 8014602:	e78a      	b.n	801451a <_strtod_l+0x192>
 8014604:	f04f 0c00 	mov.w	ip, #0
 8014608:	e7f8      	b.n	80145fc <_strtod_l+0x274>
 801460a:	bf00      	nop
 801460c:	08018150 	.word	0x08018150
 8014610:	7ff00000 	.word	0x7ff00000
 8014614:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014616:	1c5f      	adds	r7, r3, #1
 8014618:	971b      	str	r7, [sp, #108]	; 0x6c
 801461a:	785b      	ldrb	r3, [r3, #1]
 801461c:	2b30      	cmp	r3, #48	; 0x30
 801461e:	d0f9      	beq.n	8014614 <_strtod_l+0x28c>
 8014620:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8014624:	2f08      	cmp	r7, #8
 8014626:	f63f af7d 	bhi.w	8014524 <_strtod_l+0x19c>
 801462a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801462e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014630:	930a      	str	r3, [sp, #40]	; 0x28
 8014632:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014634:	1c5f      	adds	r7, r3, #1
 8014636:	971b      	str	r7, [sp, #108]	; 0x6c
 8014638:	785b      	ldrb	r3, [r3, #1]
 801463a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801463e:	f1b8 0f09 	cmp.w	r8, #9
 8014642:	d937      	bls.n	80146b4 <_strtod_l+0x32c>
 8014644:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014646:	1a7f      	subs	r7, r7, r1
 8014648:	2f08      	cmp	r7, #8
 801464a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801464e:	dc37      	bgt.n	80146c0 <_strtod_l+0x338>
 8014650:	45be      	cmp	lr, r7
 8014652:	bfa8      	it	ge
 8014654:	46be      	movge	lr, r7
 8014656:	f1bc 0f00 	cmp.w	ip, #0
 801465a:	d001      	beq.n	8014660 <_strtod_l+0x2d8>
 801465c:	f1ce 0e00 	rsb	lr, lr, #0
 8014660:	2c00      	cmp	r4, #0
 8014662:	d151      	bne.n	8014708 <_strtod_l+0x380>
 8014664:	2800      	cmp	r0, #0
 8014666:	f47f aece 	bne.w	8014406 <_strtod_l+0x7e>
 801466a:	9a06      	ldr	r2, [sp, #24]
 801466c:	2a00      	cmp	r2, #0
 801466e:	f47f aeca 	bne.w	8014406 <_strtod_l+0x7e>
 8014672:	9a04      	ldr	r2, [sp, #16]
 8014674:	2a00      	cmp	r2, #0
 8014676:	f47f aee4 	bne.w	8014442 <_strtod_l+0xba>
 801467a:	2b4e      	cmp	r3, #78	; 0x4e
 801467c:	d027      	beq.n	80146ce <_strtod_l+0x346>
 801467e:	dc21      	bgt.n	80146c4 <_strtod_l+0x33c>
 8014680:	2b49      	cmp	r3, #73	; 0x49
 8014682:	f47f aede 	bne.w	8014442 <_strtod_l+0xba>
 8014686:	49a0      	ldr	r1, [pc, #640]	; (8014908 <_strtod_l+0x580>)
 8014688:	a81b      	add	r0, sp, #108	; 0x6c
 801468a:	f001 fdf7 	bl	801627c <__match>
 801468e:	2800      	cmp	r0, #0
 8014690:	f43f aed7 	beq.w	8014442 <_strtod_l+0xba>
 8014694:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014696:	499d      	ldr	r1, [pc, #628]	; (801490c <_strtod_l+0x584>)
 8014698:	3b01      	subs	r3, #1
 801469a:	a81b      	add	r0, sp, #108	; 0x6c
 801469c:	931b      	str	r3, [sp, #108]	; 0x6c
 801469e:	f001 fded 	bl	801627c <__match>
 80146a2:	b910      	cbnz	r0, 80146aa <_strtod_l+0x322>
 80146a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80146a6:	3301      	adds	r3, #1
 80146a8:	931b      	str	r3, [sp, #108]	; 0x6c
 80146aa:	f8df b274 	ldr.w	fp, [pc, #628]	; 8014920 <_strtod_l+0x598>
 80146ae:	f04f 0a00 	mov.w	sl, #0
 80146b2:	e6a8      	b.n	8014406 <_strtod_l+0x7e>
 80146b4:	210a      	movs	r1, #10
 80146b6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80146ba:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80146be:	e7b8      	b.n	8014632 <_strtod_l+0x2aa>
 80146c0:	46be      	mov	lr, r7
 80146c2:	e7c8      	b.n	8014656 <_strtod_l+0x2ce>
 80146c4:	2b69      	cmp	r3, #105	; 0x69
 80146c6:	d0de      	beq.n	8014686 <_strtod_l+0x2fe>
 80146c8:	2b6e      	cmp	r3, #110	; 0x6e
 80146ca:	f47f aeba 	bne.w	8014442 <_strtod_l+0xba>
 80146ce:	4990      	ldr	r1, [pc, #576]	; (8014910 <_strtod_l+0x588>)
 80146d0:	a81b      	add	r0, sp, #108	; 0x6c
 80146d2:	f001 fdd3 	bl	801627c <__match>
 80146d6:	2800      	cmp	r0, #0
 80146d8:	f43f aeb3 	beq.w	8014442 <_strtod_l+0xba>
 80146dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80146de:	781b      	ldrb	r3, [r3, #0]
 80146e0:	2b28      	cmp	r3, #40	; 0x28
 80146e2:	d10e      	bne.n	8014702 <_strtod_l+0x37a>
 80146e4:	aa1e      	add	r2, sp, #120	; 0x78
 80146e6:	498b      	ldr	r1, [pc, #556]	; (8014914 <_strtod_l+0x58c>)
 80146e8:	a81b      	add	r0, sp, #108	; 0x6c
 80146ea:	f001 fddb 	bl	80162a4 <__hexnan>
 80146ee:	2805      	cmp	r0, #5
 80146f0:	d107      	bne.n	8014702 <_strtod_l+0x37a>
 80146f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80146f4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80146f8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80146fc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014700:	e681      	b.n	8014406 <_strtod_l+0x7e>
 8014702:	f8df b224 	ldr.w	fp, [pc, #548]	; 8014928 <_strtod_l+0x5a0>
 8014706:	e7d2      	b.n	80146ae <_strtod_l+0x326>
 8014708:	ebae 0302 	sub.w	r3, lr, r2
 801470c:	9306      	str	r3, [sp, #24]
 801470e:	9b05      	ldr	r3, [sp, #20]
 8014710:	9807      	ldr	r0, [sp, #28]
 8014712:	2b00      	cmp	r3, #0
 8014714:	bf08      	it	eq
 8014716:	4623      	moveq	r3, r4
 8014718:	2c10      	cmp	r4, #16
 801471a:	9305      	str	r3, [sp, #20]
 801471c:	46a0      	mov	r8, r4
 801471e:	bfa8      	it	ge
 8014720:	f04f 0810 	movge.w	r8, #16
 8014724:	f7eb ff06 	bl	8000534 <__aeabi_ui2d>
 8014728:	2c09      	cmp	r4, #9
 801472a:	4682      	mov	sl, r0
 801472c:	468b      	mov	fp, r1
 801472e:	dc13      	bgt.n	8014758 <_strtod_l+0x3d0>
 8014730:	9b06      	ldr	r3, [sp, #24]
 8014732:	2b00      	cmp	r3, #0
 8014734:	f43f ae67 	beq.w	8014406 <_strtod_l+0x7e>
 8014738:	9b06      	ldr	r3, [sp, #24]
 801473a:	dd7a      	ble.n	8014832 <_strtod_l+0x4aa>
 801473c:	2b16      	cmp	r3, #22
 801473e:	dc61      	bgt.n	8014804 <_strtod_l+0x47c>
 8014740:	4a75      	ldr	r2, [pc, #468]	; (8014918 <_strtod_l+0x590>)
 8014742:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8014746:	e9de 0100 	ldrd	r0, r1, [lr]
 801474a:	4652      	mov	r2, sl
 801474c:	465b      	mov	r3, fp
 801474e:	f7eb ff6b 	bl	8000628 <__aeabi_dmul>
 8014752:	4682      	mov	sl, r0
 8014754:	468b      	mov	fp, r1
 8014756:	e656      	b.n	8014406 <_strtod_l+0x7e>
 8014758:	4b6f      	ldr	r3, [pc, #444]	; (8014918 <_strtod_l+0x590>)
 801475a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801475e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014762:	f7eb ff61 	bl	8000628 <__aeabi_dmul>
 8014766:	4606      	mov	r6, r0
 8014768:	4628      	mov	r0, r5
 801476a:	460f      	mov	r7, r1
 801476c:	f7eb fee2 	bl	8000534 <__aeabi_ui2d>
 8014770:	4602      	mov	r2, r0
 8014772:	460b      	mov	r3, r1
 8014774:	4630      	mov	r0, r6
 8014776:	4639      	mov	r1, r7
 8014778:	f7eb fda0 	bl	80002bc <__adddf3>
 801477c:	2c0f      	cmp	r4, #15
 801477e:	4682      	mov	sl, r0
 8014780:	468b      	mov	fp, r1
 8014782:	ddd5      	ble.n	8014730 <_strtod_l+0x3a8>
 8014784:	9b06      	ldr	r3, [sp, #24]
 8014786:	eba4 0808 	sub.w	r8, r4, r8
 801478a:	4498      	add	r8, r3
 801478c:	f1b8 0f00 	cmp.w	r8, #0
 8014790:	f340 8096 	ble.w	80148c0 <_strtod_l+0x538>
 8014794:	f018 030f 	ands.w	r3, r8, #15
 8014798:	d00a      	beq.n	80147b0 <_strtod_l+0x428>
 801479a:	495f      	ldr	r1, [pc, #380]	; (8014918 <_strtod_l+0x590>)
 801479c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80147a0:	4652      	mov	r2, sl
 80147a2:	465b      	mov	r3, fp
 80147a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80147a8:	f7eb ff3e 	bl	8000628 <__aeabi_dmul>
 80147ac:	4682      	mov	sl, r0
 80147ae:	468b      	mov	fp, r1
 80147b0:	f038 080f 	bics.w	r8, r8, #15
 80147b4:	d073      	beq.n	801489e <_strtod_l+0x516>
 80147b6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80147ba:	dd47      	ble.n	801484c <_strtod_l+0x4c4>
 80147bc:	2400      	movs	r4, #0
 80147be:	46a0      	mov	r8, r4
 80147c0:	9407      	str	r4, [sp, #28]
 80147c2:	9405      	str	r4, [sp, #20]
 80147c4:	2322      	movs	r3, #34	; 0x22
 80147c6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8014920 <_strtod_l+0x598>
 80147ca:	f8c9 3000 	str.w	r3, [r9]
 80147ce:	f04f 0a00 	mov.w	sl, #0
 80147d2:	9b07      	ldr	r3, [sp, #28]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	f43f ae16 	beq.w	8014406 <_strtod_l+0x7e>
 80147da:	991c      	ldr	r1, [sp, #112]	; 0x70
 80147dc:	4648      	mov	r0, r9
 80147de:	f001 fe61 	bl	80164a4 <_Bfree>
 80147e2:	9905      	ldr	r1, [sp, #20]
 80147e4:	4648      	mov	r0, r9
 80147e6:	f001 fe5d 	bl	80164a4 <_Bfree>
 80147ea:	4641      	mov	r1, r8
 80147ec:	4648      	mov	r0, r9
 80147ee:	f001 fe59 	bl	80164a4 <_Bfree>
 80147f2:	9907      	ldr	r1, [sp, #28]
 80147f4:	4648      	mov	r0, r9
 80147f6:	f001 fe55 	bl	80164a4 <_Bfree>
 80147fa:	4621      	mov	r1, r4
 80147fc:	4648      	mov	r0, r9
 80147fe:	f001 fe51 	bl	80164a4 <_Bfree>
 8014802:	e600      	b.n	8014406 <_strtod_l+0x7e>
 8014804:	9a06      	ldr	r2, [sp, #24]
 8014806:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801480a:	4293      	cmp	r3, r2
 801480c:	dbba      	blt.n	8014784 <_strtod_l+0x3fc>
 801480e:	4d42      	ldr	r5, [pc, #264]	; (8014918 <_strtod_l+0x590>)
 8014810:	f1c4 040f 	rsb	r4, r4, #15
 8014814:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8014818:	4652      	mov	r2, sl
 801481a:	465b      	mov	r3, fp
 801481c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014820:	f7eb ff02 	bl	8000628 <__aeabi_dmul>
 8014824:	9b06      	ldr	r3, [sp, #24]
 8014826:	1b1c      	subs	r4, r3, r4
 8014828:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801482c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014830:	e78d      	b.n	801474e <_strtod_l+0x3c6>
 8014832:	f113 0f16 	cmn.w	r3, #22
 8014836:	dba5      	blt.n	8014784 <_strtod_l+0x3fc>
 8014838:	4a37      	ldr	r2, [pc, #220]	; (8014918 <_strtod_l+0x590>)
 801483a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801483e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8014842:	4650      	mov	r0, sl
 8014844:	4659      	mov	r1, fp
 8014846:	f7ec f819 	bl	800087c <__aeabi_ddiv>
 801484a:	e782      	b.n	8014752 <_strtod_l+0x3ca>
 801484c:	2300      	movs	r3, #0
 801484e:	4e33      	ldr	r6, [pc, #204]	; (801491c <_strtod_l+0x594>)
 8014850:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014854:	4650      	mov	r0, sl
 8014856:	4659      	mov	r1, fp
 8014858:	461d      	mov	r5, r3
 801485a:	f1b8 0f01 	cmp.w	r8, #1
 801485e:	dc21      	bgt.n	80148a4 <_strtod_l+0x51c>
 8014860:	b10b      	cbz	r3, 8014866 <_strtod_l+0x4de>
 8014862:	4682      	mov	sl, r0
 8014864:	468b      	mov	fp, r1
 8014866:	4b2d      	ldr	r3, [pc, #180]	; (801491c <_strtod_l+0x594>)
 8014868:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801486c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014870:	4652      	mov	r2, sl
 8014872:	465b      	mov	r3, fp
 8014874:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014878:	f7eb fed6 	bl	8000628 <__aeabi_dmul>
 801487c:	4b28      	ldr	r3, [pc, #160]	; (8014920 <_strtod_l+0x598>)
 801487e:	460a      	mov	r2, r1
 8014880:	400b      	ands	r3, r1
 8014882:	4928      	ldr	r1, [pc, #160]	; (8014924 <_strtod_l+0x59c>)
 8014884:	428b      	cmp	r3, r1
 8014886:	4682      	mov	sl, r0
 8014888:	d898      	bhi.n	80147bc <_strtod_l+0x434>
 801488a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801488e:	428b      	cmp	r3, r1
 8014890:	bf86      	itte	hi
 8014892:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801492c <_strtod_l+0x5a4>
 8014896:	f04f 3aff 	movhi.w	sl, #4294967295
 801489a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801489e:	2300      	movs	r3, #0
 80148a0:	9304      	str	r3, [sp, #16]
 80148a2:	e077      	b.n	8014994 <_strtod_l+0x60c>
 80148a4:	f018 0f01 	tst.w	r8, #1
 80148a8:	d006      	beq.n	80148b8 <_strtod_l+0x530>
 80148aa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80148ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148b2:	f7eb feb9 	bl	8000628 <__aeabi_dmul>
 80148b6:	2301      	movs	r3, #1
 80148b8:	3501      	adds	r5, #1
 80148ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80148be:	e7cc      	b.n	801485a <_strtod_l+0x4d2>
 80148c0:	d0ed      	beq.n	801489e <_strtod_l+0x516>
 80148c2:	f1c8 0800 	rsb	r8, r8, #0
 80148c6:	f018 020f 	ands.w	r2, r8, #15
 80148ca:	d00a      	beq.n	80148e2 <_strtod_l+0x55a>
 80148cc:	4b12      	ldr	r3, [pc, #72]	; (8014918 <_strtod_l+0x590>)
 80148ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80148d2:	4650      	mov	r0, sl
 80148d4:	4659      	mov	r1, fp
 80148d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148da:	f7eb ffcf 	bl	800087c <__aeabi_ddiv>
 80148de:	4682      	mov	sl, r0
 80148e0:	468b      	mov	fp, r1
 80148e2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80148e6:	d0da      	beq.n	801489e <_strtod_l+0x516>
 80148e8:	f1b8 0f1f 	cmp.w	r8, #31
 80148ec:	dd20      	ble.n	8014930 <_strtod_l+0x5a8>
 80148ee:	2400      	movs	r4, #0
 80148f0:	46a0      	mov	r8, r4
 80148f2:	9407      	str	r4, [sp, #28]
 80148f4:	9405      	str	r4, [sp, #20]
 80148f6:	2322      	movs	r3, #34	; 0x22
 80148f8:	f04f 0a00 	mov.w	sl, #0
 80148fc:	f04f 0b00 	mov.w	fp, #0
 8014900:	f8c9 3000 	str.w	r3, [r9]
 8014904:	e765      	b.n	80147d2 <_strtod_l+0x44a>
 8014906:	bf00      	nop
 8014908:	0801811d 	.word	0x0801811d
 801490c:	080181a3 	.word	0x080181a3
 8014910:	08018125 	.word	0x08018125
 8014914:	08018164 	.word	0x08018164
 8014918:	08018248 	.word	0x08018248
 801491c:	08018220 	.word	0x08018220
 8014920:	7ff00000 	.word	0x7ff00000
 8014924:	7ca00000 	.word	0x7ca00000
 8014928:	fff80000 	.word	0xfff80000
 801492c:	7fefffff 	.word	0x7fefffff
 8014930:	f018 0310 	ands.w	r3, r8, #16
 8014934:	bf18      	it	ne
 8014936:	236a      	movne	r3, #106	; 0x6a
 8014938:	4da0      	ldr	r5, [pc, #640]	; (8014bbc <_strtod_l+0x834>)
 801493a:	9304      	str	r3, [sp, #16]
 801493c:	4650      	mov	r0, sl
 801493e:	4659      	mov	r1, fp
 8014940:	2300      	movs	r3, #0
 8014942:	f1b8 0f00 	cmp.w	r8, #0
 8014946:	f300 810a 	bgt.w	8014b5e <_strtod_l+0x7d6>
 801494a:	b10b      	cbz	r3, 8014950 <_strtod_l+0x5c8>
 801494c:	4682      	mov	sl, r0
 801494e:	468b      	mov	fp, r1
 8014950:	9b04      	ldr	r3, [sp, #16]
 8014952:	b1bb      	cbz	r3, 8014984 <_strtod_l+0x5fc>
 8014954:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8014958:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801495c:	2b00      	cmp	r3, #0
 801495e:	4659      	mov	r1, fp
 8014960:	dd10      	ble.n	8014984 <_strtod_l+0x5fc>
 8014962:	2b1f      	cmp	r3, #31
 8014964:	f340 8107 	ble.w	8014b76 <_strtod_l+0x7ee>
 8014968:	2b34      	cmp	r3, #52	; 0x34
 801496a:	bfde      	ittt	le
 801496c:	3b20      	suble	r3, #32
 801496e:	f04f 32ff 	movle.w	r2, #4294967295
 8014972:	fa02 f303 	lslle.w	r3, r2, r3
 8014976:	f04f 0a00 	mov.w	sl, #0
 801497a:	bfcc      	ite	gt
 801497c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014980:	ea03 0b01 	andle.w	fp, r3, r1
 8014984:	2200      	movs	r2, #0
 8014986:	2300      	movs	r3, #0
 8014988:	4650      	mov	r0, sl
 801498a:	4659      	mov	r1, fp
 801498c:	f7ec f8b4 	bl	8000af8 <__aeabi_dcmpeq>
 8014990:	2800      	cmp	r0, #0
 8014992:	d1ac      	bne.n	80148ee <_strtod_l+0x566>
 8014994:	9b07      	ldr	r3, [sp, #28]
 8014996:	9300      	str	r3, [sp, #0]
 8014998:	9a05      	ldr	r2, [sp, #20]
 801499a:	9908      	ldr	r1, [sp, #32]
 801499c:	4623      	mov	r3, r4
 801499e:	4648      	mov	r0, r9
 80149a0:	f001 fdd2 	bl	8016548 <__s2b>
 80149a4:	9007      	str	r0, [sp, #28]
 80149a6:	2800      	cmp	r0, #0
 80149a8:	f43f af08 	beq.w	80147bc <_strtod_l+0x434>
 80149ac:	9a06      	ldr	r2, [sp, #24]
 80149ae:	9b06      	ldr	r3, [sp, #24]
 80149b0:	2a00      	cmp	r2, #0
 80149b2:	f1c3 0300 	rsb	r3, r3, #0
 80149b6:	bfa8      	it	ge
 80149b8:	2300      	movge	r3, #0
 80149ba:	930e      	str	r3, [sp, #56]	; 0x38
 80149bc:	2400      	movs	r4, #0
 80149be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80149c2:	9316      	str	r3, [sp, #88]	; 0x58
 80149c4:	46a0      	mov	r8, r4
 80149c6:	9b07      	ldr	r3, [sp, #28]
 80149c8:	4648      	mov	r0, r9
 80149ca:	6859      	ldr	r1, [r3, #4]
 80149cc:	f001 fd36 	bl	801643c <_Balloc>
 80149d0:	9005      	str	r0, [sp, #20]
 80149d2:	2800      	cmp	r0, #0
 80149d4:	f43f aef6 	beq.w	80147c4 <_strtod_l+0x43c>
 80149d8:	9b07      	ldr	r3, [sp, #28]
 80149da:	691a      	ldr	r2, [r3, #16]
 80149dc:	3202      	adds	r2, #2
 80149de:	f103 010c 	add.w	r1, r3, #12
 80149e2:	0092      	lsls	r2, r2, #2
 80149e4:	300c      	adds	r0, #12
 80149e6:	f7fe fdd3 	bl	8013590 <memcpy>
 80149ea:	aa1e      	add	r2, sp, #120	; 0x78
 80149ec:	a91d      	add	r1, sp, #116	; 0x74
 80149ee:	ec4b ab10 	vmov	d0, sl, fp
 80149f2:	4648      	mov	r0, r9
 80149f4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80149f8:	f002 f862 	bl	8016ac0 <__d2b>
 80149fc:	901c      	str	r0, [sp, #112]	; 0x70
 80149fe:	2800      	cmp	r0, #0
 8014a00:	f43f aee0 	beq.w	80147c4 <_strtod_l+0x43c>
 8014a04:	2101      	movs	r1, #1
 8014a06:	4648      	mov	r0, r9
 8014a08:	f001 fe2a 	bl	8016660 <__i2b>
 8014a0c:	4680      	mov	r8, r0
 8014a0e:	2800      	cmp	r0, #0
 8014a10:	f43f aed8 	beq.w	80147c4 <_strtod_l+0x43c>
 8014a14:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8014a16:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014a18:	2e00      	cmp	r6, #0
 8014a1a:	bfab      	itete	ge
 8014a1c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8014a1e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8014a20:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8014a22:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8014a24:	bfac      	ite	ge
 8014a26:	18f7      	addge	r7, r6, r3
 8014a28:	1b9d      	sublt	r5, r3, r6
 8014a2a:	9b04      	ldr	r3, [sp, #16]
 8014a2c:	1af6      	subs	r6, r6, r3
 8014a2e:	4416      	add	r6, r2
 8014a30:	4b63      	ldr	r3, [pc, #396]	; (8014bc0 <_strtod_l+0x838>)
 8014a32:	3e01      	subs	r6, #1
 8014a34:	429e      	cmp	r6, r3
 8014a36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014a3a:	f280 80af 	bge.w	8014b9c <_strtod_l+0x814>
 8014a3e:	1b9b      	subs	r3, r3, r6
 8014a40:	2b1f      	cmp	r3, #31
 8014a42:	eba2 0203 	sub.w	r2, r2, r3
 8014a46:	f04f 0101 	mov.w	r1, #1
 8014a4a:	f300 809b 	bgt.w	8014b84 <_strtod_l+0x7fc>
 8014a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8014a52:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a54:	2300      	movs	r3, #0
 8014a56:	930a      	str	r3, [sp, #40]	; 0x28
 8014a58:	18be      	adds	r6, r7, r2
 8014a5a:	9b04      	ldr	r3, [sp, #16]
 8014a5c:	42b7      	cmp	r7, r6
 8014a5e:	4415      	add	r5, r2
 8014a60:	441d      	add	r5, r3
 8014a62:	463b      	mov	r3, r7
 8014a64:	bfa8      	it	ge
 8014a66:	4633      	movge	r3, r6
 8014a68:	42ab      	cmp	r3, r5
 8014a6a:	bfa8      	it	ge
 8014a6c:	462b      	movge	r3, r5
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	bfc2      	ittt	gt
 8014a72:	1af6      	subgt	r6, r6, r3
 8014a74:	1aed      	subgt	r5, r5, r3
 8014a76:	1aff      	subgt	r7, r7, r3
 8014a78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014a7a:	b1bb      	cbz	r3, 8014aac <_strtod_l+0x724>
 8014a7c:	4641      	mov	r1, r8
 8014a7e:	461a      	mov	r2, r3
 8014a80:	4648      	mov	r0, r9
 8014a82:	f001 fe8d 	bl	80167a0 <__pow5mult>
 8014a86:	4680      	mov	r8, r0
 8014a88:	2800      	cmp	r0, #0
 8014a8a:	f43f ae9b 	beq.w	80147c4 <_strtod_l+0x43c>
 8014a8e:	4601      	mov	r1, r0
 8014a90:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014a92:	4648      	mov	r0, r9
 8014a94:	f001 fded 	bl	8016672 <__multiply>
 8014a98:	900c      	str	r0, [sp, #48]	; 0x30
 8014a9a:	2800      	cmp	r0, #0
 8014a9c:	f43f ae92 	beq.w	80147c4 <_strtod_l+0x43c>
 8014aa0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014aa2:	4648      	mov	r0, r9
 8014aa4:	f001 fcfe 	bl	80164a4 <_Bfree>
 8014aa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014aaa:	931c      	str	r3, [sp, #112]	; 0x70
 8014aac:	2e00      	cmp	r6, #0
 8014aae:	dc7a      	bgt.n	8014ba6 <_strtod_l+0x81e>
 8014ab0:	9b06      	ldr	r3, [sp, #24]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	dd08      	ble.n	8014ac8 <_strtod_l+0x740>
 8014ab6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014ab8:	9905      	ldr	r1, [sp, #20]
 8014aba:	4648      	mov	r0, r9
 8014abc:	f001 fe70 	bl	80167a0 <__pow5mult>
 8014ac0:	9005      	str	r0, [sp, #20]
 8014ac2:	2800      	cmp	r0, #0
 8014ac4:	f43f ae7e 	beq.w	80147c4 <_strtod_l+0x43c>
 8014ac8:	2d00      	cmp	r5, #0
 8014aca:	dd08      	ble.n	8014ade <_strtod_l+0x756>
 8014acc:	462a      	mov	r2, r5
 8014ace:	9905      	ldr	r1, [sp, #20]
 8014ad0:	4648      	mov	r0, r9
 8014ad2:	f001 feb3 	bl	801683c <__lshift>
 8014ad6:	9005      	str	r0, [sp, #20]
 8014ad8:	2800      	cmp	r0, #0
 8014ada:	f43f ae73 	beq.w	80147c4 <_strtod_l+0x43c>
 8014ade:	2f00      	cmp	r7, #0
 8014ae0:	dd08      	ble.n	8014af4 <_strtod_l+0x76c>
 8014ae2:	4641      	mov	r1, r8
 8014ae4:	463a      	mov	r2, r7
 8014ae6:	4648      	mov	r0, r9
 8014ae8:	f001 fea8 	bl	801683c <__lshift>
 8014aec:	4680      	mov	r8, r0
 8014aee:	2800      	cmp	r0, #0
 8014af0:	f43f ae68 	beq.w	80147c4 <_strtod_l+0x43c>
 8014af4:	9a05      	ldr	r2, [sp, #20]
 8014af6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014af8:	4648      	mov	r0, r9
 8014afa:	f001 ff0d 	bl	8016918 <__mdiff>
 8014afe:	4604      	mov	r4, r0
 8014b00:	2800      	cmp	r0, #0
 8014b02:	f43f ae5f 	beq.w	80147c4 <_strtod_l+0x43c>
 8014b06:	68c3      	ldr	r3, [r0, #12]
 8014b08:	930c      	str	r3, [sp, #48]	; 0x30
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	60c3      	str	r3, [r0, #12]
 8014b0e:	4641      	mov	r1, r8
 8014b10:	f001 fee8 	bl	80168e4 <__mcmp>
 8014b14:	2800      	cmp	r0, #0
 8014b16:	da55      	bge.n	8014bc4 <_strtod_l+0x83c>
 8014b18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014b1a:	b9e3      	cbnz	r3, 8014b56 <_strtod_l+0x7ce>
 8014b1c:	f1ba 0f00 	cmp.w	sl, #0
 8014b20:	d119      	bne.n	8014b56 <_strtod_l+0x7ce>
 8014b22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014b26:	b9b3      	cbnz	r3, 8014b56 <_strtod_l+0x7ce>
 8014b28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014b2c:	0d1b      	lsrs	r3, r3, #20
 8014b2e:	051b      	lsls	r3, r3, #20
 8014b30:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014b34:	d90f      	bls.n	8014b56 <_strtod_l+0x7ce>
 8014b36:	6963      	ldr	r3, [r4, #20]
 8014b38:	b913      	cbnz	r3, 8014b40 <_strtod_l+0x7b8>
 8014b3a:	6923      	ldr	r3, [r4, #16]
 8014b3c:	2b01      	cmp	r3, #1
 8014b3e:	dd0a      	ble.n	8014b56 <_strtod_l+0x7ce>
 8014b40:	4621      	mov	r1, r4
 8014b42:	2201      	movs	r2, #1
 8014b44:	4648      	mov	r0, r9
 8014b46:	f001 fe79 	bl	801683c <__lshift>
 8014b4a:	4641      	mov	r1, r8
 8014b4c:	4604      	mov	r4, r0
 8014b4e:	f001 fec9 	bl	80168e4 <__mcmp>
 8014b52:	2800      	cmp	r0, #0
 8014b54:	dc67      	bgt.n	8014c26 <_strtod_l+0x89e>
 8014b56:	9b04      	ldr	r3, [sp, #16]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d171      	bne.n	8014c40 <_strtod_l+0x8b8>
 8014b5c:	e63d      	b.n	80147da <_strtod_l+0x452>
 8014b5e:	f018 0f01 	tst.w	r8, #1
 8014b62:	d004      	beq.n	8014b6e <_strtod_l+0x7e6>
 8014b64:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014b68:	f7eb fd5e 	bl	8000628 <__aeabi_dmul>
 8014b6c:	2301      	movs	r3, #1
 8014b6e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014b72:	3508      	adds	r5, #8
 8014b74:	e6e5      	b.n	8014942 <_strtod_l+0x5ba>
 8014b76:	f04f 32ff 	mov.w	r2, #4294967295
 8014b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8014b7e:	ea03 0a0a 	and.w	sl, r3, sl
 8014b82:	e6ff      	b.n	8014984 <_strtod_l+0x5fc>
 8014b84:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014b88:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8014b8c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014b90:	36e2      	adds	r6, #226	; 0xe2
 8014b92:	fa01 f306 	lsl.w	r3, r1, r6
 8014b96:	930a      	str	r3, [sp, #40]	; 0x28
 8014b98:	910f      	str	r1, [sp, #60]	; 0x3c
 8014b9a:	e75d      	b.n	8014a58 <_strtod_l+0x6d0>
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	930a      	str	r3, [sp, #40]	; 0x28
 8014ba0:	2301      	movs	r3, #1
 8014ba2:	930f      	str	r3, [sp, #60]	; 0x3c
 8014ba4:	e758      	b.n	8014a58 <_strtod_l+0x6d0>
 8014ba6:	4632      	mov	r2, r6
 8014ba8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014baa:	4648      	mov	r0, r9
 8014bac:	f001 fe46 	bl	801683c <__lshift>
 8014bb0:	901c      	str	r0, [sp, #112]	; 0x70
 8014bb2:	2800      	cmp	r0, #0
 8014bb4:	f47f af7c 	bne.w	8014ab0 <_strtod_l+0x728>
 8014bb8:	e604      	b.n	80147c4 <_strtod_l+0x43c>
 8014bba:	bf00      	nop
 8014bbc:	08018178 	.word	0x08018178
 8014bc0:	fffffc02 	.word	0xfffffc02
 8014bc4:	465d      	mov	r5, fp
 8014bc6:	f040 8086 	bne.w	8014cd6 <_strtod_l+0x94e>
 8014bca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014bcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014bd0:	b32a      	cbz	r2, 8014c1e <_strtod_l+0x896>
 8014bd2:	4aaf      	ldr	r2, [pc, #700]	; (8014e90 <_strtod_l+0xb08>)
 8014bd4:	4293      	cmp	r3, r2
 8014bd6:	d153      	bne.n	8014c80 <_strtod_l+0x8f8>
 8014bd8:	9b04      	ldr	r3, [sp, #16]
 8014bda:	4650      	mov	r0, sl
 8014bdc:	b1d3      	cbz	r3, 8014c14 <_strtod_l+0x88c>
 8014bde:	4aad      	ldr	r2, [pc, #692]	; (8014e94 <_strtod_l+0xb0c>)
 8014be0:	402a      	ands	r2, r5
 8014be2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8014be6:	f04f 31ff 	mov.w	r1, #4294967295
 8014bea:	d816      	bhi.n	8014c1a <_strtod_l+0x892>
 8014bec:	0d12      	lsrs	r2, r2, #20
 8014bee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8014bf6:	4298      	cmp	r0, r3
 8014bf8:	d142      	bne.n	8014c80 <_strtod_l+0x8f8>
 8014bfa:	4ba7      	ldr	r3, [pc, #668]	; (8014e98 <_strtod_l+0xb10>)
 8014bfc:	429d      	cmp	r5, r3
 8014bfe:	d102      	bne.n	8014c06 <_strtod_l+0x87e>
 8014c00:	3001      	adds	r0, #1
 8014c02:	f43f addf 	beq.w	80147c4 <_strtod_l+0x43c>
 8014c06:	4ba3      	ldr	r3, [pc, #652]	; (8014e94 <_strtod_l+0xb0c>)
 8014c08:	402b      	ands	r3, r5
 8014c0a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014c0e:	f04f 0a00 	mov.w	sl, #0
 8014c12:	e7a0      	b.n	8014b56 <_strtod_l+0x7ce>
 8014c14:	f04f 33ff 	mov.w	r3, #4294967295
 8014c18:	e7ed      	b.n	8014bf6 <_strtod_l+0x86e>
 8014c1a:	460b      	mov	r3, r1
 8014c1c:	e7eb      	b.n	8014bf6 <_strtod_l+0x86e>
 8014c1e:	bb7b      	cbnz	r3, 8014c80 <_strtod_l+0x8f8>
 8014c20:	f1ba 0f00 	cmp.w	sl, #0
 8014c24:	d12c      	bne.n	8014c80 <_strtod_l+0x8f8>
 8014c26:	9904      	ldr	r1, [sp, #16]
 8014c28:	4a9a      	ldr	r2, [pc, #616]	; (8014e94 <_strtod_l+0xb0c>)
 8014c2a:	465b      	mov	r3, fp
 8014c2c:	b1f1      	cbz	r1, 8014c6c <_strtod_l+0x8e4>
 8014c2e:	ea02 010b 	and.w	r1, r2, fp
 8014c32:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014c36:	dc19      	bgt.n	8014c6c <_strtod_l+0x8e4>
 8014c38:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014c3c:	f77f ae5b 	ble.w	80148f6 <_strtod_l+0x56e>
 8014c40:	4a96      	ldr	r2, [pc, #600]	; (8014e9c <_strtod_l+0xb14>)
 8014c42:	2300      	movs	r3, #0
 8014c44:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8014c48:	4650      	mov	r0, sl
 8014c4a:	4659      	mov	r1, fp
 8014c4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014c50:	f7eb fcea 	bl	8000628 <__aeabi_dmul>
 8014c54:	4682      	mov	sl, r0
 8014c56:	468b      	mov	fp, r1
 8014c58:	2900      	cmp	r1, #0
 8014c5a:	f47f adbe 	bne.w	80147da <_strtod_l+0x452>
 8014c5e:	2800      	cmp	r0, #0
 8014c60:	f47f adbb 	bne.w	80147da <_strtod_l+0x452>
 8014c64:	2322      	movs	r3, #34	; 0x22
 8014c66:	f8c9 3000 	str.w	r3, [r9]
 8014c6a:	e5b6      	b.n	80147da <_strtod_l+0x452>
 8014c6c:	4013      	ands	r3, r2
 8014c6e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014c72:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014c76:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014c7a:	f04f 3aff 	mov.w	sl, #4294967295
 8014c7e:	e76a      	b.n	8014b56 <_strtod_l+0x7ce>
 8014c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c82:	b193      	cbz	r3, 8014caa <_strtod_l+0x922>
 8014c84:	422b      	tst	r3, r5
 8014c86:	f43f af66 	beq.w	8014b56 <_strtod_l+0x7ce>
 8014c8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c8c:	9a04      	ldr	r2, [sp, #16]
 8014c8e:	4650      	mov	r0, sl
 8014c90:	4659      	mov	r1, fp
 8014c92:	b173      	cbz	r3, 8014cb2 <_strtod_l+0x92a>
 8014c94:	f7ff fb5c 	bl	8014350 <sulp>
 8014c98:	4602      	mov	r2, r0
 8014c9a:	460b      	mov	r3, r1
 8014c9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014ca0:	f7eb fb0c 	bl	80002bc <__adddf3>
 8014ca4:	4682      	mov	sl, r0
 8014ca6:	468b      	mov	fp, r1
 8014ca8:	e755      	b.n	8014b56 <_strtod_l+0x7ce>
 8014caa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014cac:	ea13 0f0a 	tst.w	r3, sl
 8014cb0:	e7e9      	b.n	8014c86 <_strtod_l+0x8fe>
 8014cb2:	f7ff fb4d 	bl	8014350 <sulp>
 8014cb6:	4602      	mov	r2, r0
 8014cb8:	460b      	mov	r3, r1
 8014cba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014cbe:	f7eb fafb 	bl	80002b8 <__aeabi_dsub>
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	2300      	movs	r3, #0
 8014cc6:	4682      	mov	sl, r0
 8014cc8:	468b      	mov	fp, r1
 8014cca:	f7eb ff15 	bl	8000af8 <__aeabi_dcmpeq>
 8014cce:	2800      	cmp	r0, #0
 8014cd0:	f47f ae11 	bne.w	80148f6 <_strtod_l+0x56e>
 8014cd4:	e73f      	b.n	8014b56 <_strtod_l+0x7ce>
 8014cd6:	4641      	mov	r1, r8
 8014cd8:	4620      	mov	r0, r4
 8014cda:	f001 ff40 	bl	8016b5e <__ratio>
 8014cde:	ec57 6b10 	vmov	r6, r7, d0
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014ce8:	ee10 0a10 	vmov	r0, s0
 8014cec:	4639      	mov	r1, r7
 8014cee:	f7eb ff17 	bl	8000b20 <__aeabi_dcmple>
 8014cf2:	2800      	cmp	r0, #0
 8014cf4:	d077      	beq.n	8014de6 <_strtod_l+0xa5e>
 8014cf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d04a      	beq.n	8014d92 <_strtod_l+0xa0a>
 8014cfc:	4b68      	ldr	r3, [pc, #416]	; (8014ea0 <_strtod_l+0xb18>)
 8014cfe:	2200      	movs	r2, #0
 8014d00:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014d04:	4f66      	ldr	r7, [pc, #408]	; (8014ea0 <_strtod_l+0xb18>)
 8014d06:	2600      	movs	r6, #0
 8014d08:	4b62      	ldr	r3, [pc, #392]	; (8014e94 <_strtod_l+0xb0c>)
 8014d0a:	402b      	ands	r3, r5
 8014d0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014d10:	4b64      	ldr	r3, [pc, #400]	; (8014ea4 <_strtod_l+0xb1c>)
 8014d12:	429a      	cmp	r2, r3
 8014d14:	f040 80ce 	bne.w	8014eb4 <_strtod_l+0xb2c>
 8014d18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014d1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014d20:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8014d24:	ec4b ab10 	vmov	d0, sl, fp
 8014d28:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8014d2c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014d30:	f001 fe50 	bl	80169d4 <__ulp>
 8014d34:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014d38:	ec53 2b10 	vmov	r2, r3, d0
 8014d3c:	f7eb fc74 	bl	8000628 <__aeabi_dmul>
 8014d40:	4652      	mov	r2, sl
 8014d42:	465b      	mov	r3, fp
 8014d44:	f7eb faba 	bl	80002bc <__adddf3>
 8014d48:	460b      	mov	r3, r1
 8014d4a:	4952      	ldr	r1, [pc, #328]	; (8014e94 <_strtod_l+0xb0c>)
 8014d4c:	4a56      	ldr	r2, [pc, #344]	; (8014ea8 <_strtod_l+0xb20>)
 8014d4e:	4019      	ands	r1, r3
 8014d50:	4291      	cmp	r1, r2
 8014d52:	4682      	mov	sl, r0
 8014d54:	d95b      	bls.n	8014e0e <_strtod_l+0xa86>
 8014d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d58:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014d5c:	4293      	cmp	r3, r2
 8014d5e:	d103      	bne.n	8014d68 <_strtod_l+0x9e0>
 8014d60:	9b08      	ldr	r3, [sp, #32]
 8014d62:	3301      	adds	r3, #1
 8014d64:	f43f ad2e 	beq.w	80147c4 <_strtod_l+0x43c>
 8014d68:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014e98 <_strtod_l+0xb10>
 8014d6c:	f04f 3aff 	mov.w	sl, #4294967295
 8014d70:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014d72:	4648      	mov	r0, r9
 8014d74:	f001 fb96 	bl	80164a4 <_Bfree>
 8014d78:	9905      	ldr	r1, [sp, #20]
 8014d7a:	4648      	mov	r0, r9
 8014d7c:	f001 fb92 	bl	80164a4 <_Bfree>
 8014d80:	4641      	mov	r1, r8
 8014d82:	4648      	mov	r0, r9
 8014d84:	f001 fb8e 	bl	80164a4 <_Bfree>
 8014d88:	4621      	mov	r1, r4
 8014d8a:	4648      	mov	r0, r9
 8014d8c:	f001 fb8a 	bl	80164a4 <_Bfree>
 8014d90:	e619      	b.n	80149c6 <_strtod_l+0x63e>
 8014d92:	f1ba 0f00 	cmp.w	sl, #0
 8014d96:	d11a      	bne.n	8014dce <_strtod_l+0xa46>
 8014d98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014d9c:	b9eb      	cbnz	r3, 8014dda <_strtod_l+0xa52>
 8014d9e:	2200      	movs	r2, #0
 8014da0:	4b3f      	ldr	r3, [pc, #252]	; (8014ea0 <_strtod_l+0xb18>)
 8014da2:	4630      	mov	r0, r6
 8014da4:	4639      	mov	r1, r7
 8014da6:	f7eb feb1 	bl	8000b0c <__aeabi_dcmplt>
 8014daa:	b9c8      	cbnz	r0, 8014de0 <_strtod_l+0xa58>
 8014dac:	4630      	mov	r0, r6
 8014dae:	4639      	mov	r1, r7
 8014db0:	2200      	movs	r2, #0
 8014db2:	4b3e      	ldr	r3, [pc, #248]	; (8014eac <_strtod_l+0xb24>)
 8014db4:	f7eb fc38 	bl	8000628 <__aeabi_dmul>
 8014db8:	4606      	mov	r6, r0
 8014dba:	460f      	mov	r7, r1
 8014dbc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014dc0:	9618      	str	r6, [sp, #96]	; 0x60
 8014dc2:	9319      	str	r3, [sp, #100]	; 0x64
 8014dc4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8014dc8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014dcc:	e79c      	b.n	8014d08 <_strtod_l+0x980>
 8014dce:	f1ba 0f01 	cmp.w	sl, #1
 8014dd2:	d102      	bne.n	8014dda <_strtod_l+0xa52>
 8014dd4:	2d00      	cmp	r5, #0
 8014dd6:	f43f ad8e 	beq.w	80148f6 <_strtod_l+0x56e>
 8014dda:	2200      	movs	r2, #0
 8014ddc:	4b34      	ldr	r3, [pc, #208]	; (8014eb0 <_strtod_l+0xb28>)
 8014dde:	e78f      	b.n	8014d00 <_strtod_l+0x978>
 8014de0:	2600      	movs	r6, #0
 8014de2:	4f32      	ldr	r7, [pc, #200]	; (8014eac <_strtod_l+0xb24>)
 8014de4:	e7ea      	b.n	8014dbc <_strtod_l+0xa34>
 8014de6:	4b31      	ldr	r3, [pc, #196]	; (8014eac <_strtod_l+0xb24>)
 8014de8:	4630      	mov	r0, r6
 8014dea:	4639      	mov	r1, r7
 8014dec:	2200      	movs	r2, #0
 8014dee:	f7eb fc1b 	bl	8000628 <__aeabi_dmul>
 8014df2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014df4:	4606      	mov	r6, r0
 8014df6:	460f      	mov	r7, r1
 8014df8:	b933      	cbnz	r3, 8014e08 <_strtod_l+0xa80>
 8014dfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014dfe:	9010      	str	r0, [sp, #64]	; 0x40
 8014e00:	9311      	str	r3, [sp, #68]	; 0x44
 8014e02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014e06:	e7df      	b.n	8014dc8 <_strtod_l+0xa40>
 8014e08:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8014e0c:	e7f9      	b.n	8014e02 <_strtod_l+0xa7a>
 8014e0e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014e12:	9b04      	ldr	r3, [sp, #16]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d1ab      	bne.n	8014d70 <_strtod_l+0x9e8>
 8014e18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014e1c:	0d1b      	lsrs	r3, r3, #20
 8014e1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014e20:	051b      	lsls	r3, r3, #20
 8014e22:	429a      	cmp	r2, r3
 8014e24:	465d      	mov	r5, fp
 8014e26:	d1a3      	bne.n	8014d70 <_strtod_l+0x9e8>
 8014e28:	4639      	mov	r1, r7
 8014e2a:	4630      	mov	r0, r6
 8014e2c:	f7eb feac 	bl	8000b88 <__aeabi_d2iz>
 8014e30:	f7eb fb90 	bl	8000554 <__aeabi_i2d>
 8014e34:	460b      	mov	r3, r1
 8014e36:	4602      	mov	r2, r0
 8014e38:	4639      	mov	r1, r7
 8014e3a:	4630      	mov	r0, r6
 8014e3c:	f7eb fa3c 	bl	80002b8 <__aeabi_dsub>
 8014e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e42:	4606      	mov	r6, r0
 8014e44:	460f      	mov	r7, r1
 8014e46:	b933      	cbnz	r3, 8014e56 <_strtod_l+0xace>
 8014e48:	f1ba 0f00 	cmp.w	sl, #0
 8014e4c:	d103      	bne.n	8014e56 <_strtod_l+0xace>
 8014e4e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8014e52:	2d00      	cmp	r5, #0
 8014e54:	d06d      	beq.n	8014f32 <_strtod_l+0xbaa>
 8014e56:	a30a      	add	r3, pc, #40	; (adr r3, 8014e80 <_strtod_l+0xaf8>)
 8014e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e5c:	4630      	mov	r0, r6
 8014e5e:	4639      	mov	r1, r7
 8014e60:	f7eb fe54 	bl	8000b0c <__aeabi_dcmplt>
 8014e64:	2800      	cmp	r0, #0
 8014e66:	f47f acb8 	bne.w	80147da <_strtod_l+0x452>
 8014e6a:	a307      	add	r3, pc, #28	; (adr r3, 8014e88 <_strtod_l+0xb00>)
 8014e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e70:	4630      	mov	r0, r6
 8014e72:	4639      	mov	r1, r7
 8014e74:	f7eb fe68 	bl	8000b48 <__aeabi_dcmpgt>
 8014e78:	2800      	cmp	r0, #0
 8014e7a:	f43f af79 	beq.w	8014d70 <_strtod_l+0x9e8>
 8014e7e:	e4ac      	b.n	80147da <_strtod_l+0x452>
 8014e80:	94a03595 	.word	0x94a03595
 8014e84:	3fdfffff 	.word	0x3fdfffff
 8014e88:	35afe535 	.word	0x35afe535
 8014e8c:	3fe00000 	.word	0x3fe00000
 8014e90:	000fffff 	.word	0x000fffff
 8014e94:	7ff00000 	.word	0x7ff00000
 8014e98:	7fefffff 	.word	0x7fefffff
 8014e9c:	39500000 	.word	0x39500000
 8014ea0:	3ff00000 	.word	0x3ff00000
 8014ea4:	7fe00000 	.word	0x7fe00000
 8014ea8:	7c9fffff 	.word	0x7c9fffff
 8014eac:	3fe00000 	.word	0x3fe00000
 8014eb0:	bff00000 	.word	0xbff00000
 8014eb4:	9b04      	ldr	r3, [sp, #16]
 8014eb6:	b333      	cbz	r3, 8014f06 <_strtod_l+0xb7e>
 8014eb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014eba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014ebe:	d822      	bhi.n	8014f06 <_strtod_l+0xb7e>
 8014ec0:	a327      	add	r3, pc, #156	; (adr r3, 8014f60 <_strtod_l+0xbd8>)
 8014ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ec6:	4630      	mov	r0, r6
 8014ec8:	4639      	mov	r1, r7
 8014eca:	f7eb fe29 	bl	8000b20 <__aeabi_dcmple>
 8014ece:	b1a0      	cbz	r0, 8014efa <_strtod_l+0xb72>
 8014ed0:	4639      	mov	r1, r7
 8014ed2:	4630      	mov	r0, r6
 8014ed4:	f7eb fe80 	bl	8000bd8 <__aeabi_d2uiz>
 8014ed8:	2800      	cmp	r0, #0
 8014eda:	bf08      	it	eq
 8014edc:	2001      	moveq	r0, #1
 8014ede:	f7eb fb29 	bl	8000534 <__aeabi_ui2d>
 8014ee2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ee4:	4606      	mov	r6, r0
 8014ee6:	460f      	mov	r7, r1
 8014ee8:	bb03      	cbnz	r3, 8014f2c <_strtod_l+0xba4>
 8014eea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014eee:	9012      	str	r0, [sp, #72]	; 0x48
 8014ef0:	9313      	str	r3, [sp, #76]	; 0x4c
 8014ef2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014ef6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014efc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014efe:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014f02:	1a9b      	subs	r3, r3, r2
 8014f04:	930b      	str	r3, [sp, #44]	; 0x2c
 8014f06:	ed9d 0b08 	vldr	d0, [sp, #32]
 8014f0a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8014f0e:	f001 fd61 	bl	80169d4 <__ulp>
 8014f12:	4650      	mov	r0, sl
 8014f14:	ec53 2b10 	vmov	r2, r3, d0
 8014f18:	4659      	mov	r1, fp
 8014f1a:	f7eb fb85 	bl	8000628 <__aeabi_dmul>
 8014f1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014f22:	f7eb f9cb 	bl	80002bc <__adddf3>
 8014f26:	4682      	mov	sl, r0
 8014f28:	468b      	mov	fp, r1
 8014f2a:	e772      	b.n	8014e12 <_strtod_l+0xa8a>
 8014f2c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8014f30:	e7df      	b.n	8014ef2 <_strtod_l+0xb6a>
 8014f32:	a30d      	add	r3, pc, #52	; (adr r3, 8014f68 <_strtod_l+0xbe0>)
 8014f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f38:	f7eb fde8 	bl	8000b0c <__aeabi_dcmplt>
 8014f3c:	e79c      	b.n	8014e78 <_strtod_l+0xaf0>
 8014f3e:	2300      	movs	r3, #0
 8014f40:	930d      	str	r3, [sp, #52]	; 0x34
 8014f42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014f44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014f46:	6013      	str	r3, [r2, #0]
 8014f48:	f7ff ba61 	b.w	801440e <_strtod_l+0x86>
 8014f4c:	2b65      	cmp	r3, #101	; 0x65
 8014f4e:	f04f 0200 	mov.w	r2, #0
 8014f52:	f43f ab4e 	beq.w	80145f2 <_strtod_l+0x26a>
 8014f56:	2101      	movs	r1, #1
 8014f58:	4614      	mov	r4, r2
 8014f5a:	9104      	str	r1, [sp, #16]
 8014f5c:	f7ff bacb 	b.w	80144f6 <_strtod_l+0x16e>
 8014f60:	ffc00000 	.word	0xffc00000
 8014f64:	41dfffff 	.word	0x41dfffff
 8014f68:	94a03595 	.word	0x94a03595
 8014f6c:	3fcfffff 	.word	0x3fcfffff

08014f70 <_strtod_r>:
 8014f70:	4b05      	ldr	r3, [pc, #20]	; (8014f88 <_strtod_r+0x18>)
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	b410      	push	{r4}
 8014f76:	6a1b      	ldr	r3, [r3, #32]
 8014f78:	4c04      	ldr	r4, [pc, #16]	; (8014f8c <_strtod_r+0x1c>)
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	bf08      	it	eq
 8014f7e:	4623      	moveq	r3, r4
 8014f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014f84:	f7ff ba00 	b.w	8014388 <_strtod_l>
 8014f88:	2000000c 	.word	0x2000000c
 8014f8c:	20000070 	.word	0x20000070

08014f90 <_strtol_l.isra.0>:
 8014f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f94:	4680      	mov	r8, r0
 8014f96:	4689      	mov	r9, r1
 8014f98:	4692      	mov	sl, r2
 8014f9a:	461e      	mov	r6, r3
 8014f9c:	460f      	mov	r7, r1
 8014f9e:	463d      	mov	r5, r7
 8014fa0:	9808      	ldr	r0, [sp, #32]
 8014fa2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014fa6:	f001 fa0d 	bl	80163c4 <__locale_ctype_ptr_l>
 8014faa:	4420      	add	r0, r4
 8014fac:	7843      	ldrb	r3, [r0, #1]
 8014fae:	f013 0308 	ands.w	r3, r3, #8
 8014fb2:	d132      	bne.n	801501a <_strtol_l.isra.0+0x8a>
 8014fb4:	2c2d      	cmp	r4, #45	; 0x2d
 8014fb6:	d132      	bne.n	801501e <_strtol_l.isra.0+0x8e>
 8014fb8:	787c      	ldrb	r4, [r7, #1]
 8014fba:	1cbd      	adds	r5, r7, #2
 8014fbc:	2201      	movs	r2, #1
 8014fbe:	2e00      	cmp	r6, #0
 8014fc0:	d05d      	beq.n	801507e <_strtol_l.isra.0+0xee>
 8014fc2:	2e10      	cmp	r6, #16
 8014fc4:	d109      	bne.n	8014fda <_strtol_l.isra.0+0x4a>
 8014fc6:	2c30      	cmp	r4, #48	; 0x30
 8014fc8:	d107      	bne.n	8014fda <_strtol_l.isra.0+0x4a>
 8014fca:	782b      	ldrb	r3, [r5, #0]
 8014fcc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014fd0:	2b58      	cmp	r3, #88	; 0x58
 8014fd2:	d14f      	bne.n	8015074 <_strtol_l.isra.0+0xe4>
 8014fd4:	786c      	ldrb	r4, [r5, #1]
 8014fd6:	2610      	movs	r6, #16
 8014fd8:	3502      	adds	r5, #2
 8014fda:	2a00      	cmp	r2, #0
 8014fdc:	bf14      	ite	ne
 8014fde:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014fe2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014fe6:	2700      	movs	r7, #0
 8014fe8:	fbb1 fcf6 	udiv	ip, r1, r6
 8014fec:	4638      	mov	r0, r7
 8014fee:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014ff2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014ff6:	2b09      	cmp	r3, #9
 8014ff8:	d817      	bhi.n	801502a <_strtol_l.isra.0+0x9a>
 8014ffa:	461c      	mov	r4, r3
 8014ffc:	42a6      	cmp	r6, r4
 8014ffe:	dd23      	ble.n	8015048 <_strtol_l.isra.0+0xb8>
 8015000:	1c7b      	adds	r3, r7, #1
 8015002:	d007      	beq.n	8015014 <_strtol_l.isra.0+0x84>
 8015004:	4584      	cmp	ip, r0
 8015006:	d31c      	bcc.n	8015042 <_strtol_l.isra.0+0xb2>
 8015008:	d101      	bne.n	801500e <_strtol_l.isra.0+0x7e>
 801500a:	45a6      	cmp	lr, r4
 801500c:	db19      	blt.n	8015042 <_strtol_l.isra.0+0xb2>
 801500e:	fb00 4006 	mla	r0, r0, r6, r4
 8015012:	2701      	movs	r7, #1
 8015014:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015018:	e7eb      	b.n	8014ff2 <_strtol_l.isra.0+0x62>
 801501a:	462f      	mov	r7, r5
 801501c:	e7bf      	b.n	8014f9e <_strtol_l.isra.0+0xe>
 801501e:	2c2b      	cmp	r4, #43	; 0x2b
 8015020:	bf04      	itt	eq
 8015022:	1cbd      	addeq	r5, r7, #2
 8015024:	787c      	ldrbeq	r4, [r7, #1]
 8015026:	461a      	mov	r2, r3
 8015028:	e7c9      	b.n	8014fbe <_strtol_l.isra.0+0x2e>
 801502a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801502e:	2b19      	cmp	r3, #25
 8015030:	d801      	bhi.n	8015036 <_strtol_l.isra.0+0xa6>
 8015032:	3c37      	subs	r4, #55	; 0x37
 8015034:	e7e2      	b.n	8014ffc <_strtol_l.isra.0+0x6c>
 8015036:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801503a:	2b19      	cmp	r3, #25
 801503c:	d804      	bhi.n	8015048 <_strtol_l.isra.0+0xb8>
 801503e:	3c57      	subs	r4, #87	; 0x57
 8015040:	e7dc      	b.n	8014ffc <_strtol_l.isra.0+0x6c>
 8015042:	f04f 37ff 	mov.w	r7, #4294967295
 8015046:	e7e5      	b.n	8015014 <_strtol_l.isra.0+0x84>
 8015048:	1c7b      	adds	r3, r7, #1
 801504a:	d108      	bne.n	801505e <_strtol_l.isra.0+0xce>
 801504c:	2322      	movs	r3, #34	; 0x22
 801504e:	f8c8 3000 	str.w	r3, [r8]
 8015052:	4608      	mov	r0, r1
 8015054:	f1ba 0f00 	cmp.w	sl, #0
 8015058:	d107      	bne.n	801506a <_strtol_l.isra.0+0xda>
 801505a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801505e:	b102      	cbz	r2, 8015062 <_strtol_l.isra.0+0xd2>
 8015060:	4240      	negs	r0, r0
 8015062:	f1ba 0f00 	cmp.w	sl, #0
 8015066:	d0f8      	beq.n	801505a <_strtol_l.isra.0+0xca>
 8015068:	b10f      	cbz	r7, 801506e <_strtol_l.isra.0+0xde>
 801506a:	f105 39ff 	add.w	r9, r5, #4294967295
 801506e:	f8ca 9000 	str.w	r9, [sl]
 8015072:	e7f2      	b.n	801505a <_strtol_l.isra.0+0xca>
 8015074:	2430      	movs	r4, #48	; 0x30
 8015076:	2e00      	cmp	r6, #0
 8015078:	d1af      	bne.n	8014fda <_strtol_l.isra.0+0x4a>
 801507a:	2608      	movs	r6, #8
 801507c:	e7ad      	b.n	8014fda <_strtol_l.isra.0+0x4a>
 801507e:	2c30      	cmp	r4, #48	; 0x30
 8015080:	d0a3      	beq.n	8014fca <_strtol_l.isra.0+0x3a>
 8015082:	260a      	movs	r6, #10
 8015084:	e7a9      	b.n	8014fda <_strtol_l.isra.0+0x4a>
	...

08015088 <_strtol_r>:
 8015088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801508a:	4c06      	ldr	r4, [pc, #24]	; (80150a4 <_strtol_r+0x1c>)
 801508c:	4d06      	ldr	r5, [pc, #24]	; (80150a8 <_strtol_r+0x20>)
 801508e:	6824      	ldr	r4, [r4, #0]
 8015090:	6a24      	ldr	r4, [r4, #32]
 8015092:	2c00      	cmp	r4, #0
 8015094:	bf08      	it	eq
 8015096:	462c      	moveq	r4, r5
 8015098:	9400      	str	r4, [sp, #0]
 801509a:	f7ff ff79 	bl	8014f90 <_strtol_l.isra.0>
 801509e:	b003      	add	sp, #12
 80150a0:	bd30      	pop	{r4, r5, pc}
 80150a2:	bf00      	nop
 80150a4:	2000000c 	.word	0x2000000c
 80150a8:	20000070 	.word	0x20000070

080150ac <_vsiprintf_r>:
 80150ac:	b500      	push	{lr}
 80150ae:	b09b      	sub	sp, #108	; 0x6c
 80150b0:	9100      	str	r1, [sp, #0]
 80150b2:	9104      	str	r1, [sp, #16]
 80150b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80150b8:	9105      	str	r1, [sp, #20]
 80150ba:	9102      	str	r1, [sp, #8]
 80150bc:	4905      	ldr	r1, [pc, #20]	; (80150d4 <_vsiprintf_r+0x28>)
 80150be:	9103      	str	r1, [sp, #12]
 80150c0:	4669      	mov	r1, sp
 80150c2:	f001 fecb 	bl	8016e5c <_svfiprintf_r>
 80150c6:	9b00      	ldr	r3, [sp, #0]
 80150c8:	2200      	movs	r2, #0
 80150ca:	701a      	strb	r2, [r3, #0]
 80150cc:	b01b      	add	sp, #108	; 0x6c
 80150ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80150d2:	bf00      	nop
 80150d4:	ffff0208 	.word	0xffff0208

080150d8 <vsiprintf>:
 80150d8:	4613      	mov	r3, r2
 80150da:	460a      	mov	r2, r1
 80150dc:	4601      	mov	r1, r0
 80150de:	4802      	ldr	r0, [pc, #8]	; (80150e8 <vsiprintf+0x10>)
 80150e0:	6800      	ldr	r0, [r0, #0]
 80150e2:	f7ff bfe3 	b.w	80150ac <_vsiprintf_r>
 80150e6:	bf00      	nop
 80150e8:	2000000c 	.word	0x2000000c

080150ec <quorem>:
 80150ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150f0:	6903      	ldr	r3, [r0, #16]
 80150f2:	690c      	ldr	r4, [r1, #16]
 80150f4:	42a3      	cmp	r3, r4
 80150f6:	4680      	mov	r8, r0
 80150f8:	f2c0 8082 	blt.w	8015200 <quorem+0x114>
 80150fc:	3c01      	subs	r4, #1
 80150fe:	f101 0714 	add.w	r7, r1, #20
 8015102:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8015106:	f100 0614 	add.w	r6, r0, #20
 801510a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801510e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8015112:	eb06 030c 	add.w	r3, r6, ip
 8015116:	3501      	adds	r5, #1
 8015118:	eb07 090c 	add.w	r9, r7, ip
 801511c:	9301      	str	r3, [sp, #4]
 801511e:	fbb0 f5f5 	udiv	r5, r0, r5
 8015122:	b395      	cbz	r5, 801518a <quorem+0x9e>
 8015124:	f04f 0a00 	mov.w	sl, #0
 8015128:	4638      	mov	r0, r7
 801512a:	46b6      	mov	lr, r6
 801512c:	46d3      	mov	fp, sl
 801512e:	f850 2b04 	ldr.w	r2, [r0], #4
 8015132:	b293      	uxth	r3, r2
 8015134:	fb05 a303 	mla	r3, r5, r3, sl
 8015138:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801513c:	b29b      	uxth	r3, r3
 801513e:	ebab 0303 	sub.w	r3, fp, r3
 8015142:	0c12      	lsrs	r2, r2, #16
 8015144:	f8de b000 	ldr.w	fp, [lr]
 8015148:	fb05 a202 	mla	r2, r5, r2, sl
 801514c:	fa13 f38b 	uxtah	r3, r3, fp
 8015150:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8015154:	fa1f fb82 	uxth.w	fp, r2
 8015158:	f8de 2000 	ldr.w	r2, [lr]
 801515c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8015160:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015164:	b29b      	uxth	r3, r3
 8015166:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801516a:	4581      	cmp	r9, r0
 801516c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8015170:	f84e 3b04 	str.w	r3, [lr], #4
 8015174:	d2db      	bcs.n	801512e <quorem+0x42>
 8015176:	f856 300c 	ldr.w	r3, [r6, ip]
 801517a:	b933      	cbnz	r3, 801518a <quorem+0x9e>
 801517c:	9b01      	ldr	r3, [sp, #4]
 801517e:	3b04      	subs	r3, #4
 8015180:	429e      	cmp	r6, r3
 8015182:	461a      	mov	r2, r3
 8015184:	d330      	bcc.n	80151e8 <quorem+0xfc>
 8015186:	f8c8 4010 	str.w	r4, [r8, #16]
 801518a:	4640      	mov	r0, r8
 801518c:	f001 fbaa 	bl	80168e4 <__mcmp>
 8015190:	2800      	cmp	r0, #0
 8015192:	db25      	blt.n	80151e0 <quorem+0xf4>
 8015194:	3501      	adds	r5, #1
 8015196:	4630      	mov	r0, r6
 8015198:	f04f 0c00 	mov.w	ip, #0
 801519c:	f857 2b04 	ldr.w	r2, [r7], #4
 80151a0:	f8d0 e000 	ldr.w	lr, [r0]
 80151a4:	b293      	uxth	r3, r2
 80151a6:	ebac 0303 	sub.w	r3, ip, r3
 80151aa:	0c12      	lsrs	r2, r2, #16
 80151ac:	fa13 f38e 	uxtah	r3, r3, lr
 80151b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80151b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80151b8:	b29b      	uxth	r3, r3
 80151ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80151be:	45b9      	cmp	r9, r7
 80151c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80151c4:	f840 3b04 	str.w	r3, [r0], #4
 80151c8:	d2e8      	bcs.n	801519c <quorem+0xb0>
 80151ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80151ce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80151d2:	b92a      	cbnz	r2, 80151e0 <quorem+0xf4>
 80151d4:	3b04      	subs	r3, #4
 80151d6:	429e      	cmp	r6, r3
 80151d8:	461a      	mov	r2, r3
 80151da:	d30b      	bcc.n	80151f4 <quorem+0x108>
 80151dc:	f8c8 4010 	str.w	r4, [r8, #16]
 80151e0:	4628      	mov	r0, r5
 80151e2:	b003      	add	sp, #12
 80151e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151e8:	6812      	ldr	r2, [r2, #0]
 80151ea:	3b04      	subs	r3, #4
 80151ec:	2a00      	cmp	r2, #0
 80151ee:	d1ca      	bne.n	8015186 <quorem+0x9a>
 80151f0:	3c01      	subs	r4, #1
 80151f2:	e7c5      	b.n	8015180 <quorem+0x94>
 80151f4:	6812      	ldr	r2, [r2, #0]
 80151f6:	3b04      	subs	r3, #4
 80151f8:	2a00      	cmp	r2, #0
 80151fa:	d1ef      	bne.n	80151dc <quorem+0xf0>
 80151fc:	3c01      	subs	r4, #1
 80151fe:	e7ea      	b.n	80151d6 <quorem+0xea>
 8015200:	2000      	movs	r0, #0
 8015202:	e7ee      	b.n	80151e2 <quorem+0xf6>
 8015204:	0000      	movs	r0, r0
	...

08015208 <_dtoa_r>:
 8015208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801520c:	ec57 6b10 	vmov	r6, r7, d0
 8015210:	b097      	sub	sp, #92	; 0x5c
 8015212:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015214:	9106      	str	r1, [sp, #24]
 8015216:	4604      	mov	r4, r0
 8015218:	920b      	str	r2, [sp, #44]	; 0x2c
 801521a:	9312      	str	r3, [sp, #72]	; 0x48
 801521c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015220:	e9cd 6700 	strd	r6, r7, [sp]
 8015224:	b93d      	cbnz	r5, 8015236 <_dtoa_r+0x2e>
 8015226:	2010      	movs	r0, #16
 8015228:	f001 f8ee 	bl	8016408 <malloc>
 801522c:	6260      	str	r0, [r4, #36]	; 0x24
 801522e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015232:	6005      	str	r5, [r0, #0]
 8015234:	60c5      	str	r5, [r0, #12]
 8015236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015238:	6819      	ldr	r1, [r3, #0]
 801523a:	b151      	cbz	r1, 8015252 <_dtoa_r+0x4a>
 801523c:	685a      	ldr	r2, [r3, #4]
 801523e:	604a      	str	r2, [r1, #4]
 8015240:	2301      	movs	r3, #1
 8015242:	4093      	lsls	r3, r2
 8015244:	608b      	str	r3, [r1, #8]
 8015246:	4620      	mov	r0, r4
 8015248:	f001 f92c 	bl	80164a4 <_Bfree>
 801524c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801524e:	2200      	movs	r2, #0
 8015250:	601a      	str	r2, [r3, #0]
 8015252:	1e3b      	subs	r3, r7, #0
 8015254:	bfbb      	ittet	lt
 8015256:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801525a:	9301      	strlt	r3, [sp, #4]
 801525c:	2300      	movge	r3, #0
 801525e:	2201      	movlt	r2, #1
 8015260:	bfac      	ite	ge
 8015262:	f8c8 3000 	strge.w	r3, [r8]
 8015266:	f8c8 2000 	strlt.w	r2, [r8]
 801526a:	4baf      	ldr	r3, [pc, #700]	; (8015528 <_dtoa_r+0x320>)
 801526c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015270:	ea33 0308 	bics.w	r3, r3, r8
 8015274:	d114      	bne.n	80152a0 <_dtoa_r+0x98>
 8015276:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015278:	f242 730f 	movw	r3, #9999	; 0x270f
 801527c:	6013      	str	r3, [r2, #0]
 801527e:	9b00      	ldr	r3, [sp, #0]
 8015280:	b923      	cbnz	r3, 801528c <_dtoa_r+0x84>
 8015282:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8015286:	2800      	cmp	r0, #0
 8015288:	f000 8542 	beq.w	8015d10 <_dtoa_r+0xb08>
 801528c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801528e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801553c <_dtoa_r+0x334>
 8015292:	2b00      	cmp	r3, #0
 8015294:	f000 8544 	beq.w	8015d20 <_dtoa_r+0xb18>
 8015298:	f10b 0303 	add.w	r3, fp, #3
 801529c:	f000 bd3e 	b.w	8015d1c <_dtoa_r+0xb14>
 80152a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80152a4:	2200      	movs	r2, #0
 80152a6:	2300      	movs	r3, #0
 80152a8:	4630      	mov	r0, r6
 80152aa:	4639      	mov	r1, r7
 80152ac:	f7eb fc24 	bl	8000af8 <__aeabi_dcmpeq>
 80152b0:	4681      	mov	r9, r0
 80152b2:	b168      	cbz	r0, 80152d0 <_dtoa_r+0xc8>
 80152b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80152b6:	2301      	movs	r3, #1
 80152b8:	6013      	str	r3, [r2, #0]
 80152ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80152bc:	2b00      	cmp	r3, #0
 80152be:	f000 8524 	beq.w	8015d0a <_dtoa_r+0xb02>
 80152c2:	4b9a      	ldr	r3, [pc, #616]	; (801552c <_dtoa_r+0x324>)
 80152c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80152c6:	f103 3bff 	add.w	fp, r3, #4294967295
 80152ca:	6013      	str	r3, [r2, #0]
 80152cc:	f000 bd28 	b.w	8015d20 <_dtoa_r+0xb18>
 80152d0:	aa14      	add	r2, sp, #80	; 0x50
 80152d2:	a915      	add	r1, sp, #84	; 0x54
 80152d4:	ec47 6b10 	vmov	d0, r6, r7
 80152d8:	4620      	mov	r0, r4
 80152da:	f001 fbf1 	bl	8016ac0 <__d2b>
 80152de:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80152e2:	9004      	str	r0, [sp, #16]
 80152e4:	2d00      	cmp	r5, #0
 80152e6:	d07c      	beq.n	80153e2 <_dtoa_r+0x1da>
 80152e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80152ec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80152f0:	46b2      	mov	sl, r6
 80152f2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80152f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80152fa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80152fe:	2200      	movs	r2, #0
 8015300:	4b8b      	ldr	r3, [pc, #556]	; (8015530 <_dtoa_r+0x328>)
 8015302:	4650      	mov	r0, sl
 8015304:	4659      	mov	r1, fp
 8015306:	f7ea ffd7 	bl	80002b8 <__aeabi_dsub>
 801530a:	a381      	add	r3, pc, #516	; (adr r3, 8015510 <_dtoa_r+0x308>)
 801530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015310:	f7eb f98a 	bl	8000628 <__aeabi_dmul>
 8015314:	a380      	add	r3, pc, #512	; (adr r3, 8015518 <_dtoa_r+0x310>)
 8015316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801531a:	f7ea ffcf 	bl	80002bc <__adddf3>
 801531e:	4606      	mov	r6, r0
 8015320:	4628      	mov	r0, r5
 8015322:	460f      	mov	r7, r1
 8015324:	f7eb f916 	bl	8000554 <__aeabi_i2d>
 8015328:	a37d      	add	r3, pc, #500	; (adr r3, 8015520 <_dtoa_r+0x318>)
 801532a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801532e:	f7eb f97b 	bl	8000628 <__aeabi_dmul>
 8015332:	4602      	mov	r2, r0
 8015334:	460b      	mov	r3, r1
 8015336:	4630      	mov	r0, r6
 8015338:	4639      	mov	r1, r7
 801533a:	f7ea ffbf 	bl	80002bc <__adddf3>
 801533e:	4606      	mov	r6, r0
 8015340:	460f      	mov	r7, r1
 8015342:	f7eb fc21 	bl	8000b88 <__aeabi_d2iz>
 8015346:	2200      	movs	r2, #0
 8015348:	4682      	mov	sl, r0
 801534a:	2300      	movs	r3, #0
 801534c:	4630      	mov	r0, r6
 801534e:	4639      	mov	r1, r7
 8015350:	f7eb fbdc 	bl	8000b0c <__aeabi_dcmplt>
 8015354:	b148      	cbz	r0, 801536a <_dtoa_r+0x162>
 8015356:	4650      	mov	r0, sl
 8015358:	f7eb f8fc 	bl	8000554 <__aeabi_i2d>
 801535c:	4632      	mov	r2, r6
 801535e:	463b      	mov	r3, r7
 8015360:	f7eb fbca 	bl	8000af8 <__aeabi_dcmpeq>
 8015364:	b908      	cbnz	r0, 801536a <_dtoa_r+0x162>
 8015366:	f10a 3aff 	add.w	sl, sl, #4294967295
 801536a:	f1ba 0f16 	cmp.w	sl, #22
 801536e:	d859      	bhi.n	8015424 <_dtoa_r+0x21c>
 8015370:	4970      	ldr	r1, [pc, #448]	; (8015534 <_dtoa_r+0x32c>)
 8015372:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8015376:	e9dd 2300 	ldrd	r2, r3, [sp]
 801537a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801537e:	f7eb fbe3 	bl	8000b48 <__aeabi_dcmpgt>
 8015382:	2800      	cmp	r0, #0
 8015384:	d050      	beq.n	8015428 <_dtoa_r+0x220>
 8015386:	f10a 3aff 	add.w	sl, sl, #4294967295
 801538a:	2300      	movs	r3, #0
 801538c:	930f      	str	r3, [sp, #60]	; 0x3c
 801538e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015390:	1b5d      	subs	r5, r3, r5
 8015392:	f1b5 0801 	subs.w	r8, r5, #1
 8015396:	bf49      	itett	mi
 8015398:	f1c5 0301 	rsbmi	r3, r5, #1
 801539c:	2300      	movpl	r3, #0
 801539e:	9305      	strmi	r3, [sp, #20]
 80153a0:	f04f 0800 	movmi.w	r8, #0
 80153a4:	bf58      	it	pl
 80153a6:	9305      	strpl	r3, [sp, #20]
 80153a8:	f1ba 0f00 	cmp.w	sl, #0
 80153ac:	db3e      	blt.n	801542c <_dtoa_r+0x224>
 80153ae:	2300      	movs	r3, #0
 80153b0:	44d0      	add	r8, sl
 80153b2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80153b6:	9307      	str	r3, [sp, #28]
 80153b8:	9b06      	ldr	r3, [sp, #24]
 80153ba:	2b09      	cmp	r3, #9
 80153bc:	f200 8090 	bhi.w	80154e0 <_dtoa_r+0x2d8>
 80153c0:	2b05      	cmp	r3, #5
 80153c2:	bfc4      	itt	gt
 80153c4:	3b04      	subgt	r3, #4
 80153c6:	9306      	strgt	r3, [sp, #24]
 80153c8:	9b06      	ldr	r3, [sp, #24]
 80153ca:	f1a3 0302 	sub.w	r3, r3, #2
 80153ce:	bfcc      	ite	gt
 80153d0:	2500      	movgt	r5, #0
 80153d2:	2501      	movle	r5, #1
 80153d4:	2b03      	cmp	r3, #3
 80153d6:	f200 808f 	bhi.w	80154f8 <_dtoa_r+0x2f0>
 80153da:	e8df f003 	tbb	[pc, r3]
 80153de:	7f7d      	.short	0x7f7d
 80153e0:	7131      	.short	0x7131
 80153e2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80153e6:	441d      	add	r5, r3
 80153e8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80153ec:	2820      	cmp	r0, #32
 80153ee:	dd13      	ble.n	8015418 <_dtoa_r+0x210>
 80153f0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80153f4:	9b00      	ldr	r3, [sp, #0]
 80153f6:	fa08 f800 	lsl.w	r8, r8, r0
 80153fa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80153fe:	fa23 f000 	lsr.w	r0, r3, r0
 8015402:	ea48 0000 	orr.w	r0, r8, r0
 8015406:	f7eb f895 	bl	8000534 <__aeabi_ui2d>
 801540a:	2301      	movs	r3, #1
 801540c:	4682      	mov	sl, r0
 801540e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8015412:	3d01      	subs	r5, #1
 8015414:	9313      	str	r3, [sp, #76]	; 0x4c
 8015416:	e772      	b.n	80152fe <_dtoa_r+0xf6>
 8015418:	9b00      	ldr	r3, [sp, #0]
 801541a:	f1c0 0020 	rsb	r0, r0, #32
 801541e:	fa03 f000 	lsl.w	r0, r3, r0
 8015422:	e7f0      	b.n	8015406 <_dtoa_r+0x1fe>
 8015424:	2301      	movs	r3, #1
 8015426:	e7b1      	b.n	801538c <_dtoa_r+0x184>
 8015428:	900f      	str	r0, [sp, #60]	; 0x3c
 801542a:	e7b0      	b.n	801538e <_dtoa_r+0x186>
 801542c:	9b05      	ldr	r3, [sp, #20]
 801542e:	eba3 030a 	sub.w	r3, r3, sl
 8015432:	9305      	str	r3, [sp, #20]
 8015434:	f1ca 0300 	rsb	r3, sl, #0
 8015438:	9307      	str	r3, [sp, #28]
 801543a:	2300      	movs	r3, #0
 801543c:	930e      	str	r3, [sp, #56]	; 0x38
 801543e:	e7bb      	b.n	80153b8 <_dtoa_r+0x1b0>
 8015440:	2301      	movs	r3, #1
 8015442:	930a      	str	r3, [sp, #40]	; 0x28
 8015444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015446:	2b00      	cmp	r3, #0
 8015448:	dd59      	ble.n	80154fe <_dtoa_r+0x2f6>
 801544a:	9302      	str	r3, [sp, #8]
 801544c:	4699      	mov	r9, r3
 801544e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015450:	2200      	movs	r2, #0
 8015452:	6072      	str	r2, [r6, #4]
 8015454:	2204      	movs	r2, #4
 8015456:	f102 0014 	add.w	r0, r2, #20
 801545a:	4298      	cmp	r0, r3
 801545c:	6871      	ldr	r1, [r6, #4]
 801545e:	d953      	bls.n	8015508 <_dtoa_r+0x300>
 8015460:	4620      	mov	r0, r4
 8015462:	f000 ffeb 	bl	801643c <_Balloc>
 8015466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015468:	6030      	str	r0, [r6, #0]
 801546a:	f1b9 0f0e 	cmp.w	r9, #14
 801546e:	f8d3 b000 	ldr.w	fp, [r3]
 8015472:	f200 80e6 	bhi.w	8015642 <_dtoa_r+0x43a>
 8015476:	2d00      	cmp	r5, #0
 8015478:	f000 80e3 	beq.w	8015642 <_dtoa_r+0x43a>
 801547c:	ed9d 7b00 	vldr	d7, [sp]
 8015480:	f1ba 0f00 	cmp.w	sl, #0
 8015484:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8015488:	dd74      	ble.n	8015574 <_dtoa_r+0x36c>
 801548a:	4a2a      	ldr	r2, [pc, #168]	; (8015534 <_dtoa_r+0x32c>)
 801548c:	f00a 030f 	and.w	r3, sl, #15
 8015490:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015494:	ed93 7b00 	vldr	d7, [r3]
 8015498:	ea4f 162a 	mov.w	r6, sl, asr #4
 801549c:	06f0      	lsls	r0, r6, #27
 801549e:	ed8d 7b08 	vstr	d7, [sp, #32]
 80154a2:	d565      	bpl.n	8015570 <_dtoa_r+0x368>
 80154a4:	4b24      	ldr	r3, [pc, #144]	; (8015538 <_dtoa_r+0x330>)
 80154a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80154aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80154ae:	f7eb f9e5 	bl	800087c <__aeabi_ddiv>
 80154b2:	e9cd 0100 	strd	r0, r1, [sp]
 80154b6:	f006 060f 	and.w	r6, r6, #15
 80154ba:	2503      	movs	r5, #3
 80154bc:	4f1e      	ldr	r7, [pc, #120]	; (8015538 <_dtoa_r+0x330>)
 80154be:	e04c      	b.n	801555a <_dtoa_r+0x352>
 80154c0:	2301      	movs	r3, #1
 80154c2:	930a      	str	r3, [sp, #40]	; 0x28
 80154c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80154c6:	4453      	add	r3, sl
 80154c8:	f103 0901 	add.w	r9, r3, #1
 80154cc:	9302      	str	r3, [sp, #8]
 80154ce:	464b      	mov	r3, r9
 80154d0:	2b01      	cmp	r3, #1
 80154d2:	bfb8      	it	lt
 80154d4:	2301      	movlt	r3, #1
 80154d6:	e7ba      	b.n	801544e <_dtoa_r+0x246>
 80154d8:	2300      	movs	r3, #0
 80154da:	e7b2      	b.n	8015442 <_dtoa_r+0x23a>
 80154dc:	2300      	movs	r3, #0
 80154de:	e7f0      	b.n	80154c2 <_dtoa_r+0x2ba>
 80154e0:	2501      	movs	r5, #1
 80154e2:	2300      	movs	r3, #0
 80154e4:	9306      	str	r3, [sp, #24]
 80154e6:	950a      	str	r5, [sp, #40]	; 0x28
 80154e8:	f04f 33ff 	mov.w	r3, #4294967295
 80154ec:	9302      	str	r3, [sp, #8]
 80154ee:	4699      	mov	r9, r3
 80154f0:	2200      	movs	r2, #0
 80154f2:	2312      	movs	r3, #18
 80154f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80154f6:	e7aa      	b.n	801544e <_dtoa_r+0x246>
 80154f8:	2301      	movs	r3, #1
 80154fa:	930a      	str	r3, [sp, #40]	; 0x28
 80154fc:	e7f4      	b.n	80154e8 <_dtoa_r+0x2e0>
 80154fe:	2301      	movs	r3, #1
 8015500:	9302      	str	r3, [sp, #8]
 8015502:	4699      	mov	r9, r3
 8015504:	461a      	mov	r2, r3
 8015506:	e7f5      	b.n	80154f4 <_dtoa_r+0x2ec>
 8015508:	3101      	adds	r1, #1
 801550a:	6071      	str	r1, [r6, #4]
 801550c:	0052      	lsls	r2, r2, #1
 801550e:	e7a2      	b.n	8015456 <_dtoa_r+0x24e>
 8015510:	636f4361 	.word	0x636f4361
 8015514:	3fd287a7 	.word	0x3fd287a7
 8015518:	8b60c8b3 	.word	0x8b60c8b3
 801551c:	3fc68a28 	.word	0x3fc68a28
 8015520:	509f79fb 	.word	0x509f79fb
 8015524:	3fd34413 	.word	0x3fd34413
 8015528:	7ff00000 	.word	0x7ff00000
 801552c:	08018344 	.word	0x08018344
 8015530:	3ff80000 	.word	0x3ff80000
 8015534:	08018248 	.word	0x08018248
 8015538:	08018220 	.word	0x08018220
 801553c:	080181a9 	.word	0x080181a9
 8015540:	07f1      	lsls	r1, r6, #31
 8015542:	d508      	bpl.n	8015556 <_dtoa_r+0x34e>
 8015544:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015548:	e9d7 2300 	ldrd	r2, r3, [r7]
 801554c:	f7eb f86c 	bl	8000628 <__aeabi_dmul>
 8015550:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015554:	3501      	adds	r5, #1
 8015556:	1076      	asrs	r6, r6, #1
 8015558:	3708      	adds	r7, #8
 801555a:	2e00      	cmp	r6, #0
 801555c:	d1f0      	bne.n	8015540 <_dtoa_r+0x338>
 801555e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015562:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015566:	f7eb f989 	bl	800087c <__aeabi_ddiv>
 801556a:	e9cd 0100 	strd	r0, r1, [sp]
 801556e:	e01a      	b.n	80155a6 <_dtoa_r+0x39e>
 8015570:	2502      	movs	r5, #2
 8015572:	e7a3      	b.n	80154bc <_dtoa_r+0x2b4>
 8015574:	f000 80a0 	beq.w	80156b8 <_dtoa_r+0x4b0>
 8015578:	f1ca 0600 	rsb	r6, sl, #0
 801557c:	4b9f      	ldr	r3, [pc, #636]	; (80157fc <_dtoa_r+0x5f4>)
 801557e:	4fa0      	ldr	r7, [pc, #640]	; (8015800 <_dtoa_r+0x5f8>)
 8015580:	f006 020f 	and.w	r2, r6, #15
 8015584:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801558c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015590:	f7eb f84a 	bl	8000628 <__aeabi_dmul>
 8015594:	e9cd 0100 	strd	r0, r1, [sp]
 8015598:	1136      	asrs	r6, r6, #4
 801559a:	2300      	movs	r3, #0
 801559c:	2502      	movs	r5, #2
 801559e:	2e00      	cmp	r6, #0
 80155a0:	d17f      	bne.n	80156a2 <_dtoa_r+0x49a>
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d1e1      	bne.n	801556a <_dtoa_r+0x362>
 80155a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	f000 8087 	beq.w	80156bc <_dtoa_r+0x4b4>
 80155ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80155b2:	2200      	movs	r2, #0
 80155b4:	4b93      	ldr	r3, [pc, #588]	; (8015804 <_dtoa_r+0x5fc>)
 80155b6:	4630      	mov	r0, r6
 80155b8:	4639      	mov	r1, r7
 80155ba:	f7eb faa7 	bl	8000b0c <__aeabi_dcmplt>
 80155be:	2800      	cmp	r0, #0
 80155c0:	d07c      	beq.n	80156bc <_dtoa_r+0x4b4>
 80155c2:	f1b9 0f00 	cmp.w	r9, #0
 80155c6:	d079      	beq.n	80156bc <_dtoa_r+0x4b4>
 80155c8:	9b02      	ldr	r3, [sp, #8]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	dd35      	ble.n	801563a <_dtoa_r+0x432>
 80155ce:	f10a 33ff 	add.w	r3, sl, #4294967295
 80155d2:	9308      	str	r3, [sp, #32]
 80155d4:	4639      	mov	r1, r7
 80155d6:	2200      	movs	r2, #0
 80155d8:	4b8b      	ldr	r3, [pc, #556]	; (8015808 <_dtoa_r+0x600>)
 80155da:	4630      	mov	r0, r6
 80155dc:	f7eb f824 	bl	8000628 <__aeabi_dmul>
 80155e0:	e9cd 0100 	strd	r0, r1, [sp]
 80155e4:	9f02      	ldr	r7, [sp, #8]
 80155e6:	3501      	adds	r5, #1
 80155e8:	4628      	mov	r0, r5
 80155ea:	f7ea ffb3 	bl	8000554 <__aeabi_i2d>
 80155ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80155f2:	f7eb f819 	bl	8000628 <__aeabi_dmul>
 80155f6:	2200      	movs	r2, #0
 80155f8:	4b84      	ldr	r3, [pc, #528]	; (801580c <_dtoa_r+0x604>)
 80155fa:	f7ea fe5f 	bl	80002bc <__adddf3>
 80155fe:	4605      	mov	r5, r0
 8015600:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8015604:	2f00      	cmp	r7, #0
 8015606:	d15d      	bne.n	80156c4 <_dtoa_r+0x4bc>
 8015608:	2200      	movs	r2, #0
 801560a:	4b81      	ldr	r3, [pc, #516]	; (8015810 <_dtoa_r+0x608>)
 801560c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015610:	f7ea fe52 	bl	80002b8 <__aeabi_dsub>
 8015614:	462a      	mov	r2, r5
 8015616:	4633      	mov	r3, r6
 8015618:	e9cd 0100 	strd	r0, r1, [sp]
 801561c:	f7eb fa94 	bl	8000b48 <__aeabi_dcmpgt>
 8015620:	2800      	cmp	r0, #0
 8015622:	f040 8288 	bne.w	8015b36 <_dtoa_r+0x92e>
 8015626:	462a      	mov	r2, r5
 8015628:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801562c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015630:	f7eb fa6c 	bl	8000b0c <__aeabi_dcmplt>
 8015634:	2800      	cmp	r0, #0
 8015636:	f040 827c 	bne.w	8015b32 <_dtoa_r+0x92a>
 801563a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801563e:	e9cd 2300 	strd	r2, r3, [sp]
 8015642:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015644:	2b00      	cmp	r3, #0
 8015646:	f2c0 8150 	blt.w	80158ea <_dtoa_r+0x6e2>
 801564a:	f1ba 0f0e 	cmp.w	sl, #14
 801564e:	f300 814c 	bgt.w	80158ea <_dtoa_r+0x6e2>
 8015652:	4b6a      	ldr	r3, [pc, #424]	; (80157fc <_dtoa_r+0x5f4>)
 8015654:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015658:	ed93 7b00 	vldr	d7, [r3]
 801565c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801565e:	2b00      	cmp	r3, #0
 8015660:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015664:	f280 80d8 	bge.w	8015818 <_dtoa_r+0x610>
 8015668:	f1b9 0f00 	cmp.w	r9, #0
 801566c:	f300 80d4 	bgt.w	8015818 <_dtoa_r+0x610>
 8015670:	f040 825e 	bne.w	8015b30 <_dtoa_r+0x928>
 8015674:	2200      	movs	r2, #0
 8015676:	4b66      	ldr	r3, [pc, #408]	; (8015810 <_dtoa_r+0x608>)
 8015678:	ec51 0b17 	vmov	r0, r1, d7
 801567c:	f7ea ffd4 	bl	8000628 <__aeabi_dmul>
 8015680:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015684:	f7eb fa56 	bl	8000b34 <__aeabi_dcmpge>
 8015688:	464f      	mov	r7, r9
 801568a:	464e      	mov	r6, r9
 801568c:	2800      	cmp	r0, #0
 801568e:	f040 8234 	bne.w	8015afa <_dtoa_r+0x8f2>
 8015692:	2331      	movs	r3, #49	; 0x31
 8015694:	f10b 0501 	add.w	r5, fp, #1
 8015698:	f88b 3000 	strb.w	r3, [fp]
 801569c:	f10a 0a01 	add.w	sl, sl, #1
 80156a0:	e22f      	b.n	8015b02 <_dtoa_r+0x8fa>
 80156a2:	07f2      	lsls	r2, r6, #31
 80156a4:	d505      	bpl.n	80156b2 <_dtoa_r+0x4aa>
 80156a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80156aa:	f7ea ffbd 	bl	8000628 <__aeabi_dmul>
 80156ae:	3501      	adds	r5, #1
 80156b0:	2301      	movs	r3, #1
 80156b2:	1076      	asrs	r6, r6, #1
 80156b4:	3708      	adds	r7, #8
 80156b6:	e772      	b.n	801559e <_dtoa_r+0x396>
 80156b8:	2502      	movs	r5, #2
 80156ba:	e774      	b.n	80155a6 <_dtoa_r+0x39e>
 80156bc:	f8cd a020 	str.w	sl, [sp, #32]
 80156c0:	464f      	mov	r7, r9
 80156c2:	e791      	b.n	80155e8 <_dtoa_r+0x3e0>
 80156c4:	4b4d      	ldr	r3, [pc, #308]	; (80157fc <_dtoa_r+0x5f4>)
 80156c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80156ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80156ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d047      	beq.n	8015764 <_dtoa_r+0x55c>
 80156d4:	4602      	mov	r2, r0
 80156d6:	460b      	mov	r3, r1
 80156d8:	2000      	movs	r0, #0
 80156da:	494e      	ldr	r1, [pc, #312]	; (8015814 <_dtoa_r+0x60c>)
 80156dc:	f7eb f8ce 	bl	800087c <__aeabi_ddiv>
 80156e0:	462a      	mov	r2, r5
 80156e2:	4633      	mov	r3, r6
 80156e4:	f7ea fde8 	bl	80002b8 <__aeabi_dsub>
 80156e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80156ec:	465d      	mov	r5, fp
 80156ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156f2:	f7eb fa49 	bl	8000b88 <__aeabi_d2iz>
 80156f6:	4606      	mov	r6, r0
 80156f8:	f7ea ff2c 	bl	8000554 <__aeabi_i2d>
 80156fc:	4602      	mov	r2, r0
 80156fe:	460b      	mov	r3, r1
 8015700:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015704:	f7ea fdd8 	bl	80002b8 <__aeabi_dsub>
 8015708:	3630      	adds	r6, #48	; 0x30
 801570a:	f805 6b01 	strb.w	r6, [r5], #1
 801570e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015712:	e9cd 0100 	strd	r0, r1, [sp]
 8015716:	f7eb f9f9 	bl	8000b0c <__aeabi_dcmplt>
 801571a:	2800      	cmp	r0, #0
 801571c:	d163      	bne.n	80157e6 <_dtoa_r+0x5de>
 801571e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015722:	2000      	movs	r0, #0
 8015724:	4937      	ldr	r1, [pc, #220]	; (8015804 <_dtoa_r+0x5fc>)
 8015726:	f7ea fdc7 	bl	80002b8 <__aeabi_dsub>
 801572a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801572e:	f7eb f9ed 	bl	8000b0c <__aeabi_dcmplt>
 8015732:	2800      	cmp	r0, #0
 8015734:	f040 80b7 	bne.w	80158a6 <_dtoa_r+0x69e>
 8015738:	eba5 030b 	sub.w	r3, r5, fp
 801573c:	429f      	cmp	r7, r3
 801573e:	f77f af7c 	ble.w	801563a <_dtoa_r+0x432>
 8015742:	2200      	movs	r2, #0
 8015744:	4b30      	ldr	r3, [pc, #192]	; (8015808 <_dtoa_r+0x600>)
 8015746:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801574a:	f7ea ff6d 	bl	8000628 <__aeabi_dmul>
 801574e:	2200      	movs	r2, #0
 8015750:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015754:	4b2c      	ldr	r3, [pc, #176]	; (8015808 <_dtoa_r+0x600>)
 8015756:	e9dd 0100 	ldrd	r0, r1, [sp]
 801575a:	f7ea ff65 	bl	8000628 <__aeabi_dmul>
 801575e:	e9cd 0100 	strd	r0, r1, [sp]
 8015762:	e7c4      	b.n	80156ee <_dtoa_r+0x4e6>
 8015764:	462a      	mov	r2, r5
 8015766:	4633      	mov	r3, r6
 8015768:	f7ea ff5e 	bl	8000628 <__aeabi_dmul>
 801576c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015770:	eb0b 0507 	add.w	r5, fp, r7
 8015774:	465e      	mov	r6, fp
 8015776:	e9dd 0100 	ldrd	r0, r1, [sp]
 801577a:	f7eb fa05 	bl	8000b88 <__aeabi_d2iz>
 801577e:	4607      	mov	r7, r0
 8015780:	f7ea fee8 	bl	8000554 <__aeabi_i2d>
 8015784:	3730      	adds	r7, #48	; 0x30
 8015786:	4602      	mov	r2, r0
 8015788:	460b      	mov	r3, r1
 801578a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801578e:	f7ea fd93 	bl	80002b8 <__aeabi_dsub>
 8015792:	f806 7b01 	strb.w	r7, [r6], #1
 8015796:	42ae      	cmp	r6, r5
 8015798:	e9cd 0100 	strd	r0, r1, [sp]
 801579c:	f04f 0200 	mov.w	r2, #0
 80157a0:	d126      	bne.n	80157f0 <_dtoa_r+0x5e8>
 80157a2:	4b1c      	ldr	r3, [pc, #112]	; (8015814 <_dtoa_r+0x60c>)
 80157a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80157a8:	f7ea fd88 	bl	80002bc <__adddf3>
 80157ac:	4602      	mov	r2, r0
 80157ae:	460b      	mov	r3, r1
 80157b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80157b4:	f7eb f9c8 	bl	8000b48 <__aeabi_dcmpgt>
 80157b8:	2800      	cmp	r0, #0
 80157ba:	d174      	bne.n	80158a6 <_dtoa_r+0x69e>
 80157bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80157c0:	2000      	movs	r0, #0
 80157c2:	4914      	ldr	r1, [pc, #80]	; (8015814 <_dtoa_r+0x60c>)
 80157c4:	f7ea fd78 	bl	80002b8 <__aeabi_dsub>
 80157c8:	4602      	mov	r2, r0
 80157ca:	460b      	mov	r3, r1
 80157cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80157d0:	f7eb f99c 	bl	8000b0c <__aeabi_dcmplt>
 80157d4:	2800      	cmp	r0, #0
 80157d6:	f43f af30 	beq.w	801563a <_dtoa_r+0x432>
 80157da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80157de:	2b30      	cmp	r3, #48	; 0x30
 80157e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80157e4:	d002      	beq.n	80157ec <_dtoa_r+0x5e4>
 80157e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80157ea:	e04a      	b.n	8015882 <_dtoa_r+0x67a>
 80157ec:	4615      	mov	r5, r2
 80157ee:	e7f4      	b.n	80157da <_dtoa_r+0x5d2>
 80157f0:	4b05      	ldr	r3, [pc, #20]	; (8015808 <_dtoa_r+0x600>)
 80157f2:	f7ea ff19 	bl	8000628 <__aeabi_dmul>
 80157f6:	e9cd 0100 	strd	r0, r1, [sp]
 80157fa:	e7bc      	b.n	8015776 <_dtoa_r+0x56e>
 80157fc:	08018248 	.word	0x08018248
 8015800:	08018220 	.word	0x08018220
 8015804:	3ff00000 	.word	0x3ff00000
 8015808:	40240000 	.word	0x40240000
 801580c:	401c0000 	.word	0x401c0000
 8015810:	40140000 	.word	0x40140000
 8015814:	3fe00000 	.word	0x3fe00000
 8015818:	e9dd 6700 	ldrd	r6, r7, [sp]
 801581c:	465d      	mov	r5, fp
 801581e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015822:	4630      	mov	r0, r6
 8015824:	4639      	mov	r1, r7
 8015826:	f7eb f829 	bl	800087c <__aeabi_ddiv>
 801582a:	f7eb f9ad 	bl	8000b88 <__aeabi_d2iz>
 801582e:	4680      	mov	r8, r0
 8015830:	f7ea fe90 	bl	8000554 <__aeabi_i2d>
 8015834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015838:	f7ea fef6 	bl	8000628 <__aeabi_dmul>
 801583c:	4602      	mov	r2, r0
 801583e:	460b      	mov	r3, r1
 8015840:	4630      	mov	r0, r6
 8015842:	4639      	mov	r1, r7
 8015844:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015848:	f7ea fd36 	bl	80002b8 <__aeabi_dsub>
 801584c:	f805 6b01 	strb.w	r6, [r5], #1
 8015850:	eba5 060b 	sub.w	r6, r5, fp
 8015854:	45b1      	cmp	r9, r6
 8015856:	4602      	mov	r2, r0
 8015858:	460b      	mov	r3, r1
 801585a:	d139      	bne.n	80158d0 <_dtoa_r+0x6c8>
 801585c:	f7ea fd2e 	bl	80002bc <__adddf3>
 8015860:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015864:	4606      	mov	r6, r0
 8015866:	460f      	mov	r7, r1
 8015868:	f7eb f96e 	bl	8000b48 <__aeabi_dcmpgt>
 801586c:	b9c8      	cbnz	r0, 80158a2 <_dtoa_r+0x69a>
 801586e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015872:	4630      	mov	r0, r6
 8015874:	4639      	mov	r1, r7
 8015876:	f7eb f93f 	bl	8000af8 <__aeabi_dcmpeq>
 801587a:	b110      	cbz	r0, 8015882 <_dtoa_r+0x67a>
 801587c:	f018 0f01 	tst.w	r8, #1
 8015880:	d10f      	bne.n	80158a2 <_dtoa_r+0x69a>
 8015882:	9904      	ldr	r1, [sp, #16]
 8015884:	4620      	mov	r0, r4
 8015886:	f000 fe0d 	bl	80164a4 <_Bfree>
 801588a:	2300      	movs	r3, #0
 801588c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801588e:	702b      	strb	r3, [r5, #0]
 8015890:	f10a 0301 	add.w	r3, sl, #1
 8015894:	6013      	str	r3, [r2, #0]
 8015896:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015898:	2b00      	cmp	r3, #0
 801589a:	f000 8241 	beq.w	8015d20 <_dtoa_r+0xb18>
 801589e:	601d      	str	r5, [r3, #0]
 80158a0:	e23e      	b.n	8015d20 <_dtoa_r+0xb18>
 80158a2:	f8cd a020 	str.w	sl, [sp, #32]
 80158a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80158aa:	2a39      	cmp	r2, #57	; 0x39
 80158ac:	f105 33ff 	add.w	r3, r5, #4294967295
 80158b0:	d108      	bne.n	80158c4 <_dtoa_r+0x6bc>
 80158b2:	459b      	cmp	fp, r3
 80158b4:	d10a      	bne.n	80158cc <_dtoa_r+0x6c4>
 80158b6:	9b08      	ldr	r3, [sp, #32]
 80158b8:	3301      	adds	r3, #1
 80158ba:	9308      	str	r3, [sp, #32]
 80158bc:	2330      	movs	r3, #48	; 0x30
 80158be:	f88b 3000 	strb.w	r3, [fp]
 80158c2:	465b      	mov	r3, fp
 80158c4:	781a      	ldrb	r2, [r3, #0]
 80158c6:	3201      	adds	r2, #1
 80158c8:	701a      	strb	r2, [r3, #0]
 80158ca:	e78c      	b.n	80157e6 <_dtoa_r+0x5de>
 80158cc:	461d      	mov	r5, r3
 80158ce:	e7ea      	b.n	80158a6 <_dtoa_r+0x69e>
 80158d0:	2200      	movs	r2, #0
 80158d2:	4b9b      	ldr	r3, [pc, #620]	; (8015b40 <_dtoa_r+0x938>)
 80158d4:	f7ea fea8 	bl	8000628 <__aeabi_dmul>
 80158d8:	2200      	movs	r2, #0
 80158da:	2300      	movs	r3, #0
 80158dc:	4606      	mov	r6, r0
 80158de:	460f      	mov	r7, r1
 80158e0:	f7eb f90a 	bl	8000af8 <__aeabi_dcmpeq>
 80158e4:	2800      	cmp	r0, #0
 80158e6:	d09a      	beq.n	801581e <_dtoa_r+0x616>
 80158e8:	e7cb      	b.n	8015882 <_dtoa_r+0x67a>
 80158ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80158ec:	2a00      	cmp	r2, #0
 80158ee:	f000 808b 	beq.w	8015a08 <_dtoa_r+0x800>
 80158f2:	9a06      	ldr	r2, [sp, #24]
 80158f4:	2a01      	cmp	r2, #1
 80158f6:	dc6e      	bgt.n	80159d6 <_dtoa_r+0x7ce>
 80158f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80158fa:	2a00      	cmp	r2, #0
 80158fc:	d067      	beq.n	80159ce <_dtoa_r+0x7c6>
 80158fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015902:	9f07      	ldr	r7, [sp, #28]
 8015904:	9d05      	ldr	r5, [sp, #20]
 8015906:	9a05      	ldr	r2, [sp, #20]
 8015908:	2101      	movs	r1, #1
 801590a:	441a      	add	r2, r3
 801590c:	4620      	mov	r0, r4
 801590e:	9205      	str	r2, [sp, #20]
 8015910:	4498      	add	r8, r3
 8015912:	f000 fea5 	bl	8016660 <__i2b>
 8015916:	4606      	mov	r6, r0
 8015918:	2d00      	cmp	r5, #0
 801591a:	dd0c      	ble.n	8015936 <_dtoa_r+0x72e>
 801591c:	f1b8 0f00 	cmp.w	r8, #0
 8015920:	dd09      	ble.n	8015936 <_dtoa_r+0x72e>
 8015922:	4545      	cmp	r5, r8
 8015924:	9a05      	ldr	r2, [sp, #20]
 8015926:	462b      	mov	r3, r5
 8015928:	bfa8      	it	ge
 801592a:	4643      	movge	r3, r8
 801592c:	1ad2      	subs	r2, r2, r3
 801592e:	9205      	str	r2, [sp, #20]
 8015930:	1aed      	subs	r5, r5, r3
 8015932:	eba8 0803 	sub.w	r8, r8, r3
 8015936:	9b07      	ldr	r3, [sp, #28]
 8015938:	b1eb      	cbz	r3, 8015976 <_dtoa_r+0x76e>
 801593a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801593c:	2b00      	cmp	r3, #0
 801593e:	d067      	beq.n	8015a10 <_dtoa_r+0x808>
 8015940:	b18f      	cbz	r7, 8015966 <_dtoa_r+0x75e>
 8015942:	4631      	mov	r1, r6
 8015944:	463a      	mov	r2, r7
 8015946:	4620      	mov	r0, r4
 8015948:	f000 ff2a 	bl	80167a0 <__pow5mult>
 801594c:	9a04      	ldr	r2, [sp, #16]
 801594e:	4601      	mov	r1, r0
 8015950:	4606      	mov	r6, r0
 8015952:	4620      	mov	r0, r4
 8015954:	f000 fe8d 	bl	8016672 <__multiply>
 8015958:	9904      	ldr	r1, [sp, #16]
 801595a:	9008      	str	r0, [sp, #32]
 801595c:	4620      	mov	r0, r4
 801595e:	f000 fda1 	bl	80164a4 <_Bfree>
 8015962:	9b08      	ldr	r3, [sp, #32]
 8015964:	9304      	str	r3, [sp, #16]
 8015966:	9b07      	ldr	r3, [sp, #28]
 8015968:	1bda      	subs	r2, r3, r7
 801596a:	d004      	beq.n	8015976 <_dtoa_r+0x76e>
 801596c:	9904      	ldr	r1, [sp, #16]
 801596e:	4620      	mov	r0, r4
 8015970:	f000 ff16 	bl	80167a0 <__pow5mult>
 8015974:	9004      	str	r0, [sp, #16]
 8015976:	2101      	movs	r1, #1
 8015978:	4620      	mov	r0, r4
 801597a:	f000 fe71 	bl	8016660 <__i2b>
 801597e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015980:	4607      	mov	r7, r0
 8015982:	2b00      	cmp	r3, #0
 8015984:	f000 81d0 	beq.w	8015d28 <_dtoa_r+0xb20>
 8015988:	461a      	mov	r2, r3
 801598a:	4601      	mov	r1, r0
 801598c:	4620      	mov	r0, r4
 801598e:	f000 ff07 	bl	80167a0 <__pow5mult>
 8015992:	9b06      	ldr	r3, [sp, #24]
 8015994:	2b01      	cmp	r3, #1
 8015996:	4607      	mov	r7, r0
 8015998:	dc40      	bgt.n	8015a1c <_dtoa_r+0x814>
 801599a:	9b00      	ldr	r3, [sp, #0]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d139      	bne.n	8015a14 <_dtoa_r+0x80c>
 80159a0:	9b01      	ldr	r3, [sp, #4]
 80159a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d136      	bne.n	8015a18 <_dtoa_r+0x810>
 80159aa:	9b01      	ldr	r3, [sp, #4]
 80159ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80159b0:	0d1b      	lsrs	r3, r3, #20
 80159b2:	051b      	lsls	r3, r3, #20
 80159b4:	b12b      	cbz	r3, 80159c2 <_dtoa_r+0x7ba>
 80159b6:	9b05      	ldr	r3, [sp, #20]
 80159b8:	3301      	adds	r3, #1
 80159ba:	9305      	str	r3, [sp, #20]
 80159bc:	f108 0801 	add.w	r8, r8, #1
 80159c0:	2301      	movs	r3, #1
 80159c2:	9307      	str	r3, [sp, #28]
 80159c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d12a      	bne.n	8015a20 <_dtoa_r+0x818>
 80159ca:	2001      	movs	r0, #1
 80159cc:	e030      	b.n	8015a30 <_dtoa_r+0x828>
 80159ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80159d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80159d4:	e795      	b.n	8015902 <_dtoa_r+0x6fa>
 80159d6:	9b07      	ldr	r3, [sp, #28]
 80159d8:	f109 37ff 	add.w	r7, r9, #4294967295
 80159dc:	42bb      	cmp	r3, r7
 80159de:	bfbf      	itttt	lt
 80159e0:	9b07      	ldrlt	r3, [sp, #28]
 80159e2:	9707      	strlt	r7, [sp, #28]
 80159e4:	1afa      	sublt	r2, r7, r3
 80159e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80159e8:	bfbb      	ittet	lt
 80159ea:	189b      	addlt	r3, r3, r2
 80159ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80159ee:	1bdf      	subge	r7, r3, r7
 80159f0:	2700      	movlt	r7, #0
 80159f2:	f1b9 0f00 	cmp.w	r9, #0
 80159f6:	bfb5      	itete	lt
 80159f8:	9b05      	ldrlt	r3, [sp, #20]
 80159fa:	9d05      	ldrge	r5, [sp, #20]
 80159fc:	eba3 0509 	sublt.w	r5, r3, r9
 8015a00:	464b      	movge	r3, r9
 8015a02:	bfb8      	it	lt
 8015a04:	2300      	movlt	r3, #0
 8015a06:	e77e      	b.n	8015906 <_dtoa_r+0x6fe>
 8015a08:	9f07      	ldr	r7, [sp, #28]
 8015a0a:	9d05      	ldr	r5, [sp, #20]
 8015a0c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015a0e:	e783      	b.n	8015918 <_dtoa_r+0x710>
 8015a10:	9a07      	ldr	r2, [sp, #28]
 8015a12:	e7ab      	b.n	801596c <_dtoa_r+0x764>
 8015a14:	2300      	movs	r3, #0
 8015a16:	e7d4      	b.n	80159c2 <_dtoa_r+0x7ba>
 8015a18:	9b00      	ldr	r3, [sp, #0]
 8015a1a:	e7d2      	b.n	80159c2 <_dtoa_r+0x7ba>
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	9307      	str	r3, [sp, #28]
 8015a20:	693b      	ldr	r3, [r7, #16]
 8015a22:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015a26:	6918      	ldr	r0, [r3, #16]
 8015a28:	f000 fdcc 	bl	80165c4 <__hi0bits>
 8015a2c:	f1c0 0020 	rsb	r0, r0, #32
 8015a30:	4440      	add	r0, r8
 8015a32:	f010 001f 	ands.w	r0, r0, #31
 8015a36:	d047      	beq.n	8015ac8 <_dtoa_r+0x8c0>
 8015a38:	f1c0 0320 	rsb	r3, r0, #32
 8015a3c:	2b04      	cmp	r3, #4
 8015a3e:	dd3b      	ble.n	8015ab8 <_dtoa_r+0x8b0>
 8015a40:	9b05      	ldr	r3, [sp, #20]
 8015a42:	f1c0 001c 	rsb	r0, r0, #28
 8015a46:	4403      	add	r3, r0
 8015a48:	9305      	str	r3, [sp, #20]
 8015a4a:	4405      	add	r5, r0
 8015a4c:	4480      	add	r8, r0
 8015a4e:	9b05      	ldr	r3, [sp, #20]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	dd05      	ble.n	8015a60 <_dtoa_r+0x858>
 8015a54:	461a      	mov	r2, r3
 8015a56:	9904      	ldr	r1, [sp, #16]
 8015a58:	4620      	mov	r0, r4
 8015a5a:	f000 feef 	bl	801683c <__lshift>
 8015a5e:	9004      	str	r0, [sp, #16]
 8015a60:	f1b8 0f00 	cmp.w	r8, #0
 8015a64:	dd05      	ble.n	8015a72 <_dtoa_r+0x86a>
 8015a66:	4639      	mov	r1, r7
 8015a68:	4642      	mov	r2, r8
 8015a6a:	4620      	mov	r0, r4
 8015a6c:	f000 fee6 	bl	801683c <__lshift>
 8015a70:	4607      	mov	r7, r0
 8015a72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a74:	b353      	cbz	r3, 8015acc <_dtoa_r+0x8c4>
 8015a76:	4639      	mov	r1, r7
 8015a78:	9804      	ldr	r0, [sp, #16]
 8015a7a:	f000 ff33 	bl	80168e4 <__mcmp>
 8015a7e:	2800      	cmp	r0, #0
 8015a80:	da24      	bge.n	8015acc <_dtoa_r+0x8c4>
 8015a82:	2300      	movs	r3, #0
 8015a84:	220a      	movs	r2, #10
 8015a86:	9904      	ldr	r1, [sp, #16]
 8015a88:	4620      	mov	r0, r4
 8015a8a:	f000 fd22 	bl	80164d2 <__multadd>
 8015a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a90:	9004      	str	r0, [sp, #16]
 8015a92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	f000 814d 	beq.w	8015d36 <_dtoa_r+0xb2e>
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	4631      	mov	r1, r6
 8015aa0:	220a      	movs	r2, #10
 8015aa2:	4620      	mov	r0, r4
 8015aa4:	f000 fd15 	bl	80164d2 <__multadd>
 8015aa8:	9b02      	ldr	r3, [sp, #8]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	4606      	mov	r6, r0
 8015aae:	dc4f      	bgt.n	8015b50 <_dtoa_r+0x948>
 8015ab0:	9b06      	ldr	r3, [sp, #24]
 8015ab2:	2b02      	cmp	r3, #2
 8015ab4:	dd4c      	ble.n	8015b50 <_dtoa_r+0x948>
 8015ab6:	e011      	b.n	8015adc <_dtoa_r+0x8d4>
 8015ab8:	d0c9      	beq.n	8015a4e <_dtoa_r+0x846>
 8015aba:	9a05      	ldr	r2, [sp, #20]
 8015abc:	331c      	adds	r3, #28
 8015abe:	441a      	add	r2, r3
 8015ac0:	9205      	str	r2, [sp, #20]
 8015ac2:	441d      	add	r5, r3
 8015ac4:	4498      	add	r8, r3
 8015ac6:	e7c2      	b.n	8015a4e <_dtoa_r+0x846>
 8015ac8:	4603      	mov	r3, r0
 8015aca:	e7f6      	b.n	8015aba <_dtoa_r+0x8b2>
 8015acc:	f1b9 0f00 	cmp.w	r9, #0
 8015ad0:	dc38      	bgt.n	8015b44 <_dtoa_r+0x93c>
 8015ad2:	9b06      	ldr	r3, [sp, #24]
 8015ad4:	2b02      	cmp	r3, #2
 8015ad6:	dd35      	ble.n	8015b44 <_dtoa_r+0x93c>
 8015ad8:	f8cd 9008 	str.w	r9, [sp, #8]
 8015adc:	9b02      	ldr	r3, [sp, #8]
 8015ade:	b963      	cbnz	r3, 8015afa <_dtoa_r+0x8f2>
 8015ae0:	4639      	mov	r1, r7
 8015ae2:	2205      	movs	r2, #5
 8015ae4:	4620      	mov	r0, r4
 8015ae6:	f000 fcf4 	bl	80164d2 <__multadd>
 8015aea:	4601      	mov	r1, r0
 8015aec:	4607      	mov	r7, r0
 8015aee:	9804      	ldr	r0, [sp, #16]
 8015af0:	f000 fef8 	bl	80168e4 <__mcmp>
 8015af4:	2800      	cmp	r0, #0
 8015af6:	f73f adcc 	bgt.w	8015692 <_dtoa_r+0x48a>
 8015afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015afc:	465d      	mov	r5, fp
 8015afe:	ea6f 0a03 	mvn.w	sl, r3
 8015b02:	f04f 0900 	mov.w	r9, #0
 8015b06:	4639      	mov	r1, r7
 8015b08:	4620      	mov	r0, r4
 8015b0a:	f000 fccb 	bl	80164a4 <_Bfree>
 8015b0e:	2e00      	cmp	r6, #0
 8015b10:	f43f aeb7 	beq.w	8015882 <_dtoa_r+0x67a>
 8015b14:	f1b9 0f00 	cmp.w	r9, #0
 8015b18:	d005      	beq.n	8015b26 <_dtoa_r+0x91e>
 8015b1a:	45b1      	cmp	r9, r6
 8015b1c:	d003      	beq.n	8015b26 <_dtoa_r+0x91e>
 8015b1e:	4649      	mov	r1, r9
 8015b20:	4620      	mov	r0, r4
 8015b22:	f000 fcbf 	bl	80164a4 <_Bfree>
 8015b26:	4631      	mov	r1, r6
 8015b28:	4620      	mov	r0, r4
 8015b2a:	f000 fcbb 	bl	80164a4 <_Bfree>
 8015b2e:	e6a8      	b.n	8015882 <_dtoa_r+0x67a>
 8015b30:	2700      	movs	r7, #0
 8015b32:	463e      	mov	r6, r7
 8015b34:	e7e1      	b.n	8015afa <_dtoa_r+0x8f2>
 8015b36:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015b3a:	463e      	mov	r6, r7
 8015b3c:	e5a9      	b.n	8015692 <_dtoa_r+0x48a>
 8015b3e:	bf00      	nop
 8015b40:	40240000 	.word	0x40240000
 8015b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b46:	f8cd 9008 	str.w	r9, [sp, #8]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	f000 80fa 	beq.w	8015d44 <_dtoa_r+0xb3c>
 8015b50:	2d00      	cmp	r5, #0
 8015b52:	dd05      	ble.n	8015b60 <_dtoa_r+0x958>
 8015b54:	4631      	mov	r1, r6
 8015b56:	462a      	mov	r2, r5
 8015b58:	4620      	mov	r0, r4
 8015b5a:	f000 fe6f 	bl	801683c <__lshift>
 8015b5e:	4606      	mov	r6, r0
 8015b60:	9b07      	ldr	r3, [sp, #28]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d04c      	beq.n	8015c00 <_dtoa_r+0x9f8>
 8015b66:	6871      	ldr	r1, [r6, #4]
 8015b68:	4620      	mov	r0, r4
 8015b6a:	f000 fc67 	bl	801643c <_Balloc>
 8015b6e:	6932      	ldr	r2, [r6, #16]
 8015b70:	3202      	adds	r2, #2
 8015b72:	4605      	mov	r5, r0
 8015b74:	0092      	lsls	r2, r2, #2
 8015b76:	f106 010c 	add.w	r1, r6, #12
 8015b7a:	300c      	adds	r0, #12
 8015b7c:	f7fd fd08 	bl	8013590 <memcpy>
 8015b80:	2201      	movs	r2, #1
 8015b82:	4629      	mov	r1, r5
 8015b84:	4620      	mov	r0, r4
 8015b86:	f000 fe59 	bl	801683c <__lshift>
 8015b8a:	9b00      	ldr	r3, [sp, #0]
 8015b8c:	f8cd b014 	str.w	fp, [sp, #20]
 8015b90:	f003 0301 	and.w	r3, r3, #1
 8015b94:	46b1      	mov	r9, r6
 8015b96:	9307      	str	r3, [sp, #28]
 8015b98:	4606      	mov	r6, r0
 8015b9a:	4639      	mov	r1, r7
 8015b9c:	9804      	ldr	r0, [sp, #16]
 8015b9e:	f7ff faa5 	bl	80150ec <quorem>
 8015ba2:	4649      	mov	r1, r9
 8015ba4:	4605      	mov	r5, r0
 8015ba6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015baa:	9804      	ldr	r0, [sp, #16]
 8015bac:	f000 fe9a 	bl	80168e4 <__mcmp>
 8015bb0:	4632      	mov	r2, r6
 8015bb2:	9000      	str	r0, [sp, #0]
 8015bb4:	4639      	mov	r1, r7
 8015bb6:	4620      	mov	r0, r4
 8015bb8:	f000 feae 	bl	8016918 <__mdiff>
 8015bbc:	68c3      	ldr	r3, [r0, #12]
 8015bbe:	4602      	mov	r2, r0
 8015bc0:	bb03      	cbnz	r3, 8015c04 <_dtoa_r+0x9fc>
 8015bc2:	4601      	mov	r1, r0
 8015bc4:	9008      	str	r0, [sp, #32]
 8015bc6:	9804      	ldr	r0, [sp, #16]
 8015bc8:	f000 fe8c 	bl	80168e4 <__mcmp>
 8015bcc:	9a08      	ldr	r2, [sp, #32]
 8015bce:	4603      	mov	r3, r0
 8015bd0:	4611      	mov	r1, r2
 8015bd2:	4620      	mov	r0, r4
 8015bd4:	9308      	str	r3, [sp, #32]
 8015bd6:	f000 fc65 	bl	80164a4 <_Bfree>
 8015bda:	9b08      	ldr	r3, [sp, #32]
 8015bdc:	b9a3      	cbnz	r3, 8015c08 <_dtoa_r+0xa00>
 8015bde:	9a06      	ldr	r2, [sp, #24]
 8015be0:	b992      	cbnz	r2, 8015c08 <_dtoa_r+0xa00>
 8015be2:	9a07      	ldr	r2, [sp, #28]
 8015be4:	b982      	cbnz	r2, 8015c08 <_dtoa_r+0xa00>
 8015be6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015bea:	d029      	beq.n	8015c40 <_dtoa_r+0xa38>
 8015bec:	9b00      	ldr	r3, [sp, #0]
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	dd01      	ble.n	8015bf6 <_dtoa_r+0x9ee>
 8015bf2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8015bf6:	9b05      	ldr	r3, [sp, #20]
 8015bf8:	1c5d      	adds	r5, r3, #1
 8015bfa:	f883 8000 	strb.w	r8, [r3]
 8015bfe:	e782      	b.n	8015b06 <_dtoa_r+0x8fe>
 8015c00:	4630      	mov	r0, r6
 8015c02:	e7c2      	b.n	8015b8a <_dtoa_r+0x982>
 8015c04:	2301      	movs	r3, #1
 8015c06:	e7e3      	b.n	8015bd0 <_dtoa_r+0x9c8>
 8015c08:	9a00      	ldr	r2, [sp, #0]
 8015c0a:	2a00      	cmp	r2, #0
 8015c0c:	db04      	blt.n	8015c18 <_dtoa_r+0xa10>
 8015c0e:	d125      	bne.n	8015c5c <_dtoa_r+0xa54>
 8015c10:	9a06      	ldr	r2, [sp, #24]
 8015c12:	bb1a      	cbnz	r2, 8015c5c <_dtoa_r+0xa54>
 8015c14:	9a07      	ldr	r2, [sp, #28]
 8015c16:	bb0a      	cbnz	r2, 8015c5c <_dtoa_r+0xa54>
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	ddec      	ble.n	8015bf6 <_dtoa_r+0x9ee>
 8015c1c:	2201      	movs	r2, #1
 8015c1e:	9904      	ldr	r1, [sp, #16]
 8015c20:	4620      	mov	r0, r4
 8015c22:	f000 fe0b 	bl	801683c <__lshift>
 8015c26:	4639      	mov	r1, r7
 8015c28:	9004      	str	r0, [sp, #16]
 8015c2a:	f000 fe5b 	bl	80168e4 <__mcmp>
 8015c2e:	2800      	cmp	r0, #0
 8015c30:	dc03      	bgt.n	8015c3a <_dtoa_r+0xa32>
 8015c32:	d1e0      	bne.n	8015bf6 <_dtoa_r+0x9ee>
 8015c34:	f018 0f01 	tst.w	r8, #1
 8015c38:	d0dd      	beq.n	8015bf6 <_dtoa_r+0x9ee>
 8015c3a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015c3e:	d1d8      	bne.n	8015bf2 <_dtoa_r+0x9ea>
 8015c40:	9b05      	ldr	r3, [sp, #20]
 8015c42:	9a05      	ldr	r2, [sp, #20]
 8015c44:	1c5d      	adds	r5, r3, #1
 8015c46:	2339      	movs	r3, #57	; 0x39
 8015c48:	7013      	strb	r3, [r2, #0]
 8015c4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015c4e:	2b39      	cmp	r3, #57	; 0x39
 8015c50:	f105 32ff 	add.w	r2, r5, #4294967295
 8015c54:	d04f      	beq.n	8015cf6 <_dtoa_r+0xaee>
 8015c56:	3301      	adds	r3, #1
 8015c58:	7013      	strb	r3, [r2, #0]
 8015c5a:	e754      	b.n	8015b06 <_dtoa_r+0x8fe>
 8015c5c:	9a05      	ldr	r2, [sp, #20]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	f102 0501 	add.w	r5, r2, #1
 8015c64:	dd06      	ble.n	8015c74 <_dtoa_r+0xa6c>
 8015c66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015c6a:	d0e9      	beq.n	8015c40 <_dtoa_r+0xa38>
 8015c6c:	f108 0801 	add.w	r8, r8, #1
 8015c70:	9b05      	ldr	r3, [sp, #20]
 8015c72:	e7c2      	b.n	8015bfa <_dtoa_r+0x9f2>
 8015c74:	9a02      	ldr	r2, [sp, #8]
 8015c76:	f805 8c01 	strb.w	r8, [r5, #-1]
 8015c7a:	eba5 030b 	sub.w	r3, r5, fp
 8015c7e:	4293      	cmp	r3, r2
 8015c80:	d021      	beq.n	8015cc6 <_dtoa_r+0xabe>
 8015c82:	2300      	movs	r3, #0
 8015c84:	220a      	movs	r2, #10
 8015c86:	9904      	ldr	r1, [sp, #16]
 8015c88:	4620      	mov	r0, r4
 8015c8a:	f000 fc22 	bl	80164d2 <__multadd>
 8015c8e:	45b1      	cmp	r9, r6
 8015c90:	9004      	str	r0, [sp, #16]
 8015c92:	f04f 0300 	mov.w	r3, #0
 8015c96:	f04f 020a 	mov.w	r2, #10
 8015c9a:	4649      	mov	r1, r9
 8015c9c:	4620      	mov	r0, r4
 8015c9e:	d105      	bne.n	8015cac <_dtoa_r+0xaa4>
 8015ca0:	f000 fc17 	bl	80164d2 <__multadd>
 8015ca4:	4681      	mov	r9, r0
 8015ca6:	4606      	mov	r6, r0
 8015ca8:	9505      	str	r5, [sp, #20]
 8015caa:	e776      	b.n	8015b9a <_dtoa_r+0x992>
 8015cac:	f000 fc11 	bl	80164d2 <__multadd>
 8015cb0:	4631      	mov	r1, r6
 8015cb2:	4681      	mov	r9, r0
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	220a      	movs	r2, #10
 8015cb8:	4620      	mov	r0, r4
 8015cba:	f000 fc0a 	bl	80164d2 <__multadd>
 8015cbe:	4606      	mov	r6, r0
 8015cc0:	e7f2      	b.n	8015ca8 <_dtoa_r+0xaa0>
 8015cc2:	f04f 0900 	mov.w	r9, #0
 8015cc6:	2201      	movs	r2, #1
 8015cc8:	9904      	ldr	r1, [sp, #16]
 8015cca:	4620      	mov	r0, r4
 8015ccc:	f000 fdb6 	bl	801683c <__lshift>
 8015cd0:	4639      	mov	r1, r7
 8015cd2:	9004      	str	r0, [sp, #16]
 8015cd4:	f000 fe06 	bl	80168e4 <__mcmp>
 8015cd8:	2800      	cmp	r0, #0
 8015cda:	dcb6      	bgt.n	8015c4a <_dtoa_r+0xa42>
 8015cdc:	d102      	bne.n	8015ce4 <_dtoa_r+0xadc>
 8015cde:	f018 0f01 	tst.w	r8, #1
 8015ce2:	d1b2      	bne.n	8015c4a <_dtoa_r+0xa42>
 8015ce4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015ce8:	2b30      	cmp	r3, #48	; 0x30
 8015cea:	f105 32ff 	add.w	r2, r5, #4294967295
 8015cee:	f47f af0a 	bne.w	8015b06 <_dtoa_r+0x8fe>
 8015cf2:	4615      	mov	r5, r2
 8015cf4:	e7f6      	b.n	8015ce4 <_dtoa_r+0xadc>
 8015cf6:	4593      	cmp	fp, r2
 8015cf8:	d105      	bne.n	8015d06 <_dtoa_r+0xafe>
 8015cfa:	2331      	movs	r3, #49	; 0x31
 8015cfc:	f10a 0a01 	add.w	sl, sl, #1
 8015d00:	f88b 3000 	strb.w	r3, [fp]
 8015d04:	e6ff      	b.n	8015b06 <_dtoa_r+0x8fe>
 8015d06:	4615      	mov	r5, r2
 8015d08:	e79f      	b.n	8015c4a <_dtoa_r+0xa42>
 8015d0a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8015d70 <_dtoa_r+0xb68>
 8015d0e:	e007      	b.n	8015d20 <_dtoa_r+0xb18>
 8015d10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015d12:	f8df b060 	ldr.w	fp, [pc, #96]	; 8015d74 <_dtoa_r+0xb6c>
 8015d16:	b11b      	cbz	r3, 8015d20 <_dtoa_r+0xb18>
 8015d18:	f10b 0308 	add.w	r3, fp, #8
 8015d1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015d1e:	6013      	str	r3, [r2, #0]
 8015d20:	4658      	mov	r0, fp
 8015d22:	b017      	add	sp, #92	; 0x5c
 8015d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d28:	9b06      	ldr	r3, [sp, #24]
 8015d2a:	2b01      	cmp	r3, #1
 8015d2c:	f77f ae35 	ble.w	801599a <_dtoa_r+0x792>
 8015d30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d32:	9307      	str	r3, [sp, #28]
 8015d34:	e649      	b.n	80159ca <_dtoa_r+0x7c2>
 8015d36:	9b02      	ldr	r3, [sp, #8]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	dc03      	bgt.n	8015d44 <_dtoa_r+0xb3c>
 8015d3c:	9b06      	ldr	r3, [sp, #24]
 8015d3e:	2b02      	cmp	r3, #2
 8015d40:	f73f aecc 	bgt.w	8015adc <_dtoa_r+0x8d4>
 8015d44:	465d      	mov	r5, fp
 8015d46:	4639      	mov	r1, r7
 8015d48:	9804      	ldr	r0, [sp, #16]
 8015d4a:	f7ff f9cf 	bl	80150ec <quorem>
 8015d4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015d52:	f805 8b01 	strb.w	r8, [r5], #1
 8015d56:	9a02      	ldr	r2, [sp, #8]
 8015d58:	eba5 030b 	sub.w	r3, r5, fp
 8015d5c:	429a      	cmp	r2, r3
 8015d5e:	ddb0      	ble.n	8015cc2 <_dtoa_r+0xaba>
 8015d60:	2300      	movs	r3, #0
 8015d62:	220a      	movs	r2, #10
 8015d64:	9904      	ldr	r1, [sp, #16]
 8015d66:	4620      	mov	r0, r4
 8015d68:	f000 fbb3 	bl	80164d2 <__multadd>
 8015d6c:	9004      	str	r0, [sp, #16]
 8015d6e:	e7ea      	b.n	8015d46 <_dtoa_r+0xb3e>
 8015d70:	08018343 	.word	0x08018343
 8015d74:	080181a0 	.word	0x080181a0

08015d78 <rshift>:
 8015d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d7a:	6906      	ldr	r6, [r0, #16]
 8015d7c:	114b      	asrs	r3, r1, #5
 8015d7e:	429e      	cmp	r6, r3
 8015d80:	f100 0414 	add.w	r4, r0, #20
 8015d84:	dd30      	ble.n	8015de8 <rshift+0x70>
 8015d86:	f011 011f 	ands.w	r1, r1, #31
 8015d8a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8015d8e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015d92:	d108      	bne.n	8015da6 <rshift+0x2e>
 8015d94:	4621      	mov	r1, r4
 8015d96:	42b2      	cmp	r2, r6
 8015d98:	460b      	mov	r3, r1
 8015d9a:	d211      	bcs.n	8015dc0 <rshift+0x48>
 8015d9c:	f852 3b04 	ldr.w	r3, [r2], #4
 8015da0:	f841 3b04 	str.w	r3, [r1], #4
 8015da4:	e7f7      	b.n	8015d96 <rshift+0x1e>
 8015da6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8015daa:	f1c1 0c20 	rsb	ip, r1, #32
 8015dae:	40cd      	lsrs	r5, r1
 8015db0:	3204      	adds	r2, #4
 8015db2:	4623      	mov	r3, r4
 8015db4:	42b2      	cmp	r2, r6
 8015db6:	4617      	mov	r7, r2
 8015db8:	d30c      	bcc.n	8015dd4 <rshift+0x5c>
 8015dba:	601d      	str	r5, [r3, #0]
 8015dbc:	b105      	cbz	r5, 8015dc0 <rshift+0x48>
 8015dbe:	3304      	adds	r3, #4
 8015dc0:	1b1a      	subs	r2, r3, r4
 8015dc2:	42a3      	cmp	r3, r4
 8015dc4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015dc8:	bf08      	it	eq
 8015dca:	2300      	moveq	r3, #0
 8015dcc:	6102      	str	r2, [r0, #16]
 8015dce:	bf08      	it	eq
 8015dd0:	6143      	streq	r3, [r0, #20]
 8015dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015dd4:	683f      	ldr	r7, [r7, #0]
 8015dd6:	fa07 f70c 	lsl.w	r7, r7, ip
 8015dda:	433d      	orrs	r5, r7
 8015ddc:	f843 5b04 	str.w	r5, [r3], #4
 8015de0:	f852 5b04 	ldr.w	r5, [r2], #4
 8015de4:	40cd      	lsrs	r5, r1
 8015de6:	e7e5      	b.n	8015db4 <rshift+0x3c>
 8015de8:	4623      	mov	r3, r4
 8015dea:	e7e9      	b.n	8015dc0 <rshift+0x48>

08015dec <__hexdig_fun>:
 8015dec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015df0:	2b09      	cmp	r3, #9
 8015df2:	d802      	bhi.n	8015dfa <__hexdig_fun+0xe>
 8015df4:	3820      	subs	r0, #32
 8015df6:	b2c0      	uxtb	r0, r0
 8015df8:	4770      	bx	lr
 8015dfa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015dfe:	2b05      	cmp	r3, #5
 8015e00:	d801      	bhi.n	8015e06 <__hexdig_fun+0x1a>
 8015e02:	3847      	subs	r0, #71	; 0x47
 8015e04:	e7f7      	b.n	8015df6 <__hexdig_fun+0xa>
 8015e06:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015e0a:	2b05      	cmp	r3, #5
 8015e0c:	d801      	bhi.n	8015e12 <__hexdig_fun+0x26>
 8015e0e:	3827      	subs	r0, #39	; 0x27
 8015e10:	e7f1      	b.n	8015df6 <__hexdig_fun+0xa>
 8015e12:	2000      	movs	r0, #0
 8015e14:	4770      	bx	lr

08015e16 <__gethex>:
 8015e16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e1a:	b08b      	sub	sp, #44	; 0x2c
 8015e1c:	468a      	mov	sl, r1
 8015e1e:	9002      	str	r0, [sp, #8]
 8015e20:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015e22:	9306      	str	r3, [sp, #24]
 8015e24:	4690      	mov	r8, r2
 8015e26:	f000 fadf 	bl	80163e8 <__localeconv_l>
 8015e2a:	6803      	ldr	r3, [r0, #0]
 8015e2c:	9303      	str	r3, [sp, #12]
 8015e2e:	4618      	mov	r0, r3
 8015e30:	f7ea f9e6 	bl	8000200 <strlen>
 8015e34:	9b03      	ldr	r3, [sp, #12]
 8015e36:	9001      	str	r0, [sp, #4]
 8015e38:	4403      	add	r3, r0
 8015e3a:	f04f 0b00 	mov.w	fp, #0
 8015e3e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015e42:	9307      	str	r3, [sp, #28]
 8015e44:	f8da 3000 	ldr.w	r3, [sl]
 8015e48:	3302      	adds	r3, #2
 8015e4a:	461f      	mov	r7, r3
 8015e4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015e50:	2830      	cmp	r0, #48	; 0x30
 8015e52:	d06c      	beq.n	8015f2e <__gethex+0x118>
 8015e54:	f7ff ffca 	bl	8015dec <__hexdig_fun>
 8015e58:	4604      	mov	r4, r0
 8015e5a:	2800      	cmp	r0, #0
 8015e5c:	d16a      	bne.n	8015f34 <__gethex+0x11e>
 8015e5e:	9a01      	ldr	r2, [sp, #4]
 8015e60:	9903      	ldr	r1, [sp, #12]
 8015e62:	4638      	mov	r0, r7
 8015e64:	f001 fc36 	bl	80176d4 <strncmp>
 8015e68:	2800      	cmp	r0, #0
 8015e6a:	d166      	bne.n	8015f3a <__gethex+0x124>
 8015e6c:	9b01      	ldr	r3, [sp, #4]
 8015e6e:	5cf8      	ldrb	r0, [r7, r3]
 8015e70:	18fe      	adds	r6, r7, r3
 8015e72:	f7ff ffbb 	bl	8015dec <__hexdig_fun>
 8015e76:	2800      	cmp	r0, #0
 8015e78:	d062      	beq.n	8015f40 <__gethex+0x12a>
 8015e7a:	4633      	mov	r3, r6
 8015e7c:	7818      	ldrb	r0, [r3, #0]
 8015e7e:	2830      	cmp	r0, #48	; 0x30
 8015e80:	461f      	mov	r7, r3
 8015e82:	f103 0301 	add.w	r3, r3, #1
 8015e86:	d0f9      	beq.n	8015e7c <__gethex+0x66>
 8015e88:	f7ff ffb0 	bl	8015dec <__hexdig_fun>
 8015e8c:	fab0 f580 	clz	r5, r0
 8015e90:	096d      	lsrs	r5, r5, #5
 8015e92:	4634      	mov	r4, r6
 8015e94:	f04f 0b01 	mov.w	fp, #1
 8015e98:	463a      	mov	r2, r7
 8015e9a:	4616      	mov	r6, r2
 8015e9c:	3201      	adds	r2, #1
 8015e9e:	7830      	ldrb	r0, [r6, #0]
 8015ea0:	f7ff ffa4 	bl	8015dec <__hexdig_fun>
 8015ea4:	2800      	cmp	r0, #0
 8015ea6:	d1f8      	bne.n	8015e9a <__gethex+0x84>
 8015ea8:	9a01      	ldr	r2, [sp, #4]
 8015eaa:	9903      	ldr	r1, [sp, #12]
 8015eac:	4630      	mov	r0, r6
 8015eae:	f001 fc11 	bl	80176d4 <strncmp>
 8015eb2:	b950      	cbnz	r0, 8015eca <__gethex+0xb4>
 8015eb4:	b954      	cbnz	r4, 8015ecc <__gethex+0xb6>
 8015eb6:	9b01      	ldr	r3, [sp, #4]
 8015eb8:	18f4      	adds	r4, r6, r3
 8015eba:	4622      	mov	r2, r4
 8015ebc:	4616      	mov	r6, r2
 8015ebe:	3201      	adds	r2, #1
 8015ec0:	7830      	ldrb	r0, [r6, #0]
 8015ec2:	f7ff ff93 	bl	8015dec <__hexdig_fun>
 8015ec6:	2800      	cmp	r0, #0
 8015ec8:	d1f8      	bne.n	8015ebc <__gethex+0xa6>
 8015eca:	b10c      	cbz	r4, 8015ed0 <__gethex+0xba>
 8015ecc:	1ba4      	subs	r4, r4, r6
 8015ece:	00a4      	lsls	r4, r4, #2
 8015ed0:	7833      	ldrb	r3, [r6, #0]
 8015ed2:	2b50      	cmp	r3, #80	; 0x50
 8015ed4:	d001      	beq.n	8015eda <__gethex+0xc4>
 8015ed6:	2b70      	cmp	r3, #112	; 0x70
 8015ed8:	d140      	bne.n	8015f5c <__gethex+0x146>
 8015eda:	7873      	ldrb	r3, [r6, #1]
 8015edc:	2b2b      	cmp	r3, #43	; 0x2b
 8015ede:	d031      	beq.n	8015f44 <__gethex+0x12e>
 8015ee0:	2b2d      	cmp	r3, #45	; 0x2d
 8015ee2:	d033      	beq.n	8015f4c <__gethex+0x136>
 8015ee4:	1c71      	adds	r1, r6, #1
 8015ee6:	f04f 0900 	mov.w	r9, #0
 8015eea:	7808      	ldrb	r0, [r1, #0]
 8015eec:	f7ff ff7e 	bl	8015dec <__hexdig_fun>
 8015ef0:	1e43      	subs	r3, r0, #1
 8015ef2:	b2db      	uxtb	r3, r3
 8015ef4:	2b18      	cmp	r3, #24
 8015ef6:	d831      	bhi.n	8015f5c <__gethex+0x146>
 8015ef8:	f1a0 0210 	sub.w	r2, r0, #16
 8015efc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015f00:	f7ff ff74 	bl	8015dec <__hexdig_fun>
 8015f04:	1e43      	subs	r3, r0, #1
 8015f06:	b2db      	uxtb	r3, r3
 8015f08:	2b18      	cmp	r3, #24
 8015f0a:	d922      	bls.n	8015f52 <__gethex+0x13c>
 8015f0c:	f1b9 0f00 	cmp.w	r9, #0
 8015f10:	d000      	beq.n	8015f14 <__gethex+0xfe>
 8015f12:	4252      	negs	r2, r2
 8015f14:	4414      	add	r4, r2
 8015f16:	f8ca 1000 	str.w	r1, [sl]
 8015f1a:	b30d      	cbz	r5, 8015f60 <__gethex+0x14a>
 8015f1c:	f1bb 0f00 	cmp.w	fp, #0
 8015f20:	bf0c      	ite	eq
 8015f22:	2706      	moveq	r7, #6
 8015f24:	2700      	movne	r7, #0
 8015f26:	4638      	mov	r0, r7
 8015f28:	b00b      	add	sp, #44	; 0x2c
 8015f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f2e:	f10b 0b01 	add.w	fp, fp, #1
 8015f32:	e78a      	b.n	8015e4a <__gethex+0x34>
 8015f34:	2500      	movs	r5, #0
 8015f36:	462c      	mov	r4, r5
 8015f38:	e7ae      	b.n	8015e98 <__gethex+0x82>
 8015f3a:	463e      	mov	r6, r7
 8015f3c:	2501      	movs	r5, #1
 8015f3e:	e7c7      	b.n	8015ed0 <__gethex+0xba>
 8015f40:	4604      	mov	r4, r0
 8015f42:	e7fb      	b.n	8015f3c <__gethex+0x126>
 8015f44:	f04f 0900 	mov.w	r9, #0
 8015f48:	1cb1      	adds	r1, r6, #2
 8015f4a:	e7ce      	b.n	8015eea <__gethex+0xd4>
 8015f4c:	f04f 0901 	mov.w	r9, #1
 8015f50:	e7fa      	b.n	8015f48 <__gethex+0x132>
 8015f52:	230a      	movs	r3, #10
 8015f54:	fb03 0202 	mla	r2, r3, r2, r0
 8015f58:	3a10      	subs	r2, #16
 8015f5a:	e7cf      	b.n	8015efc <__gethex+0xe6>
 8015f5c:	4631      	mov	r1, r6
 8015f5e:	e7da      	b.n	8015f16 <__gethex+0x100>
 8015f60:	1bf3      	subs	r3, r6, r7
 8015f62:	3b01      	subs	r3, #1
 8015f64:	4629      	mov	r1, r5
 8015f66:	2b07      	cmp	r3, #7
 8015f68:	dc49      	bgt.n	8015ffe <__gethex+0x1e8>
 8015f6a:	9802      	ldr	r0, [sp, #8]
 8015f6c:	f000 fa66 	bl	801643c <_Balloc>
 8015f70:	9b01      	ldr	r3, [sp, #4]
 8015f72:	f100 0914 	add.w	r9, r0, #20
 8015f76:	f04f 0b00 	mov.w	fp, #0
 8015f7a:	f1c3 0301 	rsb	r3, r3, #1
 8015f7e:	4605      	mov	r5, r0
 8015f80:	f8cd 9010 	str.w	r9, [sp, #16]
 8015f84:	46da      	mov	sl, fp
 8015f86:	9308      	str	r3, [sp, #32]
 8015f88:	42b7      	cmp	r7, r6
 8015f8a:	d33b      	bcc.n	8016004 <__gethex+0x1ee>
 8015f8c:	9804      	ldr	r0, [sp, #16]
 8015f8e:	f840 ab04 	str.w	sl, [r0], #4
 8015f92:	eba0 0009 	sub.w	r0, r0, r9
 8015f96:	1080      	asrs	r0, r0, #2
 8015f98:	6128      	str	r0, [r5, #16]
 8015f9a:	0147      	lsls	r7, r0, #5
 8015f9c:	4650      	mov	r0, sl
 8015f9e:	f000 fb11 	bl	80165c4 <__hi0bits>
 8015fa2:	f8d8 6000 	ldr.w	r6, [r8]
 8015fa6:	1a3f      	subs	r7, r7, r0
 8015fa8:	42b7      	cmp	r7, r6
 8015faa:	dd64      	ble.n	8016076 <__gethex+0x260>
 8015fac:	1bbf      	subs	r7, r7, r6
 8015fae:	4639      	mov	r1, r7
 8015fb0:	4628      	mov	r0, r5
 8015fb2:	f000 fe21 	bl	8016bf8 <__any_on>
 8015fb6:	4682      	mov	sl, r0
 8015fb8:	b178      	cbz	r0, 8015fda <__gethex+0x1c4>
 8015fba:	1e7b      	subs	r3, r7, #1
 8015fbc:	1159      	asrs	r1, r3, #5
 8015fbe:	f003 021f 	and.w	r2, r3, #31
 8015fc2:	f04f 0a01 	mov.w	sl, #1
 8015fc6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015fca:	fa0a f202 	lsl.w	r2, sl, r2
 8015fce:	420a      	tst	r2, r1
 8015fd0:	d003      	beq.n	8015fda <__gethex+0x1c4>
 8015fd2:	4553      	cmp	r3, sl
 8015fd4:	dc46      	bgt.n	8016064 <__gethex+0x24e>
 8015fd6:	f04f 0a02 	mov.w	sl, #2
 8015fda:	4639      	mov	r1, r7
 8015fdc:	4628      	mov	r0, r5
 8015fde:	f7ff fecb 	bl	8015d78 <rshift>
 8015fe2:	443c      	add	r4, r7
 8015fe4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015fe8:	42a3      	cmp	r3, r4
 8015fea:	da52      	bge.n	8016092 <__gethex+0x27c>
 8015fec:	4629      	mov	r1, r5
 8015fee:	9802      	ldr	r0, [sp, #8]
 8015ff0:	f000 fa58 	bl	80164a4 <_Bfree>
 8015ff4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015ff6:	2300      	movs	r3, #0
 8015ff8:	6013      	str	r3, [r2, #0]
 8015ffa:	27a3      	movs	r7, #163	; 0xa3
 8015ffc:	e793      	b.n	8015f26 <__gethex+0x110>
 8015ffe:	3101      	adds	r1, #1
 8016000:	105b      	asrs	r3, r3, #1
 8016002:	e7b0      	b.n	8015f66 <__gethex+0x150>
 8016004:	1e73      	subs	r3, r6, #1
 8016006:	9305      	str	r3, [sp, #20]
 8016008:	9a07      	ldr	r2, [sp, #28]
 801600a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801600e:	4293      	cmp	r3, r2
 8016010:	d018      	beq.n	8016044 <__gethex+0x22e>
 8016012:	f1bb 0f20 	cmp.w	fp, #32
 8016016:	d107      	bne.n	8016028 <__gethex+0x212>
 8016018:	9b04      	ldr	r3, [sp, #16]
 801601a:	f8c3 a000 	str.w	sl, [r3]
 801601e:	3304      	adds	r3, #4
 8016020:	f04f 0a00 	mov.w	sl, #0
 8016024:	9304      	str	r3, [sp, #16]
 8016026:	46d3      	mov	fp, sl
 8016028:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801602c:	f7ff fede 	bl	8015dec <__hexdig_fun>
 8016030:	f000 000f 	and.w	r0, r0, #15
 8016034:	fa00 f00b 	lsl.w	r0, r0, fp
 8016038:	ea4a 0a00 	orr.w	sl, sl, r0
 801603c:	f10b 0b04 	add.w	fp, fp, #4
 8016040:	9b05      	ldr	r3, [sp, #20]
 8016042:	e00d      	b.n	8016060 <__gethex+0x24a>
 8016044:	9b05      	ldr	r3, [sp, #20]
 8016046:	9a08      	ldr	r2, [sp, #32]
 8016048:	4413      	add	r3, r2
 801604a:	42bb      	cmp	r3, r7
 801604c:	d3e1      	bcc.n	8016012 <__gethex+0x1fc>
 801604e:	4618      	mov	r0, r3
 8016050:	9a01      	ldr	r2, [sp, #4]
 8016052:	9903      	ldr	r1, [sp, #12]
 8016054:	9309      	str	r3, [sp, #36]	; 0x24
 8016056:	f001 fb3d 	bl	80176d4 <strncmp>
 801605a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801605c:	2800      	cmp	r0, #0
 801605e:	d1d8      	bne.n	8016012 <__gethex+0x1fc>
 8016060:	461e      	mov	r6, r3
 8016062:	e791      	b.n	8015f88 <__gethex+0x172>
 8016064:	1eb9      	subs	r1, r7, #2
 8016066:	4628      	mov	r0, r5
 8016068:	f000 fdc6 	bl	8016bf8 <__any_on>
 801606c:	2800      	cmp	r0, #0
 801606e:	d0b2      	beq.n	8015fd6 <__gethex+0x1c0>
 8016070:	f04f 0a03 	mov.w	sl, #3
 8016074:	e7b1      	b.n	8015fda <__gethex+0x1c4>
 8016076:	da09      	bge.n	801608c <__gethex+0x276>
 8016078:	1bf7      	subs	r7, r6, r7
 801607a:	4629      	mov	r1, r5
 801607c:	463a      	mov	r2, r7
 801607e:	9802      	ldr	r0, [sp, #8]
 8016080:	f000 fbdc 	bl	801683c <__lshift>
 8016084:	1be4      	subs	r4, r4, r7
 8016086:	4605      	mov	r5, r0
 8016088:	f100 0914 	add.w	r9, r0, #20
 801608c:	f04f 0a00 	mov.w	sl, #0
 8016090:	e7a8      	b.n	8015fe4 <__gethex+0x1ce>
 8016092:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016096:	42a0      	cmp	r0, r4
 8016098:	dd6a      	ble.n	8016170 <__gethex+0x35a>
 801609a:	1b04      	subs	r4, r0, r4
 801609c:	42a6      	cmp	r6, r4
 801609e:	dc2e      	bgt.n	80160fe <__gethex+0x2e8>
 80160a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80160a4:	2b02      	cmp	r3, #2
 80160a6:	d022      	beq.n	80160ee <__gethex+0x2d8>
 80160a8:	2b03      	cmp	r3, #3
 80160aa:	d024      	beq.n	80160f6 <__gethex+0x2e0>
 80160ac:	2b01      	cmp	r3, #1
 80160ae:	d115      	bne.n	80160dc <__gethex+0x2c6>
 80160b0:	42a6      	cmp	r6, r4
 80160b2:	d113      	bne.n	80160dc <__gethex+0x2c6>
 80160b4:	2e01      	cmp	r6, #1
 80160b6:	dc0b      	bgt.n	80160d0 <__gethex+0x2ba>
 80160b8:	9a06      	ldr	r2, [sp, #24]
 80160ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80160be:	6013      	str	r3, [r2, #0]
 80160c0:	2301      	movs	r3, #1
 80160c2:	612b      	str	r3, [r5, #16]
 80160c4:	f8c9 3000 	str.w	r3, [r9]
 80160c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80160ca:	2762      	movs	r7, #98	; 0x62
 80160cc:	601d      	str	r5, [r3, #0]
 80160ce:	e72a      	b.n	8015f26 <__gethex+0x110>
 80160d0:	1e71      	subs	r1, r6, #1
 80160d2:	4628      	mov	r0, r5
 80160d4:	f000 fd90 	bl	8016bf8 <__any_on>
 80160d8:	2800      	cmp	r0, #0
 80160da:	d1ed      	bne.n	80160b8 <__gethex+0x2a2>
 80160dc:	4629      	mov	r1, r5
 80160de:	9802      	ldr	r0, [sp, #8]
 80160e0:	f000 f9e0 	bl	80164a4 <_Bfree>
 80160e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80160e6:	2300      	movs	r3, #0
 80160e8:	6013      	str	r3, [r2, #0]
 80160ea:	2750      	movs	r7, #80	; 0x50
 80160ec:	e71b      	b.n	8015f26 <__gethex+0x110>
 80160ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d0e1      	beq.n	80160b8 <__gethex+0x2a2>
 80160f4:	e7f2      	b.n	80160dc <__gethex+0x2c6>
 80160f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d1dd      	bne.n	80160b8 <__gethex+0x2a2>
 80160fc:	e7ee      	b.n	80160dc <__gethex+0x2c6>
 80160fe:	1e67      	subs	r7, r4, #1
 8016100:	f1ba 0f00 	cmp.w	sl, #0
 8016104:	d131      	bne.n	801616a <__gethex+0x354>
 8016106:	b127      	cbz	r7, 8016112 <__gethex+0x2fc>
 8016108:	4639      	mov	r1, r7
 801610a:	4628      	mov	r0, r5
 801610c:	f000 fd74 	bl	8016bf8 <__any_on>
 8016110:	4682      	mov	sl, r0
 8016112:	117a      	asrs	r2, r7, #5
 8016114:	2301      	movs	r3, #1
 8016116:	f007 071f 	and.w	r7, r7, #31
 801611a:	fa03 f707 	lsl.w	r7, r3, r7
 801611e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8016122:	4621      	mov	r1, r4
 8016124:	421f      	tst	r7, r3
 8016126:	4628      	mov	r0, r5
 8016128:	bf18      	it	ne
 801612a:	f04a 0a02 	orrne.w	sl, sl, #2
 801612e:	1b36      	subs	r6, r6, r4
 8016130:	f7ff fe22 	bl	8015d78 <rshift>
 8016134:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8016138:	2702      	movs	r7, #2
 801613a:	f1ba 0f00 	cmp.w	sl, #0
 801613e:	d048      	beq.n	80161d2 <__gethex+0x3bc>
 8016140:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016144:	2b02      	cmp	r3, #2
 8016146:	d015      	beq.n	8016174 <__gethex+0x35e>
 8016148:	2b03      	cmp	r3, #3
 801614a:	d017      	beq.n	801617c <__gethex+0x366>
 801614c:	2b01      	cmp	r3, #1
 801614e:	d109      	bne.n	8016164 <__gethex+0x34e>
 8016150:	f01a 0f02 	tst.w	sl, #2
 8016154:	d006      	beq.n	8016164 <__gethex+0x34e>
 8016156:	f8d9 3000 	ldr.w	r3, [r9]
 801615a:	ea4a 0a03 	orr.w	sl, sl, r3
 801615e:	f01a 0f01 	tst.w	sl, #1
 8016162:	d10e      	bne.n	8016182 <__gethex+0x36c>
 8016164:	f047 0710 	orr.w	r7, r7, #16
 8016168:	e033      	b.n	80161d2 <__gethex+0x3bc>
 801616a:	f04f 0a01 	mov.w	sl, #1
 801616e:	e7d0      	b.n	8016112 <__gethex+0x2fc>
 8016170:	2701      	movs	r7, #1
 8016172:	e7e2      	b.n	801613a <__gethex+0x324>
 8016174:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016176:	f1c3 0301 	rsb	r3, r3, #1
 801617a:	9315      	str	r3, [sp, #84]	; 0x54
 801617c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801617e:	2b00      	cmp	r3, #0
 8016180:	d0f0      	beq.n	8016164 <__gethex+0x34e>
 8016182:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8016186:	f105 0314 	add.w	r3, r5, #20
 801618a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801618e:	eb03 010a 	add.w	r1, r3, sl
 8016192:	f04f 0c00 	mov.w	ip, #0
 8016196:	4618      	mov	r0, r3
 8016198:	f853 2b04 	ldr.w	r2, [r3], #4
 801619c:	f1b2 3fff 	cmp.w	r2, #4294967295
 80161a0:	d01c      	beq.n	80161dc <__gethex+0x3c6>
 80161a2:	3201      	adds	r2, #1
 80161a4:	6002      	str	r2, [r0, #0]
 80161a6:	2f02      	cmp	r7, #2
 80161a8:	f105 0314 	add.w	r3, r5, #20
 80161ac:	d138      	bne.n	8016220 <__gethex+0x40a>
 80161ae:	f8d8 2000 	ldr.w	r2, [r8]
 80161b2:	3a01      	subs	r2, #1
 80161b4:	42b2      	cmp	r2, r6
 80161b6:	d10a      	bne.n	80161ce <__gethex+0x3b8>
 80161b8:	1171      	asrs	r1, r6, #5
 80161ba:	2201      	movs	r2, #1
 80161bc:	f006 061f 	and.w	r6, r6, #31
 80161c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80161c4:	fa02 f606 	lsl.w	r6, r2, r6
 80161c8:	421e      	tst	r6, r3
 80161ca:	bf18      	it	ne
 80161cc:	4617      	movne	r7, r2
 80161ce:	f047 0720 	orr.w	r7, r7, #32
 80161d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80161d4:	601d      	str	r5, [r3, #0]
 80161d6:	9b06      	ldr	r3, [sp, #24]
 80161d8:	601c      	str	r4, [r3, #0]
 80161da:	e6a4      	b.n	8015f26 <__gethex+0x110>
 80161dc:	4299      	cmp	r1, r3
 80161de:	f843 cc04 	str.w	ip, [r3, #-4]
 80161e2:	d8d8      	bhi.n	8016196 <__gethex+0x380>
 80161e4:	68ab      	ldr	r3, [r5, #8]
 80161e6:	4599      	cmp	r9, r3
 80161e8:	db12      	blt.n	8016210 <__gethex+0x3fa>
 80161ea:	6869      	ldr	r1, [r5, #4]
 80161ec:	9802      	ldr	r0, [sp, #8]
 80161ee:	3101      	adds	r1, #1
 80161f0:	f000 f924 	bl	801643c <_Balloc>
 80161f4:	692a      	ldr	r2, [r5, #16]
 80161f6:	3202      	adds	r2, #2
 80161f8:	f105 010c 	add.w	r1, r5, #12
 80161fc:	4683      	mov	fp, r0
 80161fe:	0092      	lsls	r2, r2, #2
 8016200:	300c      	adds	r0, #12
 8016202:	f7fd f9c5 	bl	8013590 <memcpy>
 8016206:	4629      	mov	r1, r5
 8016208:	9802      	ldr	r0, [sp, #8]
 801620a:	f000 f94b 	bl	80164a4 <_Bfree>
 801620e:	465d      	mov	r5, fp
 8016210:	692b      	ldr	r3, [r5, #16]
 8016212:	1c5a      	adds	r2, r3, #1
 8016214:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8016218:	612a      	str	r2, [r5, #16]
 801621a:	2201      	movs	r2, #1
 801621c:	615a      	str	r2, [r3, #20]
 801621e:	e7c2      	b.n	80161a6 <__gethex+0x390>
 8016220:	692a      	ldr	r2, [r5, #16]
 8016222:	454a      	cmp	r2, r9
 8016224:	dd0b      	ble.n	801623e <__gethex+0x428>
 8016226:	2101      	movs	r1, #1
 8016228:	4628      	mov	r0, r5
 801622a:	f7ff fda5 	bl	8015d78 <rshift>
 801622e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016232:	3401      	adds	r4, #1
 8016234:	42a3      	cmp	r3, r4
 8016236:	f6ff aed9 	blt.w	8015fec <__gethex+0x1d6>
 801623a:	2701      	movs	r7, #1
 801623c:	e7c7      	b.n	80161ce <__gethex+0x3b8>
 801623e:	f016 061f 	ands.w	r6, r6, #31
 8016242:	d0fa      	beq.n	801623a <__gethex+0x424>
 8016244:	449a      	add	sl, r3
 8016246:	f1c6 0620 	rsb	r6, r6, #32
 801624a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801624e:	f000 f9b9 	bl	80165c4 <__hi0bits>
 8016252:	42b0      	cmp	r0, r6
 8016254:	dbe7      	blt.n	8016226 <__gethex+0x410>
 8016256:	e7f0      	b.n	801623a <__gethex+0x424>

08016258 <L_shift>:
 8016258:	f1c2 0208 	rsb	r2, r2, #8
 801625c:	0092      	lsls	r2, r2, #2
 801625e:	b570      	push	{r4, r5, r6, lr}
 8016260:	f1c2 0620 	rsb	r6, r2, #32
 8016264:	6843      	ldr	r3, [r0, #4]
 8016266:	6804      	ldr	r4, [r0, #0]
 8016268:	fa03 f506 	lsl.w	r5, r3, r6
 801626c:	432c      	orrs	r4, r5
 801626e:	40d3      	lsrs	r3, r2
 8016270:	6004      	str	r4, [r0, #0]
 8016272:	f840 3f04 	str.w	r3, [r0, #4]!
 8016276:	4288      	cmp	r0, r1
 8016278:	d3f4      	bcc.n	8016264 <L_shift+0xc>
 801627a:	bd70      	pop	{r4, r5, r6, pc}

0801627c <__match>:
 801627c:	b530      	push	{r4, r5, lr}
 801627e:	6803      	ldr	r3, [r0, #0]
 8016280:	3301      	adds	r3, #1
 8016282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016286:	b914      	cbnz	r4, 801628e <__match+0x12>
 8016288:	6003      	str	r3, [r0, #0]
 801628a:	2001      	movs	r0, #1
 801628c:	bd30      	pop	{r4, r5, pc}
 801628e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016292:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016296:	2d19      	cmp	r5, #25
 8016298:	bf98      	it	ls
 801629a:	3220      	addls	r2, #32
 801629c:	42a2      	cmp	r2, r4
 801629e:	d0f0      	beq.n	8016282 <__match+0x6>
 80162a0:	2000      	movs	r0, #0
 80162a2:	e7f3      	b.n	801628c <__match+0x10>

080162a4 <__hexnan>:
 80162a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162a8:	680b      	ldr	r3, [r1, #0]
 80162aa:	6801      	ldr	r1, [r0, #0]
 80162ac:	115f      	asrs	r7, r3, #5
 80162ae:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80162b2:	f013 031f 	ands.w	r3, r3, #31
 80162b6:	b087      	sub	sp, #28
 80162b8:	bf18      	it	ne
 80162ba:	3704      	addne	r7, #4
 80162bc:	2500      	movs	r5, #0
 80162be:	1f3e      	subs	r6, r7, #4
 80162c0:	4682      	mov	sl, r0
 80162c2:	4690      	mov	r8, r2
 80162c4:	9301      	str	r3, [sp, #4]
 80162c6:	f847 5c04 	str.w	r5, [r7, #-4]
 80162ca:	46b1      	mov	r9, r6
 80162cc:	4634      	mov	r4, r6
 80162ce:	9502      	str	r5, [sp, #8]
 80162d0:	46ab      	mov	fp, r5
 80162d2:	784a      	ldrb	r2, [r1, #1]
 80162d4:	1c4b      	adds	r3, r1, #1
 80162d6:	9303      	str	r3, [sp, #12]
 80162d8:	b342      	cbz	r2, 801632c <__hexnan+0x88>
 80162da:	4610      	mov	r0, r2
 80162dc:	9105      	str	r1, [sp, #20]
 80162de:	9204      	str	r2, [sp, #16]
 80162e0:	f7ff fd84 	bl	8015dec <__hexdig_fun>
 80162e4:	2800      	cmp	r0, #0
 80162e6:	d143      	bne.n	8016370 <__hexnan+0xcc>
 80162e8:	9a04      	ldr	r2, [sp, #16]
 80162ea:	9905      	ldr	r1, [sp, #20]
 80162ec:	2a20      	cmp	r2, #32
 80162ee:	d818      	bhi.n	8016322 <__hexnan+0x7e>
 80162f0:	9b02      	ldr	r3, [sp, #8]
 80162f2:	459b      	cmp	fp, r3
 80162f4:	dd13      	ble.n	801631e <__hexnan+0x7a>
 80162f6:	454c      	cmp	r4, r9
 80162f8:	d206      	bcs.n	8016308 <__hexnan+0x64>
 80162fa:	2d07      	cmp	r5, #7
 80162fc:	dc04      	bgt.n	8016308 <__hexnan+0x64>
 80162fe:	462a      	mov	r2, r5
 8016300:	4649      	mov	r1, r9
 8016302:	4620      	mov	r0, r4
 8016304:	f7ff ffa8 	bl	8016258 <L_shift>
 8016308:	4544      	cmp	r4, r8
 801630a:	d944      	bls.n	8016396 <__hexnan+0xf2>
 801630c:	2300      	movs	r3, #0
 801630e:	f1a4 0904 	sub.w	r9, r4, #4
 8016312:	f844 3c04 	str.w	r3, [r4, #-4]
 8016316:	f8cd b008 	str.w	fp, [sp, #8]
 801631a:	464c      	mov	r4, r9
 801631c:	461d      	mov	r5, r3
 801631e:	9903      	ldr	r1, [sp, #12]
 8016320:	e7d7      	b.n	80162d2 <__hexnan+0x2e>
 8016322:	2a29      	cmp	r2, #41	; 0x29
 8016324:	d14a      	bne.n	80163bc <__hexnan+0x118>
 8016326:	3102      	adds	r1, #2
 8016328:	f8ca 1000 	str.w	r1, [sl]
 801632c:	f1bb 0f00 	cmp.w	fp, #0
 8016330:	d044      	beq.n	80163bc <__hexnan+0x118>
 8016332:	454c      	cmp	r4, r9
 8016334:	d206      	bcs.n	8016344 <__hexnan+0xa0>
 8016336:	2d07      	cmp	r5, #7
 8016338:	dc04      	bgt.n	8016344 <__hexnan+0xa0>
 801633a:	462a      	mov	r2, r5
 801633c:	4649      	mov	r1, r9
 801633e:	4620      	mov	r0, r4
 8016340:	f7ff ff8a 	bl	8016258 <L_shift>
 8016344:	4544      	cmp	r4, r8
 8016346:	d928      	bls.n	801639a <__hexnan+0xf6>
 8016348:	4643      	mov	r3, r8
 801634a:	f854 2b04 	ldr.w	r2, [r4], #4
 801634e:	f843 2b04 	str.w	r2, [r3], #4
 8016352:	42a6      	cmp	r6, r4
 8016354:	d2f9      	bcs.n	801634a <__hexnan+0xa6>
 8016356:	2200      	movs	r2, #0
 8016358:	f843 2b04 	str.w	r2, [r3], #4
 801635c:	429e      	cmp	r6, r3
 801635e:	d2fb      	bcs.n	8016358 <__hexnan+0xb4>
 8016360:	6833      	ldr	r3, [r6, #0]
 8016362:	b91b      	cbnz	r3, 801636c <__hexnan+0xc8>
 8016364:	4546      	cmp	r6, r8
 8016366:	d127      	bne.n	80163b8 <__hexnan+0x114>
 8016368:	2301      	movs	r3, #1
 801636a:	6033      	str	r3, [r6, #0]
 801636c:	2005      	movs	r0, #5
 801636e:	e026      	b.n	80163be <__hexnan+0x11a>
 8016370:	3501      	adds	r5, #1
 8016372:	2d08      	cmp	r5, #8
 8016374:	f10b 0b01 	add.w	fp, fp, #1
 8016378:	dd06      	ble.n	8016388 <__hexnan+0xe4>
 801637a:	4544      	cmp	r4, r8
 801637c:	d9cf      	bls.n	801631e <__hexnan+0x7a>
 801637e:	2300      	movs	r3, #0
 8016380:	f844 3c04 	str.w	r3, [r4, #-4]
 8016384:	2501      	movs	r5, #1
 8016386:	3c04      	subs	r4, #4
 8016388:	6822      	ldr	r2, [r4, #0]
 801638a:	f000 000f 	and.w	r0, r0, #15
 801638e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016392:	6020      	str	r0, [r4, #0]
 8016394:	e7c3      	b.n	801631e <__hexnan+0x7a>
 8016396:	2508      	movs	r5, #8
 8016398:	e7c1      	b.n	801631e <__hexnan+0x7a>
 801639a:	9b01      	ldr	r3, [sp, #4]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d0df      	beq.n	8016360 <__hexnan+0xbc>
 80163a0:	f04f 32ff 	mov.w	r2, #4294967295
 80163a4:	f1c3 0320 	rsb	r3, r3, #32
 80163a8:	fa22 f303 	lsr.w	r3, r2, r3
 80163ac:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80163b0:	401a      	ands	r2, r3
 80163b2:	f847 2c04 	str.w	r2, [r7, #-4]
 80163b6:	e7d3      	b.n	8016360 <__hexnan+0xbc>
 80163b8:	3e04      	subs	r6, #4
 80163ba:	e7d1      	b.n	8016360 <__hexnan+0xbc>
 80163bc:	2004      	movs	r0, #4
 80163be:	b007      	add	sp, #28
 80163c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080163c4 <__locale_ctype_ptr_l>:
 80163c4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80163c8:	4770      	bx	lr
	...

080163cc <__locale_ctype_ptr>:
 80163cc:	4b04      	ldr	r3, [pc, #16]	; (80163e0 <__locale_ctype_ptr+0x14>)
 80163ce:	4a05      	ldr	r2, [pc, #20]	; (80163e4 <__locale_ctype_ptr+0x18>)
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	6a1b      	ldr	r3, [r3, #32]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	bf08      	it	eq
 80163d8:	4613      	moveq	r3, r2
 80163da:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80163de:	4770      	bx	lr
 80163e0:	2000000c 	.word	0x2000000c
 80163e4:	20000070 	.word	0x20000070

080163e8 <__localeconv_l>:
 80163e8:	30f0      	adds	r0, #240	; 0xf0
 80163ea:	4770      	bx	lr

080163ec <_localeconv_r>:
 80163ec:	4b04      	ldr	r3, [pc, #16]	; (8016400 <_localeconv_r+0x14>)
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	6a18      	ldr	r0, [r3, #32]
 80163f2:	4b04      	ldr	r3, [pc, #16]	; (8016404 <_localeconv_r+0x18>)
 80163f4:	2800      	cmp	r0, #0
 80163f6:	bf08      	it	eq
 80163f8:	4618      	moveq	r0, r3
 80163fa:	30f0      	adds	r0, #240	; 0xf0
 80163fc:	4770      	bx	lr
 80163fe:	bf00      	nop
 8016400:	2000000c 	.word	0x2000000c
 8016404:	20000070 	.word	0x20000070

08016408 <malloc>:
 8016408:	4b02      	ldr	r3, [pc, #8]	; (8016414 <malloc+0xc>)
 801640a:	4601      	mov	r1, r0
 801640c:	6818      	ldr	r0, [r3, #0]
 801640e:	f000 bc71 	b.w	8016cf4 <_malloc_r>
 8016412:	bf00      	nop
 8016414:	2000000c 	.word	0x2000000c

08016418 <__ascii_mbtowc>:
 8016418:	b082      	sub	sp, #8
 801641a:	b901      	cbnz	r1, 801641e <__ascii_mbtowc+0x6>
 801641c:	a901      	add	r1, sp, #4
 801641e:	b142      	cbz	r2, 8016432 <__ascii_mbtowc+0x1a>
 8016420:	b14b      	cbz	r3, 8016436 <__ascii_mbtowc+0x1e>
 8016422:	7813      	ldrb	r3, [r2, #0]
 8016424:	600b      	str	r3, [r1, #0]
 8016426:	7812      	ldrb	r2, [r2, #0]
 8016428:	1c10      	adds	r0, r2, #0
 801642a:	bf18      	it	ne
 801642c:	2001      	movne	r0, #1
 801642e:	b002      	add	sp, #8
 8016430:	4770      	bx	lr
 8016432:	4610      	mov	r0, r2
 8016434:	e7fb      	b.n	801642e <__ascii_mbtowc+0x16>
 8016436:	f06f 0001 	mvn.w	r0, #1
 801643a:	e7f8      	b.n	801642e <__ascii_mbtowc+0x16>

0801643c <_Balloc>:
 801643c:	b570      	push	{r4, r5, r6, lr}
 801643e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016440:	4604      	mov	r4, r0
 8016442:	460e      	mov	r6, r1
 8016444:	b93d      	cbnz	r5, 8016456 <_Balloc+0x1a>
 8016446:	2010      	movs	r0, #16
 8016448:	f7ff ffde 	bl	8016408 <malloc>
 801644c:	6260      	str	r0, [r4, #36]	; 0x24
 801644e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016452:	6005      	str	r5, [r0, #0]
 8016454:	60c5      	str	r5, [r0, #12]
 8016456:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016458:	68eb      	ldr	r3, [r5, #12]
 801645a:	b183      	cbz	r3, 801647e <_Balloc+0x42>
 801645c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801645e:	68db      	ldr	r3, [r3, #12]
 8016460:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016464:	b9b8      	cbnz	r0, 8016496 <_Balloc+0x5a>
 8016466:	2101      	movs	r1, #1
 8016468:	fa01 f506 	lsl.w	r5, r1, r6
 801646c:	1d6a      	adds	r2, r5, #5
 801646e:	0092      	lsls	r2, r2, #2
 8016470:	4620      	mov	r0, r4
 8016472:	f000 fbe2 	bl	8016c3a <_calloc_r>
 8016476:	b160      	cbz	r0, 8016492 <_Balloc+0x56>
 8016478:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801647c:	e00e      	b.n	801649c <_Balloc+0x60>
 801647e:	2221      	movs	r2, #33	; 0x21
 8016480:	2104      	movs	r1, #4
 8016482:	4620      	mov	r0, r4
 8016484:	f000 fbd9 	bl	8016c3a <_calloc_r>
 8016488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801648a:	60e8      	str	r0, [r5, #12]
 801648c:	68db      	ldr	r3, [r3, #12]
 801648e:	2b00      	cmp	r3, #0
 8016490:	d1e4      	bne.n	801645c <_Balloc+0x20>
 8016492:	2000      	movs	r0, #0
 8016494:	bd70      	pop	{r4, r5, r6, pc}
 8016496:	6802      	ldr	r2, [r0, #0]
 8016498:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801649c:	2300      	movs	r3, #0
 801649e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80164a2:	e7f7      	b.n	8016494 <_Balloc+0x58>

080164a4 <_Bfree>:
 80164a4:	b570      	push	{r4, r5, r6, lr}
 80164a6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80164a8:	4606      	mov	r6, r0
 80164aa:	460d      	mov	r5, r1
 80164ac:	b93c      	cbnz	r4, 80164be <_Bfree+0x1a>
 80164ae:	2010      	movs	r0, #16
 80164b0:	f7ff ffaa 	bl	8016408 <malloc>
 80164b4:	6270      	str	r0, [r6, #36]	; 0x24
 80164b6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80164ba:	6004      	str	r4, [r0, #0]
 80164bc:	60c4      	str	r4, [r0, #12]
 80164be:	b13d      	cbz	r5, 80164d0 <_Bfree+0x2c>
 80164c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80164c2:	686a      	ldr	r2, [r5, #4]
 80164c4:	68db      	ldr	r3, [r3, #12]
 80164c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80164ca:	6029      	str	r1, [r5, #0]
 80164cc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80164d0:	bd70      	pop	{r4, r5, r6, pc}

080164d2 <__multadd>:
 80164d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164d6:	690d      	ldr	r5, [r1, #16]
 80164d8:	461f      	mov	r7, r3
 80164da:	4606      	mov	r6, r0
 80164dc:	460c      	mov	r4, r1
 80164de:	f101 0c14 	add.w	ip, r1, #20
 80164e2:	2300      	movs	r3, #0
 80164e4:	f8dc 0000 	ldr.w	r0, [ip]
 80164e8:	b281      	uxth	r1, r0
 80164ea:	fb02 7101 	mla	r1, r2, r1, r7
 80164ee:	0c0f      	lsrs	r7, r1, #16
 80164f0:	0c00      	lsrs	r0, r0, #16
 80164f2:	fb02 7000 	mla	r0, r2, r0, r7
 80164f6:	b289      	uxth	r1, r1
 80164f8:	3301      	adds	r3, #1
 80164fa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80164fe:	429d      	cmp	r5, r3
 8016500:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8016504:	f84c 1b04 	str.w	r1, [ip], #4
 8016508:	dcec      	bgt.n	80164e4 <__multadd+0x12>
 801650a:	b1d7      	cbz	r7, 8016542 <__multadd+0x70>
 801650c:	68a3      	ldr	r3, [r4, #8]
 801650e:	42ab      	cmp	r3, r5
 8016510:	dc12      	bgt.n	8016538 <__multadd+0x66>
 8016512:	6861      	ldr	r1, [r4, #4]
 8016514:	4630      	mov	r0, r6
 8016516:	3101      	adds	r1, #1
 8016518:	f7ff ff90 	bl	801643c <_Balloc>
 801651c:	6922      	ldr	r2, [r4, #16]
 801651e:	3202      	adds	r2, #2
 8016520:	f104 010c 	add.w	r1, r4, #12
 8016524:	4680      	mov	r8, r0
 8016526:	0092      	lsls	r2, r2, #2
 8016528:	300c      	adds	r0, #12
 801652a:	f7fd f831 	bl	8013590 <memcpy>
 801652e:	4621      	mov	r1, r4
 8016530:	4630      	mov	r0, r6
 8016532:	f7ff ffb7 	bl	80164a4 <_Bfree>
 8016536:	4644      	mov	r4, r8
 8016538:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801653c:	3501      	adds	r5, #1
 801653e:	615f      	str	r7, [r3, #20]
 8016540:	6125      	str	r5, [r4, #16]
 8016542:	4620      	mov	r0, r4
 8016544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016548 <__s2b>:
 8016548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801654c:	460c      	mov	r4, r1
 801654e:	4615      	mov	r5, r2
 8016550:	461f      	mov	r7, r3
 8016552:	2209      	movs	r2, #9
 8016554:	3308      	adds	r3, #8
 8016556:	4606      	mov	r6, r0
 8016558:	fb93 f3f2 	sdiv	r3, r3, r2
 801655c:	2100      	movs	r1, #0
 801655e:	2201      	movs	r2, #1
 8016560:	429a      	cmp	r2, r3
 8016562:	db20      	blt.n	80165a6 <__s2b+0x5e>
 8016564:	4630      	mov	r0, r6
 8016566:	f7ff ff69 	bl	801643c <_Balloc>
 801656a:	9b08      	ldr	r3, [sp, #32]
 801656c:	6143      	str	r3, [r0, #20]
 801656e:	2d09      	cmp	r5, #9
 8016570:	f04f 0301 	mov.w	r3, #1
 8016574:	6103      	str	r3, [r0, #16]
 8016576:	dd19      	ble.n	80165ac <__s2b+0x64>
 8016578:	f104 0809 	add.w	r8, r4, #9
 801657c:	46c1      	mov	r9, r8
 801657e:	442c      	add	r4, r5
 8016580:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016584:	4601      	mov	r1, r0
 8016586:	3b30      	subs	r3, #48	; 0x30
 8016588:	220a      	movs	r2, #10
 801658a:	4630      	mov	r0, r6
 801658c:	f7ff ffa1 	bl	80164d2 <__multadd>
 8016590:	45a1      	cmp	r9, r4
 8016592:	d1f5      	bne.n	8016580 <__s2b+0x38>
 8016594:	eb08 0405 	add.w	r4, r8, r5
 8016598:	3c08      	subs	r4, #8
 801659a:	1b2d      	subs	r5, r5, r4
 801659c:	1963      	adds	r3, r4, r5
 801659e:	42bb      	cmp	r3, r7
 80165a0:	db07      	blt.n	80165b2 <__s2b+0x6a>
 80165a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165a6:	0052      	lsls	r2, r2, #1
 80165a8:	3101      	adds	r1, #1
 80165aa:	e7d9      	b.n	8016560 <__s2b+0x18>
 80165ac:	340a      	adds	r4, #10
 80165ae:	2509      	movs	r5, #9
 80165b0:	e7f3      	b.n	801659a <__s2b+0x52>
 80165b2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80165b6:	4601      	mov	r1, r0
 80165b8:	3b30      	subs	r3, #48	; 0x30
 80165ba:	220a      	movs	r2, #10
 80165bc:	4630      	mov	r0, r6
 80165be:	f7ff ff88 	bl	80164d2 <__multadd>
 80165c2:	e7eb      	b.n	801659c <__s2b+0x54>

080165c4 <__hi0bits>:
 80165c4:	0c02      	lsrs	r2, r0, #16
 80165c6:	0412      	lsls	r2, r2, #16
 80165c8:	4603      	mov	r3, r0
 80165ca:	b9b2      	cbnz	r2, 80165fa <__hi0bits+0x36>
 80165cc:	0403      	lsls	r3, r0, #16
 80165ce:	2010      	movs	r0, #16
 80165d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80165d4:	bf04      	itt	eq
 80165d6:	021b      	lsleq	r3, r3, #8
 80165d8:	3008      	addeq	r0, #8
 80165da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80165de:	bf04      	itt	eq
 80165e0:	011b      	lsleq	r3, r3, #4
 80165e2:	3004      	addeq	r0, #4
 80165e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80165e8:	bf04      	itt	eq
 80165ea:	009b      	lsleq	r3, r3, #2
 80165ec:	3002      	addeq	r0, #2
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	db06      	blt.n	8016600 <__hi0bits+0x3c>
 80165f2:	005b      	lsls	r3, r3, #1
 80165f4:	d503      	bpl.n	80165fe <__hi0bits+0x3a>
 80165f6:	3001      	adds	r0, #1
 80165f8:	4770      	bx	lr
 80165fa:	2000      	movs	r0, #0
 80165fc:	e7e8      	b.n	80165d0 <__hi0bits+0xc>
 80165fe:	2020      	movs	r0, #32
 8016600:	4770      	bx	lr

08016602 <__lo0bits>:
 8016602:	6803      	ldr	r3, [r0, #0]
 8016604:	f013 0207 	ands.w	r2, r3, #7
 8016608:	4601      	mov	r1, r0
 801660a:	d00b      	beq.n	8016624 <__lo0bits+0x22>
 801660c:	07da      	lsls	r2, r3, #31
 801660e:	d423      	bmi.n	8016658 <__lo0bits+0x56>
 8016610:	0798      	lsls	r0, r3, #30
 8016612:	bf49      	itett	mi
 8016614:	085b      	lsrmi	r3, r3, #1
 8016616:	089b      	lsrpl	r3, r3, #2
 8016618:	2001      	movmi	r0, #1
 801661a:	600b      	strmi	r3, [r1, #0]
 801661c:	bf5c      	itt	pl
 801661e:	600b      	strpl	r3, [r1, #0]
 8016620:	2002      	movpl	r0, #2
 8016622:	4770      	bx	lr
 8016624:	b298      	uxth	r0, r3
 8016626:	b9a8      	cbnz	r0, 8016654 <__lo0bits+0x52>
 8016628:	0c1b      	lsrs	r3, r3, #16
 801662a:	2010      	movs	r0, #16
 801662c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016630:	bf04      	itt	eq
 8016632:	0a1b      	lsreq	r3, r3, #8
 8016634:	3008      	addeq	r0, #8
 8016636:	071a      	lsls	r2, r3, #28
 8016638:	bf04      	itt	eq
 801663a:	091b      	lsreq	r3, r3, #4
 801663c:	3004      	addeq	r0, #4
 801663e:	079a      	lsls	r2, r3, #30
 8016640:	bf04      	itt	eq
 8016642:	089b      	lsreq	r3, r3, #2
 8016644:	3002      	addeq	r0, #2
 8016646:	07da      	lsls	r2, r3, #31
 8016648:	d402      	bmi.n	8016650 <__lo0bits+0x4e>
 801664a:	085b      	lsrs	r3, r3, #1
 801664c:	d006      	beq.n	801665c <__lo0bits+0x5a>
 801664e:	3001      	adds	r0, #1
 8016650:	600b      	str	r3, [r1, #0]
 8016652:	4770      	bx	lr
 8016654:	4610      	mov	r0, r2
 8016656:	e7e9      	b.n	801662c <__lo0bits+0x2a>
 8016658:	2000      	movs	r0, #0
 801665a:	4770      	bx	lr
 801665c:	2020      	movs	r0, #32
 801665e:	4770      	bx	lr

08016660 <__i2b>:
 8016660:	b510      	push	{r4, lr}
 8016662:	460c      	mov	r4, r1
 8016664:	2101      	movs	r1, #1
 8016666:	f7ff fee9 	bl	801643c <_Balloc>
 801666a:	2201      	movs	r2, #1
 801666c:	6144      	str	r4, [r0, #20]
 801666e:	6102      	str	r2, [r0, #16]
 8016670:	bd10      	pop	{r4, pc}

08016672 <__multiply>:
 8016672:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016676:	4614      	mov	r4, r2
 8016678:	690a      	ldr	r2, [r1, #16]
 801667a:	6923      	ldr	r3, [r4, #16]
 801667c:	429a      	cmp	r2, r3
 801667e:	bfb8      	it	lt
 8016680:	460b      	movlt	r3, r1
 8016682:	4688      	mov	r8, r1
 8016684:	bfbc      	itt	lt
 8016686:	46a0      	movlt	r8, r4
 8016688:	461c      	movlt	r4, r3
 801668a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801668e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016692:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016696:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801669a:	eb07 0609 	add.w	r6, r7, r9
 801669e:	42b3      	cmp	r3, r6
 80166a0:	bfb8      	it	lt
 80166a2:	3101      	addlt	r1, #1
 80166a4:	f7ff feca 	bl	801643c <_Balloc>
 80166a8:	f100 0514 	add.w	r5, r0, #20
 80166ac:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80166b0:	462b      	mov	r3, r5
 80166b2:	2200      	movs	r2, #0
 80166b4:	4573      	cmp	r3, lr
 80166b6:	d316      	bcc.n	80166e6 <__multiply+0x74>
 80166b8:	f104 0214 	add.w	r2, r4, #20
 80166bc:	f108 0114 	add.w	r1, r8, #20
 80166c0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80166c4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80166c8:	9300      	str	r3, [sp, #0]
 80166ca:	9b00      	ldr	r3, [sp, #0]
 80166cc:	9201      	str	r2, [sp, #4]
 80166ce:	4293      	cmp	r3, r2
 80166d0:	d80c      	bhi.n	80166ec <__multiply+0x7a>
 80166d2:	2e00      	cmp	r6, #0
 80166d4:	dd03      	ble.n	80166de <__multiply+0x6c>
 80166d6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d05d      	beq.n	801679a <__multiply+0x128>
 80166de:	6106      	str	r6, [r0, #16]
 80166e0:	b003      	add	sp, #12
 80166e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166e6:	f843 2b04 	str.w	r2, [r3], #4
 80166ea:	e7e3      	b.n	80166b4 <__multiply+0x42>
 80166ec:	f8b2 b000 	ldrh.w	fp, [r2]
 80166f0:	f1bb 0f00 	cmp.w	fp, #0
 80166f4:	d023      	beq.n	801673e <__multiply+0xcc>
 80166f6:	4689      	mov	r9, r1
 80166f8:	46ac      	mov	ip, r5
 80166fa:	f04f 0800 	mov.w	r8, #0
 80166fe:	f859 4b04 	ldr.w	r4, [r9], #4
 8016702:	f8dc a000 	ldr.w	sl, [ip]
 8016706:	b2a3      	uxth	r3, r4
 8016708:	fa1f fa8a 	uxth.w	sl, sl
 801670c:	fb0b a303 	mla	r3, fp, r3, sl
 8016710:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016714:	f8dc 4000 	ldr.w	r4, [ip]
 8016718:	4443      	add	r3, r8
 801671a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801671e:	fb0b 840a 	mla	r4, fp, sl, r8
 8016722:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016726:	46e2      	mov	sl, ip
 8016728:	b29b      	uxth	r3, r3
 801672a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801672e:	454f      	cmp	r7, r9
 8016730:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016734:	f84a 3b04 	str.w	r3, [sl], #4
 8016738:	d82b      	bhi.n	8016792 <__multiply+0x120>
 801673a:	f8cc 8004 	str.w	r8, [ip, #4]
 801673e:	9b01      	ldr	r3, [sp, #4]
 8016740:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8016744:	3204      	adds	r2, #4
 8016746:	f1ba 0f00 	cmp.w	sl, #0
 801674a:	d020      	beq.n	801678e <__multiply+0x11c>
 801674c:	682b      	ldr	r3, [r5, #0]
 801674e:	4689      	mov	r9, r1
 8016750:	46a8      	mov	r8, r5
 8016752:	f04f 0b00 	mov.w	fp, #0
 8016756:	f8b9 c000 	ldrh.w	ip, [r9]
 801675a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801675e:	fb0a 440c 	mla	r4, sl, ip, r4
 8016762:	445c      	add	r4, fp
 8016764:	46c4      	mov	ip, r8
 8016766:	b29b      	uxth	r3, r3
 8016768:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801676c:	f84c 3b04 	str.w	r3, [ip], #4
 8016770:	f859 3b04 	ldr.w	r3, [r9], #4
 8016774:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8016778:	0c1b      	lsrs	r3, r3, #16
 801677a:	fb0a b303 	mla	r3, sl, r3, fp
 801677e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8016782:	454f      	cmp	r7, r9
 8016784:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016788:	d805      	bhi.n	8016796 <__multiply+0x124>
 801678a:	f8c8 3004 	str.w	r3, [r8, #4]
 801678e:	3504      	adds	r5, #4
 8016790:	e79b      	b.n	80166ca <__multiply+0x58>
 8016792:	46d4      	mov	ip, sl
 8016794:	e7b3      	b.n	80166fe <__multiply+0x8c>
 8016796:	46e0      	mov	r8, ip
 8016798:	e7dd      	b.n	8016756 <__multiply+0xe4>
 801679a:	3e01      	subs	r6, #1
 801679c:	e799      	b.n	80166d2 <__multiply+0x60>
	...

080167a0 <__pow5mult>:
 80167a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167a4:	4615      	mov	r5, r2
 80167a6:	f012 0203 	ands.w	r2, r2, #3
 80167aa:	4606      	mov	r6, r0
 80167ac:	460f      	mov	r7, r1
 80167ae:	d007      	beq.n	80167c0 <__pow5mult+0x20>
 80167b0:	3a01      	subs	r2, #1
 80167b2:	4c21      	ldr	r4, [pc, #132]	; (8016838 <__pow5mult+0x98>)
 80167b4:	2300      	movs	r3, #0
 80167b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80167ba:	f7ff fe8a 	bl	80164d2 <__multadd>
 80167be:	4607      	mov	r7, r0
 80167c0:	10ad      	asrs	r5, r5, #2
 80167c2:	d035      	beq.n	8016830 <__pow5mult+0x90>
 80167c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80167c6:	b93c      	cbnz	r4, 80167d8 <__pow5mult+0x38>
 80167c8:	2010      	movs	r0, #16
 80167ca:	f7ff fe1d 	bl	8016408 <malloc>
 80167ce:	6270      	str	r0, [r6, #36]	; 0x24
 80167d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80167d4:	6004      	str	r4, [r0, #0]
 80167d6:	60c4      	str	r4, [r0, #12]
 80167d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80167dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80167e0:	b94c      	cbnz	r4, 80167f6 <__pow5mult+0x56>
 80167e2:	f240 2171 	movw	r1, #625	; 0x271
 80167e6:	4630      	mov	r0, r6
 80167e8:	f7ff ff3a 	bl	8016660 <__i2b>
 80167ec:	2300      	movs	r3, #0
 80167ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80167f2:	4604      	mov	r4, r0
 80167f4:	6003      	str	r3, [r0, #0]
 80167f6:	f04f 0800 	mov.w	r8, #0
 80167fa:	07eb      	lsls	r3, r5, #31
 80167fc:	d50a      	bpl.n	8016814 <__pow5mult+0x74>
 80167fe:	4639      	mov	r1, r7
 8016800:	4622      	mov	r2, r4
 8016802:	4630      	mov	r0, r6
 8016804:	f7ff ff35 	bl	8016672 <__multiply>
 8016808:	4639      	mov	r1, r7
 801680a:	4681      	mov	r9, r0
 801680c:	4630      	mov	r0, r6
 801680e:	f7ff fe49 	bl	80164a4 <_Bfree>
 8016812:	464f      	mov	r7, r9
 8016814:	106d      	asrs	r5, r5, #1
 8016816:	d00b      	beq.n	8016830 <__pow5mult+0x90>
 8016818:	6820      	ldr	r0, [r4, #0]
 801681a:	b938      	cbnz	r0, 801682c <__pow5mult+0x8c>
 801681c:	4622      	mov	r2, r4
 801681e:	4621      	mov	r1, r4
 8016820:	4630      	mov	r0, r6
 8016822:	f7ff ff26 	bl	8016672 <__multiply>
 8016826:	6020      	str	r0, [r4, #0]
 8016828:	f8c0 8000 	str.w	r8, [r0]
 801682c:	4604      	mov	r4, r0
 801682e:	e7e4      	b.n	80167fa <__pow5mult+0x5a>
 8016830:	4638      	mov	r0, r7
 8016832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016836:	bf00      	nop
 8016838:	08018310 	.word	0x08018310

0801683c <__lshift>:
 801683c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016840:	460c      	mov	r4, r1
 8016842:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016846:	6923      	ldr	r3, [r4, #16]
 8016848:	6849      	ldr	r1, [r1, #4]
 801684a:	eb0a 0903 	add.w	r9, sl, r3
 801684e:	68a3      	ldr	r3, [r4, #8]
 8016850:	4607      	mov	r7, r0
 8016852:	4616      	mov	r6, r2
 8016854:	f109 0501 	add.w	r5, r9, #1
 8016858:	42ab      	cmp	r3, r5
 801685a:	db32      	blt.n	80168c2 <__lshift+0x86>
 801685c:	4638      	mov	r0, r7
 801685e:	f7ff fded 	bl	801643c <_Balloc>
 8016862:	2300      	movs	r3, #0
 8016864:	4680      	mov	r8, r0
 8016866:	f100 0114 	add.w	r1, r0, #20
 801686a:	461a      	mov	r2, r3
 801686c:	4553      	cmp	r3, sl
 801686e:	db2b      	blt.n	80168c8 <__lshift+0x8c>
 8016870:	6920      	ldr	r0, [r4, #16]
 8016872:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016876:	f104 0314 	add.w	r3, r4, #20
 801687a:	f016 021f 	ands.w	r2, r6, #31
 801687e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016882:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016886:	d025      	beq.n	80168d4 <__lshift+0x98>
 8016888:	f1c2 0e20 	rsb	lr, r2, #32
 801688c:	2000      	movs	r0, #0
 801688e:	681e      	ldr	r6, [r3, #0]
 8016890:	468a      	mov	sl, r1
 8016892:	4096      	lsls	r6, r2
 8016894:	4330      	orrs	r0, r6
 8016896:	f84a 0b04 	str.w	r0, [sl], #4
 801689a:	f853 0b04 	ldr.w	r0, [r3], #4
 801689e:	459c      	cmp	ip, r3
 80168a0:	fa20 f00e 	lsr.w	r0, r0, lr
 80168a4:	d814      	bhi.n	80168d0 <__lshift+0x94>
 80168a6:	6048      	str	r0, [r1, #4]
 80168a8:	b108      	cbz	r0, 80168ae <__lshift+0x72>
 80168aa:	f109 0502 	add.w	r5, r9, #2
 80168ae:	3d01      	subs	r5, #1
 80168b0:	4638      	mov	r0, r7
 80168b2:	f8c8 5010 	str.w	r5, [r8, #16]
 80168b6:	4621      	mov	r1, r4
 80168b8:	f7ff fdf4 	bl	80164a4 <_Bfree>
 80168bc:	4640      	mov	r0, r8
 80168be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168c2:	3101      	adds	r1, #1
 80168c4:	005b      	lsls	r3, r3, #1
 80168c6:	e7c7      	b.n	8016858 <__lshift+0x1c>
 80168c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80168cc:	3301      	adds	r3, #1
 80168ce:	e7cd      	b.n	801686c <__lshift+0x30>
 80168d0:	4651      	mov	r1, sl
 80168d2:	e7dc      	b.n	801688e <__lshift+0x52>
 80168d4:	3904      	subs	r1, #4
 80168d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80168da:	f841 2f04 	str.w	r2, [r1, #4]!
 80168de:	459c      	cmp	ip, r3
 80168e0:	d8f9      	bhi.n	80168d6 <__lshift+0x9a>
 80168e2:	e7e4      	b.n	80168ae <__lshift+0x72>

080168e4 <__mcmp>:
 80168e4:	6903      	ldr	r3, [r0, #16]
 80168e6:	690a      	ldr	r2, [r1, #16]
 80168e8:	1a9b      	subs	r3, r3, r2
 80168ea:	b530      	push	{r4, r5, lr}
 80168ec:	d10c      	bne.n	8016908 <__mcmp+0x24>
 80168ee:	0092      	lsls	r2, r2, #2
 80168f0:	3014      	adds	r0, #20
 80168f2:	3114      	adds	r1, #20
 80168f4:	1884      	adds	r4, r0, r2
 80168f6:	4411      	add	r1, r2
 80168f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80168fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016900:	4295      	cmp	r5, r2
 8016902:	d003      	beq.n	801690c <__mcmp+0x28>
 8016904:	d305      	bcc.n	8016912 <__mcmp+0x2e>
 8016906:	2301      	movs	r3, #1
 8016908:	4618      	mov	r0, r3
 801690a:	bd30      	pop	{r4, r5, pc}
 801690c:	42a0      	cmp	r0, r4
 801690e:	d3f3      	bcc.n	80168f8 <__mcmp+0x14>
 8016910:	e7fa      	b.n	8016908 <__mcmp+0x24>
 8016912:	f04f 33ff 	mov.w	r3, #4294967295
 8016916:	e7f7      	b.n	8016908 <__mcmp+0x24>

08016918 <__mdiff>:
 8016918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801691c:	460d      	mov	r5, r1
 801691e:	4607      	mov	r7, r0
 8016920:	4611      	mov	r1, r2
 8016922:	4628      	mov	r0, r5
 8016924:	4614      	mov	r4, r2
 8016926:	f7ff ffdd 	bl	80168e4 <__mcmp>
 801692a:	1e06      	subs	r6, r0, #0
 801692c:	d108      	bne.n	8016940 <__mdiff+0x28>
 801692e:	4631      	mov	r1, r6
 8016930:	4638      	mov	r0, r7
 8016932:	f7ff fd83 	bl	801643c <_Balloc>
 8016936:	2301      	movs	r3, #1
 8016938:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801693c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016940:	bfa4      	itt	ge
 8016942:	4623      	movge	r3, r4
 8016944:	462c      	movge	r4, r5
 8016946:	4638      	mov	r0, r7
 8016948:	6861      	ldr	r1, [r4, #4]
 801694a:	bfa6      	itte	ge
 801694c:	461d      	movge	r5, r3
 801694e:	2600      	movge	r6, #0
 8016950:	2601      	movlt	r6, #1
 8016952:	f7ff fd73 	bl	801643c <_Balloc>
 8016956:	692b      	ldr	r3, [r5, #16]
 8016958:	60c6      	str	r6, [r0, #12]
 801695a:	6926      	ldr	r6, [r4, #16]
 801695c:	f105 0914 	add.w	r9, r5, #20
 8016960:	f104 0214 	add.w	r2, r4, #20
 8016964:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016968:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801696c:	f100 0514 	add.w	r5, r0, #20
 8016970:	f04f 0e00 	mov.w	lr, #0
 8016974:	f852 ab04 	ldr.w	sl, [r2], #4
 8016978:	f859 4b04 	ldr.w	r4, [r9], #4
 801697c:	fa1e f18a 	uxtah	r1, lr, sl
 8016980:	b2a3      	uxth	r3, r4
 8016982:	1ac9      	subs	r1, r1, r3
 8016984:	0c23      	lsrs	r3, r4, #16
 8016986:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801698a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801698e:	b289      	uxth	r1, r1
 8016990:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016994:	45c8      	cmp	r8, r9
 8016996:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801699a:	4694      	mov	ip, r2
 801699c:	f845 3b04 	str.w	r3, [r5], #4
 80169a0:	d8e8      	bhi.n	8016974 <__mdiff+0x5c>
 80169a2:	45bc      	cmp	ip, r7
 80169a4:	d304      	bcc.n	80169b0 <__mdiff+0x98>
 80169a6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80169aa:	b183      	cbz	r3, 80169ce <__mdiff+0xb6>
 80169ac:	6106      	str	r6, [r0, #16]
 80169ae:	e7c5      	b.n	801693c <__mdiff+0x24>
 80169b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80169b4:	fa1e f381 	uxtah	r3, lr, r1
 80169b8:	141a      	asrs	r2, r3, #16
 80169ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80169be:	b29b      	uxth	r3, r3
 80169c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80169c4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80169c8:	f845 3b04 	str.w	r3, [r5], #4
 80169cc:	e7e9      	b.n	80169a2 <__mdiff+0x8a>
 80169ce:	3e01      	subs	r6, #1
 80169d0:	e7e9      	b.n	80169a6 <__mdiff+0x8e>
	...

080169d4 <__ulp>:
 80169d4:	4b12      	ldr	r3, [pc, #72]	; (8016a20 <__ulp+0x4c>)
 80169d6:	ee10 2a90 	vmov	r2, s1
 80169da:	401a      	ands	r2, r3
 80169dc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	dd04      	ble.n	80169ee <__ulp+0x1a>
 80169e4:	2000      	movs	r0, #0
 80169e6:	4619      	mov	r1, r3
 80169e8:	ec41 0b10 	vmov	d0, r0, r1
 80169ec:	4770      	bx	lr
 80169ee:	425b      	negs	r3, r3
 80169f0:	151b      	asrs	r3, r3, #20
 80169f2:	2b13      	cmp	r3, #19
 80169f4:	f04f 0000 	mov.w	r0, #0
 80169f8:	f04f 0100 	mov.w	r1, #0
 80169fc:	dc04      	bgt.n	8016a08 <__ulp+0x34>
 80169fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016a02:	fa42 f103 	asr.w	r1, r2, r3
 8016a06:	e7ef      	b.n	80169e8 <__ulp+0x14>
 8016a08:	3b14      	subs	r3, #20
 8016a0a:	2b1e      	cmp	r3, #30
 8016a0c:	f04f 0201 	mov.w	r2, #1
 8016a10:	bfda      	itte	le
 8016a12:	f1c3 031f 	rsble	r3, r3, #31
 8016a16:	fa02 f303 	lslle.w	r3, r2, r3
 8016a1a:	4613      	movgt	r3, r2
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	e7e3      	b.n	80169e8 <__ulp+0x14>
 8016a20:	7ff00000 	.word	0x7ff00000

08016a24 <__b2d>:
 8016a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a26:	6905      	ldr	r5, [r0, #16]
 8016a28:	f100 0714 	add.w	r7, r0, #20
 8016a2c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016a30:	1f2e      	subs	r6, r5, #4
 8016a32:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016a36:	4620      	mov	r0, r4
 8016a38:	f7ff fdc4 	bl	80165c4 <__hi0bits>
 8016a3c:	f1c0 0320 	rsb	r3, r0, #32
 8016a40:	280a      	cmp	r0, #10
 8016a42:	600b      	str	r3, [r1, #0]
 8016a44:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016abc <__b2d+0x98>
 8016a48:	dc14      	bgt.n	8016a74 <__b2d+0x50>
 8016a4a:	f1c0 0e0b 	rsb	lr, r0, #11
 8016a4e:	fa24 f10e 	lsr.w	r1, r4, lr
 8016a52:	42b7      	cmp	r7, r6
 8016a54:	ea41 030c 	orr.w	r3, r1, ip
 8016a58:	bf34      	ite	cc
 8016a5a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016a5e:	2100      	movcs	r1, #0
 8016a60:	3015      	adds	r0, #21
 8016a62:	fa04 f000 	lsl.w	r0, r4, r0
 8016a66:	fa21 f10e 	lsr.w	r1, r1, lr
 8016a6a:	ea40 0201 	orr.w	r2, r0, r1
 8016a6e:	ec43 2b10 	vmov	d0, r2, r3
 8016a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a74:	42b7      	cmp	r7, r6
 8016a76:	bf3a      	itte	cc
 8016a78:	f1a5 0608 	subcc.w	r6, r5, #8
 8016a7c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016a80:	2100      	movcs	r1, #0
 8016a82:	380b      	subs	r0, #11
 8016a84:	d015      	beq.n	8016ab2 <__b2d+0x8e>
 8016a86:	4084      	lsls	r4, r0
 8016a88:	f1c0 0520 	rsb	r5, r0, #32
 8016a8c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8016a90:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8016a94:	42be      	cmp	r6, r7
 8016a96:	fa21 fc05 	lsr.w	ip, r1, r5
 8016a9a:	ea44 030c 	orr.w	r3, r4, ip
 8016a9e:	bf8c      	ite	hi
 8016aa0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016aa4:	2400      	movls	r4, #0
 8016aa6:	fa01 f000 	lsl.w	r0, r1, r0
 8016aaa:	40ec      	lsrs	r4, r5
 8016aac:	ea40 0204 	orr.w	r2, r0, r4
 8016ab0:	e7dd      	b.n	8016a6e <__b2d+0x4a>
 8016ab2:	ea44 030c 	orr.w	r3, r4, ip
 8016ab6:	460a      	mov	r2, r1
 8016ab8:	e7d9      	b.n	8016a6e <__b2d+0x4a>
 8016aba:	bf00      	nop
 8016abc:	3ff00000 	.word	0x3ff00000

08016ac0 <__d2b>:
 8016ac0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016ac4:	460e      	mov	r6, r1
 8016ac6:	2101      	movs	r1, #1
 8016ac8:	ec59 8b10 	vmov	r8, r9, d0
 8016acc:	4615      	mov	r5, r2
 8016ace:	f7ff fcb5 	bl	801643c <_Balloc>
 8016ad2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016ad6:	4607      	mov	r7, r0
 8016ad8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016adc:	bb34      	cbnz	r4, 8016b2c <__d2b+0x6c>
 8016ade:	9301      	str	r3, [sp, #4]
 8016ae0:	f1b8 0300 	subs.w	r3, r8, #0
 8016ae4:	d027      	beq.n	8016b36 <__d2b+0x76>
 8016ae6:	a802      	add	r0, sp, #8
 8016ae8:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016aec:	f7ff fd89 	bl	8016602 <__lo0bits>
 8016af0:	9900      	ldr	r1, [sp, #0]
 8016af2:	b1f0      	cbz	r0, 8016b32 <__d2b+0x72>
 8016af4:	9a01      	ldr	r2, [sp, #4]
 8016af6:	f1c0 0320 	rsb	r3, r0, #32
 8016afa:	fa02 f303 	lsl.w	r3, r2, r3
 8016afe:	430b      	orrs	r3, r1
 8016b00:	40c2      	lsrs	r2, r0
 8016b02:	617b      	str	r3, [r7, #20]
 8016b04:	9201      	str	r2, [sp, #4]
 8016b06:	9b01      	ldr	r3, [sp, #4]
 8016b08:	61bb      	str	r3, [r7, #24]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	bf14      	ite	ne
 8016b0e:	2102      	movne	r1, #2
 8016b10:	2101      	moveq	r1, #1
 8016b12:	6139      	str	r1, [r7, #16]
 8016b14:	b1c4      	cbz	r4, 8016b48 <__d2b+0x88>
 8016b16:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016b1a:	4404      	add	r4, r0
 8016b1c:	6034      	str	r4, [r6, #0]
 8016b1e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016b22:	6028      	str	r0, [r5, #0]
 8016b24:	4638      	mov	r0, r7
 8016b26:	b003      	add	sp, #12
 8016b28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016b30:	e7d5      	b.n	8016ade <__d2b+0x1e>
 8016b32:	6179      	str	r1, [r7, #20]
 8016b34:	e7e7      	b.n	8016b06 <__d2b+0x46>
 8016b36:	a801      	add	r0, sp, #4
 8016b38:	f7ff fd63 	bl	8016602 <__lo0bits>
 8016b3c:	9b01      	ldr	r3, [sp, #4]
 8016b3e:	617b      	str	r3, [r7, #20]
 8016b40:	2101      	movs	r1, #1
 8016b42:	6139      	str	r1, [r7, #16]
 8016b44:	3020      	adds	r0, #32
 8016b46:	e7e5      	b.n	8016b14 <__d2b+0x54>
 8016b48:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016b4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016b50:	6030      	str	r0, [r6, #0]
 8016b52:	6918      	ldr	r0, [r3, #16]
 8016b54:	f7ff fd36 	bl	80165c4 <__hi0bits>
 8016b58:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016b5c:	e7e1      	b.n	8016b22 <__d2b+0x62>

08016b5e <__ratio>:
 8016b5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b62:	4688      	mov	r8, r1
 8016b64:	4669      	mov	r1, sp
 8016b66:	4681      	mov	r9, r0
 8016b68:	f7ff ff5c 	bl	8016a24 <__b2d>
 8016b6c:	a901      	add	r1, sp, #4
 8016b6e:	4640      	mov	r0, r8
 8016b70:	ec57 6b10 	vmov	r6, r7, d0
 8016b74:	f7ff ff56 	bl	8016a24 <__b2d>
 8016b78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016b7c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016b80:	eba3 0c02 	sub.w	ip, r3, r2
 8016b84:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016b88:	1a9b      	subs	r3, r3, r2
 8016b8a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016b8e:	ec5b ab10 	vmov	sl, fp, d0
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	bfce      	itee	gt
 8016b96:	463a      	movgt	r2, r7
 8016b98:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016b9c:	465a      	movle	r2, fp
 8016b9e:	4659      	mov	r1, fp
 8016ba0:	463d      	mov	r5, r7
 8016ba2:	bfd4      	ite	le
 8016ba4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8016ba8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016bac:	4630      	mov	r0, r6
 8016bae:	ee10 2a10 	vmov	r2, s0
 8016bb2:	460b      	mov	r3, r1
 8016bb4:	4629      	mov	r1, r5
 8016bb6:	f7e9 fe61 	bl	800087c <__aeabi_ddiv>
 8016bba:	ec41 0b10 	vmov	d0, r0, r1
 8016bbe:	b003      	add	sp, #12
 8016bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016bc4 <__copybits>:
 8016bc4:	3901      	subs	r1, #1
 8016bc6:	b510      	push	{r4, lr}
 8016bc8:	1149      	asrs	r1, r1, #5
 8016bca:	6914      	ldr	r4, [r2, #16]
 8016bcc:	3101      	adds	r1, #1
 8016bce:	f102 0314 	add.w	r3, r2, #20
 8016bd2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016bd6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016bda:	42a3      	cmp	r3, r4
 8016bdc:	4602      	mov	r2, r0
 8016bde:	d303      	bcc.n	8016be8 <__copybits+0x24>
 8016be0:	2300      	movs	r3, #0
 8016be2:	428a      	cmp	r2, r1
 8016be4:	d305      	bcc.n	8016bf2 <__copybits+0x2e>
 8016be6:	bd10      	pop	{r4, pc}
 8016be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8016bec:	f840 2b04 	str.w	r2, [r0], #4
 8016bf0:	e7f3      	b.n	8016bda <__copybits+0x16>
 8016bf2:	f842 3b04 	str.w	r3, [r2], #4
 8016bf6:	e7f4      	b.n	8016be2 <__copybits+0x1e>

08016bf8 <__any_on>:
 8016bf8:	f100 0214 	add.w	r2, r0, #20
 8016bfc:	6900      	ldr	r0, [r0, #16]
 8016bfe:	114b      	asrs	r3, r1, #5
 8016c00:	4298      	cmp	r0, r3
 8016c02:	b510      	push	{r4, lr}
 8016c04:	db11      	blt.n	8016c2a <__any_on+0x32>
 8016c06:	dd0a      	ble.n	8016c1e <__any_on+0x26>
 8016c08:	f011 011f 	ands.w	r1, r1, #31
 8016c0c:	d007      	beq.n	8016c1e <__any_on+0x26>
 8016c0e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016c12:	fa24 f001 	lsr.w	r0, r4, r1
 8016c16:	fa00 f101 	lsl.w	r1, r0, r1
 8016c1a:	428c      	cmp	r4, r1
 8016c1c:	d10b      	bne.n	8016c36 <__any_on+0x3e>
 8016c1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016c22:	4293      	cmp	r3, r2
 8016c24:	d803      	bhi.n	8016c2e <__any_on+0x36>
 8016c26:	2000      	movs	r0, #0
 8016c28:	bd10      	pop	{r4, pc}
 8016c2a:	4603      	mov	r3, r0
 8016c2c:	e7f7      	b.n	8016c1e <__any_on+0x26>
 8016c2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016c32:	2900      	cmp	r1, #0
 8016c34:	d0f5      	beq.n	8016c22 <__any_on+0x2a>
 8016c36:	2001      	movs	r0, #1
 8016c38:	e7f6      	b.n	8016c28 <__any_on+0x30>

08016c3a <_calloc_r>:
 8016c3a:	b538      	push	{r3, r4, r5, lr}
 8016c3c:	fb02 f401 	mul.w	r4, r2, r1
 8016c40:	4621      	mov	r1, r4
 8016c42:	f000 f857 	bl	8016cf4 <_malloc_r>
 8016c46:	4605      	mov	r5, r0
 8016c48:	b118      	cbz	r0, 8016c52 <_calloc_r+0x18>
 8016c4a:	4622      	mov	r2, r4
 8016c4c:	2100      	movs	r1, #0
 8016c4e:	f7fc fcaa 	bl	80135a6 <memset>
 8016c52:	4628      	mov	r0, r5
 8016c54:	bd38      	pop	{r3, r4, r5, pc}
	...

08016c58 <_free_r>:
 8016c58:	b538      	push	{r3, r4, r5, lr}
 8016c5a:	4605      	mov	r5, r0
 8016c5c:	2900      	cmp	r1, #0
 8016c5e:	d045      	beq.n	8016cec <_free_r+0x94>
 8016c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016c64:	1f0c      	subs	r4, r1, #4
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	bfb8      	it	lt
 8016c6a:	18e4      	addlt	r4, r4, r3
 8016c6c:	f000 fe30 	bl	80178d0 <__malloc_lock>
 8016c70:	4a1f      	ldr	r2, [pc, #124]	; (8016cf0 <_free_r+0x98>)
 8016c72:	6813      	ldr	r3, [r2, #0]
 8016c74:	4610      	mov	r0, r2
 8016c76:	b933      	cbnz	r3, 8016c86 <_free_r+0x2e>
 8016c78:	6063      	str	r3, [r4, #4]
 8016c7a:	6014      	str	r4, [r2, #0]
 8016c7c:	4628      	mov	r0, r5
 8016c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016c82:	f000 be26 	b.w	80178d2 <__malloc_unlock>
 8016c86:	42a3      	cmp	r3, r4
 8016c88:	d90c      	bls.n	8016ca4 <_free_r+0x4c>
 8016c8a:	6821      	ldr	r1, [r4, #0]
 8016c8c:	1862      	adds	r2, r4, r1
 8016c8e:	4293      	cmp	r3, r2
 8016c90:	bf04      	itt	eq
 8016c92:	681a      	ldreq	r2, [r3, #0]
 8016c94:	685b      	ldreq	r3, [r3, #4]
 8016c96:	6063      	str	r3, [r4, #4]
 8016c98:	bf04      	itt	eq
 8016c9a:	1852      	addeq	r2, r2, r1
 8016c9c:	6022      	streq	r2, [r4, #0]
 8016c9e:	6004      	str	r4, [r0, #0]
 8016ca0:	e7ec      	b.n	8016c7c <_free_r+0x24>
 8016ca2:	4613      	mov	r3, r2
 8016ca4:	685a      	ldr	r2, [r3, #4]
 8016ca6:	b10a      	cbz	r2, 8016cac <_free_r+0x54>
 8016ca8:	42a2      	cmp	r2, r4
 8016caa:	d9fa      	bls.n	8016ca2 <_free_r+0x4a>
 8016cac:	6819      	ldr	r1, [r3, #0]
 8016cae:	1858      	adds	r0, r3, r1
 8016cb0:	42a0      	cmp	r0, r4
 8016cb2:	d10b      	bne.n	8016ccc <_free_r+0x74>
 8016cb4:	6820      	ldr	r0, [r4, #0]
 8016cb6:	4401      	add	r1, r0
 8016cb8:	1858      	adds	r0, r3, r1
 8016cba:	4282      	cmp	r2, r0
 8016cbc:	6019      	str	r1, [r3, #0]
 8016cbe:	d1dd      	bne.n	8016c7c <_free_r+0x24>
 8016cc0:	6810      	ldr	r0, [r2, #0]
 8016cc2:	6852      	ldr	r2, [r2, #4]
 8016cc4:	605a      	str	r2, [r3, #4]
 8016cc6:	4401      	add	r1, r0
 8016cc8:	6019      	str	r1, [r3, #0]
 8016cca:	e7d7      	b.n	8016c7c <_free_r+0x24>
 8016ccc:	d902      	bls.n	8016cd4 <_free_r+0x7c>
 8016cce:	230c      	movs	r3, #12
 8016cd0:	602b      	str	r3, [r5, #0]
 8016cd2:	e7d3      	b.n	8016c7c <_free_r+0x24>
 8016cd4:	6820      	ldr	r0, [r4, #0]
 8016cd6:	1821      	adds	r1, r4, r0
 8016cd8:	428a      	cmp	r2, r1
 8016cda:	bf04      	itt	eq
 8016cdc:	6811      	ldreq	r1, [r2, #0]
 8016cde:	6852      	ldreq	r2, [r2, #4]
 8016ce0:	6062      	str	r2, [r4, #4]
 8016ce2:	bf04      	itt	eq
 8016ce4:	1809      	addeq	r1, r1, r0
 8016ce6:	6021      	streq	r1, [r4, #0]
 8016ce8:	605c      	str	r4, [r3, #4]
 8016cea:	e7c7      	b.n	8016c7c <_free_r+0x24>
 8016cec:	bd38      	pop	{r3, r4, r5, pc}
 8016cee:	bf00      	nop
 8016cf0:	2003940c 	.word	0x2003940c

08016cf4 <_malloc_r>:
 8016cf4:	b570      	push	{r4, r5, r6, lr}
 8016cf6:	1ccd      	adds	r5, r1, #3
 8016cf8:	f025 0503 	bic.w	r5, r5, #3
 8016cfc:	3508      	adds	r5, #8
 8016cfe:	2d0c      	cmp	r5, #12
 8016d00:	bf38      	it	cc
 8016d02:	250c      	movcc	r5, #12
 8016d04:	2d00      	cmp	r5, #0
 8016d06:	4606      	mov	r6, r0
 8016d08:	db01      	blt.n	8016d0e <_malloc_r+0x1a>
 8016d0a:	42a9      	cmp	r1, r5
 8016d0c:	d903      	bls.n	8016d16 <_malloc_r+0x22>
 8016d0e:	230c      	movs	r3, #12
 8016d10:	6033      	str	r3, [r6, #0]
 8016d12:	2000      	movs	r0, #0
 8016d14:	bd70      	pop	{r4, r5, r6, pc}
 8016d16:	f000 fddb 	bl	80178d0 <__malloc_lock>
 8016d1a:	4a21      	ldr	r2, [pc, #132]	; (8016da0 <_malloc_r+0xac>)
 8016d1c:	6814      	ldr	r4, [r2, #0]
 8016d1e:	4621      	mov	r1, r4
 8016d20:	b991      	cbnz	r1, 8016d48 <_malloc_r+0x54>
 8016d22:	4c20      	ldr	r4, [pc, #128]	; (8016da4 <_malloc_r+0xb0>)
 8016d24:	6823      	ldr	r3, [r4, #0]
 8016d26:	b91b      	cbnz	r3, 8016d30 <_malloc_r+0x3c>
 8016d28:	4630      	mov	r0, r6
 8016d2a:	f000 fc91 	bl	8017650 <_sbrk_r>
 8016d2e:	6020      	str	r0, [r4, #0]
 8016d30:	4629      	mov	r1, r5
 8016d32:	4630      	mov	r0, r6
 8016d34:	f000 fc8c 	bl	8017650 <_sbrk_r>
 8016d38:	1c43      	adds	r3, r0, #1
 8016d3a:	d124      	bne.n	8016d86 <_malloc_r+0x92>
 8016d3c:	230c      	movs	r3, #12
 8016d3e:	6033      	str	r3, [r6, #0]
 8016d40:	4630      	mov	r0, r6
 8016d42:	f000 fdc6 	bl	80178d2 <__malloc_unlock>
 8016d46:	e7e4      	b.n	8016d12 <_malloc_r+0x1e>
 8016d48:	680b      	ldr	r3, [r1, #0]
 8016d4a:	1b5b      	subs	r3, r3, r5
 8016d4c:	d418      	bmi.n	8016d80 <_malloc_r+0x8c>
 8016d4e:	2b0b      	cmp	r3, #11
 8016d50:	d90f      	bls.n	8016d72 <_malloc_r+0x7e>
 8016d52:	600b      	str	r3, [r1, #0]
 8016d54:	50cd      	str	r5, [r1, r3]
 8016d56:	18cc      	adds	r4, r1, r3
 8016d58:	4630      	mov	r0, r6
 8016d5a:	f000 fdba 	bl	80178d2 <__malloc_unlock>
 8016d5e:	f104 000b 	add.w	r0, r4, #11
 8016d62:	1d23      	adds	r3, r4, #4
 8016d64:	f020 0007 	bic.w	r0, r0, #7
 8016d68:	1ac3      	subs	r3, r0, r3
 8016d6a:	d0d3      	beq.n	8016d14 <_malloc_r+0x20>
 8016d6c:	425a      	negs	r2, r3
 8016d6e:	50e2      	str	r2, [r4, r3]
 8016d70:	e7d0      	b.n	8016d14 <_malloc_r+0x20>
 8016d72:	428c      	cmp	r4, r1
 8016d74:	684b      	ldr	r3, [r1, #4]
 8016d76:	bf16      	itet	ne
 8016d78:	6063      	strne	r3, [r4, #4]
 8016d7a:	6013      	streq	r3, [r2, #0]
 8016d7c:	460c      	movne	r4, r1
 8016d7e:	e7eb      	b.n	8016d58 <_malloc_r+0x64>
 8016d80:	460c      	mov	r4, r1
 8016d82:	6849      	ldr	r1, [r1, #4]
 8016d84:	e7cc      	b.n	8016d20 <_malloc_r+0x2c>
 8016d86:	1cc4      	adds	r4, r0, #3
 8016d88:	f024 0403 	bic.w	r4, r4, #3
 8016d8c:	42a0      	cmp	r0, r4
 8016d8e:	d005      	beq.n	8016d9c <_malloc_r+0xa8>
 8016d90:	1a21      	subs	r1, r4, r0
 8016d92:	4630      	mov	r0, r6
 8016d94:	f000 fc5c 	bl	8017650 <_sbrk_r>
 8016d98:	3001      	adds	r0, #1
 8016d9a:	d0cf      	beq.n	8016d3c <_malloc_r+0x48>
 8016d9c:	6025      	str	r5, [r4, #0]
 8016d9e:	e7db      	b.n	8016d58 <_malloc_r+0x64>
 8016da0:	2003940c 	.word	0x2003940c
 8016da4:	20039410 	.word	0x20039410

08016da8 <__ssputs_r>:
 8016da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016dac:	688e      	ldr	r6, [r1, #8]
 8016dae:	429e      	cmp	r6, r3
 8016db0:	4682      	mov	sl, r0
 8016db2:	460c      	mov	r4, r1
 8016db4:	4690      	mov	r8, r2
 8016db6:	4699      	mov	r9, r3
 8016db8:	d837      	bhi.n	8016e2a <__ssputs_r+0x82>
 8016dba:	898a      	ldrh	r2, [r1, #12]
 8016dbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016dc0:	d031      	beq.n	8016e26 <__ssputs_r+0x7e>
 8016dc2:	6825      	ldr	r5, [r4, #0]
 8016dc4:	6909      	ldr	r1, [r1, #16]
 8016dc6:	1a6f      	subs	r7, r5, r1
 8016dc8:	6965      	ldr	r5, [r4, #20]
 8016dca:	2302      	movs	r3, #2
 8016dcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016dd0:	fb95 f5f3 	sdiv	r5, r5, r3
 8016dd4:	f109 0301 	add.w	r3, r9, #1
 8016dd8:	443b      	add	r3, r7
 8016dda:	429d      	cmp	r5, r3
 8016ddc:	bf38      	it	cc
 8016dde:	461d      	movcc	r5, r3
 8016de0:	0553      	lsls	r3, r2, #21
 8016de2:	d530      	bpl.n	8016e46 <__ssputs_r+0x9e>
 8016de4:	4629      	mov	r1, r5
 8016de6:	f7ff ff85 	bl	8016cf4 <_malloc_r>
 8016dea:	4606      	mov	r6, r0
 8016dec:	b950      	cbnz	r0, 8016e04 <__ssputs_r+0x5c>
 8016dee:	230c      	movs	r3, #12
 8016df0:	f8ca 3000 	str.w	r3, [sl]
 8016df4:	89a3      	ldrh	r3, [r4, #12]
 8016df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016dfa:	81a3      	strh	r3, [r4, #12]
 8016dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8016e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e04:	463a      	mov	r2, r7
 8016e06:	6921      	ldr	r1, [r4, #16]
 8016e08:	f7fc fbc2 	bl	8013590 <memcpy>
 8016e0c:	89a3      	ldrh	r3, [r4, #12]
 8016e0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016e16:	81a3      	strh	r3, [r4, #12]
 8016e18:	6126      	str	r6, [r4, #16]
 8016e1a:	6165      	str	r5, [r4, #20]
 8016e1c:	443e      	add	r6, r7
 8016e1e:	1bed      	subs	r5, r5, r7
 8016e20:	6026      	str	r6, [r4, #0]
 8016e22:	60a5      	str	r5, [r4, #8]
 8016e24:	464e      	mov	r6, r9
 8016e26:	454e      	cmp	r6, r9
 8016e28:	d900      	bls.n	8016e2c <__ssputs_r+0x84>
 8016e2a:	464e      	mov	r6, r9
 8016e2c:	4632      	mov	r2, r6
 8016e2e:	4641      	mov	r1, r8
 8016e30:	6820      	ldr	r0, [r4, #0]
 8016e32:	f000 fd34 	bl	801789e <memmove>
 8016e36:	68a3      	ldr	r3, [r4, #8]
 8016e38:	1b9b      	subs	r3, r3, r6
 8016e3a:	60a3      	str	r3, [r4, #8]
 8016e3c:	6823      	ldr	r3, [r4, #0]
 8016e3e:	441e      	add	r6, r3
 8016e40:	6026      	str	r6, [r4, #0]
 8016e42:	2000      	movs	r0, #0
 8016e44:	e7dc      	b.n	8016e00 <__ssputs_r+0x58>
 8016e46:	462a      	mov	r2, r5
 8016e48:	f000 fd44 	bl	80178d4 <_realloc_r>
 8016e4c:	4606      	mov	r6, r0
 8016e4e:	2800      	cmp	r0, #0
 8016e50:	d1e2      	bne.n	8016e18 <__ssputs_r+0x70>
 8016e52:	6921      	ldr	r1, [r4, #16]
 8016e54:	4650      	mov	r0, sl
 8016e56:	f7ff feff 	bl	8016c58 <_free_r>
 8016e5a:	e7c8      	b.n	8016dee <__ssputs_r+0x46>

08016e5c <_svfiprintf_r>:
 8016e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e60:	461d      	mov	r5, r3
 8016e62:	898b      	ldrh	r3, [r1, #12]
 8016e64:	061f      	lsls	r7, r3, #24
 8016e66:	b09d      	sub	sp, #116	; 0x74
 8016e68:	4680      	mov	r8, r0
 8016e6a:	460c      	mov	r4, r1
 8016e6c:	4616      	mov	r6, r2
 8016e6e:	d50f      	bpl.n	8016e90 <_svfiprintf_r+0x34>
 8016e70:	690b      	ldr	r3, [r1, #16]
 8016e72:	b96b      	cbnz	r3, 8016e90 <_svfiprintf_r+0x34>
 8016e74:	2140      	movs	r1, #64	; 0x40
 8016e76:	f7ff ff3d 	bl	8016cf4 <_malloc_r>
 8016e7a:	6020      	str	r0, [r4, #0]
 8016e7c:	6120      	str	r0, [r4, #16]
 8016e7e:	b928      	cbnz	r0, 8016e8c <_svfiprintf_r+0x30>
 8016e80:	230c      	movs	r3, #12
 8016e82:	f8c8 3000 	str.w	r3, [r8]
 8016e86:	f04f 30ff 	mov.w	r0, #4294967295
 8016e8a:	e0c8      	b.n	801701e <_svfiprintf_r+0x1c2>
 8016e8c:	2340      	movs	r3, #64	; 0x40
 8016e8e:	6163      	str	r3, [r4, #20]
 8016e90:	2300      	movs	r3, #0
 8016e92:	9309      	str	r3, [sp, #36]	; 0x24
 8016e94:	2320      	movs	r3, #32
 8016e96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016e9a:	2330      	movs	r3, #48	; 0x30
 8016e9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016ea0:	9503      	str	r5, [sp, #12]
 8016ea2:	f04f 0b01 	mov.w	fp, #1
 8016ea6:	4637      	mov	r7, r6
 8016ea8:	463d      	mov	r5, r7
 8016eaa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016eae:	b10b      	cbz	r3, 8016eb4 <_svfiprintf_r+0x58>
 8016eb0:	2b25      	cmp	r3, #37	; 0x25
 8016eb2:	d13e      	bne.n	8016f32 <_svfiprintf_r+0xd6>
 8016eb4:	ebb7 0a06 	subs.w	sl, r7, r6
 8016eb8:	d00b      	beq.n	8016ed2 <_svfiprintf_r+0x76>
 8016eba:	4653      	mov	r3, sl
 8016ebc:	4632      	mov	r2, r6
 8016ebe:	4621      	mov	r1, r4
 8016ec0:	4640      	mov	r0, r8
 8016ec2:	f7ff ff71 	bl	8016da8 <__ssputs_r>
 8016ec6:	3001      	adds	r0, #1
 8016ec8:	f000 80a4 	beq.w	8017014 <_svfiprintf_r+0x1b8>
 8016ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ece:	4453      	add	r3, sl
 8016ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8016ed2:	783b      	ldrb	r3, [r7, #0]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	f000 809d 	beq.w	8017014 <_svfiprintf_r+0x1b8>
 8016eda:	2300      	movs	r3, #0
 8016edc:	f04f 32ff 	mov.w	r2, #4294967295
 8016ee0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016ee4:	9304      	str	r3, [sp, #16]
 8016ee6:	9307      	str	r3, [sp, #28]
 8016ee8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016eec:	931a      	str	r3, [sp, #104]	; 0x68
 8016eee:	462f      	mov	r7, r5
 8016ef0:	2205      	movs	r2, #5
 8016ef2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016ef6:	4850      	ldr	r0, [pc, #320]	; (8017038 <_svfiprintf_r+0x1dc>)
 8016ef8:	f7e9 f98a 	bl	8000210 <memchr>
 8016efc:	9b04      	ldr	r3, [sp, #16]
 8016efe:	b9d0      	cbnz	r0, 8016f36 <_svfiprintf_r+0xda>
 8016f00:	06d9      	lsls	r1, r3, #27
 8016f02:	bf44      	itt	mi
 8016f04:	2220      	movmi	r2, #32
 8016f06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016f0a:	071a      	lsls	r2, r3, #28
 8016f0c:	bf44      	itt	mi
 8016f0e:	222b      	movmi	r2, #43	; 0x2b
 8016f10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016f14:	782a      	ldrb	r2, [r5, #0]
 8016f16:	2a2a      	cmp	r2, #42	; 0x2a
 8016f18:	d015      	beq.n	8016f46 <_svfiprintf_r+0xea>
 8016f1a:	9a07      	ldr	r2, [sp, #28]
 8016f1c:	462f      	mov	r7, r5
 8016f1e:	2000      	movs	r0, #0
 8016f20:	250a      	movs	r5, #10
 8016f22:	4639      	mov	r1, r7
 8016f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016f28:	3b30      	subs	r3, #48	; 0x30
 8016f2a:	2b09      	cmp	r3, #9
 8016f2c:	d94d      	bls.n	8016fca <_svfiprintf_r+0x16e>
 8016f2e:	b1b8      	cbz	r0, 8016f60 <_svfiprintf_r+0x104>
 8016f30:	e00f      	b.n	8016f52 <_svfiprintf_r+0xf6>
 8016f32:	462f      	mov	r7, r5
 8016f34:	e7b8      	b.n	8016ea8 <_svfiprintf_r+0x4c>
 8016f36:	4a40      	ldr	r2, [pc, #256]	; (8017038 <_svfiprintf_r+0x1dc>)
 8016f38:	1a80      	subs	r0, r0, r2
 8016f3a:	fa0b f000 	lsl.w	r0, fp, r0
 8016f3e:	4318      	orrs	r0, r3
 8016f40:	9004      	str	r0, [sp, #16]
 8016f42:	463d      	mov	r5, r7
 8016f44:	e7d3      	b.n	8016eee <_svfiprintf_r+0x92>
 8016f46:	9a03      	ldr	r2, [sp, #12]
 8016f48:	1d11      	adds	r1, r2, #4
 8016f4a:	6812      	ldr	r2, [r2, #0]
 8016f4c:	9103      	str	r1, [sp, #12]
 8016f4e:	2a00      	cmp	r2, #0
 8016f50:	db01      	blt.n	8016f56 <_svfiprintf_r+0xfa>
 8016f52:	9207      	str	r2, [sp, #28]
 8016f54:	e004      	b.n	8016f60 <_svfiprintf_r+0x104>
 8016f56:	4252      	negs	r2, r2
 8016f58:	f043 0302 	orr.w	r3, r3, #2
 8016f5c:	9207      	str	r2, [sp, #28]
 8016f5e:	9304      	str	r3, [sp, #16]
 8016f60:	783b      	ldrb	r3, [r7, #0]
 8016f62:	2b2e      	cmp	r3, #46	; 0x2e
 8016f64:	d10c      	bne.n	8016f80 <_svfiprintf_r+0x124>
 8016f66:	787b      	ldrb	r3, [r7, #1]
 8016f68:	2b2a      	cmp	r3, #42	; 0x2a
 8016f6a:	d133      	bne.n	8016fd4 <_svfiprintf_r+0x178>
 8016f6c:	9b03      	ldr	r3, [sp, #12]
 8016f6e:	1d1a      	adds	r2, r3, #4
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	9203      	str	r2, [sp, #12]
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	bfb8      	it	lt
 8016f78:	f04f 33ff 	movlt.w	r3, #4294967295
 8016f7c:	3702      	adds	r7, #2
 8016f7e:	9305      	str	r3, [sp, #20]
 8016f80:	4d2e      	ldr	r5, [pc, #184]	; (801703c <_svfiprintf_r+0x1e0>)
 8016f82:	7839      	ldrb	r1, [r7, #0]
 8016f84:	2203      	movs	r2, #3
 8016f86:	4628      	mov	r0, r5
 8016f88:	f7e9 f942 	bl	8000210 <memchr>
 8016f8c:	b138      	cbz	r0, 8016f9e <_svfiprintf_r+0x142>
 8016f8e:	2340      	movs	r3, #64	; 0x40
 8016f90:	1b40      	subs	r0, r0, r5
 8016f92:	fa03 f000 	lsl.w	r0, r3, r0
 8016f96:	9b04      	ldr	r3, [sp, #16]
 8016f98:	4303      	orrs	r3, r0
 8016f9a:	3701      	adds	r7, #1
 8016f9c:	9304      	str	r3, [sp, #16]
 8016f9e:	7839      	ldrb	r1, [r7, #0]
 8016fa0:	4827      	ldr	r0, [pc, #156]	; (8017040 <_svfiprintf_r+0x1e4>)
 8016fa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016fa6:	2206      	movs	r2, #6
 8016fa8:	1c7e      	adds	r6, r7, #1
 8016faa:	f7e9 f931 	bl	8000210 <memchr>
 8016fae:	2800      	cmp	r0, #0
 8016fb0:	d038      	beq.n	8017024 <_svfiprintf_r+0x1c8>
 8016fb2:	4b24      	ldr	r3, [pc, #144]	; (8017044 <_svfiprintf_r+0x1e8>)
 8016fb4:	bb13      	cbnz	r3, 8016ffc <_svfiprintf_r+0x1a0>
 8016fb6:	9b03      	ldr	r3, [sp, #12]
 8016fb8:	3307      	adds	r3, #7
 8016fba:	f023 0307 	bic.w	r3, r3, #7
 8016fbe:	3308      	adds	r3, #8
 8016fc0:	9303      	str	r3, [sp, #12]
 8016fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fc4:	444b      	add	r3, r9
 8016fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8016fc8:	e76d      	b.n	8016ea6 <_svfiprintf_r+0x4a>
 8016fca:	fb05 3202 	mla	r2, r5, r2, r3
 8016fce:	2001      	movs	r0, #1
 8016fd0:	460f      	mov	r7, r1
 8016fd2:	e7a6      	b.n	8016f22 <_svfiprintf_r+0xc6>
 8016fd4:	2300      	movs	r3, #0
 8016fd6:	3701      	adds	r7, #1
 8016fd8:	9305      	str	r3, [sp, #20]
 8016fda:	4619      	mov	r1, r3
 8016fdc:	250a      	movs	r5, #10
 8016fde:	4638      	mov	r0, r7
 8016fe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016fe4:	3a30      	subs	r2, #48	; 0x30
 8016fe6:	2a09      	cmp	r2, #9
 8016fe8:	d903      	bls.n	8016ff2 <_svfiprintf_r+0x196>
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d0c8      	beq.n	8016f80 <_svfiprintf_r+0x124>
 8016fee:	9105      	str	r1, [sp, #20]
 8016ff0:	e7c6      	b.n	8016f80 <_svfiprintf_r+0x124>
 8016ff2:	fb05 2101 	mla	r1, r5, r1, r2
 8016ff6:	2301      	movs	r3, #1
 8016ff8:	4607      	mov	r7, r0
 8016ffa:	e7f0      	b.n	8016fde <_svfiprintf_r+0x182>
 8016ffc:	ab03      	add	r3, sp, #12
 8016ffe:	9300      	str	r3, [sp, #0]
 8017000:	4622      	mov	r2, r4
 8017002:	4b11      	ldr	r3, [pc, #68]	; (8017048 <_svfiprintf_r+0x1ec>)
 8017004:	a904      	add	r1, sp, #16
 8017006:	4640      	mov	r0, r8
 8017008:	f7fc fb6a 	bl	80136e0 <_printf_float>
 801700c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017010:	4681      	mov	r9, r0
 8017012:	d1d6      	bne.n	8016fc2 <_svfiprintf_r+0x166>
 8017014:	89a3      	ldrh	r3, [r4, #12]
 8017016:	065b      	lsls	r3, r3, #25
 8017018:	f53f af35 	bmi.w	8016e86 <_svfiprintf_r+0x2a>
 801701c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801701e:	b01d      	add	sp, #116	; 0x74
 8017020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017024:	ab03      	add	r3, sp, #12
 8017026:	9300      	str	r3, [sp, #0]
 8017028:	4622      	mov	r2, r4
 801702a:	4b07      	ldr	r3, [pc, #28]	; (8017048 <_svfiprintf_r+0x1ec>)
 801702c:	a904      	add	r1, sp, #16
 801702e:	4640      	mov	r0, r8
 8017030:	f7fc fe0c 	bl	8013c4c <_printf_i>
 8017034:	e7ea      	b.n	801700c <_svfiprintf_r+0x1b0>
 8017036:	bf00      	nop
 8017038:	0801831c 	.word	0x0801831c
 801703c:	08018322 	.word	0x08018322
 8017040:	08018326 	.word	0x08018326
 8017044:	080136e1 	.word	0x080136e1
 8017048:	08016da9 	.word	0x08016da9

0801704c <_sungetc_r>:
 801704c:	b538      	push	{r3, r4, r5, lr}
 801704e:	1c4b      	adds	r3, r1, #1
 8017050:	4614      	mov	r4, r2
 8017052:	d103      	bne.n	801705c <_sungetc_r+0x10>
 8017054:	f04f 35ff 	mov.w	r5, #4294967295
 8017058:	4628      	mov	r0, r5
 801705a:	bd38      	pop	{r3, r4, r5, pc}
 801705c:	8993      	ldrh	r3, [r2, #12]
 801705e:	f023 0320 	bic.w	r3, r3, #32
 8017062:	8193      	strh	r3, [r2, #12]
 8017064:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017066:	6852      	ldr	r2, [r2, #4]
 8017068:	b2cd      	uxtb	r5, r1
 801706a:	b18b      	cbz	r3, 8017090 <_sungetc_r+0x44>
 801706c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801706e:	4293      	cmp	r3, r2
 8017070:	dd08      	ble.n	8017084 <_sungetc_r+0x38>
 8017072:	6823      	ldr	r3, [r4, #0]
 8017074:	1e5a      	subs	r2, r3, #1
 8017076:	6022      	str	r2, [r4, #0]
 8017078:	f803 5c01 	strb.w	r5, [r3, #-1]
 801707c:	6863      	ldr	r3, [r4, #4]
 801707e:	3301      	adds	r3, #1
 8017080:	6063      	str	r3, [r4, #4]
 8017082:	e7e9      	b.n	8017058 <_sungetc_r+0xc>
 8017084:	4621      	mov	r1, r4
 8017086:	f000 fbc3 	bl	8017810 <__submore>
 801708a:	2800      	cmp	r0, #0
 801708c:	d0f1      	beq.n	8017072 <_sungetc_r+0x26>
 801708e:	e7e1      	b.n	8017054 <_sungetc_r+0x8>
 8017090:	6921      	ldr	r1, [r4, #16]
 8017092:	6823      	ldr	r3, [r4, #0]
 8017094:	b151      	cbz	r1, 80170ac <_sungetc_r+0x60>
 8017096:	4299      	cmp	r1, r3
 8017098:	d208      	bcs.n	80170ac <_sungetc_r+0x60>
 801709a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801709e:	42a9      	cmp	r1, r5
 80170a0:	d104      	bne.n	80170ac <_sungetc_r+0x60>
 80170a2:	3b01      	subs	r3, #1
 80170a4:	3201      	adds	r2, #1
 80170a6:	6023      	str	r3, [r4, #0]
 80170a8:	6062      	str	r2, [r4, #4]
 80170aa:	e7d5      	b.n	8017058 <_sungetc_r+0xc>
 80170ac:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80170b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80170b4:	6363      	str	r3, [r4, #52]	; 0x34
 80170b6:	2303      	movs	r3, #3
 80170b8:	63a3      	str	r3, [r4, #56]	; 0x38
 80170ba:	4623      	mov	r3, r4
 80170bc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80170c0:	6023      	str	r3, [r4, #0]
 80170c2:	2301      	movs	r3, #1
 80170c4:	e7dc      	b.n	8017080 <_sungetc_r+0x34>

080170c6 <__ssrefill_r>:
 80170c6:	b510      	push	{r4, lr}
 80170c8:	460c      	mov	r4, r1
 80170ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80170cc:	b169      	cbz	r1, 80170ea <__ssrefill_r+0x24>
 80170ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80170d2:	4299      	cmp	r1, r3
 80170d4:	d001      	beq.n	80170da <__ssrefill_r+0x14>
 80170d6:	f7ff fdbf 	bl	8016c58 <_free_r>
 80170da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80170dc:	6063      	str	r3, [r4, #4]
 80170de:	2000      	movs	r0, #0
 80170e0:	6360      	str	r0, [r4, #52]	; 0x34
 80170e2:	b113      	cbz	r3, 80170ea <__ssrefill_r+0x24>
 80170e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80170e6:	6023      	str	r3, [r4, #0]
 80170e8:	bd10      	pop	{r4, pc}
 80170ea:	6923      	ldr	r3, [r4, #16]
 80170ec:	6023      	str	r3, [r4, #0]
 80170ee:	2300      	movs	r3, #0
 80170f0:	6063      	str	r3, [r4, #4]
 80170f2:	89a3      	ldrh	r3, [r4, #12]
 80170f4:	f043 0320 	orr.w	r3, r3, #32
 80170f8:	81a3      	strh	r3, [r4, #12]
 80170fa:	f04f 30ff 	mov.w	r0, #4294967295
 80170fe:	e7f3      	b.n	80170e8 <__ssrefill_r+0x22>

08017100 <__ssvfiscanf_r>:
 8017100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017104:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8017108:	460c      	mov	r4, r1
 801710a:	2100      	movs	r1, #0
 801710c:	9144      	str	r1, [sp, #272]	; 0x110
 801710e:	9145      	str	r1, [sp, #276]	; 0x114
 8017110:	499f      	ldr	r1, [pc, #636]	; (8017390 <__ssvfiscanf_r+0x290>)
 8017112:	91a0      	str	r1, [sp, #640]	; 0x280
 8017114:	f10d 0804 	add.w	r8, sp, #4
 8017118:	499e      	ldr	r1, [pc, #632]	; (8017394 <__ssvfiscanf_r+0x294>)
 801711a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8017398 <__ssvfiscanf_r+0x298>
 801711e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017122:	4606      	mov	r6, r0
 8017124:	4692      	mov	sl, r2
 8017126:	91a1      	str	r1, [sp, #644]	; 0x284
 8017128:	9300      	str	r3, [sp, #0]
 801712a:	270a      	movs	r7, #10
 801712c:	f89a 3000 	ldrb.w	r3, [sl]
 8017130:	2b00      	cmp	r3, #0
 8017132:	f000 812a 	beq.w	801738a <__ssvfiscanf_r+0x28a>
 8017136:	4655      	mov	r5, sl
 8017138:	f7ff f948 	bl	80163cc <__locale_ctype_ptr>
 801713c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8017140:	4458      	add	r0, fp
 8017142:	7843      	ldrb	r3, [r0, #1]
 8017144:	f013 0308 	ands.w	r3, r3, #8
 8017148:	d01c      	beq.n	8017184 <__ssvfiscanf_r+0x84>
 801714a:	6863      	ldr	r3, [r4, #4]
 801714c:	2b00      	cmp	r3, #0
 801714e:	dd12      	ble.n	8017176 <__ssvfiscanf_r+0x76>
 8017150:	f7ff f93c 	bl	80163cc <__locale_ctype_ptr>
 8017154:	6823      	ldr	r3, [r4, #0]
 8017156:	781a      	ldrb	r2, [r3, #0]
 8017158:	4410      	add	r0, r2
 801715a:	7842      	ldrb	r2, [r0, #1]
 801715c:	0712      	lsls	r2, r2, #28
 801715e:	d401      	bmi.n	8017164 <__ssvfiscanf_r+0x64>
 8017160:	46aa      	mov	sl, r5
 8017162:	e7e3      	b.n	801712c <__ssvfiscanf_r+0x2c>
 8017164:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017166:	3201      	adds	r2, #1
 8017168:	9245      	str	r2, [sp, #276]	; 0x114
 801716a:	6862      	ldr	r2, [r4, #4]
 801716c:	3301      	adds	r3, #1
 801716e:	3a01      	subs	r2, #1
 8017170:	6062      	str	r2, [r4, #4]
 8017172:	6023      	str	r3, [r4, #0]
 8017174:	e7e9      	b.n	801714a <__ssvfiscanf_r+0x4a>
 8017176:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017178:	4621      	mov	r1, r4
 801717a:	4630      	mov	r0, r6
 801717c:	4798      	blx	r3
 801717e:	2800      	cmp	r0, #0
 8017180:	d0e6      	beq.n	8017150 <__ssvfiscanf_r+0x50>
 8017182:	e7ed      	b.n	8017160 <__ssvfiscanf_r+0x60>
 8017184:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8017188:	f040 8082 	bne.w	8017290 <__ssvfiscanf_r+0x190>
 801718c:	9343      	str	r3, [sp, #268]	; 0x10c
 801718e:	9341      	str	r3, [sp, #260]	; 0x104
 8017190:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8017194:	2b2a      	cmp	r3, #42	; 0x2a
 8017196:	d103      	bne.n	80171a0 <__ssvfiscanf_r+0xa0>
 8017198:	2310      	movs	r3, #16
 801719a:	9341      	str	r3, [sp, #260]	; 0x104
 801719c:	f10a 0502 	add.w	r5, sl, #2
 80171a0:	46aa      	mov	sl, r5
 80171a2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80171a6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80171aa:	2a09      	cmp	r2, #9
 80171ac:	d922      	bls.n	80171f4 <__ssvfiscanf_r+0xf4>
 80171ae:	2203      	movs	r2, #3
 80171b0:	4879      	ldr	r0, [pc, #484]	; (8017398 <__ssvfiscanf_r+0x298>)
 80171b2:	f7e9 f82d 	bl	8000210 <memchr>
 80171b6:	b138      	cbz	r0, 80171c8 <__ssvfiscanf_r+0xc8>
 80171b8:	eba0 0309 	sub.w	r3, r0, r9
 80171bc:	2001      	movs	r0, #1
 80171be:	4098      	lsls	r0, r3
 80171c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80171c2:	4318      	orrs	r0, r3
 80171c4:	9041      	str	r0, [sp, #260]	; 0x104
 80171c6:	46aa      	mov	sl, r5
 80171c8:	f89a 3000 	ldrb.w	r3, [sl]
 80171cc:	2b67      	cmp	r3, #103	; 0x67
 80171ce:	f10a 0501 	add.w	r5, sl, #1
 80171d2:	d82b      	bhi.n	801722c <__ssvfiscanf_r+0x12c>
 80171d4:	2b65      	cmp	r3, #101	; 0x65
 80171d6:	f080 809f 	bcs.w	8017318 <__ssvfiscanf_r+0x218>
 80171da:	2b47      	cmp	r3, #71	; 0x47
 80171dc:	d810      	bhi.n	8017200 <__ssvfiscanf_r+0x100>
 80171de:	2b45      	cmp	r3, #69	; 0x45
 80171e0:	f080 809a 	bcs.w	8017318 <__ssvfiscanf_r+0x218>
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d06c      	beq.n	80172c2 <__ssvfiscanf_r+0x1c2>
 80171e8:	2b25      	cmp	r3, #37	; 0x25
 80171ea:	d051      	beq.n	8017290 <__ssvfiscanf_r+0x190>
 80171ec:	2303      	movs	r3, #3
 80171ee:	9347      	str	r3, [sp, #284]	; 0x11c
 80171f0:	9742      	str	r7, [sp, #264]	; 0x108
 80171f2:	e027      	b.n	8017244 <__ssvfiscanf_r+0x144>
 80171f4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80171f6:	fb07 1303 	mla	r3, r7, r3, r1
 80171fa:	3b30      	subs	r3, #48	; 0x30
 80171fc:	9343      	str	r3, [sp, #268]	; 0x10c
 80171fe:	e7cf      	b.n	80171a0 <__ssvfiscanf_r+0xa0>
 8017200:	2b5b      	cmp	r3, #91	; 0x5b
 8017202:	d06a      	beq.n	80172da <__ssvfiscanf_r+0x1da>
 8017204:	d80c      	bhi.n	8017220 <__ssvfiscanf_r+0x120>
 8017206:	2b58      	cmp	r3, #88	; 0x58
 8017208:	d1f0      	bne.n	80171ec <__ssvfiscanf_r+0xec>
 801720a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801720c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017210:	9241      	str	r2, [sp, #260]	; 0x104
 8017212:	2210      	movs	r2, #16
 8017214:	9242      	str	r2, [sp, #264]	; 0x108
 8017216:	2b6e      	cmp	r3, #110	; 0x6e
 8017218:	bf8c      	ite	hi
 801721a:	2304      	movhi	r3, #4
 801721c:	2303      	movls	r3, #3
 801721e:	e010      	b.n	8017242 <__ssvfiscanf_r+0x142>
 8017220:	2b63      	cmp	r3, #99	; 0x63
 8017222:	d065      	beq.n	80172f0 <__ssvfiscanf_r+0x1f0>
 8017224:	2b64      	cmp	r3, #100	; 0x64
 8017226:	d1e1      	bne.n	80171ec <__ssvfiscanf_r+0xec>
 8017228:	9742      	str	r7, [sp, #264]	; 0x108
 801722a:	e7f4      	b.n	8017216 <__ssvfiscanf_r+0x116>
 801722c:	2b70      	cmp	r3, #112	; 0x70
 801722e:	d04b      	beq.n	80172c8 <__ssvfiscanf_r+0x1c8>
 8017230:	d826      	bhi.n	8017280 <__ssvfiscanf_r+0x180>
 8017232:	2b6e      	cmp	r3, #110	; 0x6e
 8017234:	d062      	beq.n	80172fc <__ssvfiscanf_r+0x1fc>
 8017236:	d84c      	bhi.n	80172d2 <__ssvfiscanf_r+0x1d2>
 8017238:	2b69      	cmp	r3, #105	; 0x69
 801723a:	d1d7      	bne.n	80171ec <__ssvfiscanf_r+0xec>
 801723c:	2300      	movs	r3, #0
 801723e:	9342      	str	r3, [sp, #264]	; 0x108
 8017240:	2303      	movs	r3, #3
 8017242:	9347      	str	r3, [sp, #284]	; 0x11c
 8017244:	6863      	ldr	r3, [r4, #4]
 8017246:	2b00      	cmp	r3, #0
 8017248:	dd68      	ble.n	801731c <__ssvfiscanf_r+0x21c>
 801724a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801724c:	0659      	lsls	r1, r3, #25
 801724e:	d407      	bmi.n	8017260 <__ssvfiscanf_r+0x160>
 8017250:	f7ff f8bc 	bl	80163cc <__locale_ctype_ptr>
 8017254:	6823      	ldr	r3, [r4, #0]
 8017256:	781a      	ldrb	r2, [r3, #0]
 8017258:	4410      	add	r0, r2
 801725a:	7842      	ldrb	r2, [r0, #1]
 801725c:	0712      	lsls	r2, r2, #28
 801725e:	d464      	bmi.n	801732a <__ssvfiscanf_r+0x22a>
 8017260:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017262:	2b02      	cmp	r3, #2
 8017264:	dc73      	bgt.n	801734e <__ssvfiscanf_r+0x24e>
 8017266:	466b      	mov	r3, sp
 8017268:	4622      	mov	r2, r4
 801726a:	a941      	add	r1, sp, #260	; 0x104
 801726c:	4630      	mov	r0, r6
 801726e:	f000 f897 	bl	80173a0 <_scanf_chars>
 8017272:	2801      	cmp	r0, #1
 8017274:	f000 8089 	beq.w	801738a <__ssvfiscanf_r+0x28a>
 8017278:	2802      	cmp	r0, #2
 801727a:	f47f af71 	bne.w	8017160 <__ssvfiscanf_r+0x60>
 801727e:	e01d      	b.n	80172bc <__ssvfiscanf_r+0x1bc>
 8017280:	2b75      	cmp	r3, #117	; 0x75
 8017282:	d0d1      	beq.n	8017228 <__ssvfiscanf_r+0x128>
 8017284:	2b78      	cmp	r3, #120	; 0x78
 8017286:	d0c0      	beq.n	801720a <__ssvfiscanf_r+0x10a>
 8017288:	2b73      	cmp	r3, #115	; 0x73
 801728a:	d1af      	bne.n	80171ec <__ssvfiscanf_r+0xec>
 801728c:	2302      	movs	r3, #2
 801728e:	e7d8      	b.n	8017242 <__ssvfiscanf_r+0x142>
 8017290:	6863      	ldr	r3, [r4, #4]
 8017292:	2b00      	cmp	r3, #0
 8017294:	dd0c      	ble.n	80172b0 <__ssvfiscanf_r+0x1b0>
 8017296:	6823      	ldr	r3, [r4, #0]
 8017298:	781a      	ldrb	r2, [r3, #0]
 801729a:	455a      	cmp	r2, fp
 801729c:	d175      	bne.n	801738a <__ssvfiscanf_r+0x28a>
 801729e:	3301      	adds	r3, #1
 80172a0:	6862      	ldr	r2, [r4, #4]
 80172a2:	6023      	str	r3, [r4, #0]
 80172a4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80172a6:	3a01      	subs	r2, #1
 80172a8:	3301      	adds	r3, #1
 80172aa:	6062      	str	r2, [r4, #4]
 80172ac:	9345      	str	r3, [sp, #276]	; 0x114
 80172ae:	e757      	b.n	8017160 <__ssvfiscanf_r+0x60>
 80172b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80172b2:	4621      	mov	r1, r4
 80172b4:	4630      	mov	r0, r6
 80172b6:	4798      	blx	r3
 80172b8:	2800      	cmp	r0, #0
 80172ba:	d0ec      	beq.n	8017296 <__ssvfiscanf_r+0x196>
 80172bc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80172be:	2800      	cmp	r0, #0
 80172c0:	d159      	bne.n	8017376 <__ssvfiscanf_r+0x276>
 80172c2:	f04f 30ff 	mov.w	r0, #4294967295
 80172c6:	e05c      	b.n	8017382 <__ssvfiscanf_r+0x282>
 80172c8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80172ca:	f042 0220 	orr.w	r2, r2, #32
 80172ce:	9241      	str	r2, [sp, #260]	; 0x104
 80172d0:	e79b      	b.n	801720a <__ssvfiscanf_r+0x10a>
 80172d2:	2308      	movs	r3, #8
 80172d4:	9342      	str	r3, [sp, #264]	; 0x108
 80172d6:	2304      	movs	r3, #4
 80172d8:	e7b3      	b.n	8017242 <__ssvfiscanf_r+0x142>
 80172da:	4629      	mov	r1, r5
 80172dc:	4640      	mov	r0, r8
 80172de:	f000 f9c7 	bl	8017670 <__sccl>
 80172e2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80172e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172e8:	9341      	str	r3, [sp, #260]	; 0x104
 80172ea:	4605      	mov	r5, r0
 80172ec:	2301      	movs	r3, #1
 80172ee:	e7a8      	b.n	8017242 <__ssvfiscanf_r+0x142>
 80172f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80172f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172f6:	9341      	str	r3, [sp, #260]	; 0x104
 80172f8:	2300      	movs	r3, #0
 80172fa:	e7a2      	b.n	8017242 <__ssvfiscanf_r+0x142>
 80172fc:	9841      	ldr	r0, [sp, #260]	; 0x104
 80172fe:	06c3      	lsls	r3, r0, #27
 8017300:	f53f af2e 	bmi.w	8017160 <__ssvfiscanf_r+0x60>
 8017304:	9b00      	ldr	r3, [sp, #0]
 8017306:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017308:	1d19      	adds	r1, r3, #4
 801730a:	9100      	str	r1, [sp, #0]
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	07c0      	lsls	r0, r0, #31
 8017310:	bf4c      	ite	mi
 8017312:	801a      	strhmi	r2, [r3, #0]
 8017314:	601a      	strpl	r2, [r3, #0]
 8017316:	e723      	b.n	8017160 <__ssvfiscanf_r+0x60>
 8017318:	2305      	movs	r3, #5
 801731a:	e792      	b.n	8017242 <__ssvfiscanf_r+0x142>
 801731c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801731e:	4621      	mov	r1, r4
 8017320:	4630      	mov	r0, r6
 8017322:	4798      	blx	r3
 8017324:	2800      	cmp	r0, #0
 8017326:	d090      	beq.n	801724a <__ssvfiscanf_r+0x14a>
 8017328:	e7c8      	b.n	80172bc <__ssvfiscanf_r+0x1bc>
 801732a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801732c:	3201      	adds	r2, #1
 801732e:	9245      	str	r2, [sp, #276]	; 0x114
 8017330:	6862      	ldr	r2, [r4, #4]
 8017332:	3a01      	subs	r2, #1
 8017334:	2a00      	cmp	r2, #0
 8017336:	6062      	str	r2, [r4, #4]
 8017338:	dd02      	ble.n	8017340 <__ssvfiscanf_r+0x240>
 801733a:	3301      	adds	r3, #1
 801733c:	6023      	str	r3, [r4, #0]
 801733e:	e787      	b.n	8017250 <__ssvfiscanf_r+0x150>
 8017340:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017342:	4621      	mov	r1, r4
 8017344:	4630      	mov	r0, r6
 8017346:	4798      	blx	r3
 8017348:	2800      	cmp	r0, #0
 801734a:	d081      	beq.n	8017250 <__ssvfiscanf_r+0x150>
 801734c:	e7b6      	b.n	80172bc <__ssvfiscanf_r+0x1bc>
 801734e:	2b04      	cmp	r3, #4
 8017350:	dc06      	bgt.n	8017360 <__ssvfiscanf_r+0x260>
 8017352:	466b      	mov	r3, sp
 8017354:	4622      	mov	r2, r4
 8017356:	a941      	add	r1, sp, #260	; 0x104
 8017358:	4630      	mov	r0, r6
 801735a:	f000 f885 	bl	8017468 <_scanf_i>
 801735e:	e788      	b.n	8017272 <__ssvfiscanf_r+0x172>
 8017360:	4b0e      	ldr	r3, [pc, #56]	; (801739c <__ssvfiscanf_r+0x29c>)
 8017362:	2b00      	cmp	r3, #0
 8017364:	f43f aefc 	beq.w	8017160 <__ssvfiscanf_r+0x60>
 8017368:	466b      	mov	r3, sp
 801736a:	4622      	mov	r2, r4
 801736c:	a941      	add	r1, sp, #260	; 0x104
 801736e:	4630      	mov	r0, r6
 8017370:	f7fc fd7e 	bl	8013e70 <_scanf_float>
 8017374:	e77d      	b.n	8017272 <__ssvfiscanf_r+0x172>
 8017376:	89a3      	ldrh	r3, [r4, #12]
 8017378:	f013 0f40 	tst.w	r3, #64	; 0x40
 801737c:	bf18      	it	ne
 801737e:	f04f 30ff 	movne.w	r0, #4294967295
 8017382:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8017386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801738a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801738c:	e7f9      	b.n	8017382 <__ssvfiscanf_r+0x282>
 801738e:	bf00      	nop
 8017390:	0801704d 	.word	0x0801704d
 8017394:	080170c7 	.word	0x080170c7
 8017398:	08018322 	.word	0x08018322
 801739c:	08013e71 	.word	0x08013e71

080173a0 <_scanf_chars>:
 80173a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173a4:	4615      	mov	r5, r2
 80173a6:	688a      	ldr	r2, [r1, #8]
 80173a8:	4680      	mov	r8, r0
 80173aa:	460c      	mov	r4, r1
 80173ac:	b932      	cbnz	r2, 80173bc <_scanf_chars+0x1c>
 80173ae:	698a      	ldr	r2, [r1, #24]
 80173b0:	2a00      	cmp	r2, #0
 80173b2:	bf14      	ite	ne
 80173b4:	f04f 32ff 	movne.w	r2, #4294967295
 80173b8:	2201      	moveq	r2, #1
 80173ba:	608a      	str	r2, [r1, #8]
 80173bc:	6822      	ldr	r2, [r4, #0]
 80173be:	06d1      	lsls	r1, r2, #27
 80173c0:	bf5f      	itttt	pl
 80173c2:	681a      	ldrpl	r2, [r3, #0]
 80173c4:	1d11      	addpl	r1, r2, #4
 80173c6:	6019      	strpl	r1, [r3, #0]
 80173c8:	6817      	ldrpl	r7, [r2, #0]
 80173ca:	2600      	movs	r6, #0
 80173cc:	69a3      	ldr	r3, [r4, #24]
 80173ce:	b1db      	cbz	r3, 8017408 <_scanf_chars+0x68>
 80173d0:	2b01      	cmp	r3, #1
 80173d2:	d107      	bne.n	80173e4 <_scanf_chars+0x44>
 80173d4:	682b      	ldr	r3, [r5, #0]
 80173d6:	6962      	ldr	r2, [r4, #20]
 80173d8:	781b      	ldrb	r3, [r3, #0]
 80173da:	5cd3      	ldrb	r3, [r2, r3]
 80173dc:	b9a3      	cbnz	r3, 8017408 <_scanf_chars+0x68>
 80173de:	2e00      	cmp	r6, #0
 80173e0:	d132      	bne.n	8017448 <_scanf_chars+0xa8>
 80173e2:	e006      	b.n	80173f2 <_scanf_chars+0x52>
 80173e4:	2b02      	cmp	r3, #2
 80173e6:	d007      	beq.n	80173f8 <_scanf_chars+0x58>
 80173e8:	2e00      	cmp	r6, #0
 80173ea:	d12d      	bne.n	8017448 <_scanf_chars+0xa8>
 80173ec:	69a3      	ldr	r3, [r4, #24]
 80173ee:	2b01      	cmp	r3, #1
 80173f0:	d12a      	bne.n	8017448 <_scanf_chars+0xa8>
 80173f2:	2001      	movs	r0, #1
 80173f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173f8:	f7fe ffe8 	bl	80163cc <__locale_ctype_ptr>
 80173fc:	682b      	ldr	r3, [r5, #0]
 80173fe:	781b      	ldrb	r3, [r3, #0]
 8017400:	4418      	add	r0, r3
 8017402:	7843      	ldrb	r3, [r0, #1]
 8017404:	071b      	lsls	r3, r3, #28
 8017406:	d4ef      	bmi.n	80173e8 <_scanf_chars+0x48>
 8017408:	6823      	ldr	r3, [r4, #0]
 801740a:	06da      	lsls	r2, r3, #27
 801740c:	bf5e      	ittt	pl
 801740e:	682b      	ldrpl	r3, [r5, #0]
 8017410:	781b      	ldrbpl	r3, [r3, #0]
 8017412:	703b      	strbpl	r3, [r7, #0]
 8017414:	682a      	ldr	r2, [r5, #0]
 8017416:	686b      	ldr	r3, [r5, #4]
 8017418:	f102 0201 	add.w	r2, r2, #1
 801741c:	602a      	str	r2, [r5, #0]
 801741e:	68a2      	ldr	r2, [r4, #8]
 8017420:	f103 33ff 	add.w	r3, r3, #4294967295
 8017424:	f102 32ff 	add.w	r2, r2, #4294967295
 8017428:	606b      	str	r3, [r5, #4]
 801742a:	f106 0601 	add.w	r6, r6, #1
 801742e:	bf58      	it	pl
 8017430:	3701      	addpl	r7, #1
 8017432:	60a2      	str	r2, [r4, #8]
 8017434:	b142      	cbz	r2, 8017448 <_scanf_chars+0xa8>
 8017436:	2b00      	cmp	r3, #0
 8017438:	dcc8      	bgt.n	80173cc <_scanf_chars+0x2c>
 801743a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801743e:	4629      	mov	r1, r5
 8017440:	4640      	mov	r0, r8
 8017442:	4798      	blx	r3
 8017444:	2800      	cmp	r0, #0
 8017446:	d0c1      	beq.n	80173cc <_scanf_chars+0x2c>
 8017448:	6823      	ldr	r3, [r4, #0]
 801744a:	f013 0310 	ands.w	r3, r3, #16
 801744e:	d105      	bne.n	801745c <_scanf_chars+0xbc>
 8017450:	68e2      	ldr	r2, [r4, #12]
 8017452:	3201      	adds	r2, #1
 8017454:	60e2      	str	r2, [r4, #12]
 8017456:	69a2      	ldr	r2, [r4, #24]
 8017458:	b102      	cbz	r2, 801745c <_scanf_chars+0xbc>
 801745a:	703b      	strb	r3, [r7, #0]
 801745c:	6923      	ldr	r3, [r4, #16]
 801745e:	441e      	add	r6, r3
 8017460:	6126      	str	r6, [r4, #16]
 8017462:	2000      	movs	r0, #0
 8017464:	e7c6      	b.n	80173f4 <_scanf_chars+0x54>
	...

08017468 <_scanf_i>:
 8017468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801746c:	469a      	mov	sl, r3
 801746e:	4b74      	ldr	r3, [pc, #464]	; (8017640 <_scanf_i+0x1d8>)
 8017470:	460c      	mov	r4, r1
 8017472:	4683      	mov	fp, r0
 8017474:	4616      	mov	r6, r2
 8017476:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801747a:	b087      	sub	sp, #28
 801747c:	ab03      	add	r3, sp, #12
 801747e:	68a7      	ldr	r7, [r4, #8]
 8017480:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017484:	4b6f      	ldr	r3, [pc, #444]	; (8017644 <_scanf_i+0x1dc>)
 8017486:	69a1      	ldr	r1, [r4, #24]
 8017488:	4a6f      	ldr	r2, [pc, #444]	; (8017648 <_scanf_i+0x1e0>)
 801748a:	2903      	cmp	r1, #3
 801748c:	bf08      	it	eq
 801748e:	461a      	moveq	r2, r3
 8017490:	1e7b      	subs	r3, r7, #1
 8017492:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8017496:	bf84      	itt	hi
 8017498:	f240 135d 	movwhi	r3, #349	; 0x15d
 801749c:	60a3      	strhi	r3, [r4, #8]
 801749e:	6823      	ldr	r3, [r4, #0]
 80174a0:	9200      	str	r2, [sp, #0]
 80174a2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80174a6:	bf88      	it	hi
 80174a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80174ac:	f104 091c 	add.w	r9, r4, #28
 80174b0:	6023      	str	r3, [r4, #0]
 80174b2:	bf8c      	ite	hi
 80174b4:	197f      	addhi	r7, r7, r5
 80174b6:	2700      	movls	r7, #0
 80174b8:	464b      	mov	r3, r9
 80174ba:	f04f 0800 	mov.w	r8, #0
 80174be:	9301      	str	r3, [sp, #4]
 80174c0:	6831      	ldr	r1, [r6, #0]
 80174c2:	ab03      	add	r3, sp, #12
 80174c4:	2202      	movs	r2, #2
 80174c6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80174ca:	7809      	ldrb	r1, [r1, #0]
 80174cc:	f7e8 fea0 	bl	8000210 <memchr>
 80174d0:	9b01      	ldr	r3, [sp, #4]
 80174d2:	b330      	cbz	r0, 8017522 <_scanf_i+0xba>
 80174d4:	f1b8 0f01 	cmp.w	r8, #1
 80174d8:	d15a      	bne.n	8017590 <_scanf_i+0x128>
 80174da:	6862      	ldr	r2, [r4, #4]
 80174dc:	b92a      	cbnz	r2, 80174ea <_scanf_i+0x82>
 80174de:	6822      	ldr	r2, [r4, #0]
 80174e0:	2108      	movs	r1, #8
 80174e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80174e6:	6061      	str	r1, [r4, #4]
 80174e8:	6022      	str	r2, [r4, #0]
 80174ea:	6822      	ldr	r2, [r4, #0]
 80174ec:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80174f0:	6022      	str	r2, [r4, #0]
 80174f2:	68a2      	ldr	r2, [r4, #8]
 80174f4:	1e51      	subs	r1, r2, #1
 80174f6:	60a1      	str	r1, [r4, #8]
 80174f8:	b19a      	cbz	r2, 8017522 <_scanf_i+0xba>
 80174fa:	6832      	ldr	r2, [r6, #0]
 80174fc:	1c51      	adds	r1, r2, #1
 80174fe:	6031      	str	r1, [r6, #0]
 8017500:	7812      	ldrb	r2, [r2, #0]
 8017502:	701a      	strb	r2, [r3, #0]
 8017504:	1c5d      	adds	r5, r3, #1
 8017506:	6873      	ldr	r3, [r6, #4]
 8017508:	3b01      	subs	r3, #1
 801750a:	2b00      	cmp	r3, #0
 801750c:	6073      	str	r3, [r6, #4]
 801750e:	dc07      	bgt.n	8017520 <_scanf_i+0xb8>
 8017510:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017514:	4631      	mov	r1, r6
 8017516:	4658      	mov	r0, fp
 8017518:	4798      	blx	r3
 801751a:	2800      	cmp	r0, #0
 801751c:	f040 8086 	bne.w	801762c <_scanf_i+0x1c4>
 8017520:	462b      	mov	r3, r5
 8017522:	f108 0801 	add.w	r8, r8, #1
 8017526:	f1b8 0f03 	cmp.w	r8, #3
 801752a:	d1c8      	bne.n	80174be <_scanf_i+0x56>
 801752c:	6862      	ldr	r2, [r4, #4]
 801752e:	b90a      	cbnz	r2, 8017534 <_scanf_i+0xcc>
 8017530:	220a      	movs	r2, #10
 8017532:	6062      	str	r2, [r4, #4]
 8017534:	6862      	ldr	r2, [r4, #4]
 8017536:	4945      	ldr	r1, [pc, #276]	; (801764c <_scanf_i+0x1e4>)
 8017538:	6960      	ldr	r0, [r4, #20]
 801753a:	9301      	str	r3, [sp, #4]
 801753c:	1a89      	subs	r1, r1, r2
 801753e:	f000 f897 	bl	8017670 <__sccl>
 8017542:	9b01      	ldr	r3, [sp, #4]
 8017544:	f04f 0800 	mov.w	r8, #0
 8017548:	461d      	mov	r5, r3
 801754a:	68a3      	ldr	r3, [r4, #8]
 801754c:	6822      	ldr	r2, [r4, #0]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d03a      	beq.n	80175c8 <_scanf_i+0x160>
 8017552:	6831      	ldr	r1, [r6, #0]
 8017554:	6960      	ldr	r0, [r4, #20]
 8017556:	f891 c000 	ldrb.w	ip, [r1]
 801755a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801755e:	2800      	cmp	r0, #0
 8017560:	d032      	beq.n	80175c8 <_scanf_i+0x160>
 8017562:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017566:	d121      	bne.n	80175ac <_scanf_i+0x144>
 8017568:	0510      	lsls	r0, r2, #20
 801756a:	d51f      	bpl.n	80175ac <_scanf_i+0x144>
 801756c:	f108 0801 	add.w	r8, r8, #1
 8017570:	b117      	cbz	r7, 8017578 <_scanf_i+0x110>
 8017572:	3301      	adds	r3, #1
 8017574:	3f01      	subs	r7, #1
 8017576:	60a3      	str	r3, [r4, #8]
 8017578:	6873      	ldr	r3, [r6, #4]
 801757a:	3b01      	subs	r3, #1
 801757c:	2b00      	cmp	r3, #0
 801757e:	6073      	str	r3, [r6, #4]
 8017580:	dd1b      	ble.n	80175ba <_scanf_i+0x152>
 8017582:	6833      	ldr	r3, [r6, #0]
 8017584:	3301      	adds	r3, #1
 8017586:	6033      	str	r3, [r6, #0]
 8017588:	68a3      	ldr	r3, [r4, #8]
 801758a:	3b01      	subs	r3, #1
 801758c:	60a3      	str	r3, [r4, #8]
 801758e:	e7dc      	b.n	801754a <_scanf_i+0xe2>
 8017590:	f1b8 0f02 	cmp.w	r8, #2
 8017594:	d1ad      	bne.n	80174f2 <_scanf_i+0x8a>
 8017596:	6822      	ldr	r2, [r4, #0]
 8017598:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801759c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80175a0:	d1bf      	bne.n	8017522 <_scanf_i+0xba>
 80175a2:	2110      	movs	r1, #16
 80175a4:	6061      	str	r1, [r4, #4]
 80175a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80175aa:	e7a1      	b.n	80174f0 <_scanf_i+0x88>
 80175ac:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80175b0:	6022      	str	r2, [r4, #0]
 80175b2:	780b      	ldrb	r3, [r1, #0]
 80175b4:	702b      	strb	r3, [r5, #0]
 80175b6:	3501      	adds	r5, #1
 80175b8:	e7de      	b.n	8017578 <_scanf_i+0x110>
 80175ba:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80175be:	4631      	mov	r1, r6
 80175c0:	4658      	mov	r0, fp
 80175c2:	4798      	blx	r3
 80175c4:	2800      	cmp	r0, #0
 80175c6:	d0df      	beq.n	8017588 <_scanf_i+0x120>
 80175c8:	6823      	ldr	r3, [r4, #0]
 80175ca:	05d9      	lsls	r1, r3, #23
 80175cc:	d50c      	bpl.n	80175e8 <_scanf_i+0x180>
 80175ce:	454d      	cmp	r5, r9
 80175d0:	d908      	bls.n	80175e4 <_scanf_i+0x17c>
 80175d2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80175d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80175da:	4632      	mov	r2, r6
 80175dc:	4658      	mov	r0, fp
 80175de:	4798      	blx	r3
 80175e0:	1e6f      	subs	r7, r5, #1
 80175e2:	463d      	mov	r5, r7
 80175e4:	454d      	cmp	r5, r9
 80175e6:	d029      	beq.n	801763c <_scanf_i+0x1d4>
 80175e8:	6822      	ldr	r2, [r4, #0]
 80175ea:	f012 0210 	ands.w	r2, r2, #16
 80175ee:	d113      	bne.n	8017618 <_scanf_i+0x1b0>
 80175f0:	702a      	strb	r2, [r5, #0]
 80175f2:	6863      	ldr	r3, [r4, #4]
 80175f4:	9e00      	ldr	r6, [sp, #0]
 80175f6:	4649      	mov	r1, r9
 80175f8:	4658      	mov	r0, fp
 80175fa:	47b0      	blx	r6
 80175fc:	f8da 3000 	ldr.w	r3, [sl]
 8017600:	6821      	ldr	r1, [r4, #0]
 8017602:	1d1a      	adds	r2, r3, #4
 8017604:	f8ca 2000 	str.w	r2, [sl]
 8017608:	f011 0f20 	tst.w	r1, #32
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	d010      	beq.n	8017632 <_scanf_i+0x1ca>
 8017610:	6018      	str	r0, [r3, #0]
 8017612:	68e3      	ldr	r3, [r4, #12]
 8017614:	3301      	adds	r3, #1
 8017616:	60e3      	str	r3, [r4, #12]
 8017618:	eba5 0509 	sub.w	r5, r5, r9
 801761c:	44a8      	add	r8, r5
 801761e:	6925      	ldr	r5, [r4, #16]
 8017620:	4445      	add	r5, r8
 8017622:	6125      	str	r5, [r4, #16]
 8017624:	2000      	movs	r0, #0
 8017626:	b007      	add	sp, #28
 8017628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801762c:	f04f 0800 	mov.w	r8, #0
 8017630:	e7ca      	b.n	80175c8 <_scanf_i+0x160>
 8017632:	07ca      	lsls	r2, r1, #31
 8017634:	bf4c      	ite	mi
 8017636:	8018      	strhmi	r0, [r3, #0]
 8017638:	6018      	strpl	r0, [r3, #0]
 801763a:	e7ea      	b.n	8017612 <_scanf_i+0x1aa>
 801763c:	2001      	movs	r0, #1
 801763e:	e7f2      	b.n	8017626 <_scanf_i+0x1be>
 8017640:	08017e7c 	.word	0x08017e7c
 8017644:	08015089 	.word	0x08015089
 8017648:	080177ed 	.word	0x080177ed
 801764c:	0801833d 	.word	0x0801833d

08017650 <_sbrk_r>:
 8017650:	b538      	push	{r3, r4, r5, lr}
 8017652:	4c06      	ldr	r4, [pc, #24]	; (801766c <_sbrk_r+0x1c>)
 8017654:	2300      	movs	r3, #0
 8017656:	4605      	mov	r5, r0
 8017658:	4608      	mov	r0, r1
 801765a:	6023      	str	r3, [r4, #0]
 801765c:	f7ee fe1c 	bl	8006298 <_sbrk>
 8017660:	1c43      	adds	r3, r0, #1
 8017662:	d102      	bne.n	801766a <_sbrk_r+0x1a>
 8017664:	6823      	ldr	r3, [r4, #0]
 8017666:	b103      	cbz	r3, 801766a <_sbrk_r+0x1a>
 8017668:	602b      	str	r3, [r5, #0]
 801766a:	bd38      	pop	{r3, r4, r5, pc}
 801766c:	2003ddac 	.word	0x2003ddac

08017670 <__sccl>:
 8017670:	b570      	push	{r4, r5, r6, lr}
 8017672:	780b      	ldrb	r3, [r1, #0]
 8017674:	2b5e      	cmp	r3, #94	; 0x5e
 8017676:	bf13      	iteet	ne
 8017678:	1c4a      	addne	r2, r1, #1
 801767a:	1c8a      	addeq	r2, r1, #2
 801767c:	784b      	ldrbeq	r3, [r1, #1]
 801767e:	2100      	movne	r1, #0
 8017680:	bf08      	it	eq
 8017682:	2101      	moveq	r1, #1
 8017684:	1e44      	subs	r4, r0, #1
 8017686:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801768a:	f804 1f01 	strb.w	r1, [r4, #1]!
 801768e:	42ac      	cmp	r4, r5
 8017690:	d1fb      	bne.n	801768a <__sccl+0x1a>
 8017692:	b913      	cbnz	r3, 801769a <__sccl+0x2a>
 8017694:	3a01      	subs	r2, #1
 8017696:	4610      	mov	r0, r2
 8017698:	bd70      	pop	{r4, r5, r6, pc}
 801769a:	f081 0401 	eor.w	r4, r1, #1
 801769e:	54c4      	strb	r4, [r0, r3]
 80176a0:	1c51      	adds	r1, r2, #1
 80176a2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80176a6:	2d2d      	cmp	r5, #45	; 0x2d
 80176a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80176ac:	460a      	mov	r2, r1
 80176ae:	d006      	beq.n	80176be <__sccl+0x4e>
 80176b0:	2d5d      	cmp	r5, #93	; 0x5d
 80176b2:	d0f0      	beq.n	8017696 <__sccl+0x26>
 80176b4:	b90d      	cbnz	r5, 80176ba <__sccl+0x4a>
 80176b6:	4632      	mov	r2, r6
 80176b8:	e7ed      	b.n	8017696 <__sccl+0x26>
 80176ba:	462b      	mov	r3, r5
 80176bc:	e7ef      	b.n	801769e <__sccl+0x2e>
 80176be:	780e      	ldrb	r6, [r1, #0]
 80176c0:	2e5d      	cmp	r6, #93	; 0x5d
 80176c2:	d0fa      	beq.n	80176ba <__sccl+0x4a>
 80176c4:	42b3      	cmp	r3, r6
 80176c6:	dcf8      	bgt.n	80176ba <__sccl+0x4a>
 80176c8:	3301      	adds	r3, #1
 80176ca:	429e      	cmp	r6, r3
 80176cc:	54c4      	strb	r4, [r0, r3]
 80176ce:	dcfb      	bgt.n	80176c8 <__sccl+0x58>
 80176d0:	3102      	adds	r1, #2
 80176d2:	e7e6      	b.n	80176a2 <__sccl+0x32>

080176d4 <strncmp>:
 80176d4:	b510      	push	{r4, lr}
 80176d6:	b16a      	cbz	r2, 80176f4 <strncmp+0x20>
 80176d8:	3901      	subs	r1, #1
 80176da:	1884      	adds	r4, r0, r2
 80176dc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80176e0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80176e4:	4293      	cmp	r3, r2
 80176e6:	d103      	bne.n	80176f0 <strncmp+0x1c>
 80176e8:	42a0      	cmp	r0, r4
 80176ea:	d001      	beq.n	80176f0 <strncmp+0x1c>
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d1f5      	bne.n	80176dc <strncmp+0x8>
 80176f0:	1a98      	subs	r0, r3, r2
 80176f2:	bd10      	pop	{r4, pc}
 80176f4:	4610      	mov	r0, r2
 80176f6:	e7fc      	b.n	80176f2 <strncmp+0x1e>

080176f8 <_strtoul_l.isra.0>:
 80176f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176fc:	4680      	mov	r8, r0
 80176fe:	4689      	mov	r9, r1
 8017700:	4692      	mov	sl, r2
 8017702:	461e      	mov	r6, r3
 8017704:	460f      	mov	r7, r1
 8017706:	463d      	mov	r5, r7
 8017708:	9808      	ldr	r0, [sp, #32]
 801770a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801770e:	f7fe fe59 	bl	80163c4 <__locale_ctype_ptr_l>
 8017712:	4420      	add	r0, r4
 8017714:	7843      	ldrb	r3, [r0, #1]
 8017716:	f013 0308 	ands.w	r3, r3, #8
 801771a:	d130      	bne.n	801777e <_strtoul_l.isra.0+0x86>
 801771c:	2c2d      	cmp	r4, #45	; 0x2d
 801771e:	d130      	bne.n	8017782 <_strtoul_l.isra.0+0x8a>
 8017720:	787c      	ldrb	r4, [r7, #1]
 8017722:	1cbd      	adds	r5, r7, #2
 8017724:	2101      	movs	r1, #1
 8017726:	2e00      	cmp	r6, #0
 8017728:	d05c      	beq.n	80177e4 <_strtoul_l.isra.0+0xec>
 801772a:	2e10      	cmp	r6, #16
 801772c:	d109      	bne.n	8017742 <_strtoul_l.isra.0+0x4a>
 801772e:	2c30      	cmp	r4, #48	; 0x30
 8017730:	d107      	bne.n	8017742 <_strtoul_l.isra.0+0x4a>
 8017732:	782b      	ldrb	r3, [r5, #0]
 8017734:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017738:	2b58      	cmp	r3, #88	; 0x58
 801773a:	d14e      	bne.n	80177da <_strtoul_l.isra.0+0xe2>
 801773c:	786c      	ldrb	r4, [r5, #1]
 801773e:	2610      	movs	r6, #16
 8017740:	3502      	adds	r5, #2
 8017742:	f04f 32ff 	mov.w	r2, #4294967295
 8017746:	2300      	movs	r3, #0
 8017748:	fbb2 f2f6 	udiv	r2, r2, r6
 801774c:	fb06 fc02 	mul.w	ip, r6, r2
 8017750:	ea6f 0c0c 	mvn.w	ip, ip
 8017754:	4618      	mov	r0, r3
 8017756:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801775a:	2f09      	cmp	r7, #9
 801775c:	d817      	bhi.n	801778e <_strtoul_l.isra.0+0x96>
 801775e:	463c      	mov	r4, r7
 8017760:	42a6      	cmp	r6, r4
 8017762:	dd23      	ble.n	80177ac <_strtoul_l.isra.0+0xb4>
 8017764:	2b00      	cmp	r3, #0
 8017766:	db1e      	blt.n	80177a6 <_strtoul_l.isra.0+0xae>
 8017768:	4282      	cmp	r2, r0
 801776a:	d31c      	bcc.n	80177a6 <_strtoul_l.isra.0+0xae>
 801776c:	d101      	bne.n	8017772 <_strtoul_l.isra.0+0x7a>
 801776e:	45a4      	cmp	ip, r4
 8017770:	db19      	blt.n	80177a6 <_strtoul_l.isra.0+0xae>
 8017772:	fb00 4006 	mla	r0, r0, r6, r4
 8017776:	2301      	movs	r3, #1
 8017778:	f815 4b01 	ldrb.w	r4, [r5], #1
 801777c:	e7eb      	b.n	8017756 <_strtoul_l.isra.0+0x5e>
 801777e:	462f      	mov	r7, r5
 8017780:	e7c1      	b.n	8017706 <_strtoul_l.isra.0+0xe>
 8017782:	2c2b      	cmp	r4, #43	; 0x2b
 8017784:	bf04      	itt	eq
 8017786:	1cbd      	addeq	r5, r7, #2
 8017788:	787c      	ldrbeq	r4, [r7, #1]
 801778a:	4619      	mov	r1, r3
 801778c:	e7cb      	b.n	8017726 <_strtoul_l.isra.0+0x2e>
 801778e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017792:	2f19      	cmp	r7, #25
 8017794:	d801      	bhi.n	801779a <_strtoul_l.isra.0+0xa2>
 8017796:	3c37      	subs	r4, #55	; 0x37
 8017798:	e7e2      	b.n	8017760 <_strtoul_l.isra.0+0x68>
 801779a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801779e:	2f19      	cmp	r7, #25
 80177a0:	d804      	bhi.n	80177ac <_strtoul_l.isra.0+0xb4>
 80177a2:	3c57      	subs	r4, #87	; 0x57
 80177a4:	e7dc      	b.n	8017760 <_strtoul_l.isra.0+0x68>
 80177a6:	f04f 33ff 	mov.w	r3, #4294967295
 80177aa:	e7e5      	b.n	8017778 <_strtoul_l.isra.0+0x80>
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	da09      	bge.n	80177c4 <_strtoul_l.isra.0+0xcc>
 80177b0:	2322      	movs	r3, #34	; 0x22
 80177b2:	f8c8 3000 	str.w	r3, [r8]
 80177b6:	f04f 30ff 	mov.w	r0, #4294967295
 80177ba:	f1ba 0f00 	cmp.w	sl, #0
 80177be:	d107      	bne.n	80177d0 <_strtoul_l.isra.0+0xd8>
 80177c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177c4:	b101      	cbz	r1, 80177c8 <_strtoul_l.isra.0+0xd0>
 80177c6:	4240      	negs	r0, r0
 80177c8:	f1ba 0f00 	cmp.w	sl, #0
 80177cc:	d0f8      	beq.n	80177c0 <_strtoul_l.isra.0+0xc8>
 80177ce:	b10b      	cbz	r3, 80177d4 <_strtoul_l.isra.0+0xdc>
 80177d0:	f105 39ff 	add.w	r9, r5, #4294967295
 80177d4:	f8ca 9000 	str.w	r9, [sl]
 80177d8:	e7f2      	b.n	80177c0 <_strtoul_l.isra.0+0xc8>
 80177da:	2430      	movs	r4, #48	; 0x30
 80177dc:	2e00      	cmp	r6, #0
 80177de:	d1b0      	bne.n	8017742 <_strtoul_l.isra.0+0x4a>
 80177e0:	2608      	movs	r6, #8
 80177e2:	e7ae      	b.n	8017742 <_strtoul_l.isra.0+0x4a>
 80177e4:	2c30      	cmp	r4, #48	; 0x30
 80177e6:	d0a4      	beq.n	8017732 <_strtoul_l.isra.0+0x3a>
 80177e8:	260a      	movs	r6, #10
 80177ea:	e7aa      	b.n	8017742 <_strtoul_l.isra.0+0x4a>

080177ec <_strtoul_r>:
 80177ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80177ee:	4c06      	ldr	r4, [pc, #24]	; (8017808 <_strtoul_r+0x1c>)
 80177f0:	4d06      	ldr	r5, [pc, #24]	; (801780c <_strtoul_r+0x20>)
 80177f2:	6824      	ldr	r4, [r4, #0]
 80177f4:	6a24      	ldr	r4, [r4, #32]
 80177f6:	2c00      	cmp	r4, #0
 80177f8:	bf08      	it	eq
 80177fa:	462c      	moveq	r4, r5
 80177fc:	9400      	str	r4, [sp, #0]
 80177fe:	f7ff ff7b 	bl	80176f8 <_strtoul_l.isra.0>
 8017802:	b003      	add	sp, #12
 8017804:	bd30      	pop	{r4, r5, pc}
 8017806:	bf00      	nop
 8017808:	2000000c 	.word	0x2000000c
 801780c:	20000070 	.word	0x20000070

08017810 <__submore>:
 8017810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017814:	460c      	mov	r4, r1
 8017816:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801781c:	4299      	cmp	r1, r3
 801781e:	d11d      	bne.n	801785c <__submore+0x4c>
 8017820:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017824:	f7ff fa66 	bl	8016cf4 <_malloc_r>
 8017828:	b918      	cbnz	r0, 8017832 <__submore+0x22>
 801782a:	f04f 30ff 	mov.w	r0, #4294967295
 801782e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017836:	63a3      	str	r3, [r4, #56]	; 0x38
 8017838:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801783c:	6360      	str	r0, [r4, #52]	; 0x34
 801783e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017842:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017846:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801784a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801784e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017852:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017856:	6020      	str	r0, [r4, #0]
 8017858:	2000      	movs	r0, #0
 801785a:	e7e8      	b.n	801782e <__submore+0x1e>
 801785c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801785e:	0077      	lsls	r7, r6, #1
 8017860:	463a      	mov	r2, r7
 8017862:	f000 f837 	bl	80178d4 <_realloc_r>
 8017866:	4605      	mov	r5, r0
 8017868:	2800      	cmp	r0, #0
 801786a:	d0de      	beq.n	801782a <__submore+0x1a>
 801786c:	eb00 0806 	add.w	r8, r0, r6
 8017870:	4601      	mov	r1, r0
 8017872:	4632      	mov	r2, r6
 8017874:	4640      	mov	r0, r8
 8017876:	f7fb fe8b 	bl	8013590 <memcpy>
 801787a:	f8c4 8000 	str.w	r8, [r4]
 801787e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017882:	e7e9      	b.n	8017858 <__submore+0x48>

08017884 <__ascii_wctomb>:
 8017884:	b149      	cbz	r1, 801789a <__ascii_wctomb+0x16>
 8017886:	2aff      	cmp	r2, #255	; 0xff
 8017888:	bf85      	ittet	hi
 801788a:	238a      	movhi	r3, #138	; 0x8a
 801788c:	6003      	strhi	r3, [r0, #0]
 801788e:	700a      	strbls	r2, [r1, #0]
 8017890:	f04f 30ff 	movhi.w	r0, #4294967295
 8017894:	bf98      	it	ls
 8017896:	2001      	movls	r0, #1
 8017898:	4770      	bx	lr
 801789a:	4608      	mov	r0, r1
 801789c:	4770      	bx	lr

0801789e <memmove>:
 801789e:	4288      	cmp	r0, r1
 80178a0:	b510      	push	{r4, lr}
 80178a2:	eb01 0302 	add.w	r3, r1, r2
 80178a6:	d807      	bhi.n	80178b8 <memmove+0x1a>
 80178a8:	1e42      	subs	r2, r0, #1
 80178aa:	4299      	cmp	r1, r3
 80178ac:	d00a      	beq.n	80178c4 <memmove+0x26>
 80178ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80178b2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80178b6:	e7f8      	b.n	80178aa <memmove+0xc>
 80178b8:	4283      	cmp	r3, r0
 80178ba:	d9f5      	bls.n	80178a8 <memmove+0xa>
 80178bc:	1881      	adds	r1, r0, r2
 80178be:	1ad2      	subs	r2, r2, r3
 80178c0:	42d3      	cmn	r3, r2
 80178c2:	d100      	bne.n	80178c6 <memmove+0x28>
 80178c4:	bd10      	pop	{r4, pc}
 80178c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80178ca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80178ce:	e7f7      	b.n	80178c0 <memmove+0x22>

080178d0 <__malloc_lock>:
 80178d0:	4770      	bx	lr

080178d2 <__malloc_unlock>:
 80178d2:	4770      	bx	lr

080178d4 <_realloc_r>:
 80178d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178d6:	4607      	mov	r7, r0
 80178d8:	4614      	mov	r4, r2
 80178da:	460e      	mov	r6, r1
 80178dc:	b921      	cbnz	r1, 80178e8 <_realloc_r+0x14>
 80178de:	4611      	mov	r1, r2
 80178e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80178e4:	f7ff ba06 	b.w	8016cf4 <_malloc_r>
 80178e8:	b922      	cbnz	r2, 80178f4 <_realloc_r+0x20>
 80178ea:	f7ff f9b5 	bl	8016c58 <_free_r>
 80178ee:	4625      	mov	r5, r4
 80178f0:	4628      	mov	r0, r5
 80178f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80178f4:	f000 f814 	bl	8017920 <_malloc_usable_size_r>
 80178f8:	42a0      	cmp	r0, r4
 80178fa:	d20f      	bcs.n	801791c <_realloc_r+0x48>
 80178fc:	4621      	mov	r1, r4
 80178fe:	4638      	mov	r0, r7
 8017900:	f7ff f9f8 	bl	8016cf4 <_malloc_r>
 8017904:	4605      	mov	r5, r0
 8017906:	2800      	cmp	r0, #0
 8017908:	d0f2      	beq.n	80178f0 <_realloc_r+0x1c>
 801790a:	4631      	mov	r1, r6
 801790c:	4622      	mov	r2, r4
 801790e:	f7fb fe3f 	bl	8013590 <memcpy>
 8017912:	4631      	mov	r1, r6
 8017914:	4638      	mov	r0, r7
 8017916:	f7ff f99f 	bl	8016c58 <_free_r>
 801791a:	e7e9      	b.n	80178f0 <_realloc_r+0x1c>
 801791c:	4635      	mov	r5, r6
 801791e:	e7e7      	b.n	80178f0 <_realloc_r+0x1c>

08017920 <_malloc_usable_size_r>:
 8017920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017924:	1f18      	subs	r0, r3, #4
 8017926:	2b00      	cmp	r3, #0
 8017928:	bfbc      	itt	lt
 801792a:	580b      	ldrlt	r3, [r1, r0]
 801792c:	18c0      	addlt	r0, r0, r3
 801792e:	4770      	bx	lr

08017930 <_init>:
 8017930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017932:	bf00      	nop
 8017934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017936:	bc08      	pop	{r3}
 8017938:	469e      	mov	lr, r3
 801793a:	4770      	bx	lr

0801793c <_fini>:
 801793c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801793e:	bf00      	nop
 8017940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017942:	bc08      	pop	{r3}
 8017944:	469e      	mov	lr, r3
 8017946:	4770      	bx	lr
